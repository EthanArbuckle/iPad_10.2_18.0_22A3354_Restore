double sub_239C1AEE0(uint64_t a1, double a2, double a3, float64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  float64_t *v13;
  float64x2_t v14;
  double v15;

  v4 = *(_QWORD *)(a1 + 384);
  v5 = *(unsigned int *)(v4 + 8);
  if (!(_DWORD)v5)
    return 0.0;
  v6 = 0;
  v7 = *(_QWORD *)(v4 + 88);
  result = 0.0;
  do
  {
    v9 = *(unsigned int **)(v7 + 24 * v6);
    v10 = *(unsigned int **)(v7 + 24 * v6 + 8);
    if (v10 != v9)
    {
      while (1)
      {
        v11 = *v9;
        if (v6 <= v11)
          break;
        v9 += 4;
        if (v9 == v10)
          goto LABEL_3;
      }
      if (v9 != v10 && v6 == v11)
      {
        v12 = *(_QWORD *)(v4 + 16);
        if (v12)
        {
          v13 = (float64_t *)(v12 + 8 * *((_QWORD *)v9 + 1));
          v14.f64[0] = *v13;
          a4.f64[0] = v13[8];
          v14.f64[1] = v13[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v15 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v14), a4));
          if (result < v15)
            result = v15;
        }
      }
    }
LABEL_3:
    ++v6;
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_239C1AFA4(uint64_t a1)
{
  __n128 v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  __n128 v6;
  float64x2_t v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  _QWORD *v21;
  __int128 v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  _DWORD *v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  float64x2_t v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  unsigned int *v47;
  unsigned int *v48;
  int v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  std::bad_alloc *exception;
  std::bad_alloc *v60;
  void *v61[2];
  unsigned int v62;
  void *v63[2];
  int32x2_t v64;
  _QWORD v65[2];
  unsigned int v66;
  void *memptr;
  float64x2_t v68;
  float64_t v69;
  float64x2_t v70;
  uint64_t v71;
  char v72[8];
  _QWORD *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_239C1D078(a1))
  {
    v9 = 1;
  }
  else if (*(_BYTE *)(a1 + 313))
  {
    v9 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 384);
    v11 = *(void **)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24) - (_QWORD)v11;
    if (v12 >= 1)
      bzero(v11, 8 * (((unint64_t)v12 >> 3) - ((unint64_t)v12 > 7)) + 8);
    v13 = *(unsigned int *)(a1 + 368);
    if ((_DWORD)v13)
      bzero(*(void **)(a1 + 352), 8 * v13);
    v14 = *(_DWORD *)(a1 + 344);
    if (v14 == 1)
    {
      v15 = *(unsigned int *)(a1 + 824);
      if ((_DWORD)v15)
        bzero(*(void **)(a1 + 808), 8 * v15);
    }
    if (((*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) & 0x3FFFFFFFCLL) != 0)
    {
      kdebug_trace();
      sub_239C1F378(a1 + 352, a1 + 688);
      v16 = *(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728);
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * ((v16 >> 1) + (v16 >> 2)) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
      v17 = (char *)memptr;
      if (!memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v60 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v60, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v18 = *(_DWORD **)(a1 + 728);
      v19 = *(_DWORD **)(a1 + 736);
      if (v18 == v19)
      {
        v27 = *(_QWORD *)(a1 + 728);
      }
      else
      {
        v20 = 0;
        v21 = *(_QWORD **)(a1 + 48);
        do
        {
          if (*((_DWORD *)v21 + 8) == *v18)
          {
            v24 = v21;
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v21[1];
              if (v25)
              {
                do
                {
                  v24 = v25;
                  v25 = (_QWORD *)*v25;
                }
                while (v25);
              }
              else
              {
                do
                {
                  v24 = (_QWORD *)v21[2];
                  v26 = *v24 == (_QWORD)v21;
                  v21 = v24;
                }
                while (!v26);
              }
              v21 = v24;
            }
            while (*((_DWORD *)v24 + 8) != *v18);
          }
          v22 = *(_OWORD *)(v24 + 7);
          v23 = &v17[8 * v20];
          *((_QWORD *)v23 + 2) = v24[9];
          *(_OWORD *)v23 = v22;
          v20 += 3;
          ++v18;
          v21 = v24;
        }
        while (v18 != v19);
        v27 = *(_QWORD *)(a1 + 736);
        v18 = *(_DWORD **)(a1 + 728);
      }
      if (((v27 - (_QWORD)v18) & 0x3FFFFFFFCLL) != 0)
      {
        v63[1] = 0;
        v64 = 0;
        v63[0] = 0;
        v28 = *(_DWORD **)(a1 + 720);
        v29 = v28[2];
        v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 48))(v28);
        v31 = *(_DWORD **)(a1 + 720);
        v32 = v31[3];
        v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 56))(v31);
        v64 = (int32x2_t)(v30 * v29);
        v64.i32[1] = v33 * v32;
        sub_23945215C((uint64_t)v63, (v33 * v32) * (unint64_t)(v30 * v29));
        if (v64.i32[1] * v64.i32[0])
          bzero(v63[0], 8 * (v64.i32[1] * v64.i32[0]));
        (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 720) + 64))(*(_QWORD *)(a1 + 720), v63, 0);
        sub_239C1BE20((uint64_t *)v63);
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 656) + 32))(a1 + 656);
        v61[0] = 0;
        v61[1] = 0;
        v62 = *(_DWORD *)(a1 + 680);
        sub_23945215C((uint64_t)v61, v62);
        if (v62)
          bzero(v61[0], 8 * v62);
        v37 = *(_DWORD **)(a1 + 728);
        v38 = *(_DWORD **)(a1 + 736);
        if (v37 != v38)
        {
          v39 = 0;
          v40 = *(_QWORD *)(a1 + 664);
          v41 = *(_QWORD **)(v34 + 8);
          do
          {
            if (*((_DWORD *)v41 + 8) == *v37)
            {
              v45 = v41;
            }
            else
            {
              do
              {
                v46 = (_QWORD *)v41[1];
                if (v46)
                {
                  do
                  {
                    v45 = v46;
                    v46 = (_QWORD *)*v46;
                  }
                  while (v46);
                }
                else
                {
                  do
                  {
                    v45 = (_QWORD *)v41[2];
                    v26 = *v45 == (_QWORD)v41;
                    v41 = v45;
                  }
                  while (!v26);
                }
                v41 = v45;
              }
              while (*((_DWORD *)v45 + 8) != *v37);
            }
            v42 = 8 * v39;
            v35.f64[0] = *(float64_t *)(v40 + v42 + 16);
            v36.f64[0] = (float64_t)v45[9];
            v35 = vsubq_f64(v36, v35);
            v43 = vsubq_f64(*(float64x2_t *)(v45 + 7), *(float64x2_t *)(v40 + v42));
            v44 = (char *)v61[0] + v42;
            *(float64x2_t *)v44 = v43;
            *((_QWORD *)v44 + 2) = *(_QWORD *)&v35.f64[0];
            v39 += 3;
            ++v37;
            v41 = v45;
          }
          while (v37 != v38);
          v47 = *(unsigned int **)(a1 + 728);
          v48 = *(unsigned int **)(a1 + 736);
          if (v47 != v48)
          {
            v49 = 0;
            v50 = 0;
            v51 = *(unsigned int **)(a1 + 392);
            do
            {
              if (*v51 < *v47)
              {
                do
                {
                  v52 = v51[1];
                  ++v51;
                  ++v49;
                }
                while (v52 < *v47);
              }
              v53 = *(_DWORD *)(a1 + 716) + 3 * v50;
              v65[0] = vrev64_s32(v64);
              v65[1] = (char *)v63[0] + 8 * v53;
              v66 = v53;
              v54 = *(_QWORD *)(a1 + 352) + 8 * (*(_DWORD *)(a1 + 380) + 3 * v49);
              v55 = *(float64x2_t *)v54;
              v71 = *(_QWORD *)(v54 + 16);
              v70 = v55;
              memptr = &v70;
              v73 = v65;
              v74 = v61;
              v75 = 0x3FF0000000000000;
              sub_239C25740((uint64_t)&v68, (uint64_t)v72);
              v56.f64[0] = *((float64_t *)memptr + 2);
              v57.f64[0] = v69;
              *(float64x2_t *)v54 = vsubq_f64(*(float64x2_t *)memptr, v68);
              *(_QWORD *)(v54 + 16) = *(_OWORD *)&vsubq_f64(v56, v57);
              ++v47;
              ++v50;
            }
            while (v47 != v48);
          }
        }
        free(v61[0]);
        free(v63[0]);
      }
      free(v17);
      kdebug_trace();
      v14 = *(_DWORD *)(a1 + 344);
    }
    v2.n128_u64[0] = *(_QWORD *)(a1 + 416);
    sub_239C1F7C4((uint64_t *)(a1 + 424), *(_BYTE *)(a1 + 328), a1 + 8, 2, v14, *(double *)(a1 + 336), v2, v3, v4, v5, v6, v7, v8);
    v9 = 0;
    *(_WORD *)(a1 + 313) = 1;
  }
  kdebug_trace();
  return v9;
}

void sub_239C1B508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  free(a10);
  free(a13);
  free(v13);
  sub_239C1F794();
  sub_239C22568();
  _Unwind_Resume(a1);
}

double sub_239C1B574(uint64_t a1)
{
  unint64_t v1;
  char *v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  _QWORD *v7;
  __int128 v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float64x2_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  int v33;
  double *v34;
  double v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  std::bad_alloc *exception;
  std::bad_alloc *v51;
  void **v52;
  void *v53[2];
  uint64_t v54;
  void *v55[2];
  unsigned int v56;
  char v57;
  void ***v58;
  void **v59;
  uint64_t v60;
  double v61[3];
  void *memptr[5];

  memptr[4] = *(void **)MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728);
  if ((v1 & 0x3FFFFFFFCLL) != 0)
  {
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (8 * ((v1 >> 1) + (v1 >> 2)) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v3 = (char *)memptr[0];
    if (!memptr[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v51 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v51, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v4 = *(_DWORD **)(a1 + 728);
    v5 = *(_DWORD **)(a1 + 736);
    if (v4 == v5)
    {
      v13 = *(_QWORD *)(a1 + 728);
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD **)(a1 + 48);
      do
      {
        if (*((_DWORD *)v7 + 8) == *v4)
        {
          v10 = v7;
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v7[1];
            if (v11)
            {
              do
              {
                v10 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v7[2];
                v12 = *v10 == (_QWORD)v7;
                v7 = v10;
              }
              while (!v12);
            }
            v7 = v10;
          }
          while (*((_DWORD *)v10 + 8) != *v4);
        }
        v8 = *(_OWORD *)(v10 + 7);
        v9 = &v3[8 * v6];
        *((_QWORD *)v9 + 2) = v10[9];
        *(_OWORD *)v9 = v8;
        v6 += 3;
        ++v4;
        v7 = v10;
      }
      while (v4 != v5);
      v13 = *(_QWORD *)(a1 + 736);
      v4 = *(_DWORD **)(a1 + 728);
    }
    if (((v13 - (_QWORD)v4) & 0x3FFFFFFFCLL) == 0)
    {
      v14 = 0.0;
LABEL_48:
      free(v3);
      return v14;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 656) + 32))(a1 + 656);
    v55[0] = 0;
    v55[1] = 0;
    v56 = *(_DWORD *)(a1 + 680);
    sub_23945215C((uint64_t)v55, v56);
    if (v56)
      bzero(v55[0], 8 * v56);
    v18 = *(_DWORD **)(a1 + 728);
    v19 = *(_DWORD **)(a1 + 736);
    if (v18 != v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(a1 + 664);
      v22 = *(_QWORD **)(v15 + 8);
      do
      {
        if (*((_DWORD *)v22 + 8) == *v18)
        {
          v26 = v22;
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v22[1];
            if (v27)
            {
              do
              {
                v26 = v27;
                v27 = (_QWORD *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v26 = (_QWORD *)v22[2];
                v12 = *v26 == (_QWORD)v22;
                v22 = v26;
              }
              while (!v12);
            }
            v22 = v26;
          }
          while (*((_DWORD *)v26 + 8) != *v18);
        }
        v23 = 8 * v20;
        v16.f64[0] = *(float64_t *)(v21 + v23 + 16);
        v17.f64[0] = (float64_t)v26[9];
        v16 = vsubq_f64(v17, v16);
        v24 = vsubq_f64(*(float64x2_t *)(v26 + 7), *(float64x2_t *)(v21 + v23));
        v25 = (char *)v55[0] + v23;
        *(float64x2_t *)v25 = v24;
        *((_QWORD *)v25 + 2) = *(_QWORD *)&v16.f64[0];
        v20 += 3;
        ++v18;
        v22 = v26;
      }
      while (v18 != v19);
    }
    v53[1] = 0;
    v54 = 0;
    v53[0] = 0;
    v28 = *(_DWORD **)(a1 + 720);
    v29 = v28[2];
    v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 48))(v28);
    v31 = *(_DWORD **)(a1 + 720);
    v32 = v31[3];
    v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 56))(v31);
    v54 = (v30 * v29);
    HIDWORD(v54) = v33 * v32;
    sub_23945215C((uint64_t)v53, (v33 * v32) * (unint64_t)(v30 * v29));
    if (HIDWORD(v54) * (_DWORD)v54)
      bzero(v53[0], 8 * (HIDWORD(v54) * v54));
    (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 720) + 64))(*(_QWORD *)(a1 + 720), v53, 0);
    sub_239C1BE20((uint64_t *)v53);
    if (v56)
    {
      v34 = *(double **)(a1 + 688);
      v35 = *(double *)v55[0] * *v34;
      if (v56 != 1)
      {
        v36 = (double *)((char *)v55[0] + 8);
        v37 = (v56 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v37 >= 3)
        {
          v38 = v37 + 1;
          v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v36 = (double *)((char *)v36 + v39);
          v40 = (float64x2_t *)(v34 + 3);
          v41 = (float64x2_t *)((char *)v55[0] + 24);
          v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v43 = vmulq_f64(v41[-1], v40[-1]);
            v44 = vmulq_f64(*v41, *v40);
            v35 = v35 + v43.f64[0] + v43.f64[1] + v44.f64[0] + v44.f64[1];
            v40 += 2;
            v41 += 2;
            v42 -= 4;
          }
          while (v42);
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
          v34 = (double *)((char *)v34 + v39);
        }
        v45 = v34 + 1;
        do
        {
          v46 = *v36++;
          v47 = v46;
          v48 = *v45++;
          v35 = v35 + v47 * v48;
        }
        while (v36 != (double *)((char *)v55[0] + 8 * v56));
      }
    }
    else
    {
      v35 = 0.0;
    }
LABEL_47:
    v52 = v55;
    v58 = &v52;
    v59 = v53;
    v60 = 0x3FE0000000000000;
    memptr[1] = &v57;
    memptr[2] = v55;
    memptr[3] = (void *)0x3FF0000000000000;
    sub_239C1C794(v61, (double *)memptr);
    v14 = v61[0] - v35;
    free(v53[0]);
    free(v55[0]);
    goto LABEL_48;
  }
  return 0.0;
}

void sub_239C1B9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  free(a10);
  free(a13);
  free(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_239C1B9F0(uint64_t result)
{
  _QWORD *v1;
  double v2;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD **)(result + 48);
  v2 = 0.0;
  if (v1 != (_QWORD *)(result + 56))
  {
    do
    {
      if ((*((_BYTE *)v1 + 92) & 2) == 0 && *((_BYTE *)v1 + 44))
      {
        _Q2 = *(_OWORD *)(v1 + 7);
        _D4 = v1[8];
        __asm { FMLA            D3, D4, V2.D[1] }
        v2 = v2 + _D3 + *((double *)v1 + 9) * *((double *)v1 + 9);
      }
      v10 = (_QWORD *)v1[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v1[2];
          _ZF = *v11 == (_QWORD)v1;
          v1 = v11;
        }
        while (!_ZF);
      }
      v1 = v11;
    }
    while (v11 != (_QWORD *)(result + 56));
  }
  return result;
}

uint64_t sub_239C1BA70(uint64_t a1, _QWORD *a2)
{
  double *v4;
  uint64_t *i;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t result;

  kdebug_trace();
  v4 = *(double **)(a1 + 528);
  for (i = *(uint64_t **)(a1 + 536); v4 != (double *)i; v4 += 7)
  {
    v8 = *v4;
    if (*(_DWORD *)(*(_QWORD *)v4 + 32) != -1)
    {
      v9 = v4[2];
      v10 = *((_QWORD *)v4 + 5);
      if (v10)
      {
        v11 = *((_QWORD *)v4 + 6);
        v12 = *((_QWORD *)v4 + 3);
        v13 = *(_QWORD *)(v11 + 56);
        v14 = (unsigned int *)(v13 + 16 * (v10 + v12));
        v15 = (unsigned int *)(v13 + 16 * v12);
        v16 = *(_QWORD *)(v11 + 24);
        do
        {
          v17 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 632) + 4 * *v15);
          v18 = (double *)(v16 + 8 * *((_QWORD *)v15 + 1));
          _Q2 = *(_OWORD *)v18;
          _D4 = *(_QWORD *)(v17 + 8);
          __asm { FMLA            D5, D4, V2.D[1] }
          v9 = v9 - (_D5 + v18[2] * *(double *)(v17 + 16));
          v15 += 4;
        }
        while (v15 != v14);
      }
      v6 = v9 * v4[1];
      *(_QWORD *)(*(_QWORD *)&v8 + 48) = *(_QWORD *)(*(_QWORD *)&v8 + 16);
      *(_BYTE *)(*(_QWORD *)&v8 + 56) = *(_BYTE *)(*(_QWORD *)&v8 + 24);
      v7 = *v4;
      *(double *)(*(_QWORD *)&v7 + 16) = v6 + *(double *)(*(_QWORD *)v4 + 16);
      *(_BYTE *)(*(_QWORD *)&v7 + 24) = 1;
    }
  }
  kdebug_trace();
  kdebug_trace();
  v28 = *(_QWORD *)(a1 + 424);
  v29 = *(_QWORD **)(v28 + 8);
  v30 = (_QWORD *)(v28 + 16);
  if (v29 != v30)
  {
    do
    {
      v31 = *((unsigned int *)v29 + 22);
      if ((_DWORD)v31 != -1)
      {
        v29[15] = v29[9];
        *(_OWORD *)(v29 + 13) = *(_OWORD *)(v29 + 7);
        *((_BYTE *)v29 + 128) = *((_BYTE *)v29 + 80);
        v32 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 632) + 4 * v31);
        v26.f64[0] = *(float64_t *)(v32 + 16);
        v27.f64[0] = (float64_t)v29[9];
        v26 = vaddq_f64(v26, v27);
        *(float64x2_t *)(v29 + 7) = vaddq_f64(*(float64x2_t *)v32, *(float64x2_t *)(v29 + 7));
        v29[9] = *(_QWORD *)&v26.f64[0];
        *((_BYTE *)v29 + 80) = 1;
      }
      v33 = (_QWORD *)v29[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v29[2];
          _ZF = *v34 == (_QWORD)v29;
          v29 = v34;
        }
        while (!_ZF);
      }
      v29 = v34;
    }
    while (v34 != v30);
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 314) = *(_BYTE *)(a1 + 313);
  *(_WORD *)(a1 + 312) = 0;
  *(_WORD *)(a1 + 315) = 0;
  return result;
}

uint64_t sub_239C1BCB8(uint64_t result, double a2)
{
  if (*(double *)(result + 336) != a2)
    *(_BYTE *)(result + 313) = 0;
  *(double *)(result + 336) = a2;
  return result;
}

uint64_t sub_239C1BCD8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 752) = a2;
  return result;
}

uint64_t sub_239C1BCE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 752);
}

BOOL sub_239C1BCE8(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_239C1BD00(uint64_t a1)
{
  return a1 + 688;
}

uint64_t sub_239C1BD08(uint64_t a1)
{
  return a1 + 688;
}

__n128 sub_239C1BD10(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 368);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 376);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 380);
    v10 = 4 * v7;
    do
    {
      v11 = (__n128 *)(*(_QWORD *)(a1 + 352) + 8 * v9);
      v12 = (__n128 *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 632) + v8));
      result = *v11;
      v12[1].n128_u64[0] = v11[1].n128_u64[0];
      *v12 = result;
      v8 += 4;
      v9 += 3;
    }
    while (v10 != v8);
  }
  return result;
}

__n128 sub_239C1BD98(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 824);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 832);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 836);
    v10 = 4 * v7;
    do
    {
      v11 = (__n128 *)(*(_QWORD *)(a1 + 808) + 8 * v9);
      v12 = (__n128 *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 632) + v8));
      result = *v11;
      v12[1].n128_u64[0] = v11[1].n128_u64[0];
      *v12 = result;
      v8 += 4;
      v9 += 3;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_239C1BE20(uint64_t *a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  unsigned int i;
  int v9;
  int64x2_t *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  uint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  uint64_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  uint64_t v27;
  int64x2_t *v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  uint64_t v33;
  int64x2_t *v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  uint64_t v39;
  int64x2_t *v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  int64x2_t *v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  uint64_t v50;
  int64x2_t *v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  int64x2_t *v77;
  int64x2_t *v78;
  int64x2_t *v79;
  int64x2_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int64x2_t *v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t *v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  unsigned int v94;
  int64x2_t *v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t *v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t *v103;
  int64x2_t v104;
  int64x2_t *v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t *v109;
  int64x2_t v110;
  int64x2_t *v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t *v118;
  int64x2_t *v119;
  int64x2_t *v120;
  int64x2_t *v121;
  int64x2_t *v122;
  int64x2_t *v123;
  int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  int32x4_t v132;
  int v133;
  unsigned int v134;
  int v135;
  _QWORD *v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  int v160;
  unsigned int v161;
  unint64_t v162;
  int32x4_t v163;
  int32x4_t v164;
  unsigned int v165;
  unsigned int v166;
  unint64_t v167;
  _QWORD *v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  BOOL v175;
  uint64_t v176;
  int v177;
  int v178;
  unsigned int v179;
  int32x4_t v180;
  int32x4_t v181;
  unsigned int v182;
  unsigned int v183;
  unint64_t v184;
  _QWORD *v185;
  _QWORD *v186;
  unint64_t v187;
  int v188;
  unint64_t v189;
  int v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  char *v195;
  uint64_t v196;
  size_t v197;
  unsigned int v198;
  uint64_t v199;
  std::bad_alloc *exception;
  std::bad_alloc *v201;
  int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  int64x2_t v209;
  unsigned int v210;
  unsigned int v211;
  int64x2_t v212;
  void *__src;
  size_t v214;
  unint64_t v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  int v219;
  uint64_t v220;
  unsigned int v221;
  void *memptr;

  v2 = *((_DWORD *)a1 + 4);
  v3 = v2;
  v206 = v2;
  if (v2 >= 8)
  {
    v6 = 0;
    v3 = v2 & 7;
    v7 = v2 & 0xFFFFFFF8;
    for (i = 8; i <= v2; i += 8)
    {
      v9 = 0;
      do
      {
        v81 = *((unsigned int *)a1 + 4);
        v82 = v81 * v6;
        v83 = *a1;
        v84 = (int64x2_t *)(*a1 + 8 * (v6 + v9 + v81 * v6));
        if (v9)
        {
          v10 = (int64x2_t *)(v83 + 8 * (v6 + v81 * (v6 + v9)));
          v12 = v10[2];
          v11 = v10[3];
          v14 = *v10;
          v13 = v10[1];
          v15 = 8 * v81;
          v16 = (int64x2_t *)((char *)v10 + 8 * v81);
          v18 = v16[2];
          v17 = v16[3];
          v20 = *v16;
          v19 = v16[1];
          v21 = v81;
          v22 = &v10[v81];
          v24 = v22[2];
          v23 = v22[3];
          v26 = *v22;
          v25 = v22[1];
          v27 = 24 * v81;
          v28 = (int64x2_t *)((char *)v10 + 24 * v81);
          v30 = v28[2];
          v29 = v28[3];
          v32 = *v28;
          v31 = v28[1];
          v33 = 2 * v81;
          v34 = &v10[2 * v81];
          v36 = v34[2];
          v35 = v34[3];
          v38 = *v34;
          v37 = v34[1];
          v39 = 40 * v81;
          v40 = (int64x2_t *)((char *)v10 + 40 * v81);
          v42 = v40[2];
          v41 = v40[3];
          v44 = *v40;
          v43 = v40[1];
          v45 = 3 * v81;
          v46 = &v10[3 * v81];
          v48 = v46[2];
          v47 = v46[3];
          v49 = v46[1];
          v50 = 7 * v81;
          v51 = (int64x2_t *)((char *)v10 + 8 * v50);
          v209 = vzip2q_s64(v14, v20);
          v212 = vzip1q_s64(v14, v20);
          v52 = vzip1q_s64(v26, v32);
          v26.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
          v26.i64[1] = v32.i64[1];
          v53 = vzip1q_s64(v38, v44);
          v38.i64[0] = vdupq_laneq_s64(v38, 1).u64[0];
          v38.i64[1] = v44.i64[1];
          v54 = vzip1q_s64(*v46, *v51);
          v55.i64[0] = vdupq_laneq_s64(*v46, 1).u64[0];
          v55.i64[1] = v51->i64[1];
          v56 = vzip1q_s64(v13, v19);
          v57 = vzip2q_s64(v13, v19);
          v58 = vzip1q_s64(v25, v31);
          v25.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
          v25.i64[1] = v31.i64[1];
          v59 = vzip1q_s64(v37, v43);
          v37.i64[0] = vdupq_laneq_s64(v37, 1).u64[0];
          v37.i64[1] = v43.i64[1];
          v43.i64[0] = vdupq_laneq_s64(v49, 1).u64[0];
          v60 = vzip1q_s64(v49, v51[1]);
          v43.i64[1] = v51[1].i64[1];
          v61 = vzip1q_s64(v12, v18);
          v62 = vzip2q_s64(v12, v18);
          v63 = vzip1q_s64(v24, v30);
          v24.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
          v24.i64[1] = v30.i64[1];
          v30.i64[0] = vdupq_laneq_s64(v36, 1).u64[0];
          v64 = vzip1q_s64(v36, v42);
          v30.i64[1] = v42.i64[1];
          v65 = vzip1q_s64(v48, v51[2]);
          v48.i64[0] = vdupq_laneq_s64(v48, 1).u64[0];
          v48.i64[1] = v51[2].i64[1];
          v66 = vzip1q_s64(v11, v17);
          v67 = vzip2q_s64(v11, v17);
          v69.i64[0] = vdupq_laneq_s64(v23, 1).u64[0];
          v68 = vzip1q_s64(v23, v29);
          v69.i64[1] = v29.i64[1];
          v70 = vzip1q_s64(v35, v41);
          v71.i64[0] = vdupq_laneq_s64(v35, 1).u64[0];
          v71.i64[1] = v41.i64[1];
          v72 = vzip1q_s64(v47, v51[3]);
          v73.i64[0] = vdupq_laneq_s64(v47, 1).u64[0];
          v73.i64[1] = v51[3].i64[1];
          v84[2] = v53;
          v84[3] = v54;
          *v84 = v212;
          v84[1] = v52;
          v74 = (int64x2_t *)((char *)v84 + v15);
          *v74 = v209;
          v74[1] = v26;
          v74[2] = v38;
          v74[3] = v55;
          v75 = &v84[v21];
          *v75 = v56;
          v75[1] = v58;
          v75[2] = v59;
          v75[3] = v60;
          v76 = (int64x2_t *)((char *)v84 + v27);
          *v76 = v57;
          v76[1] = v25;
          v76[2] = v37;
          v76[3] = v43;
          v77 = &v84[v33];
          *v77 = v61;
          v77[1] = v63;
          v77[2] = v64;
          v77[3] = v65;
          v78 = (int64x2_t *)((char *)v84 + v39);
          *v78 = v62;
          v78[1] = v24;
          v78[2] = v30;
          v78[3] = v48;
          v79 = &v84[v45];
          v79[2] = v70;
          v79[3] = v72;
          *v79 = v66;
          v79[1] = v68;
        }
        else
        {
          v85 = *(int64x2_t *)(v83 + 8 * (v82 + v6));
          v86 = *(int64x2_t *)(v83 + 8 * (v82 + v6 + v81));
          v87 = (int64x2_t *)(v83 + 8 * (v82 + v6 + 2 * v81));
          v88 = *v87;
          v89 = v87[1];
          v90 = (int64x2_t *)(v83 + 8 * (v82 + v6 + 3 * v81));
          v92 = *v90;
          v91 = v90[1];
          v93.i64[0] = vdupq_laneq_s64(*v87, 1).u64[0];
          v93.i64[1] = v90->i64[1];
          v94 = v82 + v6 + 4 * v81;
          v95 = (int64x2_t *)(v83 + 8 * v94);
          v97 = *v95;
          v96 = v95[1];
          v98 = &v95[v81];
          v100 = *v98;
          v99 = v98[1];
          v94 += 4;
          v101 = *(int64x2_t *)(v83 + 8 * v94);
          v102 = *(int64x2_t *)(v83 + 8 * (v94 + v81));
          v103 = (int64x2_t *)((char *)v95 + 24 * v81);
          v67 = *v103;
          v69 = v103[1];
          v104.i64[0] = vdupq_laneq_s64(*v98, 1).u64[0];
          v104.i64[1] = v103->i64[1];
          v105 = (int64x2_t *)((char *)v95 + 8 * v81);
          v106.i64[0] = vdupq_laneq_s64(v99, 1).u64[0];
          v106.i64[1] = v103[1].i64[1];
          v108 = *v105;
          v107 = v105[1];
          v109 = (int64x2_t *)(v83 + 8 * (v94 + 2 * (_DWORD)v81));
          v110 = *v109;
          v111 = (int64x2_t *)(v83 + 8 * (v94 + 3 * (_DWORD)v81));
          v71 = *v111;
          v73 = v111[1];
          v112 = vzip1q_s64(v97, *v105);
          v113 = vzip1q_s64(*v98, *v103);
          v114 = vzip2q_s64(v97, *v105);
          v115.i64[0] = vdupq_laneq_s64(*v109, 1).u64[0];
          v115.i64[1] = v111->i64[1];
          v116 = vzip1q_s64(v109[1], v73);
          v117 = vzip1q_s64(*v109, *v111);
          *v84 = vzip1q_s64(v85, v86);
          v84[1] = vzip1q_s64(v88, v92);
          v84[2] = v112;
          v84[3] = v113;
          v118 = (int64x2_t *)((char *)v84 + 8 * v81);
          *v118 = v86;
          v118[1] = v93;
          v118[2] = v114;
          v118[3] = v104;
          v119 = &v84[v81];
          *v119 = v88;
          v119[1] = vzip1q_s64(v89, v91);
          v119[2] = vzip1q_s64(v96, v107);
          v119[3] = vzip1q_s64(v99, v69);
          v120 = (int64x2_t *)((char *)v84 + 24 * v81);
          *v120 = v92;
          v120[1] = v91;
          v120[2] = vzip2q_s64(v96, v107);
          v120[3] = v106;
          v121 = &v84[2 * v81];
          *v121 = v97;
          v121[1] = v96;
          v121[2] = vzip1q_s64(v101, v102);
          v121[3] = v117;
          v122 = (int64x2_t *)((char *)v84 + 40 * v81);
          *v122 = v108;
          v122[1] = v107;
          v122[2] = v102;
          v122[3] = v115;
          v123 = &v84[3 * v81];
          v123[2] = v110;
          v123[3] = v116;
          v50 = 7 * v81;
          *v123 = v100;
          v123[1] = v99;
        }
        v80 = (int64x2_t *)((char *)v84 + 8 * v50);
        *v80 = v67;
        v80[1] = v69;
        v80[2] = v71;
        v80[3] = v73;
        v9 += 8;
      }
      while (i + v9 <= v2);
      if (v3)
      {
        v124 = *((_DWORD *)a1 + 4);
        v125 = *a1;
        v217 = v3;
        v218 = 8;
        v219 = v124;
        v220 = v125 + 8 * (v7 + v124 * v6);
        v221 = v7 + v124 * v6;
        LODWORD(__src) = 8;
        HIDWORD(__src) = v3;
        LODWORD(v214) = v124;
        v215 = v125 + 8 * (v6 + v124 * v7);
        v216 = v6 + v124 * v7;
        sub_239C1CA2C((uint64_t)&v217, (uint64_t)&__src);
        v2 = v206;
      }
      v6 += 8;
    }
  }
  v211 = v3;
  v4 = v2 & 0xFFFFFFF8;
  if (v3)
    v5 = v4 >= v2;
  else
    v5 = 1;
  if (!v5)
  {
    v126 = v2 & 0xFFFFFFF8;
    v204 = v2 & 0xFFFFFFF8;
    do
    {
      v205 = v126 + 8;
      if (v126 + 8 <= v2)
        v127 = 8;
      else
        v127 = v2 - v126;
      v128 = *((_DWORD *)a1 + 4);
      v129 = *a1;
      v217 = v127;
      v218 = v211;
      v219 = v128;
      v130 = v129 + 8 * (v128 * v4 + v126);
      v220 = v130;
      v210 = v128 * v4 + v126;
      v221 = v210;
      if (v4 == v126)
      {
        v202 = v128 * v4;
        v203 = v126;
        v208 = v129;
        v131 = (8 * v211 * v127 + 31) & 0xFFFFFFFE0;
        v214 = v131 >> 3;
        memptr = 0;
        malloc_type_posix_memalign(&memptr, 0x20uLL, v131, 0x100BBD03uLL);
        __src = memptr;
        if (!memptr)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v201 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v201, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v215 = __PAIR64__(v211, v127);
        sub_23945215C((uint64_t)&__src, v211 * (unint64_t)v127);
        v132.i64[0] = -1;
        v132.i64[1] = -1;
        if (v127)
        {
          v133 = 0;
          v134 = 0;
          v135 = v215;
          v136 = __src;
          v207 = v215 * v211;
          do
          {
            v137 = v134 + 8;
            if (v127 >= v134 + 8)
              v138 = v134 + 8;
            else
              v138 = v127;
            v139 = v127 - v134;
            if (v137 <= v127)
              v139 = 8;
            if (v134)
            {
              if (v139)
              {
                v140 = 0;
                v141 = 0;
                v142 = v138 - 8 * v133;
                v143 = 16 * v133;
                v144 = 2 * v138;
                if (v139 >= 0)
                  v145 = v139;
                else
                  v145 = -v139;
                v146 = v144 - v143;
                v147 = v143 - v144;
                while (1)
                {
                  v151 = HIDWORD(v141);
                  if (v145 >> 4 > 0x270)
                  {
                    v154 = v139 + v141 + v139 * HIDWORD(v141);
                    v155 = (v154 / v139);
                    v156 = (v154 % v139);
                    v157 = v156 | (v155 << 32);
                    v158 = (v156 + v139) | ((unint64_t)(v155 - 1) << 32);
                    if ((int)v156 < 0)
                      v153 = v158;
                    else
                      v153 = v157;
                    goto LABEL_62;
                  }
                  v152 = (v139 + v141);
                  if (v139 + (int)v141 >= 0)
                  {
                    v153 = v141 & 0xFFFFFFFF00000000 | v152;
                    if ((int)v152 >= v139)
                      goto LABEL_59;
                    goto LABEL_62;
                  }
                  v159 = (v146 + v141) & ~((v146 + (int)v141) >> 31);
                  v160 = v143 + v159 == v144 + (_DWORD)v141 ? 1 : 2;
                  v161 = v160 + (v147 + v159 - (v143 + v159 != v144 + (_DWORD)v141) - v141) / v142;
                  if (v161 < 8)
                    break;
                  v163 = 0uLL;
                  v164 = (int32x4_t)HIDWORD(v141);
                  v165 = v161 & 0xFFFFFFF8;
                  do
                  {
                    v164 = vaddq_s32(v164, v132);
                    v163 = vaddq_s32(v163, v132);
                    v165 -= 8;
                  }
                  while (v165);
                  LODWORD(v152) = v152 + (v161 & 0xFFFFFFF8) * v142;
                  v162 = vaddvq_s32(vaddq_s32(v163, v164));
                  if (v161 != (v161 & 0xFFFFFFF8))
                    goto LABEL_57;
LABEL_58:
                  v153 = v152 | (v162 << 32);
                  if ((int)v152 >= v139)
                  {
LABEL_59:
                    v167 = HIDWORD(v153);
                    do
                    {
                      v152 = (v152 - v139);
                      v167 = (v167 + 1);
                    }
                    while ((int)v152 >= v139);
                    v153 = v152 | (v167 << 32);
                  }
LABEL_62:
                  if ((_DWORD)v141 != (_DWORD)v153 || HIDWORD(v141) != HIDWORD(v153))
                  {
                    v169 = &v136[v134 + v135 * (_DWORD)v140];
                    LODWORD(v170) = v141;
                    v171 = v141;
                    do
                    {
                      *v169++ = *(_QWORD *)(v208
                                          + 8 * (v210 + v128 * v134)
                                          + 8 * (HIDWORD(v171) + v170 * v128));
                      v172 = (v170 + 1);
                      v173 = v171 & 0xFFFFFFFF00000000;
                      v174 = v171 & 0xFFFFFFFF00000000 | v172;
                      v170 = v173 + 0x100000000;
                      if (v139 > (int)v172)
                        v170 = v174;
                      v175 = (_DWORD)v170 == (_DWORD)v153 && HIDWORD(v170) == HIDWORD(v153);
                      v171 = v170;
                    }
                    while (!v175);
                  }
                  if (v145 >> 4 > 0x270)
                  {
                    v148 = v139 + v141 + v139 * HIDWORD(v141);
                    v149 = (v148 / v139);
                    v150 = (v148 % v139);
                    if ((v150 & 0x80000000) != 0)
                    {
                      v150 = (v150 + v139);
                      v149 = (v149 - 1);
                    }
                    v141 = v150 | (v149 << 32);
                    goto LABEL_41;
                  }
                  v176 = (v139 + v141);
                  if (v139 + (int)v141 < 0)
                  {
                    v177 = (v146 + v141) & ~((v146 + (int)v141) >> 31);
                    if (v143 + v177 == v144 + (_DWORD)v141)
                      v178 = 1;
                    else
                      v178 = 2;
                    v179 = v178 + (v147 + v177 - (v143 + v177 != v144 + (_DWORD)v141) - v141) / v142;
                    if (v179 < 8)
                      goto LABEL_85;
                    v180 = 0uLL;
                    v181 = (int32x4_t)HIDWORD(v141);
                    v182 = v179 & 0xFFFFFFF8;
                    do
                    {
                      v181 = vaddq_s32(v181, v132);
                      v180 = vaddq_s32(v180, v132);
                      v182 -= 8;
                    }
                    while (v182);
                    LODWORD(v176) = v176 + (v179 & 0xFFFFFFF8) * v142;
                    v151 = vaddvq_s32(vaddq_s32(v180, v181));
                    if (v179 != (v179 & 0xFFFFFFF8))
                    {
LABEL_85:
                      v183 = ((v139 + v176) >> 31)
                           + (((v139 + (_DWORD)v176) & ~((v139 + (int)v176) >> 31))
                            - (((v139 + v176) >> 31)
                             + v139
                             + (_DWORD)v176))
                           / v139;
                      LODWORD(v176) = v139 + v176 + v139 * v183;
                      v151 = v151 + ~v183;
                    }
                    v141 = v176 | (v151 << 32);
                    if ((int)v176 < v139)
                      goto LABEL_41;
LABEL_87:
                    v184 = HIDWORD(v141);
                    do
                    {
                      v176 = (v176 - v139);
                      v184 = (v184 + 1);
                    }
                    while ((int)v176 >= v139);
                    v141 = v176 | (v184 << 32);
                    goto LABEL_41;
                  }
                  v141 = v141 & 0xFFFFFFFF00000000 | v176;
                  if ((int)v176 >= v139)
                    goto LABEL_87;
LABEL_41:
                  if (++v140 == v211)
                    goto LABEL_26;
                }
                v162 = HIDWORD(v141);
LABEL_57:
                v166 = ((v139 + v152) >> 31)
                     + (((v139 + (_DWORD)v152) & ~((v139 + (int)v152) >> 31))
                      - (((v139 + v152) >> 31)
                       + v139
                       + (_DWORD)v152))
                     / v139;
                LODWORD(v152) = v139 + v152 + v139 * v166;
                v162 = v162 + ~v166;
                goto LABEL_58;
              }
            }
            else
            {
              if (v139 * v211)
                v185 = v136;
              else
                v185 = 0;
              v186 = &v136[v207];
              if (!(v139 * v211))
                v186 = 0;
              if (v185 != v186)
              {
                v187 = 0;
                v188 = 0;
                do
                {
                  v189 = HIDWORD(v187);
                  if (v187 <= HIDWORD(v187))
                    v190 = HIDWORD(v187);
                  else
                    v190 = v187;
                  if (v187 < HIDWORD(v187))
                    LODWORD(v189) = v187;
                  *v185 = *(_QWORD *)(v130 + 8 * (v189 + v190 * v128));
                  v191 = (v187 + 1);
                  v192 = v187 & 0xFFFFFFFF00000000;
                  v193 = v192 | v191;
                  v187 = v192 + 0x100000000;
                  if (v139 > (int)v191)
                    v187 = v193;
                  if (v188 + 1 >= v139)
                    v194 = v135 - v139;
                  else
                    v194 = 0;
                  v185 += v194 + 1;
                  if (v188 + 1 < v139)
                    ++v188;
                  else
                    v188 = 0;
                }
                while (v185 != v186);
              }
            }
LABEL_26:
            ++v133;
            v134 = v137;
          }
          while (v137 < v127);
        }
        v195 = (char *)__src;
        if ((_DWORD)v215)
        {
          v196 = HIDWORD(v215);
          if (HIDWORD(v215))
          {
            v197 = 8 * v215;
            v198 = v203 + v202;
            v199 = 8 * (int)v215;
            do
            {
              memmove((void *)(v208 + 8 * v198), v195, v197);
              v198 += v128;
              v195 += v199;
              --v196;
            }
            while (v196);
            v195 = (char *)__src;
          }
        }
        free(v195);
      }
      else
      {
        __src = (void *)__PAIR64__(v127, v211);
        LODWORD(v214) = v128;
        v215 = v129 + 8 * (v4 + v128 * v126);
        v216 = v4 + v128 * v126;
        sub_239C1CA2C((uint64_t)&v217, (uint64_t)&__src);
      }
      v2 = v206;
      v126 = v205;
      v4 = v204;
    }
    while (v205 < v206);
  }
}

void sub_239C1C780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  free(a19);
  _Unwind_Resume(a1);
}

void sub_239C1C794(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  const double **v8;
  double v9;
  double *v10;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  double *__A[2];
  int __N;
  void *memptr;

  v4 = *((_QWORD *)a2 + 2);
  if (*(double **)v4 == a1)
  {
    sub_239C1C794(__A, a2);
    *a1 = *(double *)__A;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *(unsigned int *)(*(_QWORD *)(v5 + 16) + 20);
    if ((_DWORD)v6 && *(_DWORD *)(v4 + 16))
    {
      v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
      __A[1] = (double *)(v7 >> 3);
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x100BBD03uLL);
      __A[0] = (double *)memptr;
      if (!memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v12 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v12, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      __N = *(_DWORD *)(*(_QWORD *)(v5 + 16) + 20);
      sub_239C1C8E0((uint64_t)__A, v5);
      v8 = (const double **)*((_QWORD *)a2 + 2);
      v9 = a2[3];
      v10 = __A[0];
      sub_239A22E8C(0, 1, __N, __A[0], 1, *v8, 1, a1, v9, 0.0, 1);
      free(v10);
    }
    else
    {
      *a1 = 0.0;
    }
  }
}

void sub_239C1C8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  free(v11);
  _Unwind_Resume(a1);
}

void sub_239C1C8E0(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  size_t v11;
  double *v12;
  size_t v13;
  uint64_t v14;
  std::bad_alloc *exception;
  std::bad_alloc *v16;
  void *v17;
  size_t v18;
  int v19;
  void *memptr;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const double **)v6;
  if (*(double **)v6 == v4 || *(double **)v5 == v4)
  {
    v11 = (8 * *(unsigned int *)(v5 + 20) + 31) & 0xFFFFFFFE0;
    v18 = v11 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x100BBD03uLL);
    v17 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v16 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v16, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v19 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    sub_239C1C8E0(&v17, a2);
    v12 = *(double **)a1;
    v13 = v18;
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v13;
    *(_DWORD *)(a1 + 16) = v19;
    free(v12);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 16);
    if (v8 && (v10 = *(_DWORD *)(v5 + 16), v9 = *(_DWORD *)(v5 + 20), v9 * v10))
    {
      sub_239A22E14(1, 0, 1, v9, v8, v7, v8, *(double **)v5, *(double *)(a2 + 24), 0.0, v10, v4, 1);
    }
    else
    {
      v14 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v14)
        bzero(v4, 8 * v14);
    }
  }
}

void sub_239C1CA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_239C1CA2C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int32x4_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t *v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t *v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t *v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t *v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  int64x2_t *v71;
  int64x2_t *v72;
  int64x2_t *v73;
  int64x2_t *v74;
  int64x2_t *v75;
  int64x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  int v108;
  unsigned int v109;
  unint64_t v110;
  int32x4_t v111;
  int32x4_t v112;
  unsigned int v113;
  unsigned int v114;
  unint64_t v115;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  BOOL v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unsigned int v130;
  int32x4_t v131;
  int32x4_t v132;
  unsigned int v133;
  unsigned int v134;
  unint64_t v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  unsigned int v141[4];
  uint64_t v142;
  unsigned int v143;
  _DWORD v144[4];
  uint64_t v145;
  int v146;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    v4 = result;
    v5 = 0;
    v6 = *(unsigned int *)(a2 + 4);
    v136 = v6 & 0xFFFFFFF8;
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    v137 = *(_DWORD *)a2;
    do
    {
      v8 = v2 - v5;
      v9 = v5 + 8 <= v2 || (_DWORD)v8 == 8;
      v138 = v5 + 8;
      if (v9)
      {
        if (v6 >= 8)
        {
          v10 = 0;
          do
          {
            v11 = *(unsigned int *)(v4 + 8);
            v12 = *(unsigned int *)(a2 + 8);
            v13 = *(_QWORD *)(a2 + 16)
                - 8 * *(unsigned int *)(a2 + 24)
                + 8 * (*(_DWORD *)(a2 + 24) + v5 + (_DWORD)v12 * v10);
            v15 = *(int64x2_t *)(v13 + 32);
            v14 = *(int64x2_t *)(v13 + 48);
            v16 = (int64x2_t *)(*(_QWORD *)(v4 + 16)
                              - 8 * *(unsigned int *)(v4 + 24)
                              + 8 * (v10 + *(_DWORD *)(v4 + 24) + v5 * v11));
            v17 = *(int64x2_t *)(v13 + 16);
            v18 = (int64x2_t *)(v13 + 8 * v12);
            v20 = v18[2];
            v19 = v18[3];
            v22 = *v18;
            v21 = v18[1];
            v23 = (int64x2_t *)(v13 + 16 * v12);
            v25 = v23[2];
            v24 = v23[3];
            v27 = *v23;
            v26 = v23[1];
            v28 = (int64x2_t *)(v13 + 24 * v12);
            v29 = (int64x2_t *)(v13 + 32 * v12);
            v31 = v28[2];
            v30 = v28[3];
            v33 = v29[2];
            v32 = v29[3];
            v35 = *v29;
            v34 = v29[1];
            v37 = *v28;
            v36 = v28[1];
            v38 = (int64x2_t *)(v13 + 40 * v12);
            v40 = v38[2];
            v39 = v38[3];
            v41 = (int64x2_t *)(v13 + 48 * v12);
            v42 = *v38;
            v43 = v38[1];
            v44 = v41[2];
            v45 = v41[3];
            v46 = v41[1];
            v47 = (int64x2_t *)(v13 + 56 * v12);
            v48 = vzip1q_s64(*(int64x2_t *)v13, v22);
            v49 = vzip2q_s64(*(int64x2_t *)v13, v22);
            v22.i64[0] = vdupq_laneq_s64(v27, 1).u64[0];
            v50 = vzip1q_s64(v27, v37);
            v22.i64[1] = v37.i64[1];
            v37.i64[0] = vdupq_laneq_s64(v35, 1).u64[0];
            v51 = vzip1q_s64(v35, v42);
            v37.i64[1] = v42.i64[1];
            v52 = vzip1q_s64(v17, v21);
            v53 = vzip2q_s64(v17, v21);
            v21.i64[0] = vdupq_laneq_s64(v26, 1).u64[0];
            v54 = vzip1q_s64(v26, v36);
            v21.i64[1] = v36.i64[1];
            v36.i64[0] = vdupq_laneq_s64(v34, 1).u64[0];
            v55 = vzip1q_s64(v34, v43);
            v36.i64[1] = v43.i64[1];
            v43.i64[0] = vdupq_laneq_s64(v25, 1).u64[0];
            v43.i64[1] = v31.i64[1];
            v56 = vzip1q_s64(v25, v31);
            v57 = vzip1q_s64(*v41, *v47);
            v58.i64[0] = vdupq_laneq_s64(*v41, 1).u64[0];
            v58.i64[1] = v47->i64[1];
            v59 = vzip1q_s64(v33, v40);
            v33.i64[0] = vdupq_laneq_s64(v33, 1).u64[0];
            v33.i64[1] = v40.i64[1];
            v60 = vzip1q_s64(v15, v20);
            v61 = vzip2q_s64(v15, v20);
            v62 = vzip1q_s64(v46, v47[1]);
            v46.i64[0] = vdupq_laneq_s64(v46, 1).u64[0];
            v46.i64[1] = v47[1].i64[1];
            v63 = vzip1q_s64(v24, v30);
            v24.i64[0] = vdupq_laneq_s64(v24, 1).u64[0];
            v24.i64[1] = v30.i64[1];
            v64 = vzip1q_s64(v14, v19);
            v65 = vzip2q_s64(v14, v19);
            v66 = vzip1q_s64(v44, v47[2]);
            v44.i64[0] = vdupq_laneq_s64(v44, 1).u64[0];
            v44.i64[1] = v47[2].i64[1];
            v67 = vzip1q_s64(v32, v39);
            v32.i64[0] = vdupq_laneq_s64(v32, 1).u64[0];
            v32.i64[1] = v39.i64[1];
            v68 = v47[3];
            v16[2] = v51;
            v16[3] = v57;
            v69 = vzip1q_s64(v45, v68);
            v45.i64[0] = vdupq_laneq_s64(v45, 1).u64[0];
            v45.i64[1] = v68.i64[1];
            *v16 = v48;
            v16[1] = v50;
            v70 = (int64x2_t *)((char *)v16 + 8 * v11);
            *v70 = v49;
            v70[1] = v22;
            v70[2] = v37;
            v70[3] = v58;
            v71 = &v16[v11];
            *v71 = v52;
            v71[1] = v54;
            v71[2] = v55;
            v71[3] = v62;
            v72 = (int64x2_t *)((char *)v16 + 24 * v11);
            *v72 = v53;
            v72[1] = v21;
            v72[2] = v36;
            v72[3] = v46;
            v73 = &v16[2 * v11];
            *v73 = v60;
            v73[1] = v56;
            v73[2] = v59;
            v73[3] = v66;
            v74 = (int64x2_t *)((char *)v16 + 40 * v11);
            *v74 = v61;
            v74[1] = v43;
            v74[2] = v33;
            v74[3] = v44;
            v75 = &v16[3 * v11];
            *v75 = v64;
            v75[1] = v63;
            v75[2] = v67;
            v75[3] = v69;
            v76 = (int64x2_t *)((char *)v16 + 56 * v11);
            v76[2] = v32;
            v76[3] = v45;
            *v76 = v65;
            v76[1] = v24;
            LODWORD(v76) = v10 + 16;
            v10 += 8;
          }
          while (v76 <= v6);
        }
        v7.i64[0] = -1;
        v7.i64[1] = -1;
        if ((v6 & 7) != 0)
        {
          v77 = *(unsigned int *)(v4 + 24);
          v78 = *(_QWORD *)(v4 + 16) - 8 * v77;
          v79 = *(_DWORD *)(v4 + 8);
          LODWORD(v77) = v77 + v136 + v79 * v5;
          v144[0] = v6 & 7;
          v144[1] = 8;
          v144[2] = v79;
          v145 = v78 + 8 * v77;
          v146 = v77;
          v80 = *(unsigned int *)(a2 + 24);
          v81 = *(_QWORD *)(a2 + 16) - 8 * v80;
          v82 = *(_DWORD *)(a2 + 8);
          v83 = v80 + v5 + v82 * v136;
          v141[0] = 8;
          v141[1] = v144[0];
          v141[2] = v82;
          v142 = v81 + 8 * v83;
          v143 = v83;
          sub_239C0C20C((uint64_t)v144, v141);
          v7.i64[0] = -1;
          v7.i64[1] = -1;
        }
      }
      else if ((_DWORD)v6)
      {
        v84 = 0;
        v85 = *(unsigned int *)(v4 + 24);
        v86 = *(_DWORD *)(v4 + 8);
        v87 = *(unsigned int *)(a2 + 24);
        v140 = *(_QWORD *)(a2 + 16) - 8 * v87;
        v88 = *(_DWORD *)(a2 + 8);
        v139 = v87 + v5;
        while (1)
        {
          v89 = v84 + 8;
          v90 = v84 + 8 <= v6 ? 8 : v6 - v84;
          if (v90)
            break;
LABEL_16:
          v84 = v89;
          if (v89 >= v6)
            goto LABEL_3;
        }
        v91 = 0;
        v92 = 0;
        v93 = v140 + 8 * (v139 + v88 * v84);
        v94 = *(_QWORD *)(v4 + 16) - 8 * v85;
        if (v90 >= 0)
          v95 = v90;
        else
          v95 = -v90;
        v96 = v85 + v84;
        v97 = 2 * v90;
        v98 = -2 * v90;
        while (2)
        {
          v99 = HIDWORD(v92);
          if (v95 >> 4 > 0x270)
          {
            v102 = v90 + v92 + v90 * HIDWORD(v92);
            v103 = (v102 / v90);
            v104 = (v102 % v90);
            v105 = v104 | (v103 << 32);
            v106 = (v104 + v90) | ((unint64_t)(v103 - 1) << 32);
            if ((int)v104 < 0)
              v101 = v106;
            else
              v101 = v105;
            goto LABEL_47;
          }
          v100 = (v90 + v92);
          if (v90 + (int)v92 >= 0)
          {
            v101 = v92 & 0xFFFFFFFF00000000 | v100;
            if ((int)v100 < v90)
            {
LABEL_47:
              if ((_DWORD)v92 != (_DWORD)v101 || HIDWORD(v92) != HIDWORD(v101))
              {
                v117 = (_QWORD *)(v94 + 8 * (v96 + (v5 + v91) * v86));
                LODWORD(v118) = v92;
                v119 = v92;
                do
                {
                  *v117++ = *(_QWORD *)(v93 + 8 * (HIDWORD(v119) + v118 * v88));
                  v120 = (v118 + 1);
                  v121 = v119 & 0xFFFFFFFF00000000;
                  v118 = v121 | v120;
                  v122 = v121 + 0x100000000;
                  if (v90 <= (int)v120)
                    v118 = v122;
                  v123 = (_DWORD)v118 == (_DWORD)v101 && HIDWORD(v118) == HIDWORD(v101);
                  v119 = v118;
                }
                while (!v123);
              }
              if (v95 >> 4 > 0x270)
              {
                v125 = v90 + v92 + v90 * HIDWORD(v92);
                v126 = (v125 / v90);
                v127 = (v125 % v90);
                if ((v127 & 0x80000000) != 0)
                  v92 = (v127 + v90) | ((unint64_t)(v126 - 1) << 32);
                else
                  v92 = v127 | (v126 << 32);
              }
              else
              {
                v124 = (v90 + v92);
                if (v90 + (int)v92 < 0)
                {
                  v128 = v98 + ((v97 + v92) & ~((v97 + (int)v92) >> 31));
                  if (v128 == (_DWORD)v92)
                    v129 = 1;
                  else
                    v129 = 2;
                  v130 = v129 + (v128 - (v128 != (_DWORD)v92) - v92) / v90;
                  if (v130 < 8)
                    goto LABEL_72;
                  v131 = 0uLL;
                  v132 = (int32x4_t)v99;
                  v133 = v130 & 0xFFFFFFF8;
                  do
                  {
                    v132 = vaddq_s32(v132, v7);
                    v131 = vaddq_s32(v131, v7);
                    v133 -= 8;
                  }
                  while (v133);
                  LODWORD(v124) = v124 + (v130 & 0xFFFFFFF8) * v90;
                  v99 = vaddvq_s32(vaddq_s32(v131, v132));
                  if (v130 != (v130 & 0xFFFFFFF8))
                  {
LABEL_72:
                    v134 = ((v90 + v124) >> 31)
                         + (((v90 + (_DWORD)v124) & ~((v90 + (int)v124) >> 31))
                          - (((v90 + v124) >> 31)
                           + v90
                           + (_DWORD)v124))
                         / v90;
                    LODWORD(v124) = v90 + v124 + v90 * v134;
                    v99 = v99 + ~v134;
                  }
                  v92 = v124 | (v99 << 32);
                  if ((int)v124 >= v90)
                  {
LABEL_74:
                    v135 = HIDWORD(v92);
                    do
                    {
                      v124 = (v124 - v90);
                      v135 = (v135 + 1);
                    }
                    while ((int)v124 >= v90);
                    v92 = v124 | (v135 << 32);
                  }
                }
                else
                {
                  v92 = v92 & 0xFFFFFFFF00000000 | v124;
                  if ((int)v124 >= v90)
                    goto LABEL_74;
                }
              }
              if (++v91 == v8)
                goto LABEL_16;
              continue;
            }
LABEL_44:
            v115 = HIDWORD(v101);
            do
            {
              v100 = (v100 - v90);
              v115 = (v115 + 1);
            }
            while ((int)v100 >= v90);
            v101 = v100 | (v115 << 32);
            goto LABEL_47;
          }
          break;
        }
        v107 = v98 + ((v97 + v92) & ~((v97 + (int)v92) >> 31));
        if (v107 == (_DWORD)v92)
          v108 = 1;
        else
          v108 = 2;
        v109 = v108 + (v107 - (v107 != (_DWORD)v92) - v92) / v90;
        if (v109 < 8)
        {
          v110 = HIDWORD(v92);
          goto LABEL_42;
        }
        v111 = 0uLL;
        v112 = (int32x4_t)HIDWORD(v92);
        v113 = v109 & 0xFFFFFFF8;
        do
        {
          v112 = vaddq_s32(v112, v7);
          v111 = vaddq_s32(v111, v7);
          v113 -= 8;
        }
        while (v113);
        LODWORD(v100) = v100 + (v109 & 0xFFFFFFF8) * v90;
        v110 = vaddvq_s32(vaddq_s32(v111, v112));
        if (v109 != (v109 & 0xFFFFFFF8))
        {
LABEL_42:
          v114 = ((v90 + v100) >> 31)
               + (((v90 + (_DWORD)v100) & ~((v90 + (int)v100) >> 31))
                - (((v90 + v100) >> 31)
                 + v90
                 + (_DWORD)v100))
               / v90;
          LODWORD(v100) = v90 + v100 + v90 * v114;
          v110 = v110 + ~v114;
        }
        v101 = v100 | (v110 << 32);
        if ((int)v100 < v90)
          goto LABEL_47;
        goto LABEL_44;
      }
LABEL_3:
      v2 = v137;
      v5 = v138;
      result = 48;
    }
    while (v138 < v137);
  }
  return result;
}

uint64_t sub_239C1D078(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t i;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  unint64_t v44;
  BOOL v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  char **v51;
  char **v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  unsigned int v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  BOOL v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t j;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t k;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  int v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  int v138;
  int v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  void *v152;
  unint64_t v153;
  char *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  void **v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  __int128 v171;
  char *v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  void *v177;
  char *v178;
  int64_t v179;
  int64_t v180;
  unint64_t v181;
  int64_t v182;
  unint64_t v183;
  _BYTE *v184;
  _DWORD *v185;
  unint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  void **v196;
  uint64_t v197;
  void *v198;
  _BYTE *v199;
  _BYTE *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  __int128 v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  __int128 v220;
  char *v221;
  void *v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int64x2_t v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  __int128 v252;
  __int128 v253;
  std::__shared_weak_count *v254;
  unint64_t *p_shared_owners;
  unint64_t v256;
  int64x2_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  __int128 v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  void *v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t *v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int128 *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t m;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  char **v314;
  int v315;
  uint64_t v316;
  void *v317[2];
  void *v318[2];
  int v319;
  void *v320[2];
  void *v321[2];
  int v322;
  void *v323;
  void *v324;
  uint64_t v325;
  void *v326[3];
  void *v327[3];
  void *v328[3];
  void *v329[3];
  void *v330[2];
  int v331;
  void *v332;
  _DWORD *v333;
  void *v334;
  void **v335;
  void *v336;
  uint64_t v337;
  void *__p;
  void **v339;
  void **v340;
  void **v341;
  __int128 v342;
  __int128 v343;
  int v344;
  __int128 v345;
  __int128 v346;
  int v347;
  uint64_t v348;

  v348 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(_QWORD **)(a1 + 48);
    if (v2 != (_QWORD *)(a1 + 56))
    {
      v3 = 0;
      while (1)
      {
        if ((*((_BYTE *)v2 + 92) & 6) != 0)
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_11;
        }
        else
        {
          if (*((_BYTE *)v2 + 44))
            v3 += 3;
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_11:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v78 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v78);
LABEL_4:
        v2 = v5;
        if (v5 == (_QWORD *)(a1 + 56))
          goto LABEL_30;
      }
    }
    v3 = 0;
LABEL_30:
    v11 = *(_QWORD **)(a1 + 72);
    if (v11 == (_QWORD *)(a1 + 80))
    {
LABEL_31:
      v12 = 1;
LABEL_87:
      v44 = *(_QWORD *)(a1 + 152);
      goto LABEL_88;
    }
    while (1)
    {
      if ((*((_BYTE *)v11 + 76) & 6) != 0)
      {
        v13 = (_QWORD *)v11[1];
        if (v13)
          goto LABEL_37;
      }
      else
      {
        v3 += *((unsigned __int8 *)v11 + 44);
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
LABEL_37:
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
          goto LABEL_32;
        }
      }
      do
      {
        v14 = (_QWORD *)v11[2];
        v78 = *v14 == (_QWORD)v11;
        v11 = v14;
      }
      while (!v78);
LABEL_32:
      v11 = v14;
      if (v14 == (_QWORD *)(a1 + 80))
        goto LABEL_31;
    }
  }
  v342 = 0u;
  v343 = 0u;
  v345 = 0u;
  v346 = 0u;
  v344 = 1065353216;
  v347 = 1065353216;
  *(_OWORD *)v317 = 0u;
  *(_OWORD *)v318 = 0u;
  v319 = 1065353216;
  *(_OWORD *)v320 = 0u;
  *(_OWORD *)v321 = 0u;
  v322 = 1065353216;
  v6 = *(unsigned int **)(a1 + 48);
  v7 = (unsigned int *)(a1 + 56);
  LODWORD(v330[0]) = 0;
  if (v6 == (unsigned int *)(a1 + 56))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if ((v6[23] & 6) != 0)
      {
        sub_239456168((uint64_t)&v342, v6 + 8, v6 + 8);
        v8 = 1;
      }
      if (*((_BYTE *)v6 + 44))
        ++LODWORD(v330[0]);
      v9 = (unsigned int *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(unsigned int **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (unsigned int *)*((_QWORD *)v6 + 2);
          v78 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v78);
      }
      v6 = v10;
    }
    while (v10 != v7);
  }
  HIDWORD(v330[0]) = 0;
  v15 = *(unsigned int **)(a1 + 72);
  if (v15 != (unsigned int *)(a1 + 80))
  {
    do
    {
      if ((v15[19] & 6) != 0)
      {
        sub_239456168((uint64_t)&v345, v15 + 8, v15 + 8);
        v8 = 1;
      }
      if (*((_BYTE *)v15 + 44))
        ++HIDWORD(v330[0]);
      v18 = (unsigned int *)*((_QWORD *)v15 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(unsigned int **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (unsigned int *)*((_QWORD *)v15 + 2);
          v78 = *(_QWORD *)v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v78);
      }
      v15 = v19;
    }
    while (v19 != (unsigned int *)(a1 + 80));
  }
  if (!v8)
  {
    v3 = HIDWORD(v330[0]) + 3 * LODWORD(v330[0]);
    v32 = v321[0];
    if (!v321[0])
      goto LABEL_72;
    goto LABEL_71;
  }
  v16 = *(_QWORD *)(a1 + 96);
  for (i = *(_QWORD *)(a1 + 104); v16 != i; v16 += 120)
  {
    v20 = *(_QWORD *)(v16 + 48);
    if ((*(_BYTE *)(v20 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v16 + 56) + 52) & 6) != 0)
    {
      LODWORD(v329[0]) = *(_DWORD *)v20;
      v332 = v329;
      v21 = sub_2395EC77C((uint64_t)v317, (unsigned int *)v329, (uint64_t)&unk_239EC6E98, (_DWORD **)&v332);
      ++*((_DWORD *)v21 + 5);
      LODWORD(v329[0]) = **(_DWORD **)(v16 + 56);
      v332 = v329;
      v22 = sub_2395EC77C((uint64_t)v317, (unsigned int *)v329, (uint64_t)&unk_239EC6E98, (_DWORD **)&v332);
      ++*((_DWORD *)v22 + 5);
    }
  }
  sub_239C29188(*(uint64_t **)(a1 + 120), *(uint64_t **)(a1 + 128), (uint64_t)v317);
  sub_239559050((uint64_t)&v332, (uint64_t)&v342);
  sub_239559050((uint64_t)&v336, (uint64_t)&v345);
  v339 = v317;
  v340 = v329;
  v341 = v330;
  sub_239C2E488((uint64_t)&v332, a1 + 48);
  v24 = (int)v329[0];
  v23 = HIDWORD(v329[0]);
  v25 = __p;
  if (__p)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = v336;
  v336 = 0;
  if (v27)
    operator delete(v27);
  v28 = 3 * v24;
  v29 = v334;
  if (v334)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v3 = v23 + v28;
  v31 = v332;
  v332 = 0;
  if (v31)
    operator delete(v31);
  v32 = v321[0];
  if (v321[0])
  {
    do
    {
LABEL_71:
      v33 = (_QWORD *)*v32;
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
LABEL_72:
  v34 = v320[0];
  v320[0] = 0;
  if (v34)
    operator delete(v34);
  v35 = v318[0];
  if (v318[0])
  {
    do
    {
      v36 = (_QWORD *)*v35;
      operator delete(v35);
      v35 = v36;
    }
    while (v36);
  }
  v37 = v317[0];
  v317[0] = 0;
  if (v37)
    operator delete(v37);
  v38 = (_QWORD *)v346;
  if ((_QWORD)v346)
  {
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  v40 = (void *)v345;
  *(_QWORD *)&v345 = 0;
  if (v40)
    operator delete(v40);
  v41 = (_QWORD *)v343;
  if ((_QWORD)v343)
  {
    do
    {
      v42 = (_QWORD *)*v41;
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
  v43 = (void *)v342;
  *(_QWORD *)&v342 = 0;
  if (v43)
    operator delete(v43);
  v12 = *(_BYTE *)(a1 + 160) != 0;
  if (*(_BYTE *)(a1 + 160))
    goto LABEL_87;
  v64 = *(_QWORD **)(a1 + 48);
  if (v64 == (_QWORD *)(a1 + 56))
  {
LABEL_124:
    v65 = *(_QWORD **)(a1 + 72);
    if (v65 == (_QWORD *)(a1 + 80))
      goto LABEL_87;
    while ((*((_BYTE *)v65 + 76) & 6) == 0)
    {
      v68 = (_QWORD *)v65[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v65[2];
          v78 = *v69 == (_QWORD)v65;
          v65 = v69;
        }
        while (!v78);
      }
      v65 = v69;
      if (v69 == (_QWORD *)(a1 + 80))
        goto LABEL_87;
    }
  }
  else
  {
    while ((*((_BYTE *)v64 + 92) & 6) == 0)
    {
      v66 = (_QWORD *)v64[1];
      if (v66)
      {
        do
        {
          v67 = v66;
          v66 = (_QWORD *)*v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          v67 = (_QWORD *)v64[2];
          v78 = *v67 == (_QWORD)v64;
          v64 = v67;
        }
        while (!v78);
      }
      v64 = v67;
      if (v67 == (_QWORD *)(a1 + 56))
        goto LABEL_124;
    }
  }
  v70 = *(_QWORD *)(a1 + 96);
  v71 = *(_QWORD *)(a1 + 104);
  if (v70 == v71)
  {
    v72 = 0;
  }
  else
  {
    v72 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v70 + 48) + 52) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v70 + 56) + 52) & 6) == 0)
        ++v72;
      v70 += 120;
    }
    while (v70 != v71);
  }
  v82 = *(_QWORD **)(a1 + 120);
  v83 = *(_QWORD **)(a1 + 128);
  if (v82 == v83)
  {
    v84 = 0;
  }
  else
  {
    v84 = 0;
    do
    {
      if ((*(_BYTE *)(v82[10] + 52) & 6) == 0
        && (*(_BYTE *)(v82[11] + 52) & 6) == 0
        && (*(_BYTE *)(v82[12] + 36) & 6) == 0)
      {
        ++v84;
      }
      v82 += 20;
    }
    while (v82 != v83);
  }
  v44 = 3 * (v84 + v72);
LABEL_88:
  if (((*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) & 0x3FFFFFFFCLL) != 0)
  {
    if (v12)
      return 0;
LABEL_100:
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 161))
      goto LABEL_246;
    v47 = a1 + 656;
    if (*(_DWORD *)(a1 + 348) == 1)
      v48 = 3;
    else
      v48 = 1;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 656) + 24))(a1 + 656) + 120))
    {
LABEL_245:
      kdebug_trace();
      return 1;
    }
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 656);
    v50 = (char **)sub_239C29320(v49);
    v51 = v50;
    v332 = 0;
    v333 = 0;
    v334 = 0;
    if (&v332 == (void **)v50)
    {
      v52 = (char **)&v337;
    }
    else
    {
      sub_23942156C(&v332, *v50, v50[1], (v50[1] - *v50) >> 2);
      v52 = v51 + 6;
      if (v332 != v333)
      {
        v314 = v51;
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
        sub_239C2A864(v317, (char **)&v332, v51 + 6);
        sub_239C2A078((uint64_t)&v342, (char **)(v53 + 40), (char **)v317);
        if (v317[0])
        {
          v317[1] = v317[0];
          operator delete(v317[0]);
        }
        sub_239C2A988(v317, (char **)&v342, (char **)&v332);
        v54 = 3 * ((*((_QWORD *)&v342 + 1) - (_QWORD)v342) >> 2);
        *(_DWORD *)(a1 + 680) = v54;
        sub_23945215C(a1 + 664, v54);
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 656);
        v57 = (_DWORD *)*((_QWORD *)&v342 + 1);
        v56 = (_DWORD *)v342;
        if ((_QWORD)v342 != *((_QWORD *)&v342 + 1))
        {
          v58 = 0;
          v59 = *(_QWORD **)(v55 + 8);
          do
          {
            if (*((_DWORD *)v59 + 8) == *v56)
            {
              v62 = v59;
            }
            else
            {
              do
              {
                v63 = (_QWORD *)v59[1];
                if (v63)
                {
                  do
                  {
                    v62 = v63;
                    v63 = (_QWORD *)*v63;
                  }
                  while (v63);
                }
                else
                {
                  do
                  {
                    v62 = (_QWORD *)v59[2];
                    v78 = *v62 == (_QWORD)v59;
                    v59 = v62;
                  }
                  while (!v78);
                }
                v59 = v62;
              }
              while (*((_DWORD *)v62 + 8) != *v56);
            }
            v60 = *(_OWORD *)(v62 + 7);
            v61 = *(_QWORD *)(a1 + 664) + 8 * v58;
            *(_QWORD *)(v61 + 16) = v62[9];
            *(_OWORD *)v61 = v60;
            v58 += 3;
            ++v56;
            v59 = v62;
          }
          while (v56 != v57);
        }
        v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 656);
        v74 = *(_QWORD **)(v73 + 8);
        v75 = (_QWORD *)(v73 + 16);
        v76 = v317[0];
        v77 = v317[1];
        v78 = v74 == (_QWORD *)(v73 + 16) || v317[0] == v317[1];
        if (v78)
        {
          v79 = *(_QWORD **)(v73 + 8);
        }
        else
        {
          v85 = 0;
          do
          {
            if (*v76 == *((_DWORD *)v74 + 8))
            {
              if (*((_BYTE *)v74 + 44))
                v86 = v85;
              else
                v86 = -1;
              v85 += *((unsigned __int8 *)v74 + 44);
              ++v76;
            }
            else
            {
              v86 = -1;
            }
            *((_DWORD *)v74 + 22) = v86;
            v87 = (_QWORD *)v74[1];
            if (v87)
            {
              do
              {
                v79 = v87;
                v87 = (_QWORD *)*v87;
              }
              while (v87);
            }
            else
            {
              do
              {
                v79 = (_QWORD *)v74[2];
                v78 = *v79 == (_QWORD)v74;
                v74 = v79;
              }
              while (!v78);
            }
            if (v79 == v75)
              break;
            v74 = v79;
          }
          while (v76 != v77);
        }
        if (v79 != v75)
        {
          do
          {
            *((_DWORD *)v79 + 22) = -1;
            v88 = (_QWORD *)v79[1];
            if (v88)
            {
              do
              {
                v89 = v88;
                v88 = (_QWORD *)*v88;
              }
              while (v88);
            }
            else
            {
              do
              {
                v89 = (_QWORD *)v79[2];
                v78 = *v89 == (_QWORD)v79;
                v79 = v89;
              }
              while (!v78);
            }
            v79 = v89;
          }
          while (v89 != v75);
        }
        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
        sub_239C25A58(v90, (char **)v317);
        v91 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656) + 32);
        v92 = *(unsigned int *)(v91 + 12);
        if ((_DWORD)v92)
        {
          for (j = 0; j < v92; ++j)
          {
            v95 = (uint64_t *)(*(_QWORD *)(v91 + 88) + 24 * j);
            v94 = *v95;
            v96 = v95[1];
            if (*v95 != v96)
            {
              v97 = *(_QWORD *)(v91 + 48);
              v98 = *(_QWORD *)(v91 + 56);
              v99 = *(_QWORD *)(v91 + 80);
              do
              {
                v100 = ((v98 - v97) << 6) - 1;
                if (v98 == v97)
                  v100 = 0;
                v101 = *(_QWORD *)(v91 + 72) + v99;
                if (v100 == v101)
                {
                  sub_2396DA1D4(v91 + 40);
                  v97 = *(_QWORD *)(v91 + 48);
                  v98 = *(_QWORD *)(v91 + 56);
                  v101 = *(_QWORD *)(v91 + 80) + *(_QWORD *)(v91 + 72);
                }
                *(_QWORD *)(*(_QWORD *)(v97 + ((v101 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v101 & 0x1FF)) = *(_QWORD *)(v94 + 8);
                v99 = *(_QWORD *)(v91 + 80) + 1;
                *(_QWORD *)(v91 + 80) = v99;
                v94 += 16;
              }
              while (v94 != v96);
              v94 = *v95;
              v92 = *(unsigned int *)(v91 + 12);
            }
            v95[1] = v94;
          }
        }
        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
        v103 = *(unsigned int *)(v102 + 16);
        if ((_DWORD)v103)
          bzero(*(void **)v102, 8 * v103);
        if (((*(_QWORD *)(a1 + 736) - *(_QWORD *)(a1 + 728)) & 0x3FFFFFFFCLL) != 0)
        {
          v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
          sub_239C1F378(v104, a1 + 688);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(a1 + 656, v48);
        v330[0] = 0;
        v330[1] = 0;
        v331 = 0;
        memset(v329, 0, sizeof(v329));
        v105 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 656) + 40);
        if (*(_BYTE *)(a1 + 752))
        {
          v106 = v105(a1 + 656);
          sub_239C2AD44(v106, &v332, (uint64_t)v329);
        }
        else
        {
          v107 = v105(a1 + 656);
          sub_239C2AAAC(v107, &v332, (uint64_t)v329, (uint64_t)v330);
        }
        memset(v328, 0, sizeof(v328));
        memset(v327, 0, sizeof(v327));
        v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
        sub_239C2AF64(v108, &v332, &v342, (uint64_t)v328, (uint64_t)v327);
        sub_239C25A58(a1 + 688, (char **)&v342);
        v109 = *(_QWORD *)(a1 + 720);
        v110 = *(unsigned int *)(v109 + 12);
        if ((_DWORD)v110)
        {
          for (k = 0; k < v110; ++k)
          {
            v113 = (uint64_t *)(*(_QWORD *)(v109 + 88) + 24 * k);
            v112 = *v113;
            v114 = v113[1];
            if (*v113 != v114)
            {
              v115 = *(_QWORD *)(v109 + 48);
              v116 = *(_QWORD *)(v109 + 56);
              v117 = *(_QWORD *)(v109 + 80);
              do
              {
                v118 = ((v116 - v115) << 6) - 1;
                if (v116 == v115)
                  v118 = 0;
                v119 = *(_QWORD *)(v109 + 72) + v117;
                if (v118 == v119)
                {
                  sub_2396DA1D4(v109 + 40);
                  v115 = *(_QWORD *)(v109 + 48);
                  v116 = *(_QWORD *)(v109 + 56);
                  v119 = *(_QWORD *)(v109 + 80) + *(_QWORD *)(v109 + 72);
                }
                *(_QWORD *)(*(_QWORD *)(v115 + ((v119 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v119 & 0x1FF)) = *(_QWORD *)(v112 + 8);
                v117 = *(_QWORD *)(v109 + 80) + 1;
                *(_QWORD *)(v109 + 80) = v117;
                v112 += 16;
              }
              while (v112 != v114);
              v112 = *v113;
              v110 = *(unsigned int *)(v109 + 12);
            }
            v113[1] = v112;
          }
        }
        v120 = *(unsigned int *)(a1 + 704);
        if ((_DWORD)v120)
          bzero(*(void **)(a1 + 688), 8 * v120);
        memset(v326, 0, sizeof(v326));
        v121 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 656) + 40);
        if (*(_BYTE *)(a1 + 752))
        {
          v122 = v121(a1 + 656);
          sub_239C2AD44(v122, &v342, (uint64_t)v326);
        }
        else
        {
          v123 = v121(a1 + 656);
          sub_239C2AAAC(v123, &v342, (uint64_t)v326, a1 + 688);
        }
        if (*(_BYTE *)(a1 + 753))
        {
          LOBYTE(v323) = *(_BYTE *)(a1 + 752);
          v124 = *(_QWORD *)(a1 + 784);
          if (!v124)
            sub_2394172E0();
          if (((*(uint64_t (**)(uint64_t, void **, void **, void **, void **, void **, uint64_t))(*(_QWORD *)v124 + 48))(v124, v329, v330, v328, &v323, v326, a1 + 688) & 1) != 0)goto LABEL_231;
        }
        else if (sub_239C2B370((uint64_t)v329, (uint64_t)v330, (uint64_t)v328, *(_BYTE *)(a1 + 752) != 0, (uint64_t)v326, a1 + 688))
        {
LABEL_231:
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 48))(*(_QWORD *)(a1 + 720));
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 56))(*(_QWORD *)(a1 + 720));
          sub_239C2B9E4(*(_QWORD *)(a1 + 720), (uint64_t *)v326, 0);
          v323 = 0;
          v324 = 0;
          v325 = 0;
          if (&v323 != (void **)(v314 + 12))
            sub_23942156C(&v323, v314[12], v314[13], (v314[13] - v314[12]) >> 2);
          v125 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
          sub_239C2A1C4(v125, v332, v333);
          v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
          sub_239C2C0AC(v126, (char **)&v323);
          if (v323)
          {
            v324 = v323;
            operator delete(v323);
          }
          v81 = 0;
          goto LABEL_238;
        }
        v81 = 1;
LABEL_238:
        free(v326[0]);
        free(v327[0]);
        free(v328[0]);
        free(v329[0]);
        free(v330[0]);
        if (v317[0])
        {
          v317[1] = v317[0];
          operator delete(v317[0]);
        }
        if ((_QWORD)v342)
        {
          *((_QWORD *)&v342 + 1) = v342;
          operator delete((void *)v342);
        }
        goto LABEL_242;
      }
    }
    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 656);
    sub_239C29F2C((uint64_t)&v342, (char **)(v80 + 40), v52);
    sub_239C2A078((uint64_t)v317, (char **)(a1 + 728), (char **)&v342);
    sub_239C2A1C4((uint64_t *)(a1 + 688), (_DWORD *)v317[0], (_DWORD *)v317[1]);
    if (v317[0])
    {
      v317[1] = v317[0];
      operator delete(v317[0]);
    }
    if ((_QWORD)v342)
    {
      *((_QWORD *)&v342 + 1) = v342;
      operator delete((void *)v342);
    }
    v81 = 0;
LABEL_242:
    if (v332)
    {
      v333 = v332;
      operator delete(v332);
    }
    if (v81)
      goto LABEL_245;
LABEL_246:
    sub_239C29320(a1 + 40);
    if (*(_BYTE *)(a1 + 161))
    {
      v128 = *(_QWORD **)(a1 + 96);
      v127 = *(_QWORD **)(a1 + 104);
      if (v128 != v127)
      {
        while (!*((_BYTE *)v128 + 112))
        {
          v128 += 15;
          if (v128 == v127)
            goto LABEL_250;
        }
        --*(_DWORD *)(v128[6] + 56);
        --*(_DWORD *)(v128[7] + 56);
        v248 = (int64x2_t)xmmword_239F0C410;
        *(int64x2_t *)(a1 + 144) = vaddq_s64(*(int64x2_t *)(a1 + 144), (int64x2_t)xmmword_239F0C410);
        if (v128 != v127)
        {
          v249 = v128 + 15;
          if (v128 + 15 == v127)
          {
            v250 = v128;
          }
          else
          {
            v250 = v128;
            do
            {
              v251 = v249;
              if (*((_BYTE *)v128 + 232))
              {
                --*(_DWORD *)(v128[21] + 56);
                --*(_DWORD *)(v128[22] + 56);
                *(int64x2_t *)(a1 + 144) = vaddq_s64(*(int64x2_t *)(a1 + 144), v248);
              }
              else
              {
                *v250 = *v249;
                *(_OWORD *)(v250 + 1) = *((_OWORD *)v128 + 8);
                v250[3] = v128[18];
                v250[4] = v128[19];
                v250[5] = v128[20];
                v250[6] = v128[21];
                v250[7] = v128[22];
                v252 = *(_OWORD *)(v128 + 23);
                v250[10] = v128[25];
                *((_OWORD *)v250 + 4) = v252;
                v250[11] = v128[26];
                v253 = *(_OWORD *)(v128 + 27);
                v128[27] = 0;
                v128[28] = 0;
                v254 = (std::__shared_weak_count *)v250[13];
                *((_OWORD *)v250 + 6) = v253;
                if (v254)
                {
                  p_shared_owners = (unint64_t *)&v254->__shared_owners_;
                  do
                    v256 = __ldaxr(p_shared_owners);
                  while (__stlxr(v256 - 1, p_shared_owners));
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                    v248 = (int64x2_t)xmmword_239F0C410;
                  }
                }
                *((_BYTE *)v250 + 112) = *((_BYTE *)v128 + 232);
                v250 += 15;
              }
              v249 = v251 + 15;
              v128 = v251;
            }
            while (v251 + 15 != v127);
            v127 = *(_QWORD **)(a1 + 104);
          }
          if (v250 != v127)
          {
            while (v127 != v250)
            {
              v305 = (std::__shared_weak_count *)*(v127 - 2);
              if (v305)
              {
                v306 = (unint64_t *)&v305->__shared_owners_;
                do
                  v307 = __ldaxr(v306);
                while (__stlxr(v307 - 1, v306));
                if (!v307)
                {
                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                  std::__shared_weak_count::__release_weak(v305);
                }
              }
              v127 -= 15;
            }
            *(_QWORD *)(a1 + 104) = v250;
          }
        }
      }
LABEL_250:
      v130 = *(_QWORD *)(a1 + 120);
      v129 = *(_QWORD *)(a1 + 128);
      if (v130 != v129)
      {
        while (!*(_BYTE *)(v130 + 152))
        {
          v130 += 160;
          if (v130 == v129)
            goto LABEL_253;
        }
        --*(_DWORD *)(*(_QWORD *)(v130 + 80) + 56);
        --*(_DWORD *)(*(_QWORD *)(v130 + 88) + 56);
        --*(_DWORD *)(*(_QWORD *)(v130 + 96) + 40);
        v257 = (int64x2_t)xmmword_239F0C410;
        *(int64x2_t *)(a1 + 144) = vaddq_s64(*(int64x2_t *)(a1 + 144), (int64x2_t)xmmword_239F0C410);
        if (v130 != v129)
        {
          v258 = (_QWORD *)(v130 + 160);
          if (v130 + 160 == v129)
          {
            v259 = v130;
          }
          else
          {
            v259 = v130;
            do
            {
              v260 = v258;
              if (*(_BYTE *)(v130 + 312))
              {
                --*(_DWORD *)(*(_QWORD *)(v130 + 240) + 56);
                --*(_DWORD *)(*(_QWORD *)(v130 + 248) + 56);
                --*(_DWORD *)(*(_QWORD *)(v130 + 256) + 40);
                *(int64x2_t *)(a1 + 144) = vaddq_s64(*(int64x2_t *)(a1 + 144), v257);
              }
              else
              {
                *(_QWORD *)v259 = *v258;
                *(_OWORD *)(v259 + 8) = *(_OWORD *)(v130 + 168);
                *(_QWORD *)(v259 + 24) = *(_QWORD *)(v130 + 184);
                *(_QWORD *)(v259 + 32) = *(_QWORD *)(v130 + 192);
                *(_QWORD *)(v259 + 40) = *(_QWORD *)(v130 + 200);
                *(_QWORD *)(v259 + 48) = *(_QWORD *)(v130 + 208);
                *(_QWORD *)(v259 + 56) = *(_QWORD *)(v130 + 216);
                *(_QWORD *)(v259 + 64) = *(_QWORD *)(v130 + 224);
                *(_QWORD *)(v259 + 72) = *(_QWORD *)(v130 + 232);
                *(_QWORD *)(v259 + 80) = *(_QWORD *)(v130 + 240);
                *(_QWORD *)(v259 + 88) = *(_QWORD *)(v130 + 248);
                *(_QWORD *)(v259 + 96) = *(_QWORD *)(v130 + 256);
                v261 = *(_OWORD *)(v130 + 264);
                *(_QWORD *)(v259 + 120) = *(_QWORD *)(v130 + 280);
                *(_OWORD *)(v259 + 104) = v261;
                *(_QWORD *)(v259 + 128) = *(_QWORD *)(v130 + 288);
                v262 = *(_OWORD *)(v130 + 296);
                *(_QWORD *)(v130 + 304) = 0;
                *(_QWORD *)(v130 + 296) = 0;
                v263 = *(std::__shared_weak_count **)(v259 + 144);
                *(_OWORD *)(v259 + 136) = v262;
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                    v257 = (int64x2_t)xmmword_239F0C410;
                  }
                }
                *(_BYTE *)(v259 + 152) = *(_BYTE *)(v130 + 312);
                v259 += 160;
              }
              v258 = v260 + 20;
              v130 = (uint64_t)v260;
            }
            while (v260 + 20 != (_QWORD *)v129);
            v129 = *(_QWORD *)(a1 + 128);
          }
          if (v129 != v259)
          {
            v308 = sub_239C299F0(v129, v129, v259);
            for (m = *(_QWORD *)(a1 + 128); m != v308; m -= 160)
            {
              v310 = *(std::__shared_weak_count **)(m - 16);
              if (v310)
              {
                v311 = (unint64_t *)&v310->__shared_owners_;
                do
                  v312 = __ldaxr(v311);
                while (__stlxr(v312 - 1, v311));
                if (!v312)
                {
                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                  std::__shared_weak_count::__release_weak(v310);
                }
              }
            }
            *(_QWORD *)(a1 + 128) = v308;
          }
        }
      }
    }
LABEL_253:
    sub_239C297C8((_QWORD *)(a1 + 48));
    sub_239C298DC((_QWORD *)(a1 + 48));
    *(_WORD *)(a1 + 160) = 1;
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
    v131 = *(_QWORD **)(a1 + 48);
    if (v131 != (_QWORD *)(a1 + 56))
    {
      v132 = 0;
      do
      {
        v133 = *((unsigned __int8 *)v131 + 44);
        if (*((_BYTE *)v131 + 44))
          v134 = v132;
        else
          v134 = -1;
        *((_DWORD *)v131 + 22) = v134;
        v135 = (_QWORD *)v131[1];
        if (v135)
        {
          do
          {
            v136 = v135;
            v135 = (_QWORD *)*v135;
          }
          while (v135);
        }
        else
        {
          do
          {
            v136 = (_QWORD *)v131[2];
            v78 = *v136 == (_QWORD)v131;
            v131 = v136;
          }
          while (!v78);
        }
        v132 += v133;
        v131 = v136;
      }
      while (v136 != (_QWORD *)(a1 + 56));
    }
    v137 = *(_QWORD **)(a1 + 72);
    if (v137 != (_QWORD *)(a1 + 80))
    {
      v138 = 0;
      do
      {
        v139 = *((unsigned __int8 *)v137 + 44);
        if (*((_BYTE *)v137 + 44))
          v140 = v138;
        else
          v140 = -1;
        *((_DWORD *)v137 + 18) = v140;
        v141 = (_QWORD *)v137[1];
        if (v141)
        {
          do
          {
            v142 = v141;
            v141 = (_QWORD *)*v141;
          }
          while (v141);
        }
        else
        {
          do
          {
            v142 = (_QWORD *)v137[2];
            v78 = *v142 == (_QWORD)v137;
            v137 = v142;
          }
          while (!v78);
        }
        v138 += v139;
        v137 = v142;
      }
      while (v142 != (_QWORD *)(a1 + 80));
    }
    v315 = *(_DWORD *)(a1 + 324);
    v143 = *(_DWORD *)(a1 + 344);
    v317[0] = 0;
    v317[1] = 0;
    v318[0] = 0;
    v144 = *(_QWORD *)(a1 + 424);
    if (*(_BYTE *)(v144 + 120))
    {
      v145 = (char *)operator new(0x100uLL);
      v317[0] = v145;
      v317[1] = v145;
      v318[0] = v145 + 256;
      if (*(_BYTE *)(v144 + 120))
      {
        v146 = *(unsigned int *)(v144 + 24);
        if (v146 >= 0x41)
        {
          v317[0] = operator new(4 * v146);
          v317[1] = v317[0];
          v318[0] = (char *)v317[0] + 4 * v146;
          operator delete(v145);
        }
        v147 = *(_QWORD **)(v144 + 8);
        v148 = (_QWORD *)(v144 + 16);
        if (v147 != v148)
        {
          do
          {
            if (*((_BYTE *)v147 + 44))
            {
              v176 = (char *)v317[1];
              if (v317[1] >= v318[0])
              {
                v178 = (char *)v317[0];
                v179 = (char *)v317[1] - (char *)v317[0];
                v180 = ((char *)v317[1] - (char *)v317[0]) >> 2;
                v181 = v180 + 1;
                if ((unint64_t)(v180 + 1) >> 62)
                  sub_2394189F8();
                v182 = (char *)v318[0] - (char *)v317[0];
                if (((char *)v318[0] - (char *)v317[0]) >> 1 > v181)
                  v181 = v182 >> 1;
                if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL)
                  v183 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v183 = v181;
                if (v183)
                {
                  if (v183 >> 62)
LABEL_532:
                    sub_239418A80();
                  v184 = operator new(4 * v183);
                }
                else
                {
                  v184 = 0;
                }
                v185 = &v184[4 * v180];
                *v185 = *((_DWORD *)v147 + 8);
                v177 = v185 + 1;
                if (v176 != v178)
                {
                  v186 = v176 - 4 - v178;
                  if (v186 < 0x2C)
                    goto LABEL_543;
                  if ((unint64_t)(v176 - &v184[v179]) < 0x20)
                    goto LABEL_543;
                  v187 = (v186 >> 2) + 1;
                  v188 = &v184[4 * v180 - 16];
                  v189 = v176 - 16;
                  v190 = v187 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v191 = *(_OWORD *)v189;
                    *(v188 - 1) = *((_OWORD *)v189 - 1);
                    *v188 = v191;
                    v188 -= 2;
                    v189 -= 32;
                    v190 -= 8;
                  }
                  while (v190);
                  v185 -= v187 & 0x7FFFFFFFFFFFFFF8;
                  v176 -= 4 * (v187 & 0x7FFFFFFFFFFFFFF8);
                  if (v187 != (v187 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_543:
                    do
                    {
                      v192 = *((_DWORD *)v176 - 1);
                      v176 -= 4;
                      *--v185 = v192;
                    }
                    while (v176 != v178);
                  }
                }
                v317[0] = v185;
                v317[1] = v177;
                v318[0] = &v184[4 * v183];
                if (v178)
                  operator delete(v178);
              }
              else
              {
                *(_DWORD *)v317[1] = *((_DWORD *)v147 + 8);
                v177 = v176 + 4;
              }
              v317[1] = v177;
            }
            v193 = (_QWORD *)v147[1];
            if (v193)
            {
              do
              {
                v194 = v193;
                v193 = (_QWORD *)*v193;
              }
              while (v193);
            }
            else
            {
              do
              {
                v194 = (_QWORD *)v147[2];
                v78 = *v194 == (_QWORD)v147;
                v147 = v194;
              }
              while (!v78);
            }
            v147 = v194;
          }
          while (v194 != v148);
        }
      }
    }
    sub_239C25A58(*(_QWORD *)(a1 + 432), (char **)v317);
    if (v143 == 1)
    {
      v149 = *(_QWORD *)(a1 + 440);
      v150 = *(_DWORD *)(*(_QWORD *)(a1 + 432) + 24);
      *(_QWORD *)(v149 + 24) = v150;
      sub_239C25B28(v149, 3 * v150);
    }
    sub_239C25CA0((uint64_t *)(a1 + 576), (unsigned int **)v317, v315);
    v151 = *(_QWORD *)(a1 + 424);
    v330[0] = 0;
    v152 = *(void **)(a1 + 528);
    *(_QWORD *)(a1 + 536) = v152;
    *(_QWORD *)(a1 + 560) = *(_QWORD *)(a1 + 552);
    v153 = *(unsigned int *)(v151 + 48);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 544) - (_QWORD)v152) >> 3) < v153)
    {
      v154 = (char *)operator new(56 * v153);
      *(_QWORD *)(a1 + 528) = v154;
      *(_QWORD *)(a1 + 536) = v154;
      *(_QWORD *)(a1 + 544) = &v154[56 * v153];
      if (v152)
        operator delete(v152);
    }
    v313 = (_QWORD *)v151;
    v316 = a1 + 448;
    v329[0] = 0;
    v155 = *(_QWORD **)(v151 + 32);
    v156 = (_QWORD *)(v151 + 40);
    if (v155 != (_QWORD *)(v151 + 40))
    {
      while (*((_DWORD *)v155 + 18) == -1)
      {
        if ((*((_BYTE *)v155 + 76) & 2) == 0)
        {
          v161 = v329;
          v162 = 1;
LABEL_313:
          *v161 = (char *)*v161 + v162;
        }
        v174 = (_QWORD *)v155[1];
        if (v174)
        {
          do
          {
            v175 = v174;
            v174 = (_QWORD *)*v174;
          }
          while (v174);
        }
        else
        {
          do
          {
            v175 = (_QWORD *)v155[2];
            v78 = *v175 == (_QWORD)v155;
            v155 = v175;
          }
          while (!v78);
        }
        v155 = v175;
        if (v175 == v156)
          goto LABEL_350;
      }
      v157 = v155 + 5;
      v158 = *(_QWORD **)(a1 + 536);
      v159 = *(_QWORD *)(a1 + 544);
      if ((unint64_t)v158 >= v159)
      {
        v163 = *(_QWORD **)(a1 + 528);
        v164 = 0x6DB6DB6DB6DB6DB7 * (v158 - v163) + 1;
        if (v164 > 0x492492492492492)
          sub_2394189F8();
        v165 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v159 - (_QWORD)v163) >> 3);
        if (2 * v165 > v164)
          v164 = 2 * v165;
        if (v165 >= 0x249249249249249)
          v166 = 0x492492492492492;
        else
          v166 = v164;
        if (v166)
        {
          if (v166 > 0x492492492492492)
            goto LABEL_532;
          v167 = (char *)operator new(56 * v166);
        }
        else
        {
          v167 = 0;
        }
        v168 = &v167[8 * (v158 - v163)];
        *(_QWORD *)v168 = v157;
        *((_QWORD *)v168 + 5) = 0;
        *((_QWORD *)v168 + 6) = v316;
        *((_QWORD *)v168 + 3) = -1;
        *((_QWORD *)v168 + 4) = 0;
        if (v158 == v163)
        {
          v172 = &v167[8 * (v158 - v163)];
        }
        else
        {
          v169 = 0;
          do
          {
            v170 = &v168[v169 * 8];
            *((_QWORD *)v170 - 7) = v158[v169 - 7];
            *((_QWORD *)v170 - 6) = v158[v169 - 6];
            *((_QWORD *)v170 - 5) = v158[v169 - 5];
            v171 = *(_OWORD *)&v158[v169 - 2];
            *((_OWORD *)v170 - 2) = *(_OWORD *)&v158[v169 - 4];
            *((_OWORD *)v170 - 1) = v171;
            v169 -= 7;
          }
          while (&v158[v169] != v163);
          v172 = &v168[v169 * 8];
          v158 = *(_QWORD **)(a1 + 528);
        }
        *(_QWORD *)(a1 + 528) = v172;
        v160 = v168 + 56;
        *(_QWORD *)(a1 + 536) = v168 + 56;
        *(_QWORD *)(a1 + 544) = &v167[56 * v166];
        if (v158)
          operator delete(v158);
      }
      else
      {
        *v158 = v157;
        v158[5] = 0;
        v158[6] = v316;
        v160 = v158 + 7;
        v158[3] = -1;
        v158[4] = 0;
      }
      *(_QWORD *)(a1 + 536) = v160;
      v173 = v330[0];
      *(v160 - 3) = 0;
      *(v160 - 2) = 0;
      *(v160 - 4) = v173;
      v162 = (3 * *((_DWORD *)v155 + 20));
      v161 = v330;
      goto LABEL_313;
    }
LABEL_350:
    *((_QWORD *)&v343 + 1) = 0;
    v332 = &off_250AFB570;
    v333 = v329;
    v195 = v313;
    v334 = v313;
    v335 = &v332;
    sub_23965A910(&v332, &v342);
    v196 = v335;
    if (v335 == &v332)
    {
      v197 = 4;
      v196 = &v332;
    }
    else
    {
      if (!v335)
        goto LABEL_355;
      v197 = 5;
    }
    (*((void (**)(void))*v196 + v197))();
LABEL_355:
    v198 = v329[0];
    if (v329[0])
    {
      v199 = *(_BYTE **)(a1 + 552);
      if ((void *)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 568) - (_QWORD)v199) >> 3)) < v329[0])
      {
        if (v329[0] > (void *)0x492492492492492)
          sub_2394189F8();
        v200 = *(_BYTE **)(a1 + 560);
        v201 = (char *)operator new(56 * (uint64_t)v329[0]);
        v202 = &v201[v200 - v199];
        v203 = v202;
        if (v200 != v199)
        {
          v204 = 0;
          do
          {
            v205 = &v202[v204];
            *((_QWORD *)v205 - 7) = *(_QWORD *)&v200[v204 - 56];
            *((_QWORD *)v205 - 6) = *(_QWORD *)&v200[v204 - 48];
            *((_QWORD *)v205 - 5) = *(_QWORD *)&v200[v204 - 40];
            v206 = *(_OWORD *)&v200[v204 - 16];
            *((_OWORD *)v205 - 2) = *(_OWORD *)&v200[v204 - 32];
            *((_OWORD *)v205 - 1) = v206;
            v204 -= 56;
          }
          while (&v200[v204] != v199);
          v203 = &v202[v204];
        }
        *(_QWORD *)(a1 + 552) = v203;
        *(_QWORD *)(a1 + 560) = v202;
        *(_QWORD *)(a1 + 568) = &v201[56 * (_QWORD)v198];
        if (v199)
          operator delete(v199);
      }
      v207 = (_QWORD *)v313[4];
      if (v207 != v156)
      {
        do
        {
          if (*((_DWORD *)v207 + 18) == -1 && (*((_BYTE *)v207 + 76) & 2) == 0)
          {
            v208 = v207 + 5;
            v209 = *(_QWORD **)(a1 + 560);
            v210 = *(_QWORD *)(a1 + 568);
            if ((unint64_t)v209 >= v210)
            {
              v212 = *(_QWORD **)(a1 + 552);
              v213 = 0x6DB6DB6DB6DB6DB7 * (v209 - v212) + 1;
              if (v213 > 0x492492492492492)
                sub_2394189F8();
              v214 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v210 - (_QWORD)v212) >> 3);
              if (2 * v214 > v213)
                v213 = 2 * v214;
              if (v214 >= 0x249249249249249)
                v215 = 0x492492492492492;
              else
                v215 = v213;
              if (v215)
              {
                if (v215 > 0x492492492492492)
                  sub_239418A80();
                v216 = (char *)operator new(56 * v215);
              }
              else
              {
                v216 = 0;
              }
              v217 = &v216[8 * (v209 - v212)];
              *(_QWORD *)v217 = v208;
              *((_QWORD *)v217 + 5) = 0;
              *((_QWORD *)v217 + 6) = v316;
              *((_QWORD *)v217 + 3) = -1;
              *((_QWORD *)v217 + 4) = 0;
              if (v209 == v212)
              {
                v221 = &v216[8 * (v209 - v212)];
                v195 = v313;
              }
              else
              {
                v218 = 0;
                v195 = v313;
                do
                {
                  v219 = &v217[v218 * 8];
                  *((_QWORD *)v219 - 7) = v209[v218 - 7];
                  *((_QWORD *)v219 - 6) = v209[v218 - 6];
                  *((_QWORD *)v219 - 5) = v209[v218 - 5];
                  v220 = *(_OWORD *)&v209[v218 - 2];
                  *((_OWORD *)v219 - 2) = *(_OWORD *)&v209[v218 - 4];
                  *((_OWORD *)v219 - 1) = v220;
                  v218 -= 7;
                }
                while (&v209[v218] != v212);
                v221 = &v217[v218 * 8];
                v209 = *(_QWORD **)(a1 + 552);
              }
              *(_QWORD *)(a1 + 552) = v221;
              v211 = v217 + 56;
              *(_QWORD *)(a1 + 560) = v217 + 56;
              *(_QWORD *)(a1 + 568) = &v216[56 * v215];
              if (v209)
                operator delete(v209);
            }
            else
            {
              *v209 = v208;
              v209[5] = 0;
              v209[6] = v316;
              v211 = v209 + 7;
              v209[3] = -1;
              v209[4] = 0;
            }
            *(_QWORD *)(a1 + 560) = v211;
            v222 = v330[0];
            *(v211 - 3) = 0;
            *(v211 - 2) = 0;
            *(v211 - 4) = v222;
            v330[0] = (char *)v330[0] + (3 * *((_DWORD *)v207 + 20));
            *((_DWORD *)v207 + 18) = -1 - 1227133513 * ((*(_QWORD *)(a1 + 560) - *(_QWORD *)(a1 + 552)) >> 3);
          }
          v223 = (_QWORD *)v207[1];
          if (v223)
          {
            do
            {
              v224 = v223;
              v223 = (_QWORD *)*v223;
            }
            while (v223);
          }
          else
          {
            do
            {
              v224 = (_QWORD *)v207[2];
              v78 = *v224 == (_QWORD)v207;
              v207 = v224;
            }
            while (!v78);
          }
          v207 = v224;
        }
        while (v224 != v156);
      }
    }
    *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
    v225 = *(_QWORD *)(a1 + 504);
    *(_QWORD *)(a1 + 512) = v225;
    *(_QWORD *)(a1 + 496) = 0;
    v226 = (unint64_t)v330[0];
    if (v330[0])
    {
      sub_23946DAD4(v316, (unint64_t)v330[0]);
      v225 = *(_QWORD *)(a1 + 504);
      v227 = *(_QWORD *)(a1 + 512);
    }
    else
    {
      v227 = v225;
    }
    v228 = (v227 - v225) >> 4;
    v229 = v226 - v228;
    if (v226 <= v228)
    {
      if (v226 >= v228)
        goto LABEL_452;
      v244 = v225 + 16 * v226;
      goto LABEL_424;
    }
    v230 = *(_QWORD *)(a1 + 520);
    if (v229 > (v230 - v227) >> 4)
    {
      if (v226 >> 60)
        sub_2394189F8();
      v231 = v230 - v225;
      v232 = v231 >> 3;
      if (v231 >> 3 <= v226)
        v232 = v226;
      if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF0)
        v233 = 0xFFFFFFFFFFFFFFFLL;
      else
        v233 = v232;
      if (v233 >> 60)
        sub_239418A80();
      v234 = (char *)operator new(16 * v233);
      v235 = &v234[16 * v228];
      v236 = &v234[16 * v226];
      v237 = v235;
      v238 = (v229 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v238)
      {
        v239 = (v238 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v240 = v235 + 16;
        v241 = v239;
        do
        {
          *((_DWORD *)v240 - 4) = -1;
          *(_DWORD *)v240 = -1;
          *((_QWORD *)v240 - 1) = -1;
          *((_QWORD *)v240 + 1) = -1;
          v240 += 32;
          v241 -= 2;
        }
        while (v241);
        if (v238 + 1 == v239)
          goto LABEL_413;
        v237 = &v235[16 * v239];
      }
      do
      {
        *(_DWORD *)v237 = -1;
        *((_QWORD *)v237 + 1) = -1;
        v237 += 16;
      }
      while (v237 != v236);
LABEL_413:
      v242 = &v234[16 * v233];
      if (v227 == v225)
      {
        v243 = &v234[16 * v228];
      }
      else
      {
        do
        {
          v243 = v235 - 16;
          *((_OWORD *)v235 - 1) = *(_OWORD *)(v227 - 16);
          v227 -= 16;
          v235 -= 16;
        }
        while (v227 != v225);
      }
      v266 = *(void **)(a1 + 504);
      *(_QWORD *)(a1 + 504) = v243;
      *(_QWORD *)(a1 + 512) = v236;
      *(_QWORD *)(a1 + 520) = v242;
      if (v266)
        operator delete(v266);
LABEL_452:
      v267 = (_QWORD *)v195[10];
      v268 = (_QWORD *)v195[11];
      if (v267 != v268)
      {
        v269 = 0;
        while (1)
        {
          v271 = v267[10];
          if (*(_BYTE *)(v271 + 4) && *(_DWORD *)(v271 + 48) == -1)
            goto LABEL_457;
          v272 = v267[11];
          if (*(_BYTE *)(v272 + 4))
          {
            if (*(_DWORD *)(v272 + 48) == -1)
              goto LABEL_457;
          }
          v273 = v267[12];
          v274 = *(_DWORD *)(v273 + 32);
          if (*(_BYTE *)(v273 + 4))
            break;
          if ((*(_BYTE *)(v273 + 36) & 2) != 0)
            goto LABEL_457;
          v295 = *(_QWORD *)(a1 + 552) + 56 * v274;
          v296 = *(_QWORD *)(v295 + 32);
          v279 = (uint64_t *)(v295 + 32);
          *(_QWORD *)(*(_QWORD *)v279[2] + 8 * (v296 + *(v279 - 1))) = v269;
LABEL_456:
          ++*v279;
LABEL_457:
          v267 += 20;
          ++v269;
          if (v267 == v268)
            goto LABEL_487;
        }
        if (v274 == -1)
          goto LABEL_457;
        v275 = *(_QWORD *)(a1 + 528) + 56 * v274;
        v277 = *(_QWORD *)(v275 + 24);
        v276 = (uint64_t *)(v275 + 24);
        v278 = (_QWORD *)v276[3];
        *(_QWORD *)(*v278 + 8 * (v276[1] + v277)) = v269;
        ++v276[1];
        v279 = v276 + 2;
        v280 = *(_DWORD *)(v271 + 48);
        if (v280 != -1)
        {
          v281 = *v276;
          v282 = *v279;
          v283 = *v279 + *v276;
          v284 = v278[7];
          if (v283 <= *v276)
          {
LABEL_469:
            v287 = v284 + 16 * v283;
          }
          else
          {
            v285 = 16 * v281;
            while (1)
            {
              v286 = *(_DWORD *)(v284 + v285);
              if (v286 >= v280)
                break;
              ++v281;
              v285 += 16;
              if (!--v282)
                goto LABEL_469;
            }
            if (v286 <= v280)
              goto LABEL_471;
            if (v283 + 1 != v281)
            {
              memmove((void *)(16 * v283 - (16 * (v283 + 1) - (v284 + 16 * v281)) + 32), (const void *)(v284 + 16 * v281), 16 * (v283 + 1) - 16 * v281);
              v284 = v278[7];
              v272 = v267[11];
            }
            v287 = v284 + 16 * v281;
          }
          *(_DWORD *)v287 = v280;
          *(_QWORD *)(v287 + 8) = -1;
          ++v278[6];
          ++*v279;
        }
LABEL_471:
        v288 = *(_DWORD *)(v272 + 48);
        if (v288 == -1)
          goto LABEL_457;
        v289 = *v276;
        v290 = *v279;
        v291 = *v279 + *v276;
        v292 = v278[7];
        if (v291 <= *v276)
        {
LABEL_454:
          v270 = v292 + 16 * v291;
        }
        else
        {
          v293 = 16 * v289;
          while (1)
          {
            v294 = *(_DWORD *)(v292 + v293);
            if (v294 >= v288)
              break;
            ++v289;
            v293 += 16;
            if (!--v290)
              goto LABEL_454;
          }
          if (v294 <= v288)
            goto LABEL_457;
          if (v291 + 1 != v289)
          {
            memmove((void *)(v292 + 16 * v291 - (16 * (v291 + 1) - 16 * v289) + 32), (const void *)(v292 + 16 * v289), 16 * (v291 + 1) - 16 * v289);
            v292 = v278[7];
          }
          v270 = v292 + 16 * v289;
        }
        *(_DWORD *)v270 = v288;
        *(_QWORD *)(v270 + 8) = -1;
        ++v278[6];
        goto LABEL_456;
      }
LABEL_487:
      v297 = 3 * *(_QWORD *)(a1 + 496);
      v298 = *(_QWORD *)(a1 + 472);
      v299 = (*(_QWORD *)(a1 + 480) - v298) >> 3;
      if (v297 <= v299)
      {
        if (v297 < v299)
          *(_QWORD *)(a1 + 480) = v298 + 24 * *(_QWORD *)(a1 + 496);
      }
      else
      {
        sub_23945E108(a1 + 472, v297 - v299);
      }
      v300 = *(_QWORD *)(a1 + 504);
      v301 = *(_QWORD *)(a1 + 512);
      if (v300 != v301)
      {
        v302 = 0;
        do
        {
          if (*(_DWORD *)v300 != -1)
          {
            *(_QWORD *)(v300 + 8) = v302;
            v302 += 3;
          }
          v300 += 16;
        }
        while (v300 != v301);
      }
      if (!*((_QWORD *)&v343 + 1))
        sub_2394172E0();
      (*(void (**)(_QWORD))(**((_QWORD **)&v343 + 1) + 48))(*((_QWORD *)&v343 + 1));
      v303 = (__int128 *)*((_QWORD *)&v343 + 1);
      if (*((__int128 **)&v343 + 1) == &v342)
      {
        v304 = 4;
        v303 = &v342;
      }
      else
      {
        if (!*((_QWORD *)&v343 + 1))
        {
LABEL_502:
          if (v317[0])
          {
            v317[1] = v317[0];
            operator delete(v317[0]);
          }
          kdebug_trace();
          return 0;
        }
        v304 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v303 + 8 * v304))();
      goto LABEL_502;
    }
    v244 = v227 + 16 * v229;
    if (((v229 - 1) & 0xFFFFFFFFFFFFFFFLL) != 0)
    {
      v245 = ((v229 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v246 = v227 + 16;
      v247 = v245 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(_DWORD *)(v246 - 16) = -1;
        *(_DWORD *)v246 = -1;
        *(_QWORD *)(v246 - 8) = -1;
        *(_QWORD *)(v246 + 8) = -1;
        v246 += 32;
        v247 -= 2;
      }
      while (v247);
      if (v245 == (v245 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_424;
      v227 += 16 * (v245 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      *(_DWORD *)v227 = -1;
      *(_QWORD *)(v227 + 8) = -1;
      v227 += 16;
    }
    while (v227 != v244);
LABEL_424:
    *(_QWORD *)(a1 + 512) = v244;
    goto LABEL_452;
  }
  if (v3)
    v45 = v44 >= v3;
  else
    v45 = 0;
  result = !v45;
  if (!v45)
    v12 = 1;
  if (!v12)
    goto LABEL_100;
  return result;
}

void sub_239C1F19C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44)
{
  if (__p)
    operator delete(__p);
  free(a27);
  free(a30);
  free(a33);
  free(a36);
  free(a39);
  JUMPOUT(0x239C1F33CLL);
}

void sub_239C1F268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v14 = *(_QWORD *)(v13 - 168);
  if (!v14)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  v15 = *(_QWORD **)(v13 - 168);
  if (v15 == (_QWORD *)(v13 - 192))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 - 192);
  }
  else
  {
    if (!v15)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_8:
  if (a13)
    JUMPOUT(0x239C1F368);
  JUMPOUT(0x239C1F36CLL);
}

void sub_239C1F2BC()
{
  JUMPOUT(0x239C1F36CLL);
}

void sub_239C1F2C4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239C1F2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_239C292B0((uint64_t)va);
  sub_239C292B0(v4 - 192);
  JUMPOUT(0x239C1F308);
}

void sub_239C1F338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  void *v45;

  if (__p)
    operator delete(__p);
  v45 = *(void **)(v43 - 192);
  if (v45)
  {
    *(_QWORD *)(v43 - 184) = v45;
    operator delete(v45);
  }
  if (a42)
    operator delete(a42);
  sub_239C25A28();
  _Unwind_Resume(a1);
}

void sub_239C1F378(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t *v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  uint64_t v39;
  __int128 v40;
  unsigned int *v41;
  unint64_t *v42;
  unint64_t *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  void *__p;
  unint64_t *v53;
  char *v54;
  void *__dst;
  unsigned int *v56;
  uint64_t v57;

  v3 = a1;
  __dst = 0;
  v56 = 0;
  v57 = 0;
  v4 = *(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40);
  if (v4)
  {
    sub_23942CB44((uint64_t)&__dst, v4 >> 2);
    v5 = *(unsigned int **)(v3 + 40);
    v6 = *(unsigned int **)(v3 + 48);
    v7 = (unsigned int *)__dst;
    v8 = *(unsigned int **)(a2 + 40);
    v9 = *(unsigned int **)(a2 + 48);
    if (v5 != v6 && v8 != v9)
    {
      do
      {
        v11 = *v5;
        if (*v5 >= *v8)
        {
          if (*v8 >= v11)
          {
            *v7++ = v11;
            ++v5;
          }
          ++v8;
          if (v5 == v6)
            break;
        }
        else if (++v5 == v6)
        {
          break;
        }
      }
      while (v8 != v9);
    }
  }
  else
  {
    v7 = 0;
  }
  if (v7 != v56)
    v56 = v7;
  __p = 0;
  v53 = 0;
  v54 = 0;
  v12 = (unsigned int *)__dst;
  if (__dst != v7)
  {
    v51 = v7;
    v13 = (char *)v7 - (_BYTE *)__dst;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFDLL)
      sub_2394189F8();
    v14 = (unint64_t *)operator new(2 * v13);
    v15 = 0;
    v16 = 0;
    __p = v14;
    v53 = v14;
    v54 = (char *)&v14[v13 >> 2];
    v49 = v3;
    v50 = a2;
    v17 = *(unsigned int **)(a2 + 40);
    v18 = *(unsigned int **)(v3 + 40);
    v19 = v51;
    while (1)
    {
      v20 = *v12;
      if (*v17 < *v12)
      {
        do
        {
          v21 = v17[1];
          ++v17;
          ++v16;
        }
        while (v21 < v20);
      }
      if (*v18 < v20)
      {
        do
        {
          v22 = v18[1];
          ++v18;
          v15 = (v15 + 1);
        }
        while (v22 < v20);
      }
      if (v14 >= (unint64_t *)v54)
        break;
      *v14++ = v16 | (unint64_t)(v15 << 32);
LABEL_21:
      v53 = v14;
      if (++v12 == v19)
      {
        v41 = (unsigned int *)__p;
        v3 = v49;
        a2 = v50;
        goto LABEL_56;
      }
    }
    v23 = (unint64_t *)__p;
    v24 = (char *)v14 - (_BYTE *)__p;
    v25 = ((char *)v14 - (_BYTE *)__p) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      sub_2394189F8();
    v27 = v54 - (_BYTE *)__p;
    if ((v54 - (_BYTE *)__p) >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        sub_239418A80();
      v29 = operator new(8 * v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = (unint64_t *)&v29[8 * v25];
    v31 = &v29[8 * v28];
    *v30 = v16 | (unint64_t)(v15 << 32);
    v32 = v30 + 1;
    if (v14 == v23)
    {
      __p = &v29[8 * v25];
      v53 = v30 + 1;
      v54 = v31;
      v19 = v51;
LABEL_45:
      operator delete(v14);
LABEL_46:
      v14 = v32;
      goto LABEL_21;
    }
    v33 = (char *)(v14 - 1) - (char *)v23;
    if (v33 <= 0x167
      || &v29[v24 - 8 - (v33 & 0xFFFFFFFFFFFFFFF8)] > &v29[v24 - 8]
      || (unint64_t *)((char *)v14 - (v33 & 0xFFFFFFFFFFFFFFF8) - 8) > v14 - 1
      || (unint64_t)((char *)v14 - v29 - v24) < 0x20)
    {
      v34 = v14;
      v19 = v51;
    }
    else
    {
      v36 = (v33 >> 3) + 1;
      v34 = &v14[-(v36 & 0x3FFFFFFFFFFFFFFCLL)];
      v37 = &v29[8 * v25 - 16];
      v38 = (__int128 *)(v14 - 2);
      v39 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v40 = *v38;
        *(v37 - 1) = *(v38 - 1);
        *v37 = v40;
        v37 -= 2;
        v38 -= 2;
        v39 -= 4;
      }
      while (v39);
      v30 -= v36 & 0x3FFFFFFFFFFFFFFCLL;
      v19 = v51;
      if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_42;
    }
    do
    {
      v35 = *--v34;
      *--v30 = v35;
    }
    while (v34 != v23);
    v23 = (unint64_t *)__p;
LABEL_42:
    __p = v30;
    v53 = v32;
    v14 = v23;
    v54 = v31;
    if (!v23)
      goto LABEL_46;
    goto LABEL_45;
  }
  v14 = 0;
  v41 = 0;
LABEL_56:
  sub_239C257EC(*(_QWORD **)(v3 + 32), *(_QWORD *)(a2 + 32), &__p, v41, (unsigned int *)v14);
  v42 = (unint64_t *)__p;
  v43 = v53;
  if (__p != v53)
  {
    do
    {
      v44 = *(_DWORD *)v42;
      v45 = *((_DWORD *)v42++ + 1);
      v46 = *(_QWORD *)a2 + 8 * (*(_DWORD *)(a2 + 28) + 3 * v44);
      v47 = *(_QWORD *)v3 + 8 * (*(_DWORD *)(v3 + 28) + 3 * v45);
      v48 = *(_OWORD *)v46;
      *(_QWORD *)(v47 + 16) = *(_QWORD *)(v46 + 16);
      *(_OWORD *)v47 = v48;
    }
    while (v42 != v43);
    v42 = (unint64_t *)__p;
  }
  if (v42)
  {
    v53 = v42;
    operator delete(v42);
  }
  if (__dst)
  {
    v56 = (unsigned int *)__dst;
    operator delete(__dst);
  }
}

void sub_239C1F754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C1F794()
{
  return kdebug_trace();
}

void sub_239C1F7C4(uint64_t *a1, char a2, uint64_t a3, int a4, int a5, double a6, __n128 a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, __n128 a11, float64x2_t a12, float64x2_t a13)
{
  float64x2_t v13;
  float64x2_t v14;
  double v16;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  double *v22;
  float64x2_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  const double *v31;
  uint64_t v32;
  float64x2_t v33;
  uint64_t v38;
  float64x2_t v41;
  float64x2_t v42;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  char v56;
  int v57;
  int v58;
  float64x2_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const double *v68;
  uint64_t v69;
  float64x2_t v70;
  uint64_t v71;
  float64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int32 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64x2_t *v106;
  unint64_t v107;
  uint64_t v108;
  int64x2_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  unint64_t v115;
  float64_t *v116;
  unint64_t v117;
  float64_t *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  __int128 *v125;
  _OWORD *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  size_t v131;
  _BYTE *v132;
  uint64_t v133;
  _OWORD *v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  int64x2_t *v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  __int128 *v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  const double *v150;
  uint64_t v151;
  float64x2_t v152;
  float64x2_t *v153;
  unint64_t v154;
  uint64_t v155;
  double *v156;
  float64x2_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  char v173;
  int v174;
  int v175;
  float64x2_t v179;
  float64x2_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const double *v188;
  uint64_t v189;
  float64x2_t v190;
  uint64_t v191;
  float64x2_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  const double *v200;
  uint64_t v201;
  float64x2_t v202;
  uint64_t v203;
  float64x2_t v204;
  uint64_t v210;
  uint64_t v211;
  double *v212;
  double v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned __int32 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  int64x2_t *v238;
  unint64_t v239;
  uint64_t v240;
  int64x2_t *v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  uint64_t v246;
  unint64_t v247;
  float64_t *v248;
  unint64_t v249;
  float64_t *v250;
  char *v251;
  char *v252;
  char *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  __int128 *v257;
  _OWORD *v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  char *v262;
  size_t v263;
  _BYTE *v264;
  uint64_t v265;
  _OWORD *v266;
  uint64_t v267;
  int64_t v268;
  uint64_t v269;
  int64x2_t *v270;
  char *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _OWORD *v277;
  __int128 *v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  const double *v282;
  uint64_t v283;
  float64x2_t v284;
  float64x2_t *v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  float64x2_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  int v301;
  char v302;
  int v303;
  int v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v312;
  float64x2_t *v313;
  uint64_t v314;
  float64x2_t v315;
  float64x2_t v317;
  const double *v319;
  uint64_t v320;
  float64x2_t v321;
  float64x2_t v323;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v345;
  unint64_t *v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  const double *v351;
  float64x2_t v353;
  float64x2_t v355;
  float64x2_t v358;
  unint64_t *v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  float64x2_t v364;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v372;
  float64x2_t v375;
  float64x2_t v376;
  unint64_t *v377;
  uint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  float64x2_t v382;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v390;
  float64x2_t v393;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  unint64_t *v398;
  uint64_t v399;
  char *v400;
  char *v401;
  uint64_t v402;
  float64x2_t v404;
  float64x2_t v410;
  uint64_t v412;
  float64x2_t v413;
  uint64_t v414;
  float64x2_t v415;
  uint64_t v416;
  double v418;
  float64x2_t v419;
  const double *v422;
  uint64_t v423;
  double v425;
  float64x2_t v426;
  float64x2_t v427;
  uint64_t v428;
  double v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  _QWORD *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  int v440;
  int v441;
  char v442;
  int v443;
  int v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v452;
  float64x2_t *v453;
  uint64_t v454;
  float64x2_t v455;
  float64x2_t v457;
  const double *v459;
  uint64_t v460;
  float64x2_t v461;
  float64x2_t v463;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  int v470;
  int v471;
  int v472;
  unsigned int v473;
  unsigned int v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v482;
  unint64_t *v483;
  uint64_t v484;
  char *v485;
  char *v486;
  uint64_t v487;
  float64x2_t v489;
  float64x2_t v491;
  float64x2_t v494;
  unint64_t *v495;
  uint64_t v496;
  char *v497;
  char *v498;
  uint64_t v499;
  float64x2_t v500;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v508;
  float64x2_t v511;
  float64x2_t v512;
  unint64_t *v513;
  uint64_t v514;
  char *v515;
  char *v516;
  uint64_t v517;
  float64x2_t *v518;
  float64x2_t v519;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v527;
  float64x2_t v530;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  unint64_t *v536;
  uint64_t v537;
  char *v538;
  char *v539;
  uint64_t v540;
  float64x2_t v542;
  float64x2_t v548;
  float64x2_t v550;
  uint64_t v551;
  double v553;
  uint64_t v556;
  double v558;
  float64x2_t v559;
  float64x2_t v560;
  uint64_t *v561;
  uint64_t *v562;
  float64x2_t v563;
  double *v564;
  double *v567;
  uint64_t v568;
  _QWORD *v569;
  uint64_t v570;
  _QWORD *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  float64x2_t v584;
  double *v585;
  double *v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  uint64_t v591;
  float64x2_t v592;
  uint64_t v593;
  float64x2_t v594;
  _QWORD *v595;
  _QWORD *v596;
  uint64_t v597;
  int8x16_t v598;
  uint64_t v599;
  float64x2_t v600;
  unsigned int *v601;
  unsigned int *v602;
  double v603;
  int8x16_t v604;
  float64x2_t v605;
  float64x2_t v606;
  double v607;
  uint64_t v608;
  void *__p;
  void *v610;
  uint64_t v611;
  __int128 v612;
  __int128 v613;
  __int128 v614;
  float64x2_t v615[2];
  __int128 v616;
  __int128 v617;
  __int128 v618;
  float64x2_t v619;
  float64x2_t v620[2];
  int64x2_t v621;
  double v622;
  int64x2_t v623;
  double v624;
  float64x2_t v625;
  double v626;
  int64x2_t v627;
  double v628;
  int64x2_t v629;
  double v630;
  float64x2_t v631;
  double v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  std::mutex v639;
  uint64_t v640;
  float64x2x3_t v641;
  float64x2x3_t v642;
  float64x2x3_t v643;
  float64x2x3_t v644;
  float64x2x3_t v645;
  float64x2x3_t v646;
  float64x2x3_t v647;
  float64x2x3_t v648;
  float64x2x3_t v649;
  float64x2x3_t v650;
  float64x2x3_t v651;
  float64x2x3_t v652;

  v16 = a7.n128_f64[0];
  v640 = *MEMORY[0x24BDAC8D0];
  memset(v620, 0, sizeof(v620));
  v618 = 0u;
  v619 = 0u;
  v616 = 0u;
  v617 = 0u;
  memset(v615, 0, sizeof(v615));
  v613 = 0u;
  v614 = 0u;
  v612 = 0u;
  v608 = a1[1];
  __p = 0;
  v610 = 0;
  v611 = 0;
  v19 = *(_QWORD *)(v608 + 48) - *(_QWORD *)(v608 + 40);
  if ((v19 >> 2))
    sub_239AF450C(&__p, (v19 >> 2));
  v20 = (void *)a1[6];
  v21 = a1[7] - (_QWORD)v20;
  if (v21 >= 1)
    bzero(v20, 8 * (((unint64_t)v21 >> 3) - ((unint64_t)v21 > 7)) + 8);
  if (a5 == 1)
  {
    v570 = a1[2];
    v571 = a1 + 23;
    v156 = (double *)a1[13];
    v562 = a1;
    v560 = *(float64x2_t *)a1;
    v574 = a1[1];
    v564 = (double *)a1[14];
    if (v156 != v564)
    {
      v157 = *(float64x2_t *)a1;
      v158 = 0uLL;
      while (1)
      {
        v156[2] = 0.0;
        *(_QWORD *)&v612 = 0;
        v633 = v574;
        v586 = v156;
        v159 = *((_QWORD *)v156 + 4);
        if (v159)
        {
          v160 = *(_QWORD *)(*(_QWORD *)&v560.f64[0] + 80);
          v161 = *((_QWORD *)v156 + 3);
          v162 = **((_QWORD **)v156 + 6);
          v163 = (uint64_t *)(v162 + 8 * (v159 + v161));
          v164 = (uint64_t *)(v162 + 8 * v161);
          do
          {
            v165 = *v164;
            v166 = (_QWORD *)(v160 + 160 * *v164);
            v168 = v166[10];
            v167 = v166[11];
            v169 = v166[12];
            if (((*(unsigned __int8 *)(v167 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v168 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v169 + 36)) >> 7)
              v170 = 2;
            else
              v170 = 1;
            if ((v170 & a4) != 0)
            {
              v171 = *(unsigned __int8 *)(v168 + 4);
              if (!*(_BYTE *)(v168 + 4) || *(_DWORD *)(v168 + 48) != -1)
              {
                v172 = *(unsigned __int8 *)(v167 + 4);
                if (!*(_BYTE *)(v167 + 4) || *(_DWORD *)(v167 + 48) != -1)
                {
                  v173 = *(_BYTE *)(v169 + 4);
                  if (!v173 || *(_DWORD *)(v169 + 32) != -1)
                  {
                    v621.i8[0] = *(_BYTE *)(v168 + 4);
                    if (v171)
                      v174 = *(_DWORD *)(*v571 + 4 * *(unsigned int *)(v168 + 48));
                    else
                      v174 = -1;
                    v621.i32[1] = v174;
                    v621.i8[8] = v172;
                    if (v172)
                      v175 = *(_DWORD *)(*v571 + 4 * *(unsigned int *)(v167 + 48));
                    else
                      v175 = -1;
                    v621.i32[3] = v175;
                    LOBYTE(v622) = v173;
                    HIDWORD(v622) = -1;
                    sub_239C23984((uint64_t)(v166 + 1), a3 + 16, (uint64_t)&v612 + 8, v157.f64[0], a7.n128_f64[0], a8.f64[0], a9.f64[0], a10.f64[0], a11.n128_f64[0], a12, a13);
                    v180 = (float64x2_t *)(v160 + 160 * v165 + 104);
                    if (v171)
                    {
                      v181 = *((_QWORD *)v586 + 3);
                      v183 = *((_QWORD *)v586 + 5);
                      v182 = *((_QWORD *)v586 + 6);
                      v184 = *(_QWORD *)(v182 + 56);
                      v185 = v184 + 16 * v181;
                      if (v183)
                      {
                        v186 = v184 + 16 * (v183 + v181);
                        v187 = 16 * v183;
                        while (*(_DWORD *)v185 != v174)
                        {
                          v185 += 16;
                          v187 -= 16;
                          if (!v187)
                          {
                            v185 = v186;
                            break;
                          }
                        }
                      }
                      v188 = (const double *)&v612 + 1;
                      v645 = vld3q_f64(v188);
                      v189 = *(_QWORD *)(v182 + 24) + 8 * *(_QWORD *)(v185 + 8);
                      _Q4.f64[0] = *(float64_t *)(v189 + 16);
                      _Q5.f64[1] = v615[1].f64[0];
                      v190 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v645.val[0], v620[0].f64[1]), v645.val[1], *(float64x2_t *)((char *)v620 + 8), 1), v645.val[2], v620[1].f64[1]);
                      v645.val[0] = vmulq_f64(*(float64x2_t *)((char *)v615 + 8), *(float64x2_t *)((char *)v620 + 8));
                      v645.val[1].f64[0] = v620[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v645.val[0].f64[0] = v645.val[0].f64[0] + v615[1].f64[1] * v620[1].f64[1];
                      *(float64x2_t *)v189 = vaddq_f64(*(float64x2_t *)v189, v190);
                      *(_QWORD *)(v189 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v645.val[0]);
                      v646 = vld3q_f64(v188);
                      v191 = *(_QWORD *)v574 + 8 * (*(_DWORD *)(v574 + 28) + 3 * v174);
                      _Q4.f64[0] = *(float64_t *)(v191 + 16);
                      _Q5.f64[0] = v615[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v615 + 8);
                      v179.f64[0] = *(float64_t *)(v160 + 160 * v165 + 120);
                      v192 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v646.val[0], v180->f64[0]), v646.val[1], *v180, 1), v646.val[2], v179.f64[0]);
                      v646.val[0] = vmulq_f64(*(float64x2_t *)((char *)v615 + 8), *v180);
                      v646.val[1].f64[0] = *(float64_t *)(v160 + 160 * v165 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v646.val[0].f64[0] = v646.val[0].f64[0] + v615[1].f64[1] * v179.f64[0];
                      *(float64x2_t *)v191 = vsubq_f64(*(float64x2_t *)v191, v192);
                      *(_QWORD *)(v191 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v646.val[0]);
                    }
                    if (v172)
                    {
                      v193 = *((_QWORD *)v586 + 3);
                      v195 = *((_QWORD *)v586 + 5);
                      v194 = *((_QWORD *)v586 + 6);
                      v196 = *(_QWORD *)(v194 + 56);
                      v197 = v196 + 16 * v193;
                      if (v195)
                      {
                        v198 = v196 + 16 * (v195 + v193);
                        v199 = 16 * v195;
                        while (*(_DWORD *)v197 != v175)
                        {
                          v197 += 16;
                          v199 -= 16;
                          if (!v199)
                          {
                            v197 = v198;
                            break;
                          }
                        }
                      }
                      v200 = (const double *)&v616;
                      v647 = vld3q_f64(v200);
                      v201 = *(_QWORD *)(v194 + 24) + 8 * *(_QWORD *)(v197 + 8);
                      _Q4.f64[0] = *(float64_t *)(v201 + 16);
                      _Q5.f64[1] = v619.f64[1];
                      v202 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v647.val[0], v620[0].f64[1]), v647.val[1], *(float64x2_t *)((char *)v620 + 8), 1), v647.val[2], v620[1].f64[1]);
                      v647.val[0] = vmulq_f64(v619, *(float64x2_t *)((char *)v620 + 8));
                      v647.val[1].f64[0] = v620[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v647.val[0].f64[0] = v647.val[0].f64[0] + v620[0].f64[0] * v620[1].f64[1];
                      *(float64x2_t *)v201 = vaddq_f64(*(float64x2_t *)v201, v202);
                      *(_QWORD *)(v201 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v647.val[0]);
                      v648 = vld3q_f64(v200);
                      v203 = *(_QWORD *)v574 + 8 * (*(_DWORD *)(v574 + 28) + 3 * v175);
                      _Q4.f64[0] = *(float64_t *)(v203 + 16);
                      _Q5.f64[0] = v620[0].f64[0];
                      _Q6 = v619;
                      v179.f64[0] = *(float64_t *)(v160 + 160 * v165 + 120);
                      v204 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v648.val[0], v180->f64[0]), v648.val[1], *v180, 1), v648.val[2], v179.f64[0]);
                      v648.val[0] = vmulq_f64(v619, *v180);
                      v648.val[1].f64[0] = *(float64_t *)(v160 + 160 * v165 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v648.val[0].f64[0] = v648.val[0].f64[0] + v620[0].f64[0] * v179.f64[0];
                      *(float64x2_t *)v203 = vsubq_f64(*(float64x2_t *)v203, v204);
                      *(_QWORD *)(v203 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v648.val[0]);
                    }
                    _Q0.f64[1] = v620[1].f64[0];
                    _Q2 = *v180;
                    _Q2.f64[0] = *(float64_t *)(v160 + 160 * v165 + 112);
                    __asm { FMLA            D3, D2, V0.D[1] }
                    *(_QWORD *)&_Q2.f64[0] = v612;
                    v586[2] = v586[2] - (_D3 + v620[1].f64[1] * *(double *)(v160 + 160 * v165 + 120));
                    _V1.D[1] = v620[1].f64[0];
                    _Q4.f64[0] = v620[1].f64[0];
                    __asm { FMLA            D3, D4, V1.D[1] }
                    _Q0.f64[0] = _Q2.f64[0] + _D3 + v620[1].f64[1] * v620[1].f64[1];
                    *(double *)&v612 = _Q0.f64[0];
                    v157.f64[0] = sub_239C23F18(&v633, (uint64_t)&v621, (uint64_t)&v612 + 8, _Q0, v620[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v179);
                    v158 = 0uLL;
                    if (v171)
                    {
                      v210 = *(_QWORD *)v570 + 8 * (*(_DWORD *)(v570 + 28) + 3 * v174);
                      a7.n128_u64[0] = *(_QWORD *)(v210 + 16);
                      a8.f64[0] = *((double *)&v612 + 1) * *((double *)&v612 + 1)
                                + *(double *)&v613 * *(double *)&v613
                                + *((double *)&v613 + 1) * *((double *)&v613 + 1);
                      a9.f64[0] = *(double *)&v614 * *(double *)&v614
                                + *((double *)&v614 + 1) * *((double *)&v614 + 1)
                                + v615[0].f64[0] * v615[0].f64[0];
                      a11.n128_f64[0] = v615[1].f64[0] * v615[1].f64[0];
                      a12.f64[0] = v615[1].f64[1] * v615[1].f64[1];
                      a10.f64[0] = v615[0].f64[1] * v615[0].f64[1]
                                 + v615[1].f64[0] * v615[1].f64[0]
                                 + v615[1].f64[1] * v615[1].f64[1];
                      a8.f64[1] = a9.f64[0];
                      a7 = (__n128)vaddq_f64((float64x2_t)a7, a10);
                      v157 = vaddq_f64(*(float64x2_t *)v210, a8);
                      *(float64x2_t *)v210 = v157;
                      *(_QWORD *)(v210 + 16) = a7.n128_u64[0];
                    }
                    if (v172)
                    {
                      v211 = *(_QWORD *)v570 + 8 * (*(_DWORD *)(v570 + 28) + 3 * v175);
                      a7.n128_u64[0] = *(_QWORD *)(v211 + 16);
                      a8.f64[0] = *(double *)&v616 * *(double *)&v616
                                + *((double *)&v616 + 1) * *((double *)&v616 + 1)
                                + *(double *)&v617 * *(double *)&v617;
                      a9.f64[0] = *((double *)&v617 + 1) * *((double *)&v617 + 1)
                                + *(double *)&v618 * *(double *)&v618
                                + *((double *)&v618 + 1) * *((double *)&v618 + 1);
                      a11.n128_f64[0] = v619.f64[1] * v619.f64[1];
                      a12.f64[0] = v620[0].f64[0] * v620[0].f64[0];
                      a10.f64[0] = v619.f64[0] * v619.f64[0]
                                 + v619.f64[1] * v619.f64[1]
                                 + v620[0].f64[0] * v620[0].f64[0];
                      a8.f64[1] = a9.f64[0];
                      a7.n128_u64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)a7, a10);
                      v157 = vaddq_f64(*(float64x2_t *)v211, a8);
                      *(float64x2_t *)v211 = v157;
                      *(_QWORD *)(v211 + 16) = a7.n128_u64[0];
                    }
                  }
                }
              }
            }
            ++v164;
          }
          while (v164 != v163);
        }
        v212 = v586;
        if (*(_BYTE *)(*(_QWORD *)v586 + 4))
        {
          if ((a2 & 1) != 0)
          {
            v213 = *(double *)&v612 + *(double *)&v612 * a6;
            *(double *)&v612 = v213;
          }
          else
          {
            v213 = *(double *)&v612;
          }
          a7.n128_f64[0] = fabs(v213);
          v157.f64[0] = 1.0 / v213;
          if (a7.n128_f64[0] < v16)
            v157.f64[0] = 0.0;
          v586[1] = v157.f64[0];
          v214 = *((_QWORD *)v586 + 5);
          if (v214)
            break;
        }
LABEL_136:
        v156 = v212 + 7;
        if (v156 == v564)
          goto LABEL_265;
      }
      v215 = *((_QWORD *)v586 + 3);
      v216 = *(_QWORD *)(*((_QWORD *)v586 + 6) + 56);
      v568 = v216 + 16 * (v214 + v215);
      v217 = v216 + 16 * v215;
      while (1)
      {
        v218 = *(_QWORD *)(*((_QWORD *)v212 + 6) + 24) + 8 * *(_QWORD *)(v217 + 8);
        v157.f64[0] = *(float64_t *)(v218 + 16);
        a7 = *(__n128 *)v218;
        a8.f64[0] = v212[1];
        a9.f64[0] = v212[2];
        a10 = vmulq_n_f64(*(float64x2_t *)v218, a8.f64[0]);
        v219 = *(_QWORD *)v608 + 8 * (*(_DWORD *)(v608 + 28) + 3 * *(_DWORD *)v217);
        a7.n128_u64[0] = *(_QWORD *)(v219 + 16);
        v606 = vmulq_f64(v157, a8);
        a7.n128_u64[0] = *(_OWORD *)&vmlsq_f64((float64x2_t)a7, a9, v606);
        a8 = a10;
        v157 = vmlsq_lane_f64(*(float64x2_t *)v219, a10, a9.f64[0], 0);
        *(float64x2_t *)v219 = v157;
        *(_QWORD *)(v219 + 16) = a7.n128_u64[0];
        v576 = v217;
        v220 = *(_DWORD *)v217;
        v221 = *((_QWORD *)v212 + 3);
        v222 = *((_QWORD *)v212 + 5);
        v223 = *(_QWORD *)(*((_QWORD *)v212 + 6) + 56);
        v224 = (unsigned int *)(v223 + 16 * v221);
        if (v222)
        {
          v225 = 16 * v222;
          while (*v224 < v220)
          {
            v224 += 4;
            v225 -= 16;
            if (!v225)
              goto LABEL_182;
          }
        }
        v602 = (unsigned int *)(v223 + 16 * (v222 + v221));
        if (v224 != v602)
          break;
LABEL_182:
        v217 = v576 + 16;
        if (v576 + 16 == v568)
          goto LABEL_136;
      }
      v157 = (float64x2_t)vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL);
      v226 = *(_QWORD **)(v608 + 32);
      v596 = v226 + 2;
      a8.f64[1] = v157.f64[0];
      v590 = a8;
      while (1)
      {
        v229 = v226[11] + 24 * *v224;
        v230 = *(char **)v229;
        v231 = *(char **)(v229 + 8);
        if (*(char **)v229 != v231)
        {
          while (*(_DWORD *)v230 < v220)
          {
            v230 += 16;
            if (v230 == v231)
              goto LABEL_199;
          }
        }
        if (v230 == v231)
          goto LABEL_199;
        if (*(_DWORD *)v230 != v220)
          break;
        v227 = *v596 + 8 * *((_QWORD *)v230 + 1);
LABEL_191:
        v228 = *(_QWORD *)(*((_QWORD *)v212 + 6) + 24) + 8 * *((_QWORD *)v224 + 1);
        v157.f64[0] = *(float64_t *)(v227 + 16);
        a8.f64[0] = *(float64_t *)(v227 + 40);
        a10.f64[0] = *(float64_t *)(v227 + 64);
        a12.f64[0] = *(float64_t *)(v228 + 16);
        a13 = *(float64x2_t *)v228;
        v13.f64[0] = v606.f64[0] * *(double *)v228;
        v14.f64[0] = vmuld_lane_f64(v606.f64[0], *(float64x2_t *)v228, 1);
        v157 = vsubq_f64(v157, v13);
        v13.f64[1] = v590.f64[1];
        a7 = (__n128)vmlsq_lane_f64(*(float64x2_t *)v227, v590, *(double *)v228, 0);
        a8 = vsubq_f64(a8, v14);
        a9 = vmlsq_laneq_f64(*(float64x2_t *)(v227 + 24), v590, *(float64x2_t *)v228, 1);
        a10 = vmlsq_f64(a10, a12, v606);
        a11 = (__n128)vmlsq_lane_f64(*(float64x2_t *)(v227 + 48), v590, a12.f64[0], 0);
        *(__n128 *)v227 = a7;
        *(float64_t *)(v227 + 16) = v157.f64[0];
        *(float64x2_t *)(v227 + 24) = a9;
        *(float64_t *)(v227 + 40) = a8.f64[0];
        *(__n128 *)(v227 + 48) = a11;
        *(float64_t *)(v227 + 64) = a10.f64[0];
        v224 += 4;
        if (v224 == v602)
          goto LABEL_182;
      }
      v231 = v230;
LABEL_199:
      v232 = v226[10];
      if (v232)
      {
        v234 = v226[6];
        v233 = v226[7];
        v235 = ((v233 - v234) << 6) - 1;
        v236 = v226[9];
        if (v233 == v234)
          v235 = 0;
        v227 = v226[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v234 + (((unint64_t)(v236 + v232 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v236 + v232 - 1) & 0x1FF));
        v226[10] = v232 - 1;
        if ((unint64_t)(v235 - (v232 + v236) + 1) >= 0x400)
        {
          operator delete(*(void **)(v233 - 8));
          v226[7] -= 8;
        }
        goto LABEL_264;
      }
      v621.i64[0] = 0;
      v237 = v226[2];
      v238 = (int64x2_t *)v226[3];
      v239 = (unint64_t)v238 - v237;
      v240 = (uint64_t)((uint64_t)v238->i64 - v237) >> 3;
      v241 = (int64x2_t *)(v237 + (((unint64_t)v238 - v237) & 0xFFFFFFFFFFFFFFF8));
      v242 = v226[4];
      if ((unint64_t)(v242 - (_QWORD)v238) < 0x48)
      {
        v243 = v240 + 9;
        if ((unint64_t)(v240 + 9) >> 61)
          sub_2394189F8();
        v244 = v242 - v237;
        if (v244 >> 2 > v243)
          v243 = v244 >> 2;
        if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFF8)
          v243 = 0x1FFFFFFFFFFFFFFFLL;
        v582 = v243;
        if (v243)
        {
          if (v243 >> 61)
            sub_239418A80();
          v245 = operator new(8 * v243);
          v158 = 0uLL;
        }
        else
        {
          v245 = 0;
        }
        v251 = &v245[8 * v240];
        *((_QWORD *)v251 + 8) = 0;
        *((_OWORD *)v251 + 2) = v158;
        *((_OWORD *)v251 + 3) = v158;
        *(_OWORD *)v251 = v158;
        *((_OWORD *)v251 + 1) = v158;
        v579 = v229;
        if ((int64x2_t *)v237 == v238)
        {
          v253 = &v245[8 * v240];
        }
        else
        {
          if (v239 - 8 >= 0x68)
          {
            v254 = (uint64_t)((uint64_t)v238->i64 - v237) >> 3;
            v252 = (char *)(v237 + (((unint64_t)v238 - v237) & 0xFFFFFFFFFFFFFFF8));
            v253 = &v245[8 * v240];
            if (v237 + (v239 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v245[v239 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v255 = ((v239 - 8) >> 3) + 1;
              v252 = &v241->i8[-8 * (v255 & 0x3FFFFFFFFFFFFFFCLL)];
              v256 = 8 * v254;
              v257 = (__int128 *)(v237 + 8 * v254 - 16);
              v258 = &v245[v256 - 16];
              v259 = v255 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v260 = *v257;
                *(v258 - 1) = *(v257 - 1);
                *v258 = v260;
                v257 -= 2;
                v258 -= 2;
                v259 -= 4;
              }
              while (v259);
              v253 = &v251[-8 * (v255 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v255 == (v255 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_227;
            }
          }
          else
          {
            v252 = (char *)(v237 + (((unint64_t)v238 - v237) & 0xFFFFFFFFFFFFFFF8));
            v253 = &v245[8 * v240];
          }
          do
          {
            v261 = *((_QWORD *)v252 - 1);
            v252 -= 8;
            *((_QWORD *)v253 - 1) = v261;
            v253 -= 8;
          }
          while (v252 != (char *)v237);
        }
LABEL_227:
        v262 = v251 + 72;
        v263 = (char *)v238 - (char *)v241;
        if (v263)
        {
          v264 = v245;
          memmove(v251 + 72, v241, v263);
          v245 = v264;
        }
        v229 = v579;
        v226[2] = v253;
        v226[3] = &v262[v263];
        v226[4] = &v245[8 * v582];
        if (v237)
          operator delete((void *)v237);
        goto LABEL_263;
      }
      v583 = (uint64_t)((uint64_t)v238->i64 - v237) >> 3;
      v246 = (char *)v238 - (char *)v241;
      if ((unint64_t)((char *)v238 - (char *)v241) > 0x47)
      {
        v248 = (float64_t *)v226[3];
        v247 = 9;
        goto LABEL_240;
      }
      v247 = v246 >> 3;
      v248 = (float64_t *)&v238->i64[9 - (v246 >> 3)];
      v249 = 64 - (v246 & 0xFFFFFFFFFFFFFFF8);
      if (v249 >= 0x68)
      {
        if (v238 >= (int64x2_t *)&v621.u64[1] || &v621 >= (int64x2_t *)((char *)&v238->u64[1] + v249))
        {
          v265 = (v249 >> 3) + 1;
          v266 = (_OWORD *)v226[3];
          v267 = v265 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            *v266 = v158;
            v266[1] = v158;
            v266 += 2;
            v267 -= 4;
          }
          while (v267);
          if (v265 == (v265 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_239:
            v226[3] = v248;
            if (v238 == v241)
              goto LABEL_263;
LABEL_240:
            v268 = (char *)v248 - (char *)&v241[4].u64[1];
            v269 = v268 >> 3;
            v270 = (int64x2_t *)(v248 - 9);
            v271 = (char *)v248;
            if (v248 - 9 < (float64_t *)v238)
            {
              v272 = (v239 & 0xFFFFFFFFFFFFFFF8) + v268;
              v273 = v237 + v272 + 8;
              if ((unint64_t)v238 > v273)
                v273 = (unint64_t)v238;
              v274 = v273 + ~v237 - v272;
              if (v274 > 0x57)
              {
                v275 = (v274 >> 3) + 1;
                v276 = v275 & 0x3FFFFFFFFFFFFFFCLL;
                v270 = (int64x2_t *)((char *)v270 + v276 * 8);
                v277 = v248 + 2;
                v278 = (__int128 *)(v237 + 8 * v269 + 8 * v583 + 16);
                v279 = v275 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v280 = *v278;
                  *(v277 - 1) = *(v278 - 1);
                  *v277 = v280;
                  v277 += 2;
                  v278 += 2;
                  v279 -= 4;
                }
                while (v279);
                v271 = (char *)&v248[v276];
                if (v275 == (v275 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_249;
              }
              else
              {
                v271 = (char *)v248;
              }
              do
              {
                v281 = v270->i64[0];
                v270 = (int64x2_t *)((char *)v270 + 8);
                *(_QWORD *)v271 = v281;
                v271 += 8;
              }
              while (v270 < v238);
            }
LABEL_249:
            v226[3] = v271;
            if (v248 != (float64_t *)&v241[4].u64[1])
              memmove(&v248[-v269], (const void *)(v237 + (((unint64_t)v238 - v237) & 0xFFFFFFFFFFFFFFF8)), v268);
            v282 = (const double *)&v621;
            if (v241 <= &v621)
            {
              v283 = 9;
              if (v226[3] <= (unint64_t)&v621)
                v283 = 0;
              v282 = (const double *)&v621.i64[v283];
            }
            if (v247 >= 0xA
              && (v241 >= (int64x2_t *)(v282 + 1)
               || (unint64_t)v282 >= v237 + (v239 & 0xFFFFFFFFFFFFFFF8) + 8 * v247))
            {
              v241 = (int64x2_t *)((char *)v241 + 8 * (v247 & 0xFFFFFFFFFFFFFFFCLL));
              v284 = vld1q_dup_f64(v282);
              v285 = (float64x2_t *)(v237 + 8 * v583 + 16);
              v286 = v247 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v285[-1] = v284;
                *v285 = v284;
                v285 += 2;
                v286 -= 4;
              }
              while (v286);
              if (v247 == (v247 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_263;
              v247 &= 3u;
            }
            do
            {
              *(double *)v241->i64 = *v282;
              v241 = (int64x2_t *)((char *)v241 + 8);
              --v247;
            }
            while (v247);
LABEL_263:
            v227 = v226[3] - 72;
            v212 = v586;
LABEL_264:
            v287 = (v227 - *v596) >> 3;
            v621.i32[0] = v220;
            v621.i64[1] = v287;
            sub_239C22598((char **)v229, v231, &v621);
            v158 = 0uLL;
            goto LABEL_191;
          }
          v250 = (float64_t *)&v238->i64[v265 & 0x3FFFFFFFFFFFFFFCLL];
        }
        else
        {
          v250 = (float64_t *)v226[3];
        }
      }
      else
      {
        v250 = (float64_t *)v226[3];
      }
      do
        *v250++ = *(float64_t *)v621.i64;
      while (v250 != v248);
      goto LABEL_239;
    }
LABEL_265:
    v288 = v562[16];
    v591 = v562[17];
    if (v288 != v591)
    {
      v289.f64[0] = v560.f64[0];
      do
      {
        *(_QWORD *)(v288 + 16) = 0;
        v633 = v574;
        v597 = v288;
        v290 = *(_QWORD *)(v288 + 32);
        if (v290)
        {
          v291 = *(_QWORD *)(*(_QWORD *)&v560.f64[0] + 80);
          v292 = (uint64_t *)(**(_QWORD **)(v288 + 48) + 8 * *(_QWORD *)(v288 + 24));
          v293 = 8 * v290;
          do
          {
            v294 = *v292;
            v295 = (_QWORD *)(v291 + 160 * *v292);
            v297 = v295[10];
            v296 = v295[11];
            v298 = v295[12];
            if (((*(unsigned __int8 *)(v296 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v297 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v298 + 36)) >> 7)
              v299 = 2;
            else
              v299 = 1;
            if ((v299 & a4) != 0)
            {
              v300 = *(unsigned __int8 *)(v297 + 4);
              if (!*(_BYTE *)(v297 + 4) || *(_DWORD *)(v297 + 48) != -1)
              {
                v301 = *(unsigned __int8 *)(v296 + 4);
                if (!*(_BYTE *)(v296 + 4) || *(_DWORD *)(v296 + 48) != -1)
                {
                  v302 = *(_BYTE *)(v298 + 4);
                  if (!v302 || *(_DWORD *)(v298 + 32) != -1)
                  {
                    v621.i8[0] = *(_BYTE *)(v297 + 4);
                    if (v300)
                      v303 = *(_DWORD *)(*v571 + 4 * *(unsigned int *)(v297 + 48));
                    else
                      v303 = -1;
                    v621.i32[1] = v303;
                    v621.i8[8] = v301;
                    if (v301)
                      v304 = *(_DWORD *)(*v571 + 4 * *(unsigned int *)(v296 + 48));
                    else
                      v304 = -1;
                    v621.i32[3] = v304;
                    LOBYTE(v622) = v302;
                    HIDWORD(v622) = -1;
                    v305.f64[0] = sub_239C23984((uint64_t)(v295 + 1), a3 + 16, (uint64_t)&v612 + 8, v289.f64[0], a7.n128_f64[0], a8.f64[0], a9.f64[0], a10.f64[0], a11.n128_f64[0], a12, a13);
                    v313 = (float64x2_t *)(v291 + 160 * v294 + 104);
                    if (v300)
                    {
                      *(float64x2x3_t *)(&v307 - 2) = vld3q_f64((const double *)&v612 + 1);
                      v314 = *(_QWORD *)v574 + 8 * (*(_DWORD *)(v574 + 28) + 3 * v303);
                      v308 = *(float64x2_t *)v314;
                      v309.f64[0] = *(float64_t *)(v314 + 16);
                      v310.f64[0] = v615[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v615 + 8);
                      v312.f64[0] = *(float64_t *)(v291 + 160 * v294 + 120);
                      v317 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v315, v313->f64[0]), _Q1, *v313, 1), v307, v312.f64[0]);
                      _Q0 = vmulq_f64(*(float64x2_t *)((char *)v615 + 8), *v313);
                      _Q1.f64[0] = *(float64_t *)(v291 + 160 * v294 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v615[1].f64[1] * v312.f64[0];
                      v305 = vsubq_f64(v309, _Q0);
                      v306 = vsubq_f64(*(float64x2_t *)v314, v317);
                      *(float64x2_t *)v314 = v306;
                      *(float64_t *)(v314 + 16) = v305.f64[0];
                    }
                    if (v301)
                    {
                      v319 = (const double *)&v616;
                      *(float64x2x3_t *)(&v307 - 2) = vld3q_f64(v319);
                      v320 = *(_QWORD *)v574 + 8 * (*(_DWORD *)(v574 + 28) + 3 * v304);
                      v308 = *(float64x2_t *)v320;
                      v309.f64[0] = *(float64_t *)(v320 + 16);
                      v310.f64[0] = v620[0].f64[0];
                      _Q6 = v619;
                      v312.f64[0] = *(float64_t *)(v291 + 160 * v294 + 120);
                      v323 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v321, v313->f64[0]), _Q1, *v313, 1), v307, v312.f64[0]);
                      _Q0 = vmulq_f64(v619, *v313);
                      _Q1.f64[0] = *(float64_t *)(v291 + 160 * v294 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v620[0].f64[0] * v312.f64[0];
                      v305 = vsubq_f64(v309, _Q0);
                      v306 = vsubq_f64(*(float64x2_t *)v320, v323);
                      *(float64x2_t *)v320 = v306;
                      *(float64_t *)(v320 + 16) = v305.f64[0];
                    }
                    v289.f64[0] = sub_239C23F18(&v633, (uint64_t)&v621, (uint64_t)&v612 + 8, v305, v306.f64[0], v307, v308.f64[0], v309, v310, _Q6, v312);
                    if (v300)
                    {
                      v325 = *(_QWORD *)v570 + 8 * (*(_DWORD *)(v570 + 28) + 3 * v303);
                      a7.n128_u64[0] = *(_QWORD *)(v325 + 16);
                      a8.f64[0] = *((double *)&v612 + 1) * *((double *)&v612 + 1)
                                + *(double *)&v613 * *(double *)&v613
                                + *((double *)&v613 + 1) * *((double *)&v613 + 1);
                      a9.f64[0] = *(double *)&v614 * *(double *)&v614
                                + *((double *)&v614 + 1) * *((double *)&v614 + 1)
                                + v615[0].f64[0] * v615[0].f64[0];
                      a11.n128_f64[0] = v615[1].f64[0] * v615[1].f64[0];
                      a12.f64[0] = v615[1].f64[1] * v615[1].f64[1];
                      a10.f64[0] = v615[0].f64[1] * v615[0].f64[1]
                                 + v615[1].f64[0] * v615[1].f64[0]
                                 + v615[1].f64[1] * v615[1].f64[1];
                      a8.f64[1] = a9.f64[0];
                      a7 = (__n128)vaddq_f64((float64x2_t)a7, a10);
                      v289 = vaddq_f64(*(float64x2_t *)v325, a8);
                      *(float64x2_t *)v325 = v289;
                      *(_QWORD *)(v325 + 16) = a7.n128_u64[0];
                    }
                    if (v301)
                    {
                      v326 = *(_QWORD *)v570 + 8 * (*(_DWORD *)(v570 + 28) + 3 * v304);
                      a7.n128_u64[0] = *(_QWORD *)(v326 + 16);
                      a8.f64[0] = *(double *)&v616 * *(double *)&v616
                                + *((double *)&v616 + 1) * *((double *)&v616 + 1)
                                + *(double *)&v617 * *(double *)&v617;
                      a9.f64[0] = *((double *)&v617 + 1) * *((double *)&v617 + 1)
                                + *(double *)&v618 * *(double *)&v618
                                + *((double *)&v618 + 1) * *((double *)&v618 + 1);
                      a11.n128_f64[0] = v619.f64[1] * v619.f64[1];
                      a12.f64[0] = v620[0].f64[0] * v620[0].f64[0];
                      a10.f64[0] = v619.f64[0] * v619.f64[0]
                                 + v619.f64[1] * v619.f64[1]
                                 + v620[0].f64[0] * v620[0].f64[0];
                      a8.f64[1] = a9.f64[0];
                      a7.n128_u64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)a7, a10);
                      v289 = vaddq_f64(*(float64x2_t *)v326, a8);
                      *(float64x2_t *)v326 = v289;
                      *(_QWORD *)(v326 + 16) = a7.n128_u64[0];
                    }
                  }
                }
              }
            }
            ++v292;
            v293 -= 8;
          }
          while (v293);
        }
        v288 = v597 + 56;
      }
      while (v597 + 56 != v591);
    }
    v327 = v562[1];
    v328 = v562[2];
    v633 = *v562;
    v634 = v571;
    v635 = a3;
    v636 = v327;
    v637 = v328;
    v638 = a4;
    memset(v639.__m_.__opaque, 0, sizeof(v639.__m_.__opaque));
    v639.__m_.__sig = 850045863;
    v329 = *(_QWORD *)(v633 + 56);
    v330 = *(_QWORD *)(v633 + 64);
    if (v329 == v330)
      goto LABEL_456;
    while (1)
    {
      v332 = *(_QWORD *)(v329 + 48);
      v331 = *(_QWORD *)(v329 + 56);
      v333 = ((*(unsigned __int8 *)(v331 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v332 + 52)) >> 7 ? 2 : 1;
      if ((v333 & v638) != 0)
      {
        v334 = *(unsigned __int8 *)(v332 + 4);
        if (!*(_BYTE *)(v332 + 4) || *(_DWORD *)(v332 + 48) != -1)
        {
          v335 = *(unsigned __int8 *)(v331 + 4);
          if (!*(_BYTE *)(v331 + 4) || *(_DWORD *)(v331 + 48) != -1)
            break;
        }
      }
LABEL_297:
      v329 += 120;
      if (v329 == v330)
        goto LABEL_456;
    }
    if (*(_BYTE *)(v332 + 4))
    {
      v336 = *(_DWORD *)(*v634 + 4 * *(unsigned int *)(v332 + 48));
      if (*(_BYTE *)(v331 + 4))
      {
LABEL_308:
        v337 = *(_DWORD *)(*v634 + 4 * *(unsigned int *)(v331 + 48));
        goto LABEL_311;
      }
    }
    else
    {
      v336 = -1;
      if (*(_BYTE *)(v331 + 4))
        goto LABEL_308;
    }
    v337 = -1;
LABEL_311:
    sub_239C227D4(v329 + 8, a3, (uint64_t)&v621);
    if (!v335)
      goto LABEL_334;
    if (!v334 || v336 < v337)
    {
LABEL_324:
      v359 = *(unint64_t **)(v327 + 32);
      v360 = v359[11] + 24 * v337;
      v362 = *(char **)v360;
      v361 = *(char **)(v360 + 8);
      if (*(char **)v360 != v361)
      {
        while (*(_DWORD *)v362 < v337)
        {
          v362 += 16;
          if (v362 == v361)
            goto LABEL_332;
        }
      }
      if (v362 != v361)
      {
        if (*(_DWORD *)v362 == v337)
        {
          v363 = v359[2] + 8 * *((_QWORD *)v362 + 1);
LABEL_333:
          v339.f64[0] = *(float64_t *)(v363 + 16);
          v341.f64[0] = *(float64_t *)(v363 + 40);
          v338.f64[0] = *(float64_t *)(v363 + 64);
          *(_QWORD *)&v364.f64[1] = v627.i64[1];
          _V19.D[1] = v631.f64[1];
          _Q20 = (float64x2_t)vzip1q_s64(v627, v629);
          _Q22 = (float64x2_t)vzip2q_s64(v627, v629);
          v368.f64[0] = v628;
          v368.f64[1] = v630;
          v369 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v627.i64), _Q22, (float64x2_t)v627, 1), v368, v628);
          _D6 = *(double *)&v627.i64[1];
          __asm { FMLA            D24, D6, V19.D[1] }
          v364.f64[0] = _D24 + v632 * v628;
          v372 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v629.i64), _Q22, (float64x2_t)v629, 1), v368, v630);
          _D17 = *(double *)&v629.i64[1];
          __asm { FMLA            D24, D17, V19.D[1] }
          v343.f64[0] = _D24 + v632 * v630;
          v375 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v631.f64[0]), _Q22, v631, 1), v368, v632);
          _Q22.f64[0] = v631.f64[1];
          __asm { FMLA            D20, D22, V19.D[1] }
          _Q18.f64[0] = _Q20.f64[0] + v632 * v632;
          v339 = vaddq_f64(v339, v364);
          v342 = vaddq_f64(*(float64x2_t *)(v363 + 24), v372);
          v341 = vaddq_f64(v341, v343);
          v376 = vaddq_f64(*(float64x2_t *)(v363 + 48), v375);
          *(float64x2_t *)v363 = vaddq_f64(*(float64x2_t *)v363, v369);
          *(float64_t *)(v363 + 16) = v339.f64[0];
          *(float64x2_t *)(v363 + 24) = v342;
          *(float64_t *)(v363 + 40) = v341.f64[0];
          v338 = vaddq_f64(v338, _Q18);
          *(float64x2_t *)(v363 + 48) = v376;
          *(float64_t *)(v363 + 64) = v338.f64[0];
LABEL_334:
          if (!v334)
          {
LABEL_357:
            if (v335)
            {
              v414 = *(_QWORD *)v328 + 8 * (*(_DWORD *)(v328 + 28) + 3 * v337);
              v339.f64[0] = *(float64_t *)(v414 + 16);
              v415.f64[0] = *(double *)v627.i64 * *(double *)v627.i64
                          + *(double *)&v627.i64[1] * *(double *)&v627.i64[1]
                          + v628 * v628;
              v342.f64[0] = v631.f64[0] * v631.f64[0] + v631.f64[1] * v631.f64[1] + v632 * v632;
              v415.f64[1] = *(double *)v629.i64 * *(double *)v629.i64
                          + *(double *)&v629.i64[1] * *(double *)&v629.i64[1]
                          + v630 * v630;
              v339 = vaddq_f64(v339, v342);
              *(float64x2_t *)v414 = vaddq_f64(*(float64x2_t *)v414, v415);
              *(float64_t *)(v414 + 16) = v339.f64[0];
            }
            if (v334)
            {
              v416 = *(_QWORD *)v327 + 8 * (*(_DWORD *)(v327 + 28) + 3 * v336);
              v339.f64[0] = *(float64_t *)(v416 + 16);
              v342.f64[0] = v622;
              _V6.D[1] = v625.f64[1];
              v418 = *(double *)(v329 + 80);
              v419 = *(float64x2_t *)(v329 + 64);
              v342.f64[1] = v624;
              _Q2 = vmulq_f64(v625, v419);
              _D3 = *(_QWORD *)(v329 + 72);
              __asm { FMLA            D2, D3, V6.D[1] }
              _Q2.f64[0] = _Q2.f64[0] + v626 * v418;
              *(float64x2_t *)v416 = vsubq_f64(*(float64x2_t *)v416, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v621, v623), v419.f64[0]), (float64x2_t)vzip2q_s64(v621, v623), v419, 1), v342, v418));
              *(_QWORD *)(v416 + 16) = *(_OWORD *)&vsubq_f64(v339, _Q2);
            }
            if (v335)
            {
              v422 = (const double *)&v627;
              v649 = vld3q_f64(v422);
              v423 = *(_QWORD *)v327 + 8 * (*(_DWORD *)(v327 + 28) + 3 * v337);
              v342.f64[0] = *(float64_t *)(v423 + 16);
              _V6.D[1] = v631.f64[1];
              v425 = *(double *)(v329 + 80);
              v426 = *(float64x2_t *)(v329 + 64);
              v427 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v649.val[0], v426.f64[0]), v649.val[1], v426, 1), v649.val[2], v425);
              v649.val[0] = vmulq_f64(v631, v426);
              v649.val[1].f64[0] = *(float64_t *)(v329 + 72);
              __asm { FMLA            D0, D1, V6.D[1] }
              v649.val[0].f64[0] = v649.val[0].f64[0] + v632 * v425;
              *(float64x2_t *)v423 = vsubq_f64(*(float64x2_t *)v423, v427);
              *(_QWORD *)(v423 + 16) = *(_OWORD *)&vsubq_f64(v342, v649.val[0]);
            }
            goto LABEL_297;
          }
          v377 = *(unint64_t **)(v327 + 32);
          v378 = v377[11] + 24 * v336;
          v380 = *(char **)v378;
          v379 = *(char **)(v378 + 8);
          if (*(char **)v378 != v379)
          {
            while (*(_DWORD *)v380 < v336)
            {
              v380 += 16;
              if (v380 == v379)
                goto LABEL_343;
            }
          }
          if (v380 != v379)
          {
            if (*(_DWORD *)v380 == v336)
            {
              v381 = v377[2] + 8 * *((_QWORD *)v380 + 1);
LABEL_344:
              v339.f64[0] = *(float64_t *)(v381 + 16);
              v341.f64[0] = *(float64_t *)(v381 + 40);
              v338.f64[0] = *(float64_t *)(v381 + 64);
              *(_QWORD *)&v382.f64[1] = v621.i64[1];
              _Q22 = v625;
              _Q20 = (float64x2_t)vzip1q_s64(v621, v623);
              v385 = (float64x2_t)vzip2q_s64(v621, v623);
              v386.f64[0] = v622;
              v386.f64[1] = v624;
              v387 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v621.i64), v385, (float64x2_t)v621, 1), v386, v622);
              _D6 = *(double *)&v621.i64[1];
              __asm { FMLA            D19, D6, V22.D[1] }
              v382.f64[0] = _D19 + v626 * v622;
              v390 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v623.i64), v385, (float64x2_t)v623, 1), v386, v624);
              _D17 = *(double *)&v623.i64[1];
              __asm { FMLA            D19, D17, V22.D[1] }
              v343.f64[0] = _D19 + v626 * v624;
              v587 = v385;
              v592 = _Q20;
              v584 = v386;
              v393 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v625.f64[0]), v385, v625, 1), v386, v626);
              _Q19 = vmulq_f64(_Q22, _Q22);
              _Q20.f64[0] = v625.f64[1];
              v598 = (int8x16_t)v625;
              v603 = v626;
              __asm { FMLA            D19, D20, V22.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + v603 * v603;
              v395 = vaddq_f64(v339, v382);
              v342 = vaddq_f64(*(float64x2_t *)(v381 + 24), v390);
              v396 = vaddq_f64(v341, v343);
              v397 = vaddq_f64(*(float64x2_t *)(v381 + 48), v393);
              *(float64x2_t *)v381 = vaddq_f64(*(float64x2_t *)v381, v387);
              *(float64_t *)(v381 + 16) = v395.f64[0];
              *(float64x2_t *)(v381 + 24) = v342;
              *(float64_t *)(v381 + 40) = v396.f64[0];
              *(float64x2_t *)(v381 + 48) = v397;
              *(_QWORD *)(v381 + 64) = *(_OWORD *)&vaddq_f64(v338, _Q19);
              if (!v335 || v337 < v336)
                goto LABEL_356;
              v398 = *(unint64_t **)(v327 + 32);
              v399 = v398[11] + 24 * v337;
              v401 = *(char **)v399;
              v400 = *(char **)(v399 + 8);
              if (*(char **)v399 != v400)
              {
                while (*(_DWORD *)v401 < v336)
                {
                  v401 += 16;
                  if (v401 == v400)
                    goto LABEL_354;
                }
              }
              if (v401 != v400)
              {
                if (*(_DWORD *)v401 == v336)
                {
                  v402 = v398[2] + 8 * *((_QWORD *)v401 + 1);
LABEL_355:
                  _Q0 = (float64x2_t)vextq_s8(v598, v598, 8uLL);
                  v395.f64[0] = *(float64_t *)(v402 + 16);
                  v396.f64[0] = *(float64_t *)(v402 + 40);
                  v397.f64[0] = *(float64_t *)(v402 + 64);
                  v404 = *(float64x2_t *)(v402 + 48);
                  *(_QWORD *)&_Q7.f64[1] = v627.i64[1];
                  _V18.D[1] = *(double *)&v629.i64[1];
                  _V20.D[1] = v631.f64[1];
                  __asm { FMLA            D22, D0, V7.D[1] }
                  _Q7.f64[0] = _D22 + v603 * v628;
                  __asm { FMLA            D22, D0, V18.D[1] }
                  v393.f64[0] = _D22 + v603 * v630;
                  v410 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v592, v631.f64[0]), v587, v631, 1), v584, v632);
                  __asm { FMLA            D22, D0, V20.D[1] }
                  _Q0.f64[0] = _D22 + v603 * v632;
                  v342 = vaddq_f64(*(float64x2_t *)(v402 + 24), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v592, *(double *)v629.i64), v587, (float64x2_t)v629, 1), v584, v630));
                  *(float64x2_t *)v402 = vaddq_f64(*(float64x2_t *)v402, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v592, *(double *)v627.i64), v587, (float64x2_t)v627, 1), v584, v628));
                  *(_QWORD *)(v402 + 16) = *(_OWORD *)&vaddq_f64(v395, _Q7);
                  *(float64x2_t *)(v402 + 24) = v342;
                  *(_QWORD *)(v402 + 40) = *(_OWORD *)&vaddq_f64(v396, v393);
                  v395 = vaddq_f64(v404, v410);
                  *(float64x2_t *)(v402 + 48) = v395;
                  *(_QWORD *)(v402 + 64) = *(_OWORD *)&vaddq_f64(v397, _Q0);
LABEL_356:
                  v412 = *(_QWORD *)v328 + 8 * (*(_DWORD *)(v328 + 28) + 3 * v336);
                  v395.f64[0] = *(float64_t *)(v412 + 16);
                  v413.f64[0] = *(double *)v621.i64 * *(double *)v621.i64
                              + *(double *)&v621.i64[1] * *(double *)&v621.i64[1]
                              + v622 * v622;
                  v342.f64[0] = v625.f64[0] * v625.f64[0] + v625.f64[1] * v625.f64[1] + v626 * v626;
                  v413.f64[1] = *(double *)v623.i64 * *(double *)v623.i64
                              + *(double *)&v623.i64[1] * *(double *)&v623.i64[1]
                              + v624 * v624;
                  v339 = vaddq_f64(v395, v342);
                  *(float64x2_t *)v412 = vaddq_f64(*(float64x2_t *)v412, v413);
                  *(float64_t *)(v412 + 16) = v339.f64[0];
                  goto LABEL_357;
                }
                v400 = v401;
              }
LABEL_354:
              v402 = sub_239C23138(v398, (char **)v399, v336, v400);
              goto LABEL_355;
            }
            v379 = v380;
          }
LABEL_343:
          v381 = sub_239C23138(v377, (char **)v378, v336, v379);
          goto LABEL_344;
        }
        v361 = v362;
      }
LABEL_332:
      v363 = sub_239C23138(v359, (char **)v360, v337, v361);
      goto LABEL_333;
    }
    v346 = *(unint64_t **)(v327 + 32);
    v347 = v346[11] + 24 * v336;
    v349 = *(char **)v347;
    v348 = *(char **)(v347 + 8);
    if (*(char **)v347 != v348)
    {
      while (*(_DWORD *)v349 < v337)
      {
        v349 += 16;
        if (v349 == v348)
          goto LABEL_322;
      }
    }
    if (v349 != v348)
    {
      if (*(_DWORD *)v349 == v337)
      {
        v350 = v346[2] + 8 * *((_QWORD *)v349 + 1);
LABEL_323:
        v338.f64[0] = *(float64_t *)(v350 + 16);
        v340.f64[0] = *(float64_t *)(v350 + 40);
        v342.f64[0] = *(float64_t *)(v350 + 64);
        v351 = (const double *)&v627;
        v651 = vld3q_f64(v351);
        v343 = *(float64x2_t *)(v350 + 48);
        _V17.D[1] = v631.f64[1];
        *(_QWORD *)&_Q18.f64[1] = v621.i64[1];
        v353 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v651.val[0], *(double *)v621.i64), v651.val[1], (float64x2_t)v621, 1), v651.val[2], v622);
        *(_QWORD *)&_Q18.f64[0] = v621.i64[1];
        __asm { FMLA            D26, D18, V17.D[1] }
        _Q18.f64[0] = _D26 + v632 * v622;
        v355 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v651.val[0], *(double *)v623.i64), v651.val[1], (float64x2_t)v623, 1), v651.val[2], v624);
        _D21 = *(double *)&v623.i64[1];
        __asm { FMLA            D26, D21, V17.D[1] }
        v345.f64[0] = _D26 + v632 * v624;
        v358 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v651.val[0], v625.f64[0]), v651.val[1], v625, 1), v651.val[2], v626);
        v651.val[0] = vmulq_f64(v631, v625);
        v651.val[1].f64[0] = v625.f64[1];
        __asm { FMLA            D5, D6, V17.D[1] }
        v651.val[0].f64[0] = v651.val[0].f64[0] + v632 * v626;
        v339 = vaddq_f64(*(float64x2_t *)v350, v353);
        v341 = vaddq_f64(*(float64x2_t *)(v350 + 24), v355);
        *(float64x2_t *)v350 = v339;
        *(_QWORD *)(v350 + 16) = *(_OWORD *)&vaddq_f64(v338, _Q18);
        v338 = vaddq_f64(v343, v358);
        *(float64x2_t *)(v350 + 24) = v341;
        *(_QWORD *)(v350 + 40) = *(_OWORD *)&vaddq_f64(v340, v345);
        *(float64x2_t *)(v350 + 48) = v338;
        *(_QWORD *)(v350 + 64) = *(_OWORD *)&vaddq_f64(v342, v651.val[0]);
        goto LABEL_324;
      }
      v348 = v349;
    }
LABEL_322:
    v350 = sub_239C23138(v346, (char **)v347, v337, v348);
    goto LABEL_323;
  }
  if (a5)
    goto LABEL_457;
  v569 = a1 + 23;
  v22 = (double *)a1[13];
  v561 = a1;
  v563 = *(float64x2_t *)a1;
  v572 = a1[1];
  v567 = (double *)a1[14];
  if (v22 != v567)
  {
    v23 = *(float64x2_t *)a1;
    v24 = 0uLL;
    while (1)
    {
      v22[2] = 0.0;
      *(_QWORD *)&v612 = 0;
      v633 = v572;
      v585 = v22;
      v25 = *((_QWORD *)v22 + 4);
      if (v25)
      {
        v26 = *(_QWORD *)(*(_QWORD *)&v563.f64[0] + 80);
        v27 = *((_QWORD *)v22 + 3);
        v28 = **((_QWORD **)v22 + 6);
        v29 = (uint64_t *)(v28 + 8 * (v25 + v27));
        v30 = (uint64_t *)(v28 + 8 * v27);
        do
        {
          v48 = *v30;
          v49 = (_QWORD *)(v26 + 160 * *v30);
          v51 = v49[10];
          v50 = v49[11];
          v52 = v49[12];
          if (((*(unsigned __int8 *)(v50 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v51 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v52 + 36)) >> 7)
            v53 = 2;
          else
            v53 = 1;
          if ((v53 & a4) != 0)
          {
            v54 = *(unsigned __int8 *)(v51 + 4);
            if (!*(_BYTE *)(v51 + 4) || *(_DWORD *)(v51 + 48) != -1)
            {
              v55 = *(unsigned __int8 *)(v50 + 4);
              if (!*(_BYTE *)(v50 + 4) || *(_DWORD *)(v50 + 48) != -1)
              {
                v56 = *(_BYTE *)(v52 + 4);
                if (!v56 || *(_DWORD *)(v52 + 32) != -1)
                {
                  v621.i8[0] = *(_BYTE *)(v51 + 4);
                  if (v54)
                    v57 = *(_DWORD *)(*v569 + 4 * *(unsigned int *)(v51 + 48));
                  else
                    v57 = -1;
                  v621.i32[1] = v57;
                  v621.i8[8] = v55;
                  if (v55)
                    v58 = *(_DWORD *)(*v569 + 4 * *(unsigned int *)(v50 + 48));
                  else
                    v58 = -1;
                  v621.i32[3] = v58;
                  LOBYTE(v622) = v56;
                  HIDWORD(v622) = -1;
                  sub_239C23984((uint64_t)(v49 + 1), a3 + 16, (uint64_t)&v612 + 8, v23.f64[0], a7.n128_f64[0], a8.f64[0], a9.f64[0], a10.f64[0], a11.n128_f64[0], a12, a13);
                  v60 = (float64x2_t *)(v26 + 160 * v48 + 104);
                  if (v54)
                  {
                    v61 = *((_QWORD *)v585 + 3);
                    v63 = *((_QWORD *)v585 + 5);
                    v62 = *((_QWORD *)v585 + 6);
                    v64 = *(_QWORD *)(v62 + 56);
                    v65 = v64 + 16 * v61;
                    if (v63)
                    {
                      v66 = v64 + 16 * (v63 + v61);
                      v67 = 16 * v63;
                      while (*(_DWORD *)v65 != v57)
                      {
                        v65 += 16;
                        v67 -= 16;
                        if (!v67)
                        {
                          v65 = v66;
                          break;
                        }
                      }
                    }
                    v68 = (const double *)&v612 + 1;
                    v643 = vld3q_f64(v68);
                    v69 = *(_QWORD *)(v62 + 24) + 8 * *(_QWORD *)(v65 + 8);
                    _Q4.f64[0] = *(float64_t *)(v69 + 16);
                    _Q5.f64[1] = v615[1].f64[0];
                    v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v643.val[0], v620[0].f64[1]), v643.val[1], *(float64x2_t *)((char *)v620 + 8), 1), v643.val[2], v620[1].f64[1]);
                    v643.val[0] = vmulq_f64(*(float64x2_t *)((char *)v615 + 8), *(float64x2_t *)((char *)v620 + 8));
                    v643.val[1].f64[0] = v620[1].f64[0];
                    __asm { FMLA            D0, D1, V5.D[1] }
                    v643.val[0].f64[0] = v643.val[0].f64[0] + v615[1].f64[1] * v620[1].f64[1];
                    *(float64x2_t *)v69 = vaddq_f64(*(float64x2_t *)v69, v70);
                    *(_QWORD *)(v69 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v643.val[0]);
                    v644 = vld3q_f64(v68);
                    v71 = *(_QWORD *)v572 + 8 * (*(_DWORD *)(v572 + 28) + 3 * v57);
                    _Q4.f64[0] = *(float64_t *)(v71 + 16);
                    _Q5.f64[0] = v615[1].f64[1];
                    _Q6 = *(float64x2_t *)((char *)v615 + 8);
                    v41.f64[0] = *(float64_t *)(v26 + 160 * v48 + 120);
                    v72 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v644.val[0], v60->f64[0]), v644.val[1], *v60, 1), v644.val[2], v41.f64[0]);
                    v644.val[0] = vmulq_f64(*(float64x2_t *)((char *)v615 + 8), *v60);
                    v644.val[1].f64[0] = *(float64_t *)(v26 + 160 * v48 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    v644.val[0].f64[0] = v644.val[0].f64[0] + v615[1].f64[1] * v41.f64[0];
                    *(float64x2_t *)v71 = vsubq_f64(*(float64x2_t *)v71, v72);
                    *(_QWORD *)(v71 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v644.val[0]);
                  }
                  if (v55)
                  {
                    v73 = *((_QWORD *)v585 + 3);
                    v75 = *((_QWORD *)v585 + 5);
                    v74 = *((_QWORD *)v585 + 6);
                    v76 = *(_QWORD *)(v74 + 56);
                    v77 = v76 + 16 * v73;
                    if (v75)
                    {
                      v78 = v76 + 16 * (v75 + v73);
                      v79 = 16 * v75;
                      while (*(_DWORD *)v77 != v58)
                      {
                        v77 += 16;
                        v79 -= 16;
                        if (!v79)
                        {
                          v77 = v78;
                          break;
                        }
                      }
                    }
                    v31 = (const double *)&v616;
                    v641 = vld3q_f64(v31);
                    v32 = *(_QWORD *)(v74 + 24) + 8 * *(_QWORD *)(v77 + 8);
                    _Q4.f64[0] = *(float64_t *)(v32 + 16);
                    _Q5.f64[1] = v619.f64[1];
                    v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v641.val[0], v620[0].f64[1]), v641.val[1], *(float64x2_t *)((char *)v620 + 8), 1), v641.val[2], v620[1].f64[1]);
                    v641.val[0] = vmulq_f64(v619, *(float64x2_t *)((char *)v620 + 8));
                    v641.val[1].f64[0] = v620[1].f64[0];
                    __asm { FMLA            D0, D1, V5.D[1] }
                    v641.val[0].f64[0] = v641.val[0].f64[0] + v620[0].f64[0] * v620[1].f64[1];
                    *(float64x2_t *)v32 = vaddq_f64(*(float64x2_t *)v32, v33);
                    *(_QWORD *)(v32 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v641.val[0]);
                    v642 = vld3q_f64(v31);
                    v38 = *(_QWORD *)v572 + 8 * (*(_DWORD *)(v572 + 28) + 3 * v58);
                    _Q4.f64[0] = *(float64_t *)(v38 + 16);
                    _Q5.f64[0] = v620[0].f64[0];
                    _Q6 = v619;
                    v41.f64[0] = *(float64_t *)(v26 + 160 * v48 + 120);
                    v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v642.val[0], v60->f64[0]), v642.val[1], *v60, 1), v642.val[2], v41.f64[0]);
                    v642.val[0] = vmulq_f64(v619, *v60);
                    v642.val[1].f64[0] = *(float64_t *)(v26 + 160 * v48 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    v642.val[0].f64[0] = v642.val[0].f64[0] + v620[0].f64[0] * v41.f64[0];
                    *(float64x2_t *)v38 = vsubq_f64(*(float64x2_t *)v38, v42);
                    *(_QWORD *)(v38 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v642.val[0]);
                  }
                  _Q0.f64[1] = v620[1].f64[0];
                  _Q2 = *v60;
                  _Q2.f64[0] = *(float64_t *)(v26 + 160 * v48 + 112);
                  __asm { FMLA            D3, D2, V0.D[1] }
                  *(_QWORD *)&_Q2.f64[0] = v612;
                  v585[2] = v585[2] - (_D3 + v620[1].f64[1] * *(double *)(v26 + 160 * v48 + 120));
                  _V1.D[1] = v620[1].f64[0];
                  _Q4.f64[0] = v620[1].f64[0];
                  __asm { FMLA            D3, D4, V1.D[1] }
                  _Q0.f64[0] = _Q2.f64[0] + _D3 + v620[1].f64[1] * v620[1].f64[1];
                  *(double *)&v612 = _Q0.f64[0];
                  v23.f64[0] = sub_239C23F18(&v633, (uint64_t)&v621, (uint64_t)&v612 + 8, _Q0, v620[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v41);
                  v24 = 0uLL;
                }
              }
            }
          }
          ++v30;
        }
        while (v30 != v29);
      }
      if ((a2 & 1) != 0)
      {
        v80 = *(double *)&v612 + a6;
        *(double *)&v612 = *(double *)&v612 + a6;
      }
      else
      {
        v80 = *(double *)&v612;
      }
      v81 = v585;
      a7.n128_f64[0] = fabs(v80);
      v23.f64[0] = 1.0 / v80;
      if (a7.n128_f64[0] < v16)
        v23.f64[0] = 0.0;
      v585[1] = v23.f64[0];
      v82 = *((_QWORD *)v585 + 5);
      if (v82)
        break;
LABEL_9:
      v22 = v81 + 7;
      if (v22 == v567)
        goto LABEL_364;
    }
    v83 = *((_QWORD *)v585 + 3);
    v84 = *(_QWORD *)(*((_QWORD *)v585 + 6) + 56);
    v573 = v84 + 16 * (v82 + v83);
    v85 = v84 + 16 * v83;
    while (1)
    {
      v86 = *(_QWORD *)(*((_QWORD *)v81 + 6) + 24) + 8 * *(_QWORD *)(v85 + 8);
      v23.f64[0] = *(float64_t *)(v86 + 16);
      a7 = *(__n128 *)v86;
      a8.f64[0] = v81[1];
      a9.f64[0] = v81[2];
      a10 = vmulq_n_f64(*(float64x2_t *)v86, a8.f64[0]);
      v87 = *(_QWORD *)v608 + 8 * (*(_DWORD *)(v608 + 28) + 3 * *(_DWORD *)v85);
      a7.n128_u64[0] = *(_QWORD *)(v87 + 16);
      v605 = vmulq_f64(v23, a8);
      a7.n128_u64[0] = *(_OWORD *)&vmlsq_f64((float64x2_t)a7, a9, v605);
      a8 = a10;
      v23 = vmlsq_lane_f64(*(float64x2_t *)v87, a10, a9.f64[0], 0);
      *(float64x2_t *)v87 = v23;
      *(_QWORD *)(v87 + 16) = a7.n128_u64[0];
      v575 = v85;
      v88 = *(_DWORD *)v85;
      v89 = *((_QWORD *)v81 + 3);
      v90 = *((_QWORD *)v81 + 5);
      v91 = *(_QWORD *)(*((_QWORD *)v81 + 6) + 56);
      v92 = (unsigned int *)(v91 + 16 * v89);
      if (v90)
      {
        v93 = 16 * v90;
        while (*v92 < v88)
        {
          v92 += 4;
          v93 -= 16;
          if (!v93)
            goto LABEL_51;
        }
      }
      v601 = (unsigned int *)(v91 + 16 * (v90 + v89));
      if (v92 != v601)
        break;
LABEL_51:
      v85 = v575 + 16;
      if (v575 + 16 == v573)
        goto LABEL_9;
    }
    v23 = (float64x2_t)vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL);
    v94 = *(_QWORD **)(v608 + 32);
    v595 = v94 + 2;
    a8.f64[1] = v23.f64[0];
    v589 = a8;
    while (1)
    {
      v97 = v94[11] + 24 * *v92;
      v98 = *(char **)v97;
      v99 = *(char **)(v97 + 8);
      if (*(char **)v97 != v99)
      {
        while (*(_DWORD *)v98 < v88)
        {
          v98 += 16;
          if (v98 == v99)
            goto LABEL_68;
        }
      }
      if (v98 == v99)
        goto LABEL_68;
      if (*(_DWORD *)v98 != v88)
        break;
      v95 = *v595 + 8 * *((_QWORD *)v98 + 1);
LABEL_60:
      v96 = *(_QWORD *)(*((_QWORD *)v81 + 6) + 24) + 8 * *((_QWORD *)v92 + 1);
      v23.f64[0] = *(float64_t *)(v95 + 16);
      a8.f64[0] = *(float64_t *)(v95 + 40);
      a10.f64[0] = *(float64_t *)(v95 + 64);
      a12.f64[0] = *(float64_t *)(v96 + 16);
      a13 = *(float64x2_t *)v96;
      v13.f64[0] = v605.f64[0] * *(double *)v96;
      v14.f64[0] = vmuld_lane_f64(v605.f64[0], *(float64x2_t *)v96, 1);
      v23 = vsubq_f64(v23, v13);
      v13.f64[1] = v589.f64[1];
      a7 = (__n128)vmlsq_lane_f64(*(float64x2_t *)v95, v589, *(double *)v96, 0);
      a8 = vsubq_f64(a8, v14);
      a9 = vmlsq_laneq_f64(*(float64x2_t *)(v95 + 24), v589, *(float64x2_t *)v96, 1);
      a10 = vmlsq_f64(a10, a12, v605);
      a11 = (__n128)vmlsq_lane_f64(*(float64x2_t *)(v95 + 48), v589, a12.f64[0], 0);
      *(__n128 *)v95 = a7;
      *(float64_t *)(v95 + 16) = v23.f64[0];
      *(float64x2_t *)(v95 + 24) = a9;
      *(float64_t *)(v95 + 40) = a8.f64[0];
      *(__n128 *)(v95 + 48) = a11;
      *(float64_t *)(v95 + 64) = a10.f64[0];
      v92 += 4;
      if (v92 == v601)
        goto LABEL_51;
    }
    v99 = v98;
LABEL_68:
    v100 = v94[10];
    if (v100)
    {
      v102 = v94[6];
      v101 = v94[7];
      v103 = ((v101 - v102) << 6) - 1;
      v104 = v94[9];
      if (v101 == v102)
        v103 = 0;
      v95 = v94[2]
          + 8
          * *(_QWORD *)(*(_QWORD *)(v102 + (((unint64_t)(v104 + v100 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v104 + v100 - 1) & 0x1FF));
      v94[10] = v100 - 1;
      if ((unint64_t)(v103 - (v100 + v104) + 1) >= 0x400)
      {
        operator delete(*(void **)(v101 - 8));
        v94[7] -= 8;
      }
      goto LABEL_133;
    }
    v621.i64[0] = 0;
    v105 = v94[2];
    v106 = (int64x2_t *)v94[3];
    v107 = (unint64_t)v106 - v105;
    v108 = (uint64_t)((uint64_t)v106->i64 - v105) >> 3;
    v109 = (int64x2_t *)(v105 + (((unint64_t)v106 - v105) & 0xFFFFFFFFFFFFFFF8));
    v110 = v94[4];
    if ((unint64_t)(v110 - (_QWORD)v106) < 0x48)
    {
      v111 = v108 + 9;
      if ((unint64_t)(v108 + 9) >> 61)
        sub_2394189F8();
      v112 = v110 - v105;
      if (v112 >> 2 > v111)
        v111 = v112 >> 2;
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8)
        v111 = 0x1FFFFFFFFFFFFFFFLL;
      v580 = v111;
      if (v111)
      {
        if (v111 >> 61)
          sub_239418A80();
        v113 = operator new(8 * v111);
        v24 = 0uLL;
      }
      else
      {
        v113 = 0;
      }
      v119 = &v113[8 * v108];
      *((_QWORD *)v119 + 8) = 0;
      *((_OWORD *)v119 + 2) = v24;
      *((_OWORD *)v119 + 3) = v24;
      *(_OWORD *)v119 = v24;
      *((_OWORD *)v119 + 1) = v24;
      v578 = v97;
      if ((int64x2_t *)v105 == v106)
      {
        v121 = &v113[8 * v108];
      }
      else
      {
        if (v107 - 8 >= 0x68)
        {
          v122 = (uint64_t)((uint64_t)v106->i64 - v105) >> 3;
          v120 = (char *)(v105 + (((unint64_t)v106 - v105) & 0xFFFFFFFFFFFFFFF8));
          v121 = &v113[8 * v108];
          if (v105 + (v107 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v113[v107 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v123 = ((v107 - 8) >> 3) + 1;
            v120 = &v109->i8[-8 * (v123 & 0x3FFFFFFFFFFFFFFCLL)];
            v124 = 8 * v122;
            v125 = (__int128 *)(v105 + 8 * v122 - 16);
            v126 = &v113[v124 - 16];
            v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v128 = *v125;
              *(v126 - 1) = *(v125 - 1);
              *v126 = v128;
              v125 -= 2;
              v126 -= 2;
              v127 -= 4;
            }
            while (v127);
            v121 = &v119[-8 * (v123 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_96;
          }
        }
        else
        {
          v120 = (char *)(v105 + (((unint64_t)v106 - v105) & 0xFFFFFFFFFFFFFFF8));
          v121 = &v113[8 * v108];
        }
        do
        {
          v129 = *((_QWORD *)v120 - 1);
          v120 -= 8;
          *((_QWORD *)v121 - 1) = v129;
          v121 -= 8;
        }
        while (v120 != (char *)v105);
      }
LABEL_96:
      v130 = v119 + 72;
      v131 = (char *)v106 - (char *)v109;
      if (v131)
      {
        v132 = v113;
        memmove(v119 + 72, v109, v131);
        v113 = v132;
      }
      v97 = v578;
      v94[2] = v121;
      v94[3] = &v130[v131];
      v94[4] = &v113[8 * v580];
      if (v105)
        operator delete((void *)v105);
      goto LABEL_132;
    }
    v581 = (uint64_t)((uint64_t)v106->i64 - v105) >> 3;
    v114 = (char *)v106 - (char *)v109;
    if ((unint64_t)((char *)v106 - (char *)v109) > 0x47)
    {
      v116 = (float64_t *)v94[3];
      v115 = 9;
      goto LABEL_109;
    }
    v115 = v114 >> 3;
    v116 = (float64_t *)&v106->i64[9 - (v114 >> 3)];
    v117 = 64 - (v114 & 0xFFFFFFFFFFFFFFF8);
    if (v117 >= 0x68)
    {
      if (v106 >= (int64x2_t *)&v621.u64[1] || &v621 >= (int64x2_t *)((char *)&v106->u64[1] + v117))
      {
        v133 = (v117 >> 3) + 1;
        v134 = (_OWORD *)v94[3];
        v135 = v133 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *v134 = v24;
          v134[1] = v24;
          v134 += 2;
          v135 -= 4;
        }
        while (v135);
        if (v133 == (v133 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_108:
          v94[3] = v116;
          if (v106 == v109)
            goto LABEL_132;
LABEL_109:
          v136 = (char *)v116 - (char *)&v109[4].u64[1];
          v137 = v136 >> 3;
          v138 = (int64x2_t *)(v116 - 9);
          v139 = (char *)v116;
          if (v116 - 9 < (float64_t *)v106)
          {
            v140 = (v107 & 0xFFFFFFFFFFFFFFF8) + v136;
            v141 = v105 + v140 + 8;
            if ((unint64_t)v106 > v141)
              v141 = (unint64_t)v106;
            v142 = v141 + ~v105 - v140;
            if (v142 > 0x57)
            {
              v143 = (v142 >> 3) + 1;
              v144 = v143 & 0x3FFFFFFFFFFFFFFCLL;
              v138 = (int64x2_t *)((char *)v138 + v144 * 8);
              v145 = v116 + 2;
              v146 = (__int128 *)(v105 + 8 * v137 + 8 * v581 + 16);
              v147 = v143 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v148 = *v146;
                *(v145 - 1) = *(v146 - 1);
                *v145 = v148;
                v145 += 2;
                v146 += 2;
                v147 -= 4;
              }
              while (v147);
              v139 = (char *)&v116[v144];
              if (v143 == (v143 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_118;
            }
            else
            {
              v139 = (char *)v116;
            }
            do
            {
              v149 = v138->i64[0];
              v138 = (int64x2_t *)((char *)v138 + 8);
              *(_QWORD *)v139 = v149;
              v139 += 8;
            }
            while (v138 < v106);
          }
LABEL_118:
          v94[3] = v139;
          if (v116 != (float64_t *)&v109[4].u64[1])
            memmove(&v116[-v137], (const void *)(v105 + (((unint64_t)v106 - v105) & 0xFFFFFFFFFFFFFFF8)), v136);
          v150 = (const double *)&v621;
          if (v109 <= &v621)
          {
            v151 = 9;
            if (v94[3] <= (unint64_t)&v621)
              v151 = 0;
            v150 = (const double *)&v621.i64[v151];
          }
          if (v115 >= 0xA
            && (v109 >= (int64x2_t *)(v150 + 1)
             || (unint64_t)v150 >= v105 + (v107 & 0xFFFFFFFFFFFFFFF8) + 8 * v115))
          {
            v109 = (int64x2_t *)((char *)v109 + 8 * (v115 & 0xFFFFFFFFFFFFFFFCLL));
            v152 = vld1q_dup_f64(v150);
            v153 = (float64x2_t *)(v105 + 8 * v581 + 16);
            v154 = v115 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v153[-1] = v152;
              *v153 = v152;
              v153 += 2;
              v154 -= 4;
            }
            while (v154);
            if (v115 == (v115 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_132;
            v115 &= 3u;
          }
          do
          {
            *(double *)v109->i64 = *v150;
            v109 = (int64x2_t *)((char *)v109 + 8);
            --v115;
          }
          while (v115);
LABEL_132:
          v95 = v94[3] - 72;
          v81 = v585;
LABEL_133:
          v155 = (v95 - *v595) >> 3;
          v621.i32[0] = v88;
          v621.i64[1] = v155;
          sub_239C22598((char **)v97, v99, &v621);
          v24 = 0uLL;
          goto LABEL_60;
        }
        v118 = (float64_t *)&v106->i64[v133 & 0x3FFFFFFFFFFFFFFCLL];
      }
      else
      {
        v118 = (float64_t *)v94[3];
      }
    }
    else
    {
      v118 = (float64_t *)v94[3];
    }
    do
      *v118++ = *(float64_t *)v621.i64;
    while (v118 != v116);
    goto LABEL_108;
  }
LABEL_364:
  v428 = v561[16];
  v593 = v561[17];
  if (v428 != v593)
  {
    v429 = v563.f64[0];
    do
    {
      *(_QWORD *)(v428 + 16) = 0;
      v633 = v572;
      v599 = v428;
      v430 = *(_QWORD *)(v428 + 32);
      if (v430)
      {
        v431 = *(_QWORD *)(*(_QWORD *)&v563.f64[0] + 80);
        v432 = (uint64_t *)(**(_QWORD **)(v428 + 48) + 8 * *(_QWORD *)(v428 + 24));
        v433 = 8 * v430;
        do
        {
          v434 = *v432;
          v435 = (_QWORD *)(v431 + 160 * *v432);
          v437 = v435[10];
          v436 = v435[11];
          v438 = v435[12];
          if (((*(unsigned __int8 *)(v436 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v437 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v438 + 36)) >> 7)
            v439 = 2;
          else
            v439 = 1;
          if ((v439 & a4) != 0)
          {
            v440 = *(unsigned __int8 *)(v437 + 4);
            if (!*(_BYTE *)(v437 + 4) || *(_DWORD *)(v437 + 48) != -1)
            {
              v441 = *(unsigned __int8 *)(v436 + 4);
              if (!*(_BYTE *)(v436 + 4) || *(_DWORD *)(v436 + 48) != -1)
              {
                v442 = *(_BYTE *)(v438 + 4);
                if (!v442 || *(_DWORD *)(v438 + 32) != -1)
                {
                  v621.i8[0] = *(_BYTE *)(v437 + 4);
                  if (v440)
                    v443 = *(_DWORD *)(*v569 + 4 * *(unsigned int *)(v437 + 48));
                  else
                    v443 = -1;
                  v621.i32[1] = v443;
                  v621.i8[8] = v441;
                  if (v441)
                    v444 = *(_DWORD *)(*v569 + 4 * *(unsigned int *)(v436 + 48));
                  else
                    v444 = -1;
                  v621.i32[3] = v444;
                  LOBYTE(v622) = v442;
                  HIDWORD(v622) = -1;
                  v445.f64[0] = sub_239C23984((uint64_t)(v435 + 1), a3 + 16, (uint64_t)&v612 + 8, v429, a7.n128_f64[0], a8.f64[0], a9.f64[0], a10.f64[0], a11.n128_f64[0], a12, a13);
                  v453 = (float64x2_t *)(v431 + 160 * v434 + 104);
                  if (v440)
                  {
                    *(float64x2x3_t *)(&v447 - 2) = vld3q_f64((const double *)&v612 + 1);
                    v454 = *(_QWORD *)v572 + 8 * (*(_DWORD *)(v572 + 28) + 3 * v443);
                    v448 = *(float64x2_t *)v454;
                    v449.f64[0] = *(float64_t *)(v454 + 16);
                    v450.f64[0] = v615[1].f64[1];
                    _Q6 = *(float64x2_t *)((char *)v615 + 8);
                    v452.f64[0] = *(float64_t *)(v431 + 160 * v434 + 120);
                    v457 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v455, v453->f64[0]), _Q1, *v453, 1), v447, v452.f64[0]);
                    _Q0 = vmulq_f64(*(float64x2_t *)((char *)v615 + 8), *v453);
                    _Q1.f64[0] = *(float64_t *)(v431 + 160 * v434 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    _Q0.f64[0] = _Q0.f64[0] + v615[1].f64[1] * v452.f64[0];
                    v445 = vsubq_f64(v449, _Q0);
                    v446 = vsubq_f64(*(float64x2_t *)v454, v457);
                    *(float64x2_t *)v454 = v446;
                    *(float64_t *)(v454 + 16) = v445.f64[0];
                  }
                  if (v441)
                  {
                    v459 = (const double *)&v616;
                    *(float64x2x3_t *)(&v447 - 2) = vld3q_f64(v459);
                    v460 = *(_QWORD *)v572 + 8 * (*(_DWORD *)(v572 + 28) + 3 * v444);
                    v448 = *(float64x2_t *)v460;
                    v449.f64[0] = *(float64_t *)(v460 + 16);
                    v450.f64[0] = v620[0].f64[0];
                    _Q6 = v619;
                    v452.f64[0] = *(float64_t *)(v431 + 160 * v434 + 120);
                    v463 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v461, v453->f64[0]), _Q1, *v453, 1), v447, v452.f64[0]);
                    _Q0 = vmulq_f64(v619, *v453);
                    _Q1.f64[0] = *(float64_t *)(v431 + 160 * v434 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    _Q0.f64[0] = _Q0.f64[0] + v620[0].f64[0] * v452.f64[0];
                    v445 = vsubq_f64(v449, _Q0);
                    v446 = vsubq_f64(*(float64x2_t *)v460, v463);
                    *(float64x2_t *)v460 = v446;
                    *(float64_t *)(v460 + 16) = v445.f64[0];
                  }
                  v429 = sub_239C23F18(&v633, (uint64_t)&v621, (uint64_t)&v612 + 8, v445, v446.f64[0], v447, v448.f64[0], v449, v450, _Q6, v452);
                }
              }
            }
          }
          ++v432;
          v433 -= 8;
        }
        while (v433);
      }
      v428 = v599 + 56;
    }
    while (v599 + 56 != v593);
  }
  v465 = v561[1];
  v633 = *v561;
  v634 = v569;
  v635 = a3;
  v636 = v465;
  v637 = 0;
  v638 = a4;
  memset(v639.__m_.__opaque, 0, sizeof(v639.__m_.__opaque));
  v639.__m_.__sig = 850045863;
  v466 = *(_QWORD *)(v633 + 56);
  v467 = *(_QWORD *)(v633 + 64);
  if (v466 != v467)
  {
    while (1)
    {
      v469 = *(_QWORD *)(v466 + 48);
      v468 = *(_QWORD *)(v466 + 56);
      v470 = ((*(unsigned __int8 *)(v468 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v469 + 52)) >> 7 ? 2 : 1;
      if ((v470 & v638) != 0)
      {
        v471 = *(unsigned __int8 *)(v469 + 4);
        if (!*(_BYTE *)(v469 + 4) || *(_DWORD *)(v469 + 48) != -1)
        {
          v472 = *(unsigned __int8 *)(v468 + 4);
          if (!*(_BYTE *)(v468 + 4) || *(_DWORD *)(v468 + 48) != -1)
            break;
        }
      }
LABEL_393:
      v466 += 120;
      if (v466 == v467)
        goto LABEL_456;
    }
    if (*(_BYTE *)(v469 + 4))
    {
      v473 = *(_DWORD *)(*v634 + 4 * *(unsigned int *)(v469 + 48));
      if (*(_BYTE *)(v468 + 4))
      {
LABEL_404:
        v474 = *(_DWORD *)(*v634 + 4 * *(unsigned int *)(v468 + 48));
        goto LABEL_407;
      }
    }
    else
    {
      v473 = -1;
      if (*(_BYTE *)(v468 + 4))
        goto LABEL_404;
    }
    v474 = -1;
LABEL_407:
    sub_239C227D4(v466 + 8, a3, (uint64_t)&v621);
    if (!v472)
      goto LABEL_430;
    if (!v471 || v473 < v474)
    {
LABEL_420:
      v495 = *(unint64_t **)(v465 + 32);
      v496 = v495[11] + 24 * v474;
      v498 = *(char **)v496;
      v497 = *(char **)(v496 + 8);
      if (*(char **)v496 != v497)
      {
        while (*(_DWORD *)v498 < v474)
        {
          v498 += 16;
          if (v498 == v497)
            goto LABEL_428;
        }
      }
      if (v498 != v497)
      {
        if (*(_DWORD *)v498 == v474)
        {
          v499 = v495[2] + 8 * *((_QWORD *)v498 + 1);
LABEL_429:
          v476.f64[0] = *(float64_t *)(v499 + 16);
          v478.f64[0] = *(float64_t *)(v499 + 40);
          v475.f64[0] = *(float64_t *)(v499 + 64);
          *(_QWORD *)&v500.f64[1] = v627.i64[1];
          _V19.D[1] = v631.f64[1];
          _Q20 = (float64x2_t)vzip1q_s64(v627, v629);
          _Q22 = (float64x2_t)vzip2q_s64(v627, v629);
          v504.f64[0] = v628;
          v504.f64[1] = v630;
          v505 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v627.i64), _Q22, (float64x2_t)v627, 1), v504, v628);
          _D6 = *(double *)&v627.i64[1];
          __asm { FMLA            D24, D6, V19.D[1] }
          v500.f64[0] = _D24 + v632 * v628;
          v508 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v629.i64), _Q22, (float64x2_t)v629, 1), v504, v630);
          _D17 = *(double *)&v629.i64[1];
          __asm { FMLA            D24, D17, V19.D[1] }
          v480.f64[0] = _D24 + v632 * v630;
          v511 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v631.f64[0]), _Q22, v631, 1), v504, v632);
          _Q22.f64[0] = v631.f64[1];
          __asm { FMLA            D20, D22, V19.D[1] }
          _Q18.f64[0] = _Q20.f64[0] + v632 * v632;
          v476 = vaddq_f64(v476, v500);
          v479 = vaddq_f64(*(float64x2_t *)(v499 + 24), v508);
          v478 = vaddq_f64(v478, v480);
          v512 = vaddq_f64(*(float64x2_t *)(v499 + 48), v511);
          *(float64x2_t *)v499 = vaddq_f64(*(float64x2_t *)v499, v505);
          *(float64_t *)(v499 + 16) = v476.f64[0];
          *(float64x2_t *)(v499 + 24) = v479;
          *(float64_t *)(v499 + 40) = v478.f64[0];
          v475 = vaddq_f64(v475, _Q18);
          *(float64x2_t *)(v499 + 48) = v512;
          *(float64_t *)(v499 + 64) = v475.f64[0];
LABEL_430:
          if (!v471)
          {
            v518 = (float64x2_t *)(v466 + 64);
            goto LABEL_454;
          }
          v513 = *(unint64_t **)(v465 + 32);
          v514 = v513[11] + 24 * v473;
          v516 = *(char **)v514;
          v515 = *(char **)(v514 + 8);
          if (*(char **)v514 != v515)
          {
            while (*(_DWORD *)v516 < v473)
            {
              v516 += 16;
              if (v516 == v515)
                goto LABEL_440;
            }
          }
          if (v516 != v515)
          {
            if (*(_DWORD *)v516 == v473)
            {
              v517 = v513[2] + 8 * *((_QWORD *)v516 + 1);
LABEL_441:
              v476.f64[0] = *(float64_t *)(v517 + 16);
              v478.f64[0] = *(float64_t *)(v517 + 40);
              v475.f64[0] = *(float64_t *)(v517 + 64);
              *(_QWORD *)&v519.f64[1] = v621.i64[1];
              _Q22 = v625;
              _Q20 = (float64x2_t)vzip1q_s64(v621, v623);
              v522 = (float64x2_t)vzip2q_s64(v621, v623);
              v523.f64[0] = v622;
              v523.f64[1] = v624;
              v524 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v621.i64), v522, (float64x2_t)v621, 1), v523, v622);
              _D6 = *(double *)&v621.i64[1];
              __asm { FMLA            D19, D6, V22.D[1] }
              v519.f64[0] = _D19 + v626 * v622;
              v527 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v623.i64), v522, (float64x2_t)v623, 1), v523, v624);
              _D17 = *(double *)&v623.i64[1];
              __asm { FMLA            D19, D17, V22.D[1] }
              v480.f64[0] = _D19 + v626 * v624;
              v594 = v522;
              v600 = _Q20;
              v588 = v523;
              v530 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v625.f64[0]), v522, v625, 1), v523, v626);
              _Q19 = vmulq_f64(_Q22, _Q22);
              _Q20.f64[0] = v625.f64[1];
              v604 = (int8x16_t)v625;
              v607 = v626;
              __asm { FMLA            D19, D20, V22.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + v607 * v607;
              v532 = vaddq_f64(v476, v519);
              v533 = vaddq_f64(*(float64x2_t *)(v517 + 24), v527);
              v534 = vaddq_f64(v478, v480);
              v535 = vaddq_f64(*(float64x2_t *)(v517 + 48), v530);
              *(float64x2_t *)v517 = vaddq_f64(*(float64x2_t *)v517, v524);
              *(float64_t *)(v517 + 16) = v532.f64[0];
              *(float64x2_t *)(v517 + 24) = v533;
              *(float64_t *)(v517 + 40) = v534.f64[0];
              *(float64x2_t *)(v517 + 48) = v535;
              *(_QWORD *)(v517 + 64) = *(_OWORD *)&vaddq_f64(v475, _Q19);
              if (!v472 || v474 < v473)
                goto LABEL_453;
              v536 = *(unint64_t **)(v465 + 32);
              v537 = v536[11] + 24 * v474;
              v539 = *(char **)v537;
              v538 = *(char **)(v537 + 8);
              if (*(char **)v537 != v538)
              {
                while (*(_DWORD *)v539 < v473)
                {
                  v539 += 16;
                  if (v539 == v538)
                    goto LABEL_451;
                }
              }
              if (v539 != v538)
              {
                if (*(_DWORD *)v539 == v473)
                {
                  v540 = v536[2] + 8 * *((_QWORD *)v539 + 1);
LABEL_452:
                  _Q0 = (float64x2_t)vextq_s8(v604, v604, 8uLL);
                  v532.f64[0] = *(float64_t *)(v540 + 16);
                  v534.f64[0] = *(float64_t *)(v540 + 40);
                  v535.f64[0] = *(float64_t *)(v540 + 64);
                  v542 = *(float64x2_t *)(v540 + 48);
                  *(_QWORD *)&_Q7.f64[1] = v627.i64[1];
                  _V18.D[1] = *(double *)&v629.i64[1];
                  _V20.D[1] = v631.f64[1];
                  __asm { FMLA            D22, D0, V7.D[1] }
                  _Q7.f64[0] = _D22 + v607 * v628;
                  __asm { FMLA            D22, D0, V18.D[1] }
                  v530.f64[0] = _D22 + v607 * v630;
                  v548 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v600, v631.f64[0]), v594, v631, 1), v588, v632);
                  __asm { FMLA            D22, D0, V20.D[1] }
                  _Q0.f64[0] = _D22 + v607 * v632;
                  v550 = vaddq_f64(*(float64x2_t *)(v540 + 24), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v600, *(double *)v629.i64), v594, (float64x2_t)v629, 1), v588, v630));
                  *(float64x2_t *)v540 = vaddq_f64(*(float64x2_t *)v540, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v600, *(double *)v627.i64), v594, (float64x2_t)v627, 1), v588, v628));
                  *(_QWORD *)(v540 + 16) = *(_OWORD *)&vaddq_f64(v532, _Q7);
                  *(float64x2_t *)(v540 + 24) = v550;
                  *(_QWORD *)(v540 + 40) = *(_OWORD *)&vaddq_f64(v534, v530);
                  v532 = vaddq_f64(v542, v548);
                  *(float64x2_t *)(v540 + 48) = v532;
                  *(_QWORD *)(v540 + 64) = *(_OWORD *)&vaddq_f64(v535, _Q0);
LABEL_453:
                  v518 = (float64x2_t *)(v466 + 64);
                  v551 = *(_QWORD *)v465 + 8 * (*(_DWORD *)(v465 + 28) + 3 * v473);
                  v532.f64[0] = *(float64_t *)(v551 + 16);
                  v479.f64[0] = v622;
                  _V6.D[1] = v625.f64[1];
                  v553 = *(double *)(v466 + 80);
                  v479.f64[1] = v624;
                  _Q2 = vmulq_f64(v625, *(float64x2_t *)(v466 + 64));
                  _D3 = *(_QWORD *)(v466 + 72);
                  __asm { FMLA            D2, D3, V6.D[1] }
                  _Q2.f64[0] = _Q2.f64[0] + v626 * v553;
                  *(float64x2_t *)v551 = vsubq_f64(*(float64x2_t *)v551, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v621, v623), *(double *)(v466 + 64)), (float64x2_t)vzip2q_s64(v621, v623), *(float64x2_t *)(v466 + 64), 1), v479, v553));
                  *(_QWORD *)(v551 + 16) = *(_OWORD *)&vsubq_f64(v532, _Q2);
LABEL_454:
                  if (v472)
                  {
                    v650 = vld3q_f64((const double *)v627.i64);
                    v556 = *(_QWORD *)v465 + 8 * (*(_DWORD *)(v465 + 28) + 3 * v474);
                    v479.f64[0] = *(float64_t *)(v556 + 16);
                    _V6.D[1] = v631.f64[1];
                    v558 = v518[1].f64[0];
                    v559 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v650.val[0], v518->f64[0]), v650.val[1], *v518, 1), v650.val[2], v558);
                    v650.val[0] = vmulq_f64(v631, *v518);
                    v650.val[1].f64[0] = v518->f64[1];
                    __asm { FMLA            D0, D1, V6.D[1] }
                    v650.val[0].f64[0] = v650.val[0].f64[0] + v632 * v558;
                    *(float64x2_t *)v556 = vsubq_f64(*(float64x2_t *)v556, v559);
                    *(_QWORD *)(v556 + 16) = *(_OWORD *)&vsubq_f64(v479, v650.val[0]);
                  }
                  goto LABEL_393;
                }
                v538 = v539;
              }
LABEL_451:
              v540 = sub_239C23138(v536, (char **)v537, v473, v538);
              goto LABEL_452;
            }
            v515 = v516;
          }
LABEL_440:
          v517 = sub_239C23138(v513, (char **)v514, v473, v515);
          goto LABEL_441;
        }
        v497 = v498;
      }
LABEL_428:
      v499 = sub_239C23138(v495, (char **)v496, v474, v497);
      goto LABEL_429;
    }
    v483 = *(unint64_t **)(v465 + 32);
    v484 = v483[11] + 24 * v473;
    v486 = *(char **)v484;
    v485 = *(char **)(v484 + 8);
    if (*(char **)v484 != v485)
    {
      while (*(_DWORD *)v486 < v474)
      {
        v486 += 16;
        if (v486 == v485)
          goto LABEL_418;
      }
    }
    if (v486 != v485)
    {
      if (*(_DWORD *)v486 == v474)
      {
        v487 = v483[2] + 8 * *((_QWORD *)v486 + 1);
LABEL_419:
        v475.f64[0] = *(float64_t *)(v487 + 16);
        v477.f64[0] = *(float64_t *)(v487 + 40);
        v479.f64[0] = *(float64_t *)(v487 + 64);
        v652 = vld3q_f64((const double *)v627.i64);
        v480 = *(float64x2_t *)(v487 + 48);
        _V17.D[1] = v631.f64[1];
        *(_QWORD *)&_Q18.f64[1] = v621.i64[1];
        v489 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v652.val[0], *(double *)v621.i64), v652.val[1], (float64x2_t)v621, 1), v652.val[2], v622);
        *(_QWORD *)&_Q18.f64[0] = v621.i64[1];
        __asm { FMLA            D26, D18, V17.D[1] }
        _Q18.f64[0] = _D26 + v632 * v622;
        v491 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v652.val[0], *(double *)v623.i64), v652.val[1], (float64x2_t)v623, 1), v652.val[2], v624);
        _D21 = *(double *)&v623.i64[1];
        __asm { FMLA            D26, D21, V17.D[1] }
        v482.f64[0] = _D26 + v632 * v624;
        v494 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v652.val[0], v625.f64[0]), v652.val[1], v625, 1), v652.val[2], v626);
        v652.val[0] = vmulq_f64(v631, v625);
        v652.val[1].f64[0] = v625.f64[1];
        __asm { FMLA            D5, D6, V17.D[1] }
        v652.val[0].f64[0] = v652.val[0].f64[0] + v632 * v626;
        v476 = vaddq_f64(*(float64x2_t *)v487, v489);
        v478 = vaddq_f64(*(float64x2_t *)(v487 + 24), v491);
        *(float64x2_t *)v487 = v476;
        *(_QWORD *)(v487 + 16) = *(_OWORD *)&vaddq_f64(v475, _Q18);
        v475 = vaddq_f64(v480, v494);
        *(float64x2_t *)(v487 + 24) = v478;
        *(_QWORD *)(v487 + 40) = *(_OWORD *)&vaddq_f64(v477, v482);
        *(float64x2_t *)(v487 + 48) = v475;
        *(_QWORD *)(v487 + 64) = *(_OWORD *)&vaddq_f64(v479, v652.val[0]);
        goto LABEL_420;
      }
      v485 = v486;
    }
LABEL_418:
    v487 = sub_239C23138(v483, (char **)v484, v474, v485);
    goto LABEL_419;
  }
LABEL_456:
  std::mutex::~mutex(&v639);
LABEL_457:
  if (__p)
  {
    v610 = __p;
    operator delete(__p);
  }
}

void sub_239C2250C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::mutex *a30,std::mutex *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C22568()
{
  return kdebug_trace();
}

void sub_239C22598(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int64_t v29;
  char *v30;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    v14 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
    if (v14 >> 60)
      sub_2394189F8();
    v16 = v9 - (_QWORD)v6;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    if (v17)
    {
      if (v17 >> 60)
        sub_239418A80();
      v18 = (char *)operator new(16 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = v7 >> 4;
    v20 = &v18[16 * (v7 >> 4)];
    v21 = &v18[16 * v17];
    if (v7 >> 4 == v17)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v23 = 1;
        else
          v23 = v7 >> 3;
        if (v23 >> 60)
          sub_239418A80();
        v20 = (char *)operator new(16 * v23);
        v21 = &v20[16 * v23];
        if (v18)
        {
          operator delete(v18);
          v6 = *a1;
        }
      }
      else
      {
        if (v19 >= -1)
          v22 = v19 + 1;
        else
          v22 = v19 + 2;
        v20 -= 16 * (v22 >> 1);
      }
    }
    *(_OWORD *)v20 = *a3;
    v24 = v20;
    if (v6 != v8)
    {
      v25 = v8;
      v26 = v20;
      do
      {
        v24 = v26 - 16;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v25 - 1);
        v25 -= 16;
        v26 -= 16;
      }
      while (v25 != v6);
    }
    v27 = v20 + 16;
    v28 = a1[1];
    v29 = v28 - v8;
    if (v28 != v8)
      memmove(v27, v8, v28 - v8);
    v30 = *a1;
    *a1 = v24;
    a1[1] = &v27[v29];
    a1[2] = v21;
    if (v30)
      operator delete(v30);
  }
  else if (v8 == (char *)v5)
  {
    *(_OWORD *)v8 = *a3;
    a1[1] = v8 + 16;
  }
  else
  {
    v10 = v8 + 16;
    v11 = (__int128 *)(v5 - 16);
    v12 = a1[1];
    if (v5 >= 0x10)
    {
      do
      {
        v13 = *v11++;
        *(_OWORD *)v12 = v13;
        v12 += 16;
      }
      while ((unint64_t)v11 < v5);
    }
    a1[1] = v12;
    if ((_OWORD *)v5 != v10)
      memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (_QWORD)v10) >> 4)), v8, v5 - (_QWORD)v10);
    *(_OWORD *)v8 = *a3;
  }
}

void sub_239C227BC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

double sub_239C227D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t **v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  float64x2_t v37;
  float64x2_t v44;
  float64_t v46;
  unint64_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v54;
  float64x2_t v57;
  unint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  int8x16_t v74;
  uint64_t v75;
  unint64_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  float64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  float64x2_t v92;
  float64x2_t v93;
  int v95;
  float64x2_t v96;
  float64x2_t v97;
  double v98;
  float64x2_t v99;
  int64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  int8x16_t v103;
  float64x2_t v104;
  float64x2_t v105;
  int8x16_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  double v113;
  double v115;
  float64x2_t v117;
  double v119;
  float64x2_t v120;
  float64x2_t v123;
  float64x2_t v125;
  double v126;
  float64x2_t v127;
  int64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  int8x16_t v132;
  float64x2_t v133;
  float64x2_t v134;
  int64x2_t v135;
  int8x16_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  double v141;
  double v143;
  double v145;
  float64x2_t v147;
  double v149;
  double result;
  float64x2_t v156[3];
  float64x2_t v157;
  double v158;
  _BYTE v159[72];
  double v160;
  double v161;
  double v162;
  __int128 v163;
  double v164;
  float64x2_t v165;
  __int128 v166;
  double v167;
  uint64_t v168;
  __int128 v169;
  float64x2_t v170[8];

  v10 = (float64x2_t **)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 48) + 16;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 40) + 16;
  *(_QWORD *)(a1 + 32) = v11;
  memset(v159, 0, sizeof(v159));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)v159;
  v12 = *(_OWORD *)&v159[16];
  v13 = *(_OWORD *)&v159[32];
  v14 = *(_OWORD *)&v159[48];
  *(_QWORD *)(a3 + 136) = *(_QWORD *)&v159[64];
  *(_OWORD *)(a3 + 120) = v14;
  *(_OWORD *)(a3 + 104) = v13;
  *(_OWORD *)(a3 + 88) = v12;
  v165 = 0u;
  v166 = 0u;
  BYTE8(v166) = 1;
  v167 = 0.0;
  v168 = 1;
  memset(v156, 0, sizeof(v156));
  v157 = 0u;
  v158 = 0.0;
  *(float64x2_t *)v159 = *(float64x2_t *)((char *)&v170[3] + 8);
  *(float64x2_t *)&v159[48] = *(float64x2_t *)((char *)&v170[6] + 8);
  *(float64x2_t *)&v159[32] = *(float64x2_t *)((char *)&v170[5] + 8);
  *(float64x2_t *)&v159[16] = *(float64x2_t *)((char *)&v170[4] + 8);
  memset(v170, 0, sizeof(v170));
  v169 = 0u;
  *(_QWORD *)&v159[64] = 0;
  v160 = 0.0;
  v161 = 0.0;
  v162 = 0.0;
  v164 = 0.0;
  v163 = *(__int128 *)((char *)v170 + 8);
  sub_239C23688(a1 + 16, (uint64_t)&v165, (uint64_t)v156, *(float64x2_t *)((char *)v170 + 8), 0.0, *(float64x2_t *)((char *)&v170[6] + 8));
  *(_QWORD *)&v28.f64[0] = v166;
  v29.f64[0] = 1.0 / v167;
  v30.f64[1] = v165.f64[1];
  _Q7.f64[0] = 0.0;
  v32.f64[0] = -1.0 / (v167 * v167);
  v33 = vmulq_n_f64(v165, v32.f64[0]);
  v34 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v34 + 24))
  {
    _V1.D[1] = v156[0].f64[1];
    _Q5.f64[1] = v156[2].f64[0];
    _V18.D[1] = v157.f64[1];
    v37.f64[0] = 0.0;
    v37.f64[1] = 1.0 / v167;
    __asm { FMLA            D23, D7, V1.D[1] }
    v15.f64[0] = _D23 + v29.f64[0] * v156[1].f64[0];
    __asm { FMLA            D23, D7, V5.D[1] }
    _Q5.f64[0] = _D23 + v29.f64[0] * v156[2].f64[1];
    v44 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v167), v157.f64[0]), v37, v157, 1), (float64x2_t)0, v158);
    __asm { FMLA            D2, D7, V18.D[1] }
    v19.f64[0] = _D2 + v29.f64[0] * v158;
    v17 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v167), v156[0].f64[0]), v37, v156[0], 1), (float64x2_t)0, v156[1].f64[0]), (float64x2_t)0);
    v20 = vaddq_f64(v15, (float64x2_t)0);
    v16 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v167), v156[1].f64[1]), v37, *(float64x2_t *)((char *)&v156[1] + 8), 1), (float64x2_t)0, v156[2].f64[1]), (float64x2_t)0);
    v21 = vaddq_f64(_Q5, (float64x2_t)0);
    v15 = vaddq_f64(v44, (float64x2_t)0);
    v22 = vaddq_f64(v19, (float64x2_t)0);
    v46 = v16.f64[1];
    v47 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v25 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
  }
  else
  {
    v17.f64[0] = 0.0;
    v25.f64[0] = 0.0;
    v20.f64[0] = 0.0;
    v16.f64[0] = 0.0;
    v46 = 0.0;
    v21.f64[0] = 0.0;
    v15.f64[0] = 0.0;
    v47 = 0;
    v22.f64[0] = 0.0;
  }
  v48 = vmulq_n_f64(v165, v29.f64[0]);
  *(_QWORD *)&v49 = *(_OWORD *)&vmulq_f64(v28, v32);
  v50 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
  {
    _V4.D[1] = *(_QWORD *)&v159[8];
    _Q24.f64[1] = *(float64_t *)&v159[32];
    _V28.D[1] = *(_QWORD *)&v159[56];
    _Q7.f64[1] = 1.0 / v167;
    v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v167), *(double *)v159), _Q7, *(float64x2_t *)v159, 1), (float64x2_t)0, *(double *)&v159[16]);
    _D9 = 0;
    __asm { FMLA            D10, D9, V4.D[1] }
    v30.f64[0] = _D10 + v29.f64[0] * *(double *)&v159[16];
    v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v167), *(double *)&v159[24]), _Q7, *(float64x2_t *)&v159[24], 1), (float64x2_t)0, *(double *)&v159[40]);
    __asm { FMLA            D10, D9, V24.D[1] }
    _Q24.f64[0] = _D10 + v29.f64[0] * *(double *)&v159[40];
    v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v167), *(double *)&v159[48]), _Q7, *(float64x2_t *)&v159[48], 1), (float64x2_t)0, *(double *)&v159[64]);
    __asm { FMLA            D5, D9, V28.D[1] }
    _Q7.f64[0] = _D5 + v29.f64[0] * *(double *)&v159[64];
    _Q5 = vaddq_f64(v54, (float64x2_t)0);
    v23 = vaddq_f64(v30, (float64x2_t)0);
    v32 = vaddq_f64(v57, (float64x2_t)0);
    v24 = vaddq_f64(_Q24, (float64x2_t)0);
    v30 = vaddq_f64(v26, (float64x2_t)0);
    _Q7 = vaddq_f64(_Q7, (float64x2_t)0);
    v26.f64[0] = v32.f64[1];
    v27 = (float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL);
    v60 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  }
  else
  {
    _Q5.f64[0] = 0.0;
    v60 = 0;
    v23.f64[0] = 0.0;
    v32.f64[0] = 0.0;
    v26.f64[0] = 0.0;
    v24.f64[0] = 0.0;
    v30.f64[0] = 0.0;
    v27.f64[0] = 0.0;
  }
  v61 = vmulq_f64(v28, v29);
  v62 = (float64x2_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL);
  v63 = 0.0;
  if (*(_BYTE *)(v34 + 24))
  {
    v64.f64[0] = v33.f64[0];
    v64.f64[1] = v50.f64[0];
    v5.f64[0] = v49 * v160;
    v6.f64[0] = v49 * v161;
    v17.f64[1] = v25.f64[0];
    v16.f64[1] = v46;
    v25.f64[0] = v49 * v162;
    *(_QWORD *)&v15.f64[1] = v47;
    v17 = vmlaq_n_f64(v17, v64, v160);
    *(_QWORD *)&v65 = *(_OWORD *)&vaddq_f64(v20, v5);
    v16 = vmlaq_n_f64(v16, v64, v161);
    v21 = vaddq_f64(v21, v6);
    v15 = vmlaq_n_f64(v15, v64, v162);
    *(_QWORD *)&v66 = *(_OWORD *)&vaddq_f64(v22, v25);
    v67 = v16.f64[1];
    *(_QWORD *)&v68 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    *(_QWORD *)&v69 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
    {
LABEL_9:
      v33.f64[1] = v50.f64[0];
      v50.f64[0] = v49 * *(double *)&v163;
      v4.f64[0] = v49 * *((double *)&v163 + 1);
      *(_QWORD *)&_Q5.f64[1] = v60;
      v32.f64[1] = v26.f64[0];
      v26.f64[0] = v49 * v164;
      v30.f64[1] = v27.f64[0];
      _Q5 = vmlaq_n_f64(_Q5, v33, *(double *)&v163);
      *(_QWORD *)&v50.f64[0] = *(_OWORD *)&vaddq_f64(v23, v50);
      v32 = vmlaq_n_f64(v32, v33, *((double *)&v163 + 1));
      *(_QWORD *)&v70 = *(_OWORD *)&vaddq_f64(v24, v4);
      v30 = vmlaq_n_f64(v30, v33, v164);
      *(_QWORD *)&v63 = *(_OWORD *)&vaddq_f64(_Q7, v26);
      v71 = v32.f64[1];
      *(_QWORD *)&v72 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      *(_QWORD *)&v73 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
      goto LABEL_12;
    }
  }
  else
  {
    v17.f64[0] = 0.0;
    v68 = 0.0;
    v65 = 0.0;
    v16.f64[0] = 0.0;
    v67 = 0.0;
    v21.f64[0] = 0.0;
    v15.f64[0] = 0.0;
    v69 = 0.0;
    v66 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
      goto LABEL_9;
  }
  _Q5.f64[0] = 0.0;
  v72 = 0.0;
  v50.f64[0] = 0.0;
  v32.f64[0] = 0.0;
  v71 = 0.0;
  v70 = 0.0;
  v30.f64[0] = 0.0;
  v73 = 0.0;
LABEL_12:
  v26.f64[0] = (*v10)[1].f64[0];
  v48.f64[1] = v62.f64[0];
  v74 = (int8x16_t)vsubq_f64(**v10, v48);
  v75 = *(_OWORD *)&vsubq_f64(v26, v61);
  v76 = vextq_s8(v74, v74, 8uLL).u64[0];
  if (*(_BYTE *)(v34 + 24))
  {
    v62.f64[0] = *(float64_t *)(a3 + 16);
    v27.f64[0] = *(float64_t *)(a3 + 40);
    v77 = *(float64x2_t *)(a3 + 24);
    v3.f64[0] = *(float64_t *)(a3 + 64);
    v78 = *(float64x2_t *)(a3 + 48);
    v79 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v17.f64[0]), (float64x2_t)xmmword_239EC68E0, v68), (float64x2_t)0, v65);
    v17.f64[0] = v17.f64[0] * 0.0 + v68 * 0.0 - v65;
    v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v16.f64[0]), (float64x2_t)xmmword_239EC68E0, v67), (float64x2_t)0, v21.f64[0]);
    v16.f64[0] = v16.f64[0] * 0.0 + v67 * 0.0 - v21.f64[0];
    v21 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v15.f64[0]), (float64x2_t)xmmword_239EC68E0, v69), (float64x2_t)0, v66);
    v15.f64[0] = v15.f64[0] * 0.0 + v69 * 0.0 - v66;
    v17 = vaddq_f64(v17, v62);
    v81 = vaddq_f64(v15, v3);
    *(float64x2_t *)a3 = vaddq_f64(v79, *(float64x2_t *)a3);
    *(float64_t *)(a3 + 16) = v17.f64[0];
    *(float64x2_t *)(a3 + 24) = vaddq_f64(v80, v77);
    *(_QWORD *)(a3 + 40) = *(_OWORD *)&vaddq_f64(v16, v27);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(v21, v78);
    *(float64_t *)(a3 + 64) = v81.f64[0];
  }
  else
  {
    *(_QWORD *)(a3 + 64) = 0;
    v81.f64[1] = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  v82 = (float64x2_t *)(a3 + 72);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v81.f64[0] = *(float64_t *)(a3 + 88);
    v17.f64[0] = *(float64_t *)(a3 + 112);
    v21.f64[0] = *(float64_t *)(a3 + 136);
    v83 = *(float64x2_t *)(a3 + 120);
    v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, _Q5.f64[0]), (float64x2_t)xmmword_239EC68E0, v72), (float64x2_t)0, v50.f64[0]);
    _Q5.f64[0] = _Q5.f64[0] * 0.0 + v72 * 0.0 - v50.f64[0];
    v85 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v32.f64[0]), (float64x2_t)xmmword_239EC68E0, v71), (float64x2_t)0, v70);
    v32.f64[0] = v32.f64[0] * 0.0 + v71 * 0.0 - v70;
    v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v30.f64[0]), (float64x2_t)xmmword_239EC68E0, v73), (float64x2_t)0, v63);
    v30.f64[0] = v30.f64[0] * 0.0 + v73 * 0.0 - v63;
    v87 = *(_OWORD *)&vaddq_f64(v32, v17);
    v88 = vaddq_f64(v85, *(float64x2_t *)(a3 + 96));
    *(float64x2_t *)(a3 + 72) = vaddq_f64(v84, *(float64x2_t *)(a3 + 72));
    *(_QWORD *)(a3 + 88) = *(_OWORD *)&vaddq_f64(_Q5, v81);
    *(float64x2_t *)(a3 + 96) = v88;
    *(_QWORD *)(a3 + 112) = v87;
    *(float64x2_t *)(a3 + 120) = vaddq_f64(v86, v83);
    *(_QWORD *)(a3 + 136) = *(_OWORD *)&vaddq_f64(v30, v21);
  }
  else
  {
    *(_QWORD *)(a3 + 136) = 0;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *v82 = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
  }
  *(_QWORD *)(a1 + 72) = v75;
  v74.i64[1] = v76;
  *(int8x16_t *)(a1 + 56) = v74;
  v89 = *(_QWORD *)(a1 + 88);
  if (v89)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v89 + 24))(v89, a1 + 56);
    v90 = *(_QWORD *)(a1 + 88);
    v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 16))(v90);
    v95 = v91;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 4))
    {
      switch(v91)
      {
        case 0:
          v96 = *(float64x2_t *)(v90 + 16);
          _Q2.f64[0] = *(float64_t *)(v90 + 56);
          v97 = *(float64x2_t *)(v90 + 40);
          v98 = *(double *)(v90 + 80);
          v99 = *(float64x2_t *)(v90 + 64);
          goto LABEL_25;
        case 1:
          v93.f64[0] = *(float64_t *)(a3 + 16);
          _Q2.f64[0] = *(float64_t *)(v90 + 32);
          v100 = (int64x2_t)vmulq_f64(v93, _Q2);
          v92 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v90 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 64);
          v102 = *(float64x2_t *)(a3 + 32);
          v101 = *(float64x2_t *)(a3 + 48);
          v103 = *(int8x16_t *)(a3 + 16);
          *(_QWORD *)&v104.f64[0] = v100.i64[0];
          v104.f64[1] = *(float64_t *)(a3 + 24);
          *(float64x2_t *)a3 = v92;
          *(float64x2_t *)(a3 + 16) = v104;
          v104.f64[0] = *(float64_t *)(v90 + 32);
          v105 = vmulq_f64((float64x2_t)vextq_s8(v103, (int8x16_t)v102, 8uLL), *(float64x2_t *)(v90 + 16));
          v93 = (float64x2_t)vzip1q_s64(v100, (int64x2_t)v105);
          *(float64x2_t *)a3 = v92;
          *(float64x2_t *)(a3 + 16) = v93;
          v106 = vextq_s8((int8x16_t)v105, (int8x16_t)vmulq_laneq_f64(v104, v102, 1), 8uLL);
          *(int8x16_t *)(a3 + 32) = v106;
          v105.f64[0] = *(float64_t *)(v90 + 32);
          _Q2 = vmulq_f64(_Q2, v105);
          v107 = vmulq_f64(v101, *(float64x2_t *)(v90 + 16));
          *(float64x2_t *)a3 = v92;
          *(float64x2_t *)(a3 + 16) = v93;
          *(int8x16_t *)(a3 + 32) = v106;
          *(float64x2_t *)(a3 + 48) = v107;
          *(float64_t *)(a3 + 64) = _Q2.f64[0];
          break;
        case 2:
          v92.f64[0] = *(float64_t *)(v90 + 16);
          v93.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v93 = vmulq_f64(v92, v93);
          v108 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v92.f64[0]);
          v109 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v92.f64[0]);
          v110 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v92.f64[0]);
          v92 = vmulq_n_f64(*(float64x2_t *)a3, v92.f64[0]);
          *(float64x2_t *)a3 = v92;
          *(float64x2_t *)(a3 + 16) = v110;
          *(float64x2_t *)(a3 + 32) = v109;
          *(float64x2_t *)(a3 + 48) = v108;
          *(float64_t *)(a3 + 64) = v93.f64[0];
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v90 + 56))(v156, v90);
          v96 = v156[0];
          _Q2.f64[0] = v156[2].f64[1];
          v97 = *(float64x2_t *)((char *)&v156[1] + 8);
          v98 = v158;
          v99 = v157;
LABEL_25:
          v111 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v113 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v115 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v117 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, *(double *)a3), v97, *(float64x2_t *)a3, 1), v99, v111);
          __asm { FMLA            D21, D2, V7.D[1] }
          v119 = _D21 + v98 * v111;
          v120 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, _Q17.f64[0]), v97, _Q17, 1), v99, v113);
          __asm { FMLA            D21, D2, V17.D[1] }
          v93 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, _Q19.f64[0]), v97, _Q19, 1), v99, v115);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v117;
          *(double *)(a3 + 16) = v119;
          *(float64x2_t *)(a3 + 24) = v120;
          *(double *)(a3 + 40) = _D21 + v98 * v113;
          *(float64x2_t *)(a3 + 48) = v93;
          *(double *)(a3 + 64) = _D0 + v98 * v115;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 4))
    {
      switch(v95)
      {
        case 0:
          v123 = *(float64x2_t *)(v90 + 16);
          _D2 = *(double *)(v90 + 56);
          v125 = *(float64x2_t *)(v90 + 40);
          v126 = *(double *)(v90 + 80);
          v127 = *(float64x2_t *)(v90 + 64);
          goto LABEL_32;
        case 1:
          v93.f64[0] = *(float64_t *)(a3 + 88);
          _Q2.f64[0] = *(float64_t *)(v90 + 32);
          v128 = (int64x2_t)vmulq_f64(v93, _Q2);
          v129 = vmulq_f64(*(float64x2_t *)(a3 + 72), *(float64x2_t *)(v90 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 136);
          v130 = *(float64x2_t *)(a3 + 120);
          v131 = *(float64x2_t *)(a3 + 104);
          v132 = *(int8x16_t *)(a3 + 88);
          *(_QWORD *)&v133.f64[0] = v128.i64[0];
          v133.f64[1] = *(float64_t *)(a3 + 96);
          *(float64x2_t *)(a3 + 72) = v129;
          *(float64x2_t *)(a3 + 88) = v133;
          v133.f64[0] = *(float64_t *)(v90 + 32);
          v134 = vmulq_f64((float64x2_t)vextq_s8(v132, (int8x16_t)v131, 8uLL), *(float64x2_t *)(v90 + 16));
          v135 = vzip1q_s64(v128, (int64x2_t)v134);
          *(float64x2_t *)(a3 + 72) = v129;
          *(int64x2_t *)(a3 + 88) = v135;
          v136 = vextq_s8((int8x16_t)v134, (int8x16_t)vmulq_laneq_f64(v133, v131, 1), 8uLL);
          *(int8x16_t *)(a3 + 104) = v136;
          v134.f64[0] = *(float64_t *)(v90 + 32);
          v137 = vmulq_f64(v130, *(float64x2_t *)(v90 + 16));
          *(int8x16_t *)(a3 + 104) = v136;
          *(int64x2_t *)(a3 + 88) = v135;
          *(float64x2_t *)(a3 + 72) = v129;
          *(float64x2_t *)(a3 + 120) = v137;
          *(_QWORD *)(a3 + 136) = *(_OWORD *)&vmulq_f64(_Q2, v134);
          break;
        case 2:
          v92.f64[0] = *(float64_t *)(v90 + 16);
          v93.f64[0] = *(float64_t *)(a3 + 136);
          v138 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v92.f64[0]);
          v139 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v92.f64[0]);
          v140 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v92.f64[0]);
          *v82 = vmulq_n_f64(*v82, v92.f64[0]);
          *(float64x2_t *)(a3 + 88) = v140;
          *(float64x2_t *)(a3 + 104) = v139;
          *(float64x2_t *)(a3 + 120) = v138;
          *(_QWORD *)(a3 + 136) = *(_OWORD *)&vmulq_f64(v92, v93);
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v90 + 56))(v156, v90);
          v123 = v156[0];
          _D2 = v156[2].f64[1];
          v125 = *(float64x2_t *)((char *)&v156[1] + 8);
          v126 = v158;
          v127 = v157;
LABEL_32:
          v141 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v143 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v145 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, _Q7.f64[0]), v125, _Q7, 1), v127, v141);
          __asm { FMLA            D21, D2, V7.D[1] }
          v149 = _D21 + v126 * v141;
          __asm
          {
            FMLA            D21, D2, V17.D[1]
            FMLA            D0, D2, V19.D[1]
          }
          *(float64x2_t *)(a3 + 72) = v147;
          *(double *)(a3 + 88) = v149;
          *(float64x2_t *)(a3 + 96) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, _Q17.f64[0]), v125, _Q17, 1), v127, v143);
          *(double *)(a3 + 112) = _D21 + v126 * v143;
          *(float64x2_t *)(a3 + 120) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v123, _Q19.f64[0]), v125, _Q19, 1), v127, v145);
          *(double *)(a3 + 136) = _D0 + v126 * v145;
          break;
        default:
          break;
      }
    }
  }
  _Q2 = *(_OWORD *)(a1 + 56);
  _D4 = *(_QWORD *)(a1 + 64);
  __asm { FMLA            D3, D4, V2.D[1] }
  result = *(double *)(a2 + 8) * (_D3 + *(double *)(a1 + 72) * *(double *)(a1 + 72));
  *(double *)(a1 + 80) = result;
  return result;
}

uint64_t sub_239C23138(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_239C2323C(a1 + 2, v15, 9uLL, (uint64_t *)&v18);
    v14 = a1[3] - 72;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_239C22598(a2, a4, &v18);
  return v14;
}

void sub_239C2323C(unint64_t *a1, void *a2, unint64_t a3, uint64_t *a4)
{
  const double *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  int64x2_t v35;
  int64x2_t *v36;
  uint64_t v37;
  double *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  float64x2_t v57;
  float64x2_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 *v62;
  _OWORD *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;

  v4 = (const double *)a4;
  v7 = *a1;
  v8 = a1[1];
  v9 = (uint64_t)a2 - *a1;
  v10 = v9 >> 3;
  v11 = (double *)(*a1 + (v9 & 0xFFFFFFFFFFFFFFF8));
  v12 = a1[2];
  if (a3 <= (uint64_t)(v12 - v8) >> 3)
  {
    v19 = (uint64_t)(v8 - (_QWORD)v11) >> 3;
    v20 = a3;
    if (a3 <= v19)
    {
      v21 = a1[1];
      v19 = a3;
      goto LABEL_35;
    }
    v21 = v8 + 8 * (a3 - v19);
    v22 = v20 * 8 - (v8 - (_QWORD)v11) - 8;
    if (v22 >= 0x98)
    {
      if (v8 >= (unint64_t)(a4 + 1)
        || (v23 = (uint64_t *)a1[1], (v22 & 0xFFFFFFFFFFFFFFF8) + v8 + 8 <= (unint64_t)a4))
      {
        v34 = (v22 >> 3) + 1;
        v35 = vdupq_lane_s64(*a4, 0);
        v36 = (int64x2_t *)(v8 + 16);
        v37 = v34 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36[-1] = v35;
          *v36 = v35;
          v36 += 2;
          v37 -= 4;
        }
        while (v37);
        if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          a1[1] = v21;
          if ((double *)v8 == v11)
            return;
LABEL_35:
          v38 = &v11[v20];
          v39 = v21 - (_QWORD)&v11[v20];
          v40 = v39 >> 3;
          v41 = (uint64_t *)(v21 - v20 * 8);
          v42 = (_QWORD *)v21;
          if ((unint64_t)v41 < v8)
          {
            v43 = (v9 & 0xFFFFFFFFFFFFFFF8) + v39;
            v44 = (char *)(v43 + v7);
            v45 = v43 + v7 + 8;
            if (v8 > v45)
              v45 = v8;
            v46 = v45 + ~v7 - v43;
            v47 = v21 - (_QWORD)v44;
            v48 = v46 >= 0x58 && v47 > 0x1F;
            v42 = (_QWORD *)v21;
            if (!v48)
              goto LABEL_77;
            v49 = (v46 >> 3) + 1;
            v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
            v41 = (uint64_t *)((char *)v41 + v50);
            v51 = (_OWORD *)(v21 + 16);
            v52 = (__int128 *)(8 * v40 + 8 * v10 + v7 + 16);
            v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v54 = *v52;
              *(v51 - 1) = *(v52 - 1);
              *v51 = v54;
              v51 += 2;
              v52 += 2;
              v53 -= 4;
            }
            while (v53);
            v42 = (_QWORD *)(v21 + v50);
            if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_77:
              do
              {
                v55 = *v41++;
                *v42++ = v55;
              }
              while ((unint64_t)v41 < v8);
            }
          }
          a1[1] = (unint64_t)v42;
          if ((double *)v21 != v38)
            memmove((void *)(v21 - 8 * v40), v11, v39);
          if (v11 <= v4)
          {
            if (a1[1] <= (unint64_t)v4)
              v56 = 0;
            else
              v56 = a3;
            v4 += v56;
          }
          if (v19 >= 0xA && (v11 >= v4 + 1 || (unint64_t)v4 >= v7 + (v9 & 0xFFFFFFFFFFFFFFF8) + 8 * v19))
          {
            v11 += v19 & 0xFFFFFFFFFFFFFFFCLL;
            v57 = vld1q_dup_f64(v4);
            v58 = (float64x2_t *)(v7 + 8 * v10 + 16);
            v59 = v19 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v58[-1] = v57;
              *v58 = v57;
              v58 += 2;
              v59 -= 4;
            }
            while (v59);
            if (v19 == (v19 & 0xFFFFFFFFFFFFFFFCLL))
              return;
            v19 &= 3u;
          }
          do
          {
            *v11++ = *v4;
            --v19;
          }
          while (v19);
          return;
        }
        v23 = (uint64_t *)(v8 + 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL));
      }
    }
    else
    {
      v23 = (uint64_t *)a1[1];
    }
    do
      *v23++ = *a4;
    while (v23 != (uint64_t *)v21);
    goto LABEL_34;
  }
  v13 = a3 + ((uint64_t)(v8 - v7) >> 3);
  if (v13 >> 61)
    sub_2394189F8();
  v15 = v12 - v7;
  if (v15 >> 2 > v13)
    v13 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v13;
  if (v16)
  {
    if (v16 >> 61)
      sub_239418A80();
    v17 = v16;
    v18 = operator new(8 * v16);
    v16 = v17;
  }
  else
  {
    v18 = 0;
  }
  v24 = v9 >> 3;
  v25 = (unint64_t)&v18[8 * v10];
  v26 = (char *)(v25 + 8 * a3);
  v27 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v28 = (char *)v25;
  if (v27 < 0x13)
    goto LABEL_23;
  if (v25 < (unint64_t)(v4 + 1))
  {
    v28 = (char *)v25;
    if (&v18[8 * a3 + (v9 & 0xFFFFFFFFFFFFFFF8)] > (_BYTE *)v4)
      goto LABEL_23;
  }
  v29 = (v27 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v30 = vdupq_lane_s64(*(_QWORD *)v4, 0);
  v31 = (int64x2_t *)&v18[8 * v24 + 16];
  v32 = v29;
  do
  {
    v31[-1] = v30;
    *v31 = v30;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  if (v27 + 1 != v29)
  {
    v28 = (char *)(v25 + 8 * v29);
    do
    {
LABEL_23:
      *(double *)v28 = *v4;
      v28 += 8;
    }
    while (v28 != v26);
  }
  if ((void *)v7 != a2)
  {
    if ((unint64_t)(v9 - 8) >= 0x68)
    {
      v33 = v11;
      if ((v9 & 0xFFFFFFFFFFFFFFF8) + v7 - (unint64_t)&v18[v9 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
      {
        v60 = ((unint64_t)(v9 - 8) >> 3) + 1;
        v33 = &v11[-(v60 & 0x3FFFFFFFFFFFFFFCLL)];
        v61 = 8 * v24 - 16;
        v62 = (__int128 *)(v7 + v61);
        v63 = &v18[v61];
        v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v65 = *v62;
          *(v63 - 1) = *(v62 - 1);
          *v63 = v65;
          v62 -= 2;
          v63 -= 2;
          v64 -= 4;
        }
        while (v64);
        v25 -= 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
        if (v60 == (v60 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_68;
      }
    }
    else
    {
      v33 = v11;
    }
    do
    {
      v66 = *((_QWORD *)v33-- - 1);
      *(_QWORD *)(v25 - 8) = v66;
      v25 -= 8;
    }
    while (v33 != (double *)v7);
  }
LABEL_68:
  v67 = &v18[8 * v16];
  if ((double *)v8 != v11)
    memmove(v26, v11, v8 - (_QWORD)v11);
  *a1 = v25;
  a1[1] = (unint64_t)&v26[v8 - (_QWORD)v11];
  a1[2] = (unint64_t)v67;
  if (v7)
    operator delete((void *)v7);
}

uint64_t sub_239C23688(uint64_t result, uint64_t a2, uint64_t a3, float64x2_t a4, double a5, float64x2_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float64x2_t v17;
  double v18;
  double v19;
  double v21;
  double v32;
  double v33;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[5];

  v7 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(result + 16);
  v8 = a3;
  if (*(_BYTE *)(v7 + 24))
  {
    if (*(_BYTE *)(v6 + 24))
    {
LABEL_3:
      v9 = (_QWORD *)(a3 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
    a4 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(float64x2_t *)a3 = a4;
    *(float64x2_t *)(a3 + 16) = a4;
    *(float64x2_t *)(a3 + 32) = a4;
    *(float64x2_t *)(a3 + 48) = a4;
    *(_QWORD *)(a3 + 64) = 0x7FEFFFFFFFFFFFFFLL;
    if (*(_BYTE *)(v6 + 24))
      goto LABEL_3;
  }
  v9 = 0;
  a4 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(float64x2_t *)(a3 + 72) = a4;
  *(float64x2_t *)(a3 + 88) = a4;
  *(float64x2_t *)(a3 + 104) = a4;
  *(float64x2_t *)(a3 + 120) = a4;
  *(_QWORD *)(a3 + 136) = 0x7FEFFFFFFFFFFFFFLL;
LABEL_6:
  a4.f64[0] = *(float64_t *)(v7 + 16);
  a6.f64[0] = *(float64_t *)(v6 + 16);
  *(float64x2_t *)a2 = vsubq_f64(*(float64x2_t *)v7, *(float64x2_t *)v6);
  *(_QWORD *)(a2 + 16) = *(_OWORD *)&vsubq_f64(a4, a6);
  if (v8)
  {
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_QWORD *)v8 = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = 0x3FF0000000000000;
  }
  if (v9)
  {
    *v9 = 0xBFF0000000000000;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = 0xBFF0000000000000;
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    v9[8] = 0xBFF0000000000000;
  }
  memset(v58, 0, sizeof(v58));
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0.0;
  v10 = &v44;
  v11 = &v49;
  v49 = *(float64x2_t *)((char *)v58 + 8);
  v12.f64[1] = 0.0;
  v13.f64[1] = 0.0;
  v53 = 0.0;
  v52 = *(float64x2_t *)((char *)&v58[3] + 8);
  v51 = *(float64x2_t *)((char *)&v58[2] + 8);
  v50 = *(float64x2_t *)((char *)&v58[1] + 8);
  v15 = *(_QWORD *)(result + 8);
  v14 = *(_QWORD *)(result + 16);
  v16 = *(unsigned __int8 *)(v15 + 24);
  if (*(_BYTE *)(v15 + 24))
  {
    if (*(_BYTE *)(v14 + 24))
      goto LABEL_12;
  }
  else
  {
    v10 = 0;
    v12 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v44 = v12;
    v45 = v12;
    v46 = v12;
    v47 = v12;
    v48 = 1.79769313e308;
    if (*(_BYTE *)(v14 + 24))
      goto LABEL_12;
  }
  v11 = 0;
  v12 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v49 = v12;
  v50 = v12;
  v51 = v12;
  v52 = v12;
  v53 = 1.79769313e308;
LABEL_12:
  v12.f64[0] = *(float64_t *)(v15 + 16);
  v13.f64[0] = *(float64_t *)(v14 + 16);
  *(_QWORD *)&v13.f64[0] = *(_OWORD *)&vsubq_f64(v12, v13);
  v17 = vsubq_f64(*(float64x2_t *)v15, *(float64x2_t *)v14);
  *(_QWORD *)&v18 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  if (v10)
  {
    *(float64x2_t *)((char *)&v10[1] + 8) = 0u;
    *(float64x2_t *)((char *)&v10[2] + 8) = 0u;
    *(float64x2_t *)((char *)v10 + 8) = 0u;
    v10->f64[0] = 1.0;
    v10[2].f64[0] = 1.0;
    v10[3].f64[1] = 0.0;
    v10[4].f64[0] = 1.0;
  }
  if (v11)
  {
    v11->f64[0] = -1.0;
    v11->f64[1] = 0.0;
    v11[1].f64[0] = 0.0;
    v11[1].f64[1] = 0.0;
    v11[2].f64[0] = -1.0;
    v11[2].f64[1] = 0.0;
    v11[3].f64[0] = 0.0;
    v11[3].f64[1] = 0.0;
    v11[4].f64[0] = -1.0;
  }
  v17.f64[1] = v18;
  v19 = sqrt(vmulq_f64(v17, v17).f64[0] + v18 * v18 + v13.f64[0] * v13.f64[0]);
  *(double *)(a2 + 32) = v19;
  _D1 = v18 * (1.0 / v19);
  v21 = v13.f64[0] * (1.0 / v19);
  if (v16)
  {
    _V5.D[1] = v44.f64[1];
    _V7.D[1] = v46.f64[0];
    _V17.D[1] = v47.f64[1];
    __asm
    {
      FMLA            D19, D1, V5.D[1]
      FMLA            D5, D1, V7.D[1]
      FMLA            D6, D1, V17.D[1]
    }
    v32 = *(double *)(a3 + 152) + _D5 + v21 * v46.f64[1];
    v33 = *(double *)(a3 + 160) + _D6 + v21 * v48;
    *(double *)(a3 + 144) = *(double *)(a3 + 144) + _D19 + v21 * v45.f64[0];
    *(double *)(a3 + 152) = v32;
    *(double *)(a3 + 160) = v33;
  }
  else
  {
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 152) = 0;
    *(_QWORD *)(a3 + 160) = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(result + 16) + 24))
  {
    _V5.D[1] = v49.f64[1];
    _V7.D[1] = v51.f64[0];
    _V17.D[1] = v52.f64[1];
    __asm
    {
      FMLA            D3, D1, V5.D[1]
      FMLA            D4, D1, V7.D[1]
      FMLA            D0, D1, V17.D[1]
    }
    v40 = _D0 + v21 * v53;
    v41 = *(double *)(a3 + 168) + _D3 + v21 * v50.f64[0];
    v42 = *(double *)(a3 + 176) + _D4 + v21 * v51.f64[1];
    v43 = *(double *)(a3 + 184) + v40;
    *(double *)(a3 + 168) = v41;
    *(double *)(a3 + 176) = v42;
    *(double *)(a3 + 184) = v43;
  }
  else
  {
    *(_QWORD *)(a3 + 168) = 0;
    *(_QWORD *)(a3 + 176) = 0;
    *(_QWORD *)(a3 + 184) = 0;
  }
  return result;
}

double sub_239C23984(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float64x2_t v22;
  float64x2_t v23;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  int64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  double v43;
  double v45;
  float64x2_t v47;
  double v53;
  float64x2_t v54;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  int64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  double v74;
  double v76;
  float64x2_t v78;
  double v80;
  float64x2_t v81;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  double v90;
  double result;
  uint64_t v97;
  float64x2_t v98;
  uint64_t v99;
  char v100;
  _OWORD v101[3];
  float64x2_t v102;
  _BYTE v103[80];
  __int128 v104;
  uint64_t v105;

  v98 = 0uLL;
  v99 = 0;
  v100 = 1;
  v14 = *(_QWORD *)(a1 + 80) + 16;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72) + 16;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 88) + 16;
  v105 = 0;
  *(_OWORD *)&v103[64] = 0u;
  v104 = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  v97 = a3;
  memset(v103, 0, 64);
  v102 = 0u;
  memset(v101, 0, sizeof(v101));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v103[8];
  v15 = *(_OWORD *)&v103[24];
  v16 = *(_OWORD *)&v103[40];
  v17 = *(double *)&v103[56];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&v103[56];
  *(_OWORD *)(a3 + 104) = v16;
  *(_OWORD *)(a3 + 88) = v15;
  v18 = v104;
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 144) = v18;
  sub_239C24464((float64x2_t **)(a1 + 16), &v98, &v97, *(double *)&v18, *(double *)&v16, v17, a7, a8, a9, a10, a11);
  *(float64x2_t *)(a1 + 96) = v98;
  *(_QWORD *)(a1 + 112) = v99;
  v19 = *(_QWORD *)(a1 + 128);
  if (v19)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, a1 + 96);
    v20 = *(_QWORD *)(a1 + 128);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    v25 = v21;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      switch(v21)
      {
        case 0:
          v26 = *(float64x2_t *)(v20 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 56);
          v27 = *(float64x2_t *)(v20 + 40);
          v28 = *(double *)(v20 + 80);
          v29 = *(float64x2_t *)(v20 + 64);
          goto LABEL_8;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          v30 = (int64x2_t)vmulq_f64(v23, _Q2);
          v22 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v20 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 64);
          v32 = *(float64x2_t *)(a3 + 32);
          v31 = *(float64x2_t *)(a3 + 48);
          v33 = *(int8x16_t *)(a3 + 16);
          *(_QWORD *)&v34.f64[0] = v30.i64[0];
          v34.f64[1] = *(float64_t *)(a3 + 24);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v34;
          v34.f64[0] = *(float64_t *)(v20 + 32);
          v35 = vmulq_f64((float64x2_t)vextq_s8(v33, (int8x16_t)v32, 8uLL), *(float64x2_t *)(v20 + 16));
          v23 = (float64x2_t)vzip1q_s64(v30, (int64x2_t)v35);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v23;
          v36 = vextq_s8((int8x16_t)v35, (int8x16_t)vmulq_laneq_f64(v34, v32, 1), 8uLL);
          *(int8x16_t *)(a3 + 32) = v36;
          v35.f64[0] = *(float64_t *)(v20 + 32);
          _Q2 = vmulq_f64(_Q2, v35);
          v37 = vmulq_f64(v31, *(float64x2_t *)(v20 + 16));
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v23;
          *(int8x16_t *)(a3 + 32) = v36;
          *(float64x2_t *)(a3 + 48) = v37;
          *(float64_t *)(a3 + 64) = _Q2.f64[0];
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v23 = vmulq_f64(v22, v23);
          v38 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v22.f64[0]);
          v39 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v22.f64[0]);
          v40 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v22.f64[0]);
          v22 = vmulq_n_f64(*(float64x2_t *)a3, v22.f64[0]);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v40;
          *(float64x2_t *)(a3 + 32) = v39;
          *(float64x2_t *)(a3 + 48) = v38;
          *(float64_t *)(a3 + 64) = v23.f64[0];
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v26 = (float64x2_t)v101[0];
          _Q2.f64[0] = *((float64_t *)&v101[2] + 1);
          v27 = *(float64x2_t *)((char *)&v101[1] + 8);
          v28 = *(double *)v103;
          v29 = v102;
LABEL_8:
          v41 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v43 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v45 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)a3), v27, *(float64x2_t *)a3, 1), v29, v41);
          __asm { FMLA            D21, D2, V7.D[1] }
          v53 = _D21 + v28 * v41;
          v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q17.f64[0]), v27, _Q17, 1), v29, v43);
          __asm { FMLA            D21, D2, V17.D[1] }
          v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q19.f64[0]), v27, _Q19, 1), v29, v45);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v47;
          *(double *)(a3 + 16) = v53;
          *(float64x2_t *)(a3 + 24) = v54;
          *(double *)(a3 + 40) = _D21 + v28 * v43;
          *(float64x2_t *)(a3 + 48) = v23;
          *(double *)(a3 + 64) = _D0 + v28 * v45;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4))
    {
      switch(v25)
      {
        case 0:
          v57 = *(float64x2_t *)(v20 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 56);
          v58 = *(float64x2_t *)(v20 + 40);
          v59 = *(double *)(v20 + 80);
          v60 = *(float64x2_t *)(v20 + 64);
          goto LABEL_15;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 88);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          v61 = (int64x2_t)vmulq_f64(v23, _Q2);
          v22 = vmulq_f64(*(float64x2_t *)(a3 + 72), *(float64x2_t *)(v20 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 136);
          v62 = *(float64x2_t *)(a3 + 120);
          v63 = *(float64x2_t *)(a3 + 104);
          v64 = *(int8x16_t *)(a3 + 88);
          *(_QWORD *)&v65.f64[0] = v61.i64[0];
          v65.f64[1] = *(float64_t *)(a3 + 96);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v65;
          v65.f64[0] = *(float64_t *)(v20 + 32);
          v66 = vmulq_f64((float64x2_t)vextq_s8(v64, (int8x16_t)v63, 8uLL), *(float64x2_t *)(v20 + 16));
          v23 = (float64x2_t)vzip1q_s64(v61, (int64x2_t)v66);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v23;
          v67 = vextq_s8((int8x16_t)v66, (int8x16_t)vmulq_laneq_f64(v65, v63, 1), 8uLL);
          *(int8x16_t *)(a3 + 104) = v67;
          v66.f64[0] = *(float64_t *)(v20 + 32);
          _Q2 = vmulq_f64(_Q2, v66);
          v68 = vmulq_f64(v62, *(float64x2_t *)(v20 + 16));
          *(int8x16_t *)(a3 + 104) = v67;
          *(float64x2_t *)(a3 + 88) = v23;
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 120) = v68;
          *(float64_t *)(a3 + 136) = _Q2.f64[0];
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 136);
          _Q2 = *(float64x2_t *)(a3 + 72);
          v23 = vmulq_f64(v22, v23);
          v69 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v22.f64[0]);
          v70 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v22.f64[0]);
          v71 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v22.f64[0]);
          v22 = vmulq_n_f64(_Q2, v22.f64[0]);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v71;
          *(float64x2_t *)(a3 + 104) = v70;
          *(float64x2_t *)(a3 + 120) = v69;
          *(float64_t *)(a3 + 136) = v23.f64[0];
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v57 = (float64x2_t)v101[0];
          _Q2.f64[0] = *((float64_t *)&v101[2] + 1);
          v58 = *(float64x2_t *)((char *)&v101[1] + 8);
          v59 = *(double *)v103;
          v60 = v102;
LABEL_15:
          v72 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v74 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v76 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v78 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q7.f64[0]), v58, _Q7, 1), v60, v72);
          __asm { FMLA            D21, D2, V7.D[1] }
          v80 = _D21 + v59 * v72;
          v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q17.f64[0]), v58, _Q17, 1), v60, v74);
          __asm { FMLA            D21, D2, V17.D[1] }
          v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q19.f64[0]), v58, _Q19, 1), v60, v76);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)(a3 + 72) = v78;
          *(double *)(a3 + 88) = v80;
          *(float64x2_t *)(a3 + 96) = v81;
          *(double *)(a3 + 112) = _D21 + v59 * v74;
          *(float64x2_t *)(a3 + 120) = v23;
          *(double *)(a3 + 136) = _D0 + v59 * v76;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 4))
    {
      v84 = (float64x2_t *)(a3 + 144);
      switch(v25)
      {
        case 0:
          v85 = *(float64x2_t *)(v20 + 16);
          _D2 = *(_QWORD *)(v20 + 56);
          v87 = *(float64x2_t *)(v20 + 40);
          v88 = *(double *)(v20 + 80);
          v89 = *(float64x2_t *)(v20 + 64);
          goto LABEL_22;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 160);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          *(float64x2_t *)(a3 + 144) = vmulq_f64(*(float64x2_t *)(a3 + 144), *(float64x2_t *)(v20 + 16));
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v23, _Q2);
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 160);
          *v84 = vmulq_n_f64(*v84, v22.f64[0]);
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v22, v23);
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v85 = (float64x2_t)v101[0];
          _D2 = *((_QWORD *)&v101[2] + 1);
          v87 = *(float64x2_t *)((char *)&v101[1] + 8);
          v88 = *(double *)v103;
          v89 = v102;
LABEL_22:
          v90 = *(double *)(a3 + 160);
          _Q7 = *v84;
          __asm { FMLA            D0, D2, V7.D[1] }
          *v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v85, v84->f64[0]), v87, *v84, 1), v89, v90);
          *(double *)(a3 + 160) = _D0 + v88 * v90;
          break;
        default:
          break;
      }
    }
  }
  _Q2 = *(_OWORD *)(a1 + 96);
  _D4 = *(_QWORD *)(a1 + 104);
  __asm { FMLA            D3, D4, V2.D[1] }
  result = *(double *)(a2 + 8) * (_D3 + *(double *)(a1 + 112) * *(double *)(a1 + 112));
  *(double *)(a1 + 120) = result;
  return result;
}

float64_t sub_239C23F18(uint64_t *a1, uint64_t a2, uint64_t a3, float64x2_t a4, double a5, float64x2_t a6, double a7, float64x2_t a8, float64x2_t a9, float64x2_t a10, float64x2_t a11)
{
  float64x2_t v11;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v18;
  int v19;
  unsigned int v21;
  unsigned int v22;
  const double *v23;
  unint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v38;
  float64x2_t v41;
  unint64_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v55;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  unsigned int v60;
  unint64_t *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v74;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  float64x2_t v88;
  float64x2_t v89;
  int64x2_t v90;
  double v91;
  double v93;
  double v95;
  double v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v101;
  float64x2_t v103;
  float64x2_t v105;
  float64x2_t v107;
  float64x2x3_t v109;

  v18 = *a1;
  v19 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a2 + 8))
    _ZF = *(_BYTE *)a2 == 0;
  else
    _ZF = 1;
  if (_ZF)
    goto LABEL_16;
  v21 = *(_DWORD *)(a2 + 12);
  v22 = *(_DWORD *)(a2 + 4);
  if (v22 < v21)
    goto LABEL_18;
  v24 = *(unint64_t **)(v18 + 32);
  v25 = v24[11] + 24 * v22;
  v27 = *(char **)v25;
  v26 = *(char **)(v25 + 8);
  if (*(char **)v25 != v26)
  {
    while (*(_DWORD *)v27 < v21)
    {
      v27 += 16;
      if (v27 == v26)
        goto LABEL_14;
    }
  }
  if (v27 == v26)
    goto LABEL_14;
  if (*(_DWORD *)v27 != v21)
  {
    v26 = v27;
LABEL_14:
    v28 = sub_239C23138(v24, (char **)v25, v21, v26);
    goto LABEL_15;
  }
  v28 = v24[2] + 8 * *((_QWORD *)v27 + 1);
LABEL_15:
  a4.f64[0] = *(float64_t *)(v28 + 16);
  v23 = (const double *)(a3 + 72);
  v109 = vld3q_f64(v23);
  a9.f64[0] = *(float64_t *)(v28 + 40);
  a10 = *(float64x2_t *)(v28 + 24);
  a11.f64[0] = *(float64_t *)(v28 + 64);
  v11 = *(float64x2_t *)(v28 + 48);
  v29 = *(double *)(a3 + 136);
  _Q18 = *(float64x2_t *)(a3 + 120);
  v13.f64[0] = *(float64_t *)(a3 + 16);
  v14.f64[0] = *(float64_t *)(a3 + 40);
  v30 = *(double *)(a3 + 64);
  v31 = *(float64x2_t *)(a3 + 48);
  v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109.val[0], *(double *)a3), v109.val[1], *(float64x2_t *)a3, 1), v109.val[2], v13.f64[0]);
  _D20 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D26, D20, V18.D[1] }
  v13.f64[0] = _D26 + v29 * v13.f64[0];
  v38 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109.val[0], *(double *)(a3 + 24)), v109.val[1], *(float64x2_t *)(a3 + 24), 1), v109.val[2], v14.f64[0]);
  _D22 = *(_QWORD *)(a3 + 32);
  __asm { FMLA            D26, D22, V18.D[1] }
  v14.f64[0] = _D26 + v29 * v14.f64[0];
  v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109.val[0], v31.f64[0]), v109.val[1], v31, 1), v109.val[2], v30);
  v109.val[0] = vmulq_f64(_Q18, v31);
  v109.val[1].f64[0] = *(float64_t *)(a3 + 56);
  __asm { FMLA            D1, D2, V18.D[1] }
  v109.val[0].f64[0] = v109.val[0].f64[0] + v29 * v30;
  a4 = vaddq_f64(a4, v13);
  a6 = vaddq_f64(*(float64x2_t *)v28, v32);
  a8 = vaddq_f64(a10, v38);
  *(float64x2_t *)v28 = a6;
  *(float64_t *)(v28 + 16) = a4.f64[0];
  *(float64x2_t *)(v28 + 24) = a8;
  *(_QWORD *)(v28 + 40) = *(_OWORD *)&vaddq_f64(a9, v14);
  *(float64x2_t *)(v28 + 48) = vaddq_f64(v11, v41);
  *(_QWORD *)(v28 + 64) = *(_OWORD *)&vaddq_f64(a11, v109.val[0]);
  v19 = *(unsigned __int8 *)(a2 + 8);
  v18 = *a1;
LABEL_16:
  if (!v19)
    goto LABEL_28;
  v21 = *(_DWORD *)(a2 + 12);
LABEL_18:
  v42 = *(unint64_t **)(v18 + 32);
  v43 = v42[11] + 24 * v21;
  v45 = *(char **)v43;
  v44 = *(char **)(v43 + 8);
  if (*(char **)v43 != v44)
  {
    while (*(_DWORD *)v45 < v21)
    {
      v45 += 16;
      if (v45 == v44)
        goto LABEL_26;
    }
  }
  if (v45 == v44)
    goto LABEL_26;
  if (*(_DWORD *)v45 != v21)
  {
    v44 = v45;
LABEL_26:
    v46 = sub_239C23138(v42, (char **)v43, v21, v44);
    goto LABEL_27;
  }
  v46 = v42[2] + 8 * *((_QWORD *)v45 + 1);
LABEL_27:
  a4.f64[0] = *(float64_t *)(v46 + 16);
  a6.f64[0] = *(float64_t *)(v46 + 40);
  a8.f64[0] = *(float64_t *)(v46 + 64);
  _Q7 = *(float64x2_t *)(a3 + 72);
  _Q17 = *(float64x2_t *)(a3 + 96);
  _Q18.f64[0] = *(float64_t *)(a3 + 136);
  _Q19 = *(float64x2_t *)(a3 + 120);
  _Q20 = (float64x2_t)vzip1q_s64((int64x2_t)_Q7, (int64x2_t)_Q17);
  _Q22 = (float64x2_t)vzip2q_s64((int64x2_t)_Q7, (int64x2_t)_Q17);
  v52.f64[0] = *(float64_t *)(a3 + 88);
  v52.f64[1] = *(float64_t *)(a3 + 112);
  v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q7.f64[0]), _Q22, _Q7, 1), v52, v52.f64[0]);
  _Q7.f64[0] = *(float64_t *)(a3 + 80);
  __asm { FMLA            D24, D7, V19.D[1] }
  a10.f64[0] = _D24 + _Q18.f64[0] * v52.f64[0];
  v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q17.f64[0]), _Q22, _Q17, 1), v52, v52.f64[1]);
  _Q17.f64[0] = *(float64_t *)(a3 + 104);
  __asm { FMLA            D24, D17, V19.D[1] }
  v11.f64[0] = _D24 + _Q18.f64[0] * v52.f64[1];
  v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q19.f64[0]), _Q22, _Q19, 1), v52, _Q18.f64[0]);
  _Q22.f64[0] = *(float64_t *)(a3 + 128);
  __asm { FMLA            D20, D22, V19.D[1] }
  _Q18.f64[0] = _Q20.f64[0] + _Q18.f64[0] * _Q18.f64[0];
  a4 = vaddq_f64(a4, a10);
  v58 = vaddq_f64(*(float64x2_t *)(v46 + 24), v55);
  a6 = vaddq_f64(a6, v11);
  v59 = vaddq_f64(*(float64x2_t *)(v46 + 48), v57);
  a8 = vaddq_f64(a8, _Q18);
  *(float64x2_t *)v46 = vaddq_f64(*(float64x2_t *)v46, v53);
  *(float64_t *)(v46 + 16) = a4.f64[0];
  *(float64x2_t *)(v46 + 24) = v58;
  *(float64_t *)(v46 + 40) = a6.f64[0];
  *(float64x2_t *)(v46 + 48) = v59;
  *(float64_t *)(v46 + 64) = a8.f64[0];
  v18 = *a1;
LABEL_28:
  if (!*(_BYTE *)a2)
    return a4.f64[0];
  v60 = *(_DWORD *)(a2 + 4);
  v61 = *(unint64_t **)(v18 + 32);
  v62 = v61[11] + 24 * v60;
  v64 = *(char **)v62;
  v63 = *(char **)(v62 + 8);
  if (*(char **)v62 != v63)
  {
    while (*(_DWORD *)v64 < v60)
    {
      v64 += 16;
      if (v64 == v63)
        goto LABEL_37;
    }
  }
  if (v64 == v63)
    goto LABEL_37;
  if (*(_DWORD *)v64 != v60)
  {
    v63 = v64;
LABEL_37:
    v65 = sub_239C23138(v61, (char **)v62, v60, v63);
    goto LABEL_38;
  }
  v65 = v61[2] + 8 * *((_QWORD *)v64 + 1);
LABEL_38:
  a4.f64[0] = *(float64_t *)(v65 + 16);
  a6.f64[0] = *(float64_t *)(v65 + 40);
  a8.f64[0] = *(float64_t *)(v65 + 64);
  _Q17 = *(float64x2_t *)(a3 + 24);
  _Q18.f64[0] = *(float64_t *)(a3 + 64);
  _Q19 = *(float64x2_t *)(a3 + 48);
  _Q20 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)_Q17);
  _Q22 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)_Q17);
  v70.f64[0] = *(float64_t *)(a3 + 16);
  v70.f64[1] = *(float64_t *)(a3 + 40);
  v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)a3), _Q22, *(float64x2_t *)a3, 1), v70, v70.f64[0]);
  _D7 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D24, D7, V19.D[1] }
  a10.f64[0] = _D24 + _Q18.f64[0] * v70.f64[0];
  v74 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q17.f64[0]), _Q22, _Q17, 1), v70, v70.f64[1]);
  _Q17.f64[0] = *(float64_t *)(a3 + 32);
  __asm { FMLA            D24, D17, V19.D[1] }
  v11.f64[0] = _D24 + _Q18.f64[0] * v70.f64[1];
  v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, _Q19.f64[0]), _Q22, _Q19, 1), v70, _Q18.f64[0]);
  _Q22.f64[0] = *(float64_t *)(a3 + 56);
  __asm { FMLA            D20, D22, V19.D[1] }
  _Q18.f64[0] = _Q20.f64[0] + _Q18.f64[0] * _Q18.f64[0];
  a4 = vaddq_f64(a4, a10);
  v77 = vaddq_f64(*(float64x2_t *)(v65 + 24), v74);
  v78 = vaddq_f64(a6, v11);
  v79 = vaddq_f64(*(float64x2_t *)(v65 + 48), v76);
  v80 = vaddq_f64(a8, _Q18);
  *(float64x2_t *)v65 = vaddq_f64(*(float64x2_t *)v65, v71);
  *(float64_t *)(v65 + 16) = a4.f64[0];
  *(float64x2_t *)(v65 + 24) = v77;
  *(float64_t *)(v65 + 40) = v78.f64[0];
  *(float64x2_t *)(v65 + 48) = v79;
  *(float64_t *)(v65 + 64) = v80.f64[0];
  if (*(_BYTE *)a2)
  {
    if (*(_BYTE *)(a2 + 8))
    {
      v81 = *(_DWORD *)(a2 + 4);
      v82 = *(_DWORD *)(a2 + 12);
      if (v82 >= v81)
      {
        v83 = *(unint64_t **)(*a1 + 32);
        v84 = v83[11] + 24 * v82;
        v86 = *(char **)v84;
        v85 = *(char **)(v84 + 8);
        if (*(char **)v84 != v85)
        {
          while (*(_DWORD *)v86 < v81)
          {
            v86 += 16;
            if (v86 == v85)
              goto LABEL_49;
          }
        }
        if (v86 != v85)
        {
          if (*(_DWORD *)v86 == v81)
          {
            v87 = v83[2] + 8 * *((_QWORD *)v86 + 1);
LABEL_50:
            a4.f64[0] = *(float64_t *)(v87 + 16);
            v78.f64[0] = *(float64_t *)(v87 + 40);
            v80.f64[0] = *(float64_t *)(v87 + 64);
            v88 = *(float64x2_t *)(v87 + 48);
            v89.f64[0] = *(float64_t *)(a3 + 16);
            v90 = *(int64x2_t *)(a3 + 24);
            v91 = *(double *)(a3 + 64);
            _Q18 = *(float64x2_t *)(a3 + 48);
            v93 = *(double *)(a3 + 88);
            _Q20 = *(float64x2_t *)(a3 + 72);
            v95 = *(double *)(a3 + 112);
            _Q22 = *(float64x2_t *)(a3 + 96);
            v97 = *(double *)(a3 + 136);
            v98 = *(float64x2_t *)(a3 + 120);
            v99 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, v90);
            _Q7 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, v90);
            v89.f64[1] = *(float64_t *)(a3 + 40);
            v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q20.f64[0]), _Q7, _Q20, 1), v89, v93);
            _Q16 = vmulq_f64(_Q18, _Q20);
            _Q20.f64[0] = *(float64_t *)(a3 + 80);
            __asm { FMLA            D16, D20, V18.D[1] }
            _Q16.f64[0] = _Q16.f64[0] + v91 * v93;
            v103 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q22.f64[0]), _Q7, _Q22, 1), v89, v95);
            _Q20 = vmulq_f64(_Q18, _Q22);
            _Q22.f64[0] = *(float64_t *)(a3 + 104);
            __asm { FMLA            D20, D22, V18.D[1] }
            _Q20.f64[0] = _Q20.f64[0] + v91 * v95;
            v105 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, v98.f64[0]), _Q7, v98, 1), v89, v97);
            _Q6 = vmulq_f64(_Q18, v98);
            _Q7.f64[0] = *(float64_t *)(a3 + 128);
            __asm { FMLA            D6, D7, V18.D[1] }
            _Q6.f64[0] = _Q6.f64[0] + v91 * v97;
            *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vaddq_f64(a4, _Q16);
            v107 = vaddq_f64(*(float64x2_t *)(v87 + 24), v103);
            *(float64x2_t *)v87 = vaddq_f64(*(float64x2_t *)v87, v101);
            *(float64_t *)(v87 + 16) = a4.f64[0];
            *(float64x2_t *)(v87 + 24) = v107;
            *(_QWORD *)(v87 + 40) = *(_OWORD *)&vaddq_f64(v78, _Q20);
            *(float64x2_t *)(v87 + 48) = vaddq_f64(v88, v105);
            *(_QWORD *)(v87 + 64) = *(_OWORD *)&vaddq_f64(v80, _Q6);
            return a4.f64[0];
          }
          v85 = v86;
        }
LABEL_49:
        v87 = sub_239C23138(v83, (char **)v84, v81, v85);
        goto LABEL_50;
      }
    }
  }
  return a4.f64[0];
}

float64x2_t **sub_239C24464(float64x2_t **result, float64x2_t *a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  __int128 v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t *v19;
  int64x2_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  float64x2_t *v23;
  float64x2_t *v24;
  int v25;
  int v26;
  float64x2_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  const double *v30;
  double v31;
  float64x2_t v32;
  float64x2_t *v33;
  float64x2_t v34;
  int8x16_t v35;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int8x16_t v59;
  double v60;
  float64x2_t v61;
  int8x16_t v62;
  double v63;
  double v64;
  double v65;
  float64x2_t v66;
  float64x2_t *v67;
  double v68;
  float64x2_t v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  float64x2_t *v86;
  float64x2_t *v87;
  float64x2_t v88;
  float64x2_t v89;
  unint64_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v97;
  double v98;
  float64x2_t v100;
  float64x2_t v102;
  float64x2_t v103;
  int8x16_t v104;
  double v105;
  double v106;
  float64x2_t v108;
  int8x16_t v109;
  int8x16_t v116;
  float64x2_t v117;
  int8x16_t v118;
  double v119;
  double v120;
  float64x2_t v121;
  double v122;
  float64x2_t v123;
  int8x16_t v130;
  float64x2_t v131;
  int8x16_t v132;
  double v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  double v137;
  double v139;
  float64x2_t v140;
  double v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  int8x16_t v146;
  int8x16_t v147;
  double v148;
  float64x2_t v149;
  double v150;
  unint64_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  int8x16_t v155;
  double v156;
  double v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  int v161;
  float64x2_t v162;
  float64x2_t v163;
  float64_t v164;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  float64x2_t v174;
  double v175;
  double v176;
  float64x2_t v177;
  unint64_t v178;
  float64x2_t v179;
  uint64_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64_t v183;
  unint64_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  unint64_t v188;
  unint64_t v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  double v193;
  unint64_t v194;
  float64x2_t v195;
  float64x2_t v196;
  double v197;
  double v198;
  double v199;
  double v200;
  float64x2_t v201;
  float64x2_t v202;
  double v203;
  float64x2_t v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  float64x2_t v211;
  uint64_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  uint64_t v216;
  float64x2_t v217;
  float64x2_t v218;
  uint64_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  uint64_t v226;
  uint64_t v227;
  float64x2_t v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  int8x16_t v235;
  double v236;
  double v237;
  double v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  double v242;
  double v243;
  float64x2_t v244;
  int8x16_t v245;
  int8x16_t v246;
  double v247;
  int8x16_t v248;
  int8x16_t v249;
  double v250;
  double v251;
  int8x16_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  double v258;
  float64x2_t v259;
  double v260;
  float64x2_t v261;
  float64x2_t v262;
  __int128 v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  double v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  double v272;
  double v273;
  float64x2_t v274;
  double v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  _OWORD v279[2];
  float64x2_t v280;
  double v281;
  float64x2_t v282;
  _BYTE v283[32];
  float64x2_t v284;
  double v285;
  float64x2_t v286;
  unint64_t v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _OWORD v292[5];
  float64x2x3_t v293;
  float64x2x3_t v294;

  memset(v292, 0, sizeof(v292));
  v290 = 0u;
  v291 = 0u;
  v288 = 0u;
  v289 = 0u;
  v278 = 0u;
  memset(v279, 0, sizeof(v279));
  v280 = 0u;
  v281 = 0.0;
  v19 = &v282;
  v282 = *(float64x2_t *)((char *)v292 + 8);
  v20.i64[1] = 0;
  v21.f64[1] = 0.0;
  v284 = *(float64x2_t *)((char *)&v292[3] + 8);
  *(_OWORD *)&v283[16] = *(_OWORD *)((char *)&v292[2] + 8);
  *(_OWORD *)v283 = *(_OWORD *)((char *)&v292[1] + 8);
  v285 = 0.0;
  v286 = 0uLL;
  v287 = 0;
  v23 = result[2];
  v22 = result[3];
  v24 = &v278;
  v25 = LOBYTE(v23[1].f64[1]);
  if (LOBYTE(v23[1].f64[1]))
  {
    v26 = LOBYTE(v22[1].f64[1]);
    if (LOBYTE(v22[1].f64[1]))
      goto LABEL_3;
  }
  else
  {
    v24 = 0;
    v20 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v278 = (float64x2_t)v20;
    v279[0] = v20;
    v279[1] = v20;
    v280 = (float64x2_t)v20;
    v281 = 1.79769313e308;
    v26 = LOBYTE(v22[1].f64[1]);
    if (LOBYTE(v22[1].f64[1]))
      goto LABEL_3;
  }
  v19 = 0;
  v20 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v282 = (float64x2_t)v20;
  *(int64x2_t *)v283 = v20;
  *(int64x2_t *)&v283[16] = v20;
  v284 = (float64x2_t)v20;
  v285 = 1.79769313e308;
LABEL_3:
  a11.f64[0] = v23[1].f64[0];
  v27 = *v23;
  v20.i64[0] = *(_QWORD *)&v22[1].f64[0];
  v262 = *v23;
  v265 = (float64x2_t)v20;
  v259 = *v22;
  if (v24)
  {
    *(float64x2_t *)((char *)&v24[1] + 8) = 0u;
    *(float64x2_t *)((char *)&v24[2] + 8) = 0u;
    *(float64x2_t *)((char *)v24 + 8) = 0u;
    v24->f64[0] = 1.0;
    v24[2].f64[0] = 1.0;
    v24[3].f64[1] = 0.0;
    v24[4].f64[0] = 1.0;
  }
  if (v19)
  {
    v19->f64[0] = -1.0;
    v19->f64[1] = 0.0;
    v19[1].f64[0] = 0.0;
    v19[1].f64[1] = 0.0;
    v19[2].f64[0] = -1.0;
    v19[2].f64[1] = 0.0;
    v19[3].f64[0] = 0.0;
    v19[3].f64[1] = 0.0;
    v19[4].f64[0] = -1.0;
  }
  v29 = result[4];
  v28 = result[5];
  v30 = &v29->f64[1];
  v293 = vld3q_f64(v30);
  v31 = v29[4].f64[1];
  v32 = *(float64x2_t *)((char *)v29 + 56);
  v13.f64[0] = v28->f64[0];
  v33 = result[6];
  v14.f64[0] = v33[1].f64[0];
  v34 = *v33;
  if (LOBYTE(v28->f64[1]))
  {
    v21 = (float64x2_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL);
    *(_QWORD *)&a10.f64[0] = v287;
    v12 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v293.val[0], v34.f64[0]), v293.val[1], v21.f64[0]), v293.val[2], v14.f64[0]);
    v21.f64[0] = vmulq_f64(v32, v34).f64[0]
               + *(double *)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).i64 * v21.f64[0]
               + v31 * v14.f64[0];
    v35 = (int8x16_t)vaddq_f64(v12, v286);
    v27 = (float64x2_t)vextq_s8(v35, v35, 8uLL);
    a10 = vaddq_f64(v21, a10);
    v286 = (float64x2_t)v35;
    v287 = *(_QWORD *)&a10.f64[0];
  }
  else
  {
    v286 = 0uLL;
    v287 = 0;
    v35.i64[0] = 0;
    v27.f64[0] = 0.0;
    a10.f64[0] = 0.0;
  }
  v253 = v14;
  v256 = v13;
  v21.f64[0] = 0.0;
  if (v25)
  {
    _V17.D[1] = v278.f64[1];
    _V22.D[1] = *(_QWORD *)&v279[1];
    _V24.D[1] = v280.f64[1];
    LOBYTE(v17.f64[1]) = 0;
    BYTE1(v17.f64[1]) = 0;
    BYTE2(v17.f64[1]) = 0;
    BYTE3(v17.f64[1]) = 0;
    BYTE4(v17.f64[1]) = 0;
    BYTE5(v17.f64[1]) = 0;
    BYTE6(v17.f64[1]) = 0;
    HIBYTE(v17.f64[1]) = 0;
    _D29 = 0;
    __asm { FMLA            D30, D29, V17.D[1] }
    v12.f64[0] = *(double *)v279 + _D30;
    __asm { FMLA            D30, D29, V22.D[1] }
    v13.f64[0] = *((double *)&v279[1] + 1) + _D30;
    v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v280.f64[0]), (float64x2_t)xmmword_239EC6850, v280, 1), (float64x2_t)0, v281);
    __asm { FMLA            D22, D29, V24.D[1] }
    v15.f64[0] = v281 + _D22;
    v16 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v278.f64[0]), (float64x2_t)xmmword_239EC6850, v278, 1), (float64x2_t)0, *(double *)v279), (float64x2_t)0);
    *(_QWORD *)&v47 = *(_OWORD *)&vaddq_f64(v12, (float64x2_t)0);
    v13 = vaddq_f64(v13, (float64x2_t)0);
    v14 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *((double *)v279 + 1)), (float64x2_t)xmmword_239EC6850, *(float64x2_t *)((char *)v279 + 8), 1), (float64x2_t)0, *((double *)&v279[1] + 1)), (float64x2_t)0);
    v12 = vaddq_f64(v18, (float64x2_t)0);
    *(_QWORD *)&v48 = *(_OWORD *)&vaddq_f64(v15, (float64x2_t)0);
    v49 = v14.f64[1];
    *(_QWORD *)&v50 = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    *(_QWORD *)&v51 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
    v270 = v32;
    if (v26)
    {
LABEL_14:
      _V23.D[1] = v282.f64[1];
      _V29.D[1] = *(_QWORD *)&v283[16];
      _V31.D[1] = v284.f64[1];
      BYTE8(v11) = 0;
      BYTE9(v11) = 0;
      BYTE10(v11) = 0;
      BYTE11(v11) = 0;
      BYTE12(v11) = 0;
      BYTE13(v11) = 0;
      BYTE14(v11) = 0;
      HIBYTE(v11) = 0;
      _D10 = 0;
      __asm { FMLA            D15, D10, V23.D[1] }
      v21.f64[0] = *(double *)v283 + _D15;
      __asm { FMLA            D15, D10, V29.D[1] }
      v17.f64[0] = *(double *)&v283[24] + _D15;
      __asm { FMLA            D29, D10, V31.D[1] }
      v18.f64[0] = v285 + _D29;
      v59 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v282.f64[0]), (float64x2_t)xmmword_239EC6850, v282, 1), (float64x2_t)0, *(double *)v283), (float64x2_t)0);
      *(_QWORD *)&v60 = *(_OWORD *)&vaddq_f64(v21, (float64x2_t)0);
      v17 = vaddq_f64(v17, (float64x2_t)0);
      v61 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)&v283[8]), (float64x2_t)xmmword_239EC6850, *(float64x2_t *)&v283[8], 1), (float64x2_t)0, *(double *)&v283[24]), (float64x2_t)0);
      v62 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v284.f64[0]), (float64x2_t)xmmword_239EC6850, v284, 1), (float64x2_t)0, v285), (float64x2_t)0);
      v21 = vaddq_f64(v18, (float64x2_t)0);
      v63 = v61.f64[1];
      *(_QWORD *)&v64 = vextq_s8(v62, v62, 8uLL).u64[0];
      *(_QWORD *)&v65 = vextq_s8(v59, v59, 8uLL).u64[0];
      goto LABEL_17;
    }
  }
  else
  {
    v16.f64[0] = 0.0;
    v51 = 0.0;
    v47 = 0.0;
    v14.f64[0] = 0.0;
    v49 = 0.0;
    v13.f64[0] = 0.0;
    v12.f64[0] = 0.0;
    v50 = 0.0;
    v48 = 0.0;
    v270 = v32;
    if (v26)
      goto LABEL_14;
  }
  v59.i64[0] = 0;
  v65 = 0.0;
  v60 = 0.0;
  v61.f64[0] = 0.0;
  v63 = 0.0;
  v17.f64[0] = 0.0;
  v62.i64[0] = 0;
  v64 = 0.0;
LABEL_17:
  v268 = 0.0;
  v273 = v31;
  if (LOBYTE(v28->f64[1]))
  {
    BYTE8(v11) = 0;
    BYTE9(v11) = 0;
    BYTE10(v11) = 0;
    BYTE11(v11) = 0;
    BYTE12(v11) = 0;
    BYTE13(v11) = 0;
    BYTE14(v11) = 0;
    HIBYTE(v11) = 0;
    v66 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)v35.i64), (float64x2_t)xmmword_239EC6850, v27.f64[0]), (float64x2_t)0, a10.f64[0]);
    a10.f64[0] = a10.f64[0] + *(double *)v35.i64 * 0.0 + v27.f64[0] * 0.0;
    v27 = vaddq_f64(v66, (float64x2_t)0);
    *(_QWORD *)&v251 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
    *(_QWORD *)&a10.f64[0] = *(_OWORD *)&vaddq_f64(a10, (float64x2_t)0);
  }
  else
  {
    v27.f64[0] = 0.0;
    v251 = 0.0;
    a10.f64[0] = 0.0;
  }
  v67 = result[1];
  v68 = v67[1].f64[1];
  v69 = *(float64x2_t *)((char *)v67 + 8);
  v70 = v67[3].f64[0];
  v71 = v67[2];
  *(float64_t *)&v11 = v67[4].f64[1];
  v72 = *(float64x2_t *)((char *)v67 + 56);
  v276 = v69;
  if (v25)
  {
    v73 = v21;
    v74 = a11;
    v75 = *(float64x2_t *)((char *)v67 + 8);
    v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v69, v16.f64[0]), v71, v51), v72, v47);
    v16.f64[0] = v68 * v16.f64[0] + v70 * v51 + *(double *)&v11 * v47;
    v76 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v75, v14.f64[0]), v71, v49), v72, v13.f64[0]);
    v13.f64[0] = v68 * v14.f64[0] + v70 * v49 + *(double *)&v11 * v13.f64[0];
    v77 = vmulq_n_f64(v75, v12.f64[0]);
    a11 = v74;
    v21 = v73;
    v14 = vmlaq_n_f64(vmlaq_n_f64(v77, v71, v50), v72, v48);
    v12.f64[0] = v68 * v12.f64[0] + v70 * v50 + *(double *)&v11 * v48;
    v235 = (int8x16_t)vaddq_f64(v69, (float64x2_t)0);
    *(_QWORD *)&v234 = vextq_s8(v235, v235, 8uLL).u64[0];
    *(_QWORD *)&v233 = *(_OWORD *)&vaddq_f64(v16, (float64x2_t)0);
    v241 = (int8x16_t)vaddq_f64(v76, (float64x2_t)0);
    v239 = vextq_s8(v241, v241, 8uLL);
    *(_QWORD *)&v237 = *(_OWORD *)&vaddq_f64(v13, (float64x2_t)0);
    v246 = (int8x16_t)vaddq_f64(v14, (float64x2_t)0);
    v13 = (float64x2_t)vextq_s8(v246, v246, 8uLL);
    v244 = v13;
    v12 = vaddq_f64(v12, (float64x2_t)0);
    v268 = v12.f64[0];
  }
  else
  {
    v12.f64[0] = 0.0;
    v246 = (int8x16_t)v12;
    v12.f64[0] = 0.0;
    v244 = v12;
    v241.i64[0] = 0;
    v12.f64[0] = 0.0;
    v239 = (int8x16_t)v12;
    v237 = 0.0;
    v12.f64[0] = 0.0;
    v235 = (int8x16_t)v12;
    v234 = 0.0;
    v233 = 0.0;
  }
  v78.f64[1] = v256.f64[1];
  v79 = vmulq_n_f64(v34, v256.f64[0]);
  v16.f64[0] = 0.0;
  if (v26)
  {
    v80 = *(float64x2_t *)((char *)v67 + 8);
    v12.f64[0] = v68 * *(double *)v59.i64 + v70 * v65 + *(double *)&v11 * v60;
    v13.f64[0] = v68 * v61.f64[0] + v70 * v63 + *(double *)&v11 * v17.f64[0];
    v14 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v276, *(double *)v62.i64), v71, v64), v72, v21.f64[0]);
    v21.f64[0] = v68 * *(double *)v62.i64 + v70 * v64 + *(double *)&v11 * v21.f64[0];
    v240 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v276, *(double *)v59.i64), v71, v65), v72, v60), (float64x2_t)0);
    *(_QWORD *)&v238 = vextq_s8(v240, v240, 8uLL).u64[0];
    *(_QWORD *)&v236 = *(_OWORD *)&vaddq_f64(v12, (float64x2_t)0);
    v245 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v276, v61.f64[0]), v71, v63), v72, v17.f64[0]), (float64x2_t)0);
    *(_QWORD *)&v242 = *(_OWORD *)&vaddq_f64(v13, (float64x2_t)0);
    *(_QWORD *)&v243 = vextq_s8(v245, v245, 8uLL).u64[0];
    v249 = (int8x16_t)vaddq_f64(v14, (float64x2_t)0);
    *(_QWORD *)&v247 = *(_OWORD *)&vaddq_f64(v21, (float64x2_t)0);
    v248 = vextq_s8(v249, v249, 8uLL);
  }
  else
  {
    v249.i64[0] = 0;
    v34.f64[0] = 0.0;
    v248 = (int8x16_t)v34;
    v247 = 0.0;
    v245.i64[0] = 0;
    v243 = 0.0;
    v242 = 0.0;
    v240.i64[0] = 0;
    v238 = 0.0;
    v236 = 0.0;
    v80 = *(float64x2_t *)((char *)v67 + 8);
  }
  _Q31.f64[1] = v270.f64[1];
  v82 = vmulq_n_f64(v293.val[0], v79.f64[0]);
  v255 = v67[2];
  if (LOBYTE(v28->f64[1]))
  {
    v83 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v80, v27.f64[0]), v71, v251), v72, a10.f64[0]);
    v27.f64[0] = v68 * v27.f64[0] + v70 * v251 + *(double *)&v11 * a10.f64[0];
    v252 = (int8x16_t)vaddq_f64(v83, (float64x2_t)0);
    *(_QWORD *)&v250 = vextq_s8(v252, v252, 8uLL).u64[0];
    v16 = vaddq_f64(v27, (float64x2_t)0);
  }
  else
  {
    v252.i64[0] = 0;
    v250 = 0.0;
  }
  *(_QWORD *)&v84 = *(_OWORD *)&vmulq_f64(v256, v253);
  v85 = vmlaq_laneq_f64(v82, v293.val[1], v79, 1);
  memset(v292, 0, sizeof(v292));
  v290 = 0u;
  v291 = 0u;
  v288 = 0u;
  v289 = 0u;
  v278 = 0u;
  memset(v279, 0, sizeof(v279));
  v280 = 0u;
  v281 = 0.0;
  v86 = &v282;
  v282 = *(float64x2_t *)((char *)v292 + 8);
  v284 = *(float64x2_t *)((char *)&v292[3] + 8);
  *(_OWORD *)&v283[16] = *(_OWORD *)((char *)&v292[2] + 8);
  *(_OWORD *)v283 = *(_OWORD *)((char *)&v292[1] + 8);
  v285 = 0.0;
  v286 = 0uLL;
  v87 = &v278;
  v287 = 0;
  if (!v25)
  {
    v87 = 0;
    v278 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v279[0] = v278;
    v279[1] = v278;
    v280 = v278;
    v281 = 1.79769313e308;
  }
  v88 = vsubq_f64(v262, v259);
  v89 = vmlaq_n_f64(v85, v293.val[2], v84);
  if (!v26)
  {
    v86 = 0;
    v282 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    *(float64x2_t *)v283 = v282;
    *(float64x2_t *)&v283[16] = v282;
    v284 = v282;
    v285 = 1.79769313e308;
  }
  v257 = v72;
  v90 = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
  v91 = (float64x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL);
  if (v87)
  {
    *(float64x2_t *)((char *)&v87[1] + 8) = 0u;
    *(float64x2_t *)((char *)&v87[2] + 8) = 0u;
    *(float64x2_t *)((char *)v87 + 8) = 0u;
    v87->f64[0] = 1.0;
    v87[2].f64[0] = 1.0;
    v87[3].f64[1] = 0.0;
    v87[4].f64[0] = 1.0;
  }
  v254 = v16;
  v92 = vmulq_f64(v270, v79);
  v93.f64[1] = v265.f64[1];
  v94 = vsubq_f64(a11, v265);
  if (v86)
  {
    v86->f64[0] = -1.0;
    v86->f64[1] = 0.0;
    v86[1].f64[0] = 0.0;
    v86[1].f64[1] = 0.0;
    v86[2].f64[0] = -1.0;
    v86[2].f64[1] = 0.0;
    v86[3].f64[0] = 0.0;
    v86[3].f64[1] = 0.0;
    v86[4].f64[0] = -1.0;
  }
  v260 = v70;
  v263 = v11;
  v294 = vld3q_f64(v30);
  _D6 = v79.f64[1];
  v293.val[0].f64[0] = v29[4].f64[1];
  _Q24 = *(float64x2_t *)((char *)v29 + 56);
  v93.f64[0] = v28->f64[0];
  v14.f64[0] = v33[1].f64[0];
  v97 = *v33;
  *(_QWORD *)&v98 = *(_OWORD *)&vmulq_f64(v93, v14);
  _Q26 = vmulq_n_f64(*v33, v28->f64[0]);
  v100 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v294.val[0], _Q26.f64[0]), v294.val[1], _Q26, 1), v294.val[2], v98);
  _Q1 = vmulq_f64(_Q24, _Q26);
  _Q26.f64[0] = _Q26.f64[1];
  __asm { FMLA            D1, D26, V24.D[1] }
  _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v293.val[0].f64[0], v98);
  v102 = (float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL);
  if (LOBYTE(v28->f64[1]))
  {
    v78 = (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL);
    *(_QWORD *)&v17.f64[0] = v287;
    v103 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v294.val[0], v97.f64[0]), v294.val[1], v78.f64[0]), v294.val[2], v14.f64[0]);
    v294.val[0] = vmulq_f64(_Q24, v97);
    v293.val[0].f64[0] = v294.val[0].f64[0]
                       + *(double *)vextq_s8((int8x16_t)_Q24, (int8x16_t)_Q24, 8uLL).i64 * v78.f64[0]
                       + v293.val[0].f64[0] * v14.f64[0];
    v104 = (int8x16_t)vaddq_f64(v103, v286);
    *(_QWORD *)&v105 = vextq_s8(v104, v104, 8uLL).u64[0];
    *(_QWORD *)&v106 = *(_OWORD *)&vaddq_f64(v293.val[0], v17);
    v286 = (float64x2_t)v104;
    v287 = *(_QWORD *)&v106;
  }
  else
  {
    v286 = 0uLL;
    v287 = 0;
    v104.i64[0] = 0;
    v105 = 0.0;
    v106 = 0.0;
  }
  __asm { FMLA            D3, D6, V31.D[1] }
  v89.f64[1] = v91.f64[0];
  v108.f64[0] = v88.f64[0];
  *(_QWORD *)&v108.f64[1] = v90;
  v100.f64[1] = v102.f64[0];
  *(_QWORD *)&v88.f64[1] = v90;
  v109 = (int8x16_t)vaddq_f64(v88, v100);
  if (v25)
  {
    _Q2.f64[1] = v278.f64[1];
    _V16.D[1] = *(_QWORD *)&v279[1];
    v293.val[0].f64[1] = v280.f64[1];
    v294.val[2].f64[1] = 1.0;
    LOBYTE(v14.f64[1]) = 0;
    BYTE1(v14.f64[1]) = 0;
    BYTE2(v14.f64[1]) = 0;
    BYTE3(v14.f64[1]) = 0;
    BYTE4(v14.f64[1]) = 0;
    BYTE5(v14.f64[1]) = 0;
    BYTE6(v14.f64[1]) = 0;
    HIBYTE(v14.f64[1]) = 0;
    _D24 = 0;
    __asm { FMLA            D25, D24, V2.D[1] }
    _Q2.f64[0] = *(double *)v279 + _D25;
    v97 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *((double *)v279 + 1)), (float64x2_t)xmmword_239EC6850, *(float64x2_t *)((char *)v279 + 8), 1), (float64x2_t)0, *((double *)&v279[1] + 1));
    __asm { FMLA            D0, D24, V16.D[1] }
    v91.f64[0] = *((double *)&v279[1] + 1) + _D0;
    v294.val[0] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v280.f64[0]), (float64x2_t)xmmword_239EC6850, v280, 1), (float64x2_t)0, v281);
    __asm { FMLA            D0, D24, V18.D[1] }
    v102.f64[0] = v281 + _D0;
    v116 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v278.f64[0]), (float64x2_t)xmmword_239EC6850, v278, 1), (float64x2_t)0, *(double *)v279), (float64x2_t)0);
    v100 = vaddq_f64(_Q2, (float64x2_t)0);
    v78 = vaddq_f64(v91, (float64x2_t)0);
    v117 = vaddq_f64(v97, (float64x2_t)0);
    v118 = (int8x16_t)vaddq_f64(v294.val[0], (float64x2_t)0);
    *(_QWORD *)&v119 = *(_OWORD *)&vaddq_f64(v102, (float64x2_t)0);
    v120 = v117.f64[1];
    v91 = (float64x2_t)vextq_s8(v118, v118, 8uLL);
    _Q31 = (float64x2_t)vextq_s8(v116, v116, 8uLL);
  }
  else
  {
    v116.i64[0] = 0;
    _Q31.f64[0] = 0.0;
    v100.f64[0] = 0.0;
    v117.f64[0] = 0.0;
    v120 = 0.0;
    v78.f64[0] = 0.0;
    v118.i64[0] = 0;
    v91.f64[0] = 0.0;
    v119 = 0.0;
  }
  v92.f64[0] = vmlad_n_f64(_D3, v273, v84);
  v121 = vaddq_f64(v108, v89);
  *(_QWORD *)&v122 = vextq_s8(v109, v109, 8uLL).u64[0];
  v123 = vaddq_f64(v94, _Q1);
  v271 = v123;
  if (v26)
  {
    _V2.D[1] = v282.f64[1];
    _V17.D[1] = *(_QWORD *)&v283[16];
    v294.val[0].f64[1] = v284.f64[1];
    v14.f64[1] = 1.0;
    _D25 = 0;
    __asm { FMLA            D28, D25, V2.D[1] }
    v123.f64[0] = *(double *)v283 + _D28;
    __asm { FMLA            D28, D25, V17.D[1] }
    v108.f64[0] = *(double *)&v283[24] + _D28;
    __asm { FMLA            D17, D25, V19.D[1] }
    v293.val[0].f64[0] = v285 + _D17;
    v17 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v282.f64[0]), (float64x2_t)xmmword_239EC6850, v282, 1), (float64x2_t)0, *(double *)v283), (float64x2_t)0);
    v97 = vaddq_f64(v123, (float64x2_t)0);
    v102 = vaddq_f64(v108, (float64x2_t)0);
    v294.val[2] = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)&v283[8]), (float64x2_t)xmmword_239EC6850, *(float64x2_t *)&v283[8], 1), (float64x2_t)0, *(double *)&v283[24]), (float64x2_t)0);
    v130 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v284.f64[0]), (float64x2_t)xmmword_239EC6850, v284, 1), (float64x2_t)0, v285), (float64x2_t)0);
    *(_QWORD *)&v232 = *(_OWORD *)&vaddq_f64(v293.val[0], (float64x2_t)0);
    v14.f64[0] = v294.val[2].f64[1];
    v108 = (float64x2_t)vextq_s8(v130, v130, 8uLL);
    v69 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
  }
  else
  {
    v232 = 0.0;
    v17.f64[0] = 0.0;
    v69.f64[0] = 0.0;
    v97.f64[0] = 0.0;
    v294.val[2].f64[0] = 0.0;
    v14.f64[0] = 0.0;
    v102.f64[0] = 0.0;
    v130.i64[0] = 0;
    v108.f64[0] = 0.0;
  }
  v131 = (float64x2_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL);
  v274 = v131;
  v131.f64[0] = 0.0;
  v266 = v131;
  v258 = v68;
  if (LOBYTE(v28->f64[1]))
  {
    v294.val[0].f64[0] = v106 + *(double *)v104.i64 * 0.0 + v105 * 0.0;
    v132 = (int8x16_t)vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)v104.i64), (float64x2_t)xmmword_239EC6850, v105), (float64x2_t)0, v106), (float64x2_t)0);
    *(_QWORD *)&v133 = vextq_s8(v132, v132, 8uLL).u64[0];
    v131 = vaddq_f64(v294.val[0], (float64x2_t)0);
  }
  else
  {
    v132.i64[0] = 0;
    v133 = 0.0;
    v131.f64[0] = 0.0;
  }
  v134 = vaddq_f64(v94, v92);
  v135 = v67[1].f64[1];
  v136 = *(float64x2_t *)((char *)v67 + 8);
  v137 = v67[3].f64[0];
  _Q19 = v67[2];
  v139 = v67[4].f64[1];
  v140 = *(float64x2_t *)((char *)v67 + 56);
  _Q13 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v109.i64), _Q19, v122), v140, v271.f64[0]);
  v142 = v135 * *(double *)v109.i64;
  if (v25)
  {
    v143 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v116.i64), _Q19, _Q31.f64[0]), v140, v100.f64[0]);
    v100.f64[0] = v135 * *(double *)v116.i64 + v137 * _Q31.f64[0] + v139 * v100.f64[0];
    v144 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, v117.f64[0]), _Q19, v120), v140, v78.f64[0]);
    v78.f64[0] = v135 * v117.f64[0] + v137 * v120 + v139 * v78.f64[0];
    v145 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v118.i64), _Q19, v91.f64[0]), v140, v119);
    v91.f64[0] = v135 * *(double *)v118.i64 + v137 * v91.f64[0] + v139 * v119;
    v146 = (int8x16_t)vaddq_f64(v143, (float64x2_t)0);
    *(_QWORD *)&v231 = *(_OWORD *)&vaddq_f64(v100, (float64x2_t)0);
    v100 = vaddq_f64(v144, (float64x2_t)0);
    *(_QWORD *)&v230 = *(_OWORD *)&vaddq_f64(v78, (float64x2_t)0);
    v147 = (int8x16_t)vaddq_f64(v145, (float64x2_t)0);
    v266 = vaddq_f64(v91, (float64x2_t)0);
    v229 = v100.f64[1];
    *(_QWORD *)&v148 = vextq_s8(v146, v146, 8uLL).u64[0];
    _Q31 = (float64x2_t)vextq_s8(v147, v147, 8uLL);
  }
  else
  {
    v146.i64[0] = 0;
    v148 = 0.0;
    v231 = 0.0;
    v100.f64[0] = 0.0;
    v229 = 0.0;
    v230 = 0.0;
    v147.i64[0] = 0;
    _Q31.f64[0] = 0.0;
  }
  v149 = vmulq_n_f64(v276, v121.f64[0]);
  v150 = v142 + v137 * v122;
  v151 = vextq_s8((int8x16_t)_Q13, (int8x16_t)_Q13, 8uLL).u64[0];
  v152 = 0.0;
  if (v26)
  {
    v153 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, v17.f64[0]), _Q19, v69.f64[0]), v140, v97.f64[0]);
    v97.f64[0] = v135 * v17.f64[0] + v137 * v69.f64[0] + v139 * v97.f64[0];
    v17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, v294.val[2].f64[0]), _Q19, v14.f64[0]), v140, v102.f64[0]);
    v294.val[2].f64[0] = v135 * v294.val[2].f64[0] + v137 * v14.f64[0] + v139 * v102.f64[0];
    v154 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v130.i64), _Q19, v108.f64[0]), v140, v232);
    v69.f64[0] = v135 * *(double *)v130.i64 + v137 * v108.f64[0] + v139 * v232;
    v155 = (int8x16_t)vaddq_f64(v153, (float64x2_t)0);
    v108 = vaddq_f64(v97, (float64x2_t)0);
    v102 = vaddq_f64(v17, (float64x2_t)0);
    *(_QWORD *)&v294.val[2].f64[0] = *(_OWORD *)&vaddq_f64(v294.val[2], (float64x2_t)0);
    v14 = vaddq_f64(v154, (float64x2_t)0);
    v97 = vaddq_f64(v69, (float64x2_t)0);
    v17.f64[0] = v102.f64[1];
    *(_QWORD *)&v156 = vextq_s8(v155, v155, 8uLL).u64[0];
    *(_QWORD *)&v157 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  }
  else
  {
    v155.i64[0] = 0;
    v156 = 0.0;
    v108.f64[0] = 0.0;
    v102.f64[0] = 0.0;
    v17.f64[0] = 0.0;
    v294.val[2].f64[0] = 0.0;
    v14.f64[0] = 0.0;
    v157 = 0.0;
    v97.f64[0] = 0.0;
  }
  v158.f64[1] = v274.f64[1];
  v159 = vmlaq_n_f64(v149, v255, v274.f64[0]);
  v160.f64[1] = v271.f64[1];
  v160.f64[0] = v150 + v139 * v271.f64[0];
  v161 = LOBYTE(v28->f64[1]);
  if (v161)
  {
    v162 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v136, *(double *)v132.i64), _Q19, v133), v140, v131.f64[0]);
    _Q19.f64[0] = v135 * *(double *)v132.i64 + v137 * v133 + v139 * v131.f64[0];
    v131 = vaddq_f64(v162, (float64x2_t)0);
    v140 = (float64x2_t)vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL);
    *(_QWORD *)&v152 = *(_OWORD *)&vaddq_f64(_Q19, (float64x2_t)0);
  }
  else
  {
    v131.f64[0] = 0.0;
    v140.f64[0] = 0.0;
  }
  v163 = vmlaq_n_f64(v159, v257, v134.f64[0]);
  v164 = _Q13.f64[0];
  *(_QWORD *)&v167.f64[1] = v151;
  _Q4 = vmulq_f64(v167, v167);
  _Q19.f64[0] = _Q13.f64[1];
  __asm { FMLA            D4, D19, V13.D[1] }
  _Q4.f64[0] = sqrt(_Q4.f64[0] + v160.f64[0] * v160.f64[0]);
  _Q19.f64[0] = 1.0 / _Q4.f64[0];
  v166 = vmulq_f64(v167, _Q19);
  v167.f64[0] = vmuld_lane_f64(1.0 / _Q4.f64[0], _Q13, 1);
  v168 = v160.f64[0] * (1.0 / _Q4.f64[0]);
  v169 = 0.0;
  v170 = 0.0;
  v171 = 0.0;
  v172 = 0.0;
  if (v25)
  {
    v160.f64[1] = v266.f64[1];
    v172 = v166.f64[0] * *(double *)v146.i64 + v167.f64[0] * v148 + v168 * v231 + 0.0;
    v171 = v166.f64[0] * v100.f64[0] + v167.f64[0] * v229 + v168 * v230 + 0.0;
    v170 = v166.f64[0] * *(double *)v147.i64 + v167.f64[0] * _Q31.f64[0] + v168 * v266.f64[0] + 0.0;
  }
  v173 = v258 * v121.f64[0];
  v174 = (float64x2_t)vextq_s8((int8x16_t)v163, (int8x16_t)v163, 8uLL);
  v175 = 0.0;
  v176 = 0.0;
  if (v26)
  {
    v176 = v166.f64[0] * *(double *)v155.i64 + v167.f64[0] * v156 + v168 * v108.f64[0] + 0.0;
    v175 = v166.f64[0] * v102.f64[0] + v167.f64[0] * v17.f64[0] + v168 * v294.val[2].f64[0] + 0.0;
    v169 = v166.f64[0] * v14.f64[0] + v167.f64[0] * v157 + v168 * v97.f64[0] + 0.0;
  }
  v177.f64[1] = v274.f64[1];
  if (v161)
  {
    v131 = vmulq_f64(v166, v131);
    v131.f64[0] = v131.f64[0] + v167.f64[0] * v140.f64[0] + v168 * v152 + 0.0;
  }
  else
  {
    v131.f64[0] = 0.0;
  }
  v277 = v131;
  v131.f64[1] = *((float64_t *)&v263 + 1);
  v97.f64[0] = v173 + v260 * v274.f64[0] + *(double *)&v263 * v134.f64[0];
  v163.f64[1] = v174.f64[0];
  v174.f64[0] = 0.0;
  v14.f64[0] = -1.0 / (_Q4.f64[0] * _Q4.f64[0]);
  if (v25)
  {
    *(double *)&v178 = 1.0 / _Q4.f64[0];
    *(_QWORD *)&v179.f64[1] = v235.i64[1];
    v180 = 0;
    _Q4.f64[1] = _Q19.f64[0];
    v181 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v178, *(double *)v235.i64), _Q4, v234), (float64x2_t)0, v233);
    v179.f64[0] = *(double *)v235.i64 * 0.0 + v234 * 0.0 + _Q19.f64[0] * v233;
    *(_QWORD *)&v102.f64[1] = v239.i64[1];
    v100 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v178, *(double *)v241.i64), _Q4, *(double *)v239.i64), (float64x2_t)0, v237);
    v102.f64[0] = *(double *)v241.i64 * 0.0 + *(double *)v239.i64 * 0.0 + _Q19.f64[0] * v237;
    *(_QWORD *)&v140.f64[1] = v246.i64[1];
    v167.f64[1] = v244.f64[1];
    v182 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v178, *(double *)v246.i64), _Q4, v244.f64[0]), (float64x2_t)0, v268);
    _Q4.f64[0] = *(double *)v246.i64 * 0.0 + v244.f64[0] * 0.0 + _Q19.f64[0] * v268;
    v134 = vaddq_f64(v181, (float64x2_t)0);
    _Q31 = vaddq_f64(v179, (float64x2_t)0);
    v108 = vaddq_f64(v100, (float64x2_t)0);
    v136 = vaddq_f64(v102, (float64x2_t)0);
    v177 = vaddq_f64(v182, (float64x2_t)0);
    v131 = vaddq_f64(_Q4, (float64x2_t)0);
    v269 = v131;
    v183 = v108.f64[1];
    v184 = vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u64[0];
    v121 = (float64x2_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL);
  }
  else
  {
    v134.f64[0] = 0.0;
    v121.f64[0] = 0.0;
    _Q31.f64[0] = 0.0;
    v108.f64[0] = 0.0;
    v183 = 0.0;
    v136.f64[0] = 0.0;
    v177.f64[0] = 0.0;
    v184 = 0;
    v131.f64[0] = 0.0;
    v269 = v131;
  }
  v272 = v176;
  v275 = v175;
  v185 = vmulq_n_f64(v163, v14.f64[0]);
  v102.f64[0] = 0.0;
  if (v26)
  {
    v102.f64[1] = _Q19.f64[0];
    v140.f64[1] = 0.0;
    v160.f64[0] = *(double *)v240.i64 * 0.0 + v238 * 0.0 + _Q19.f64[0] * v236;
    v186 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q19.f64[0], *(double *)v245.i64), v102, v243), (float64x2_t)0, v242);
    v17.f64[0] = *(double *)v245.i64 * 0.0 + v243 * 0.0 + _Q19.f64[0] * v242;
    *(_QWORD *)&v158.f64[1] = v248.i64[1];
    v187 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q19.f64[0], *(double *)v249.i64), v102, *(double *)v248.i64), (float64x2_t)0, v247);
    v167.f64[0] = *(double *)v249.i64 * 0.0 + *(double *)v248.i64 * 0.0 + _Q19.f64[0] * v247;
    v102 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q19.f64[0], *(double *)v240.i64), v102, v238), (float64x2_t)0, v236), (float64x2_t)0);
    v267 = vaddq_f64(v160, (float64x2_t)0);
    v100 = vaddq_f64(v186, (float64x2_t)0);
    v264 = vaddq_f64(v17, (float64x2_t)0);
    _Q4 = vaddq_f64(v187, (float64x2_t)0);
    v261 = vaddq_f64(v167, (float64x2_t)0);
    v140.f64[0] = v100.f64[1];
    v188 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
    v189 = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
  }
  else
  {
    v189 = 0;
    v131.f64[0] = 0.0;
    v267 = v131;
    v100.f64[0] = 0.0;
    v140.f64[0] = 0.0;
    v131.f64[0] = 0.0;
    v264 = v131;
    _Q4.f64[0] = 0.0;
    v188 = 0;
    v131.f64[0] = 0.0;
    v261 = v131;
  }
  v190 = v169;
  v191 = vmulq_f64(v97, v14);
  v192 = (float64x2_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL);
  v193 = 0.0;
  if (v161)
  {
    v174.f64[1] = _Q19.f64[0];
    v158.f64[1] = v254.f64[1];
    v158.f64[0] = *(double *)v252.i64 * 0.0 + v250 * 0.0 + _Q19.f64[0] * v254.f64[0];
    v174 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&_Q19.f64[0], *(double *)v252.i64), v174, v250), (float64x2_t)0, v254.f64[0]), (float64x2_t)0);
    v194 = vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL).u64[0];
    _Q13 = vaddq_f64(v158, (float64x2_t)0);
    v195 = vmulq_n_f64(v163, _Q19.f64[0]);
    if (v25)
    {
LABEL_73:
      v196.f64[0] = v185.f64[0];
      v196.f64[1] = v192.f64[0];
      v163.f64[0] = v191.f64[0] * v172;
      v158.f64[0] = v191.f64[0] * v171;
      v134.f64[1] = v121.f64[0];
      v108.f64[1] = v183;
      v121.f64[0] = v191.f64[0] * v170;
      *(_QWORD *)&v177.f64[1] = v184;
      v134 = vmlaq_n_f64(v134, v196, v172);
      *(_QWORD *)&v197 = *(_OWORD *)&vaddq_f64(_Q31, v163);
      v108 = vmlaq_n_f64(v108, v196, v171);
      v163 = vaddq_f64(v136, v158);
      v177 = vmlaq_n_f64(v177, v196, v170);
      *(_QWORD *)&v193 = *(_OWORD *)&vaddq_f64(v269, v121);
      v198 = v108.f64[1];
      *(_QWORD *)&v199 = vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL).u64[0];
      *(_QWORD *)&v200 = vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u64[0];
      goto LABEL_76;
    }
  }
  else
  {
    v174.f64[0] = 0.0;
    v194 = 0;
    _Q13.f64[0] = 0.0;
    v195 = vmulq_n_f64(v163, _Q19.f64[0]);
    if (v25)
      goto LABEL_73;
  }
  v134.f64[0] = 0.0;
  v199 = 0.0;
  v197 = 0.0;
  v108.f64[0] = 0.0;
  v198 = 0.0;
  v163.f64[0] = 0.0;
  v177.f64[0] = 0.0;
  v200 = 0.0;
LABEL_76:
  v201 = vmulq_f64(v97, _Q19);
  v202 = (float64x2_t)vextq_s8((int8x16_t)v195, (int8x16_t)v195, 8uLL);
  v203 = 0.0;
  if (v26)
  {
    v204.f64[0] = v185.f64[0];
    v204.f64[1] = v192.f64[0];
    _Q19.f64[0] = v191.f64[0] * v272;
    _Q31.f64[0] = v191.f64[0] * v275;
    *(_QWORD *)&v102.f64[1] = v189;
    v100.f64[1] = v140.f64[0];
    v140.f64[0] = v191.f64[0] * v190;
    *(_QWORD *)&_Q4.f64[1] = v188;
    v102 = vmlaq_n_f64(v102, v204, v272);
    *(_QWORD *)&v205 = *(_OWORD *)&vaddq_f64(v267, _Q19);
    v100 = vmlaq_n_f64(v100, v204, v275);
    *(_QWORD *)&v206 = *(_OWORD *)&vaddq_f64(v264, _Q31);
    _Q4 = vmlaq_n_f64(_Q4, v204, v190);
    *(_QWORD *)&v140.f64[0] = *(_OWORD *)&vaddq_f64(v261, v140);
    v207 = v100.f64[1];
    *(_QWORD *)&v208 = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
    *(_QWORD *)&v209 = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
    if (v161)
    {
LABEL_78:
      v185.f64[1] = v192.f64[0];
      *(_QWORD *)&v174.f64[1] = v194;
      v174 = vmlaq_n_f64(v174, v185, v277.f64[0]);
      *(_QWORD *)&v210 = vextq_s8((int8x16_t)v174, (int8x16_t)v174, 8uLL).u64[0];
      *(_QWORD *)&v203 = *(_OWORD *)&vmlaq_f64(_Q13, v277, v191);
      goto LABEL_81;
    }
  }
  else
  {
    v102.f64[0] = 0.0;
    v208 = 0.0;
    v205 = 0.0;
    v100.f64[0] = 0.0;
    v207 = 0.0;
    v206 = 0.0;
    _Q4.f64[0] = 0.0;
    v209 = 0.0;
    v140.f64[0] = 0.0;
    if (v161)
      goto LABEL_78;
  }
  v174.f64[0] = 0.0;
  v210 = 0.0;
LABEL_81:
  v185.f64[0] = (*result)[1].f64[0];
  v211 = vsubq_f64(v185, v201);
  v195.f64[1] = v202.f64[0];
  *a2 = vsubq_f64(**result, v195);
  a2[1].f64[0] = v211.f64[0];
  v212 = *a3;
  if (LOBYTE(result[2][1].f64[1]))
  {
    v211.f64[0] = *(float64_t *)(v212 + 16);
    v192.f64[0] = *(float64_t *)(v212 + 40);
    v202.f64[0] = *(float64_t *)(v212 + 64);
    v213 = *(float64x2_t *)(v212 + 48);
    v214 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v134.f64[0]), (float64x2_t)xmmword_239EC68E0, v199), (float64x2_t)0, v197);
    v134.f64[0] = v134.f64[0] * 0.0 + v199 * 0.0 - v197;
    v215 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v108.f64[0]), (float64x2_t)xmmword_239EC68E0, v198), (float64x2_t)0, v163.f64[0]);
    v163.f64[0] = v108.f64[0] * 0.0 + v198 * 0.0 - v163.f64[0];
    v108 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v177.f64[0]), (float64x2_t)xmmword_239EC68E0, v200), (float64x2_t)0, v193);
    v177.f64[0] = v177.f64[0] * 0.0 + v200 * 0.0 - v193;
    v216 = *(_OWORD *)&vaddq_f64(v134, v211);
    v211 = vaddq_f64(v214, *(float64x2_t *)v212);
    v217 = vaddq_f64(v215, *(float64x2_t *)(v212 + 24));
    v218 = vaddq_f64(v177, v202);
    *(float64x2_t *)v212 = v211;
    *(_QWORD *)(v212 + 16) = v216;
    *(float64x2_t *)(v212 + 24) = v217;
    *(_QWORD *)(v212 + 40) = *(_OWORD *)&vaddq_f64(v163, v192);
    *(float64x2_t *)(v212 + 48) = vaddq_f64(v108, v213);
    *(float64_t *)(v212 + 64) = v218.f64[0];
  }
  else
  {
    *(_QWORD *)(v212 + 64) = 0;
    v218.f64[1] = 0.0;
    *(_OWORD *)(v212 + 32) = 0u;
    *(_OWORD *)(v212 + 48) = 0u;
    *(_OWORD *)v212 = 0u;
    *(_OWORD *)(v212 + 16) = 0u;
  }
  v219 = *a3;
  if (LOBYTE(result[3][1].f64[1]))
  {
    v218.f64[0] = *(float64_t *)(v219 + 88);
    v108.f64[0] = *(float64_t *)(v219 + 112);
    v211.f64[0] = *(float64_t *)(v219 + 136);
    v220 = *(float64x2_t *)(v219 + 120);
    v221 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v102.f64[0]), (float64x2_t)xmmword_239EC68E0, v208), (float64x2_t)0, v205);
    v102.f64[0] = v102.f64[0] * 0.0 + v208 * 0.0 - v205;
    v222 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v100.f64[0]), (float64x2_t)xmmword_239EC68E0, v207), (float64x2_t)0, v206);
    v100.f64[0] = v100.f64[0] * 0.0 + v207 * 0.0 - v206;
    v223 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, _Q4.f64[0]), (float64x2_t)xmmword_239EC68E0, v209), (float64x2_t)0, v140.f64[0]);
    _Q4.f64[0] = _Q4.f64[0] * 0.0 + v209 * 0.0 - v140.f64[0];
    v224 = vaddq_f64(v222, *(float64x2_t *)(v219 + 96));
    *(float64x2_t *)(v219 + 72) = vaddq_f64(v221, *(float64x2_t *)(v219 + 72));
    *(_QWORD *)(v219 + 88) = *(_OWORD *)&vaddq_f64(v102, v218);
    *(float64x2_t *)(v219 + 96) = v224;
    *(_QWORD *)(v219 + 112) = *(_OWORD *)&vaddq_f64(v100, v108);
    v225 = vaddq_f64(v223, v220);
    *(float64x2_t *)(v219 + 120) = v225;
    *(_QWORD *)(v219 + 136) = *(_OWORD *)&vaddq_f64(_Q4, v211);
  }
  else
  {
    v226 = v219 + 72;
    *(_QWORD *)(v226 + 64) = 0;
    v225.f64[1] = 0.0;
    *(_OWORD *)(v226 + 32) = 0u;
    *(_OWORD *)(v226 + 48) = 0u;
    *(_OWORD *)v226 = 0u;
    *(_OWORD *)(v226 + 16) = 0u;
  }
  v227 = *a3 + 144;
  if (LOBYTE(result[5]->f64[1]))
  {
    v225.f64[0] = *(float64_t *)(*a3 + 160);
    v228 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v174.f64[0]), (float64x2_t)xmmword_239EC68E0, v210), (float64x2_t)0, v203);
    v174.f64[0] = v174.f64[0] * 0.0 + v210 * 0.0 - v203;
    *(float64x2_t *)v227 = vaddq_f64(v228, *(float64x2_t *)v227);
    *(_QWORD *)(v227 + 16) = *(_OWORD *)&vaddq_f64(v174, v225);
  }
  else
  {
    *(_QWORD *)v227 = 0;
    *(_QWORD *)(v227 + 8) = 0;
    *(_QWORD *)(v227 + 16) = 0;
  }
  return result;
}

void sub_239C25740(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const double *v4;
  uint64_t v5;
  __int128 __Y;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(const double **)(v3 + 8);
  if (&v4[-*(unsigned int *)(v3 + 16)] == (const double *)a1 || (v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)v5 == a1))
  {
    sub_239C25740(&__Y);
    *(_OWORD *)a1 = __Y;
    *(_QWORD *)(a1 + 16) = v7;
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)(v5 + 16))
  {
    sub_239A22E8C(0, 3, *(_DWORD *)v3, v4, *(_DWORD *)(v3 + 4), *(const double **)v5, 1, (double *)a1, *(double *)(a2 + 24), 0.0, 1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

_QWORD *sub_239C257EC(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int *v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  if (a4 != a5)
  {
    v44 = v5;
    v45 = v6;
    if (*a3 != a3[1])
    {
      v7 = a4;
      v39 = a5;
      v40 = result + 2;
      v37 = a2;
      v38 = a3;
      v36 = result;
      while (1)
      {
        v9 = (unsigned int *)*a3;
        v8 = (unsigned int *)a3[1];
        if ((unsigned int *)*a3 != v8)
          break;
LABEL_4:
        v7 += 2;
        if (v7 == a5)
          return result;
      }
      v10 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v7);
      v11 = result[11] + 24 * v7[1];
      v12 = *v10;
      v13 = v10[1];
      while (1)
      {
        if (v12 == v13)
          goto LABEL_4;
        v14 = *v9;
        while (*(_DWORD *)v12 != v14)
        {
          if (*(_DWORD *)v12 > v14)
            goto LABEL_30;
          v12 += 16;
          if (v12 == v13)
            goto LABEL_4;
        }
        v15 = *(_QWORD *)(v12 + 8);
        v16 = *(_QWORD *)(a2 + 16);
        v17 = v9[1];
        v18 = *(char **)v11;
        v19 = *(char **)(v11 + 8);
        if (*(char **)v11 != v19)
        {
          while (*(_DWORD *)v18 < v17)
          {
            v18 += 16;
            if (v18 == v19)
              goto LABEL_21;
          }
        }
        if (v18 != v19)
        {
          if (*(_DWORD *)v18 == v17)
          {
            v20 = *v40 + 8 * *((_QWORD *)v18 + 1);
            goto LABEL_29;
          }
          v19 = v18;
        }
LABEL_21:
        v21 = result[10];
        v41 = *(_QWORD *)(a2 + 16);
        v42 = *(_QWORD *)(v12 + 8);
        if (v21)
        {
          v23 = result[6];
          v22 = result[7];
          v24 = ((v22 - v23) << 6) - 1;
          v25 = result[9];
          if (v22 == v23)
            v24 = 0;
          v20 = result[2]
              + 8
              * *(_QWORD *)(*(_QWORD *)(v23 + (((unint64_t)(v25 + v21 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v25 + v21 - 1) & 0x1FF));
          result[10] = v21 - 1;
          if ((unint64_t)(v24 - (v21 + v25) + 1) >= 0x400)
          {
            v26 = result;
            operator delete(*(void **)(v22 - 8));
            v26[7] -= 8;
          }
          v27 = v40;
        }
        else
        {
          v28 = (void *)result[3];
          *(_QWORD *)&v43 = 0;
          v27 = v40;
          v29 = result;
          sub_239C2323C(v40, v28, 9uLL, (uint64_t *)&v43);
          v20 = v29[3] - 72;
        }
        v30 = (uint64_t)(v20 - *v27) >> 3;
        LODWORD(v43) = v17;
        *((_QWORD *)&v43 + 1) = v30;
        sub_239C22598((char **)v11, v19, &v43);
        a3 = v38;
        a5 = v39;
        result = v36;
        a2 = v37;
        v16 = v41;
        v15 = v42;
LABEL_29:
        v31 = (__int128 *)(v16 + 8 * v15);
        v32 = *v31;
        v33 = v31[1];
        v34 = v31[2];
        v35 = v31[3];
        *(_QWORD *)(v20 + 64) = *((_QWORD *)v31 + 8);
        *(_OWORD *)(v20 + 32) = v34;
        *(_OWORD *)(v20 + 48) = v35;
        *(_OWORD *)v20 = v32;
        *(_OWORD *)(v20 + 16) = v33;
LABEL_30:
        if (v12 != v13)
        {
          v9 += 2;
          if (v9 != v8)
            continue;
        }
        goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t sub_239C25A28()
{
  return kdebug_trace();
}

void sub_239C25A58(uint64_t a1, char **a2)
{
  void *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;

  sub_239C25B28(a1, 0);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  if (*(_QWORD *)(a1 + 56) - (_QWORD)v4 <= 0xFFuLL)
  {
    v5 = (char *)operator new(0x100uLL);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v5;
    *(_QWORD *)(a1 + 56) = v5 + 256;
    if (v4)
      operator delete(v4);
  }
  if ((char **)(a1 + 40) != a2)
    sub_23942156C((_QWORD *)(a1 + 40), *a2, a2[1], (a2[1] - *a2) >> 2);
  v6 = (*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v6, v6);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = (3 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  sub_23945215C(a1, v7);
}

void sub_239C25B28(uint64_t a1, unsigned int a2)
{
  size_t v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  std::bad_alloc *exception;
  std::bad_alloc *v10;
  std::bad_alloc *v11;
  std::bad_alloc *v12;
  void *memptr;

  if (*(_QWORD *)(a1 + 8) >= (unint64_t)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
  }
  else
  {
    v4 = (8 * a2 + 31) & 0xFFFFFFFE0;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x100BBD03uLL);
    v5 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v10 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v10, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if (*(_DWORD *)(a1 + 16) >= a2)
      v6 = a2;
    else
      v6 = *(_DWORD *)(a1 + 16);
    if (*(void **)a1 == memptr)
    {
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v6 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
      v7 = memptr;
      if (!memptr)
      {
        v11 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v12 = std::bad_alloc::bad_alloc(v11);
        __cxa_throw(v12, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if (v6)
      {
        memmove(memptr, v5, 8 * v6);
        memmove(v5, v7, 8 * v6);
      }
      free(v7);
    }
    else if (v6)
    {
      memmove(memptr, *(const void **)a1, 8 * v6);
    }
    v8 = *(void **)a1;
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4 >> 3;
    *(_DWORD *)(a1 + 16) = a2;
    free(v8);
  }
}

void sub_239C25C8C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_239C25CA0(uint64_t *a1, unsigned int **a2, int a3)
{
  unsigned int *v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  int32x4_t *v31;
  int32x4_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  int32x4_t *v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  _DWORD *v44;
  _DWORD *v45;

  v4 = (unsigned int *)*a1;
  a1[1] = *a1;
  a1[3] = 0;
  v5 = a1 + 3;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v8 = v4;
  }
  else
  {
    do
    {
      v9 = *v6;
      v10 = a1[2];
      if ((unint64_t)v4 < v10)
      {
        *v4 = 0;
        v4[1] = v9;
        v8 = v4 + 3;
        v4[2] = 3;
      }
      else
      {
        v11 = (unsigned int *)*a1;
        v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a1) >> 2);
        v13 = v12 + 1;
        if (v12 + 1 > 0x1555555555555555)
          sub_2394189F8();
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v11) >> 2);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0xAAAAAAAAAAAAAAALL)
          v15 = 0x1555555555555555;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 > 0x1555555555555555)
            sub_239418A80();
          v16 = (char *)operator new(12 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[12 * v12];
        *(_DWORD *)v17 = 0;
        *((_DWORD *)v17 + 1) = v9;
        *((_DWORD *)v17 + 2) = 3;
        v18 = v17;
        if (v4 != v11)
        {
          do
          {
            v19 = *(_QWORD *)(v4 - 3);
            v4 -= 3;
            v20 = v4[2];
            *(_QWORD *)(v18 - 12) = v19;
            v18 -= 12;
            *((_DWORD *)v18 + 2) = v20;
          }
          while (v4 != v11);
          v4 = (unsigned int *)*a1;
        }
        v8 = (unsigned int *)(v17 + 12);
        *a1 = (uint64_t)v18;
        a1[1] = (uint64_t)(v17 + 12);
        a1[2] = (uint64_t)&v16[12 * v15];
        if (v4)
          operator delete(v4);
      }
      a1[1] = (uint64_t)v8;
      ++v6;
      v4 = v8;
    }
    while (v6 != v7);
  }
  if (a3 == 1)
  {
    v23 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *a1) >> 2));
    if (v8 == (unsigned int *)*a1)
      v24 = 0;
    else
      v24 = v23;
    sub_239C272BC(*a1, v8, v24, 1);
  }
  else if (!a3)
  {
    v21 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *a1) >> 2));
    if (v8 == (unsigned int *)*a1)
      v22 = 0;
    else
      v22 = v21;
    sub_239C260D0(*a1, v8, v22, 1);
  }
  v25 = (int *)*a1;
  v26 = (int *)a1[1];
  if ((int *)*a1 != v26)
  {
    v27 = 0;
    do
    {
      v28 = v25[2];
      v25[2] = v27;
      v29 = *v25;
      v25 += 3;
      v27 += v28;
      ++v5[v29];
    }
    while (v25 != v26);
  }
  a1[5] = a1[4];
  a1[8] = a1[7];
  v30 = a1[3];
  if (v30)
  {
    sub_23942CB44((uint64_t)(a1 + 4), v30);
    v31 = (int32x4_t *)a1[4];
    v32 = (int32x4_t *)a1[5];
    if (v31 != v32)
    {
      v33 = (char *)v32 - (char *)v31 - 4;
      if (v33 < 0x1C)
      {
        LODWORD(v34) = 0;
        goto LABEL_44;
      }
      v35 = (v33 >> 2) + 1;
      v34 = v35 & 0x7FFFFFFFFFFFFFF8;
      v36 = (int32x4_t)xmmword_239EC6870;
      v37 = v31 + 1;
      v38.i64[0] = 0x400000004;
      v38.i64[1] = 0x400000004;
      v39.i64[0] = 0x800000008;
      v39.i64[1] = 0x800000008;
      v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v37[-1] = v36;
        *v37 = vaddq_s32(v36, v38);
        v36 = vaddq_s32(v36, v39);
        v37 += 2;
        v40 -= 8;
      }
      while (v40);
      if (v35 != v34)
      {
        v31 = (int32x4_t *)((char *)v31 + 4 * (v35 & 0x7FFFFFFFFFFFFFF8));
        do
        {
LABEL_44:
          v31->i32[0] = v34;
          v31 = (int32x4_t *)((char *)v31 + 4);
          LODWORD(v34) = v34 + 1;
        }
        while (v31 != v32);
      }
    }
  }
  v41 = a1[3];
  v42 = (_DWORD *)a1[7];
  v43 = (a1[8] - (uint64_t)v42) >> 2;
  if (v41 <= v43)
  {
    if (v41 < v43)
      a1[8] = (uint64_t)&v42[v41];
  }
  else
  {
    sub_23942CB44((uint64_t)(a1 + 7), v41 - v43);
    v42 = (_DWORD *)a1[7];
  }
  v44 = (_DWORD *)*a1;
  v45 = (_DWORD *)a1[1];
  while (v44 != v45)
  {
    if (!*v44)
      *v42++ = v44[2];
    v44 += 3;
  }
}

void sub_239C25FE4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C25FF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFB570;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C26030(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFB570;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C26050(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  if (**(_QWORD **)(result + 8))
  {
    v1 = *(_QWORD *)(result + 16);
    v2 = *(_QWORD **)(v1 + 32);
    v3 = (_QWORD *)(v1 + 40);
    if (v2 != v3)
    {
      do
      {
        if (*((_BYTE *)v2 + 44))
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_9;
        }
        else
        {
          *((_DWORD *)v2 + 18) = -1;
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_9:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
LABEL_4:
        v2 = v5;
      }
      while (v5 != v3);
    }
  }
  return result;
}

unint64_t sub_239C260D0(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  BOOL v48;
  BOOL v49;
  unsigned int v50;
  _BOOL4 v51;
  _BOOL4 v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  _BOOL4 v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  BOOL v80;
  BOOL v81;
  unsigned int v82;
  _BOOL4 v83;
  _BOOL4 v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  _BOOL4 v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  _BOOL4 v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  _BOOL4 v102;
  _BOOL4 v103;
  _BOOL4 v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  unsigned int v112;
  BOOL v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  unsigned int v119;
  unsigned int v120;
  BOOL v121;
  BOOL v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v128;
  BOOL v129;
  unsigned int v130;
  unsigned int v131;
  _BOOL4 v132;
  _BOOL4 v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  _BOOL4 v155;
  _BOOL4 v156;
  unsigned int v157;
  unsigned int v158;
  BOOL v159;
  BOOL v160;
  uint64_t v161;
  unsigned int v162;
  _BOOL4 v163;
  _QWORD *v164;
  unsigned int v165;
  unsigned int v166;
  BOOL v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int *v172;
  BOOL v173;
  char v174;
  uint64_t v175;
  unsigned int *v176;
  unsigned int *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  _BOOL4 v181;
  unsigned int v182;
  uint64_t v183;
  char *v184;
  unsigned int v185;
  BOOL v186;
  BOOL v187;
  int64_t v188;
  int64_t v189;
  int64_t v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  _BOOL4 v194;
  unsigned int *v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  _BOOL4 v200;
  _BOOL4 v201;
  _BOOL4 v202;
  unsigned int *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unsigned int v208;
  _BOOL4 v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int *v215;
  unsigned int *v216;
  uint64_t v217;
  unsigned int v218;
  BOOL v219;
  BOOL v220;
  int64_t v221;
  uint64_t v223;
  unsigned int *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  _BOOL4 v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  int v239;
  char *v240;
  uint64_t v241;
  BOOL v242;
  unsigned int v243;
  unsigned int v244;
  _BOOL4 v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v249 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v162 = *(a2 - 3);
        v173 = v162 == *v10;
        v163 = v162 < *v10;
        if (v173)
          v163 = *(a2 - 2) < v10[1];
        if (v163)
          goto LABEL_167;
        return result;
      case 3:
        v164 = v10 + 3;
        v165 = v10[3];
        v166 = v10[4];
        v167 = v165 < *v10;
        if (v165 == *v10)
          v167 = v166 < v10[1];
        v168 = *(a2 - 3);
        v169 = *(a2 - 2) < v166;
        v173 = v168 == v165;
        v170 = v168 < v165;
        if (v173)
          v170 = v169;
        if (v167)
        {
          if (v170)
          {
LABEL_167:
            v291 = v10[2];
            v268 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v291;
            *(_QWORD *)v8 = v268;
          }
          else
          {
            v294 = v10[2];
            v271 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v164;
            v10[2] = v10[5];
            *v164 = v271;
            v10[5] = v294;
            v243 = *(a2 - 3);
            v244 = v10[3];
            v173 = v243 == v244;
            v245 = v243 < v244;
            if (v173)
              v245 = *(a2 - 2) < v10[4];
            if (v245)
            {
              v246 = *v164;
              v247 = v10[5];
              v248 = *(a2 - 1);
              *v164 = *(_QWORD *)v8;
              v10[5] = v248;
              *(a2 - 1) = v247;
              *(_QWORD *)v8 = v246;
            }
          }
        }
        else if (v170)
        {
          v206 = *v164;
          v207 = v10[5];
          v208 = *(a2 - 1);
          *v164 = *(_QWORD *)v8;
          v10[5] = v208;
          *(a2 - 1) = v207;
          *(_QWORD *)v8 = v206;
          LODWORD(v206) = v10[3];
          v173 = (_DWORD)v206 == *v10;
          v209 = v206 < *v10;
          if (v173)
            v209 = v10[4] < v10[1];
          if (v209)
          {
            v292 = v10[2];
            v269 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v164;
            v10[2] = v10[5];
            *v164 = v269;
            v10[5] = v292;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_239C28A18(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_239C28C18(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 <= 287)
        {
          v172 = v10 + 3;
          v173 = v10 == a2 || v172 == a2;
          v174 = v173;
          if ((a4 & 1) != 0)
          {
            if ((v174 & 1) == 0)
            {
              v175 = 0;
              v176 = v10;
              do
              {
                v178 = v172;
                v179 = v176[3];
                v180 = v176[4];
                v181 = v179 < *v176;
                if (v179 == *v176)
                  v181 = v180 < v176[1];
                if (v181)
                {
                  v182 = v176[5];
                  v183 = v175;
                  do
                  {
                    v184 = (char *)v10 + v183;
                    *(_QWORD *)(v184 + 12) = *(_QWORD *)((char *)v10 + v183);
                    *((_DWORD *)v184 + 5) = *(unsigned int *)((char *)v10 + v183 + 8);
                    if (!v183)
                    {
                      v177 = v10;
                      goto LABEL_180;
                    }
                    v185 = *((_DWORD *)v184 - 3);
                    v186 = v180 < *((_DWORD *)v184 - 2);
                    v173 = v179 == v185;
                    v187 = v179 < v185;
                    if (!v173)
                      v186 = v187;
                    v183 -= 12;
                  }
                  while (v186);
                  v177 = (unsigned int *)((char *)v10 + v183 + 12);
LABEL_180:
                  *v177 = v179;
                  v177[1] = v180;
                  v177[2] = v182;
                }
                v172 = v178 + 3;
                v175 += 12;
                v176 = v178;
              }
              while (v178 + 3 != a2);
            }
          }
          else if ((v174 & 1) == 0)
          {
            do
            {
              v210 = v172;
              v211 = v7[3];
              v212 = v7[4];
              v213 = v211 < *v7;
              if (v211 == *v7)
                v213 = v212 < v7[1];
              if (v213)
              {
                v214 = v7[5];
                v215 = v210;
                do
                {
                  v216 = v215;
                  v217 = *(_QWORD *)(v215 - 3);
                  v215 -= 3;
                  *(_QWORD *)v216 = v217;
                  v216[2] = *(v216 - 1);
                  v218 = *(v216 - 6);
                  v219 = v212 < *(v216 - 5);
                  v173 = v211 == v218;
                  v220 = v211 < v218;
                  if (!v173)
                    v219 = v220;
                }
                while (v219);
                *v215 = v211;
                v215[1] = v212;
                v215[2] = v214;
              }
              v172 = v210 + 3;
              v7 = v210;
            }
            while (v210 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v188 = (unint64_t)(v12 - 2) >> 1;
            v189 = v188;
            do
            {
              v190 = v189;
              if (v188 >= v189)
              {
                v191 = (2 * v189) | 1;
                v192 = &v10[3 * v191];
                if (2 * v190 + 2 >= v12)
                {
                  v193 = *v192;
                }
                else
                {
                  v193 = v192[3];
                  v194 = v10[3 * v191 + 1] < v192[4];
                  if (*v192 != v193)
                    v194 = *v192 < v193;
                  if (v194)
                  {
                    v192 += 3;
                    v191 = 2 * v190 + 2;
                  }
                  else
                  {
                    v193 = *v192;
                  }
                }
                v195 = &v10[3 * v190];
                v196 = *v195;
                v197 = v195[1];
                v173 = v193 == *v195;
                LODWORD(result) = v193 < *v195;
                if (v173)
                  result = v192[1] < v197;
                else
                  result = result;
                if ((result & 1) == 0)
                {
                  result = v195[2];
                  do
                  {
                    v203 = v195;
                    v195 = v192;
                    v204 = *(_QWORD *)v192;
                    v203[2] = v195[2];
                    *(_QWORD *)v203 = v204;
                    if (v188 < v191)
                      break;
                    v205 = (2 * v191) | 1;
                    v192 = &v10[3 * v205];
                    v191 = 2 * v191 + 2;
                    if (v191 < v12)
                    {
                      v198 = *v192;
                      v199 = v192[3];
                      v200 = v10[3 * v205 + 1] < v192[4];
                      if (*v192 != v199)
                        v200 = *v192 < v199;
                      if (v200)
                      {
                        v198 = v192[3];
                        v192 += 3;
                      }
                      else
                      {
                        v191 = v205;
                      }
                    }
                    else
                    {
                      v198 = *v192;
                      v191 = v205;
                    }
                    v201 = v192[1] < v197;
                    v173 = v198 == v196;
                    v202 = v198 < v196;
                    if (!v173)
                      v201 = v202;
                  }
                  while (!v201);
                  *v195 = v196;
                  v195[1] = v197;
                  v195[2] = result;
                }
              }
              v189 = v190 - 1;
            }
            while (v190);
            v221 = v11 / 0xCuLL;
            do
            {
              v223 = 0;
              v293 = v10[2];
              v270 = *(_QWORD *)v10;
              v224 = v10;
              do
              {
                v226 = v223 + 1;
                v227 = (char *)&v224[3 * v223 + 3];
                v228 = (2 * v223) | 1;
                v229 = 2 * v223 + 2;
                if (v229 < v221)
                {
                  v230 = *((_DWORD *)v227 + 3);
                  v231 = v224[3 * v226 + 1] < *((_DWORD *)v227 + 4);
                  v173 = *(_DWORD *)v227 == v230;
                  result = *(_DWORD *)v227 < v230;
                  if (!v173)
                    v231 = result;
                  if (v231)
                  {
                    v227 += 12;
                    v228 = v229;
                  }
                }
                v225 = *(_QWORD *)v227;
                v224[2] = *((_DWORD *)v227 + 2);
                *(_QWORD *)v224 = v225;
                v224 = (unsigned int *)v227;
                v223 = v228;
              }
              while (v228 <= (uint64_t)((unint64_t)(v221 - 2) >> 1));
              a2 -= 3;
              if (v227 == (char *)a2)
              {
                *((_DWORD *)v227 + 2) = v293;
                *(_QWORD *)v227 = v270;
              }
              else
              {
                v232 = *(_QWORD *)a2;
                *((_DWORD *)v227 + 2) = a2[2];
                *(_QWORD *)v227 = v232;
                a2[2] = v293;
                *(_QWORD *)a2 = v270;
                v233 = v227 - (char *)v10 + 12;
                if (v233 >= 13)
                {
                  v234 = (v233 / 0xCuLL - 2) >> 1;
                  v235 = &v10[3 * v234];
                  v237 = *(_DWORD *)v227;
                  v236 = *((_DWORD *)v227 + 1);
                  v238 = *v235 < *(_DWORD *)v227;
                  if (*v235 == *(_DWORD *)v227)
                    v238 = v235[1] < v236;
                  if (v238)
                  {
                    v239 = *((_DWORD *)v227 + 2);
                    do
                    {
                      v240 = v227;
                      v227 = (char *)v235;
                      v241 = *(_QWORD *)v235;
                      result = *((unsigned int *)v227 + 2);
                      *((_DWORD *)v240 + 2) = result;
                      *(_QWORD *)v240 = v241;
                      if (!v234)
                        break;
                      v234 = (v234 - 1) >> 1;
                      v235 = &v10[3 * v234];
                      result = v235[1] < v236;
                      v242 = *v235 < v237;
                      if (*v235 == v237)
                        v242 = v235[1] < v236;
                    }
                    while (v242);
                    *(_DWORD *)v227 = v237;
                    *((_DWORD *)v227 + 1) = v236;
                    *((_DWORD *)v227 + 2) = v239;
                  }
                }
              }
            }
            while (v221-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[3 * ((unint64_t)v12 >> 1)];
        v15 = *(a2 - 3);
        v16 = *(a2 - 2);
        if ((unint64_t)v11 >= 0x601)
        {
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v173 = v15 == v17;
          v21 = v15 < v17;
          if (v173)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v272 = v10[2];
              v250 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
              goto LABEL_35;
            }
            v278 = v10[2];
            v256 = *(_QWORD *)v10;
            v36 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v36;
            v14[2] = v278;
            *(_QWORD *)v14 = v256;
            v37 = *(a2 - 3);
            v38 = v37 < v256;
            if (v37 == (_DWORD)v256)
              v38 = *(a2 - 2) < *v18;
            if (v38)
            {
              v272 = v14[2];
              v250 = *(_QWORD *)v14;
              v39 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v39;
LABEL_35:
              *(a2 - 1) = v272;
              *(_QWORD *)v8 = v250;
            }
          }
          else if (v21)
          {
            v274 = v14[2];
            v252 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v274;
            *(_QWORD *)v8 = v252;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v275 = v10[2];
              v253 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v275;
              *(_QWORD *)v14 = v253;
            }
          }
          v40 = (uint64_t *)(v10 + 3);
          v41 = v10[3];
          v42 = &v10[3 * v13];
          v45 = *(v42 - 3);
          v43 = v42 - 3;
          v44 = v45;
          v46 = v43 + 1;
          v47 = v43[1];
          v48 = v47 < v10[4];
          v173 = v45 == v41;
          v49 = v45 < v41;
          if (!v173)
            v48 = v49;
          v50 = *(a2 - 6);
          v51 = *(a2 - 5) < v47;
          v173 = v50 == v44;
          v52 = v50 < v44;
          if (v173)
            v52 = v51;
          if (v48)
          {
            if (v52)
            {
              v53 = *v40;
              v54 = v10[5];
              v55 = *(a2 - 4);
              *v40 = *(_QWORD *)v249;
              v10[5] = v55;
              *(a2 - 4) = v54;
              *(_QWORD *)v249 = v53;
            }
            else
            {
              v66 = *v40;
              v67 = v10[5];
              v68 = v43[2];
              *v40 = *(_QWORD *)v43;
              v10[5] = v68;
              v43[2] = v67;
              *(_QWORD *)v43 = v66;
              v69 = v66;
              LODWORD(v66) = *(a2 - 6);
              v173 = (_DWORD)v66 == v69;
              v70 = v66 < v69;
              if (v173)
                v70 = *(a2 - 5) < *v46;
              if (v70)
              {
                v281 = v43[2];
                v259 = *(_QWORD *)v43;
                v71 = *(_QWORD *)v249;
                v43[2] = *(a2 - 4);
                *(_QWORD *)v43 = v71;
                *(a2 - 4) = v281;
                *(_QWORD *)v249 = v259;
              }
            }
          }
          else if (v52)
          {
            v279 = v43[2];
            v257 = *(_QWORD *)v43;
            v56 = *(_QWORD *)v249;
            v43[2] = *(a2 - 4);
            *(_QWORD *)v43 = v56;
            *(a2 - 4) = v279;
            *(_QWORD *)v249 = v257;
            v57 = v10[3];
            v58 = *v43 < v57;
            if (*v43 == v57)
              v58 = *v46 < v10[4];
            if (v58)
            {
              v59 = *v40;
              v60 = v10[5];
              v61 = v43[2];
              *v40 = *(_QWORD *)v43;
              v10[5] = v61;
              v43[2] = v60;
              *(_QWORD *)v43 = v59;
            }
          }
          v72 = (uint64_t *)(v10 + 6);
          v73 = v10[6];
          v74 = &v10[3 * v13];
          v77 = v74[3];
          v75 = v74 + 3;
          v76 = v77;
          v78 = v75 + 1;
          v79 = v75[1];
          v80 = v79 < v10[7];
          v173 = v77 == v73;
          v81 = v77 < v73;
          if (!v173)
            v80 = v81;
          v82 = *(a2 - 9);
          v83 = *(a2 - 8) < v79;
          v173 = v82 == v76;
          v84 = v82 < v76;
          if (v173)
            v84 = v83;
          if (v80)
          {
            if (v84)
            {
              v85 = *v72;
              v86 = v10[8];
              v87 = *(a2 - 7);
              *v72 = *(_QWORD *)v9;
              v10[8] = v87;
              *(a2 - 7) = v86;
              *(_QWORD *)v9 = v85;
            }
            else
            {
              v94 = *v72;
              v95 = v10[8];
              v96 = v75[2];
              *v72 = *(_QWORD *)v75;
              v10[8] = v96;
              v75[2] = v95;
              *(_QWORD *)v75 = v94;
              v97 = v94;
              LODWORD(v94) = *(a2 - 9);
              v173 = (_DWORD)v94 == v97;
              v98 = v94 < v97;
              if (v173)
                v98 = *(a2 - 8) < *v78;
              if (v98)
              {
                v283 = v75[2];
                v261 = *(_QWORD *)v75;
                v99 = *(_QWORD *)v9;
                v75[2] = *(a2 - 7);
                *(_QWORD *)v75 = v99;
                *(a2 - 7) = v283;
                *(_QWORD *)v9 = v261;
              }
            }
          }
          else if (v84)
          {
            v282 = v75[2];
            v260 = *(_QWORD *)v75;
            v88 = *(_QWORD *)v9;
            v75[2] = *(a2 - 7);
            *(_QWORD *)v75 = v88;
            *(a2 - 7) = v282;
            *(_QWORD *)v9 = v260;
            v89 = v10[6];
            v90 = *v75 < v89;
            if (*v75 == v89)
              v90 = *v78 < v10[7];
            if (v90)
            {
              v91 = *v72;
              v92 = v10[8];
              v93 = v75[2];
              *v72 = *(_QWORD *)v75;
              v10[8] = v93;
              v75[2] = v92;
              *(_QWORD *)v75 = v91;
            }
          }
          v100 = *v14;
          v101 = *v14 < *v43;
          if (*v14 == *v43)
            v101 = *v18 < *v46;
          result = *v78;
          v173 = *v75 == v100;
          v102 = *v75 < v100;
          if (v173)
            v102 = result < *v18;
          if (v101)
          {
            if (v102)
            {
              v284 = v43[2];
              v262 = *(_QWORD *)v43;
              *(_QWORD *)v43 = *(_QWORD *)v75;
              v43[2] = v75[2];
              goto LABEL_89;
            }
            v287 = v43[2];
            v265 = *(_QWORD *)v43;
            *(_QWORD *)v43 = *(_QWORD *)v14;
            v43[2] = v14[2];
            v14[2] = v287;
            *(_QWORD *)v14 = v265;
            v104 = *v78 < *v18;
            if (*v75 != *v14)
              v104 = *v75 < *v14;
            if (v104)
            {
              v284 = v14[2];
              v262 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v75;
              v14[2] = v75[2];
LABEL_89:
              v75[2] = v284;
              *(_QWORD *)v75 = v262;
            }
          }
          else if (v102)
          {
            v285 = v14[2];
            v263 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v75;
            v14[2] = v75[2];
            v75[2] = v285;
            *(_QWORD *)v75 = v263;
            v103 = *v18 < *v46;
            if (*v14 != *v43)
              v103 = *v14 < *v43;
            if (v103)
            {
              v286 = v43[2];
              v264 = *(_QWORD *)v43;
              *(_QWORD *)v43 = *(_QWORD *)v14;
              v43[2] = v14[2];
              v14[2] = v286;
              *(_QWORD *)v14 = v264;
            }
          }
          v288 = v10[2];
          v266 = *(_QWORD *)v10;
          v105 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v105;
          v14[2] = v288;
          *(_QWORD *)v14 = v266;
          goto LABEL_91;
        }
        v23 = *v10;
        v24 = v10[1];
        v25 = &v10[3 * v13 + 1];
        v26 = v24 < *v25;
        if (*v10 != *v14)
          v26 = *v10 < *v14;
        v27 = v16 < v24;
        v173 = v15 == v23;
        v28 = v15 < v23;
        if (v173)
          v28 = v27;
        if (v26)
        {
          if (v28)
          {
            v273 = v14[2];
            v251 = *(_QWORD *)v14;
            v29 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v29;
LABEL_52:
            *(a2 - 1) = v273;
            *(_QWORD *)v8 = v251;
            goto LABEL_91;
          }
          v280 = v14[2];
          v258 = *(_QWORD *)v14;
          v62 = *(_QWORD *)v10;
          v14[2] = v10[2];
          *(_QWORD *)v14 = v62;
          v10[2] = v280;
          *(_QWORD *)v10 = v258;
          v63 = *(a2 - 3);
          v173 = v63 == *v10;
          v64 = v63 < *v10;
          if (v173)
            v64 = *(a2 - 2) < v10[1];
          if (v64)
          {
            v273 = v10[2];
            v251 = *(_QWORD *)v10;
            v65 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v65;
            goto LABEL_52;
          }
        }
        else if (v28)
        {
          v276 = v10[2];
          v254 = *(_QWORD *)v10;
          v33 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v33;
          *(a2 - 1) = v276;
          *(_QWORD *)v8 = v254;
          v34 = v10[1] < *v25;
          if (*v10 != *v14)
            v34 = *v10 < *v14;
          if (v34)
          {
            v277 = v14[2];
            v255 = *(_QWORD *)v14;
            v35 = *(_QWORD *)v10;
            v14[2] = v10[2];
            *(_QWORD *)v14 = v35;
            v10[2] = v277;
            *(_QWORD *)v10 = v255;
          }
        }
LABEL_91:
        --a3;
        v106 = *v10;
        if ((a4 & 1) == 0)
        {
          v107 = *(v10 - 3);
          v173 = v107 == v106;
          v108 = v107 < v106;
          if (v173)
            v108 = *(v10 - 2) < v10[1];
          if (!v108)
          {
            v136 = *(_QWORD *)(v10 + 1);
            v137 = *(a2 - 3);
            v173 = v106 == v137;
            v138 = v106 < v137;
            if (v173)
              v138 = v136 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v136 < v140;
                v173 = v106 == v139;
                v142 = v106 < v139;
                if (v173)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v136 < v10[1];
                v173 = v106 == v144;
                v146 = v106 < v144;
                if (!v173)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v136 < v149;
                v173 = v106 == v148;
                v151 = v106 < v148;
                if (v173)
                  v151 = v150;
              }
              while (v151);
            }
            while (v10 < v147)
            {
              v290 = v10[2];
              v267 = *(_QWORD *)v10;
              v152 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v152;
              v147[2] = v290;
              *(_QWORD *)v147 = v267;
              do
              {
                v153 = v10[3];
                v154 = v10[4];
                v10 += 3;
                v155 = v136 < v154;
                v173 = v106 == v153;
                v156 = v106 < v153;
                if (v173)
                  v156 = v155;
              }
              while (!v156);
              do
              {
                v157 = *(v147 - 3);
                v158 = *(v147 - 2);
                v147 -= 3;
                v159 = v136 < v158;
                v173 = v106 == v157;
                v160 = v106 < v157;
                if (v173)
                  v160 = v159;
              }
              while (v160);
            }
            if (v10 - 3 != v7)
            {
              v161 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v161;
            }
            a4 = 0;
            *(v10 - 3) = v106;
            *((_QWORD *)v10 - 1) = v136;
            continue;
          }
        }
        v109 = *(_QWORD *)(v10 + 1);
        v110 = v10;
        do
        {
          v111 = v110;
          v112 = v110[3];
          v110 += 3;
          v113 = v112 < v106;
          if (v112 == v106)
            v113 = v111[4] < v109;
        }
        while (v113);
        v114 = a2;
        if (v111 == v10)
        {
          v114 = a2;
          do
          {
            if (v110 >= v114)
              break;
            v119 = *(v114 - 3);
            v120 = *(v114 - 2);
            v114 -= 3;
            v121 = v120 < v109;
            v173 = v119 == v106;
            v122 = v119 < v106;
            if (v173)
              v122 = v121;
          }
          while (!v122);
        }
        else
        {
          do
          {
            v115 = *(v114 - 3);
            v116 = *(v114 - 2);
            v114 -= 3;
            v117 = v116 < v109;
            v173 = v115 == v106;
            v118 = v115 < v106;
            if (v173)
              v118 = v117;
          }
          while (!v118);
        }
        v10 = v110;
        if (v110 < v114)
        {
          v123 = (unint64_t)v114;
          do
          {
            v124 = *(_QWORD *)v10;
            v289 = v10[2];
            v125 = *(_DWORD *)(v123 + 8);
            *(_QWORD *)v10 = *(_QWORD *)v123;
            v10[2] = v125;
            *(_DWORD *)(v123 + 8) = v289;
            *(_QWORD *)v123 = v124;
            do
            {
              v126 = v10[3];
              v127 = v10[4];
              v10 += 3;
              v128 = v127 < v109;
              v173 = v126 == v106;
              v129 = v126 < v106;
              if (v173)
                v129 = v128;
            }
            while (v129);
            do
            {
              v130 = *(_DWORD *)(v123 - 12);
              v131 = *(_DWORD *)(v123 - 8);
              v123 -= 12;
              v132 = v131 < v109;
              v173 = v130 == v106;
              v133 = v130 < v106;
              if (v173)
                v133 = v132;
            }
            while (!v133);
          }
          while ((unint64_t)v10 < v123);
        }
        if (v10 - 3 != v7)
        {
          v134 = *(_QWORD *)(v10 - 3);
          v7[2] = *(v10 - 1);
          *(_QWORD *)v7 = v134;
        }
        *(v10 - 3) = v106;
        *((_QWORD *)v10 - 1) = v109;
        if (v110 < v114)
        {
LABEL_124:
          result = sub_239C260D0(v7, v10 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v135 = sub_239C28D70(v7, v10 - 3);
        result = sub_239C28D70(v10, a2);
        if (!(_DWORD)result)
        {
          if (v135)
            continue;
          goto LABEL_124;
        }
        a2 = v10 - 3;
        if (!v135)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_239C272BC(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  BOOL v51;
  unsigned int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _BOOL4 v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  _BOOL4 v99;
  uint64_t v100;
  unsigned int v101;
  BOOL v102;
  _BOOL4 v103;
  unsigned int v104;
  unsigned int v105;
  _BOOL4 v106;
  unsigned int v107;
  _BOOL4 v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  BOOL v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int v123;
  _BOOL4 v124;
  _BOOL4 v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v128;
  BOOL v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  BOOL v135;
  BOOL v136;
  unsigned int v137;
  unsigned int v138;
  _BOOL4 v139;
  _BOOL4 v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  unsigned int v144;
  BOOL v145;
  unsigned int v146;
  unsigned int v147;
  BOOL v148;
  BOOL v149;
  unsigned int *v150;
  unsigned int v151;
  _BOOL4 v152;
  _BOOL4 v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  BOOL v157;
  BOOL v158;
  uint64_t v159;
  unsigned int v160;
  unsigned int v161;
  _BOOL4 v162;
  _BOOL4 v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  BOOL v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  _BOOL4 v171;
  _QWORD *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  BOOL v176;
  unsigned int v177;
  _BOOL4 v178;
  _BOOL4 v179;
  uint64_t v180;
  unsigned int *v181;
  BOOL v182;
  char v183;
  uint64_t v184;
  unsigned int *v185;
  unsigned int *v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  _BOOL4 v191;
  unsigned int v192;
  uint64_t v193;
  char *v194;
  unsigned int v195;
  BOOL v196;
  BOOL v197;
  int64_t v198;
  int64_t v199;
  int64_t v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  unsigned int *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  _BOOL4 v211;
  unsigned int v212;
  unsigned int v213;
  _BOOL4 v214;
  BOOL v215;
  unsigned int v216;
  unsigned int v217;
  _BOOL4 v218;
  _BOOL4 v219;
  unsigned int *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  _BOOL4 v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  _BOOL4 v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int *v235;
  uint64_t v236;
  unsigned int v237;
  BOOL v238;
  BOOL v239;
  int64_t v240;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  unsigned int v250;
  _BOOL4 v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  _BOOL4 v259;
  int v260;
  char *v261;
  uint64_t v262;
  unsigned int v263;
  BOOL v264;
  unsigned int v265;
  unsigned int v266;
  _BOOL4 v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v271 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v169 = *(a2 - 2);
        v170 = v10[1];
        v182 = v169 == v170;
        v171 = v169 < v170;
        if (v182)
          v171 = *(a2 - 3) < *v10;
        if (v171)
          goto LABEL_167;
        return result;
      case 3:
        v172 = v10 + 3;
        v173 = v10[3];
        v174 = v10[4];
        v175 = v10[1];
        v182 = v174 == v175;
        v176 = v174 < v175;
        if (v182)
          v176 = v173 < *v10;
        v177 = *(a2 - 2);
        v178 = *(a2 - 3) < v173;
        v182 = v177 == v174;
        v179 = v177 < v174;
        if (!v182)
          v178 = v179;
        if (v176)
        {
          if (v178)
          {
LABEL_167:
            v313 = v10[2];
            v290 = *(_QWORD *)v10;
            v180 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v180;
            *(a2 - 1) = v313;
            *(_QWORD *)v8 = v290;
          }
          else
          {
            v316 = v10[2];
            v293 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v172;
            v10[2] = v10[5];
            *v172 = v293;
            v10[5] = v316;
            v265 = *(a2 - 2);
            v266 = v10[4];
            v182 = v265 == v266;
            v267 = v265 < v266;
            if (v182)
              v267 = *(a2 - 3) < v10[3];
            if (v267)
            {
              v268 = *v172;
              v269 = v10[5];
              v270 = *(a2 - 1);
              *v172 = *(_QWORD *)v8;
              v10[5] = v270;
              *(a2 - 1) = v269;
              *(_QWORD *)v8 = v268;
            }
          }
        }
        else if (v178)
        {
          v223 = *v172;
          v224 = v10[5];
          v225 = *(a2 - 1);
          *v172 = *(_QWORD *)v8;
          v10[5] = v225;
          *(a2 - 1) = v224;
          *(_QWORD *)v8 = v223;
          LODWORD(v223) = v10[4];
          v226 = v10[1];
          v182 = (_DWORD)v223 == v226;
          v227 = v223 < v226;
          if (v182)
            v227 = v10[3] < *v10;
          if (v227)
          {
            v314 = v10[2];
            v291 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v172;
            v10[2] = v10[5];
            *v172 = v291;
            v10[5] = v314;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_239531FA8(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_239C284A8(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 <= 287)
        {
          v181 = v10 + 3;
          v182 = v10 == a2 || v181 == a2;
          v183 = v182;
          if ((a4 & 1) != 0)
          {
            if ((v183 & 1) == 0)
            {
              v184 = 0;
              v185 = v10;
              do
              {
                v187 = v181;
                v189 = v185[3];
                v188 = v185[4];
                v190 = v185[1];
                v182 = v188 == v190;
                v191 = v188 < v190;
                if (v182)
                  v191 = v189 < *v185;
                if (v191)
                {
                  v192 = v185[5];
                  v193 = v184;
                  do
                  {
                    v194 = (char *)v10 + v193;
                    *(_QWORD *)(v194 + 12) = *(_QWORD *)((char *)v10 + v193);
                    *((_DWORD *)v194 + 5) = *(unsigned int *)((char *)v10 + v193 + 8);
                    if (!v193)
                    {
                      v186 = v10;
                      goto LABEL_180;
                    }
                    v195 = *((_DWORD *)v194 - 2);
                    v196 = v189 < *((_DWORD *)v194 - 3);
                    v182 = v188 == v195;
                    v197 = v188 < v195;
                    if (!v182)
                      v196 = v197;
                    v193 -= 12;
                  }
                  while (v196);
                  v186 = (unsigned int *)((char *)v10 + v193 + 12);
LABEL_180:
                  *v186 = v189;
                  v186[1] = v188;
                  v186[2] = v192;
                }
                v181 = v187 + 3;
                v184 += 12;
                v185 = v187;
              }
              while (v187 + 3 != a2);
            }
          }
          else if ((v183 & 1) == 0)
          {
            do
            {
              v228 = v181;
              v230 = v7[3];
              v229 = v7[4];
              v231 = v7[1];
              v182 = v229 == v231;
              v232 = v229 < v231;
              if (v182)
                v232 = v230 < *v7;
              if (v232)
              {
                v233 = v7[5];
                v234 = v228;
                do
                {
                  v235 = v234;
                  v236 = *(_QWORD *)(v234 - 3);
                  v234 -= 3;
                  *(_QWORD *)v235 = v236;
                  v235[2] = *(v235 - 1);
                  v237 = *(v235 - 5);
                  v238 = v230 < *(v235 - 6);
                  v182 = v229 == v237;
                  v239 = v229 < v237;
                  if (!v182)
                    v238 = v239;
                }
                while (v238);
                *v234 = v230;
                v234[1] = v229;
                v234[2] = v233;
              }
              v181 = v228 + 3;
              v7 = v228;
            }
            while (v228 + 3 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v198 = (unint64_t)(v12 - 2) >> 1;
            v199 = v198;
            do
            {
              v200 = v199;
              if (v198 >= v199)
              {
                v201 = (2 * v199) | 1;
                v202 = &v10[3 * v201];
                if (2 * v200 + 2 >= v12)
                {
                  v205 = *v202;
                }
                else
                {
                  v203 = v10[3 * v201 + 1];
                  v204 = v202[4];
                  v205 = *v202;
                  v182 = v203 == v204;
                  v206 = v203 < v204;
                  if (v182)
                    v206 = *v202 < v202[3];
                  if (v206)
                  {
                    v205 = v202[3];
                    v202 += 3;
                    v201 = 2 * v200 + 2;
                  }
                }
                v207 = &v10[3 * v200];
                v208 = v202[1];
                v209 = v207[1];
                v210 = *v207;
                LODWORD(result) = v205 < *v207;
                v182 = v208 == v209;
                v211 = v208 < v209;
                if (v182)
                  result = result;
                else
                  result = v211;
                if ((result & 1) == 0)
                {
                  result = v207[2];
                  do
                  {
                    v220 = v207;
                    v207 = v202;
                    v221 = *(_QWORD *)v202;
                    v220[2] = v207[2];
                    *(_QWORD *)v220 = v221;
                    if (v198 < v201)
                      break;
                    v222 = (2 * v201) | 1;
                    v202 = &v10[3 * v222];
                    v201 = 2 * v201 + 2;
                    if (v201 < v12)
                    {
                      v212 = v10[3 * v222 + 1];
                      v213 = v202[4];
                      v182 = v212 == v213;
                      v214 = v212 < v213;
                      if (v182)
                        v214 = *v202 < v202[3];
                      v215 = !v214;
                      v216 = v214 ? v202[3] : *v202;
                      if (v215)
                        v201 = v222;
                      else
                        v202 += 3;
                    }
                    else
                    {
                      v216 = *v202;
                      v201 = v222;
                    }
                    v217 = v202[1];
                    v218 = v216 < v210;
                    v182 = v217 == v209;
                    v219 = v217 < v209;
                    if (v182)
                      v219 = v218;
                  }
                  while (!v219);
                  *v207 = v210;
                  v207[1] = v209;
                  v207[2] = result;
                }
              }
              v199 = v200 - 1;
            }
            while (v200);
            v240 = v11 / 0xCuLL;
            do
            {
              v242 = 0;
              v315 = v10[2];
              v292 = *(_QWORD *)v10;
              v243 = (char *)v10;
              do
              {
                v245 = v242 + 1;
                v246 = &v243[12 * v242 + 12];
                v247 = (2 * v242) | 1;
                v248 = 2 * v242 + 2;
                if (v248 < v240)
                {
                  v249 = *(_DWORD *)&v243[12 * v245 + 4];
                  v250 = *((_DWORD *)v246 + 4);
                  result = *(_DWORD *)v246 < *((_DWORD *)v246 + 3);
                  v182 = v249 == v250;
                  v251 = v249 < v250;
                  if (v182)
                    v251 = *(_DWORD *)v246 < *((_DWORD *)v246 + 3);
                  if (v251)
                  {
                    v246 += 12;
                    v247 = v248;
                  }
                }
                v244 = *(_QWORD *)v246;
                *((_DWORD *)v243 + 2) = *((_DWORD *)v246 + 2);
                *(_QWORD *)v243 = v244;
                v243 = v246;
                v242 = v247;
              }
              while (v247 <= (uint64_t)((unint64_t)(v240 - 2) >> 1));
              a2 -= 3;
              if (v246 == (char *)a2)
              {
                *((_DWORD *)v246 + 2) = v315;
                *(_QWORD *)v246 = v292;
              }
              else
              {
                v252 = *(_QWORD *)a2;
                *((_DWORD *)v246 + 2) = a2[2];
                *(_QWORD *)v246 = v252;
                a2[2] = v315;
                *(_QWORD *)a2 = v292;
                v253 = v246 - (char *)v10 + 12;
                if (v253 >= 13)
                {
                  v254 = (v253 / 0xCuLL - 2) >> 1;
                  v255 = (char *)&v10[3 * v254];
                  v256 = *((_DWORD *)v255 + 1);
                  v258 = *(_DWORD *)v246;
                  v257 = *((_DWORD *)v246 + 1);
                  v182 = v256 == v257;
                  v259 = v256 < v257;
                  if (v182)
                    v259 = *(_DWORD *)v255 < *(_DWORD *)v246;
                  if (v259)
                  {
                    v260 = *((_DWORD *)v246 + 2);
                    do
                    {
                      v261 = v246;
                      v246 = v255;
                      v262 = *(_QWORD *)v255;
                      result = *((unsigned int *)v246 + 2);
                      *((_DWORD *)v261 + 2) = result;
                      *(_QWORD *)v261 = v262;
                      if (!v254)
                        break;
                      v254 = (v254 - 1) >> 1;
                      v255 = (char *)&v10[3 * v254];
                      v263 = *((_DWORD *)v255 + 1);
                      result = *(_DWORD *)v255 < v258;
                      v182 = v263 == v257;
                      v264 = v263 < v257;
                      if (v182)
                        v264 = *(_DWORD *)v255 < v258;
                    }
                    while (v264);
                    *(_DWORD *)v246 = v258;
                    *((_DWORD *)v246 + 1) = v257;
                    *((_DWORD *)v246 + 2) = v260;
                  }
                }
              }
            }
            while (v240-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[3 * ((unint64_t)v12 >> 1)];
        v16 = *(a2 - 3);
        v15 = *(a2 - 2);
        if ((unint64_t)v11 >= 0x601)
        {
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v182 = *v18 == v17;
          v20 = *v18 < v17;
          if (v182)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v182 = v15 == v19;
          v22 = v15 < v19;
          if (v182)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v294 = v10[2];
              v272 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
              goto LABEL_35;
            }
            v300 = v10[2];
            v278 = *(_QWORD *)v10;
            v38 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v38;
            v14[2] = v300;
            *(_QWORD *)v14 = v278;
            v39 = *(a2 - 2);
            v40 = v39 < *v18;
            if (v39 == *v18)
              v40 = *(a2 - 3) < *v14;
            if (v40)
            {
              v294 = v14[2];
              v272 = *(_QWORD *)v14;
              v41 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v41;
LABEL_35:
              *(a2 - 1) = v294;
              *(_QWORD *)v8 = v272;
            }
          }
          else if (v22)
          {
            v296 = v14[2];
            v274 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v296;
            *(_QWORD *)v8 = v274;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v297 = v10[2];
              v275 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v297;
              *(_QWORD *)v14 = v275;
            }
          }
          v42 = (uint64_t *)(v10 + 3);
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v10[4];
          v50 = v46 < v10[3];
          v182 = v48 == v49;
          v51 = v48 < v49;
          if (v182)
            v51 = v50;
          v52 = *(a2 - 5);
          v53 = *(a2 - 6) < v45;
          v182 = v52 == v48;
          v54 = v52 < v48;
          if (v182)
            v54 = v53;
          if (v51)
          {
            if (v54)
            {
              v55 = *v42;
              v56 = v10[5];
              v57 = *(a2 - 4);
              *v42 = *(_QWORD *)v271;
              v10[5] = v57;
              *(a2 - 4) = v56;
              *(_QWORD *)v271 = v55;
            }
            else
            {
              v69 = *v42;
              v70 = v10[5];
              v71 = v44[2];
              *v42 = *(_QWORD *)v44;
              v10[5] = v71;
              v44[2] = v70;
              *(_QWORD *)v44 = v69;
              LODWORD(v69) = *(a2 - 5);
              v72 = v69 < *v47;
              if ((_DWORD)v69 == *v47)
                v72 = *(a2 - 6) < *v44;
              if (v72)
              {
                v303 = v44[2];
                v281 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v271;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v303;
                *(_QWORD *)v271 = v281;
              }
            }
          }
          else if (v54)
          {
            v301 = v44[2];
            v279 = *(_QWORD *)v44;
            v58 = *(_QWORD *)v271;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v58;
            *(a2 - 4) = v301;
            *(_QWORD *)v271 = v279;
            v59 = v10[4];
            v60 = *v47 < v59;
            if (*v47 == v59)
              v60 = *v44 < v10[3];
            if (v60)
            {
              v61 = *v42;
              v62 = v10[5];
              v63 = v44[2];
              *v42 = *(_QWORD *)v44;
              v10[5] = v63;
              v44[2] = v62;
              *(_QWORD *)v44 = v61;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = &v10[3 * v13];
          v78 = v75[3];
          v76 = v75 + 3;
          v77 = v78;
          v79 = v76 + 1;
          v80 = v76[1];
          v81 = v10[7];
          v82 = v78 < v10[6];
          v182 = v80 == v81;
          v83 = v80 < v81;
          if (v182)
            v83 = v82;
          v84 = *(a2 - 8);
          v85 = *(a2 - 9) < v77;
          v182 = v84 == v80;
          v86 = v84 < v80;
          if (v182)
            v86 = v85;
          if (v83)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v76[2];
              *v74 = *(_QWORD *)v76;
              v10[8] = v98;
              v76[2] = v97;
              *(_QWORD *)v76 = v96;
              LODWORD(v96) = *(a2 - 8);
              v99 = v96 < *v79;
              if ((_DWORD)v96 == *v79)
                v99 = *(a2 - 9) < *v76;
              if (v99)
              {
                v305 = v76[2];
                v283 = *(_QWORD *)v76;
                v100 = *(_QWORD *)v9;
                v76[2] = *(a2 - 7);
                *(_QWORD *)v76 = v100;
                *(a2 - 7) = v305;
                *(_QWORD *)v9 = v283;
              }
            }
          }
          else if (v86)
          {
            v304 = v76[2];
            v282 = *(_QWORD *)v76;
            v90 = *(_QWORD *)v9;
            v76[2] = *(a2 - 7);
            *(_QWORD *)v76 = v90;
            *(a2 - 7) = v304;
            *(_QWORD *)v9 = v282;
            v91 = v10[7];
            v92 = *v79 < v91;
            if (*v79 == v91)
              v92 = *v76 < v10[6];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v76[2];
              *v74 = *(_QWORD *)v76;
              v10[8] = v95;
              v76[2] = v94;
              *(_QWORD *)v76 = v93;
            }
          }
          v101 = *v18;
          v102 = *v18 < *v47;
          if (*v18 == *v47)
            v102 = *v14 < *v44;
          result = *v76;
          v182 = *v79 == v101;
          v103 = *v79 < v101;
          if (v182)
            v103 = result < *v14;
          if (v102)
          {
            if (v103)
            {
              v306 = v44[2];
              v284 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v76;
              v44[2] = v76[2];
              goto LABEL_89;
            }
            v309 = v44[2];
            v287 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v309;
            *(_QWORD *)v14 = v287;
            v107 = *v18;
            v182 = *v79 == v107;
            v108 = *v79 < v107;
            if (v182)
              v108 = *v76 < *v14;
            if (v108)
            {
              v306 = v14[2];
              v284 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v76;
              v14[2] = v76[2];
LABEL_89:
              v76[2] = v306;
              *(_QWORD *)v76 = v284;
            }
          }
          else if (v103)
          {
            v307 = v14[2];
            v285 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v76;
            v14[2] = v76[2];
            v76[2] = v307;
            *(_QWORD *)v76 = v285;
            v104 = *v18;
            v105 = *v47;
            v182 = v104 == v105;
            v106 = v104 < v105;
            if (v182)
              v106 = *v14 < *v44;
            if (v106)
            {
              v308 = v44[2];
              v286 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v308;
              *(_QWORD *)v14 = v286;
            }
          }
          v310 = v10[2];
          v288 = *(_QWORD *)v10;
          v109 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v109;
          v14[2] = v310;
          *(_QWORD *)v14 = v288;
          goto LABEL_91;
        }
        v24 = v10[1];
        v25 = &v10[3 * v13 + 1];
        v26 = v24 < *v25;
        if (v24 == *v25)
          v26 = *v10 < *v14;
        v27 = v16 < *v10;
        v182 = v15 == v24;
        v28 = v15 < v24;
        if (v182)
          v28 = v27;
        if (v26)
        {
          if (v28)
          {
            v295 = v14[2];
            v273 = *(_QWORD *)v14;
            v29 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v29;
LABEL_52:
            *(a2 - 1) = v295;
            *(_QWORD *)v8 = v273;
            goto LABEL_91;
          }
          v302 = v14[2];
          v280 = *(_QWORD *)v14;
          v64 = *(_QWORD *)v10;
          v14[2] = v10[2];
          *(_QWORD *)v14 = v64;
          v10[2] = v302;
          *(_QWORD *)v10 = v280;
          v65 = *(a2 - 2);
          v66 = v10[1];
          v182 = v65 == v66;
          v67 = v65 < v66;
          if (v182)
            v67 = *(a2 - 3) < *v10;
          if (v67)
          {
            v295 = v10[2];
            v273 = *(_QWORD *)v10;
            v68 = *(_QWORD *)v8;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v68;
            goto LABEL_52;
          }
        }
        else if (v28)
        {
          v298 = v10[2];
          v276 = *(_QWORD *)v10;
          v34 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v34;
          *(a2 - 1) = v298;
          *(_QWORD *)v8 = v276;
          v35 = *v25;
          LODWORD(v34) = v10[1];
          v182 = (_DWORD)v34 == v35;
          v36 = v34 < v35;
          if (v182)
            v36 = *v10 < *v14;
          if (v36)
          {
            v299 = v14[2];
            v277 = *(_QWORD *)v14;
            v37 = *(_QWORD *)v10;
            v14[2] = v10[2];
            *(_QWORD *)v14 = v37;
            v10[2] = v299;
            *(_QWORD *)v10 = v277;
          }
        }
LABEL_91:
        --a3;
        v110 = *v10;
        if ((a4 & 1) == 0)
        {
          v111 = v10[1];
          v112 = *(v10 - 2);
          v182 = v112 == v111;
          v113 = v112 < v111;
          if (v182)
            v113 = *(v10 - 3) < v110;
          if (!v113)
          {
            v143 = *(_QWORD *)(v10 + 1);
            v144 = *(a2 - 2);
            v182 = (_DWORD)v143 == v144;
            v145 = v143 < v144;
            if (v182)
              v145 = v110 < *(a2 - 3);
            if (v145)
            {
              do
              {
                v146 = v10[3];
                v147 = v10[4];
                v10 += 3;
                v148 = v110 < v146;
                v182 = (_DWORD)v143 == v147;
                v149 = v143 < v147;
                if (!v182)
                  v148 = v149;
              }
              while (!v148);
            }
            else
            {
              v150 = v10 + 3;
              do
              {
                v10 = v150;
                if (v150 >= a2)
                  break;
                v151 = v150[1];
                v152 = v110 < *v10;
                v182 = (_DWORD)v143 == v151;
                v153 = v143 < v151;
                if (!v182)
                  v152 = v153;
                v150 = v10 + 3;
              }
              while (!v152);
            }
            v154 = a2;
            if (v10 < a2)
            {
              v154 = a2;
              do
              {
                v155 = *(v154 - 3);
                v156 = *(v154 - 2);
                v154 -= 3;
                v157 = v110 < v155;
                v182 = (_DWORD)v143 == v156;
                v158 = v143 < v156;
                if (!v182)
                  v157 = v158;
              }
              while (v157);
            }
            while (v10 < v154)
            {
              v312 = v10[2];
              v289 = *(_QWORD *)v10;
              v159 = *(_QWORD *)v154;
              v10[2] = v154[2];
              *(_QWORD *)v10 = v159;
              v154[2] = v312;
              *(_QWORD *)v154 = v289;
              do
              {
                v160 = v10[3];
                v161 = v10[4];
                v10 += 3;
                v162 = v110 < v160;
                v182 = (_DWORD)v143 == v161;
                v163 = v143 < v161;
                if (!v182)
                  v162 = v163;
              }
              while (!v162);
              do
              {
                v164 = *(v154 - 3);
                v165 = *(v154 - 2);
                v154 -= 3;
                v166 = v110 < v164;
                v182 = (_DWORD)v143 == v165;
                v167 = v143 < v165;
                if (!v182)
                  v166 = v167;
              }
              while (v166);
            }
            if (v10 - 3 != v7)
            {
              v168 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v168;
            }
            a4 = 0;
            *(v10 - 3) = v110;
            *((_QWORD *)v10 - 1) = v143;
            continue;
          }
        }
        v114 = *(_QWORD *)(v10 + 1);
        v115 = v10;
        do
        {
          v116 = v115;
          v117 = v115[3];
          v115 += 3;
          v118 = v116[4];
          v119 = v117 < v110;
          v182 = v118 == (_DWORD)v114;
          v120 = v118 < v114;
          if (!v182)
            v119 = v120;
        }
        while (v119);
        v121 = a2;
        if (v116 == v10)
        {
          v121 = a2;
          do
          {
            if (v115 >= v121)
              break;
            v126 = *(v121 - 3);
            v127 = *(v121 - 2);
            v121 -= 3;
            v128 = v126 < v110;
            v182 = v127 == (_DWORD)v114;
            v129 = v127 < v114;
            if (!v182)
              v128 = v129;
          }
          while (!v128);
        }
        else
        {
          do
          {
            v122 = *(v121 - 3);
            v123 = *(v121 - 2);
            v121 -= 3;
            v124 = v122 < v110;
            v182 = v123 == (_DWORD)v114;
            v125 = v123 < v114;
            if (!v182)
              v124 = v125;
          }
          while (!v124);
        }
        v10 = v115;
        if (v115 < v121)
        {
          v130 = (unint64_t)v121;
          do
          {
            v131 = *(_QWORD *)v10;
            v311 = v10[2];
            v132 = *(_DWORD *)(v130 + 8);
            *(_QWORD *)v10 = *(_QWORD *)v130;
            v10[2] = v132;
            *(_DWORD *)(v130 + 8) = v311;
            *(_QWORD *)v130 = v131;
            do
            {
              v133 = v10[3];
              v134 = v10[4];
              v10 += 3;
              v135 = v133 < v110;
              v182 = v134 == (_DWORD)v114;
              v136 = v134 < v114;
              if (!v182)
                v135 = v136;
            }
            while (v135);
            do
            {
              v137 = *(_DWORD *)(v130 - 12);
              v138 = *(_DWORD *)(v130 - 8);
              v130 -= 12;
              v139 = v137 < v110;
              v182 = v138 == (_DWORD)v114;
              v140 = v138 < v114;
              if (!v182)
                v139 = v140;
            }
            while (!v139);
          }
          while ((unint64_t)v10 < v130);
        }
        if (v10 - 3 != v7)
        {
          v141 = *(_QWORD *)(v10 - 3);
          v7[2] = *(v10 - 1);
          *(_QWORD *)v7 = v141;
        }
        *(v10 - 3) = v110;
        *((_QWORD *)v10 - 1) = v114;
        if (v115 < v121)
        {
LABEL_124:
          result = sub_239C272BC(v7, v10 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v142 = sub_239C28600(v7, v10 - 3);
        result = sub_239C28600(v10, a2);
        if (!(_DWORD)result)
        {
          if (v142)
            continue;
          goto LABEL_124;
        }
        a2 = v10 - 3;
        if (!v142)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *sub_239C284A8(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _DWORD *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int v35;

  result = sub_239531FA8(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  v13 = v11 == v12;
  v14 = v11 < v12;
  if (v13)
    v14 = *a5 < *a4;
  if (v14)
  {
    v15 = a4[2];
    v16 = *(_QWORD *)a4;
    v17 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v17;
    *(_QWORD *)a5 = v16;
    a5[2] = v15;
    v18 = a4[1];
    v19 = a3[1];
    v13 = v18 == v19;
    v20 = v18 < v19;
    if (v13)
      v20 = *a4 < *a3;
    if (v20)
    {
      v21 = a3[2];
      v22 = *(_QWORD *)a3;
      v23 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v23;
      *(_QWORD *)a4 = v22;
      a4[2] = v21;
      v24 = a3[1];
      v25 = a2[1];
      v13 = v24 == v25;
      v26 = v24 < v25;
      if (v13)
        v26 = *a3 < *a2;
      if (v26)
      {
        v27 = a2[2];
        v28 = *(_QWORD *)a2;
        v29 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v29;
        *(_QWORD *)a3 = v28;
        a3[2] = v27;
        v30 = a2[1];
        v31 = a1[1];
        v13 = v30 == v31;
        v32 = v30 < v31;
        if (v13)
          v32 = *a2 < *a1;
        if (v32)
        {
          v33 = a1[2];
          v34 = *(_QWORD *)a1;
          v35 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v35;
          *(_QWORD *)a2 = v34;
          a2[2] = v33;
        }
      }
    }
  }
  return result;
}

BOOL sub_239C28600(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  _BOOL4 v73;
  _BOOL4 v74;
  unsigned int v75;
  uint64_t v76;
  char *v77;
  unsigned int v78;
  BOOL v79;
  BOOL v80;

  v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
        }
        else
        {
          v51 = a1[2];
          v52 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v52;
          a1[5] = v51;
          v53 = *(a2 - 2);
          v54 = a1[4];
          v8 = v53 == v54;
          v55 = v53 < v54;
          if (v8)
            v55 = *(a2 - 3) < a1[3];
          if (v55)
          {
            v56 = a1[5];
            v57 = *v13;
            v58 = *(a2 - 1);
            *v13 = *(_QWORD *)v18;
            a1[5] = v58;
            *(_QWORD *)v18 = v57;
            *(a2 - 1) = v56;
          }
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
        }
      }
      return 1;
    case 4uLL:
      sub_239531FA8(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_239C284A8(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v71 = *v66;
    v70 = v66[1];
    v72 = v24[1];
    v73 = *v66 < *v24;
    v8 = v70 == v72;
    v74 = v70 < v72;
    if (!v8)
      v73 = v74;
    if (v73)
    {
      v75 = v66[2];
      v76 = v67;
      do
      {
        v77 = (char *)a1 + v76;
        *(_QWORD *)(v77 + 36) = *(_QWORD *)((char *)a1 + v76 + 24);
        *((_DWORD *)v77 + 11) = *(unsigned int *)((char *)a1 + v76 + 32);
        if (v76 == -24)
        {
          v69 = a1;
          goto LABEL_41;
        }
        v78 = *((_DWORD *)v77 + 4);
        v79 = v71 < *((_DWORD *)v77 + 3);
        v8 = v70 == v78;
        v80 = v70 < v78;
        if (!v8)
          v79 = v80;
        v76 -= 12;
      }
      while (v79);
      v69 = (unsigned int *)((char *)a1 + v76 + 36);
LABEL_41:
      *v69 = v71;
      v69[1] = v70;
      v69[2] = v75;
      if (++v68 == 8)
        return v66 + 3 == a2;
    }
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
}

unsigned int *sub_239C28A18(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL4 v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a2 < *result;
  if (*a2 == *result)
    v6 = v5 < result[1];
  v7 = a3[1] < v5;
  v8 = *a3 == v4;
  v9 = *a3 < v4;
  if (v8)
    v9 = v7;
  if (v6)
  {
    if (v9)
    {
      v10 = result[2];
      v11 = *(_QWORD *)result;
      v12 = a3[2];
      *(_QWORD *)result = *(_QWORD *)a3;
      result[2] = v12;
LABEL_17:
      *(_QWORD *)a3 = v11;
      a3[2] = v10;
      goto LABEL_18;
    }
    v20 = result[2];
    v21 = *(_QWORD *)result;
    v22 = a2[2];
    *(_QWORD *)result = *(_QWORD *)a2;
    result[2] = v22;
    *(_QWORD *)a2 = v21;
    a2[2] = v20;
    v23 = *a3 < *a2;
    if (*a3 == *a2)
      v23 = a3[1] < a2[1];
    if (v23)
    {
      v10 = a2[2];
      v11 = *(_QWORD *)a2;
      v24 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v24;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    v13 = a2[2];
    v14 = *(_QWORD *)a2;
    v15 = a3[2];
    *(_QWORD *)a2 = *(_QWORD *)a3;
    a2[2] = v15;
    *(_QWORD *)a3 = v14;
    a3[2] = v13;
    v16 = *a2 < *result;
    if (*a2 == *result)
      v16 = a2[1] < result[1];
    if (v16)
    {
      v17 = result[2];
      v18 = *(_QWORD *)result;
      v19 = a2[2];
      *(_QWORD *)result = *(_QWORD *)a2;
      result[2] = v19;
      *(_QWORD *)a2 = v18;
      a2[2] = v17;
    }
  }
LABEL_18:
  v25 = *a4 < *a3;
  if (*a4 == *a3)
    v25 = a4[1] < a3[1];
  if (v25)
  {
    v26 = a3[2];
    v27 = *(_QWORD *)a3;
    v28 = a4[2];
    *(_QWORD *)a3 = *(_QWORD *)a4;
    a3[2] = v28;
    *(_QWORD *)a4 = v27;
    a4[2] = v26;
    v29 = *a3 < *a2;
    if (*a3 == *a2)
      v29 = a3[1] < a2[1];
    if (v29)
    {
      v30 = a2[2];
      v31 = *(_QWORD *)a2;
      v32 = a3[2];
      *(_QWORD *)a2 = *(_QWORD *)a3;
      a2[2] = v32;
      *(_QWORD *)a3 = v31;
      a3[2] = v30;
      v33 = *a2 < *result;
      if (*a2 == *result)
        v33 = a2[1] < result[1];
      if (v33)
      {
        v34 = result[2];
        v35 = *(_QWORD *)result;
        v36 = a2[2];
        *(_QWORD *)result = *(_QWORD *)a2;
        result[2] = v36;
        *(_QWORD *)a2 = v35;
        a2[2] = v34;
      }
    }
  }
  return result;
}

unsigned int *sub_239C28C18(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  _BOOL4 v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  result = sub_239C28A18(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] < a4[1];
  if (v11)
  {
    v12 = a4[2];
    v13 = *(_QWORD *)a4;
    v14 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v14;
    *(_QWORD *)a5 = v13;
    a5[2] = v12;
    v15 = *a4 < *a3;
    if (*a4 == *a3)
      v15 = a4[1] < a3[1];
    if (v15)
    {
      v16 = a3[2];
      v17 = *(_QWORD *)a3;
      v18 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v18;
      *(_QWORD *)a4 = v17;
      a4[2] = v16;
      v19 = *a3 < *a2;
      if (*a3 == *a2)
        v19 = a3[1] < a2[1];
      if (v19)
      {
        v20 = a2[2];
        v21 = *(_QWORD *)a2;
        v22 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v22;
        *(_QWORD *)a3 = v21;
        a3[2] = v20;
        v23 = *a2 < *a1;
        if (*a2 == *a1)
          v23 = a2[1] < a1[1];
        if (v23)
        {
          v24 = a1[2];
          v25 = *(_QWORD *)a1;
          v26 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v26;
          *(_QWORD *)a2 = v25;
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

BOOL sub_239C28D70(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  _BOOL4 v71;
  _BOOL4 v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  unsigned int v76;
  BOOL v77;
  BOOL v78;

  v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
        }
        else
        {
          v50 = a1[2];
          v51 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v51;
          a1[5] = v50;
          v52 = *(a2 - 3);
          v53 = a1[3];
          v7 = v52 == v53;
          v54 = v52 < v53;
          if (v7)
            v54 = *(a2 - 2) < a1[4];
          if (v54)
          {
            v55 = a1[5];
            v56 = *v12;
            v57 = *(a2 - 1);
            *v12 = *(_QWORD *)v16;
            a1[5] = v57;
            *(_QWORD *)v16 = v56;
            *(a2 - 1) = v55;
          }
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
        }
      }
      return 1;
    case 4uLL:
      sub_239C28A18(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_239C28C18(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v68 = *v64;
    v69 = v64[1];
    v70 = *v23;
    v71 = v69 < v23[1];
    v7 = *v64 == v70;
    v72 = *v64 < v70;
    if (!v7)
      v71 = v72;
    if (v71)
    {
      v73 = v64[2];
      v74 = v65;
      do
      {
        v75 = (char *)a1 + v74;
        *(_QWORD *)(v75 + 36) = *(_QWORD *)((char *)a1 + v74 + 24);
        *((_DWORD *)v75 + 11) = *(unsigned int *)((char *)a1 + v74 + 32);
        if (v74 == -24)
        {
          v67 = a1;
          goto LABEL_43;
        }
        v76 = *((_DWORD *)v75 + 3);
        v77 = v69 < *((_DWORD *)v75 + 4);
        v7 = v68 == v76;
        v78 = v68 < v76;
        if (!v7)
          v77 = v78;
        v74 -= 12;
      }
      while (v77);
      v67 = (unsigned int *)((char *)a1 + v74 + 36);
LABEL_43:
      *v67 = v68;
      v67[1] = v69;
      v67[2] = v73;
      if (++v66 == 8)
        return v64 + 3 == a2;
    }
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
}

uint64_t *sub_239C29188(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  _DWORD *v13[9];

  if (result != a2)
  {
    v13[7] = v3;
    v13[8] = v4;
    v7 = result;
    v8 = a3 + 40;
    do
    {
      v9 = v7[10];
      if ((*(_BYTE *)(v9 + 52) & 6) != 0 || (*(_BYTE *)(v7[11] + 52) & 6) != 0 || (*(_BYTE *)(v7[12] + 36) & 6) != 0)
      {
        v12 = *(_DWORD *)v9;
        v13[0] = &v12;
        v10 = sub_2395EC77C(a3, &v12, (uint64_t)&unk_239EC6E98, v13);
        ++*((_DWORD *)v10 + 5);
        v12 = *(_DWORD *)v7[11];
        v13[0] = &v12;
        v11 = sub_2395EC77C(a3, &v12, (uint64_t)&unk_239EC6E98, v13);
        ++*((_DWORD *)v11 + 5);
        v12 = *(_DWORD *)v7[12];
        v13[0] = &v12;
        result = sub_2395EC77C(v8, &v12, (uint64_t)&unk_239EC6E98, v13);
        ++*((_DWORD *)result + 5);
      }
      v7 += 20;
    }
    while (v7 != a2);
  }
  return result;
}

uint64_t sub_239C292B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;

  v2 = *(_QWORD **)(a1 + 56);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 16);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

uint64_t sub_239C29320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  size_t v5;
  void *v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  unint64_t prime;
  void *v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v34[2];
  void *v35[2];
  float v36;
  void *v37[2];
  void *__p[2];
  float v39;
  unsigned int v40;
  unsigned int *v41;

  if (!*(_BYTE *)(a1 + 122))
  {
    if (!*(_BYTE *)(a1 + 121))
    {
      v2 = *(_QWORD *)(a1 + 176);
      v3 = *(_QWORD *)(a1 + 184);
      *(_BYTE *)(a1 + 121) = v2 != v3;
      if (v2 == v3)
        *(_BYTE *)(a1 + 121) = *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 208);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 121))
      goto LABEL_60;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)v35 = 0u;
    v36 = 1.0;
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)__p = 0u;
    v39 = 1.0;
    v4 = (float)*(unint64_t *)(a1 + 24);
    v5 = (unint64_t)v4;
    if ((unint64_t)v4 == 1)
    {
      v5 = 2;
LABEL_22:
      sub_239427FE0((uint64_t)v34, v5);
LABEL_23:
      prime = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / v39);
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v12 = v37[1];
      if ((void *)prime > v37[1])
        goto LABEL_28;
      if ((void *)prime < v37[1])
      {
        v13 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v39);
        if (v37[1] < (void *)3
          || (v14 = (uint8x8_t)vcnt_s8((int8x8_t)v37[1]), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] > 1uLL))
        {
          v13 = std::__next_prime(v13);
        }
        else
        {
          v15 = 1 << -(char)__clz(v13 - 1);
          if (v13 >= 2)
            v13 = v15;
        }
        if (prime <= v13)
          prime = v13;
        if (prime < (unint64_t)v12)
LABEL_28:
          sub_239427FE0((uint64_t)v37, prime);
      }
      v16 = *(_QWORD *)(a1 + 56);
      for (i = *(_QWORD *)(a1 + 64); v16 != i; v16 += 120)
      {
        v18 = *(_QWORD *)(v16 + 48);
        if (*(_BYTE *)(v16 + 112)
          || (*(_BYTE *)(v18 + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v16 + 56) + 52) & 6) != 0)
        {
          *(_BYTE *)(v16 + 112) = 1;
          v40 = *(_DWORD *)v18;
          v41 = &v40;
          v19 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v19 + 5);
          v40 = **(_DWORD **)(v16 + 56);
          v41 = &v40;
          v20 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v20 + 5);
        }
      }
      v21 = *(_QWORD *)(a1 + 80);
      for (j = *(_QWORD *)(a1 + 88); v21 != j; v21 += 160)
      {
        v23 = *(_QWORD *)(v21 + 80);
        if (*(_BYTE *)(v21 + 152)
          || (*(_BYTE *)(v23 + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v21 + 88) + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v21 + 96) + 36) & 6) != 0)
        {
          *(_BYTE *)(v21 + 152) = 1;
          v40 = *(_DWORD *)v23;
          v41 = &v40;
          v24 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v24 + 5);
          v40 = **(_DWORD **)(v21 + 88);
          v41 = &v40;
          v25 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v25 + 5);
          v40 = **(_DWORD **)(v21 + 96);
          v41 = &v40;
          v26 = sub_2395EC77C((uint64_t)v37, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v26 + 5);
        }
      }
      sub_239C29B04((_QWORD *)(a1 + 128), (uint64_t *)v35[0], a1 + 8);
      sub_239C29D18((_QWORD *)(a1 + 128), (uint64_t *)__p[0], a1 + 8);
      v27 = __p[0];
      if (__p[0])
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      v29 = v37[0];
      v37[0] = 0;
      if (v29)
        operator delete(v29);
      v30 = v35[0];
      if (v35[0])
      {
        do
        {
          v31 = (_QWORD *)*v30;
          operator delete(v30);
          v30 = v31;
        }
        while (v31);
      }
      v32 = v34[0];
      v34[0] = 0;
      if (v32)
        operator delete(v32);
LABEL_60:
      *(_BYTE *)(a1 + 122) = 1;
      return a1 + 128;
    }
    if ((v5 & ((unint64_t)v4 - 1)) != 0)
    {
      v5 = std::__next_prime((unint64_t)v4);
      v6 = v34[1];
      v7 = (void *)v5 >= v34[1];
      if ((void *)v5 > v34[1])
        goto LABEL_22;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      if (v5)
        goto LABEL_22;
    }
    if (v7)
      goto LABEL_23;
    v8 = vcvtps_u32_f32((float)(unint64_t)v35[1] / v36);
    if ((unint64_t)v6 < 3
      || (v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (v5 <= v8)
      v5 = v8;
    if (v5 >= (unint64_t)v6)
      goto LABEL_23;
    goto LABEL_22;
  }
  return a1 + 128;
}

void sub_239C297A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C292B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239C297C8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = a1 + 1;
  v1 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      if ((*((_BYTE *)v1 + 92) & 6) != 0)
      {
        v5 = (_QWORD *)v1[1];
        v6 = v5;
        v7 = v1;
        if (v5)
        {
          do
          {
            v8 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v7[2];
            v9 = *v8 == (_QWORD)v7;
            v7 = v8;
          }
          while (!v9);
        }
        v10 = v1;
        if (v5)
        {
          do
          {
            v11 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v10[2];
            v9 = *v11 == (_QWORD)v10;
            v10 = v11;
          }
          while (!v9);
        }
        if ((_QWORD *)*a1 == v1)
          *a1 = v11;
        v4 = (uint64_t *)a1[1];
        --a1[2];
        sub_2394F0930(v4, v1);
        operator delete(v1);
      }
      else
      {
        *((_BYTE *)v1 + 92) = 0;
        v12 = (_QWORD *)v1[1];
        if (v12)
        {
          do
          {
            v8 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v1[2];
            v9 = *v8 == (_QWORD)v1;
            v1 = v8;
          }
          while (!v9);
        }
      }
      v1 = v8;
    }
    while (v8 != v2);
  }
}

void sub_239C298DC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = (_QWORD *)a1[3];
  v2 = a1 + 4;
  if (v1 != a1 + 4)
  {
    do
    {
      if ((*((_BYTE *)v1 + 76) & 6) != 0)
      {
        v5 = (_QWORD *)v1[1];
        v6 = v5;
        v7 = v1;
        if (v5)
        {
          do
          {
            v8 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v7[2];
            v9 = *v8 == (_QWORD)v7;
            v7 = v8;
          }
          while (!v9);
        }
        v10 = v1;
        if (v5)
        {
          do
          {
            v11 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v10[2];
            v9 = *v11 == (_QWORD)v10;
            v10 = v11;
          }
          while (!v9);
        }
        if ((_QWORD *)a1[3] == v1)
          a1[3] = v11;
        v4 = (uint64_t *)a1[4];
        --a1[5];
        sub_2394F0930(v4, v1);
        operator delete(v1);
      }
      else
      {
        *((_BYTE *)v1 + 76) = 0;
        v12 = (_QWORD *)v1[1];
        if (v12)
        {
          do
          {
            v8 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v1[2];
            v9 = *v8 == (_QWORD)v1;
            v1 = v8;
          }
          while (!v9);
        }
      }
      v1 = v8;
    }
    while (v8 != v2);
  }
}

uint64_t sub_239C299F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)v5;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(a3 + 40) = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(a3 + 64) = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(a3 + 72) = *(_QWORD *)(v5 + 72);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(v5 + 80);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
      *(_QWORD *)(a3 + 96) = *(_QWORD *)(v5 + 96);
      v6 = *(_OWORD *)(v5 + 104);
      *(_QWORD *)(a3 + 120) = *(_QWORD *)(v5 + 120);
      *(_OWORD *)(a3 + 104) = v6;
      *(_QWORD *)(a3 + 128) = *(_QWORD *)(v5 + 128);
      v7 = *(_OWORD *)(v5 + 136);
      *(_QWORD *)(v5 + 136) = 0;
      *(_QWORD *)(v5 + 144) = 0;
      v8 = *(std::__shared_weak_count **)(a3 + 144);
      *(_OWORD *)(a3 + 136) = v7;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      *(_BYTE *)(a3 + 152) = *(_BYTE *)(v5 + 152);
      v5 += 160;
      a3 += 160;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_239C29B04(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  void **v31;

  if (a2)
  {
    v4 = a2;
    v31 = (void **)(a1 + 6);
    v5 = (_QWORD *)(a3 + 8);
    do
    {
      v7 = *v5;
      if (!*v5)
        goto LABEL_17;
      v8 = *((_DWORD *)v4 + 4);
      v9 = v5;
      do
      {
        v10 = *(_DWORD *)(v7 + 32);
        v11 = v10 >= v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v7;
        else
          v12 = (uint64_t *)(v7 + 8);
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v5 || v8 < *((_DWORD *)v9 + 8))
LABEL_17:
        v9 = v5;
      if (*((_DWORD *)v9 + 24) == *((_DWORD *)v4 + 5) && (*((_BYTE *)v9 + 92) & 6) == 0)
      {
        v14 = (char *)a1[7];
        v13 = a1[8];
        if ((unint64_t)v14 < v13)
        {
          *(_DWORD *)v14 = *((_DWORD *)v9 + 8);
          v6 = v14 + 4;
        }
        else
        {
          v15 = (char *)*v31;
          v16 = v14 - (_BYTE *)*v31;
          v17 = v16 >> 2;
          v18 = (v16 >> 2) + 1;
          if (v18 >> 62)
            sub_2394189F8();
          v19 = v13 - (_QWORD)v15;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 62)
              sub_239418A80();
            v21 = operator new(4 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          *v22 = *((_DWORD *)v9 + 8);
          v6 = v22 + 1;
          if (v14 != v15)
          {
            v23 = v14 - 4 - v15;
            if (v23 < 0x2C)
              goto LABEL_45;
            if ((unint64_t)(v14 - &v21[v16]) < 0x20)
              goto LABEL_45;
            v24 = (v23 >> 2) + 1;
            v25 = &v21[4 * v17 - 16];
            v26 = v14 - 16;
            v27 = v24 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v28 = *(_OWORD *)v26;
              *(v25 - 1) = *((_OWORD *)v26 - 1);
              *v25 = v28;
              v25 -= 2;
              v26 -= 32;
              v27 -= 8;
            }
            while (v27);
            v22 -= v24 & 0x7FFFFFFFFFFFFFF8;
            v14 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
            if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_45:
              do
              {
                v29 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *--v22 = v29;
              }
              while (v14 != v15);
            }
          }
          a1[6] = v22;
          a1[7] = v6;
          a1[8] = &v21[4 * v20];
          if (v15)
            operator delete(v15);
        }
        a1[7] = v6;
        *((_BYTE *)v9 + 92) ^= 2u;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

uint64_t sub_239C29D18(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _DWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  void **v31;

  if (a2)
  {
    v4 = a2;
    v31 = (void **)(a1 + 9);
    v5 = (_QWORD *)(a3 + 32);
    do
    {
      v7 = *v5;
      if (!*v5)
        goto LABEL_17;
      v8 = *((_DWORD *)v4 + 4);
      v9 = v5;
      do
      {
        v10 = *(_DWORD *)(v7 + 32);
        v11 = v10 >= v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v7;
        else
          v12 = (uint64_t *)(v7 + 8);
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v5 || v8 < *((_DWORD *)v9 + 8))
LABEL_17:
        v9 = v5;
      if (*((_DWORD *)v9 + 20) == *((_DWORD *)v4 + 5) && (*((_BYTE *)v9 + 76) & 6) == 0)
      {
        v14 = (char *)a1[10];
        v13 = a1[11];
        if ((unint64_t)v14 < v13)
        {
          *(_DWORD *)v14 = *((_DWORD *)v9 + 8);
          v6 = v14 + 4;
        }
        else
        {
          v15 = (char *)*v31;
          v16 = v14 - (_BYTE *)*v31;
          v17 = v16 >> 2;
          v18 = (v16 >> 2) + 1;
          if (v18 >> 62)
            sub_2394189F8();
          v19 = v13 - (_QWORD)v15;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 62)
              sub_239418A80();
            v21 = operator new(4 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          *v22 = *((_DWORD *)v9 + 8);
          v6 = v22 + 1;
          if (v14 != v15)
          {
            v23 = v14 - 4 - v15;
            if (v23 < 0x2C)
              goto LABEL_45;
            if ((unint64_t)(v14 - &v21[v16]) < 0x20)
              goto LABEL_45;
            v24 = (v23 >> 2) + 1;
            v25 = &v21[4 * v17 - 16];
            v26 = v14 - 16;
            v27 = v24 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v28 = *(_OWORD *)v26;
              *(v25 - 1) = *((_OWORD *)v26 - 1);
              *v25 = v28;
              v25 -= 2;
              v26 -= 32;
              v27 -= 8;
            }
            while (v27);
            v22 -= v24 & 0x7FFFFFFFFFFFFFF8;
            v14 -= 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
            if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_45:
              do
              {
                v29 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *--v22 = v29;
              }
              while (v14 != v15);
            }
          }
          a1[9] = v22;
          a1[10] = v6;
          a1[11] = &v21[4 * v20];
          if (v15)
            operator delete(v15);
        }
        a1[10] = v6;
        *((_BYTE *)v9 + 76) ^= 2u;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

void sub_239C29F2C(uint64_t a1, char **a2, char **a3)
{
  uint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int64_t v12;
  _BOOL8 v13;
  void **p_dst;
  char *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  void *__dst;
  char *v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a2[1] - *a2;
  if (v5)
  {
    sub_23942CB44(a1, v5 >> 2);
    v7 = *a2;
    v8 = a2[1];
    v9 = *(char **)a1;
    v11 = *a3;
    v10 = a3[1];
    __dst = *(void **)a1;
    v20 = v11;
    if (v7 == v8)
    {
      v12 = 0;
    }
    else
    {
      while (1)
      {
        v15 = v20;
        if (v20 == v10)
          break;
        v16 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 >= *(_DWORD *)v20)
        {
          v13 = *(_DWORD *)v20 >= v16;
          p_dst = (void **)&v20;
        }
        else
        {
          v15 = (char *)__dst;
          *(_DWORD *)__dst = v16;
          p_dst = &__dst;
          v13 = 1;
        }
        v7 += 4 * v13;
        *p_dst = v15 + 4;
        if (v7 == v8)
        {
          v12 = 0;
          v9 = (char *)__dst;
          goto LABEL_13;
        }
      }
      v9 = (char *)__dst;
      v12 = v8 - v7;
      if (v8 != v7)
        memmove(__dst, v7, v8 - v7);
    }
  }
  else
  {
    v12 = 0;
    v9 = 0;
    v17 = *a3;
    __dst = 0;
    v20 = v17;
  }
LABEL_13:
  v18 = &v9[v12];
  if (v18 != *(char **)(a1 + 8))
    *(_QWORD *)(a1 + 8) = v18;
}

void sub_239C2A05C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C2A078(uint64_t a1, char **a2, char **a3)
{
  uint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int64_t v12;
  _BOOL8 v13;
  void **p_dst;
  char *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  void *__dst;
  char *v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a2[1] - *a2;
  if (v5)
  {
    sub_23942CB44(a1, v5 >> 2);
    v7 = *a2;
    v8 = a2[1];
    v9 = *(char **)a1;
    v11 = *a3;
    v10 = a3[1];
    __dst = *(void **)a1;
    v20 = v11;
    if (v7 == v8)
    {
      v12 = 0;
    }
    else
    {
      while (1)
      {
        v15 = v20;
        if (v20 == v10)
          break;
        v16 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 >= *(_DWORD *)v20)
        {
          v13 = *(_DWORD *)v20 >= v16;
          p_dst = (void **)&v20;
        }
        else
        {
          v15 = (char *)__dst;
          *(_DWORD *)__dst = v16;
          p_dst = &__dst;
          v13 = 1;
        }
        v7 += 4 * v13;
        *p_dst = v15 + 4;
        if (v7 == v8)
        {
          v12 = 0;
          v9 = (char *)__dst;
          goto LABEL_13;
        }
      }
      v9 = (char *)__dst;
      v12 = v8 - v7;
      if (v8 != v7)
        memmove(__dst, v7, v8 - v7);
    }
  }
  else
  {
    v12 = 0;
    v9 = 0;
    v17 = *a3;
    __dst = 0;
    v20 = v17;
  }
LABEL_13:
  v18 = &v9[v12];
  if (v18 != *(char **)(a1 + 8))
    *(_QWORD *)(a1 + 8) = v18;
}

void sub_239C2A1A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C2A1C4(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  unsigned int *v12;
  char *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  size_t v24;
  uint64_t v25;
  _OWORD *v26;
  unsigned int *v27;
  uint64_t v28;
  __int128 v29;
  unsigned int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  _DWORD *v65;
  unsigned int *v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int *v70;
  char *__p;
  char *v72;

  if (a2 == a3)
    return;
  v3 = a3;
  v4 = a2;
  v5 = (char *)a3 - (char *)a2;
  if ((char *)a3 - (char *)a2 < 0)
    sub_2394189F8();
  v7 = (unsigned int *)operator new((char *)a3 - (char *)a2);
  v8 = v7;
  v9 = (char *)a1[5];
  v10 = (char *)a1[6];
  if (v9 == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    while (*(_DWORD *)v9 < *v4)
    {
      v9 += 4;
      ++v11;
      if (v9 == v10)
        goto LABEL_101;
    }
  }
  if (v9 == v10)
    goto LABEL_101;
  v67 = (uint64_t)a1;
  v68 = &v7[v5 >> 2];
  v12 = v7;
  v13 = (char *)a1[6];
  v14 = v7;
  v65 = v3;
  do
  {
    if (*v4 != *(_DWORD *)v9)
    {
      v9 += 4;
      goto LABEL_37;
    }
    if (v12 >= v68)
    {
      v15 = v12 - v14;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 62)
        sub_2394189F8();
      if (((char *)v68 - (char *)v14) >> 1 > v16)
        v16 = ((char *)v68 - (char *)v14) >> 1;
      if ((unint64_t)((char *)v68 - (char *)v14) >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 >> 62)
          sub_239418A80();
        v18 = v17;
        v19 = operator new(4 * v17);
        v17 = v18;
      }
      else
      {
        v19 = 0;
      }
      v20 = (unsigned int *)&v19[4 * v15];
      *v20 = v11;
      v66 = v20 + 1;
      if (v12 == v14)
      {
        a1 = (uint64_t *)v67;
      }
      else
      {
        v21 = (char *)(v12 - 1) - (char *)v14;
        if (v21 < 0xBC
          || &v19[(char *)v12 - (char *)v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[(char *)v12 - (char *)v14 - 4]
          || (unsigned int *)((char *)v12 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v12 - 1
          || (unint64_t)((char *)v14 - v19) < 0x20)
        {
          v22 = v12;
          a1 = (uint64_t *)v67;
        }
        else
        {
          v25 = (v21 >> 2) + 1;
          v22 = &v12[-(v25 & 0x7FFFFFFFFFFFFFF8)];
          v26 = &v19[4 * v15 - 16];
          v27 = v12 - 4;
          v28 = v25 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            *v26 = v29;
            v26 -= 2;
            v27 -= 8;
            v28 -= 8;
          }
          while (v28);
          v20 -= v25 & 0x7FFFFFFFFFFFFFF8;
          a1 = (uint64_t *)v67;
          if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_31;
        }
        do
        {
          v23 = *--v22;
          *--v20 = v23;
        }
        while (v22 != v14);
      }
LABEL_31:
      v68 = (unsigned int *)&v19[4 * v17];
      if (v14)
      {
        operator delete(v14);
        v10 = (char *)a1[6];
      }
      v14 = v20;
      v3 = v65;
      v8 = v66;
      goto LABEL_34;
    }
    *v12 = v11;
    v8 = v12 + 1;
LABEL_34:
    v24 = v10 - (v9 + 4);
    if (v24)
      memmove(v9, v9 + 4, v24);
    v10 = &v9[v24];
    a1[6] = (uint64_t)v10;
    v13 -= 4;
    v12 = v8;
LABEL_37:
    if (++v4 == v3)
      break;
    ++v11;
  }
  while (v9 != v13);
  v69 = v14;
  v70 = v8;
  if (v14 != v12)
  {
    sub_239C2DED8(a1[4], v14, v8);
    sub_239C2E074(a1[4], (unint64_t)v14, (uint64_t)v8);
    __p = 0;
    v30 = v14;
    v31 = (char *)v8 - (char *)v14;
    if (v8 != v14)
    {
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_105:
        sub_2394189F8();
      v32 = (char *)operator new(2 * v31);
      __p = v32;
      v72 = &v32[8 * (v31 >> 2)];
      while (1)
      {
        v34 = 3 * *v30;
        v35 = __p;
        v36 = v32 - __p;
        if (v32 != __p && *((_DWORD *)v32 - 2) == (_DWORD)v34)
        {
          *((_DWORD *)v32 - 2) = v34 + 3;
          goto LABEL_53;
        }
        v37 = (v34 + 3);
        if (v32 >= v72)
          break;
        *(_QWORD *)v32 = v37 | (v34 << 32);
        v33 = v32 + 8;
LABEL_52:
        v32 = v33;
LABEL_53:
        if (++v30 == v70)
        {
          v31 = (uint64_t)__p;
          goto LABEL_88;
        }
      }
      v38 = v36 >> 3;
      v39 = (v36 >> 3) + 1;
      if (v39 >> 61)
        goto LABEL_105;
      v40 = v72 - __p;
      if ((v72 - __p) >> 2 > v39)
        v39 = v40 >> 2;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        if (v41 >> 61)
          sub_239418A80();
        v42 = operator new(8 * v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = (uint64_t *)&v42[8 * v38];
      *v43 = v37 | (v34 << 32);
      v33 = (char *)(v43 + 1);
      if (v32 == __p)
      {
        v35 = v32;
        goto LABEL_74;
      }
      v44 = v32 - 8 - __p;
      if (v44 < 0x168)
      {
        v45 = v32;
        goto LABEL_71;
      }
      if (&v42[(v36 & 0xFFFFFFFFFFFFFFF8) - 8 - (v44 & 0xFFFFFFFFFFFFFFF8)] > &v42[(v36 & 0xFFFFFFFFFFFFFFF8) - 8])
      {
        v45 = v32;
      }
      else
      {
        if (&v32[-(v44 & 0xFFFFFFFFFFFFFFF8) - 8] <= v32 - 8)
        {
          if (v32 - v42 - (v36 & 0xFFFFFFFFFFFFFFF8) < 0x20)
          {
            v45 = v32;
            goto LABEL_71;
          }
          v47 = (v44 >> 3) + 1;
          v45 = &v32[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
          v48 = &v42[8 * v38 - 16];
          v49 = (__int128 *)(v32 - 16);
          v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *v49;
            *(v48 - 1) = *(v49 - 1);
            *v48 = v51;
            v48 -= 2;
            v49 -= 2;
            v50 -= 4;
          }
          while (v50);
          v43 -= v47 & 0x3FFFFFFFFFFFFFFCLL;
          if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_71;
LABEL_74:
          __p = (char *)v43;
          v72 = &v42[8 * v41];
          if (v35)
            operator delete(v35);
          goto LABEL_52;
        }
        v45 = v32;
      }
      do
      {
LABEL_71:
        v46 = *((_QWORD *)v45 - 1);
        v45 -= 8;
        *--v43 = v46;
      }
      while (v45 != __p);
      v35 = __p;
      goto LABEL_74;
    }
    v32 = 0;
LABEL_88:
    v52 = (unint64_t)&v32[-v31];
    v53 = ((unint64_t)&v32[-v31] >> 3);
    if ((v52 & 0x7FFFFFFF0) != 0)
    {
      v54 = *(_DWORD *)(v31 + 4);
      v55 = v53 - 1;
      v56 = (_DWORD *)(v31 + 12);
      do
      {
        v54 += *v56 - *(v56 - 3);
        *v56 = v54;
        v56 += 2;
        --v55;
      }
      while (v55);
    }
    v57 = 3 * (*(_DWORD *)(v67 + 24) - ((unint64_t)((char *)v70 - (char *)v69) >> 2));
    if ((v52 & 0x7FFFFFFF8) != 0)
    {
      v58 = 0;
      v59 = *(_QWORD *)v67;
      v60 = (v52 >> 3) - 1;
      do
      {
        v61 = v57;
        if (v58 < v60)
          v61 = *(_DWORD *)(v31 + 12);
        v62 = *(unsigned int *)(v31 + 4);
        v63 = (const void *)(*(_QWORD *)v67 + 8 * *(unsigned int *)(v67 + 28) + 8 * *(unsigned int *)v31);
        v64 = (uint64_t)v63 + 8 * v61 + -8 * v62;
        if ((const void *)v64 != v63)
          memmove((void *)(v59 + 8 * v62), v63, v64 - (_QWORD)v63);
        ++v58;
        v31 += 8;
      }
      while (v53 != v58);
    }
    *(_DWORD *)(v67 + 16) = v57;
    sub_23945215C(v67, v57);
    v12 = v69;
    *(_DWORD *)(v67 + 24) -= (unint64_t)((char *)v70 - (char *)v69) >> 2;
    if (__p)
      operator delete(__p);
  }
  v8 = v12;
  if (v12)
LABEL_101:
    operator delete(v8);
}

void sub_239C2A7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_239C2A864(_QWORD *a1, char **a2, char **a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  _DWORD *v12;
  int v13;
  _BOOL4 v14;
  size_t v15;
  void *v16;
  char *v17;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  v7 = v6 - *a2;
  v8 = *a3;
  v9 = a3[1];
  v10 = ((v9 - *a3) >> 2) + (v7 >> 2);
  if (v10)
  {
    sub_23942CB44((uint64_t)a1, v10);
    v5 = *a2;
    v6 = a2[1];
    v8 = *a3;
    v9 = a3[1];
    v12 = (_DWORD *)*a1;
  }
  else
  {
    v12 = 0;
  }
  while (v5 != v6)
  {
    if (v8 == v9)
    {
      v15 = v6 - v5;
      v16 = v12;
      v8 = v5;
      goto LABEL_12;
    }
    v13 = *(_DWORD *)v8;
    v14 = *(_DWORD *)v8 >= *(_DWORD *)v5;
    if (*(_DWORD *)v8 >= *(_DWORD *)v5)
      v13 = *(_DWORD *)v5;
    v8 += 4 * (*(_DWORD *)v5 >= *(_DWORD *)v8);
    v5 += 4 * v14;
    *v12++ = v13;
  }
  v15 = v9 - v8;
  if (v8 == v9)
    goto LABEL_13;
  v16 = v12;
LABEL_12:
  memmove(v16, v8, v15);
LABEL_13:
  v17 = (char *)v12 + v15;
  if (v17 != (char *)a1[1])
    a1[1] = v17;
}

void sub_239C2A96C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C2A988(_QWORD *a1, char **a2, char **a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  _DWORD *v12;
  int v13;
  _BOOL4 v14;
  size_t v15;
  void *v16;
  char *v17;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  v7 = v6 - *a2;
  v8 = *a3;
  v9 = a3[1];
  v10 = ((v9 - *a3) >> 2) + (v7 >> 2);
  if (v10)
  {
    sub_23942CB44((uint64_t)a1, v10);
    v5 = *a2;
    v6 = a2[1];
    v8 = *a3;
    v9 = a3[1];
    v12 = (_DWORD *)*a1;
  }
  else
  {
    v12 = 0;
  }
  while (v5 != v6)
  {
    if (v8 == v9)
    {
      v15 = v6 - v5;
      v16 = v12;
      v8 = v5;
      goto LABEL_12;
    }
    v13 = *(_DWORD *)v8;
    v14 = *(_DWORD *)v8 >= *(_DWORD *)v5;
    if (*(_DWORD *)v8 >= *(_DWORD *)v5)
      v13 = *(_DWORD *)v5;
    v8 += 4 * (*(_DWORD *)v5 >= *(_DWORD *)v8);
    v5 += 4 * v14;
    *v12++ = v13;
  }
  v15 = v9 - v8;
  if (v8 == v9)
    goto LABEL_13;
  v16 = v12;
LABEL_12:
  memmove(v16, v8, v15);
LABEL_13:
  v17 = (char *)v12 + v15;
  if (v17 != (char *)a1[1])
    a1[1] = v17;
}

void sub_239C2AA90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C2AAAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v8;
  _BYTE *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  __int128 v24;
  int8x16_t v25;
  unint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x16_t *v34;
  unsigned int *v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  void *__p;
  unsigned int *v45;
  uint64_t v46;

  __p = 0;
  v45 = 0;
  v46 = 0;
  v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  sub_239C2D3E4(a2, a1 + 40, &v43, (char **)&__p);
  LODWORD(a2) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  v9 = __p;
  v8 = v45;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
  v11 = (_DWORD)a2 * ((unint64_t)((char *)v8 - v9) >> 3);
  v12 = v10 * ((unint64_t)((char *)v45 - (_BYTE *)__p) >> 3);
  *(_DWORD *)(a3 + 16) = v11;
  *(_DWORD *)(a3 + 20) = v12;
  sub_23945215C(a3, v12 * (unint64_t)v11);
  v13 = *(_DWORD *)(a3 + 20);
  if (v13 * *(_DWORD *)(a3 + 16))
    bzero(*(void **)a3, 8 * (v13 * *(_DWORD *)(a3 + 16)));
  v14 = (unsigned int *)__p;
  v15 = v45;
  if (__p == v45)
  {
    v35 = (unsigned int *)__p;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 32);
    do
    {
      v17 = (unsigned int *)__p;
      v18 = v45;
      if (__p != v45)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24 * *v14);
        v19 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24 * *v14 + 8);
        do
        {
          if (v20 == v19)
            break;
          v21 = *v17;
          while (*(_DWORD *)v20 < v21)
          {
            v20 += 16;
            if (v20 == v19)
              goto LABEL_5;
          }
          if (*(_DWORD *)v20 == v21)
          {
            v22 = *(_QWORD *)(v16 + 16) + 8 * *(_QWORD *)(v20 + 8);
            if (v22 == *(_QWORD *)a3)
            {
              v29 = *(_QWORD *)(v22 + 64);
              v28 = *(int8x16_t *)(v22 + 32);
              v25 = *(int8x16_t *)(v22 + 48);
              v23 = *(int8x16_t *)v22;
              v27 = *(int8x16_t *)(v22 + 16);
              v30 = vextq_s8(v25, v25, 8uLL).u64[0];
              v26 = vextq_s8(v28, v28, 8uLL).u64[0];
              *(_QWORD *)&v24 = vextq_s8(v27, v27, 8uLL).u64[0];
            }
            else
            {
              v23 = *(int8x16_t *)v22;
              v24 = *(_OWORD *)(v22 + 24);
              v25 = *(int8x16_t *)(v22 + 48);
              v26 = *(_QWORD *)(v22 + 40);
              v27.i64[0] = *(_QWORD *)(v22 + 16);
              v28.i64[0] = *(_QWORD *)(v22 + 32);
              v29 = *(_QWORD *)(v22 + 64);
              v30 = vextq_s8(v25, v25, 8uLL).u64[0];
            }
            v31 = *(unsigned int *)(a3 + 16);
            v32 = *(_QWORD *)a3 + 8 * (v17[1] + (_DWORD)v31 * v14[1]);
            v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
            *((_QWORD *)&v24 + 1) = v28.i64[0];
            v25.i64[1] = v30;
            *(_QWORD *)(v32 + 16) = v27.i64[0];
            *(int8x16_t *)v32 = v23;
            v33 = v32 + 8 * v31;
            *(_QWORD *)(v33 + 16) = v26;
            *(_OWORD *)v33 = v24;
            v34 = (int8x16_t *)(v32 + 16 * v31);
            v34[1].i64[0] = v29;
            *v34 = v25;
          }
          if (v20 == v19)
            break;
          v17 += 2;
        }
        while (v17 != v18);
      }
LABEL_5:
      v14 += 2;
    }
    while (v14 != v15);
    v14 = (unsigned int *)__p;
    v35 = v45;
  }
  v36 = 3 * ((unint64_t)((char *)v35 - (char *)v14) >> 3);
  if (*(_DWORD *)(a4 + 16) != (_DWORD)v36)
  {
    *(_DWORD *)(a4 + 16) = v36;
    sub_23945215C(a4, v36);
    v14 = (unsigned int *)__p;
    v35 = v45;
  }
  if (v14 != v35)
  {
    v37 = *(_DWORD *)(a1 + 28);
    do
    {
      v38 = *v14;
      v39 = v14[1];
      v14 += 2;
      v40 = *(_QWORD *)a1 + 8 * (3 * v38 + v37);
      v41 = *(_QWORD *)a4 + 8 * v39;
      v42 = *(_OWORD *)v40;
      *(_QWORD *)(v41 + 16) = *(_QWORD *)(v40 + 16);
      *(_OWORD *)v41 = v42;
    }
    while (v14 != v35);
    v35 = (unsigned int *)__p;
  }
  if (v35)
  {
    v45 = v35;
    operator delete(v35);
  }
}

void sub_239C2AD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C2AD44(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int *v6;
  _BYTE *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int8x16_t v21;
  __int128 v22;
  int8x16_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t *v32;
  int v33;
  void *__p;
  unsigned int *v35;
  uint64_t v36;

  __p = 0;
  v35 = 0;
  v36 = 0;
  v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  sub_239C2D3E4(a2, a1 + 40, &v33, (char **)&__p);
  LODWORD(a2) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  v7 = __p;
  v6 = v35;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
  v9 = (_DWORD)a2 * ((unint64_t)((char *)v6 - v7) >> 3);
  v10 = v8 * ((unint64_t)((char *)v35 - (_BYTE *)__p) >> 3);
  *(_DWORD *)(a3 + 16) = v9;
  *(_DWORD *)(a3 + 20) = v10;
  sub_23945215C(a3, v10 * (unint64_t)v9);
  v11 = *(_DWORD *)(a3 + 20);
  if (v11 * *(_DWORD *)(a3 + 16))
    bzero(*(void **)a3, 8 * (v11 * *(_DWORD *)(a3 + 16)));
  v12 = (unsigned int *)__p;
  v13 = v35;
  if (__p != v35)
  {
    v14 = *(_QWORD *)(a1 + 32);
    do
    {
      v15 = (unsigned int *)__p;
      v16 = v35;
      if (__p != v35)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v14 + 88) + 24 * *v12);
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 88) + 24 * *v12 + 8);
        do
        {
          if (v18 == v17)
            break;
          v19 = *v15;
          while (*(_DWORD *)v18 < v19)
          {
            v18 += 16;
            if (v18 == v17)
              goto LABEL_5;
          }
          if (*(_DWORD *)v18 == v19)
          {
            v20 = *(_QWORD *)(v14 + 16) + 8 * *(_QWORD *)(v18 + 8);
            if (v20 == *(_QWORD *)a3)
            {
              v27 = *(_QWORD *)(v20 + 64);
              v26 = *(int8x16_t *)(v20 + 32);
              v23 = *(int8x16_t *)(v20 + 48);
              v21 = *(int8x16_t *)v20;
              v25 = *(int8x16_t *)(v20 + 16);
              v28 = vextq_s8(v23, v23, 8uLL).u64[0];
              v24 = vextq_s8(v26, v26, 8uLL).u64[0];
              *(_QWORD *)&v22 = vextq_s8(v25, v25, 8uLL).u64[0];
            }
            else
            {
              v21 = *(int8x16_t *)v20;
              v22 = *(_OWORD *)(v20 + 24);
              v23 = *(int8x16_t *)(v20 + 48);
              v24 = *(_QWORD *)(v20 + 40);
              v25.i64[0] = *(_QWORD *)(v20 + 16);
              v26.i64[0] = *(_QWORD *)(v20 + 32);
              v27 = *(_QWORD *)(v20 + 64);
              v28 = vextq_s8(v23, v23, 8uLL).u64[0];
            }
            v29 = *(unsigned int *)(a3 + 16);
            v30 = *(_QWORD *)a3 + 8 * (v15[1] + (_DWORD)v29 * v12[1]);
            v21.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
            *((_QWORD *)&v22 + 1) = v26.i64[0];
            v23.i64[1] = v28;
            *(_QWORD *)(v30 + 16) = v25.i64[0];
            *(int8x16_t *)v30 = v21;
            v31 = v30 + 8 * v29;
            *(_QWORD *)(v31 + 16) = v24;
            *(_OWORD *)v31 = v22;
            v32 = (int8x16_t *)(v30 + 16 * v29);
            v32[1].i64[0] = v27;
            *v32 = v23;
          }
          if (v18 == v17)
            break;
          v15 += 2;
        }
        while (v15 != v16);
      }
LABEL_5:
      v12 += 2;
    }
    while (v12 != v13);
    v12 = (unsigned int *)__p;
  }
  if (v12)
  {
    v35 = v12;
    operator delete(v12);
  }
}

void sub_239C2AF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C2AF64(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int8x16_t v26;
  __int128 v27;
  int8x16_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int8x16_t v46;
  __int128 v47;
  int8x16_t v48;
  unint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t *v57;
  void *__p;
  unsigned int *v59;
  uint64_t v60;
  int v61;
  void *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t *v65;

  v62 = 0;
  v63 = 0;
  v64 = 0;
  v61 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  sub_239C2D3E4(a2, a1 + 40, &v61, (char **)&v62);
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_239C2D3E4(a3, a1 + 40, &v61, (char **)&__p);
  LODWORD(a3) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  v11 = v62;
  v10 = v63;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
  v13 = (_DWORD)a3 * ((unint64_t)(v10 - v11) >> 3);
  v14 = v12 * ((unint64_t)((char *)v59 - (_BYTE *)__p) >> 3);
  *(_DWORD *)(a4 + 16) = v13;
  *(_DWORD *)(a4 + 20) = v14;
  sub_23945215C(a4, v14 * (unint64_t)v13);
  v15 = *(_DWORD *)(a4 + 20);
  if (v15 * *(_DWORD *)(a4 + 16))
    bzero(*(void **)a4, 8 * (v15 * *(_DWORD *)(a4 + 16)));
  if (v14 != *(_DWORD *)(a5 + 16) || v13 != *(_DWORD *)(a5 + 20))
  {
    *(_DWORD *)(a5 + 16) = v14;
    *(_DWORD *)(a5 + 20) = v13;
    sub_23945215C(a5, v14 * (unint64_t)v13);
    v14 = *(_DWORD *)(a5 + 16);
    v13 = *(_DWORD *)(a5 + 20);
  }
  if (v13 * v14)
    bzero(*(void **)a5, 8 * v13 * v14);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = (unsigned int *)v62;
  v19 = (unsigned int *)v63;
  if (__p != v59)
  {
    if (v62 == v63)
      goto LABEL_49;
    do
    {
      v20 = (unsigned int *)__p;
      v21 = v59;
      if (__p != v59)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24 * *v18);
        v22 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24 * *v18 + 8);
        do
        {
          if (v23 == v22)
            break;
          v24 = *v20;
          while (*(_DWORD *)v23 < v24)
          {
            v23 += 16;
            if (v23 == v22)
              goto LABEL_13;
          }
          if (*(_DWORD *)v23 == v24)
          {
            v25 = *(_QWORD *)(v17 + 16) + 8 * *(_QWORD *)(v23 + 8);
            if (v25 == *(_QWORD *)a5)
            {
              v32 = *(_QWORD *)(v25 + 64);
              v31 = *(int8x16_t *)(v25 + 32);
              v28 = *(int8x16_t *)(v25 + 48);
              v26 = *(int8x16_t *)v25;
              v30 = *(int8x16_t *)(v25 + 16);
              v33 = vextq_s8(v28, v28, 8uLL).u64[0];
              v29 = vextq_s8(v31, v31, 8uLL).u64[0];
              *(_QWORD *)&v27 = vextq_s8(v30, v30, 8uLL).u64[0];
            }
            else
            {
              v26 = *(int8x16_t *)v25;
              v27 = *(_OWORD *)(v25 + 24);
              v28 = *(int8x16_t *)(v25 + 48);
              v29 = *(_QWORD *)(v25 + 40);
              v30.i64[0] = *(_QWORD *)(v25 + 16);
              v31.i64[0] = *(_QWORD *)(v25 + 32);
              v32 = *(_QWORD *)(v25 + 64);
              v33 = vextq_s8(v28, v28, 8uLL).u64[0];
            }
            v34 = *(unsigned int *)(a5 + 16);
            v35 = *(_QWORD *)a5 + 8 * (v20[1] + (_DWORD)v34 * v18[1]);
            v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
            *((_QWORD *)&v27 + 1) = v31.i64[0];
            v28.i64[1] = v33;
            *(_QWORD *)(v35 + 16) = v30.i64[0];
            *(int8x16_t *)v35 = v26;
            v36 = v35 + 8 * v34;
            *(_QWORD *)(v36 + 16) = v29;
            *(_OWORD *)v36 = v27;
            v37 = (int8x16_t *)(v35 + 16 * v34);
            v37[1].i64[0] = v32;
            *v37 = v28;
          }
          if (v23 == v22)
            break;
          v20 += 2;
        }
        while (v20 != v21);
      }
LABEL_13:
      v18 += 2;
    }
    while (v18 != v19);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = (unsigned int *)v62;
    v19 = (unsigned int *)v63;
  }
  if (v18 != v19)
  {
    v38 = (unsigned int *)__p;
    v39 = v59;
    if (__p != v59)
    {
      do
      {
        v40 = (unsigned int *)v62;
        v41 = (unsigned int *)v63;
        if (v62 != v63)
        {
          v43 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24 * *v38);
          v42 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 24 * *v38 + 8);
          do
          {
            if (v43 == v42)
              break;
            v44 = *v40;
            while (*(_DWORD *)v43 < v44)
            {
              v43 += 16;
              if (v43 == v42)
                goto LABEL_33;
            }
            if (*(_DWORD *)v43 == v44)
            {
              v45 = *(_QWORD *)(v17 + 16) + 8 * *(_QWORD *)(v43 + 8);
              if (v45 == *(_QWORD *)a4)
              {
                v52 = *(_QWORD *)(v45 + 64);
                v51 = *(int8x16_t *)(v45 + 32);
                v48 = *(int8x16_t *)(v45 + 48);
                v46 = *(int8x16_t *)v45;
                v50 = *(int8x16_t *)(v45 + 16);
                v53 = vextq_s8(v48, v48, 8uLL).u64[0];
                v49 = vextq_s8(v51, v51, 8uLL).u64[0];
                *(_QWORD *)&v47 = vextq_s8(v50, v50, 8uLL).u64[0];
              }
              else
              {
                v46 = *(int8x16_t *)v45;
                v47 = *(_OWORD *)(v45 + 24);
                v48 = *(int8x16_t *)(v45 + 48);
                v49 = *(_QWORD *)(v45 + 40);
                v50.i64[0] = *(_QWORD *)(v45 + 16);
                v51.i64[0] = *(_QWORD *)(v45 + 32);
                v52 = *(_QWORD *)(v45 + 64);
                v53 = vextq_s8(v48, v48, 8uLL).u64[0];
              }
              v54 = *(unsigned int *)(a4 + 16);
              v55 = *(_QWORD *)a4 + 8 * (v40[1] + (_DWORD)v54 * v38[1]);
              v46.i64[1] = vextq_s8(v46, v46, 8uLL).u64[0];
              *((_QWORD *)&v47 + 1) = v51.i64[0];
              v48.i64[1] = v53;
              *(_QWORD *)(v55 + 16) = v50.i64[0];
              *(int8x16_t *)v55 = v46;
              v56 = v55 + 8 * v54;
              *(_QWORD *)(v56 + 16) = v49;
              *(_OWORD *)v56 = v47;
              v57 = (int8x16_t *)(v55 + 16 * v54);
              v57[1].i64[0] = v52;
              *v57 = v48;
            }
            if (v43 == v42)
              break;
            v40 += 2;
          }
          while (v40 != v41);
        }
LABEL_33:
        v38 += 2;
      }
      while (v38 != v39);
    }
  }
LABEL_49:
  v65 = (uint64_t *)a5;
  sub_239C2D710(a4, &v65);
  if (__p)
  {
    v59 = (unsigned int *)__p;
    operator delete(__p);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
}

void sub_239C2B320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_239C2B370(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  int v12;
  float64x2_t v13;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v21;
  size_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  size_t v39;
  double *v40;
  int v41;
  unint64_t v42;
  int v43;
  double *v44;
  uint64_t *v45;
  uint64_t *v46;
  double *v47;
  int v48;
  int v49;
  size_t v50;
  uint64_t v51;
  void *v52;
  float64x2_t *v53;
  unint64_t v54;
  double *v55;
  double *v56;
  uint64_t v57;
  float64x2_t *v58;
  float64x2_t *v59;
  uint64_t v60;
  float64x2_t v61;
  double *v62;
  double v63;
  int v64;
  int v65;
  size_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  double *v70;
  unint64_t v71;
  double *v72;
  double *v73;
  BOOL v74;
  uint64_t v75;
  float64x2_t *v76;
  float64x2_t *v77;
  uint64_t v78;
  float64x2_t v79;
  double *v80;
  double v81;
  std::bad_alloc *v82;
  std::bad_alloc *v83;
  std::bad_alloc *v84;
  std::bad_alloc *v85;
  std::bad_alloc *v86;
  std::bad_alloc *v87;
  std::bad_alloc *exception;
  std::bad_alloc *v89;
  uint64_t v90;
  void *memptr;
  size_t v92;
  int v93;
  int v94;
  void *v95;
  void *__dst;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v12 = sub_239A23058(0, *(_DWORD *)(a1 + 16), *(__CLPK_doublereal **)a1, *(_DWORD *)(a1 + 16));
  if (v12)
    return v12 == 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21 == *(_DWORD *)(a3 + 16))
  {
    sub_239A22EE0(0, 0, 1, 1, v21, *(unsigned int *)(a3 + 20), *(double **)a1, v21, 1.0, v13, v14, v15, v16, v17, v18, v19, *(double **)a3, *(_DWORD *)(a1 + 16));
    if ((a4 & 1) != 0)
      goto LABEL_40;
LABEL_13:
    v38 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v38 == *(_DWORD *)(a2 + 16))
    {
      sub_239A22F7C(0, 1, 1, v38, *(const double **)a1, *(_DWORD *)(a1 + 16), *(double **)a2, 1);
    }
    else
    {
      v39 = (8 * v38 + 31) & 0xFFFFFFFE0;
      v97 = (uint64_t *)(v39 >> 3);
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v39, 0x100BBD03uLL);
      v40 = (double *)memptr;
      __dst = memptr;
      if (!memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v89 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v89, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v41 = *(_DWORD *)(a1 + 16);
      LODWORD(v98) = v41;
      if (&__dst == (void **)a2)
      {
        v43 = v41;
      }
      else
      {
        v42 = *(unsigned int *)(a2 + 16);
        sub_23945215C((uint64_t)&__dst, v42);
        if ((_DWORD)v42)
          memcpy(__dst, *(const void **)a2, 8 * v42);
        v43 = *(_DWORD *)(a2 + 16);
        LODWORD(v98) = v43;
        v41 = *(_DWORD *)(a1 + 16);
        v40 = (double *)__dst;
      }
      sub_239A22F7C(0, 1, 1, v43, *(const double **)a1, v41, v40, 1);
      v44 = *(double **)a2;
      v45 = *(uint64_t **)(a2 + 8);
      v46 = v97;
      *(_QWORD *)a2 = __dst;
      *(_QWORD *)(a2 + 8) = v46;
      __dst = v44;
      v97 = v45;
      *(_DWORD *)(a2 + 16) = v98;
      LODWORD(v98) = 0;
      free(v44);
    }
    v90 = a3;
    v97 = &v90;
    v98 = a2;
    v99 = 0x3FF0000000000000;
    v47 = *(double **)a6;
    if (*(_QWORD *)a3 != *(_QWORD *)a6 && *(double **)a2 != v47)
    {
      v48 = *(_DWORD *)(a3 + 16);
      v49 = *(_DWORD *)(a3 + 20);
      if (v48 * v49 && *(_DWORD *)(a2 + 16))
        sub_239A22E8C(1, v48, v49, *(const double **)a3, v48, *(const double **)a2, 1, v47, -1.0, 1.0, 1);
      goto LABEL_40;
    }
    v50 = (8 * *(unsigned int *)(a3 + 20) + 31) & 0xFFFFFFFE0;
    v92 = v50 >> 3;
    v95 = 0;
    malloc_type_posix_memalign(&v95, 0x20uLL, v50, 0x100BBD03uLL);
    memptr = v95;
    if (!v95)
    {
      v86 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v87 = std::bad_alloc::bad_alloc(v86);
      __cxa_throw(v87, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v93 = *(_DWORD *)(v90 + 20);
    sub_239C2D298((uint64_t)&memptr, (uint64_t)&__dst);
    v51 = *(unsigned int *)(a6 + 16);
    v52 = memptr;
    if ((_DWORD)v51)
    {
      v53 = *(float64x2_t **)a6;
      v54 = (v51 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v54 >= 9)
      {
        if (v53 >= (float64x2_t *)((char *)memptr + 8 * v51)
          || (v55 = (double *)memptr, v56 = *(double **)a6, memptr >= &v53->f64[v51]))
        {
          v57 = (v54 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          v55 = (double *)((char *)memptr + 8 * v57);
          v58 = v53 + 1;
          v59 = (float64x2_t *)((char *)memptr + 16);
          v60 = v57;
          do
          {
            v61 = vsubq_f64(*v58, *v59);
            v58[-1] = vsubq_f64(v58[-1], v59[-1]);
            *v58 = v61;
            v58 += 2;
            v59 += 2;
            v60 -= 4;
          }
          while (v60);
          if (v54 + 1 == v57)
            goto LABEL_39;
          v56 = &v53->f64[v57];
        }
      }
      else
      {
        v55 = (double *)memptr;
        v56 = *(double **)a6;
      }
      v62 = &v53->f64[v51];
      do
      {
        v63 = *v55++;
        *v56 = *v56 - v63;
        ++v56;
      }
      while (v56 != v62);
    }
LABEL_39:
    free(v52);
    goto LABEL_40;
  }
  v22 = (8 * (*(_DWORD *)(a3 + 20) * v21) + 31) & 0xFFFFFFFE0;
  v97 = (uint64_t *)(v22 >> 3);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v22, 0x100BBD03uLL);
  v30 = (double *)memptr;
  __dst = memptr;
  if (!memptr)
  {
    v82 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v83 = std::bad_alloc::bad_alloc(v82);
    __cxa_throw(v83, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v31 = *(unsigned int *)(a1 + 16);
  v32 = *(unsigned int *)(a3 + 20);
  LODWORD(v98) = *(_DWORD *)(a1 + 16);
  HIDWORD(v98) = v32;
  if (&__dst == (void **)a3)
  {
    v34 = v31;
  }
  else
  {
    v33 = (v32 * *(_DWORD *)(a3 + 16));
    sub_23945215C((uint64_t)&__dst, v33);
    if ((_DWORD)v33)
      memcpy(__dst, *(const void **)a3, 8 * v33);
    v34 = *(unsigned int *)(a3 + 16);
    v32 = *(unsigned int *)(a3 + 20);
    LODWORD(v98) = *(_DWORD *)(a3 + 16);
    HIDWORD(v98) = v32;
    LODWORD(v31) = *(_DWORD *)(a1 + 16);
    v30 = (double *)__dst;
  }
  sub_239A22EE0(0, 0, 1, 1, v34, v32, *(double **)a1, v31, 1.0, v23, v24, v25, v26, v27, v28, v29, v30, v34);
  v35 = *(double **)a3;
  v36 = *(uint64_t **)(a3 + 8);
  v37 = v97;
  *(_QWORD *)a3 = __dst;
  *(_QWORD *)(a3 + 8) = v37;
  __dst = v35;
  v97 = v36;
  *(_QWORD *)(a3 + 16) = v98;
  v98 = 0;
  free(v35);
  if ((a4 & 1) == 0)
    goto LABEL_13;
LABEL_40:
  v90 = a3;
  v97 = &v90;
  v98 = a3;
  v99 = 0x3FF0000000000000;
  if (*(_QWORD *)a3 == *(_QWORD *)a5)
  {
    v66 = (8 * (*(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 20)) + 31) & 0xFFFFFFFE0;
    v92 = v66 >> 3;
    v95 = 0;
    malloc_type_posix_memalign(&v95, 0x20uLL, v66, 0x100BBD03uLL);
    memptr = v95;
    if (!v95)
    {
      v84 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v85 = std::bad_alloc::bad_alloc(v84);
      __cxa_throw(v85, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v67 = *(_DWORD *)(a3 + 20);
    v93 = *(_DWORD *)(v90 + 20);
    v94 = v67;
    sub_239460770((uint64_t)&memptr, (uint64_t)&__dst);
    v68 = (*(_DWORD *)(a5 + 20) * *(_DWORD *)(a5 + 16));
    v69 = memptr;
    if (!(_DWORD)v68)
      goto LABEL_58;
    v70 = *(double **)a5;
    v71 = (v68 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v71 >= 9)
    {
      v74 = v70 >= (double *)((char *)memptr + 8 * v68) || memptr >= &v70[v68];
      v72 = (double *)memptr;
      v73 = *(double **)a5;
      if (v74)
      {
        v75 = (v71 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v72 = (double *)((char *)memptr + 8 * v75);
        v76 = (float64x2_t *)(v70 + 2);
        v77 = (float64x2_t *)((char *)memptr + 16);
        v78 = v75;
        do
        {
          v79 = vsubq_f64(*v76, *v77);
          v76[-1] = vsubq_f64(v76[-1], v77[-1]);
          *v76 = v79;
          v76 += 2;
          v77 += 2;
          v78 -= 4;
        }
        while (v78);
        if (v71 + 1 == v75)
          goto LABEL_58;
        v73 = &v70[v75];
      }
    }
    else
    {
      v72 = (double *)memptr;
      v73 = *(double **)a5;
    }
    v80 = &v70[v68];
    do
    {
      v81 = *v72++;
      *v73 = *v73 - v81;
      ++v73;
    }
    while (v73 != v80);
LABEL_58:
    free(v69);
    return v12 == 0;
  }
  v65 = *(_DWORD *)(a3 + 16);
  v64 = *(_DWORD *)(a3 + 20);
  if (v65 * v64)
    sub_239A22E14(1, 0, v64, v64, v65, *(const double **)a3, v65, *(double **)a3, -1.0, 1.0, v65, *(double **)a5, *(_DWORD *)(a5 + 16));
  return v12 == 0;
}

void sub_239C2B9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  free(a14);
  _Unwind_Resume(a1);
}

void sub_239C2B9E4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  char **v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  __int128 *v63;
  _OWORD *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  size_t v69;
  __int128 *v70;
  _BYTE *v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  const double *v89;
  uint64_t v90;
  float64x2_t v91;
  float64x2_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  _QWORD *v99;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  __int128 v105;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v94 = HIDWORD(a3);
    v97 = 1;
    v9 = 0uLL;
    v101 = a3;
    v99 = (_QWORD *)(a1 + 16);
    v95 = a1 + 40;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 88);
      v11 = (uint64_t *)(v10 + 24 * v6);
      v12 = *v11;
      v13 = v11[1];
      if (*v11 != v13)
      {
        v14 = *(_QWORD *)(a1 + 48);
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(a1 + 80);
        do
        {
          v17 = ((v15 - v14) << 6) - 1;
          if (v15 == v14)
            v17 = 0;
          v18 = *(_QWORD *)(a1 + 72) + v16;
          if (v17 == v18)
          {
            sub_2396DA1D4(v7);
            v9 = 0uLL;
            v14 = *(_QWORD *)(a1 + 48);
            v15 = *(_QWORD *)(a1 + 56);
            v18 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v14 + ((v18 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v18 & 0x1FF)) = *(_QWORD *)(v12 + 8);
          v16 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v16;
          v12 += 16;
        }
        while (v12 != v13);
        v12 = *v11;
        v10 = *(_QWORD *)(a1 + 88);
      }
      v11[1] = v12;
      v19 = v6 + 1;
      v20 = *(_DWORD *)(a1 + 8);
      v96 = v6 + 1;
      if (v20 < (int)v6 + 1)
        v19 = *(_DWORD *)(a1 + 8);
      if (v19)
        break;
LABEL_3:
      ++v97;
      v7 = v95;
      v6 = v96;
      if (v96 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v21 = 0;
    v22 = (char **)(v10 + 24 * v6);
    v23 = 3 * v6 + v94;
    v24 = v97;
    if (v20 < v97)
      v24 = *(_DWORD *)(a1 + 8);
    v102 = 3 * v6 + v94;
    v103 = v24;
    while (1)
    {
      v27 = *v4;
      v37 = *((unsigned int *)v4 + 4);
      v38 = *v22;
      v39 = v22[1];
      if (*v22 != v39)
      {
        while (*(_DWORD *)v38 < v21)
        {
          v38 += 16;
          if (v38 == v39)
            goto LABEL_29;
        }
      }
      if (v38 != v39)
      {
        if (*(_DWORD *)v38 == v21)
        {
          v25 = *v8 + 8 * *((_QWORD *)v38 + 1);
          goto LABEL_20;
        }
        v39 = v38;
      }
LABEL_29:
      v40 = *(_QWORD *)(a1 + 80);
      v104 = *v4;
      if (v40)
      {
        v42 = *(_QWORD *)(a1 + 48);
        v41 = *(_QWORD *)(a1 + 56);
        v43 = ((v41 - v42) << 6) - 1;
        v44 = *(_QWORD *)(a1 + 72);
        if (v41 == v42)
          v43 = 0;
        v25 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v42 + (((unint64_t)(v44 + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v44 + v40 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v40 - 1;
        if ((unint64_t)(v43 - (v40 + v44) + 1) >= 0x400)
        {
          operator delete(*(void **)(v41 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        goto LABEL_19;
      }
      *(_QWORD *)&v105 = 0;
      v46 = *(_QWORD *)(a1 + 16);
      v45 = *(_QWORD *)(a1 + 24);
      v47 = v45 - v46;
      v48 = (uint64_t)(v45 - v46) >> 3;
      v49 = (__int128 *)(v46 + ((v45 - v46) & 0xFFFFFFFFFFFFFFF8));
      v50 = *(_QWORD *)(a1 + 32);
      if (v50 - v45 < 0x48)
      {
        v51 = v48 + 9;
        if ((unint64_t)(v48 + 9) >> 61)
          sub_2394189F8();
        v52 = v50 - v46;
        if (v52 >> 2 > v51)
          v51 = v52 >> 2;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        v98 = v51;
        if (v51)
        {
          if (v51 >> 61)
            sub_239418A80();
          v53 = operator new(8 * v51);
          v9 = 0uLL;
          v48 = (uint64_t)(v45 - v46) >> 3;
        }
        else
        {
          v53 = 0;
        }
        v59 = &v53[8 * v48];
        *((_QWORD *)v59 + 8) = 0;
        *((_OWORD *)v59 + 2) = v9;
        *((_OWORD *)v59 + 3) = v9;
        *(_OWORD *)v59 = v9;
        *((_OWORD *)v59 + 1) = v9;
        if (v46 == v45)
        {
          v61 = &v53[8 * v48];
        }
        else
        {
          if (v47 - 8 < 0x68)
          {
            v60 = (char *)(v46 + ((v45 - v46) & 0xFFFFFFFFFFFFFFF8));
            v61 = &v53[8 * v48];
            goto LABEL_56;
          }
          v60 = (char *)(v46 + ((v45 - v46) & 0xFFFFFFFFFFFFFFF8));
          v61 = &v53[8 * v48];
          if (v46 + (v47 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v53[v47 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_99;
          v62 = ((v47 - 8) >> 3) + 1;
          v60 = (char *)v49 - 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v63 = (__int128 *)(v46 + 8 * v48 - 16);
          v64 = &v53[8 * v48 - 16];
          v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v66 = *v63;
            *(v64 - 1) = *(v63 - 1);
            *v64 = v66;
            v63 -= 2;
            v64 -= 2;
            v65 -= 4;
          }
          while (v65);
          v61 = &v59[-8 * (v62 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_99:
            do
            {
LABEL_56:
              v67 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *((_QWORD *)v61 - 1) = v67;
              v61 -= 8;
            }
            while (v60 != (char *)v46);
          }
        }
        v68 = v59 + 72;
        v69 = v45 - (_QWORD)v49;
        if (v69)
        {
          v70 = v49;
          v71 = v53;
          memmove(v59 + 72, v70, v69);
          v53 = v71;
        }
        *(_QWORD *)(a1 + 16) = v61;
        *(_QWORD *)(a1 + 24) = &v68[v69];
        *(_QWORD *)(a1 + 32) = &v53[8 * v98];
        if (v46)
          operator delete((void *)v46);
        goto LABEL_18;
      }
      v54 = v45 - (_QWORD)v49;
      if (v45 - (unint64_t)v49 > 0x47)
      {
        v56 = *(_QWORD *)(a1 + 24);
        v55 = 9;
        goto LABEL_70;
      }
      v55 = v54 >> 3;
      v56 = v45 + 8 * (9 - (v54 >> 3));
      v57 = 64 - (v54 & 0xFFFFFFFFFFFFFFF8);
      if (v57 < 0x68)
      {
        v58 = *(_QWORD **)(a1 + 24);
        goto LABEL_68;
      }
      if (v45 < (unint64_t)&v105 + 8 && (unint64_t)&v105 < v45 + v57 + 8)
        break;
      v72 = (v57 >> 3) + 1;
      v73 = *(_OWORD **)(a1 + 24);
      v74 = v72 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *v73 = v9;
        v73[1] = v9;
        v73 += 2;
        v74 -= 4;
      }
      while (v74);
      if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v58 = (_QWORD *)(v45 + 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL));
        do
LABEL_68:
          *v58++ = v105;
        while (v58 != (_QWORD *)v56);
      }
      *(_QWORD *)(a1 + 24) = v56;
      if ((__int128 *)v45 == v49)
        goto LABEL_18;
LABEL_70:
      v75 = v56 - ((_QWORD)v49 + 72);
      v76 = v75 >> 3;
      v77 = (uint64_t *)(v56 - 72);
      v78 = (_QWORD *)v56;
      if (v56 - 72 < v45)
      {
        v79 = (v47 & 0xFFFFFFFFFFFFFFF8) + v75;
        v80 = v46 + v79 + 8;
        if (v45 > v80)
          v80 = v45;
        v81 = v80 + ~v46 - v79;
        if (v81 > 0x57)
        {
          v82 = (v81 >> 3) + 1;
          v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
          v77 = (uint64_t *)((char *)v77 + v83);
          v84 = (_OWORD *)(v56 + 16);
          v85 = (__int128 *)(v46 + 8 * v76 + 8 * v48 + 16);
          v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v87 = *v85;
            *(v84 - 1) = *(v85 - 1);
            *v84 = v87;
            v84 += 2;
            v85 += 2;
            v86 -= 4;
          }
          while (v86);
          v78 = (_QWORD *)(v56 + v83);
          if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_79;
        }
        else
        {
          v78 = (_QWORD *)v56;
        }
        do
        {
          v88 = *v77++;
          *v78++ = v88;
        }
        while ((unint64_t)v77 < v45);
      }
LABEL_79:
      *(_QWORD *)(a1 + 24) = v78;
      if ((__int128 *)v56 != (__int128 *)((char *)v49 + 72))
      {
        memmove((void *)(v56 - 8 * v76), (const void *)(v46 + ((v45 - v46) & 0xFFFFFFFFFFFFFFF8)), v75);
        v48 = (uint64_t)(v45 - v46) >> 3;
      }
      v89 = (const double *)&v105;
      if (v49 <= &v105)
      {
        v90 = 72;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v105)
          v90 = 0;
        v89 = (const double *)((char *)&v105 + v90);
      }
      if (v55 >= 0xA
        && (v49 >= (__int128 *)(v89 + 1) || (unint64_t)v89 >= v46 + (v47 & 0xFFFFFFFFFFFFFFF8) + 8 * v55))
      {
        v49 = (__int128 *)((char *)v49 + 8 * (v55 & 0xFFFFFFFFFFFFFFFCLL));
        v91 = vld1q_dup_f64(v89);
        v92 = (float64x2_t *)(v46 + 8 * v48 + 16);
        v93 = v55 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v92[-1] = v91;
          *v92 = v91;
          v92 += 2;
          v93 -= 4;
        }
        while (v93);
        if (v55 == (v55 & 0xFFFFFFFFFFFFFFFCLL))
          goto LABEL_18;
        v55 &= 3u;
      }
      do
      {
        *(double *)v49 = *v89;
        v49 = (__int128 *)((char *)v49 + 8);
        --v55;
      }
      while (v55);
LABEL_18:
      v25 = *(_QWORD *)(a1 + 24) - 72;
      v4 = a2;
      v3 = v101;
      v8 = v99;
      v23 = v102;
LABEL_19:
      v26 = (v25 - *v8) >> 3;
      LODWORD(v105) = v21;
      *((_QWORD *)&v105 + 1) = v26;
      sub_239C22598(v22, v39, &v105);
      v9 = 0uLL;
      v27 = v104;
LABEL_20:
      v28 = (__int128 *)(v27 + 8 * (3 * v21 + v3 + (_DWORD)v37 * v23));
      v29 = *((_QWORD *)v28 + 2);
      v30 = *v28;
      v31 = (__int128 *)((char *)v28 + 8 * v37);
      v32 = *((_QWORD *)v31 + 2);
      v33 = *v31;
      v34 = &v28[v37];
      v35 = *((_QWORD *)v34 + 2);
      v36 = *v34;
      *(_OWORD *)v25 = v30;
      *(_QWORD *)(v25 + 16) = v29;
      *(_OWORD *)(v25 + 24) = v33;
      *(_QWORD *)(v25 + 40) = v32;
      *(_OWORD *)(v25 + 48) = v36;
      *(_QWORD *)(v25 + 64) = v35;
      if (++v21 == v103)
        goto LABEL_3;
    }
    v58 = *(_QWORD **)(a1 + 24);
    goto LABEL_68;
  }
}

void sub_239C2C0AC(uint64_t a1, char **a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int *v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  unsigned int *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unsigned int *v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int *v44;
  char *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t *v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  _DWORD *v64;
  unint64_t v65;
  _DWORD *v66;
  int v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  char *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  uint64_t v77;
  char *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  std::bad_alloc *exception;
  std::bad_alloc *v85;
  uint64_t v86;
  void **v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *__p;
  char *v92;
  char *v93;
  void *memptr;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return;
  v4 = v3 - v2;
  if (v3 - v2 < 0)
    sub_2394189F8();
  v7 = (unsigned int *)operator new(v3 - v2);
  v87 = (void **)(a1 + 40);
  v88 = v7;
  v89 = v7;
  v90 = &v7[v4 >> 2];
  v8 = *(_BYTE **)(a1 + 40);
  v9 = *(_BYTE **)(a1 + 48);
  v10 = (v9 - v8) >> 2;
  v11 = (v4 >> 2) + v10;
  if (v11 <= (uint64_t)(*(_QWORD *)(a1 + 56) - (_QWORD)v8) >> 2)
  {
    v13 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 40);
    goto LABEL_16;
  }
  if (v11 >> 62)
    sub_2394189F8();
  v12 = operator new(4 * v11);
  v13 = &v12[4 * v10];
  v14 = v13;
  if (v9 != v8)
  {
    v15 = v9 - v8 - 4;
    if (v15 < 0x2C)
    {
      v14 = &v12[4 * v10];
      do
      {
LABEL_13:
        v21 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v14 - 1) = v21;
        v14 -= 4;
      }
      while (v9 != v8);
      goto LABEL_14;
    }
    v14 = &v12[4 * v10];
    if ((unint64_t)(v8 - v12) < 0x20)
      goto LABEL_13;
    v16 = (v15 >> 2) + 1;
    v17 = &v12[4 * v10 - 16];
    v18 = (__int128 *)(v9 - 16);
    v19 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v20 = *v18;
      *(v17 - 1) = *(v18 - 1);
      *v17 = v20;
      v17 -= 2;
      v18 -= 2;
      v19 -= 8;
    }
    while (v19);
    v14 = &v13[-4 * (v16 & 0x7FFFFFFFFFFFFFF8)];
    v9 -= 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_13;
  }
LABEL_14:
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = &v12[4 * v11];
  if (v8)
  {
    operator delete(v8);
    v14 = *(char **)(a1 + 40);
    v13 = *(char **)(a1 + 48);
  }
LABEL_16:
  v22 = *a2;
  v23 = a2[1];
  if (v14 != v13)
  {
    v24 = 0;
    while (*(_DWORD *)v14 <= *(_DWORD *)v22)
    {
      v14 += 4;
      ++v24;
      if (v14 == v13)
        goto LABEL_22;
    }
    v13 = v14;
    if (v22 != v23)
      goto LABEL_25;
LABEL_113:
    operator delete(v7);
    return;
  }
  v24 = 0;
LABEL_22:
  if (v22 == v23)
    goto LABEL_113;
LABEL_25:
  v86 = a1;
  do
  {
    if (v13 == *(char **)(a1 + 48) || *(_DWORD *)v22 != *(_DWORD *)v13)
    {
      v26 = v89;
      if (v89 < v90)
      {
        *v89 = v24;
        v25 = v89 + 1;
      }
      else
      {
        v27 = v88;
        v28 = v89 - v88;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          sub_2394189F8();
        v30 = (char *)v90 - (char *)v88;
        if (((char *)v90 - (char *)v88) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 62)
            sub_239418A80();
          v32 = operator new(4 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = (unsigned int *)&v32[4 * v28];
        *v33 = v24;
        v25 = v33 + 1;
        if (v89 != v88)
        {
          v34 = (char *)(v89 - 1) - (char *)v88;
          if (v34 < 0x2C)
            goto LABEL_125;
          if ((unint64_t)((char *)v88 - v32) < 0x20)
            goto LABEL_125;
          v35 = (v34 >> 2) + 1;
          v36 = &v32[4 * v28 - 16];
          v37 = v89 - 4;
          v38 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 8;
            v38 -= 8;
          }
          while (v38);
          v33 -= v35 & 0x7FFFFFFFFFFFFFF8;
          v26 = &v89[-(v35 & 0x7FFFFFFFFFFFFFF8)];
          if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_125:
            do
            {
              v40 = *--v26;
              *--v33 = v40;
            }
            while (v26 != v88);
          }
        }
        v88 = v33;
        v90 = (unsigned int *)&v32[4 * v31];
        if (v27)
          operator delete(v27);
        a1 = v86;
      }
      v89 = v25;
      v13 = sub_239C2C8E4(v87, v13, v22);
      v22 += 4;
    }
    v13 += 4;
    ++v24;
  }
  while (v22 != v23);
  v7 = v88;
  if (v88 != v89)
  {
    v41 = *(_DWORD **)(a1 + 32);
    if (v41[2] || v41[3])
    {
      sub_239C2CC34(*(_QWORD *)(a1 + 32), v88, v89, v89 - v88);
      sub_239C2D040((uint64_t)v41, (char *)v88, (char *)v89);
    }
    else
    {
      (*(void (**)(_QWORD, unint64_t, unint64_t))(*(_QWORD *)v41 + 24))(*(_QWORD *)(a1 + 32), (unint64_t)((char *)v89 - (char *)v88) >> 2, (unint64_t)((char *)v89 - (char *)v88) >> 2);
    }
    __p = 0;
    v92 = 0;
    v42 = v88;
    v43 = (char *)v89 - (char *)v88;
    if (v89 != v88)
    {
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_118:
        sub_2394189F8();
      v44 = (unsigned int *)operator new(2 * v43);
      __p = v44;
      v92 = (char *)v44;
      v93 = (char *)&v44[2 * (v43 >> 2)];
      a1 = v86;
      while (1)
      {
        v46 = 3 * *v42;
        v47 = __p;
        v48 = (char *)v44 - (char *)__p;
        if (v44 != __p && *(v44 - 1) == (_DWORD)v46)
        {
          *(v44 - 1) = v46 + 3;
          goto LABEL_61;
        }
        v49 = (v46 + 3);
        if (v44 >= (unsigned int *)v93)
          break;
        *(_QWORD *)v44 = v46 | (v49 << 32);
        v45 = (char *)(v44 + 2);
LABEL_60:
        v92 = v45;
        v44 = (unsigned int *)v45;
LABEL_61:
        if (++v42 == v89)
        {
          v64 = __p;
          goto LABEL_93;
        }
      }
      v50 = v48 >> 3;
      v51 = (v48 >> 3) + 1;
      if (v51 >> 61)
        goto LABEL_118;
      v52 = v93 - (char *)__p;
      if ((v93 - (char *)__p) >> 2 > v51)
        v51 = v52 >> 2;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 >> 61)
          sub_239418A80();
        v54 = operator new(8 * v53);
      }
      else
      {
        v54 = 0;
      }
      v55 = (uint64_t *)&v54[8 * v50];
      *v55 = v46 | (v49 << 32);
      v45 = (char *)(v55 + 1);
      if (v44 == __p)
      {
        v47 = v44;
        a1 = v86;
        goto LABEL_82;
      }
      v56 = (char *)(v44 - 2) - (char *)__p;
      if (v56 < 0x168
        || &v54[(v48 & 0xFFFFFFFFFFFFFFF8) - 8 - (v56 & 0xFFFFFFFFFFFFFFF8)] > &v54[(v48 & 0xFFFFFFFFFFFFFFF8) - 8]
        || (unsigned int *)((char *)v44 - (v56 & 0xFFFFFFFFFFFFFFF8) - 8) > v44 - 2
        || (char *)v44 - v54 - (v48 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      {
        v57 = v44;
        a1 = v86;
      }
      else
      {
        v59 = (v56 >> 3) + 1;
        v57 = &v44[-2 * (v59 & 0x3FFFFFFFFFFFFFFCLL)];
        v60 = &v54[8 * v50 - 16];
        v61 = (__int128 *)(v44 - 4);
        v62 = v59 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v63 = *v61;
          *(v60 - 1) = *(v61 - 1);
          *v60 = v63;
          v60 -= 2;
          v61 -= 2;
          v62 -= 4;
        }
        while (v62);
        v55 -= v59 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v86;
        if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_82;
      }
      do
      {
        v58 = *((_QWORD *)v57 - 1);
        v57 -= 2;
        *--v55 = v58;
      }
      while (v57 != __p);
      v47 = __p;
LABEL_82:
      __p = (unsigned int *)v55;
      v93 = &v54[8 * v53];
      if (v47)
        operator delete(v47);
      goto LABEL_60;
    }
    v64 = 0;
    v44 = 0;
LABEL_93:
    v65 = (char *)v44 - (char *)v64;
    if ((((char *)v44 - (char *)v64) & 0x7FFFFFFF0) != 0)
    {
      v66 = v64 + 2;
      v67 = *v64;
      v68 = (v65 >> 3) - 1;
      do
      {
        v67 += *v66 - *(v66 - 1);
        *v66 = v67;
        v66 += 2;
        --v68;
      }
      while (v68);
    }
    v69 = *(_DWORD *)(a1 + 24);
    v70 = 3 * (v69 + ((unint64_t)((char *)v89 - (char *)v88) >> 2));
    if (v70 <= *(_DWORD *)(a1 + 8))
    {
      if ((v65 & 0x7FFFFFFF8) != 0)
      {
        v78 = *(char **)a1;
        v79 = 3 * v69;
        v80 = (v65 >> 3) - 1;
        do
        {
          v81 = v80;
          v82 = v64[2 * v80];
          if (8 * v79 != 8 * v82)
            memmove(&v78[8 * v64[2 * v80 + 1]], (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 28) + 8 * v82), 8 * v79 - 8 * v82);
          --v80;
          v79 = v82;
        }
        while (v81);
      }
      *(_DWORD *)(a1 + 16) = v70;
      sub_23945215C(a1, v70);
    }
    else
    {
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, (24 * (v69 + ((unint64_t)((char *)v89 - (char *)v88) >> 2)) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
      v71 = (char *)memptr;
      if (!memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v85 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v85, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if (((v92 - (char *)__p) & 0x7FFFFFFF8) != 0)
      {
        v72 = 3 * *(_DWORD *)(a1 + 24);
        v73 = ((unint64_t)(v92 - (char *)__p) >> 3) - 1;
        do
        {
          v74 = v73;
          v75 = __p[2 * v73];
          v76 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 28) + 8 * v75);
          v77 = (uint64_t)v76 + 8 * v72 + -8 * v75;
          if ((const void *)v77 != v76)
            memmove(&v71[8 * __p[2 * v73 + 1]], v76, v77 - (_QWORD)v76);
          --v73;
          v72 = v75;
        }
        while (v74);
      }
      v83 = *(char **)a1;
      *(_QWORD *)a1 = v71;
      *(_QWORD *)(a1 + 8) = ((8 * v70 + 31) & 0xFFFFFFFE0uLL) >> 3;
      *(_DWORD *)(a1 + 16) = v70;
      free(v83);
    }
    v7 = v88;
    *(_DWORD *)(a1 + 24) += (unint64_t)((char *)v89 - (char *)v88) >> 2;
    if (__p)
    {
      operator delete(__p);
      v7 = v88;
    }
  }
  if (v7)
    goto LABEL_113;
}

void sub_239C2C870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a12;
    if (!a12)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = a12;
    if (!a12)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

char *sub_239C2C8E4(void **a1, _BYTE *a2, char *a3)
{
  char *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  char *v47;
  int64_t v48;
  char *v49;
  size_t v50;
  char *v51;
  unint64_t v53;

  v3 = a3;
  v6 = (unint64_t)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 2;
  v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)v9 = *(_DWORD *)a3;
      a1[1] = v9 + 4;
    }
    else
    {
      v11 = v5 - (_QWORD)(v9 + 4);
      v12 = v11 >> 2;
      v13 = (int *)(v5 - 4);
      if (v5 < 4)
      {
        v20 = a1[1];
      }
      else
      {
        v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
        v15 = (char *)(v14 + v6);
        v16 = v14 + v6 + 4;
        if (v5 > v16)
          v16 = (unint64_t)a1[1];
        v17 = v16 + ~v6 - v14;
        v18 = v5 - (_QWORD)v15;
        v19 = v17 >= 0x2C && v18 > 0x1F;
        v20 = a1[1];
        if (!v19)
          goto LABEL_63;
        v21 = (v17 >> 2) + 1;
        v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
        v13 = (int *)((char *)v13 + v22);
        v23 = (_OWORD *)(v5 + 16);
        v24 = (__int128 *)(4 * v12 + 4 * v8 + v6 + 16);
        v25 = v21 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v26 = *v24;
          *(v23 - 1) = *(v24 - 1);
          *v23 = v26;
          v23 += 2;
          v24 += 2;
          v25 -= 8;
        }
        while (v25);
        v20 = (_DWORD *)(v5 + v22);
        if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_63:
          do
          {
            v27 = *v13++;
            *v20++ = v27;
          }
          while ((unint64_t)v13 < v5);
        }
      }
      a1[1] = v20;
      if ((char *)v5 != v9 + 4)
        memmove((void *)(v5 - 4 * v12), v9, v11);
      if (v9 <= v3)
        v3 += 4 * (a1[1] > v3);
      *(_DWORD *)v9 = *(_DWORD *)v3;
    }
    return v9;
  }
  v28 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v28 >> 62)
    sub_2394189F8();
  v30 = v10 - v6;
  if (v30 >> 1 > v28)
    v28 = v30 >> 1;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
    v31 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v31 = v28;
  if (v31)
  {
    if (v31 >> 62)
      sub_239418A80();
    v32 = (char *)operator new(4 * v31);
  }
  else
  {
    v32 = 0;
  }
  v33 = &v32[4 * v8];
  v34 = &v32[4 * v31];
  if (v8 != v31)
    goto LABEL_32;
  if (v7 >= 1)
  {
    v35 = v8 + 2;
    if (v8 >= -1)
      v35 = v8 + 1;
    v33 -= 4 * (v35 >> 1);
LABEL_32:
    v36 = (char *)v6;
    goto LABEL_33;
  }
  if ((_BYTE *)v6 == a2)
    v53 = 1;
  else
    v53 = v7 >> 1;
  if (v53 >> 62)
    sub_239418A80();
  v33 = (char *)operator new(4 * v53);
  v34 = &v33[4 * v53];
  if (!v32)
    goto LABEL_32;
  operator delete(v32);
  v34 = &v33[4 * v53];
  v36 = (char *)*a1;
LABEL_33:
  *(_DWORD *)v33 = *(_DWORD *)v3;
  v37 = v33;
  if (v36 != v9)
  {
    v38 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    v39 = v38 - v36 - 4;
    v40 = v9;
    v37 = v33;
    if (v39 < 0x2C)
      goto LABEL_64;
    v40 = v9;
    v37 = v33;
    if ((unint64_t)(v38 - v33) < 0x20)
      goto LABEL_64;
    v41 = (v39 >> 2) + 1;
    v40 = &v9[-4 * (v41 & 0x7FFFFFFFFFFFFFF8)];
    v42 = v33 - 16;
    v43 = (__int128 *)(v6 + 4 * v8 - 16);
    v44 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    v37 = &v33[-4 * (v41 & 0x7FFFFFFFFFFFFFF8)];
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_64:
      do
      {
        v46 = *((_DWORD *)v40 - 1);
        v40 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v40 != v36);
    }
  }
  v47 = (char *)a1[1];
  v48 = v47 - v9;
  if (v47 != v9)
  {
    v49 = v9;
    v50 = v47 - v9;
    v51 = v34;
    memmove(v33 + 4, v49, v50);
    v34 = v51;
    v36 = (char *)*a1;
  }
  *a1 = v37;
  a1[1] = &v33[v48 + 4];
  a1[2] = v34;
  if (v36)
    operator delete(v36);
  return v33;
}

void sub_239C2CC1C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_239C2CC34(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *i;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void **v11;
  unint64_t v12;
  _QWORD *v13;
  void **v14;
  _QWORD *j;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void *v24;
  _BYTE *v25;
  void **v26;
  char *v27;
  void **v28;
  void **v29;
  void **v30;
  __int128 v31;
  _QWORD *v32;
  void **v33;
  void **v34;
  void **v35;
  void *v36;
  void *v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  void **v45;
  char *v46;
  char *v47;

  if (a2 != a3)
  {
    for (i = a2; i != a3; ++i)
    {
      v8 = *i;
      v10 = *(_QWORD *)(a1 + 88);
      v9 = *(void ***)(a1 + 96);
      v11 = (void **)(v10 + 24 * v8);
      v12 = *(_QWORD *)(a1 + 104);
      if ((unint64_t)v9 >= v12)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v10) >> 3) + 1;
        if (v20 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v10) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v23 = (char *)operator new(24 * v22);
        }
        else
        {
          v23 = 0;
        }
        v27 = &v23[24 * v8];
        v45 = (void **)v27;
        v46 = v27;
        v47 = &v23[24 * v22];
        if (v22 == v8)
        {
          if ((_DWORD)v8)
          {
            v27 -= 24 * ((unint64_t)(v8 + 1) >> 1);
            v45 = (void **)v27;
            v46 = v27;
          }
          else
          {
            v27 = (char *)operator new(0x18uLL);
            v45 = (void **)v27;
            v46 = v27;
            v47 = v27 + 24;
            if (v23)
              operator delete(v23);
          }
        }
        *(_QWORD *)v27 = 0;
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        v26 = v45;
        v28 = *(void ***)(a1 + 88);
        v29 = v45;
        if (v28 != v11)
        {
          v29 = v45;
          v30 = v11;
          do
          {
            *(v29 - 3) = 0;
            *(v29 - 2) = 0;
            v29 -= 3;
            v29[2] = 0;
            v31 = *(_OWORD *)(v30 - 3);
            v30 -= 3;
            *(_OWORD *)v29 = v31;
            v29[2] = v30[2];
            *v30 = 0;
            v30[1] = 0;
            v30[2] = 0;
          }
          while (v30 != v28);
        }
        v32 = v46 + 24;
        v33 = *(void ***)(a1 + 96);
        if (v33 != v11)
        {
          do
          {
            *v32 = 0;
            v32[1] = 0;
            v32[2] = 0;
            *(_OWORD *)v32 = *(_OWORD *)v11;
            v32[2] = v11[2];
            *v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
            v32 += 3;
            v11 += 3;
          }
          while (v11 != v33);
          v11 = *(void ***)(a1 + 96);
        }
        v34 = *(void ***)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v29;
        *(_QWORD *)(a1 + 96) = v32;
        *(_QWORD *)(a1 + 104) = v47;
        if (v11 != v34)
        {
          v35 = v11;
          do
          {
            v37 = *(v35 - 3);
            v35 -= 3;
            v36 = v37;
            if (v37)
            {
              *(v11 - 2) = v36;
              operator delete(v36);
            }
            v11 = v35;
          }
          while (v35 != v34);
          v11 = v34;
        }
        if (v11)
          operator delete(v11);
        v11 = v45;
      }
      else
      {
        v13 = v11 + 3;
        if (v11 != v9)
        {
          v14 = v9 - 3;
          for (j = *(_QWORD **)(a1 + 96); v14 < v9; v14 += 3)
          {
            *j = 0;
            j[1] = 0;
            j[2] = 0;
            *(_OWORD *)j = *(_OWORD *)v14;
            j[2] = v14[2];
            *v14 = 0;
            v14[1] = 0;
            v14[2] = 0;
            j += 3;
          }
          *(_QWORD *)(a1 + 96) = j;
          if (v9 != v13)
          {
            v16 = v9 - 3;
            v17 = v9 - (void **)v13;
            do
            {
              v19 = *v16;
              if (*v16)
              {
                v16[1] = v19;
                operator delete(v19);
                *v16 = 0;
                v16[1] = 0;
                v16[2] = 0;
              }
              v18 = (uint64_t)&v11[v17 - 3];
              *(_OWORD *)v16 = *(_OWORD *)v18;
              v16[2] = v11[v17 - 1];
              *(_QWORD *)v18 = 0;
              *(_QWORD *)(v18 + 8) = 0;
              *(_QWORD *)(v18 + 16) = 0;
              v16 -= 3;
              v17 -= 3;
            }
            while (v17 * 8);
          }
          v24 = *v11;
          if (*v11)
          {
            v11[1] = v24;
            operator delete(v24);
            *v11 = 0;
            v11[1] = 0;
            v11[2] = 0;
          }
          v25 = 0;
          *v11 = 0;
          v11[1] = 0;
          v11[2] = 0;
          goto LABEL_48;
        }
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        v26 = v11;
        *(_QWORD *)(a1 + 96) = v13;
      }
      v25 = *v26;
LABEL_48:
      v38 = *(unsigned int *)(a1 + 8) + a4;
      if (v38 > ((_BYTE *)v11[2] - v25) >> 4)
      {
        if (v38 >> 60)
          sub_2394189F8();
        v39 = v11[1];
        v40 = 16 * v38;
        v41 = (char *)operator new(16 * v38);
        v42 = &v41[(v39 - v25) & 0xFFFFFFFFFFFFFFF0];
        v43 = v42;
        if (v39 != v25)
        {
          v44 = &v41[(v39 - v25) & 0xFFFFFFFFFFFFFFF0];
          do
          {
            v43 = v44 - 16;
            *((_OWORD *)v44 - 1) = *((_OWORD *)v39 - 1);
            v39 -= 16;
            v44 -= 16;
          }
          while (v39 != v25);
        }
        *v11 = v43;
        v11[1] = v42;
        v11[2] = &v41[v40];
        if (v25)
          operator delete(v25);
      }
      ++*(_DWORD *)(a1 + 12);
    }
  }
}

void sub_239C2D02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239BF0504((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C2D040(uint64_t a1, char *a2, char *a3)
{
  unint64_t v3;
  char *v5;
  char *v6;
  uint64_t v7;
  double *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  const double *v19;
  const double *v20;
  double *v21;
  double *v22;
  double *v23;
  unsigned int v24;
  double *v25;
  unsigned int *v26;
  unsigned int *v27;
  int v28;
  double *v29;
  unsigned int *v30;
  unsigned int *v31;
  int v32;
  char *v33;
  unsigned int v34;
  float64x2x3_t v35;
  float64x2x3_t v36;

  v3 = a3 - a2;
  if (a3 != a2)
  {
    v5 = *(char **)(a1 + 88);
    v6 = *(char **)(a1 + 96);
    v7 = v6 - v5;
    if (v6 == v5)
    {
      *(_DWORD *)(a1 + 8) += v3 >> 2;
    }
    else
    {
      if ((0xAAAAAAAAAAAAAAABLL * (v7 >> 3)) >> 60)
        sub_2394189F8();
      v10 = (double *)operator new(0xAAAAAAAAAAAAAAB0 * (v7 >> 3));
      bzero(v10, 0xAAAAAAAAAAAAAAB0 * (v7 >> 3));
      if ((unint64_t)(v7 - 24) >= 0x1B0
        && ((v11 = (v7 - 24) / 0x18uLL, v10 < (double *)&v5[24 * v11 + 16])
          ? (v12 = v5 >= (char *)&v10[2 * v11 + 2])
          : (v12 = 1),
            v12))
      {
        v13 = v11 + 1;
        v14 = v13 & 3;
        if ((v13 & 3) == 0)
          v14 = 4;
        v15 = v13 - v14;
        v16 = 2 * v15;
        v17 = 24 * v15;
        v18 = v10 + 4;
        v19 = (const double *)v5;
        do
        {
          v20 = v19;
          v35 = vld3q_f64(v20);
          v20 += 6;
          v36 = vld3q_f64(v20);
          v21 = v18 - 4;
          vst2q_f64(v21, *(float64x2x2_t *)v35.val[0].f64);
          vst2q_f64(v18, *(float64x2x2_t *)v36.val[0].f64);
          v19 += 12;
          v18 += 8;
          v15 -= 4;
        }
        while (v15);
        v22 = &v10[v16];
        v5 += v17;
      }
      else
      {
        v22 = v10;
      }
      v23 = &v10[0xF555555555555556 * (v7 >> 3)];
      do
      {
        *v22 = *(double *)v5;
        v22[1] = *((double *)v5 + 1);
        v5 += 24;
        v22 += 2;
      }
      while (v5 != v6);
      v24 = *(_DWORD *)a2;
      v25 = v10;
      do
      {
        v26 = *(unsigned int **)v25;
        v27 = (unsigned int *)*((_QWORD *)v25 + 1);
        if (*(unsigned int **)v25 != v27)
        {
          do
          {
            if (*v26 >= v24)
              break;
            v26 += 4;
            *(_QWORD *)v25 = v26;
          }
          while (v26 != v27);
        }
        v25 += 2;
      }
      while (v25 != v23);
      v28 = *(_DWORD *)(a1 + 8);
      v29 = v10;
      do
      {
        v31 = *(unsigned int **)v29;
        v30 = (unsigned int *)*((_QWORD *)v29 + 1);
        if (*(unsigned int **)v29 != v30)
        {
          v32 = 0;
          v33 = a2;
          if (a2 == a3)
          {
LABEL_33:
            v33 = a3;
            goto LABEL_34;
          }
          while (1)
          {
            v34 = *v31;
            while (*(_DWORD *)v33 <= v34)
            {
              *v31 = ++v34;
              ++v32;
              v33 += 4;
              if (v33 == a3)
                goto LABEL_33;
            }
LABEL_34:
            v31 += 4;
            if (v31 == v30)
              break;
            *v31 += v32;
            if (v33 == a3)
              goto LABEL_33;
          }
          *(_QWORD *)v29 = v30;
        }
        v29 += 2;
      }
      while (v29 != v23);
      *(_DWORD *)(a1 + 8) = v28 + (v3 >> 2);
      operator delete(v10);
    }
  }
}

void sub_239C2D298(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  double *v10;
  size_t v11;
  uint64_t v12;
  std::bad_alloc *exception;
  std::bad_alloc *v14;
  void *v15;
  size_t v16;
  int v17;
  void *memptr;

  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 8);
  if (*(_QWORD *)v5 == *(_QWORD *)a1 || (v6 = *(_QWORD *)(a2 + 16), *(double **)v6 == v4))
  {
    v9 = (8 * *(unsigned int *)(v5 + 20) + 31) & 0xFFFFFFFE0;
    v16 = v9 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x100BBD03uLL);
    v15 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v14 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v14, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v17 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 20);
    sub_239C2D298(&v15, a2);
    v10 = *(double **)a1;
    v11 = v16;
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 16) = v17;
    free(v10);
  }
  else
  {
    v7 = *(_DWORD *)(v5 + 16);
    v8 = *(_DWORD *)(v5 + 20);
    if (v7 * v8 && *(_DWORD *)(v6 + 16))
    {
      sub_239A22E8C(1, v7, v8, *(const double **)v5, v7, *(const double **)v6, 1, v4, *(double *)(a2 + 24), 0.0, 1);
    }
    else
    {
      v12 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v12)
        bzero(*(void **)a1, 8 * v12);
    }
  }
}

void sub_239C2D3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  free(a11);
  _Unwind_Resume(a1);
}

void sub_239C2D3E4(_QWORD *a1, uint64_t a2, _DWORD *a3, char **a4)
{
  uint64_t v4;
  char **v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t *v31;
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  int v50;
  char **v51;
  _DWORD *v52;
  _DWORD *v53;

  v4 = a1[1];
  if (*a1 == v4)
    return;
  v5 = a4;
  v9 = v4 - *a1;
  v10 = v9 >> 2;
  v11 = *a4;
  if (v9 >> 2 > (unint64_t)((a4[2] - *a4) >> 3))
  {
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_45:
      sub_2394189F8();
    v12 = a4[1];
    v13 = (char *)operator new(2 * v9);
    v14 = v12 - v11;
    v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    v16 = v15;
    if (v12 == v11)
      goto LABEL_12;
    if ((unint64_t)(v14 - 8) >= 0x58)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v12 - &v13[v14 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
      {
        v17 = v14 >> 3;
        v18 = ((unint64_t)(v14 - 8) >> 3) + 1;
        v19 = &v13[8 * v17 - 16];
        v20 = (__int128 *)(v12 - 16);
        v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v22 = *v20;
          *((_OWORD *)v19 - 1) = *(v20 - 1);
          *(_OWORD *)v19 = v22;
          v19 -= 32;
          v20 -= 2;
          v21 -= 4;
        }
        while (v21);
        v16 = &v15[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
        v12 -= 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_12:
          *v5 = v16;
          v5[1] = v15;
          v5[2] = &v13[8 * v10];
          if (v11)
            operator delete(v11);
          goto LABEL_14;
        }
      }
    }
    else
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v23 = *((_QWORD *)v12 - 1);
      v12 -= 8;
      *((_QWORD *)v16 - 1) = v23;
      v16 -= 8;
    }
    while (v12 != v11);
    goto LABEL_12;
  }
LABEL_14:
  v25 = *(_DWORD **)a2;
  v24 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v24)
  {
    v26 = 0;
    v27 = 0;
    v29 = (_DWORD *)*a1;
    v28 = (_DWORD *)a1[1];
    v52 = v28;
    v53 = *(_DWORD **)(a2 + 8);
    v51 = v5;
    while (1)
    {
      if (*v25 != *v29)
        goto LABEL_16;
      v31 = (unint64_t *)v5[1];
      v30 = (unint64_t)v5[2];
      if ((unint64_t)v31 >= v30)
        break;
      *v31 = v26 | (unint64_t)(v27 << 32);
      v32 = (char *)(v31 + 1);
LABEL_42:
      v5[1] = v32;
      if (++v29 == v28)
        return;
      v27 = (*a3 + v27);
LABEL_16:
      ++v25;
      ++v26;
      if (v25 == v24)
        return;
    }
    v33 = (unint64_t *)*v5;
    v34 = (char *)v31 - *v5;
    v35 = v34 >> 3;
    v36 = (v34 >> 3) + 1;
    if (v36 >> 61)
      goto LABEL_45;
    v37 = v30 - (_QWORD)v33;
    if (v37 >> 2 > v36)
      v36 = v37 >> 2;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    if (v36)
    {
      if (v36 >> 61)
        sub_239418A80();
      v38 = v27;
      v39 = v36;
      v40 = operator new(8 * v36);
      v27 = v38;
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v41 = (unint64_t *)&v40[8 * v35];
    *v41 = v26 | (unint64_t)(v27 << 32);
    v32 = (char *)(v41 + 1);
    if (v31 == v33)
    {
      v33 = v31;
      v43 = v39;
      v5 = v51;
    }
    else
    {
      v42 = (char *)(v31 - 1) - (char *)v33;
      v43 = v39;
      if (v42 < 0x58)
      {
        v5 = v51;
        goto LABEL_37;
      }
      v5 = v51;
      if ((unint64_t)((char *)v31 - &v40[v34]) < 0x20)
        goto LABEL_49;
      v44 = (v42 >> 3) + 1;
      v45 = &v40[8 * v35 - 16];
      v46 = (__int128 *)(v31 - 2);
      v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = *v46;
        *(v45 - 1) = *(v46 - 1);
        *v45 = v48;
        v45 -= 2;
        v46 -= 2;
        v47 -= 4;
      }
      while (v47);
      v41 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
      v31 -= v44 & 0x3FFFFFFFFFFFFFFCLL;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_49:
        do
        {
LABEL_37:
          v49 = *--v31;
          *--v41 = v49;
        }
        while (v31 != v33);
        v33 = (unint64_t *)*v5;
      }
    }
    *v5 = (char *)v41;
    v5[1] = v32;
    v5[2] = &v40[8 * v43];
    if (v33)
    {
      v50 = v27;
      operator delete(v33);
      LODWORD(v27) = v50;
    }
    v28 = v52;
    v24 = v53;
    goto LABEL_42;
  }
}

void sub_239C2D710(uint64_t a1, uint64_t **a2)
{
  double *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v15;
  uint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int32x4_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int64x2_t *v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t *v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t *v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t *v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t *v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t *v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t *v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t *v90;
  int64x2_t *v91;
  int64x2_t *v92;
  int64x2_t *v93;
  int64x2_t *v94;
  int64x2_t *v95;
  int64x2_t *v96;
  int64x2_t *v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  char *v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  unint64_t v128;
  int32x4_t v129;
  int32x4_t v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  BOOL v142;
  uint64_t v143;
  int v144;
  int v145;
  unsigned int v146;
  int32x4_t v147;
  int32x4_t v148;
  unsigned int v149;
  unsigned int v150;
  unint64_t v151;
  uint64_t v152;
  void *v153;
  float64x2_t *v154;
  unint64_t v155;
  double *v156;
  double *v157;
  BOOL v158;
  uint64_t v159;
  float64x2_t *v160;
  float64x2_t *v161;
  uint64_t v162;
  float64x2_t v163;
  double *v164;
  double v165;
  std::bad_alloc *exception;
  std::bad_alloc *v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  int64x2_t v171;
  void *v172[2];
  unsigned int v173;
  unsigned int v174;
  unsigned int v175[4];
  uint64_t v176;
  unsigned int v177;
  void *memptr;
  unsigned int v179;
  char *v180;
  int v181;

  v3 = *(double **)a1;
  v4 = *a2;
  v5 = **a2;
  if (v5 == *(_QWORD *)a1)
  {
    v15 = (8 * (*((_DWORD *)v4 + 4) * *((_DWORD *)v4 + 5)) + 31) & 0xFFFFFFFE0;
    v172[1] = (void *)(v15 >> 3);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v15, 0x100BBD03uLL);
    v172[0] = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v167 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v167, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v168 = a1;
    v16 = *a2;
    v17 = *((_DWORD *)v16 + 4);
    v18 = *((unsigned int *)v16 + 5);
    v173 = v18;
    v174 = v17;
    sub_23945215C((uint64_t)v172, v17 * (unint64_t)v18);
    v19 = v17;
    if (v17)
    {
      v20 = 0;
      v169 = v18 & 0xFFFFFFF8;
      v21.i64[0] = -1;
      v21.i64[1] = -1;
      v170 = v17;
      do
      {
        v22 = v20 + 8;
        v23 = v19 - v20;
        if (v20 + 8 <= v19 || (_DWORD)v23 == 8)
        {
          if (v18 >= 8)
          {
            v25 = 0;
            v26 = v173;
            v27 = (char *)v172[0];
            v28 = v173;
            v29 = 3 * v173;
            v30 = 2 * v173;
            v31 = 5 * v173;
            v32 = 3 * v173;
            v33 = 7 * v173;
            v34 = v173 * v20;
            do
            {
              v35 = *((unsigned int *)v16 + 4);
              v36 = (int64x2_t *)(*v16 + 8 * (v20 + (_DWORD)v35 * (_DWORD)v25));
              v38 = v36[2];
              v37 = v36[3];
              v40 = *v36;
              v39 = v36[1];
              v41 = (int64x2_t *)((char *)v36 + 8 * v35);
              v43 = v41[2];
              v42 = v41[3];
              v45 = *v41;
              v44 = v41[1];
              v46 = &v36[v35];
              v48 = v46[2];
              v47 = v46[3];
              v50 = *v46;
              v49 = v46[1];
              v51 = (int64x2_t *)((char *)v36 + 24 * v35);
              v53 = v51[2];
              v52 = v51[3];
              v55 = *v51;
              v54 = v51[1];
              v56 = &v36[2 * v35];
              v58 = v56[2];
              v57 = v56[3];
              v60 = *v56;
              v59 = v56[1];
              v61 = (int64x2_t *)((char *)v36 + 40 * v35);
              v63 = v61[2];
              v62 = v61[3];
              v65 = *v61;
              v64 = v61[1];
              v66 = &v36[3 * v35];
              v68 = v66[2];
              v67 = v66[3];
              v69 = v66[1];
              v70 = (int64x2_t *)((char *)v36 + 56 * v35);
              v171 = vzip1q_s64(v50, v55);
              v50.i64[0] = vdupq_laneq_s64(v50, 1).u64[0];
              v50.i64[1] = v55.i64[1];
              v71 = vzip1q_s64(v40, v45);
              v72 = vzip2q_s64(v40, v45);
              v73 = vzip1q_s64(v60, v65);
              v60.i64[0] = vdupq_laneq_s64(v60, 1).u64[0];
              v60.i64[1] = v65.i64[1];
              v74 = vzip1q_s64(*v66, *v70);
              v75.i64[0] = vdupq_laneq_s64(*v66, 1).u64[0];
              v75.i64[1] = v70->i64[1];
              v76 = vzip1q_s64(v39, v44);
              v77 = vzip2q_s64(v39, v44);
              v78 = vzip1q_s64(v49, v54);
              v49.i64[0] = vdupq_laneq_s64(v49, 1).u64[0];
              v49.i64[1] = v54.i64[1];
              v79 = vzip1q_s64(v59, v64);
              v59.i64[0] = vdupq_laneq_s64(v59, 1).u64[0];
              v59.i64[1] = v64.i64[1];
              v80 = vzip1q_s64(v69, v70[1]);
              v69.i64[0] = vdupq_laneq_s64(v69, 1).u64[0];
              v69.i64[1] = v70[1].i64[1];
              v81 = vzip1q_s64(v38, v43);
              v82 = vzip2q_s64(v38, v43);
              v83 = vzip1q_s64(v48, v53);
              v48.i64[0] = vdupq_laneq_s64(v48, 1).u64[0];
              v48.i64[1] = v53.i64[1];
              v84 = vzip1q_s64(v58, v63);
              v58.i64[0] = vdupq_laneq_s64(v58, 1).u64[0];
              v58.i64[1] = v63.i64[1];
              v63.i64[0] = vdupq_laneq_s64(v68, 1).u64[0];
              v85 = vzip1q_s64(v68, v70[2]);
              v63.i64[1] = v70[2].i64[1];
              v86 = vzip1q_s64(v37, v42);
              v87 = vzip2q_s64(v37, v42);
              v88 = vzip1q_s64(v47, v52);
              v47.i64[0] = vdupq_laneq_s64(v47, 1).u64[0];
              v47.i64[1] = v52.i64[1];
              v52.i64[0] = vdupq_laneq_s64(v57, 1).u64[0];
              v52.i64[1] = v62.i64[1];
              v37.i64[0] = vdupq_laneq_s64(v67, 1).u64[0];
              v89 = vzip1q_s64(v67, v70[3]);
              v37.i64[1] = v70[3].i64[1];
              v90 = (int64x2_t *)&v27[8 * (v34 + v25)];
              v90[2] = v73;
              v90[3] = v74;
              *v90 = v71;
              v90[1] = v171;
              v91 = (int64x2_t *)((char *)v90 + 8 * v26);
              *v91 = v72;
              v91[1] = v50;
              v91[2] = v60;
              v91[3] = v75;
              v92 = &v90[v28];
              *v92 = v76;
              v92[1] = v78;
              v92[2] = v79;
              v92[3] = v80;
              v93 = (int64x2_t *)((char *)v90 + 8 * v29);
              *v93 = v77;
              v93[1] = v49;
              v93[2] = v59;
              v93[3] = v69;
              v94 = &v90[v30];
              *v94 = v81;
              v94[1] = v83;
              v94[2] = v84;
              v94[3] = v85;
              v95 = (int64x2_t *)((char *)v90 + 8 * v31);
              *v95 = v82;
              v95[1] = v48;
              v95[2] = v58;
              v95[3] = v63;
              v96 = &v90[v32];
              *v96 = v86;
              v96[1] = v88;
              v96[2] = vzip1q_s64(v57, v62);
              v96[3] = v89;
              v97 = (int64x2_t *)((char *)v90 + 8 * v33);
              v97[2] = v52;
              v97[3] = v37;
              *v97 = v87;
              v97[1] = v47;
              v98 = v25 + 16;
              v25 += 8;
            }
            while (v98 <= v18);
          }
          v21.i64[0] = -1;
          v21.i64[1] = -1;
          if ((v18 & 7) != 0)
          {
            LODWORD(memptr) = v18 & 7;
            HIDWORD(memptr) = 8;
            v179 = v173;
            v180 = (char *)v172[0] + 8 * v169 + 8 * v173 * v20;
            v181 = v169 + v173 * v20;
            v99 = *v16;
            v100 = *((_DWORD *)v16 + 4);
            v101 = v20 + v100 * v169;
            v175[0] = 8;
            v175[1] = memptr;
            v175[2] = v100;
            v176 = v99 + 8 * v101;
            v177 = v101;
            sub_239C0C20C((uint64_t)&memptr, v175);
            v21.i64[0] = -1;
            v21.i64[1] = -1;
          }
        }
        else if ((_DWORD)v18)
        {
          v102 = 0;
          v103 = v173;
          v104 = *v16;
          v105 = *((_DWORD *)v16 + 4);
          v106 = (char *)v172[0];
          while (1)
          {
            v107 = v102 + 8;
            v108 = v18 - v102;
            if (v102 + 8 <= v18)
              v108 = 8;
            if (v108)
              break;
LABEL_24:
            v102 += 8;
            if (v107 >= v18)
              goto LABEL_11;
          }
          v109 = 0;
          v110 = 0;
          if (v108 >= 0)
            v111 = v108;
          else
            v111 = -v108;
          v112 = 2 * v108;
          v113 = -2 * v108;
          while (2)
          {
            v117 = HIDWORD(v110);
            if (v111 >> 4 > 0x270)
            {
              v120 = v108 + v110 + v108 * HIDWORD(v110);
              v121 = (v120 / v108);
              v122 = (v120 % v108);
              v123 = v122 | (v121 << 32);
              v124 = (v122 + v108) | ((unint64_t)(v121 - 1) << 32);
              if ((int)v122 < 0)
                v119 = v124;
              else
                v119 = v123;
              goto LABEL_56;
            }
            v118 = (v108 + v110);
            if (v108 + (int)v110 >= 0)
            {
              v119 = v110 & 0xFFFFFFFF00000000 | v118;
              if ((int)v118 < v108)
              {
LABEL_56:
                if ((_DWORD)v110 != (_DWORD)v119 || HIDWORD(v110) != HIDWORD(v119))
                {
                  v136 = &v106[8 * v102 + 8 * (v20 + (_DWORD)v109) * v103];
                  LODWORD(v137) = v110;
                  v138 = v110;
                  do
                  {
                    *(_QWORD *)v136 = *(_QWORD *)(v104
                                                + 8 * (v20 + v105 * (_DWORD)v102)
                                                + 8 * (HIDWORD(v138) + v137 * v105));
                    v136 += 8;
                    v139 = (v137 + 1);
                    v140 = v138 & 0xFFFFFFFF00000000;
                    v141 = v138 & 0xFFFFFFFF00000000 | v139;
                    v137 = v140 + 0x100000000;
                    if (v108 > (int)v139)
                      v137 = v141;
                    v142 = (_DWORD)v137 == (_DWORD)v119 && HIDWORD(v137) == HIDWORD(v119);
                    v138 = v137;
                  }
                  while (!v142);
                }
                if (v111 >> 4 > 0x270)
                {
                  v114 = v108 + v110 + v108 * HIDWORD(v110);
                  v115 = (v114 / v108);
                  v116 = (v114 % v108);
                  if ((v116 & 0x80000000) != 0)
                  {
                    v116 = (v116 + v108);
                    v115 = (v115 - 1);
                  }
                  v110 = v116 | (v115 << 32);
                }
                else
                {
                  v143 = (v108 + v110);
                  if (v108 + (int)v110 < 0)
                  {
                    v144 = v113 + ((v112 + v110) & ~((v112 + (int)v110) >> 31));
                    if (v144 == (_DWORD)v110)
                      v145 = 1;
                    else
                      v145 = 2;
                    v146 = v145 + (v144 - (v144 != (_DWORD)v110) - v110) / v108;
                    if (v146 < 8)
                      goto LABEL_79;
                    v147 = 0uLL;
                    v148 = (int32x4_t)v117;
                    v149 = v146 & 0xFFFFFFF8;
                    do
                    {
                      v148 = vaddq_s32(v148, v21);
                      v147 = vaddq_s32(v147, v21);
                      v149 -= 8;
                    }
                    while (v149);
                    LODWORD(v143) = v143 + (v146 & 0xFFFFFFF8) * v108;
                    v117 = vaddvq_s32(vaddq_s32(v147, v148));
                    if (v146 != (v146 & 0xFFFFFFF8))
                    {
LABEL_79:
                      v150 = ((v108 + v143) >> 31)
                           + (((v108 + (_DWORD)v143) & ~((v108 + (int)v143) >> 31))
                            - (((v108 + v143) >> 31)
                             + v108
                             + (_DWORD)v143))
                           / v108;
                      LODWORD(v143) = v108 + v143 + v108 * v150;
                      v117 = v117 + ~v150;
                    }
                    v110 = v143 | (v117 << 32);
                    if ((int)v143 >= v108)
                    {
LABEL_81:
                      v151 = HIDWORD(v110);
                      do
                      {
                        v143 = (v143 - v108);
                        v151 = (v151 + 1);
                      }
                      while ((int)v143 >= v108);
                      v110 = v143 | (v151 << 32);
                    }
                  }
                  else
                  {
                    v110 = v110 & 0xFFFFFFFF00000000 | v143;
                    if ((int)v143 >= v108)
                      goto LABEL_81;
                  }
                }
                if (++v109 == v23)
                  goto LABEL_24;
                continue;
              }
LABEL_53:
              v134 = HIDWORD(v119);
              do
              {
                v118 = (v118 - v108);
                v134 = (v134 + 1);
              }
              while ((int)v118 >= v108);
              v119 = v118 | (v134 << 32);
              goto LABEL_56;
            }
            break;
          }
          v125 = v113 + ((v112 + v110) & ~((v112 + (int)v110) >> 31));
          if (v125 == (_DWORD)v110)
            v126 = 1;
          else
            v126 = 2;
          v127 = v126 + (v125 - (v125 != (_DWORD)v110) - v110) / v108;
          if (v127 < 8)
          {
            v128 = HIDWORD(v110);
            goto LABEL_51;
          }
          v129 = 0uLL;
          v130 = (int32x4_t)HIDWORD(v110);
          v131 = v127 & 0xFFFFFFF8;
          do
          {
            v130 = vaddq_s32(v130, v21);
            v129 = vaddq_s32(v129, v21);
            v131 -= 8;
          }
          while (v131);
          LODWORD(v118) = v118 + (v127 & 0xFFFFFFF8) * v108;
          v128 = vaddvq_s32(vaddq_s32(v129, v130));
          if (v127 != (v127 & 0xFFFFFFF8))
          {
LABEL_51:
            v132 = v108 + v118;
            v133 = (v132 >> 31) + ((v132 & ~(v132 >> 31)) - ((v132 >> 31) + v132)) / v108;
            LODWORD(v118) = v132 + v108 * v133;
            v128 = v128 + ~v133;
          }
          v119 = v118 | (v128 << 32);
          if ((int)v118 < v108)
            goto LABEL_56;
          goto LABEL_53;
        }
LABEL_11:
        v20 = v22;
        v19 = v170;
      }
      while (v22 < v170);
    }
    v152 = (*(_DWORD *)(v168 + 20) * *(_DWORD *)(v168 + 16));
    v153 = v172[0];
    if (!(_DWORD)v152)
      goto LABEL_98;
    v154 = *(float64x2_t **)v168;
    v155 = (v152 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v155 >= 9)
    {
      v158 = v154 >= (float64x2_t *)((char *)v172[0] + 8 * v152) || v172[0] >= &v154->f64[v152];
      v156 = (double *)v172[0];
      v157 = *(double **)v168;
      if (v158)
      {
        v159 = (v155 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v156 = (double *)((char *)v172[0] + 8 * v159);
        v160 = v154 + 1;
        v161 = (float64x2_t *)((char *)v172[0] + 16);
        v162 = v159;
        do
        {
          v163 = vaddq_f64(*v161, *v160);
          v160[-1] = vaddq_f64(v161[-1], v160[-1]);
          *v160 = v163;
          v160 += 2;
          v161 += 2;
          v162 -= 4;
        }
        while (v162);
        if (v155 + 1 == v159)
          goto LABEL_98;
        v157 = &v154->f64[v159];
      }
    }
    else
    {
      v156 = (double *)v172[0];
      v157 = *(double **)v168;
    }
    v164 = &v154->f64[v152];
    do
    {
      v165 = *v156++;
      *v157 = v165 + *v157;
      ++v157;
    }
    while (v157 != v164);
LABEL_98:
    free(v153);
    return;
  }
  v6 = (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *((_DWORD *)v4 + 4);
    v9 = *((_DWORD *)v4 + 5);
    v10 = 8 * v6;
    do
    {
      *v3 = *(double *)(v5 + 8 * (HIDWORD(v7) + v8 * v7)) + *v3;
      ++v3;
      v11 = (v7 + 1);
      v12 = v7 & 0xFFFFFFFF00000000;
      v13 = v12 | v11;
      v7 = v12 + 0x100000000;
      if (v9 > (int)v11)
        v7 = v13;
      v10 -= 8;
    }
    while (v10);
  }
}

void sub_239C2DEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  free(a15);
  _Unwind_Resume(a1);
}

void sub_239C2DED8(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v3;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;

  if (a3 != a2)
  {
    v3 = a3;
    v6 = a1 + 40;
    while (1)
    {
      v8 = *--v3;
      v7 = v8;
      v9 = *(_QWORD *)(a1 + 88);
      v10 = (uint64_t *)(v9 + 24 * v8);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        v13 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 80);
        do
        {
          v16 = ((v14 - v13) << 6) - 1;
          if (v14 == v13)
            v16 = 0;
          v17 = v15 + *(_QWORD *)(a1 + 72);
          if (v16 == v17)
          {
            sub_2396DA1D4(v6);
            v13 = *(_QWORD *)(a1 + 48);
            v14 = *(_QWORD *)(a1 + 56);
            v17 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v13 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF)) = *(_QWORD *)(v11 + 8);
          v15 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v15;
          v11 += 16;
        }
        while (v11 != v12);
        v9 = *(_QWORD *)(a1 + 88);
        v7 = *v3;
      }
      v18 = v9 + 24 * v7;
      v19 = v18 + 24;
      v20 = *(_QWORD *)(a1 + 96);
      if (v18 + 24 != v20)
        break;
      if (v19 != v18)
        goto LABEL_19;
LABEL_3:
      *(_QWORD *)(a1 + 96) = v18;
      --*(_DWORD *)(a1 + 12);
      if (v3 == a2)
        return;
    }
    do
    {
      v23 = *(void **)v18;
      if (*(_QWORD *)v18)
      {
        *(_QWORD *)(v18 + 8) = v23;
        operator delete(v23);
        *(_QWORD *)(v18 + 8) = 0;
        *(_QWORD *)(v18 + 16) = 0;
      }
      v21 = v18 + 24;
      *(_OWORD *)v18 = *(_OWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(v18 + 40);
      *(_QWORD *)(v18 + 32) = 0;
      *(_QWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 24) = 0;
      v22 = v18 + 48;
      v18 += 24;
    }
    while (v22 != v20);
    v19 = *(_QWORD *)(a1 + 96);
    v18 = v21;
    if (v19 == v21)
      goto LABEL_3;
LABEL_19:
    v24 = v19;
    do
    {
      v26 = *(void **)(v24 - 24);
      v24 -= 24;
      v25 = v26;
      if (v26)
      {
        *(_QWORD *)(v19 - 16) = v25;
        operator delete(v25);
      }
      v19 = v24;
    }
    while (v24 != v18);
    goto LABEL_3;
  }
}

void sub_239C2E074(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v5;
  char *v6;
  uint64_t v7;
  size_t v10;
  double *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  const double *v20;
  const double *v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  unint64_t v45;
  const double *v46;
  uint64_t v47;
  const double *v48;
  int32x2_t v49;
  int32x2_t v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  _DWORD *v54;
  uint64_t v55;
  float64x2x2_t v56;
  float64x2x2_t v57;
  float64x2x3_t v58;
  float64x2x3_t v59;

  v3 = a3 - a2;
  if (a3 == a2)
    return;
  v5 = *(char **)(a1 + 88);
  v6 = *(char **)(a1 + 96);
  v7 = v6 - v5;
  if (v6 == v5)
  {
    *(_DWORD *)(a1 + 8) -= (unint64_t)v3 >> 2;
    return;
  }
  if ((0xAAAAAAAAAAAAAAABLL * (v7 >> 3)) >> 60)
    sub_2394189F8();
  v55 = v3 >> 2;
  v10 = 0xAAAAAAAAAAAAAAB0 * (v7 >> 3);
  v11 = (double *)operator new(v10);
  bzero(v11, v10);
  v52 = v3;
  if ((unint64_t)(v7 - 24) >= 0x1B0
    && ((v12 = (v7 - 24) / 0x18uLL, v11 < (double *)&v5[24 * v12 + 16])
      ? (v13 = v5 >= (char *)&v11[2 * v12 + 2])
      : (v13 = 1),
        v13))
  {
    v14 = v12 + 1;
    v15 = v14 & 3;
    if ((v14 & 3) == 0)
      v15 = 4;
    v16 = v14 - v15;
    v17 = 2 * v16;
    v18 = 24 * v16;
    v19 = v11 + 4;
    v20 = (const double *)v5;
    do
    {
      v21 = v20;
      v58 = vld3q_f64(v21);
      v21 += 6;
      v59 = vld3q_f64(v21);
      v22 = v19 - 4;
      vst2q_f64(v22, *(float64x2x2_t *)v58.val[0].f64);
      vst2q_f64(v19, *(float64x2x2_t *)v59.val[0].f64);
      v20 += 12;
      v19 += 8;
      v16 -= 4;
    }
    while (v16);
    v23 = &v11[v17];
    v5 += v18;
  }
  else
  {
    v23 = v11;
  }
  v24 = &v11[0xF555555555555556 * (v7 >> 3)];
  do
  {
    *v23 = *(double *)v5;
    v23[1] = *((double *)v5 + 1);
    v5 += 24;
    v23 += 2;
  }
  while (v5 != v6);
  v53 = v11;
  v54 = (_DWORD *)(a3 - 4);
  if (a3 - 4 < a2)
  {
    v44 = v11;
    if (v10 - 16 >= 0x30)
    {
      v45 = ((v10 - 16) >> 4) + 1;
      v46 = v11 + 4;
      v47 = v45 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = v46 - 4;
        v56 = vld2q_f64(v48);
        v49 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v56.val[1], (int64x2_t)v56.val[0])));
        if ((v49.i8[0] & 1) != 0)
          *((_QWORD *)v46 - 3) = *(_QWORD *)&v56.val[1].f64[0] - 16;
        if ((v49.i8[4] & 1) != 0)
          *((_QWORD *)v46 - 1) = *(_QWORD *)&v56.val[1].f64[1] - 16;
        v57 = vld2q_f64(v46);
        v50 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64((int64x2_t)v57.val[1], (int64x2_t)v57.val[0])));
        if ((v50.i8[0] & 1) != 0)
          *((_QWORD *)v46 + 1) = *(_QWORD *)&v57.val[1].f64[0] - 16;
        if ((v50.i8[4] & 1) != 0)
          *((_QWORD *)v46 + 3) = *(_QWORD *)&v57.val[1].f64[1] - 16;
        v46 += 8;
        v47 -= 4;
      }
      while (v47);
      if (v45 == (v45 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_59;
      v44 = &v11[2 * (v45 & 0x1FFFFFFFFFFFFFFCLL)];
    }
    do
    {
      v51 = *((_QWORD *)v44 + 1);
      if (v51 != *(_QWORD *)v44)
        *((_QWORD *)v44 + 1) = v51 - 16;
      v44 += 2;
    }
    while (v44 != v24);
    goto LABEL_59;
  }
  v25 = 0;
  while (2)
  {
    v26 = *(_QWORD *)v11;
    v27 = *((_QWORD *)v11 + 1);
    if (v27 == *(_QWORD *)v11)
      goto LABEL_22;
    v28 = v27 - 16;
    *((_QWORD *)v11 + 1) = v27 - 16;
    if (v27 - 16 < v26)
      goto LABEL_21;
    v29 = v54;
    v30 = v55;
    while (1)
    {
      v32 = *(_DWORD *)v28;
      if (*(_DWORD *)v28 <= *v29)
        break;
      *(_DWORD *)v28 = v32 - v30;
      v28 -= 16;
      *((_QWORD *)v11 + 1) = v28;
LABEL_27:
      if (v28 < v26 || (unint64_t)v29 < a2)
        goto LABEL_21;
    }
    if (v32 != *v29)
    {
      --v29;
      --v30;
      goto LABEL_27;
    }
    v33 = *(_QWORD *)(a1 + 56);
    v34 = *(_QWORD *)(a1 + 48);
    v35 = ((v33 - v34) << 6) - 1;
    if (v33 == v34)
      v35 = 0;
    v36 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
    v37 = v28;
    if (v35 == v36)
    {
      sub_2396DA1D4(a1 + 40);
      v34 = *(_QWORD *)(a1 + 48);
      v36 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
      v26 = *(_QWORD *)v11;
      v37 = *((_QWORD *)v11 + 1);
    }
    *(_QWORD *)(*(_QWORD *)(v34 + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF)) = *(_QWORD *)(v28 + 8);
    v38 = *(_QWORD *)(a1 + 88);
    ++*(_QWORD *)(a1 + 80);
    v39 = v38 + 24 * v25;
    if (v26 < v37)
    {
      *((_QWORD *)v11 + 1) = v37 - 16;
      v40 = *(_QWORD *)(v39 + 8);
      v41 = v40 - (v37 + 16);
      if (v40 != v37 + 16)
      {
        memmove((void *)v37, (const void *)(v37 + 16), v40 - (v37 + 16));
        v26 = *(_QWORD *)v11;
      }
      *(_QWORD *)(v39 + 8) = v37 + v41;
      --v29;
      --v30;
      v28 = *((_QWORD *)v11 + 1);
      goto LABEL_27;
    }
    v42 = *(_QWORD *)(v39 + 8);
    v43 = v42 - (v37 + 16);
    if (v42 != v37 + 16)
      memmove((void *)v37, (const void *)(v37 + 16), v42 - (v37 + 16));
    *(_QWORD *)(v39 + 8) = v37 + v43;
LABEL_21:
    ++v25;
LABEL_22:
    v11 += 2;
    if (v11 != v24)
      continue;
    break;
  }
LABEL_59:
  *(_DWORD *)(a1 + 8) -= v52 >> 2;
  operator delete(v53);
}

void sub_239C2E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_239C2E488(uint64_t result, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(_QWORD *)(result + 80);
  v2 = *(unsigned int **)(result + 88);
  *v2 = 0;
  v4 = *(uint64_t **)(v3 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      v6 = 0;
      do
      {
        v7 = *((_DWORD *)v4 + 4);
        v8 = a2 + 8;
        v9 = v5;
        do
        {
          v10 = *(_DWORD *)(v9 + 32);
          v11 = v10 >= v7;
          if (v10 >= v7)
            v12 = (uint64_t *)v9;
          else
            v12 = (uint64_t *)(v9 + 8);
          if (v11)
            v8 = v9;
          v9 = *v12;
        }
        while (*v12);
        if (v8 == a2 + 8 || v7 < *(_DWORD *)(v8 + 32))
          v8 = a2 + 8;
        if (*(_DWORD *)(v8 + 96) == *((_DWORD *)v4 + 5))
          *v2 = ++v6;
        v4 = (uint64_t *)*v4;
      }
      while (v4);
    }
    else
    {
      v6 = 0;
      do
      {
        if (*(_DWORD *)(a2 + 104) == *((_DWORD *)v4 + 5))
          *v2 = ++v6;
        v4 = (uint64_t *)*v4;
      }
      while (v4);
    }
  }
  else
  {
    v6 = 0;
  }
  if (v6 <= *(_DWORD *)(result + 24))
    v6 = *(_DWORD *)(result + 24);
  *v2 = v6;
  v13 = *(unsigned int **)(result + 96);
  v11 = *v13 >= v6;
  v14 = *v13 - v6;
  if (!v11)
    v14 = 0;
  *v2 = v14;
  v2[1] = 0;
  v15 = *(uint64_t **)(v3 + 56);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 32);
    if (v16)
    {
      v17 = 0;
      do
      {
        v18 = *((_DWORD *)v15 + 4);
        v19 = a2 + 32;
        v20 = v16;
        do
        {
          v21 = *(_DWORD *)(v20 + 32);
          v22 = v21 >= v18;
          if (v21 >= v18)
            v23 = (uint64_t *)v20;
          else
            v23 = (uint64_t *)(v20 + 8);
          if (v22)
            v19 = v20;
          v20 = *v23;
        }
        while (*v23);
        if (v19 == a2 + 32 || v18 < *(_DWORD *)(v19 + 32))
          v19 = a2 + 32;
        if (*(_DWORD *)(v19 + 80) == *((_DWORD *)v15 + 5))
          v2[1] = ++v17;
        v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
    else
    {
      v17 = 0;
      do
      {
        if (*(_DWORD *)(a2 + 112) == *((_DWORD *)v15 + 5))
          v2[1] = ++v17;
        v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
  }
  else
  {
    v17 = 0;
  }
  v24 = *(_DWORD *)(result + 64);
  if (v17 > v24)
    v24 = v17;
  v2[1] = v24;
  v25 = v13[1];
  v11 = v25 >= v24;
  v26 = v25 - v24;
  if (!v11)
    v26 = 0;
  v2[1] = v26;
  return result;
}

void sub_239C2E638(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "DenseSchur");
}

uint64_t sub_239C2E660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  double *v22;
  double v23;
  void *v25[2];
  int v26;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = (uint64_t *)(a1 + 840);
  sub_239C2E8B0(a1 + 352, (unsigned int **)(a1 + 632), a1 + 840, v5);
  v7 = *(unsigned int *)(a1 + 856);
  *(_DWORD *)(a2 + 16) = v7;
  sub_23945215C(a2, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
  if (*(_BYTE *)(a1 + 328))
  {
    v8 = *(_DWORD *)(a1 + 344);
    if (v8 == 1)
    {
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, v25);
      v15 = *(_DWORD *)(a1 + 856);
      LODWORD(v16) = *(_DWORD *)(a1 + 860);
      if (v16 >= v15)
        v16 = v15;
      else
        v16 = v16;
      v17 = v25[0];
      if ((_DWORD)v16)
      {
        v18 = 0;
        v19 = *(double *)(a1 + 336);
        v20 = v15 + 1;
        v21 = *v6;
        v22 = (double *)v25[0];
        do
        {
          v23 = *v22++;
          *(double *)(v21 + 8 * v18) = v19 * v23 + *(double *)(v21 + 8 * v18);
          v18 += v20;
          --v16;
        }
        while (v16);
      }
      free(v17);
    }
    else if (!v8)
    {
      v9 = *(_DWORD *)(a1 + 856);
      LODWORD(v10) = *(_DWORD *)(a1 + 860);
      v10 = v10 >= v9 ? v9 : v10;
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = *(double *)(a1 + 336);
        v13 = v9 + 1;
        v14 = *v6;
        do
        {
          *(double *)(v14 + 8 * v11) = v12 + *(double *)(v14 + 8 * v11);
          v11 += v13;
          --v10;
        }
        while (v10);
      }
    }
  }
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 316) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_239C2E870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  sub_239C2ED44();
  _Unwind_Resume(a1);
}

void sub_239C2E8B0(uint64_t a1, unsigned int **a2, uint64_t a3, char a4)
{
  _DWORD *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  int64x2_t *v22;
  int8x16_t v23;
  unint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  __int128 v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int8x16_t *v35;
  uint64_t v36;
  int8x16_t v37;
  __int128 v38;
  unint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t *v42;
  __int8 *v43;
  int v44;
  unsigned int v45;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  BOOL v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  int64x2_t *v72;
  int8x16_t v73;
  unint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  __int128 v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int8x16_t v87;
  __int128 v88;
  unint64_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t *v92;
  __int8 *v93;
  uint64_t v94;
  uint64_t v95;

  v8 = *(_DWORD **)(a1 + 32);
  v9 = v8[2] * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 48))(v8);
  v10 = *(uint64_t **)(a1 + 32);
  v11 = *v10;
  if ((a4 & 1) != 0)
  {
    v12 = *((_DWORD *)v10 + 3) * (*(uint64_t (**)(_QWORD))(v11 + 56))(*(_QWORD *)(a1 + 32));
    *(_DWORD *)(a3 + 16) = v9;
    *(_DWORD *)(a3 + 20) = v12;
    sub_23945215C(a3, v12 * (unint64_t)v9);
    v13 = *(_DWORD *)(a3 + 20);
    if (v13 * *(_DWORD *)(a3 + 16))
      bzero(*(void **)a3, 8 * (v13 * *(_DWORD *)(a3 + 16)));
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(unsigned int *)(v14 + 12);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *a2;
      do
      {
        v18 = *(_QWORD *)(v14 + 88) + 24 * v16;
        v19 = *(unsigned int **)v18;
        v20 = *(unsigned int **)(v18 + 8);
        if (v19 != v20)
        {
          do
          {
            v32 = *v17;
            v33 = (*a2)[*v19];
            v34 = *(unsigned int *)(a3 + 16);
            v35 = *(int8x16_t **)a3;
            v36 = *(_QWORD *)(v14 + 16) + 8 * *((_QWORD *)v19 + 1);
            if (*v17 < v33)
            {
              v21 = v32 + (_DWORD)v34 * v33;
              v22 = (int64x2_t *)((char *)v35 + 8 * v21);
              v23.i64[0] = *(_QWORD *)(v36 + 16);
              v24 = *(_QWORD *)(v36 + 40);
              v25 = *(int64x2_t *)(v36 + 24);
              v26 = *(_QWORD *)(v36 + 64);
              v27 = *(_OWORD *)(v36 + 48);
              v28 = vzip1q_s64(*(int64x2_t *)v36, v25);
              v29 = vzip2q_s64(*(int64x2_t *)v36, v25);
              v22[1].i64[0] = v27;
              *v22 = v28;
              v30 = (int64x2_t *)((char *)v22 + 8 * v34);
              *v30 = v29;
              v30[1].i64[0] = *((_QWORD *)&v27 + 1);
            }
            else
            {
              if ((int8x16_t *)v36 == v35)
              {
                v26 = v35[4].i64[0];
                v41 = v35[2];
                v23 = v35[3];
                v37 = *v35;
                v40 = v35[1];
                v24 = vextq_s8(v23, v23, 8uLL).u64[0];
                v39 = vextq_s8(v41, v41, 8uLL).u64[0];
                *(_QWORD *)&v38 = vextq_s8(v40, v40, 8uLL).u64[0];
              }
              else
              {
                v37 = *(int8x16_t *)v36;
                v38 = *(_OWORD *)(v36 + 24);
                v23 = *(int8x16_t *)(v36 + 48);
                v39 = *(_QWORD *)(v36 + 40);
                v40.i64[0] = *(_QWORD *)(v36 + 16);
                v41.i64[0] = *(_QWORD *)(v36 + 32);
                v26 = *(_QWORD *)(v36 + 64);
                v24 = vextq_s8(v23, v23, 8uLL).u64[0];
              }
              v21 = v33 + (_DWORD)v34 * v32;
              v37.i64[1] = vextq_s8(v37, v37, 8uLL).u64[0];
              *((_QWORD *)&v38 + 1) = v41.i64[0];
              v42 = (int8x16_t *)((char *)v35 + 8 * v21);
              v42[1].i64[0] = v40.i64[0];
              *v42 = v37;
              v43 = &v42->i8[8 * v34];
              *((_QWORD *)v43 + 2) = v39;
              *(_OWORD *)v43 = v38;
            }
            v31 = (uint64_t)&v35[v34].i64[v21];
            *(_QWORD *)(v31 + 16) = v26;
            v23.i64[1] = v24;
            *(int8x16_t *)v31 = v23;
            v19 += 4;
          }
          while (v19 != v20);
          v15 = *(unsigned int *)(v14 + 12);
        }
        ++v16;
        ++v17;
      }
      while (v16 < v15);
    }
    return;
  }
  v44 = (*(uint64_t (**)(_QWORD))(v11 + 48))(*(_QWORD *)(a1 + 32));
  v45 = *((_DWORD *)v10 + 2) * v44;
  if (v45 == *(_DWORD *)(a3 + 16) && v45 == *(_DWORD *)(a3 + 20))
  {
    v47 = *((_DWORD *)v10 + 2) * v44;
    v48 = v45;
    v49 = v45 * v45;
    if (!(v45 * v45))
      goto LABEL_25;
    goto LABEL_24;
  }
  *(_DWORD *)(a3 + 16) = v45;
  *(_DWORD *)(a3 + 20) = v45;
  sub_23945215C(a3, v45 * (unint64_t)v45);
  v48 = *(_DWORD *)(a3 + 16);
  v47 = *(_DWORD *)(a3 + 20);
  v49 = v47 * v48;
  if (v47 * v48)
LABEL_24:
    bzero(*(void **)a3, 8 * v49);
LABEL_25:
  if (v45 <= v9)
  {
    v56 = *(_QWORD *)(a1 + 32);
    goto LABEL_50;
  }
  v94 = v45 - v9;
  v95 = a1;
  v50 = v48 - (v45 - v9) + (v47 - (v45 - v9)) * v48;
  v51 = *(char **)a3;
  v52 = *(_QWORD *)a3 + 8 * v50;
  v53 = v94;
  do
  {
    bzero(&v51[8 * v50], 8 * (v45 - v9));
    v50 += v48;
    --v53;
  }
  while (v53);
  if (v45 != v9)
  {
    v54 = v48 + 1;
    if (v94 >= 2)
    {
      v55 = 0;
      if (v54 < 0)
        v57 = ~v48;
      else
        v57 = v48 + 1;
      v58 = (v94 - 1) * (unint64_t)v57;
      v59 = v48 != -1 && (unint64_t)(v94 - 1) >> 32 != 0;
      if ((_DWORD)v58)
        v60 = v54 < 0;
      else
        v60 = 0;
      if (!v60 && (v58 & 0xFFFFFFFF00000000) == 0 && !v59)
      {
        v61 = 0;
        v55 = v94 & 0xFFFFFFFE;
        v62 = v55;
        do
        {
          *(_QWORD *)(v52 + 8 * v61) = 0x3FF0000000000000;
          *(_QWORD *)(v52 + 8 * (v54 + v61)) = 0x3FF0000000000000;
          v61 += 2 * v48 + 2;
          v62 -= 2;
        }
        while (v62);
        if (v55 == v94)
          goto LABEL_49;
      }
    }
    else
    {
      v55 = 0;
    }
    v63 = v94 - v55;
    v64 = v54 * v55;
    do
    {
      *(_QWORD *)(v52 + 8 * v64) = 0x3FF0000000000000;
      v64 += v54;
      --v63;
    }
    while (v63);
  }
LABEL_49:
  v56 = *(_QWORD *)(v95 + 32);
LABEL_50:
  v65 = *(unsigned int *)(v56 + 12);
  if ((_DWORD)v65)
  {
    v66 = 0;
    v67 = *a2;
    do
    {
      v68 = *(_QWORD *)(v56 + 88) + 24 * v66;
      v69 = *(unsigned int **)v68;
      v70 = *(unsigned int **)(v68 + 8);
      if (v69 != v70)
      {
        do
        {
          v82 = *v67;
          v83 = (*a2)[*v69];
          v84 = *(_QWORD *)(v56 + 16) + 8 * *((_QWORD *)v69 + 1);
          v85 = *(unsigned int *)(a3 + 16);
          v86 = *(char **)a3;
          if (*v67 >= v83)
          {
            v71 = v82 + (_DWORD)v85 * v83;
            v72 = (int64x2_t *)&v86[8 * v71];
            v73.i64[0] = *(_QWORD *)(v84 + 16);
            v74 = *(_QWORD *)(v84 + 40);
            v75 = *(int64x2_t *)(v84 + 24);
            v76 = *(_QWORD *)(v84 + 64);
            v77 = *(_OWORD *)(v84 + 48);
            v78 = vzip1q_s64(*(int64x2_t *)v84, v75);
            v79 = vzip2q_s64(*(int64x2_t *)v84, v75);
            v72[1].i64[0] = v77;
            *v72 = v78;
            v80 = (int64x2_t *)((char *)v72 + 8 * v85);
            *v80 = v79;
            v80[1].i64[0] = *((_QWORD *)&v77 + 1);
          }
          else
          {
            if ((char *)v84 == v86)
            {
              v76 = *(_QWORD *)(v84 + 64);
              v91 = *(int8x16_t *)(v84 + 32);
              v73 = *(int8x16_t *)(v84 + 48);
              v87 = *(int8x16_t *)v84;
              v90 = *(int8x16_t *)(v84 + 16);
              v74 = vextq_s8(v73, v73, 8uLL).u64[0];
              v89 = vextq_s8(v91, v91, 8uLL).u64[0];
              *(_QWORD *)&v88 = vextq_s8(v90, v90, 8uLL).u64[0];
            }
            else
            {
              v87 = *(int8x16_t *)v84;
              v88 = *(_OWORD *)(v84 + 24);
              v73 = *(int8x16_t *)(v84 + 48);
              v89 = *(_QWORD *)(v84 + 40);
              v90.i64[0] = *(_QWORD *)(v84 + 16);
              v91.i64[0] = *(_QWORD *)(v84 + 32);
              v76 = *(_QWORD *)(v84 + 64);
              v74 = vextq_s8(v73, v73, 8uLL).u64[0];
            }
            v71 = v83 + (_DWORD)v85 * v82;
            v87.i64[1] = vextq_s8(v87, v87, 8uLL).u64[0];
            *((_QWORD *)&v88 + 1) = v91.i64[0];
            v92 = (int8x16_t *)&v86[8 * v71];
            v92[1].i64[0] = v90.i64[0];
            *v92 = v87;
            v93 = &v92->i8[8 * v85];
            *((_QWORD *)v93 + 2) = v89;
            *(_OWORD *)v93 = v88;
          }
          v81 = (uint64_t)&v86[16 * v85 + 8 * v71];
          *(_QWORD *)(v81 + 16) = v76;
          v73.i64[1] = v74;
          *(int8x16_t *)v81 = v73;
          v69 += 4;
        }
        while (v69 != v70);
        v65 = *(unsigned int *)(v56 + 12);
      }
      ++v66;
      ++v67;
    }
    while (v66 < v65);
  }
}

uint64_t sub_239C2ED44()
{
  return kdebug_trace();
}

uint64_t sub_239C2ED74()
{
  return kdebug_trace();
}

void sub_239C2EDA4(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v5, "DenseSchur");
  v4 = 4;
  strcpy((char *)__p, "LDLt");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 4uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_239C2EE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL sub_239C2EE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;

  v4 = a1 + 904;
  v5 = *(_DWORD *)(a1 + 856);
  if (v5 == *(_DWORD *)(a1 + 860))
  {
    v6 = (v5 * v5);
    sub_23945215C(a1 + 912, v6);
    if ((_DWORD)v6)
      memcpy(*(void **)(a1 + 912), *(const void **)(a1 + 840), 8 * v6);
    *(_QWORD *)(a1 + 928) = *(_QWORD *)(a1 + 856);
    sub_239C2F210(v4);
  }
  v7 = *(_DWORD *)(a1 + 904);
  *(_BYTE *)(a1 + 312) = v7 == 0;
  if (v7)
    return 1;
  sub_239C2F378(v4, a2, a2);
  return *(_BYTE *)(a1 + 312) == 0;
}

uint64_t sub_239C2EF3C()
{
  return 1;
}

uint64_t sub_239C2EF44()
{
  return 0;
}

uint64_t sub_239C2EF4C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB198;
  free(*(void **)(a1 + 936));
  free(*(void **)(a1 + 912));
  *(_QWORD *)a1 = off_250AFB250;
  free(*(void **)(a1 + 864));
  free(*(void **)(a1 + 840));
  return sub_239C1A9B8(a1);
}

void sub_239C2EFA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB198;
  free(*(void **)(a1 + 936));
  free(*(void **)(a1 + 912));
  *(_QWORD *)a1 = off_250AFB250;
  free(*(void **)(a1 + 864));
  free(*(void **)(a1 + 840));
  sub_239C1A9B8(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C2F010(uint64_t a1)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  size_t v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  size_t v19;
  size_t v20;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  void *memptr;

  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a1 + 432) + 40;
  *(_QWORD *)(a1 + 896) = a1 + 608;
  v2 = *(_DWORD *)(a1 + 904);
  if (v2)
  {
    *(_QWORD *)(a1 + 888) = 0;
    *(_QWORD *)(a1 + 896) = 0;
    return v2 == 0;
  }
  v3 = *(_DWORD *)(a1 + 928);
  v4 = v3 * v3;
  v5 = (8 * v3 * v3 + 31) & 0xFFFFFFFE0;
  v25 = v5 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x100BBD03uLL);
  v6 = memptr;
  v24 = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  LODWORD(v26) = *(_DWORD *)(a1 + 928);
  HIDWORD(v26) = v3;
  if (v3 != (_DWORD)v26)
  {
    LODWORD(v26) = v3;
    sub_23945215C((uint64_t)&v24, v3 * (unint64_t)v3);
    v7 = v26;
    v3 = HIDWORD(v26);
    v6 = v24;
    v4 = v26 * HIDWORD(v26);
    if (!((_DWORD)v26 * HIDWORD(v26)))
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = v3;
  if (v4)
LABEL_6:
    bzero(v6, 8 * v4);
LABEL_7:
  if (v3 >= v7)
    v8 = v7;
  else
    v8 = v3;
  if ((_DWORD)v8)
  {
    v9 = v7 + 1;
    v10 = 0;
    if ((_DWORD)v8 == 1)
      goto LABEL_23;
    v11 = v9 < 0 ? ~v7 : v7 + 1;
    v12 = v11 * (unint64_t)(v8 - 1);
    if ((_DWORD)v12 && v9 < 0)
      goto LABEL_23;
    if ((v12 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_23;
    v14 = 0;
    v10 = v8 & 0xFFFFFFFE;
    v15 = v10;
    do
    {
      *((_QWORD *)v6 + v14) = 0x3FF0000000000000;
      *((_QWORD *)v6 + v9 + v14) = 0x3FF0000000000000;
      v14 += 2 * v7 + 2;
      v15 -= 2;
    }
    while (v15);
    if (v10 != v8)
    {
LABEL_23:
      v16 = v8 - v10;
      v17 = v9 * v10;
      do
      {
        *((_QWORD *)v6 + v17) = 0x3FF0000000000000;
        v17 += v9;
        --v16;
      }
      while (v16);
    }
  }
  sub_239A230A8(0, v7, v3, *(__CLPK_doublereal **)(a1 + 912), *(_DWORD *)(a1 + 928), *(__CLPK_integer **)(a1 + 936), (__CLPK_doublereal *)v6, v7);
  v18 = *(void **)(a1 + 864);
  v19 = v25;
  *(_QWORD *)(a1 + 864) = v24;
  v20 = *(_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 872) = v19;
  v24 = v18;
  v25 = v20;
  *(_QWORD *)(a1 + 880) = v26;
  v26 = 0;
  free(v18);
  return v2 == 0;
}

void sub_239C2F1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_239C2F210(uint64_t a1)
{
  unint64_t v2;
  __CLPK_integer *v3;
  size_t v4;
  _QWORD *v5;
  __CLPK_integer v6;
  void *v7;
  std::bad_alloc *exception;
  std::bad_alloc *v9;
  double v10;
  void *memptr;

  v2 = *(unsigned int *)(a1 + 24);
  *(_DWORD *)(a1 + 48) = v2;
  if ((_DWORD)v2)
  {
    v3 = *(__CLPK_integer **)(a1 + 32);
    if (*(_QWORD *)(a1 + 40) < v2)
    {
      free(*(void **)(a1 + 32));
      v4 = (4 * v2 + 31) & 0x7FFFFFFE0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = v4 >> 2;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x100BBD03uLL);
      v3 = (__CLPK_integer *)memptr;
      *(_QWORD *)(a1 + 32) = memptr;
      if (!v3)
      {
LABEL_10:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v9 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v9, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 32);
    free(*(void **)(a1 + 32));
    v3 = 0;
    *v5 = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v10 = 0.0;
  if (sub_239A23108(0, v2, *(__CLPK_doublereal **)(a1 + 8), *(_DWORD *)(a1 + 24), v3, &v10, -1))
  {
    *(_DWORD *)a1 = 1;
  }
  else
  {
    v6 = (int)v10;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * (int)v10 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v7 = memptr;
    if (!memptr)
      goto LABEL_10;
    *(_DWORD *)a1 = sub_239A23108(0, v2, *(__CLPK_doublereal **)(a1 + 8), *(_DWORD *)(a1 + 24), *(__CLPK_integer **)(a1 + 32), (__CLPK_doublereal *)memptr, v6) != 0;
    free(v7);
  }
}

void sub_239C2F364(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_239C2F378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  __CLPK_integer v8;
  size_t v9;
  __CLPK_doublereal *v10;
  __CLPK_integer v11;
  unint64_t v12;
  __CLPK_integer v13;
  void *v14;
  size_t v15;
  size_t v16;
  std::bad_alloc *exception;
  std::bad_alloc *v18;
  void *__dst;
  size_t v20;
  __CLPK_integer v21;
  void *memptr;

  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6 == *(_DWORD *)(a3 + 16))
    goto LABEL_4;
  if (*(_QWORD *)a2 != *(_QWORD *)a3)
  {
    *(_DWORD *)(a3 + 16) = v6;
    sub_23945215C(a3, v6);
LABEL_4:
    if (a3 == a2)
    {
      v8 = *(_DWORD *)(a3 + 16);
    }
    else
    {
      v7 = *(unsigned int *)(a2 + 16);
      sub_23945215C(a3, v7);
      if ((_DWORD)v7)
        memcpy(*(void **)a3, *(const void **)a2, 8 * v7);
      v8 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a3 + 16) = v8;
    }
    sub_239A230A8(0, v8, 1, *(__CLPK_doublereal **)(a1 + 8), *(_DWORD *)(a1 + 24), *(__CLPK_integer **)(a1 + 32), *(__CLPK_doublereal **)a3, v8);
    return;
  }
  v9 = (8 * v6 + 31) & 0xFFFFFFFE0;
  v20 = v9 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x100BBD03uLL);
  v10 = (__CLPK_doublereal *)memptr;
  __dst = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v11 = *(_DWORD *)(a1 + 24);
  v21 = v11;
  if (&__dst == (void **)a2)
  {
    v13 = v11;
  }
  else
  {
    v12 = *(unsigned int *)(a2 + 16);
    sub_23945215C((uint64_t)&__dst, v12);
    if ((_DWORD)v12)
      memcpy(__dst, *(const void **)a2, 8 * v12);
    v13 = *(_DWORD *)(a2 + 16);
    v21 = v13;
    v11 = *(_DWORD *)(a1 + 24);
    v10 = (__CLPK_doublereal *)__dst;
  }
  sub_239A230A8(0, v13, 1, *(__CLPK_doublereal **)(a1 + 8), v11, *(__CLPK_integer **)(a1 + 32), v10, v13);
  v14 = *(void **)a3;
  v15 = *(_QWORD *)(a3 + 8);
  v16 = v20;
  *(_QWORD *)a3 = __dst;
  *(_QWORD *)(a3 + 8) = v16;
  __dst = v14;
  v20 = v15;
  *(_DWORD *)(a3 + 16) = v21;
  v21 = 0;
  free(v14);
}

void sub_239C2F524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_239C2F538(_QWORD *a1, unint64_t a2, size_t __sz)
{
  _BYTE *v6;
  size_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;

  v6 = (_BYTE *)a1[17];
  v7 = 8 * a2;
  if (a2 <= (uint64_t)(a1[19] - (_QWORD)v6) >> 3)
    goto LABEL_12;
  v8 = (_BYTE *)a1[18];
  v9 = (char *)operator new(8 * a2);
  v10 = v8 - v6;
  v11 = &v9[(v8 - v6) & 0xFFFFFFFFFFFFFFF8];
  v12 = v11;
  if (v8 != v6)
  {
    if ((unint64_t)(v10 - 8) < 0x58)
    {
      v12 = &v9[(v8 - v6) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v19 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v12 - 1) = v19;
        v12 -= 8;
      }
      while (v8 != v6);
      goto LABEL_10;
    }
    v12 = &v9[(v8 - v6) & 0xFFFFFFFFFFFFFFF8];
    if (v8 - v9 - (v10 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_9;
    v13 = v10 >> 3;
    v14 = ((unint64_t)(v10 - 8) >> 3) + 1;
    v15 = &v9[8 * v13 - 16];
    v16 = (__int128 *)(v8 - 16);
    v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v18 = *v16;
      *((_OWORD *)v15 - 1) = *(v16 - 1);
      *(_OWORD *)v15 = v18;
      v15 -= 32;
      v16 -= 2;
      v17 -= 4;
    }
    while (v17);
    v12 = &v11[-8 * (v14 & 0x3FFFFFFFFFFFFFFCLL)];
    v8 -= 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  a1[17] = v12;
  a1[18] = v11;
  a1[19] = &v9[v7];
  if (v6)
    operator delete(v6);
LABEL_12:
  v20 = (_BYTE *)a1[22];
  if (__sz <= (uint64_t)(a1[24] - (_QWORD)v20) >> 3)
    goto LABEL_23;
  v21 = (_BYTE *)a1[23];
  v22 = 8 * __sz;
  v23 = (char *)operator new(v22);
  v24 = v21 - v20;
  v25 = &v23[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
  v26 = v25;
  if (v21 != v20)
  {
    if ((unint64_t)(v24 - 8) < 0x58)
    {
      v26 = &v23[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_20:
        v33 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v26 - 1) = v33;
        v26 -= 8;
      }
      while (v21 != v20);
      goto LABEL_21;
    }
    v26 = &v23[(v21 - v20) & 0xFFFFFFFFFFFFFFF8];
    if (v21 - v23 - (v24 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_20;
    v27 = v24 >> 3;
    v28 = ((unint64_t)(v24 - 8) >> 3) + 1;
    v29 = &v23[8 * v27 - 16];
    v30 = (__int128 *)(v21 - 16);
    v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *v30;
      *((_OWORD *)v29 - 1) = *(v30 - 1);
      *(_OWORD *)v29 = v32;
      v29 -= 32;
      v30 -= 2;
      v31 -= 4;
    }
    while (v31);
    v26 = &v25[-8 * (v28 & 0x3FFFFFFFFFFFFFFCLL)];
    v21 -= 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_20;
  }
LABEL_21:
  a1[22] = v26;
  a1[23] = v25;
  a1[24] = &v23[v22];
  if (v20)
    operator delete(v20);
LABEL_23:
  v34 = (_BYTE *)a1[10];
  if (a2 <= (uint64_t)(a1[12] - (_QWORD)v34) >> 3)
    goto LABEL_34;
  v35 = (_BYTE *)a1[11];
  v36 = (char *)operator new(v7);
  v37 = v35 - v34;
  v38 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFF8];
  v39 = v38;
  if (v35 != v34)
  {
    if ((unint64_t)(v37 - 8) < 0x58)
    {
      v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_31:
        v46 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v39 - 1) = v46;
        v39 -= 8;
      }
      while (v35 != v34);
      goto LABEL_32;
    }
    v39 = &v36[(v35 - v34) & 0xFFFFFFFFFFFFFFF8];
    if (v35 - v36 - (v37 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_31;
    v40 = v37 >> 3;
    v41 = ((unint64_t)(v37 - 8) >> 3) + 1;
    v42 = &v36[8 * v40 - 16];
    v43 = (__int128 *)(v35 - 16);
    v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    v39 = &v38[-8 * (v41 & 0x3FFFFFFFFFFFFFFCLL)];
    v35 -= 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_31;
  }
LABEL_32:
  a1[10] = v39;
  a1[11] = v38;
  a1[12] = &v36[v7];
  if (v34)
    operator delete(v34);
LABEL_34:
  v47 = (_BYTE *)a1[13];
  if (a2 <= (uint64_t)(a1[15] - (_QWORD)v47) >> 3)
    return;
  v48 = (_BYTE *)a1[14];
  v49 = (char *)operator new(v7);
  v50 = v48 - v47;
  v51 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFF8];
  v52 = v51;
  if (v48 != v47)
  {
    if ((unint64_t)(v50 - 8) >= 0x58)
    {
      v52 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFF8];
      if (v48 - v49 - (v50 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v53 = v50 >> 3;
        v54 = ((unint64_t)(v50 - 8) >> 3) + 1;
        v55 = &v49[8 * v53 - 16];
        v56 = (__int128 *)(v48 - 16);
        v57 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *v56;
          *((_OWORD *)v55 - 1) = *(v56 - 1);
          *(_OWORD *)v55 = v58;
          v55 -= 32;
          v56 -= 2;
          v57 -= 4;
        }
        while (v57);
        v52 = &v51[-8 * (v54 & 0x3FFFFFFFFFFFFFFCLL)];
        v48 -= 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_43;
      }
    }
    else
    {
      v52 = &v49[(v48 - v47) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v59 = *((_QWORD *)v48 - 1);
      v48 -= 8;
      *((_QWORD *)v52 - 1) = v59;
      v52 -= 8;
    }
    while (v48 != v47);
  }
LABEL_43:
  a1[13] = v52;
  a1[14] = v51;
  a1[15] = &v49[v7];
  if (v47)
    operator delete(v47);
}

void sub_239C2F8F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  void *__p;
  double *v25;
  uint64_t v26;
  double *v27;
  double *v28[2];

  __p = 0;
  v25 = 0;
  v26 = 0;
  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v4 = v2[13];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    sub_23945E108((uint64_t)&__p, 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3));
    v5 = (uint64_t)__p;
    v3 = v2[12];
    v4 = v2[13];
  }
  v28[0] = (double *)v5;
  sub_239C305A0(v3, v4, v28, 0);
  v14 = (double *)__p;
  v15 = ((char *)v25 - (_BYTE *)__p) >> 3;
  v16 = v2[15];
  v17 = v2[16];
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v16) >> 5);
  if (v15 >= v18 + v15)
  {
    if (v15 > v18 + v15)
      v25 = (double *)((char *)__p + 8 * v18 + 8 * v15);
  }
  else
  {
    sub_23945E108((uint64_t)&__p, v18);
    v14 = (double *)__p;
    v16 = v2[15];
    v17 = v2[16];
  }
  v27 = &v14[v15];
  v28[0] = (double *)&v27;
  v28[1] = 0;
  if (v16 != v17)
  {
    do
    {
      sub_239C302E4((uint64_t)v28, v16, v6, v7, v8, v9, v10, v11, v12, v13);
      v16 += 160;
    }
    while (v16 != v17);
    v14 = (double *)__p;
  }
  if (v14 == v25)
  {
    **(_QWORD **)(a1 + 16) = 0x3FF0000000000000;
    if (!v14)
      return;
  }
  else
  {
    v19 = (_BYTE)v25 - (_BYTE)v14;
    v20 = v25 - v14;
    v21 = v20 >> 1;
    sub_2395F71EC(v14, &v14[v20 >> 1], v25);
    v14 = (double *)__p;
    v22 = *((double *)__p + (v20 >> 1));
    if ((v19 & 8) == 0)
    {
      v23 = v21 - 1;
      if (v21 - 1 != v20)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v23, (double *)__p + v20);
        v14 = (double *)__p;
      }
      v22 = (v22 + v14[v23]) * 0.5;
    }
    **(double **)(a1 + 16) = sqrt(v22) * *(double *)(a1 + 8);
  }
  v25 = v14;
  operator delete(v14);
}

void sub_239C2FA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C2FAAC(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  double *v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v4 = *(_QWORD *)(v2 + 104);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    sub_23945E108((uint64_t)&v12, 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3));
    v5 = (uint64_t)v12;
    v3 = *(_QWORD *)(v2 + 96);
    v4 = *(_QWORD *)(v2 + 104);
  }
  v15 = (double *)v5;
  sub_239C305A0(v3, v4, &v15, 0);
  v6 = v12;
  if (v12 == v13)
  {
    **((_QWORD **)a1 + 2) = 0x3FF0000000000000;
    if (!v6)
      return;
  }
  else
  {
    v7 = (_BYTE)v13 - (_BYTE)v12;
    v8 = v13 - v12;
    v9 = v8 >> 1;
    sub_2395F71EC(v12, &v12[v8 >> 1], v13);
    v6 = v12;
    v10 = v12[v8 >> 1];
    if ((v7 & 8) == 0)
    {
      v11 = v9 - 1;
      if (v9 - 1 != v8)
      {
        sub_2395F71EC(v12, &v12[v11], &v12[v8]);
        v6 = v12;
      }
      v10 = (v10 + v6[v11]) * 0.5;
    }
    **((double **)a1 + 2) = sqrt(v10) * a1[1];
  }
  v13 = v6;
  operator delete(v6);
}

void sub_239C2FBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C2FBD4(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  void *__p;
  double *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[2];

  __p = 0;
  v21 = 0;
  v22 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 128) - *(_QWORD *)(*(_QWORD *)a1 + 120);
  if (!v3)
  {
    *(_QWORD *)(*((_QWORD *)a1 + 2) + 8) = 0x3FF0000000000000;
    return;
  }
  sub_23945E108((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5));
  v12 = (double *)__p;
  v13 = *(_QWORD *)(v2 + 120);
  v14 = *(_QWORD *)(v2 + 128);
  v23 = __p;
  v24[0] = &v23;
  v24[1] = 0;
  if (v13 != v14)
  {
    do
    {
      sub_239C302E4((uint64_t)v24, v13, v4, v5, v6, v7, v8, v9, v10, v11);
      v13 += 160;
    }
    while (v13 != v14);
    v12 = (double *)__p;
  }
  if (v12 != v21)
  {
    v15 = (_BYTE)v21 - (_BYTE)v12;
    v16 = v21 - v12;
    v17 = v16 >> 1;
    sub_2395F71EC(v12, &v12[v16 >> 1], v21);
    v12 = (double *)__p;
    v18 = *((double *)__p + (v16 >> 1));
    if ((v15 & 8) == 0)
    {
      v19 = v17 - 1;
      if (v17 - 1 != v16)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v19, (double *)__p + v16);
        v12 = (double *)__p;
      }
      v18 = (v18 + v12[v19]) * 0.5;
    }
    *(double *)(*((_QWORD *)a1 + 2) + 8) = sqrt(v18) * a1[1];
    goto LABEL_14;
  }
  *(_QWORD *)(*((_QWORD *)a1 + 2) + 8) = 0x3FF0000000000000;
  if (v12)
  {
LABEL_14:
    v21 = v12;
    operator delete(v12);
  }
}

void sub_239C2FD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_239C2FD3C(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  float64x2_t *v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t *v32;
  float64x2_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  double *v40;
  uint64_t v41;
  double v42;
  float64x2_t *v43;
  float64x2_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  int8x16_t v49;
  float64x2_t v50;
  float64x2_t *v51;
  float64x2_t *v52;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  uint64_t v59;
  float64x2_t *v60;
  float64x2_t v61;
  float64x2_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  double v72;
  float64x2_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  float64x2x3_t v79;

  kdebug_trace();
  v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v10 > 0xF)
  {
    if (v10 != 16)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16;
  }
  else
  {
    sub_23945E108(a2, 2 - (v10 >> 3));
  }
  v11 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(unsigned __int8 *)(a1 + 315);
  v14 = 0.0;
  if (v11 == v12)
  {
    v16 = 0.0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 315))
    {
      v15 = v12 - v11 - 120;
      v16 = 0.0;
      if (v15 > 0x77)
      {
        v17 = v15 / 0x78 + 1;
        v18 = (double *)(v11 + 208);
        v19 = v17 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          v20 = *(v18 - 15);
          v21 = *v18;
          v18 += 30;
          v16 = v16 + v20 + v21;
          v19 -= 2;
        }
        while (v19);
        if (v17 == (v17 & 0x7FFFFFFFFFFFFFELL))
          goto LABEL_13;
        v11 += 120 * (v17 & 0x7FFFFFFFFFFFFFELL);
      }
      do
      {
        v16 = v16 + *(double *)(v11 + 88);
        v11 += 120;
      }
      while (v11 != v12);
LABEL_13:
      v13 = 1;
      goto LABEL_20;
    }
    v16 = 0.0;
    do
    {
      v23 = *(float64x2_t **)(v11 + 48);
      v24 = *(float64x2_t **)(v11 + 56);
      *(_QWORD *)(v11 + 32) = v23 + 1;
      *(_QWORD *)(v11 + 40) = v24 + 1;
      v4.f64[0] = v23[2].f64[0];
      v6.f64[0] = v24[2].f64[0];
      _Q3 = v24[1];
      v25 = vsubq_f64(v4, v6);
      _Q1 = vsubq_f64(v23[1], _Q3);
      _Q2 = vmulq_f64(_Q1, _Q1);
      _Q3.f64[0] = _Q1.f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v25.f64[0], v25.f64[0]));
      v32 = *(float64x2_t **)(v11 + 24);
      _Q3.f64[0] = v32[1].f64[0];
      _Q4 = *v32;
      v33 = vsubq_f64(*v32, vmulq_n_f64(_Q1, _Q2.f64[0]));
      *(float64x2_t *)(v11 + 64) = v33;
      v4 = vsubq_f64(_Q3, vmulq_f64(v25, _Q2));
      *(float64_t *)(v11 + 80) = v4.f64[0];
      v34 = *(_QWORD *)(v11 + 96);
      if (v34)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 24))(v34, v11 + 64);
        v4.f64[0] = *(float64_t *)(v11 + 80);
        v33 = *(float64x2_t *)(v11 + 64);
      }
      v6 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL);
      v33.f64[1] = v6.f64[0];
      v5 = vmulq_f64(v33, v33);
      v22 = *(double *)(a1 + 16) * (v5.f64[0] + v6.f64[0] * v6.f64[0] + v4.f64[0] * v4.f64[0]);
      *(double *)(v11 + 88) = v22;
      v16 = v16 + v22;
      v11 += 120;
    }
    while (v11 != v12);
    v13 = *(unsigned __int8 *)(a1 + 315);
  }
LABEL_20:
  v35 = *(double **)a2;
  **(double **)a2 = v16 * 0.5;
  v37 = *(_QWORD *)(a1 + 120);
  v36 = *(_QWORD *)(a1 + 128);
  if (v37 != v36)
  {
    if (v13)
    {
      v38 = v36 - v37 - 160;
      v14 = 0.0;
      if (v38 < 0xA0)
        goto LABEL_36;
      v39 = v38 / 0xA0 + 1;
      v40 = (double *)(v37 + 288);
      v41 = v39 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v14 = v14 + *(v40 - 20) + *v40;
        v40 += 40;
        v41 -= 2;
      }
      while (v41);
      v37 += 160 * (v39 & 0x3FFFFFFFFFFFFFELL);
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_36:
        do
        {
          v14 = *(double *)(v37 + 128) + v14;
          v37 += 160;
        }
        while (v37 != v36);
      }
    }
    else
    {
      v14 = 0.0;
      do
      {
        v43 = *(float64x2_t **)(v37 + 80);
        v44 = *(float64x2_t **)(v37 + 88);
        *(_QWORD *)(v37 + 40) = v43 + 1;
        *(_QWORD *)(v37 + 48) = v44 + 1;
        v45 = *(_QWORD *)(v37 + 96);
        _Q4.f64[0] = *(float64_t *)(v45 + 16);
        *(_QWORD *)(v37 + 64) = v45 + 16;
        v5.f64[0] = v43[2].f64[0];
        v46 = v43[1];
        _Q3.f64[0] = v44[2].f64[0];
        v47 = v44[1];
        v48 = *(_QWORD *)(v37 + 56);
        v49 = *(int8x16_t *)(v48 + 8);
        v48 += 8;
        *(_QWORD *)&v50.f64[0] = v49.i64[0];
        v51 = (float64x2_t *)v48;
        v79 = vld3q_f64(v51->f64);
        v51 += 3;
        v52 = *(float64x2_t **)(v37 + 72);
        _Q6.f64[0] = v52[1].f64[0];
        v53 = vsubq_f64(v5, _Q3);
        v54 = vsubq_f64(v46, v47);
        *(_QWORD *)&v55 = *(_OWORD *)&vmulq_f64(_Q4, _Q6);
        _Q4 = vmulq_n_f64(*v52, _Q4.f64[0]);
        v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v79.val[0], _Q4.f64[0]), v79.val[1], _Q4, 1), v79.val[2], v55);
        _Q7 = *v51;
        _Q5 = vmulq_f64(*v51, _Q4);
        v79.val[0].f64[0] = _Q4.f64[1];
        __asm { FMLA            D5, D16, V7.D[1] }
        v79.val[1].f64[0] = *(float64_t *)(v48 + 64);
        _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v79.val[1].f64[0], v55);
        *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vaddq_f64(v53, _Q5);
        _Q6 = vaddq_f64(v54, v56);
        v60 = *(float64x2_t **)(v37 + 24);
        v59 = *(_QWORD *)(v37 + 32);
        v61 = *(float64x2_t *)(v59 + 8);
        _D20 = *(_QWORD *)(v59 + 48);
        v63 = *(float64x2_t *)(v59 + 32);
        v64 = *(double *)(v59 + 72);
        v65 = *(float64x2_t *)(v59 + 56);
        v66 = *(float64x2_t *)(v48 + 16);
        v50.f64[1] = *(float64_t *)(v48 + 24);
        v66.f64[1] = *(float64_t *)(v48 + 40);
        v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v50, _Q4.f64[0]), (float64x2_t)vextq_s8(v49, *(int8x16_t *)(v48 + 32), 8uLL), _Q4, 1), v66, v55);
        __asm { FMLA            D4, D16, V7.D[1] }
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v79.val[1].f64[0], v55);
        _Q1 = vaddq_f64(v53, _Q4);
        _Q0 = vaddq_f64(v54, v67);
        _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61, _Q0.f64[0]), v63, _Q0, 1), v65, _Q1.f64[0]);
        __asm { FMLA            D3, D20, V0.D[1] }
        v72 = vmlad_n_f64(_D3, v64, _Q1.f64[0]);
        _Q1.f64[0] = _Q2.f64[1];
        __asm { FMLA            D0, D1, V2.D[1] }
        _Q1.f64[0] = 1.0 / sqrt(_Q0.f64[0] + v72 * v72);
        _Q2.f64[0] = v60[1].f64[0];
        _Q3 = *v60;
        v73 = vsubq_f64(*v60, vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v61, _Q6.f64[0]), v63, _Q6, 1), v65, _Q5.f64[0]), _Q1.f64[0]));
        *(float64x2_t *)(v37 + 104) = v73;
        __asm { FMLA            D3, D20, V6.D[1] }
        _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v64, _Q5.f64[0]);
        v5 = vsubq_f64(_Q2, vmulq_f64(_Q3, _Q1));
        *(float64_t *)(v37 + 120) = v5.f64[0];
        v74 = *(_QWORD *)(v37 + 136);
        if (v74)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v74 + 24))(v74, v37 + 104);
          v5.f64[0] = *(float64_t *)(v37 + 120);
          v73 = *(float64x2_t *)(v37 + 104);
        }
        v73.f64[1] = *(double *)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).i64;
        v42 = *(double *)(a1 + 32) * (vmulq_f64(v73, v73).f64[0] + v73.f64[1] * v73.f64[1] + v5.f64[0] * v5.f64[0]);
        *(double *)(v37 + 128) = v42;
        v14 = v42 + v14;
        v37 += 160;
      }
      while (v37 != v36);
      v35 = *(double **)a2;
    }
  }
  v35[1] = v14 * 0.5;
  *(_BYTE *)(a1 + 315) = 1;
  v75 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v76 = **(double **)a2;
  v77 = *(double *)(*(_QWORD *)a2 + 8);
  kdebug_trace();
  return v75 + v76 + v77;
}

void sub_239C301C0(_Unwind_Exception *a1)
{
  sub_239C302B4();
  _Unwind_Resume(a1);
}

void sub_239C301E0(uint64_t a1, double a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9[3];

  *(_QWORD *)&v9[0] = a1;
  v9[1] = a2;
  *(_QWORD *)&v9[2] = &v7;
  sub_239C2FAAC(v9);
  sub_239C2FBD4(v9);
  v3 = 1.0e20;
  v4 = 0x3DDB7CDFD9D7BDBBLL;
  v5 = 0x3DDB7CDFD9D7BDBBLL;
  v6 = 1.0e20;
  if (v7 > 0.0)
  {
    v5 = *(_QWORD *)&v7;
    v6 = 1.0 / (v7 * v7);
  }
  *(_QWORD *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = v6;
  if (v8 > 0.0)
  {
    v4 = *(_QWORD *)&v8;
    v3 = 1.0 / (v8 * v8);
  }
  *(_QWORD *)(a1 + 24) = v4;
  *(double *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 316) = 0;
}

uint64_t sub_239C30284()
{
  return kdebug_trace();
}

uint64_t sub_239C302B4()
{
  return kdebug_trace();
}

void sub_239C302E4(uint64_t a1, uint64_t a2, double a3, double a4, float64x2_t a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  float64x2_t v17;
  float64x2_t *v18;
  float64x2_t v21;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v28;
  float64x2_t v30;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  double **v46;
  double *v47;
  unint64_t *v48;
  unint64_t v49;
  float64x2_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  float64x2_t v54;
  double v55;
  double v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char v59;
  float64x2x3_t v60;

  v51 = *(_OWORD *)(a2 + 56);
  v52 = *(_OWORD *)(a2 + 72);
  v53 = *(_OWORD *)(a2 + 88);
  v12 = *(float64x2_t *)(a2 + 24);
  v50 = v12;
  v54 = *(float64x2_t *)(a2 + 104);
  v55 = *(double *)(a2 + 120);
  v13 = *(double *)(a2 + 128);
  v56 = v13;
  v14 = *(std::__shared_weak_count **)(a2 + 144);
  v57 = *(_QWORD *)(a2 + 136);
  v58 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v59 = *(_BYTE *)(a2 + 152);
  if (!*(_BYTE *)(a1 + 8))
  {
    v12.f64[0] = *(float64_t *)(*((_QWORD *)&v53 + 1) + 16);
    a5.f64[0] = *(float64_t *)(*((_QWORD *)&v52 + 1) + 32);
    a10.f64[0] = *(float64_t *)(v53 + 32);
    v17 = *(float64x2_t *)(v51 + 8);
    v18 = (float64x2_t *)(v51 + 8);
    v60 = vld3q_f64(v18->f64);
    v18 += 3;
    v10.f64[0] = *(float64_t *)(v52 + 16);
    _Q18 = *(float64x2_t *)v52;
    _Q19 = *v18;
    v21 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 8);
    _D22 = *(_QWORD *)(*(_QWORD *)&v50.f64[1] + 48);
    v23 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 32);
    v24 = *(double *)(*(_QWORD *)&v50.f64[1] + 72);
    v25 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 56);
    v26 = vsubq_f64(a5, a10);
    _Q3 = vsubq_f64(*(float64x2_t *)(*((_QWORD *)&v52 + 1) + 16), *(float64x2_t *)(v53 + 16));
    *(_QWORD *)&v28 = *(_OWORD *)&vmulq_f64(v12, v10);
    _Q1 = vmulq_n_f64(*(float64x2_t *)v52, v12.f64[0]);
    v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60.val[0], _Q1.f64[0]), v60.val[1], _Q1, 1), v60.val[2], v28);
    v60.val[0] = vmulq_f64(*v18, _Q1);
    v60.val[1].f64[0] = _Q1.f64[1];
    __asm { FMLA            D4, D5, V19.D[1] }
    v60.val[2].f64[0] = *(float64_t *)(v51 + 72);
    v60.val[0].f64[0] = vmlad_n_f64(v60.val[0].f64[0], v60.val[2].f64[0], v28);
    *(_QWORD *)&v60.val[0].f64[0] = *(_OWORD *)&vaddq_f64(v26, v60.val[0]);
    _Q16 = vaddq_f64(_Q3, v30);
    v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, _Q16.f64[0]), v23, _Q16, 1), v25, v60.val[0].f64[0]);
    __asm { FMLA            D18, D22, V16.D[1] }
    _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v24, v60.val[0].f64[0]);
    v37 = *(float64x2_t *)(v51 + 24);
    v38 = (float64x2_t)vextq_s8((int8x16_t)v17, *(int8x16_t *)(v51 + 40), 8uLL);
    v17.f64[1] = *(float64_t *)(v51 + 32);
    v37.f64[1] = *(float64_t *)(v51 + 48);
    v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q1.f64[0]), v38, _Q1, 1), v37, v28);
    __asm { FMLA            D1, D5, V19.D[1] }
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v60.val[2].f64[0], v28);
    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(v26, _Q1);
    _Q0 = vaddq_f64(_Q3, v39);
    _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, _Q0.f64[0]), v23, _Q0, 1), v25, _Q1.f64[0]);
    __asm { FMLA            D3, D22, V0.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v24, _Q1.f64[0]);
    _Q0 = vmulq_f64(_Q2, _Q2);
    _Q1.f64[0] = _Q2.f64[1];
    __asm { FMLA            D0, D1, V2.D[1] }
    _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0] + _Q3.f64[0] * _Q3.f64[0]);
    v43 = vmulq_n_f64(v36, _Q0.f64[0]);
    _Q2.f64[0] = *(float64_t *)(*(_QWORD *)&v50.f64[0] + 16);
    *(_QWORD *)&v44 = *(_OWORD *)&vsubq_f64(_Q2, vmulq_f64(_Q18, _Q0));
    v45 = vsubq_f64(**(float64x2_t **)&v50.f64[0], v43);
    v54 = v45;
    v55 = v44;
    if (v57)
    {
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v57 + 24))(v57, &v54);
      v44 = v55;
      v45 = v54;
    }
    v45.f64[1] = *(double *)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).i64;
    v13 = vmulq_f64(v45, v45).f64[0] + v45.f64[1] * v45.f64[1] + v44 * v44;
    v56 = v13;
    v14 = v58;
  }
  v46 = *(double ***)a1;
  v47 = **(double ***)a1;
  *v47 = v13;
  *v46 = v47 + 1;
  if (v14)
  {
    v48 = (unint64_t *)&v14->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_239C30534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C30548((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_239C30548(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

double **sub_239C305A0(uint64_t a1, uint64_t a2, double **a3, char a4)
{
  uint64_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  float64x2_t v14;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  double *v27;
  unint64_t *v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  __int128 v39;
  float64x2_t *v40;
  float64x2_t v41;
  double v42;
  double v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char v46;

  if (a1 != a2)
  {
    v6 = a1;
    if (a4)
    {
      do
      {
        v31 = *(double *)(v6 + 80);
        v41 = *(float64x2_t *)(v6 + 64);
        v42 = v31;
        v32 = *(double *)(v6 + 88);
        v43 = v32;
        v33 = *(std::__shared_weak_count **)(v6 + 104);
        v44 = *(_QWORD *)(v6 + 96);
        v45 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(p_shared_owners);
          while (__stxr(v35 + 1, p_shared_owners));
          v46 = *(_BYTE *)(v6 + 112);
          v36 = *a3;
          *v36 = v32;
          *a3 = v36 + 1;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        else
        {
          v30 = *a3;
          *v30 = v32;
          *a3 = v30 + 1;
        }
        v6 += 120;
      }
      while (v6 != a2);
    }
    else
    {
      do
      {
        v7 = *(float64x2_t *)(v6 + 40);
        v40 = *(float64x2_t **)(v6 + 56);
        v39 = *(_OWORD *)(v6 + 24);
        v8 = *(double *)(v6 + 80);
        v9 = *(float64x2_t *)(v6 + 64);
        v41 = v9;
        v42 = v8;
        v43 = *(double *)(v6 + 88);
        v10 = *(_QWORD *)(v6 + 96);
        v11 = *(std::__shared_weak_count **)(v6 + 104);
        v44 = v10;
        v45 = v11;
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v46 = *(_BYTE *)(v6 + 112);
        v9.f64[0] = *(float64_t *)(*(_QWORD *)&v7.f64[1] + 32);
        v7.f64[0] = v40[2].f64[0];
        v14 = vsubq_f64(v9, v7);
        _Q1 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)&v7.f64[1] + 16), v40[1]);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v14.f64[0], v14.f64[0]));
        v22 = vmulq_n_f64(_Q1, _Q2.f64[0]);
        v23 = vmulq_f64(v14, _Q2);
        _Q2.f64[0] = *(float64_t *)(v39 + 16);
        *(_QWORD *)&v24 = *(_OWORD *)&vsubq_f64(_Q2, v23);
        v25 = vsubq_f64(*(float64x2_t *)v39, v22);
        v41 = v25;
        v42 = v24;
        if (v10)
        {
          (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v10 + 24))(v10, &v41);
          v24 = v42;
          v25 = v41;
          *(_QWORD *)&v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
          v11 = v45;
        }
        else
        {
          *(_QWORD *)&v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
        }
        v25.f64[1] = v26;
        v43 = vmulq_f64(v25, v25).f64[0] + v26 * v26 + v24 * v24;
        v27 = *a3;
        *v27 = v43;
        *a3 = v27 + 1;
        if (v11)
        {
          v28 = (unint64_t *)&v11->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v6 += 120;
      }
      while (v6 != a2);
    }
  }
  return a3;
}

void sub_239C30810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239C30858()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C3086C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFB5B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C308A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFB5B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C308C4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 328) = *(_BYTE *)(result + 16);
  return result;
}

void sub_239C308D4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = off_250AFEA50;
  v2 = a1 + 13;
  v3 = (_QWORD *)a1[16];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[12];
  if (v5 == a1 + 9)
  {
    v6 = 4;
    v5 = a1 + 9;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  JUMPOUT(0x23B83E31CLL);
}

void sub_239C30970(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "LevenbergMarquardt");
}

uint64_t sub_239C30998()
{
  return 1;
}

double sub_239C309A0(uint64_t a1)
{
  return *(double *)(a1 + 176);
}

uint64_t sub_239C309A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

double sub_239C309B0(uint64_t a1, double a2)
{
  double result;

  result = *(double *)(a1 + 144) * a2;
  *(double *)(a1 + 176) = result;
  *(_QWORD *)(a1 + 184) = 0x4000000000000000;
  return result;
}

double sub_239C309C8(uint64_t a1)
{
  double result;

  result = *(double *)(a1 + 152);
  *(double *)(a1 + 176) = result;
  *(_QWORD *)(a1 + 184) = 0x4000000000000000;
  return result;
}

uint64_t sub_239C309DC(uint64_t result, double a2, double a3, double a4, double a5)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  std::locale v17;

  if (*(_BYTE *)(result + 16))
  {
    sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[iter][old->new][delta < ptol][grad < gtol][delta < ctol][lambda][", 66);
    v7 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v7, (uint64_t)"][", 2);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v8, (uint64_t)"->", 2);
    v9 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v9, (uint64_t)"][", 2);
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v10, (uint64_t)" < ", 3);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v11, (uint64_t)"][", 2);
    if (a5 == 0.0)
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
    else
      std::ostream::operator<<();
    sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
    v12 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v12, (uint64_t)"][", 2);
    if (a2 == 0.0)
      sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
    else
      std::ostream::operator<<();
    sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
    v13 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v13, (uint64_t)"][", 2);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = sub_239458500(v14, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v17, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    return std::ostream::flush();
  }
  return result;
}

void sub_239C30C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_239C30C20(double *a1, uint64_t a2, double **a3, double a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double *v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  float64x2_t *v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  double *v19;
  uint64_t v20;
  float64x2_t *v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;

  v4 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v4)
  {
    v7 = 0.0;
    v8 = 0.0;
    goto LABEL_19;
  }
  v5 = *(double **)a2;
  v6 = **(double **)a2;
  v7 = v6 * v6;
  if ((_DWORD)v4 == 1)
  {
    v8 = v6 * **a3;
    goto LABEL_19;
  }
  v9 = &v5[v4];
  v10 = v5 + 1;
  v11 = (v4 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  v12 = v11 + 1;
  if (v11 < 3)
  {
    v13 = v5 + 1;
    goto LABEL_11;
  }
  v14 = (float64x2_t *)(v5 + 3);
  v15 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v16 = vmulq_f64(v14[-1], v14[-1]);
    v17 = vmulq_f64(*v14, *v14);
    v7 = v7 + v16.f64[0] + v16.f64[1] + v17.f64[0] + v17.f64[1];
    v14 += 2;
    v15 -= 4;
  }
  while (v15);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v13 = &v10[v12 & 0x3FFFFFFFFFFFFFFCLL];
    do
    {
LABEL_11:
      v18 = *v13++;
      v7 = v7 + v18 * v18;
    }
    while (v13 != v9);
  }
  v19 = *a3;
  v8 = v6 * **a3;
  if (v11 < 3)
    goto LABEL_17;
  v20 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
  v10 = (double *)((char *)v10 + v20);
  v21 = (float64x2_t *)(v19 + 3);
  v22 = (float64x2_t *)(v5 + 3);
  v23 = v12 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = vmulq_f64(v22[-1], v21[-1]);
    v25 = vmulq_f64(*v22, *v21);
    v8 = v8 + v24.f64[0] + v24.f64[1] + v25.f64[0] + v25.f64[1];
    v21 += 2;
    v22 += 2;
    v23 -= 4;
  }
  while (v23);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v19 = (double *)((char *)v19 + v20);
LABEL_17:
    v26 = v19 + 1;
    do
    {
      v27 = *v10++;
      v28 = v27;
      v29 = *v26++;
      v8 = v8 + v28 * v29;
    }
    while (v10 != v9);
  }
LABEL_19:
  v30 = a1[22];
  v31 = a1[17] - a4;
  if (v31 < 0.0)
  {
    __asm { FMOV            V1.2D, #2.0 }
    _Q1.f64[0] = a1[22];
    *((float64x2_t *)a1 + 11) = vmulq_n_f64(_Q1, a1[23]);
  }
  else
  {
    v32 = a1[21] * (fabs(v30 * v7) + fabs(v8));
    if (v32 <= 0.0)
    {
      v34 = 0.333333333;
    }
    else
    {
      v33 = -((v31 / v32 * 2.0 + -1.0) * (v31 / v32 * 2.0 + -1.0)) * (v31 / v32 * 2.0 + -1.0) + 1.0;
      if (v33 > 0.666666667)
        v33 = 0.666666667;
      v34 = fmax(v33, 0.333333333);
    }
    a1[22] = v30 * v34;
    a1[23] = 2.0;
    a1[17] = a4;
  }
  return v31 >= 0.0;
}

BOOL sub_239C30E28(double *a1, uint64_t a2, double **a3, double **a4, double a5)
{
  size_t v10;
  double *v11;
  uint64_t v12;
  double *v13;
  double *v14;
  unint64_t v15;
  double *v16;
  unint64_t v17;
  uint64_t v18;
  float64x2_t *v19;
  float64x2_t *v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double *v42;
  double *v43;
  uint64_t v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  double *v50;
  double *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  _BOOL8 v60;
  std::bad_alloc *exception;
  std::bad_alloc *v63;
  void *memptr;

  v10 = (8 * *(unsigned int *)(a2 + 16) + 31) & 0xFFFFFFFE0;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v10, 0x100BBD03uLL);
  v11 = (double *)memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v63 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v63, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v12 = *(unsigned int *)(a2 + 16);
  if (!(_DWORD)v12)
  {
    v23 = a1[22];
    v24 = 0.0;
    v25 = 0.0;
    goto LABEL_28;
  }
  v13 = (double *)((char *)memptr + 8 * v12);
  v14 = *(double **)a2;
  v15 = (v12 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v15 < 3)
  {
    v16 = (double *)memptr;
    do
    {
LABEL_11:
      v26 = *v14++;
      *v16++ = v26 * v26;
    }
    while (v16 != v13);
    goto LABEL_12;
  }
  v16 = (double *)memptr;
  if ((unint64_t)((_BYTE *)memptr - (_BYTE *)v14) < 0x20)
    goto LABEL_11;
  v17 = v15 + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v16 = (double *)((char *)memptr + v18);
  v19 = (float64x2_t *)(v14 + 2);
  v20 = (float64x2_t *)((char *)memptr + 16);
  v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v22 = vmulq_f64(*v19, *v19);
    v20[-1] = vmulq_f64(v19[-1], v19[-1]);
    *v20 = v22;
    v19 += 2;
    v20 += 2;
    v21 -= 4;
  }
  while (v21);
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v14 = (double *)((char *)v14 + v18);
    goto LABEL_11;
  }
LABEL_12:
  v23 = a1[22];
  v27 = *a4;
  v24 = *v11 * **a4;
  if ((_DWORD)v12 == 1)
  {
    v25 = **(double **)a2 * **a3;
    goto LABEL_28;
  }
  v28 = v11 + 1;
  v29 = (v12 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  v30 = v29 + 1;
  if (v29 < 3)
    goto LABEL_19;
  v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
  v28 = (double *)((char *)v28 + v31);
  v32 = (float64x2_t *)(v27 + 3);
  v33 = (float64x2_t *)(v11 + 3);
  v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v35 = vmulq_f64(v33[-1], v32[-1]);
    v36 = vmulq_f64(*v33, *v32);
    v24 = v24 + v35.f64[0] + v35.f64[1] + v36.f64[0] + v36.f64[1];
    v32 += 2;
    v33 += 2;
    v34 -= 4;
  }
  while (v34);
  if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v27 = (double *)((char *)v27 + v31);
LABEL_19:
    v37 = v27 + 1;
    do
    {
      v38 = *v28++;
      v39 = v38;
      v40 = *v37++;
      v24 = v24 + v39 * v40;
    }
    while (v28 != v13);
  }
  v41 = *(double **)a2;
  v42 = (double *)(*(_QWORD *)a2 + 8);
  v43 = *a3;
  v25 = **(double **)a2 * **a3;
  if (v29 < 3)
    goto LABEL_26;
  v44 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
  v42 = (double *)((char *)v42 + v44);
  v45 = (float64x2_t *)(v43 + 3);
  v46 = (float64x2_t *)(v41 + 3);
  v47 = v30 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v48 = vmulq_f64(v46[-1], v45[-1]);
    v49 = vmulq_f64(*v46, *v45);
    v25 = v25 + v48.f64[0] + v48.f64[1] + v49.f64[0] + v49.f64[1];
    v45 += 2;
    v46 += 2;
    v47 -= 4;
  }
  while (v47);
  if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v43 = (double *)((char *)v43 + v44);
LABEL_26:
    v50 = &v41[v12];
    v51 = v43 + 1;
    do
    {
      v52 = *v42++;
      v53 = v52;
      v54 = *v51++;
      v25 = v25 + v53 * v54;
    }
    while (v42 != v50);
  }
LABEL_28:
  v55 = a1[17] - a5;
  if (v55 < 0.0)
  {
    v59 = a1[23];
    a1[22] = v23 * v59;
    a1[23] = v59 + v59;
  }
  else
  {
    v56 = a1[21] * (fabs(v24 * v23) + fabs(v25));
    if (v56 <= 0.0)
    {
      v58 = 0.333333333;
    }
    else
    {
      v57 = -((v55 / v56 * 2.0 + -1.0) * (v55 / v56 * 2.0 + -1.0)) * (v55 / v56 * 2.0 + -1.0) + 1.0;
      if (v57 > 0.666666667)
        v57 = 0.666666667;
      v58 = fmax(v57, 0.333333333);
    }
    a1[22] = v23 * v58;
    a1[23] = 2.0;
    a1[17] = a5;
  }
  v60 = v55 >= 0.0;
  free(v11);
  return v60;
}

uint64_t sub_239C31188()
{
  return 0;
}

uint64_t sub_239C31190()
{
  return 1;
}

uint64_t sub_239C31198(double a1, double a2, double a3, double a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"[iter][old->new][delta < ptol][grad < gtol][delta < ctol][", 58);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v6, (uint64_t)"][", 2);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v7, (uint64_t)"->", 2);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v8, (uint64_t)"][", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v9, (uint64_t)" < ", 3);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v10, (uint64_t)"][", 2);
  if (a4 == 0.0)
    sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
  else
    std::ostream::operator<<();
  sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v11, (uint64_t)"][", 2);
  if (a1 == 0.0)
    sub_239458500(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
  else
    std::ostream::operator<<();
  sub_239458500(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_239458500(v12, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_239C313A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

char *sub_239C313BC(void **a1, char *a2, uint64_t *a3)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;

  v4 = a2;
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = a2 - (_BYTE *)*a1;
  v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
  v10 = (char *)a1[2];
  if (v6 >= v10)
  {
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 5) + 1;
    if (v32 > 0x199999999999999)
      sub_2394189F8();
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 5);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0xCCCCCCCCCCCCCCLL)
      v34 = 0x199999999999999;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 > 0x199999999999999)
        sub_239418A80();
      v35 = (char *)operator new(160 * v34);
    }
    else
    {
      v35 = 0;
    }
    v46 = (uint64_t)&v35[32 * (v8 >> 5)];
    v89 = &v35[160 * v34];
    if (v9 == v34)
    {
      if (v8 >= 1)
      {
        v47 = v9 + 2;
        if (v9 >= -1)
          v47 = v9 + 1;
        v48 = v47 >> 1;
        v49 = sub_239C299F0(v46, v46, v46 - 160 * (v47 >> 1));
        v46 -= 160 * v48;
LABEL_43:
        *(_QWORD *)v49 = *a3;
        v52 = *(_OWORD *)(a3 + 1);
        *(_OWORD *)(v49 + 24) = *(_OWORD *)(a3 + 3);
        *(_OWORD *)(v49 + 8) = v52;
        v53 = *(_OWORD *)(a3 + 5);
        v54 = *(_OWORD *)(a3 + 7);
        v55 = *(_OWORD *)(a3 + 9);
        *(_OWORD *)(v49 + 88) = *(_OWORD *)(a3 + 11);
        *(_OWORD *)(v49 + 72) = v55;
        *(_OWORD *)(v49 + 56) = v54;
        *(_OWORD *)(v49 + 40) = v53;
        v56 = *(_OWORD *)(a3 + 13);
        *(_QWORD *)(v49 + 120) = a3[15];
        *(_OWORD *)(v49 + 104) = v56;
        *(_QWORD *)(v49 + 128) = a3[16];
        *(_OWORD *)(v49 + 136) = *(_OWORD *)(a3 + 17);
        a3[17] = 0;
        a3[18] = 0;
        *(_BYTE *)(v49 + 152) = *((_BYTE *)a3 + 152);
        v57 = v49 + 160;
        v58 = (char *)*a1;
        if (*a1 == v4)
        {
          v67 = v46;
        }
        else
        {
          v59 = 0;
          do
          {
            v60 = v46 + v59;
            v61 = &v4[v59];
            *(_QWORD *)(v60 - 160) = *(_QWORD *)&v4[v59 - 160];
            v62 = *(_OWORD *)&v4[v59 - 152];
            *(_OWORD *)(v60 - 136) = *(_OWORD *)&v4[v59 - 136];
            *(_OWORD *)(v60 - 152) = v62;
            v63 = *(_OWORD *)&v4[v59 - 120];
            v64 = *(_OWORD *)&v4[v59 - 104];
            v65 = *(_OWORD *)&v4[v59 - 88];
            *(_OWORD *)(v60 - 72) = *(_OWORD *)&v4[v59 - 72];
            *(_OWORD *)(v60 - 88) = v65;
            *(_OWORD *)(v60 - 104) = v64;
            *(_OWORD *)(v60 - 120) = v63;
            v66 = *(_OWORD *)&v4[v59 - 56];
            *(_QWORD *)(v60 - 40) = *(_QWORD *)&v4[v59 - 40];
            *(_OWORD *)(v60 - 56) = v66;
            *(_QWORD *)(v60 - 32) = *(_QWORD *)&v4[v59 - 32];
            *(_OWORD *)(v60 - 24) = *(_OWORD *)&v4[v59 - 24];
            *((_QWORD *)v61 - 3) = 0;
            *((_QWORD *)v61 - 2) = 0;
            *(_BYTE *)(v60 - 8) = v4[v59 - 8];
            v59 -= 160;
          }
          while (&v4[v59] != v58);
          v67 = v46 + v59;
          v57 = v49 + 160;
        }
        v68 = (char *)a1[1];
        if (v68 != v4)
        {
          do
          {
            *(_QWORD *)v57 = *(_QWORD *)v4;
            v69 = *(_OWORD *)(v4 + 8);
            *(_OWORD *)(v57 + 24) = *(_OWORD *)(v4 + 24);
            *(_OWORD *)(v57 + 8) = v69;
            v70 = *(_OWORD *)(v4 + 40);
            v71 = *(_OWORD *)(v4 + 56);
            v72 = *(_OWORD *)(v4 + 72);
            *(_OWORD *)(v57 + 88) = *(_OWORD *)(v4 + 88);
            *(_OWORD *)(v57 + 72) = v72;
            *(_OWORD *)(v57 + 56) = v71;
            *(_OWORD *)(v57 + 40) = v70;
            v73 = *(_OWORD *)(v4 + 104);
            *(_QWORD *)(v57 + 120) = *((_QWORD *)v4 + 15);
            *(_OWORD *)(v57 + 104) = v73;
            *(_QWORD *)(v57 + 128) = *((_QWORD *)v4 + 16);
            *(_OWORD *)(v57 + 136) = *(_OWORD *)(v4 + 136);
            *((_QWORD *)v4 + 17) = 0;
            *((_QWORD *)v4 + 18) = 0;
            *(_BYTE *)(v57 + 152) = v4[152];
            v57 += 160;
            v4 += 160;
          }
          while (v4 != v68);
          v4 = (char *)a1[1];
        }
        v74 = (char *)*a1;
        *a1 = (void *)v67;
        a1[1] = (void *)v57;
        a1[2] = v89;
        if (v4 == v74)
        {
          if (!v4)
            return (char *)v46;
        }
        else
        {
          do
          {
            v88 = v4 - 160;
            v76 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
            if (v76)
            {
              p_shared_owners = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(p_shared_owners);
              while (__stlxr(v78 - 1, p_shared_owners));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v4 = v88;
          }
          while (v88 != v74);
          v4 = v74;
          if (!v74)
            return (char *)v46;
        }
        operator delete(v4);
        return (char *)v46;
      }
      if (v7 == v4)
        v50 = 1;
      else
        v50 = 0x999999999999999ALL * (v8 >> 5);
      if (v50 > 0x199999999999999)
        sub_239418A80();
      v51 = (char *)operator new(160 * v50);
      v46 = (uint64_t)&v51[160 * (v50 >> 2)];
      v89 = &v51[160 * v50];
      if (v35)
        operator delete(v35);
    }
    v49 = v46;
    goto LABEL_43;
  }
  v11 = (__int128 *)(a3 + 1);
  if (a2 == v6)
  {
    *(_QWORD *)a2 = *a3;
    v40 = &v7[32 * (v8 >> 5)];
    v41 = *v11;
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(a3 + 3);
    *(_OWORD *)(v40 + 8) = v41;
    v42 = *(_OWORD *)(a3 + 5);
    v43 = *(_OWORD *)(a3 + 7);
    v44 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)(v40 + 88) = *(_OWORD *)(a3 + 11);
    *(_OWORD *)(v40 + 72) = v44;
    *(_OWORD *)(v40 + 56) = v43;
    *(_OWORD *)(v40 + 40) = v42;
    v45 = *(_OWORD *)(a3 + 13);
    *((_QWORD *)v40 + 15) = a3[15];
    *(_OWORD *)(v40 + 104) = v45;
    *((_QWORD *)v40 + 16) = a3[16];
    *(_OWORD *)(v40 + 136) = *(_OWORD *)(a3 + 17);
    a3[17] = 0;
    a3[18] = 0;
    v40[152] = *((_BYTE *)a3 + 152);
    a1[1] = a2 + 160;
  }
  else
  {
    v12 = *a3;
    v82 = *(_OWORD *)(a3 + 5);
    v83 = *(_OWORD *)(a3 + 3);
    v80 = *(_OWORD *)(a3 + 9);
    v81 = *(_OWORD *)(a3 + 7);
    v79 = *(_OWORD *)(a3 + 11);
    v85 = *v11;
    v86 = *(_OWORD *)(a3 + 13);
    v87 = a3[15];
    v13 = a3[16];
    v84 = *(_OWORD *)(a3 + 17);
    a3[17] = 0;
    a3[18] = 0;
    v14 = (unint64_t)a1[1];
    v15 = v14 - 160;
    v16 = v14;
    v17 = *((_BYTE *)a3 + 152);
    if (v14 >= 0xA0)
    {
      v18 = v14 - 160;
      v16 = (unint64_t)a1[1];
      do
      {
        *(_QWORD *)v16 = *(_QWORD *)v18;
        v19 = *(_OWORD *)(v18 + 8);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v16 + 8) = v19;
        v20 = *(_OWORD *)(v18 + 40);
        v21 = *(_OWORD *)(v18 + 56);
        v22 = *(_OWORD *)(v18 + 72);
        *(_OWORD *)(v16 + 88) = *(_OWORD *)(v18 + 88);
        *(_OWORD *)(v16 + 72) = v22;
        *(_OWORD *)(v16 + 56) = v21;
        *(_OWORD *)(v16 + 40) = v20;
        v23 = *(_OWORD *)(v18 + 104);
        *(_QWORD *)(v16 + 120) = *(_QWORD *)(v18 + 120);
        *(_OWORD *)(v16 + 104) = v23;
        *(_QWORD *)(v16 + 128) = *(_QWORD *)(v18 + 128);
        *(_OWORD *)(v16 + 136) = *(_OWORD *)(v18 + 136);
        *(_QWORD *)(v18 + 136) = 0;
        *(_QWORD *)(v18 + 144) = 0;
        *(_BYTE *)(v16 + 152) = *(_BYTE *)(v18 + 152);
        v16 += 160;
        v18 += 160;
      }
      while (v18 < v14);
    }
    a1[1] = (void *)v16;
    if ((char *)v14 != a2 + 160)
    {
      v24 = v14 - 160;
      v25 = v14;
      do
      {
        v26 = *(_QWORD *)(v24 - 160);
        v24 -= 160;
        *(_QWORD *)(v25 - 160) = v26;
        v25 -= 160;
        *(_OWORD *)(v25 + 8) = *(_OWORD *)(v24 + 8);
        *(_QWORD *)(v25 + 24) = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v25 + 32) = *(_QWORD *)(v24 + 32);
        *(_QWORD *)(v25 + 40) = *(_QWORD *)(v24 + 40);
        *(_QWORD *)(v25 + 48) = *(_QWORD *)(v24 + 48);
        *(_QWORD *)(v25 + 56) = *(_QWORD *)(v24 + 56);
        *(_QWORD *)(v25 + 64) = *(_QWORD *)(v24 + 64);
        *(_QWORD *)(v25 + 72) = *(_QWORD *)(v24 + 72);
        *(_QWORD *)(v25 + 80) = *(_QWORD *)(v24 + 80);
        *(_QWORD *)(v25 + 88) = *(_QWORD *)(v24 + 88);
        *(_QWORD *)(v25 + 96) = *(_QWORD *)(v24 + 96);
        v27 = *(_OWORD *)(v24 + 104);
        *(_QWORD *)(v25 + 120) = *(_QWORD *)(v24 + 120);
        *(_OWORD *)(v25 + 104) = v27;
        *(_QWORD *)(v25 + 128) = *(_QWORD *)(v24 + 128);
        v28 = *(_OWORD *)(v24 + 136);
        *(_QWORD *)(v24 + 136) = 0;
        *(_QWORD *)(v24 + 144) = 0;
        v29 = *(std::__shared_weak_count **)(v25 + 144);
        *(_OWORD *)(v25 + 136) = v28;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        *(_BYTE *)(v14 - 8) = *(_BYTE *)(v15 - 8);
        v14 = v25;
        v15 = v24;
      }
      while ((char *)v24 != v4);
    }
    *(_QWORD *)v4 = v12;
    v36 = &v7[160 * v9];
    *(_OWORD *)(v36 + 8) = v85;
    *(_OWORD *)(v36 + 24) = v83;
    *(_OWORD *)(v36 + 40) = v82;
    *(_OWORD *)(v36 + 56) = v81;
    *(_OWORD *)(v36 + 72) = v80;
    *(_OWORD *)(v36 + 88) = v79;
    *(_OWORD *)(v36 + 104) = v86;
    *((_QWORD *)v36 + 15) = v87;
    *((_QWORD *)v36 + 16) = v13;
    v37 = (std::__shared_weak_count *)*((_QWORD *)v36 + 18);
    *(_OWORD *)(v36 + 136) = v84;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v7[160 * v9 + 152] = v17;
  }
  return v4;
}

void sub_239C31AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_239C31B0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239C31AB4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239C31B0C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 160;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239C31B98(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239C31BF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_239C31C48(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239C31CD8()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C31CEC()
{
  return 2;
}

float64x2_t sub_239C31CF4(uint64_t a1, float64x2_t *a2, float64x2_t a3, float64x2_t a4)
{
  float64_t v4;
  float64x2_t result;

  a3.f64[0] = *(float64_t *)(a1 + 16);
  a4.f64[0] = a2[1].f64[0];
  *(_QWORD *)&v4 = *(_OWORD *)&vmulq_f64(a3, a4);
  result = vmulq_n_f64(*a2, a3.f64[0]);
  *a2 = result;
  a2[1].f64[0] = v4;
  return result;
}

float64x2_t sub_239C31D14(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v5;
  float64x2_t result;

  a4.f64[0] = *(float64_t *)(a1 + 16);
  a5.f64[0] = a2[1].f64[0];
  v5 = *(_OWORD *)&vmulq_f64(a5, a4);
  result = vmulq_n_f64(*a2, a4.f64[0]);
  *(float64x2_t *)a3 = result;
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

float64_t sub_239C31D34(uint64_t a1, float64x2_t *a2, float64x2_t a3, float64x2_t a4)
{
  float64x2_t v4;

  a3.f64[0] = *(float64_t *)(a1 + 16);
  a4.f64[0] = a2[1].f64[0];
  v4 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3.f64[0], 0);
  *(_QWORD *)&a3.f64[0] = *(_OWORD *)&vdivq_f64(a4, a3);
  *a2 = vdivq_f64(*a2, v4);
  a2[1].f64[0] = a3.f64[0];
  return a3.f64[0];
}

float64_t sub_239C31D58(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t v6;

  a4.f64[0] = *(float64_t *)(a1 + 16);
  a5.f64[0] = a2[1].f64[0];
  v5 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4.f64[0], 0);
  *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vdivq_f64(a5, a4);
  v6 = vdivq_f64(*a2, v5);
  a3[1].f64[0] = a4.f64[0];
  *a3 = v6;
  return a4.f64[0];
}

double sub_239C31D7C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_239C31DA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double result;

  result = *(double *)(a1 + 16) * a3;
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_239C31DC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 16) * *(double *)(a1 + 16);
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

double sub_239C31DF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 1.0 / (*(double *)(a1 + 16) * *(double *)(a1 + 16));
  *(double *)a2 = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(double *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(double *)(a2 + 64) = result;
  return result;
}

void sub_239C31E20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239C31E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AFE808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C31E60(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *sub_239C31E70(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int a5)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *((_DWORD *)a2 + 8), v6 > a5))
  {
    v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v13 = a2;
      do
      {
        v9 = (uint64_t *)v13[2];
        v14 = *v9 == (_QWORD)v13;
        v13 = v9;
      }
      while (v14);
    }
    if (*((_DWORD *)v9 + 8) < a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v18 <= a5)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_41;
        }
        if (v18 >= a5)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
      goto LABEL_41;
    }
LABEL_20:
    v17 = a1 + 1;
LABEL_41:
    *a3 = v17;
    return v5;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (uint64_t *)a2[1];
    do
    {
      v12 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v19 = a2;
    do
    {
      v12 = (uint64_t *)v19[2];
      v14 = *v12 == (_QWORD)v19;
      v19 = v12;
    }
    while (!v14);
  }
  if (v12 != v5 && *((_DWORD *)v12 + 8) <= a5)
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v20;
          v21 = *(_DWORD *)(v20 + 32);
          if (v21 <= a5)
            break;
          v20 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_41;
        }
        if (v21 >= a5)
          break;
        v5 = v17 + 1;
        v20 = v17[1];
      }
      while (v20);
      goto LABEL_41;
    }
    goto LABEL_20;
  }
  if (v10)
  {
    *a3 = v12;
    return v12;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
}

char *sub_239C31FF8(uint64_t ***a1, uint64_t **a2, unsigned int a3, uint64_t a4)
{
  char *v5;
  void **v7;
  unsigned int v8;
  uint64_t *v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  BOOL v17;
  void **v18;
  unsigned int v19;
  void **v20;
  void **v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v5 = (char *)a2;
  v7 = (void **)(a1 + 1);
  if (a1 + 1 != (uint64_t ***)a2)
  {
    v8 = *((_DWORD *)a2 + 8);
    if (v8 <= a3)
    {
      if (v8 >= a3)
        return v5;
      v12 = (void **)(a2 + 1);
      v13 = (void **)a2[1];
      if (v13)
      {
        do
        {
          v12 = v13;
          v13 = (void **)*v13;
          v14 = v12;
          v15 = v12;
        }
        while (v13);
        if (v12 == v7)
        {
LABEL_23:
          v5 = (char *)*v12;
          v7 = v12;
          if (*v12)
            return v5;
          goto LABEL_42;
        }
      }
      else
      {
        v15 = (void **)a2;
        do
        {
          v20 = v15;
          v15 = (void **)v15[2];
        }
        while (*v15 != v20);
        v14 = (void **)a2;
        if (v15 == v7)
          goto LABEL_23;
      }
      if (*((_DWORD *)v15 + 8) > a3)
        goto LABEL_23;
      v21 = (void **)*v7;
      if (!*v7)
        goto LABEL_26;
      while (1)
      {
        while (1)
        {
          v14 = v21;
          v22 = *((_DWORD *)v21 + 8);
          if (v22 <= a3)
            break;
          v21 = (void **)*v14;
          v7 = v14;
          if (!*v14)
            goto LABEL_42;
        }
        if (v22 >= a3)
          break;
        v7 = v14 + 1;
        v21 = (void **)v14[1];
        if (!v21)
          goto LABEL_42;
      }
LABEL_46:
      v12 = v7;
      goto LABEL_23;
    }
  }
  v9 = *a2;
  if (*a1 == a2)
  {
    v11 = (void **)a2;
LABEL_17:
    if (v9)
      v14 = v11;
    else
      v14 = (void **)a2;
    if (v9)
      v12 = v11 + 1;
    else
      v12 = (void **)a2;
    goto LABEL_23;
  }
  if (v9)
  {
    v10 = (void **)*a2;
    do
    {
      v11 = v10;
      v10 = (void **)v10[1];
    }
    while (v10);
  }
  else
  {
    v16 = (void **)a2;
    do
    {
      v11 = (void **)v16[2];
      v17 = *v11 == v16;
      v16 = v11;
    }
    while (v17);
  }
  if (*((_DWORD *)v11 + 8) < a3)
    goto LABEL_17;
  v18 = (void **)*v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v14 = v18;
        v19 = *((_DWORD *)v18 + 8);
        if (v19 <= a3)
          break;
        v18 = (void **)*v14;
        v7 = v14;
        if (!*v14)
          goto LABEL_42;
      }
      if (v19 >= a3)
        goto LABEL_46;
      v7 = v14 + 1;
      v18 = (void **)v14[1];
      if (!v18)
        goto LABEL_42;
    }
  }
LABEL_26:
  v14 = (void **)(a1 + 1);
LABEL_42:
  v5 = (char *)operator new(0x88uLL);
  *((_DWORD *)v5 + 8) = *(_DWORD *)a4;
  v23 = *(_QWORD *)(a4 + 16);
  *((_QWORD *)v5 + 5) = *(_QWORD *)(a4 + 8);
  *((_QWORD *)v5 + 6) = v23;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(a4 + 24);
  *((_QWORD *)v5 + 9) = *(_QWORD *)(a4 + 40);
  v5[80] = *(_BYTE *)(a4 + 48);
  *((_QWORD *)v5 + 11) = *(_QWORD *)(a4 + 56);
  *((_DWORD *)v5 + 24) = *(_DWORD *)(a4 + 64);
  v24 = *(_OWORD *)(a4 + 72);
  *((_QWORD *)v5 + 15) = *(_QWORD *)(a4 + 88);
  *(_OWORD *)(v5 + 104) = v24;
  v5[128] = *(_BYTE *)(a4 + 96);
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = v14;
  *v7 = v5;
  v25 = (uint64_t *)v5;
  v26 = **a1;
  if (v26)
  {
    *a1 = (uint64_t **)v26;
    v25 = (uint64_t *)*v7;
  }
  sub_2394213B8((uint64_t *)a1[1], v25);
  a1[2] = (uint64_t **)((char *)a1[2] + 1);
  return v5;
}

void sub_239C3223C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB198;
  free(*(void **)(a1 + 936));
  free(*(void **)(a1 + 912));
  *(_QWORD *)a1 = off_250AFB250;
  free(*(void **)(a1 + 864));
  free(*(void **)(a1 + 840));
  sub_239C1A9B8(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C322A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_250AFB3B8;
  v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(_QWORD *)(a1 + 400) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 384);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  free(*(void **)(a1 + 352));
  *(_QWORD *)a1 = &unk_250AFB468;
  sub_239C1AC34(a1 + 40);
  return a1;
}

uint64_t sub_239C32314(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_250AFB530;
  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  return a1;
}

void sub_239C323A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_250AFB530;
  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C32444(uint64_t a1, int a2, double a3, __n128 a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, __n128 a8, float64x2_t a9, float64x2_t a10)
{
  uint64_t *v10;
  __n128 result;
  _OWORD v17[2];

  v10 = *(uint64_t **)(a1 + 136);
  a4.n128_u64[0] = *(_QWORD *)(a1 + 144);
  __asm { FMOV            V0.2D, #1.0 }
  v17[0] = _Q0;
  v17[1] = _Q0;
  sub_239C1F7C4(v10, 0, (uint64_t)v17, a2, 0, 0.0, a4, a5, a6, a7, a8, a9, a10);
  return result;
}

uint64_t sub_239C32488(uint64_t a1)
{
  return **(_QWORD **)(a1 + 136);
}

uint64_t sub_239C32494(uint64_t a1)
{
  return **(_QWORD **)(a1 + 136);
}

uint64_t sub_239C324A0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
}

void sub_239C324BC(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  a1[1] = 0;
  v2 = (void **)a1[6];
  v3 = a1[7];
  a1[10] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[7];
      v2 = (void **)(a1[6] + 8);
      a1[6] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 512;
  }
  a1[9] = v6;
LABEL_8:
  a1[3] = a1[2];
  v8 = a1[11];
  v7 = a1[12];
  if (v7 != v8)
  {
    v9 = a1[12];
    do
    {
      v11 = *(void **)(v9 - 24);
      v9 -= 24;
      v10 = v11;
      if (v11)
      {
        *(_QWORD *)(v7 - 16) = v10;
        operator delete(v10);
      }
      v7 = v9;
    }
    while (v9 != v8);
  }
  a1[12] = v8;
}

void sub_239C3257C(uint64_t a1, int a2, unsigned int a3)
{
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  void *v28;

  if (*(_DWORD *)(a1 + 12) != a3)
  {
    v6 = a3;
    v8 = *(_QWORD **)(a1 + 88);
    v7 = *(_QWORD **)(a1 + 96);
    v9 = 0xAAAAAAAAAAAAAAABLL * (v7 - v8);
    v10 = a3 - v9;
    if (a3 <= v9)
    {
      if (a3 < v9)
      {
        v25 = &v8[3 * a3];
        if (v7 != v25)
        {
          v26 = *(_QWORD **)(a1 + 96);
          do
          {
            v28 = (void *)*(v26 - 3);
            v26 -= 3;
            v27 = v28;
            if (v28)
            {
              *(v7 - 2) = v27;
              operator delete(v27);
            }
            v7 = v26;
          }
          while (v26 != v25);
        }
        *(_QWORD *)(a1 + 96) = v25;
      }
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 104);
      if (0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3) >= v10)
      {
        bzero(*(void **)(a1 + 96), 24 * ((24 * v10 - 24) / 0x18) + 24);
        *(_QWORD *)(a1 + 96) = &v7[3 * ((24 * v10 - 24) / 0x18) + 3];
      }
      else
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 3);
        v13 = 0x5555555555555556 * ((v11 - (uint64_t)v8) >> 3);
        if (v13 > a3)
          v6 = v13;
        if (v12 >= 0x555555555555555)
          v6 = 0xAAAAAAAAAAAAAAALL;
        if (v6 > 0xAAAAAAAAAAAAAAALL)
          sub_239418A80();
        v14 = 24 * v6;
        v15 = (char *)operator new(24 * v6);
        v16 = &v15[8 * (v7 - v8)];
        v17 = &v15[v14];
        bzero(v16, 24 * ((24 * v10 - 24) / 0x18) + 24);
        v18 = &v16[24 * ((24 * v10 - 24) / 0x18) + 24];
        if (v7 == v8)
        {
          *(_QWORD *)(a1 + 88) = v16;
          *(_QWORD *)(a1 + 96) = v18;
          *(_QWORD *)(a1 + 104) = v17;
        }
        else
        {
          do
          {
            v19 = v16;
            *((_QWORD *)v16 - 2) = 0;
            *((_QWORD *)v16 - 1) = 0;
            v20 = *(_OWORD *)(v7 - 3);
            v7 -= 3;
            *(_OWORD *)(v16 - 24) = v20;
            v16 -= 24;
            *((_QWORD *)v19 - 1) = v7[2];
            *v7 = 0;
            v7[1] = 0;
            v7[2] = 0;
          }
          while (v7 != v8);
          v7 = *(_QWORD **)(a1 + 88);
          v21 = *(_QWORD **)(a1 + 96);
          *(_QWORD *)(a1 + 88) = v16;
          *(_QWORD *)(a1 + 96) = v18;
          *(_QWORD *)(a1 + 104) = v17;
          if (v21 != v7)
          {
            v22 = v21;
            do
            {
              v24 = (void *)*(v22 - 3);
              v22 -= 3;
              v23 = v24;
              if (v24)
              {
                *(v21 - 2) = v23;
                operator delete(v23);
              }
              v21 = v22;
            }
            while (v22 != v7);
          }
        }
        if (v7)
          operator delete(v7);
      }
    }
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
}

_QWORD *sub_239C32798(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_239C3283C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_250AFD820;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_250AFD880;
  sub_2394D0C00((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C328F0(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v22 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v22;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = &v12[8 * v16 - 16];
    v19 = (__int128 *)(v10 - 16);
    v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v15 = &v14[-8 * (v17 & 0x3FFFFFFFFFFFFFFCLL)];
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_239C32A18(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_239C32A48()
{
  return 3;
}

uint64_t sub_239C32A50()
{
  return 3;
}

uint64_t sub_239C32A58(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  uint64_t v21;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v21 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v21 == *(_QWORD *)a2)
          {
            v14 = *(_QWORD *)(v21 + 64);
            v13 = *(int8x16_t *)(v21 + 32);
            v10 = *(int8x16_t *)(v21 + 48);
            v8 = *(int8x16_t *)v21;
            v12 = *(int8x16_t *)(v21 + 16);
            v15 = vextq_s8(v10, v10, 8uLL).u64[0];
            v11 = vextq_s8(v13, v13, 8uLL).u64[0];
            *(_QWORD *)&v9 = vextq_s8(v12, v12, 8uLL).u64[0];
          }
          else
          {
            v8 = *(int8x16_t *)v21;
            v9 = *(_OWORD *)(v21 + 24);
            v10 = *(int8x16_t *)(v21 + 48);
            v11 = *(_QWORD *)(v21 + 40);
            v12.i64[0] = *(_QWORD *)(v21 + 16);
            v13.i64[0] = *(_QWORD *)(v21 + 32);
            v14 = *(_QWORD *)(v21 + 64);
            v15 = vextq_s8(v10, v10, 8uLL).u64[0];
          }
          v16 = *v6;
          v6 += 4;
          v17 = *(unsigned int *)(a2 + 16);
          v18 = *(_QWORD *)a2 + 8 * (3 * v16 + a3 + v17 * (3 * i + HIDWORD(a3)));
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          *((_QWORD *)&v9 + 1) = v13.i64[0];
          v10.i64[1] = v15;
          *(_QWORD *)(v18 + 16) = v12.i64[0];
          *(int8x16_t *)v18 = v8;
          v19 = v18 + 8 * v17;
          *(_QWORD *)(v19 + 16) = v11;
          *(_OWORD *)v19 = v9;
          v20 = (int8x16_t *)(v18 + 16 * v17);
          v20[1].i64[0] = v14;
          *v20 = v10;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_239C32B48(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v8 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * i);
      v9 = *v8;
      v10 = v8[1];
      if (v9 != v10)
      {
        while (i != *(_DWORD *)v9)
        {
          v9 += 16;
          if (v9 == v10)
            goto LABEL_5;
        }
        v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v9 + 8));
        v6 = *a2 + 8 * (3 * i + a3);
        *(_QWORD *)&v7 = *v5;
        if (v5 == (_QWORD *)*a2)
        {
          *((_QWORD *)&v7 + 1) = v5[4];
          *(_QWORD *)(v6 + 16) = v5[8];
          *(_OWORD *)v6 = v7;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v6 = v7;
          *(_QWORD *)(v6 + 8) = v5[4];
          *(_QWORD *)(v6 + 16) = v5[8];
        }
      }
LABEL_5:
      ;
    }
  }
  return result;
}

uint64_t sub_239C32BF4(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v2 = (char *)operator new(0x100uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v2 + 256;
  v3 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v3 + 256;
  v4 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = v4 + 256;
  v5 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v5 + 256;
  v6 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v6 + 256;
  v7 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 128) = v7;
  *(_QWORD *)(a1 + 136) = v7 + 256;
  return a1;
}

void sub_239C32CB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_2394FCFA8(v3);
  sub_2394FCFA8(v2);
  sub_2394FCFA8(v1);
  _Unwind_Resume(a1);
}

void sub_239C32CDC(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int8 *v26;
  uint64_t v27;
  __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  __int8 *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  std::__shared_weak_count *v100;
  __int128 v101;
  _BYTE v102[48];
  char *v103;
  __int128 v104;
  unint64_t v105;
  __int128 v106;
  _BYTE v107[32];
  char *v108;
  unint64_t *v109;
  char *v110;

  v5 = a5;
  v8 = (unint64_t *)a1[8].i64[0];
  v9 = (unint64_t *)a1[8].i64[1];
  v10 = v9 - v8;
  *(_OWORD *)&v107[8] = *(_OWORD *)a2;
  *(_QWORD *)&v107[24] = *(_QWORD *)(a2 + 16);
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v100 = a5;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v8 = (unint64_t *)a1[8].i64[0];
    v9 = (unint64_t *)a1[8].i64[1];
  }
  else
  {
    v100 = 0;
  }
  v14 = 0xEEEEEEEEEEEEEEEFLL * v10;
  if (v8 == v9 || *(v9 - 15) < v14)
    goto LABEL_19;
  v15 = 0xEEEEEEEEEEEEEEEFLL * (v9 - v8);
  do
  {
    v16 = v15 >> 1;
    v17 = &v8[15 * (v15 >> 1)];
    v19 = *v17;
    v18 = v17 + 15;
    v15 += ~(v15 >> 1);
    if (v19 < v14)
      v8 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v8 == v9 || (v9 = v8, *v8 != v14))
  {
LABEL_19:
    if (a5)
    {
      v21 = (unint64_t *)&a5->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_OWORD *)&v102[8] = *(_OWORD *)v107;
    *(_OWORD *)&v102[24] = *(_OWORD *)&v107[16];
    *(_QWORD *)v102 = v14;
    *(_QWORD *)&v106 = a4;
    *((_QWORD *)&v106 + 1) = a5;
    if (a5)
    {
      v23 = (unint64_t *)&a5->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = &a1[5].i8[8];
    v27 = a1[5].i64[1];
    if (!v27)
      goto LABEL_49;
    v28 = &a1[5].i8[8];
    v29 = a1[5].i64[1];
    do
    {
      v30 = *(_DWORD *)(v29 + 32);
      v31 = v30 >= a3;
      if (v30 >= a3)
        v32 = (uint64_t *)v29;
      else
        v32 = (uint64_t *)(v29 + 8);
      if (v31)
        v28 = (__int8 *)v29;
      v29 = *v32;
    }
    while (*v32);
    if (v28 == v26 || *((_DWORD *)v28 + 8) > a3)
      goto LABEL_49;
    *(_QWORD *)&v102[40] = v28 + 40;
    ++*((_DWORD *)v28 + 24);
    v33 = &a1[5].i8[8];
    do
    {
      v34 = *(_DWORD *)(v27 + 32);
      v35 = v34 >= HIDWORD(a3);
      if (v34 >= HIDWORD(a3))
        v36 = (uint64_t *)v27;
      else
        v36 = (uint64_t *)(v27 + 8);
      if (v35)
        v33 = (__int8 *)v27;
      v27 = *v36;
    }
    while (*v36);
    if (v33 != v26
      && *((_DWORD *)v33 + 8) <= HIDWORD(a3)
      && ((v103 = v33 + 40, ++*((_DWORD *)v33 + 24), v28[44]) || v33[44]))
    {
      v43 = (unint64_t *)a1[8].i64[1];
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (v43 == v9 || *v9 != v14)
      {
        v45 = a1[9].u64[0];
        v46 = a1[8].i64[0];
        v47 = (uint64_t)v9 - v46;
        v48 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v9 - v46) >> 3);
        v98 = (unint64_t *)v46;
        if ((unint64_t)v43 >= v45)
        {
          v64 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v43 - v46) >> 3) + 1;
          if (v64 > 0x222222222222222)
            sub_2394189F8();
          v65 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v45 - v46) >> 3);
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x111111111111111)
            v66 = 0x222222222222222;
          else
            v66 = v64;
          if (v66)
          {
            if (v66 > 0x222222222222222)
              sub_239418A80();
            v67 = (char *)operator new(120 * v66);
          }
          else
          {
            v67 = 0;
          }
          v73 = &v67[120 * v48];
          v110 = &v67[120 * v66];
          if (v48 == v66)
          {
            if (v47 < 1)
            {
              if (v9 == v98)
                v75 = 1;
              else
                v75 = 2 * v48;
              if (v75 > 0x222222222222222)
                sub_239418A80();
              v76 = (char *)operator new(120 * v75);
              v73 = &v76[120 * (v75 >> 2)];
              v110 = &v76[120 * v75];
              if (v67)
                operator delete(v67);
            }
            else
            {
              v74 = v48 + 2;
              if (v48 >= -1)
                v74 = v48 + 1;
              v73 -= 120 * (v74 >> 1);
            }
          }
          *(_OWORD *)(v73 + 40) = *(_OWORD *)&v102[32];
          *(_OWORD *)(v73 + 24) = *(_OWORD *)&v102[16];
          *(_QWORD *)v73 = v14;
          *((_QWORD *)v73 + 7) = v103;
          *(_OWORD *)(v73 + 8) = *(_OWORD *)v102;
          *((_OWORD *)v73 + 4) = v104;
          *((_QWORD *)v73 + 10) = v105;
          *((_QWORD *)v73 + 11) = 0xBFF0000000000000;
          *((_OWORD *)v73 + 6) = v106;
          v101 = 0uLL;
          v73[112] = 0;
          v77 = (uint64_t)(v73 + 120);
          v108 = v73 + 120;
          v78 = (unint64_t *)a1[8].i64[0];
          if (v78 != v9)
          {
            v79 = 0;
            do
            {
              v80 = &v73[v79 * 8];
              v81 = (char *)&v9[v79];
              *((_QWORD *)v80 - 15) = v9[v79 - 15];
              v82 = *(_OWORD *)&v9[v79 - 14];
              v83 = *(_OWORD *)&v9[v79 - 12];
              v84 = *(_OWORD *)&v9[v79 - 10];
              *((_QWORD *)v80 - 8) = v9[v79 - 8];
              *((_OWORD *)v80 - 6) = v83;
              *((_OWORD *)v80 - 5) = v84;
              *((_OWORD *)v80 - 7) = v82;
              v85 = *(_OWORD *)&v9[v79 - 7];
              *((_QWORD *)v80 - 5) = v9[v79 - 5];
              *(_OWORD *)(v80 - 56) = v85;
              *((_QWORD *)v80 - 4) = v9[v79 - 4];
              *(_OWORD *)(v80 - 24) = *(_OWORD *)&v9[v79 - 3];
              *((_QWORD *)v81 - 3) = 0;
              *((_QWORD *)v81 - 2) = 0;
              *(v80 - 8) = v9[v79 - 1];
              v79 -= 15;
            }
            while (&v9[v79] != v78);
            v73 += v79 * 8;
            v77 = (uint64_t)v108;
          }
          v86 = (unint64_t *)a1[8].i64[1];
          if (v86 != v9)
          {
            do
            {
              *(_QWORD *)v77 = *v9;
              v87 = *(_OWORD *)(v9 + 1);
              v88 = *(_OWORD *)(v9 + 3);
              v89 = *(_OWORD *)(v9 + 5);
              *(_QWORD *)(v77 + 56) = v9[7];
              *(_OWORD *)(v77 + 40) = v89;
              *(_OWORD *)(v77 + 24) = v88;
              *(_OWORD *)(v77 + 8) = v87;
              v90 = *((_OWORD *)v9 + 4);
              *(_QWORD *)(v77 + 80) = v9[10];
              *(_OWORD *)(v77 + 64) = v90;
              *(_QWORD *)(v77 + 88) = v9[11];
              *(_OWORD *)(v77 + 96) = *((_OWORD *)v9 + 6);
              v9[12] = 0;
              v9[13] = 0;
              *(_BYTE *)(v77 + 112) = *((_BYTE *)v9 + 112);
              v77 += 120;
              v9 += 15;
            }
            while (v9 != v86);
            v9 = (unint64_t *)a1[8].i64[1];
          }
          v91 = (unint64_t *)a1[8].i64[0];
          a1[8].i64[0] = (uint64_t)v73;
          a1[8].i64[1] = v77;
          a1[9].i64[0] = (uint64_t)v110;
          if (v9 != v91)
          {
            do
            {
              v109 = v9 - 15;
              v92 = (std::__shared_weak_count *)*(v9 - 2);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v9 = v109;
            }
            while (v109 != v91);
            v9 = v91;
          }
          if (v9)
            operator delete(v9);
        }
        else if (v9 == v43)
        {
          *v43 = v14;
          v72 = v46 + 8 * (((uint64_t)v9 - v46) >> 3);
          *(_QWORD *)(v72 + 56) = v103;
          *(_OWORD *)(v72 + 40) = *(_OWORD *)&v102[32];
          *(_OWORD *)(v72 + 24) = *(_OWORD *)&v102[16];
          *(_OWORD *)(v72 + 8) = *(_OWORD *)v102;
          *(_QWORD *)(v72 + 80) = v105;
          *(_OWORD *)(v72 + 64) = v104;
          *(_QWORD *)(v72 + 88) = 0xBFF0000000000000;
          *(_OWORD *)(v72 + 96) = v106;
          v101 = 0uLL;
          *(_BYTE *)(v72 + 112) = 0;
          a1[8].i64[1] = (uint64_t)(v43 + 15);
        }
        else
        {
          v97 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v9 - v46) >> 3);
          v101 = 0uLL;
          v49 = v43 - 15;
          v50 = a1[8].i64[1];
          if ((unint64_t)v43 >= 0x78)
          {
            v51 = v43 - 15;
            v50 = a1[8].i64[1];
            do
            {
              *(_QWORD *)v50 = *v51;
              v52 = *(_OWORD *)(v51 + 1);
              v53 = *(_OWORD *)(v51 + 3);
              v54 = *(_OWORD *)(v51 + 5);
              *(_QWORD *)(v50 + 56) = v51[7];
              *(_OWORD *)(v50 + 40) = v54;
              *(_OWORD *)(v50 + 24) = v53;
              *(_OWORD *)(v50 + 8) = v52;
              v55 = *((_OWORD *)v51 + 4);
              *(_QWORD *)(v50 + 80) = v51[10];
              *(_OWORD *)(v50 + 64) = v55;
              *(_QWORD *)(v50 + 88) = v51[11];
              *(_OWORD *)(v50 + 96) = *((_OWORD *)v51 + 6);
              v51[12] = 0;
              v51[13] = 0;
              *(_BYTE *)(v50 + 112) = *((_BYTE *)v51 + 112);
              v50 += 120;
              v51 += 15;
            }
            while (v51 < v43);
          }
          a1[8].i64[1] = v50;
          if (v43 != v9 + 15)
          {
            v56 = v43 - 15;
            v57 = v43;
            do
            {
              v58 = *(v56 - 15);
              v56 -= 15;
              *(v57 - 15) = v58;
              v57 -= 15;
              *(_OWORD *)(v57 + 1) = *(_OWORD *)(v56 + 1);
              v57[3] = v56[3];
              v57[4] = v56[4];
              v57[5] = v56[5];
              v57[6] = v56[6];
              v57[7] = v56[7];
              v59 = *((_OWORD *)v56 + 4);
              v57[10] = v56[10];
              *((_OWORD *)v57 + 4) = v59;
              v57[11] = v56[11];
              v60 = *((_OWORD *)v56 + 6);
              v56[12] = 0;
              v56[13] = 0;
              v61 = (std::__shared_weak_count *)v57[13];
              *((_OWORD *)v57 + 6) = v60;
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              *((_BYTE *)v43 - 8) = *((_BYTE *)v49 - 8);
              v43 = v57;
              v49 = v56;
            }
            while (v56 != v9);
          }
          *v9 = v14;
          v68 = &v98[15 * v97];
          *(_OWORD *)(v68 + 1) = *(_OWORD *)v102;
          *(_OWORD *)(v68 + 3) = *(_OWORD *)&v102[16];
          *(_OWORD *)(v68 + 5) = *(_OWORD *)&v102[32];
          v68[7] = (unint64_t)v103;
          *((_OWORD *)v68 + 4) = v104;
          v68[10] = v105;
          v68[11] = 0xBFF0000000000000;
          v69 = (std::__shared_weak_count *)v68[13];
          *((_OWORD *)v68 + 6) = v106;
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          LOBYTE(v98[15 * v97 + 14]) = 0;
        }
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      }
      if (v44)
      {
        v95 = (unint64_t *)&v44->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      a1[12].i8[2] = 0;
      a1[12].i8[0] = 0;
      a1[11] = vaddq_s64(a1[11], (int64x2_t)xmmword_239F0C400);
      v20 = 1;
    }
    else
    {
LABEL_49:
      v20 = 0;
      if (*((_QWORD *)&v106 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 16))(*((_QWORD *)&v106 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v106 + 1));
        }
      }
    }
    v5 = v100;
    if (!v100)
    {
LABEL_58:
      if (!v20)
        goto LABEL_60;
      goto LABEL_59;
    }
  }
  else
  {
    v20 = 0;
    if (!a5)
      goto LABEL_58;
  }
  v39 = (unint64_t *)&v5->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
    goto LABEL_58;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v20)
LABEL_59:
    a1[21].i32[2] = 0;
LABEL_60:
  if (a5)
  {
    v41 = (unint64_t *)&a5->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
}

void sub_239C33708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_239C31C48(v39 - 160);
  sub_239C31B98((uint64_t)&a24);
  sub_239C31BF0((uint64_t)&a39);
  sub_239A4D7C0((uint64_t)&a22);
  sub_239A4D7C0((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_239C33744(uint64_t a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  void **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;

  v8 = *(_QWORD *)a2;
  v9 = *(char **)(a1 + 80);
  v11 = *(char **)(a1 + 88);
  v10 = (void **)(a1 + 80);
  if (v9 == v11)
  {
    v11 = *(char **)(a1 + 80);
  }
  else if (*((_QWORD *)v11 - 20) >= v8)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v9) >> 5);
    do
    {
      v13 = v12 >> 1;
      v14 = (unint64_t *)&v9[160 * (v12 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 20);
      v12 += ~(v12 >> 1);
      if (v16 < v8)
        v9 = v15;
      else
        v12 = v13;
    }
    while (v12);
    if (v9 != v11)
    {
      v11 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = a2[3];
  v67 = a2[2];
  v68 = v20;
  v21 = *((_QWORD *)a2 + 8);
  v22 = a2[1];
  v65 = *a2;
  v66 = v22;
  v69 = v21;
  v70 = 0uLL;
  v73 = 0xBFF0000000000000;
  v74 = a4;
  v75 = a5;
  if (a5)
  {
    v23 = (unint64_t *)&a5->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v76 = 0;
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  else
  {
    v76 = 0;
  }
  v26 = a1 + 16;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
    goto LABEL_55;
  v28 = *a3;
  v29 = a1 + 16;
  v30 = *(_QWORD *)(a1 + 16);
  do
  {
    v31 = *(_DWORD *)(v30 + 32);
    v32 = v31 >= v28;
    if (v31 >= v28)
      v33 = (uint64_t *)v30;
    else
      v33 = (uint64_t *)(v30 + 8);
    if (v32)
      v29 = v30;
    v30 = *v33;
  }
  while (*v33);
  if (v29 == v26 || *(_DWORD *)(v29 + 32) > v28)
    goto LABEL_55;
  *((_QWORD *)&v69 + 1) = v29 + 40;
  ++*(_DWORD *)(v29 + 96);
  v34 = a3[1];
  v35 = a1 + 16;
  do
  {
    v36 = *(_DWORD *)(v27 + 32);
    v37 = v36 >= v34;
    if (v36 >= v34)
      v38 = (uint64_t *)v27;
    else
      v38 = (uint64_t *)(v27 + 8);
    if (v37)
      v35 = v27;
    v27 = *v38;
  }
  while (*v38);
  if (v35 == v26)
    goto LABEL_55;
  if (*(_DWORD *)(v35 + 32) > v34)
    goto LABEL_55;
  *(_QWORD *)&v70 = v35 + 40;
  ++*(_DWORD *)(v35 + 96);
  v39 = *(_QWORD *)(a1 + 40);
  if (!v39)
    goto LABEL_55;
  v40 = a3[2];
  v41 = a1 + 40;
  do
  {
    v42 = *(_DWORD *)(v39 + 32);
    v43 = v42 >= v40;
    if (v42 >= v40)
      v44 = (uint64_t *)v39;
    else
      v44 = (uint64_t *)(v39 + 8);
    if (v43)
      v41 = v39;
    v39 = *v44;
  }
  while (*v44);
  if (v41 == a1 + 40
    || *(_DWORD *)(v41 + 32) > v40
    || (*((_QWORD *)&v70 + 1) = v41 + 40, ++*(_DWORD *)(v41 + 80), !*(_BYTE *)(v29 + 44))
    && !*(_BYTE *)(v35 + 44)
    && !*(_BYTE *)(v41 + 44))
  {
LABEL_55:
    v17 = 0;
    v45 = v75;
    if (!v75)
      return v17;
    goto LABEL_56;
  }
  v55 = v67;
  v56 = v68;
  v57 = v69;
  v58 = v70;
  v53 = v65;
  v52 = v8;
  v54 = v66;
  v59 = v71;
  v60 = v72;
  v61 = v73;
  v49 = v75;
  v62 = v74;
  v63 = v75;
  v74 = 0;
  v75 = 0;
  v64 = v76;
  if (*(char **)(a1 + 88) == v11 || *(_QWORD *)v11 != v8)
  {
    sub_239C3CDD0(v10, v11, (uint64_t *)&v52);
    v49 = v63;
  }
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_BYTE *)(a1 + 122) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), (int64x2_t)xmmword_239F0C400);
  v17 = 1;
  v45 = v75;
  if (v75)
  {
LABEL_56:
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  return v17;
}

void sub_239C33AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_239C31AB4((uint64_t)&a9);
  sub_239C30548((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_239C33AF4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = &unk_250AFBD48;
  free(*(void **)(a1 + 840));
  *(_QWORD *)(a1 + 688) = off_250AFBF70;
  v2 = *(_QWORD **)(a1 + 816);
  if (v2 == (_QWORD *)(a1 + 792))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 792);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 760);
  if (v4)
  {
    *(_QWORD *)(a1 + 768) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 752);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  free(*(void **)(a1 + 720));
  free(*(void **)(a1 + 696));
  sub_239C1AB94((_QWORD *)(a1 + 456));
  *(_QWORD *)a1 = &unk_250AFBDF8;
  v6 = *(void **)(a1 + 424);
  if (v6)
  {
    *(_QWORD *)(a1 + 432) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 416);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  free(*(void **)(a1 + 384));
  *(_QWORD *)a1 = &unk_250AFBEA8;
  sub_239C33C44(a1 + 72);
  return a1;
}

uint64_t sub_239C33BEC(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFBBD8;
  free(*(void **)(a1 + 968));
  free(*(void **)(a1 + 944));
  *(_QWORD *)a1 = off_250AFBC90;
  free(*(void **)(a1 + 896));
  free(*(void **)(a1 + 872));
  return sub_239C33AF4(a1);
}

uint64_t sub_239C33C44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_250AFBF10;
  v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 152);
  if (v6)
  {
    *(_QWORD *)(a1 + 160) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 128);
  if (v7)
  {
    *(_QWORD *)(a1 + 136) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(void **)(a1 + 80);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 16);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 160;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v8;
    operator delete(v10);
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(void **)(a1 + 56);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 16);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 120;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v14;
    operator delete(v16);
  }
  sub_239A61F08(*(_QWORD **)(a1 + 40));
  sub_239A61F08(*(_QWORD **)(a1 + 16));
  return a1;
}

void sub_239C33DCC(uint64_t a1)
{
  sub_239C33C44(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_239C33DF0()
{
  return 0.0;
}

_QWORD *sub_239C33DF8(_QWORD *result)
{
  _QWORD *v1;
  double v2;
  double *v3;
  _QWORD *v11;
  _QWORD *v12;
  double *v13;
  double *v14;

  v1 = (_QWORD *)result[10];
  v2 = 0.0;
  if (v1 != result + 11)
  {
    do
    {
      if ((*((_BYTE *)v1 + 92) & 2) == 0 && *((_BYTE *)v1 + 44))
      {
        _Q2 = *(_OWORD *)(v1 + 7);
        _D4 = v1[8];
        __asm { FMLA            D3, D4, V2.D[1] }
        v2 = v2 + _D3 + *((double *)v1 + 9) * *((double *)v1 + 9);
      }
      v11 = (_QWORD *)v1[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v1[2];
          _ZF = *v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!_ZF);
      }
      v1 = v12;
    }
    while (v12 != result + 11);
  }
  v3 = (double *)result[13];
  if (v3 != (double *)(result + 14))
  {
    do
    {
      if ((*((_BYTE *)v3 + 76) & 2) == 0 && *((_BYTE *)v3 + 44))
        v2 = v2 + v3[7] * v3[7];
      v13 = (double *)*((_QWORD *)v3 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(double **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (double *)*((_QWORD *)v3 + 2);
          _ZF = *(_QWORD *)v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!_ZF);
      }
      v3 = v14;
    }
    while (v14 != (double *)(result + 14));
  }
  return result;
}

double sub_239C33EF0(uint64_t a1, double a2, double a3, float64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  float64_t *v13;
  float64x2_t v14;
  double v15;

  v4 = *(_QWORD *)(a1 + 416);
  v5 = *(unsigned int *)(v4 + 8);
  if (!(_DWORD)v5)
    return 0.0;
  v6 = 0;
  v7 = *(_QWORD *)(v4 + 88);
  result = 0.0;
  do
  {
    v9 = *(unsigned int **)(v7 + 24 * v6);
    v10 = *(unsigned int **)(v7 + 24 * v6 + 8);
    if (v10 != v9)
    {
      while (1)
      {
        v11 = *v9;
        if (v6 <= v11)
          break;
        v9 += 4;
        if (v9 == v10)
          goto LABEL_3;
      }
      if (v9 != v10 && v6 == v11)
      {
        v12 = *(_QWORD *)(v4 + 16);
        if (v12)
        {
          v13 = (float64_t *)(v12 + 8 * *((_QWORD *)v9 + 1));
          v14.f64[0] = *v13;
          a4.f64[0] = v13[8];
          v14.f64[1] = v13[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v15 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v14), a4));
          if (result < v15)
            result = v15;
        }
      }
    }
LABEL_3:
    ++v6;
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_239C33FB4(uint64_t a1)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _QWORD *v23;
  __int128 v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  _DWORD *v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  float64x2_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  unsigned int *v49;
  unsigned int *v50;
  int v51;
  int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const double *v75;
  uint64_t v76;
  float64x2_t v77;
  uint64_t v81;
  float64x2_t v84;
  float64x2_t v85;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  char v98;
  int v99;
  int v100;
  float64x2_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const double *v110;
  uint64_t v111;
  float64x2_t v112;
  uint64_t v113;
  float64x2_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int32 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int64x2_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int64x2_t *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  unint64_t v156;
  float64_t *v157;
  unint64_t v158;
  float64_t *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __int128 *v166;
  _OWORD *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  size_t v172;
  _BYTE *v173;
  uint64_t v174;
  _OWORD *v175;
  uint64_t v176;
  int64_t v177;
  uint64_t v178;
  int64x2_t *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _OWORD *v186;
  __int128 *v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  const double *v191;
  uint64_t v192;
  float64x2_t v193;
  float64x2_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float64x2_t v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  char v213;
  int v214;
  int v215;
  float64x2_t v219;
  float64x2_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const double *v228;
  uint64_t v229;
  float64x2_t v230;
  uint64_t v231;
  float64x2_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const double *v240;
  uint64_t v241;
  float64x2_t v242;
  uint64_t v243;
  float64x2_t v244;
  uint64_t v250;
  uint64_t v251;
  double v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned __int32 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int64x2_t *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  int64x2_t *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _BYTE *v284;
  uint64_t v285;
  unint64_t v286;
  float64_t *v287;
  unint64_t v288;
  float64_t *v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  __int128 *v296;
  _OWORD *v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  char *v301;
  size_t v302;
  _BYTE *v303;
  uint64_t v304;
  _OWORD *v305;
  uint64_t v306;
  int64_t v307;
  uint64_t v308;
  int64x2_t *v309;
  char *v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _OWORD *v316;
  __int128 *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  const double *v321;
  uint64_t v322;
  float64x2_t v323;
  float64x2_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  float64x2_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  int v339;
  char v340;
  int v341;
  int v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v350;
  float64x2_t *v351;
  uint64_t v352;
  float64x2_t v353;
  float64x2_t v355;
  const double *v357;
  uint64_t v358;
  float64x2_t v359;
  float64x2_t v361;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v383;
  unint64_t *v384;
  uint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  const double *v389;
  float64x2_t v391;
  float64x2_t v393;
  float64x2_t v396;
  unint64_t *v397;
  uint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  float64x2_t v402;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v410;
  float64x2_t v413;
  float64x2_t v414;
  unint64_t *v415;
  uint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  float64x2_t v420;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v428;
  float64x2_t v431;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  unint64_t *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  uint64_t v440;
  float64x2_t v442;
  float64x2_t v448;
  uint64_t v450;
  float64x2_t v451;
  uint64_t v452;
  float64x2_t v453;
  uint64_t v454;
  double v456;
  float64x2_t v457;
  const double *v460;
  uint64_t v461;
  double v463;
  float64x2_t v464;
  float64x2_t v465;
  uint64_t v466;
  double v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  int v478;
  char v479;
  int v480;
  int v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v489;
  float64x2_t *v490;
  uint64_t v491;
  float64x2_t v492;
  float64x2_t v494;
  const double *v496;
  uint64_t v497;
  float64x2_t v498;
  float64x2_t v500;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  int v508;
  int v509;
  unsigned int v510;
  unsigned int v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v519;
  unint64_t *v520;
  uint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  float64x2_t v526;
  float64x2_t v528;
  float64x2_t v531;
  unint64_t *v532;
  uint64_t v533;
  char *v534;
  char *v535;
  uint64_t v536;
  float64x2_t v537;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v545;
  float64x2_t v548;
  float64x2_t v549;
  unint64_t *v550;
  uint64_t v551;
  char *v552;
  char *v553;
  uint64_t v554;
  float64x2_t *v555;
  float64x2_t v556;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v564;
  float64x2_t v567;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  unint64_t *v573;
  uint64_t v574;
  char *v575;
  char *v576;
  uint64_t v577;
  float64x2_t v579;
  float64x2_t v585;
  float64x2_t v587;
  uint64_t v588;
  double v590;
  uint64_t v593;
  double v595;
  float64x2_t v596;
  std::bad_alloc *exception;
  std::bad_alloc *v599;
  float64x2_t v600;
  float64x2_t v601;
  double *v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t v611;
  int32x2_t v612;
  int32x2_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  float64x2_t v622;
  uint64_t v623;
  uint64_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  uint64_t v629;
  float64x2_t v630;
  uint64_t v631;
  float64x2_t v632;
  _QWORD *v633;
  _QWORD *v634;
  uint64_t v635;
  int8x16_t v636;
  uint64_t v637;
  float64x2_t v638;
  unsigned int *v639;
  unsigned int *v640;
  double v641;
  int8x16_t v642;
  float64x2_t v643;
  float64x2_t v644;
  double v645;
  void *v646[2];
  unsigned int v647;
  void *v648[2];
  int32x2_t v649;
  int32x2_t v650;
  void *__p;
  void *v652;
  uint64_t v653;
  void *memptr[4];
  __int128 v655;
  float64x2_t v656[2];
  __int128 v657;
  __int128 v658;
  __int128 v659;
  float64x2_t v660;
  float64x2_t v661[2];
  float64x2_t v662;
  double *v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  std::mutex v667;
  int64x2_t v668;
  double v669;
  int64x2_t v670;
  double v671;
  float64x2_t v672;
  double v673;
  int64x2_t v674;
  double v675;
  int64x2_t v676;
  double v677;
  float64x2_t v678;
  double v679;
  uint64_t v680;
  float64x2x3_t v681;
  float64x2x3_t v682;
  float64x2x3_t v683;
  float64x2x3_t v684;
  float64x2x3_t v685;
  float64x2x3_t v686;
  float64x2x3_t v687;
  float64x2x3_t v688;
  float64x2x3_t v689;
  float64x2x3_t v690;
  float64x2x3_t v691;
  float64x2x3_t v692;

  v680 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_239C37B1C(a1))
  {
    v11 = 1;
    goto LABEL_499;
  }
  if (*(_BYTE *)(a1 + 345))
  {
    v11 = 0;
    goto LABEL_499;
  }
  v12 = *(_QWORD *)(a1 + 416);
  v13 = *(void **)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24) - (_QWORD)v13;
  if (v14 >= 1)
    bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
  v15 = *(unsigned int *)(a1 + 400);
  if ((_DWORD)v15)
    bzero(*(void **)(a1 + 384), 8 * v15);
  v16 = *(_DWORD *)(a1 + 376);
  if (v16 == 1)
  {
    v17 = *(unsigned int *)(a1 + 856);
    if ((_DWORD)v17)
      bzero(*(void **)(a1 + 840), 8 * v17);
  }
  v604 = a1;
  if (((*(_QWORD *)(a1 + 768) - *(_QWORD *)(a1 + 760)) & 0x3FFFFFFFCLL) != 0)
  {
    kdebug_trace();
    sub_239C1F378(a1 + 384, a1 + 720);
    v18 = *(_QWORD *)(a1 + 768) - *(_QWORD *)(a1 + 760);
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (8 * ((v18 >> 1) + (v18 >> 2)) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v19 = (char *)memptr[0];
    if (!memptr[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v599 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v599, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v20 = *(_DWORD **)(a1 + 760);
    v21 = *(_DWORD **)(a1 + 768);
    if (v20 == v21)
    {
      v29 = *(_QWORD *)(a1 + 760);
    }
    else
    {
      v22 = 0;
      v23 = *(_QWORD **)(a1 + 80);
      do
      {
        if (*((_DWORD *)v23 + 8) == *v20)
        {
          v26 = v23;
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v23[1];
            if (v27)
            {
              do
              {
                v26 = v27;
                v27 = (_QWORD *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v26 = (_QWORD *)v23[2];
                _ZF = *v26 == (_QWORD)v23;
                v23 = v26;
              }
              while (!_ZF);
            }
            v23 = v26;
          }
          while (*((_DWORD *)v26 + 8) != *v20);
        }
        v24 = *(_OWORD *)(v26 + 7);
        v25 = &v19[8 * v22];
        *((_QWORD *)v25 + 2) = v26[9];
        *(_OWORD *)v25 = v24;
        v22 += 3;
        ++v20;
        v23 = v26;
      }
      while (v20 != v21);
      v29 = *(_QWORD *)(a1 + 768);
      v20 = *(_DWORD **)(a1 + 760);
    }
    if (((v29 - (_QWORD)v20) & 0x3FFFFFFFCLL) != 0)
    {
      v648[1] = 0;
      v649 = 0;
      v648[0] = 0;
      v30 = *(_DWORD **)(a1 + 752);
      v31 = v30[2];
      v32 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v30 + 48))(v30);
      v33 = *(_DWORD **)(v604 + 752);
      v34 = v33[3];
      v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v33 + 56))(v33);
      v649 = (int32x2_t)(v32 * v31);
      v649.i32[1] = v35 * v34;
      sub_23945215C((uint64_t)v648, (v35 * v34) * (unint64_t)(v32 * v31));
      if (v649.i32[1] * v649.i32[0])
        bzero(v648[0], 8 * (v649.i32[1] * v649.i32[0]));
      (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v604 + 752) + 64))(*(_QWORD *)(v604 + 752), v648, 0);
      sub_239C1BE20((uint64_t *)v648);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v604 + 688) + 32))(v604 + 688);
      v646[0] = 0;
      v646[1] = 0;
      v647 = *(_DWORD *)(v604 + 712);
      sub_23945215C((uint64_t)v646, v647);
      if (v647)
        bzero(v646[0], 8 * v647);
      v39 = *(_DWORD **)(v604 + 760);
      v40 = *(_DWORD **)(v604 + 768);
      if (v39 != v40)
      {
        v41 = 0;
        v42 = *(_QWORD *)(v604 + 696);
        v43 = *(_QWORD **)(v36 + 8);
        do
        {
          if (*((_DWORD *)v43 + 8) == *v39)
          {
            v47 = v43;
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v43[1];
              if (v48)
              {
                do
                {
                  v47 = v48;
                  v48 = (_QWORD *)*v48;
                }
                while (v48);
              }
              else
              {
                do
                {
                  v47 = (_QWORD *)v43[2];
                  _ZF = *v47 == (_QWORD)v43;
                  v43 = v47;
                }
                while (!_ZF);
              }
              v43 = v47;
            }
            while (*((_DWORD *)v47 + 8) != *v39);
          }
          v44 = 8 * v41;
          v37.f64[0] = *(float64_t *)(v42 + v44 + 16);
          v38.f64[0] = (float64_t)v47[9];
          v37 = vsubq_f64(v38, v37);
          v45 = vsubq_f64(*(float64x2_t *)(v47 + 7), *(float64x2_t *)(v42 + v44));
          v46 = (char *)v646[0] + v44;
          *(float64x2_t *)v46 = v45;
          *((_QWORD *)v46 + 2) = *(_QWORD *)&v37.f64[0];
          v41 += 3;
          ++v39;
          v43 = v47;
        }
        while (v39 != v40);
        v49 = *(unsigned int **)(v604 + 760);
        v50 = *(unsigned int **)(v604 + 768);
        if (v49 != v50)
        {
          v51 = 0;
          v52 = 0;
          v53 = *(unsigned int **)(v604 + 424);
          do
          {
            if (*v53 < *v49)
            {
              do
              {
                v54 = v53[1];
                ++v53;
                ++v51;
              }
              while (v54 < *v49);
            }
            v55 = *(_DWORD *)(v604 + 748) + 3 * v52;
            v650 = vrev64_s32(v649);
            __p = (char *)v648[0] + 8 * v55;
            LODWORD(v652) = v55;
            v56 = *(_QWORD *)(v604 + 384) + 8 * (*(_DWORD *)(v604 + 412) + 3 * v51);
            v57 = *(float64x2_t *)v56;
            v663 = *(double **)(v56 + 16);
            v662 = v57;
            memptr[0] = &v662;
            v668.i64[1] = (uint64_t)&v650;
            v669 = COERCE_DOUBLE(v646);
            v670.i64[0] = 0x3FF0000000000000;
            sub_239C25740((uint64_t)&memptr[1], (uint64_t)&v668);
            v58.f64[0] = *((float64_t *)memptr[0] + 2);
            *(void **)&v59.f64[0] = memptr[3];
            *(float64x2_t *)v56 = vsubq_f64(*(float64x2_t *)memptr[0], *(float64x2_t *)&memptr[1]);
            *(_QWORD *)(v56 + 16) = *(_OWORD *)&vsubq_f64(v58, v59);
            ++v49;
            ++v52;
          }
          while (v49 != v50);
        }
      }
      free(v646[0]);
      free(v648[0]);
      a1 = v604;
    }
    free(v19);
    kdebug_trace();
    v16 = *(_DWORD *)(a1 + 376);
  }
  v60 = *(double *)(a1 + 368);
  v61 = *(double *)(a1 + 448);
  v605 = *(unsigned __int8 *)(a1 + 360);
  memset(v661, 0, sizeof(v661));
  v659 = 0u;
  v660 = 0u;
  v657 = 0u;
  v658 = 0u;
  memset(v656, 0, sizeof(v656));
  v655 = 0u;
  memset(memptr, 0, sizeof(memptr));
  v650 = *(int32x2_t *)(a1 + 464);
  __p = 0;
  v62 = *(_QWORD *)(*(_QWORD *)&v650 + 48) - *(_QWORD *)(*(_QWORD *)&v650 + 40);
  v652 = 0;
  v653 = 0;
  if ((v62 >> 2))
    sub_239AF450C(&__p, (v62 >> 2));
  v602 = (double *)(a1 + 8);
  v63 = *(void **)(a1 + 504);
  v64 = *(_QWORD *)(a1 + 512) - (_QWORD)v63;
  if (v64 >= 1)
    bzero(v63, 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
  v65 = (float64x2_t *)(a1 + 456);
  if (v16 == 1)
  {
    v607 = *(_QWORD *)(a1 + 472);
    v609 = (_QWORD *)(a1 + 640);
    v197 = *(_QWORD *)(a1 + 560);
    v600 = *v65;
    v603 = *(_QWORD *)(a1 + 568);
    if (v197 != v603)
    {
      v198 = *v65;
      v199 = 0uLL;
      while (1)
      {
        *(_QWORD *)(v197 + 16) = 0;
        memptr[0] = 0;
        v662.f64[0] = v600.f64[1];
        v200 = *(_QWORD *)(v197 + 32);
        if (v200)
        {
          v201 = *(_QWORD *)(*(_QWORD *)&v600.f64[0] + 80);
          v202 = *(_QWORD *)(v197 + 24);
          v203 = **(_QWORD **)(v197 + 48);
          v204 = (uint64_t *)(v203 + 8 * (v200 + v202));
          v205 = (uint64_t *)(v203 + 8 * v202);
          do
          {
            v206 = *v205;
            v207 = (_QWORD *)(v201 + 160 * *v205);
            v209 = v207[10];
            v208 = v207[11];
            v210 = v207[12];
            if (((*(unsigned __int8 *)(v208 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v209 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v210 + 36)) >> 7)
            {
              v211 = *(unsigned __int8 *)(v209 + 4);
              if (!*(_BYTE *)(v209 + 4) || *(_DWORD *)(v209 + 48) != -1)
              {
                v212 = *(unsigned __int8 *)(v208 + 4);
                if (!*(_BYTE *)(v208 + 4) || *(_DWORD *)(v208 + 48) != -1)
                {
                  v213 = *(_BYTE *)(v210 + 4);
                  if (!v213 || *(_DWORD *)(v210 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v209 + 4);
                    if (v211)
                      v214 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v209 + 48));
                    else
                      v214 = -1;
                    v668.i32[1] = v214;
                    v668.i8[8] = v212;
                    if (v212)
                      v215 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v208 + 48));
                    else
                      v215 = -1;
                    v668.i32[3] = v215;
                    LOBYTE(v669) = v213;
                    HIDWORD(v669) = -1;
                    sub_239C3A984((uint64_t)(v207 + 1), (double *)(v604 + 40), (uint64_t)&memptr[1], v198.f64[0], v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v220 = (float64x2_t *)(v201 + 160 * v206 + 104);
                    if (v211)
                    {
                      v221 = *(_QWORD *)(v197 + 24);
                      v223 = *(_QWORD *)(v197 + 40);
                      v222 = *(_QWORD *)(v197 + 48);
                      v224 = *(_QWORD *)(v222 + 56);
                      v225 = v224 + 16 * v221;
                      if (v223)
                      {
                        v226 = v224 + 16 * (v223 + v221);
                        v227 = 16 * v223;
                        while (*(_DWORD *)v225 != v214)
                        {
                          v225 += 16;
                          v227 -= 16;
                          if (!v227)
                          {
                            v225 = v226;
                            break;
                          }
                        }
                      }
                      v228 = (const double *)&memptr[1];
                      v685 = vld3q_f64(v228);
                      v229 = *(_QWORD *)(v222 + 24) + 8 * *(_QWORD *)(v225 + 8);
                      _Q4.f64[0] = *(float64_t *)(v229 + 16);
                      _Q5.f64[1] = v656[1].f64[0];
                      v230 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v685.val[0], v661[0].f64[1]), v685.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v685.val[2], v661[1].f64[1]);
                      v685.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *(float64x2_t *)((char *)v661 + 8));
                      v685.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v685.val[0].f64[0] = v685.val[0].f64[0] + v656[1].f64[1] * v661[1].f64[1];
                      *(float64x2_t *)v229 = vaddq_f64(*(float64x2_t *)v229, v230);
                      *(_QWORD *)(v229 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v685.val[0]);
                      v686 = vld3q_f64(v228);
                      v231 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v214);
                      _Q4.f64[0] = *(float64_t *)(v231 + 16);
                      _Q5.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v219.f64[0] = *(float64_t *)(v201 + 160 * v206 + 120);
                      v232 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v686.val[0], v220->f64[0]), v686.val[1], *v220, 1), v686.val[2], v219.f64[0]);
                      v686.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v220);
                      v686.val[1].f64[0] = *(float64_t *)(v201 + 160 * v206 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v686.val[0].f64[0] = v686.val[0].f64[0] + v656[1].f64[1] * v219.f64[0];
                      *(float64x2_t *)v231 = vsubq_f64(*(float64x2_t *)v231, v232);
                      *(_QWORD *)(v231 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v686.val[0]);
                    }
                    if (v212)
                    {
                      v233 = *(_QWORD *)(v197 + 24);
                      v235 = *(_QWORD *)(v197 + 40);
                      v234 = *(_QWORD *)(v197 + 48);
                      v236 = *(_QWORD *)(v234 + 56);
                      v237 = v236 + 16 * v233;
                      if (v235)
                      {
                        v238 = v236 + 16 * (v235 + v233);
                        v239 = 16 * v235;
                        while (*(_DWORD *)v237 != v215)
                        {
                          v237 += 16;
                          v239 -= 16;
                          if (!v239)
                          {
                            v237 = v238;
                            break;
                          }
                        }
                      }
                      v240 = (const double *)&v657;
                      v687 = vld3q_f64(v240);
                      v241 = *(_QWORD *)(v234 + 24) + 8 * *(_QWORD *)(v237 + 8);
                      _Q4.f64[0] = *(float64_t *)(v241 + 16);
                      _Q5.f64[1] = v660.f64[1];
                      v242 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v687.val[0], v661[0].f64[1]), v687.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v687.val[2], v661[1].f64[1]);
                      v687.val[0] = vmulq_f64(v660, *(float64x2_t *)((char *)v661 + 8));
                      v687.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v687.val[0].f64[0] = v687.val[0].f64[0] + v661[0].f64[0] * v661[1].f64[1];
                      *(float64x2_t *)v241 = vaddq_f64(*(float64x2_t *)v241, v242);
                      *(_QWORD *)(v241 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v687.val[0]);
                      v688 = vld3q_f64(v240);
                      v243 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v215);
                      _Q4.f64[0] = *(float64_t *)(v243 + 16);
                      _Q5.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v219.f64[0] = *(float64_t *)(v201 + 160 * v206 + 120);
                      v244 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v688.val[0], v220->f64[0]), v688.val[1], *v220, 1), v688.val[2], v219.f64[0]);
                      v688.val[0] = vmulq_f64(v660, *v220);
                      v688.val[1].f64[0] = *(float64_t *)(v201 + 160 * v206 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v688.val[0].f64[0] = v688.val[0].f64[0] + v661[0].f64[0] * v219.f64[0];
                      *(float64x2_t *)v243 = vsubq_f64(*(float64x2_t *)v243, v244);
                      *(_QWORD *)(v243 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v688.val[0]);
                    }
                    _Q0.f64[1] = v661[1].f64[0];
                    _Q2 = *v220;
                    _Q2.f64[0] = *(float64_t *)(v201 + 160 * v206 + 112);
                    __asm { FMLA            D3, D2, V0.D[1] }
                    *(void **)&_Q2.f64[0] = memptr[0];
                    *(double *)(v197 + 16) = *(double *)(v197 + 16)
                                           - (_D3
                                            + v661[1].f64[1] * *(double *)(v201 + 160 * v206 + 120));
                    _V1.D[1] = v661[1].f64[0];
                    _Q4.f64[0] = v661[1].f64[0];
                    __asm { FMLA            D3, D4, V1.D[1] }
                    _Q0.f64[0] = _Q2.f64[0] + _D3 + v661[1].f64[1] * v661[1].f64[1];
                    memptr[0] = *(void **)&_Q0.f64[0];
                    v198.f64[0] = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], _Q0, v661[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v219);
                    v199 = 0uLL;
                    if (v211)
                    {
                      v250 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v214);
                      v2.f64[0] = *(float64_t *)(v250 + 16);
                      v3.f64[0] = *(double *)&memptr[1] * *(double *)&memptr[1]
                                + *(double *)&memptr[2] * *(double *)&memptr[2]
                                + *(double *)&memptr[3] * *(double *)&memptr[3];
                      v4.f64[0] = *(double *)&v655 * *(double *)&v655
                                + *((double *)&v655 + 1) * *((double *)&v655 + 1)
                                + v656[0].f64[0] * v656[0].f64[0];
                      v6.f64[0] = v656[1].f64[0] * v656[1].f64[0];
                      v7.f64[0] = v656[1].f64[1] * v656[1].f64[1];
                      v5.f64[0] = v656[0].f64[1] * v656[0].f64[1]
                                + v656[1].f64[0] * v656[1].f64[0]
                                + v656[1].f64[1] * v656[1].f64[1];
                      v3.f64[1] = v4.f64[0];
                      v2 = vaddq_f64(v2, v5);
                      v198 = vaddq_f64(*(float64x2_t *)v250, v3);
                      *(float64x2_t *)v250 = v198;
                      *(float64_t *)(v250 + 16) = v2.f64[0];
                    }
                    if (v212)
                    {
                      v251 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v215);
                      v2.f64[0] = *(float64_t *)(v251 + 16);
                      v3.f64[0] = *(double *)&v657 * *(double *)&v657
                                + *((double *)&v657 + 1) * *((double *)&v657 + 1)
                                + *(double *)&v658 * *(double *)&v658;
                      v4.f64[0] = *((double *)&v658 + 1) * *((double *)&v658 + 1)
                                + *(double *)&v659 * *(double *)&v659
                                + *((double *)&v659 + 1) * *((double *)&v659 + 1);
                      v6.f64[0] = v660.f64[1] * v660.f64[1];
                      v7.f64[0] = v661[0].f64[0] * v661[0].f64[0];
                      v5.f64[0] = v660.f64[0] * v660.f64[0]
                                + v660.f64[1] * v660.f64[1]
                                + v661[0].f64[0] * v661[0].f64[0];
                      v3.f64[1] = v4.f64[0];
                      *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vaddq_f64(v2, v5);
                      v198 = vaddq_f64(*(float64x2_t *)v251, v3);
                      *(float64x2_t *)v251 = v198;
                      *(float64_t *)(v251 + 16) = v2.f64[0];
                    }
                  }
                }
              }
            }
            ++v205;
          }
          while (v205 != v204);
        }
        if (*(_BYTE *)(*(_QWORD *)v197 + 4))
        {
          if (v605)
          {
            v252 = *(double *)memptr + *(double *)memptr * v60;
            *(double *)memptr = v252;
          }
          else
          {
            v252 = *(double *)memptr;
          }
          v2.f64[0] = fabs(v252);
          v198.f64[0] = 1.0 / v252;
          if (v2.f64[0] < v61)
            v198.f64[0] = 0.0;
          *(float64_t *)(v197 + 8) = v198.f64[0];
          v253 = *(_QWORD *)(v197 + 40);
          if (v253)
            break;
        }
LABEL_184:
        v197 += 56;
        if (v197 == v603)
          goto LABEL_310;
      }
      v613 = v650;
      v254 = *(_QWORD *)(v197 + 24);
      v255 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 56);
      v610 = v255 + 16 * (v253 + v254);
      v256 = v255 + 16 * v254;
      v624 = v197;
      while (1)
      {
        v257 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 24) + 8 * *(_QWORD *)(v256 + 8);
        v198.f64[0] = *(float64_t *)(v257 + 16);
        v2 = *(float64x2_t *)v257;
        v3.f64[0] = *(float64_t *)(v197 + 8);
        v4.f64[0] = *(float64_t *)(v197 + 16);
        v5 = vmulq_n_f64(*(float64x2_t *)v257, v3.f64[0]);
        v258 = **(_QWORD **)&v613 + 8 * (*(_DWORD *)(*(_QWORD *)&v613 + 28) + 3 * *(_DWORD *)v256);
        v2.f64[0] = *(float64_t *)(v258 + 16);
        v644 = vmulq_f64(v198, v3);
        *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vmlsq_f64(v2, v4, v644);
        v3 = v5;
        v198 = vmlsq_lane_f64(*(float64x2_t *)v258, v5, v4.f64[0], 0);
        *(float64x2_t *)v258 = v198;
        *(float64_t *)(v258 + 16) = v2.f64[0];
        v615 = v256;
        v259 = *(_DWORD *)v256;
        v260 = *(_QWORD *)(v197 + 24);
        v261 = *(_QWORD *)(v197 + 40);
        v262 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 56);
        v263 = (unsigned int *)(v262 + 16 * v260);
        if (v261)
        {
          v264 = 16 * v261;
          while (*v263 < v259)
          {
            v263 += 4;
            v264 -= 16;
            if (!v264)
              goto LABEL_227;
          }
        }
        v640 = (unsigned int *)(v262 + 16 * (v261 + v260));
        if (v263 != v640)
          break;
LABEL_227:
        v256 = v615 + 16;
        if (v615 + 16 == v610)
          goto LABEL_184;
      }
      v198 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
      v265 = *(_QWORD **)(*(_QWORD *)&v613 + 32);
      v634 = v265 + 2;
      v3.f64[1] = v198.f64[0];
      v628 = v3;
      while (1)
      {
        v268 = v265[11] + 24 * *v263;
        v269 = *(char **)v268;
        v270 = *(char **)(v268 + 8);
        if (*(char **)v268 != v270)
        {
          while (*(_DWORD *)v269 < v259)
          {
            v269 += 16;
            if (v269 == v270)
              goto LABEL_244;
          }
        }
        if (v269 == v270)
          goto LABEL_244;
        if (*(_DWORD *)v269 != v259)
          break;
        v266 = *v634 + 8 * *((_QWORD *)v269 + 1);
LABEL_236:
        v267 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 24) + 8 * *((_QWORD *)v263 + 1);
        v198.f64[0] = *(float64_t *)(v266 + 16);
        v3.f64[0] = *(float64_t *)(v266 + 40);
        v5.f64[0] = *(float64_t *)(v266 + 64);
        v7.f64[0] = *(float64_t *)(v267 + 16);
        v8 = *(float64x2_t *)v267;
        v9.f64[0] = v644.f64[0] * *(double *)v267;
        v10.f64[0] = vmuld_lane_f64(v644.f64[0], *(float64x2_t *)v267, 1);
        v198 = vsubq_f64(v198, v9);
        v9.f64[1] = v628.f64[1];
        v2 = vmlsq_lane_f64(*(float64x2_t *)v266, v628, *(double *)v267, 0);
        v3 = vsubq_f64(v3, v10);
        v4 = vmlsq_laneq_f64(*(float64x2_t *)(v266 + 24), v628, *(float64x2_t *)v267, 1);
        v5 = vmlsq_f64(v5, v7, v644);
        v6 = vmlsq_lane_f64(*(float64x2_t *)(v266 + 48), v628, v7.f64[0], 0);
        *(float64x2_t *)v266 = v2;
        *(float64_t *)(v266 + 16) = v198.f64[0];
        *(float64x2_t *)(v266 + 24) = v4;
        *(float64_t *)(v266 + 40) = v3.f64[0];
        *(float64x2_t *)(v266 + 48) = v6;
        *(float64_t *)(v266 + 64) = v5.f64[0];
        v263 += 4;
        if (v263 == v640)
          goto LABEL_227;
      }
      v270 = v269;
LABEL_244:
      v271 = v265[10];
      if (v271)
      {
        v273 = v265[6];
        v272 = v265[7];
        v274 = ((v272 - v273) << 6) - 1;
        v275 = v265[9];
        if (v272 == v273)
          v274 = 0;
        v266 = v265[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v273 + (((unint64_t)(v275 + v271 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v275 + v271 - 1) & 0x1FF));
        v265[10] = v271 - 1;
        if ((unint64_t)(v274 - (v271 + v275) + 1) >= 0x400)
        {
          operator delete(*(void **)(v272 - 8));
          v265[7] -= 8;
        }
        goto LABEL_309;
      }
      v668.i64[0] = 0;
      v277 = v265[2];
      v276 = (int64x2_t *)v265[3];
      v278 = (unint64_t)v276 - v277;
      v279 = (uint64_t)((uint64_t)v276->i64 - v277) >> 3;
      v280 = (int64x2_t *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8));
      v281 = v265[4];
      if ((unint64_t)(v281 - (_QWORD)v276) < 0x48)
      {
        v282 = v279 + 9;
        if ((unint64_t)(v279 + 9) >> 61)
          sub_2394189F8();
        v283 = v281 - v277;
        if (v283 >> 2 > v282)
          v282 = v283 >> 2;
        if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8)
          v282 = 0x1FFFFFFFFFFFFFFFLL;
        v620 = v282;
        if (v282)
        {
          if (v282 >> 61)
            sub_239418A80();
          v284 = operator new(8 * v282);
          v199 = 0uLL;
        }
        else
        {
          v284 = 0;
        }
        v290 = &v284[8 * v279];
        *((_QWORD *)v290 + 8) = 0;
        *((_OWORD *)v290 + 2) = v199;
        *((_OWORD *)v290 + 3) = v199;
        *(_OWORD *)v290 = v199;
        *((_OWORD *)v290 + 1) = v199;
        v617 = v268;
        if ((int64x2_t *)v277 == v276)
        {
          v292 = &v284[8 * v279];
        }
        else
        {
          if (v278 - 8 >= 0x68)
          {
            v293 = (uint64_t)((uint64_t)v276->i64 - v277) >> 3;
            v291 = (char *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8));
            v292 = &v284[8 * v279];
            if (v277 + (v278 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v284[v278 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v294 = ((v278 - 8) >> 3) + 1;
              v291 = &v280->i8[-8 * (v294 & 0x3FFFFFFFFFFFFFFCLL)];
              v295 = 8 * v293;
              v296 = (__int128 *)(v277 + 8 * v293 - 16);
              v297 = &v284[v295 - 16];
              v298 = v294 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v299 = *v296;
                *(v297 - 1) = *(v296 - 1);
                *v297 = v299;
                v296 -= 2;
                v297 -= 2;
                v298 -= 4;
              }
              while (v298);
              v292 = &v290[-8 * (v294 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v294 == (v294 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_272;
            }
          }
          else
          {
            v291 = (char *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8));
            v292 = &v284[8 * v279];
          }
          do
          {
            v300 = *((_QWORD *)v291 - 1);
            v291 -= 8;
            *((_QWORD *)v292 - 1) = v300;
            v292 -= 8;
          }
          while (v291 != (char *)v277);
        }
LABEL_272:
        v301 = v290 + 72;
        v302 = (char *)v276 - (char *)v280;
        if (v302)
        {
          v303 = v284;
          memmove(v290 + 72, v280, v302);
          v284 = v303;
        }
        v268 = v617;
        v265[2] = v292;
        v265[3] = &v301[v302];
        v265[4] = &v284[8 * v620];
        if (v277)
          operator delete((void *)v277);
        goto LABEL_308;
      }
      v621 = (uint64_t)((uint64_t)v276->i64 - v277) >> 3;
      v285 = (char *)v276 - (char *)v280;
      if ((unint64_t)((char *)v276 - (char *)v280) > 0x47)
      {
        v287 = (float64_t *)v265[3];
        v286 = 9;
        goto LABEL_285;
      }
      v286 = v285 >> 3;
      v287 = (float64_t *)&v276->i64[9 - (v285 >> 3)];
      v288 = 64 - (v285 & 0xFFFFFFFFFFFFFFF8);
      if (v288 >= 0x68)
      {
        if (v276 >= (int64x2_t *)&v668.u64[1] || &v668 >= (int64x2_t *)((char *)&v276->u64[1] + v288))
        {
          v304 = (v288 >> 3) + 1;
          v305 = (_OWORD *)v265[3];
          v306 = v304 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            *v305 = v199;
            v305[1] = v199;
            v305 += 2;
            v306 -= 4;
          }
          while (v306);
          if (v304 == (v304 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_284:
            v265[3] = v287;
            if (v276 == v280)
              goto LABEL_308;
LABEL_285:
            v307 = (char *)v287 - (char *)&v280[4].u64[1];
            v308 = v307 >> 3;
            v309 = (int64x2_t *)(v287 - 9);
            v310 = (char *)v287;
            if (v287 - 9 < (float64_t *)v276)
            {
              v311 = (v278 & 0xFFFFFFFFFFFFFFF8) + v307;
              v312 = v277 + v311 + 8;
              if ((unint64_t)v276 > v312)
                v312 = (unint64_t)v276;
              v313 = v312 + ~v277 - v311;
              if (v313 > 0x57)
              {
                v314 = (v313 >> 3) + 1;
                v315 = v314 & 0x3FFFFFFFFFFFFFFCLL;
                v309 = (int64x2_t *)((char *)v309 + v315 * 8);
                v316 = v287 + 2;
                v317 = (__int128 *)(v277 + 8 * v308 + 8 * v621 + 16);
                v318 = v314 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v319 = *v317;
                  *(v316 - 1) = *(v317 - 1);
                  *v316 = v319;
                  v316 += 2;
                  v317 += 2;
                  v318 -= 4;
                }
                while (v318);
                v310 = (char *)&v287[v315];
                if (v314 == (v314 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_294;
              }
              else
              {
                v310 = (char *)v287;
              }
              do
              {
                v320 = v309->i64[0];
                v309 = (int64x2_t *)((char *)v309 + 8);
                *(_QWORD *)v310 = v320;
                v310 += 8;
              }
              while (v309 < v276);
            }
LABEL_294:
            v265[3] = v310;
            if (v287 != (float64_t *)&v280[4].u64[1])
              memmove(&v287[-v308], (const void *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8)), v307);
            v321 = (const double *)&v668;
            if (v280 <= &v668)
            {
              v322 = 9;
              if (v265[3] <= (unint64_t)&v668)
                v322 = 0;
              v321 = (const double *)&v668.i64[v322];
            }
            if (v286 >= 0xA
              && (v280 >= (int64x2_t *)(v321 + 1)
               || (unint64_t)v321 >= v277 + (v278 & 0xFFFFFFFFFFFFFFF8) + 8 * v286))
            {
              v280 = (int64x2_t *)((char *)v280 + 8 * (v286 & 0xFFFFFFFFFFFFFFFCLL));
              v323 = vld1q_dup_f64(v321);
              v324 = (float64x2_t *)(v277 + 8 * v621 + 16);
              v325 = v286 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v324[-1] = v323;
                *v324 = v323;
                v324 += 2;
                v325 -= 4;
              }
              while (v325);
              if (v286 == (v286 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_308;
              v286 &= 3u;
            }
            do
            {
              *(double *)v280->i64 = *v321;
              v280 = (int64x2_t *)((char *)v280 + 8);
              --v286;
            }
            while (v286);
LABEL_308:
            v266 = v265[3] - 72;
            v197 = v624;
LABEL_309:
            v326 = (v266 - *v634) >> 3;
            v668.i32[0] = v259;
            v668.i64[1] = v326;
            sub_239C22598((char **)v268, v270, &v668);
            v199 = 0uLL;
            goto LABEL_236;
          }
          v289 = (float64_t *)&v276->i64[v304 & 0x3FFFFFFFFFFFFFFCLL];
        }
        else
        {
          v289 = (float64_t *)v265[3];
        }
      }
      else
      {
        v289 = (float64_t *)v265[3];
      }
      do
        *v289++ = *(float64_t *)v668.i64;
      while (v289 != v287);
      goto LABEL_284;
    }
LABEL_310:
    v327 = *(_QWORD *)(v604 + 584);
    v629 = *(_QWORD *)(v604 + 592);
    if (v327 != v629)
    {
      v328.f64[0] = v600.f64[0];
      do
      {
        *(_QWORD *)(v327 + 16) = 0;
        v662.f64[0] = v600.f64[1];
        v635 = v327;
        v329 = *(_QWORD *)(v327 + 32);
        if (v329)
        {
          v330 = *(_QWORD *)(*(_QWORD *)&v600.f64[0] + 80);
          v331 = (uint64_t *)(**(_QWORD **)(v327 + 48) + 8 * *(_QWORD *)(v327 + 24));
          v332 = 8 * v329;
          do
          {
            v333 = *v331;
            v334 = (_QWORD *)(v330 + 160 * *v331);
            v336 = v334[10];
            v335 = v334[11];
            v337 = v334[12];
            if (((*(unsigned __int8 *)(v335 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v336 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v337 + 36)) >> 7)
            {
              v338 = *(unsigned __int8 *)(v336 + 4);
              if (!*(_BYTE *)(v336 + 4) || *(_DWORD *)(v336 + 48) != -1)
              {
                v339 = *(unsigned __int8 *)(v335 + 4);
                if (!*(_BYTE *)(v335 + 4) || *(_DWORD *)(v335 + 48) != -1)
                {
                  v340 = *(_BYTE *)(v337 + 4);
                  if (!v340 || *(_DWORD *)(v337 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v336 + 4);
                    if (v338)
                      v341 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v336 + 48));
                    else
                      v341 = -1;
                    v668.i32[1] = v341;
                    v668.i8[8] = v339;
                    if (v339)
                      v342 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v335 + 48));
                    else
                      v342 = -1;
                    v668.i32[3] = v342;
                    LOBYTE(v669) = v340;
                    HIDWORD(v669) = -1;
                    sub_239C3A984((uint64_t)(v334 + 1), (double *)(v604 + 40), (uint64_t)&memptr[1], v328.f64[0], v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v351 = (float64x2_t *)(v330 + 160 * v333 + 104);
                    if (v338)
                    {
                      *(float64x2x3_t *)(&v345 - 2) = vld3q_f64((const double *)&memptr[1]);
                      v352 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v341);
                      v346 = *(float64x2_t *)v352;
                      v347.f64[0] = *(float64_t *)(v352 + 16);
                      v348.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v350.f64[0] = *(float64_t *)(v330 + 160 * v333 + 120);
                      v355 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v353, v351->f64[0]), _Q1, *v351, 1), v345, v350.f64[0]);
                      _Q0 = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v351);
                      _Q1.f64[0] = *(float64_t *)(v330 + 160 * v333 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v656[1].f64[1] * v350.f64[0];
                      v343 = vsubq_f64(v347, _Q0);
                      v344 = vsubq_f64(*(float64x2_t *)v352, v355);
                      *(float64x2_t *)v352 = v344;
                      *(float64_t *)(v352 + 16) = v343.f64[0];
                    }
                    if (v339)
                    {
                      v357 = (const double *)&v657;
                      *(float64x2x3_t *)(&v345 - 2) = vld3q_f64(v357);
                      v358 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v342);
                      v346 = *(float64x2_t *)v358;
                      v347.f64[0] = *(float64_t *)(v358 + 16);
                      v348.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v350.f64[0] = *(float64_t *)(v330 + 160 * v333 + 120);
                      v361 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v359, v351->f64[0]), _Q1, *v351, 1), v345, v350.f64[0]);
                      _Q0 = vmulq_f64(v660, *v351);
                      _Q1.f64[0] = *(float64_t *)(v330 + 160 * v333 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v661[0].f64[0] * v350.f64[0];
                      v343 = vsubq_f64(v347, _Q0);
                      v344 = vsubq_f64(*(float64x2_t *)v358, v361);
                      *(float64x2_t *)v358 = v344;
                      *(float64_t *)(v358 + 16) = v343.f64[0];
                    }
                    v328.f64[0] = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], v343, v344.f64[0], v345, v346.f64[0], v347, v348, _Q6, v350);
                    if (v338)
                    {
                      v363 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v341);
                      v2.f64[0] = *(float64_t *)(v363 + 16);
                      v3.f64[0] = *(double *)&memptr[1] * *(double *)&memptr[1]
                                + *(double *)&memptr[2] * *(double *)&memptr[2]
                                + *(double *)&memptr[3] * *(double *)&memptr[3];
                      v4.f64[0] = *(double *)&v655 * *(double *)&v655
                                + *((double *)&v655 + 1) * *((double *)&v655 + 1)
                                + v656[0].f64[0] * v656[0].f64[0];
                      v6.f64[0] = v656[1].f64[0] * v656[1].f64[0];
                      v7.f64[0] = v656[1].f64[1] * v656[1].f64[1];
                      v5.f64[0] = v656[0].f64[1] * v656[0].f64[1]
                                + v656[1].f64[0] * v656[1].f64[0]
                                + v656[1].f64[1] * v656[1].f64[1];
                      v3.f64[1] = v4.f64[0];
                      v2 = vaddq_f64(v2, v5);
                      v328 = vaddq_f64(*(float64x2_t *)v363, v3);
                      *(float64x2_t *)v363 = v328;
                      *(float64_t *)(v363 + 16) = v2.f64[0];
                    }
                    if (v339)
                    {
                      v364 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v342);
                      v2.f64[0] = *(float64_t *)(v364 + 16);
                      v3.f64[0] = *(double *)&v657 * *(double *)&v657
                                + *((double *)&v657 + 1) * *((double *)&v657 + 1)
                                + *(double *)&v658 * *(double *)&v658;
                      v4.f64[0] = *((double *)&v658 + 1) * *((double *)&v658 + 1)
                                + *(double *)&v659 * *(double *)&v659
                                + *((double *)&v659 + 1) * *((double *)&v659 + 1);
                      v6.f64[0] = v660.f64[1] * v660.f64[1];
                      v7.f64[0] = v661[0].f64[0] * v661[0].f64[0];
                      v5.f64[0] = v660.f64[0] * v660.f64[0]
                                + v660.f64[1] * v660.f64[1]
                                + v661[0].f64[0] * v661[0].f64[0];
                      v3.f64[1] = v4.f64[0];
                      *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vaddq_f64(v2, v5);
                      v328 = vaddq_f64(*(float64x2_t *)v364, v3);
                      *(float64x2_t *)v364 = v328;
                      *(float64_t *)(v364 + 16) = v2.f64[0];
                    }
                  }
                }
              }
            }
            ++v331;
            v332 -= 8;
          }
          while (v332);
        }
        v327 = v635 + 56;
      }
      while (v635 + 56 != v629);
    }
    v365 = *(_QWORD *)(v604 + 464);
    v366 = *(_QWORD *)(v604 + 472);
    v662.f64[0] = *(float64_t *)(v604 + 456);
    *(_QWORD *)&v662.f64[1] = v609;
    v663 = v602;
    v664 = v365;
    v665 = v366;
    v666 = 2;
    memset(v667.__m_.__opaque, 0, sizeof(v667.__m_.__opaque));
    v667.__m_.__sig = 850045863;
    v367 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 56);
    v368 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 64);
    if (v367 == v368)
    {
LABEL_495:
      std::mutex::~mutex(&v667);
      a1 = v604;
      goto LABEL_496;
    }
    while (1)
    {
      v370 = *(_QWORD *)(v367 + 48);
      v369 = *(_QWORD *)(v367 + 56);
      v371 = ((*(unsigned __int8 *)(v369 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v370 + 52)) >> 7 ? 2 : 1;
      if ((v371 & v666) != 0)
      {
        v372 = *(unsigned __int8 *)(v370 + 4);
        if (!*(_BYTE *)(v370 + 4) || *(_DWORD *)(v370 + 48) != -1)
        {
          v373 = *(unsigned __int8 *)(v369 + 4);
          if (!*(_BYTE *)(v369 + 4) || *(_DWORD *)(v369 + 48) != -1)
            break;
        }
      }
LABEL_339:
      v367 += 120;
      if (v367 == v368)
        goto LABEL_495;
    }
    if (*(_BYTE *)(v370 + 4))
    {
      v374 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v370 + 48));
      if (*(_BYTE *)(v369 + 4))
      {
LABEL_350:
        v375 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v369 + 48));
        goto LABEL_353;
      }
    }
    else
    {
      v374 = -1;
      if (*(_BYTE *)(v369 + 4))
        goto LABEL_350;
    }
    v375 = -1;
LABEL_353:
    sub_239C39E28(v367 + 8, v602, (uint64_t)&v668);
    if (!v373)
      goto LABEL_376;
    if (!v372 || v374 < v375)
    {
LABEL_366:
      v397 = *(unint64_t **)(v365 + 32);
      v398 = v397[11] + 24 * v375;
      v400 = *(char **)v398;
      v399 = *(char **)(v398 + 8);
      if (*(char **)v398 != v399)
      {
        while (*(_DWORD *)v400 < v375)
        {
          v400 += 16;
          if (v400 == v399)
            goto LABEL_374;
        }
      }
      if (v400 != v399)
      {
        if (*(_DWORD *)v400 == v375)
        {
          v401 = v397[2] + 8 * *((_QWORD *)v400 + 1);
LABEL_375:
          v377.f64[0] = *(float64_t *)(v401 + 16);
          v379.f64[0] = *(float64_t *)(v401 + 40);
          v376.f64[0] = *(float64_t *)(v401 + 64);
          *(_QWORD *)&v402.f64[1] = v674.i64[1];
          _V19.D[1] = v678.f64[1];
          _Q20 = (float64x2_t)vzip1q_s64(v674, v676);
          _Q22 = (float64x2_t)vzip2q_s64(v674, v676);
          v406.f64[0] = v675;
          v406.f64[1] = v677;
          v407 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v674.i64), _Q22, (float64x2_t)v674, 1), v406, v675);
          _D6 = *(double *)&v674.i64[1];
          __asm { FMLA            D24, D6, V19.D[1] }
          v402.f64[0] = _D24 + v679 * v675;
          v410 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v676.i64), _Q22, (float64x2_t)v676, 1), v406, v677);
          _D17 = *(double *)&v676.i64[1];
          __asm { FMLA            D24, D17, V19.D[1] }
          v381.f64[0] = _D24 + v679 * v677;
          v413 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v678.f64[0]), _Q22, v678, 1), v406, v679);
          _Q22.f64[0] = v678.f64[1];
          __asm { FMLA            D20, D22, V19.D[1] }
          _Q18.f64[0] = _Q20.f64[0] + v679 * v679;
          v377 = vaddq_f64(v377, v402);
          v380 = vaddq_f64(*(float64x2_t *)(v401 + 24), v410);
          v379 = vaddq_f64(v379, v381);
          v414 = vaddq_f64(*(float64x2_t *)(v401 + 48), v413);
          *(float64x2_t *)v401 = vaddq_f64(*(float64x2_t *)v401, v407);
          *(float64_t *)(v401 + 16) = v377.f64[0];
          *(float64x2_t *)(v401 + 24) = v380;
          *(float64_t *)(v401 + 40) = v379.f64[0];
          v376 = vaddq_f64(v376, _Q18);
          *(float64x2_t *)(v401 + 48) = v414;
          *(float64_t *)(v401 + 64) = v376.f64[0];
LABEL_376:
          if (!v372)
          {
LABEL_399:
            if (v373)
            {
              v452 = *(_QWORD *)v366 + 8 * (*(_DWORD *)(v366 + 28) + 3 * v375);
              v377.f64[0] = *(float64_t *)(v452 + 16);
              v453.f64[0] = *(double *)v674.i64 * *(double *)v674.i64
                          + *(double *)&v674.i64[1] * *(double *)&v674.i64[1]
                          + v675 * v675;
              v380.f64[0] = v678.f64[0] * v678.f64[0] + v678.f64[1] * v678.f64[1] + v679 * v679;
              v453.f64[1] = *(double *)v676.i64 * *(double *)v676.i64
                          + *(double *)&v676.i64[1] * *(double *)&v676.i64[1]
                          + v677 * v677;
              v377 = vaddq_f64(v377, v380);
              *(float64x2_t *)v452 = vaddq_f64(*(float64x2_t *)v452, v453);
              *(float64_t *)(v452 + 16) = v377.f64[0];
            }
            if (v372)
            {
              v454 = *(_QWORD *)v365 + 8 * (*(_DWORD *)(v365 + 28) + 3 * v374);
              v377.f64[0] = *(float64_t *)(v454 + 16);
              v380.f64[0] = v669;
              _V6.D[1] = v672.f64[1];
              v456 = *(double *)(v367 + 80);
              v457 = *(float64x2_t *)(v367 + 64);
              v380.f64[1] = v671;
              _Q2 = vmulq_f64(v672, v457);
              _D3 = *(_QWORD *)(v367 + 72);
              __asm { FMLA            D2, D3, V6.D[1] }
              _Q2.f64[0] = _Q2.f64[0] + v673 * v456;
              *(float64x2_t *)v454 = vsubq_f64(*(float64x2_t *)v454, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v668, v670), v457.f64[0]), (float64x2_t)vzip2q_s64(v668, v670), v457, 1), v380, v456));
              *(_QWORD *)(v454 + 16) = *(_OWORD *)&vsubq_f64(v377, _Q2);
            }
            if (v373)
            {
              v460 = (const double *)&v674;
              v689 = vld3q_f64(v460);
              v461 = *(_QWORD *)v365 + 8 * (*(_DWORD *)(v365 + 28) + 3 * v375);
              v380.f64[0] = *(float64_t *)(v461 + 16);
              _V6.D[1] = v678.f64[1];
              v463 = *(double *)(v367 + 80);
              v464 = *(float64x2_t *)(v367 + 64);
              v465 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v689.val[0], v464.f64[0]), v689.val[1], v464, 1), v689.val[2], v463);
              v689.val[0] = vmulq_f64(v678, v464);
              v689.val[1].f64[0] = *(float64_t *)(v367 + 72);
              __asm { FMLA            D0, D1, V6.D[1] }
              v689.val[0].f64[0] = v689.val[0].f64[0] + v679 * v463;
              *(float64x2_t *)v461 = vsubq_f64(*(float64x2_t *)v461, v465);
              *(_QWORD *)(v461 + 16) = *(_OWORD *)&vsubq_f64(v380, v689.val[0]);
            }
            goto LABEL_339;
          }
          v415 = *(unint64_t **)(v365 + 32);
          v416 = v415[11] + 24 * v374;
          v418 = *(char **)v416;
          v417 = *(char **)(v416 + 8);
          if (*(char **)v416 != v417)
          {
            while (*(_DWORD *)v418 < v374)
            {
              v418 += 16;
              if (v418 == v417)
                goto LABEL_385;
            }
          }
          if (v418 != v417)
          {
            if (*(_DWORD *)v418 == v374)
            {
              v419 = v415[2] + 8 * *((_QWORD *)v418 + 1);
LABEL_386:
              v377.f64[0] = *(float64_t *)(v419 + 16);
              v379.f64[0] = *(float64_t *)(v419 + 40);
              v376.f64[0] = *(float64_t *)(v419 + 64);
              *(_QWORD *)&v420.f64[1] = v668.i64[1];
              _Q22 = v672;
              _Q20 = (float64x2_t)vzip1q_s64(v668, v670);
              v423 = (float64x2_t)vzip2q_s64(v668, v670);
              v424.f64[0] = v669;
              v424.f64[1] = v671;
              v425 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v668.i64), v423, (float64x2_t)v668, 1), v424, v669);
              _D6 = *(double *)&v668.i64[1];
              __asm { FMLA            D19, D6, V22.D[1] }
              v420.f64[0] = _D19 + v673 * v669;
              v428 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v670.i64), v423, (float64x2_t)v670, 1), v424, v671);
              _D17 = *(double *)&v670.i64[1];
              __asm { FMLA            D19, D17, V22.D[1] }
              v381.f64[0] = _D19 + v673 * v671;
              v625 = v423;
              v630 = _Q20;
              v622 = v424;
              v431 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v672.f64[0]), v423, v672, 1), v424, v673);
              _Q19 = vmulq_f64(_Q22, _Q22);
              _Q20.f64[0] = v672.f64[1];
              v636 = (int8x16_t)v672;
              v641 = v673;
              __asm { FMLA            D19, D20, V22.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + v641 * v641;
              v433 = vaddq_f64(v377, v420);
              v380 = vaddq_f64(*(float64x2_t *)(v419 + 24), v428);
              v434 = vaddq_f64(v379, v381);
              v435 = vaddq_f64(*(float64x2_t *)(v419 + 48), v431);
              *(float64x2_t *)v419 = vaddq_f64(*(float64x2_t *)v419, v425);
              *(float64_t *)(v419 + 16) = v433.f64[0];
              *(float64x2_t *)(v419 + 24) = v380;
              *(float64_t *)(v419 + 40) = v434.f64[0];
              *(float64x2_t *)(v419 + 48) = v435;
              *(_QWORD *)(v419 + 64) = *(_OWORD *)&vaddq_f64(v376, _Q19);
              if (!v373 || v375 < v374)
                goto LABEL_398;
              v436 = *(unint64_t **)(v365 + 32);
              v437 = v436[11] + 24 * v375;
              v439 = *(char **)v437;
              v438 = *(char **)(v437 + 8);
              if (*(char **)v437 != v438)
              {
                while (*(_DWORD *)v439 < v374)
                {
                  v439 += 16;
                  if (v439 == v438)
                    goto LABEL_396;
                }
              }
              if (v439 != v438)
              {
                if (*(_DWORD *)v439 == v374)
                {
                  v440 = v436[2] + 8 * *((_QWORD *)v439 + 1);
LABEL_397:
                  _Q0 = (float64x2_t)vextq_s8(v636, v636, 8uLL);
                  v433.f64[0] = *(float64_t *)(v440 + 16);
                  v434.f64[0] = *(float64_t *)(v440 + 40);
                  v435.f64[0] = *(float64_t *)(v440 + 64);
                  v442 = *(float64x2_t *)(v440 + 48);
                  *(_QWORD *)&_Q7.f64[1] = v674.i64[1];
                  _V18.D[1] = *(double *)&v676.i64[1];
                  _V20.D[1] = v678.f64[1];
                  __asm { FMLA            D22, D0, V7.D[1] }
                  _Q7.f64[0] = _D22 + v641 * v675;
                  __asm { FMLA            D22, D0, V18.D[1] }
                  v431.f64[0] = _D22 + v641 * v677;
                  v448 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v630, v678.f64[0]), v625, v678, 1), v622, v679);
                  __asm { FMLA            D22, D0, V20.D[1] }
                  _Q0.f64[0] = _D22 + v641 * v679;
                  v380 = vaddq_f64(*(float64x2_t *)(v440 + 24), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v630, *(double *)v676.i64), v625, (float64x2_t)v676, 1), v622, v677));
                  *(float64x2_t *)v440 = vaddq_f64(*(float64x2_t *)v440, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v630, *(double *)v674.i64), v625, (float64x2_t)v674, 1), v622, v675));
                  *(_QWORD *)(v440 + 16) = *(_OWORD *)&vaddq_f64(v433, _Q7);
                  *(float64x2_t *)(v440 + 24) = v380;
                  *(_QWORD *)(v440 + 40) = *(_OWORD *)&vaddq_f64(v434, v431);
                  v433 = vaddq_f64(v442, v448);
                  *(float64x2_t *)(v440 + 48) = v433;
                  *(_QWORD *)(v440 + 64) = *(_OWORD *)&vaddq_f64(v435, _Q0);
LABEL_398:
                  v450 = *(_QWORD *)v366 + 8 * (*(_DWORD *)(v366 + 28) + 3 * v374);
                  v433.f64[0] = *(float64_t *)(v450 + 16);
                  v451.f64[0] = *(double *)v668.i64 * *(double *)v668.i64
                              + *(double *)&v668.i64[1] * *(double *)&v668.i64[1]
                              + v669 * v669;
                  v380.f64[0] = v672.f64[0] * v672.f64[0] + v672.f64[1] * v672.f64[1] + v673 * v673;
                  v451.f64[1] = *(double *)v670.i64 * *(double *)v670.i64
                              + *(double *)&v670.i64[1] * *(double *)&v670.i64[1]
                              + v671 * v671;
                  v377 = vaddq_f64(v433, v380);
                  *(float64x2_t *)v450 = vaddq_f64(*(float64x2_t *)v450, v451);
                  *(float64_t *)(v450 + 16) = v377.f64[0];
                  goto LABEL_399;
                }
                v438 = v439;
              }
LABEL_396:
              v440 = sub_239C23138(v436, (char **)v437, v374, v438);
              goto LABEL_397;
            }
            v417 = v418;
          }
LABEL_385:
          v419 = sub_239C23138(v415, (char **)v416, v374, v417);
          goto LABEL_386;
        }
        v399 = v400;
      }
LABEL_374:
      v401 = sub_239C23138(v397, (char **)v398, v375, v399);
      goto LABEL_375;
    }
    v384 = *(unint64_t **)(v365 + 32);
    v385 = v384[11] + 24 * v374;
    v387 = *(char **)v385;
    v386 = *(char **)(v385 + 8);
    if (*(char **)v385 != v386)
    {
      while (*(_DWORD *)v387 < v375)
      {
        v387 += 16;
        if (v387 == v386)
          goto LABEL_364;
      }
    }
    if (v387 != v386)
    {
      if (*(_DWORD *)v387 == v375)
      {
        v388 = v384[2] + 8 * *((_QWORD *)v387 + 1);
LABEL_365:
        v376.f64[0] = *(float64_t *)(v388 + 16);
        v378.f64[0] = *(float64_t *)(v388 + 40);
        v380.f64[0] = *(float64_t *)(v388 + 64);
        v389 = (const double *)&v674;
        v691 = vld3q_f64(v389);
        v381 = *(float64x2_t *)(v388 + 48);
        _V17.D[1] = v678.f64[1];
        *(_QWORD *)&_Q18.f64[1] = v668.i64[1];
        v391 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v691.val[0], *(double *)v668.i64), v691.val[1], (float64x2_t)v668, 1), v691.val[2], v669);
        *(_QWORD *)&_Q18.f64[0] = v668.i64[1];
        __asm { FMLA            D26, D18, V17.D[1] }
        _Q18.f64[0] = _D26 + v679 * v669;
        v393 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v691.val[0], *(double *)v670.i64), v691.val[1], (float64x2_t)v670, 1), v691.val[2], v671);
        _D21 = *(double *)&v670.i64[1];
        __asm { FMLA            D26, D21, V17.D[1] }
        v383.f64[0] = _D26 + v679 * v671;
        v396 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v691.val[0], v672.f64[0]), v691.val[1], v672, 1), v691.val[2], v673);
        v691.val[0] = vmulq_f64(v678, v672);
        v691.val[1].f64[0] = v672.f64[1];
        __asm { FMLA            D5, D6, V17.D[1] }
        v691.val[0].f64[0] = v691.val[0].f64[0] + v679 * v673;
        v377 = vaddq_f64(*(float64x2_t *)v388, v391);
        v379 = vaddq_f64(*(float64x2_t *)(v388 + 24), v393);
        *(float64x2_t *)v388 = v377;
        *(_QWORD *)(v388 + 16) = *(_OWORD *)&vaddq_f64(v376, _Q18);
        v376 = vaddq_f64(v381, v396);
        *(float64x2_t *)(v388 + 24) = v379;
        *(_QWORD *)(v388 + 40) = *(_OWORD *)&vaddq_f64(v378, v383);
        *(float64x2_t *)(v388 + 48) = v376;
        *(_QWORD *)(v388 + 64) = *(_OWORD *)&vaddq_f64(v380, v691.val[0]);
        goto LABEL_366;
      }
      v386 = v387;
    }
LABEL_364:
    v388 = sub_239C23138(v384, (char **)v385, v375, v386);
    goto LABEL_365;
  }
  if (!v16)
  {
    v608 = (_QWORD *)(a1 + 640);
    v66 = *(_QWORD *)(a1 + 560);
    v601 = *v65;
    v606 = *(_QWORD *)(a1 + 568);
    if (v66 != v606)
    {
      v67 = *v65;
      v68 = 0uLL;
      while (1)
      {
        *(_QWORD *)(v66 + 16) = 0;
        memptr[0] = 0;
        v662.f64[0] = v601.f64[1];
        v69 = *(_QWORD *)(v66 + 32);
        if (v69)
        {
          v70 = *(_QWORD *)(*(_QWORD *)&v601.f64[0] + 80);
          v71 = *(_QWORD *)(v66 + 24);
          v72 = **(_QWORD **)(v66 + 48);
          v73 = (uint64_t *)(v72 + 8 * (v69 + v71));
          v74 = (uint64_t *)(v72 + 8 * v71);
          do
          {
            v91 = *v74;
            v92 = (_QWORD *)(v70 + 160 * *v74);
            v94 = v92[10];
            v93 = v92[11];
            v95 = v92[12];
            if (((*(unsigned __int8 *)(v93 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v94 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v95 + 36)) >> 7)
            {
              v96 = *(unsigned __int8 *)(v94 + 4);
              if (!*(_BYTE *)(v94 + 4) || *(_DWORD *)(v94 + 48) != -1)
              {
                v97 = *(unsigned __int8 *)(v93 + 4);
                if (!*(_BYTE *)(v93 + 4) || *(_DWORD *)(v93 + 48) != -1)
                {
                  v98 = *(_BYTE *)(v95 + 4);
                  if (!v98 || *(_DWORD *)(v95 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v94 + 4);
                    if (v96)
                      v99 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v94 + 48));
                    else
                      v99 = -1;
                    v668.i32[1] = v99;
                    v668.i8[8] = v97;
                    if (v97)
                      v100 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v93 + 48));
                    else
                      v100 = -1;
                    v668.i32[3] = v100;
                    LOBYTE(v669) = v98;
                    HIDWORD(v669) = -1;
                    sub_239C3A984((uint64_t)(v92 + 1), (double *)(v604 + 40), (uint64_t)&memptr[1], v67.f64[0], v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v102 = (float64x2_t *)(v70 + 160 * v91 + 104);
                    if (v96)
                    {
                      v103 = *(_QWORD *)(v66 + 24);
                      v105 = *(_QWORD *)(v66 + 40);
                      v104 = *(_QWORD *)(v66 + 48);
                      v106 = *(_QWORD *)(v104 + 56);
                      v107 = v106 + 16 * v103;
                      if (v105)
                      {
                        v108 = v106 + 16 * (v105 + v103);
                        v109 = 16 * v105;
                        while (*(_DWORD *)v107 != v99)
                        {
                          v107 += 16;
                          v109 -= 16;
                          if (!v109)
                          {
                            v107 = v108;
                            break;
                          }
                        }
                      }
                      v110 = (const double *)&memptr[1];
                      v683 = vld3q_f64(v110);
                      v111 = *(_QWORD *)(v104 + 24) + 8 * *(_QWORD *)(v107 + 8);
                      _Q4.f64[0] = *(float64_t *)(v111 + 16);
                      _Q5.f64[1] = v656[1].f64[0];
                      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v683.val[0], v661[0].f64[1]), v683.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v683.val[2], v661[1].f64[1]);
                      v683.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *(float64x2_t *)((char *)v661 + 8));
                      v683.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v683.val[0].f64[0] = v683.val[0].f64[0] + v656[1].f64[1] * v661[1].f64[1];
                      *(float64x2_t *)v111 = vaddq_f64(*(float64x2_t *)v111, v112);
                      *(_QWORD *)(v111 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v683.val[0]);
                      v684 = vld3q_f64(v110);
                      v113 = **(_QWORD **)&v601.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v99);
                      _Q4.f64[0] = *(float64_t *)(v113 + 16);
                      _Q5.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v84.f64[0] = *(float64_t *)(v70 + 160 * v91 + 120);
                      v114 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v684.val[0], v102->f64[0]), v684.val[1], *v102, 1), v684.val[2], v84.f64[0]);
                      v684.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v102);
                      v684.val[1].f64[0] = *(float64_t *)(v70 + 160 * v91 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v684.val[0].f64[0] = v684.val[0].f64[0] + v656[1].f64[1] * v84.f64[0];
                      *(float64x2_t *)v113 = vsubq_f64(*(float64x2_t *)v113, v114);
                      *(_QWORD *)(v113 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v684.val[0]);
                    }
                    if (v97)
                    {
                      v115 = *(_QWORD *)(v66 + 24);
                      v117 = *(_QWORD *)(v66 + 40);
                      v116 = *(_QWORD *)(v66 + 48);
                      v118 = *(_QWORD *)(v116 + 56);
                      v119 = v118 + 16 * v115;
                      if (v117)
                      {
                        v120 = v118 + 16 * (v117 + v115);
                        v121 = 16 * v117;
                        while (*(_DWORD *)v119 != v100)
                        {
                          v119 += 16;
                          v121 -= 16;
                          if (!v121)
                          {
                            v119 = v120;
                            break;
                          }
                        }
                      }
                      v75 = (const double *)&v657;
                      v681 = vld3q_f64(v75);
                      v76 = *(_QWORD *)(v116 + 24) + 8 * *(_QWORD *)(v119 + 8);
                      _Q4.f64[0] = *(float64_t *)(v76 + 16);
                      _Q5.f64[1] = v660.f64[1];
                      v77 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v681.val[0], v661[0].f64[1]), v681.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v681.val[2], v661[1].f64[1]);
                      v681.val[0] = vmulq_f64(v660, *(float64x2_t *)((char *)v661 + 8));
                      v681.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v681.val[0].f64[0] = v681.val[0].f64[0] + v661[0].f64[0] * v661[1].f64[1];
                      *(float64x2_t *)v76 = vaddq_f64(*(float64x2_t *)v76, v77);
                      *(_QWORD *)(v76 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v681.val[0]);
                      v682 = vld3q_f64(v75);
                      v81 = **(_QWORD **)&v601.f64[1]
                          + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v100);
                      _Q4.f64[0] = *(float64_t *)(v81 + 16);
                      _Q5.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v84.f64[0] = *(float64_t *)(v70 + 160 * v91 + 120);
                      v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v682.val[0], v102->f64[0]), v682.val[1], *v102, 1), v682.val[2], v84.f64[0]);
                      v682.val[0] = vmulq_f64(v660, *v102);
                      v682.val[1].f64[0] = *(float64_t *)(v70 + 160 * v91 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v682.val[0].f64[0] = v682.val[0].f64[0] + v661[0].f64[0] * v84.f64[0];
                      *(float64x2_t *)v81 = vsubq_f64(*(float64x2_t *)v81, v85);
                      *(_QWORD *)(v81 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v682.val[0]);
                    }
                    _Q0.f64[1] = v661[1].f64[0];
                    _Q2 = *v102;
                    _Q2.f64[0] = *(float64_t *)(v70 + 160 * v91 + 112);
                    __asm { FMLA            D3, D2, V0.D[1] }
                    *(void **)&_Q2.f64[0] = memptr[0];
                    *(double *)(v66 + 16) = *(double *)(v66 + 16)
                                          - (_D3
                                           + v661[1].f64[1] * *(double *)(v70 + 160 * v91 + 120));
                    _V1.D[1] = v661[1].f64[0];
                    _Q4.f64[0] = v661[1].f64[0];
                    __asm { FMLA            D3, D4, V1.D[1] }
                    _Q0.f64[0] = _Q2.f64[0] + _D3 + v661[1].f64[1] * v661[1].f64[1];
                    memptr[0] = *(void **)&_Q0.f64[0];
                    v67.f64[0] = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], _Q0, v661[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v84);
                    v68 = 0uLL;
                  }
                }
              }
            }
            ++v74;
          }
          while (v74 != v73);
        }
        if (v605)
        {
          v122 = *(double *)memptr + v60;
          *(double *)memptr = *(double *)memptr + v60;
        }
        else
        {
          v122 = *(double *)memptr;
        }
        v2.f64[0] = fabs(v122);
        v67.f64[0] = 1.0 / v122;
        if (v2.f64[0] < v61)
          v67.f64[0] = 0.0;
        *(float64_t *)(v66 + 8) = v67.f64[0];
        v123 = *(_QWORD *)(v66 + 40);
        if (v123)
          break;
LABEL_60:
        v66 += 56;
        if (v66 == v606)
          goto LABEL_406;
      }
      v124 = *(_QWORD *)(v66 + 24);
      v125 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 56);
      v611 = v125 + 16 * (v123 + v124);
      v612 = v650;
      v126 = v125 + 16 * v124;
      v623 = v66;
      while (1)
      {
        v127 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 24) + 8 * *(_QWORD *)(v126 + 8);
        v67.f64[0] = *(float64_t *)(v127 + 16);
        v2 = *(float64x2_t *)v127;
        v3.f64[0] = *(float64_t *)(v66 + 8);
        v4.f64[0] = *(float64_t *)(v66 + 16);
        v5 = vmulq_n_f64(*(float64x2_t *)v127, v3.f64[0]);
        v128 = **(_QWORD **)&v612 + 8 * (*(_DWORD *)(*(_QWORD *)&v612 + 28) + 3 * *(_DWORD *)v126);
        v2.f64[0] = *(float64_t *)(v128 + 16);
        v643 = vmulq_f64(v67, v3);
        *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vmlsq_f64(v2, v4, v643);
        v3 = v5;
        v67 = vmlsq_lane_f64(*(float64x2_t *)v128, v5, v4.f64[0], 0);
        *(float64x2_t *)v128 = v67;
        *(float64_t *)(v128 + 16) = v2.f64[0];
        v614 = v126;
        v129 = *(_DWORD *)v126;
        v130 = *(_QWORD *)(v66 + 24);
        v131 = *(_QWORD *)(v66 + 40);
        v132 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 56);
        v133 = (unsigned int *)(v132 + 16 * v130);
        if (v131)
        {
          v134 = 16 * v131;
          while (*v133 < v129)
          {
            v133 += 4;
            v134 -= 16;
            if (!v134)
              goto LABEL_99;
          }
        }
        v639 = (unsigned int *)(v132 + 16 * (v131 + v130));
        if (v133 != v639)
          break;
LABEL_99:
        v126 = v614 + 16;
        if (v614 + 16 == v611)
          goto LABEL_60;
      }
      v67 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
      v135 = *(_QWORD **)(*(_QWORD *)&v612 + 32);
      v633 = v135 + 2;
      v3.f64[1] = v67.f64[0];
      v627 = v3;
      while (1)
      {
        v138 = v135[11] + 24 * *v133;
        v139 = *(char **)v138;
        v140 = *(char **)(v138 + 8);
        if (*(char **)v138 != v140)
        {
          while (*(_DWORD *)v139 < v129)
          {
            v139 += 16;
            if (v139 == v140)
              goto LABEL_116;
          }
        }
        if (v139 == v140)
          goto LABEL_116;
        if (*(_DWORD *)v139 != v129)
          break;
        v136 = *v633 + 8 * *((_QWORD *)v139 + 1);
LABEL_108:
        v137 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 24) + 8 * *((_QWORD *)v133 + 1);
        v67.f64[0] = *(float64_t *)(v136 + 16);
        v3.f64[0] = *(float64_t *)(v136 + 40);
        v5.f64[0] = *(float64_t *)(v136 + 64);
        v7.f64[0] = *(float64_t *)(v137 + 16);
        v8 = *(float64x2_t *)v137;
        v9.f64[0] = v643.f64[0] * *(double *)v137;
        v10.f64[0] = vmuld_lane_f64(v643.f64[0], *(float64x2_t *)v137, 1);
        v67 = vsubq_f64(v67, v9);
        v9.f64[1] = v627.f64[1];
        v2 = vmlsq_lane_f64(*(float64x2_t *)v136, v627, *(double *)v137, 0);
        v3 = vsubq_f64(v3, v10);
        v4 = vmlsq_laneq_f64(*(float64x2_t *)(v136 + 24), v627, *(float64x2_t *)v137, 1);
        v5 = vmlsq_f64(v5, v7, v643);
        v6 = vmlsq_lane_f64(*(float64x2_t *)(v136 + 48), v627, v7.f64[0], 0);
        *(float64x2_t *)v136 = v2;
        *(float64_t *)(v136 + 16) = v67.f64[0];
        *(float64x2_t *)(v136 + 24) = v4;
        *(float64_t *)(v136 + 40) = v3.f64[0];
        *(float64x2_t *)(v136 + 48) = v6;
        *(float64_t *)(v136 + 64) = v5.f64[0];
        v133 += 4;
        if (v133 == v639)
          goto LABEL_99;
      }
      v140 = v139;
LABEL_116:
      v141 = v135[10];
      if (v141)
      {
        v143 = v135[6];
        v142 = v135[7];
        v144 = ((v142 - v143) << 6) - 1;
        v145 = v135[9];
        if (v142 == v143)
          v144 = 0;
        v136 = v135[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v143 + (((unint64_t)(v145 + v141 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v145 + v141 - 1) & 0x1FF));
        v135[10] = v141 - 1;
        if ((unint64_t)(v144 - (v141 + v145) + 1) >= 0x400)
        {
          operator delete(*(void **)(v142 - 8));
          v135[7] -= 8;
        }
        goto LABEL_181;
      }
      v668.i64[0] = 0;
      v147 = v135[2];
      v146 = (int64x2_t *)v135[3];
      v148 = (unint64_t)v146 - v147;
      v149 = (uint64_t)((uint64_t)v146->i64 - v147) >> 3;
      v150 = (int64x2_t *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8));
      v151 = v135[4];
      if ((unint64_t)(v151 - (_QWORD)v146) < 0x48)
      {
        v152 = v149 + 9;
        if ((unint64_t)(v149 + 9) >> 61)
          sub_2394189F8();
        v153 = v151 - v147;
        if (v153 >> 2 > v152)
          v152 = v153 >> 2;
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        v618 = v152;
        if (v152)
        {
          if (v152 >> 61)
            sub_239418A80();
          v154 = operator new(8 * v152);
          v68 = 0uLL;
        }
        else
        {
          v154 = 0;
        }
        v160 = &v154[8 * v149];
        *((_QWORD *)v160 + 8) = 0;
        *((_OWORD *)v160 + 2) = v68;
        *((_OWORD *)v160 + 3) = v68;
        *(_OWORD *)v160 = v68;
        *((_OWORD *)v160 + 1) = v68;
        v616 = v138;
        if ((int64x2_t *)v147 == v146)
        {
          v162 = &v154[8 * v149];
        }
        else
        {
          if (v148 - 8 >= 0x68)
          {
            v163 = (uint64_t)((uint64_t)v146->i64 - v147) >> 3;
            v161 = (char *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8));
            v162 = &v154[8 * v149];
            if (v147 + (v148 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v154[v148 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v164 = ((v148 - 8) >> 3) + 1;
              v161 = &v150->i8[-8 * (v164 & 0x3FFFFFFFFFFFFFFCLL)];
              v165 = 8 * v163;
              v166 = (__int128 *)(v147 + 8 * v163 - 16);
              v167 = &v154[v165 - 16];
              v168 = v164 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v169 = *v166;
                *(v167 - 1) = *(v166 - 1);
                *v167 = v169;
                v166 -= 2;
                v167 -= 2;
                v168 -= 4;
              }
              while (v168);
              v162 = &v160[-8 * (v164 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_144;
            }
          }
          else
          {
            v161 = (char *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8));
            v162 = &v154[8 * v149];
          }
          do
          {
            v170 = *((_QWORD *)v161 - 1);
            v161 -= 8;
            *((_QWORD *)v162 - 1) = v170;
            v162 -= 8;
          }
          while (v161 != (char *)v147);
        }
LABEL_144:
        v171 = v160 + 72;
        v172 = (char *)v146 - (char *)v150;
        if (v172)
        {
          v173 = v154;
          memmove(v160 + 72, v150, v172);
          v154 = v173;
        }
        v138 = v616;
        v135[2] = v162;
        v135[3] = &v171[v172];
        v135[4] = &v154[8 * v618];
        if (v147)
          operator delete((void *)v147);
        goto LABEL_180;
      }
      v619 = (uint64_t)((uint64_t)v146->i64 - v147) >> 3;
      v155 = (char *)v146 - (char *)v150;
      if ((unint64_t)((char *)v146 - (char *)v150) > 0x47)
      {
        v157 = (float64_t *)v135[3];
        v156 = 9;
        goto LABEL_157;
      }
      v156 = v155 >> 3;
      v157 = (float64_t *)&v146->i64[9 - (v155 >> 3)];
      v158 = 64 - (v155 & 0xFFFFFFFFFFFFFFF8);
      if (v158 >= 0x68)
      {
        if (v146 >= (int64x2_t *)&v668.u64[1] || &v668 >= (int64x2_t *)((char *)&v146->u64[1] + v158))
        {
          v174 = (v158 >> 3) + 1;
          v175 = (_OWORD *)v135[3];
          v176 = v174 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            *v175 = v68;
            v175[1] = v68;
            v175 += 2;
            v176 -= 4;
          }
          while (v176);
          if (v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_156:
            v135[3] = v157;
            if (v146 == v150)
              goto LABEL_180;
LABEL_157:
            v177 = (char *)v157 - (char *)&v150[4].u64[1];
            v178 = v177 >> 3;
            v179 = (int64x2_t *)(v157 - 9);
            v180 = (char *)v157;
            if (v157 - 9 < (float64_t *)v146)
            {
              v181 = (v148 & 0xFFFFFFFFFFFFFFF8) + v177;
              v182 = v147 + v181 + 8;
              if ((unint64_t)v146 > v182)
                v182 = (unint64_t)v146;
              v183 = v182 + ~v147 - v181;
              if (v183 > 0x57)
              {
                v184 = (v183 >> 3) + 1;
                v185 = v184 & 0x3FFFFFFFFFFFFFFCLL;
                v179 = (int64x2_t *)((char *)v179 + v185 * 8);
                v186 = v157 + 2;
                v187 = (__int128 *)(v147 + 8 * v178 + 8 * v619 + 16);
                v188 = v184 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v189 = *v187;
                  *(v186 - 1) = *(v187 - 1);
                  *v186 = v189;
                  v186 += 2;
                  v187 += 2;
                  v188 -= 4;
                }
                while (v188);
                v180 = (char *)&v157[v185];
                if (v184 == (v184 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_166;
              }
              else
              {
                v180 = (char *)v157;
              }
              do
              {
                v190 = v179->i64[0];
                v179 = (int64x2_t *)((char *)v179 + 8);
                *(_QWORD *)v180 = v190;
                v180 += 8;
              }
              while (v179 < v146);
            }
LABEL_166:
            v135[3] = v180;
            if (v157 != (float64_t *)&v150[4].u64[1])
              memmove(&v157[-v178], (const void *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8)), v177);
            v191 = (const double *)&v668;
            if (v150 <= &v668)
            {
              v192 = 9;
              if (v135[3] <= (unint64_t)&v668)
                v192 = 0;
              v191 = (const double *)&v668.i64[v192];
            }
            if (v156 >= 0xA
              && (v150 >= (int64x2_t *)(v191 + 1)
               || (unint64_t)v191 >= v147 + (v148 & 0xFFFFFFFFFFFFFFF8) + 8 * v156))
            {
              v150 = (int64x2_t *)((char *)v150 + 8 * (v156 & 0xFFFFFFFFFFFFFFFCLL));
              v193 = vld1q_dup_f64(v191);
              v194 = (float64x2_t *)(v147 + 8 * v619 + 16);
              v195 = v156 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v194[-1] = v193;
                *v194 = v193;
                v194 += 2;
                v195 -= 4;
              }
              while (v195);
              if (v156 == (v156 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_180;
              v156 &= 3u;
            }
            do
            {
              *(double *)v150->i64 = *v191;
              v150 = (int64x2_t *)((char *)v150 + 8);
              --v156;
            }
            while (v156);
LABEL_180:
            v136 = v135[3] - 72;
            v66 = v623;
LABEL_181:
            v196 = (v136 - *v633) >> 3;
            v668.i32[0] = v129;
            v668.i64[1] = v196;
            sub_239C22598((char **)v138, v140, &v668);
            v68 = 0uLL;
            goto LABEL_108;
          }
          v159 = (float64_t *)&v146->i64[v174 & 0x3FFFFFFFFFFFFFFCLL];
        }
        else
        {
          v159 = (float64_t *)v135[3];
        }
      }
      else
      {
        v159 = (float64_t *)v135[3];
      }
      do
        *v159++ = *(float64_t *)v668.i64;
      while (v159 != v157);
      goto LABEL_156;
    }
LABEL_406:
    v466 = *(_QWORD *)(v604 + 584);
    v631 = *(_QWORD *)(v604 + 592);
    if (v466 != v631)
    {
      v467 = v601.f64[0];
      do
      {
        *(_QWORD *)(v466 + 16) = 0;
        v662.f64[0] = v601.f64[1];
        v637 = v466;
        v468 = *(_QWORD *)(v466 + 32);
        if (v468)
        {
          v469 = *(_QWORD *)(*(_QWORD *)&v601.f64[0] + 80);
          v470 = (uint64_t *)(**(_QWORD **)(v466 + 48) + 8 * *(_QWORD *)(v466 + 24));
          v471 = 8 * v468;
          do
          {
            v472 = *v470;
            v473 = (_QWORD *)(v469 + 160 * *v470);
            v475 = v473[10];
            v474 = v473[11];
            v476 = v473[12];
            if (((*(unsigned __int8 *)(v474 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v475 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v476 + 36)) >> 7)
            {
              v477 = *(unsigned __int8 *)(v475 + 4);
              if (!*(_BYTE *)(v475 + 4) || *(_DWORD *)(v475 + 48) != -1)
              {
                v478 = *(unsigned __int8 *)(v474 + 4);
                if (!*(_BYTE *)(v474 + 4) || *(_DWORD *)(v474 + 48) != -1)
                {
                  v479 = *(_BYTE *)(v476 + 4);
                  if (!v479 || *(_DWORD *)(v476 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v475 + 4);
                    if (v477)
                      v480 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v475 + 48));
                    else
                      v480 = -1;
                    v668.i32[1] = v480;
                    v668.i8[8] = v478;
                    if (v478)
                      v481 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v474 + 48));
                    else
                      v481 = -1;
                    v668.i32[3] = v481;
                    LOBYTE(v669) = v479;
                    HIDWORD(v669) = -1;
                    sub_239C3A984((uint64_t)(v473 + 1), (double *)(v604 + 40), (uint64_t)&memptr[1], v467, v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v490 = (float64x2_t *)(v469 + 160 * v472 + 104);
                    if (v477)
                    {
                      *(float64x2x3_t *)(&v484 - 2) = vld3q_f64((const double *)&memptr[1]);
                      v491 = **(_QWORD **)&v601.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v480);
                      v485 = *(float64x2_t *)v491;
                      v486.f64[0] = *(float64_t *)(v491 + 16);
                      v487.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v489.f64[0] = *(float64_t *)(v469 + 160 * v472 + 120);
                      v494 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v490->f64[0]), _Q1, *v490, 1), v484, v489.f64[0]);
                      _Q0 = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v490);
                      _Q1.f64[0] = *(float64_t *)(v469 + 160 * v472 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v656[1].f64[1] * v489.f64[0];
                      v482 = vsubq_f64(v486, _Q0);
                      v483 = vsubq_f64(*(float64x2_t *)v491, v494);
                      *(float64x2_t *)v491 = v483;
                      *(float64_t *)(v491 + 16) = v482.f64[0];
                    }
                    if (v478)
                    {
                      v496 = (const double *)&v657;
                      *(float64x2x3_t *)(&v484 - 2) = vld3q_f64(v496);
                      v497 = **(_QWORD **)&v601.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v481);
                      v485 = *(float64x2_t *)v497;
                      v486.f64[0] = *(float64_t *)(v497 + 16);
                      v487.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v489.f64[0] = *(float64_t *)(v469 + 160 * v472 + 120);
                      v500 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, v490->f64[0]), _Q1, *v490, 1), v484, v489.f64[0]);
                      _Q0 = vmulq_f64(v660, *v490);
                      _Q1.f64[0] = *(float64_t *)(v469 + 160 * v472 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v661[0].f64[0] * v489.f64[0];
                      v482 = vsubq_f64(v486, _Q0);
                      v483 = vsubq_f64(*(float64x2_t *)v497, v500);
                      *(float64x2_t *)v497 = v483;
                      *(float64_t *)(v497 + 16) = v482.f64[0];
                    }
                    v467 = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], v482, v483.f64[0], v484, v485.f64[0], v486, v487, _Q6, v489);
                  }
                }
              }
            }
            ++v470;
            v471 -= 8;
          }
          while (v471);
        }
        v466 = v637 + 56;
      }
      while (v637 + 56 != v631);
    }
    v502 = *(_QWORD *)(v604 + 464);
    v662.f64[0] = *(float64_t *)(v604 + 456);
    *(_QWORD *)&v662.f64[1] = v608;
    v663 = v602;
    v664 = v502;
    v665 = 0;
    v666 = 2;
    memset(v667.__m_.__opaque, 0, sizeof(v667.__m_.__opaque));
    v667.__m_.__sig = 850045863;
    v503 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 56);
    v504 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 64);
    if (v503 != v504)
    {
      while (1)
      {
        v506 = *(_QWORD *)(v503 + 48);
        v505 = *(_QWORD *)(v503 + 56);
        v507 = ((*(unsigned __int8 *)(v505 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v506 + 52)) >> 7 ? 2 : 1;
        if ((v507 & v666) != 0)
        {
          v508 = *(unsigned __int8 *)(v506 + 4);
          if (!*(_BYTE *)(v506 + 4) || *(_DWORD *)(v506 + 48) != -1)
          {
            v509 = *(unsigned __int8 *)(v505 + 4);
            if (!*(_BYTE *)(v505 + 4) || *(_DWORD *)(v505 + 48) != -1)
              break;
          }
        }
LABEL_432:
        v503 += 120;
        if (v503 == v504)
          goto LABEL_495;
      }
      if (*(_BYTE *)(v506 + 4))
      {
        v510 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v506 + 48));
        if (*(_BYTE *)(v505 + 4))
        {
LABEL_443:
          v511 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v505 + 48));
          goto LABEL_446;
        }
      }
      else
      {
        v510 = -1;
        if (*(_BYTE *)(v505 + 4))
          goto LABEL_443;
      }
      v511 = -1;
LABEL_446:
      sub_239C39E28(v503 + 8, v602, (uint64_t)&v668);
      if (!v509)
        goto LABEL_469;
      if (!v508 || v510 < v511)
      {
LABEL_459:
        v532 = *(unint64_t **)(v502 + 32);
        v533 = v532[11] + 24 * v511;
        v535 = *(char **)v533;
        v534 = *(char **)(v533 + 8);
        if (*(char **)v533 != v534)
        {
          while (*(_DWORD *)v535 < v511)
          {
            v535 += 16;
            if (v535 == v534)
              goto LABEL_467;
          }
        }
        if (v535 != v534)
        {
          if (*(_DWORD *)v535 == v511)
          {
            v536 = v532[2] + 8 * *((_QWORD *)v535 + 1);
LABEL_468:
            v513.f64[0] = *(float64_t *)(v536 + 16);
            v515.f64[0] = *(float64_t *)(v536 + 40);
            v512.f64[0] = *(float64_t *)(v536 + 64);
            *(_QWORD *)&v537.f64[1] = v674.i64[1];
            _V19.D[1] = v678.f64[1];
            _Q20 = (float64x2_t)vzip1q_s64(v674, v676);
            _Q22 = (float64x2_t)vzip2q_s64(v674, v676);
            v541.f64[0] = v675;
            v541.f64[1] = v677;
            v542 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v674.i64), _Q22, (float64x2_t)v674, 1), v541, v675);
            _D6 = *(double *)&v674.i64[1];
            __asm { FMLA            D24, D6, V19.D[1] }
            v537.f64[0] = _D24 + v679 * v675;
            v545 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v676.i64), _Q22, (float64x2_t)v676, 1), v541, v677);
            _D17 = *(double *)&v676.i64[1];
            __asm { FMLA            D24, D17, V19.D[1] }
            v517.f64[0] = _D24 + v679 * v677;
            v548 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v678.f64[0]), _Q22, v678, 1), v541, v679);
            _Q22.f64[0] = v678.f64[1];
            __asm { FMLA            D20, D22, V19.D[1] }
            _Q18.f64[0] = _Q20.f64[0] + v679 * v679;
            v513 = vaddq_f64(v513, v537);
            v516 = vaddq_f64(*(float64x2_t *)(v536 + 24), v545);
            v515 = vaddq_f64(v515, v517);
            v549 = vaddq_f64(*(float64x2_t *)(v536 + 48), v548);
            *(float64x2_t *)v536 = vaddq_f64(*(float64x2_t *)v536, v542);
            *(float64_t *)(v536 + 16) = v513.f64[0];
            *(float64x2_t *)(v536 + 24) = v516;
            *(float64_t *)(v536 + 40) = v515.f64[0];
            v512 = vaddq_f64(v512, _Q18);
            *(float64x2_t *)(v536 + 48) = v549;
            *(float64_t *)(v536 + 64) = v512.f64[0];
LABEL_469:
            if (!v508)
            {
              v555 = (float64x2_t *)(v503 + 64);
              goto LABEL_493;
            }
            v550 = *(unint64_t **)(v502 + 32);
            v551 = v550[11] + 24 * v510;
            v553 = *(char **)v551;
            v552 = *(char **)(v551 + 8);
            if (*(char **)v551 != v552)
            {
              while (*(_DWORD *)v553 < v510)
              {
                v553 += 16;
                if (v553 == v552)
                  goto LABEL_479;
              }
            }
            if (v553 != v552)
            {
              if (*(_DWORD *)v553 == v510)
              {
                v554 = v550[2] + 8 * *((_QWORD *)v553 + 1);
LABEL_480:
                v513.f64[0] = *(float64_t *)(v554 + 16);
                v515.f64[0] = *(float64_t *)(v554 + 40);
                v512.f64[0] = *(float64_t *)(v554 + 64);
                *(_QWORD *)&v556.f64[1] = v668.i64[1];
                _Q22 = v672;
                _Q20 = (float64x2_t)vzip1q_s64(v668, v670);
                v559 = (float64x2_t)vzip2q_s64(v668, v670);
                v560.f64[0] = v669;
                v560.f64[1] = v671;
                v561 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v668.i64), v559, (float64x2_t)v668, 1), v560, v669);
                _D6 = *(double *)&v668.i64[1];
                __asm { FMLA            D19, D6, V22.D[1] }
                v556.f64[0] = _D19 + v673 * v669;
                v564 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v670.i64), v559, (float64x2_t)v670, 1), v560, v671);
                _D17 = *(double *)&v670.i64[1];
                __asm { FMLA            D19, D17, V22.D[1] }
                v517.f64[0] = _D19 + v673 * v671;
                v632 = v559;
                v638 = _Q20;
                v626 = v560;
                v567 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v672.f64[0]), v559, v672, 1), v560, v673);
                _Q19 = vmulq_f64(_Q22, _Q22);
                _Q20.f64[0] = v672.f64[1];
                v642 = (int8x16_t)v672;
                v645 = v673;
                __asm { FMLA            D19, D20, V22.D[1] }
                _Q19.f64[0] = _Q19.f64[0] + v645 * v645;
                v569 = vaddq_f64(v513, v556);
                v570 = vaddq_f64(*(float64x2_t *)(v554 + 24), v564);
                v571 = vaddq_f64(v515, v517);
                v572 = vaddq_f64(*(float64x2_t *)(v554 + 48), v567);
                *(float64x2_t *)v554 = vaddq_f64(*(float64x2_t *)v554, v561);
                *(float64_t *)(v554 + 16) = v569.f64[0];
                *(float64x2_t *)(v554 + 24) = v570;
                *(float64_t *)(v554 + 40) = v571.f64[0];
                *(float64x2_t *)(v554 + 48) = v572;
                *(_QWORD *)(v554 + 64) = *(_OWORD *)&vaddq_f64(v512, _Q19);
                if (!v509 || v511 < v510)
                  goto LABEL_492;
                v573 = *(unint64_t **)(v502 + 32);
                v574 = v573[11] + 24 * v511;
                v576 = *(char **)v574;
                v575 = *(char **)(v574 + 8);
                if (*(char **)v574 != v575)
                {
                  while (*(_DWORD *)v576 < v510)
                  {
                    v576 += 16;
                    if (v576 == v575)
                      goto LABEL_490;
                  }
                }
                if (v576 != v575)
                {
                  if (*(_DWORD *)v576 == v510)
                  {
                    v577 = v573[2] + 8 * *((_QWORD *)v576 + 1);
LABEL_491:
                    _Q0 = (float64x2_t)vextq_s8(v642, v642, 8uLL);
                    v569.f64[0] = *(float64_t *)(v577 + 16);
                    v571.f64[0] = *(float64_t *)(v577 + 40);
                    v572.f64[0] = *(float64_t *)(v577 + 64);
                    v579 = *(float64x2_t *)(v577 + 48);
                    *(_QWORD *)&_Q7.f64[1] = v674.i64[1];
                    _V18.D[1] = *(double *)&v676.i64[1];
                    _V20.D[1] = v678.f64[1];
                    __asm { FMLA            D22, D0, V7.D[1] }
                    _Q7.f64[0] = _D22 + v645 * v675;
                    __asm { FMLA            D22, D0, V18.D[1] }
                    v567.f64[0] = _D22 + v645 * v677;
                    v585 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, v678.f64[0]), v632, v678, 1), v626, v679);
                    __asm { FMLA            D22, D0, V20.D[1] }
                    _Q0.f64[0] = _D22 + v645 * v679;
                    v587 = vaddq_f64(*(float64x2_t *)(v577 + 24), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, *(double *)v676.i64), v632, (float64x2_t)v676, 1), v626, v677));
                    *(float64x2_t *)v577 = vaddq_f64(*(float64x2_t *)v577, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, *(double *)v674.i64), v632, (float64x2_t)v674, 1), v626, v675));
                    *(_QWORD *)(v577 + 16) = *(_OWORD *)&vaddq_f64(v569, _Q7);
                    *(float64x2_t *)(v577 + 24) = v587;
                    *(_QWORD *)(v577 + 40) = *(_OWORD *)&vaddq_f64(v571, v567);
                    v569 = vaddq_f64(v579, v585);
                    *(float64x2_t *)(v577 + 48) = v569;
                    *(_QWORD *)(v577 + 64) = *(_OWORD *)&vaddq_f64(v572, _Q0);
LABEL_492:
                    v555 = (float64x2_t *)(v503 + 64);
                    v588 = *(_QWORD *)v502 + 8 * (*(_DWORD *)(v502 + 28) + 3 * v510);
                    v569.f64[0] = *(float64_t *)(v588 + 16);
                    v516.f64[0] = v669;
                    _V6.D[1] = v672.f64[1];
                    v590 = *(double *)(v503 + 80);
                    v516.f64[1] = v671;
                    _Q2 = vmulq_f64(v672, *(float64x2_t *)(v503 + 64));
                    _D3 = *(_QWORD *)(v503 + 72);
                    __asm { FMLA            D2, D3, V6.D[1] }
                    _Q2.f64[0] = _Q2.f64[0] + v673 * v590;
                    *(float64x2_t *)v588 = vsubq_f64(*(float64x2_t *)v588, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v668, v670), *(double *)(v503 + 64)), (float64x2_t)vzip2q_s64(v668, v670), *(float64x2_t *)(v503 + 64), 1), v516, v590));
                    *(_QWORD *)(v588 + 16) = *(_OWORD *)&vsubq_f64(v569, _Q2);
LABEL_493:
                    if (v509)
                    {
                      v690 = vld3q_f64((const double *)v674.i64);
                      v593 = *(_QWORD *)v502 + 8 * (*(_DWORD *)(v502 + 28) + 3 * v511);
                      v516.f64[0] = *(float64_t *)(v593 + 16);
                      _V6.D[1] = v678.f64[1];
                      v595 = v555[1].f64[0];
                      v596 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v690.val[0], v555->f64[0]), v690.val[1], *v555, 1), v690.val[2], v595);
                      v690.val[0] = vmulq_f64(v678, *v555);
                      v690.val[1].f64[0] = v555->f64[1];
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v690.val[0].f64[0] = v690.val[0].f64[0] + v679 * v595;
                      *(float64x2_t *)v593 = vsubq_f64(*(float64x2_t *)v593, v596);
                      *(_QWORD *)(v593 + 16) = *(_OWORD *)&vsubq_f64(v516, v690.val[0]);
                    }
                    goto LABEL_432;
                  }
                  v575 = v576;
                }
LABEL_490:
                v577 = sub_239C23138(v573, (char **)v574, v510, v575);
                goto LABEL_491;
              }
              v552 = v553;
            }
LABEL_479:
            v554 = sub_239C23138(v550, (char **)v551, v510, v552);
            goto LABEL_480;
          }
          v534 = v535;
        }
LABEL_467:
        v536 = sub_239C23138(v532, (char **)v533, v511, v534);
        goto LABEL_468;
      }
      v520 = *(unint64_t **)(v502 + 32);
      v521 = v520[11] + 24 * v510;
      v523 = *(char **)v521;
      v522 = *(char **)(v521 + 8);
      if (*(char **)v521 != v522)
      {
        while (*(_DWORD *)v523 < v511)
        {
          v523 += 16;
          if (v523 == v522)
            goto LABEL_457;
        }
      }
      if (v523 != v522)
      {
        if (*(_DWORD *)v523 == v511)
        {
          v524 = v520[2] + 8 * *((_QWORD *)v523 + 1);
LABEL_458:
          v512.f64[0] = *(float64_t *)(v524 + 16);
          v514.f64[0] = *(float64_t *)(v524 + 40);
          v516.f64[0] = *(float64_t *)(v524 + 64);
          v692 = vld3q_f64((const double *)v674.i64);
          v517 = *(float64x2_t *)(v524 + 48);
          _V17.D[1] = v678.f64[1];
          *(_QWORD *)&_Q18.f64[1] = v668.i64[1];
          v526 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692.val[0], *(double *)v668.i64), v692.val[1], (float64x2_t)v668, 1), v692.val[2], v669);
          *(_QWORD *)&_Q18.f64[0] = v668.i64[1];
          __asm { FMLA            D26, D18, V17.D[1] }
          _Q18.f64[0] = _D26 + v679 * v669;
          v528 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692.val[0], *(double *)v670.i64), v692.val[1], (float64x2_t)v670, 1), v692.val[2], v671);
          _D21 = *(double *)&v670.i64[1];
          __asm { FMLA            D26, D21, V17.D[1] }
          v519.f64[0] = _D26 + v679 * v671;
          v531 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692.val[0], v672.f64[0]), v692.val[1], v672, 1), v692.val[2], v673);
          v692.val[0] = vmulq_f64(v678, v672);
          v692.val[1].f64[0] = v672.f64[1];
          __asm { FMLA            D5, D6, V17.D[1] }
          v692.val[0].f64[0] = v692.val[0].f64[0] + v679 * v673;
          v513 = vaddq_f64(*(float64x2_t *)v524, v526);
          v515 = vaddq_f64(*(float64x2_t *)(v524 + 24), v528);
          *(float64x2_t *)v524 = v513;
          *(_QWORD *)(v524 + 16) = *(_OWORD *)&vaddq_f64(v512, _Q18);
          v512 = vaddq_f64(v517, v531);
          *(float64x2_t *)(v524 + 24) = v515;
          *(_QWORD *)(v524 + 40) = *(_OWORD *)&vaddq_f64(v514, v519);
          *(float64x2_t *)(v524 + 48) = v512;
          *(_QWORD *)(v524 + 64) = *(_OWORD *)&vaddq_f64(v516, v692.val[0]);
          goto LABEL_459;
        }
        v522 = v523;
      }
LABEL_457:
      v524 = sub_239C23138(v520, (char **)v521, v511, v522);
      goto LABEL_458;
    }
    goto LABEL_495;
  }
LABEL_496:
  if (__p)
  {
    v652 = __p;
    operator delete(__p);
  }
  v11 = 0;
  *(_WORD *)(a1 + 345) = 1;
LABEL_499:
  kdebug_trace();
  return v11;
}

void sub_239C371AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::mutex *a28,std::mutex *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  void *v49;

  free(a41);
  free(a44);
  free(v49);
  sub_239C1F794();
  sub_239C22568();
  _Unwind_Resume(a1);
}

double sub_239C37270(uint64_t a1)
{
  unint64_t v1;
  char *v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  _QWORD *v7;
  __int128 v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float64x2_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  int v33;
  double *v34;
  double v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  std::bad_alloc *exception;
  std::bad_alloc *v51;
  void **v52;
  void *v53[2];
  uint64_t v54;
  void *v55[2];
  unsigned int v56;
  char v57;
  void ***v58;
  void **v59;
  uint64_t v60;
  double v61[3];
  void *memptr[5];

  memptr[4] = *(void **)MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 768) - *(_QWORD *)(a1 + 760);
  if ((v1 & 0x3FFFFFFFCLL) != 0)
  {
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (8 * ((v1 >> 1) + (v1 >> 2)) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v3 = (char *)memptr[0];
    if (!memptr[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v51 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v51, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v4 = *(_DWORD **)(a1 + 760);
    v5 = *(_DWORD **)(a1 + 768);
    if (v4 == v5)
    {
      v13 = *(_QWORD *)(a1 + 760);
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD **)(a1 + 80);
      do
      {
        if (*((_DWORD *)v7 + 8) == *v4)
        {
          v10 = v7;
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v7[1];
            if (v11)
            {
              do
              {
                v10 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v7[2];
                v12 = *v10 == (_QWORD)v7;
                v7 = v10;
              }
              while (!v12);
            }
            v7 = v10;
          }
          while (*((_DWORD *)v10 + 8) != *v4);
        }
        v8 = *(_OWORD *)(v10 + 7);
        v9 = &v3[8 * v6];
        *((_QWORD *)v9 + 2) = v10[9];
        *(_OWORD *)v9 = v8;
        v6 += 3;
        ++v4;
        v7 = v10;
      }
      while (v4 != v5);
      v13 = *(_QWORD *)(a1 + 768);
      v4 = *(_DWORD **)(a1 + 760);
    }
    if (((v13 - (_QWORD)v4) & 0x3FFFFFFFCLL) == 0)
    {
      v14 = 0.0;
LABEL_48:
      free(v3);
      return v14;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 688) + 32))(a1 + 688);
    v55[0] = 0;
    v55[1] = 0;
    v56 = *(_DWORD *)(a1 + 712);
    sub_23945215C((uint64_t)v55, v56);
    if (v56)
      bzero(v55[0], 8 * v56);
    v18 = *(_DWORD **)(a1 + 760);
    v19 = *(_DWORD **)(a1 + 768);
    if (v18 != v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(a1 + 696);
      v22 = *(_QWORD **)(v15 + 8);
      do
      {
        if (*((_DWORD *)v22 + 8) == *v18)
        {
          v26 = v22;
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v22[1];
            if (v27)
            {
              do
              {
                v26 = v27;
                v27 = (_QWORD *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v26 = (_QWORD *)v22[2];
                v12 = *v26 == (_QWORD)v22;
                v22 = v26;
              }
              while (!v12);
            }
            v22 = v26;
          }
          while (*((_DWORD *)v26 + 8) != *v18);
        }
        v23 = 8 * v20;
        v16.f64[0] = *(float64_t *)(v21 + v23 + 16);
        v17.f64[0] = (float64_t)v26[9];
        v16 = vsubq_f64(v17, v16);
        v24 = vsubq_f64(*(float64x2_t *)(v26 + 7), *(float64x2_t *)(v21 + v23));
        v25 = (char *)v55[0] + v23;
        *(float64x2_t *)v25 = v24;
        *((_QWORD *)v25 + 2) = *(_QWORD *)&v16.f64[0];
        v20 += 3;
        ++v18;
        v22 = v26;
      }
      while (v18 != v19);
    }
    v53[1] = 0;
    v54 = 0;
    v53[0] = 0;
    v28 = *(_DWORD **)(a1 + 752);
    v29 = v28[2];
    v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 48))(v28);
    v31 = *(_DWORD **)(a1 + 752);
    v32 = v31[3];
    v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 56))(v31);
    v54 = (v30 * v29);
    HIDWORD(v54) = v33 * v32;
    sub_23945215C((uint64_t)v53, (v33 * v32) * (unint64_t)(v30 * v29));
    if (HIDWORD(v54) * (_DWORD)v54)
      bzero(v53[0], 8 * (HIDWORD(v54) * v54));
    (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 752) + 64))(*(_QWORD *)(a1 + 752), v53, 0);
    sub_239C1BE20((uint64_t *)v53);
    if (v56)
    {
      v34 = *(double **)(a1 + 720);
      v35 = *(double *)v55[0] * *v34;
      if (v56 != 1)
      {
        v36 = (double *)((char *)v55[0] + 8);
        v37 = (v56 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v37 >= 3)
        {
          v38 = v37 + 1;
          v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v36 = (double *)((char *)v36 + v39);
          v40 = (float64x2_t *)(v34 + 3);
          v41 = (float64x2_t *)((char *)v55[0] + 24);
          v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v43 = vmulq_f64(v41[-1], v40[-1]);
            v44 = vmulq_f64(*v41, *v40);
            v35 = v35 + v43.f64[0] + v43.f64[1] + v44.f64[0] + v44.f64[1];
            v40 += 2;
            v41 += 2;
            v42 -= 4;
          }
          while (v42);
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
          v34 = (double *)((char *)v34 + v39);
        }
        v45 = v34 + 1;
        do
        {
          v46 = *v36++;
          v47 = v46;
          v48 = *v45++;
          v35 = v35 + v47 * v48;
        }
        while (v36 != (double *)((char *)v55[0] + 8 * v56));
      }
    }
    else
    {
      v35 = 0.0;
    }
LABEL_47:
    v52 = v55;
    v58 = &v52;
    v59 = v53;
    v60 = 0x3FE0000000000000;
    memptr[1] = &v57;
    memptr[2] = v55;
    memptr[3] = (void *)0x3FF0000000000000;
    sub_239C1C794(v61, (double *)memptr);
    v14 = v61[0] - v35;
    free(v53[0]);
    free(v55[0]);
    goto LABEL_48;
  }
  return 0.0;
}

void sub_239C376B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  free(a10);
  free(a13);
  free(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_239C376EC(uint64_t result)
{
  _QWORD *v1;
  double v2;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD **)(result + 80);
  v2 = 0.0;
  if (v1 != (_QWORD *)(result + 88))
  {
    do
    {
      if ((*((_BYTE *)v1 + 92) & 2) == 0 && *((_BYTE *)v1 + 44))
      {
        _Q2 = *(_OWORD *)(v1 + 7);
        _D4 = v1[8];
        __asm { FMLA            D3, D4, V2.D[1] }
        v2 = v2 + _D3 + *((double *)v1 + 9) * *((double *)v1 + 9);
      }
      v10 = (_QWORD *)v1[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v1[2];
          _ZF = *v11 == (_QWORD)v1;
          v1 = v11;
        }
        while (!_ZF);
      }
      v1 = v11;
    }
    while (v11 != (_QWORD *)(result + 88));
  }
  return result;
}

uint64_t sub_239C3776C(uint64_t a1, _QWORD *a2)
{
  double *v4;
  uint64_t *i;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t result;

  kdebug_trace();
  v4 = *(double **)(a1 + 560);
  for (i = *(uint64_t **)(a1 + 568); v4 != (double *)i; v4 += 7)
  {
    v8 = *v4;
    if (*(_DWORD *)(*(_QWORD *)v4 + 32) != -1)
    {
      v9 = v4[2];
      v10 = *((_QWORD *)v4 + 5);
      if (v10)
      {
        v11 = *((_QWORD *)v4 + 6);
        v12 = *((_QWORD *)v4 + 3);
        v13 = *(_QWORD *)(v11 + 56);
        v14 = (unsigned int *)(v13 + 16 * (v10 + v12));
        v15 = (unsigned int *)(v13 + 16 * v12);
        v16 = *(_QWORD *)(v11 + 24);
        do
        {
          v17 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 664) + 4 * *v15);
          v18 = (double *)(v16 + 8 * *((_QWORD *)v15 + 1));
          _Q2 = *(_OWORD *)v18;
          _D4 = *(_QWORD *)(v17 + 8);
          __asm { FMLA            D5, D4, V2.D[1] }
          v9 = v9 - (_D5 + v18[2] * *(double *)(v17 + 16));
          v15 += 4;
        }
        while (v15 != v14);
      }
      v6 = v9 * v4[1];
      *(_QWORD *)(*(_QWORD *)&v8 + 48) = *(_QWORD *)(*(_QWORD *)&v8 + 16);
      *(_BYTE *)(*(_QWORD *)&v8 + 56) = *(_BYTE *)(*(_QWORD *)&v8 + 24);
      v7 = *v4;
      *(double *)(*(_QWORD *)&v7 + 16) = v6 + *(double *)(*(_QWORD *)v4 + 16);
      *(_BYTE *)(*(_QWORD *)&v7 + 24) = 1;
    }
  }
  kdebug_trace();
  kdebug_trace();
  v28 = *(_QWORD *)(a1 + 456);
  v29 = *(_QWORD **)(v28 + 8);
  v30 = (_QWORD *)(v28 + 16);
  if (v29 != v30)
  {
    do
    {
      v31 = *((unsigned int *)v29 + 22);
      if ((_DWORD)v31 != -1)
      {
        v29[15] = v29[9];
        *(_OWORD *)(v29 + 13) = *(_OWORD *)(v29 + 7);
        *((_BYTE *)v29 + 128) = *((_BYTE *)v29 + 80);
        v32 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 664) + 4 * v31);
        v26.f64[0] = *(float64_t *)(v32 + 16);
        v27.f64[0] = (float64_t)v29[9];
        v26 = vaddq_f64(v26, v27);
        *(float64x2_t *)(v29 + 7) = vaddq_f64(*(float64x2_t *)v32, *(float64x2_t *)(v29 + 7));
        v29[9] = *(_QWORD *)&v26.f64[0];
        *((_BYTE *)v29 + 80) = 1;
      }
      v33 = (_QWORD *)v29[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v29[2];
          _ZF = *v34 == (_QWORD)v29;
          v29 = v34;
        }
        while (!_ZF);
      }
      v29 = v34;
    }
    while (v34 != v30);
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 346) = *(_BYTE *)(a1 + 345);
  *(_WORD *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 347) = 0;
  return result;
}

uint64_t sub_239C379B4(uint64_t result, double a2)
{
  if (*(double *)(result + 368) != a2)
    *(_BYTE *)(result + 345) = 0;
  *(double *)(result + 368) = a2;
  return result;
}

uint64_t sub_239C379D4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 784) = a2;
  return result;
}

uint64_t sub_239C379DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 784);
}

BOOL sub_239C379E4(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 768) - *(_QWORD *)(a1 + 760)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_239C379FC(uint64_t a1)
{
  return a1 + 720;
}

uint64_t sub_239C37A04(uint64_t a1)
{
  return a1 + 720;
}

__n128 sub_239C37A0C(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 400);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 408);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 412);
    v10 = 4 * v7;
    do
    {
      v11 = (__n128 *)(*(_QWORD *)(a1 + 384) + 8 * v9);
      v12 = (__n128 *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 664) + v8));
      result = *v11;
      v12[1].n128_u64[0] = v11[1].n128_u64[0];
      *v12 = result;
      v8 += 4;
      v9 += 3;
    }
    while (v10 != v8);
  }
  return result;
}

__n128 sub_239C37A94(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 856);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 864);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 868);
    v10 = 4 * v7;
    do
    {
      v11 = (__n128 *)(*(_QWORD *)(a1 + 840) + 8 * v9);
      v12 = (__n128 *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 664) + v8));
      result = *v11;
      v12[1].n128_u64[0] = v11[1].n128_u64[0];
      *v12 = result;
      v8 += 4;
      v9 += 3;
    }
    while (v10 != v8);
  }
  return result;
}

uint64_t sub_239C37B1C(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t i;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  unint64_t v44;
  BOOL v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  char **v51;
  char **v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  unsigned int v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  BOOL v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t j;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t k;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  int v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  int v138;
  int v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  void *v152;
  unint64_t v153;
  char *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  void **v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  __int128 v171;
  char *v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  void *v177;
  char *v178;
  int64_t v179;
  int64_t v180;
  unint64_t v181;
  int64_t v182;
  unint64_t v183;
  _BYTE *v184;
  _DWORD *v185;
  unint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  void **v196;
  uint64_t v197;
  void *v198;
  _BYTE *v199;
  _BYTE *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  __int128 v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  __int128 v220;
  char *v221;
  void *v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int64x2_t v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  __int128 v252;
  __int128 v253;
  std::__shared_weak_count *v254;
  unint64_t *p_shared_owners;
  unint64_t v256;
  int64x2_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  __int128 v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  void *v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t *v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int128 *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t m;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  char **v314;
  int v315;
  uint64_t v316;
  void *v317[2];
  void *v318[2];
  int v319;
  void *v320[2];
  void *v321[2];
  int v322;
  void *v323;
  void *v324;
  uint64_t v325;
  void *v326[3];
  void *v327[3];
  void *v328[3];
  void *v329[3];
  void *v330[2];
  int v331;
  void *v332;
  _DWORD *v333;
  void *v334;
  void **v335;
  void *v336;
  uint64_t v337;
  void *__p;
  void **v339;
  void **v340;
  void **v341;
  __int128 v342;
  __int128 v343;
  int v344;
  __int128 v345;
  __int128 v346;
  int v347;
  uint64_t v348;

  v348 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 192))
  {
    v2 = *(_QWORD **)(a1 + 80);
    if (v2 != (_QWORD *)(a1 + 88))
    {
      v3 = 0;
      while (1)
      {
        if ((*((_BYTE *)v2 + 92) & 6) != 0)
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_11;
        }
        else
        {
          if (*((_BYTE *)v2 + 44))
            v3 += 3;
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_11:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v78 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v78);
LABEL_4:
        v2 = v5;
        if (v5 == (_QWORD *)(a1 + 88))
          goto LABEL_30;
      }
    }
    v3 = 0;
LABEL_30:
    v11 = *(_QWORD **)(a1 + 104);
    if (v11 == (_QWORD *)(a1 + 112))
    {
LABEL_31:
      v12 = 1;
LABEL_87:
      v44 = *(_QWORD *)(a1 + 184);
      goto LABEL_88;
    }
    while (1)
    {
      if ((*((_BYTE *)v11 + 76) & 6) != 0)
      {
        v13 = (_QWORD *)v11[1];
        if (v13)
          goto LABEL_37;
      }
      else
      {
        v3 += *((unsigned __int8 *)v11 + 44);
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
LABEL_37:
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
          goto LABEL_32;
        }
      }
      do
      {
        v14 = (_QWORD *)v11[2];
        v78 = *v14 == (_QWORD)v11;
        v11 = v14;
      }
      while (!v78);
LABEL_32:
      v11 = v14;
      if (v14 == (_QWORD *)(a1 + 112))
        goto LABEL_31;
    }
  }
  v342 = 0u;
  v343 = 0u;
  v345 = 0u;
  v346 = 0u;
  v344 = 1065353216;
  v347 = 1065353216;
  *(_OWORD *)v317 = 0u;
  *(_OWORD *)v318 = 0u;
  v319 = 1065353216;
  *(_OWORD *)v320 = 0u;
  *(_OWORD *)v321 = 0u;
  v322 = 1065353216;
  v6 = *(unsigned int **)(a1 + 80);
  v7 = (unsigned int *)(a1 + 88);
  LODWORD(v330[0]) = 0;
  if (v6 == (unsigned int *)(a1 + 88))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if ((v6[23] & 6) != 0)
      {
        sub_239456168((uint64_t)&v342, v6 + 8, v6 + 8);
        v8 = 1;
      }
      if (*((_BYTE *)v6 + 44))
        ++LODWORD(v330[0]);
      v9 = (unsigned int *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(unsigned int **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (unsigned int *)*((_QWORD *)v6 + 2);
          v78 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v78);
      }
      v6 = v10;
    }
    while (v10 != v7);
  }
  HIDWORD(v330[0]) = 0;
  v15 = *(unsigned int **)(a1 + 104);
  if (v15 != (unsigned int *)(a1 + 112))
  {
    do
    {
      if ((v15[19] & 6) != 0)
      {
        sub_239456168((uint64_t)&v345, v15 + 8, v15 + 8);
        v8 = 1;
      }
      if (*((_BYTE *)v15 + 44))
        ++HIDWORD(v330[0]);
      v18 = (unsigned int *)*((_QWORD *)v15 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(unsigned int **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (unsigned int *)*((_QWORD *)v15 + 2);
          v78 = *(_QWORD *)v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v78);
      }
      v15 = v19;
    }
    while (v19 != (unsigned int *)(a1 + 112));
  }
  if (!v8)
  {
    v3 = HIDWORD(v330[0]) + 3 * LODWORD(v330[0]);
    v32 = v321[0];
    if (!v321[0])
      goto LABEL_72;
    goto LABEL_71;
  }
  v16 = *(_QWORD *)(a1 + 128);
  for (i = *(_QWORD *)(a1 + 136); v16 != i; v16 += 120)
  {
    v20 = *(_QWORD *)(v16 + 48);
    if ((*(_BYTE *)(v20 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v16 + 56) + 52) & 6) != 0)
    {
      LODWORD(v329[0]) = *(_DWORD *)v20;
      v332 = v329;
      v21 = sub_2395EC77C((uint64_t)v317, (unsigned int *)v329, (uint64_t)&unk_239EC6E98, (_DWORD **)&v332);
      ++*((_DWORD *)v21 + 5);
      LODWORD(v329[0]) = **(_DWORD **)(v16 + 56);
      v332 = v329;
      v22 = sub_2395EC77C((uint64_t)v317, (unsigned int *)v329, (uint64_t)&unk_239EC6E98, (_DWORD **)&v332);
      ++*((_DWORD *)v22 + 5);
    }
  }
  sub_239C29188(*(uint64_t **)(a1 + 152), *(uint64_t **)(a1 + 160), (uint64_t)v317);
  sub_239559050((uint64_t)&v332, (uint64_t)&v342);
  sub_239559050((uint64_t)&v336, (uint64_t)&v345);
  v339 = v317;
  v340 = v329;
  v341 = v330;
  sub_239C2E488((uint64_t)&v332, a1 + 80);
  v24 = (int)v329[0];
  v23 = HIDWORD(v329[0]);
  v25 = __p;
  if (__p)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = v336;
  v336 = 0;
  if (v27)
    operator delete(v27);
  v28 = 3 * v24;
  v29 = v334;
  if (v334)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v3 = v23 + v28;
  v31 = v332;
  v332 = 0;
  if (v31)
    operator delete(v31);
  v32 = v321[0];
  if (v321[0])
  {
    do
    {
LABEL_71:
      v33 = (_QWORD *)*v32;
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
LABEL_72:
  v34 = v320[0];
  v320[0] = 0;
  if (v34)
    operator delete(v34);
  v35 = v318[0];
  if (v318[0])
  {
    do
    {
      v36 = (_QWORD *)*v35;
      operator delete(v35);
      v35 = v36;
    }
    while (v36);
  }
  v37 = v317[0];
  v317[0] = 0;
  if (v37)
    operator delete(v37);
  v38 = (_QWORD *)v346;
  if ((_QWORD)v346)
  {
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  v40 = (void *)v345;
  *(_QWORD *)&v345 = 0;
  if (v40)
    operator delete(v40);
  v41 = (_QWORD *)v343;
  if ((_QWORD)v343)
  {
    do
    {
      v42 = (_QWORD *)*v41;
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
  v43 = (void *)v342;
  *(_QWORD *)&v342 = 0;
  if (v43)
    operator delete(v43);
  v12 = *(_BYTE *)(a1 + 192) != 0;
  if (*(_BYTE *)(a1 + 192))
    goto LABEL_87;
  v64 = *(_QWORD **)(a1 + 80);
  if (v64 == (_QWORD *)(a1 + 88))
  {
LABEL_124:
    v65 = *(_QWORD **)(a1 + 104);
    if (v65 == (_QWORD *)(a1 + 112))
      goto LABEL_87;
    while ((*((_BYTE *)v65 + 76) & 6) == 0)
    {
      v68 = (_QWORD *)v65[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v65[2];
          v78 = *v69 == (_QWORD)v65;
          v65 = v69;
        }
        while (!v78);
      }
      v65 = v69;
      if (v69 == (_QWORD *)(a1 + 112))
        goto LABEL_87;
    }
  }
  else
  {
    while ((*((_BYTE *)v64 + 92) & 6) == 0)
    {
      v66 = (_QWORD *)v64[1];
      if (v66)
      {
        do
        {
          v67 = v66;
          v66 = (_QWORD *)*v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          v67 = (_QWORD *)v64[2];
          v78 = *v67 == (_QWORD)v64;
          v64 = v67;
        }
        while (!v78);
      }
      v64 = v67;
      if (v67 == (_QWORD *)(a1 + 88))
        goto LABEL_124;
    }
  }
  v70 = *(_QWORD *)(a1 + 128);
  v71 = *(_QWORD *)(a1 + 136);
  if (v70 == v71)
  {
    v72 = 0;
  }
  else
  {
    v72 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v70 + 48) + 52) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v70 + 56) + 52) & 6) == 0)
        ++v72;
      v70 += 120;
    }
    while (v70 != v71);
  }
  v82 = *(_QWORD **)(a1 + 152);
  v83 = *(_QWORD **)(a1 + 160);
  if (v82 == v83)
  {
    v84 = 0;
  }
  else
  {
    v84 = 0;
    do
    {
      if ((*(_BYTE *)(v82[10] + 52) & 6) == 0
        && (*(_BYTE *)(v82[11] + 52) & 6) == 0
        && (*(_BYTE *)(v82[12] + 36) & 6) == 0)
      {
        ++v84;
      }
      v82 += 20;
    }
    while (v82 != v83);
  }
  v44 = 3 * (v84 + v72);
LABEL_88:
  if (((*(_QWORD *)(a1 + 768) - *(_QWORD *)(a1 + 760)) & 0x3FFFFFFFCLL) != 0)
  {
    if (v12)
      return 0;
LABEL_100:
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 193))
      goto LABEL_246;
    v47 = a1 + 688;
    if (*(_DWORD *)(a1 + 380) == 1)
      v48 = 3;
    else
      v48 = 1;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 688) + 24))(a1 + 688) + 120))
    {
LABEL_245:
      kdebug_trace();
      return 1;
    }
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 688);
    v50 = (char **)sub_239C3B2C0(v49);
    v51 = v50;
    v332 = 0;
    v333 = 0;
    v334 = 0;
    if (&v332 == (void **)v50)
    {
      v52 = (char **)&v337;
    }
    else
    {
      sub_23942156C(&v332, *v50, v50[1], (v50[1] - *v50) >> 2);
      v52 = v51 + 6;
      if (v332 != v333)
      {
        v314 = v51;
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
        sub_239C2A864(v317, (char **)&v332, v51 + 6);
        sub_239C2A078((uint64_t)&v342, (char **)(v53 + 40), (char **)v317);
        if (v317[0])
        {
          v317[1] = v317[0];
          operator delete(v317[0]);
        }
        sub_239C2A988(v317, (char **)&v342, (char **)&v332);
        v54 = 3 * ((*((_QWORD *)&v342 + 1) - (_QWORD)v342) >> 2);
        *(_DWORD *)(a1 + 712) = v54;
        sub_23945215C(a1 + 696, v54);
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 688);
        v57 = (_DWORD *)*((_QWORD *)&v342 + 1);
        v56 = (_DWORD *)v342;
        if ((_QWORD)v342 != *((_QWORD *)&v342 + 1))
        {
          v58 = 0;
          v59 = *(_QWORD **)(v55 + 8);
          do
          {
            if (*((_DWORD *)v59 + 8) == *v56)
            {
              v62 = v59;
            }
            else
            {
              do
              {
                v63 = (_QWORD *)v59[1];
                if (v63)
                {
                  do
                  {
                    v62 = v63;
                    v63 = (_QWORD *)*v63;
                  }
                  while (v63);
                }
                else
                {
                  do
                  {
                    v62 = (_QWORD *)v59[2];
                    v78 = *v62 == (_QWORD)v59;
                    v59 = v62;
                  }
                  while (!v78);
                }
                v59 = v62;
              }
              while (*((_DWORD *)v62 + 8) != *v56);
            }
            v60 = *(_OWORD *)(v62 + 7);
            v61 = *(_QWORD *)(a1 + 696) + 8 * v58;
            *(_QWORD *)(v61 + 16) = v62[9];
            *(_OWORD *)v61 = v60;
            v58 += 3;
            ++v56;
            v59 = v62;
          }
          while (v56 != v57);
        }
        v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 688);
        v74 = *(_QWORD **)(v73 + 8);
        v75 = (_QWORD *)(v73 + 16);
        v76 = v317[0];
        v77 = v317[1];
        v78 = v74 == (_QWORD *)(v73 + 16) || v317[0] == v317[1];
        if (v78)
        {
          v79 = *(_QWORD **)(v73 + 8);
        }
        else
        {
          v85 = 0;
          do
          {
            if (*v76 == *((_DWORD *)v74 + 8))
            {
              if (*((_BYTE *)v74 + 44))
                v86 = v85;
              else
                v86 = -1;
              v85 += *((unsigned __int8 *)v74 + 44);
              ++v76;
            }
            else
            {
              v86 = -1;
            }
            *((_DWORD *)v74 + 22) = v86;
            v87 = (_QWORD *)v74[1];
            if (v87)
            {
              do
              {
                v79 = v87;
                v87 = (_QWORD *)*v87;
              }
              while (v87);
            }
            else
            {
              do
              {
                v79 = (_QWORD *)v74[2];
                v78 = *v79 == (_QWORD)v74;
                v74 = v79;
              }
              while (!v78);
            }
            if (v79 == v75)
              break;
            v74 = v79;
          }
          while (v76 != v77);
        }
        if (v79 != v75)
        {
          do
          {
            *((_DWORD *)v79 + 22) = -1;
            v88 = (_QWORD *)v79[1];
            if (v88)
            {
              do
              {
                v89 = v88;
                v88 = (_QWORD *)*v88;
              }
              while (v88);
            }
            else
            {
              do
              {
                v89 = (_QWORD *)v79[2];
                v78 = *v89 == (_QWORD)v79;
                v79 = v89;
              }
              while (!v78);
            }
            v79 = v89;
          }
          while (v89 != v75);
        }
        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
        sub_239C25A58(v90, (char **)v317);
        v91 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688) + 32);
        v92 = *(unsigned int *)(v91 + 12);
        if ((_DWORD)v92)
        {
          for (j = 0; j < v92; ++j)
          {
            v95 = (uint64_t *)(*(_QWORD *)(v91 + 88) + 24 * j);
            v94 = *v95;
            v96 = v95[1];
            if (*v95 != v96)
            {
              v97 = *(_QWORD *)(v91 + 48);
              v98 = *(_QWORD *)(v91 + 56);
              v99 = *(_QWORD *)(v91 + 80);
              do
              {
                v100 = ((v98 - v97) << 6) - 1;
                if (v98 == v97)
                  v100 = 0;
                v101 = *(_QWORD *)(v91 + 72) + v99;
                if (v100 == v101)
                {
                  sub_2396DA1D4(v91 + 40);
                  v97 = *(_QWORD *)(v91 + 48);
                  v98 = *(_QWORD *)(v91 + 56);
                  v101 = *(_QWORD *)(v91 + 80) + *(_QWORD *)(v91 + 72);
                }
                *(_QWORD *)(*(_QWORD *)(v97 + ((v101 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v101 & 0x1FF)) = *(_QWORD *)(v94 + 8);
                v99 = *(_QWORD *)(v91 + 80) + 1;
                *(_QWORD *)(v91 + 80) = v99;
                v94 += 16;
              }
              while (v94 != v96);
              v94 = *v95;
              v92 = *(unsigned int *)(v91 + 12);
            }
            v95[1] = v94;
          }
        }
        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
        v103 = *(unsigned int *)(v102 + 16);
        if ((_DWORD)v103)
          bzero(*(void **)v102, 8 * v103);
        if (((*(_QWORD *)(a1 + 768) - *(_QWORD *)(a1 + 760)) & 0x3FFFFFFFCLL) != 0)
        {
          v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
          sub_239C1F378(v104, a1 + 720);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(a1 + 688, v48);
        v330[0] = 0;
        v330[1] = 0;
        v331 = 0;
        memset(v329, 0, sizeof(v329));
        v105 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 688) + 40);
        if (*(_BYTE *)(a1 + 784))
        {
          v106 = v105(a1 + 688);
          sub_239C2AD44(v106, &v332, (uint64_t)v329);
        }
        else
        {
          v107 = v105(a1 + 688);
          sub_239C2AAAC(v107, &v332, (uint64_t)v329, (uint64_t)v330);
        }
        memset(v328, 0, sizeof(v328));
        memset(v327, 0, sizeof(v327));
        v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
        sub_239C2AF64(v108, &v332, &v342, (uint64_t)v328, (uint64_t)v327);
        sub_239C25A58(a1 + 720, (char **)&v342);
        v109 = *(_QWORD *)(a1 + 752);
        v110 = *(unsigned int *)(v109 + 12);
        if ((_DWORD)v110)
        {
          for (k = 0; k < v110; ++k)
          {
            v113 = (uint64_t *)(*(_QWORD *)(v109 + 88) + 24 * k);
            v112 = *v113;
            v114 = v113[1];
            if (*v113 != v114)
            {
              v115 = *(_QWORD *)(v109 + 48);
              v116 = *(_QWORD *)(v109 + 56);
              v117 = *(_QWORD *)(v109 + 80);
              do
              {
                v118 = ((v116 - v115) << 6) - 1;
                if (v116 == v115)
                  v118 = 0;
                v119 = *(_QWORD *)(v109 + 72) + v117;
                if (v118 == v119)
                {
                  sub_2396DA1D4(v109 + 40);
                  v115 = *(_QWORD *)(v109 + 48);
                  v116 = *(_QWORD *)(v109 + 56);
                  v119 = *(_QWORD *)(v109 + 80) + *(_QWORD *)(v109 + 72);
                }
                *(_QWORD *)(*(_QWORD *)(v115 + ((v119 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v119 & 0x1FF)) = *(_QWORD *)(v112 + 8);
                v117 = *(_QWORD *)(v109 + 80) + 1;
                *(_QWORD *)(v109 + 80) = v117;
                v112 += 16;
              }
              while (v112 != v114);
              v112 = *v113;
              v110 = *(unsigned int *)(v109 + 12);
            }
            v113[1] = v112;
          }
        }
        v120 = *(unsigned int *)(a1 + 736);
        if ((_DWORD)v120)
          bzero(*(void **)(a1 + 720), 8 * v120);
        memset(v326, 0, sizeof(v326));
        v121 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 688) + 40);
        if (*(_BYTE *)(a1 + 784))
        {
          v122 = v121(a1 + 688);
          sub_239C2AD44(v122, &v342, (uint64_t)v326);
        }
        else
        {
          v123 = v121(a1 + 688);
          sub_239C2AAAC(v123, &v342, (uint64_t)v326, a1 + 720);
        }
        if (*(_BYTE *)(a1 + 785))
        {
          LOBYTE(v323) = *(_BYTE *)(a1 + 784);
          v124 = *(_QWORD *)(a1 + 816);
          if (!v124)
            sub_2394172E0();
          if (((*(uint64_t (**)(uint64_t, void **, void **, void **, void **, void **, uint64_t))(*(_QWORD *)v124 + 48))(v124, v329, v330, v328, &v323, v326, a1 + 720) & 1) != 0)goto LABEL_231;
        }
        else if (sub_239C2B370((uint64_t)v329, (uint64_t)v330, (uint64_t)v328, *(_BYTE *)(a1 + 784) != 0, (uint64_t)v326, a1 + 720))
        {
LABEL_231:
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 752) + 48))(*(_QWORD *)(a1 + 752));
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 752) + 56))(*(_QWORD *)(a1 + 752));
          sub_239C2B9E4(*(_QWORD *)(a1 + 752), (uint64_t *)v326, 0);
          v323 = 0;
          v324 = 0;
          v325 = 0;
          if (&v323 != (void **)(v314 + 12))
            sub_23942156C(&v323, v314[12], v314[13], (v314[13] - v314[12]) >> 2);
          v125 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
          sub_239C2A1C4(v125, v332, v333);
          v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
          sub_239C2C0AC(v126, (char **)&v323);
          if (v323)
          {
            v324 = v323;
            operator delete(v323);
          }
          v81 = 0;
          goto LABEL_238;
        }
        v81 = 1;
LABEL_238:
        free(v326[0]);
        free(v327[0]);
        free(v328[0]);
        free(v329[0]);
        free(v330[0]);
        if (v317[0])
        {
          v317[1] = v317[0];
          operator delete(v317[0]);
        }
        if ((_QWORD)v342)
        {
          *((_QWORD *)&v342 + 1) = v342;
          operator delete((void *)v342);
        }
        goto LABEL_242;
      }
    }
    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 688);
    sub_239C29F2C((uint64_t)&v342, (char **)(v80 + 40), v52);
    sub_239C2A078((uint64_t)v317, (char **)(a1 + 760), (char **)&v342);
    sub_239C2A1C4((uint64_t *)(a1 + 720), (_DWORD *)v317[0], (_DWORD *)v317[1]);
    if (v317[0])
    {
      v317[1] = v317[0];
      operator delete(v317[0]);
    }
    if ((_QWORD)v342)
    {
      *((_QWORD *)&v342 + 1) = v342;
      operator delete((void *)v342);
    }
    v81 = 0;
LABEL_242:
    if (v332)
    {
      v333 = v332;
      operator delete(v332);
    }
    if (v81)
      goto LABEL_245;
LABEL_246:
    sub_239C3B2C0(a1 + 72);
    if (*(_BYTE *)(a1 + 193))
    {
      v128 = *(_QWORD **)(a1 + 128);
      v127 = *(_QWORD **)(a1 + 136);
      if (v128 != v127)
      {
        while (!*((_BYTE *)v128 + 112))
        {
          v128 += 15;
          if (v128 == v127)
            goto LABEL_250;
        }
        --*(_DWORD *)(v128[6] + 56);
        --*(_DWORD *)(v128[7] + 56);
        v248 = (int64x2_t)xmmword_239F0C410;
        *(int64x2_t *)(a1 + 176) = vaddq_s64(*(int64x2_t *)(a1 + 176), (int64x2_t)xmmword_239F0C410);
        if (v128 != v127)
        {
          v249 = v128 + 15;
          if (v128 + 15 == v127)
          {
            v250 = v128;
          }
          else
          {
            v250 = v128;
            do
            {
              v251 = v249;
              if (*((_BYTE *)v128 + 232))
              {
                --*(_DWORD *)(v128[21] + 56);
                --*(_DWORD *)(v128[22] + 56);
                *(int64x2_t *)(a1 + 176) = vaddq_s64(*(int64x2_t *)(a1 + 176), v248);
              }
              else
              {
                *v250 = *v249;
                *(_OWORD *)(v250 + 1) = *((_OWORD *)v128 + 8);
                v250[3] = v128[18];
                v250[4] = v128[19];
                v250[5] = v128[20];
                v250[6] = v128[21];
                v250[7] = v128[22];
                v252 = *(_OWORD *)(v128 + 23);
                v250[10] = v128[25];
                *((_OWORD *)v250 + 4) = v252;
                v250[11] = v128[26];
                v253 = *(_OWORD *)(v128 + 27);
                v128[27] = 0;
                v128[28] = 0;
                v254 = (std::__shared_weak_count *)v250[13];
                *((_OWORD *)v250 + 6) = v253;
                if (v254)
                {
                  p_shared_owners = (unint64_t *)&v254->__shared_owners_;
                  do
                    v256 = __ldaxr(p_shared_owners);
                  while (__stlxr(v256 - 1, p_shared_owners));
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                    v248 = (int64x2_t)xmmword_239F0C410;
                  }
                }
                *((_BYTE *)v250 + 112) = *((_BYTE *)v128 + 232);
                v250 += 15;
              }
              v249 = v251 + 15;
              v128 = v251;
            }
            while (v251 + 15 != v127);
            v127 = *(_QWORD **)(a1 + 136);
          }
          if (v250 != v127)
          {
            while (v127 != v250)
            {
              v305 = (std::__shared_weak_count *)*(v127 - 2);
              if (v305)
              {
                v306 = (unint64_t *)&v305->__shared_owners_;
                do
                  v307 = __ldaxr(v306);
                while (__stlxr(v307 - 1, v306));
                if (!v307)
                {
                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                  std::__shared_weak_count::__release_weak(v305);
                }
              }
              v127 -= 15;
            }
            *(_QWORD *)(a1 + 136) = v250;
          }
        }
      }
LABEL_250:
      v130 = *(_QWORD *)(a1 + 152);
      v129 = *(_QWORD *)(a1 + 160);
      if (v130 != v129)
      {
        while (!*(_BYTE *)(v130 + 152))
        {
          v130 += 160;
          if (v130 == v129)
            goto LABEL_253;
        }
        --*(_DWORD *)(*(_QWORD *)(v130 + 80) + 56);
        --*(_DWORD *)(*(_QWORD *)(v130 + 88) + 56);
        --*(_DWORD *)(*(_QWORD *)(v130 + 96) + 40);
        v257 = (int64x2_t)xmmword_239F0C410;
        *(int64x2_t *)(a1 + 176) = vaddq_s64(*(int64x2_t *)(a1 + 176), (int64x2_t)xmmword_239F0C410);
        if (v130 != v129)
        {
          v258 = (_QWORD *)(v130 + 160);
          if (v130 + 160 == v129)
          {
            v259 = v130;
          }
          else
          {
            v259 = v130;
            do
            {
              v260 = v258;
              if (*(_BYTE *)(v130 + 312))
              {
                --*(_DWORD *)(*(_QWORD *)(v130 + 240) + 56);
                --*(_DWORD *)(*(_QWORD *)(v130 + 248) + 56);
                --*(_DWORD *)(*(_QWORD *)(v130 + 256) + 40);
                *(int64x2_t *)(a1 + 176) = vaddq_s64(*(int64x2_t *)(a1 + 176), v257);
              }
              else
              {
                *(_QWORD *)v259 = *v258;
                *(_OWORD *)(v259 + 8) = *(_OWORD *)(v130 + 168);
                *(_QWORD *)(v259 + 24) = *(_QWORD *)(v130 + 184);
                *(_QWORD *)(v259 + 32) = *(_QWORD *)(v130 + 192);
                *(_QWORD *)(v259 + 40) = *(_QWORD *)(v130 + 200);
                *(_QWORD *)(v259 + 48) = *(_QWORD *)(v130 + 208);
                *(_QWORD *)(v259 + 56) = *(_QWORD *)(v130 + 216);
                *(_QWORD *)(v259 + 64) = *(_QWORD *)(v130 + 224);
                *(_QWORD *)(v259 + 72) = *(_QWORD *)(v130 + 232);
                *(_QWORD *)(v259 + 80) = *(_QWORD *)(v130 + 240);
                *(_QWORD *)(v259 + 88) = *(_QWORD *)(v130 + 248);
                *(_QWORD *)(v259 + 96) = *(_QWORD *)(v130 + 256);
                v261 = *(_OWORD *)(v130 + 264);
                *(_QWORD *)(v259 + 120) = *(_QWORD *)(v130 + 280);
                *(_OWORD *)(v259 + 104) = v261;
                *(_QWORD *)(v259 + 128) = *(_QWORD *)(v130 + 288);
                v262 = *(_OWORD *)(v130 + 296);
                *(_QWORD *)(v130 + 304) = 0;
                *(_QWORD *)(v130 + 296) = 0;
                v263 = *(std::__shared_weak_count **)(v259 + 144);
                *(_OWORD *)(v259 + 136) = v262;
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                    v257 = (int64x2_t)xmmword_239F0C410;
                  }
                }
                *(_BYTE *)(v259 + 152) = *(_BYTE *)(v130 + 312);
                v259 += 160;
              }
              v258 = v260 + 20;
              v130 = (uint64_t)v260;
            }
            while (v260 + 20 != (_QWORD *)v129);
            v129 = *(_QWORD *)(a1 + 160);
          }
          if (v129 != v259)
          {
            v308 = sub_239C299F0(v129, v129, v259);
            for (m = *(_QWORD *)(a1 + 160); m != v308; m -= 160)
            {
              v310 = *(std::__shared_weak_count **)(m - 16);
              if (v310)
              {
                v311 = (unint64_t *)&v310->__shared_owners_;
                do
                  v312 = __ldaxr(v311);
                while (__stlxr(v312 - 1, v311));
                if (!v312)
                {
                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                  std::__shared_weak_count::__release_weak(v310);
                }
              }
            }
            *(_QWORD *)(a1 + 160) = v308;
          }
        }
      }
    }
LABEL_253:
    sub_239C297C8((_QWORD *)(a1 + 80));
    sub_239C298DC((_QWORD *)(a1 + 80));
    *(_WORD *)(a1 + 192) = 1;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
    *(_QWORD *)(a1 + 328) = *(_QWORD *)(a1 + 320);
    v131 = *(_QWORD **)(a1 + 80);
    if (v131 != (_QWORD *)(a1 + 88))
    {
      v132 = 0;
      do
      {
        v133 = *((unsigned __int8 *)v131 + 44);
        if (*((_BYTE *)v131 + 44))
          v134 = v132;
        else
          v134 = -1;
        *((_DWORD *)v131 + 22) = v134;
        v135 = (_QWORD *)v131[1];
        if (v135)
        {
          do
          {
            v136 = v135;
            v135 = (_QWORD *)*v135;
          }
          while (v135);
        }
        else
        {
          do
          {
            v136 = (_QWORD *)v131[2];
            v78 = *v136 == (_QWORD)v131;
            v131 = v136;
          }
          while (!v78);
        }
        v132 += v133;
        v131 = v136;
      }
      while (v136 != (_QWORD *)(a1 + 88));
    }
    v137 = *(_QWORD **)(a1 + 104);
    if (v137 != (_QWORD *)(a1 + 112))
    {
      v138 = 0;
      do
      {
        v139 = *((unsigned __int8 *)v137 + 44);
        if (*((_BYTE *)v137 + 44))
          v140 = v138;
        else
          v140 = -1;
        *((_DWORD *)v137 + 18) = v140;
        v141 = (_QWORD *)v137[1];
        if (v141)
        {
          do
          {
            v142 = v141;
            v141 = (_QWORD *)*v141;
          }
          while (v141);
        }
        else
        {
          do
          {
            v142 = (_QWORD *)v137[2];
            v78 = *v142 == (_QWORD)v137;
            v137 = v142;
          }
          while (!v78);
        }
        v138 += v139;
        v137 = v142;
      }
      while (v142 != (_QWORD *)(a1 + 112));
    }
    v315 = *(_DWORD *)(a1 + 356);
    v143 = *(_DWORD *)(a1 + 376);
    v317[0] = 0;
    v317[1] = 0;
    v318[0] = 0;
    v144 = *(_QWORD *)(a1 + 456);
    if (*(_BYTE *)(v144 + 120))
    {
      v145 = (char *)operator new(0x100uLL);
      v317[0] = v145;
      v317[1] = v145;
      v318[0] = v145 + 256;
      if (*(_BYTE *)(v144 + 120))
      {
        v146 = *(unsigned int *)(v144 + 24);
        if (v146 >= 0x41)
        {
          v317[0] = operator new(4 * v146);
          v317[1] = v317[0];
          v318[0] = (char *)v317[0] + 4 * v146;
          operator delete(v145);
        }
        v147 = *(_QWORD **)(v144 + 8);
        v148 = (_QWORD *)(v144 + 16);
        if (v147 != v148)
        {
          do
          {
            if (*((_BYTE *)v147 + 44))
            {
              v176 = (char *)v317[1];
              if (v317[1] >= v318[0])
              {
                v178 = (char *)v317[0];
                v179 = (char *)v317[1] - (char *)v317[0];
                v180 = ((char *)v317[1] - (char *)v317[0]) >> 2;
                v181 = v180 + 1;
                if ((unint64_t)(v180 + 1) >> 62)
                  sub_2394189F8();
                v182 = (char *)v318[0] - (char *)v317[0];
                if (((char *)v318[0] - (char *)v317[0]) >> 1 > v181)
                  v181 = v182 >> 1;
                if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL)
                  v183 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v183 = v181;
                if (v183)
                {
                  if (v183 >> 62)
LABEL_532:
                    sub_239418A80();
                  v184 = operator new(4 * v183);
                }
                else
                {
                  v184 = 0;
                }
                v185 = &v184[4 * v180];
                *v185 = *((_DWORD *)v147 + 8);
                v177 = v185 + 1;
                if (v176 != v178)
                {
                  v186 = v176 - 4 - v178;
                  if (v186 < 0x2C)
                    goto LABEL_543;
                  if ((unint64_t)(v176 - &v184[v179]) < 0x20)
                    goto LABEL_543;
                  v187 = (v186 >> 2) + 1;
                  v188 = &v184[4 * v180 - 16];
                  v189 = v176 - 16;
                  v190 = v187 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v191 = *(_OWORD *)v189;
                    *(v188 - 1) = *((_OWORD *)v189 - 1);
                    *v188 = v191;
                    v188 -= 2;
                    v189 -= 32;
                    v190 -= 8;
                  }
                  while (v190);
                  v185 -= v187 & 0x7FFFFFFFFFFFFFF8;
                  v176 -= 4 * (v187 & 0x7FFFFFFFFFFFFFF8);
                  if (v187 != (v187 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_543:
                    do
                    {
                      v192 = *((_DWORD *)v176 - 1);
                      v176 -= 4;
                      *--v185 = v192;
                    }
                    while (v176 != v178);
                  }
                }
                v317[0] = v185;
                v317[1] = v177;
                v318[0] = &v184[4 * v183];
                if (v178)
                  operator delete(v178);
              }
              else
              {
                *(_DWORD *)v317[1] = *((_DWORD *)v147 + 8);
                v177 = v176 + 4;
              }
              v317[1] = v177;
            }
            v193 = (_QWORD *)v147[1];
            if (v193)
            {
              do
              {
                v194 = v193;
                v193 = (_QWORD *)*v193;
              }
              while (v193);
            }
            else
            {
              do
              {
                v194 = (_QWORD *)v147[2];
                v78 = *v194 == (_QWORD)v147;
                v147 = v194;
              }
              while (!v78);
            }
            v147 = v194;
          }
          while (v194 != v148);
        }
      }
    }
    sub_239C25A58(*(_QWORD *)(a1 + 464), (char **)v317);
    if (v143 == 1)
    {
      v149 = *(_QWORD *)(a1 + 472);
      v150 = *(_DWORD *)(*(_QWORD *)(a1 + 464) + 24);
      *(_QWORD *)(v149 + 24) = v150;
      sub_239C25B28(v149, 3 * v150);
    }
    sub_239C25CA0((uint64_t *)(a1 + 608), (unsigned int **)v317, v315);
    v151 = *(_QWORD *)(a1 + 456);
    v330[0] = 0;
    v152 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 568) = v152;
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 584);
    v153 = *(unsigned int *)(v151 + 48);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 576) - (_QWORD)v152) >> 3) < v153)
    {
      v154 = (char *)operator new(56 * v153);
      *(_QWORD *)(a1 + 560) = v154;
      *(_QWORD *)(a1 + 568) = v154;
      *(_QWORD *)(a1 + 576) = &v154[56 * v153];
      if (v152)
        operator delete(v152);
    }
    v313 = (_QWORD *)v151;
    v316 = a1 + 480;
    v329[0] = 0;
    v155 = *(_QWORD **)(v151 + 32);
    v156 = (_QWORD *)(v151 + 40);
    if (v155 != (_QWORD *)(v151 + 40))
    {
      while (*((_DWORD *)v155 + 18) == -1)
      {
        if ((*((_BYTE *)v155 + 76) & 2) == 0)
        {
          v161 = v329;
          v162 = 1;
LABEL_313:
          *v161 = (char *)*v161 + v162;
        }
        v174 = (_QWORD *)v155[1];
        if (v174)
        {
          do
          {
            v175 = v174;
            v174 = (_QWORD *)*v174;
          }
          while (v174);
        }
        else
        {
          do
          {
            v175 = (_QWORD *)v155[2];
            v78 = *v175 == (_QWORD)v155;
            v155 = v175;
          }
          while (!v78);
        }
        v155 = v175;
        if (v175 == v156)
          goto LABEL_350;
      }
      v157 = v155 + 5;
      v158 = *(_QWORD **)(a1 + 568);
      v159 = *(_QWORD *)(a1 + 576);
      if ((unint64_t)v158 >= v159)
      {
        v163 = *(_QWORD **)(a1 + 560);
        v164 = 0x6DB6DB6DB6DB6DB7 * (v158 - v163) + 1;
        if (v164 > 0x492492492492492)
          sub_2394189F8();
        v165 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v159 - (_QWORD)v163) >> 3);
        if (2 * v165 > v164)
          v164 = 2 * v165;
        if (v165 >= 0x249249249249249)
          v166 = 0x492492492492492;
        else
          v166 = v164;
        if (v166)
        {
          if (v166 > 0x492492492492492)
            goto LABEL_532;
          v167 = (char *)operator new(56 * v166);
        }
        else
        {
          v167 = 0;
        }
        v168 = &v167[8 * (v158 - v163)];
        *(_QWORD *)v168 = v157;
        *((_QWORD *)v168 + 5) = 0;
        *((_QWORD *)v168 + 6) = v316;
        *((_QWORD *)v168 + 3) = -1;
        *((_QWORD *)v168 + 4) = 0;
        if (v158 == v163)
        {
          v172 = &v167[8 * (v158 - v163)];
        }
        else
        {
          v169 = 0;
          do
          {
            v170 = &v168[v169 * 8];
            *((_QWORD *)v170 - 7) = v158[v169 - 7];
            *((_QWORD *)v170 - 6) = v158[v169 - 6];
            *((_QWORD *)v170 - 5) = v158[v169 - 5];
            v171 = *(_OWORD *)&v158[v169 - 2];
            *((_OWORD *)v170 - 2) = *(_OWORD *)&v158[v169 - 4];
            *((_OWORD *)v170 - 1) = v171;
            v169 -= 7;
          }
          while (&v158[v169] != v163);
          v172 = &v168[v169 * 8];
          v158 = *(_QWORD **)(a1 + 560);
        }
        *(_QWORD *)(a1 + 560) = v172;
        v160 = v168 + 56;
        *(_QWORD *)(a1 + 568) = v168 + 56;
        *(_QWORD *)(a1 + 576) = &v167[56 * v166];
        if (v158)
          operator delete(v158);
      }
      else
      {
        *v158 = v157;
        v158[5] = 0;
        v158[6] = v316;
        v160 = v158 + 7;
        v158[3] = -1;
        v158[4] = 0;
      }
      *(_QWORD *)(a1 + 568) = v160;
      v173 = v330[0];
      *(v160 - 3) = 0;
      *(v160 - 2) = 0;
      *(v160 - 4) = v173;
      v162 = (3 * *((_DWORD *)v155 + 20));
      v161 = v330;
      goto LABEL_313;
    }
LABEL_350:
    *((_QWORD *)&v343 + 1) = 0;
    v332 = &off_250AFBFB0;
    v333 = v329;
    v195 = v313;
    v334 = v313;
    v335 = &v332;
    sub_23965A910(&v332, &v342);
    v196 = v335;
    if (v335 == &v332)
    {
      v197 = 4;
      v196 = &v332;
    }
    else
    {
      if (!v335)
        goto LABEL_355;
      v197 = 5;
    }
    (*((void (**)(void))*v196 + v197))();
LABEL_355:
    v198 = v329[0];
    if (v329[0])
    {
      v199 = *(_BYTE **)(a1 + 584);
      if ((void *)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 600) - (_QWORD)v199) >> 3)) < v329[0])
      {
        if (v329[0] > (void *)0x492492492492492)
          sub_2394189F8();
        v200 = *(_BYTE **)(a1 + 592);
        v201 = (char *)operator new(56 * (uint64_t)v329[0]);
        v202 = &v201[v200 - v199];
        v203 = v202;
        if (v200 != v199)
        {
          v204 = 0;
          do
          {
            v205 = &v202[v204];
            *((_QWORD *)v205 - 7) = *(_QWORD *)&v200[v204 - 56];
            *((_QWORD *)v205 - 6) = *(_QWORD *)&v200[v204 - 48];
            *((_QWORD *)v205 - 5) = *(_QWORD *)&v200[v204 - 40];
            v206 = *(_OWORD *)&v200[v204 - 16];
            *((_OWORD *)v205 - 2) = *(_OWORD *)&v200[v204 - 32];
            *((_OWORD *)v205 - 1) = v206;
            v204 -= 56;
          }
          while (&v200[v204] != v199);
          v203 = &v202[v204];
        }
        *(_QWORD *)(a1 + 584) = v203;
        *(_QWORD *)(a1 + 592) = v202;
        *(_QWORD *)(a1 + 600) = &v201[56 * (_QWORD)v198];
        if (v199)
          operator delete(v199);
      }
      v207 = (_QWORD *)v313[4];
      if (v207 != v156)
      {
        do
        {
          if (*((_DWORD *)v207 + 18) == -1 && (*((_BYTE *)v207 + 76) & 2) == 0)
          {
            v208 = v207 + 5;
            v209 = *(_QWORD **)(a1 + 592);
            v210 = *(_QWORD *)(a1 + 600);
            if ((unint64_t)v209 >= v210)
            {
              v212 = *(_QWORD **)(a1 + 584);
              v213 = 0x6DB6DB6DB6DB6DB7 * (v209 - v212) + 1;
              if (v213 > 0x492492492492492)
                sub_2394189F8();
              v214 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v210 - (_QWORD)v212) >> 3);
              if (2 * v214 > v213)
                v213 = 2 * v214;
              if (v214 >= 0x249249249249249)
                v215 = 0x492492492492492;
              else
                v215 = v213;
              if (v215)
              {
                if (v215 > 0x492492492492492)
                  sub_239418A80();
                v216 = (char *)operator new(56 * v215);
              }
              else
              {
                v216 = 0;
              }
              v217 = &v216[8 * (v209 - v212)];
              *(_QWORD *)v217 = v208;
              *((_QWORD *)v217 + 5) = 0;
              *((_QWORD *)v217 + 6) = v316;
              *((_QWORD *)v217 + 3) = -1;
              *((_QWORD *)v217 + 4) = 0;
              if (v209 == v212)
              {
                v221 = &v216[8 * (v209 - v212)];
                v195 = v313;
              }
              else
              {
                v218 = 0;
                v195 = v313;
                do
                {
                  v219 = &v217[v218 * 8];
                  *((_QWORD *)v219 - 7) = v209[v218 - 7];
                  *((_QWORD *)v219 - 6) = v209[v218 - 6];
                  *((_QWORD *)v219 - 5) = v209[v218 - 5];
                  v220 = *(_OWORD *)&v209[v218 - 2];
                  *((_OWORD *)v219 - 2) = *(_OWORD *)&v209[v218 - 4];
                  *((_OWORD *)v219 - 1) = v220;
                  v218 -= 7;
                }
                while (&v209[v218] != v212);
                v221 = &v217[v218 * 8];
                v209 = *(_QWORD **)(a1 + 584);
              }
              *(_QWORD *)(a1 + 584) = v221;
              v211 = v217 + 56;
              *(_QWORD *)(a1 + 592) = v217 + 56;
              *(_QWORD *)(a1 + 600) = &v216[56 * v215];
              if (v209)
                operator delete(v209);
            }
            else
            {
              *v209 = v208;
              v209[5] = 0;
              v209[6] = v316;
              v211 = v209 + 7;
              v209[3] = -1;
              v209[4] = 0;
            }
            *(_QWORD *)(a1 + 592) = v211;
            v222 = v330[0];
            *(v211 - 3) = 0;
            *(v211 - 2) = 0;
            *(v211 - 4) = v222;
            v330[0] = (char *)v330[0] + (3 * *((_DWORD *)v207 + 20));
            *((_DWORD *)v207 + 18) = -1 - 1227133513 * ((*(_QWORD *)(a1 + 592) - *(_QWORD *)(a1 + 584)) >> 3);
          }
          v223 = (_QWORD *)v207[1];
          if (v223)
          {
            do
            {
              v224 = v223;
              v223 = (_QWORD *)*v223;
            }
            while (v223);
          }
          else
          {
            do
            {
              v224 = (_QWORD *)v207[2];
              v78 = *v224 == (_QWORD)v207;
              v207 = v224;
            }
            while (!v78);
          }
          v207 = v224;
        }
        while (v224 != v156);
      }
    }
    *(_QWORD *)(a1 + 488) = *(_QWORD *)(a1 + 480);
    *(_QWORD *)(a1 + 512) = *(_QWORD *)(a1 + 504);
    v225 = *(_QWORD *)(a1 + 536);
    *(_QWORD *)(a1 + 544) = v225;
    *(_QWORD *)(a1 + 528) = 0;
    v226 = (unint64_t)v330[0];
    if (v330[0])
    {
      sub_23946DAD4(v316, (unint64_t)v330[0]);
      v227 = *(_QWORD *)(a1 + 544);
      v225 = *(_QWORD *)(a1 + 536);
    }
    else
    {
      v227 = v225;
    }
    v228 = (v227 - v225) >> 4;
    v229 = v226 - v228;
    if (v226 <= v228)
    {
      if (v226 >= v228)
        goto LABEL_452;
      v244 = v225 + 16 * v226;
      goto LABEL_424;
    }
    v230 = *(_QWORD *)(a1 + 552);
    if (v229 > (v230 - v227) >> 4)
    {
      if (v226 >> 60)
        sub_2394189F8();
      v231 = v230 - v225;
      v232 = v231 >> 3;
      if (v231 >> 3 <= v226)
        v232 = v226;
      if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF0)
        v233 = 0xFFFFFFFFFFFFFFFLL;
      else
        v233 = v232;
      if (v233 >> 60)
        sub_239418A80();
      v234 = (char *)operator new(16 * v233);
      v235 = &v234[16 * v228];
      v236 = &v234[16 * v226];
      v237 = v235;
      v238 = (v229 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v238)
      {
        v239 = (v238 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v240 = v235 + 16;
        v241 = v239;
        do
        {
          *((_DWORD *)v240 - 4) = -1;
          *(_DWORD *)v240 = -1;
          *((_QWORD *)v240 - 1) = -1;
          *((_QWORD *)v240 + 1) = -1;
          v240 += 32;
          v241 -= 2;
        }
        while (v241);
        if (v238 + 1 == v239)
          goto LABEL_413;
        v237 = &v235[16 * v239];
      }
      do
      {
        *(_DWORD *)v237 = -1;
        *((_QWORD *)v237 + 1) = -1;
        v237 += 16;
      }
      while (v237 != v236);
LABEL_413:
      v242 = &v234[16 * v233];
      if (v227 == v225)
      {
        v243 = &v234[16 * v228];
      }
      else
      {
        do
        {
          v243 = v235 - 16;
          *((_OWORD *)v235 - 1) = *(_OWORD *)(v227 - 16);
          v227 -= 16;
          v235 -= 16;
        }
        while (v227 != v225);
      }
      v266 = *(void **)(a1 + 536);
      *(_QWORD *)(a1 + 536) = v243;
      *(_QWORD *)(a1 + 544) = v236;
      *(_QWORD *)(a1 + 552) = v242;
      if (v266)
        operator delete(v266);
LABEL_452:
      v267 = (_QWORD *)v195[10];
      v268 = (_QWORD *)v195[11];
      if (v267 != v268)
      {
        v269 = 0;
        while (1)
        {
          v271 = v267[10];
          if (*(_BYTE *)(v271 + 4) && *(_DWORD *)(v271 + 48) == -1)
            goto LABEL_457;
          v272 = v267[11];
          if (*(_BYTE *)(v272 + 4))
          {
            if (*(_DWORD *)(v272 + 48) == -1)
              goto LABEL_457;
          }
          v273 = v267[12];
          v274 = *(_DWORD *)(v273 + 32);
          if (*(_BYTE *)(v273 + 4))
            break;
          if ((*(_BYTE *)(v273 + 36) & 2) != 0)
            goto LABEL_457;
          v295 = *(_QWORD *)(a1 + 584) + 56 * v274;
          v296 = *(_QWORD *)(v295 + 32);
          v279 = (uint64_t *)(v295 + 32);
          *(_QWORD *)(*(_QWORD *)v279[2] + 8 * (v296 + *(v279 - 1))) = v269;
LABEL_456:
          ++*v279;
LABEL_457:
          v267 += 20;
          ++v269;
          if (v267 == v268)
            goto LABEL_487;
        }
        if (v274 == -1)
          goto LABEL_457;
        v275 = *(_QWORD *)(a1 + 560) + 56 * v274;
        v277 = *(_QWORD *)(v275 + 24);
        v276 = (uint64_t *)(v275 + 24);
        v278 = (_QWORD *)v276[3];
        *(_QWORD *)(*v278 + 8 * (v276[1] + v277)) = v269;
        ++v276[1];
        v279 = v276 + 2;
        v280 = *(_DWORD *)(v271 + 48);
        if (v280 != -1)
        {
          v281 = *v276;
          v282 = *v279;
          v283 = *v279 + *v276;
          v284 = v278[7];
          if (v283 <= *v276)
          {
LABEL_469:
            v287 = v284 + 16 * v283;
          }
          else
          {
            v285 = 16 * v281;
            while (1)
            {
              v286 = *(_DWORD *)(v284 + v285);
              if (v286 >= v280)
                break;
              ++v281;
              v285 += 16;
              if (!--v282)
                goto LABEL_469;
            }
            if (v286 <= v280)
              goto LABEL_471;
            if (v283 + 1 != v281)
            {
              memmove((void *)(16 * v283 - (16 * (v283 + 1) - (v284 + 16 * v281)) + 32), (const void *)(v284 + 16 * v281), 16 * (v283 + 1) - 16 * v281);
              v284 = v278[7];
              v272 = v267[11];
            }
            v287 = v284 + 16 * v281;
          }
          *(_DWORD *)v287 = v280;
          *(_QWORD *)(v287 + 8) = -1;
          ++v278[6];
          ++*v279;
        }
LABEL_471:
        v288 = *(_DWORD *)(v272 + 48);
        if (v288 == -1)
          goto LABEL_457;
        v289 = *v276;
        v290 = *v279;
        v291 = *v279 + *v276;
        v292 = v278[7];
        if (v291 <= *v276)
        {
LABEL_454:
          v270 = v292 + 16 * v291;
        }
        else
        {
          v293 = 16 * v289;
          while (1)
          {
            v294 = *(_DWORD *)(v292 + v293);
            if (v294 >= v288)
              break;
            ++v289;
            v293 += 16;
            if (!--v290)
              goto LABEL_454;
          }
          if (v294 <= v288)
            goto LABEL_457;
          if (v291 + 1 != v289)
          {
            memmove((void *)(v292 + 16 * v291 - (16 * (v291 + 1) - 16 * v289) + 32), (const void *)(v292 + 16 * v289), 16 * (v291 + 1) - 16 * v289);
            v292 = v278[7];
          }
          v270 = v292 + 16 * v289;
        }
        *(_DWORD *)v270 = v288;
        *(_QWORD *)(v270 + 8) = -1;
        ++v278[6];
        goto LABEL_456;
      }
LABEL_487:
      v297 = 3 * *(_QWORD *)(a1 + 528);
      v298 = *(_QWORD *)(a1 + 504);
      v299 = (*(_QWORD *)(a1 + 512) - v298) >> 3;
      if (v297 <= v299)
      {
        if (v297 < v299)
          *(_QWORD *)(a1 + 512) = v298 + 24 * *(_QWORD *)(a1 + 528);
      }
      else
      {
        sub_23945E108(a1 + 504, v297 - v299);
      }
      v300 = *(_QWORD *)(a1 + 536);
      v301 = *(_QWORD *)(a1 + 544);
      if (v300 != v301)
      {
        v302 = 0;
        do
        {
          if (*(_DWORD *)v300 != -1)
          {
            *(_QWORD *)(v300 + 8) = v302;
            v302 += 3;
          }
          v300 += 16;
        }
        while (v300 != v301);
      }
      if (!*((_QWORD *)&v343 + 1))
        sub_2394172E0();
      (*(void (**)(_QWORD))(**((_QWORD **)&v343 + 1) + 48))(*((_QWORD *)&v343 + 1));
      v303 = (__int128 *)*((_QWORD *)&v343 + 1);
      if (*((__int128 **)&v343 + 1) == &v342)
      {
        v304 = 4;
        v303 = &v342;
      }
      else
      {
        if (!*((_QWORD *)&v343 + 1))
        {
LABEL_502:
          if (v317[0])
          {
            v317[1] = v317[0];
            operator delete(v317[0]);
          }
          kdebug_trace();
          return 0;
        }
        v304 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v303 + 8 * v304))();
      goto LABEL_502;
    }
    v244 = v227 + 16 * v229;
    if (((v229 - 1) & 0xFFFFFFFFFFFFFFFLL) != 0)
    {
      v245 = ((v229 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v246 = v227 + 16;
      v247 = v245 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(_DWORD *)(v246 - 16) = -1;
        *(_DWORD *)v246 = -1;
        *(_QWORD *)(v246 - 8) = -1;
        *(_QWORD *)(v246 + 8) = -1;
        v246 += 32;
        v247 -= 2;
      }
      while (v247);
      if (v245 == (v245 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_424;
      v227 += 16 * (v245 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      *(_DWORD *)v227 = -1;
      *(_QWORD *)(v227 + 8) = -1;
      v227 += 16;
    }
    while (v227 != v244);
LABEL_424:
    *(_QWORD *)(a1 + 544) = v244;
    goto LABEL_452;
  }
  if (v3)
    v45 = v44 >= v3;
  else
    v45 = 0;
  result = !v45;
  if (!v45)
    v12 = 1;
  if (!v12)
    goto LABEL_100;
  return result;
}

void sub_239C39C4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44)
{
  if (__p)
    operator delete(__p);
  free(a27);
  free(a30);
  free(a33);
  free(a36);
  free(a39);
  JUMPOUT(0x239C39DECLL);
}

void sub_239C39D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v14 = *(_QWORD *)(v13 - 168);
  if (!v14)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  v15 = *(_QWORD **)(v13 - 168);
  if (v15 == (_QWORD *)(v13 - 192))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 - 192);
  }
  else
  {
    if (!v15)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_8:
  if (a13)
    JUMPOUT(0x239C39E18);
  JUMPOUT(0x239C39E1CLL);
}

void sub_239C39D6C()
{
  JUMPOUT(0x239C39E1CLL);
}

void sub_239C39D74(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239C39DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_239C292B0((uint64_t)va);
  sub_239C292B0(v4 - 192);
  JUMPOUT(0x239C39DB8);
}

void sub_239C39DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  void *v45;

  if (__p)
    operator delete(__p);
  v45 = *(void **)(v43 - 192);
  if (v45)
  {
    *(_QWORD *)(v43 - 184) = v45;
    operator delete(v45);
  }
  if (a42)
    operator delete(a42);
  sub_239C25A28();
  _Unwind_Resume(a1);
}

void sub_239C39E28(uint64_t a1, double *a2, uint64_t a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t **v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  float64x2_t v36;
  float64x2_t v43;
  float64_t v45;
  unint64_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  float64x2_t v53;
  float64x2_t v56;
  unint64_t v59;
  float64x2_t v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  float64x2_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  long double v93;
  long double v94;
  float64x2_t v96;
  int v97;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v101;
  int v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  double v107;
  float64x2_t v108;
  double v109;
  float64x2_t v110;
  float64x2_t v111;
  double v112;
  float64x2_t v113;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  int64x2_t v128;
  float64x2_t v129;
  int64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  double v134;
  double v136;
  double v138;
  float64x2_t v140;
  double v142;
  float64x2_t v143;
  double v145;
  double v146;
  float64x2_t v147;
  float64x2_t v148;
  double v149;
  float64x2_t v150;
  double v151;
  float64x2_t v152;
  float64x2_t v153;
  double v154;
  float64x2_t v155;
  double v156;
  float64x2_t v157;
  float64x2_t v158;
  double v159;
  float64x2_t v160;
  float64x2_t v161;
  double v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  int64x2_t v167;
  float64x2_t v168;
  int8x16_t v169;
  int64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  double v176;
  double v177;
  double v179;
  double v181;
  float64x2_t v183;
  double v185;
  float64x2_t v186;
  double v188;
  float64x2_t v189;
  float64x2_t v190[3];
  float64x2_t v191;
  double v192;
  _BYTE v193[72];
  double v194;
  double v195;
  double v196;
  __int128 v197;
  double v198;
  float64x2_t v199;
  __int128 v200;
  double v201;
  uint64_t v202;
  __int128 v203;
  float64x2_t v204[8];

  v9 = (float64x2_t **)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 48) + 16;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 40) + 16;
  *(_QWORD *)(a1 + 32) = v10;
  memset(v193, 0, sizeof(v193));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)v193;
  v11 = *(_OWORD *)&v193[16];
  v12 = *(_OWORD *)&v193[32];
  v13 = *(_OWORD *)&v193[48];
  *(_QWORD *)(a3 + 136) = *(_QWORD *)&v193[64];
  *(_OWORD *)(a3 + 120) = v13;
  *(_OWORD *)(a3 + 104) = v12;
  *(_OWORD *)(a3 + 88) = v11;
  v199 = 0u;
  v200 = 0u;
  BYTE8(v200) = 1;
  v201 = 0.0;
  v202 = 1;
  memset(v190, 0, sizeof(v190));
  v191 = 0u;
  v192 = 0.0;
  *(float64x2_t *)v193 = *(float64x2_t *)((char *)&v204[3] + 8);
  *(float64x2_t *)&v193[48] = *(float64x2_t *)((char *)&v204[6] + 8);
  *(float64x2_t *)&v193[32] = *(float64x2_t *)((char *)&v204[5] + 8);
  *(float64x2_t *)&v193[16] = *(float64x2_t *)((char *)&v204[4] + 8);
  memset(v204, 0, sizeof(v204));
  v203 = 0u;
  *(_QWORD *)&v193[64] = 0;
  v194 = 0.0;
  v195 = 0.0;
  v196 = 0.0;
  v198 = 0.0;
  v197 = *(__int128 *)((char *)v204 + 8);
  sub_239C23688(a1 + 16, (uint64_t)&v199, (uint64_t)v190, *(float64x2_t *)((char *)v204 + 8), 0.0, *(float64x2_t *)((char *)&v204[6] + 8));
  *(_QWORD *)&v27.f64[0] = v200;
  v28.f64[0] = 1.0 / v201;
  v29.f64[1] = v199.f64[1];
  _Q7.f64[0] = 0.0;
  v31.f64[0] = -1.0 / (v201 * v201);
  v32 = vmulq_n_f64(v199, v31.f64[0]);
  v33 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v33 + 24))
  {
    _V1.D[1] = v190[0].f64[1];
    _Q5.f64[1] = v190[2].f64[0];
    _V18.D[1] = v191.f64[1];
    v36.f64[0] = 0.0;
    v36.f64[1] = 1.0 / v201;
    __asm { FMLA            D23, D7, V1.D[1] }
    v14.f64[0] = _D23 + v28.f64[0] * v190[1].f64[0];
    __asm { FMLA            D23, D7, V5.D[1] }
    _Q5.f64[0] = _D23 + v28.f64[0] * v190[2].f64[1];
    v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v201), v191.f64[0]), v36, v191, 1), (float64x2_t)0, v192);
    __asm { FMLA            D2, D7, V18.D[1] }
    v18.f64[0] = _D2 + v28.f64[0] * v192;
    v16 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v201), v190[0].f64[0]), v36, v190[0], 1), (float64x2_t)0, v190[1].f64[0]), (float64x2_t)0);
    v19 = vaddq_f64(v14, (float64x2_t)0);
    v15 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v201), v190[1].f64[1]), v36, *(float64x2_t *)((char *)&v190[1] + 8), 1), (float64x2_t)0, v190[2].f64[1]), (float64x2_t)0);
    v20 = vaddq_f64(_Q5, (float64x2_t)0);
    v14 = vaddq_f64(v43, (float64x2_t)0);
    v21 = vaddq_f64(v18, (float64x2_t)0);
    v45 = v15.f64[1];
    v46 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    v24 = (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
  }
  else
  {
    v16.f64[0] = 0.0;
    v24.f64[0] = 0.0;
    v19.f64[0] = 0.0;
    v15.f64[0] = 0.0;
    v45 = 0.0;
    v20.f64[0] = 0.0;
    v14.f64[0] = 0.0;
    v46 = 0;
    v21.f64[0] = 0.0;
  }
  v47 = vmulq_n_f64(v199, v28.f64[0]);
  *(_QWORD *)&v48 = *(_OWORD *)&vmulq_f64(v27, v31);
  v49 = (float64x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
  {
    _V4.D[1] = *(_QWORD *)&v193[8];
    _Q24.f64[1] = *(float64_t *)&v193[32];
    _V28.D[1] = *(_QWORD *)&v193[56];
    _Q7.f64[1] = 1.0 / v201;
    v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v201), *(double *)v193), _Q7, *(float64x2_t *)v193, 1), (float64x2_t)0, *(double *)&v193[16]);
    _D9 = 0;
    __asm { FMLA            D10, D9, V4.D[1] }
    v29.f64[0] = _D10 + v28.f64[0] * *(double *)&v193[16];
    v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v201), *(double *)&v193[24]), _Q7, *(float64x2_t *)&v193[24], 1), (float64x2_t)0, *(double *)&v193[40]);
    __asm { FMLA            D10, D9, V24.D[1] }
    _Q24.f64[0] = _D10 + v28.f64[0] * *(double *)&v193[40];
    v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v201), *(double *)&v193[48]), _Q7, *(float64x2_t *)&v193[48], 1), (float64x2_t)0, *(double *)&v193[64]);
    __asm { FMLA            D5, D9, V28.D[1] }
    _Q7.f64[0] = _D5 + v28.f64[0] * *(double *)&v193[64];
    _Q5 = vaddq_f64(v53, (float64x2_t)0);
    v22 = vaddq_f64(v29, (float64x2_t)0);
    v31 = vaddq_f64(v56, (float64x2_t)0);
    v23 = vaddq_f64(_Q24, (float64x2_t)0);
    v29 = vaddq_f64(v25, (float64x2_t)0);
    _Q7 = vaddq_f64(_Q7, (float64x2_t)0);
    v25.f64[0] = v31.f64[1];
    v26 = (float64x2_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
    v59 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  }
  else
  {
    _Q5.f64[0] = 0.0;
    v59 = 0;
    v22.f64[0] = 0.0;
    v31.f64[0] = 0.0;
    v25.f64[0] = 0.0;
    v23.f64[0] = 0.0;
    v29.f64[0] = 0.0;
    v26.f64[0] = 0.0;
  }
  v60 = vmulq_f64(v27, v28);
  v61 = (float64x2_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL);
  v62 = 0.0;
  if (*(_BYTE *)(v33 + 24))
  {
    v63.f64[0] = v32.f64[0];
    v63.f64[1] = v49.f64[0];
    v4.f64[0] = v48 * v194;
    v5.f64[0] = v48 * v195;
    v16.f64[1] = v24.f64[0];
    v15.f64[1] = v45;
    v24.f64[0] = v48 * v196;
    *(_QWORD *)&v14.f64[1] = v46;
    v16 = vmlaq_n_f64(v16, v63, v194);
    *(_QWORD *)&v64 = *(_OWORD *)&vaddq_f64(v19, v4);
    v15 = vmlaq_n_f64(v15, v63, v195);
    *(_QWORD *)&v65 = *(_OWORD *)&vaddq_f64(v20, v5);
    v14 = vmlaq_n_f64(v14, v63, v196);
    *(_QWORD *)&v66 = *(_OWORD *)&vaddq_f64(v21, v24);
    v67 = v15.f64[1];
    *(_QWORD *)&v68 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
    *(_QWORD *)&v69 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
    {
LABEL_9:
      v32.f64[1] = v49.f64[0];
      v49.f64[0] = v48 * *(double *)&v197;
      v3.f64[0] = v48 * *((double *)&v197 + 1);
      *(_QWORD *)&_Q5.f64[1] = v59;
      v31.f64[1] = v25.f64[0];
      v25.f64[0] = v48 * v198;
      v29.f64[1] = v26.f64[0];
      _Q5 = vmlaq_n_f64(_Q5, v32, *(double *)&v197);
      *(_QWORD *)&v49.f64[0] = *(_OWORD *)&vaddq_f64(v22, v49);
      v31 = vmlaq_n_f64(v31, v32, *((double *)&v197 + 1));
      *(_QWORD *)&v70 = *(_OWORD *)&vaddq_f64(v23, v3);
      v29 = vmlaq_n_f64(v29, v32, v198);
      *(_QWORD *)&v62 = *(_OWORD *)&vaddq_f64(_Q7, v25);
      v71 = v31.f64[1];
      *(_QWORD *)&v72 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      *(_QWORD *)&v73 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
      goto LABEL_12;
    }
  }
  else
  {
    v16.f64[0] = 0.0;
    v68 = 0.0;
    v64 = 0.0;
    v15.f64[0] = 0.0;
    v67 = 0.0;
    v65 = 0.0;
    v14.f64[0] = 0.0;
    v69 = 0.0;
    v66 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
      goto LABEL_9;
  }
  _Q5.f64[0] = 0.0;
  v72 = 0.0;
  v49.f64[0] = 0.0;
  v31.f64[0] = 0.0;
  v71 = 0.0;
  v70 = 0.0;
  v29.f64[0] = 0.0;
  v73 = 0.0;
LABEL_12:
  v32.f64[0] = (*v9)[1].f64[0];
  v47.f64[1] = v61.f64[0];
  v74 = vsubq_f64(**v9, v47);
  v75 = vsubq_f64(v32, v60);
  *(_QWORD *)&v76 = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
  if (*(_BYTE *)(v33 + 24))
  {
    v47.f64[0] = *(float64_t *)(a3 + 16);
    v61.f64[0] = *(float64_t *)(a3 + 40);
    v26.f64[0] = *(float64_t *)(a3 + 64);
    v77 = *(float64x2_t *)(a3 + 48);
    v78 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v16.f64[0]), (float64x2_t)xmmword_239EC68E0, v68), (float64x2_t)0, v64);
    v16.f64[0] = v16.f64[0] * 0.0 + v68 * 0.0 - v64;
    v79 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v15.f64[0]), (float64x2_t)xmmword_239EC68E0, v67), (float64x2_t)0, v65);
    v15.f64[0] = v15.f64[0] * 0.0 + v67 * 0.0 - v65;
    v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v14.f64[0]), (float64x2_t)xmmword_239EC68E0, v69), (float64x2_t)0, v66);
    v14.f64[0] = v14.f64[0] * 0.0 + v69 * 0.0 - v66;
    v16 = vaddq_f64(v16, v47);
    v60 = vaddq_f64(v79, *(float64x2_t *)(a3 + 24));
    v81 = vaddq_f64(v14, v26);
    *(float64x2_t *)a3 = vaddq_f64(v78, *(float64x2_t *)a3);
    *(float64_t *)(a3 + 16) = v16.f64[0];
    *(float64x2_t *)(a3 + 24) = v60;
    *(_QWORD *)(a3 + 40) = *(_OWORD *)&vaddq_f64(v15, v61);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(v80, v77);
    *(float64_t *)(a3 + 64) = v81.f64[0];
  }
  else
  {
    *(_QWORD *)(a3 + 64) = 0;
    v81.f64[1] = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  v82 = (float64x2_t *)(a3 + 72);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v81.f64[0] = *(float64_t *)(a3 + 88);
    v16.f64[0] = *(float64_t *)(a3 + 112);
    v60.f64[0] = *(float64_t *)(a3 + 136);
    v83 = *(float64x2_t *)(a3 + 120);
    v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, _Q5.f64[0]), (float64x2_t)xmmword_239EC68E0, v72), (float64x2_t)0, v49.f64[0]);
    _Q5.f64[0] = _Q5.f64[0] * 0.0 + v72 * 0.0 - v49.f64[0];
    v85 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v31.f64[0]), (float64x2_t)xmmword_239EC68E0, v71), (float64x2_t)0, v70);
    v31.f64[0] = v31.f64[0] * 0.0 + v71 * 0.0 - v70;
    v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v29.f64[0]), (float64x2_t)xmmword_239EC68E0, v73), (float64x2_t)0, v62);
    v29.f64[0] = v29.f64[0] * 0.0 + v73 * 0.0 - v62;
    v87 = *(_OWORD *)&vaddq_f64(v31, v16);
    v88 = vaddq_f64(v85, *(float64x2_t *)(a3 + 96));
    *(float64x2_t *)(a3 + 72) = vaddq_f64(v84, *(float64x2_t *)(a3 + 72));
    *(_QWORD *)(a3 + 88) = *(_OWORD *)&vaddq_f64(_Q5, v81);
    *(float64x2_t *)(a3 + 96) = v88;
    *(_QWORD *)(a3 + 112) = v87;
    *(float64x2_t *)(a3 + 120) = vaddq_f64(v86, v83);
    *(_QWORD *)(a3 + 136) = *(_OWORD *)&vaddq_f64(v29, v60);
  }
  else
  {
    *(_QWORD *)(a3 + 136) = 0;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *v82 = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
  }
  *(float64_t *)(a1 + 72) = v75.f64[0];
  *(float64_t *)&v89 = v74.f64[0];
  *((double *)&v89 + 1) = v76;
  *(_OWORD *)(a1 + 56) = v89;
  v90 = *(_QWORD *)(a1 + 88);
  if (v90)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v90 + 24))(v90, a1 + 56);
    v75.f64[0] = *(float64_t *)(a1 + 72);
    v74 = *(float64x2_t *)(a1 + 56);
    *(_QWORD *)&v76 = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
    v91 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v91 = 0;
  }
  v74.f64[1] = v76;
  v92 = a2[2];
  v93 = a2[3] * (a2[1] * (vmulq_f64(v74, v74).f64[0] + v76 * v76 + v75.f64[0] * v75.f64[0]));
  v94 = v93 + 1.0;
  _Q0.f64[0] = log1p(v93);
  v96.f64[0] = sqrt(1.0 / v94);
  *(float64x2_t *)(a1 + 56) = vmulq_n_f64(v74, v96.f64[0]);
  *(_QWORD *)(a1 + 72) = *(_OWORD *)&vmulq_f64(v75, v96);
  *(double *)(a1 + 80) = v92 * _Q0.f64[0];
  if (v91)
  {
    v189 = v96;
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
    v101 = v189;
    v102 = v97;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 4))
    {
      switch(v97)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v91 + 32);
          _Q2.f64[0] = *(float64_t *)(v91 + 56);
          v100.f64[0] = *(float64_t *)(v91 + 80);
          _Q0 = vmulq_f64(v189, _Q0);
          v103.f64[0] = v189.f64[0];
          v103.f64[1] = v189.f64[0];
          v104 = vmulq_f64(v103, *(float64x2_t *)(v91 + 16));
          _Q2 = vmulq_f64(v189, _Q2);
          v105 = vmulq_f64(v103, *(float64x2_t *)(v91 + 40));
          v100 = vmulq_f64(v189, v100);
          v106 = vmulq_f64(v103, *(float64x2_t *)(v91 + 64));
          v103.f64[0] = *(float64_t *)(a3 + 16);
          v107 = *(double *)(a3 + 40);
          v108 = *(float64x2_t *)(a3 + 24);
          v109 = *(double *)(a3 + 64);
          v110 = *(float64x2_t *)(a3 + 48);
          v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, *(double *)a3), v105, *(float64x2_t *)a3, 1), v106, v103.f64[0]);
          v112 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], *(double *)a3), *(double *)(a3 + 8), _Q2.f64[0]), v103.f64[0], v100.f64[0]);
          v113 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v108.f64[0]), v105, v108, 1), v106, v107);
          v114 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v108.f64[0]), *(double *)(a3 + 32), _Q2.f64[0]), v107, v100.f64[0]);
          v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v104, v110.f64[0]), v105, v110, 1), v106, v109);
          v105.f64[0] = *(float64_t *)(a3 + 56);
          *(float64x2_t *)a3 = v111;
          *(double *)(a3 + 16) = v112;
          *(float64x2_t *)(a3 + 24) = v113;
          *(double *)(a3 + 40) = v114;
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v110.f64[0]), v105.f64[0], _Q2.f64[0]), v109, v100.f64[0]);
          goto LABEL_33;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v91 + 32);
          v122 = vmulq_f64(v189, _Q0);
          v123.f64[0] = v189.f64[0];
          v123.f64[1] = v189.f64[0];
          v124 = vmulq_f64(v123, *(float64x2_t *)(v91 + 16));
          v123.f64[0] = *(float64_t *)(a3 + 64);
          v125 = *(float64x2_t *)(a3 + 32);
          v126 = *(float64x2_t *)(a3 + 16);
          v127 = vmulq_f64(v124, *(float64x2_t *)a3);
          v128 = (int64x2_t)vmulq_f64(v122, v126);
          v129 = (float64x2_t)vextq_s8((int8x16_t)v126, (int8x16_t)v125, 8uLL);
          v100 = vmulq_laneq_f64(v122, v125, 1);
          v130 = (int64x2_t)vmulq_f64(v124, v129);
          _Q0 = vmulq_f64(v122, v123);
          v98 = vmulq_f64(v124, *(float64x2_t *)(a3 + 48));
          _Q2 = (float64x2_t)vextq_s8((int8x16_t)v130, (int8x16_t)v100, 8uLL);
          *(float64x2_t *)a3 = v127;
          *(int64x2_t *)(a3 + 16) = vzip1q_s64(v128, v130);
          *(float64x2_t *)(a3 + 32) = _Q2;
          *(float64x2_t *)(a3 + 48) = v98;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 2:
          _Q0.f64[0] = v189.f64[0] * *(double *)(v91 + 16);
          v98.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v98 = vmulq_f64(v98, _Q0);
          v131 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), _Q0.f64[0]);
          v100 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), _Q0.f64[0]);
          v132 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), _Q0.f64[0]);
          _Q0 = vmulq_n_f64(*(float64x2_t *)a3, _Q0.f64[0]);
          *(float64x2_t *)a3 = _Q0;
          *(float64x2_t *)(a3 + 16) = v132;
          *(float64x2_t *)(a3 + 32) = v100;
          *(float64x2_t *)(a3 + 48) = v131;
          *(float64_t *)(a3 + 64) = v98.f64[0];
          break;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 64);
          _Q0 = vmulq_f64(v189, _Q0);
          v100 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v189.f64[0]);
          v133 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v189.f64[0]);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v189.f64[0]);
          v98 = vmulq_n_f64(*(float64x2_t *)a3, v189.f64[0]);
          *(float64x2_t *)a3 = v98;
          *(float64x2_t *)(a3 + 16) = _Q2;
          *(float64x2_t *)(a3 + 32) = v133;
          *(float64x2_t *)(a3 + 48) = v100;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v91 + 64))(v190, v91, v189.f64[0]);
          v101 = v189;
          _Q2.f64[0] = v190[2].f64[1];
          v100.f64[0] = v192;
          v134 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v136 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v138 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v140 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v190[0], *(double *)a3), *(float64x2_t *)((char *)&v190[1] + 8), *(float64x2_t *)a3, 1), v191, v134);
          __asm { FMLA            D21, D2, V7.D[1] }
          v142 = _D21 + v192 * v134;
          v143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v190[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v190[1] + 8), _Q17, 1), v191, v136);
          __asm { FMLA            D21, D2, V17.D[1] }
          v145 = _D21 + v192 * v136;
          v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v190[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v190[1] + 8), _Q19, 1), v191, v138);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v140;
          *(double *)(a3 + 16) = v142;
          *(float64x2_t *)(a3 + 24) = v143;
          *(double *)(a3 + 40) = v145;
          _Q0.f64[0] = _Q0.f64[0] + v100.f64[0] * v138;
LABEL_33:
          *(float64x2_t *)(a3 + 48) = v98;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 4))
    {
      switch(v102)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v91 + 32);
          _Q2.f64[0] = *(float64_t *)(v91 + 56);
          v100.f64[0] = *(float64_t *)(v91 + 80);
          *(_QWORD *)&v146 = *(_OWORD *)&vmulq_f64(v101, _Q0);
          v147.f64[0] = v101.f64[0];
          v147.f64[1] = v101.f64[0];
          v148 = vmulq_f64(v147, *(float64x2_t *)(v91 + 16));
          *(_QWORD *)&v149 = *(_OWORD *)&vmulq_f64(v101, _Q2);
          v150 = vmulq_f64(v147, *(float64x2_t *)(v91 + 40));
          *(_QWORD *)&v151 = *(_OWORD *)&vmulq_f64(v101, v100);
          v152 = vmulq_f64(v147, *(float64x2_t *)(v91 + 64));
          v147.f64[0] = *(float64_t *)(a3 + 88);
          v153 = *(float64x2_t *)(a3 + 72);
          v154 = *(double *)(a3 + 112);
          v155 = *(float64x2_t *)(a3 + 96);
          v156 = *(double *)(a3 + 136);
          v157 = *(float64x2_t *)(a3 + 120);
          v158 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v153.f64[0]), v150, v153, 1), v152, v147.f64[0]);
          v159 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v146, v153.f64[0]), *(double *)(a3 + 80), v149), v147.f64[0], v151);
          v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v155.f64[0]), v150, v155, 1), v152, v154);
          v153.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v146, v155.f64[0]), *(double *)(a3 + 104), v149), v154, v151);
          v161 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v148, v157.f64[0]), v150, v157, 1), v152, v156);
          v162 = vmlad_n_f64(vmuld_n_f64(v146, v157.f64[0]), *(double *)(a3 + 128), v149);
          *(float64x2_t *)(a3 + 72) = v158;
          *(double *)(a3 + 88) = v159;
          *(float64x2_t *)(a3 + 96) = v160;
          *(float64_t *)(a3 + 112) = v153.f64[0];
          _Q0.f64[0] = vmlad_n_f64(v162, v156, v151);
          goto LABEL_43;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v91 + 32);
          _Q0 = vmulq_f64(v101, _Q0);
          v101.f64[1] = v101.f64[0];
          v163 = vmulq_f64(v101, *(float64x2_t *)(v91 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 136);
          v164 = *(float64x2_t *)(a3 + 104);
          v165 = *(float64x2_t *)(a3 + 88);
          v166 = vmulq_f64(v163, *v82);
          v167 = (int64x2_t)vmulq_f64(_Q0, v165);
          v168 = (float64x2_t)vextq_s8((int8x16_t)v165, (int8x16_t)v164, 8uLL);
          v169 = (int8x16_t)vmulq_laneq_f64(_Q0, v164, 1);
          v170 = (int64x2_t)vmulq_f64(v163, v168);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, _Q2);
          v171 = vmulq_f64(v163, *(float64x2_t *)(a3 + 120));
          *v82 = v166;
          *(int64x2_t *)(a3 + 88) = vzip1q_s64(v167, v170);
          *(int8x16_t *)(a3 + 104) = vextq_s8((int8x16_t)v170, v169, 8uLL);
          *(float64x2_t *)(a3 + 120) = v171;
          goto LABEL_41;
        case 2:
          _Q0.f64[0] = v101.f64[0] * *(double *)(v91 + 16);
          v98.f64[0] = *(float64_t *)(a3 + 136);
          v172 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), _Q0.f64[0]);
          v173 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), _Q0.f64[0]);
          v174 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), _Q0.f64[0]);
          *v82 = vmulq_n_f64(*v82, _Q0.f64[0]);
          *(float64x2_t *)(a3 + 88) = v174;
          *(float64x2_t *)(a3 + 104) = v173;
          *(float64x2_t *)(a3 + 120) = v172;
          *(_QWORD *)(a3 + 136) = *(_OWORD *)&vmulq_f64(v98, _Q0);
          return;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 136);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v101, _Q0);
          v118 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v101.f64[0]);
          v119 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v101.f64[0]);
          v120 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v101.f64[0]);
          v121 = vmulq_n_f64(*v82, v101.f64[0]);
          goto LABEL_40;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v91 + 64))(v190, v91, v101.f64[0]);
          _D2 = v190[2].f64[1];
          v176 = v192;
          v177 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v179 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v181 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v183 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v190[0], _Q7.f64[0]), *(float64x2_t *)((char *)&v190[1] + 8), _Q7, 1), v191, v177);
          __asm { FMLA            D21, D2, V7.D[1] }
          v185 = _D21 + v192 * v177;
          v186 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v190[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v190[1] + 8), _Q17, 1), v191, v179);
          __asm { FMLA            D21, D2, V17.D[1] }
          v188 = _D21 + v192 * v179;
          v161 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v190[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v190[1] + 8), _Q19, 1), v191, v181);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)(a3 + 72) = v183;
          *(double *)(a3 + 88) = v185;
          *(float64x2_t *)(a3 + 96) = v186;
          *(double *)(a3 + 112) = v188;
          _Q0.f64[0] = _Q0.f64[0] + v176 * v181;
LABEL_43:
          *(float64x2_t *)(a3 + 120) = v161;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        default:
          return;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 64);
      _Q0 = vmulq_f64(v96, _Q0);
      v115 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v96.f64[0]);
      v116 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v96.f64[0]);
      v117 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v96.f64[0]);
      *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v96.f64[0]);
      *(float64x2_t *)(a3 + 16) = v117;
      *(float64x2_t *)(a3 + 32) = v116;
      *(float64x2_t *)(a3 + 48) = v115;
      *(float64_t *)(a3 + 64) = _Q0.f64[0];
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 136);
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v96, _Q0);
      v118 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v96.f64[0]);
      v119 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v96.f64[0]);
      v120 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v96.f64[0]);
      v121 = vmulq_n_f64(*v82, v96.f64[0]);
LABEL_40:
      *v82 = v121;
      *(float64x2_t *)(a3 + 88) = v120;
      *(float64x2_t *)(a3 + 104) = v119;
      *(float64x2_t *)(a3 + 120) = v118;
LABEL_41:
      *(float64_t *)(a3 + 136) = _Q0.f64[0];
    }
  }
}

void sub_239C3A984(uint64_t a1, double *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double v17;
  __int128 v18;
  float64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  float64x2_t *v23;
  double v30;
  long double v31;
  long double v32;
  float64x2_t v34;
  int v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  int v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double v45;
  float64x2_t v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int64x2_t v66;
  float64x2_t v67;
  int64x2_t v68;
  float64x2_t v69;
  double v70;
  double v72;
  double v74;
  float64x2_t v76;
  double v78;
  float64x2_t v79;
  double v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  int64x2_t v99;
  float64x2_t v100;
  int64x2_t v101;
  float64x2_t v102;
  double v103;
  double v105;
  double v107;
  float64x2_t v109;
  double v111;
  float64x2_t v112;
  double v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double v122;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  uint64_t v127;
  float64x2_t v128;
  uint64_t v129;
  char v130;
  float64x2_t v131[3];
  float64x2_t v132;
  _BYTE v133[80];
  __int128 v134;
  uint64_t v135;

  v128 = 0uLL;
  v129 = 0;
  v130 = 1;
  v14 = *(_QWORD *)(a1 + 80) + 16;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72) + 16;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 88) + 16;
  v135 = 0;
  *(_OWORD *)&v133[64] = 0u;
  v134 = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  v127 = a3;
  memset(v133, 0, 64);
  v132 = 0u;
  memset(v131, 0, sizeof(v131));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v133[8];
  v15 = *(_OWORD *)&v133[24];
  v16 = *(_OWORD *)&v133[40];
  v17 = *(double *)&v133[56];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&v133[56];
  *(_OWORD *)(a3 + 104) = v16;
  *(_OWORD *)(a3 + 88) = v15;
  v18 = v134;
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 144) = v18;
  sub_239C24464((float64x2_t **)(a1 + 16), &v128, &v127, *(double *)&v18, *(double *)&v16, v17, a7, a8, a9, a10, a11);
  *(float64x2_t *)(a1 + 96) = v128;
  *(_QWORD *)(a1 + 112) = v129;
  v20 = *(_QWORD *)(a1 + 128);
  if (v20)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 24))(v20, a1 + 96);
    v21 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    v21 = 0;
  }
  v22 = (float64x2_t *)(a3 + 72);
  v23 = (float64x2_t *)(a3 + 144);
  v19.f64[0] = *(float64_t *)(a1 + 112);
  v124 = *(float64x2_t *)(a1 + 96);
  v125 = v19;
  _D1 = v124.f64[1];
  __asm { FMLA            D0, D1, V3.D[1] }
  v30 = a2[2];
  v31 = a2[3] * (a2[1] * (_D0 + v19.f64[0] * v19.f64[0]));
  v32 = v31 + 1.0;
  _Q0.f64[0] = log1p(v31);
  v34.f64[0] = sqrt(1.0 / v32);
  *(float64x2_t *)(a1 + 96) = vmulq_n_f64(v124, v34.f64[0]);
  *(_QWORD *)(a1 + 112) = *(_OWORD *)&vmulq_f64(v125, v34);
  *(double *)(a1 + 120) = v30 * _Q0.f64[0];
  if (v21)
  {
    v126 = v34;
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    v40 = v126;
    v41 = v35;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      switch(v35)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v21 + 32);
          _Q2.f64[0] = *(float64_t *)(v21 + 56);
          v39.f64[0] = *(float64_t *)(v21 + 80);
          _Q0 = vmulq_f64(v126, _Q0);
          v42.f64[0] = v126.f64[0];
          v42.f64[1] = v126.f64[0];
          v43 = vmulq_f64(v42, *(float64x2_t *)(v21 + 16));
          _Q2 = vmulq_f64(v126, _Q2);
          v38 = vmulq_f64(v42, *(float64x2_t *)(v21 + 40));
          v39 = vmulq_f64(v126, v39);
          v44 = vmulq_f64(v42, *(float64x2_t *)(v21 + 64));
          v42.f64[0] = *(float64_t *)(a3 + 16);
          v45 = *(double *)(a3 + 40);
          v46 = *(float64x2_t *)(a3 + 24);
          v47 = *(double *)(a3 + 64);
          v48 = *(float64x2_t *)(a3 + 48);
          v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, *(double *)a3), v38, *(float64x2_t *)a3, 1), v44, v42.f64[0]);
          v50 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], *(double *)a3), *(double *)(a3 + 8), _Q2.f64[0]), v42.f64[0], v39.f64[0]);
          v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, v46.f64[0]), v38, v46, 1), v44, v45);
          v52 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v46.f64[0]), *(double *)(a3 + 32), _Q2.f64[0]), v45, v39.f64[0]);
          v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, v48.f64[0]), v38, v48, 1), v44, v47);
          v38.f64[0] = *(float64_t *)(a3 + 56);
          *(float64x2_t *)a3 = v49;
          *(double *)(a3 + 16) = v50;
          *(float64x2_t *)(a3 + 24) = v51;
          *(double *)(a3 + 40) = v52;
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v48.f64[0]), v38.f64[0], _Q2.f64[0]), v47, v39.f64[0]);
          goto LABEL_18;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v21 + 32);
          v60 = vmulq_f64(v126, _Q0);
          v61.f64[0] = v126.f64[0];
          v61.f64[1] = v126.f64[0];
          v62 = vmulq_f64(v61, *(float64x2_t *)(v21 + 16));
          v61.f64[0] = *(float64_t *)(a3 + 64);
          v63 = *(float64x2_t *)(a3 + 32);
          v64 = *(float64x2_t *)(a3 + 16);
          v65 = vmulq_f64(v62, *(float64x2_t *)a3);
          v66 = (int64x2_t)vmulq_f64(v60, v64);
          v67 = (float64x2_t)vextq_s8((int8x16_t)v64, (int8x16_t)v63, 8uLL);
          v39 = vmulq_laneq_f64(v60, v63, 1);
          v68 = (int64x2_t)vmulq_f64(v62, v67);
          _Q0 = vmulq_f64(v60, v61);
          v36 = vmulq_f64(v62, *(float64x2_t *)(a3 + 48));
          _Q2 = (float64x2_t)vextq_s8((int8x16_t)v68, (int8x16_t)v39, 8uLL);
          v38 = (float64x2_t)vzip1q_s64(v66, v68);
          *(float64x2_t *)a3 = v65;
          *(float64x2_t *)(a3 + 16) = v38;
          *(float64x2_t *)(a3 + 32) = _Q2;
          *(float64x2_t *)(a3 + 48) = v36;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 2:
          _Q0.f64[0] = v126.f64[0] * *(double *)(v21 + 16);
          v36.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v36 = vmulq_f64(v36, _Q0);
          v69 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), _Q0.f64[0]);
          v39 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), _Q0.f64[0]);
          v38 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), _Q0.f64[0]);
          _Q0 = vmulq_n_f64(*(float64x2_t *)a3, _Q0.f64[0]);
          *(float64x2_t *)a3 = _Q0;
          *(float64x2_t *)(a3 + 16) = v38;
          *(float64x2_t *)(a3 + 32) = v39;
          *(float64x2_t *)(a3 + 48) = v69;
          *(float64_t *)(a3 + 64) = v36.f64[0];
          break;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 64);
          _Q0 = vmulq_f64(v126, _Q0);
          v39 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v126.f64[0]);
          v38 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v126.f64[0]);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v126.f64[0]);
          v36 = vmulq_n_f64(*(float64x2_t *)a3, v126.f64[0]);
          *(float64x2_t *)a3 = v36;
          *(float64x2_t *)(a3 + 16) = _Q2;
          *(float64x2_t *)(a3 + 32) = v38;
          *(float64x2_t *)(a3 + 48) = v39;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v21 + 64))(v131, v21, v126.f64[0]);
          v40 = v126;
          _Q2.f64[0] = v131[2].f64[1];
          v38.f64[1] = v131[2].f64[0];
          v39.f64[0] = *(float64_t *)v133;
          v70 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v72 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v74 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v76 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131[0], *(double *)a3), *(float64x2_t *)((char *)&v131[1] + 8), *(float64x2_t *)a3, 1), v132, v70);
          __asm { FMLA            D21, D2, V7.D[1] }
          v78 = _D21 + *(double *)v133 * v70;
          v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v131[1] + 8), _Q17, 1), v132, v72);
          __asm { FMLA            D21, D2, V17.D[1] }
          v81 = _D21 + *(double *)v133 * v72;
          v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v131[1] + 8), _Q19, 1), v132, v74);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v76;
          *(double *)(a3 + 16) = v78;
          *(float64x2_t *)(a3 + 24) = v79;
          *(double *)(a3 + 40) = v81;
          _Q0.f64[0] = _Q0.f64[0] + v39.f64[0] * v74;
LABEL_18:
          *(float64x2_t *)(a3 + 48) = v36;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4))
    {
      switch(v41)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v21 + 32);
          _Q2.f64[0] = *(float64_t *)(v21 + 56);
          v39.f64[0] = *(float64_t *)(v21 + 80);
          _Q0 = vmulq_f64(v40, _Q0);
          v82.f64[0] = v40.f64[0];
          v82.f64[1] = v40.f64[0];
          v83 = vmulq_f64(v82, *(float64x2_t *)(v21 + 16));
          _Q2 = vmulq_f64(v40, _Q2);
          v38 = vmulq_f64(v82, *(float64x2_t *)(v21 + 40));
          v39 = vmulq_f64(v40, v39);
          v84 = vmulq_f64(v82, *(float64x2_t *)(v21 + 64));
          v82.f64[0] = *(float64_t *)(a3 + 88);
          v85 = *(float64x2_t *)(a3 + 72);
          v86 = *(double *)(a3 + 112);
          v87 = *(float64x2_t *)(a3 + 96);
          v88 = *(double *)(a3 + 136);
          v89 = *(float64x2_t *)(a3 + 120);
          v90 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v83, v85.f64[0]), v38, v85, 1), v84, v82.f64[0]);
          v91 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v85.f64[0]), *(double *)(a3 + 80), _Q2.f64[0]), v82.f64[0], v39.f64[0]);
          v92 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v83, v87.f64[0]), v38, v87, 1), v84, v86);
          v85.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v87.f64[0]), *(double *)(a3 + 104), _Q2.f64[0]), v86, v39.f64[0]);
          v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v83, v89.f64[0]), v38, v89, 1), v84, v88);
          v38.f64[0] = *(float64_t *)(a3 + 128);
          *(float64x2_t *)(a3 + 72) = v90;
          *(double *)(a3 + 88) = v91;
          *(float64x2_t *)(a3 + 96) = v92;
          *(float64_t *)(a3 + 112) = v85.f64[0];
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v89.f64[0]), v38.f64[0], _Q2.f64[0]), v88, v39.f64[0]);
          goto LABEL_26;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v21 + 32);
          v93 = vmulq_f64(v40, _Q0);
          v94.f64[0] = v40.f64[0];
          v94.f64[1] = v40.f64[0];
          v95 = vmulq_f64(v94, *(float64x2_t *)(v21 + 16));
          v94.f64[0] = *(float64_t *)(a3 + 136);
          v96 = *(float64x2_t *)(a3 + 104);
          v97 = *(float64x2_t *)(a3 + 88);
          v98 = vmulq_f64(v95, *v22);
          v99 = (int64x2_t)vmulq_f64(v93, v97);
          v100 = (float64x2_t)vextq_s8((int8x16_t)v97, (int8x16_t)v96, 8uLL);
          v39 = vmulq_laneq_f64(v93, v96, 1);
          v101 = (int64x2_t)vmulq_f64(v95, v100);
          _Q0 = vmulq_f64(v93, v94);
          v36 = vmulq_f64(v95, *(float64x2_t *)(a3 + 120));
          _Q2 = (float64x2_t)vextq_s8((int8x16_t)v101, (int8x16_t)v39, 8uLL);
          v38 = (float64x2_t)vzip1q_s64(v99, v101);
          *v22 = v98;
          *(float64x2_t *)(a3 + 88) = v38;
          *(float64x2_t *)(a3 + 104) = _Q2;
          *(float64x2_t *)(a3 + 120) = v36;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        case 2:
          _Q0.f64[0] = v40.f64[0] * *(double *)(v21 + 16);
          v36.f64[0] = *(float64_t *)(a3 + 136);
          _Q2 = *v22;
          v36 = vmulq_f64(v36, _Q0);
          v102 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), _Q0.f64[0]);
          v39 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), _Q0.f64[0]);
          v38 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), _Q0.f64[0]);
          _Q0 = vmulq_n_f64(*v22, _Q0.f64[0]);
          *v22 = _Q0;
          *(float64x2_t *)(a3 + 88) = v38;
          *(float64x2_t *)(a3 + 104) = v39;
          *(float64x2_t *)(a3 + 120) = v102;
          *(float64_t *)(a3 + 136) = v36.f64[0];
          break;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 136);
          _Q0 = vmulq_f64(v40, _Q0);
          v39 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v40.f64[0]);
          v38 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v40.f64[0]);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v40.f64[0]);
          v36 = vmulq_n_f64(*v22, v40.f64[0]);
          *v22 = v36;
          *(float64x2_t *)(a3 + 88) = _Q2;
          *(float64x2_t *)(a3 + 104) = v38;
          *(float64x2_t *)(a3 + 120) = v39;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v21 + 64))(v131, v21, v40.f64[0]);
          v40 = v126;
          _Q2.f64[0] = v131[2].f64[1];
          v38.f64[1] = v131[2].f64[0];
          v39.f64[0] = *(float64_t *)v133;
          v103 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v105 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v107 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v109 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131[0], _Q7.f64[0]), *(float64x2_t *)((char *)&v131[1] + 8), _Q7, 1), v132, v103);
          __asm { FMLA            D21, D2, V7.D[1] }
          v111 = _D21 + *(double *)v133 * v103;
          v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v131[1] + 8), _Q17, 1), v132, v105);
          __asm { FMLA            D21, D2, V17.D[1] }
          v114 = _D21 + *(double *)v133 * v105;
          v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v131[1] + 8), _Q19, 1), v132, v107);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)(a3 + 72) = v109;
          *(double *)(a3 + 88) = v111;
          *(float64x2_t *)(a3 + 96) = v112;
          *(double *)(a3 + 112) = v114;
          _Q0.f64[0] = _Q0.f64[0] + v39.f64[0] * v107;
LABEL_26:
          *(float64x2_t *)(a3 + 120) = v36;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 4))
    {
      switch(v41)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v21 + 32);
          _Q2.f64[0] = *(float64_t *)(v21 + 56);
          v39.f64[0] = *(float64_t *)(v21 + 80);
          v115.f64[0] = v40.f64[0];
          v115.f64[1] = v40.f64[0];
          v116 = vmulq_f64(v115, *(float64x2_t *)(v21 + 16));
          v117 = vmulq_f64(v115, *(float64x2_t *)(v21 + 40));
          v118 = vmulq_f64(v115, *(float64x2_t *)(v21 + 64));
          v115.f64[0] = *(float64_t *)(a3 + 160);
          v119 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v23->f64[0]), v117, *v23, 1), v118, v115.f64[0]);
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(vmulq_f64(v40, _Q0).f64[0], v23->f64[0]), *(double *)(a3 + 152), vmulq_f64(v40, _Q2).f64[0]), v115.f64[0], vmulq_f64(v40, v39).f64[0]);
          goto LABEL_35;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v21 + 32);
          v120.f64[0] = v40.f64[0];
          v120.f64[1] = v40.f64[0];
          v38.f64[0] = *(float64_t *)(a3 + 160);
          *(float64x2_t *)(a3 + 144) = vmulq_f64(vmulq_f64(v120, *(float64x2_t *)(v21 + 16)), *(float64x2_t *)(a3 + 144));
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(vmulq_f64(v40, _Q0), v38);
          return;
        case 2:
          _Q0.f64[0] = v40.f64[0] * *(double *)(v21 + 16);
          v36.f64[0] = *(float64_t *)(a3 + 160);
          *v23 = vmulq_n_f64(*v23, _Q0.f64[0]);
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v36, _Q0);
          return;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 160);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v40, _Q0);
          v40.f64[1] = v40.f64[0];
          v59 = vmulq_f64(v40, *v23);
          goto LABEL_33;
        case 4:
          (*(void (**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v21 + 64))(v131, v21, v40.f64[0]);
          _D2 = v131[2].f64[1];
          v122 = *(double *)(a3 + 160);
          _Q7 = *v23;
          v119 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131[0], v23->f64[0]), *(float64x2_t *)((char *)&v131[1] + 8), *v23, 1), v132, v122);
          __asm { FMLA            D0, D2, V7.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + *(double *)v133 * v122;
LABEL_35:
          *v23 = v119;
          *(float64_t *)(a3 + 160) = _Q0.f64[0];
          break;
        default:
          return;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 64);
      _Q0 = vmulq_f64(v34, _Q0);
      v53 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v34.f64[0]);
      v54 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v34.f64[0]);
      v55 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v34.f64[0]);
      *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v34.f64[0]);
      *(float64x2_t *)(a3 + 16) = v55;
      *(float64x2_t *)(a3 + 32) = v54;
      *(float64x2_t *)(a3 + 48) = v53;
      *(float64_t *)(a3 + 64) = _Q0.f64[0];
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 136);
      _Q0 = vmulq_f64(v34, _Q0);
      v56 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v34.f64[0]);
      v57 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v34.f64[0]);
      v58 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v34.f64[0]);
      *v22 = vmulq_n_f64(*v22, v34.f64[0]);
      *(float64x2_t *)(a3 + 88) = v58;
      *(float64x2_t *)(a3 + 104) = v57;
      *(float64x2_t *)(a3 + 120) = v56;
      *(float64_t *)(a3 + 136) = _Q0.f64[0];
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 160);
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v34, _Q0);
      v34.f64[1] = v34.f64[0];
      v59 = vmulq_f64(v34, *v23);
LABEL_33:
      *v23 = v59;
      *(float64_t *)(a3 + 160) = _Q0.f64[0];
    }
  }
}

void sub_239C3B1D4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C3B1E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFBFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C3B220(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFBFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C3B240(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  if (**(_QWORD **)(result + 8))
  {
    v1 = *(_QWORD *)(result + 16);
    v2 = *(_QWORD **)(v1 + 32);
    v3 = (_QWORD *)(v1 + 40);
    if (v2 != v3)
    {
      do
      {
        if (*((_BYTE *)v2 + 44))
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_9;
        }
        else
        {
          *((_DWORD *)v2 + 18) = -1;
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_9:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
LABEL_4:
        v2 = v5;
      }
      while (v5 != v3);
    }
  }
  return result;
}

uint64_t sub_239C3B2C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  size_t v5;
  void *v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  unint64_t prime;
  void *v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v34[2];
  void *v35[2];
  float v36;
  void *v37[2];
  void *__p[2];
  float v39;
  unsigned int v40;
  unsigned int *v41;

  if (!*(_BYTE *)(a1 + 122))
  {
    if (!*(_BYTE *)(a1 + 121))
    {
      v2 = *(_QWORD *)(a1 + 176);
      v3 = *(_QWORD *)(a1 + 184);
      *(_BYTE *)(a1 + 121) = v2 != v3;
      if (v2 == v3)
        *(_BYTE *)(a1 + 121) = *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 208);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 121))
      goto LABEL_60;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)v35 = 0u;
    v36 = 1.0;
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)__p = 0u;
    v39 = 1.0;
    v4 = (float)*(unint64_t *)(a1 + 24);
    v5 = (unint64_t)v4;
    if ((unint64_t)v4 == 1)
    {
      v5 = 2;
LABEL_22:
      sub_239427FE0((uint64_t)v34, v5);
LABEL_23:
      prime = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / v39);
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v12 = v37[1];
      if ((void *)prime > v37[1])
        goto LABEL_28;
      if ((void *)prime < v37[1])
      {
        v13 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v39);
        if (v37[1] < (void *)3
          || (v14 = (uint8x8_t)vcnt_s8((int8x8_t)v37[1]), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] > 1uLL))
        {
          v13 = std::__next_prime(v13);
        }
        else
        {
          v15 = 1 << -(char)__clz(v13 - 1);
          if (v13 >= 2)
            v13 = v15;
        }
        if (prime <= v13)
          prime = v13;
        if (prime < (unint64_t)v12)
LABEL_28:
          sub_239427FE0((uint64_t)v37, prime);
      }
      v16 = *(_QWORD *)(a1 + 56);
      for (i = *(_QWORD *)(a1 + 64); v16 != i; v16 += 120)
      {
        v18 = *(_QWORD *)(v16 + 48);
        if (*(_BYTE *)(v16 + 112)
          || (*(_BYTE *)(v18 + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v16 + 56) + 52) & 6) != 0)
        {
          *(_BYTE *)(v16 + 112) = 1;
          v40 = *(_DWORD *)v18;
          v41 = &v40;
          v19 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v19 + 5);
          v40 = **(_DWORD **)(v16 + 56);
          v41 = &v40;
          v20 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v20 + 5);
        }
      }
      v21 = *(_QWORD *)(a1 + 80);
      for (j = *(_QWORD *)(a1 + 88); v21 != j; v21 += 160)
      {
        v23 = *(_QWORD *)(v21 + 80);
        if (*(_BYTE *)(v21 + 152)
          || (*(_BYTE *)(v23 + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v21 + 88) + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v21 + 96) + 36) & 6) != 0)
        {
          *(_BYTE *)(v21 + 152) = 1;
          v40 = *(_DWORD *)v23;
          v41 = &v40;
          v24 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v24 + 5);
          v40 = **(_DWORD **)(v21 + 88);
          v41 = &v40;
          v25 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v25 + 5);
          v40 = **(_DWORD **)(v21 + 96);
          v41 = &v40;
          v26 = sub_2395EC77C((uint64_t)v37, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v26 + 5);
        }
      }
      sub_239C29B04((_QWORD *)(a1 + 128), (uint64_t *)v35[0], a1 + 8);
      sub_239C29D18((_QWORD *)(a1 + 128), (uint64_t *)__p[0], a1 + 8);
      v27 = __p[0];
      if (__p[0])
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      v29 = v37[0];
      v37[0] = 0;
      if (v29)
        operator delete(v29);
      v30 = v35[0];
      if (v35[0])
      {
        do
        {
          v31 = (_QWORD *)*v30;
          operator delete(v30);
          v30 = v31;
        }
        while (v31);
      }
      v32 = v34[0];
      v34[0] = 0;
      if (v32)
        operator delete(v32);
LABEL_60:
      *(_BYTE *)(a1 + 122) = 1;
      return a1 + 128;
    }
    if ((v5 & ((unint64_t)v4 - 1)) != 0)
    {
      v5 = std::__next_prime((unint64_t)v4);
      v6 = v34[1];
      v7 = (void *)v5 >= v34[1];
      if ((void *)v5 > v34[1])
        goto LABEL_22;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      if (v5)
        goto LABEL_22;
    }
    if (v7)
      goto LABEL_23;
    v8 = vcvtps_u32_f32((float)(unint64_t)v35[1] / v36);
    if ((unint64_t)v6 < 3
      || (v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (v5 <= v8)
      v5 = v8;
    if (v5 >= (unint64_t)v6)
      goto LABEL_23;
    goto LABEL_22;
  }
  return a1 + 128;
}

void sub_239C3B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C292B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239C3B768(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "DenseSchur");
}

uint64_t sub_239C3B790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  double *v22;
  double v23;
  void *v25[2];
  int v26;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = (uint64_t *)(a1 + 872);
  sub_239C2E8B0(a1 + 384, (unsigned int **)(a1 + 664), a1 + 872, v5);
  v7 = *(unsigned int *)(a1 + 888);
  *(_DWORD *)(a2 + 16) = v7;
  sub_23945215C(a2, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
  if (*(_BYTE *)(a1 + 360))
  {
    v8 = *(_DWORD *)(a1 + 376);
    if (v8 == 1)
    {
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, v25);
      v15 = *(_DWORD *)(a1 + 888);
      LODWORD(v16) = *(_DWORD *)(a1 + 892);
      if (v16 >= v15)
        v16 = v15;
      else
        v16 = v16;
      v17 = v25[0];
      if ((_DWORD)v16)
      {
        v18 = 0;
        v19 = *(double *)(a1 + 368);
        v20 = v15 + 1;
        v21 = *v6;
        v22 = (double *)v25[0];
        do
        {
          v23 = *v22++;
          *(double *)(v21 + 8 * v18) = v19 * v23 + *(double *)(v21 + 8 * v18);
          v18 += v20;
          --v16;
        }
        while (v16);
      }
      free(v17);
    }
    else if (!v8)
    {
      v9 = *(_DWORD *)(a1 + 888);
      LODWORD(v10) = *(_DWORD *)(a1 + 892);
      v10 = v10 >= v9 ? v9 : v10;
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = *(double *)(a1 + 368);
        v13 = v9 + 1;
        v14 = *v6;
        do
        {
          *(double *)(v14 + 8 * v11) = v12 + *(double *)(v14 + 8 * v11);
          v11 += v13;
          --v10;
        }
        while (v10);
      }
    }
  }
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 348) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_239C3B9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  sub_239C2ED44();
  _Unwind_Resume(a1);
}

void sub_239C3B9E0(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v5, "DenseSchur");
  v4 = 4;
  strcpy((char *)__p, "LDLt");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 4uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_239C3BA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL sub_239C3BAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;

  v4 = a1 + 936;
  v5 = *(_DWORD *)(a1 + 888);
  if (v5 == *(_DWORD *)(a1 + 892))
  {
    v6 = (v5 * v5);
    sub_23945215C(a1 + 944, v6);
    if ((_DWORD)v6)
      memcpy(*(void **)(a1 + 944), *(const void **)(a1 + 872), 8 * v6);
    *(_QWORD *)(a1 + 960) = *(_QWORD *)(a1 + 888);
    sub_239C2F210(v4);
  }
  v7 = *(_DWORD *)(a1 + 936);
  *(_BYTE *)(a1 + 344) = v7 == 0;
  if (v7)
    return 1;
  sub_239C2F378(v4, a2, a2);
  return *(_BYTE *)(a1 + 344) == 0;
}

uint64_t sub_239C3BB78()
{
  return 1;
}

uint64_t sub_239C3BB80()
{
  return 0;
}

uint64_t sub_239C3BB88(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFBBD8;
  free(*(void **)(a1 + 968));
  free(*(void **)(a1 + 944));
  *(_QWORD *)a1 = off_250AFBC90;
  free(*(void **)(a1 + 896));
  free(*(void **)(a1 + 872));
  return sub_239C33AF4(a1);
}

void sub_239C3BBE0(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFBBD8;
  free(*(void **)(a1 + 968));
  free(*(void **)(a1 + 944));
  *(_QWORD *)a1 = off_250AFBC90;
  free(*(void **)(a1 + 896));
  free(*(void **)(a1 + 872));
  sub_239C33AF4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C3BC4C(uint64_t a1)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  size_t v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  size_t v19;
  size_t v20;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  void *memptr;

  *(_QWORD *)(a1 + 920) = *(_QWORD *)(a1 + 464) + 40;
  *(_QWORD *)(a1 + 928) = a1 + 640;
  v2 = *(_DWORD *)(a1 + 936);
  if (v2)
  {
    *(_QWORD *)(a1 + 920) = 0;
    *(_QWORD *)(a1 + 928) = 0;
    return v2 == 0;
  }
  v3 = *(_DWORD *)(a1 + 960);
  v4 = v3 * v3;
  v5 = (8 * v3 * v3 + 31) & 0xFFFFFFFE0;
  v25 = v5 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x100BBD03uLL);
  v6 = memptr;
  v24 = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  LODWORD(v26) = *(_DWORD *)(a1 + 960);
  HIDWORD(v26) = v3;
  if (v3 != (_DWORD)v26)
  {
    LODWORD(v26) = v3;
    sub_23945215C((uint64_t)&v24, v3 * (unint64_t)v3);
    v7 = v26;
    v3 = HIDWORD(v26);
    v6 = v24;
    v4 = v26 * HIDWORD(v26);
    if (!((_DWORD)v26 * HIDWORD(v26)))
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = v3;
  if (v4)
LABEL_6:
    bzero(v6, 8 * v4);
LABEL_7:
  if (v3 >= v7)
    v8 = v7;
  else
    v8 = v3;
  if ((_DWORD)v8)
  {
    v9 = v7 + 1;
    v10 = 0;
    if ((_DWORD)v8 == 1)
      goto LABEL_23;
    v11 = v9 < 0 ? ~v7 : v7 + 1;
    v12 = v11 * (unint64_t)(v8 - 1);
    if ((_DWORD)v12 && v9 < 0)
      goto LABEL_23;
    if ((v12 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_23;
    v14 = 0;
    v10 = v8 & 0xFFFFFFFE;
    v15 = v10;
    do
    {
      *((_QWORD *)v6 + v14) = 0x3FF0000000000000;
      *((_QWORD *)v6 + v9 + v14) = 0x3FF0000000000000;
      v14 += 2 * v7 + 2;
      v15 -= 2;
    }
    while (v15);
    if (v10 != v8)
    {
LABEL_23:
      v16 = v8 - v10;
      v17 = v9 * v10;
      do
      {
        *((_QWORD *)v6 + v17) = 0x3FF0000000000000;
        v17 += v9;
        --v16;
      }
      while (v16);
    }
  }
  sub_239A230A8(0, v7, v3, *(__CLPK_doublereal **)(a1 + 944), *(_DWORD *)(a1 + 960), *(__CLPK_integer **)(a1 + 968), (__CLPK_doublereal *)v6, v7);
  v18 = *(void **)(a1 + 896);
  v19 = v25;
  *(_QWORD *)(a1 + 896) = v24;
  v20 = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a1 + 904) = v19;
  v24 = v18;
  v25 = v20;
  *(_QWORD *)(a1 + 912) = v26;
  v26 = 0;
  free(v18);
  return v2 == 0;
}

void sub_239C3BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_239C3BE4C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  void *__p;
  double *v25;
  uint64_t v26;
  double *v27;
  double *v28[2];

  __p = 0;
  v25 = 0;
  v26 = 0;
  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v4 = v2[17];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    sub_23945E108((uint64_t)&__p, 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3));
    v5 = (uint64_t)__p;
    v3 = v2[16];
    v4 = v2[17];
  }
  v28[0] = (double *)v5;
  sub_239C3CA9C(v3, v4, v28, 0);
  v14 = (double *)__p;
  v15 = ((char *)v25 - (_BYTE *)__p) >> 3;
  v16 = v2[19];
  v17 = v2[20];
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v16) >> 5);
  if (v15 >= v18 + v15)
  {
    if (v15 > v18 + v15)
      v25 = (double *)((char *)__p + 8 * v18 + 8 * v15);
  }
  else
  {
    sub_23945E108((uint64_t)&__p, v18);
    v14 = (double *)__p;
    v16 = v2[19];
    v17 = v2[20];
  }
  v27 = &v14[v15];
  v28[0] = (double *)&v27;
  v28[1] = 0;
  if (v16 != v17)
  {
    do
    {
      sub_239C3C838((uint64_t)v28, v16, v6, v7, v8, v9, v10, v11, v12, v13);
      v16 += 160;
    }
    while (v16 != v17);
    v14 = (double *)__p;
  }
  if (v14 == v25)
  {
    **(_QWORD **)(a1 + 16) = 0x3FF0000000000000;
    if (!v14)
      return;
  }
  else
  {
    v19 = (_BYTE)v25 - (_BYTE)v14;
    v20 = v25 - v14;
    v21 = v20 >> 1;
    sub_2395F71EC(v14, &v14[v20 >> 1], v25);
    v14 = (double *)__p;
    v22 = *((double *)__p + (v20 >> 1));
    if ((v19 & 8) == 0)
    {
      v23 = v21 - 1;
      if (v21 - 1 != v20)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v23, (double *)__p + v20);
        v14 = (double *)__p;
      }
      v22 = (v22 + v14[v23]) * 0.5;
    }
    **(double **)(a1 + 16) = sqrt(v22) * *(double *)(a1 + 8);
  }
  v25 = v14;
  operator delete(v14);
}

void sub_239C3BFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C3C004(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  double *v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v4 = *(_QWORD *)(v2 + 136);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    sub_23945E108((uint64_t)&v12, 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3));
    v5 = (uint64_t)v12;
    v3 = *(_QWORD *)(v2 + 128);
    v4 = *(_QWORD *)(v2 + 136);
  }
  v15 = (double *)v5;
  sub_239C3CA9C(v3, v4, &v15, 0);
  v6 = v12;
  if (v12 == v13)
  {
    **((_QWORD **)a1 + 2) = 0x3FF0000000000000;
    if (!v6)
      return;
  }
  else
  {
    v7 = (_BYTE)v13 - (_BYTE)v12;
    v8 = v13 - v12;
    v9 = v8 >> 1;
    sub_2395F71EC(v12, &v12[v8 >> 1], v13);
    v6 = v12;
    v10 = v12[v8 >> 1];
    if ((v7 & 8) == 0)
    {
      v11 = v9 - 1;
      if (v9 - 1 != v8)
      {
        sub_2395F71EC(v12, &v12[v11], &v12[v8]);
        v6 = v12;
      }
      v10 = (v10 + v6[v11]) * 0.5;
    }
    **((double **)a1 + 2) = sqrt(v10) * a1[1];
  }
  v13 = v6;
  operator delete(v6);
}

void sub_239C3C110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C3C12C(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  void *__p;
  double *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[2];

  __p = 0;
  v21 = 0;
  v22 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 160) - *(_QWORD *)(*(_QWORD *)a1 + 152);
  if (!v3)
  {
    *(_QWORD *)(*((_QWORD *)a1 + 2) + 8) = 0x3FF0000000000000;
    return;
  }
  sub_23945E108((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5));
  v12 = (double *)__p;
  v13 = *(_QWORD *)(v2 + 152);
  v14 = *(_QWORD *)(v2 + 160);
  v23 = __p;
  v24[0] = &v23;
  v24[1] = 0;
  if (v13 != v14)
  {
    do
    {
      sub_239C3C838((uint64_t)v24, v13, v4, v5, v6, v7, v8, v9, v10, v11);
      v13 += 160;
    }
    while (v13 != v14);
    v12 = (double *)__p;
  }
  if (v12 != v21)
  {
    v15 = (_BYTE)v21 - (_BYTE)v12;
    v16 = v21 - v12;
    v17 = v16 >> 1;
    sub_2395F71EC(v12, &v12[v16 >> 1], v21);
    v12 = (double *)__p;
    v18 = *((double *)__p + (v16 >> 1));
    if ((v15 & 8) == 0)
    {
      v19 = v17 - 1;
      if (v17 - 1 != v16)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v19, (double *)__p + v16);
        v12 = (double *)__p;
      }
      v18 = (v18 + v12[v19]) * 0.5;
    }
    *(double *)(*((_QWORD *)a1 + 2) + 8) = sqrt(v18) * a1[1];
    goto LABEL_14;
  }
  *(_QWORD *)(*((_QWORD *)a1 + 2) + 8) = 0x3FF0000000000000;
  if (v12)
  {
LABEL_14:
    v21 = v12;
    operator delete(v12);
  }
}

void sub_239C3C274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_239C3C294(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  double v28;
  long double v29;
  long double v30;
  float64x2_t v31;
  float64x2_t *v32;
  float64x2_t *v33;
  float64x2_t v35;
  float64x2_t *v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t v45;
  double v46;
  long double v47;
  long double v48;
  long double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t *v52;
  float64x2_t *v53;
  uint64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  int8x16_t v58;
  float64x2_t v59;
  float64x2_t *v60;
  float64x2_t *v61;
  float64x2_t v63;
  double v64;
  float64x2_t v66;
  uint64_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  double v82;
  float64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2x3_t v96;

  kdebug_trace();
  v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v10 > 0xF)
  {
    if (v10 != 16)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16;
  }
  else
  {
    sub_23945E108(a2, 2 - (v10 >> 3));
  }
  v12 = *(_QWORD *)(a1 + 128);
  v11 = *(_QWORD *)(a1 + 136);
  v13 = 0.0;
  v14 = 0.0;
  if (v12 != v11)
  {
    if (*(_BYTE *)(a1 + 347))
    {
      v15 = v11 - v12 - 120;
      if (v15 < 0x78)
        goto LABEL_33;
      v16 = v15 / 0x78 + 1;
      v17 = (double *)(v12 + 208);
      v18 = v16 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        v19 = *(v17 - 15);
        v20 = *v17;
        v17 += 30;
        v14 = v14 + v19 + v20;
        v18 -= 2;
      }
      while (v18);
      v12 += 120 * (v16 & 0x7FFFFFFFFFFFFFELL);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_33:
        do
        {
          v14 = *(double *)(v12 + 88) + v14;
          v12 += 120;
        }
        while (v12 != v11);
      }
    }
    else
    {
      do
      {
        v32 = *(float64x2_t **)(v12 + 48);
        v33 = *(float64x2_t **)(v12 + 56);
        *(_QWORD *)(v12 + 32) = v32 + 1;
        *(_QWORD *)(v12 + 40) = v33 + 1;
        v4.f64[0] = v32[2].f64[0];
        v6.f64[0] = v33[2].f64[0];
        _Q3 = v33[1];
        v35 = vsubq_f64(v4, v6);
        _Q1 = vsubq_f64(v32[1], _Q3);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _Q3.f64[0] = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v35.f64[0], v35.f64[0]));
        v42 = *(float64x2_t **)(v12 + 24);
        _Q3.f64[0] = v42[1].f64[0];
        v43 = vsubq_f64(*v42, vmulq_n_f64(_Q1, _Q2.f64[0]));
        *(float64x2_t *)(v12 + 64) = v43;
        v44 = vsubq_f64(_Q3, vmulq_f64(v35, _Q2));
        *(float64_t *)(v12 + 80) = v44.f64[0];
        v45 = *(_QWORD *)(v12 + 96);
        if (v45)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 24))(v45, v12 + 64);
          v44.f64[0] = *(float64_t *)(v12 + 80);
          v43 = *(float64x2_t *)(v12 + 64);
        }
        v43.f64[1] = *(double *)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).i64;
        v92 = v44;
        v94 = v43;
        v28 = *(double *)(a1 + 24);
        v29 = *(double *)(a1 + 32)
            * (*(double *)(a1 + 16)
             * (vmulq_f64(v43, v43).f64[0] + v43.f64[1] * v43.f64[1] + v44.f64[0] * v44.f64[0]));
        v30 = v29 + 1.0;
        v4.f64[0] = v28 * log1p(v29);
        v31.f64[0] = sqrt(1.0 / v30);
        v7.f64[1] = v92.f64[1];
        v6 = vmulq_n_f64(v94, v31.f64[0]);
        v5 = vmulq_f64(v92, v31);
        *(float64x2_t *)(v12 + 64) = v6;
        *(float64_t *)(v12 + 80) = v5.f64[0];
        *(float64_t *)(v12 + 88) = v4.f64[0];
        v14 = v4.f64[0] + v14;
        v12 += 120;
      }
      while (v12 != v11);
    }
  }
  v21 = *(double **)a2;
  **(double **)a2 = v14 * 0.5;
  v22 = *(_QWORD *)(a1 + 152);
  v23 = *(_QWORD *)(a1 + 160);
  if (v22 != v23)
  {
    if (*(_BYTE *)(a1 + 347))
    {
      v24 = v23 - v22 - 160;
      v13 = 0.0;
      if (v24 <= 0x9F)
        goto LABEL_19;
      v25 = v24 / 0xA0 + 1;
      v26 = (double *)(v22 + 288);
      v27 = v25 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v13 = v13 + *(v26 - 20) + *v26;
        v26 += 40;
        v27 -= 2;
      }
      while (v27);
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFELL))
      {
        v22 += 160 * (v25 & 0x3FFFFFFFFFFFFFELL);
        do
        {
LABEL_19:
          v13 = v13 + *(double *)(v22 + 128);
          v22 += 160;
        }
        while (v22 != v23);
      }
    }
    else
    {
      v13 = 0.0;
      do
      {
        v52 = *(float64x2_t **)(v22 + 80);
        v53 = *(float64x2_t **)(v22 + 88);
        *(_QWORD *)(v22 + 40) = v52 + 1;
        *(_QWORD *)(v22 + 48) = v53 + 1;
        v54 = *(_QWORD *)(v22 + 96);
        v8.f64[0] = *(float64_t *)(v54 + 16);
        *(_QWORD *)(v22 + 64) = v54 + 16;
        v5.f64[0] = v52[2].f64[0];
        v55 = v52[1];
        v7.f64[0] = v53[2].f64[0];
        v56 = v53[1];
        v57 = *(_QWORD *)(v22 + 56);
        v58 = *(int8x16_t *)(v57 + 8);
        v57 += 8;
        *(_QWORD *)&v59.f64[0] = v58.i64[0];
        v60 = (float64x2_t *)v57;
        v96 = vld3q_f64(v60->f64);
        v60 += 3;
        v61 = *(float64x2_t **)(v22 + 72);
        v9.f64[0] = v61[1].f64[0];
        _Q1 = vsubq_f64(v5, v7);
        v63 = vsubq_f64(v55, v56);
        *(_QWORD *)&v64 = *(_OWORD *)&vmulq_f64(v8, v9);
        _Q4 = vmulq_n_f64(*v61, v8.f64[0]);
        v66 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96.val[0], _Q4.f64[0]), v96.val[1], _Q4, 1), v96.val[2], v64);
        _Q7 = *v60;
        _Q5 = vmulq_f64(*v60, _Q4);
        v96.val[0].f64[0] = _Q4.f64[1];
        __asm { FMLA            D5, D16, V7.D[1] }
        v96.val[1].f64[0] = *(float64_t *)(v57 + 64);
        _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v96.val[1].f64[0], v64);
        *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vaddq_f64(_Q1, _Q5);
        _Q6 = vaddq_f64(v63, v66);
        v71 = *(float64x2_t **)(v22 + 24);
        v70 = *(_QWORD *)(v22 + 32);
        v72 = *(float64x2_t *)(v70 + 8);
        _D20 = *(_QWORD *)(v70 + 48);
        v74 = *(float64x2_t *)(v70 + 32);
        v75 = *(double *)(v70 + 72);
        v76 = *(float64x2_t *)(v70 + 56);
        v77 = *(float64x2_t *)(v57 + 16);
        v59.f64[1] = *(float64_t *)(v57 + 24);
        v77.f64[1] = *(float64_t *)(v57 + 40);
        v78 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v59, _Q4.f64[0]), (float64x2_t)vextq_s8(v58, *(int8x16_t *)(v57 + 32), 8uLL), _Q4, 1), v77, v64);
        __asm { FMLA            D4, D16, V7.D[1] }
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v96.val[1].f64[0], v64);
        *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q1, _Q4);
        _Q0 = vaddq_f64(v63, v78);
        _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, _Q0.f64[0]), v74, _Q0, 1), v76, _Q1.f64[0]);
        __asm { FMLA            D3, D20, V0.D[1] }
        v82 = vmlad_n_f64(_D3, v75, _Q1.f64[0]);
        _Q0 = vmulq_f64(_Q2, _Q2);
        _Q1.f64[0] = _Q2.f64[1];
        __asm { FMLA            D0, D1, V2.D[1] }
        _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0] + v82 * v82);
        _Q1 = vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v72, _Q6.f64[0]), v74, _Q6, 1), v76, _Q5.f64[0]), _Q0.f64[0]);
        _Q2.f64[0] = v71[1].f64[0];
        v85 = vsubq_f64(*v71, _Q1);
        *(float64x2_t *)(v22 + 104) = v85;
        __asm { FMLA            D1, D20, V6.D[1] }
        _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v75, _Q5.f64[0]);
        v86 = vsubq_f64(_Q2, vmulq_f64(_Q1, _Q0));
        *(float64_t *)(v22 + 120) = v86.f64[0];
        v87 = *(_QWORD *)(v22 + 136);
        if (v87)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 24))(v87, v22 + 104);
          v86.f64[0] = *(float64_t *)(v22 + 120);
          v85 = *(float64x2_t *)(v22 + 104);
        }
        v85.f64[1] = *(double *)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL).i64;
        v93 = v85;
        v95 = v86;
        v46 = *(double *)(a1 + 56);
        v47 = *(double *)(a1 + 64)
            * (*(double *)(a1 + 48)
             * (vmulq_f64(v85, v85).f64[0] + v85.f64[1] * v85.f64[1] + v86.f64[0] * v86.f64[0]));
        v48 = v47 + 1.0;
        v49 = v46 * log1p(v47);
        v50.f64[0] = sqrt(1.0 / v48);
        v7.f64[1] = v95.f64[1];
        v51 = vmulq_n_f64(v93, v50.f64[0]);
        v5 = vmulq_f64(v95, v50);
        *(float64x2_t *)(v22 + 104) = v51;
        *(float64_t *)(v22 + 120) = v5.f64[0];
        *(long double *)(v22 + 128) = v49;
        v13 = v13 + v49;
        v22 += 160;
      }
      while (v22 != v23);
      v21 = *(double **)a2;
    }
  }
  v21[1] = v13 * 0.5;
  *(_BYTE *)(a1 + 347) = 1;
  v88 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v89 = **(double **)a2;
  v90 = *(double *)(*(_QWORD *)a2 + 8);
  kdebug_trace();
  return v88 + v89 + v90;
}

void sub_239C3C774(_Unwind_Exception *a1)
{
  sub_239C302B4();
  _Unwind_Resume(a1);
}

void sub_239C3C794(uint64_t a1, double a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9[3];

  *(_QWORD *)&v9[0] = a1;
  v9[1] = a2;
  *(_QWORD *)&v9[2] = &v7;
  sub_239C3C004(v9);
  sub_239C3C12C(v9);
  v3 = 1.0e20;
  v4 = 0x3DDB7CDFD9D7BDBBLL;
  v5 = 0x3DDB7CDFD9D7BDBBLL;
  v6 = 1.0e20;
  if (v7 > 0.0)
  {
    v5 = *(_QWORD *)&v7;
    v6 = 1.0 / (v7 * v7);
  }
  *(_QWORD *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = v6;
  if (v8 > 0.0)
  {
    v4 = *(_QWORD *)&v8;
    v3 = 1.0 / (v8 * v8);
  }
  *(_QWORD *)(a1 + 40) = v4;
  *(double *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 348) = 0;
}

void sub_239C3C838(uint64_t a1, uint64_t a2, double a3, double a4, float64x2_t a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  float64x2_t v17;
  float64x2_t *v18;
  float64x2_t v21;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v28;
  float64x2_t v30;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  double **v46;
  double *v47;
  unint64_t *v48;
  unint64_t v49;
  float64x2_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  float64x2_t v54;
  double v55;
  double v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char v59;
  float64x2x3_t v60;

  v51 = *(_OWORD *)(a2 + 56);
  v52 = *(_OWORD *)(a2 + 72);
  v53 = *(_OWORD *)(a2 + 88);
  v12 = *(float64x2_t *)(a2 + 24);
  v50 = v12;
  v54 = *(float64x2_t *)(a2 + 104);
  v55 = *(double *)(a2 + 120);
  v13 = *(double *)(a2 + 128);
  v56 = v13;
  v14 = *(std::__shared_weak_count **)(a2 + 144);
  v57 = *(_QWORD *)(a2 + 136);
  v58 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v59 = *(_BYTE *)(a2 + 152);
  if (!*(_BYTE *)(a1 + 8))
  {
    v12.f64[0] = *(float64_t *)(*((_QWORD *)&v53 + 1) + 16);
    a5.f64[0] = *(float64_t *)(*((_QWORD *)&v52 + 1) + 32);
    a10.f64[0] = *(float64_t *)(v53 + 32);
    v17 = *(float64x2_t *)(v51 + 8);
    v18 = (float64x2_t *)(v51 + 8);
    v60 = vld3q_f64(v18->f64);
    v18 += 3;
    v10.f64[0] = *(float64_t *)(v52 + 16);
    _Q18 = *(float64x2_t *)v52;
    _Q19 = *v18;
    v21 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 8);
    _D22 = *(_QWORD *)(*(_QWORD *)&v50.f64[1] + 48);
    v23 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 32);
    v24 = *(double *)(*(_QWORD *)&v50.f64[1] + 72);
    v25 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 56);
    v26 = vsubq_f64(a5, a10);
    _Q3 = vsubq_f64(*(float64x2_t *)(*((_QWORD *)&v52 + 1) + 16), *(float64x2_t *)(v53 + 16));
    *(_QWORD *)&v28 = *(_OWORD *)&vmulq_f64(v12, v10);
    _Q1 = vmulq_n_f64(*(float64x2_t *)v52, v12.f64[0]);
    v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60.val[0], _Q1.f64[0]), v60.val[1], _Q1, 1), v60.val[2], v28);
    v60.val[0] = vmulq_f64(*v18, _Q1);
    v60.val[1].f64[0] = _Q1.f64[1];
    __asm { FMLA            D4, D5, V19.D[1] }
    v60.val[2].f64[0] = *(float64_t *)(v51 + 72);
    v60.val[0].f64[0] = vmlad_n_f64(v60.val[0].f64[0], v60.val[2].f64[0], v28);
    *(_QWORD *)&v60.val[0].f64[0] = *(_OWORD *)&vaddq_f64(v26, v60.val[0]);
    _Q16 = vaddq_f64(_Q3, v30);
    v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, _Q16.f64[0]), v23, _Q16, 1), v25, v60.val[0].f64[0]);
    __asm { FMLA            D18, D22, V16.D[1] }
    _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v24, v60.val[0].f64[0]);
    v37 = *(float64x2_t *)(v51 + 24);
    v38 = (float64x2_t)vextq_s8((int8x16_t)v17, *(int8x16_t *)(v51 + 40), 8uLL);
    v17.f64[1] = *(float64_t *)(v51 + 32);
    v37.f64[1] = *(float64_t *)(v51 + 48);
    v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q1.f64[0]), v38, _Q1, 1), v37, v28);
    __asm { FMLA            D1, D5, V19.D[1] }
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v60.val[2].f64[0], v28);
    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(v26, _Q1);
    _Q0 = vaddq_f64(_Q3, v39);
    _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, _Q0.f64[0]), v23, _Q0, 1), v25, _Q1.f64[0]);
    __asm { FMLA            D3, D22, V0.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v24, _Q1.f64[0]);
    _Q0 = vmulq_f64(_Q2, _Q2);
    _Q1.f64[0] = _Q2.f64[1];
    __asm { FMLA            D0, D1, V2.D[1] }
    _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0] + _Q3.f64[0] * _Q3.f64[0]);
    v43 = vmulq_n_f64(v36, _Q0.f64[0]);
    _Q2.f64[0] = *(float64_t *)(*(_QWORD *)&v50.f64[0] + 16);
    *(_QWORD *)&v44 = *(_OWORD *)&vsubq_f64(_Q2, vmulq_f64(_Q18, _Q0));
    v45 = vsubq_f64(**(float64x2_t **)&v50.f64[0], v43);
    v54 = v45;
    v55 = v44;
    if (v57)
    {
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v57 + 24))(v57, &v54);
      v44 = v55;
      v45 = v54;
    }
    v45.f64[1] = *(double *)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).i64;
    v13 = vmulq_f64(v45, v45).f64[0] + v45.f64[1] * v45.f64[1] + v44 * v44;
    v56 = v13;
    v14 = v58;
  }
  v46 = *(double ***)a1;
  v47 = **(double ***)a1;
  *v47 = v13;
  *v46 = v47 + 1;
  if (v14)
  {
    v48 = (unint64_t *)&v14->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_239C3CA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C30548((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double **sub_239C3CA9C(uint64_t a1, uint64_t a2, double **a3, char a4)
{
  uint64_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  float64x2_t v14;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  double *v27;
  unint64_t *v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  __int128 v39;
  float64x2_t *v40;
  float64x2_t v41;
  double v42;
  double v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char v46;

  if (a1 != a2)
  {
    v6 = a1;
    if (a4)
    {
      do
      {
        v31 = *(double *)(v6 + 80);
        v41 = *(float64x2_t *)(v6 + 64);
        v42 = v31;
        v32 = *(double *)(v6 + 88);
        v43 = v32;
        v33 = *(std::__shared_weak_count **)(v6 + 104);
        v44 = *(_QWORD *)(v6 + 96);
        v45 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(p_shared_owners);
          while (__stxr(v35 + 1, p_shared_owners));
          v46 = *(_BYTE *)(v6 + 112);
          v36 = *a3;
          *v36 = v32;
          *a3 = v36 + 1;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        else
        {
          v30 = *a3;
          *v30 = v32;
          *a3 = v30 + 1;
        }
        v6 += 120;
      }
      while (v6 != a2);
    }
    else
    {
      do
      {
        v7 = *(float64x2_t *)(v6 + 40);
        v40 = *(float64x2_t **)(v6 + 56);
        v39 = *(_OWORD *)(v6 + 24);
        v8 = *(double *)(v6 + 80);
        v9 = *(float64x2_t *)(v6 + 64);
        v41 = v9;
        v42 = v8;
        v43 = *(double *)(v6 + 88);
        v10 = *(_QWORD *)(v6 + 96);
        v11 = *(std::__shared_weak_count **)(v6 + 104);
        v44 = v10;
        v45 = v11;
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v46 = *(_BYTE *)(v6 + 112);
        v9.f64[0] = *(float64_t *)(*(_QWORD *)&v7.f64[1] + 32);
        v7.f64[0] = v40[2].f64[0];
        v14 = vsubq_f64(v9, v7);
        _Q1 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)&v7.f64[1] + 16), v40[1]);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v14.f64[0], v14.f64[0]));
        v22 = vmulq_n_f64(_Q1, _Q2.f64[0]);
        v23 = vmulq_f64(v14, _Q2);
        _Q2.f64[0] = *(float64_t *)(v39 + 16);
        *(_QWORD *)&v24 = *(_OWORD *)&vsubq_f64(_Q2, v23);
        v25 = vsubq_f64(*(float64x2_t *)v39, v22);
        v41 = v25;
        v42 = v24;
        if (v10)
        {
          (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v10 + 24))(v10, &v41);
          v24 = v42;
          v25 = v41;
          *(_QWORD *)&v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
          v11 = v45;
        }
        else
        {
          *(_QWORD *)&v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
        }
        v25.f64[1] = v26;
        v43 = vmulq_f64(v25, v25).f64[0] + v26 * v26 + v24 * v24;
        v27 = *a3;
        *v27 = v43;
        *a3 = v27 + 1;
        if (v11)
        {
          v28 = (unint64_t *)&v11->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v6 += 120;
      }
      while (v6 != a2);
    }
  }
  return a3;
}

void sub_239C3CD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239C3CD54()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C3CD68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFBFF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C3CDA0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFBFF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C3CDC0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 360) = *(_BYTE *)(result + 16);
  return result;
}

char *sub_239C3CDD0(void **a1, char *a2, uint64_t *a3)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;

  v4 = a2;
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = a2 - (_BYTE *)*a1;
  v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
  v10 = (char *)a1[2];
  if (v6 >= v10)
  {
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 5) + 1;
    if (v32 > 0x199999999999999)
      sub_2394189F8();
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 5);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0xCCCCCCCCCCCCCCLL)
      v34 = 0x199999999999999;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 > 0x199999999999999)
        sub_239418A80();
      v35 = (char *)operator new(160 * v34);
    }
    else
    {
      v35 = 0;
    }
    v46 = (uint64_t)&v35[32 * (v8 >> 5)];
    v89 = &v35[160 * v34];
    if (v9 == v34)
    {
      if (v8 >= 1)
      {
        v47 = v9 + 2;
        if (v9 >= -1)
          v47 = v9 + 1;
        v48 = v47 >> 1;
        v49 = sub_239C299F0(v46, v46, v46 - 160 * (v47 >> 1));
        v46 -= 160 * v48;
LABEL_43:
        *(_QWORD *)v49 = *a3;
        v52 = *(_OWORD *)(a3 + 1);
        *(_OWORD *)(v49 + 24) = *(_OWORD *)(a3 + 3);
        *(_OWORD *)(v49 + 8) = v52;
        v53 = *(_OWORD *)(a3 + 5);
        v54 = *(_OWORD *)(a3 + 7);
        v55 = *(_OWORD *)(a3 + 9);
        *(_OWORD *)(v49 + 88) = *(_OWORD *)(a3 + 11);
        *(_OWORD *)(v49 + 72) = v55;
        *(_OWORD *)(v49 + 56) = v54;
        *(_OWORD *)(v49 + 40) = v53;
        v56 = *(_OWORD *)(a3 + 13);
        *(_QWORD *)(v49 + 120) = a3[15];
        *(_OWORD *)(v49 + 104) = v56;
        *(_QWORD *)(v49 + 128) = a3[16];
        *(_OWORD *)(v49 + 136) = *(_OWORD *)(a3 + 17);
        a3[17] = 0;
        a3[18] = 0;
        *(_BYTE *)(v49 + 152) = *((_BYTE *)a3 + 152);
        v57 = v49 + 160;
        v58 = (char *)*a1;
        if (*a1 == v4)
        {
          v67 = v46;
        }
        else
        {
          v59 = 0;
          do
          {
            v60 = v46 + v59;
            v61 = &v4[v59];
            *(_QWORD *)(v60 - 160) = *(_QWORD *)&v4[v59 - 160];
            v62 = *(_OWORD *)&v4[v59 - 152];
            *(_OWORD *)(v60 - 136) = *(_OWORD *)&v4[v59 - 136];
            *(_OWORD *)(v60 - 152) = v62;
            v63 = *(_OWORD *)&v4[v59 - 120];
            v64 = *(_OWORD *)&v4[v59 - 104];
            v65 = *(_OWORD *)&v4[v59 - 88];
            *(_OWORD *)(v60 - 72) = *(_OWORD *)&v4[v59 - 72];
            *(_OWORD *)(v60 - 88) = v65;
            *(_OWORD *)(v60 - 104) = v64;
            *(_OWORD *)(v60 - 120) = v63;
            v66 = *(_OWORD *)&v4[v59 - 56];
            *(_QWORD *)(v60 - 40) = *(_QWORD *)&v4[v59 - 40];
            *(_OWORD *)(v60 - 56) = v66;
            *(_QWORD *)(v60 - 32) = *(_QWORD *)&v4[v59 - 32];
            *(_OWORD *)(v60 - 24) = *(_OWORD *)&v4[v59 - 24];
            *((_QWORD *)v61 - 3) = 0;
            *((_QWORD *)v61 - 2) = 0;
            *(_BYTE *)(v60 - 8) = v4[v59 - 8];
            v59 -= 160;
          }
          while (&v4[v59] != v58);
          v67 = v46 + v59;
          v57 = v49 + 160;
        }
        v68 = (char *)a1[1];
        if (v68 != v4)
        {
          do
          {
            *(_QWORD *)v57 = *(_QWORD *)v4;
            v69 = *(_OWORD *)(v4 + 8);
            *(_OWORD *)(v57 + 24) = *(_OWORD *)(v4 + 24);
            *(_OWORD *)(v57 + 8) = v69;
            v70 = *(_OWORD *)(v4 + 40);
            v71 = *(_OWORD *)(v4 + 56);
            v72 = *(_OWORD *)(v4 + 72);
            *(_OWORD *)(v57 + 88) = *(_OWORD *)(v4 + 88);
            *(_OWORD *)(v57 + 72) = v72;
            *(_OWORD *)(v57 + 56) = v71;
            *(_OWORD *)(v57 + 40) = v70;
            v73 = *(_OWORD *)(v4 + 104);
            *(_QWORD *)(v57 + 120) = *((_QWORD *)v4 + 15);
            *(_OWORD *)(v57 + 104) = v73;
            *(_QWORD *)(v57 + 128) = *((_QWORD *)v4 + 16);
            *(_OWORD *)(v57 + 136) = *(_OWORD *)(v4 + 136);
            *((_QWORD *)v4 + 17) = 0;
            *((_QWORD *)v4 + 18) = 0;
            *(_BYTE *)(v57 + 152) = v4[152];
            v57 += 160;
            v4 += 160;
          }
          while (v4 != v68);
          v4 = (char *)a1[1];
        }
        v74 = (char *)*a1;
        *a1 = (void *)v67;
        a1[1] = (void *)v57;
        a1[2] = v89;
        if (v4 == v74)
        {
          if (!v4)
            return (char *)v46;
        }
        else
        {
          do
          {
            v88 = v4 - 160;
            v76 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
            if (v76)
            {
              p_shared_owners = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(p_shared_owners);
              while (__stlxr(v78 - 1, p_shared_owners));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v4 = v88;
          }
          while (v88 != v74);
          v4 = v74;
          if (!v74)
            return (char *)v46;
        }
        operator delete(v4);
        return (char *)v46;
      }
      if (v7 == v4)
        v50 = 1;
      else
        v50 = 0x999999999999999ALL * (v8 >> 5);
      if (v50 > 0x199999999999999)
        sub_239418A80();
      v51 = (char *)operator new(160 * v50);
      v46 = (uint64_t)&v51[160 * (v50 >> 2)];
      v89 = &v51[160 * v50];
      if (v35)
        operator delete(v35);
    }
    v49 = v46;
    goto LABEL_43;
  }
  v11 = (__int128 *)(a3 + 1);
  if (a2 == v6)
  {
    *(_QWORD *)a2 = *a3;
    v40 = &v7[32 * (v8 >> 5)];
    v41 = *v11;
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(a3 + 3);
    *(_OWORD *)(v40 + 8) = v41;
    v42 = *(_OWORD *)(a3 + 5);
    v43 = *(_OWORD *)(a3 + 7);
    v44 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)(v40 + 88) = *(_OWORD *)(a3 + 11);
    *(_OWORD *)(v40 + 72) = v44;
    *(_OWORD *)(v40 + 56) = v43;
    *(_OWORD *)(v40 + 40) = v42;
    v45 = *(_OWORD *)(a3 + 13);
    *((_QWORD *)v40 + 15) = a3[15];
    *(_OWORD *)(v40 + 104) = v45;
    *((_QWORD *)v40 + 16) = a3[16];
    *(_OWORD *)(v40 + 136) = *(_OWORD *)(a3 + 17);
    a3[17] = 0;
    a3[18] = 0;
    v40[152] = *((_BYTE *)a3 + 152);
    a1[1] = a2 + 160;
  }
  else
  {
    v12 = *a3;
    v82 = *(_OWORD *)(a3 + 5);
    v83 = *(_OWORD *)(a3 + 3);
    v80 = *(_OWORD *)(a3 + 9);
    v81 = *(_OWORD *)(a3 + 7);
    v79 = *(_OWORD *)(a3 + 11);
    v85 = *v11;
    v86 = *(_OWORD *)(a3 + 13);
    v87 = a3[15];
    v13 = a3[16];
    v84 = *(_OWORD *)(a3 + 17);
    a3[17] = 0;
    a3[18] = 0;
    v14 = (unint64_t)a1[1];
    v15 = v14 - 160;
    v16 = v14;
    v17 = *((_BYTE *)a3 + 152);
    if (v14 >= 0xA0)
    {
      v18 = v14 - 160;
      v16 = (unint64_t)a1[1];
      do
      {
        *(_QWORD *)v16 = *(_QWORD *)v18;
        v19 = *(_OWORD *)(v18 + 8);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v16 + 8) = v19;
        v20 = *(_OWORD *)(v18 + 40);
        v21 = *(_OWORD *)(v18 + 56);
        v22 = *(_OWORD *)(v18 + 72);
        *(_OWORD *)(v16 + 88) = *(_OWORD *)(v18 + 88);
        *(_OWORD *)(v16 + 72) = v22;
        *(_OWORD *)(v16 + 56) = v21;
        *(_OWORD *)(v16 + 40) = v20;
        v23 = *(_OWORD *)(v18 + 104);
        *(_QWORD *)(v16 + 120) = *(_QWORD *)(v18 + 120);
        *(_OWORD *)(v16 + 104) = v23;
        *(_QWORD *)(v16 + 128) = *(_QWORD *)(v18 + 128);
        *(_OWORD *)(v16 + 136) = *(_OWORD *)(v18 + 136);
        *(_QWORD *)(v18 + 136) = 0;
        *(_QWORD *)(v18 + 144) = 0;
        *(_BYTE *)(v16 + 152) = *(_BYTE *)(v18 + 152);
        v16 += 160;
        v18 += 160;
      }
      while (v18 < v14);
    }
    a1[1] = (void *)v16;
    if ((char *)v14 != a2 + 160)
    {
      v24 = v14 - 160;
      v25 = v14;
      do
      {
        v26 = *(_QWORD *)(v24 - 160);
        v24 -= 160;
        *(_QWORD *)(v25 - 160) = v26;
        v25 -= 160;
        *(_OWORD *)(v25 + 8) = *(_OWORD *)(v24 + 8);
        *(_QWORD *)(v25 + 24) = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v25 + 32) = *(_QWORD *)(v24 + 32);
        *(_QWORD *)(v25 + 40) = *(_QWORD *)(v24 + 40);
        *(_QWORD *)(v25 + 48) = *(_QWORD *)(v24 + 48);
        *(_QWORD *)(v25 + 56) = *(_QWORD *)(v24 + 56);
        *(_QWORD *)(v25 + 64) = *(_QWORD *)(v24 + 64);
        *(_QWORD *)(v25 + 72) = *(_QWORD *)(v24 + 72);
        *(_QWORD *)(v25 + 80) = *(_QWORD *)(v24 + 80);
        *(_QWORD *)(v25 + 88) = *(_QWORD *)(v24 + 88);
        *(_QWORD *)(v25 + 96) = *(_QWORD *)(v24 + 96);
        v27 = *(_OWORD *)(v24 + 104);
        *(_QWORD *)(v25 + 120) = *(_QWORD *)(v24 + 120);
        *(_OWORD *)(v25 + 104) = v27;
        *(_QWORD *)(v25 + 128) = *(_QWORD *)(v24 + 128);
        v28 = *(_OWORD *)(v24 + 136);
        *(_QWORD *)(v24 + 136) = 0;
        *(_QWORD *)(v24 + 144) = 0;
        v29 = *(std::__shared_weak_count **)(v25 + 144);
        *(_OWORD *)(v25 + 136) = v28;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        *(_BYTE *)(v14 - 8) = *(_BYTE *)(v15 - 8);
        v14 = v25;
        v15 = v24;
      }
      while ((char *)v24 != v4);
    }
    *(_QWORD *)v4 = v12;
    v36 = &v7[160 * v9];
    *(_OWORD *)(v36 + 8) = v85;
    *(_OWORD *)(v36 + 24) = v83;
    *(_OWORD *)(v36 + 40) = v82;
    *(_OWORD *)(v36 + 56) = v81;
    *(_OWORD *)(v36 + 72) = v80;
    *(_OWORD *)(v36 + 88) = v79;
    *(_OWORD *)(v36 + 104) = v86;
    *((_QWORD *)v36 + 15) = v87;
    *((_QWORD *)v36 + 16) = v13;
    v37 = (std::__shared_weak_count *)*((_QWORD *)v36 + 18);
    *(_OWORD *)(v36 + 136) = v84;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v7[160 * v9 + 152] = v17;
  }
  return v4;
}

void sub_239C3D4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_239C31B0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C3D4C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFBBD8;
  free(*(void **)(a1 + 968));
  free(*(void **)(a1 + 944));
  *(_QWORD *)a1 = off_250AFBC90;
  free(*(void **)(a1 + 896));
  free(*(void **)(a1 + 872));
  sub_239C33AF4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C3D534(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_250AFBDF8;
  v2 = *(void **)(a1 + 424);
  if (v2)
  {
    *(_QWORD *)(a1 + 432) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 416);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  free(*(void **)(a1 + 384));
  *(_QWORD *)a1 = &unk_250AFBEA8;
  sub_239C33C44(a1 + 72);
  return a1;
}

uint64_t sub_239C3D5A0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_250AFBF70;
  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  return a1;
}

void sub_239C3D630(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_250AFBF70;
  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  JUMPOUT(0x23B83E31CLL);
}

void sub_239C3D6D0(uint64_t a1, int a2, double a3, __n128 a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, __n128 a8, float64x2_t a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  __int128 *v14;
  double v15;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  double *v24;
  float64x2_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  const double *v34;
  uint64_t v35;
  float64x2_t v36;
  uint64_t v37;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  char v55;
  int v56;
  int v57;
  float64x2_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const double *v67;
  uint64_t v68;
  float64x2_t v69;
  uint64_t v70;
  float64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float64x2_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  float64x2_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  unint64_t v112;
  float64_t *v113;
  unint64_t v114;
  float64_t *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  __int128 *v122;
  _OWORD *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  size_t v128;
  _BYTE *v129;
  uint64_t v130;
  _OWORD *v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  float64x2_t *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  float64_t v146;
  float64x2_t *v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  char v167;
  int v168;
  int v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t v180;
  float64x2_t v182;
  const double *v184;
  uint64_t v185;
  float64x2_t v186;
  float64x2_t v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  int8x16_t v216;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v222;
  unint64_t v226;
  unint64_t v227;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v234;
  unint64_t v235;
  double v236;
  float64x2_t v237;
  unint64_t v238;
  double v239;
  float64x2_t v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  int8x16_t v249;
  double v250;
  double v251;
  double v252;
  float64x2_t *v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  int8x16_t v257;
  int8x16_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  int8x16_t v263;
  float64x2_t *v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  double v273;
  float64x2_t v274;
  double v275;
  float64x2_t v276;
  double v277;
  float64x2_t v278;
  int8x16_t v279;
  int8x16_t v280;
  float64x2_t v281;
  int8x16_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  int8x16_t v288;
  float64x2_t v289;
  int8x16_t v290;
  float64x2_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  float64_t v295;
  double v296;
  float64x2_t v297;
  double v298;
  float64x2_t v299;
  double v300;
  float64x2_t v301;
  int8x16_t v302;
  int8x16_t v303;
  double v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  int8x16_t v309;
  float64x2_t v310;
  float64x2_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  unint64_t *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  unint64_t *v336;
  uint64_t v337;
  char *v338;
  char *v339;
  uint64_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  unint64_t *v350;
  uint64_t v351;
  char *v352;
  char *v353;
  uint64_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  unint64_t *v368;
  uint64_t v369;
  char *v370;
  char *v371;
  uint64_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  uint64_t v379;
  float64x2_t v381;
  uint64_t v384;
  float64x2_t v388;
  float64x2_t v389;
  uint64_t v390;
  __int128 v391;
  uint64_t *v392;
  int8x16_t v393;
  double *v394;
  float64x2_t v395;
  int8x16_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  _QWORD *v401;
  float64x2_t v402;
  float64x2_t v403;
  uint64_t v404;
  float64_t v405;
  double v406;
  uint64_t v407;
  float64x2_t v408;
  uint64_t v409;
  float64x2_t v410;
  uint64_t v411;
  float64x2_t v412;
  int8x16_t v414;
  uint64_t v415;
  float64x2_t v416;
  unint64_t v417;
  uint64_t v418;
  int8x16_t v419;
  double *v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  _QWORD *v424;
  uint64_t v425;
  float64x2_t v426;
  unsigned int *v427;
  uint64_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  __int128 v432;
  __int128 v433;
  uint64_t v434;
  void *__p;
  void *v436;
  uint64_t v437;
  float64x2_t v438[5];
  _OWORD v439[3];
  float64x2_t v440;
  float64x2_t v441[2];
  float64x2_t v442[3];
  float64x2_t v443;
  double v444;
  float64x2_t v445;
  _BYTE v446[32];
  float64x2_t v447;
  double v448;
  double v449;
  double v450;
  double v451;
  __int128 v452;
  double v453;
  float64x2_t v454;
  __int128 v455;
  double v456;
  uint64_t v457;
  float64x2_t v458[9];
  uint64_t v459;
  _QWORD *v460;
  __int128 *v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  std::mutex v465;
  uint64_t v466;
  float64x2x3_t v467;
  float64x2x3_t v468;
  float64x2x3_t v469;
  float64x2x3_t v470;

  v466 = *MEMORY[0x24BDAC8D0];
  v14 = *(__int128 **)(a1 + 136);
  v15 = *(double *)(a1 + 144);
  __asm { FMOV            V0.2D, #1.0 }
  v432 = _Q0;
  v433 = _Q0;
  memset(v441, 0, sizeof(v441));
  v440 = 0u;
  memset(v439, 0, sizeof(v439));
  memset(v438, 0, sizeof(v438));
  v434 = *((_QWORD *)v14 + 1);
  __p = 0;
  v436 = 0;
  v437 = 0;
  v21 = *(_QWORD *)(v434 + 48) - *(_QWORD *)(v434 + 40);
  if ((v21 >> 2))
    sub_239AF450C(&__p, (v21 >> 2));
  v22 = (void *)*((_QWORD *)v14 + 6);
  v23 = *((_QWORD *)v14 + 7) - (_QWORD)v22;
  if (v23 >= 1)
    bzero(v22, 8 * (((unint64_t)v23 >> 3) - ((unint64_t)v23 > 7)) + 8);
  v401 = (_QWORD *)v14 + 23;
  v24 = (double *)*((_QWORD *)v14 + 13);
  v392 = (uint64_t *)v14;
  v391 = *v14;
  v405 = *((double *)v14 + 1);
  v394 = (double *)*((_QWORD *)v14 + 14);
  if (v24 != v394)
  {
    v25 = (float64x2_t)*v14;
    v26 = 0uLL;
    while (1)
    {
      v24[2] = 0.0;
      v438[0].f64[0] = 0.0;
      v458[0].f64[0] = v405;
      v27 = (uint64_t *)*((_QWORD *)v24 + 6);
      v28 = *((_QWORD *)v24 + 3);
      v29 = *((_QWORD *)v24 + 4);
      if (v29)
      {
        v30 = *(_QWORD *)(v391 + 80);
        v31 = *v27;
        v32 = (uint64_t *)(v31 + 8 * (v29 + v28));
        v33 = (uint64_t *)(v31 + 8 * v28);
        do
        {
          v47 = *v33;
          v48 = (_QWORD *)(v30 + 160 * *v33);
          v50 = v48[10];
          v49 = v48[11];
          v51 = v48[12];
          if (((*(unsigned __int8 *)(v49 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v50 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v51 + 36)) >> 7)
            v52 = 2;
          else
            v52 = 1;
          if ((v52 & a2) != 0)
          {
            v53 = *(unsigned __int8 *)(v50 + 4);
            if (!*(_BYTE *)(v50 + 4) || *(_DWORD *)(v50 + 48) != -1)
            {
              v54 = *(unsigned __int8 *)(v49 + 4);
              if (!*(_BYTE *)(v49 + 4) || *(_DWORD *)(v49 + 48) != -1)
              {
                v55 = *(_BYTE *)(v51 + 4);
                if (!v55 || *(_DWORD *)(v51 + 32) != -1)
                {
                  LOBYTE(v442[0].f64[0]) = *(_BYTE *)(v50 + 4);
                  if (v53)
                    v56 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v50 + 48));
                  else
                    v56 = -1;
                  HIDWORD(v442[0].f64[0]) = v56;
                  LOBYTE(v442[0].f64[1]) = v54;
                  if (v54)
                    v57 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v49 + 48));
                  else
                    v57 = -1;
                  HIDWORD(v442[0].f64[1]) = v57;
                  LOBYTE(v442[1].f64[0]) = v55;
                  HIDWORD(v442[1].f64[0]) = -1;
                  sub_239C3F734((uint64_t)(v48 + 1), (uint64_t)&v433, (uint64_t)&v438[0].f64[1], v25.f64[0], a4.n128_f64[0], a5.f64[0], a6.f64[0], a7.f64[0], a8.n128_f64[0], a9, a10);
                  v59 = (float64x2_t *)(v30 + 160 * v47 + 104);
                  if (v53)
                  {
                    v60 = *((_QWORD *)v24 + 3);
                    v62 = *((_QWORD *)v24 + 5);
                    v61 = *((_QWORD *)v24 + 6);
                    v63 = *(_QWORD *)(v61 + 56);
                    v64 = v63 + 16 * v60;
                    if (v62)
                    {
                      v65 = v63 + 16 * (v62 + v60);
                      v66 = 16 * v62;
                      while (*(_DWORD *)v64 != v56)
                      {
                        v64 += 16;
                        v66 -= 16;
                        if (!v66)
                        {
                          v64 = v65;
                          break;
                        }
                      }
                    }
                    v67 = &v438[0].f64[1];
                    v469 = vld3q_f64(v67);
                    v68 = *(_QWORD *)(v61 + 24) + 8 * *(_QWORD *)(v64 + 8);
                    _Q4.f64[0] = *(float64_t *)(v68 + 16);
                    _Q5.f64[1] = v438[4].f64[0];
                    v69 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v469.val[0], v441[0].f64[1]), v469.val[1], *(float64x2_t *)((char *)v441 + 8), 1), v469.val[2], v441[1].f64[1]);
                    v469.val[0] = vmulq_f64(*(float64x2_t *)((char *)&v438[3] + 8), *(float64x2_t *)((char *)v441 + 8));
                    v469.val[1].f64[0] = v441[1].f64[0];
                    __asm { FMLA            D0, D1, V5.D[1] }
                    v469.val[0].f64[0] = v469.val[0].f64[0] + v438[4].f64[1] * v441[1].f64[1];
                    *(float64x2_t *)v68 = vaddq_f64(*(float64x2_t *)v68, v69);
                    *(_QWORD *)(v68 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v469.val[0]);
                    v470 = vld3q_f64(v67);
                    v70 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v56);
                    _Q4.f64[0] = *(float64_t *)(v70 + 16);
                    _Q5.f64[0] = v438[4].f64[1];
                    _Q6 = *(float64x2_t *)((char *)&v438[3] + 8);
                    v40.f64[0] = *(float64_t *)(v30 + 160 * v47 + 120);
                    v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], v59->f64[0]), v470.val[1], *v59, 1), v470.val[2], v40.f64[0]);
                    v470.val[0] = vmulq_f64(*(float64x2_t *)((char *)&v438[3] + 8), *v59);
                    v470.val[1].f64[0] = *(float64_t *)(v30 + 160 * v47 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    v470.val[0].f64[0] = v470.val[0].f64[0] + v438[4].f64[1] * v40.f64[0];
                    *(float64x2_t *)v70 = vsubq_f64(*(float64x2_t *)v70, v71);
                    *(_QWORD *)(v70 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v470.val[0]);
                  }
                  if (v54)
                  {
                    v72 = *((_QWORD *)v24 + 3);
                    v74 = *((_QWORD *)v24 + 5);
                    v73 = *((_QWORD *)v24 + 6);
                    v75 = *(_QWORD *)(v73 + 56);
                    v76 = v75 + 16 * v72;
                    if (v74)
                    {
                      v77 = v75 + 16 * (v74 + v72);
                      v78 = 16 * v74;
                      while (*(_DWORD *)v76 != v57)
                      {
                        v76 += 16;
                        v78 -= 16;
                        if (!v78)
                        {
                          v76 = v77;
                          break;
                        }
                      }
                    }
                    v34 = (const double *)v439;
                    v467 = vld3q_f64(v34);
                    v35 = *(_QWORD *)(v73 + 24) + 8 * *(_QWORD *)(v76 + 8);
                    _Q4.f64[0] = *(float64_t *)(v35 + 16);
                    _Q5.f64[1] = v440.f64[1];
                    v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v467.val[0], v441[0].f64[1]), v467.val[1], *(float64x2_t *)((char *)v441 + 8), 1), v467.val[2], v441[1].f64[1]);
                    v467.val[0] = vmulq_f64(v440, *(float64x2_t *)((char *)v441 + 8));
                    v467.val[1].f64[0] = v441[1].f64[0];
                    __asm { FMLA            D0, D1, V5.D[1] }
                    v467.val[0].f64[0] = v467.val[0].f64[0] + v441[0].f64[0] * v441[1].f64[1];
                    *(float64x2_t *)v35 = vaddq_f64(*(float64x2_t *)v35, v36);
                    *(_QWORD *)(v35 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v467.val[0]);
                    v468 = vld3q_f64(v34);
                    v37 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v57);
                    _Q4.f64[0] = *(float64_t *)(v37 + 16);
                    _Q5.f64[0] = v441[0].f64[0];
                    _Q6 = v440;
                    v40.f64[0] = *(float64_t *)(v30 + 160 * v47 + 120);
                    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v468.val[0], v59->f64[0]), v468.val[1], *v59, 1), v468.val[2], v40.f64[0]);
                    v468.val[0] = vmulq_f64(v440, *v59);
                    v468.val[1].f64[0] = *(float64_t *)(v30 + 160 * v47 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    v468.val[0].f64[0] = v468.val[0].f64[0] + v441[0].f64[0] * v40.f64[0];
                    *(float64x2_t *)v37 = vsubq_f64(*(float64x2_t *)v37, v41);
                    *(_QWORD *)(v37 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v468.val[0]);
                  }
                  _Q0.f64[1] = v441[1].f64[0];
                  _Q2 = *v59;
                  _Q2.f64[0] = *(float64_t *)(v30 + 160 * v47 + 112);
                  __asm { FMLA            D3, D2, V0.D[1] }
                  _Q2.f64[0] = v438[0].f64[0];
                  v24[2] = v24[2] - (_D3 + v441[1].f64[1] * *(double *)(v30 + 160 * v47 + 120));
                  _V1.D[1] = v441[1].f64[0];
                  _Q4.f64[0] = v441[1].f64[0];
                  __asm { FMLA            D3, D4, V1.D[1] }
                  _Q0.f64[0] = _Q2.f64[0] + _D3 + v441[1].f64[1] * v441[1].f64[1];
                  v438[0].f64[0] = _Q0.f64[0];
                  v25.f64[0] = sub_239C23F18((uint64_t *)v458, (uint64_t)v442, (uint64_t)&v438[0].f64[1], _Q0, v441[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v40);
                  v26 = 0uLL;
                }
              }
            }
          }
          ++v33;
        }
        while (v33 != v32);
        v79 = v438[0].f64[0];
        v27 = (uint64_t *)*((_QWORD *)v24 + 6);
        v28 = *((_QWORD *)v24 + 3);
      }
      else
      {
        v79 = 0.0;
      }
      a4.n128_f64[0] = fabs(v79);
      v25.f64[0] = 1.0 / v79;
      if (a4.n128_f64[0] < v15)
        v25.f64[0] = 0.0;
      v24[1] = v25.f64[0];
      v80 = *((_QWORD *)v24 + 5);
      if (v80)
        break;
LABEL_7:
      v24 += 7;
      if (v24 == v394)
        goto LABEL_131;
    }
    v409 = v434;
    v81 = v27[7];
    v407 = v81 + 16 * (v80 + v28);
    v82 = v81 + 16 * v28;
    v420 = v24;
    while (1)
    {
      v83 = *(_QWORD *)(*((_QWORD *)v24 + 6) + 24) + 8 * *(_QWORD *)(v82 + 8);
      v25.f64[0] = *(float64_t *)(v83 + 16);
      a4 = *(__n128 *)v83;
      a5.f64[0] = v24[1];
      a6.f64[0] = v24[2];
      a7 = vmulq_n_f64(*(float64x2_t *)v83, a5.f64[0]);
      v84 = *(_QWORD *)v409 + 8 * (*(_DWORD *)(v409 + 28) + 3 * *(_DWORD *)v82);
      a4.n128_u64[0] = *(_QWORD *)(v84 + 16);
      v430 = vmulq_f64(v25, a5);
      a4.n128_u64[0] = *(_OWORD *)&vmlsq_f64((float64x2_t)a4, a6, v430);
      a5 = a7;
      v25 = vmlsq_lane_f64(*(float64x2_t *)v84, a7, a6.f64[0], 0);
      *(float64x2_t *)v84 = v25;
      *(_QWORD *)(v84 + 16) = a4.n128_u64[0];
      v411 = v82;
      v85 = *(_DWORD *)v82;
      v86 = *((_QWORD *)v24 + 3);
      v87 = *((_QWORD *)v24 + 5);
      v88 = *(_QWORD *)(*((_QWORD *)v24 + 6) + 56);
      v89 = (unsigned int *)(v88 + 16 * v86);
      if (v87)
      {
        v90 = 16 * v87;
        while (*v89 < v85)
        {
          v89 += 4;
          v90 -= 16;
          if (!v90)
            goto LABEL_48;
        }
      }
      v427 = (unsigned int *)(v88 + 16 * (v87 + v86));
      if (v89 != v427)
        break;
LABEL_48:
      v82 = v411 + 16;
      if (v411 + 16 == v407)
        goto LABEL_7;
    }
    v25 = (float64x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL);
    v91 = *(_QWORD **)(v409 + 32);
    v424 = v91 + 2;
    a5.f64[1] = v25.f64[0];
    v422 = a5;
    while (1)
    {
      v94 = v91[11] + 24 * *v89;
      v95 = *(char **)v94;
      v96 = *(char **)(v94 + 8);
      if (*(char **)v94 != v96)
      {
        while (*(_DWORD *)v95 < v85)
        {
          v95 += 16;
          if (v95 == v96)
            goto LABEL_65;
        }
      }
      if (v95 == v96)
        goto LABEL_65;
      if (*(_DWORD *)v95 != v85)
        break;
      v92 = *v424 + 8 * *((_QWORD *)v95 + 1);
LABEL_57:
      v93 = *(_QWORD *)(*((_QWORD *)v24 + 6) + 24) + 8 * *((_QWORD *)v89 + 1);
      v25.f64[0] = *(float64_t *)(v92 + 16);
      a5.f64[0] = *(float64_t *)(v92 + 40);
      a7.f64[0] = *(float64_t *)(v92 + 64);
      a9.f64[0] = *(float64_t *)(v93 + 16);
      a10 = *(float64x2_t *)v93;
      v12.f64[0] = v430.f64[0] * *(double *)v93;
      v13.f64[0] = vmuld_lane_f64(v430.f64[0], *(float64x2_t *)v93, 1);
      v25 = vsubq_f64(v25, v12);
      v12.f64[1] = v422.f64[1];
      a4 = (__n128)vmlsq_lane_f64(*(float64x2_t *)v92, v422, *(double *)v93, 0);
      a5 = vsubq_f64(a5, v13);
      a6 = vmlsq_laneq_f64(*(float64x2_t *)(v92 + 24), v422, *(float64x2_t *)v93, 1);
      a7 = vmlsq_f64(a7, a9, v430);
      a8 = (__n128)vmlsq_lane_f64(*(float64x2_t *)(v92 + 48), v422, a9.f64[0], 0);
      *(__n128 *)v92 = a4;
      *(float64_t *)(v92 + 16) = v25.f64[0];
      *(float64x2_t *)(v92 + 24) = a6;
      *(float64_t *)(v92 + 40) = a5.f64[0];
      *(__n128 *)(v92 + 48) = a8;
      *(float64_t *)(v92 + 64) = a7.f64[0];
      v89 += 4;
      if (v89 == v427)
        goto LABEL_48;
    }
    v96 = v95;
LABEL_65:
    v97 = v91[10];
    if (v97)
    {
      v99 = v91[6];
      v98 = v91[7];
      v100 = ((v98 - v99) << 6) - 1;
      v101 = v91[9];
      if (v98 == v99)
        v100 = 0;
      v92 = v91[2]
          + 8
          * *(_QWORD *)(*(_QWORD *)(v99 + (((unint64_t)(v101 + v97 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v101 + v97 - 1) & 0x1FF));
      v91[10] = v97 - 1;
      if ((unint64_t)(v100 - (v97 + v101) + 1) >= 0x400)
      {
        operator delete(*(void **)(v98 - 8));
        v91[7] -= 8;
      }
      goto LABEL_130;
    }
    v442[0].f64[0] = 0.0;
    v103 = v91[2];
    v102 = (float64x2_t *)v91[3];
    v104 = (unint64_t)v102 - v103;
    v105 = (uint64_t)((uint64_t)v102 - v103) >> 3;
    v106 = (float64x2_t *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8));
    v107 = v91[4];
    if ((unint64_t)(v107 - (_QWORD)v102) < 0x48)
    {
      v108 = v105 + 9;
      if ((unint64_t)(v105 + 9) >> 61)
        sub_2394189F8();
      v109 = v107 - v103;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v108 = 0x1FFFFFFFFFFFFFFFLL;
      v417 = v108;
      if (v108)
      {
        if (v108 >> 61)
          sub_239418A80();
        v110 = operator new(8 * v108);
        v26 = 0uLL;
      }
      else
      {
        v110 = 0;
      }
      v116 = &v110[8 * v105];
      *((_QWORD *)v116 + 8) = 0;
      *((_OWORD *)v116 + 2) = v26;
      *((_OWORD *)v116 + 3) = v26;
      *(_OWORD *)v116 = v26;
      *((_OWORD *)v116 + 1) = v26;
      v415 = v94;
      if ((float64x2_t *)v103 == v102)
      {
        v118 = &v110[8 * v105];
      }
      else
      {
        if (v104 - 8 >= 0x68)
        {
          v119 = (uint64_t)((uint64_t)v102 - v103) >> 3;
          v117 = (char *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8));
          v118 = &v110[8 * v105];
          if (v103 + (v104 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v110[v104 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v120 = ((v104 - 8) >> 3) + 1;
            v117 = (char *)v106 - 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
            v121 = 8 * v119;
            v122 = (__int128 *)(v103 + 8 * v119 - 16);
            v123 = &v110[v121 - 16];
            v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v125 = *v122;
              *(v123 - 1) = *(v122 - 1);
              *v123 = v125;
              v122 -= 2;
              v123 -= 2;
              v124 -= 4;
            }
            while (v124);
            v118 = &v116[-8 * (v120 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_93;
          }
        }
        else
        {
          v117 = (char *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8));
          v118 = &v110[8 * v105];
        }
        do
        {
          v126 = *((_QWORD *)v117 - 1);
          v117 -= 8;
          *((_QWORD *)v118 - 1) = v126;
          v118 -= 8;
        }
        while (v117 != (char *)v103);
      }
LABEL_93:
      v127 = v116 + 72;
      v128 = (char *)v102 - (char *)v106;
      if (v128)
      {
        v129 = v110;
        memmove(v116 + 72, v106, v128);
        v110 = v129;
      }
      v91[2] = v118;
      v91[3] = &v127[v128];
      v91[4] = &v110[8 * v417];
      v94 = v415;
      if (v103)
        operator delete((void *)v103);
      goto LABEL_129;
    }
    v418 = (uint64_t)((uint64_t)v102 - v103) >> 3;
    v111 = (char *)v102 - (char *)v106;
    if ((unint64_t)((char *)v102 - (char *)v106) > 0x47)
    {
      v113 = (float64_t *)v91[3];
      v112 = 9;
      goto LABEL_106;
    }
    v112 = v111 >> 3;
    v113 = &v102->f64[9 - (v111 >> 3)];
    v114 = 64 - (v111 & 0xFFFFFFFFFFFFFFF8);
    if (v114 >= 0x68)
    {
      if (v102 >= (float64x2_t *)&v442[0].f64[1] || v442 >= (float64x2_t *)((char *)&v102->f64[1] + v114))
      {
        v130 = (v114 >> 3) + 1;
        v131 = (_OWORD *)v91[3];
        v132 = v130 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *v131 = v26;
          v131[1] = v26;
          v131 += 2;
          v132 -= 4;
        }
        while (v132);
        if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_105:
          v91[3] = v113;
          if (v102 == v106)
            goto LABEL_129;
LABEL_106:
          v133 = (char *)v113 - (char *)&v106[4].f64[1];
          v134 = v133 >> 3;
          v135 = (float64x2_t *)(v113 - 9);
          v136 = (char *)v113;
          if (v113 - 9 < (float64_t *)v102)
          {
            v137 = (v104 & 0xFFFFFFFFFFFFFFF8) + v133;
            v138 = v103 + v137 + 8;
            if ((unint64_t)v102 > v138)
              v138 = (unint64_t)v102;
            v139 = v138 + ~v103 - v137;
            if (v139 > 0x57)
            {
              v140 = (v139 >> 3) + 1;
              v141 = v140 & 0x3FFFFFFFFFFFFFFCLL;
              v135 = (float64x2_t *)((char *)v135 + v141 * 8);
              v142 = v113 + 2;
              v143 = (__int128 *)(v103 + 8 * v134 + 8 * v418 + 16);
              v144 = v140 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v145 = *v143;
                *(v142 - 1) = *(v143 - 1);
                *v142 = v145;
                v142 += 2;
                v143 += 2;
                v144 -= 4;
              }
              while (v144);
              v136 = (char *)&v113[v141];
              if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_115;
            }
            else
            {
              v136 = (char *)v113;
            }
            do
            {
              v146 = v135->f64[0];
              v135 = (float64x2_t *)((char *)v135 + 8);
              *(float64_t *)v136 = v146;
              v136 += 8;
            }
            while (v135 < v102);
          }
LABEL_115:
          v91[3] = v136;
          if (v113 != &v106[4].f64[1])
            memmove(&v113[-v134], (const void *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8)), v133);
          v147 = v442;
          if (v106 <= v442)
          {
            v148 = 72;
            if (v91[3] <= (unint64_t)v442)
              v148 = 0;
            v147 = (float64x2_t *)((char *)v442 + v148);
          }
          if (v112 >= 0xA
            && (v106 >= (float64x2_t *)&v147->f64[1]
             || (unint64_t)v147 >= v103 + (v104 & 0xFFFFFFFFFFFFFFF8) + 8 * v112))
          {
            v106 = (float64x2_t *)((char *)v106 + 8 * (v112 & 0xFFFFFFFFFFFFFFFCLL));
            v149 = vld1q_dup_f64(v147->f64);
            v150 = (float64x2_t *)(v103 + 8 * v418 + 16);
            v151 = v112 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v150[-1] = v149;
              *v150 = v149;
              v150 += 2;
              v151 -= 4;
            }
            while (v151);
            if (v112 == (v112 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_129;
            v112 &= 3u;
          }
          do
          {
            v106->f64[0] = v147->f64[0];
            v106 = (float64x2_t *)((char *)v106 + 8);
            --v112;
          }
          while (v112);
LABEL_129:
          v92 = v91[3] - 72;
          v24 = v420;
LABEL_130:
          v152 = (v92 - *v424) >> 3;
          LODWORD(v442[0].f64[0]) = v85;
          *(_QWORD *)&v442[0].f64[1] = v152;
          sub_239C22598((char **)v94, v96, v442);
          v26 = 0uLL;
          goto LABEL_57;
        }
        v115 = &v102->f64[v130 & 0x3FFFFFFFFFFFFFFCLL];
      }
      else
      {
        v115 = (float64_t *)v91[3];
      }
    }
    else
    {
      v115 = (float64_t *)v91[3];
    }
    do
      *v115++ = v442[0].f64[0];
    while (v115 != v113);
    goto LABEL_105;
  }
LABEL_131:
  v153 = v392[16];
  v425 = v392[17];
  if (v153 != v425)
  {
    v154 = *(double *)&v391;
    do
    {
      *(_QWORD *)(v153 + 16) = 0;
      v458[0].f64[0] = v405;
      v428 = v153;
      v155 = *(_QWORD *)(v153 + 32);
      if (v155)
      {
        v156 = *(_QWORD *)(v391 + 80);
        v157 = (uint64_t *)(**(_QWORD **)(v153 + 48) + 8 * *(_QWORD *)(v153 + 24));
        v158 = 8 * v155;
        do
        {
          v159 = *v157;
          v160 = (_QWORD *)(v156 + 160 * *v157);
          v162 = v160[10];
          v161 = v160[11];
          v163 = v160[12];
          if (((*(unsigned __int8 *)(v161 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v162 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v163 + 36)) >> 7)
            v164 = 2;
          else
            v164 = 1;
          if ((v164 & a2) != 0)
          {
            v165 = *(unsigned __int8 *)(v162 + 4);
            if (!*(_BYTE *)(v162 + 4) || *(_DWORD *)(v162 + 48) != -1)
            {
              v166 = *(unsigned __int8 *)(v161 + 4);
              if (!*(_BYTE *)(v161 + 4) || *(_DWORD *)(v161 + 48) != -1)
              {
                v167 = *(_BYTE *)(v163 + 4);
                if (!v167 || *(_DWORD *)(v163 + 32) != -1)
                {
                  LOBYTE(v442[0].f64[0]) = *(_BYTE *)(v162 + 4);
                  if (v165)
                    v168 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v162 + 48));
                  else
                    v168 = -1;
                  HIDWORD(v442[0].f64[0]) = v168;
                  LOBYTE(v442[0].f64[1]) = v166;
                  if (v166)
                    v169 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v161 + 48));
                  else
                    v169 = -1;
                  HIDWORD(v442[0].f64[1]) = v169;
                  LOBYTE(v442[1].f64[0]) = v167;
                  HIDWORD(v442[1].f64[0]) = -1;
                  v170.f64[0] = sub_239C3F734((uint64_t)(v160 + 1), (uint64_t)&v433, (uint64_t)&v438[0].f64[1], v154, a4.n128_f64[0], a5.f64[0], a6.f64[0], a7.f64[0], a8.n128_f64[0], a9, a10);
                  v178 = (float64x2_t *)(v156 + 160 * v159 + 104);
                  if (v165)
                  {
                    *(float64x2x3_t *)(&v172 - 2) = vld3q_f64(&v438[0].f64[1]);
                    v179 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v168);
                    v173 = *(float64x2_t *)v179;
                    v174.f64[0] = *(float64_t *)(v179 + 16);
                    v175.f64[0] = v438[4].f64[1];
                    _Q6 = *(float64x2_t *)((char *)&v438[3] + 8);
                    v177.f64[0] = *(float64_t *)(v156 + 160 * v159 + 120);
                    v182 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v180, v178->f64[0]), _Q1, *v178, 1), v172, v177.f64[0]);
                    _Q0 = vmulq_f64(*(float64x2_t *)((char *)&v438[3] + 8), *v178);
                    _Q1.f64[0] = *(float64_t *)(v156 + 160 * v159 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    _Q0.f64[0] = _Q0.f64[0] + v438[4].f64[1] * v177.f64[0];
                    v170 = vsubq_f64(v174, _Q0);
                    v171 = vsubq_f64(*(float64x2_t *)v179, v182);
                    *(float64x2_t *)v179 = v171;
                    *(float64_t *)(v179 + 16) = v170.f64[0];
                  }
                  if (v166)
                  {
                    v184 = (const double *)v439;
                    *(float64x2x3_t *)(&v172 - 2) = vld3q_f64(v184);
                    v185 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v169);
                    v173 = *(float64x2_t *)v185;
                    v174.f64[0] = *(float64_t *)(v185 + 16);
                    v175.f64[0] = v441[0].f64[0];
                    _Q6 = v440;
                    v177.f64[0] = *(float64_t *)(v156 + 160 * v159 + 120);
                    v188 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, v178->f64[0]), _Q1, *v178, 1), v172, v177.f64[0]);
                    _Q0 = vmulq_f64(v440, *v178);
                    _Q1.f64[0] = *(float64_t *)(v156 + 160 * v159 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    _Q0.f64[0] = _Q0.f64[0] + v441[0].f64[0] * v177.f64[0];
                    v170 = vsubq_f64(v174, _Q0);
                    v171 = vsubq_f64(*(float64x2_t *)v185, v188);
                    *(float64x2_t *)v185 = v171;
                    *(float64_t *)(v185 + 16) = v170.f64[0];
                  }
                  v154 = sub_239C23F18((uint64_t *)v458, (uint64_t)v442, (uint64_t)&v438[0].f64[1], v170, v171.f64[0], v172, v173.f64[0], v174, v175, _Q6, v177);
                }
              }
            }
          }
          ++v157;
          v158 -= 8;
        }
        while (v158);
      }
      v153 = v428 + 56;
    }
    while (v428 + 56 != v425);
  }
  v190 = v392[1];
  v459 = *v392;
  v460 = v401;
  v461 = &v432;
  v404 = v190;
  v462 = v190;
  v463 = 0;
  v464 = a2;
  memset(v465.__m_.__opaque, 0, sizeof(v465.__m_.__opaque));
  v465.__m_.__sig = 850045863;
  v192 = *(_QWORD *)(v459 + 56);
  v191 = *(_QWORD *)(v459 + 64);
  if (v192 != v191)
  {
    v390 = *(_QWORD *)(v459 + 64);
    _D10 = 0;
    while (1)
    {
      v194 = *(_QWORD *)(v192 + 48);
      v195 = *(_QWORD *)(v192 + 56);
      v196 = ((*(unsigned __int8 *)(v195 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v194 + 52)) >> 7 ? 2 : 1;
      if ((v196 & v464) != 0)
      {
        v197 = *(unsigned __int8 *)(v194 + 4);
        if (!*(_BYTE *)(v194 + 4) || *(_DWORD *)(v194 + 48) != -1)
        {
          v198 = *(unsigned __int8 *)(v195 + 4);
          if (!*(_BYTE *)(v195 + 4) || *(_DWORD *)(v195 + 48) != -1)
            break;
        }
      }
LABEL_160:
      v192 += 120;
      if (v192 == v191)
        goto LABEL_252;
    }
    if (*(_BYTE *)(v194 + 4))
    {
      v199 = *(_DWORD *)(*v460 + 4 * *(unsigned int *)(v194 + 48));
      if (*(_BYTE *)(v195 + 4))
      {
LABEL_171:
        v200 = *(_DWORD *)(*v460 + 4 * *(unsigned int *)(v195 + 48));
        goto LABEL_174;
      }
    }
    else
    {
      v199 = -1;
      if (*(_BYTE *)(v195 + 4))
        goto LABEL_171;
    }
    v200 = -1;
LABEL_174:
    *(_QWORD *)(v192 + 32) = v194 + 16;
    *(_QWORD *)(v192 + 40) = v195 + 16;
    v454 = 0u;
    v455 = 0u;
    BYTE8(v455) = 1;
    v456 = 0.0;
    v457 = 1;
    memset(v458, 0, sizeof(v458));
    memset(v442, 0, sizeof(v442));
    v443 = 0u;
    v444 = 0.0;
    v448 = 0.0;
    *(float64x2_t *)&v446[16] = *(float64x2_t *)((char *)&v458[6] + 8);
    v447 = *(float64x2_t *)((char *)&v458[7] + 8);
    v445 = *(float64x2_t *)((char *)&v458[4] + 8);
    *(float64x2_t *)v446 = *(float64x2_t *)((char *)&v458[5] + 8);
    v450 = 0.0;
    v451 = 0.0;
    v449 = 0.0;
    v452 = *(__int128 *)((char *)&v458[1] + 8);
    v453 = 0.0;
    sub_239C23688(v192 + 24, (uint64_t)&v454, (uint64_t)v442, *(float64x2_t *)((char *)&v458[1] + 8), 0.0, *(float64x2_t *)((char *)&v458[6] + 8));
    v218.f64[0] = 0.0;
    v219.f64[0] = 1.0 / v456;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 32) + 24))
    {
      _Q1.f64[1] = v442[0].f64[1];
      _V4.D[1] = v442[2].f64[0];
      _Q6.f64[1] = v443.f64[1];
      v222.f64[0] = 0.0;
      v222.f64[1] = 1.0 / v456;
      v207 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v442[0].f64[0]), v222, v442[0], 1), (float64x2_t)0, v442[1].f64[0]);
      __asm { FMLA            D20, D10, V1.D[1] }
      _Q1.f64[0] = _D20 + v219.f64[0] * v442[1].f64[0];
      v201 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v442[1].f64[1]), v222, *(float64x2_t *)((char *)&v442[1] + 8), 1), (float64x2_t)0, v442[2].f64[1]);
      __asm { FMLA            D20, D10, V4.D[1] }
      v202.f64[0] = _D20 + v219.f64[0] * v442[2].f64[1];
      v206 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v443.f64[0]), v222, v443, 1), (float64x2_t)0, v444);
      __asm { FMLA            D4, D10, V6.D[1] }
      _Q6.f64[0] = _D4 + v219.f64[0] * v444;
      v204 = vaddq_f64(v207, (float64x2_t)0);
      v209 = vaddq_f64(_Q1, (float64x2_t)0);
      v203 = vaddq_f64(v201, (float64x2_t)0);
      v210 = vaddq_f64(v202, (float64x2_t)0);
      v202 = vaddq_f64(v206, (float64x2_t)0);
      v211 = vaddq_f64(_Q6, (float64x2_t)0);
      v212.f64[0] = v203.f64[1];
      v226 = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
      v227 = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
    }
    else
    {
      v204.f64[0] = 0.0;
      v227 = 0;
      v209.f64[0] = 0.0;
      v203.f64[0] = 0.0;
      v212.f64[0] = 0.0;
      v210.f64[0] = 0.0;
      v202.f64[0] = 0.0;
      v226 = 0;
      v211.f64[0] = 0.0;
    }
    *(_QWORD *)&v201.f64[0] = v455;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
    {
      _V7.D[1] = v445.f64[1];
      _V16.D[1] = *(_QWORD *)&v446[16];
      _V28.D[1] = v447.f64[1];
      v218.f64[1] = 1.0 / v456;
      v231 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v445.f64[0]), v218, v445, 1), (float64x2_t)0, *(double *)v446);
      __asm { FMLA            D30, D10, V7.D[1] }
      _Q6.f64[0] = _Q30.f64[0] + v219.f64[0] * *(double *)v446;
      v232 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), *(double *)&v446[8]), v218, *(float64x2_t *)&v446[8], 1), (float64x2_t)0, *(double *)&v446[24]);
      __asm { FMLA            D30, D10, V16.D[1] }
      _Q30.f64[0] = _Q30.f64[0] + v219.f64[0] * *(double *)&v446[24];
      v215 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v447.f64[0]), v218, v447, 1), (float64x2_t)0, v448);
      __asm { FMLA            D16, D10, V28.D[1] }
      v218.f64[0] = _D16 + v219.f64[0] * v448;
      v207 = vaddq_f64(v231, (float64x2_t)0);
      v213 = vaddq_f64(_Q6, (float64x2_t)0);
      v206 = vaddq_f64(v232, (float64x2_t)0);
      v214 = vaddq_f64(_Q30, (float64x2_t)0);
      v234 = vaddq_f64(v215, (float64x2_t)0);
      v218 = vaddq_f64(v218, (float64x2_t)0);
      v215.f64[0] = v206.f64[1];
      v216 = vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL);
      v235 = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
    }
    else
    {
      v207.f64[0] = 0.0;
      v235 = 0;
      v213.f64[0] = 0.0;
      v206.f64[0] = 0.0;
      v215.f64[0] = 0.0;
      v214.f64[0] = 0.0;
      v234.f64[0] = 0.0;
      v216.i64[0] = 0;
    }
    v208.f64[0] = -1.0 / (v456 * v456);
    *(_QWORD *)&v236 = *(_OWORD *)&vmulq_f64(v201, v208);
    v237 = vmulq_n_f64(v454, v208.f64[0]);
    v238 = vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL).u64[0];
    v239 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 32) + 24))
    {
      v240.f64[0] = v237.f64[0];
      *(_QWORD *)&v240.f64[1] = v238;
      v10.f64[0] = v236 * v449;
      v11.f64[0] = v236 * v450;
      *(_QWORD *)&v204.f64[1] = v227;
      v203.f64[1] = v212.f64[0];
      v212.f64[0] = v236 * v451;
      *(_QWORD *)&v202.f64[1] = v226;
      v204 = vmlaq_n_f64(v204, v240, v449);
      *(_QWORD *)&v241 = *(_OWORD *)&vaddq_f64(v209, v10);
      v203 = vmlaq_n_f64(v203, v240, v450);
      *(_QWORD *)&v242 = *(_OWORD *)&vaddq_f64(v210, v11);
      v202 = vmlaq_n_f64(v202, v240, v451);
      *(_QWORD *)&v243 = *(_OWORD *)&vaddq_f64(v211, v212);
      v244 = v203.f64[1];
      *(_QWORD *)&v245 = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
      *(_QWORD *)&v246 = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
      if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
      {
LABEL_182:
        *(_QWORD *)&v237.f64[1] = v238;
        v210.f64[0] = v236 * *(double *)&v452;
        v11.f64[0] = v236 * *((double *)&v452 + 1);
        *(_QWORD *)&v207.f64[1] = v235;
        v206.f64[1] = v215.f64[0];
        v215.f64[0] = v236 * v453;
        *(_QWORD *)&v234.f64[1] = v216.i64[0];
        v207 = vmlaq_n_f64(v207, v237, *(double *)&v452);
        *(_QWORD *)&v247 = *(_OWORD *)&vaddq_f64(v213, v210);
        v206 = vmlaq_n_f64(v206, v237, *((double *)&v452 + 1));
        *(_QWORD *)&v248 = *(_OWORD *)&vaddq_f64(v214, v11);
        v249 = (int8x16_t)vmlaq_n_f64(v234, v237, v453);
        *(_QWORD *)&v239 = *(_OWORD *)&vaddq_f64(v218, v215);
        v250 = v206.f64[1];
        *(_QWORD *)&v251 = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
        *(_QWORD *)&v252 = vextq_s8(v249, v249, 8uLL).u64[0];
        goto LABEL_185;
      }
    }
    else
    {
      v204.f64[0] = 0.0;
      v245 = 0.0;
      v241 = 0.0;
      v203.f64[0] = 0.0;
      v244 = 0.0;
      v242 = 0.0;
      v202.f64[0] = 0.0;
      v246 = 0.0;
      v243 = 0.0;
      if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
        goto LABEL_182;
    }
    v207.f64[0] = 0.0;
    v251 = 0.0;
    v247 = 0.0;
    v206.f64[0] = 0.0;
    v250 = 0.0;
    v248 = 0.0;
    v249.i64[0] = 0;
    v252 = 0.0;
LABEL_185:
    v253 = *(float64x2_t **)(v192 + 24);
    v216.i64[0] = 0;
    v431 = (float64x2_t)v216;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 32) + 24))
    {
      v10.f64[1] = -1.0;
      LOBYTE(v11.f64[1]) = 0;
      BYTE1(v11.f64[1]) = 0;
      BYTE2(v11.f64[1]) = 0;
      BYTE3(v11.f64[1]) = 0;
      BYTE4(v11.f64[1]) = 0;
      BYTE5(v11.f64[1]) = 0;
      BYTE6(v11.f64[1]) = 0;
      HIBYTE(v11.f64[1]) = 0;
      v254 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v204.f64[0]), (float64x2_t)xmmword_239EC68E0, v245), (float64x2_t)0, v241);
      v204.f64[0] = v204.f64[0] * 0.0 + v245 * 0.0 - v241;
      v255 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v203.f64[0]), (float64x2_t)xmmword_239EC68E0, v244), (float64x2_t)0, v242);
      v203.f64[0] = v203.f64[0] * 0.0 + v244 * 0.0 - v242;
      v256 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v202.f64[0]), (float64x2_t)xmmword_239EC68E0, v246), (float64x2_t)0, v243);
      v202.f64[0] = v202.f64[0] * 0.0 + v246 * 0.0 - v243;
      v257 = (int8x16_t)vaddq_f64(v254, (float64x2_t)0);
      v399 = vaddq_f64(v204, (float64x2_t)0);
      v258 = (int8x16_t)vaddq_f64(v255, (float64x2_t)0);
      v402 = vaddq_f64(v203, (float64x2_t)0);
      v408 = vaddq_f64(v256, (float64x2_t)0);
      v410 = vaddq_f64(v202, (float64x2_t)0);
      v393 = vextq_s8(v257, v257, 8uLL);
      v395 = (float64x2_t)v257;
      v396.i64[0] = vextq_s8(v258, v258, 8uLL).u64[0];
      v397 = (float64x2_t)v258;
      v202 = (float64x2_t)vextq_s8((int8x16_t)v408, (int8x16_t)v408, 8uLL);
      v406 = v202.f64[0];
    }
    else
    {
      v202.f64[0] = 0.0;
      v395 = v202;
      v202.f64[0] = 0.0;
      v393 = (int8x16_t)v202;
      v202.f64[0] = 0.0;
      v399 = v202;
      v202.f64[0] = 0.0;
      v397 = v202;
      v396.i64[0] = 0;
      v202.f64[0] = 0.0;
      v402 = v202;
      v202.f64[0] = 0.0;
      v408 = v202;
      v406 = 0.0;
      v202.f64[0] = 0.0;
      v410 = v202;
    }
    if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
    {
      v259.f64[1] = -1.0;
      v260 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v207.f64[0]), (float64x2_t)xmmword_239EC68E0, v251), (float64x2_t)0, v247);
      v207.f64[0] = v207.f64[0] * 0.0 + v251 * 0.0 - v247;
      v261 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v206.f64[0]), (float64x2_t)xmmword_239EC68E0, v250), (float64x2_t)0, v248);
      v206.f64[0] = v206.f64[0] * 0.0 + v250 * 0.0 - v248;
      v262 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, *(double *)v249.i64), (float64x2_t)xmmword_239EC68E0, v252), (float64x2_t)0, v239);
      v259.f64[0] = *(double *)v249.i64 * 0.0 + v252 * 0.0 - v239;
      v263 = (int8x16_t)vaddq_f64(v260, (float64x2_t)0);
      v429 = vaddq_f64(v207, (float64x2_t)0);
      v426 = vaddq_f64(v206, (float64x2_t)0);
      v431 = vaddq_f64(v259, (float64x2_t)0);
      v414 = vextq_s8(v263, v263, 8uLL);
      v416 = (float64x2_t)v263;
      v412 = vaddq_f64(v261, (float64x2_t)0);
      v419.i64[0] = vextq_s8((int8x16_t)v412, (int8x16_t)v412, 8uLL).u64[0];
      v421 = vaddq_f64(v262, (float64x2_t)0);
      v202 = (float64x2_t)vextq_s8((int8x16_t)v421, (int8x16_t)v421, 8uLL);
    }
    else
    {
      v202.f64[0] = 0.0;
      v416 = v202;
      v202.f64[0] = 0.0;
      v414 = (int8x16_t)v202;
      v202.f64[0] = 0.0;
      v429 = v202;
      v202.f64[0] = 0.0;
      v412 = v202;
      v419.i64[0] = 0;
      v202.f64[0] = 0.0;
      v426 = v202;
      v202.f64[0] = 0.0;
      v421 = v202;
      v202.f64[0] = 0.0;
    }
    v423 = v202;
    v264 = (float64x2_t *)(v192 + 64);
    v265 = vmulq_f64(v201, v219);
    v266 = vmulq_n_f64(v454, v219.f64[0]);
    *(_QWORD *)&v266.f64[1] = vextq_s8((int8x16_t)v266, (int8x16_t)v266, 8uLL).u64[0];
    v268 = vsubq_f64(*v253, v266);
    v218.f64[0] = v253[1].f64[0];
    v267 = vsubq_f64(v218, v265);
    *(float64_t *)(v192 + 80) = v267.f64[0];
    *(_QWORD *)&v268.f64[1] = vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL).u64[0];
    *(float64x2_t *)(v192 + 64) = v268;
    v269 = *(_QWORD *)(v192 + 96);
    if (v269)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v269 + 24))(v269, v192 + 64);
      v270 = *(_QWORD *)(v192 + 96);
      v271 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v270 + 16))(v270);
      v272 = v271;
      if (*(_BYTE *)(*(_QWORD *)(v192 + 48) + 4))
      {
        switch(v271)
        {
          case 0:
            v273 = *(double *)(v270 + 32);
            v274 = *(float64x2_t *)(v270 + 16);
            v275 = *(double *)(v270 + 56);
            v276 = *(float64x2_t *)(v270 + 40);
            v277 = *(double *)(v270 + 80);
            v278 = *(float64x2_t *)(v270 + 64);
            v279 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v274, v395.f64[0]), v276, *(double *)v393.i64), v278, v399.f64[0]);
            v399.f64[0] = v273 * v395.f64[0] + v275 * *(double *)v393.i64 + v277 * v399.f64[0];
            v280 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v274, v397.f64[0]), v276, *(double *)v396.i64), v278, v402.f64[0]);
            v402.f64[0] = v273 * v397.f64[0] + v275 * *(double *)v396.i64 + v277 * v402.f64[0];
            v267 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v274, v408.f64[0]), v276, v406), v278, v410.f64[0]);
            v276.f64[0] = v273 * v408.f64[0] + v275 * v406 + v277 * v410.f64[0];
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL);
            v406 = v268.f64[0];
            v393.i64[0] = vextq_s8(v279, v279, 8uLL).u64[0];
            v395 = (float64x2_t)v279;
            v396.i64[0] = vextq_s8(v280, v280, 8uLL).u64[0];
            v397 = (float64x2_t)v280;
            v408 = v267;
            v410.f64[0] = v276.f64[0];
            break;
          case 1:
            *(_QWORD *)&v285.f64[1] = v393.i64[1];
            v286.f64[0] = v395.f64[0];
            *(_QWORD *)&v286.f64[1] = v393.i64[0];
            v285.f64[0] = *(float64_t *)(v270 + 32);
            v287 = *(float64x2_t *)(v270 + 16);
            v288 = (int8x16_t)vmulq_f64(v286, v287);
            v289.f64[0] = v397.f64[0];
            *(_QWORD *)&v289.f64[1] = v396.i64[0];
            v290 = (int8x16_t)vmulq_f64(v289, v287);
            v291.f64[0] = v408.f64[0];
            v291.f64[1] = v406;
            *(_QWORD *)&v399.f64[0] = *(_OWORD *)&vmulq_f64(v399, v285);
            *(_QWORD *)&v402.f64[0] = *(_OWORD *)&vmulq_f64(v402, v285);
            v292 = (int8x16_t)vmulq_f64(v291, v287);
            v267 = vmulq_f64(v410, v285);
            v408 = (float64x2_t)v292;
            v410.f64[0] = v267.f64[0];
            v393.i64[0] = vextq_s8(v288, v288, 8uLL).u64[0];
            v395 = (float64x2_t)v288;
            v396.i64[0] = vextq_s8(v290, v290, 8uLL).u64[0];
            v397 = (float64x2_t)v290;
            v268 = (float64x2_t)vextq_s8(v292, v292, 8uLL);
            v406 = v268.f64[0];
            break;
          case 2:
            v268.f64[0] = *(float64_t *)(v270 + 16);
            v281.f64[0] = v395.f64[0];
            *(_QWORD *)&v281.f64[1] = v393.i64[0];
            v282 = (int8x16_t)vmulq_n_f64(v281, v268.f64[0]);
            v283.f64[0] = v399.f64[0];
            v283.f64[1] = v397.f64[0];
            v393.i64[0] = vextq_s8(v282, v282, 8uLL).u64[0];
            v395 = (float64x2_t)v282;
            v399 = vmulq_n_f64(v283, v268.f64[0]);
            *(_QWORD *)&v284.f64[0] = v396.i64[0];
            v284.f64[1] = v402.f64[0];
            v396 = (int8x16_t)vmulq_n_f64(v284, v268.f64[0]);
            v397 = (float64x2_t)vextq_s8((int8x16_t)v399, (int8x16_t)v399, 8uLL);
            *(_QWORD *)&v402.f64[0] = vextq_s8(v396, v396, 8uLL).u64[0];
            v283.f64[0] = v408.f64[0];
            v283.f64[1] = v406;
            v267 = vmulq_n_f64(v283, v268.f64[0]);
            v408 = v267;
            *(_QWORD *)&v410.f64[0] = *(_OWORD *)&vmulq_f64(v268, v410);
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL);
            v406 = v268.f64[0];
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v270 + 56))(v442, v270);
            v293 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v395.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v393.i64), v443, v399.f64[0]);
            v399.f64[0] = v442[1].f64[0] * v395.f64[0] + v442[2].f64[1] * *(double *)v393.i64 + v444 * v399.f64[0];
            v294 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v397.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v396.i64), v443, v402.f64[0]);
            v402.f64[0] = v442[1].f64[0] * v397.f64[0] + v442[2].f64[1] * *(double *)v396.i64 + v444 * v402.f64[0];
            v268 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v408.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), v406), v443, v410.f64[0]);
            v295 = v442[1].f64[0] * v408.f64[0] + v442[2].f64[1] * v406 + v444 * v410.f64[0];
            v267 = (float64x2_t)vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL);
            v406 = v267.f64[0];
            v393.i64[0] = vextq_s8(v293, v293, 8uLL).u64[0];
            v395 = (float64x2_t)v293;
            v396.i64[0] = vextq_s8(v294, v294, 8uLL).u64[0];
            v397 = (float64x2_t)v294;
            v408 = v268;
            v410.f64[0] = v295;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(v192 + 56) + 4))
      {
        switch(v272)
        {
          case 0:
            v296 = *(double *)(v270 + 32);
            v297 = *(float64x2_t *)(v270 + 16);
            v298 = *(double *)(v270 + 56);
            v299 = *(float64x2_t *)(v270 + 40);
            v300 = *(double *)(v270 + 80);
            v301 = *(float64x2_t *)(v270 + 64);
            v302 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v297, v416.f64[0]), v299, *(double *)v414.i64), v301, v429.f64[0]);
            v429.f64[0] = v296 * v416.f64[0] + v298 * *(double *)v414.i64 + v300 * v429.f64[0];
            v303 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v297, v412.f64[0]), v299, *(double *)v419.i64), v301, v426.f64[0]);
            v304 = v296 * v412.f64[0] + v298 * *(double *)v419.i64 + v300 * v426.f64[0];
            v267 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v297, v421.f64[0]), v299, v423.f64[0]), v301, v431.f64[0]);
            v431.f64[0] = v296 * v421.f64[0] + v298 * v423.f64[0] + v300 * v431.f64[0];
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL);
            v423.f64[0] = v268.f64[0];
            v426.f64[0] = v304;
            v414.i64[0] = vextq_s8(v302, v302, 8uLL).u64[0];
            v416 = (float64x2_t)v302;
            v412 = (float64x2_t)v303;
            v419.i64[0] = vextq_s8(v303, v303, 8uLL).u64[0];
            v421 = v267;
            break;
          case 1:
            *(_QWORD *)&v306.f64[1] = v414.i64[1];
            v307.f64[0] = v416.f64[0];
            *(_QWORD *)&v307.f64[1] = v414.i64[0];
            v306.f64[0] = *(float64_t *)(v270 + 32);
            v308 = *(float64x2_t *)(v270 + 16);
            v309 = (int8x16_t)vmulq_f64(v307, v308);
            v310.f64[0] = v421.f64[0];
            v311.f64[0] = v412.f64[0];
            *(_QWORD *)&v311.f64[1] = v419.i64[0];
            v312 = (int8x16_t)vmulq_f64(v311, v308);
            v310.f64[1] = v423.f64[0];
            *(_QWORD *)&v426.f64[0] = *(_OWORD *)&vmulq_f64(v426, v306);
            *(_QWORD *)&v429.f64[0] = *(_OWORD *)&vmulq_f64(v429, v306);
            v313 = (int8x16_t)vmulq_f64(v310, v308);
            v267 = vmulq_f64(v431, v306);
            v431.f64[0] = v267.f64[0];
            v414.i64[0] = vextq_s8(v309, v309, 8uLL).u64[0];
            v416 = (float64x2_t)v309;
            v412 = (float64x2_t)v312;
            v419.i64[0] = vextq_s8(v312, v312, 8uLL).u64[0];
            v421 = (float64x2_t)v313;
            v268 = (float64x2_t)vextq_s8(v313, v313, 8uLL);
            v423.f64[0] = v268.f64[0];
            break;
          case 2:
            v268.f64[0] = *(float64_t *)(v270 + 16);
            v305.f64[0] = v416.f64[0];
            *(_QWORD *)&v305.f64[1] = v414.i64[0];
            v267.f64[0] = v429.f64[0];
            v267.f64[1] = v412.f64[0];
            v416 = vmulq_n_f64(v305, v268.f64[0]);
            v429 = vmulq_n_f64(v267, v268.f64[0]);
            v412 = (float64x2_t)vextq_s8((int8x16_t)v429, (int8x16_t)v429, 8uLL);
            v414.i64[0] = vextq_s8((int8x16_t)v416, (int8x16_t)v416, 8uLL).u64[0];
            *(_QWORD *)&v305.f64[0] = v419.i64[0];
            v305.f64[1] = v426.f64[0];
            v419 = (int8x16_t)vmulq_n_f64(v305, v268.f64[0]);
            *(_QWORD *)&v431.f64[0] = *(_OWORD *)&vmulq_f64(v268, v431);
            v305.f64[0] = v421.f64[0];
            v267.f64[1] = v423.f64[1];
            v305.f64[1] = v423.f64[0];
            v421 = vmulq_n_f64(v305, v268.f64[0]);
            v268 = (float64x2_t)vextq_s8((int8x16_t)v421, (int8x16_t)v421, 8uLL);
            v423.f64[0] = v268.f64[0];
            *(_QWORD *)&v426.f64[0] = vextq_s8(v419, v419, 8uLL).u64[0];
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v270 + 56))(v442, v270);
            v314 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v416.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v414.i64), v443, v429.f64[0]);
            v429.f64[0] = v442[1].f64[0] * v416.f64[0] + v442[2].f64[1] * *(double *)v414.i64 + v444 * v429.f64[0];
            v315 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v412.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v419.i64), v443, v426.f64[0]);
            v268 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v421.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), v423.f64[0]), v443, v431.f64[0]);
            v431.f64[0] = v442[1].f64[0] * v421.f64[0] + v442[2].f64[1] * v423.f64[0] + v444 * v431.f64[0];
            v267 = (float64x2_t)vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL);
            v423.f64[0] = v267.f64[0];
            v426.f64[0] = v442[1].f64[0] * v412.f64[0] + v442[2].f64[1] * *(double *)v419.i64 + v444 * v426.f64[0];
            v414.i64[0] = vextq_s8(v314, v314, 8uLL).u64[0];
            v416 = (float64x2_t)v314;
            v412 = (float64x2_t)v315;
            v419.i64[0] = vextq_s8(v315, v315, 8uLL).u64[0];
            v421 = v268;
            break;
          default:
            break;
        }
      }
    }
    _Q2 = *(float64x2_t *)(v192 + 64);
    _Q3 = vmulq_f64(_Q2, _Q2);
    _D4 = *(_QWORD *)(v192 + 72);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(double *)(v192 + 88) = *((double *)&v432 + 1) * (_Q3.f64[0] + *(double *)(v192 + 80) * *(double *)(v192 + 80));
    if (!v198)
    {
LABEL_227:
      if (!v197)
        goto LABEL_250;
      v350 = *(unint64_t **)(v404 + 32);
      v351 = v350[11] + 24 * v199;
      v353 = *(char **)v351;
      v352 = *(char **)(v351 + 8);
      if (*(char **)v351 != v352)
      {
        while (*(_DWORD *)v353 < v199)
        {
          v353 += 16;
          if (v353 == v352)
            goto LABEL_236;
        }
      }
      if (v353 != v352)
      {
        if (*(_DWORD *)v353 == v199)
        {
          v354 = v350[2] + 8 * *((_QWORD *)v353 + 1);
LABEL_237:
          v267.f64[0] = *(float64_t *)(v354 + 16);
          _Q3.f64[0] = *(float64_t *)(v354 + 40);
          v268.f64[0] = *(float64_t *)(v354 + 64);
          v355.f64[0] = v408.f64[0];
          v355.f64[1] = v406;
          v356.f64[0] = v395.f64[0];
          v356.f64[1] = v397.f64[0];
          *(_QWORD *)&v357.f64[0] = v393.i64[0];
          *(_QWORD *)&v357.f64[1] = v396.i64[0];
          v358.f64[0] = v399.f64[0];
          v358.f64[1] = v402.f64[0];
          v359 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v356, v395.f64[0]), v357, *(double *)v393.i64), v358, v399.f64[0]);
          v360 = vmulq_f64(v355, v395);
          v360.f64[0] = v360.f64[0] + v406 * *(double *)v393.i64 + v410.f64[0] * v399.f64[0];
          v361 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v356, v397.f64[0]), v357, *(double *)v396.i64), v358, v402.f64[0]);
          v362 = vmulq_f64(v355, v397);
          v362.f64[0] = v362.f64[0] + v406 * *(double *)v396.i64 + v410.f64[0] * v402.f64[0];
          v400 = v357;
          v403 = v356;
          v398 = v358;
          v363 = vmulq_f64(v355, v355);
          v363.f64[0] = v363.f64[0] + v406 * v406 + v410.f64[0] * v410.f64[0];
          _Q2 = vaddq_f64(*(float64x2_t *)v354, v359);
          v364 = vaddq_f64(v267, v360);
          v365 = vaddq_f64(*(float64x2_t *)(v354 + 24), v361);
          v366 = vaddq_f64(*(float64x2_t *)(v354 + 48), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v356, v408.f64[0]), v357, v406), v358, v410.f64[0]));
          *(float64x2_t *)v354 = _Q2;
          *(float64_t *)(v354 + 16) = v364.f64[0];
          *(float64x2_t *)(v354 + 24) = v365;
          *(_QWORD *)(v354 + 40) = *(_OWORD *)&vaddq_f64(_Q3, v362);
          v367 = vaddq_f64(v268, v363);
          *(float64x2_t *)(v354 + 48) = v366;
          *(float64_t *)(v354 + 64) = v367.f64[0];
          if (!v198 || v200 < v199)
            goto LABEL_249;
          v368 = *(unint64_t **)(v404 + 32);
          v369 = v368[11] + 24 * v200;
          v371 = *(char **)v369;
          v370 = *(char **)(v369 + 8);
          if (*(char **)v369 != v370)
          {
            while (*(_DWORD *)v371 < v199)
            {
              v371 += 16;
              if (v371 == v370)
                goto LABEL_247;
            }
          }
          if (v371 != v370)
          {
            if (*(_DWORD *)v371 == v199)
            {
              v372 = v368[2] + 8 * *((_QWORD *)v371 + 1);
LABEL_248:
              v367.f64[0] = *(float64_t *)(v372 + 16);
              _Q2.f64[0] = *(float64_t *)(v372 + 40);
              v365.f64[0] = *(float64_t *)(v372 + 64);
              v373 = *(float64x2_t *)(v372 + 48);
              v374.f64[0] = v408.f64[0];
              v374.f64[1] = v406;
              v375 = vmulq_f64(v374, v416);
              v375.f64[0] = v375.f64[0] + v406 * *(double *)v414.i64 + v410.f64[0] * v429.f64[0];
              v376 = vmulq_f64(v374, v412);
              v376.f64[0] = v376.f64[0] + v406 * *(double *)v419.i64 + v410.f64[0] * v426.f64[0];
              v377 = vmulq_f64(v408, v421);
              v377.f64[0] = v377.f64[0] + v406 * v423.f64[0] + v410.f64[0] * v431.f64[0];
              v364 = vaddq_f64(*(float64x2_t *)v372, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v403, v416.f64[0]), v400, *(double *)v414.i64), v398, v429.f64[0]));
              _Q2 = vaddq_f64(_Q2, v376);
              v378 = vaddq_f64(*(float64x2_t *)(v372 + 24), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v403, v412.f64[0]), v400, *(double *)v419.i64), v398, v426.f64[0]));
              *(float64x2_t *)v372 = v364;
              *(_QWORD *)(v372 + 16) = *(_OWORD *)&vaddq_f64(v367, v375);
              *(float64x2_t *)(v372 + 24) = v378;
              *(float64_t *)(v372 + 40) = _Q2.f64[0];
              *(float64x2_t *)(v372 + 48) = vaddq_f64(v373, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v403, v421.f64[0]), v400, v423.f64[0]), v398, v431.f64[0]));
              *(_QWORD *)(v372 + 64) = *(_OWORD *)&vaddq_f64(v365, v377);
LABEL_249:
              v379 = *(_QWORD *)v404 + 8 * (*(_DWORD *)(v404 + 28) + 3 * v199);
              v364.f64[0] = *(float64_t *)(v379 + 16);
              _Q2.f64[0] = *(float64_t *)(v192 + 80);
              _Q3 = *v264;
              v381 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v403, v264->f64[0]), v400, *v264, 1), v398, _Q2.f64[0]);
              _D6 = v406;
              __asm { FMLA            D5, D6, V3.D[1] }
              _Q2.f64[0] = _D5 + v410.f64[0] * _Q2.f64[0];
              v268 = vsubq_f64(*(float64x2_t *)v379, v381);
              *(float64x2_t *)v379 = v268;
              *(_QWORD *)(v379 + 16) = *(_OWORD *)&vsubq_f64(v364, _Q2);
LABEL_250:
              v191 = v390;
              if (v198)
              {
                v384 = *(_QWORD *)v404 + 8 * (*(_DWORD *)(v404 + 28) + 3 * v200);
                v268.f64[0] = *(float64_t *)(v384 + 16);
                _Q2.f64[0] = *(float64_t *)(v192 + 80);
                _Q3 = *v264;
                *(_QWORD *)&_Q6.f64[0] = v414.i64[0];
                _Q5.f64[0] = v416.f64[0];
                _Q5.f64[1] = v412.f64[0];
                *(_QWORD *)&_Q6.f64[1] = v419.i64[0];
                v388 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, v264->f64[0]), _Q6, *v264, 1);
                _Q5.f64[0] = v429.f64[0];
                _Q5.f64[1] = v426.f64[0];
                v389 = vmlaq_n_f64(v388, _Q5, _Q2.f64[0]);
                _Q6.f64[0] = v423.f64[0];
                __asm { FMLA            D5, D6, V3.D[1] }
                _Q2.f64[0] = _Q5.f64[0] + v431.f64[0] * _Q2.f64[0];
                *(float64x2_t *)v384 = vsubq_f64(*(float64x2_t *)v384, v389);
                *(_QWORD *)(v384 + 16) = *(_OWORD *)&vsubq_f64(v268, _Q2);
              }
              goto LABEL_160;
            }
            v370 = v371;
          }
LABEL_247:
          v372 = sub_239C23138(v368, (char **)v369, v199, v370);
          goto LABEL_248;
        }
        v352 = v353;
      }
LABEL_236:
      v354 = sub_239C23138(v350, (char **)v351, v199, v352);
      goto LABEL_237;
    }
    if (!v197 || v199 < v200)
    {
LABEL_217:
      v336 = *(unint64_t **)(v404 + 32);
      v337 = v336[11] + 24 * v200;
      v339 = *(char **)v337;
      v338 = *(char **)(v337 + 8);
      if (*(char **)v337 != v338)
      {
        while (*(_DWORD *)v339 < v200)
        {
          v339 += 16;
          if (v339 == v338)
            goto LABEL_225;
        }
      }
      if (v339 != v338)
      {
        if (*(_DWORD *)v339 == v200)
        {
          v340 = v336[2] + 8 * *((_QWORD *)v339 + 1);
LABEL_226:
          v267.f64[0] = *(float64_t *)(v340 + 16);
          _Q3.f64[0] = *(float64_t *)(v340 + 40);
          v268.f64[0] = *(float64_t *)(v340 + 64);
          v341.f64[0] = v421.f64[0];
          v341.f64[1] = v423.f64[0];
          v342.f64[0] = v416.f64[0];
          v342.f64[1] = v412.f64[0];
          *(_QWORD *)&v343.f64[0] = v414.i64[0];
          *(_QWORD *)&v343.f64[1] = v419.i64[0];
          v344.f64[0] = v429.f64[0];
          v344.f64[1] = v426.f64[0];
          v345 = vmulq_f64(v341, v416);
          v345.f64[0] = v345.f64[0] + v423.f64[0] * *(double *)v414.i64 + v431.f64[0] * v429.f64[0];
          v346 = vmulq_f64(v341, v412);
          v346.f64[0] = v346.f64[0] + v423.f64[0] * *(double *)v419.i64 + v431.f64[0] * v426.f64[0];
          v347 = vmulq_f64(v341, v341);
          v347.f64[0] = v347.f64[0] + v423.f64[0] * v423.f64[0] + v431.f64[0] * v431.f64[0];
          _Q2 = vaddq_f64(*(float64x2_t *)v340, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v342, v416.f64[0]), v343, *(double *)v414.i64), v344, v429.f64[0]));
          v267 = vaddq_f64(v267, v345);
          v348 = vaddq_f64(*(float64x2_t *)(v340 + 24), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v342, v412.f64[0]), v343, *(double *)v419.i64), v344, v426.f64[0]));
          _Q3 = vaddq_f64(_Q3, v346);
          v349 = vaddq_f64(*(float64x2_t *)(v340 + 48), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v342, v421.f64[0]), v343, v423.f64[0]), v344, v431.f64[0]));
          *(float64x2_t *)v340 = _Q2;
          *(float64_t *)(v340 + 16) = v267.f64[0];
          *(float64x2_t *)(v340 + 24) = v348;
          *(float64_t *)(v340 + 40) = _Q3.f64[0];
          v268 = vaddq_f64(v268, v347);
          *(float64x2_t *)(v340 + 48) = v349;
          *(float64_t *)(v340 + 64) = v268.f64[0];
          goto LABEL_227;
        }
        v338 = v339;
      }
LABEL_225:
      v340 = sub_239C23138(v336, (char **)v337, v200, v338);
      goto LABEL_226;
    }
    v319 = *(unint64_t **)(v404 + 32);
    v320 = v319[11] + 24 * v199;
    v322 = *(char **)v320;
    v321 = *(char **)(v320 + 8);
    if (*(char **)v320 != v321)
    {
      while (*(_DWORD *)v322 < v200)
      {
        v322 += 16;
        if (v322 == v321)
          goto LABEL_215;
      }
    }
    if (v322 != v321)
    {
      if (*(_DWORD *)v322 == v200)
      {
        v323 = v319[2] + 8 * *((_QWORD *)v322 + 1);
LABEL_216:
        v267.f64[0] = *(float64_t *)(v323 + 16);
        _Q2.f64[0] = *(float64_t *)(v323 + 40);
        v268.f64[0] = *(float64_t *)(v323 + 64);
        v324.f64[0] = v421.f64[0];
        v324.f64[1] = v423.f64[0];
        *(_QWORD *)&v326.f64[0] = v414.i64[0];
        v325.f64[0] = v416.f64[0];
        v325.f64[1] = v412.f64[0];
        *(_QWORD *)&v326.f64[1] = v419.i64[0];
        v327.f64[0] = v429.f64[0];
        v327.f64[1] = v426.f64[0];
        v328 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v325, v395.f64[0]), v326, *(double *)v393.i64), v327, v399.f64[0]);
        v329 = vmulq_f64(v324, v395);
        v329.f64[0] = v329.f64[0] + v423.f64[0] * *(double *)v393.i64 + v431.f64[0] * v399.f64[0];
        v330 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v325, v397.f64[0]), v326, *(double *)v396.i64), v327, v402.f64[0]);
        v331 = vmulq_f64(v324, v397);
        v331.f64[0] = v331.f64[0] + v423.f64[0] * *(double *)v396.i64 + v431.f64[0] * v402.f64[0];
        v332 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v325, v408.f64[0]), v326, v406), v327, v410.f64[0]);
        v333 = vmulq_f64(v421, v408);
        v333.f64[0] = v333.f64[0] + v423.f64[0] * v406 + v431.f64[0] * v410.f64[0];
        _Q3 = vaddq_f64(*(float64x2_t *)v323, v328);
        v267 = vaddq_f64(v267, v329);
        v334 = vaddq_f64(*(float64x2_t *)(v323 + 24), v330);
        v335 = vaddq_f64(*(float64x2_t *)(v323 + 48), v332);
        *(float64x2_t *)v323 = _Q3;
        *(float64_t *)(v323 + 16) = v267.f64[0];
        *(float64x2_t *)(v323 + 24) = v334;
        *(_QWORD *)(v323 + 40) = *(_OWORD *)&vaddq_f64(_Q2, v331);
        v268 = vaddq_f64(v268, v333);
        *(float64x2_t *)(v323 + 48) = v335;
        *(float64_t *)(v323 + 64) = v268.f64[0];
        goto LABEL_217;
      }
      v321 = v322;
    }
LABEL_215:
    v323 = sub_239C23138(v319, (char **)v320, v200, v321);
    goto LABEL_216;
  }
LABEL_252:
  std::mutex::~mutex(&v465);
  if (__p)
  {
    v436 = __p;
    operator delete(__p);
  }
}

void sub_239C3F6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C3F710(uint64_t a1)
{
  return **(_QWORD **)(a1 + 136);
}

uint64_t sub_239C3F71C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 136);
}

uint64_t sub_239C3F728(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
}

double sub_239C3F734(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float64x2_t v22;
  float64x2_t v23;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  int64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  double v43;
  double v45;
  float64x2_t v47;
  double v53;
  float64x2_t v54;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  int64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  double v74;
  double v76;
  float64x2_t v78;
  double v80;
  float64x2_t v81;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  double v90;
  double result;
  uint64_t v97;
  float64x2_t v98;
  uint64_t v99;
  char v100;
  _OWORD v101[3];
  float64x2_t v102;
  _BYTE v103[80];
  __int128 v104;
  uint64_t v105;

  v98 = 0uLL;
  v99 = 0;
  v100 = 1;
  v14 = *(_QWORD *)(a1 + 80) + 16;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72) + 16;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 88) + 16;
  v105 = 0;
  *(_OWORD *)&v103[64] = 0u;
  v104 = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  v97 = a3;
  memset(v103, 0, 64);
  v102 = 0u;
  memset(v101, 0, sizeof(v101));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v103[8];
  v15 = *(_OWORD *)&v103[24];
  v16 = *(_OWORD *)&v103[40];
  v17 = *(double *)&v103[56];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&v103[56];
  *(_OWORD *)(a3 + 104) = v16;
  *(_OWORD *)(a3 + 88) = v15;
  v18 = v104;
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 144) = v18;
  sub_239C24464((float64x2_t **)(a1 + 16), &v98, &v97, *(double *)&v18, *(double *)&v16, v17, a7, a8, a9, a10, a11);
  *(float64x2_t *)(a1 + 96) = v98;
  *(_QWORD *)(a1 + 112) = v99;
  v19 = *(_QWORD *)(a1 + 128);
  if (v19)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, a1 + 96);
    v20 = *(_QWORD *)(a1 + 128);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    v25 = v21;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      switch(v21)
      {
        case 0:
          v26 = *(float64x2_t *)(v20 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 56);
          v27 = *(float64x2_t *)(v20 + 40);
          v28 = *(double *)(v20 + 80);
          v29 = *(float64x2_t *)(v20 + 64);
          goto LABEL_8;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          v30 = (int64x2_t)vmulq_f64(v23, _Q2);
          v22 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v20 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 64);
          v32 = *(float64x2_t *)(a3 + 32);
          v31 = *(float64x2_t *)(a3 + 48);
          v33 = *(int8x16_t *)(a3 + 16);
          *(_QWORD *)&v34.f64[0] = v30.i64[0];
          v34.f64[1] = *(float64_t *)(a3 + 24);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v34;
          v34.f64[0] = *(float64_t *)(v20 + 32);
          v35 = vmulq_f64((float64x2_t)vextq_s8(v33, (int8x16_t)v32, 8uLL), *(float64x2_t *)(v20 + 16));
          v23 = (float64x2_t)vzip1q_s64(v30, (int64x2_t)v35);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v23;
          v36 = vextq_s8((int8x16_t)v35, (int8x16_t)vmulq_laneq_f64(v34, v32, 1), 8uLL);
          *(int8x16_t *)(a3 + 32) = v36;
          v35.f64[0] = *(float64_t *)(v20 + 32);
          _Q2 = vmulq_f64(_Q2, v35);
          v37 = vmulq_f64(v31, *(float64x2_t *)(v20 + 16));
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v23;
          *(int8x16_t *)(a3 + 32) = v36;
          *(float64x2_t *)(a3 + 48) = v37;
          *(float64_t *)(a3 + 64) = _Q2.f64[0];
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v23 = vmulq_f64(v22, v23);
          v38 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v22.f64[0]);
          v39 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v22.f64[0]);
          v40 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v22.f64[0]);
          v22 = vmulq_n_f64(*(float64x2_t *)a3, v22.f64[0]);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v40;
          *(float64x2_t *)(a3 + 32) = v39;
          *(float64x2_t *)(a3 + 48) = v38;
          *(float64_t *)(a3 + 64) = v23.f64[0];
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v26 = (float64x2_t)v101[0];
          _Q2.f64[0] = *((float64_t *)&v101[2] + 1);
          v27 = *(float64x2_t *)((char *)&v101[1] + 8);
          v28 = *(double *)v103;
          v29 = v102;
LABEL_8:
          v41 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v43 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v45 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)a3), v27, *(float64x2_t *)a3, 1), v29, v41);
          __asm { FMLA            D21, D2, V7.D[1] }
          v53 = _D21 + v28 * v41;
          v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q17.f64[0]), v27, _Q17, 1), v29, v43);
          __asm { FMLA            D21, D2, V17.D[1] }
          v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q19.f64[0]), v27, _Q19, 1), v29, v45);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v47;
          *(double *)(a3 + 16) = v53;
          *(float64x2_t *)(a3 + 24) = v54;
          *(double *)(a3 + 40) = _D21 + v28 * v43;
          *(float64x2_t *)(a3 + 48) = v23;
          *(double *)(a3 + 64) = _D0 + v28 * v45;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4))
    {
      switch(v25)
      {
        case 0:
          v57 = *(float64x2_t *)(v20 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 56);
          v58 = *(float64x2_t *)(v20 + 40);
          v59 = *(double *)(v20 + 80);
          v60 = *(float64x2_t *)(v20 + 64);
          goto LABEL_15;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 88);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          v61 = (int64x2_t)vmulq_f64(v23, _Q2);
          v22 = vmulq_f64(*(float64x2_t *)(a3 + 72), *(float64x2_t *)(v20 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 136);
          v62 = *(float64x2_t *)(a3 + 120);
          v63 = *(float64x2_t *)(a3 + 104);
          v64 = *(int8x16_t *)(a3 + 88);
          *(_QWORD *)&v65.f64[0] = v61.i64[0];
          v65.f64[1] = *(float64_t *)(a3 + 96);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v65;
          v65.f64[0] = *(float64_t *)(v20 + 32);
          v66 = vmulq_f64((float64x2_t)vextq_s8(v64, (int8x16_t)v63, 8uLL), *(float64x2_t *)(v20 + 16));
          v23 = (float64x2_t)vzip1q_s64(v61, (int64x2_t)v66);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v23;
          v67 = vextq_s8((int8x16_t)v66, (int8x16_t)vmulq_laneq_f64(v65, v63, 1), 8uLL);
          *(int8x16_t *)(a3 + 104) = v67;
          v66.f64[0] = *(float64_t *)(v20 + 32);
          _Q2 = vmulq_f64(_Q2, v66);
          v68 = vmulq_f64(v62, *(float64x2_t *)(v20 + 16));
          *(int8x16_t *)(a3 + 104) = v67;
          *(float64x2_t *)(a3 + 88) = v23;
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 120) = v68;
          *(float64_t *)(a3 + 136) = _Q2.f64[0];
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 136);
          _Q2 = *(float64x2_t *)(a3 + 72);
          v23 = vmulq_f64(v22, v23);
          v69 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v22.f64[0]);
          v70 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v22.f64[0]);
          v71 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v22.f64[0]);
          v22 = vmulq_n_f64(_Q2, v22.f64[0]);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v71;
          *(float64x2_t *)(a3 + 104) = v70;
          *(float64x2_t *)(a3 + 120) = v69;
          *(float64_t *)(a3 + 136) = v23.f64[0];
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v57 = (float64x2_t)v101[0];
          _Q2.f64[0] = *((float64_t *)&v101[2] + 1);
          v58 = *(float64x2_t *)((char *)&v101[1] + 8);
          v59 = *(double *)v103;
          v60 = v102;
LABEL_15:
          v72 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v74 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v76 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v78 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q7.f64[0]), v58, _Q7, 1), v60, v72);
          __asm { FMLA            D21, D2, V7.D[1] }
          v80 = _D21 + v59 * v72;
          v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q17.f64[0]), v58, _Q17, 1), v60, v74);
          __asm { FMLA            D21, D2, V17.D[1] }
          v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q19.f64[0]), v58, _Q19, 1), v60, v76);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)(a3 + 72) = v78;
          *(double *)(a3 + 88) = v80;
          *(float64x2_t *)(a3 + 96) = v81;
          *(double *)(a3 + 112) = _D21 + v59 * v74;
          *(float64x2_t *)(a3 + 120) = v23;
          *(double *)(a3 + 136) = _D0 + v59 * v76;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 4))
    {
      v84 = (float64x2_t *)(a3 + 144);
      switch(v25)
      {
        case 0:
          v85 = *(float64x2_t *)(v20 + 16);
          _D2 = *(_QWORD *)(v20 + 56);
          v87 = *(float64x2_t *)(v20 + 40);
          v88 = *(double *)(v20 + 80);
          v89 = *(float64x2_t *)(v20 + 64);
          goto LABEL_22;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 160);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          *(float64x2_t *)(a3 + 144) = vmulq_f64(*(float64x2_t *)(a3 + 144), *(float64x2_t *)(v20 + 16));
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v23, _Q2);
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 160);
          *v84 = vmulq_n_f64(*v84, v22.f64[0]);
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v22, v23);
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v85 = (float64x2_t)v101[0];
          _D2 = *((_QWORD *)&v101[2] + 1);
          v87 = *(float64x2_t *)((char *)&v101[1] + 8);
          v88 = *(double *)v103;
          v89 = v102;
LABEL_22:
          v90 = *(double *)(a3 + 160);
          _Q7 = *v84;
          __asm { FMLA            D0, D2, V7.D[1] }
          *v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v85, v84->f64[0]), v87, *v84, 1), v89, v90);
          *(double *)(a3 + 160) = _D0 + v88 * v90;
          break;
        default:
          break;
      }
    }
  }
  _Q2 = *(_OWORD *)(a1 + 96);
  _D4 = *(_QWORD *)(a1 + 104);
  __asm { FMLA            D3, D4, V2.D[1] }
  result = *(double *)(a2 + 8) * (_D3 + *(double *)(a1 + 112) * *(double *)(a1 + 112));
  *(double *)(a1 + 120) = result;
  return result;
}

void sub_239C3FCC8(int64x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  __int8 *v26;
  uint64_t v27;
  __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t *v32;
  __int8 *v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  unint64_t *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  std::__shared_weak_count *v100;
  __int128 v101;
  _BYTE v102[48];
  char *v103;
  __int128 v104;
  unint64_t v105;
  __int128 v106;
  _BYTE v107[32];
  char *v108;
  unint64_t *v109;
  char *v110;

  v5 = a5;
  v8 = (unint64_t *)a1[9].i64[0];
  v9 = (unint64_t *)a1[9].i64[1];
  v10 = v9 - v8;
  *(_OWORD *)&v107[8] = *(_OWORD *)a2;
  *(_QWORD *)&v107[24] = *(_QWORD *)(a2 + 16);
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v100 = a5;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v8 = (unint64_t *)a1[9].i64[0];
    v9 = (unint64_t *)a1[9].i64[1];
  }
  else
  {
    v100 = 0;
  }
  v14 = 0xEEEEEEEEEEEEEEEFLL * v10;
  if (v8 == v9 || *(v9 - 15) < v14)
    goto LABEL_19;
  v15 = 0xEEEEEEEEEEEEEEEFLL * (v9 - v8);
  do
  {
    v16 = v15 >> 1;
    v17 = &v8[15 * (v15 >> 1)];
    v19 = *v17;
    v18 = v17 + 15;
    v15 += ~(v15 >> 1);
    if (v19 < v14)
      v8 = v18;
    else
      v15 = v16;
  }
  while (v15);
  if (v8 == v9 || (v9 = v8, *v8 != v14))
  {
LABEL_19:
    if (a5)
    {
      v21 = (unint64_t *)&a5->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_OWORD *)&v102[8] = *(_OWORD *)v107;
    *(_OWORD *)&v102[24] = *(_OWORD *)&v107[16];
    *(_QWORD *)v102 = v14;
    *(_QWORD *)&v106 = a4;
    *((_QWORD *)&v106 + 1) = a5;
    if (a5)
    {
      v23 = (unint64_t *)&a5->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      do
        v25 = __ldaxr(v23);
      while (__stlxr(v25 - 1, v23));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v26 = &a1[6].i8[8];
    v27 = a1[6].i64[1];
    if (!v27)
      goto LABEL_49;
    v28 = &a1[6].i8[8];
    v29 = a1[6].i64[1];
    do
    {
      v30 = *(_DWORD *)(v29 + 32);
      v31 = v30 >= a3;
      if (v30 >= a3)
        v32 = (uint64_t *)v29;
      else
        v32 = (uint64_t *)(v29 + 8);
      if (v31)
        v28 = (__int8 *)v29;
      v29 = *v32;
    }
    while (*v32);
    if (v28 == v26 || *((_DWORD *)v28 + 8) > a3)
      goto LABEL_49;
    *(_QWORD *)&v102[40] = v28 + 40;
    ++*((_DWORD *)v28 + 24);
    v33 = &a1[6].i8[8];
    do
    {
      v34 = *(_DWORD *)(v27 + 32);
      v35 = v34 >= HIDWORD(a3);
      if (v34 >= HIDWORD(a3))
        v36 = (uint64_t *)v27;
      else
        v36 = (uint64_t *)(v27 + 8);
      if (v35)
        v33 = (__int8 *)v27;
      v27 = *v36;
    }
    while (*v36);
    if (v33 != v26
      && *((_DWORD *)v33 + 8) <= HIDWORD(a3)
      && ((v103 = v33 + 40, ++*((_DWORD *)v33 + 24), v28[44]) || v33[44]))
    {
      v43 = (unint64_t *)a1[9].i64[1];
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (v43 == v9 || *v9 != v14)
      {
        v45 = a1[10].u64[0];
        v46 = a1[9].i64[0];
        v47 = (uint64_t)v9 - v46;
        v48 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v9 - v46) >> 3);
        v98 = (unint64_t *)v46;
        if ((unint64_t)v43 >= v45)
        {
          v64 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v43 - v46) >> 3) + 1;
          if (v64 > 0x222222222222222)
            sub_2394189F8();
          v65 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v45 - v46) >> 3);
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x111111111111111)
            v66 = 0x222222222222222;
          else
            v66 = v64;
          if (v66)
          {
            if (v66 > 0x222222222222222)
              sub_239418A80();
            v67 = (char *)operator new(120 * v66);
          }
          else
          {
            v67 = 0;
          }
          v73 = &v67[120 * v48];
          v110 = &v67[120 * v66];
          if (v48 == v66)
          {
            if (v47 < 1)
            {
              if (v9 == v98)
                v75 = 1;
              else
                v75 = 2 * v48;
              if (v75 > 0x222222222222222)
                sub_239418A80();
              v76 = (char *)operator new(120 * v75);
              v73 = &v76[120 * (v75 >> 2)];
              v110 = &v76[120 * v75];
              if (v67)
                operator delete(v67);
            }
            else
            {
              v74 = v48 + 2;
              if (v48 >= -1)
                v74 = v48 + 1;
              v73 -= 120 * (v74 >> 1);
            }
          }
          *(_OWORD *)(v73 + 40) = *(_OWORD *)&v102[32];
          *(_OWORD *)(v73 + 24) = *(_OWORD *)&v102[16];
          *(_QWORD *)v73 = v14;
          *((_QWORD *)v73 + 7) = v103;
          *(_OWORD *)(v73 + 8) = *(_OWORD *)v102;
          *((_OWORD *)v73 + 4) = v104;
          *((_QWORD *)v73 + 10) = v105;
          *((_QWORD *)v73 + 11) = 0xBFF0000000000000;
          *((_OWORD *)v73 + 6) = v106;
          v101 = 0uLL;
          v73[112] = 0;
          v77 = (uint64_t)(v73 + 120);
          v108 = v73 + 120;
          v78 = (unint64_t *)a1[9].i64[0];
          if (v78 != v9)
          {
            v79 = 0;
            do
            {
              v80 = &v73[v79 * 8];
              v81 = (char *)&v9[v79];
              *((_QWORD *)v80 - 15) = v9[v79 - 15];
              v82 = *(_OWORD *)&v9[v79 - 14];
              v83 = *(_OWORD *)&v9[v79 - 12];
              v84 = *(_OWORD *)&v9[v79 - 10];
              *((_QWORD *)v80 - 8) = v9[v79 - 8];
              *((_OWORD *)v80 - 6) = v83;
              *((_OWORD *)v80 - 5) = v84;
              *((_OWORD *)v80 - 7) = v82;
              v85 = *(_OWORD *)&v9[v79 - 7];
              *((_QWORD *)v80 - 5) = v9[v79 - 5];
              *(_OWORD *)(v80 - 56) = v85;
              *((_QWORD *)v80 - 4) = v9[v79 - 4];
              *(_OWORD *)(v80 - 24) = *(_OWORD *)&v9[v79 - 3];
              *((_QWORD *)v81 - 3) = 0;
              *((_QWORD *)v81 - 2) = 0;
              *(v80 - 8) = v9[v79 - 1];
              v79 -= 15;
            }
            while (&v9[v79] != v78);
            v73 += v79 * 8;
            v77 = (uint64_t)v108;
          }
          v86 = (unint64_t *)a1[9].i64[1];
          if (v86 != v9)
          {
            do
            {
              *(_QWORD *)v77 = *v9;
              v87 = *(_OWORD *)(v9 + 1);
              v88 = *(_OWORD *)(v9 + 3);
              v89 = *(_OWORD *)(v9 + 5);
              *(_QWORD *)(v77 + 56) = v9[7];
              *(_OWORD *)(v77 + 40) = v89;
              *(_OWORD *)(v77 + 24) = v88;
              *(_OWORD *)(v77 + 8) = v87;
              v90 = *((_OWORD *)v9 + 4);
              *(_QWORD *)(v77 + 80) = v9[10];
              *(_OWORD *)(v77 + 64) = v90;
              *(_QWORD *)(v77 + 88) = v9[11];
              *(_OWORD *)(v77 + 96) = *((_OWORD *)v9 + 6);
              v9[12] = 0;
              v9[13] = 0;
              *(_BYTE *)(v77 + 112) = *((_BYTE *)v9 + 112);
              v77 += 120;
              v9 += 15;
            }
            while (v9 != v86);
            v9 = (unint64_t *)a1[9].i64[1];
          }
          v91 = (unint64_t *)a1[9].i64[0];
          a1[9].i64[0] = (uint64_t)v73;
          a1[9].i64[1] = v77;
          a1[10].i64[0] = (uint64_t)v110;
          if (v9 != v91)
          {
            do
            {
              v109 = v9 - 15;
              v92 = (std::__shared_weak_count *)*(v9 - 2);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v9 = v109;
            }
            while (v109 != v91);
            v9 = v91;
          }
          if (v9)
            operator delete(v9);
        }
        else if (v9 == v43)
        {
          *v43 = v14;
          v72 = v46 + 8 * (((uint64_t)v9 - v46) >> 3);
          *(_QWORD *)(v72 + 56) = v103;
          *(_OWORD *)(v72 + 40) = *(_OWORD *)&v102[32];
          *(_OWORD *)(v72 + 24) = *(_OWORD *)&v102[16];
          *(_OWORD *)(v72 + 8) = *(_OWORD *)v102;
          *(_QWORD *)(v72 + 80) = v105;
          *(_OWORD *)(v72 + 64) = v104;
          *(_QWORD *)(v72 + 88) = 0xBFF0000000000000;
          *(_OWORD *)(v72 + 96) = v106;
          v101 = 0uLL;
          *(_BYTE *)(v72 + 112) = 0;
          a1[9].i64[1] = (uint64_t)(v43 + 15);
        }
        else
        {
          v97 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v9 - v46) >> 3);
          v101 = 0uLL;
          v49 = v43 - 15;
          v50 = a1[9].i64[1];
          if ((unint64_t)v43 >= 0x78)
          {
            v51 = v43 - 15;
            v50 = a1[9].i64[1];
            do
            {
              *(_QWORD *)v50 = *v51;
              v52 = *(_OWORD *)(v51 + 1);
              v53 = *(_OWORD *)(v51 + 3);
              v54 = *(_OWORD *)(v51 + 5);
              *(_QWORD *)(v50 + 56) = v51[7];
              *(_OWORD *)(v50 + 40) = v54;
              *(_OWORD *)(v50 + 24) = v53;
              *(_OWORD *)(v50 + 8) = v52;
              v55 = *((_OWORD *)v51 + 4);
              *(_QWORD *)(v50 + 80) = v51[10];
              *(_OWORD *)(v50 + 64) = v55;
              *(_QWORD *)(v50 + 88) = v51[11];
              *(_OWORD *)(v50 + 96) = *((_OWORD *)v51 + 6);
              v51[12] = 0;
              v51[13] = 0;
              *(_BYTE *)(v50 + 112) = *((_BYTE *)v51 + 112);
              v50 += 120;
              v51 += 15;
            }
            while (v51 < v43);
          }
          a1[9].i64[1] = v50;
          if (v43 != v9 + 15)
          {
            v56 = v43 - 15;
            v57 = v43;
            do
            {
              v58 = *(v56 - 15);
              v56 -= 15;
              *(v57 - 15) = v58;
              v57 -= 15;
              *(_OWORD *)(v57 + 1) = *(_OWORD *)(v56 + 1);
              v57[3] = v56[3];
              v57[4] = v56[4];
              v57[5] = v56[5];
              v57[6] = v56[6];
              v57[7] = v56[7];
              v59 = *((_OWORD *)v56 + 4);
              v57[10] = v56[10];
              *((_OWORD *)v57 + 4) = v59;
              v57[11] = v56[11];
              v60 = *((_OWORD *)v56 + 6);
              v56[12] = 0;
              v56[13] = 0;
              v61 = (std::__shared_weak_count *)v57[13];
              *((_OWORD *)v57 + 6) = v60;
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              *((_BYTE *)v43 - 8) = *((_BYTE *)v49 - 8);
              v43 = v57;
              v49 = v56;
            }
            while (v56 != v9);
          }
          *v9 = v14;
          v68 = &v98[15 * v97];
          *(_OWORD *)(v68 + 1) = *(_OWORD *)v102;
          *(_OWORD *)(v68 + 3) = *(_OWORD *)&v102[16];
          *(_OWORD *)(v68 + 5) = *(_OWORD *)&v102[32];
          v68[7] = (unint64_t)v103;
          *((_OWORD *)v68 + 4) = v104;
          v68[10] = v105;
          v68[11] = 0xBFF0000000000000;
          v69 = (std::__shared_weak_count *)v68[13];
          *((_OWORD *)v68 + 6) = v106;
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          LOBYTE(v98[15 * v97 + 14]) = 0;
        }
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      }
      if (v44)
      {
        v95 = (unint64_t *)&v44->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      a1[13].i8[2] = 0;
      a1[13].i8[0] = 0;
      a1[12] = vaddq_s64(a1[12], (int64x2_t)xmmword_239F0C400);
      v20 = 1;
    }
    else
    {
LABEL_49:
      v20 = 0;
      if (*((_QWORD *)&v106 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 16))(*((_QWORD *)&v106 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v106 + 1));
        }
      }
    }
    v5 = v100;
    if (!v100)
    {
LABEL_58:
      if (!v20)
        goto LABEL_60;
      goto LABEL_59;
    }
  }
  else
  {
    v20 = 0;
    if (!a5)
      goto LABEL_58;
  }
  v39 = (unint64_t *)&v5->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
    goto LABEL_58;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (v20)
LABEL_59:
    a1[22].i32[2] = 0;
LABEL_60:
  if (a5)
  {
    v41 = (unint64_t *)&a5->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
}

void sub_239C406F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  sub_239C31C48(v39 - 160);
  sub_239C31B98((uint64_t)&a24);
  sub_239C31BF0((uint64_t)&a39);
  sub_239A4D7C0((uint64_t)&a22);
  sub_239A4D7C0((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_239C40730(uint64_t a1, __int128 *a2, unsigned int *a3, uint64_t a4, std::__shared_weak_count *a5)
{
  unint64_t v8;
  char *v9;
  void **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  char v76;

  v8 = *(_QWORD *)a2;
  v9 = *(char **)(a1 + 80);
  v11 = *(char **)(a1 + 88);
  v10 = (void **)(a1 + 80);
  if (v9 == v11)
  {
    v11 = *(char **)(a1 + 80);
  }
  else if (*((_QWORD *)v11 - 20) >= v8)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v9) >> 5);
    do
    {
      v13 = v12 >> 1;
      v14 = (unint64_t *)&v9[160 * (v12 >> 1)];
      v16 = *v14;
      v15 = (char *)(v14 + 20);
      v12 += ~(v12 >> 1);
      if (v16 < v8)
        v9 = v15;
      else
        v12 = v13;
    }
    while (v12);
    if (v9 != v11)
    {
      v11 = v9;
      if (*(_QWORD *)v9 == v8)
        return 0;
    }
  }
  if (a5)
  {
    p_shared_owners = (unint64_t *)&a5->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = a2[3];
  v67 = a2[2];
  v68 = v20;
  v21 = *((_QWORD *)a2 + 8);
  v22 = a2[1];
  v65 = *a2;
  v66 = v22;
  v69 = v21;
  v70 = 0uLL;
  v73 = 0xBFF0000000000000;
  v74 = a4;
  v75 = a5;
  if (a5)
  {
    v23 = (unint64_t *)&a5->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    v76 = 0;
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))a5->__on_zero_shared)(a5);
      std::__shared_weak_count::__release_weak(a5);
    }
  }
  else
  {
    v76 = 0;
  }
  v26 = a1 + 16;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
    goto LABEL_55;
  v28 = *a3;
  v29 = a1 + 16;
  v30 = *(_QWORD *)(a1 + 16);
  do
  {
    v31 = *(_DWORD *)(v30 + 32);
    v32 = v31 >= v28;
    if (v31 >= v28)
      v33 = (uint64_t *)v30;
    else
      v33 = (uint64_t *)(v30 + 8);
    if (v32)
      v29 = v30;
    v30 = *v33;
  }
  while (*v33);
  if (v29 == v26 || *(_DWORD *)(v29 + 32) > v28)
    goto LABEL_55;
  *((_QWORD *)&v69 + 1) = v29 + 40;
  ++*(_DWORD *)(v29 + 96);
  v34 = a3[1];
  v35 = a1 + 16;
  do
  {
    v36 = *(_DWORD *)(v27 + 32);
    v37 = v36 >= v34;
    if (v36 >= v34)
      v38 = (uint64_t *)v27;
    else
      v38 = (uint64_t *)(v27 + 8);
    if (v37)
      v35 = v27;
    v27 = *v38;
  }
  while (*v38);
  if (v35 == v26)
    goto LABEL_55;
  if (*(_DWORD *)(v35 + 32) > v34)
    goto LABEL_55;
  *(_QWORD *)&v70 = v35 + 40;
  ++*(_DWORD *)(v35 + 96);
  v39 = *(_QWORD *)(a1 + 40);
  if (!v39)
    goto LABEL_55;
  v40 = a3[2];
  v41 = a1 + 40;
  do
  {
    v42 = *(_DWORD *)(v39 + 32);
    v43 = v42 >= v40;
    if (v42 >= v40)
      v44 = (uint64_t *)v39;
    else
      v44 = (uint64_t *)(v39 + 8);
    if (v43)
      v41 = v39;
    v39 = *v44;
  }
  while (*v44);
  if (v41 == a1 + 40
    || *(_DWORD *)(v41 + 32) > v40
    || (*((_QWORD *)&v70 + 1) = v41 + 40, ++*(_DWORD *)(v41 + 80), !*(_BYTE *)(v29 + 44))
    && !*(_BYTE *)(v35 + 44)
    && !*(_BYTE *)(v41 + 44))
  {
LABEL_55:
    v17 = 0;
    v45 = v75;
    if (!v75)
      return v17;
    goto LABEL_56;
  }
  v55 = v67;
  v56 = v68;
  v57 = v69;
  v58 = v70;
  v53 = v65;
  v52 = v8;
  v54 = v66;
  v59 = v71;
  v60 = v72;
  v61 = v73;
  v49 = v75;
  v62 = v74;
  v63 = v75;
  v74 = 0;
  v75 = 0;
  v64 = v76;
  if (*(char **)(a1 + 88) == v11 || *(_QWORD *)v11 != v8)
  {
    sub_239C49DBC(v10, v11, (uint64_t *)&v52);
    v49 = v63;
  }
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_BYTE *)(a1 + 122) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(int64x2_t *)(a1 + 104) = vaddq_s64(*(int64x2_t *)(a1 + 104), (int64x2_t)xmmword_239F0C400);
  v17 = 1;
  v45 = v75;
  if (v75)
  {
LABEL_56:
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  return v17;
}

void sub_239C40AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_239C31AB4((uint64_t)&a9);
  sub_239C30548((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_239C40AE0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = &unk_250AFB828;
  free(*(void **)(a1 + 856));
  *(_QWORD *)(a1 + 704) = off_250AFBA50;
  v2 = *(_QWORD **)(a1 + 832);
  if (v2 == (_QWORD *)(a1 + 808))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 808);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 776);
  if (v4)
  {
    *(_QWORD *)(a1 + 784) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 768);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  free(*(void **)(a1 + 736));
  free(*(void **)(a1 + 712));
  sub_239C1AB94((_QWORD *)(a1 + 472));
  *(_QWORD *)a1 = &unk_250AFB8D8;
  v6 = *(void **)(a1 + 440);
  if (v6)
  {
    *(_QWORD *)(a1 + 448) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 432);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  free(*(void **)(a1 + 400));
  *(_QWORD *)a1 = &unk_250AFB988;
  sub_239C40C30(a1 + 88);
  return a1;
}

uint64_t sub_239C40BD8(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB6B8;
  free(*(void **)(a1 + 984));
  free(*(void **)(a1 + 960));
  *(_QWORD *)a1 = off_250AFB770;
  free(*(void **)(a1 + 912));
  free(*(void **)(a1 + 888));
  return sub_239C40AE0(a1);
}

uint64_t sub_239C40C30(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  *(_QWORD *)a1 = &off_250AFB9F0;
  v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(_QWORD *)(a1 + 256) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 224);
  if (v3)
  {
    *(_QWORD *)(a1 + 232) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 200);
  if (v4)
  {
    *(_QWORD *)(a1 + 208) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 152);
  if (v6)
  {
    *(_QWORD *)(a1 + 160) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 128);
  if (v7)
  {
    *(_QWORD *)(a1 + 136) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(void **)(a1 + 80);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 16);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 160;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v8;
    operator delete(v10);
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 64);
    v16 = *(void **)(a1 + 56);
    if (v15 != v14)
    {
      do
      {
        v17 = *(std::__shared_weak_count **)(v15 - 16);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 120;
      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v14;
    operator delete(v16);
  }
  sub_239A61F08(*(_QWORD **)(a1 + 40));
  sub_239A61F08(*(_QWORD **)(a1 + 16));
  return a1;
}

void sub_239C40DB8(uint64_t a1)
{
  sub_239C40C30(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_239C40DDC()
{
  return 0.0;
}

_QWORD *sub_239C40DE4(_QWORD *result)
{
  _QWORD *v1;
  double v2;
  double *v3;
  _QWORD *v11;
  _QWORD *v12;
  double *v13;
  double *v14;

  v1 = (_QWORD *)result[12];
  v2 = 0.0;
  if (v1 != result + 13)
  {
    do
    {
      if ((*((_BYTE *)v1 + 92) & 2) == 0 && *((_BYTE *)v1 + 44))
      {
        _Q2 = *(_OWORD *)(v1 + 7);
        _D4 = v1[8];
        __asm { FMLA            D3, D4, V2.D[1] }
        v2 = v2 + _D3 + *((double *)v1 + 9) * *((double *)v1 + 9);
      }
      v11 = (_QWORD *)v1[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v1[2];
          _ZF = *v12 == (_QWORD)v1;
          v1 = v12;
        }
        while (!_ZF);
      }
      v1 = v12;
    }
    while (v12 != result + 13);
  }
  v3 = (double *)result[15];
  if (v3 != (double *)(result + 16))
  {
    do
    {
      if ((*((_BYTE *)v3 + 76) & 2) == 0 && *((_BYTE *)v3 + 44))
        v2 = v2 + v3[7] * v3[7];
      v13 = (double *)*((_QWORD *)v3 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(double **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (double *)*((_QWORD *)v3 + 2);
          _ZF = *(_QWORD *)v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!_ZF);
      }
      v3 = v14;
    }
    while (v14 != (double *)(result + 16));
  }
  return result;
}

double sub_239C40EDC(uint64_t a1, double a2, double a3, float64x2_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  float64_t *v13;
  float64x2_t v14;
  double v15;

  v4 = *(_QWORD *)(a1 + 432);
  v5 = *(unsigned int *)(v4 + 8);
  if (!(_DWORD)v5)
    return 0.0;
  v6 = 0;
  v7 = *(_QWORD *)(v4 + 88);
  result = 0.0;
  do
  {
    v9 = *(unsigned int **)(v7 + 24 * v6);
    v10 = *(unsigned int **)(v7 + 24 * v6 + 8);
    if (v10 != v9)
    {
      while (1)
      {
        v11 = *v9;
        if (v6 <= v11)
          break;
        v9 += 4;
        if (v9 == v10)
          goto LABEL_3;
      }
      if (v9 != v10 && v6 == v11)
      {
        v12 = *(_QWORD *)(v4 + 16);
        if (v12)
        {
          v13 = (float64_t *)(v12 + 8 * *((_QWORD *)v9 + 1));
          v14.f64[0] = *v13;
          a4.f64[0] = v13[8];
          v14.f64[1] = v13[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v15 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v14), a4));
          if (result < v15)
            result = v15;
        }
      }
    }
LABEL_3:
    ++v6;
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_239C40FA0(uint64_t a1)
{
  float64x2_t v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  _QWORD *v23;
  __int128 v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  int v32;
  _DWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  float64x2_t v37;
  float64x2_t v38;
  _DWORD *v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  float64x2_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  unsigned int *v49;
  unsigned int *v50;
  int v51;
  int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  double v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  float64x2_t *v65;
  uint64_t v66;
  float64x2_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  const double *v75;
  uint64_t v76;
  float64x2_t v77;
  uint64_t v81;
  float64x2_t v84;
  float64x2_t v85;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  char v98;
  int v99;
  int v100;
  float64x2_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const double *v110;
  uint64_t v111;
  float64x2_t v112;
  uint64_t v113;
  float64x2_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int32 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int64x2_t *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int64x2_t *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  unint64_t v156;
  float64_t *v157;
  unint64_t v158;
  float64_t *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __int128 *v166;
  _OWORD *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  size_t v172;
  _BYTE *v173;
  uint64_t v174;
  _OWORD *v175;
  uint64_t v176;
  int64_t v177;
  uint64_t v178;
  int64x2_t *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _OWORD *v186;
  __int128 *v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  const double *v191;
  uint64_t v192;
  float64x2_t v193;
  float64x2_t *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float64x2_t v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  char v213;
  int v214;
  int v215;
  float64x2_t v219;
  float64x2_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const double *v228;
  uint64_t v229;
  float64x2_t v230;
  uint64_t v231;
  float64x2_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const double *v240;
  uint64_t v241;
  float64x2_t v242;
  uint64_t v243;
  float64x2_t v244;
  uint64_t v250;
  uint64_t v251;
  double v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned __int32 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int64x2_t *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  int64x2_t *v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  _BYTE *v284;
  uint64_t v285;
  unint64_t v286;
  float64_t *v287;
  unint64_t v288;
  float64_t *v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  __int128 *v296;
  _OWORD *v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  char *v301;
  size_t v302;
  _BYTE *v303;
  uint64_t v304;
  _OWORD *v305;
  uint64_t v306;
  int64_t v307;
  uint64_t v308;
  int64x2_t *v309;
  char *v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _OWORD *v316;
  __int128 *v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  const double *v321;
  uint64_t v322;
  float64x2_t v323;
  float64x2_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t v327;
  float64x2_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  int v339;
  char v340;
  int v341;
  int v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v350;
  float64x2_t *v351;
  uint64_t v352;
  float64x2_t v353;
  float64x2_t v355;
  const double *v357;
  uint64_t v358;
  float64x2_t v359;
  float64x2_t v361;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  int v372;
  int v373;
  unsigned int v374;
  unsigned int v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v383;
  unint64_t *v384;
  uint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  const double *v389;
  float64x2_t v391;
  float64x2_t v393;
  float64x2_t v396;
  unint64_t *v397;
  uint64_t v398;
  char *v399;
  char *v400;
  uint64_t v401;
  float64x2_t v402;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v410;
  float64x2_t v413;
  float64x2_t v414;
  unint64_t *v415;
  uint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  float64x2_t v420;
  float64x2_t v423;
  float64x2_t v424;
  float64x2_t v425;
  float64x2_t v428;
  float64x2_t v431;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t v435;
  unint64_t *v436;
  uint64_t v437;
  char *v438;
  char *v439;
  uint64_t v440;
  float64x2_t v442;
  float64x2_t v448;
  uint64_t v450;
  float64x2_t v451;
  uint64_t v452;
  float64x2_t v453;
  uint64_t v454;
  double v456;
  float64x2_t v457;
  const double *v460;
  uint64_t v461;
  double v463;
  float64x2_t v464;
  float64x2_t v465;
  uint64_t v466;
  double v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int v477;
  int v478;
  char v479;
  int v480;
  int v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v489;
  float64x2_t *v490;
  uint64_t v491;
  float64x2_t v492;
  float64x2_t v494;
  const double *v496;
  uint64_t v497;
  float64x2_t v498;
  float64x2_t v500;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  int v508;
  int v509;
  unsigned int v510;
  unsigned int v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v519;
  unint64_t *v520;
  uint64_t v521;
  char *v522;
  char *v523;
  uint64_t v524;
  float64x2_t v526;
  float64x2_t v528;
  float64x2_t v531;
  unint64_t *v532;
  uint64_t v533;
  char *v534;
  char *v535;
  uint64_t v536;
  float64x2_t v537;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v545;
  float64x2_t v548;
  float64x2_t v549;
  unint64_t *v550;
  uint64_t v551;
  char *v552;
  char *v553;
  uint64_t v554;
  float64x2_t *v555;
  float64x2_t v556;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v564;
  float64x2_t v567;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  unint64_t *v573;
  uint64_t v574;
  char *v575;
  char *v576;
  uint64_t v577;
  float64x2_t v579;
  float64x2_t v585;
  float64x2_t v587;
  uint64_t v588;
  double v590;
  uint64_t v593;
  double v595;
  float64x2_t v596;
  std::bad_alloc *exception;
  std::bad_alloc *v599;
  float64x2_t v600;
  float64x2_t v601;
  double *v602;
  uint64_t v603;
  uint64_t v604;
  int v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t v611;
  int32x2_t v612;
  int32x2_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  float64x2_t v622;
  uint64_t v623;
  uint64_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  uint64_t v629;
  float64x2_t v630;
  uint64_t v631;
  float64x2_t v632;
  _QWORD *v633;
  _QWORD *v634;
  uint64_t v635;
  int8x16_t v636;
  uint64_t v637;
  float64x2_t v638;
  unsigned int *v639;
  unsigned int *v640;
  double v641;
  int8x16_t v642;
  float64x2_t v643;
  float64x2_t v644;
  double v645;
  void *v646[2];
  unsigned int v647;
  void *v648[2];
  int32x2_t v649;
  int32x2_t v650;
  void *__p;
  void *v652;
  uint64_t v653;
  void *memptr[4];
  __int128 v655;
  float64x2_t v656[2];
  __int128 v657;
  __int128 v658;
  __int128 v659;
  float64x2_t v660;
  float64x2_t v661[2];
  float64x2_t v662;
  double *v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  std::mutex v667;
  int64x2_t v668;
  double v669;
  int64x2_t v670;
  double v671;
  float64x2_t v672;
  double v673;
  int64x2_t v674;
  double v675;
  int64x2_t v676;
  double v677;
  float64x2_t v678;
  double v679;
  uint64_t v680;
  float64x2x3_t v681;
  float64x2x3_t v682;
  float64x2x3_t v683;
  float64x2x3_t v684;
  float64x2x3_t v685;
  float64x2x3_t v686;
  float64x2x3_t v687;
  float64x2x3_t v688;
  float64x2x3_t v689;
  float64x2x3_t v690;
  float64x2x3_t v691;
  float64x2x3_t v692;

  v680 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_239C44B0C(a1))
  {
    v11 = 1;
    goto LABEL_499;
  }
  if (*(_BYTE *)(a1 + 361))
  {
    v11 = 0;
    goto LABEL_499;
  }
  v12 = *(_QWORD *)(a1 + 432);
  v13 = *(void **)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24) - (_QWORD)v13;
  if (v14 >= 1)
    bzero(v13, 8 * (((unint64_t)v14 >> 3) - ((unint64_t)v14 > 7)) + 8);
  v15 = *(unsigned int *)(a1 + 416);
  if ((_DWORD)v15)
    bzero(*(void **)(a1 + 400), 8 * v15);
  v16 = *(_DWORD *)(a1 + 392);
  if (v16 == 1)
  {
    v17 = *(unsigned int *)(a1 + 872);
    if ((_DWORD)v17)
      bzero(*(void **)(a1 + 856), 8 * v17);
  }
  v604 = a1;
  if (((*(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776)) & 0x3FFFFFFFCLL) != 0)
  {
    kdebug_trace();
    sub_239C1F378(a1 + 400, a1 + 736);
    v18 = *(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776);
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (8 * ((v18 >> 1) + (v18 >> 2)) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v19 = (char *)memptr[0];
    if (!memptr[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v599 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v599, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v20 = *(_DWORD **)(a1 + 776);
    v21 = *(_DWORD **)(a1 + 784);
    if (v20 == v21)
    {
      v29 = *(_QWORD *)(a1 + 776);
    }
    else
    {
      v22 = 0;
      v23 = *(_QWORD **)(a1 + 96);
      do
      {
        if (*((_DWORD *)v23 + 8) == *v20)
        {
          v26 = v23;
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v23[1];
            if (v27)
            {
              do
              {
                v26 = v27;
                v27 = (_QWORD *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v26 = (_QWORD *)v23[2];
                _ZF = *v26 == (_QWORD)v23;
                v23 = v26;
              }
              while (!_ZF);
            }
            v23 = v26;
          }
          while (*((_DWORD *)v26 + 8) != *v20);
        }
        v24 = *(_OWORD *)(v26 + 7);
        v25 = &v19[8 * v22];
        *((_QWORD *)v25 + 2) = v26[9];
        *(_OWORD *)v25 = v24;
        v22 += 3;
        ++v20;
        v23 = v26;
      }
      while (v20 != v21);
      v29 = *(_QWORD *)(a1 + 784);
      v20 = *(_DWORD **)(a1 + 776);
    }
    if (((v29 - (_QWORD)v20) & 0x3FFFFFFFCLL) != 0)
    {
      v648[1] = 0;
      v649 = 0;
      v648[0] = 0;
      v30 = *(_DWORD **)(a1 + 768);
      v31 = v30[2];
      v32 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v30 + 48))(v30);
      v33 = *(_DWORD **)(v604 + 768);
      v34 = v33[3];
      v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v33 + 56))(v33);
      v649 = (int32x2_t)(v32 * v31);
      v649.i32[1] = v35 * v34;
      sub_23945215C((uint64_t)v648, (v35 * v34) * (unint64_t)(v32 * v31));
      if (v649.i32[1] * v649.i32[0])
        bzero(v648[0], 8 * (v649.i32[1] * v649.i32[0]));
      (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(v604 + 768) + 64))(*(_QWORD *)(v604 + 768), v648, 0);
      sub_239C1BE20((uint64_t *)v648);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v604 + 704) + 32))(v604 + 704);
      v646[0] = 0;
      v646[1] = 0;
      v647 = *(_DWORD *)(v604 + 728);
      sub_23945215C((uint64_t)v646, v647);
      if (v647)
        bzero(v646[0], 8 * v647);
      v39 = *(_DWORD **)(v604 + 776);
      v40 = *(_DWORD **)(v604 + 784);
      if (v39 != v40)
      {
        v41 = 0;
        v42 = *(_QWORD *)(v604 + 712);
        v43 = *(_QWORD **)(v36 + 8);
        do
        {
          if (*((_DWORD *)v43 + 8) == *v39)
          {
            v47 = v43;
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v43[1];
              if (v48)
              {
                do
                {
                  v47 = v48;
                  v48 = (_QWORD *)*v48;
                }
                while (v48);
              }
              else
              {
                do
                {
                  v47 = (_QWORD *)v43[2];
                  _ZF = *v47 == (_QWORD)v43;
                  v43 = v47;
                }
                while (!_ZF);
              }
              v43 = v47;
            }
            while (*((_DWORD *)v47 + 8) != *v39);
          }
          v44 = 8 * v41;
          v37.f64[0] = *(float64_t *)(v42 + v44 + 16);
          v38.f64[0] = (float64_t)v47[9];
          v37 = vsubq_f64(v38, v37);
          v45 = vsubq_f64(*(float64x2_t *)(v47 + 7), *(float64x2_t *)(v42 + v44));
          v46 = (char *)v646[0] + v44;
          *(float64x2_t *)v46 = v45;
          *((_QWORD *)v46 + 2) = *(_QWORD *)&v37.f64[0];
          v41 += 3;
          ++v39;
          v43 = v47;
        }
        while (v39 != v40);
        v49 = *(unsigned int **)(v604 + 776);
        v50 = *(unsigned int **)(v604 + 784);
        if (v49 != v50)
        {
          v51 = 0;
          v52 = 0;
          v53 = *(unsigned int **)(v604 + 440);
          do
          {
            if (*v53 < *v49)
            {
              do
              {
                v54 = v53[1];
                ++v53;
                ++v51;
              }
              while (v54 < *v49);
            }
            v55 = *(_DWORD *)(v604 + 764) + 3 * v52;
            v650 = vrev64_s32(v649);
            __p = (char *)v648[0] + 8 * v55;
            LODWORD(v652) = v55;
            v56 = *(_QWORD *)(v604 + 400) + 8 * (*(_DWORD *)(v604 + 428) + 3 * v51);
            v57 = *(float64x2_t *)v56;
            v663 = *(double **)(v56 + 16);
            v662 = v57;
            memptr[0] = &v662;
            v668.i64[1] = (uint64_t)&v650;
            v669 = COERCE_DOUBLE(v646);
            v670.i64[0] = 0x3FF0000000000000;
            sub_239C25740((uint64_t)&memptr[1], (uint64_t)&v668);
            v58.f64[0] = *((float64_t *)memptr[0] + 2);
            *(void **)&v59.f64[0] = memptr[3];
            *(float64x2_t *)v56 = vsubq_f64(*(float64x2_t *)memptr[0], *(float64x2_t *)&memptr[1]);
            *(_QWORD *)(v56 + 16) = *(_OWORD *)&vsubq_f64(v58, v59);
            ++v49;
            ++v52;
          }
          while (v49 != v50);
        }
      }
      free(v646[0]);
      free(v648[0]);
      a1 = v604;
    }
    free(v19);
    kdebug_trace();
    v16 = *(_DWORD *)(a1 + 392);
  }
  v60 = *(double *)(a1 + 384);
  v61 = *(double *)(a1 + 464);
  v605 = *(unsigned __int8 *)(a1 + 376);
  memset(v661, 0, sizeof(v661));
  v659 = 0u;
  v660 = 0u;
  v657 = 0u;
  v658 = 0u;
  memset(v656, 0, sizeof(v656));
  v655 = 0u;
  memset(memptr, 0, sizeof(memptr));
  v650 = *(int32x2_t *)(a1 + 480);
  __p = 0;
  v62 = *(_QWORD *)(*(_QWORD *)&v650 + 48) - *(_QWORD *)(*(_QWORD *)&v650 + 40);
  v652 = 0;
  v653 = 0;
  if ((v62 >> 2))
    sub_239AF450C(&__p, (v62 >> 2));
  v602 = (double *)(a1 + 8);
  v63 = *(void **)(a1 + 520);
  v64 = *(_QWORD *)(a1 + 528) - (_QWORD)v63;
  if (v64 >= 1)
    bzero(v63, 8 * (((unint64_t)v64 >> 3) - ((unint64_t)v64 > 7)) + 8);
  v65 = (float64x2_t *)(a1 + 472);
  if (v16 == 1)
  {
    v607 = *(_QWORD *)(a1 + 488);
    v609 = (_QWORD *)(a1 + 656);
    v197 = *(_QWORD *)(a1 + 576);
    v600 = *v65;
    v603 = *(_QWORD *)(a1 + 584);
    if (v197 != v603)
    {
      v198 = *v65;
      v199 = 0uLL;
      while (1)
      {
        *(_QWORD *)(v197 + 16) = 0;
        memptr[0] = 0;
        v662.f64[0] = v600.f64[1];
        v200 = *(_QWORD *)(v197 + 32);
        if (v200)
        {
          v201 = *(_QWORD *)(*(_QWORD *)&v600.f64[0] + 80);
          v202 = *(_QWORD *)(v197 + 24);
          v203 = **(_QWORD **)(v197 + 48);
          v204 = (uint64_t *)(v203 + 8 * (v200 + v202));
          v205 = (uint64_t *)(v203 + 8 * v202);
          do
          {
            v206 = *v205;
            v207 = (_QWORD *)(v201 + 160 * *v205);
            v209 = v207[10];
            v208 = v207[11];
            v210 = v207[12];
            if (((*(unsigned __int8 *)(v208 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v209 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v210 + 36)) >> 7)
            {
              v211 = *(unsigned __int8 *)(v209 + 4);
              if (!*(_BYTE *)(v209 + 4) || *(_DWORD *)(v209 + 48) != -1)
              {
                v212 = *(unsigned __int8 *)(v208 + 4);
                if (!*(_BYTE *)(v208 + 4) || *(_DWORD *)(v208 + 48) != -1)
                {
                  v213 = *(_BYTE *)(v210 + 4);
                  if (!v213 || *(_DWORD *)(v210 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v209 + 4);
                    if (v211)
                      v214 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v209 + 48));
                    else
                      v214 = -1;
                    v668.i32[1] = v214;
                    v668.i8[8] = v212;
                    if (v212)
                      v215 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v208 + 48));
                    else
                      v215 = -1;
                    v668.i32[3] = v215;
                    LOBYTE(v669) = v213;
                    HIDWORD(v669) = -1;
                    sub_239C47978((uint64_t)(v207 + 1), (double *)(v604 + 48), (uint64_t)&memptr[1], v198.f64[0], v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v220 = (float64x2_t *)(v201 + 160 * v206 + 104);
                    if (v211)
                    {
                      v221 = *(_QWORD *)(v197 + 24);
                      v223 = *(_QWORD *)(v197 + 40);
                      v222 = *(_QWORD *)(v197 + 48);
                      v224 = *(_QWORD *)(v222 + 56);
                      v225 = v224 + 16 * v221;
                      if (v223)
                      {
                        v226 = v224 + 16 * (v223 + v221);
                        v227 = 16 * v223;
                        while (*(_DWORD *)v225 != v214)
                        {
                          v225 += 16;
                          v227 -= 16;
                          if (!v227)
                          {
                            v225 = v226;
                            break;
                          }
                        }
                      }
                      v228 = (const double *)&memptr[1];
                      v685 = vld3q_f64(v228);
                      v229 = *(_QWORD *)(v222 + 24) + 8 * *(_QWORD *)(v225 + 8);
                      _Q4.f64[0] = *(float64_t *)(v229 + 16);
                      _Q5.f64[1] = v656[1].f64[0];
                      v230 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v685.val[0], v661[0].f64[1]), v685.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v685.val[2], v661[1].f64[1]);
                      v685.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *(float64x2_t *)((char *)v661 + 8));
                      v685.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v685.val[0].f64[0] = v685.val[0].f64[0] + v656[1].f64[1] * v661[1].f64[1];
                      *(float64x2_t *)v229 = vaddq_f64(*(float64x2_t *)v229, v230);
                      *(_QWORD *)(v229 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v685.val[0]);
                      v686 = vld3q_f64(v228);
                      v231 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v214);
                      _Q4.f64[0] = *(float64_t *)(v231 + 16);
                      _Q5.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v219.f64[0] = *(float64_t *)(v201 + 160 * v206 + 120);
                      v232 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v686.val[0], v220->f64[0]), v686.val[1], *v220, 1), v686.val[2], v219.f64[0]);
                      v686.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v220);
                      v686.val[1].f64[0] = *(float64_t *)(v201 + 160 * v206 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v686.val[0].f64[0] = v686.val[0].f64[0] + v656[1].f64[1] * v219.f64[0];
                      *(float64x2_t *)v231 = vsubq_f64(*(float64x2_t *)v231, v232);
                      *(_QWORD *)(v231 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v686.val[0]);
                    }
                    if (v212)
                    {
                      v233 = *(_QWORD *)(v197 + 24);
                      v235 = *(_QWORD *)(v197 + 40);
                      v234 = *(_QWORD *)(v197 + 48);
                      v236 = *(_QWORD *)(v234 + 56);
                      v237 = v236 + 16 * v233;
                      if (v235)
                      {
                        v238 = v236 + 16 * (v235 + v233);
                        v239 = 16 * v235;
                        while (*(_DWORD *)v237 != v215)
                        {
                          v237 += 16;
                          v239 -= 16;
                          if (!v239)
                          {
                            v237 = v238;
                            break;
                          }
                        }
                      }
                      v240 = (const double *)&v657;
                      v687 = vld3q_f64(v240);
                      v241 = *(_QWORD *)(v234 + 24) + 8 * *(_QWORD *)(v237 + 8);
                      _Q4.f64[0] = *(float64_t *)(v241 + 16);
                      _Q5.f64[1] = v660.f64[1];
                      v242 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v687.val[0], v661[0].f64[1]), v687.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v687.val[2], v661[1].f64[1]);
                      v687.val[0] = vmulq_f64(v660, *(float64x2_t *)((char *)v661 + 8));
                      v687.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v687.val[0].f64[0] = v687.val[0].f64[0] + v661[0].f64[0] * v661[1].f64[1];
                      *(float64x2_t *)v241 = vaddq_f64(*(float64x2_t *)v241, v242);
                      *(_QWORD *)(v241 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v687.val[0]);
                      v688 = vld3q_f64(v240);
                      v243 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v215);
                      _Q4.f64[0] = *(float64_t *)(v243 + 16);
                      _Q5.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v219.f64[0] = *(float64_t *)(v201 + 160 * v206 + 120);
                      v244 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v688.val[0], v220->f64[0]), v688.val[1], *v220, 1), v688.val[2], v219.f64[0]);
                      v688.val[0] = vmulq_f64(v660, *v220);
                      v688.val[1].f64[0] = *(float64_t *)(v201 + 160 * v206 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v688.val[0].f64[0] = v688.val[0].f64[0] + v661[0].f64[0] * v219.f64[0];
                      *(float64x2_t *)v243 = vsubq_f64(*(float64x2_t *)v243, v244);
                      *(_QWORD *)(v243 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v688.val[0]);
                    }
                    _Q0.f64[1] = v661[1].f64[0];
                    _Q2 = *v220;
                    _Q2.f64[0] = *(float64_t *)(v201 + 160 * v206 + 112);
                    __asm { FMLA            D3, D2, V0.D[1] }
                    *(void **)&_Q2.f64[0] = memptr[0];
                    *(double *)(v197 + 16) = *(double *)(v197 + 16)
                                           - (_D3
                                            + v661[1].f64[1] * *(double *)(v201 + 160 * v206 + 120));
                    _V1.D[1] = v661[1].f64[0];
                    _Q4.f64[0] = v661[1].f64[0];
                    __asm { FMLA            D3, D4, V1.D[1] }
                    _Q0.f64[0] = _Q2.f64[0] + _D3 + v661[1].f64[1] * v661[1].f64[1];
                    memptr[0] = *(void **)&_Q0.f64[0];
                    v198.f64[0] = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], _Q0, v661[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v219);
                    v199 = 0uLL;
                    if (v211)
                    {
                      v250 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v214);
                      v2.f64[0] = *(float64_t *)(v250 + 16);
                      v3.f64[0] = *(double *)&memptr[1] * *(double *)&memptr[1]
                                + *(double *)&memptr[2] * *(double *)&memptr[2]
                                + *(double *)&memptr[3] * *(double *)&memptr[3];
                      v4.f64[0] = *(double *)&v655 * *(double *)&v655
                                + *((double *)&v655 + 1) * *((double *)&v655 + 1)
                                + v656[0].f64[0] * v656[0].f64[0];
                      v6.f64[0] = v656[1].f64[0] * v656[1].f64[0];
                      v7.f64[0] = v656[1].f64[1] * v656[1].f64[1];
                      v5.f64[0] = v656[0].f64[1] * v656[0].f64[1]
                                + v656[1].f64[0] * v656[1].f64[0]
                                + v656[1].f64[1] * v656[1].f64[1];
                      v3.f64[1] = v4.f64[0];
                      v2 = vaddq_f64(v2, v5);
                      v198 = vaddq_f64(*(float64x2_t *)v250, v3);
                      *(float64x2_t *)v250 = v198;
                      *(float64_t *)(v250 + 16) = v2.f64[0];
                    }
                    if (v212)
                    {
                      v251 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v215);
                      v2.f64[0] = *(float64_t *)(v251 + 16);
                      v3.f64[0] = *(double *)&v657 * *(double *)&v657
                                + *((double *)&v657 + 1) * *((double *)&v657 + 1)
                                + *(double *)&v658 * *(double *)&v658;
                      v4.f64[0] = *((double *)&v658 + 1) * *((double *)&v658 + 1)
                                + *(double *)&v659 * *(double *)&v659
                                + *((double *)&v659 + 1) * *((double *)&v659 + 1);
                      v6.f64[0] = v660.f64[1] * v660.f64[1];
                      v7.f64[0] = v661[0].f64[0] * v661[0].f64[0];
                      v5.f64[0] = v660.f64[0] * v660.f64[0]
                                + v660.f64[1] * v660.f64[1]
                                + v661[0].f64[0] * v661[0].f64[0];
                      v3.f64[1] = v4.f64[0];
                      *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vaddq_f64(v2, v5);
                      v198 = vaddq_f64(*(float64x2_t *)v251, v3);
                      *(float64x2_t *)v251 = v198;
                      *(float64_t *)(v251 + 16) = v2.f64[0];
                    }
                  }
                }
              }
            }
            ++v205;
          }
          while (v205 != v204);
        }
        if (*(_BYTE *)(*(_QWORD *)v197 + 4))
        {
          if (v605)
          {
            v252 = *(double *)memptr + *(double *)memptr * v60;
            *(double *)memptr = v252;
          }
          else
          {
            v252 = *(double *)memptr;
          }
          v2.f64[0] = fabs(v252);
          v198.f64[0] = 1.0 / v252;
          if (v2.f64[0] < v61)
            v198.f64[0] = 0.0;
          *(float64_t *)(v197 + 8) = v198.f64[0];
          v253 = *(_QWORD *)(v197 + 40);
          if (v253)
            break;
        }
LABEL_184:
        v197 += 56;
        if (v197 == v603)
          goto LABEL_310;
      }
      v613 = v650;
      v254 = *(_QWORD *)(v197 + 24);
      v255 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 56);
      v610 = v255 + 16 * (v253 + v254);
      v256 = v255 + 16 * v254;
      v624 = v197;
      while (1)
      {
        v257 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 24) + 8 * *(_QWORD *)(v256 + 8);
        v198.f64[0] = *(float64_t *)(v257 + 16);
        v2 = *(float64x2_t *)v257;
        v3.f64[0] = *(float64_t *)(v197 + 8);
        v4.f64[0] = *(float64_t *)(v197 + 16);
        v5 = vmulq_n_f64(*(float64x2_t *)v257, v3.f64[0]);
        v258 = **(_QWORD **)&v613 + 8 * (*(_DWORD *)(*(_QWORD *)&v613 + 28) + 3 * *(_DWORD *)v256);
        v2.f64[0] = *(float64_t *)(v258 + 16);
        v644 = vmulq_f64(v198, v3);
        *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vmlsq_f64(v2, v4, v644);
        v3 = v5;
        v198 = vmlsq_lane_f64(*(float64x2_t *)v258, v5, v4.f64[0], 0);
        *(float64x2_t *)v258 = v198;
        *(float64_t *)(v258 + 16) = v2.f64[0];
        v615 = v256;
        v259 = *(_DWORD *)v256;
        v260 = *(_QWORD *)(v197 + 24);
        v261 = *(_QWORD *)(v197 + 40);
        v262 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 56);
        v263 = (unsigned int *)(v262 + 16 * v260);
        if (v261)
        {
          v264 = 16 * v261;
          while (*v263 < v259)
          {
            v263 += 4;
            v264 -= 16;
            if (!v264)
              goto LABEL_227;
          }
        }
        v640 = (unsigned int *)(v262 + 16 * (v261 + v260));
        if (v263 != v640)
          break;
LABEL_227:
        v256 = v615 + 16;
        if (v615 + 16 == v610)
          goto LABEL_184;
      }
      v198 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
      v265 = *(_QWORD **)(*(_QWORD *)&v613 + 32);
      v634 = v265 + 2;
      v3.f64[1] = v198.f64[0];
      v628 = v3;
      while (1)
      {
        v268 = v265[11] + 24 * *v263;
        v269 = *(char **)v268;
        v270 = *(char **)(v268 + 8);
        if (*(char **)v268 != v270)
        {
          while (*(_DWORD *)v269 < v259)
          {
            v269 += 16;
            if (v269 == v270)
              goto LABEL_244;
          }
        }
        if (v269 == v270)
          goto LABEL_244;
        if (*(_DWORD *)v269 != v259)
          break;
        v266 = *v634 + 8 * *((_QWORD *)v269 + 1);
LABEL_236:
        v267 = *(_QWORD *)(*(_QWORD *)(v197 + 48) + 24) + 8 * *((_QWORD *)v263 + 1);
        v198.f64[0] = *(float64_t *)(v266 + 16);
        v3.f64[0] = *(float64_t *)(v266 + 40);
        v5.f64[0] = *(float64_t *)(v266 + 64);
        v7.f64[0] = *(float64_t *)(v267 + 16);
        v8 = *(float64x2_t *)v267;
        v9.f64[0] = v644.f64[0] * *(double *)v267;
        v10.f64[0] = vmuld_lane_f64(v644.f64[0], *(float64x2_t *)v267, 1);
        v198 = vsubq_f64(v198, v9);
        v9.f64[1] = v628.f64[1];
        v2 = vmlsq_lane_f64(*(float64x2_t *)v266, v628, *(double *)v267, 0);
        v3 = vsubq_f64(v3, v10);
        v4 = vmlsq_laneq_f64(*(float64x2_t *)(v266 + 24), v628, *(float64x2_t *)v267, 1);
        v5 = vmlsq_f64(v5, v7, v644);
        v6 = vmlsq_lane_f64(*(float64x2_t *)(v266 + 48), v628, v7.f64[0], 0);
        *(float64x2_t *)v266 = v2;
        *(float64_t *)(v266 + 16) = v198.f64[0];
        *(float64x2_t *)(v266 + 24) = v4;
        *(float64_t *)(v266 + 40) = v3.f64[0];
        *(float64x2_t *)(v266 + 48) = v6;
        *(float64_t *)(v266 + 64) = v5.f64[0];
        v263 += 4;
        if (v263 == v640)
          goto LABEL_227;
      }
      v270 = v269;
LABEL_244:
      v271 = v265[10];
      if (v271)
      {
        v273 = v265[6];
        v272 = v265[7];
        v274 = ((v272 - v273) << 6) - 1;
        v275 = v265[9];
        if (v272 == v273)
          v274 = 0;
        v266 = v265[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v273 + (((unint64_t)(v275 + v271 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v275 + v271 - 1) & 0x1FF));
        v265[10] = v271 - 1;
        if ((unint64_t)(v274 - (v271 + v275) + 1) >= 0x400)
        {
          operator delete(*(void **)(v272 - 8));
          v265[7] -= 8;
        }
        goto LABEL_309;
      }
      v668.i64[0] = 0;
      v277 = v265[2];
      v276 = (int64x2_t *)v265[3];
      v278 = (unint64_t)v276 - v277;
      v279 = (uint64_t)((uint64_t)v276->i64 - v277) >> 3;
      v280 = (int64x2_t *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8));
      v281 = v265[4];
      if ((unint64_t)(v281 - (_QWORD)v276) < 0x48)
      {
        v282 = v279 + 9;
        if ((unint64_t)(v279 + 9) >> 61)
          sub_2394189F8();
        v283 = v281 - v277;
        if (v283 >> 2 > v282)
          v282 = v283 >> 2;
        if ((unint64_t)v283 >= 0x7FFFFFFFFFFFFFF8)
          v282 = 0x1FFFFFFFFFFFFFFFLL;
        v620 = v282;
        if (v282)
        {
          if (v282 >> 61)
            sub_239418A80();
          v284 = operator new(8 * v282);
          v199 = 0uLL;
        }
        else
        {
          v284 = 0;
        }
        v290 = &v284[8 * v279];
        *((_QWORD *)v290 + 8) = 0;
        *((_OWORD *)v290 + 2) = v199;
        *((_OWORD *)v290 + 3) = v199;
        *(_OWORD *)v290 = v199;
        *((_OWORD *)v290 + 1) = v199;
        v617 = v268;
        if ((int64x2_t *)v277 == v276)
        {
          v292 = &v284[8 * v279];
        }
        else
        {
          if (v278 - 8 >= 0x68)
          {
            v293 = (uint64_t)((uint64_t)v276->i64 - v277) >> 3;
            v291 = (char *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8));
            v292 = &v284[8 * v279];
            if (v277 + (v278 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v284[v278 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v294 = ((v278 - 8) >> 3) + 1;
              v291 = &v280->i8[-8 * (v294 & 0x3FFFFFFFFFFFFFFCLL)];
              v295 = 8 * v293;
              v296 = (__int128 *)(v277 + 8 * v293 - 16);
              v297 = &v284[v295 - 16];
              v298 = v294 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v299 = *v296;
                *(v297 - 1) = *(v296 - 1);
                *v297 = v299;
                v296 -= 2;
                v297 -= 2;
                v298 -= 4;
              }
              while (v298);
              v292 = &v290[-8 * (v294 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v294 == (v294 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_272;
            }
          }
          else
          {
            v291 = (char *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8));
            v292 = &v284[8 * v279];
          }
          do
          {
            v300 = *((_QWORD *)v291 - 1);
            v291 -= 8;
            *((_QWORD *)v292 - 1) = v300;
            v292 -= 8;
          }
          while (v291 != (char *)v277);
        }
LABEL_272:
        v301 = v290 + 72;
        v302 = (char *)v276 - (char *)v280;
        if (v302)
        {
          v303 = v284;
          memmove(v290 + 72, v280, v302);
          v284 = v303;
        }
        v268 = v617;
        v265[2] = v292;
        v265[3] = &v301[v302];
        v265[4] = &v284[8 * v620];
        if (v277)
          operator delete((void *)v277);
        goto LABEL_308;
      }
      v621 = (uint64_t)((uint64_t)v276->i64 - v277) >> 3;
      v285 = (char *)v276 - (char *)v280;
      if ((unint64_t)((char *)v276 - (char *)v280) > 0x47)
      {
        v287 = (float64_t *)v265[3];
        v286 = 9;
        goto LABEL_285;
      }
      v286 = v285 >> 3;
      v287 = (float64_t *)&v276->i64[9 - (v285 >> 3)];
      v288 = 64 - (v285 & 0xFFFFFFFFFFFFFFF8);
      if (v288 >= 0x68)
      {
        if (v276 >= (int64x2_t *)&v668.u64[1] || &v668 >= (int64x2_t *)((char *)&v276->u64[1] + v288))
        {
          v304 = (v288 >> 3) + 1;
          v305 = (_OWORD *)v265[3];
          v306 = v304 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            *v305 = v199;
            v305[1] = v199;
            v305 += 2;
            v306 -= 4;
          }
          while (v306);
          if (v304 == (v304 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_284:
            v265[3] = v287;
            if (v276 == v280)
              goto LABEL_308;
LABEL_285:
            v307 = (char *)v287 - (char *)&v280[4].u64[1];
            v308 = v307 >> 3;
            v309 = (int64x2_t *)(v287 - 9);
            v310 = (char *)v287;
            if (v287 - 9 < (float64_t *)v276)
            {
              v311 = (v278 & 0xFFFFFFFFFFFFFFF8) + v307;
              v312 = v277 + v311 + 8;
              if ((unint64_t)v276 > v312)
                v312 = (unint64_t)v276;
              v313 = v312 + ~v277 - v311;
              if (v313 > 0x57)
              {
                v314 = (v313 >> 3) + 1;
                v315 = v314 & 0x3FFFFFFFFFFFFFFCLL;
                v309 = (int64x2_t *)((char *)v309 + v315 * 8);
                v316 = v287 + 2;
                v317 = (__int128 *)(v277 + 8 * v308 + 8 * v621 + 16);
                v318 = v314 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v319 = *v317;
                  *(v316 - 1) = *(v317 - 1);
                  *v316 = v319;
                  v316 += 2;
                  v317 += 2;
                  v318 -= 4;
                }
                while (v318);
                v310 = (char *)&v287[v315];
                if (v314 == (v314 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_294;
              }
              else
              {
                v310 = (char *)v287;
              }
              do
              {
                v320 = v309->i64[0];
                v309 = (int64x2_t *)((char *)v309 + 8);
                *(_QWORD *)v310 = v320;
                v310 += 8;
              }
              while (v309 < v276);
            }
LABEL_294:
            v265[3] = v310;
            if (v287 != (float64_t *)&v280[4].u64[1])
              memmove(&v287[-v308], (const void *)(v277 + (((unint64_t)v276 - v277) & 0xFFFFFFFFFFFFFFF8)), v307);
            v321 = (const double *)&v668;
            if (v280 <= &v668)
            {
              v322 = 9;
              if (v265[3] <= (unint64_t)&v668)
                v322 = 0;
              v321 = (const double *)&v668.i64[v322];
            }
            if (v286 >= 0xA
              && (v280 >= (int64x2_t *)(v321 + 1)
               || (unint64_t)v321 >= v277 + (v278 & 0xFFFFFFFFFFFFFFF8) + 8 * v286))
            {
              v280 = (int64x2_t *)((char *)v280 + 8 * (v286 & 0xFFFFFFFFFFFFFFFCLL));
              v323 = vld1q_dup_f64(v321);
              v324 = (float64x2_t *)(v277 + 8 * v621 + 16);
              v325 = v286 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v324[-1] = v323;
                *v324 = v323;
                v324 += 2;
                v325 -= 4;
              }
              while (v325);
              if (v286 == (v286 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_308;
              v286 &= 3u;
            }
            do
            {
              *(double *)v280->i64 = *v321;
              v280 = (int64x2_t *)((char *)v280 + 8);
              --v286;
            }
            while (v286);
LABEL_308:
            v266 = v265[3] - 72;
            v197 = v624;
LABEL_309:
            v326 = (v266 - *v634) >> 3;
            v668.i32[0] = v259;
            v668.i64[1] = v326;
            sub_239C22598((char **)v268, v270, &v668);
            v199 = 0uLL;
            goto LABEL_236;
          }
          v289 = (float64_t *)&v276->i64[v304 & 0x3FFFFFFFFFFFFFFCLL];
        }
        else
        {
          v289 = (float64_t *)v265[3];
        }
      }
      else
      {
        v289 = (float64_t *)v265[3];
      }
      do
        *v289++ = *(float64_t *)v668.i64;
      while (v289 != v287);
      goto LABEL_284;
    }
LABEL_310:
    v327 = *(_QWORD *)(v604 + 600);
    v629 = *(_QWORD *)(v604 + 608);
    if (v327 != v629)
    {
      v328.f64[0] = v600.f64[0];
      do
      {
        *(_QWORD *)(v327 + 16) = 0;
        v662.f64[0] = v600.f64[1];
        v635 = v327;
        v329 = *(_QWORD *)(v327 + 32);
        if (v329)
        {
          v330 = *(_QWORD *)(*(_QWORD *)&v600.f64[0] + 80);
          v331 = (uint64_t *)(**(_QWORD **)(v327 + 48) + 8 * *(_QWORD *)(v327 + 24));
          v332 = 8 * v329;
          do
          {
            v333 = *v331;
            v334 = (_QWORD *)(v330 + 160 * *v331);
            v336 = v334[10];
            v335 = v334[11];
            v337 = v334[12];
            if (((*(unsigned __int8 *)(v335 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v336 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v337 + 36)) >> 7)
            {
              v338 = *(unsigned __int8 *)(v336 + 4);
              if (!*(_BYTE *)(v336 + 4) || *(_DWORD *)(v336 + 48) != -1)
              {
                v339 = *(unsigned __int8 *)(v335 + 4);
                if (!*(_BYTE *)(v335 + 4) || *(_DWORD *)(v335 + 48) != -1)
                {
                  v340 = *(_BYTE *)(v337 + 4);
                  if (!v340 || *(_DWORD *)(v337 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v336 + 4);
                    if (v338)
                      v341 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v336 + 48));
                    else
                      v341 = -1;
                    v668.i32[1] = v341;
                    v668.i8[8] = v339;
                    if (v339)
                      v342 = *(_DWORD *)(*v609 + 4 * *(unsigned int *)(v335 + 48));
                    else
                      v342 = -1;
                    v668.i32[3] = v342;
                    LOBYTE(v669) = v340;
                    HIDWORD(v669) = -1;
                    sub_239C47978((uint64_t)(v334 + 1), (double *)(v604 + 48), (uint64_t)&memptr[1], v328.f64[0], v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v351 = (float64x2_t *)(v330 + 160 * v333 + 104);
                    if (v338)
                    {
                      *(float64x2x3_t *)(&v345 - 2) = vld3q_f64((const double *)&memptr[1]);
                      v352 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v341);
                      v346 = *(float64x2_t *)v352;
                      v347.f64[0] = *(float64_t *)(v352 + 16);
                      v348.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v350.f64[0] = *(float64_t *)(v330 + 160 * v333 + 120);
                      v355 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v353, v351->f64[0]), _Q1, *v351, 1), v345, v350.f64[0]);
                      _Q0 = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v351);
                      _Q1.f64[0] = *(float64_t *)(v330 + 160 * v333 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v656[1].f64[1] * v350.f64[0];
                      v343 = vsubq_f64(v347, _Q0);
                      v344 = vsubq_f64(*(float64x2_t *)v352, v355);
                      *(float64x2_t *)v352 = v344;
                      *(float64_t *)(v352 + 16) = v343.f64[0];
                    }
                    if (v339)
                    {
                      v357 = (const double *)&v657;
                      *(float64x2x3_t *)(&v345 - 2) = vld3q_f64(v357);
                      v358 = **(_QWORD **)&v600.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v600.f64[1] + 28) + 3 * v342);
                      v346 = *(float64x2_t *)v358;
                      v347.f64[0] = *(float64_t *)(v358 + 16);
                      v348.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v350.f64[0] = *(float64_t *)(v330 + 160 * v333 + 120);
                      v361 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v359, v351->f64[0]), _Q1, *v351, 1), v345, v350.f64[0]);
                      _Q0 = vmulq_f64(v660, *v351);
                      _Q1.f64[0] = *(float64_t *)(v330 + 160 * v333 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v661[0].f64[0] * v350.f64[0];
                      v343 = vsubq_f64(v347, _Q0);
                      v344 = vsubq_f64(*(float64x2_t *)v358, v361);
                      *(float64x2_t *)v358 = v344;
                      *(float64_t *)(v358 + 16) = v343.f64[0];
                    }
                    v328.f64[0] = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], v343, v344.f64[0], v345, v346.f64[0], v347, v348, _Q6, v350);
                    if (v338)
                    {
                      v363 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v341);
                      v2.f64[0] = *(float64_t *)(v363 + 16);
                      v3.f64[0] = *(double *)&memptr[1] * *(double *)&memptr[1]
                                + *(double *)&memptr[2] * *(double *)&memptr[2]
                                + *(double *)&memptr[3] * *(double *)&memptr[3];
                      v4.f64[0] = *(double *)&v655 * *(double *)&v655
                                + *((double *)&v655 + 1) * *((double *)&v655 + 1)
                                + v656[0].f64[0] * v656[0].f64[0];
                      v6.f64[0] = v656[1].f64[0] * v656[1].f64[0];
                      v7.f64[0] = v656[1].f64[1] * v656[1].f64[1];
                      v5.f64[0] = v656[0].f64[1] * v656[0].f64[1]
                                + v656[1].f64[0] * v656[1].f64[0]
                                + v656[1].f64[1] * v656[1].f64[1];
                      v3.f64[1] = v4.f64[0];
                      v2 = vaddq_f64(v2, v5);
                      v328 = vaddq_f64(*(float64x2_t *)v363, v3);
                      *(float64x2_t *)v363 = v328;
                      *(float64_t *)(v363 + 16) = v2.f64[0];
                    }
                    if (v339)
                    {
                      v364 = *(_QWORD *)v607 + 8 * (*(_DWORD *)(v607 + 28) + 3 * v342);
                      v2.f64[0] = *(float64_t *)(v364 + 16);
                      v3.f64[0] = *(double *)&v657 * *(double *)&v657
                                + *((double *)&v657 + 1) * *((double *)&v657 + 1)
                                + *(double *)&v658 * *(double *)&v658;
                      v4.f64[0] = *((double *)&v658 + 1) * *((double *)&v658 + 1)
                                + *(double *)&v659 * *(double *)&v659
                                + *((double *)&v659 + 1) * *((double *)&v659 + 1);
                      v6.f64[0] = v660.f64[1] * v660.f64[1];
                      v7.f64[0] = v661[0].f64[0] * v661[0].f64[0];
                      v5.f64[0] = v660.f64[0] * v660.f64[0]
                                + v660.f64[1] * v660.f64[1]
                                + v661[0].f64[0] * v661[0].f64[0];
                      v3.f64[1] = v4.f64[0];
                      *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vaddq_f64(v2, v5);
                      v328 = vaddq_f64(*(float64x2_t *)v364, v3);
                      *(float64x2_t *)v364 = v328;
                      *(float64_t *)(v364 + 16) = v2.f64[0];
                    }
                  }
                }
              }
            }
            ++v331;
            v332 -= 8;
          }
          while (v332);
        }
        v327 = v635 + 56;
      }
      while (v635 + 56 != v629);
    }
    v365 = *(_QWORD *)(v604 + 480);
    v366 = *(_QWORD *)(v604 + 488);
    v662.f64[0] = *(float64_t *)(v604 + 472);
    *(_QWORD *)&v662.f64[1] = v609;
    v663 = v602;
    v664 = v365;
    v665 = v366;
    v666 = 2;
    memset(v667.__m_.__opaque, 0, sizeof(v667.__m_.__opaque));
    v667.__m_.__sig = 850045863;
    v367 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 56);
    v368 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 64);
    if (v367 == v368)
    {
LABEL_495:
      std::mutex::~mutex(&v667);
      a1 = v604;
      goto LABEL_496;
    }
    while (1)
    {
      v370 = *(_QWORD *)(v367 + 48);
      v369 = *(_QWORD *)(v367 + 56);
      v371 = ((*(unsigned __int8 *)(v369 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v370 + 52)) >> 7 ? 2 : 1;
      if ((v371 & v666) != 0)
      {
        v372 = *(unsigned __int8 *)(v370 + 4);
        if (!*(_BYTE *)(v370 + 4) || *(_DWORD *)(v370 + 48) != -1)
        {
          v373 = *(unsigned __int8 *)(v369 + 4);
          if (!*(_BYTE *)(v369 + 4) || *(_DWORD *)(v369 + 48) != -1)
            break;
        }
      }
LABEL_339:
      v367 += 120;
      if (v367 == v368)
        goto LABEL_495;
    }
    if (*(_BYTE *)(v370 + 4))
    {
      v374 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v370 + 48));
      if (*(_BYTE *)(v369 + 4))
      {
LABEL_350:
        v375 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v369 + 48));
        goto LABEL_353;
      }
    }
    else
    {
      v374 = -1;
      if (*(_BYTE *)(v369 + 4))
        goto LABEL_350;
    }
    v375 = -1;
LABEL_353:
    sub_239C46E1C(v367 + 8, v602, (uint64_t)&v668);
    if (!v373)
      goto LABEL_376;
    if (!v372 || v374 < v375)
    {
LABEL_366:
      v397 = *(unint64_t **)(v365 + 32);
      v398 = v397[11] + 24 * v375;
      v400 = *(char **)v398;
      v399 = *(char **)(v398 + 8);
      if (*(char **)v398 != v399)
      {
        while (*(_DWORD *)v400 < v375)
        {
          v400 += 16;
          if (v400 == v399)
            goto LABEL_374;
        }
      }
      if (v400 != v399)
      {
        if (*(_DWORD *)v400 == v375)
        {
          v401 = v397[2] + 8 * *((_QWORD *)v400 + 1);
LABEL_375:
          v377.f64[0] = *(float64_t *)(v401 + 16);
          v379.f64[0] = *(float64_t *)(v401 + 40);
          v376.f64[0] = *(float64_t *)(v401 + 64);
          *(_QWORD *)&v402.f64[1] = v674.i64[1];
          _V19.D[1] = v678.f64[1];
          _Q20 = (float64x2_t)vzip1q_s64(v674, v676);
          _Q22 = (float64x2_t)vzip2q_s64(v674, v676);
          v406.f64[0] = v675;
          v406.f64[1] = v677;
          v407 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v674.i64), _Q22, (float64x2_t)v674, 1), v406, v675);
          _D6 = *(double *)&v674.i64[1];
          __asm { FMLA            D24, D6, V19.D[1] }
          v402.f64[0] = _D24 + v679 * v675;
          v410 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v676.i64), _Q22, (float64x2_t)v676, 1), v406, v677);
          _D17 = *(double *)&v676.i64[1];
          __asm { FMLA            D24, D17, V19.D[1] }
          v381.f64[0] = _D24 + v679 * v677;
          v413 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v678.f64[0]), _Q22, v678, 1), v406, v679);
          _Q22.f64[0] = v678.f64[1];
          __asm { FMLA            D20, D22, V19.D[1] }
          _Q18.f64[0] = _Q20.f64[0] + v679 * v679;
          v377 = vaddq_f64(v377, v402);
          v380 = vaddq_f64(*(float64x2_t *)(v401 + 24), v410);
          v379 = vaddq_f64(v379, v381);
          v414 = vaddq_f64(*(float64x2_t *)(v401 + 48), v413);
          *(float64x2_t *)v401 = vaddq_f64(*(float64x2_t *)v401, v407);
          *(float64_t *)(v401 + 16) = v377.f64[0];
          *(float64x2_t *)(v401 + 24) = v380;
          *(float64_t *)(v401 + 40) = v379.f64[0];
          v376 = vaddq_f64(v376, _Q18);
          *(float64x2_t *)(v401 + 48) = v414;
          *(float64_t *)(v401 + 64) = v376.f64[0];
LABEL_376:
          if (!v372)
          {
LABEL_399:
            if (v373)
            {
              v452 = *(_QWORD *)v366 + 8 * (*(_DWORD *)(v366 + 28) + 3 * v375);
              v377.f64[0] = *(float64_t *)(v452 + 16);
              v453.f64[0] = *(double *)v674.i64 * *(double *)v674.i64
                          + *(double *)&v674.i64[1] * *(double *)&v674.i64[1]
                          + v675 * v675;
              v380.f64[0] = v678.f64[0] * v678.f64[0] + v678.f64[1] * v678.f64[1] + v679 * v679;
              v453.f64[1] = *(double *)v676.i64 * *(double *)v676.i64
                          + *(double *)&v676.i64[1] * *(double *)&v676.i64[1]
                          + v677 * v677;
              v377 = vaddq_f64(v377, v380);
              *(float64x2_t *)v452 = vaddq_f64(*(float64x2_t *)v452, v453);
              *(float64_t *)(v452 + 16) = v377.f64[0];
            }
            if (v372)
            {
              v454 = *(_QWORD *)v365 + 8 * (*(_DWORD *)(v365 + 28) + 3 * v374);
              v377.f64[0] = *(float64_t *)(v454 + 16);
              v380.f64[0] = v669;
              _V6.D[1] = v672.f64[1];
              v456 = *(double *)(v367 + 80);
              v457 = *(float64x2_t *)(v367 + 64);
              v380.f64[1] = v671;
              _Q2 = vmulq_f64(v672, v457);
              _D3 = *(_QWORD *)(v367 + 72);
              __asm { FMLA            D2, D3, V6.D[1] }
              _Q2.f64[0] = _Q2.f64[0] + v673 * v456;
              *(float64x2_t *)v454 = vsubq_f64(*(float64x2_t *)v454, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v668, v670), v457.f64[0]), (float64x2_t)vzip2q_s64(v668, v670), v457, 1), v380, v456));
              *(_QWORD *)(v454 + 16) = *(_OWORD *)&vsubq_f64(v377, _Q2);
            }
            if (v373)
            {
              v460 = (const double *)&v674;
              v689 = vld3q_f64(v460);
              v461 = *(_QWORD *)v365 + 8 * (*(_DWORD *)(v365 + 28) + 3 * v375);
              v380.f64[0] = *(float64_t *)(v461 + 16);
              _V6.D[1] = v678.f64[1];
              v463 = *(double *)(v367 + 80);
              v464 = *(float64x2_t *)(v367 + 64);
              v465 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v689.val[0], v464.f64[0]), v689.val[1], v464, 1), v689.val[2], v463);
              v689.val[0] = vmulq_f64(v678, v464);
              v689.val[1].f64[0] = *(float64_t *)(v367 + 72);
              __asm { FMLA            D0, D1, V6.D[1] }
              v689.val[0].f64[0] = v689.val[0].f64[0] + v679 * v463;
              *(float64x2_t *)v461 = vsubq_f64(*(float64x2_t *)v461, v465);
              *(_QWORD *)(v461 + 16) = *(_OWORD *)&vsubq_f64(v380, v689.val[0]);
            }
            goto LABEL_339;
          }
          v415 = *(unint64_t **)(v365 + 32);
          v416 = v415[11] + 24 * v374;
          v418 = *(char **)v416;
          v417 = *(char **)(v416 + 8);
          if (*(char **)v416 != v417)
          {
            while (*(_DWORD *)v418 < v374)
            {
              v418 += 16;
              if (v418 == v417)
                goto LABEL_385;
            }
          }
          if (v418 != v417)
          {
            if (*(_DWORD *)v418 == v374)
            {
              v419 = v415[2] + 8 * *((_QWORD *)v418 + 1);
LABEL_386:
              v377.f64[0] = *(float64_t *)(v419 + 16);
              v379.f64[0] = *(float64_t *)(v419 + 40);
              v376.f64[0] = *(float64_t *)(v419 + 64);
              *(_QWORD *)&v420.f64[1] = v668.i64[1];
              _Q22 = v672;
              _Q20 = (float64x2_t)vzip1q_s64(v668, v670);
              v423 = (float64x2_t)vzip2q_s64(v668, v670);
              v424.f64[0] = v669;
              v424.f64[1] = v671;
              v425 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v668.i64), v423, (float64x2_t)v668, 1), v424, v669);
              _D6 = *(double *)&v668.i64[1];
              __asm { FMLA            D19, D6, V22.D[1] }
              v420.f64[0] = _D19 + v673 * v669;
              v428 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v670.i64), v423, (float64x2_t)v670, 1), v424, v671);
              _D17 = *(double *)&v670.i64[1];
              __asm { FMLA            D19, D17, V22.D[1] }
              v381.f64[0] = _D19 + v673 * v671;
              v625 = v423;
              v630 = _Q20;
              v622 = v424;
              v431 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v672.f64[0]), v423, v672, 1), v424, v673);
              _Q19 = vmulq_f64(_Q22, _Q22);
              _Q20.f64[0] = v672.f64[1];
              v636 = (int8x16_t)v672;
              v641 = v673;
              __asm { FMLA            D19, D20, V22.D[1] }
              _Q19.f64[0] = _Q19.f64[0] + v641 * v641;
              v433 = vaddq_f64(v377, v420);
              v380 = vaddq_f64(*(float64x2_t *)(v419 + 24), v428);
              v434 = vaddq_f64(v379, v381);
              v435 = vaddq_f64(*(float64x2_t *)(v419 + 48), v431);
              *(float64x2_t *)v419 = vaddq_f64(*(float64x2_t *)v419, v425);
              *(float64_t *)(v419 + 16) = v433.f64[0];
              *(float64x2_t *)(v419 + 24) = v380;
              *(float64_t *)(v419 + 40) = v434.f64[0];
              *(float64x2_t *)(v419 + 48) = v435;
              *(_QWORD *)(v419 + 64) = *(_OWORD *)&vaddq_f64(v376, _Q19);
              if (!v373 || v375 < v374)
                goto LABEL_398;
              v436 = *(unint64_t **)(v365 + 32);
              v437 = v436[11] + 24 * v375;
              v439 = *(char **)v437;
              v438 = *(char **)(v437 + 8);
              if (*(char **)v437 != v438)
              {
                while (*(_DWORD *)v439 < v374)
                {
                  v439 += 16;
                  if (v439 == v438)
                    goto LABEL_396;
                }
              }
              if (v439 != v438)
              {
                if (*(_DWORD *)v439 == v374)
                {
                  v440 = v436[2] + 8 * *((_QWORD *)v439 + 1);
LABEL_397:
                  _Q0 = (float64x2_t)vextq_s8(v636, v636, 8uLL);
                  v433.f64[0] = *(float64_t *)(v440 + 16);
                  v434.f64[0] = *(float64_t *)(v440 + 40);
                  v435.f64[0] = *(float64_t *)(v440 + 64);
                  v442 = *(float64x2_t *)(v440 + 48);
                  *(_QWORD *)&_Q7.f64[1] = v674.i64[1];
                  _V18.D[1] = *(double *)&v676.i64[1];
                  _V20.D[1] = v678.f64[1];
                  __asm { FMLA            D22, D0, V7.D[1] }
                  _Q7.f64[0] = _D22 + v641 * v675;
                  __asm { FMLA            D22, D0, V18.D[1] }
                  v431.f64[0] = _D22 + v641 * v677;
                  v448 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v630, v678.f64[0]), v625, v678, 1), v622, v679);
                  __asm { FMLA            D22, D0, V20.D[1] }
                  _Q0.f64[0] = _D22 + v641 * v679;
                  v380 = vaddq_f64(*(float64x2_t *)(v440 + 24), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v630, *(double *)v676.i64), v625, (float64x2_t)v676, 1), v622, v677));
                  *(float64x2_t *)v440 = vaddq_f64(*(float64x2_t *)v440, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v630, *(double *)v674.i64), v625, (float64x2_t)v674, 1), v622, v675));
                  *(_QWORD *)(v440 + 16) = *(_OWORD *)&vaddq_f64(v433, _Q7);
                  *(float64x2_t *)(v440 + 24) = v380;
                  *(_QWORD *)(v440 + 40) = *(_OWORD *)&vaddq_f64(v434, v431);
                  v433 = vaddq_f64(v442, v448);
                  *(float64x2_t *)(v440 + 48) = v433;
                  *(_QWORD *)(v440 + 64) = *(_OWORD *)&vaddq_f64(v435, _Q0);
LABEL_398:
                  v450 = *(_QWORD *)v366 + 8 * (*(_DWORD *)(v366 + 28) + 3 * v374);
                  v433.f64[0] = *(float64_t *)(v450 + 16);
                  v451.f64[0] = *(double *)v668.i64 * *(double *)v668.i64
                              + *(double *)&v668.i64[1] * *(double *)&v668.i64[1]
                              + v669 * v669;
                  v380.f64[0] = v672.f64[0] * v672.f64[0] + v672.f64[1] * v672.f64[1] + v673 * v673;
                  v451.f64[1] = *(double *)v670.i64 * *(double *)v670.i64
                              + *(double *)&v670.i64[1] * *(double *)&v670.i64[1]
                              + v671 * v671;
                  v377 = vaddq_f64(v433, v380);
                  *(float64x2_t *)v450 = vaddq_f64(*(float64x2_t *)v450, v451);
                  *(float64_t *)(v450 + 16) = v377.f64[0];
                  goto LABEL_399;
                }
                v438 = v439;
              }
LABEL_396:
              v440 = sub_239C23138(v436, (char **)v437, v374, v438);
              goto LABEL_397;
            }
            v417 = v418;
          }
LABEL_385:
          v419 = sub_239C23138(v415, (char **)v416, v374, v417);
          goto LABEL_386;
        }
        v399 = v400;
      }
LABEL_374:
      v401 = sub_239C23138(v397, (char **)v398, v375, v399);
      goto LABEL_375;
    }
    v384 = *(unint64_t **)(v365 + 32);
    v385 = v384[11] + 24 * v374;
    v387 = *(char **)v385;
    v386 = *(char **)(v385 + 8);
    if (*(char **)v385 != v386)
    {
      while (*(_DWORD *)v387 < v375)
      {
        v387 += 16;
        if (v387 == v386)
          goto LABEL_364;
      }
    }
    if (v387 != v386)
    {
      if (*(_DWORD *)v387 == v375)
      {
        v388 = v384[2] + 8 * *((_QWORD *)v387 + 1);
LABEL_365:
        v376.f64[0] = *(float64_t *)(v388 + 16);
        v378.f64[0] = *(float64_t *)(v388 + 40);
        v380.f64[0] = *(float64_t *)(v388 + 64);
        v389 = (const double *)&v674;
        v691 = vld3q_f64(v389);
        v381 = *(float64x2_t *)(v388 + 48);
        _V17.D[1] = v678.f64[1];
        *(_QWORD *)&_Q18.f64[1] = v668.i64[1];
        v391 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v691.val[0], *(double *)v668.i64), v691.val[1], (float64x2_t)v668, 1), v691.val[2], v669);
        *(_QWORD *)&_Q18.f64[0] = v668.i64[1];
        __asm { FMLA            D26, D18, V17.D[1] }
        _Q18.f64[0] = _D26 + v679 * v669;
        v393 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v691.val[0], *(double *)v670.i64), v691.val[1], (float64x2_t)v670, 1), v691.val[2], v671);
        _D21 = *(double *)&v670.i64[1];
        __asm { FMLA            D26, D21, V17.D[1] }
        v383.f64[0] = _D26 + v679 * v671;
        v396 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v691.val[0], v672.f64[0]), v691.val[1], v672, 1), v691.val[2], v673);
        v691.val[0] = vmulq_f64(v678, v672);
        v691.val[1].f64[0] = v672.f64[1];
        __asm { FMLA            D5, D6, V17.D[1] }
        v691.val[0].f64[0] = v691.val[0].f64[0] + v679 * v673;
        v377 = vaddq_f64(*(float64x2_t *)v388, v391);
        v379 = vaddq_f64(*(float64x2_t *)(v388 + 24), v393);
        *(float64x2_t *)v388 = v377;
        *(_QWORD *)(v388 + 16) = *(_OWORD *)&vaddq_f64(v376, _Q18);
        v376 = vaddq_f64(v381, v396);
        *(float64x2_t *)(v388 + 24) = v379;
        *(_QWORD *)(v388 + 40) = *(_OWORD *)&vaddq_f64(v378, v383);
        *(float64x2_t *)(v388 + 48) = v376;
        *(_QWORD *)(v388 + 64) = *(_OWORD *)&vaddq_f64(v380, v691.val[0]);
        goto LABEL_366;
      }
      v386 = v387;
    }
LABEL_364:
    v388 = sub_239C23138(v384, (char **)v385, v375, v386);
    goto LABEL_365;
  }
  if (!v16)
  {
    v608 = (_QWORD *)(a1 + 656);
    v66 = *(_QWORD *)(a1 + 576);
    v601 = *v65;
    v606 = *(_QWORD *)(a1 + 584);
    if (v66 != v606)
    {
      v67 = *v65;
      v68 = 0uLL;
      while (1)
      {
        *(_QWORD *)(v66 + 16) = 0;
        memptr[0] = 0;
        v662.f64[0] = v601.f64[1];
        v69 = *(_QWORD *)(v66 + 32);
        if (v69)
        {
          v70 = *(_QWORD *)(*(_QWORD *)&v601.f64[0] + 80);
          v71 = *(_QWORD *)(v66 + 24);
          v72 = **(_QWORD **)(v66 + 48);
          v73 = (uint64_t *)(v72 + 8 * (v69 + v71));
          v74 = (uint64_t *)(v72 + 8 * v71);
          do
          {
            v91 = *v74;
            v92 = (_QWORD *)(v70 + 160 * *v74);
            v94 = v92[10];
            v93 = v92[11];
            v95 = v92[12];
            if (((*(unsigned __int8 *)(v93 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v94 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v95 + 36)) >> 7)
            {
              v96 = *(unsigned __int8 *)(v94 + 4);
              if (!*(_BYTE *)(v94 + 4) || *(_DWORD *)(v94 + 48) != -1)
              {
                v97 = *(unsigned __int8 *)(v93 + 4);
                if (!*(_BYTE *)(v93 + 4) || *(_DWORD *)(v93 + 48) != -1)
                {
                  v98 = *(_BYTE *)(v95 + 4);
                  if (!v98 || *(_DWORD *)(v95 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v94 + 4);
                    if (v96)
                      v99 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v94 + 48));
                    else
                      v99 = -1;
                    v668.i32[1] = v99;
                    v668.i8[8] = v97;
                    if (v97)
                      v100 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v93 + 48));
                    else
                      v100 = -1;
                    v668.i32[3] = v100;
                    LOBYTE(v669) = v98;
                    HIDWORD(v669) = -1;
                    sub_239C47978((uint64_t)(v92 + 1), (double *)(v604 + 48), (uint64_t)&memptr[1], v67.f64[0], v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v102 = (float64x2_t *)(v70 + 160 * v91 + 104);
                    if (v96)
                    {
                      v103 = *(_QWORD *)(v66 + 24);
                      v105 = *(_QWORD *)(v66 + 40);
                      v104 = *(_QWORD *)(v66 + 48);
                      v106 = *(_QWORD *)(v104 + 56);
                      v107 = v106 + 16 * v103;
                      if (v105)
                      {
                        v108 = v106 + 16 * (v105 + v103);
                        v109 = 16 * v105;
                        while (*(_DWORD *)v107 != v99)
                        {
                          v107 += 16;
                          v109 -= 16;
                          if (!v109)
                          {
                            v107 = v108;
                            break;
                          }
                        }
                      }
                      v110 = (const double *)&memptr[1];
                      v683 = vld3q_f64(v110);
                      v111 = *(_QWORD *)(v104 + 24) + 8 * *(_QWORD *)(v107 + 8);
                      _Q4.f64[0] = *(float64_t *)(v111 + 16);
                      _Q5.f64[1] = v656[1].f64[0];
                      v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v683.val[0], v661[0].f64[1]), v683.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v683.val[2], v661[1].f64[1]);
                      v683.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *(float64x2_t *)((char *)v661 + 8));
                      v683.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v683.val[0].f64[0] = v683.val[0].f64[0] + v656[1].f64[1] * v661[1].f64[1];
                      *(float64x2_t *)v111 = vaddq_f64(*(float64x2_t *)v111, v112);
                      *(_QWORD *)(v111 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v683.val[0]);
                      v684 = vld3q_f64(v110);
                      v113 = **(_QWORD **)&v601.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v99);
                      _Q4.f64[0] = *(float64_t *)(v113 + 16);
                      _Q5.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v84.f64[0] = *(float64_t *)(v70 + 160 * v91 + 120);
                      v114 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v684.val[0], v102->f64[0]), v684.val[1], *v102, 1), v684.val[2], v84.f64[0]);
                      v684.val[0] = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v102);
                      v684.val[1].f64[0] = *(float64_t *)(v70 + 160 * v91 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v684.val[0].f64[0] = v684.val[0].f64[0] + v656[1].f64[1] * v84.f64[0];
                      *(float64x2_t *)v113 = vsubq_f64(*(float64x2_t *)v113, v114);
                      *(_QWORD *)(v113 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v684.val[0]);
                    }
                    if (v97)
                    {
                      v115 = *(_QWORD *)(v66 + 24);
                      v117 = *(_QWORD *)(v66 + 40);
                      v116 = *(_QWORD *)(v66 + 48);
                      v118 = *(_QWORD *)(v116 + 56);
                      v119 = v118 + 16 * v115;
                      if (v117)
                      {
                        v120 = v118 + 16 * (v117 + v115);
                        v121 = 16 * v117;
                        while (*(_DWORD *)v119 != v100)
                        {
                          v119 += 16;
                          v121 -= 16;
                          if (!v121)
                          {
                            v119 = v120;
                            break;
                          }
                        }
                      }
                      v75 = (const double *)&v657;
                      v681 = vld3q_f64(v75);
                      v76 = *(_QWORD *)(v116 + 24) + 8 * *(_QWORD *)(v119 + 8);
                      _Q4.f64[0] = *(float64_t *)(v76 + 16);
                      _Q5.f64[1] = v660.f64[1];
                      v77 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v681.val[0], v661[0].f64[1]), v681.val[1], *(float64x2_t *)((char *)v661 + 8), 1), v681.val[2], v661[1].f64[1]);
                      v681.val[0] = vmulq_f64(v660, *(float64x2_t *)((char *)v661 + 8));
                      v681.val[1].f64[0] = v661[1].f64[0];
                      __asm { FMLA            D0, D1, V5.D[1] }
                      v681.val[0].f64[0] = v681.val[0].f64[0] + v661[0].f64[0] * v661[1].f64[1];
                      *(float64x2_t *)v76 = vaddq_f64(*(float64x2_t *)v76, v77);
                      *(_QWORD *)(v76 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v681.val[0]);
                      v682 = vld3q_f64(v75);
                      v81 = **(_QWORD **)&v601.f64[1]
                          + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v100);
                      _Q4.f64[0] = *(float64_t *)(v81 + 16);
                      _Q5.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v84.f64[0] = *(float64_t *)(v70 + 160 * v91 + 120);
                      v85 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v682.val[0], v102->f64[0]), v682.val[1], *v102, 1), v682.val[2], v84.f64[0]);
                      v682.val[0] = vmulq_f64(v660, *v102);
                      v682.val[1].f64[0] = *(float64_t *)(v70 + 160 * v91 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v682.val[0].f64[0] = v682.val[0].f64[0] + v661[0].f64[0] * v84.f64[0];
                      *(float64x2_t *)v81 = vsubq_f64(*(float64x2_t *)v81, v85);
                      *(_QWORD *)(v81 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v682.val[0]);
                    }
                    _Q0.f64[1] = v661[1].f64[0];
                    _Q2 = *v102;
                    _Q2.f64[0] = *(float64_t *)(v70 + 160 * v91 + 112);
                    __asm { FMLA            D3, D2, V0.D[1] }
                    *(void **)&_Q2.f64[0] = memptr[0];
                    *(double *)(v66 + 16) = *(double *)(v66 + 16)
                                          - (_D3
                                           + v661[1].f64[1] * *(double *)(v70 + 160 * v91 + 120));
                    _V1.D[1] = v661[1].f64[0];
                    _Q4.f64[0] = v661[1].f64[0];
                    __asm { FMLA            D3, D4, V1.D[1] }
                    _Q0.f64[0] = _Q2.f64[0] + _D3 + v661[1].f64[1] * v661[1].f64[1];
                    memptr[0] = *(void **)&_Q0.f64[0];
                    v67.f64[0] = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], _Q0, v661[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v84);
                    v68 = 0uLL;
                  }
                }
              }
            }
            ++v74;
          }
          while (v74 != v73);
        }
        if (v605)
        {
          v122 = *(double *)memptr + v60;
          *(double *)memptr = *(double *)memptr + v60;
        }
        else
        {
          v122 = *(double *)memptr;
        }
        v2.f64[0] = fabs(v122);
        v67.f64[0] = 1.0 / v122;
        if (v2.f64[0] < v61)
          v67.f64[0] = 0.0;
        *(float64_t *)(v66 + 8) = v67.f64[0];
        v123 = *(_QWORD *)(v66 + 40);
        if (v123)
          break;
LABEL_60:
        v66 += 56;
        if (v66 == v606)
          goto LABEL_406;
      }
      v124 = *(_QWORD *)(v66 + 24);
      v125 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 56);
      v611 = v125 + 16 * (v123 + v124);
      v612 = v650;
      v126 = v125 + 16 * v124;
      v623 = v66;
      while (1)
      {
        v127 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 24) + 8 * *(_QWORD *)(v126 + 8);
        v67.f64[0] = *(float64_t *)(v127 + 16);
        v2 = *(float64x2_t *)v127;
        v3.f64[0] = *(float64_t *)(v66 + 8);
        v4.f64[0] = *(float64_t *)(v66 + 16);
        v5 = vmulq_n_f64(*(float64x2_t *)v127, v3.f64[0]);
        v128 = **(_QWORD **)&v612 + 8 * (*(_DWORD *)(*(_QWORD *)&v612 + 28) + 3 * *(_DWORD *)v126);
        v2.f64[0] = *(float64_t *)(v128 + 16);
        v643 = vmulq_f64(v67, v3);
        *(_QWORD *)&v2.f64[0] = *(_OWORD *)&vmlsq_f64(v2, v4, v643);
        v3 = v5;
        v67 = vmlsq_lane_f64(*(float64x2_t *)v128, v5, v4.f64[0], 0);
        *(float64x2_t *)v128 = v67;
        *(float64_t *)(v128 + 16) = v2.f64[0];
        v614 = v126;
        v129 = *(_DWORD *)v126;
        v130 = *(_QWORD *)(v66 + 24);
        v131 = *(_QWORD *)(v66 + 40);
        v132 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 56);
        v133 = (unsigned int *)(v132 + 16 * v130);
        if (v131)
        {
          v134 = 16 * v131;
          while (*v133 < v129)
          {
            v133 += 4;
            v134 -= 16;
            if (!v134)
              goto LABEL_99;
          }
        }
        v639 = (unsigned int *)(v132 + 16 * (v131 + v130));
        if (v133 != v639)
          break;
LABEL_99:
        v126 = v614 + 16;
        if (v614 + 16 == v611)
          goto LABEL_60;
      }
      v67 = (float64x2_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL);
      v135 = *(_QWORD **)(*(_QWORD *)&v612 + 32);
      v633 = v135 + 2;
      v3.f64[1] = v67.f64[0];
      v627 = v3;
      while (1)
      {
        v138 = v135[11] + 24 * *v133;
        v139 = *(char **)v138;
        v140 = *(char **)(v138 + 8);
        if (*(char **)v138 != v140)
        {
          while (*(_DWORD *)v139 < v129)
          {
            v139 += 16;
            if (v139 == v140)
              goto LABEL_116;
          }
        }
        if (v139 == v140)
          goto LABEL_116;
        if (*(_DWORD *)v139 != v129)
          break;
        v136 = *v633 + 8 * *((_QWORD *)v139 + 1);
LABEL_108:
        v137 = *(_QWORD *)(*(_QWORD *)(v66 + 48) + 24) + 8 * *((_QWORD *)v133 + 1);
        v67.f64[0] = *(float64_t *)(v136 + 16);
        v3.f64[0] = *(float64_t *)(v136 + 40);
        v5.f64[0] = *(float64_t *)(v136 + 64);
        v7.f64[0] = *(float64_t *)(v137 + 16);
        v8 = *(float64x2_t *)v137;
        v9.f64[0] = v643.f64[0] * *(double *)v137;
        v10.f64[0] = vmuld_lane_f64(v643.f64[0], *(float64x2_t *)v137, 1);
        v67 = vsubq_f64(v67, v9);
        v9.f64[1] = v627.f64[1];
        v2 = vmlsq_lane_f64(*(float64x2_t *)v136, v627, *(double *)v137, 0);
        v3 = vsubq_f64(v3, v10);
        v4 = vmlsq_laneq_f64(*(float64x2_t *)(v136 + 24), v627, *(float64x2_t *)v137, 1);
        v5 = vmlsq_f64(v5, v7, v643);
        v6 = vmlsq_lane_f64(*(float64x2_t *)(v136 + 48), v627, v7.f64[0], 0);
        *(float64x2_t *)v136 = v2;
        *(float64_t *)(v136 + 16) = v67.f64[0];
        *(float64x2_t *)(v136 + 24) = v4;
        *(float64_t *)(v136 + 40) = v3.f64[0];
        *(float64x2_t *)(v136 + 48) = v6;
        *(float64_t *)(v136 + 64) = v5.f64[0];
        v133 += 4;
        if (v133 == v639)
          goto LABEL_99;
      }
      v140 = v139;
LABEL_116:
      v141 = v135[10];
      if (v141)
      {
        v143 = v135[6];
        v142 = v135[7];
        v144 = ((v142 - v143) << 6) - 1;
        v145 = v135[9];
        if (v142 == v143)
          v144 = 0;
        v136 = v135[2]
             + 8
             * *(_QWORD *)(*(_QWORD *)(v143 + (((unint64_t)(v145 + v141 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((v145 + v141 - 1) & 0x1FF));
        v135[10] = v141 - 1;
        if ((unint64_t)(v144 - (v141 + v145) + 1) >= 0x400)
        {
          operator delete(*(void **)(v142 - 8));
          v135[7] -= 8;
        }
        goto LABEL_181;
      }
      v668.i64[0] = 0;
      v147 = v135[2];
      v146 = (int64x2_t *)v135[3];
      v148 = (unint64_t)v146 - v147;
      v149 = (uint64_t)((uint64_t)v146->i64 - v147) >> 3;
      v150 = (int64x2_t *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8));
      v151 = v135[4];
      if ((unint64_t)(v151 - (_QWORD)v146) < 0x48)
      {
        v152 = v149 + 9;
        if ((unint64_t)(v149 + 9) >> 61)
          sub_2394189F8();
        v153 = v151 - v147;
        if (v153 >> 2 > v152)
          v152 = v153 >> 2;
        if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8)
          v152 = 0x1FFFFFFFFFFFFFFFLL;
        v618 = v152;
        if (v152)
        {
          if (v152 >> 61)
            sub_239418A80();
          v154 = operator new(8 * v152);
          v68 = 0uLL;
        }
        else
        {
          v154 = 0;
        }
        v160 = &v154[8 * v149];
        *((_QWORD *)v160 + 8) = 0;
        *((_OWORD *)v160 + 2) = v68;
        *((_OWORD *)v160 + 3) = v68;
        *(_OWORD *)v160 = v68;
        *((_OWORD *)v160 + 1) = v68;
        v616 = v138;
        if ((int64x2_t *)v147 == v146)
        {
          v162 = &v154[8 * v149];
        }
        else
        {
          if (v148 - 8 >= 0x68)
          {
            v163 = (uint64_t)((uint64_t)v146->i64 - v147) >> 3;
            v161 = (char *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8));
            v162 = &v154[8 * v149];
            if (v147 + (v148 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v154[v148 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
            {
              v164 = ((v148 - 8) >> 3) + 1;
              v161 = &v150->i8[-8 * (v164 & 0x3FFFFFFFFFFFFFFCLL)];
              v165 = 8 * v163;
              v166 = (__int128 *)(v147 + 8 * v163 - 16);
              v167 = &v154[v165 - 16];
              v168 = v164 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v169 = *v166;
                *(v167 - 1) = *(v166 - 1);
                *v167 = v169;
                v166 -= 2;
                v167 -= 2;
                v168 -= 4;
              }
              while (v168);
              v162 = &v160[-8 * (v164 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_144;
            }
          }
          else
          {
            v161 = (char *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8));
            v162 = &v154[8 * v149];
          }
          do
          {
            v170 = *((_QWORD *)v161 - 1);
            v161 -= 8;
            *((_QWORD *)v162 - 1) = v170;
            v162 -= 8;
          }
          while (v161 != (char *)v147);
        }
LABEL_144:
        v171 = v160 + 72;
        v172 = (char *)v146 - (char *)v150;
        if (v172)
        {
          v173 = v154;
          memmove(v160 + 72, v150, v172);
          v154 = v173;
        }
        v138 = v616;
        v135[2] = v162;
        v135[3] = &v171[v172];
        v135[4] = &v154[8 * v618];
        if (v147)
          operator delete((void *)v147);
        goto LABEL_180;
      }
      v619 = (uint64_t)((uint64_t)v146->i64 - v147) >> 3;
      v155 = (char *)v146 - (char *)v150;
      if ((unint64_t)((char *)v146 - (char *)v150) > 0x47)
      {
        v157 = (float64_t *)v135[3];
        v156 = 9;
        goto LABEL_157;
      }
      v156 = v155 >> 3;
      v157 = (float64_t *)&v146->i64[9 - (v155 >> 3)];
      v158 = 64 - (v155 & 0xFFFFFFFFFFFFFFF8);
      if (v158 >= 0x68)
      {
        if (v146 >= (int64x2_t *)&v668.u64[1] || &v668 >= (int64x2_t *)((char *)&v146->u64[1] + v158))
        {
          v174 = (v158 >> 3) + 1;
          v175 = (_OWORD *)v135[3];
          v176 = v174 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            *v175 = v68;
            v175[1] = v68;
            v175 += 2;
            v176 -= 4;
          }
          while (v176);
          if (v174 == (v174 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_156:
            v135[3] = v157;
            if (v146 == v150)
              goto LABEL_180;
LABEL_157:
            v177 = (char *)v157 - (char *)&v150[4].u64[1];
            v178 = v177 >> 3;
            v179 = (int64x2_t *)(v157 - 9);
            v180 = (char *)v157;
            if (v157 - 9 < (float64_t *)v146)
            {
              v181 = (v148 & 0xFFFFFFFFFFFFFFF8) + v177;
              v182 = v147 + v181 + 8;
              if ((unint64_t)v146 > v182)
                v182 = (unint64_t)v146;
              v183 = v182 + ~v147 - v181;
              if (v183 > 0x57)
              {
                v184 = (v183 >> 3) + 1;
                v185 = v184 & 0x3FFFFFFFFFFFFFFCLL;
                v179 = (int64x2_t *)((char *)v179 + v185 * 8);
                v186 = v157 + 2;
                v187 = (__int128 *)(v147 + 8 * v178 + 8 * v619 + 16);
                v188 = v184 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v189 = *v187;
                  *(v186 - 1) = *(v187 - 1);
                  *v186 = v189;
                  v186 += 2;
                  v187 += 2;
                  v188 -= 4;
                }
                while (v188);
                v180 = (char *)&v157[v185];
                if (v184 == (v184 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_166;
              }
              else
              {
                v180 = (char *)v157;
              }
              do
              {
                v190 = v179->i64[0];
                v179 = (int64x2_t *)((char *)v179 + 8);
                *(_QWORD *)v180 = v190;
                v180 += 8;
              }
              while (v179 < v146);
            }
LABEL_166:
            v135[3] = v180;
            if (v157 != (float64_t *)&v150[4].u64[1])
              memmove(&v157[-v178], (const void *)(v147 + (((unint64_t)v146 - v147) & 0xFFFFFFFFFFFFFFF8)), v177);
            v191 = (const double *)&v668;
            if (v150 <= &v668)
            {
              v192 = 9;
              if (v135[3] <= (unint64_t)&v668)
                v192 = 0;
              v191 = (const double *)&v668.i64[v192];
            }
            if (v156 >= 0xA
              && (v150 >= (int64x2_t *)(v191 + 1)
               || (unint64_t)v191 >= v147 + (v148 & 0xFFFFFFFFFFFFFFF8) + 8 * v156))
            {
              v150 = (int64x2_t *)((char *)v150 + 8 * (v156 & 0xFFFFFFFFFFFFFFFCLL));
              v193 = vld1q_dup_f64(v191);
              v194 = (float64x2_t *)(v147 + 8 * v619 + 16);
              v195 = v156 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v194[-1] = v193;
                *v194 = v193;
                v194 += 2;
                v195 -= 4;
              }
              while (v195);
              if (v156 == (v156 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_180;
              v156 &= 3u;
            }
            do
            {
              *(double *)v150->i64 = *v191;
              v150 = (int64x2_t *)((char *)v150 + 8);
              --v156;
            }
            while (v156);
LABEL_180:
            v136 = v135[3] - 72;
            v66 = v623;
LABEL_181:
            v196 = (v136 - *v633) >> 3;
            v668.i32[0] = v129;
            v668.i64[1] = v196;
            sub_239C22598((char **)v138, v140, &v668);
            v68 = 0uLL;
            goto LABEL_108;
          }
          v159 = (float64_t *)&v146->i64[v174 & 0x3FFFFFFFFFFFFFFCLL];
        }
        else
        {
          v159 = (float64_t *)v135[3];
        }
      }
      else
      {
        v159 = (float64_t *)v135[3];
      }
      do
        *v159++ = *(float64_t *)v668.i64;
      while (v159 != v157);
      goto LABEL_156;
    }
LABEL_406:
    v466 = *(_QWORD *)(v604 + 600);
    v631 = *(_QWORD *)(v604 + 608);
    if (v466 != v631)
    {
      v467 = v601.f64[0];
      do
      {
        *(_QWORD *)(v466 + 16) = 0;
        v662.f64[0] = v601.f64[1];
        v637 = v466;
        v468 = *(_QWORD *)(v466 + 32);
        if (v468)
        {
          v469 = *(_QWORD *)(*(_QWORD *)&v601.f64[0] + 80);
          v470 = (uint64_t *)(**(_QWORD **)(v466 + 48) + 8 * *(_QWORD *)(v466 + 24));
          v471 = 8 * v468;
          do
          {
            v472 = *v470;
            v473 = (_QWORD *)(v469 + 160 * *v470);
            v475 = v473[10];
            v474 = v473[11];
            v476 = v473[12];
            if (((*(unsigned __int8 *)(v474 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v475 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v476 + 36)) >> 7)
            {
              v477 = *(unsigned __int8 *)(v475 + 4);
              if (!*(_BYTE *)(v475 + 4) || *(_DWORD *)(v475 + 48) != -1)
              {
                v478 = *(unsigned __int8 *)(v474 + 4);
                if (!*(_BYTE *)(v474 + 4) || *(_DWORD *)(v474 + 48) != -1)
                {
                  v479 = *(_BYTE *)(v476 + 4);
                  if (!v479 || *(_DWORD *)(v476 + 32) != -1)
                  {
                    v668.i8[0] = *(_BYTE *)(v475 + 4);
                    if (v477)
                      v480 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v475 + 48));
                    else
                      v480 = -1;
                    v668.i32[1] = v480;
                    v668.i8[8] = v478;
                    if (v478)
                      v481 = *(_DWORD *)(*v608 + 4 * *(unsigned int *)(v474 + 48));
                    else
                      v481 = -1;
                    v668.i32[3] = v481;
                    LOBYTE(v669) = v479;
                    HIDWORD(v669) = -1;
                    sub_239C47978((uint64_t)(v473 + 1), (double *)(v604 + 48), (uint64_t)&memptr[1], v467, v2.f64[0], v3.f64[0], v4.f64[0], v5.f64[0], v6.f64[0], v7, v8);
                    v490 = (float64x2_t *)(v469 + 160 * v472 + 104);
                    if (v477)
                    {
                      *(float64x2x3_t *)(&v484 - 2) = vld3q_f64((const double *)&memptr[1]);
                      v491 = **(_QWORD **)&v601.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v480);
                      v485 = *(float64x2_t *)v491;
                      v486.f64[0] = *(float64_t *)(v491 + 16);
                      v487.f64[0] = v656[1].f64[1];
                      _Q6 = *(float64x2_t *)((char *)v656 + 8);
                      v489.f64[0] = *(float64_t *)(v469 + 160 * v472 + 120);
                      v494 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v492, v490->f64[0]), _Q1, *v490, 1), v484, v489.f64[0]);
                      _Q0 = vmulq_f64(*(float64x2_t *)((char *)v656 + 8), *v490);
                      _Q1.f64[0] = *(float64_t *)(v469 + 160 * v472 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v656[1].f64[1] * v489.f64[0];
                      v482 = vsubq_f64(v486, _Q0);
                      v483 = vsubq_f64(*(float64x2_t *)v491, v494);
                      *(float64x2_t *)v491 = v483;
                      *(float64_t *)(v491 + 16) = v482.f64[0];
                    }
                    if (v478)
                    {
                      v496 = (const double *)&v657;
                      *(float64x2x3_t *)(&v484 - 2) = vld3q_f64(v496);
                      v497 = **(_QWORD **)&v601.f64[1]
                           + 8 * (*(_DWORD *)(*(_QWORD *)&v601.f64[1] + 28) + 3 * v481);
                      v485 = *(float64x2_t *)v497;
                      v486.f64[0] = *(float64_t *)(v497 + 16);
                      v487.f64[0] = v661[0].f64[0];
                      _Q6 = v660;
                      v489.f64[0] = *(float64_t *)(v469 + 160 * v472 + 120);
                      v500 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v498, v490->f64[0]), _Q1, *v490, 1), v484, v489.f64[0]);
                      _Q0 = vmulq_f64(v660, *v490);
                      _Q1.f64[0] = *(float64_t *)(v469 + 160 * v472 + 112);
                      __asm { FMLA            D0, D1, V6.D[1] }
                      _Q0.f64[0] = _Q0.f64[0] + v661[0].f64[0] * v489.f64[0];
                      v482 = vsubq_f64(v486, _Q0);
                      v483 = vsubq_f64(*(float64x2_t *)v497, v500);
                      *(float64x2_t *)v497 = v483;
                      *(float64_t *)(v497 + 16) = v482.f64[0];
                    }
                    v467 = sub_239C23F18((uint64_t *)&v662, (uint64_t)&v668, (uint64_t)&memptr[1], v482, v483.f64[0], v484, v485.f64[0], v486, v487, _Q6, v489);
                  }
                }
              }
            }
            ++v470;
            v471 -= 8;
          }
          while (v471);
        }
        v466 = v637 + 56;
      }
      while (v637 + 56 != v631);
    }
    v502 = *(_QWORD *)(v604 + 480);
    v662.f64[0] = *(float64_t *)(v604 + 472);
    *(_QWORD *)&v662.f64[1] = v608;
    v663 = v602;
    v664 = v502;
    v665 = 0;
    v666 = 2;
    memset(v667.__m_.__opaque, 0, sizeof(v667.__m_.__opaque));
    v667.__m_.__sig = 850045863;
    v503 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 56);
    v504 = *(_QWORD *)(*(_QWORD *)&v662.f64[0] + 64);
    if (v503 != v504)
    {
      while (1)
      {
        v506 = *(_QWORD *)(v503 + 48);
        v505 = *(_QWORD *)(v503 + 56);
        v507 = ((*(unsigned __int8 *)(v505 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v506 + 52)) >> 7 ? 2 : 1;
        if ((v507 & v666) != 0)
        {
          v508 = *(unsigned __int8 *)(v506 + 4);
          if (!*(_BYTE *)(v506 + 4) || *(_DWORD *)(v506 + 48) != -1)
          {
            v509 = *(unsigned __int8 *)(v505 + 4);
            if (!*(_BYTE *)(v505 + 4) || *(_DWORD *)(v505 + 48) != -1)
              break;
          }
        }
LABEL_432:
        v503 += 120;
        if (v503 == v504)
          goto LABEL_495;
      }
      if (*(_BYTE *)(v506 + 4))
      {
        v510 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v506 + 48));
        if (*(_BYTE *)(v505 + 4))
        {
LABEL_443:
          v511 = *(_DWORD *)(**(_QWORD **)&v662.f64[1] + 4 * *(unsigned int *)(v505 + 48));
          goto LABEL_446;
        }
      }
      else
      {
        v510 = -1;
        if (*(_BYTE *)(v505 + 4))
          goto LABEL_443;
      }
      v511 = -1;
LABEL_446:
      sub_239C46E1C(v503 + 8, v602, (uint64_t)&v668);
      if (!v509)
        goto LABEL_469;
      if (!v508 || v510 < v511)
      {
LABEL_459:
        v532 = *(unint64_t **)(v502 + 32);
        v533 = v532[11] + 24 * v511;
        v535 = *(char **)v533;
        v534 = *(char **)(v533 + 8);
        if (*(char **)v533 != v534)
        {
          while (*(_DWORD *)v535 < v511)
          {
            v535 += 16;
            if (v535 == v534)
              goto LABEL_467;
          }
        }
        if (v535 != v534)
        {
          if (*(_DWORD *)v535 == v511)
          {
            v536 = v532[2] + 8 * *((_QWORD *)v535 + 1);
LABEL_468:
            v513.f64[0] = *(float64_t *)(v536 + 16);
            v515.f64[0] = *(float64_t *)(v536 + 40);
            v512.f64[0] = *(float64_t *)(v536 + 64);
            *(_QWORD *)&v537.f64[1] = v674.i64[1];
            _V19.D[1] = v678.f64[1];
            _Q20 = (float64x2_t)vzip1q_s64(v674, v676);
            _Q22 = (float64x2_t)vzip2q_s64(v674, v676);
            v541.f64[0] = v675;
            v541.f64[1] = v677;
            v542 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v674.i64), _Q22, (float64x2_t)v674, 1), v541, v675);
            _D6 = *(double *)&v674.i64[1];
            __asm { FMLA            D24, D6, V19.D[1] }
            v537.f64[0] = _D24 + v679 * v675;
            v545 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v676.i64), _Q22, (float64x2_t)v676, 1), v541, v677);
            _D17 = *(double *)&v676.i64[1];
            __asm { FMLA            D24, D17, V19.D[1] }
            v517.f64[0] = _D24 + v679 * v677;
            v548 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v678.f64[0]), _Q22, v678, 1), v541, v679);
            _Q22.f64[0] = v678.f64[1];
            __asm { FMLA            D20, D22, V19.D[1] }
            _Q18.f64[0] = _Q20.f64[0] + v679 * v679;
            v513 = vaddq_f64(v513, v537);
            v516 = vaddq_f64(*(float64x2_t *)(v536 + 24), v545);
            v515 = vaddq_f64(v515, v517);
            v549 = vaddq_f64(*(float64x2_t *)(v536 + 48), v548);
            *(float64x2_t *)v536 = vaddq_f64(*(float64x2_t *)v536, v542);
            *(float64_t *)(v536 + 16) = v513.f64[0];
            *(float64x2_t *)(v536 + 24) = v516;
            *(float64_t *)(v536 + 40) = v515.f64[0];
            v512 = vaddq_f64(v512, _Q18);
            *(float64x2_t *)(v536 + 48) = v549;
            *(float64_t *)(v536 + 64) = v512.f64[0];
LABEL_469:
            if (!v508)
            {
              v555 = (float64x2_t *)(v503 + 64);
              goto LABEL_493;
            }
            v550 = *(unint64_t **)(v502 + 32);
            v551 = v550[11] + 24 * v510;
            v553 = *(char **)v551;
            v552 = *(char **)(v551 + 8);
            if (*(char **)v551 != v552)
            {
              while (*(_DWORD *)v553 < v510)
              {
                v553 += 16;
                if (v553 == v552)
                  goto LABEL_479;
              }
            }
            if (v553 != v552)
            {
              if (*(_DWORD *)v553 == v510)
              {
                v554 = v550[2] + 8 * *((_QWORD *)v553 + 1);
LABEL_480:
                v513.f64[0] = *(float64_t *)(v554 + 16);
                v515.f64[0] = *(float64_t *)(v554 + 40);
                v512.f64[0] = *(float64_t *)(v554 + 64);
                *(_QWORD *)&v556.f64[1] = v668.i64[1];
                _Q22 = v672;
                _Q20 = (float64x2_t)vzip1q_s64(v668, v670);
                v559 = (float64x2_t)vzip2q_s64(v668, v670);
                v560.f64[0] = v669;
                v560.f64[1] = v671;
                v561 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v668.i64), v559, (float64x2_t)v668, 1), v560, v669);
                _D6 = *(double *)&v668.i64[1];
                __asm { FMLA            D19, D6, V22.D[1] }
                v556.f64[0] = _D19 + v673 * v669;
                v564 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, *(double *)v670.i64), v559, (float64x2_t)v670, 1), v560, v671);
                _D17 = *(double *)&v670.i64[1];
                __asm { FMLA            D19, D17, V22.D[1] }
                v517.f64[0] = _D19 + v673 * v671;
                v632 = v559;
                v638 = _Q20;
                v626 = v560;
                v567 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q20, v672.f64[0]), v559, v672, 1), v560, v673);
                _Q19 = vmulq_f64(_Q22, _Q22);
                _Q20.f64[0] = v672.f64[1];
                v642 = (int8x16_t)v672;
                v645 = v673;
                __asm { FMLA            D19, D20, V22.D[1] }
                _Q19.f64[0] = _Q19.f64[0] + v645 * v645;
                v569 = vaddq_f64(v513, v556);
                v570 = vaddq_f64(*(float64x2_t *)(v554 + 24), v564);
                v571 = vaddq_f64(v515, v517);
                v572 = vaddq_f64(*(float64x2_t *)(v554 + 48), v567);
                *(float64x2_t *)v554 = vaddq_f64(*(float64x2_t *)v554, v561);
                *(float64_t *)(v554 + 16) = v569.f64[0];
                *(float64x2_t *)(v554 + 24) = v570;
                *(float64_t *)(v554 + 40) = v571.f64[0];
                *(float64x2_t *)(v554 + 48) = v572;
                *(_QWORD *)(v554 + 64) = *(_OWORD *)&vaddq_f64(v512, _Q19);
                if (!v509 || v511 < v510)
                  goto LABEL_492;
                v573 = *(unint64_t **)(v502 + 32);
                v574 = v573[11] + 24 * v511;
                v576 = *(char **)v574;
                v575 = *(char **)(v574 + 8);
                if (*(char **)v574 != v575)
                {
                  while (*(_DWORD *)v576 < v510)
                  {
                    v576 += 16;
                    if (v576 == v575)
                      goto LABEL_490;
                  }
                }
                if (v576 != v575)
                {
                  if (*(_DWORD *)v576 == v510)
                  {
                    v577 = v573[2] + 8 * *((_QWORD *)v576 + 1);
LABEL_491:
                    _Q0 = (float64x2_t)vextq_s8(v642, v642, 8uLL);
                    v569.f64[0] = *(float64_t *)(v577 + 16);
                    v571.f64[0] = *(float64_t *)(v577 + 40);
                    v572.f64[0] = *(float64_t *)(v577 + 64);
                    v579 = *(float64x2_t *)(v577 + 48);
                    *(_QWORD *)&_Q7.f64[1] = v674.i64[1];
                    _V18.D[1] = *(double *)&v676.i64[1];
                    _V20.D[1] = v678.f64[1];
                    __asm { FMLA            D22, D0, V7.D[1] }
                    _Q7.f64[0] = _D22 + v645 * v675;
                    __asm { FMLA            D22, D0, V18.D[1] }
                    v567.f64[0] = _D22 + v645 * v677;
                    v585 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, v678.f64[0]), v632, v678, 1), v626, v679);
                    __asm { FMLA            D22, D0, V20.D[1] }
                    _Q0.f64[0] = _D22 + v645 * v679;
                    v587 = vaddq_f64(*(float64x2_t *)(v577 + 24), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, *(double *)v676.i64), v632, (float64x2_t)v676, 1), v626, v677));
                    *(float64x2_t *)v577 = vaddq_f64(*(float64x2_t *)v577, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v638, *(double *)v674.i64), v632, (float64x2_t)v674, 1), v626, v675));
                    *(_QWORD *)(v577 + 16) = *(_OWORD *)&vaddq_f64(v569, _Q7);
                    *(float64x2_t *)(v577 + 24) = v587;
                    *(_QWORD *)(v577 + 40) = *(_OWORD *)&vaddq_f64(v571, v567);
                    v569 = vaddq_f64(v579, v585);
                    *(float64x2_t *)(v577 + 48) = v569;
                    *(_QWORD *)(v577 + 64) = *(_OWORD *)&vaddq_f64(v572, _Q0);
LABEL_492:
                    v555 = (float64x2_t *)(v503 + 64);
                    v588 = *(_QWORD *)v502 + 8 * (*(_DWORD *)(v502 + 28) + 3 * v510);
                    v569.f64[0] = *(float64_t *)(v588 + 16);
                    v516.f64[0] = v669;
                    _V6.D[1] = v672.f64[1];
                    v590 = *(double *)(v503 + 80);
                    v516.f64[1] = v671;
                    _Q2 = vmulq_f64(v672, *(float64x2_t *)(v503 + 64));
                    _D3 = *(_QWORD *)(v503 + 72);
                    __asm { FMLA            D2, D3, V6.D[1] }
                    _Q2.f64[0] = _Q2.f64[0] + v673 * v590;
                    *(float64x2_t *)v588 = vsubq_f64(*(float64x2_t *)v588, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v668, v670), *(double *)(v503 + 64)), (float64x2_t)vzip2q_s64(v668, v670), *(float64x2_t *)(v503 + 64), 1), v516, v590));
                    *(_QWORD *)(v588 + 16) = *(_OWORD *)&vsubq_f64(v569, _Q2);
LABEL_493:
                    if (v509)
                    {
                      v690 = vld3q_f64((const double *)v674.i64);
                      v593 = *(_QWORD *)v502 + 8 * (*(_DWORD *)(v502 + 28) + 3 * v511);
                      v516.f64[0] = *(float64_t *)(v593 + 16);
                      _V6.D[1] = v678.f64[1];
                      v595 = v555[1].f64[0];
                      v596 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v690.val[0], v555->f64[0]), v690.val[1], *v555, 1), v690.val[2], v595);
                      v690.val[0] = vmulq_f64(v678, *v555);
                      v690.val[1].f64[0] = v555->f64[1];
                      __asm { FMLA            D0, D1, V6.D[1] }
                      v690.val[0].f64[0] = v690.val[0].f64[0] + v679 * v595;
                      *(float64x2_t *)v593 = vsubq_f64(*(float64x2_t *)v593, v596);
                      *(_QWORD *)(v593 + 16) = *(_OWORD *)&vsubq_f64(v516, v690.val[0]);
                    }
                    goto LABEL_432;
                  }
                  v575 = v576;
                }
LABEL_490:
                v577 = sub_239C23138(v573, (char **)v574, v510, v575);
                goto LABEL_491;
              }
              v552 = v553;
            }
LABEL_479:
            v554 = sub_239C23138(v550, (char **)v551, v510, v552);
            goto LABEL_480;
          }
          v534 = v535;
        }
LABEL_467:
        v536 = sub_239C23138(v532, (char **)v533, v511, v534);
        goto LABEL_468;
      }
      v520 = *(unint64_t **)(v502 + 32);
      v521 = v520[11] + 24 * v510;
      v523 = *(char **)v521;
      v522 = *(char **)(v521 + 8);
      if (*(char **)v521 != v522)
      {
        while (*(_DWORD *)v523 < v511)
        {
          v523 += 16;
          if (v523 == v522)
            goto LABEL_457;
        }
      }
      if (v523 != v522)
      {
        if (*(_DWORD *)v523 == v511)
        {
          v524 = v520[2] + 8 * *((_QWORD *)v523 + 1);
LABEL_458:
          v512.f64[0] = *(float64_t *)(v524 + 16);
          v514.f64[0] = *(float64_t *)(v524 + 40);
          v516.f64[0] = *(float64_t *)(v524 + 64);
          v692 = vld3q_f64((const double *)v674.i64);
          v517 = *(float64x2_t *)(v524 + 48);
          _V17.D[1] = v678.f64[1];
          *(_QWORD *)&_Q18.f64[1] = v668.i64[1];
          v526 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692.val[0], *(double *)v668.i64), v692.val[1], (float64x2_t)v668, 1), v692.val[2], v669);
          *(_QWORD *)&_Q18.f64[0] = v668.i64[1];
          __asm { FMLA            D26, D18, V17.D[1] }
          _Q18.f64[0] = _D26 + v679 * v669;
          v528 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692.val[0], *(double *)v670.i64), v692.val[1], (float64x2_t)v670, 1), v692.val[2], v671);
          _D21 = *(double *)&v670.i64[1];
          __asm { FMLA            D26, D21, V17.D[1] }
          v519.f64[0] = _D26 + v679 * v671;
          v531 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v692.val[0], v672.f64[0]), v692.val[1], v672, 1), v692.val[2], v673);
          v692.val[0] = vmulq_f64(v678, v672);
          v692.val[1].f64[0] = v672.f64[1];
          __asm { FMLA            D5, D6, V17.D[1] }
          v692.val[0].f64[0] = v692.val[0].f64[0] + v679 * v673;
          v513 = vaddq_f64(*(float64x2_t *)v524, v526);
          v515 = vaddq_f64(*(float64x2_t *)(v524 + 24), v528);
          *(float64x2_t *)v524 = v513;
          *(_QWORD *)(v524 + 16) = *(_OWORD *)&vaddq_f64(v512, _Q18);
          v512 = vaddq_f64(v517, v531);
          *(float64x2_t *)(v524 + 24) = v515;
          *(_QWORD *)(v524 + 40) = *(_OWORD *)&vaddq_f64(v514, v519);
          *(float64x2_t *)(v524 + 48) = v512;
          *(_QWORD *)(v524 + 64) = *(_OWORD *)&vaddq_f64(v516, v692.val[0]);
          goto LABEL_459;
        }
        v522 = v523;
      }
LABEL_457:
      v524 = sub_239C23138(v520, (char **)v521, v511, v522);
      goto LABEL_458;
    }
    goto LABEL_495;
  }
LABEL_496:
  if (__p)
  {
    v652 = __p;
    operator delete(__p);
  }
  v11 = 0;
  *(_WORD *)(a1 + 361) = 1;
LABEL_499:
  kdebug_trace();
  return v11;
}

void sub_239C4419C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::mutex *a28,std::mutex *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  void *v49;

  free(a41);
  free(a44);
  free(v49);
  sub_239C1F794();
  sub_239C22568();
  _Unwind_Resume(a1);
}

double sub_239C44260(uint64_t a1)
{
  unint64_t v1;
  char *v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  _QWORD *v7;
  __int128 v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  float64x2_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  _DWORD *v31;
  int v32;
  int v33;
  double *v34;
  double v35;
  double *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  std::bad_alloc *exception;
  std::bad_alloc *v51;
  void **v52;
  void *v53[2];
  uint64_t v54;
  void *v55[2];
  unsigned int v56;
  char v57;
  void ***v58;
  void **v59;
  uint64_t v60;
  double v61[3];
  void *memptr[5];

  memptr[4] = *(void **)MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776);
  if ((v1 & 0x3FFFFFFFCLL) != 0)
  {
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (8 * ((v1 >> 1) + (v1 >> 2)) + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v3 = (char *)memptr[0];
    if (!memptr[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v51 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v51, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v4 = *(_DWORD **)(a1 + 776);
    v5 = *(_DWORD **)(a1 + 784);
    if (v4 == v5)
    {
      v13 = *(_QWORD *)(a1 + 776);
    }
    else
    {
      v6 = 0;
      v7 = *(_QWORD **)(a1 + 96);
      do
      {
        if (*((_DWORD *)v7 + 8) == *v4)
        {
          v10 = v7;
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v7[1];
            if (v11)
            {
              do
              {
                v10 = v11;
                v11 = (_QWORD *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                v10 = (_QWORD *)v7[2];
                v12 = *v10 == (_QWORD)v7;
                v7 = v10;
              }
              while (!v12);
            }
            v7 = v10;
          }
          while (*((_DWORD *)v10 + 8) != *v4);
        }
        v8 = *(_OWORD *)(v10 + 7);
        v9 = &v3[8 * v6];
        *((_QWORD *)v9 + 2) = v10[9];
        *(_OWORD *)v9 = v8;
        v6 += 3;
        ++v4;
        v7 = v10;
      }
      while (v4 != v5);
      v13 = *(_QWORD *)(a1 + 784);
      v4 = *(_DWORD **)(a1 + 776);
    }
    if (((v13 - (_QWORD)v4) & 0x3FFFFFFFCLL) == 0)
    {
      v14 = 0.0;
LABEL_48:
      free(v3);
      return v14;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 32))(a1 + 704);
    v55[0] = 0;
    v55[1] = 0;
    v56 = *(_DWORD *)(a1 + 728);
    sub_23945215C((uint64_t)v55, v56);
    if (v56)
      bzero(v55[0], 8 * v56);
    v18 = *(_DWORD **)(a1 + 776);
    v19 = *(_DWORD **)(a1 + 784);
    if (v18 != v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(a1 + 712);
      v22 = *(_QWORD **)(v15 + 8);
      do
      {
        if (*((_DWORD *)v22 + 8) == *v18)
        {
          v26 = v22;
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v22[1];
            if (v27)
            {
              do
              {
                v26 = v27;
                v27 = (_QWORD *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v26 = (_QWORD *)v22[2];
                v12 = *v26 == (_QWORD)v22;
                v22 = v26;
              }
              while (!v12);
            }
            v22 = v26;
          }
          while (*((_DWORD *)v26 + 8) != *v18);
        }
        v23 = 8 * v20;
        v16.f64[0] = *(float64_t *)(v21 + v23 + 16);
        v17.f64[0] = (float64_t)v26[9];
        v16 = vsubq_f64(v17, v16);
        v24 = vsubq_f64(*(float64x2_t *)(v26 + 7), *(float64x2_t *)(v21 + v23));
        v25 = (char *)v55[0] + v23;
        *(float64x2_t *)v25 = v24;
        *((_QWORD *)v25 + 2) = *(_QWORD *)&v16.f64[0];
        v20 += 3;
        ++v18;
        v22 = v26;
      }
      while (v18 != v19);
    }
    v53[1] = 0;
    v54 = 0;
    v53[0] = 0;
    v28 = *(_DWORD **)(a1 + 768);
    v29 = v28[2];
    v30 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 48))(v28);
    v31 = *(_DWORD **)(a1 + 768);
    v32 = v31[3];
    v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 56))(v31);
    v54 = (v30 * v29);
    HIDWORD(v54) = v33 * v32;
    sub_23945215C((uint64_t)v53, (v33 * v32) * (unint64_t)(v30 * v29));
    if (HIDWORD(v54) * (_DWORD)v54)
      bzero(v53[0], 8 * (HIDWORD(v54) * v54));
    (*(void (**)(_QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 768) + 64))(*(_QWORD *)(a1 + 768), v53, 0);
    sub_239C1BE20((uint64_t *)v53);
    if (v56)
    {
      v34 = *(double **)(a1 + 736);
      v35 = *(double *)v55[0] * *v34;
      if (v56 != 1)
      {
        v36 = (double *)((char *)v55[0] + 8);
        v37 = (v56 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
        if (v37 >= 3)
        {
          v38 = v37 + 1;
          v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          v36 = (double *)((char *)v36 + v39);
          v40 = (float64x2_t *)(v34 + 3);
          v41 = (float64x2_t *)((char *)v55[0] + 24);
          v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v43 = vmulq_f64(v41[-1], v40[-1]);
            v44 = vmulq_f64(*v41, *v40);
            v35 = v35 + v43.f64[0] + v43.f64[1] + v44.f64[0] + v44.f64[1];
            v40 += 2;
            v41 += 2;
            v42 -= 4;
          }
          while (v42);
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_47;
          v34 = (double *)((char *)v34 + v39);
        }
        v45 = v34 + 1;
        do
        {
          v46 = *v36++;
          v47 = v46;
          v48 = *v45++;
          v35 = v35 + v47 * v48;
        }
        while (v36 != (double *)((char *)v55[0] + 8 * v56));
      }
    }
    else
    {
      v35 = 0.0;
    }
LABEL_47:
    v52 = v55;
    v58 = &v52;
    v59 = v53;
    v60 = 0x3FE0000000000000;
    memptr[1] = &v57;
    memptr[2] = v55;
    memptr[3] = (void *)0x3FF0000000000000;
    sub_239C1C794(v61, (double *)memptr);
    v14 = v61[0] - v35;
    free(v53[0]);
    free(v55[0]);
    goto LABEL_48;
  }
  return 0.0;
}

void sub_239C446A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  free(a10);
  free(a13);
  free(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_239C446DC(uint64_t result)
{
  _QWORD *v1;
  double v2;
  _QWORD *v10;
  _QWORD *v11;

  v1 = *(_QWORD **)(result + 96);
  v2 = 0.0;
  if (v1 != (_QWORD *)(result + 104))
  {
    do
    {
      if ((*((_BYTE *)v1 + 92) & 2) == 0 && *((_BYTE *)v1 + 44))
      {
        _Q2 = *(_OWORD *)(v1 + 7);
        _D4 = v1[8];
        __asm { FMLA            D3, D4, V2.D[1] }
        v2 = v2 + _D3 + *((double *)v1 + 9) * *((double *)v1 + 9);
      }
      v10 = (_QWORD *)v1[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v1[2];
          _ZF = *v11 == (_QWORD)v1;
          v1 = v11;
        }
        while (!_ZF);
      }
      v1 = v11;
    }
    while (v11 != (_QWORD *)(result + 104));
  }
  return result;
}

uint64_t sub_239C4475C(uint64_t a1, _QWORD *a2)
{
  double *v4;
  uint64_t *i;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t result;

  kdebug_trace();
  v4 = *(double **)(a1 + 576);
  for (i = *(uint64_t **)(a1 + 584); v4 != (double *)i; v4 += 7)
  {
    v8 = *v4;
    if (*(_DWORD *)(*(_QWORD *)v4 + 32) != -1)
    {
      v9 = v4[2];
      v10 = *((_QWORD *)v4 + 5);
      if (v10)
      {
        v11 = *((_QWORD *)v4 + 6);
        v12 = *((_QWORD *)v4 + 3);
        v13 = *(_QWORD *)(v11 + 56);
        v14 = (unsigned int *)(v13 + 16 * (v10 + v12));
        v15 = (unsigned int *)(v13 + 16 * v12);
        v16 = *(_QWORD *)(v11 + 24);
        do
        {
          v17 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 680) + 4 * *v15);
          v18 = (double *)(v16 + 8 * *((_QWORD *)v15 + 1));
          _Q2 = *(_OWORD *)v18;
          _D4 = *(_QWORD *)(v17 + 8);
          __asm { FMLA            D5, D4, V2.D[1] }
          v9 = v9 - (_D5 + v18[2] * *(double *)(v17 + 16));
          v15 += 4;
        }
        while (v15 != v14);
      }
      v6 = v9 * v4[1];
      *(_QWORD *)(*(_QWORD *)&v8 + 48) = *(_QWORD *)(*(_QWORD *)&v8 + 16);
      *(_BYTE *)(*(_QWORD *)&v8 + 56) = *(_BYTE *)(*(_QWORD *)&v8 + 24);
      v7 = *v4;
      *(double *)(*(_QWORD *)&v7 + 16) = v6 + *(double *)(*(_QWORD *)v4 + 16);
      *(_BYTE *)(*(_QWORD *)&v7 + 24) = 1;
    }
  }
  kdebug_trace();
  kdebug_trace();
  v28 = *(_QWORD *)(a1 + 472);
  v29 = *(_QWORD **)(v28 + 8);
  v30 = (_QWORD *)(v28 + 16);
  if (v29 != v30)
  {
    do
    {
      v31 = *((unsigned int *)v29 + 22);
      if ((_DWORD)v31 != -1)
      {
        v29[15] = v29[9];
        *(_OWORD *)(v29 + 13) = *(_OWORD *)(v29 + 7);
        *((_BYTE *)v29 + 128) = *((_BYTE *)v29 + 80);
        v32 = *a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 680) + 4 * v31);
        v26.f64[0] = *(float64_t *)(v32 + 16);
        v27.f64[0] = (float64_t)v29[9];
        v26 = vaddq_f64(v26, v27);
        *(float64x2_t *)(v29 + 7) = vaddq_f64(*(float64x2_t *)v32, *(float64x2_t *)(v29 + 7));
        v29[9] = *(_QWORD *)&v26.f64[0];
        *((_BYTE *)v29 + 80) = 1;
      }
      v33 = (_QWORD *)v29[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v29[2];
          _ZF = *v34 == (_QWORD)v29;
          v29 = v34;
        }
        while (!_ZF);
      }
      v29 = v34;
    }
    while (v34 != v30);
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 362) = *(_BYTE *)(a1 + 361);
  *(_WORD *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 363) = 0;
  return result;
}

uint64_t sub_239C449A4(uint64_t result, double a2)
{
  if (*(double *)(result + 384) != a2)
    *(_BYTE *)(result + 361) = 0;
  *(double *)(result + 384) = a2;
  return result;
}

uint64_t sub_239C449C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 800) = a2;
  return result;
}

uint64_t sub_239C449CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 800);
}

BOOL sub_239C449D4(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_239C449EC(uint64_t a1)
{
  return a1 + 736;
}

uint64_t sub_239C449F4(uint64_t a1)
{
  return a1 + 736;
}

__n128 sub_239C449FC(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 416);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 424);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 428);
    v10 = 4 * v7;
    do
    {
      v11 = (__n128 *)(*(_QWORD *)(a1 + 400) + 8 * v9);
      v12 = (__n128 *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 680) + v8));
      result = *v11;
      v12[1].n128_u64[0] = v11[1].n128_u64[0];
      *v12 = result;
      v8 += 4;
      v9 += 3;
    }
    while (v10 != v8);
  }
  return result;
}

__n128 sub_239C44A84(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(unsigned int *)(a1 + 872);
  if (v4 != (_DWORD)v5)
  {
    *(_DWORD *)(a2 + 16) = v5;
    sub_23945215C(a2, v5);
  }
  v7 = *(unsigned int *)(a1 + 880);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 884);
    v10 = 4 * v7;
    do
    {
      v11 = (__n128 *)(*(_QWORD *)(a1 + 856) + 8 * v9);
      v12 = (__n128 *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 680) + v8));
      result = *v11;
      v12[1].n128_u64[0] = v11[1].n128_u64[0];
      *v12 = result;
      v8 += 4;
      v9 += 3;
    }
    while (v10 != v8);
  }
  return result;
}

uint64_t sub_239C44B0C(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int *v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t i;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  unint64_t v44;
  BOOL v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  char **v51;
  char **v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  unsigned int v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  BOOL v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  int v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t j;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t k;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  int v132;
  int v133;
  int v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  int v138;
  int v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  char *v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  void *v152;
  unint64_t v153;
  char *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  unint64_t v159;
  _QWORD *v160;
  void **v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  __int128 v171;
  char *v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  char *v176;
  void *v177;
  char *v178;
  int64_t v179;
  int64_t v180;
  unint64_t v181;
  int64_t v182;
  unint64_t v183;
  _BYTE *v184;
  _DWORD *v185;
  unint64_t v186;
  uint64_t v187;
  _OWORD *v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  void **v196;
  uint64_t v197;
  void *v198;
  _BYTE *v199;
  _BYTE *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  char *v205;
  __int128 v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  char *v219;
  __int128 v220;
  char *v221;
  void *v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int64x2_t v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  __int128 v252;
  __int128 v253;
  std::__shared_weak_count *v254;
  unint64_t *p_shared_owners;
  unint64_t v256;
  int64x2_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  __int128 v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  void *v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t *v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  __int128 *v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t m;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  _QWORD *v313;
  char **v314;
  int v315;
  uint64_t v316;
  void *v317[2];
  void *v318[2];
  int v319;
  void *v320[2];
  void *v321[2];
  int v322;
  void *v323;
  void *v324;
  uint64_t v325;
  void *v326[3];
  void *v327[3];
  void *v328[3];
  void *v329[3];
  void *v330[2];
  int v331;
  void *v332;
  _DWORD *v333;
  void *v334;
  void **v335;
  void *v336;
  uint64_t v337;
  void *__p;
  void **v339;
  void **v340;
  void **v341;
  __int128 v342;
  __int128 v343;
  int v344;
  __int128 v345;
  __int128 v346;
  int v347;
  uint64_t v348;

  v348 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 208))
  {
    v2 = *(_QWORD **)(a1 + 96);
    if (v2 != (_QWORD *)(a1 + 104))
    {
      v3 = 0;
      while (1)
      {
        if ((*((_BYTE *)v2 + 92) & 6) != 0)
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_11;
        }
        else
        {
          if (*((_BYTE *)v2 + 44))
            v3 += 3;
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_11:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v78 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v78);
LABEL_4:
        v2 = v5;
        if (v5 == (_QWORD *)(a1 + 104))
          goto LABEL_30;
      }
    }
    v3 = 0;
LABEL_30:
    v11 = *(_QWORD **)(a1 + 120);
    if (v11 == (_QWORD *)(a1 + 128))
    {
LABEL_31:
      v12 = 1;
LABEL_87:
      v44 = *(_QWORD *)(a1 + 200);
      goto LABEL_88;
    }
    while (1)
    {
      if ((*((_BYTE *)v11 + 76) & 6) != 0)
      {
        v13 = (_QWORD *)v11[1];
        if (v13)
          goto LABEL_37;
      }
      else
      {
        v3 += *((unsigned __int8 *)v11 + 44);
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
LABEL_37:
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
          goto LABEL_32;
        }
      }
      do
      {
        v14 = (_QWORD *)v11[2];
        v78 = *v14 == (_QWORD)v11;
        v11 = v14;
      }
      while (!v78);
LABEL_32:
      v11 = v14;
      if (v14 == (_QWORD *)(a1 + 128))
        goto LABEL_31;
    }
  }
  v342 = 0u;
  v343 = 0u;
  v345 = 0u;
  v346 = 0u;
  v344 = 1065353216;
  v347 = 1065353216;
  *(_OWORD *)v317 = 0u;
  *(_OWORD *)v318 = 0u;
  v319 = 1065353216;
  *(_OWORD *)v320 = 0u;
  *(_OWORD *)v321 = 0u;
  v322 = 1065353216;
  v6 = *(unsigned int **)(a1 + 96);
  v7 = (unsigned int *)(a1 + 104);
  LODWORD(v330[0]) = 0;
  if (v6 == (unsigned int *)(a1 + 104))
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if ((v6[23] & 6) != 0)
      {
        sub_239456168((uint64_t)&v342, v6 + 8, v6 + 8);
        v8 = 1;
      }
      if (*((_BYTE *)v6 + 44))
        ++LODWORD(v330[0]);
      v9 = (unsigned int *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(unsigned int **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (unsigned int *)*((_QWORD *)v6 + 2);
          v78 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v78);
      }
      v6 = v10;
    }
    while (v10 != v7);
  }
  HIDWORD(v330[0]) = 0;
  v15 = *(unsigned int **)(a1 + 120);
  if (v15 != (unsigned int *)(a1 + 128))
  {
    do
    {
      if ((v15[19] & 6) != 0)
      {
        sub_239456168((uint64_t)&v345, v15 + 8, v15 + 8);
        v8 = 1;
      }
      if (*((_BYTE *)v15 + 44))
        ++HIDWORD(v330[0]);
      v18 = (unsigned int *)*((_QWORD *)v15 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(unsigned int **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (unsigned int *)*((_QWORD *)v15 + 2);
          v78 = *(_QWORD *)v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v78);
      }
      v15 = v19;
    }
    while (v19 != (unsigned int *)(a1 + 128));
  }
  if (!v8)
  {
    v3 = HIDWORD(v330[0]) + 3 * LODWORD(v330[0]);
    v32 = v321[0];
    if (!v321[0])
      goto LABEL_72;
    goto LABEL_71;
  }
  v16 = *(_QWORD *)(a1 + 144);
  for (i = *(_QWORD *)(a1 + 152); v16 != i; v16 += 120)
  {
    v20 = *(_QWORD *)(v16 + 48);
    if ((*(_BYTE *)(v20 + 52) & 6) != 0 || (*(_BYTE *)(*(_QWORD *)(v16 + 56) + 52) & 6) != 0)
    {
      LODWORD(v329[0]) = *(_DWORD *)v20;
      v332 = v329;
      v21 = sub_2395EC77C((uint64_t)v317, (unsigned int *)v329, (uint64_t)&unk_239EC6E98, (_DWORD **)&v332);
      ++*((_DWORD *)v21 + 5);
      LODWORD(v329[0]) = **(_DWORD **)(v16 + 56);
      v332 = v329;
      v22 = sub_2395EC77C((uint64_t)v317, (unsigned int *)v329, (uint64_t)&unk_239EC6E98, (_DWORD **)&v332);
      ++*((_DWORD *)v22 + 5);
    }
  }
  sub_239C29188(*(uint64_t **)(a1 + 168), *(uint64_t **)(a1 + 176), (uint64_t)v317);
  sub_239559050((uint64_t)&v332, (uint64_t)&v342);
  sub_239559050((uint64_t)&v336, (uint64_t)&v345);
  v339 = v317;
  v340 = v329;
  v341 = v330;
  sub_239C2E488((uint64_t)&v332, a1 + 96);
  v24 = (int)v329[0];
  v23 = HIDWORD(v329[0]);
  v25 = __p;
  if (__p)
  {
    do
    {
      v26 = (_QWORD *)*v25;
      operator delete(v25);
      v25 = v26;
    }
    while (v26);
  }
  v27 = v336;
  v336 = 0;
  if (v27)
    operator delete(v27);
  v28 = 3 * v24;
  v29 = v334;
  if (v334)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  v3 = v23 + v28;
  v31 = v332;
  v332 = 0;
  if (v31)
    operator delete(v31);
  v32 = v321[0];
  if (v321[0])
  {
    do
    {
LABEL_71:
      v33 = (_QWORD *)*v32;
      operator delete(v32);
      v32 = v33;
    }
    while (v33);
  }
LABEL_72:
  v34 = v320[0];
  v320[0] = 0;
  if (v34)
    operator delete(v34);
  v35 = v318[0];
  if (v318[0])
  {
    do
    {
      v36 = (_QWORD *)*v35;
      operator delete(v35);
      v35 = v36;
    }
    while (v36);
  }
  v37 = v317[0];
  v317[0] = 0;
  if (v37)
    operator delete(v37);
  v38 = (_QWORD *)v346;
  if ((_QWORD)v346)
  {
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
  }
  v40 = (void *)v345;
  *(_QWORD *)&v345 = 0;
  if (v40)
    operator delete(v40);
  v41 = (_QWORD *)v343;
  if ((_QWORD)v343)
  {
    do
    {
      v42 = (_QWORD *)*v41;
      operator delete(v41);
      v41 = v42;
    }
    while (v42);
  }
  v43 = (void *)v342;
  *(_QWORD *)&v342 = 0;
  if (v43)
    operator delete(v43);
  v12 = *(_BYTE *)(a1 + 208) != 0;
  if (*(_BYTE *)(a1 + 208))
    goto LABEL_87;
  v64 = *(_QWORD **)(a1 + 96);
  if (v64 == (_QWORD *)(a1 + 104))
  {
LABEL_124:
    v65 = *(_QWORD **)(a1 + 120);
    if (v65 == (_QWORD *)(a1 + 128))
      goto LABEL_87;
    while ((*((_BYTE *)v65 + 76) & 6) == 0)
    {
      v68 = (_QWORD *)v65[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v65[2];
          v78 = *v69 == (_QWORD)v65;
          v65 = v69;
        }
        while (!v78);
      }
      v65 = v69;
      if (v69 == (_QWORD *)(a1 + 128))
        goto LABEL_87;
    }
  }
  else
  {
    while ((*((_BYTE *)v64 + 92) & 6) == 0)
    {
      v66 = (_QWORD *)v64[1];
      if (v66)
      {
        do
        {
          v67 = v66;
          v66 = (_QWORD *)*v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          v67 = (_QWORD *)v64[2];
          v78 = *v67 == (_QWORD)v64;
          v64 = v67;
        }
        while (!v78);
      }
      v64 = v67;
      if (v67 == (_QWORD *)(a1 + 104))
        goto LABEL_124;
    }
  }
  v70 = *(_QWORD *)(a1 + 144);
  v71 = *(_QWORD *)(a1 + 152);
  if (v70 == v71)
  {
    v72 = 0;
  }
  else
  {
    v72 = 0;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v70 + 48) + 52) & 6) == 0 && (*(_BYTE *)(*(_QWORD *)(v70 + 56) + 52) & 6) == 0)
        ++v72;
      v70 += 120;
    }
    while (v70 != v71);
  }
  v82 = *(_QWORD **)(a1 + 168);
  v83 = *(_QWORD **)(a1 + 176);
  if (v82 == v83)
  {
    v84 = 0;
  }
  else
  {
    v84 = 0;
    do
    {
      if ((*(_BYTE *)(v82[10] + 52) & 6) == 0
        && (*(_BYTE *)(v82[11] + 52) & 6) == 0
        && (*(_BYTE *)(v82[12] + 36) & 6) == 0)
      {
        ++v84;
      }
      v82 += 20;
    }
    while (v82 != v83);
  }
  v44 = 3 * (v84 + v72);
LABEL_88:
  if (((*(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776)) & 0x3FFFFFFFCLL) != 0)
  {
    if (v12)
      return 0;
LABEL_100:
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 209))
      goto LABEL_246;
    v47 = a1 + 704;
    if (*(_DWORD *)(a1 + 396) == 1)
      v48 = 3;
    else
      v48 = 1;
    if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 24))(a1 + 704) + 120))
    {
LABEL_245:
      kdebug_trace();
      return 1;
    }
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 704);
    v50 = (char **)sub_239C482A4(v49);
    v51 = v50;
    v332 = 0;
    v333 = 0;
    v334 = 0;
    if (&v332 == (void **)v50)
    {
      v52 = (char **)&v337;
    }
    else
    {
      sub_23942156C(&v332, *v50, v50[1], (v50[1] - *v50) >> 2);
      v52 = v51 + 6;
      if (v332 != v333)
      {
        v314 = v51;
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
        sub_239C2A864(v317, (char **)&v332, v51 + 6);
        sub_239C2A078((uint64_t)&v342, (char **)(v53 + 40), (char **)v317);
        if (v317[0])
        {
          v317[1] = v317[0];
          operator delete(v317[0]);
        }
        sub_239C2A988(v317, (char **)&v342, (char **)&v332);
        v54 = 3 * ((*((_QWORD *)&v342 + 1) - (_QWORD)v342) >> 2);
        *(_DWORD *)(a1 + 728) = v54;
        sub_23945215C(a1 + 712, v54);
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 704);
        v57 = (_DWORD *)*((_QWORD *)&v342 + 1);
        v56 = (_DWORD *)v342;
        if ((_QWORD)v342 != *((_QWORD *)&v342 + 1))
        {
          v58 = 0;
          v59 = *(_QWORD **)(v55 + 8);
          do
          {
            if (*((_DWORD *)v59 + 8) == *v56)
            {
              v62 = v59;
            }
            else
            {
              do
              {
                v63 = (_QWORD *)v59[1];
                if (v63)
                {
                  do
                  {
                    v62 = v63;
                    v63 = (_QWORD *)*v63;
                  }
                  while (v63);
                }
                else
                {
                  do
                  {
                    v62 = (_QWORD *)v59[2];
                    v78 = *v62 == (_QWORD)v59;
                    v59 = v62;
                  }
                  while (!v78);
                }
                v59 = v62;
              }
              while (*((_DWORD *)v62 + 8) != *v56);
            }
            v60 = *(_OWORD *)(v62 + 7);
            v61 = *(_QWORD *)(a1 + 712) + 8 * v58;
            *(_QWORD *)(v61 + 16) = v62[9];
            *(_OWORD *)v61 = v60;
            v58 += 3;
            ++v56;
            v59 = v62;
          }
          while (v56 != v57);
        }
        v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(a1 + 704);
        v74 = *(_QWORD **)(v73 + 8);
        v75 = (_QWORD *)(v73 + 16);
        v76 = v317[0];
        v77 = v317[1];
        v78 = v74 == (_QWORD *)(v73 + 16) || v317[0] == v317[1];
        if (v78)
        {
          v79 = *(_QWORD **)(v73 + 8);
        }
        else
        {
          v85 = 0;
          do
          {
            if (*v76 == *((_DWORD *)v74 + 8))
            {
              if (*((_BYTE *)v74 + 44))
                v86 = v85;
              else
                v86 = -1;
              v85 += *((unsigned __int8 *)v74 + 44);
              ++v76;
            }
            else
            {
              v86 = -1;
            }
            *((_DWORD *)v74 + 22) = v86;
            v87 = (_QWORD *)v74[1];
            if (v87)
            {
              do
              {
                v79 = v87;
                v87 = (_QWORD *)*v87;
              }
              while (v87);
            }
            else
            {
              do
              {
                v79 = (_QWORD *)v74[2];
                v78 = *v79 == (_QWORD)v74;
                v74 = v79;
              }
              while (!v78);
            }
            if (v79 == v75)
              break;
            v74 = v79;
          }
          while (v76 != v77);
        }
        if (v79 != v75)
        {
          do
          {
            *((_DWORD *)v79 + 22) = -1;
            v88 = (_QWORD *)v79[1];
            if (v88)
            {
              do
              {
                v89 = v88;
                v88 = (_QWORD *)*v88;
              }
              while (v88);
            }
            else
            {
              do
              {
                v89 = (_QWORD *)v79[2];
                v78 = *v89 == (_QWORD)v79;
                v79 = v89;
              }
              while (!v78);
            }
            v79 = v89;
          }
          while (v89 != v75);
        }
        v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
        sub_239C25A58(v90, (char **)v317);
        v91 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704) + 32);
        v92 = *(unsigned int *)(v91 + 12);
        if ((_DWORD)v92)
        {
          for (j = 0; j < v92; ++j)
          {
            v95 = (uint64_t *)(*(_QWORD *)(v91 + 88) + 24 * j);
            v94 = *v95;
            v96 = v95[1];
            if (*v95 != v96)
            {
              v97 = *(_QWORD *)(v91 + 48);
              v98 = *(_QWORD *)(v91 + 56);
              v99 = *(_QWORD *)(v91 + 80);
              do
              {
                v100 = ((v98 - v97) << 6) - 1;
                if (v98 == v97)
                  v100 = 0;
                v101 = *(_QWORD *)(v91 + 72) + v99;
                if (v100 == v101)
                {
                  sub_2396DA1D4(v91 + 40);
                  v97 = *(_QWORD *)(v91 + 48);
                  v98 = *(_QWORD *)(v91 + 56);
                  v101 = *(_QWORD *)(v91 + 80) + *(_QWORD *)(v91 + 72);
                }
                *(_QWORD *)(*(_QWORD *)(v97 + ((v101 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v101 & 0x1FF)) = *(_QWORD *)(v94 + 8);
                v99 = *(_QWORD *)(v91 + 80) + 1;
                *(_QWORD *)(v91 + 80) = v99;
                v94 += 16;
              }
              while (v94 != v96);
              v94 = *v95;
              v92 = *(unsigned int *)(v91 + 12);
            }
            v95[1] = v94;
          }
        }
        v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
        v103 = *(unsigned int *)(v102 + 16);
        if ((_DWORD)v103)
          bzero(*(void **)v102, 8 * v103);
        if (((*(_QWORD *)(a1 + 784) - *(_QWORD *)(a1 + 776)) & 0x3FFFFFFFCLL) != 0)
        {
          v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
          sub_239C1F378(v104, a1 + 736);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 16))(a1 + 704, v48);
        v330[0] = 0;
        v330[1] = 0;
        v331 = 0;
        memset(v329, 0, sizeof(v329));
        v105 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 40);
        if (*(_BYTE *)(a1 + 800))
        {
          v106 = v105(a1 + 704);
          sub_239C2AD44(v106, &v332, (uint64_t)v329);
        }
        else
        {
          v107 = v105(a1 + 704);
          sub_239C2AAAC(v107, &v332, (uint64_t)v329, (uint64_t)v330);
        }
        memset(v328, 0, sizeof(v328));
        memset(v327, 0, sizeof(v327));
        v108 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
        sub_239C2AF64(v108, &v332, &v342, (uint64_t)v328, (uint64_t)v327);
        sub_239C25A58(a1 + 736, (char **)&v342);
        v109 = *(_QWORD *)(a1 + 768);
        v110 = *(unsigned int *)(v109 + 12);
        if ((_DWORD)v110)
        {
          for (k = 0; k < v110; ++k)
          {
            v113 = (uint64_t *)(*(_QWORD *)(v109 + 88) + 24 * k);
            v112 = *v113;
            v114 = v113[1];
            if (*v113 != v114)
            {
              v115 = *(_QWORD *)(v109 + 48);
              v116 = *(_QWORD *)(v109 + 56);
              v117 = *(_QWORD *)(v109 + 80);
              do
              {
                v118 = ((v116 - v115) << 6) - 1;
                if (v116 == v115)
                  v118 = 0;
                v119 = *(_QWORD *)(v109 + 72) + v117;
                if (v118 == v119)
                {
                  sub_2396DA1D4(v109 + 40);
                  v115 = *(_QWORD *)(v109 + 48);
                  v116 = *(_QWORD *)(v109 + 56);
                  v119 = *(_QWORD *)(v109 + 80) + *(_QWORD *)(v109 + 72);
                }
                *(_QWORD *)(*(_QWORD *)(v115 + ((v119 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v119 & 0x1FF)) = *(_QWORD *)(v112 + 8);
                v117 = *(_QWORD *)(v109 + 80) + 1;
                *(_QWORD *)(v109 + 80) = v117;
                v112 += 16;
              }
              while (v112 != v114);
              v112 = *v113;
              v110 = *(unsigned int *)(v109 + 12);
            }
            v113[1] = v112;
          }
        }
        v120 = *(unsigned int *)(a1 + 752);
        if ((_DWORD)v120)
          bzero(*(void **)(a1 + 736), 8 * v120);
        memset(v326, 0, sizeof(v326));
        v121 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 704) + 40);
        if (*(_BYTE *)(a1 + 800))
        {
          v122 = v121(a1 + 704);
          sub_239C2AD44(v122, &v342, (uint64_t)v326);
        }
        else
        {
          v123 = v121(a1 + 704);
          sub_239C2AAAC(v123, &v342, (uint64_t)v326, a1 + 736);
        }
        if (*(_BYTE *)(a1 + 801))
        {
          LOBYTE(v323) = *(_BYTE *)(a1 + 800);
          v124 = *(_QWORD *)(a1 + 832);
          if (!v124)
            sub_2394172E0();
          if (((*(uint64_t (**)(uint64_t, void **, void **, void **, void **, void **, uint64_t))(*(_QWORD *)v124 + 48))(v124, v329, v330, v328, &v323, v326, a1 + 736) & 1) != 0)goto LABEL_231;
        }
        else if (sub_239C2B370((uint64_t)v329, (uint64_t)v330, (uint64_t)v328, *(_BYTE *)(a1 + 800) != 0, (uint64_t)v326, a1 + 736))
        {
LABEL_231:
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 768) + 48))(*(_QWORD *)(a1 + 768));
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 768) + 56))(*(_QWORD *)(a1 + 768));
          sub_239C2B9E4(*(_QWORD *)(a1 + 768), (uint64_t *)v326, 0);
          v323 = 0;
          v324 = 0;
          v325 = 0;
          if (&v323 != (void **)(v314 + 12))
            sub_23942156C(&v323, v314[12], v314[13], (v314[13] - v314[12]) >> 2);
          v125 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
          sub_239C2A1C4(v125, v332, v333);
          v126 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
          sub_239C2C0AC(v126, (char **)&v323);
          if (v323)
          {
            v324 = v323;
            operator delete(v323);
          }
          v81 = 0;
          goto LABEL_238;
        }
        v81 = 1;
LABEL_238:
        free(v326[0]);
        free(v327[0]);
        free(v328[0]);
        free(v329[0]);
        free(v330[0]);
        if (v317[0])
        {
          v317[1] = v317[0];
          operator delete(v317[0]);
        }
        if ((_QWORD)v342)
        {
          *((_QWORD *)&v342 + 1) = v342;
          operator delete((void *)v342);
        }
        goto LABEL_242;
      }
    }
    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 40))(a1 + 704);
    sub_239C29F2C((uint64_t)&v342, (char **)(v80 + 40), v52);
    sub_239C2A078((uint64_t)v317, (char **)(a1 + 776), (char **)&v342);
    sub_239C2A1C4((uint64_t *)(a1 + 736), (_DWORD *)v317[0], (_DWORD *)v317[1]);
    if (v317[0])
    {
      v317[1] = v317[0];
      operator delete(v317[0]);
    }
    if ((_QWORD)v342)
    {
      *((_QWORD *)&v342 + 1) = v342;
      operator delete((void *)v342);
    }
    v81 = 0;
LABEL_242:
    if (v332)
    {
      v333 = v332;
      operator delete(v332);
    }
    if (v81)
      goto LABEL_245;
LABEL_246:
    sub_239C482A4(a1 + 88);
    if (*(_BYTE *)(a1 + 209))
    {
      v128 = *(_QWORD **)(a1 + 144);
      v127 = *(_QWORD **)(a1 + 152);
      if (v128 != v127)
      {
        while (!*((_BYTE *)v128 + 112))
        {
          v128 += 15;
          if (v128 == v127)
            goto LABEL_250;
        }
        --*(_DWORD *)(v128[6] + 56);
        --*(_DWORD *)(v128[7] + 56);
        v248 = (int64x2_t)xmmword_239F0C410;
        *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), (int64x2_t)xmmword_239F0C410);
        if (v128 != v127)
        {
          v249 = v128 + 15;
          if (v128 + 15 == v127)
          {
            v250 = v128;
          }
          else
          {
            v250 = v128;
            do
            {
              v251 = v249;
              if (*((_BYTE *)v128 + 232))
              {
                --*(_DWORD *)(v128[21] + 56);
                --*(_DWORD *)(v128[22] + 56);
                *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), v248);
              }
              else
              {
                *v250 = *v249;
                *(_OWORD *)(v250 + 1) = *((_OWORD *)v128 + 8);
                v250[3] = v128[18];
                v250[4] = v128[19];
                v250[5] = v128[20];
                v250[6] = v128[21];
                v250[7] = v128[22];
                v252 = *(_OWORD *)(v128 + 23);
                v250[10] = v128[25];
                *((_OWORD *)v250 + 4) = v252;
                v250[11] = v128[26];
                v253 = *(_OWORD *)(v128 + 27);
                v128[27] = 0;
                v128[28] = 0;
                v254 = (std::__shared_weak_count *)v250[13];
                *((_OWORD *)v250 + 6) = v253;
                if (v254)
                {
                  p_shared_owners = (unint64_t *)&v254->__shared_owners_;
                  do
                    v256 = __ldaxr(p_shared_owners);
                  while (__stlxr(v256 - 1, p_shared_owners));
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                    v248 = (int64x2_t)xmmword_239F0C410;
                  }
                }
                *((_BYTE *)v250 + 112) = *((_BYTE *)v128 + 232);
                v250 += 15;
              }
              v249 = v251 + 15;
              v128 = v251;
            }
            while (v251 + 15 != v127);
            v127 = *(_QWORD **)(a1 + 152);
          }
          if (v250 != v127)
          {
            while (v127 != v250)
            {
              v305 = (std::__shared_weak_count *)*(v127 - 2);
              if (v305)
              {
                v306 = (unint64_t *)&v305->__shared_owners_;
                do
                  v307 = __ldaxr(v306);
                while (__stlxr(v307 - 1, v306));
                if (!v307)
                {
                  ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                  std::__shared_weak_count::__release_weak(v305);
                }
              }
              v127 -= 15;
            }
            *(_QWORD *)(a1 + 152) = v250;
          }
        }
      }
LABEL_250:
      v130 = *(_QWORD *)(a1 + 168);
      v129 = *(_QWORD *)(a1 + 176);
      if (v130 != v129)
      {
        while (!*(_BYTE *)(v130 + 152))
        {
          v130 += 160;
          if (v130 == v129)
            goto LABEL_253;
        }
        --*(_DWORD *)(*(_QWORD *)(v130 + 80) + 56);
        --*(_DWORD *)(*(_QWORD *)(v130 + 88) + 56);
        --*(_DWORD *)(*(_QWORD *)(v130 + 96) + 40);
        v257 = (int64x2_t)xmmword_239F0C410;
        *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), (int64x2_t)xmmword_239F0C410);
        if (v130 != v129)
        {
          v258 = (_QWORD *)(v130 + 160);
          if (v130 + 160 == v129)
          {
            v259 = v130;
          }
          else
          {
            v259 = v130;
            do
            {
              v260 = v258;
              if (*(_BYTE *)(v130 + 312))
              {
                --*(_DWORD *)(*(_QWORD *)(v130 + 240) + 56);
                --*(_DWORD *)(*(_QWORD *)(v130 + 248) + 56);
                --*(_DWORD *)(*(_QWORD *)(v130 + 256) + 40);
                *(int64x2_t *)(a1 + 192) = vaddq_s64(*(int64x2_t *)(a1 + 192), v257);
              }
              else
              {
                *(_QWORD *)v259 = *v258;
                *(_OWORD *)(v259 + 8) = *(_OWORD *)(v130 + 168);
                *(_QWORD *)(v259 + 24) = *(_QWORD *)(v130 + 184);
                *(_QWORD *)(v259 + 32) = *(_QWORD *)(v130 + 192);
                *(_QWORD *)(v259 + 40) = *(_QWORD *)(v130 + 200);
                *(_QWORD *)(v259 + 48) = *(_QWORD *)(v130 + 208);
                *(_QWORD *)(v259 + 56) = *(_QWORD *)(v130 + 216);
                *(_QWORD *)(v259 + 64) = *(_QWORD *)(v130 + 224);
                *(_QWORD *)(v259 + 72) = *(_QWORD *)(v130 + 232);
                *(_QWORD *)(v259 + 80) = *(_QWORD *)(v130 + 240);
                *(_QWORD *)(v259 + 88) = *(_QWORD *)(v130 + 248);
                *(_QWORD *)(v259 + 96) = *(_QWORD *)(v130 + 256);
                v261 = *(_OWORD *)(v130 + 264);
                *(_QWORD *)(v259 + 120) = *(_QWORD *)(v130 + 280);
                *(_OWORD *)(v259 + 104) = v261;
                *(_QWORD *)(v259 + 128) = *(_QWORD *)(v130 + 288);
                v262 = *(_OWORD *)(v130 + 296);
                *(_QWORD *)(v130 + 304) = 0;
                *(_QWORD *)(v130 + 296) = 0;
                v263 = *(std::__shared_weak_count **)(v259 + 144);
                *(_OWORD *)(v259 + 136) = v262;
                if (v263)
                {
                  v264 = (unint64_t *)&v263->__shared_owners_;
                  do
                    v265 = __ldaxr(v264);
                  while (__stlxr(v265 - 1, v264));
                  if (!v265)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                    v257 = (int64x2_t)xmmword_239F0C410;
                  }
                }
                *(_BYTE *)(v259 + 152) = *(_BYTE *)(v130 + 312);
                v259 += 160;
              }
              v258 = v260 + 20;
              v130 = (uint64_t)v260;
            }
            while (v260 + 20 != (_QWORD *)v129);
            v129 = *(_QWORD *)(a1 + 176);
          }
          if (v129 != v259)
          {
            v308 = sub_239C299F0(v129, v129, v259);
            for (m = *(_QWORD *)(a1 + 176); m != v308; m -= 160)
            {
              v310 = *(std::__shared_weak_count **)(m - 16);
              if (v310)
              {
                v311 = (unint64_t *)&v310->__shared_owners_;
                do
                  v312 = __ldaxr(v311);
                while (__stlxr(v312 - 1, v311));
                if (!v312)
                {
                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                  std::__shared_weak_count::__release_weak(v310);
                }
              }
            }
            *(_QWORD *)(a1 + 176) = v308;
          }
        }
      }
    }
LABEL_253:
    sub_239C297C8((_QWORD *)(a1 + 96));
    sub_239C298DC((_QWORD *)(a1 + 96));
    *(_WORD *)(a1 + 208) = 1;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 272) = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
    v131 = *(_QWORD **)(a1 + 96);
    if (v131 != (_QWORD *)(a1 + 104))
    {
      v132 = 0;
      do
      {
        v133 = *((unsigned __int8 *)v131 + 44);
        if (*((_BYTE *)v131 + 44))
          v134 = v132;
        else
          v134 = -1;
        *((_DWORD *)v131 + 22) = v134;
        v135 = (_QWORD *)v131[1];
        if (v135)
        {
          do
          {
            v136 = v135;
            v135 = (_QWORD *)*v135;
          }
          while (v135);
        }
        else
        {
          do
          {
            v136 = (_QWORD *)v131[2];
            v78 = *v136 == (_QWORD)v131;
            v131 = v136;
          }
          while (!v78);
        }
        v132 += v133;
        v131 = v136;
      }
      while (v136 != (_QWORD *)(a1 + 104));
    }
    v137 = *(_QWORD **)(a1 + 120);
    if (v137 != (_QWORD *)(a1 + 128))
    {
      v138 = 0;
      do
      {
        v139 = *((unsigned __int8 *)v137 + 44);
        if (*((_BYTE *)v137 + 44))
          v140 = v138;
        else
          v140 = -1;
        *((_DWORD *)v137 + 18) = v140;
        v141 = (_QWORD *)v137[1];
        if (v141)
        {
          do
          {
            v142 = v141;
            v141 = (_QWORD *)*v141;
          }
          while (v141);
        }
        else
        {
          do
          {
            v142 = (_QWORD *)v137[2];
            v78 = *v142 == (_QWORD)v137;
            v137 = v142;
          }
          while (!v78);
        }
        v138 += v139;
        v137 = v142;
      }
      while (v142 != (_QWORD *)(a1 + 128));
    }
    v315 = *(_DWORD *)(a1 + 372);
    v143 = *(_DWORD *)(a1 + 392);
    v317[0] = 0;
    v317[1] = 0;
    v318[0] = 0;
    v144 = *(_QWORD *)(a1 + 472);
    if (*(_BYTE *)(v144 + 120))
    {
      v145 = (char *)operator new(0x100uLL);
      v317[0] = v145;
      v317[1] = v145;
      v318[0] = v145 + 256;
      if (*(_BYTE *)(v144 + 120))
      {
        v146 = *(unsigned int *)(v144 + 24);
        if (v146 >= 0x41)
        {
          v317[0] = operator new(4 * v146);
          v317[1] = v317[0];
          v318[0] = (char *)v317[0] + 4 * v146;
          operator delete(v145);
        }
        v147 = *(_QWORD **)(v144 + 8);
        v148 = (_QWORD *)(v144 + 16);
        if (v147 != v148)
        {
          do
          {
            if (*((_BYTE *)v147 + 44))
            {
              v176 = (char *)v317[1];
              if (v317[1] >= v318[0])
              {
                v178 = (char *)v317[0];
                v179 = (char *)v317[1] - (char *)v317[0];
                v180 = ((char *)v317[1] - (char *)v317[0]) >> 2;
                v181 = v180 + 1;
                if ((unint64_t)(v180 + 1) >> 62)
                  sub_2394189F8();
                v182 = (char *)v318[0] - (char *)v317[0];
                if (((char *)v318[0] - (char *)v317[0]) >> 1 > v181)
                  v181 = v182 >> 1;
                if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL)
                  v183 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v183 = v181;
                if (v183)
                {
                  if (v183 >> 62)
LABEL_532:
                    sub_239418A80();
                  v184 = operator new(4 * v183);
                }
                else
                {
                  v184 = 0;
                }
                v185 = &v184[4 * v180];
                *v185 = *((_DWORD *)v147 + 8);
                v177 = v185 + 1;
                if (v176 != v178)
                {
                  v186 = v176 - 4 - v178;
                  if (v186 < 0x2C)
                    goto LABEL_543;
                  if ((unint64_t)(v176 - &v184[v179]) < 0x20)
                    goto LABEL_543;
                  v187 = (v186 >> 2) + 1;
                  v188 = &v184[4 * v180 - 16];
                  v189 = v176 - 16;
                  v190 = v187 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v191 = *(_OWORD *)v189;
                    *(v188 - 1) = *((_OWORD *)v189 - 1);
                    *v188 = v191;
                    v188 -= 2;
                    v189 -= 32;
                    v190 -= 8;
                  }
                  while (v190);
                  v185 -= v187 & 0x7FFFFFFFFFFFFFF8;
                  v176 -= 4 * (v187 & 0x7FFFFFFFFFFFFFF8);
                  if (v187 != (v187 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_543:
                    do
                    {
                      v192 = *((_DWORD *)v176 - 1);
                      v176 -= 4;
                      *--v185 = v192;
                    }
                    while (v176 != v178);
                  }
                }
                v317[0] = v185;
                v317[1] = v177;
                v318[0] = &v184[4 * v183];
                if (v178)
                  operator delete(v178);
              }
              else
              {
                *(_DWORD *)v317[1] = *((_DWORD *)v147 + 8);
                v177 = v176 + 4;
              }
              v317[1] = v177;
            }
            v193 = (_QWORD *)v147[1];
            if (v193)
            {
              do
              {
                v194 = v193;
                v193 = (_QWORD *)*v193;
              }
              while (v193);
            }
            else
            {
              do
              {
                v194 = (_QWORD *)v147[2];
                v78 = *v194 == (_QWORD)v147;
                v147 = v194;
              }
              while (!v78);
            }
            v147 = v194;
          }
          while (v194 != v148);
        }
      }
    }
    sub_239C25A58(*(_QWORD *)(a1 + 480), (char **)v317);
    if (v143 == 1)
    {
      v149 = *(_QWORD *)(a1 + 488);
      v150 = *(_DWORD *)(*(_QWORD *)(a1 + 480) + 24);
      *(_QWORD *)(v149 + 24) = v150;
      sub_239C25B28(v149, 3 * v150);
    }
    sub_239C25CA0((uint64_t *)(a1 + 624), (unsigned int **)v317, v315);
    v151 = *(_QWORD *)(a1 + 472);
    v330[0] = 0;
    v152 = *(void **)(a1 + 576);
    *(_QWORD *)(a1 + 584) = v152;
    *(_QWORD *)(a1 + 608) = *(_QWORD *)(a1 + 600);
    v153 = *(unsigned int *)(v151 + 48);
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 592) - (_QWORD)v152) >> 3) < v153)
    {
      v154 = (char *)operator new(56 * v153);
      *(_QWORD *)(a1 + 576) = v154;
      *(_QWORD *)(a1 + 584) = v154;
      *(_QWORD *)(a1 + 592) = &v154[56 * v153];
      if (v152)
        operator delete(v152);
    }
    v313 = (_QWORD *)v151;
    v316 = a1 + 496;
    v329[0] = 0;
    v155 = *(_QWORD **)(v151 + 32);
    v156 = (_QWORD *)(v151 + 40);
    if (v155 != (_QWORD *)(v151 + 40))
    {
      while (*((_DWORD *)v155 + 18) == -1)
      {
        if ((*((_BYTE *)v155 + 76) & 2) == 0)
        {
          v161 = v329;
          v162 = 1;
LABEL_313:
          *v161 = (char *)*v161 + v162;
        }
        v174 = (_QWORD *)v155[1];
        if (v174)
        {
          do
          {
            v175 = v174;
            v174 = (_QWORD *)*v174;
          }
          while (v174);
        }
        else
        {
          do
          {
            v175 = (_QWORD *)v155[2];
            v78 = *v175 == (_QWORD)v155;
            v155 = v175;
          }
          while (!v78);
        }
        v155 = v175;
        if (v175 == v156)
          goto LABEL_350;
      }
      v157 = v155 + 5;
      v158 = *(_QWORD **)(a1 + 584);
      v159 = *(_QWORD *)(a1 + 592);
      if ((unint64_t)v158 >= v159)
      {
        v163 = *(_QWORD **)(a1 + 576);
        v164 = 0x6DB6DB6DB6DB6DB7 * (v158 - v163) + 1;
        if (v164 > 0x492492492492492)
          sub_2394189F8();
        v165 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v159 - (_QWORD)v163) >> 3);
        if (2 * v165 > v164)
          v164 = 2 * v165;
        if (v165 >= 0x249249249249249)
          v166 = 0x492492492492492;
        else
          v166 = v164;
        if (v166)
        {
          if (v166 > 0x492492492492492)
            goto LABEL_532;
          v167 = (char *)operator new(56 * v166);
        }
        else
        {
          v167 = 0;
        }
        v168 = &v167[8 * (v158 - v163)];
        *(_QWORD *)v168 = v157;
        *((_QWORD *)v168 + 5) = 0;
        *((_QWORD *)v168 + 6) = v316;
        *((_QWORD *)v168 + 3) = -1;
        *((_QWORD *)v168 + 4) = 0;
        if (v158 == v163)
        {
          v172 = &v167[8 * (v158 - v163)];
        }
        else
        {
          v169 = 0;
          do
          {
            v170 = &v168[v169 * 8];
            *((_QWORD *)v170 - 7) = v158[v169 - 7];
            *((_QWORD *)v170 - 6) = v158[v169 - 6];
            *((_QWORD *)v170 - 5) = v158[v169 - 5];
            v171 = *(_OWORD *)&v158[v169 - 2];
            *((_OWORD *)v170 - 2) = *(_OWORD *)&v158[v169 - 4];
            *((_OWORD *)v170 - 1) = v171;
            v169 -= 7;
          }
          while (&v158[v169] != v163);
          v172 = &v168[v169 * 8];
          v158 = *(_QWORD **)(a1 + 576);
        }
        *(_QWORD *)(a1 + 576) = v172;
        v160 = v168 + 56;
        *(_QWORD *)(a1 + 584) = v168 + 56;
        *(_QWORD *)(a1 + 592) = &v167[56 * v166];
        if (v158)
          operator delete(v158);
      }
      else
      {
        *v158 = v157;
        v158[5] = 0;
        v158[6] = v316;
        v160 = v158 + 7;
        v158[3] = -1;
        v158[4] = 0;
      }
      *(_QWORD *)(a1 + 584) = v160;
      v173 = v330[0];
      *(v160 - 3) = 0;
      *(v160 - 2) = 0;
      *(v160 - 4) = v173;
      v162 = (3 * *((_DWORD *)v155 + 20));
      v161 = v330;
      goto LABEL_313;
    }
LABEL_350:
    *((_QWORD *)&v343 + 1) = 0;
    v332 = &off_250AFBA90;
    v333 = v329;
    v195 = v313;
    v334 = v313;
    v335 = &v332;
    sub_23965A910(&v332, &v342);
    v196 = v335;
    if (v335 == &v332)
    {
      v197 = 4;
      v196 = &v332;
    }
    else
    {
      if (!v335)
        goto LABEL_355;
      v197 = 5;
    }
    (*((void (**)(void))*v196 + v197))();
LABEL_355:
    v198 = v329[0];
    if (v329[0])
    {
      v199 = *(_BYTE **)(a1 + 600);
      if ((void *)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 616) - (_QWORD)v199) >> 3)) < v329[0])
      {
        if (v329[0] > (void *)0x492492492492492)
          sub_2394189F8();
        v200 = *(_BYTE **)(a1 + 608);
        v201 = (char *)operator new(56 * (uint64_t)v329[0]);
        v202 = &v201[v200 - v199];
        v203 = v202;
        if (v200 != v199)
        {
          v204 = 0;
          do
          {
            v205 = &v202[v204];
            *((_QWORD *)v205 - 7) = *(_QWORD *)&v200[v204 - 56];
            *((_QWORD *)v205 - 6) = *(_QWORD *)&v200[v204 - 48];
            *((_QWORD *)v205 - 5) = *(_QWORD *)&v200[v204 - 40];
            v206 = *(_OWORD *)&v200[v204 - 16];
            *((_OWORD *)v205 - 2) = *(_OWORD *)&v200[v204 - 32];
            *((_OWORD *)v205 - 1) = v206;
            v204 -= 56;
          }
          while (&v200[v204] != v199);
          v203 = &v202[v204];
        }
        *(_QWORD *)(a1 + 600) = v203;
        *(_QWORD *)(a1 + 608) = v202;
        *(_QWORD *)(a1 + 616) = &v201[56 * (_QWORD)v198];
        if (v199)
          operator delete(v199);
      }
      v207 = (_QWORD *)v313[4];
      if (v207 != v156)
      {
        do
        {
          if (*((_DWORD *)v207 + 18) == -1 && (*((_BYTE *)v207 + 76) & 2) == 0)
          {
            v208 = v207 + 5;
            v209 = *(_QWORD **)(a1 + 608);
            v210 = *(_QWORD *)(a1 + 616);
            if ((unint64_t)v209 >= v210)
            {
              v212 = *(_QWORD **)(a1 + 600);
              v213 = 0x6DB6DB6DB6DB6DB7 * (v209 - v212) + 1;
              if (v213 > 0x492492492492492)
                sub_2394189F8();
              v214 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v210 - (_QWORD)v212) >> 3);
              if (2 * v214 > v213)
                v213 = 2 * v214;
              if (v214 >= 0x249249249249249)
                v215 = 0x492492492492492;
              else
                v215 = v213;
              if (v215)
              {
                if (v215 > 0x492492492492492)
                  sub_239418A80();
                v216 = (char *)operator new(56 * v215);
              }
              else
              {
                v216 = 0;
              }
              v217 = &v216[8 * (v209 - v212)];
              *(_QWORD *)v217 = v208;
              *((_QWORD *)v217 + 5) = 0;
              *((_QWORD *)v217 + 6) = v316;
              *((_QWORD *)v217 + 3) = -1;
              *((_QWORD *)v217 + 4) = 0;
              if (v209 == v212)
              {
                v221 = &v216[8 * (v209 - v212)];
                v195 = v313;
              }
              else
              {
                v218 = 0;
                v195 = v313;
                do
                {
                  v219 = &v217[v218 * 8];
                  *((_QWORD *)v219 - 7) = v209[v218 - 7];
                  *((_QWORD *)v219 - 6) = v209[v218 - 6];
                  *((_QWORD *)v219 - 5) = v209[v218 - 5];
                  v220 = *(_OWORD *)&v209[v218 - 2];
                  *((_OWORD *)v219 - 2) = *(_OWORD *)&v209[v218 - 4];
                  *((_OWORD *)v219 - 1) = v220;
                  v218 -= 7;
                }
                while (&v209[v218] != v212);
                v221 = &v217[v218 * 8];
                v209 = *(_QWORD **)(a1 + 600);
              }
              *(_QWORD *)(a1 + 600) = v221;
              v211 = v217 + 56;
              *(_QWORD *)(a1 + 608) = v217 + 56;
              *(_QWORD *)(a1 + 616) = &v216[56 * v215];
              if (v209)
                operator delete(v209);
            }
            else
            {
              *v209 = v208;
              v209[5] = 0;
              v209[6] = v316;
              v211 = v209 + 7;
              v209[3] = -1;
              v209[4] = 0;
            }
            *(_QWORD *)(a1 + 608) = v211;
            v222 = v330[0];
            *(v211 - 3) = 0;
            *(v211 - 2) = 0;
            *(v211 - 4) = v222;
            v330[0] = (char *)v330[0] + (3 * *((_DWORD *)v207 + 20));
            *((_DWORD *)v207 + 18) = -1 - 1227133513 * ((*(_QWORD *)(a1 + 608) - *(_QWORD *)(a1 + 600)) >> 3);
          }
          v223 = (_QWORD *)v207[1];
          if (v223)
          {
            do
            {
              v224 = v223;
              v223 = (_QWORD *)*v223;
            }
            while (v223);
          }
          else
          {
            do
            {
              v224 = (_QWORD *)v207[2];
              v78 = *v224 == (_QWORD)v207;
              v207 = v224;
            }
            while (!v78);
          }
          v207 = v224;
        }
        while (v224 != v156);
      }
    }
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a1 + 520);
    v225 = *(_QWORD *)(a1 + 552);
    *(_QWORD *)(a1 + 560) = v225;
    *(_QWORD *)(a1 + 544) = 0;
    v226 = (unint64_t)v330[0];
    if (v330[0])
    {
      sub_23946DAD4(v316, (unint64_t)v330[0]);
      v227 = *(_QWORD *)(a1 + 560);
      v225 = *(_QWORD *)(a1 + 552);
    }
    else
    {
      v227 = v225;
    }
    v228 = (v227 - v225) >> 4;
    v229 = v226 - v228;
    if (v226 <= v228)
    {
      if (v226 >= v228)
        goto LABEL_452;
      v244 = v225 + 16 * v226;
      goto LABEL_424;
    }
    v230 = *(_QWORD *)(a1 + 568);
    if (v229 > (v230 - v227) >> 4)
    {
      if (v226 >> 60)
        sub_2394189F8();
      v231 = v230 - v225;
      v232 = v231 >> 3;
      if (v231 >> 3 <= v226)
        v232 = v226;
      if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFF0)
        v233 = 0xFFFFFFFFFFFFFFFLL;
      else
        v233 = v232;
      if (v233 >> 60)
        sub_239418A80();
      v234 = (char *)operator new(16 * v233);
      v235 = &v234[16 * v228];
      v236 = &v234[16 * v226];
      v237 = v235;
      v238 = (v229 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v238)
      {
        v239 = (v238 + 1) & 0x1FFFFFFFFFFFFFFELL;
        v240 = v235 + 16;
        v241 = v239;
        do
        {
          *((_DWORD *)v240 - 4) = -1;
          *(_DWORD *)v240 = -1;
          *((_QWORD *)v240 - 1) = -1;
          *((_QWORD *)v240 + 1) = -1;
          v240 += 32;
          v241 -= 2;
        }
        while (v241);
        if (v238 + 1 == v239)
          goto LABEL_413;
        v237 = &v235[16 * v239];
      }
      do
      {
        *(_DWORD *)v237 = -1;
        *((_QWORD *)v237 + 1) = -1;
        v237 += 16;
      }
      while (v237 != v236);
LABEL_413:
      v242 = &v234[16 * v233];
      if (v227 == v225)
      {
        v243 = &v234[16 * v228];
      }
      else
      {
        do
        {
          v243 = v235 - 16;
          *((_OWORD *)v235 - 1) = *(_OWORD *)(v227 - 16);
          v227 -= 16;
          v235 -= 16;
        }
        while (v227 != v225);
      }
      v266 = *(void **)(a1 + 552);
      *(_QWORD *)(a1 + 552) = v243;
      *(_QWORD *)(a1 + 560) = v236;
      *(_QWORD *)(a1 + 568) = v242;
      if (v266)
        operator delete(v266);
LABEL_452:
      v267 = (_QWORD *)v195[10];
      v268 = (_QWORD *)v195[11];
      if (v267 != v268)
      {
        v269 = 0;
        while (1)
        {
          v271 = v267[10];
          if (*(_BYTE *)(v271 + 4) && *(_DWORD *)(v271 + 48) == -1)
            goto LABEL_457;
          v272 = v267[11];
          if (*(_BYTE *)(v272 + 4))
          {
            if (*(_DWORD *)(v272 + 48) == -1)
              goto LABEL_457;
          }
          v273 = v267[12];
          v274 = *(_DWORD *)(v273 + 32);
          if (*(_BYTE *)(v273 + 4))
            break;
          if ((*(_BYTE *)(v273 + 36) & 2) != 0)
            goto LABEL_457;
          v295 = *(_QWORD *)(a1 + 600) + 56 * v274;
          v296 = *(_QWORD *)(v295 + 32);
          v279 = (uint64_t *)(v295 + 32);
          *(_QWORD *)(*(_QWORD *)v279[2] + 8 * (v296 + *(v279 - 1))) = v269;
LABEL_456:
          ++*v279;
LABEL_457:
          v267 += 20;
          ++v269;
          if (v267 == v268)
            goto LABEL_487;
        }
        if (v274 == -1)
          goto LABEL_457;
        v275 = *(_QWORD *)(a1 + 576) + 56 * v274;
        v277 = *(_QWORD *)(v275 + 24);
        v276 = (uint64_t *)(v275 + 24);
        v278 = (_QWORD *)v276[3];
        *(_QWORD *)(*v278 + 8 * (v276[1] + v277)) = v269;
        ++v276[1];
        v279 = v276 + 2;
        v280 = *(_DWORD *)(v271 + 48);
        if (v280 != -1)
        {
          v281 = *v276;
          v282 = *v279;
          v283 = *v279 + *v276;
          v284 = v278[7];
          if (v283 <= *v276)
          {
LABEL_469:
            v287 = v284 + 16 * v283;
          }
          else
          {
            v285 = 16 * v281;
            while (1)
            {
              v286 = *(_DWORD *)(v284 + v285);
              if (v286 >= v280)
                break;
              ++v281;
              v285 += 16;
              if (!--v282)
                goto LABEL_469;
            }
            if (v286 <= v280)
              goto LABEL_471;
            if (v283 + 1 != v281)
            {
              memmove((void *)(16 * v283 - (16 * (v283 + 1) - (v284 + 16 * v281)) + 32), (const void *)(v284 + 16 * v281), 16 * (v283 + 1) - 16 * v281);
              v284 = v278[7];
              v272 = v267[11];
            }
            v287 = v284 + 16 * v281;
          }
          *(_DWORD *)v287 = v280;
          *(_QWORD *)(v287 + 8) = -1;
          ++v278[6];
          ++*v279;
        }
LABEL_471:
        v288 = *(_DWORD *)(v272 + 48);
        if (v288 == -1)
          goto LABEL_457;
        v289 = *v276;
        v290 = *v279;
        v291 = *v279 + *v276;
        v292 = v278[7];
        if (v291 <= *v276)
        {
LABEL_454:
          v270 = v292 + 16 * v291;
        }
        else
        {
          v293 = 16 * v289;
          while (1)
          {
            v294 = *(_DWORD *)(v292 + v293);
            if (v294 >= v288)
              break;
            ++v289;
            v293 += 16;
            if (!--v290)
              goto LABEL_454;
          }
          if (v294 <= v288)
            goto LABEL_457;
          if (v291 + 1 != v289)
          {
            memmove((void *)(v292 + 16 * v291 - (16 * (v291 + 1) - 16 * v289) + 32), (const void *)(v292 + 16 * v289), 16 * (v291 + 1) - 16 * v289);
            v292 = v278[7];
          }
          v270 = v292 + 16 * v289;
        }
        *(_DWORD *)v270 = v288;
        *(_QWORD *)(v270 + 8) = -1;
        ++v278[6];
        goto LABEL_456;
      }
LABEL_487:
      v297 = 3 * *(_QWORD *)(a1 + 544);
      v298 = *(_QWORD *)(a1 + 520);
      v299 = (*(_QWORD *)(a1 + 528) - v298) >> 3;
      if (v297 <= v299)
      {
        if (v297 < v299)
          *(_QWORD *)(a1 + 528) = v298 + 24 * *(_QWORD *)(a1 + 544);
      }
      else
      {
        sub_23945E108(a1 + 520, v297 - v299);
      }
      v300 = *(_QWORD *)(a1 + 552);
      v301 = *(_QWORD *)(a1 + 560);
      if (v300 != v301)
      {
        v302 = 0;
        do
        {
          if (*(_DWORD *)v300 != -1)
          {
            *(_QWORD *)(v300 + 8) = v302;
            v302 += 3;
          }
          v300 += 16;
        }
        while (v300 != v301);
      }
      if (!*((_QWORD *)&v343 + 1))
        sub_2394172E0();
      (*(void (**)(_QWORD))(**((_QWORD **)&v343 + 1) + 48))(*((_QWORD *)&v343 + 1));
      v303 = (__int128 *)*((_QWORD *)&v343 + 1);
      if (*((__int128 **)&v343 + 1) == &v342)
      {
        v304 = 4;
        v303 = &v342;
      }
      else
      {
        if (!*((_QWORD *)&v343 + 1))
        {
LABEL_502:
          if (v317[0])
          {
            v317[1] = v317[0];
            operator delete(v317[0]);
          }
          kdebug_trace();
          return 0;
        }
        v304 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v303 + 8 * v304))();
      goto LABEL_502;
    }
    v244 = v227 + 16 * v229;
    if (((v229 - 1) & 0xFFFFFFFFFFFFFFFLL) != 0)
    {
      v245 = ((v229 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      v246 = v227 + 16;
      v247 = v245 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(_DWORD *)(v246 - 16) = -1;
        *(_DWORD *)v246 = -1;
        *(_QWORD *)(v246 - 8) = -1;
        *(_QWORD *)(v246 + 8) = -1;
        v246 += 32;
        v247 -= 2;
      }
      while (v247);
      if (v245 == (v245 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_424;
      v227 += 16 * (v245 & 0x1FFFFFFFFFFFFFFELL);
    }
    do
    {
      *(_DWORD *)v227 = -1;
      *(_QWORD *)(v227 + 8) = -1;
      v227 += 16;
    }
    while (v227 != v244);
LABEL_424:
    *(_QWORD *)(a1 + 560) = v244;
    goto LABEL_452;
  }
  if (v3)
    v45 = v44 >= v3;
  else
    v45 = 0;
  result = !v45;
  if (!v45)
    v12 = 1;
  if (!v12)
    goto LABEL_100;
  return result;
}

void sub_239C46C40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,void *a44)
{
  if (__p)
    operator delete(__p);
  free(a27);
  free(a30);
  free(a33);
  free(a36);
  free(a39);
  JUMPOUT(0x239C46DE0);
}

void sub_239C46D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v14 = *(_QWORD *)(v13 - 168);
  if (!v14)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
  v15 = *(_QWORD **)(v13 - 168);
  if (v15 == (_QWORD *)(v13 - 192))
  {
    v16 = 4;
    v15 = (_QWORD *)(v13 - 192);
  }
  else
  {
    if (!v15)
      goto LABEL_8;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_8:
  if (a13)
    JUMPOUT(0x239C46E0CLL);
  JUMPOUT(0x239C46E10);
}

void sub_239C46D60()
{
  JUMPOUT(0x239C46E10);
}

void sub_239C46D68(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_239C46D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_239C292B0((uint64_t)va);
  sub_239C292B0(v4 - 192);
  JUMPOUT(0x239C46DACLL);
}

void sub_239C46DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  void *v45;

  if (__p)
    operator delete(__p);
  v45 = *(void **)(v43 - 192);
  if (v45)
  {
    *(_QWORD *)(v43 - 184) = v45;
    operator delete(v45);
  }
  if (a42)
    operator delete(a42);
  sub_239C25A28();
  _Unwind_Resume(a1);
}

_QWORD *sub_239C46E1C(uint64_t a1, double *a2, uint64_t a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t **v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v32;
  float64x2_t v33;
  uint64_t v34;
  float64x2_t v37;
  float64x2_t v44;
  float64_t v46;
  unint64_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v50;
  float64x2_t v54;
  float64x2_t v57;
  unint64_t v60;
  float64x2_t v61;
  unint64_t v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  float64x2_t v88;
  __int128 v89;
  _QWORD *result;
  float64x2_t v91;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  float64x2_t v97;
  float64x2_t v99;
  float64x2_t v100;
  int v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  double v106;
  float64x2_t v107;
  double v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  int64x2_t v127;
  float64x2_t v128;
  int64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  double v135;
  double v137;
  float64x2_t v139;
  double v141;
  float64x2_t v142;
  double v144;
  double v145;
  float64x2_t v146;
  float64x2_t v147;
  double v148;
  float64x2_t v149;
  double v150;
  float64x2_t v151;
  float64x2_t v152;
  double v153;
  float64x2_t v154;
  double v155;
  float64x2_t v156;
  float64x2_t v157;
  double v158;
  float64x2_t v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  int64x2_t v166;
  float64x2_t v167;
  int8x16_t v168;
  int64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  double v175;
  double v176;
  double v178;
  double v180;
  float64x2_t v182;
  double v184;
  float64x2_t v185;
  double v187;
  float64x2_t v188;
  float64x2_t v189[3];
  float64x2_t v190;
  double v191;
  _BYTE v192[72];
  double v193;
  double v194;
  double v195;
  __int128 v196;
  double v197;
  float64x2_t v198;
  __int128 v199;
  double v200;
  uint64_t v201;
  __int128 v202;
  float64x2_t v203[8];

  v10 = (float64x2_t **)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 48) + 16;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 40) + 16;
  *(_QWORD *)(a1 + 32) = v11;
  memset(v192, 0, sizeof(v192));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)v192;
  v12 = *(_OWORD *)&v192[16];
  v13 = *(_OWORD *)&v192[32];
  v14 = *(_OWORD *)&v192[48];
  *(_QWORD *)(a3 + 136) = *(_QWORD *)&v192[64];
  *(_OWORD *)(a3 + 120) = v14;
  *(_OWORD *)(a3 + 104) = v13;
  *(_OWORD *)(a3 + 88) = v12;
  v198 = 0u;
  v199 = 0u;
  BYTE8(v199) = 1;
  v200 = 0.0;
  v201 = 1;
  memset(v189, 0, sizeof(v189));
  v190 = 0u;
  v191 = 0.0;
  *(float64x2_t *)v192 = *(float64x2_t *)((char *)&v203[3] + 8);
  *(float64x2_t *)&v192[48] = *(float64x2_t *)((char *)&v203[6] + 8);
  *(float64x2_t *)&v192[32] = *(float64x2_t *)((char *)&v203[5] + 8);
  *(float64x2_t *)&v192[16] = *(float64x2_t *)((char *)&v203[4] + 8);
  memset(v203, 0, sizeof(v203));
  v202 = 0u;
  *(_QWORD *)&v192[64] = 0;
  v193 = 0.0;
  v194 = 0.0;
  v195 = 0.0;
  v197 = 0.0;
  v196 = *(__int128 *)((char *)v203 + 8);
  sub_239C23688(a1 + 16, (uint64_t)&v198, (uint64_t)v189, *(float64x2_t *)((char *)v203 + 8), 0.0, *(float64x2_t *)((char *)&v203[6] + 8));
  *(_QWORD *)&v28.f64[0] = v199;
  v29.f64[0] = 1.0 / v200;
  v30.f64[1] = v198.f64[1];
  _Q7.f64[0] = 0.0;
  v32.f64[0] = -1.0 / (v200 * v200);
  v33 = vmulq_n_f64(v198, v32.f64[0]);
  v34 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v34 + 24))
  {
    _V1.D[1] = v189[0].f64[1];
    _Q5.f64[1] = v189[2].f64[0];
    _V18.D[1] = v190.f64[1];
    v37.f64[0] = 0.0;
    v37.f64[1] = 1.0 / v200;
    __asm { FMLA            D23, D7, V1.D[1] }
    v15.f64[0] = _D23 + v29.f64[0] * v189[1].f64[0];
    __asm { FMLA            D23, D7, V5.D[1] }
    _Q5.f64[0] = _D23 + v29.f64[0] * v189[2].f64[1];
    v44 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v200), v190.f64[0]), v37, v190, 1), (float64x2_t)0, v191);
    __asm { FMLA            D2, D7, V18.D[1] }
    v19.f64[0] = _D2 + v29.f64[0] * v191;
    v17 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v200), v189[0].f64[0]), v37, v189[0], 1), (float64x2_t)0, v189[1].f64[0]), (float64x2_t)0);
    v20 = vaddq_f64(v15, (float64x2_t)0);
    v16 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v200), v189[1].f64[1]), v37, *(float64x2_t *)((char *)&v189[1] + 8), 1), (float64x2_t)0, v189[2].f64[1]), (float64x2_t)0);
    v21 = vaddq_f64(_Q5, (float64x2_t)0);
    v15 = vaddq_f64(v44, (float64x2_t)0);
    v22 = vaddq_f64(v19, (float64x2_t)0);
    v46 = v16.f64[1];
    v47 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    v25 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
  }
  else
  {
    v17.f64[0] = 0.0;
    v25.f64[0] = 0.0;
    v20.f64[0] = 0.0;
    v16.f64[0] = 0.0;
    v46 = 0.0;
    v21.f64[0] = 0.0;
    v15.f64[0] = 0.0;
    v47 = 0;
    v22.f64[0] = 0.0;
  }
  v48 = vmulq_n_f64(v198, v29.f64[0]);
  *(_QWORD *)&v49 = *(_OWORD *)&vmulq_f64(v28, v32);
  v50 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
  {
    _V4.D[1] = *(_QWORD *)&v192[8];
    _Q24.f64[1] = *(float64_t *)&v192[32];
    _V28.D[1] = *(_QWORD *)&v192[56];
    _Q7.f64[1] = 1.0 / v200;
    v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v200), *(double *)v192), _Q7, *(float64x2_t *)v192, 1), (float64x2_t)0, *(double *)&v192[16]);
    _D9 = 0;
    __asm { FMLA            D10, D9, V4.D[1] }
    v30.f64[0] = _D10 + v29.f64[0] * *(double *)&v192[16];
    v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v200), *(double *)&v192[24]), _Q7, *(float64x2_t *)&v192[24], 1), (float64x2_t)0, *(double *)&v192[40]);
    __asm { FMLA            D10, D9, V24.D[1] }
    _Q24.f64[0] = _D10 + v29.f64[0] * *(double *)&v192[40];
    v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v200), *(double *)&v192[48]), _Q7, *(float64x2_t *)&v192[48], 1), (float64x2_t)0, *(double *)&v192[64]);
    __asm { FMLA            D5, D9, V28.D[1] }
    _Q7.f64[0] = _D5 + v29.f64[0] * *(double *)&v192[64];
    _Q5 = vaddq_f64(v54, (float64x2_t)0);
    v23 = vaddq_f64(v30, (float64x2_t)0);
    v32 = vaddq_f64(v57, (float64x2_t)0);
    v24 = vaddq_f64(_Q24, (float64x2_t)0);
    v30 = vaddq_f64(v26, (float64x2_t)0);
    _Q7 = vaddq_f64(_Q7, (float64x2_t)0);
    v26.f64[0] = v32.f64[1];
    v27 = (float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL);
    v60 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  }
  else
  {
    _Q5.f64[0] = 0.0;
    v60 = 0;
    v23.f64[0] = 0.0;
    v32.f64[0] = 0.0;
    v26.f64[0] = 0.0;
    v24.f64[0] = 0.0;
    v30.f64[0] = 0.0;
    v27.f64[0] = 0.0;
  }
  v61 = vmulq_f64(v28, v29);
  v62 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  v63 = 0.0;
  if (*(_BYTE *)(v34 + 24))
  {
    v64.f64[0] = v33.f64[0];
    v64.f64[1] = v50.f64[0];
    v5.f64[0] = v49 * v193;
    v6.f64[0] = v49 * v194;
    v17.f64[1] = v25.f64[0];
    v16.f64[1] = v46;
    v25.f64[0] = v49 * v195;
    *(_QWORD *)&v15.f64[1] = v47;
    v17 = vmlaq_n_f64(v17, v64, v193);
    *(_QWORD *)&v65 = *(_OWORD *)&vaddq_f64(v20, v5);
    v16 = vmlaq_n_f64(v16, v64, v194);
    *(_QWORD *)&v66 = *(_OWORD *)&vaddq_f64(v21, v6);
    v15 = vmlaq_n_f64(v15, v64, v195);
    v20 = vaddq_f64(v22, v25);
    v67 = v16.f64[1];
    *(_QWORD *)&v68 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    *(_QWORD *)&v69 = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u64[0];
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
    {
LABEL_9:
      v33.f64[1] = v50.f64[0];
      v50.f64[0] = v49 * *(double *)&v196;
      v4.f64[0] = v49 * *((double *)&v196 + 1);
      *(_QWORD *)&_Q5.f64[1] = v60;
      v32.f64[1] = v26.f64[0];
      v26.f64[0] = v49 * v197;
      v30.f64[1] = v27.f64[0];
      _Q5 = vmlaq_n_f64(_Q5, v33, *(double *)&v196);
      *(_QWORD *)&v50.f64[0] = *(_OWORD *)&vaddq_f64(v23, v50);
      v32 = vmlaq_n_f64(v32, v33, *((double *)&v196 + 1));
      *(_QWORD *)&v70 = *(_OWORD *)&vaddq_f64(v24, v4);
      v30 = vmlaq_n_f64(v30, v33, v197);
      *(_QWORD *)&v63 = *(_OWORD *)&vaddq_f64(_Q7, v26);
      v71 = v32.f64[1];
      *(_QWORD *)&v72 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      *(_QWORD *)&v73 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL).u64[0];
      goto LABEL_12;
    }
  }
  else
  {
    v17.f64[0] = 0.0;
    v68 = 0.0;
    v65 = 0.0;
    v16.f64[0] = 0.0;
    v67 = 0.0;
    v66 = 0.0;
    v15.f64[0] = 0.0;
    v69 = 0.0;
    v20.f64[0] = 0.0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
      goto LABEL_9;
  }
  _Q5.f64[0] = 0.0;
  v72 = 0.0;
  v50.f64[0] = 0.0;
  v32.f64[0] = 0.0;
  v71 = 0.0;
  v70 = 0.0;
  v30.f64[0] = 0.0;
  v73 = 0.0;
LABEL_12:
  v33.f64[0] = (*v10)[1].f64[0];
  *(_QWORD *)&v48.f64[1] = v62;
  v74 = vsubq_f64(**v10, v48);
  v75 = vsubq_f64(v33, v61);
  *(_QWORD *)&v76 = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
  if (*(_BYTE *)(v34 + 24))
  {
    v61.f64[0] = *(float64_t *)(a3 + 16);
    v27.f64[0] = *(float64_t *)(a3 + 40);
    v3.f64[0] = *(float64_t *)(a3 + 64);
    v77 = *(float64x2_t *)(a3 + 48);
    v78 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v17.f64[0]), (float64x2_t)xmmword_239EC68E0, v68), (float64x2_t)0, v65);
    v17.f64[0] = v17.f64[0] * 0.0 + v68 * 0.0 - v65;
    v79 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v16.f64[0]), (float64x2_t)xmmword_239EC68E0, v67), (float64x2_t)0, v66);
    v16.f64[0] = v16.f64[0] * 0.0 + v67 * 0.0 - v66;
    v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v15.f64[0]), (float64x2_t)xmmword_239EC68E0, v69), (float64x2_t)0, v20.f64[0]);
    v15.f64[0] = v15.f64[0] * 0.0 + v69 * 0.0 - v20.f64[0];
    v17 = vaddq_f64(v17, v61);
    v20 = vaddq_f64(v79, *(float64x2_t *)(a3 + 24));
    v81 = vaddq_f64(v15, v3);
    *(float64x2_t *)a3 = vaddq_f64(v78, *(float64x2_t *)a3);
    *(float64_t *)(a3 + 16) = v17.f64[0];
    *(float64x2_t *)(a3 + 24) = v20;
    *(_QWORD *)(a3 + 40) = *(_OWORD *)&vaddq_f64(v16, v27);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(v80, v77);
    *(float64_t *)(a3 + 64) = v81.f64[0];
  }
  else
  {
    *(_QWORD *)(a3 + 64) = 0;
    v81.f64[1] = 0.0;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  v82 = (float64x2_t *)(a3 + 72);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v81.f64[0] = *(float64_t *)(a3 + 88);
    v17.f64[0] = *(float64_t *)(a3 + 112);
    v20.f64[0] = *(float64_t *)(a3 + 136);
    v83 = *(float64x2_t *)(a3 + 120);
    v84 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, _Q5.f64[0]), (float64x2_t)xmmword_239EC68E0, v72), (float64x2_t)0, v50.f64[0]);
    _Q5.f64[0] = _Q5.f64[0] * 0.0 + v72 * 0.0 - v50.f64[0];
    v85 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v32.f64[0]), (float64x2_t)xmmword_239EC68E0, v71), (float64x2_t)0, v70);
    v32.f64[0] = v32.f64[0] * 0.0 + v71 * 0.0 - v70;
    v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v30.f64[0]), (float64x2_t)xmmword_239EC68E0, v73), (float64x2_t)0, v63);
    v30.f64[0] = v30.f64[0] * 0.0 + v73 * 0.0 - v63;
    v87 = *(_OWORD *)&vaddq_f64(v32, v17);
    v88 = vaddq_f64(v85, *(float64x2_t *)(a3 + 96));
    *(float64x2_t *)(a3 + 72) = vaddq_f64(v84, *(float64x2_t *)(a3 + 72));
    *(_QWORD *)(a3 + 88) = *(_OWORD *)&vaddq_f64(_Q5, v81);
    *(float64x2_t *)(a3 + 96) = v88;
    *(_QWORD *)(a3 + 112) = v87;
    *(float64x2_t *)(a3 + 120) = vaddq_f64(v86, v83);
    *(_QWORD *)(a3 + 136) = *(_OWORD *)&vaddq_f64(v30, v20);
  }
  else
  {
    *(_QWORD *)(a3 + 136) = 0;
    *(_OWORD *)(a3 + 104) = 0u;
    *(_OWORD *)(a3 + 120) = 0u;
    *v82 = 0u;
    *(_OWORD *)(a3 + 88) = 0u;
  }
  *(float64_t *)(a1 + 72) = v75.f64[0];
  *(float64_t *)&v89 = v74.f64[0];
  *((double *)&v89 + 1) = v76;
  *(_OWORD *)(a1 + 56) = v89;
  result = *(_QWORD **)(a1 + 88);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 24))(result, a1 + 56);
    v75.f64[0] = *(float64_t *)(a1 + 72);
    v74 = *(float64x2_t *)(a1 + 56);
    *(_QWORD *)&v76 = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
  }
  v91.f64[0] = v74.f64[0];
  v91.f64[1] = v76;
  _Q0 = vmulq_f64(v91, v91);
  _Q0.f64[0] = a2[1] * (_Q0.f64[0] + v76 * v76 + v75.f64[0] * v75.f64[0]);
  v93 = a2[3];
  v94 = 1.0;
  if (_Q0.f64[0] > v93)
  {
    v95 = sqrt(_Q0.f64[0]);
    _Q0.f64[0] = -(v93 - a2[4] * v95);
    v94 = a2[2] / v95;
  }
  _Q5.f64[0] = sqrt(v94);
  v74.f64[1] = v76;
  *(float64x2_t *)(a1 + 56) = vmulq_n_f64(v74, _Q5.f64[0]);
  *(_QWORD *)(a1 + 72) = *(_OWORD *)&vmulq_f64(v75, _Q5);
  *(float64_t *)(a1 + 80) = _Q0.f64[0];
  v96 = *(_QWORD *)(a1 + 88);
  if (v96)
  {
    v188 = _Q5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v96 + 16))(*(_QWORD *)(a1 + 88));
    v100 = v188;
    v101 = (int)result;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 4))
    {
      switch((int)result)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v96 + 32);
          _Q2.f64[0] = *(float64_t *)(v96 + 56);
          v99.f64[0] = *(float64_t *)(v96 + 80);
          _Q0 = vmulq_f64(v188, _Q0);
          v102.f64[0] = v188.f64[0];
          v102.f64[1] = v188.f64[0];
          v103 = vmulq_f64(v102, *(float64x2_t *)(v96 + 16));
          _Q2 = vmulq_f64(v188, _Q2);
          v104 = vmulq_f64(v102, *(float64x2_t *)(v96 + 40));
          v99 = vmulq_f64(v188, v99);
          v105 = vmulq_f64(v102, *(float64x2_t *)(v96 + 64));
          v102.f64[0] = *(float64_t *)(a3 + 16);
          v106 = *(double *)(a3 + 40);
          v107 = *(float64x2_t *)(a3 + 24);
          v108 = *(double *)(a3 + 64);
          v109 = *(float64x2_t *)(a3 + 48);
          v110 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, *(double *)a3), v104, *(float64x2_t *)a3, 1), v105, v102.f64[0]);
          v111 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], *(double *)a3), *(double *)(a3 + 8), _Q2.f64[0]), v102.f64[0], v99.f64[0]);
          v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v107.f64[0]), v104, v107, 1), v105, v106);
          v113 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v107.f64[0]), *(double *)(a3 + 32), _Q2.f64[0]), v106, v99.f64[0]);
          v97 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v103, v109.f64[0]), v104, v109, 1), v105, v108);
          v104.f64[0] = *(float64_t *)(a3 + 56);
          *(float64x2_t *)a3 = v110;
          *(double *)(a3 + 16) = v111;
          *(float64x2_t *)(a3 + 24) = v112;
          *(double *)(a3 + 40) = v113;
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v109.f64[0]), v104.f64[0], _Q2.f64[0]), v108, v99.f64[0]);
          goto LABEL_34;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v96 + 32);
          v121 = vmulq_f64(v188, _Q0);
          v122.f64[0] = v188.f64[0];
          v122.f64[1] = v188.f64[0];
          v123 = vmulq_f64(v122, *(float64x2_t *)(v96 + 16));
          v122.f64[0] = *(float64_t *)(a3 + 64);
          v124 = *(float64x2_t *)(a3 + 32);
          v125 = *(float64x2_t *)(a3 + 16);
          v126 = vmulq_f64(v123, *(float64x2_t *)a3);
          v127 = (int64x2_t)vmulq_f64(v121, v125);
          v128 = (float64x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v124, 8uLL);
          v99 = vmulq_laneq_f64(v121, v124, 1);
          v129 = (int64x2_t)vmulq_f64(v123, v128);
          _Q0 = vmulq_f64(v121, v122);
          v97 = vmulq_f64(v123, *(float64x2_t *)(a3 + 48));
          _Q2 = (float64x2_t)vextq_s8((int8x16_t)v129, (int8x16_t)v99, 8uLL);
          *(float64x2_t *)a3 = v126;
          *(int64x2_t *)(a3 + 16) = vzip1q_s64(v127, v129);
          *(float64x2_t *)(a3 + 32) = _Q2;
          *(float64x2_t *)(a3 + 48) = v97;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 2:
          _Q0.f64[0] = v188.f64[0] * *(double *)(v96 + 16);
          v97.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v97 = vmulq_f64(v97, _Q0);
          v130 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), _Q0.f64[0]);
          v99 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), _Q0.f64[0]);
          v131 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), _Q0.f64[0]);
          _Q0 = vmulq_n_f64(*(float64x2_t *)a3, _Q0.f64[0]);
          *(float64x2_t *)a3 = _Q0;
          *(float64x2_t *)(a3 + 16) = v131;
          *(float64x2_t *)(a3 + 32) = v99;
          *(float64x2_t *)(a3 + 48) = v130;
          *(float64_t *)(a3 + 64) = v97.f64[0];
          break;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 64);
          _Q0 = vmulq_f64(v188, _Q0);
          v99 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v188.f64[0]);
          v132 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v188.f64[0]);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v188.f64[0]);
          v97 = vmulq_n_f64(*(float64x2_t *)a3, v188.f64[0]);
          *(float64x2_t *)a3 = v97;
          *(float64x2_t *)(a3 + 16) = _Q2;
          *(float64x2_t *)(a3 + 32) = v132;
          *(float64x2_t *)(a3 + 48) = v99;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 4:
          result = (*(_QWORD *(**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v96 + 64))(v189, v96, v188.f64[0]);
          v100 = v188;
          _Q2.f64[0] = v189[2].f64[1];
          v99.f64[0] = v191;
          v133 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v135 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v137 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189[0], *(double *)a3), *(float64x2_t *)((char *)&v189[1] + 8), *(float64x2_t *)a3, 1), v190, v133);
          __asm { FMLA            D21, D2, V7.D[1] }
          v141 = _D21 + v191 * v133;
          v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v189[1] + 8), _Q17, 1), v190, v135);
          __asm { FMLA            D21, D2, V17.D[1] }
          v144 = _D21 + v191 * v135;
          v97 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v189[1] + 8), _Q19, 1), v190, v137);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v139;
          *(double *)(a3 + 16) = v141;
          *(float64x2_t *)(a3 + 24) = v142;
          *(double *)(a3 + 40) = v144;
          _Q0.f64[0] = _Q0.f64[0] + v99.f64[0] * v137;
LABEL_34:
          *(float64x2_t *)(a3 + 48) = v97;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 4))
    {
      switch(v101)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v96 + 32);
          _Q2.f64[0] = *(float64_t *)(v96 + 56);
          v99.f64[0] = *(float64_t *)(v96 + 80);
          *(_QWORD *)&v145 = *(_OWORD *)&vmulq_f64(v100, _Q0);
          v146.f64[0] = v100.f64[0];
          v146.f64[1] = v100.f64[0];
          v147 = vmulq_f64(v146, *(float64x2_t *)(v96 + 16));
          *(_QWORD *)&v148 = *(_OWORD *)&vmulq_f64(v100, _Q2);
          v149 = vmulq_f64(v146, *(float64x2_t *)(v96 + 40));
          *(_QWORD *)&v150 = *(_OWORD *)&vmulq_f64(v100, v99);
          v151 = vmulq_f64(v146, *(float64x2_t *)(v96 + 64));
          v146.f64[0] = *(float64_t *)(a3 + 88);
          v152 = *(float64x2_t *)(a3 + 72);
          v153 = *(double *)(a3 + 112);
          v154 = *(float64x2_t *)(a3 + 96);
          v155 = *(double *)(a3 + 136);
          v156 = *(float64x2_t *)(a3 + 120);
          v157 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v147, v152.f64[0]), v149, v152, 1), v151, v146.f64[0]);
          v158 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v145, v152.f64[0]), *(double *)(a3 + 80), v148), v146.f64[0], v150);
          v159 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v147, v154.f64[0]), v149, v154, 1), v151, v153);
          v152.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v145, v154.f64[0]), *(double *)(a3 + 104), v148), v153, v150);
          v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v147, v156.f64[0]), v149, v156, 1), v151, v155);
          v161 = vmlad_n_f64(vmuld_n_f64(v145, v156.f64[0]), *(double *)(a3 + 128), v148);
          *(float64x2_t *)(a3 + 72) = v157;
          *(double *)(a3 + 88) = v158;
          *(float64x2_t *)(a3 + 96) = v159;
          *(float64_t *)(a3 + 112) = v152.f64[0];
          _Q0.f64[0] = vmlad_n_f64(v161, v155, v150);
          goto LABEL_44;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v96 + 32);
          _Q0 = vmulq_f64(v100, _Q0);
          v100.f64[1] = v100.f64[0];
          v162 = vmulq_f64(v100, *(float64x2_t *)(v96 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 136);
          v163 = *(float64x2_t *)(a3 + 104);
          v164 = *(float64x2_t *)(a3 + 88);
          v165 = vmulq_f64(v162, *v82);
          v166 = (int64x2_t)vmulq_f64(_Q0, v164);
          v167 = (float64x2_t)vextq_s8((int8x16_t)v164, (int8x16_t)v163, 8uLL);
          v168 = (int8x16_t)vmulq_laneq_f64(_Q0, v163, 1);
          v169 = (int64x2_t)vmulq_f64(v162, v167);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, _Q2);
          v170 = vmulq_f64(v162, *(float64x2_t *)(a3 + 120));
          *v82 = v165;
          *(int64x2_t *)(a3 + 88) = vzip1q_s64(v166, v169);
          *(int8x16_t *)(a3 + 104) = vextq_s8((int8x16_t)v169, v168, 8uLL);
          *(float64x2_t *)(a3 + 120) = v170;
          goto LABEL_42;
        case 2:
          _Q0.f64[0] = v100.f64[0] * *(double *)(v96 + 16);
          v97.f64[0] = *(float64_t *)(a3 + 136);
          v171 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), _Q0.f64[0]);
          v172 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), _Q0.f64[0]);
          v173 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), _Q0.f64[0]);
          *v82 = vmulq_n_f64(*v82, _Q0.f64[0]);
          *(float64x2_t *)(a3 + 88) = v173;
          *(float64x2_t *)(a3 + 104) = v172;
          *(float64x2_t *)(a3 + 120) = v171;
          *(_QWORD *)(a3 + 136) = *(_OWORD *)&vmulq_f64(v97, _Q0);
          return result;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 136);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v100, _Q0);
          v117 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v100.f64[0]);
          v118 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v100.f64[0]);
          v119 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v100.f64[0]);
          v120 = vmulq_n_f64(*v82, v100.f64[0]);
          goto LABEL_41;
        case 4:
          result = (*(_QWORD *(**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v96 + 64))(v189, v96, v100.f64[0]);
          _D2 = v189[2].f64[1];
          v175 = v191;
          v176 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v178 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v180 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v182 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189[0], _Q7.f64[0]), *(float64x2_t *)((char *)&v189[1] + 8), _Q7, 1), v190, v176);
          __asm { FMLA            D21, D2, V7.D[1] }
          v184 = _D21 + v191 * v176;
          v185 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v189[1] + 8), _Q17, 1), v190, v178);
          __asm { FMLA            D21, D2, V17.D[1] }
          v187 = _D21 + v191 * v178;
          v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v189[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v189[1] + 8), _Q19, 1), v190, v180);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)(a3 + 72) = v182;
          *(double *)(a3 + 88) = v184;
          *(float64x2_t *)(a3 + 96) = v185;
          *(double *)(a3 + 112) = v187;
          _Q0.f64[0] = _Q0.f64[0] + v175 * v180;
LABEL_44:
          *(float64x2_t *)(a3 + 120) = v160;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 64);
      _Q0 = vmulq_f64(_Q5, _Q0);
      v114 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), _Q5.f64[0]);
      v115 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), _Q5.f64[0]);
      v116 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), _Q5.f64[0]);
      *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, _Q5.f64[0]);
      *(float64x2_t *)(a3 + 16) = v116;
      *(float64x2_t *)(a3 + 32) = v115;
      *(float64x2_t *)(a3 + 48) = v114;
      *(float64_t *)(a3 + 64) = _Q0.f64[0];
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 136);
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(_Q5, _Q0);
      v117 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), _Q5.f64[0]);
      v118 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), _Q5.f64[0]);
      v119 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), _Q5.f64[0]);
      v120 = vmulq_n_f64(*v82, _Q5.f64[0]);
LABEL_41:
      *v82 = v120;
      *(float64x2_t *)(a3 + 88) = v119;
      *(float64x2_t *)(a3 + 104) = v118;
      *(float64x2_t *)(a3 + 120) = v117;
LABEL_42:
      *(float64_t *)(a3 + 136) = _Q0.f64[0];
    }
  }
  return result;
}

_QWORD *sub_239C47978(uint64_t a1, double *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  double v18;
  __int128 v19;
  float64x2_t v20;
  float64x2_t v21;
  _QWORD *result;
  unint64_t v24;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t *v35;
  float64x2_t *v36;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  int v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  double v48;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  float64x2_t v54;
  double v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  int64x2_t v69;
  float64x2_t v70;
  int64x2_t v71;
  float64x2_t v72;
  double v73;
  double v75;
  double v77;
  float64x2_t v79;
  double v81;
  float64x2_t v82;
  double v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int64x2_t v102;
  float64x2_t v103;
  int64x2_t v104;
  float64x2_t v105;
  double v106;
  double v108;
  double v110;
  float64x2_t v112;
  double v114;
  float64x2_t v115;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  double v125;
  float64x2_t v127;
  uint64_t v128;
  float64x2_t v129;
  uint64_t v130;
  char v131;
  float64x2_t v132[3];
  float64x2_t v133;
  _BYTE v134[80];
  __int128 v135;
  uint64_t v136;

  v129 = 0uLL;
  v14 = a1 + 96;
  v130 = 0;
  v131 = 1;
  v15 = *(_QWORD *)(a1 + 80) + 16;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72) + 16;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 88) + 16;
  v136 = 0;
  *(_OWORD *)&v134[64] = 0u;
  v135 = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  v128 = a3;
  memset(v134, 0, 64);
  v133 = 0u;
  memset(v132, 0, sizeof(v132));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v134[8];
  v16 = *(_OWORD *)&v134[24];
  v17 = *(_OWORD *)&v134[40];
  v18 = *(double *)&v134[56];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&v134[56];
  *(_OWORD *)(a3 + 104) = v17;
  *(_OWORD *)(a3 + 88) = v16;
  v19 = v135;
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 144) = v19;
  sub_239C24464((float64x2_t **)(a1 + 16), &v129, &v128, *(double *)&v19, *(double *)&v17, v18, a7, a8, a9, a10, a11);
  v21.f64[1] = v129.f64[1];
  *(float64x2_t *)(a1 + 96) = v129;
  *(_QWORD *)(a1 + 112) = v130;
  result = *(_QWORD **)(a1 + 128);
  if (result)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 24))(result, v14);
  v21.f64[0] = *(float64_t *)(v14 + 16);
  _Q1 = *(float64x2_t *)v14;
  v24 = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
  _D4 = *(_QWORD *)(v14 + 8);
  __asm { FMLA            D3, D4, V1.D[1] }
  v31 = a2[1] * (_D3 + v21.f64[0] * v21.f64[0]);
  v32 = a2[3];
  v33 = 1.0;
  if (v31 > v32)
  {
    v34 = sqrt(v31);
    v31 = -(v32 - a2[4] * v34);
    v33 = a2[2] / v34;
  }
  v35 = (float64x2_t *)(a3 + 72);
  v36 = (float64x2_t *)(a3 + 144);
  v20.f64[0] = sqrt(v33);
  *(_QWORD *)&_Q1.f64[1] = v24;
  _Q0 = vmulq_f64(v21, v20);
  *(float64x2_t *)(a1 + 96) = vmulq_n_f64(_Q1, v20.f64[0]);
  *(float64_t *)(a1 + 112) = _Q0.f64[0];
  *(double *)(a1 + 120) = v31;
  v38 = *(_QWORD *)(a1 + 128);
  if (v38)
  {
    v127 = v20;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 16))(*(_QWORD *)(a1 + 128));
    v43 = v127;
    v44 = (int)result;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      switch((int)result)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v38 + 32);
          _Q2.f64[0] = *(float64_t *)(v38 + 56);
          v42.f64[0] = *(float64_t *)(v38 + 80);
          _Q0 = vmulq_f64(v127, _Q0);
          v45.f64[0] = v127.f64[0];
          v45.f64[1] = v127.f64[0];
          v46 = vmulq_f64(v45, *(float64x2_t *)(v38 + 16));
          _Q2 = vmulq_f64(v127, _Q2);
          v41 = vmulq_f64(v45, *(float64x2_t *)(v38 + 40));
          v42 = vmulq_f64(v127, v42);
          v47 = vmulq_f64(v45, *(float64x2_t *)(v38 + 64));
          v45.f64[0] = *(float64_t *)(a3 + 16);
          v48 = *(double *)(a3 + 40);
          v49 = *(float64x2_t *)(a3 + 24);
          v50 = *(double *)(a3 + 64);
          v51 = *(float64x2_t *)(a3 + 48);
          v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, *(double *)a3), v41, *(float64x2_t *)a3, 1), v47, v45.f64[0]);
          v53 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], *(double *)a3), *(double *)(a3 + 8), _Q2.f64[0]), v45.f64[0], v42.f64[0]);
          v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v49.f64[0]), v41, v49, 1), v47, v48);
          v55 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v49.f64[0]), *(double *)(a3 + 32), _Q2.f64[0]), v48, v42.f64[0]);
          v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v51.f64[0]), v41, v51, 1), v47, v50);
          v41.f64[0] = *(float64_t *)(a3 + 56);
          *(float64x2_t *)a3 = v52;
          *(double *)(a3 + 16) = v53;
          *(float64x2_t *)(a3 + 24) = v54;
          *(double *)(a3 + 40) = v55;
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v51.f64[0]), v41.f64[0], _Q2.f64[0]), v50, v42.f64[0]);
          goto LABEL_19;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v38 + 32);
          v63 = vmulq_f64(v127, _Q0);
          v64.f64[0] = v127.f64[0];
          v64.f64[1] = v127.f64[0];
          v65 = vmulq_f64(v64, *(float64x2_t *)(v38 + 16));
          v64.f64[0] = *(float64_t *)(a3 + 64);
          v66 = *(float64x2_t *)(a3 + 32);
          v67 = *(float64x2_t *)(a3 + 16);
          v68 = vmulq_f64(v65, *(float64x2_t *)a3);
          v69 = (int64x2_t)vmulq_f64(v63, v67);
          v70 = (float64x2_t)vextq_s8((int8x16_t)v67, (int8x16_t)v66, 8uLL);
          v42 = vmulq_laneq_f64(v63, v66, 1);
          v71 = (int64x2_t)vmulq_f64(v65, v70);
          _Q0 = vmulq_f64(v63, v64);
          v39 = vmulq_f64(v65, *(float64x2_t *)(a3 + 48));
          _Q2 = (float64x2_t)vextq_s8((int8x16_t)v71, (int8x16_t)v42, 8uLL);
          v41 = (float64x2_t)vzip1q_s64(v69, v71);
          *(float64x2_t *)a3 = v68;
          *(float64x2_t *)(a3 + 16) = v41;
          *(float64x2_t *)(a3 + 32) = _Q2;
          *(float64x2_t *)(a3 + 48) = v39;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 2:
          _Q0.f64[0] = v127.f64[0] * *(double *)(v38 + 16);
          v39.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v39 = vmulq_f64(v39, _Q0);
          v72 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), _Q0.f64[0]);
          v42 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), _Q0.f64[0]);
          v41 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), _Q0.f64[0]);
          _Q0 = vmulq_n_f64(*(float64x2_t *)a3, _Q0.f64[0]);
          *(float64x2_t *)a3 = _Q0;
          *(float64x2_t *)(a3 + 16) = v41;
          *(float64x2_t *)(a3 + 32) = v42;
          *(float64x2_t *)(a3 + 48) = v72;
          *(float64_t *)(a3 + 64) = v39.f64[0];
          break;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 64);
          _Q0 = vmulq_f64(v127, _Q0);
          v42 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v127.f64[0]);
          v41 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v127.f64[0]);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v127.f64[0]);
          v39 = vmulq_n_f64(*(float64x2_t *)a3, v127.f64[0]);
          *(float64x2_t *)a3 = v39;
          *(float64x2_t *)(a3 + 16) = _Q2;
          *(float64x2_t *)(a3 + 32) = v41;
          *(float64x2_t *)(a3 + 48) = v42;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        case 4:
          result = (*(_QWORD *(**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v38 + 64))(v132, v38, v127.f64[0]);
          v43 = v127;
          _Q2.f64[0] = v132[2].f64[1];
          v41.f64[1] = v132[2].f64[0];
          v42.f64[0] = *(float64_t *)v134;
          v73 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v75 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v77 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v79 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132[0], *(double *)a3), *(float64x2_t *)((char *)&v132[1] + 8), *(float64x2_t *)a3, 1), v133, v73);
          __asm { FMLA            D21, D2, V7.D[1] }
          v81 = _D21 + *(double *)v134 * v73;
          v82 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v132[1] + 8), _Q17, 1), v133, v75);
          __asm { FMLA            D21, D2, V17.D[1] }
          v84 = _D21 + *(double *)v134 * v75;
          v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v132[1] + 8), _Q19, 1), v133, v77);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v79;
          *(double *)(a3 + 16) = v81;
          *(float64x2_t *)(a3 + 24) = v82;
          *(double *)(a3 + 40) = v84;
          _Q0.f64[0] = _Q0.f64[0] + v42.f64[0] * v77;
LABEL_19:
          *(float64x2_t *)(a3 + 48) = v39;
          *(float64_t *)(a3 + 64) = _Q0.f64[0];
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4))
    {
      switch(v44)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v38 + 32);
          _Q2.f64[0] = *(float64_t *)(v38 + 56);
          v42.f64[0] = *(float64_t *)(v38 + 80);
          _Q0 = vmulq_f64(v43, _Q0);
          v85.f64[0] = v43.f64[0];
          v85.f64[1] = v43.f64[0];
          v86 = vmulq_f64(v85, *(float64x2_t *)(v38 + 16));
          _Q2 = vmulq_f64(v43, _Q2);
          v41 = vmulq_f64(v85, *(float64x2_t *)(v38 + 40));
          v42 = vmulq_f64(v43, v42);
          v87 = vmulq_f64(v85, *(float64x2_t *)(v38 + 64));
          v85.f64[0] = *(float64_t *)(a3 + 88);
          v88 = *(float64x2_t *)(a3 + 72);
          v89 = *(double *)(a3 + 112);
          v90 = *(float64x2_t *)(a3 + 96);
          v91 = *(double *)(a3 + 136);
          v92 = *(float64x2_t *)(a3 + 120);
          v93 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v88.f64[0]), v41, v88, 1), v87, v85.f64[0]);
          v94 = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v88.f64[0]), *(double *)(a3 + 80), _Q2.f64[0]), v85.f64[0], v42.f64[0]);
          v95 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v90.f64[0]), v41, v90, 1), v87, v89);
          v88.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v90.f64[0]), *(double *)(a3 + 104), _Q2.f64[0]), v89, v42.f64[0]);
          v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v92.f64[0]), v41, v92, 1), v87, v91);
          v41.f64[0] = *(float64_t *)(a3 + 128);
          *(float64x2_t *)(a3 + 72) = v93;
          *(double *)(a3 + 88) = v94;
          *(float64x2_t *)(a3 + 96) = v95;
          *(float64_t *)(a3 + 112) = v88.f64[0];
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q0.f64[0], v92.f64[0]), v41.f64[0], _Q2.f64[0]), v91, v42.f64[0]);
          goto LABEL_27;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v38 + 32);
          v96 = vmulq_f64(v43, _Q0);
          v97.f64[0] = v43.f64[0];
          v97.f64[1] = v43.f64[0];
          v98 = vmulq_f64(v97, *(float64x2_t *)(v38 + 16));
          v97.f64[0] = *(float64_t *)(a3 + 136);
          v99 = *(float64x2_t *)(a3 + 104);
          v100 = *(float64x2_t *)(a3 + 88);
          v101 = vmulq_f64(v98, *v35);
          v102 = (int64x2_t)vmulq_f64(v96, v100);
          v103 = (float64x2_t)vextq_s8((int8x16_t)v100, (int8x16_t)v99, 8uLL);
          v42 = vmulq_laneq_f64(v96, v99, 1);
          v104 = (int64x2_t)vmulq_f64(v98, v103);
          _Q0 = vmulq_f64(v96, v97);
          v39 = vmulq_f64(v98, *(float64x2_t *)(a3 + 120));
          _Q2 = (float64x2_t)vextq_s8((int8x16_t)v104, (int8x16_t)v42, 8uLL);
          v41 = (float64x2_t)vzip1q_s64(v102, v104);
          *v35 = v101;
          *(float64x2_t *)(a3 + 88) = v41;
          *(float64x2_t *)(a3 + 104) = _Q2;
          *(float64x2_t *)(a3 + 120) = v39;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        case 2:
          _Q0.f64[0] = v43.f64[0] * *(double *)(v38 + 16);
          v39.f64[0] = *(float64_t *)(a3 + 136);
          _Q2 = *v35;
          v39 = vmulq_f64(v39, _Q0);
          v105 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), _Q0.f64[0]);
          v42 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), _Q0.f64[0]);
          v41 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), _Q0.f64[0]);
          _Q0 = vmulq_n_f64(*v35, _Q0.f64[0]);
          *v35 = _Q0;
          *(float64x2_t *)(a3 + 88) = v41;
          *(float64x2_t *)(a3 + 104) = v42;
          *(float64x2_t *)(a3 + 120) = v105;
          *(float64_t *)(a3 + 136) = v39.f64[0];
          break;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 136);
          _Q0 = vmulq_f64(v43, _Q0);
          v42 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v43.f64[0]);
          v41 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v43.f64[0]);
          _Q2 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v43.f64[0]);
          v39 = vmulq_n_f64(*v35, v43.f64[0]);
          *v35 = v39;
          *(float64x2_t *)(a3 + 88) = _Q2;
          *(float64x2_t *)(a3 + 104) = v41;
          *(float64x2_t *)(a3 + 120) = v42;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        case 4:
          result = (*(_QWORD *(**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v38 + 64))(v132, v38, v43.f64[0]);
          v43 = v127;
          _Q2.f64[0] = v132[2].f64[1];
          v41.f64[1] = v132[2].f64[0];
          v42.f64[0] = *(float64_t *)v134;
          v106 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v108 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v110 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v112 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132[0], _Q7.f64[0]), *(float64x2_t *)((char *)&v132[1] + 8), _Q7, 1), v133, v106);
          __asm { FMLA            D21, D2, V7.D[1] }
          v114 = _D21 + *(double *)v134 * v106;
          v115 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132[0], _Q17.f64[0]), *(float64x2_t *)((char *)&v132[1] + 8), _Q17, 1), v133, v108);
          __asm { FMLA            D21, D2, V17.D[1] }
          v117 = _D21 + *(double *)v134 * v108;
          v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132[0], _Q19.f64[0]), *(float64x2_t *)((char *)&v132[1] + 8), _Q19, 1), v133, v110);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)(a3 + 72) = v112;
          *(double *)(a3 + 88) = v114;
          *(float64x2_t *)(a3 + 96) = v115;
          *(double *)(a3 + 112) = v117;
          _Q0.f64[0] = _Q0.f64[0] + v42.f64[0] * v110;
LABEL_27:
          *(float64x2_t *)(a3 + 120) = v39;
          *(float64_t *)(a3 + 136) = _Q0.f64[0];
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 4))
    {
      switch(v44)
      {
        case 0:
          _Q0.f64[0] = *(float64_t *)(v38 + 32);
          _Q2.f64[0] = *(float64_t *)(v38 + 56);
          v42.f64[0] = *(float64_t *)(v38 + 80);
          v118.f64[0] = v43.f64[0];
          v118.f64[1] = v43.f64[0];
          v119 = vmulq_f64(v118, *(float64x2_t *)(v38 + 16));
          v120 = vmulq_f64(v118, *(float64x2_t *)(v38 + 40));
          v121 = vmulq_f64(v118, *(float64x2_t *)(v38 + 64));
          v118.f64[0] = *(float64_t *)(a3 + 160);
          v122 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v119, v36->f64[0]), v120, *v36, 1), v121, v118.f64[0]);
          _Q0.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(vmulq_f64(v43, _Q0).f64[0], v36->f64[0]), *(double *)(a3 + 152), vmulq_f64(v43, _Q2).f64[0]), v118.f64[0], vmulq_f64(v43, v42).f64[0]);
          goto LABEL_36;
        case 1:
          _Q0.f64[0] = *(float64_t *)(v38 + 32);
          v123.f64[0] = v43.f64[0];
          v123.f64[1] = v43.f64[0];
          v41.f64[0] = *(float64_t *)(a3 + 160);
          *(float64x2_t *)(a3 + 144) = vmulq_f64(vmulq_f64(v123, *(float64x2_t *)(v38 + 16)), *(float64x2_t *)(a3 + 144));
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(vmulq_f64(v43, _Q0), v41);
          return result;
        case 2:
          _Q0.f64[0] = v43.f64[0] * *(double *)(v38 + 16);
          v39.f64[0] = *(float64_t *)(a3 + 160);
          *v36 = vmulq_n_f64(*v36, _Q0.f64[0]);
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v39, _Q0);
          return result;
        case 3:
          _Q0.f64[0] = *(float64_t *)(a3 + 160);
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v43, _Q0);
          v43.f64[1] = v43.f64[0];
          v62 = vmulq_f64(v43, *v36);
          goto LABEL_34;
        case 4:
          result = (*(_QWORD *(**)(float64x2_t *__return_ptr, uint64_t, float64_t))(*(_QWORD *)v38 + 64))(v132, v38, v43.f64[0]);
          _D2 = v132[2].f64[1];
          v125 = *(double *)(a3 + 160);
          _Q7 = *v36;
          v122 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v132[0], v36->f64[0]), *(float64x2_t *)((char *)&v132[1] + 8), *v36, 1), v133, v125);
          __asm { FMLA            D0, D2, V7.D[1] }
          _Q0.f64[0] = _Q0.f64[0] + *(double *)v134 * v125;
LABEL_36:
          *v36 = v122;
          *(float64_t *)(a3 + 160) = _Q0.f64[0];
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 64);
      _Q0 = vmulq_f64(v20, _Q0);
      v56 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v20.f64[0]);
      v57 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v20.f64[0]);
      v58 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v20.f64[0]);
      *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v20.f64[0]);
      *(float64x2_t *)(a3 + 16) = v58;
      *(float64x2_t *)(a3 + 32) = v57;
      *(float64x2_t *)(a3 + 48) = v56;
      *(float64_t *)(a3 + 64) = _Q0.f64[0];
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 136);
      _Q0 = vmulq_f64(v20, _Q0);
      v59 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v20.f64[0]);
      v60 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v20.f64[0]);
      v61 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v20.f64[0]);
      *v35 = vmulq_n_f64(*v35, v20.f64[0]);
      *(float64x2_t *)(a3 + 88) = v61;
      *(float64x2_t *)(a3 + 104) = v60;
      *(float64x2_t *)(a3 + 120) = v59;
      *(float64_t *)(a3 + 136) = _Q0.f64[0];
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 4))
    {
      _Q0.f64[0] = *(float64_t *)(a3 + 160);
      *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(v20, _Q0);
      v20.f64[1] = v20.f64[0];
      v62 = vmulq_f64(v20, *v36);
LABEL_34:
      *v36 = v62;
      *(float64_t *)(a3 + 160) = _Q0.f64[0];
    }
  }
  return result;
}

void sub_239C481B8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C481CC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFBA90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C48204(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFBA90;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C48224(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  if (**(_QWORD **)(result + 8))
  {
    v1 = *(_QWORD *)(result + 16);
    v2 = *(_QWORD **)(v1 + 32);
    v3 = (_QWORD *)(v1 + 40);
    if (v2 != v3)
    {
      do
      {
        if (*((_BYTE *)v2 + 44))
        {
          v4 = (_QWORD *)v2[1];
          if (v4)
            goto LABEL_9;
        }
        else
        {
          *((_DWORD *)v2 + 18) = -1;
          v4 = (_QWORD *)v2[1];
          if (v4)
          {
            do
            {
LABEL_9:
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
            goto LABEL_4;
          }
        }
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
LABEL_4:
        v2 = v5;
      }
      while (v5 != v3);
    }
  }
  return result;
}

uint64_t sub_239C482A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  size_t v5;
  void *v6;
  BOOL v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  unint64_t prime;
  void *v12;
  unint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v32;
  void *v34[2];
  void *v35[2];
  float v36;
  void *v37[2];
  void *__p[2];
  float v39;
  unsigned int v40;
  unsigned int *v41;

  if (!*(_BYTE *)(a1 + 122))
  {
    if (!*(_BYTE *)(a1 + 121))
    {
      v2 = *(_QWORD *)(a1 + 176);
      v3 = *(_QWORD *)(a1 + 184);
      *(_BYTE *)(a1 + 121) = v2 != v3;
      if (v2 == v3)
        *(_BYTE *)(a1 + 121) = *(_QWORD *)(a1 + 200) != *(_QWORD *)(a1 + 208);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 121))
      goto LABEL_60;
    *(_OWORD *)v34 = 0u;
    *(_OWORD *)v35 = 0u;
    v36 = 1.0;
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)__p = 0u;
    v39 = 1.0;
    v4 = (float)*(unint64_t *)(a1 + 24);
    v5 = (unint64_t)v4;
    if ((unint64_t)v4 == 1)
    {
      v5 = 2;
LABEL_22:
      sub_239427FE0((uint64_t)v34, v5);
LABEL_23:
      prime = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / v39);
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
      }
      v12 = v37[1];
      if ((void *)prime > v37[1])
        goto LABEL_28;
      if ((void *)prime < v37[1])
      {
        v13 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v39);
        if (v37[1] < (void *)3
          || (v14 = (uint8x8_t)vcnt_s8((int8x8_t)v37[1]), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] > 1uLL))
        {
          v13 = std::__next_prime(v13);
        }
        else
        {
          v15 = 1 << -(char)__clz(v13 - 1);
          if (v13 >= 2)
            v13 = v15;
        }
        if (prime <= v13)
          prime = v13;
        if (prime < (unint64_t)v12)
LABEL_28:
          sub_239427FE0((uint64_t)v37, prime);
      }
      v16 = *(_QWORD *)(a1 + 56);
      for (i = *(_QWORD *)(a1 + 64); v16 != i; v16 += 120)
      {
        v18 = *(_QWORD *)(v16 + 48);
        if (*(_BYTE *)(v16 + 112)
          || (*(_BYTE *)(v18 + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v16 + 56) + 52) & 6) != 0)
        {
          *(_BYTE *)(v16 + 112) = 1;
          v40 = *(_DWORD *)v18;
          v41 = &v40;
          v19 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v19 + 5);
          v40 = **(_DWORD **)(v16 + 56);
          v41 = &v40;
          v20 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v20 + 5);
        }
      }
      v21 = *(_QWORD *)(a1 + 80);
      for (j = *(_QWORD *)(a1 + 88); v21 != j; v21 += 160)
      {
        v23 = *(_QWORD *)(v21 + 80);
        if (*(_BYTE *)(v21 + 152)
          || (*(_BYTE *)(v23 + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v21 + 88) + 52) & 6) != 0
          || (*(_BYTE *)(*(_QWORD *)(v21 + 96) + 36) & 6) != 0)
        {
          *(_BYTE *)(v21 + 152) = 1;
          v40 = *(_DWORD *)v23;
          v41 = &v40;
          v24 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v24 + 5);
          v40 = **(_DWORD **)(v21 + 88);
          v41 = &v40;
          v25 = sub_2395EC77C((uint64_t)v34, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v25 + 5);
          v40 = **(_DWORD **)(v21 + 96);
          v41 = &v40;
          v26 = sub_2395EC77C((uint64_t)v37, &v40, (uint64_t)&unk_239EC6E98, &v41);
          ++*((_DWORD *)v26 + 5);
        }
      }
      sub_239C29B04((_QWORD *)(a1 + 128), (uint64_t *)v35[0], a1 + 8);
      sub_239C29D18((_QWORD *)(a1 + 128), (uint64_t *)__p[0], a1 + 8);
      v27 = __p[0];
      if (__p[0])
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      v29 = v37[0];
      v37[0] = 0;
      if (v29)
        operator delete(v29);
      v30 = v35[0];
      if (v35[0])
      {
        do
        {
          v31 = (_QWORD *)*v30;
          operator delete(v30);
          v30 = v31;
        }
        while (v31);
      }
      v32 = v34[0];
      v34[0] = 0;
      if (v32)
        operator delete(v32);
LABEL_60:
      *(_BYTE *)(a1 + 122) = 1;
      return a1 + 128;
    }
    if ((v5 & ((unint64_t)v4 - 1)) != 0)
    {
      v5 = std::__next_prime((unint64_t)v4);
      v6 = v34[1];
      v7 = (void *)v5 >= v34[1];
      if ((void *)v5 > v34[1])
        goto LABEL_22;
    }
    else
    {
      v6 = 0;
      v7 = 1;
      if (v5)
        goto LABEL_22;
    }
    if (v7)
      goto LABEL_23;
    v8 = vcvtps_u32_f32((float)(unint64_t)v35[1] / v36);
    if ((unint64_t)v6 < 3
      || (v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      v8 = std::__next_prime(v8);
    }
    else
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
    }
    if (v5 <= v8)
      v5 = v8;
    if (v5 >= (unint64_t)v6)
      goto LABEL_23;
    goto LABEL_22;
  }
  return a1 + 128;
}

void sub_239C4872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C292B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239C4874C(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "DenseSchur");
}

uint64_t sub_239C48774(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t *v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  double *v22;
  double v23;
  void *v25[2];
  int v26;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v6 = (uint64_t *)(a1 + 888);
  sub_239C2E8B0(a1 + 400, (unsigned int **)(a1 + 680), a1 + 888, v5);
  v7 = *(unsigned int *)(a1 + 904);
  *(_DWORD *)(a2 + 16) = v7;
  sub_23945215C(a2, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2);
  if (*(_BYTE *)(a1 + 376))
  {
    v8 = *(_DWORD *)(a1 + 392);
    if (v8 == 1)
    {
      v25[0] = 0;
      v25[1] = 0;
      v26 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, v25);
      v15 = *(_DWORD *)(a1 + 904);
      LODWORD(v16) = *(_DWORD *)(a1 + 908);
      if (v16 >= v15)
        v16 = v15;
      else
        v16 = v16;
      v17 = v25[0];
      if ((_DWORD)v16)
      {
        v18 = 0;
        v19 = *(double *)(a1 + 384);
        v20 = v15 + 1;
        v21 = *v6;
        v22 = (double *)v25[0];
        do
        {
          v23 = *v22++;
          *(double *)(v21 + 8 * v18) = v19 * v23 + *(double *)(v21 + 8 * v18);
          v18 += v20;
          --v16;
        }
        while (v16);
      }
      free(v17);
    }
    else if (!v8)
    {
      v9 = *(_DWORD *)(a1 + 904);
      LODWORD(v10) = *(_DWORD *)(a1 + 908);
      v10 = v10 >= v9 ? v9 : v10;
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = *(double *)(a1 + 384);
        v13 = v9 + 1;
        v14 = *v6;
        do
        {
          *(double *)(v14 + 8 * v11) = v12 + *(double *)(v14 + 8 * v11);
          v11 += v13;
          --v10;
        }
        while (v10);
      }
    }
  }
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2))
  {
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(a1 + 364) = 0;
  }
  kdebug_trace();
  return v4;
}

void sub_239C48984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  sub_239C2ED44();
  _Unwind_Resume(a1);
}

void sub_239C489C4(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v5, "DenseSchur");
  v4 = 4;
  strcpy((char *)__p, "LDLt");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 4uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_239C48A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL sub_239C48AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;

  v4 = a1 + 952;
  v5 = *(_DWORD *)(a1 + 904);
  if (v5 == *(_DWORD *)(a1 + 908))
  {
    v6 = (v5 * v5);
    sub_23945215C(a1 + 960, v6);
    if ((_DWORD)v6)
      memcpy(*(void **)(a1 + 960), *(const void **)(a1 + 888), 8 * v6);
    *(_QWORD *)(a1 + 976) = *(_QWORD *)(a1 + 904);
    sub_239C2F210(v4);
  }
  v7 = *(_DWORD *)(a1 + 952);
  *(_BYTE *)(a1 + 360) = v7 == 0;
  if (v7)
    return 1;
  sub_239C2F378(v4, a2, a2);
  return *(_BYTE *)(a1 + 360) == 0;
}

uint64_t sub_239C48B5C()
{
  return 1;
}

uint64_t sub_239C48B64()
{
  return 0;
}

uint64_t sub_239C48B6C(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB6B8;
  free(*(void **)(a1 + 984));
  free(*(void **)(a1 + 960));
  *(_QWORD *)a1 = off_250AFB770;
  free(*(void **)(a1 + 912));
  free(*(void **)(a1 + 888));
  return sub_239C40AE0(a1);
}

void sub_239C48BC4(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB6B8;
  free(*(void **)(a1 + 984));
  free(*(void **)(a1 + 960));
  *(_QWORD *)a1 = off_250AFB770;
  free(*(void **)(a1 + 912));
  free(*(void **)(a1 + 888));
  sub_239C40AE0(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239C48C30(uint64_t a1)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  size_t v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  size_t v19;
  size_t v20;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  void *memptr;

  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a1 + 480) + 40;
  *(_QWORD *)(a1 + 944) = a1 + 656;
  v2 = *(_DWORD *)(a1 + 952);
  if (v2)
  {
    *(_QWORD *)(a1 + 936) = 0;
    *(_QWORD *)(a1 + 944) = 0;
    return v2 == 0;
  }
  v3 = *(_DWORD *)(a1 + 976);
  v4 = v3 * v3;
  v5 = (8 * v3 * v3 + 31) & 0xFFFFFFFE0;
  v25 = v5 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v5, 0x100BBD03uLL);
  v6 = memptr;
  v24 = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  LODWORD(v26) = *(_DWORD *)(a1 + 976);
  HIDWORD(v26) = v3;
  if (v3 != (_DWORD)v26)
  {
    LODWORD(v26) = v3;
    sub_23945215C((uint64_t)&v24, v3 * (unint64_t)v3);
    v7 = v26;
    v3 = HIDWORD(v26);
    v6 = v24;
    v4 = v26 * HIDWORD(v26);
    if (!((_DWORD)v26 * HIDWORD(v26)))
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = v3;
  if (v4)
LABEL_6:
    bzero(v6, 8 * v4);
LABEL_7:
  if (v3 >= v7)
    v8 = v7;
  else
    v8 = v3;
  if ((_DWORD)v8)
  {
    v9 = v7 + 1;
    v10 = 0;
    if ((_DWORD)v8 == 1)
      goto LABEL_23;
    v11 = v9 < 0 ? ~v7 : v7 + 1;
    v12 = v11 * (unint64_t)(v8 - 1);
    if ((_DWORD)v12 && v9 < 0)
      goto LABEL_23;
    if ((v12 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_23;
    v14 = 0;
    v10 = v8 & 0xFFFFFFFE;
    v15 = v10;
    do
    {
      *((_QWORD *)v6 + v14) = 0x3FF0000000000000;
      *((_QWORD *)v6 + v9 + v14) = 0x3FF0000000000000;
      v14 += 2 * v7 + 2;
      v15 -= 2;
    }
    while (v15);
    if (v10 != v8)
    {
LABEL_23:
      v16 = v8 - v10;
      v17 = v9 * v10;
      do
      {
        *((_QWORD *)v6 + v17) = 0x3FF0000000000000;
        v17 += v9;
        --v16;
      }
      while (v16);
    }
  }
  sub_239A230A8(0, v7, v3, *(__CLPK_doublereal **)(a1 + 960), *(_DWORD *)(a1 + 976), *(__CLPK_integer **)(a1 + 984), (__CLPK_doublereal *)v6, v7);
  v18 = *(void **)(a1 + 912);
  v19 = v25;
  *(_QWORD *)(a1 + 912) = v24;
  v20 = *(_QWORD *)(a1 + 920);
  *(_QWORD *)(a1 + 920) = v19;
  v24 = v18;
  v25 = v20;
  *(_QWORD *)(a1 + 928) = v26;
  v26 = 0;
  free(v18);
  return v2 == 0;
}

void sub_239C48E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_239C48E30(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float64x2_t v13;
  double *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  void *__p;
  double *v25;
  uint64_t v26;
  double *v27;
  double *v28[2];

  __p = 0;
  v25 = 0;
  v26 = 0;
  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v4 = v2[19];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    sub_23945E108((uint64_t)&__p, 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3));
    v5 = (uint64_t)__p;
    v3 = v2[18];
    v4 = v2[19];
  }
  v28[0] = (double *)v5;
  sub_239C49A88(v3, v4, v28, 0);
  v14 = (double *)__p;
  v15 = ((char *)v25 - (_BYTE *)__p) >> 3;
  v16 = v2[21];
  v17 = v2[22];
  v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - v16) >> 5);
  if (v15 >= v18 + v15)
  {
    if (v15 > v18 + v15)
      v25 = (double *)((char *)__p + 8 * v18 + 8 * v15);
  }
  else
  {
    sub_23945E108((uint64_t)&__p, v18);
    v14 = (double *)__p;
    v16 = v2[21];
    v17 = v2[22];
  }
  v27 = &v14[v15];
  v28[0] = (double *)&v27;
  v28[1] = 0;
  if (v16 != v17)
  {
    do
    {
      sub_239C49824((uint64_t)v28, v16, v6, v7, v8, v9, v10, v11, v12, v13);
      v16 += 160;
    }
    while (v16 != v17);
    v14 = (double *)__p;
  }
  if (v14 == v25)
  {
    **(_QWORD **)(a1 + 16) = 0x3FF0000000000000;
    if (!v14)
      return;
  }
  else
  {
    v19 = (_BYTE)v25 - (_BYTE)v14;
    v20 = v25 - v14;
    v21 = v20 >> 1;
    sub_2395F71EC(v14, &v14[v20 >> 1], v25);
    v14 = (double *)__p;
    v22 = *((double *)__p + (v20 >> 1));
    if ((v19 & 8) == 0)
    {
      v23 = v21 - 1;
      if (v21 - 1 != v20)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v23, (double *)__p + v20);
        v14 = (double *)__p;
      }
      v22 = (v22 + v14[v23]) * 0.5;
    }
    **(double **)(a1 + 16) = sqrt(v22) * *(double *)(a1 + 8);
  }
  v25 = v14;
  operator delete(v14);
}

void sub_239C48FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C48FE8(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  double *v12;
  double *v13;
  uint64_t v14;
  double *v15;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v4 = *(_QWORD *)(v2 + 152);
  v5 = v4 - v3;
  if (v4 != v3)
  {
    sub_23945E108((uint64_t)&v12, 0xEEEEEEEEEEEEEEEFLL * (v5 >> 3));
    v5 = (uint64_t)v12;
    v3 = *(_QWORD *)(v2 + 144);
    v4 = *(_QWORD *)(v2 + 152);
  }
  v15 = (double *)v5;
  sub_239C49A88(v3, v4, &v15, 0);
  v6 = v12;
  if (v12 == v13)
  {
    **((_QWORD **)a1 + 2) = 0x3FF0000000000000;
    if (!v6)
      return;
  }
  else
  {
    v7 = (_BYTE)v13 - (_BYTE)v12;
    v8 = v13 - v12;
    v9 = v8 >> 1;
    sub_2395F71EC(v12, &v12[v8 >> 1], v13);
    v6 = v12;
    v10 = v12[v8 >> 1];
    if ((v7 & 8) == 0)
    {
      v11 = v9 - 1;
      if (v9 - 1 != v8)
      {
        sub_2395F71EC(v12, &v12[v11], &v12[v8]);
        v6 = v12;
      }
      v10 = (v10 + v6[v11]) * 0.5;
    }
    **((double **)a1 + 2) = sqrt(v10) * a1[1];
  }
  v13 = v6;
  operator delete(v6);
}

void sub_239C490F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C49110(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  float64x2_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float64x2_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  void *__p;
  double *v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[2];

  __p = 0;
  v21 = 0;
  v22 = 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 176) - *(_QWORD *)(*(_QWORD *)a1 + 168);
  if (!v3)
  {
    *(_QWORD *)(*((_QWORD *)a1 + 2) + 8) = 0x3FF0000000000000;
    return;
  }
  sub_23945E108((uint64_t)&__p, 0xCCCCCCCCCCCCCCCDLL * (v3 >> 5));
  v12 = (double *)__p;
  v13 = *(_QWORD *)(v2 + 168);
  v14 = *(_QWORD *)(v2 + 176);
  v23 = __p;
  v24[0] = &v23;
  v24[1] = 0;
  if (v13 != v14)
  {
    do
    {
      sub_239C49824((uint64_t)v24, v13, v4, v5, v6, v7, v8, v9, v10, v11);
      v13 += 160;
    }
    while (v13 != v14);
    v12 = (double *)__p;
  }
  if (v12 != v21)
  {
    v15 = (_BYTE)v21 - (_BYTE)v12;
    v16 = v21 - v12;
    v17 = v16 >> 1;
    sub_2395F71EC(v12, &v12[v16 >> 1], v21);
    v12 = (double *)__p;
    v18 = *((double *)__p + (v16 >> 1));
    if ((v15 & 8) == 0)
    {
      v19 = v17 - 1;
      if (v17 - 1 != v16)
      {
        sub_2395F71EC((double *)__p, (double *)__p + v19, (double *)__p + v16);
        v12 = (double *)__p;
      }
      v18 = (v18 + v12[v19]) * 0.5;
    }
    *(double *)(*((_QWORD *)a1 + 2) + 8) = sqrt(v18) * a1[1];
    goto LABEL_14;
  }
  *(_QWORD *)(*((_QWORD *)a1 + 2) + 8) = 0x3FF0000000000000;
  if (v12)
  {
LABEL_14:
    v21 = v12;
    operator delete(v12);
  }
}

void sub_239C49258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_239C49278(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  float64x2_t *v28;
  float64x2_t *v29;
  float64x2_t v31;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  uint64_t v41;
  float64x2_t v42;
  double v43;
  double v44;
  float64x2_t *v45;
  float64x2_t *v46;
  uint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  int8x16_t v51;
  float64x2_t v52;
  float64x2_t *v53;
  float64x2_t *v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  float64x2_t v58;
  uint64_t v61;
  float64x2_t *v62;
  float64x2_t v63;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v74;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t v78;
  double v79;
  float64x2_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  float64x2x3_t v87;

  kdebug_trace();
  v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v10 > 0xF)
  {
    if (v10 != 16)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16;
  }
  else
  {
    sub_23945E108(a2, 2 - (v10 >> 3));
  }
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 152);
  v13 = 0.0;
  v14 = 0.0;
  if (v11 != v12)
  {
    if (*(_BYTE *)(a1 + 363))
    {
      v15 = v12 - v11 - 120;
      if (v15 <= 0x77)
        goto LABEL_12;
      v16 = v15 / 0x78 + 1;
      v17 = (double *)(v11 + 208);
      v18 = v16 & 0x7FFFFFFFFFFFFFELL;
      do
      {
        v19 = *(v17 - 15);
        v20 = *v17;
        v17 += 30;
        v14 = v14 + v19 + v20;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFELL))
      {
        v11 += 120 * (v16 & 0x7FFFFFFFFFFFFFELL);
        do
        {
LABEL_12:
          v14 = v14 + *(double *)(v11 + 88);
          v11 += 120;
        }
        while (v11 != v12);
      }
    }
    else
    {
      do
      {
        v28 = *(float64x2_t **)(v11 + 48);
        v29 = *(float64x2_t **)(v11 + 56);
        *(_QWORD *)(v11 + 32) = v28 + 1;
        *(_QWORD *)(v11 + 40) = v29 + 1;
        v4.f64[0] = v28[2].f64[0];
        v6.f64[0] = v29[2].f64[0];
        _Q3 = v29[1];
        v31 = vsubq_f64(v4, v6);
        _Q0 = vsubq_f64(v28[1], _Q3);
        _Q1 = vmulq_f64(_Q0, _Q0);
        _Q3.f64[0] = _Q0.f64[1];
        __asm { FMLA            D1, D3, V0.D[1] }
        _Q1.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q1.f64[0], v31.f64[0], v31.f64[0]));
        v38 = *(float64x2_t **)(v11 + 24);
        _Q3.f64[0] = v38[1].f64[0];
        _Q4 = *v38;
        v39 = vsubq_f64(*v38, vmulq_n_f64(_Q0, _Q1.f64[0]));
        *(float64x2_t *)(v11 + 64) = v39;
        v40 = vsubq_f64(_Q3, vmulq_f64(v31, _Q1));
        *(float64_t *)(v11 + 80) = v40.f64[0];
        v41 = *(_QWORD *)(v11 + 96);
        if (v41)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 24))(v41, v11 + 64);
          v40.f64[0] = *(float64_t *)(v11 + 80);
          v39 = *(float64x2_t *)(v11 + 64);
        }
        v6 = (float64x2_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL);
        v42.f64[0] = v39.f64[0];
        v42.f64[1] = v6.f64[0];
        v7 = vmulq_f64(v42, v42);
        v7.f64[0] = *(double *)(a1 + 16) * (v7.f64[0] + v6.f64[0] * v6.f64[0] + v40.f64[0] * v40.f64[0]);
        v43 = *(double *)(a1 + 32);
        _Q4.f64[0] = 1.0;
        if (v7.f64[0] > v43)
        {
          v44 = sqrt(v7.f64[0]);
          v7.f64[0] = -(v43 - *(double *)(a1 + 40) * v44);
          _Q4.f64[0] = *(double *)(a1 + 24) / v44;
        }
        _Q4.f64[0] = sqrt(_Q4.f64[0]);
        v5 = vmulq_f64(v40, _Q4);
        v39.f64[1] = v6.f64[0];
        v4 = vmulq_n_f64(v39, _Q4.f64[0]);
        *(float64x2_t *)(v11 + 64) = v4;
        *(float64_t *)(v11 + 80) = v5.f64[0];
        *(float64_t *)(v11 + 88) = v7.f64[0];
        v14 = v14 + v7.f64[0];
        v11 += 120;
      }
      while (v11 != v12);
    }
  }
  v21 = *(double **)a2;
  **(double **)a2 = v14 * 0.5;
  v22 = *(_QWORD *)(a1 + 168);
  v23 = *(_QWORD *)(a1 + 176);
  if (v22 == v23)
    goto LABEL_35;
  if (*(_BYTE *)(a1 + 363))
  {
    v24 = v23 - v22 - 160;
    v13 = 0.0;
    if (v24 <= 0x9F)
      goto LABEL_20;
    v25 = v24 / 0xA0 + 1;
    v26 = (double *)(v22 + 288);
    v27 = v25 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      v13 = v13 + *(v26 - 20) + *v26;
      v26 += 40;
      v27 -= 2;
    }
    while (v27);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFELL))
    {
      v22 += 160 * (v25 & 0x3FFFFFFFFFFFFFELL);
      do
      {
LABEL_20:
        v13 = v13 + *(double *)(v22 + 128);
        v22 += 160;
      }
      while (v22 != v23);
    }
  }
  else
  {
    v13 = 0.0;
    do
    {
      v45 = *(float64x2_t **)(v22 + 80);
      v46 = *(float64x2_t **)(v22 + 88);
      *(_QWORD *)(v22 + 40) = v45 + 1;
      *(_QWORD *)(v22 + 48) = v46 + 1;
      v47 = *(_QWORD *)(v22 + 96);
      _Q4.f64[0] = *(float64_t *)(v47 + 16);
      *(_QWORD *)(v22 + 64) = v47 + 16;
      v5.f64[0] = v45[2].f64[0];
      v48 = v45[1];
      v7.f64[0] = v46[2].f64[0];
      v49 = v46[1];
      v50 = *(_QWORD *)(v22 + 56);
      v51 = *(int8x16_t *)(v50 + 8);
      v50 += 8;
      *(_QWORD *)&v52.f64[0] = v51.i64[0];
      v53 = (float64x2_t *)v50;
      v87 = vld3q_f64(v53->f64);
      v53 += 3;
      v54 = *(float64x2_t **)(v22 + 72);
      _Q6.f64[0] = v54[1].f64[0];
      v55 = vsubq_f64(v5, v7);
      v56 = vsubq_f64(v48, v49);
      *(_QWORD *)&v57 = *(_OWORD *)&vmulq_f64(_Q4, _Q6);
      _Q4 = vmulq_n_f64(*v54, _Q4.f64[0]);
      v58 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v87.val[0], _Q4.f64[0]), v87.val[1], _Q4, 1), v87.val[2], v57);
      _Q7 = *v53;
      _Q5 = vmulq_f64(*v53, _Q4);
      v87.val[0].f64[0] = _Q4.f64[1];
      __asm { FMLA            D5, D16, V7.D[1] }
      v87.val[1].f64[0] = *(float64_t *)(v50 + 64);
      _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v87.val[1].f64[0], v57);
      *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vaddq_f64(v55, _Q5);
      _Q6 = vaddq_f64(v56, v58);
      v62 = *(float64x2_t **)(v22 + 24);
      v61 = *(_QWORD *)(v22 + 32);
      v63 = *(float64x2_t *)(v61 + 8);
      _D20 = *(_QWORD *)(v61 + 48);
      v65 = *(float64x2_t *)(v61 + 32);
      v66 = *(double *)(v61 + 72);
      v67 = *(float64x2_t *)(v61 + 56);
      v68 = *(float64x2_t *)(v50 + 16);
      v52.f64[1] = *(float64_t *)(v50 + 24);
      v68.f64[1] = *(float64_t *)(v50 + 40);
      v69 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, _Q4.f64[0]), (float64x2_t)vextq_s8(v51, *(int8x16_t *)(v50 + 32), 8uLL), _Q4, 1), v68, v57);
      __asm { FMLA            D4, D16, V7.D[1] }
      _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v87.val[1].f64[0], v57);
      _Q1 = vaddq_f64(v55, _Q4);
      _Q0 = vaddq_f64(v56, v69);
      _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, _Q0.f64[0]), v65, _Q0, 1), v67, _Q1.f64[0]);
      __asm { FMLA            D3, D20, V0.D[1] }
      v74 = vmlad_n_f64(_D3, v66, _Q1.f64[0]);
      _Q1.f64[0] = _Q2.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      _Q1.f64[0] = 1.0 / sqrt(_Q0.f64[0] + v74 * v74);
      _Q2.f64[0] = v62[1].f64[0];
      _Q3 = *v62;
      v76 = vsubq_f64(*v62, vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, _Q6.f64[0]), v65, _Q6, 1), v67, _Q5.f64[0]), _Q1.f64[0]));
      *(float64x2_t *)(v22 + 104) = v76;
      __asm { FMLA            D3, D20, V6.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v66, _Q5.f64[0]);
      v77 = vsubq_f64(_Q2, vmulq_f64(_Q3, _Q1));
      *(float64_t *)(v22 + 120) = v77.f64[0];
      v78 = *(_QWORD *)(v22 + 136);
      if (v78)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 24))(v78, v22 + 104);
        v77.f64[0] = *(float64_t *)(v22 + 120);
        v76 = *(float64x2_t *)(v22 + 104);
      }
      v79 = *(double *)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL).i64;
      v80.f64[0] = v76.f64[0];
      v80.f64[1] = v79;
      v7 = vmulq_f64(v80, v80);
      v7.f64[0] = *(double *)(a1 + 56) * (v7.f64[0] + v79 * v79 + v77.f64[0] * v77.f64[0]);
      v81 = *(double *)(a1 + 72);
      _Q4.f64[0] = 1.0;
      if (v7.f64[0] > v81)
      {
        v82 = sqrt(v7.f64[0]);
        v7.f64[0] = -(v81 - *(double *)(a1 + 80) * v82);
        _Q4.f64[0] = *(double *)(a1 + 64) / v82;
      }
      _Q4.f64[0] = sqrt(_Q4.f64[0]);
      v5 = vmulq_f64(v77, _Q4);
      v76.f64[1] = v79;
      *(float64x2_t *)(v22 + 104) = vmulq_n_f64(v76, _Q4.f64[0]);
      *(float64_t *)(v22 + 120) = v5.f64[0];
      *(float64_t *)(v22 + 128) = v7.f64[0];
      v13 = v13 + v7.f64[0];
      v22 += 160;
    }
    while (v22 != v23);
    v21 = *(double **)a2;
  }
LABEL_35:
  v21[1] = v13 * 0.5;
  *(_BYTE *)(a1 + 363) = 1;
  v83 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v84 = **(double **)a2;
  v85 = *(double *)(*(_QWORD *)a2 + 8);
  kdebug_trace();
  return v83 + v84 + v85;
}

void sub_239C49760(_Unwind_Exception *a1)
{
  sub_239C302B4();
  _Unwind_Resume(a1);
}

void sub_239C49780(uint64_t a1, double a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9[3];

  *(_QWORD *)&v9[0] = a1;
  v9[1] = a2;
  *(_QWORD *)&v9[2] = &v7;
  sub_239C48FE8(v9);
  sub_239C49110(v9);
  v3 = 1.0e20;
  v4 = 0x3DDB7CDFD9D7BDBBLL;
  v5 = 0x3DDB7CDFD9D7BDBBLL;
  v6 = 1.0e20;
  if (v7 > 0.0)
  {
    v5 = *(_QWORD *)&v7;
    v6 = 1.0 / (v7 * v7);
  }
  *(_QWORD *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = v6;
  if (v8 > 0.0)
  {
    v4 = *(_QWORD *)&v8;
    v3 = 1.0 / (v8 * v8);
  }
  *(_QWORD *)(a1 + 48) = v4;
  *(double *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 364) = 0;
}

void sub_239C49824(uint64_t a1, uint64_t a2, double a3, double a4, float64x2_t a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v12;
  double v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  float64x2_t v17;
  float64x2_t *v18;
  float64x2_t v21;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  double v28;
  float64x2_t v30;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v43;
  double v44;
  float64x2_t v45;
  double **v46;
  double *v47;
  unint64_t *v48;
  unint64_t v49;
  float64x2_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  float64x2_t v54;
  double v55;
  double v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  char v59;
  float64x2x3_t v60;

  v51 = *(_OWORD *)(a2 + 56);
  v52 = *(_OWORD *)(a2 + 72);
  v53 = *(_OWORD *)(a2 + 88);
  v12 = *(float64x2_t *)(a2 + 24);
  v50 = v12;
  v54 = *(float64x2_t *)(a2 + 104);
  v55 = *(double *)(a2 + 120);
  v13 = *(double *)(a2 + 128);
  v56 = v13;
  v14 = *(std::__shared_weak_count **)(a2 + 144);
  v57 = *(_QWORD *)(a2 + 136);
  v58 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v59 = *(_BYTE *)(a2 + 152);
  if (!*(_BYTE *)(a1 + 8))
  {
    v12.f64[0] = *(float64_t *)(*((_QWORD *)&v53 + 1) + 16);
    a5.f64[0] = *(float64_t *)(*((_QWORD *)&v52 + 1) + 32);
    a10.f64[0] = *(float64_t *)(v53 + 32);
    v17 = *(float64x2_t *)(v51 + 8);
    v18 = (float64x2_t *)(v51 + 8);
    v60 = vld3q_f64(v18->f64);
    v18 += 3;
    v10.f64[0] = *(float64_t *)(v52 + 16);
    _Q18 = *(float64x2_t *)v52;
    _Q19 = *v18;
    v21 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 8);
    _D22 = *(_QWORD *)(*(_QWORD *)&v50.f64[1] + 48);
    v23 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 32);
    v24 = *(double *)(*(_QWORD *)&v50.f64[1] + 72);
    v25 = *(float64x2_t *)(*(_QWORD *)&v50.f64[1] + 56);
    v26 = vsubq_f64(a5, a10);
    _Q3 = vsubq_f64(*(float64x2_t *)(*((_QWORD *)&v52 + 1) + 16), *(float64x2_t *)(v53 + 16));
    *(_QWORD *)&v28 = *(_OWORD *)&vmulq_f64(v12, v10);
    _Q1 = vmulq_n_f64(*(float64x2_t *)v52, v12.f64[0]);
    v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v60.val[0], _Q1.f64[0]), v60.val[1], _Q1, 1), v60.val[2], v28);
    v60.val[0] = vmulq_f64(*v18, _Q1);
    v60.val[1].f64[0] = _Q1.f64[1];
    __asm { FMLA            D4, D5, V19.D[1] }
    v60.val[2].f64[0] = *(float64_t *)(v51 + 72);
    v60.val[0].f64[0] = vmlad_n_f64(v60.val[0].f64[0], v60.val[2].f64[0], v28);
    *(_QWORD *)&v60.val[0].f64[0] = *(_OWORD *)&vaddq_f64(v26, v60.val[0]);
    _Q16 = vaddq_f64(_Q3, v30);
    v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, _Q16.f64[0]), v23, _Q16, 1), v25, v60.val[0].f64[0]);
    __asm { FMLA            D18, D22, V16.D[1] }
    _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v24, v60.val[0].f64[0]);
    v37 = *(float64x2_t *)(v51 + 24);
    v38 = (float64x2_t)vextq_s8((int8x16_t)v17, *(int8x16_t *)(v51 + 40), 8uLL);
    v17.f64[1] = *(float64_t *)(v51 + 32);
    v37.f64[1] = *(float64_t *)(v51 + 48);
    v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v17, _Q1.f64[0]), v38, _Q1, 1), v37, v28);
    __asm { FMLA            D1, D5, V19.D[1] }
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v60.val[2].f64[0], v28);
    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(v26, _Q1);
    _Q0 = vaddq_f64(_Q3, v39);
    _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, _Q0.f64[0]), v23, _Q0, 1), v25, _Q1.f64[0]);
    __asm { FMLA            D3, D22, V0.D[1] }
    _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v24, _Q1.f64[0]);
    _Q0 = vmulq_f64(_Q2, _Q2);
    _Q1.f64[0] = _Q2.f64[1];
    __asm { FMLA            D0, D1, V2.D[1] }
    _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0] + _Q3.f64[0] * _Q3.f64[0]);
    v43 = vmulq_n_f64(v36, _Q0.f64[0]);
    _Q2.f64[0] = *(float64_t *)(*(_QWORD *)&v50.f64[0] + 16);
    *(_QWORD *)&v44 = *(_OWORD *)&vsubq_f64(_Q2, vmulq_f64(_Q18, _Q0));
    v45 = vsubq_f64(**(float64x2_t **)&v50.f64[0], v43);
    v54 = v45;
    v55 = v44;
    if (v57)
    {
      (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v57 + 24))(v57, &v54);
      v44 = v55;
      v45 = v54;
    }
    v45.f64[1] = *(double *)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL).i64;
    v13 = vmulq_f64(v45, v45).f64[0] + v45.f64[1] * v45.f64[1] + v44 * v44;
    v56 = v13;
    v14 = v58;
  }
  v46 = *(double ***)a1;
  v47 = **(double ***)a1;
  *v47 = v13;
  *v46 = v47 + 1;
  if (v14)
  {
    v48 = (unint64_t *)&v14->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_239C49A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239C30548((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double **sub_239C49A88(uint64_t a1, uint64_t a2, double **a3, char a4)
{
  uint64_t v6;
  float64x2_t v7;
  double v8;
  float64x2_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  float64x2_t v14;
  float64x2_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  double v26;
  double *v27;
  unint64_t *v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  double *v36;
  unint64_t v37;
  __int128 v39;
  float64x2_t *v40;
  float64x2_t v41;
  double v42;
  double v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  char v46;

  if (a1 != a2)
  {
    v6 = a1;
    if (a4)
    {
      do
      {
        v31 = *(double *)(v6 + 80);
        v41 = *(float64x2_t *)(v6 + 64);
        v42 = v31;
        v32 = *(double *)(v6 + 88);
        v43 = v32;
        v33 = *(std::__shared_weak_count **)(v6 + 104);
        v44 = *(_QWORD *)(v6 + 96);
        v45 = v33;
        if (v33)
        {
          p_shared_owners = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldxr(p_shared_owners);
          while (__stxr(v35 + 1, p_shared_owners));
          v46 = *(_BYTE *)(v6 + 112);
          v36 = *a3;
          *v36 = v32;
          *a3 = v36 + 1;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        else
        {
          v30 = *a3;
          *v30 = v32;
          *a3 = v30 + 1;
        }
        v6 += 120;
      }
      while (v6 != a2);
    }
    else
    {
      do
      {
        v7 = *(float64x2_t *)(v6 + 40);
        v40 = *(float64x2_t **)(v6 + 56);
        v39 = *(_OWORD *)(v6 + 24);
        v8 = *(double *)(v6 + 80);
        v9 = *(float64x2_t *)(v6 + 64);
        v41 = v9;
        v42 = v8;
        v43 = *(double *)(v6 + 88);
        v10 = *(_QWORD *)(v6 + 96);
        v11 = *(std::__shared_weak_count **)(v6 + 104);
        v44 = v10;
        v45 = v11;
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        v46 = *(_BYTE *)(v6 + 112);
        v9.f64[0] = *(float64_t *)(*(_QWORD *)&v7.f64[1] + 32);
        v7.f64[0] = v40[2].f64[0];
        v14 = vsubq_f64(v9, v7);
        _Q1 = vsubq_f64(*(float64x2_t *)(*(_QWORD *)&v7.f64[1] + 16), v40[1]);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = _Q1.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q2.f64[0], v14.f64[0], v14.f64[0]));
        v22 = vmulq_n_f64(_Q1, _Q2.f64[0]);
        v23 = vmulq_f64(v14, _Q2);
        _Q2.f64[0] = *(float64_t *)(v39 + 16);
        *(_QWORD *)&v24 = *(_OWORD *)&vsubq_f64(_Q2, v23);
        v25 = vsubq_f64(*(float64x2_t *)v39, v22);
        v41 = v25;
        v42 = v24;
        if (v10)
        {
          (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v10 + 24))(v10, &v41);
          v24 = v42;
          v25 = v41;
          *(_QWORD *)&v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
          v11 = v45;
        }
        else
        {
          *(_QWORD *)&v26 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
        }
        v25.f64[1] = v26;
        v43 = vmulq_f64(v25, v25).f64[0] + v26 * v26 + v24 * v24;
        v27 = *a3;
        *v27 = v43;
        *a3 = v27 + 1;
        if (v11)
        {
          v28 = (unint64_t *)&v11->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v6 += 120;
      }
      while (v6 != a2);
    }
  }
  return a3;
}

void sub_239C49CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_239C49D40()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C49D54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AFBAD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C49D8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AFBAD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239C49DAC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 376) = *(_BYTE *)(result + 16);
  return result;
}

char *sub_239C49DBC(void **a1, char *a2, uint64_t *a3)
{
  char *v4;
  char *v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  char *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;

  v4 = a2;
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = a2 - (_BYTE *)*a1;
  v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
  v10 = (char *)a1[2];
  if (v6 >= v10)
  {
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 5) + 1;
    if (v32 > 0x199999999999999)
      sub_2394189F8();
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v7) >> 5);
    if (2 * v33 > v32)
      v32 = 2 * v33;
    if (v33 >= 0xCCCCCCCCCCCCCCLL)
      v34 = 0x199999999999999;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 > 0x199999999999999)
        sub_239418A80();
      v35 = (char *)operator new(160 * v34);
    }
    else
    {
      v35 = 0;
    }
    v46 = (uint64_t)&v35[32 * (v8 >> 5)];
    v89 = &v35[160 * v34];
    if (v9 == v34)
    {
      if (v8 >= 1)
      {
        v47 = v9 + 2;
        if (v9 >= -1)
          v47 = v9 + 1;
        v48 = v47 >> 1;
        v49 = sub_239C299F0(v46, v46, v46 - 160 * (v47 >> 1));
        v46 -= 160 * v48;
LABEL_43:
        *(_QWORD *)v49 = *a3;
        v52 = *(_OWORD *)(a3 + 1);
        *(_OWORD *)(v49 + 24) = *(_OWORD *)(a3 + 3);
        *(_OWORD *)(v49 + 8) = v52;
        v53 = *(_OWORD *)(a3 + 5);
        v54 = *(_OWORD *)(a3 + 7);
        v55 = *(_OWORD *)(a3 + 9);
        *(_OWORD *)(v49 + 88) = *(_OWORD *)(a3 + 11);
        *(_OWORD *)(v49 + 72) = v55;
        *(_OWORD *)(v49 + 56) = v54;
        *(_OWORD *)(v49 + 40) = v53;
        v56 = *(_OWORD *)(a3 + 13);
        *(_QWORD *)(v49 + 120) = a3[15];
        *(_OWORD *)(v49 + 104) = v56;
        *(_QWORD *)(v49 + 128) = a3[16];
        *(_OWORD *)(v49 + 136) = *(_OWORD *)(a3 + 17);
        a3[17] = 0;
        a3[18] = 0;
        *(_BYTE *)(v49 + 152) = *((_BYTE *)a3 + 152);
        v57 = v49 + 160;
        v58 = (char *)*a1;
        if (*a1 == v4)
        {
          v67 = v46;
        }
        else
        {
          v59 = 0;
          do
          {
            v60 = v46 + v59;
            v61 = &v4[v59];
            *(_QWORD *)(v60 - 160) = *(_QWORD *)&v4[v59 - 160];
            v62 = *(_OWORD *)&v4[v59 - 152];
            *(_OWORD *)(v60 - 136) = *(_OWORD *)&v4[v59 - 136];
            *(_OWORD *)(v60 - 152) = v62;
            v63 = *(_OWORD *)&v4[v59 - 120];
            v64 = *(_OWORD *)&v4[v59 - 104];
            v65 = *(_OWORD *)&v4[v59 - 88];
            *(_OWORD *)(v60 - 72) = *(_OWORD *)&v4[v59 - 72];
            *(_OWORD *)(v60 - 88) = v65;
            *(_OWORD *)(v60 - 104) = v64;
            *(_OWORD *)(v60 - 120) = v63;
            v66 = *(_OWORD *)&v4[v59 - 56];
            *(_QWORD *)(v60 - 40) = *(_QWORD *)&v4[v59 - 40];
            *(_OWORD *)(v60 - 56) = v66;
            *(_QWORD *)(v60 - 32) = *(_QWORD *)&v4[v59 - 32];
            *(_OWORD *)(v60 - 24) = *(_OWORD *)&v4[v59 - 24];
            *((_QWORD *)v61 - 3) = 0;
            *((_QWORD *)v61 - 2) = 0;
            *(_BYTE *)(v60 - 8) = v4[v59 - 8];
            v59 -= 160;
          }
          while (&v4[v59] != v58);
          v67 = v46 + v59;
          v57 = v49 + 160;
        }
        v68 = (char *)a1[1];
        if (v68 != v4)
        {
          do
          {
            *(_QWORD *)v57 = *(_QWORD *)v4;
            v69 = *(_OWORD *)(v4 + 8);
            *(_OWORD *)(v57 + 24) = *(_OWORD *)(v4 + 24);
            *(_OWORD *)(v57 + 8) = v69;
            v70 = *(_OWORD *)(v4 + 40);
            v71 = *(_OWORD *)(v4 + 56);
            v72 = *(_OWORD *)(v4 + 72);
            *(_OWORD *)(v57 + 88) = *(_OWORD *)(v4 + 88);
            *(_OWORD *)(v57 + 72) = v72;
            *(_OWORD *)(v57 + 56) = v71;
            *(_OWORD *)(v57 + 40) = v70;
            v73 = *(_OWORD *)(v4 + 104);
            *(_QWORD *)(v57 + 120) = *((_QWORD *)v4 + 15);
            *(_OWORD *)(v57 + 104) = v73;
            *(_QWORD *)(v57 + 128) = *((_QWORD *)v4 + 16);
            *(_OWORD *)(v57 + 136) = *(_OWORD *)(v4 + 136);
            *((_QWORD *)v4 + 17) = 0;
            *((_QWORD *)v4 + 18) = 0;
            *(_BYTE *)(v57 + 152) = v4[152];
            v57 += 160;
            v4 += 160;
          }
          while (v4 != v68);
          v4 = (char *)a1[1];
        }
        v74 = (char *)*a1;
        *a1 = (void *)v67;
        a1[1] = (void *)v57;
        a1[2] = v89;
        if (v4 == v74)
        {
          if (!v4)
            return (char *)v46;
        }
        else
        {
          do
          {
            v88 = v4 - 160;
            v76 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
            if (v76)
            {
              p_shared_owners = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(p_shared_owners);
              while (__stlxr(v78 - 1, p_shared_owners));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v4 = v88;
          }
          while (v88 != v74);
          v4 = v74;
          if (!v74)
            return (char *)v46;
        }
        operator delete(v4);
        return (char *)v46;
      }
      if (v7 == v4)
        v50 = 1;
      else
        v50 = 0x999999999999999ALL * (v8 >> 5);
      if (v50 > 0x199999999999999)
        sub_239418A80();
      v51 = (char *)operator new(160 * v50);
      v46 = (uint64_t)&v51[160 * (v50 >> 2)];
      v89 = &v51[160 * v50];
      if (v35)
        operator delete(v35);
    }
    v49 = v46;
    goto LABEL_43;
  }
  v11 = (__int128 *)(a3 + 1);
  if (a2 == v6)
  {
    *(_QWORD *)a2 = *a3;
    v40 = &v7[32 * (v8 >> 5)];
    v41 = *v11;
    *(_OWORD *)(v40 + 24) = *(_OWORD *)(a3 + 3);
    *(_OWORD *)(v40 + 8) = v41;
    v42 = *(_OWORD *)(a3 + 5);
    v43 = *(_OWORD *)(a3 + 7);
    v44 = *(_OWORD *)(a3 + 9);
    *(_OWORD *)(v40 + 88) = *(_OWORD *)(a3 + 11);
    *(_OWORD *)(v40 + 72) = v44;
    *(_OWORD *)(v40 + 56) = v43;
    *(_OWORD *)(v40 + 40) = v42;
    v45 = *(_OWORD *)(a3 + 13);
    *((_QWORD *)v40 + 15) = a3[15];
    *(_OWORD *)(v40 + 104) = v45;
    *((_QWORD *)v40 + 16) = a3[16];
    *(_OWORD *)(v40 + 136) = *(_OWORD *)(a3 + 17);
    a3[17] = 0;
    a3[18] = 0;
    v40[152] = *((_BYTE *)a3 + 152);
    a1[1] = a2 + 160;
  }
  else
  {
    v12 = *a3;
    v82 = *(_OWORD *)(a3 + 5);
    v83 = *(_OWORD *)(a3 + 3);
    v80 = *(_OWORD *)(a3 + 9);
    v81 = *(_OWORD *)(a3 + 7);
    v79 = *(_OWORD *)(a3 + 11);
    v85 = *v11;
    v86 = *(_OWORD *)(a3 + 13);
    v87 = a3[15];
    v13 = a3[16];
    v84 = *(_OWORD *)(a3 + 17);
    a3[17] = 0;
    a3[18] = 0;
    v14 = (unint64_t)a1[1];
    v15 = v14 - 160;
    v16 = v14;
    v17 = *((_BYTE *)a3 + 152);
    if (v14 >= 0xA0)
    {
      v18 = v14 - 160;
      v16 = (unint64_t)a1[1];
      do
      {
        *(_QWORD *)v16 = *(_QWORD *)v18;
        v19 = *(_OWORD *)(v18 + 8);
        *(_OWORD *)(v16 + 24) = *(_OWORD *)(v18 + 24);
        *(_OWORD *)(v16 + 8) = v19;
        v20 = *(_OWORD *)(v18 + 40);
        v21 = *(_OWORD *)(v18 + 56);
        v22 = *(_OWORD *)(v18 + 72);
        *(_OWORD *)(v16 + 88) = *(_OWORD *)(v18 + 88);
        *(_OWORD *)(v16 + 72) = v22;
        *(_OWORD *)(v16 + 56) = v21;
        *(_OWORD *)(v16 + 40) = v20;
        v23 = *(_OWORD *)(v18 + 104);
        *(_QWORD *)(v16 + 120) = *(_QWORD *)(v18 + 120);
        *(_OWORD *)(v16 + 104) = v23;
        *(_QWORD *)(v16 + 128) = *(_QWORD *)(v18 + 128);
        *(_OWORD *)(v16 + 136) = *(_OWORD *)(v18 + 136);
        *(_QWORD *)(v18 + 136) = 0;
        *(_QWORD *)(v18 + 144) = 0;
        *(_BYTE *)(v16 + 152) = *(_BYTE *)(v18 + 152);
        v16 += 160;
        v18 += 160;
      }
      while (v18 < v14);
    }
    a1[1] = (void *)v16;
    if ((char *)v14 != a2 + 160)
    {
      v24 = v14 - 160;
      v25 = v14;
      do
      {
        v26 = *(_QWORD *)(v24 - 160);
        v24 -= 160;
        *(_QWORD *)(v25 - 160) = v26;
        v25 -= 160;
        *(_OWORD *)(v25 + 8) = *(_OWORD *)(v24 + 8);
        *(_QWORD *)(v25 + 24) = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v25 + 32) = *(_QWORD *)(v24 + 32);
        *(_QWORD *)(v25 + 40) = *(_QWORD *)(v24 + 40);
        *(_QWORD *)(v25 + 48) = *(_QWORD *)(v24 + 48);
        *(_QWORD *)(v25 + 56) = *(_QWORD *)(v24 + 56);
        *(_QWORD *)(v25 + 64) = *(_QWORD *)(v24 + 64);
        *(_QWORD *)(v25 + 72) = *(_QWORD *)(v24 + 72);
        *(_QWORD *)(v25 + 80) = *(_QWORD *)(v24 + 80);
        *(_QWORD *)(v25 + 88) = *(_QWORD *)(v24 + 88);
        *(_QWORD *)(v25 + 96) = *(_QWORD *)(v24 + 96);
        v27 = *(_OWORD *)(v24 + 104);
        *(_QWORD *)(v25 + 120) = *(_QWORD *)(v24 + 120);
        *(_OWORD *)(v25 + 104) = v27;
        *(_QWORD *)(v25 + 128) = *(_QWORD *)(v24 + 128);
        v28 = *(_OWORD *)(v24 + 136);
        *(_QWORD *)(v24 + 136) = 0;
        *(_QWORD *)(v24 + 144) = 0;
        v29 = *(std::__shared_weak_count **)(v25 + 144);
        *(_OWORD *)(v25 + 136) = v28;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        *(_BYTE *)(v14 - 8) = *(_BYTE *)(v15 - 8);
        v14 = v25;
        v15 = v24;
      }
      while ((char *)v24 != v4);
    }
    *(_QWORD *)v4 = v12;
    v36 = &v7[160 * v9];
    *(_OWORD *)(v36 + 8) = v85;
    *(_OWORD *)(v36 + 24) = v83;
    *(_OWORD *)(v36 + 40) = v82;
    *(_OWORD *)(v36 + 56) = v81;
    *(_OWORD *)(v36 + 72) = v80;
    *(_OWORD *)(v36 + 88) = v79;
    *(_OWORD *)(v36 + 104) = v86;
    *((_QWORD *)v36 + 15) = v87;
    *((_QWORD *)v36 + 16) = v13;
    v37 = (std::__shared_weak_count *)*((_QWORD *)v36 + 18);
    *(_OWORD *)(v36 + 136) = v84;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v7[160 * v9 + 152] = v17;
  }
  return v4;
}

void sub_239C4A4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_239C31B0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C4A4B4(uint64_t a1)
{
  *(_QWORD *)a1 = off_250AFB6B8;
  free(*(void **)(a1 + 984));
  free(*(void **)(a1 + 960));
  *(_QWORD *)a1 = off_250AFB770;
  free(*(void **)(a1 + 912));
  free(*(void **)(a1 + 888));
  sub_239C40AE0(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C4A520(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_250AFB8D8;
  v2 = *(void **)(a1 + 440);
  if (v2)
  {
    *(_QWORD *)(a1 + 448) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 432);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  free(*(void **)(a1 + 400));
  *(_QWORD *)a1 = &unk_250AFB988;
  sub_239C40C30(a1 + 88);
  return a1;
}

uint64_t sub_239C4A58C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_250AFBA50;
  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  return a1;
}

void sub_239C4A61C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_250AFBA50;
  v2 = (_QWORD *)(a1 + 104);
  v3 = *(_QWORD **)(a1 + 128);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 8));
  JUMPOUT(0x23B83E31CLL);
}

void sub_239C4A6BC(uint64_t a1, int a2, double a3, __n128 a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, __n128 a8, float64x2_t a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  __int128 *v14;
  double v15;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  double *v24;
  float64x2_t v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  const double *v34;
  uint64_t v35;
  float64x2_t v36;
  uint64_t v37;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  char v55;
  int v56;
  int v57;
  float64x2_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const double *v67;
  uint64_t v68;
  float64x2_t v69;
  uint64_t v70;
  float64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float64x2_t *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  float64x2_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  unint64_t v112;
  float64_t *v113;
  unint64_t v114;
  float64_t *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  __int128 *v122;
  _OWORD *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char *v127;
  size_t v128;
  _BYTE *v129;
  uint64_t v130;
  _OWORD *v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  float64x2_t *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _OWORD *v142;
  __int128 *v143;
  uint64_t v144;
  __int128 v145;
  float64_t v146;
  float64x2_t *v147;
  uint64_t v148;
  float64x2_t v149;
  float64x2_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  char v167;
  int v168;
  int v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v177;
  float64x2_t *v178;
  uint64_t v179;
  float64x2_t v180;
  float64x2_t v182;
  const double *v184;
  uint64_t v185;
  float64x2_t v186;
  float64x2_t v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  int8x16_t v216;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v222;
  unint64_t v226;
  unint64_t v227;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v234;
  unint64_t v235;
  double v236;
  float64x2_t v237;
  unint64_t v238;
  double v239;
  float64x2_t v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  int8x16_t v249;
  double v250;
  double v251;
  double v252;
  float64x2_t *v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  int8x16_t v257;
  int8x16_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  int8x16_t v263;
  float64x2_t *v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  double v273;
  float64x2_t v274;
  double v275;
  float64x2_t v276;
  double v277;
  float64x2_t v278;
  int8x16_t v279;
  int8x16_t v280;
  float64x2_t v281;
  int8x16_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  int8x16_t v288;
  float64x2_t v289;
  int8x16_t v290;
  float64x2_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  float64_t v295;
  double v296;
  float64x2_t v297;
  double v298;
  float64x2_t v299;
  double v300;
  float64x2_t v301;
  int8x16_t v302;
  int8x16_t v303;
  double v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  int8x16_t v309;
  float64x2_t v310;
  float64x2_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  unint64_t *v319;
  uint64_t v320;
  char *v321;
  char *v322;
  uint64_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  unint64_t *v336;
  uint64_t v337;
  char *v338;
  char *v339;
  uint64_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  unint64_t *v350;
  uint64_t v351;
  char *v352;
  char *v353;
  uint64_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  unint64_t *v368;
  uint64_t v369;
  char *v370;
  char *v371;
  uint64_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  uint64_t v379;
  float64x2_t v381;
  uint64_t v384;
  float64x2_t v388;
  float64x2_t v389;
  uint64_t v390;
  __int128 v391;
  uint64_t *v392;
  int8x16_t v393;
  double *v394;
  float64x2_t v395;
  int8x16_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  _QWORD *v401;
  float64x2_t v402;
  float64x2_t v403;
  uint64_t v404;
  float64_t v405;
  double v406;
  uint64_t v407;
  float64x2_t v408;
  uint64_t v409;
  float64x2_t v410;
  uint64_t v411;
  float64x2_t v412;
  int8x16_t v414;
  uint64_t v415;
  float64x2_t v416;
  unint64_t v417;
  uint64_t v418;
  int8x16_t v419;
  double *v420;
  float64x2_t v421;
  float64x2_t v422;
  float64x2_t v423;
  _QWORD *v424;
  uint64_t v425;
  float64x2_t v426;
  unsigned int *v427;
  uint64_t v428;
  float64x2_t v429;
  float64x2_t v430;
  float64x2_t v431;
  __int128 v432;
  __int128 v433;
  uint64_t v434;
  void *__p;
  void *v436;
  uint64_t v437;
  float64x2_t v438[5];
  _OWORD v439[3];
  float64x2_t v440;
  float64x2_t v441[2];
  float64x2_t v442[3];
  float64x2_t v443;
  double v444;
  float64x2_t v445;
  _BYTE v446[32];
  float64x2_t v447;
  double v448;
  double v449;
  double v450;
  double v451;
  __int128 v452;
  double v453;
  float64x2_t v454;
  __int128 v455;
  double v456;
  uint64_t v457;
  float64x2_t v458[9];
  uint64_t v459;
  _QWORD *v460;
  __int128 *v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  std::mutex v465;
  uint64_t v466;
  float64x2x3_t v467;
  float64x2x3_t v468;
  float64x2x3_t v469;
  float64x2x3_t v470;

  v466 = *MEMORY[0x24BDAC8D0];
  v14 = *(__int128 **)(a1 + 136);
  v15 = *(double *)(a1 + 144);
  __asm { FMOV            V0.2D, #1.0 }
  v432 = _Q0;
  v433 = _Q0;
  memset(v441, 0, sizeof(v441));
  v440 = 0u;
  memset(v439, 0, sizeof(v439));
  memset(v438, 0, sizeof(v438));
  v434 = *((_QWORD *)v14 + 1);
  __p = 0;
  v436 = 0;
  v437 = 0;
  v21 = *(_QWORD *)(v434 + 48) - *(_QWORD *)(v434 + 40);
  if ((v21 >> 2))
    sub_239AF450C(&__p, (v21 >> 2));
  v22 = (void *)*((_QWORD *)v14 + 6);
  v23 = *((_QWORD *)v14 + 7) - (_QWORD)v22;
  if (v23 >= 1)
    bzero(v22, 8 * (((unint64_t)v23 >> 3) - ((unint64_t)v23 > 7)) + 8);
  v401 = (_QWORD *)v14 + 23;
  v24 = (double *)*((_QWORD *)v14 + 13);
  v392 = (uint64_t *)v14;
  v391 = *v14;
  v405 = *((double *)v14 + 1);
  v394 = (double *)*((_QWORD *)v14 + 14);
  if (v24 != v394)
  {
    v25 = (float64x2_t)*v14;
    v26 = 0uLL;
    while (1)
    {
      v24[2] = 0.0;
      v438[0].f64[0] = 0.0;
      v458[0].f64[0] = v405;
      v27 = (uint64_t *)*((_QWORD *)v24 + 6);
      v28 = *((_QWORD *)v24 + 3);
      v29 = *((_QWORD *)v24 + 4);
      if (v29)
      {
        v30 = *(_QWORD *)(v391 + 80);
        v31 = *v27;
        v32 = (uint64_t *)(v31 + 8 * (v29 + v28));
        v33 = (uint64_t *)(v31 + 8 * v28);
        do
        {
          v47 = *v33;
          v48 = (_QWORD *)(v30 + 160 * *v33);
          v50 = v48[10];
          v49 = v48[11];
          v51 = v48[12];
          if (((*(unsigned __int8 *)(v49 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v50 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v51 + 36)) >> 7)
            v52 = 2;
          else
            v52 = 1;
          if ((v52 & a2) != 0)
          {
            v53 = *(unsigned __int8 *)(v50 + 4);
            if (!*(_BYTE *)(v50 + 4) || *(_DWORD *)(v50 + 48) != -1)
            {
              v54 = *(unsigned __int8 *)(v49 + 4);
              if (!*(_BYTE *)(v49 + 4) || *(_DWORD *)(v49 + 48) != -1)
              {
                v55 = *(_BYTE *)(v51 + 4);
                if (!v55 || *(_DWORD *)(v51 + 32) != -1)
                {
                  LOBYTE(v442[0].f64[0]) = *(_BYTE *)(v50 + 4);
                  if (v53)
                    v56 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v50 + 48));
                  else
                    v56 = -1;
                  HIDWORD(v442[0].f64[0]) = v56;
                  LOBYTE(v442[0].f64[1]) = v54;
                  if (v54)
                    v57 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v49 + 48));
                  else
                    v57 = -1;
                  HIDWORD(v442[0].f64[1]) = v57;
                  LOBYTE(v442[1].f64[0]) = v55;
                  HIDWORD(v442[1].f64[0]) = -1;
                  sub_239C4C720((uint64_t)(v48 + 1), (uint64_t)&v433, (uint64_t)&v438[0].f64[1], v25.f64[0], a4.n128_f64[0], a5.f64[0], a6.f64[0], a7.f64[0], a8.n128_f64[0], a9, a10);
                  v59 = (float64x2_t *)(v30 + 160 * v47 + 104);
                  if (v53)
                  {
                    v60 = *((_QWORD *)v24 + 3);
                    v62 = *((_QWORD *)v24 + 5);
                    v61 = *((_QWORD *)v24 + 6);
                    v63 = *(_QWORD *)(v61 + 56);
                    v64 = v63 + 16 * v60;
                    if (v62)
                    {
                      v65 = v63 + 16 * (v62 + v60);
                      v66 = 16 * v62;
                      while (*(_DWORD *)v64 != v56)
                      {
                        v64 += 16;
                        v66 -= 16;
                        if (!v66)
                        {
                          v64 = v65;
                          break;
                        }
                      }
                    }
                    v67 = &v438[0].f64[1];
                    v469 = vld3q_f64(v67);
                    v68 = *(_QWORD *)(v61 + 24) + 8 * *(_QWORD *)(v64 + 8);
                    _Q4.f64[0] = *(float64_t *)(v68 + 16);
                    _Q5.f64[1] = v438[4].f64[0];
                    v69 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v469.val[0], v441[0].f64[1]), v469.val[1], *(float64x2_t *)((char *)v441 + 8), 1), v469.val[2], v441[1].f64[1]);
                    v469.val[0] = vmulq_f64(*(float64x2_t *)((char *)&v438[3] + 8), *(float64x2_t *)((char *)v441 + 8));
                    v469.val[1].f64[0] = v441[1].f64[0];
                    __asm { FMLA            D0, D1, V5.D[1] }
                    v469.val[0].f64[0] = v469.val[0].f64[0] + v438[4].f64[1] * v441[1].f64[1];
                    *(float64x2_t *)v68 = vaddq_f64(*(float64x2_t *)v68, v69);
                    *(_QWORD *)(v68 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v469.val[0]);
                    v470 = vld3q_f64(v67);
                    v70 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v56);
                    _Q4.f64[0] = *(float64_t *)(v70 + 16);
                    _Q5.f64[0] = v438[4].f64[1];
                    _Q6 = *(float64x2_t *)((char *)&v438[3] + 8);
                    v40.f64[0] = *(float64_t *)(v30 + 160 * v47 + 120);
                    v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v470.val[0], v59->f64[0]), v470.val[1], *v59, 1), v470.val[2], v40.f64[0]);
                    v470.val[0] = vmulq_f64(*(float64x2_t *)((char *)&v438[3] + 8), *v59);
                    v470.val[1].f64[0] = *(float64_t *)(v30 + 160 * v47 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    v470.val[0].f64[0] = v470.val[0].f64[0] + v438[4].f64[1] * v40.f64[0];
                    *(float64x2_t *)v70 = vsubq_f64(*(float64x2_t *)v70, v71);
                    *(_QWORD *)(v70 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v470.val[0]);
                  }
                  if (v54)
                  {
                    v72 = *((_QWORD *)v24 + 3);
                    v74 = *((_QWORD *)v24 + 5);
                    v73 = *((_QWORD *)v24 + 6);
                    v75 = *(_QWORD *)(v73 + 56);
                    v76 = v75 + 16 * v72;
                    if (v74)
                    {
                      v77 = v75 + 16 * (v74 + v72);
                      v78 = 16 * v74;
                      while (*(_DWORD *)v76 != v57)
                      {
                        v76 += 16;
                        v78 -= 16;
                        if (!v78)
                        {
                          v76 = v77;
                          break;
                        }
                      }
                    }
                    v34 = (const double *)v439;
                    v467 = vld3q_f64(v34);
                    v35 = *(_QWORD *)(v73 + 24) + 8 * *(_QWORD *)(v76 + 8);
                    _Q4.f64[0] = *(float64_t *)(v35 + 16);
                    _Q5.f64[1] = v440.f64[1];
                    v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v467.val[0], v441[0].f64[1]), v467.val[1], *(float64x2_t *)((char *)v441 + 8), 1), v467.val[2], v441[1].f64[1]);
                    v467.val[0] = vmulq_f64(v440, *(float64x2_t *)((char *)v441 + 8));
                    v467.val[1].f64[0] = v441[1].f64[0];
                    __asm { FMLA            D0, D1, V5.D[1] }
                    v467.val[0].f64[0] = v467.val[0].f64[0] + v441[0].f64[0] * v441[1].f64[1];
                    *(float64x2_t *)v35 = vaddq_f64(*(float64x2_t *)v35, v36);
                    *(_QWORD *)(v35 + 16) = *(_OWORD *)&vaddq_f64(_Q4, v467.val[0]);
                    v468 = vld3q_f64(v34);
                    v37 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v57);
                    _Q4.f64[0] = *(float64_t *)(v37 + 16);
                    _Q5.f64[0] = v441[0].f64[0];
                    _Q6 = v440;
                    v40.f64[0] = *(float64_t *)(v30 + 160 * v47 + 120);
                    v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v468.val[0], v59->f64[0]), v468.val[1], *v59, 1), v468.val[2], v40.f64[0]);
                    v468.val[0] = vmulq_f64(v440, *v59);
                    v468.val[1].f64[0] = *(float64_t *)(v30 + 160 * v47 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    v468.val[0].f64[0] = v468.val[0].f64[0] + v441[0].f64[0] * v40.f64[0];
                    *(float64x2_t *)v37 = vsubq_f64(*(float64x2_t *)v37, v41);
                    *(_QWORD *)(v37 + 16) = *(_OWORD *)&vsubq_f64(_Q4, v468.val[0]);
                  }
                  _Q0.f64[1] = v441[1].f64[0];
                  _Q2 = *v59;
                  _Q2.f64[0] = *(float64_t *)(v30 + 160 * v47 + 112);
                  __asm { FMLA            D3, D2, V0.D[1] }
                  _Q2.f64[0] = v438[0].f64[0];
                  v24[2] = v24[2] - (_D3 + v441[1].f64[1] * *(double *)(v30 + 160 * v47 + 120));
                  _V1.D[1] = v441[1].f64[0];
                  _Q4.f64[0] = v441[1].f64[0];
                  __asm { FMLA            D3, D4, V1.D[1] }
                  _Q0.f64[0] = _Q2.f64[0] + _D3 + v441[1].f64[1] * v441[1].f64[1];
                  v438[0].f64[0] = _Q0.f64[0];
                  v25.f64[0] = sub_239C23F18((uint64_t *)v458, (uint64_t)v442, (uint64_t)&v438[0].f64[1], _Q0, v441[0].f64[1], _Q2, _D3, _Q4, _Q5, _Q6, v40);
                  v26 = 0uLL;
                }
              }
            }
          }
          ++v33;
        }
        while (v33 != v32);
        v79 = v438[0].f64[0];
        v27 = (uint64_t *)*((_QWORD *)v24 + 6);
        v28 = *((_QWORD *)v24 + 3);
      }
      else
      {
        v79 = 0.0;
      }
      a4.n128_f64[0] = fabs(v79);
      v25.f64[0] = 1.0 / v79;
      if (a4.n128_f64[0] < v15)
        v25.f64[0] = 0.0;
      v24[1] = v25.f64[0];
      v80 = *((_QWORD *)v24 + 5);
      if (v80)
        break;
LABEL_7:
      v24 += 7;
      if (v24 == v394)
        goto LABEL_131;
    }
    v409 = v434;
    v81 = v27[7];
    v407 = v81 + 16 * (v80 + v28);
    v82 = v81 + 16 * v28;
    v420 = v24;
    while (1)
    {
      v83 = *(_QWORD *)(*((_QWORD *)v24 + 6) + 24) + 8 * *(_QWORD *)(v82 + 8);
      v25.f64[0] = *(float64_t *)(v83 + 16);
      a4 = *(__n128 *)v83;
      a5.f64[0] = v24[1];
      a6.f64[0] = v24[2];
      a7 = vmulq_n_f64(*(float64x2_t *)v83, a5.f64[0]);
      v84 = *(_QWORD *)v409 + 8 * (*(_DWORD *)(v409 + 28) + 3 * *(_DWORD *)v82);
      a4.n128_u64[0] = *(_QWORD *)(v84 + 16);
      v430 = vmulq_f64(v25, a5);
      a4.n128_u64[0] = *(_OWORD *)&vmlsq_f64((float64x2_t)a4, a6, v430);
      a5 = a7;
      v25 = vmlsq_lane_f64(*(float64x2_t *)v84, a7, a6.f64[0], 0);
      *(float64x2_t *)v84 = v25;
      *(_QWORD *)(v84 + 16) = a4.n128_u64[0];
      v411 = v82;
      v85 = *(_DWORD *)v82;
      v86 = *((_QWORD *)v24 + 3);
      v87 = *((_QWORD *)v24 + 5);
      v88 = *(_QWORD *)(*((_QWORD *)v24 + 6) + 56);
      v89 = (unsigned int *)(v88 + 16 * v86);
      if (v87)
      {
        v90 = 16 * v87;
        while (*v89 < v85)
        {
          v89 += 4;
          v90 -= 16;
          if (!v90)
            goto LABEL_48;
        }
      }
      v427 = (unsigned int *)(v88 + 16 * (v87 + v86));
      if (v89 != v427)
        break;
LABEL_48:
      v82 = v411 + 16;
      if (v411 + 16 == v407)
        goto LABEL_7;
    }
    v25 = (float64x2_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL);
    v91 = *(_QWORD **)(v409 + 32);
    v424 = v91 + 2;
    a5.f64[1] = v25.f64[0];
    v422 = a5;
    while (1)
    {
      v94 = v91[11] + 24 * *v89;
      v95 = *(char **)v94;
      v96 = *(char **)(v94 + 8);
      if (*(char **)v94 != v96)
      {
        while (*(_DWORD *)v95 < v85)
        {
          v95 += 16;
          if (v95 == v96)
            goto LABEL_65;
        }
      }
      if (v95 == v96)
        goto LABEL_65;
      if (*(_DWORD *)v95 != v85)
        break;
      v92 = *v424 + 8 * *((_QWORD *)v95 + 1);
LABEL_57:
      v93 = *(_QWORD *)(*((_QWORD *)v24 + 6) + 24) + 8 * *((_QWORD *)v89 + 1);
      v25.f64[0] = *(float64_t *)(v92 + 16);
      a5.f64[0] = *(float64_t *)(v92 + 40);
      a7.f64[0] = *(float64_t *)(v92 + 64);
      a9.f64[0] = *(float64_t *)(v93 + 16);
      a10 = *(float64x2_t *)v93;
      v12.f64[0] = v430.f64[0] * *(double *)v93;
      v13.f64[0] = vmuld_lane_f64(v430.f64[0], *(float64x2_t *)v93, 1);
      v25 = vsubq_f64(v25, v12);
      v12.f64[1] = v422.f64[1];
      a4 = (__n128)vmlsq_lane_f64(*(float64x2_t *)v92, v422, *(double *)v93, 0);
      a5 = vsubq_f64(a5, v13);
      a6 = vmlsq_laneq_f64(*(float64x2_t *)(v92 + 24), v422, *(float64x2_t *)v93, 1);
      a7 = vmlsq_f64(a7, a9, v430);
      a8 = (__n128)vmlsq_lane_f64(*(float64x2_t *)(v92 + 48), v422, a9.f64[0], 0);
      *(__n128 *)v92 = a4;
      *(float64_t *)(v92 + 16) = v25.f64[0];
      *(float64x2_t *)(v92 + 24) = a6;
      *(float64_t *)(v92 + 40) = a5.f64[0];
      *(__n128 *)(v92 + 48) = a8;
      *(float64_t *)(v92 + 64) = a7.f64[0];
      v89 += 4;
      if (v89 == v427)
        goto LABEL_48;
    }
    v96 = v95;
LABEL_65:
    v97 = v91[10];
    if (v97)
    {
      v99 = v91[6];
      v98 = v91[7];
      v100 = ((v98 - v99) << 6) - 1;
      v101 = v91[9];
      if (v98 == v99)
        v100 = 0;
      v92 = v91[2]
          + 8
          * *(_QWORD *)(*(_QWORD *)(v99 + (((unint64_t)(v101 + v97 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v101 + v97 - 1) & 0x1FF));
      v91[10] = v97 - 1;
      if ((unint64_t)(v100 - (v97 + v101) + 1) >= 0x400)
      {
        operator delete(*(void **)(v98 - 8));
        v91[7] -= 8;
      }
      goto LABEL_130;
    }
    v442[0].f64[0] = 0.0;
    v103 = v91[2];
    v102 = (float64x2_t *)v91[3];
    v104 = (unint64_t)v102 - v103;
    v105 = (uint64_t)((uint64_t)v102 - v103) >> 3;
    v106 = (float64x2_t *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8));
    v107 = v91[4];
    if ((unint64_t)(v107 - (_QWORD)v102) < 0x48)
    {
      v108 = v105 + 9;
      if ((unint64_t)(v105 + 9) >> 61)
        sub_2394189F8();
      v109 = v107 - v103;
      if (v109 >> 2 > v108)
        v108 = v109 >> 2;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8)
        v108 = 0x1FFFFFFFFFFFFFFFLL;
      v417 = v108;
      if (v108)
      {
        if (v108 >> 61)
          sub_239418A80();
        v110 = operator new(8 * v108);
        v26 = 0uLL;
      }
      else
      {
        v110 = 0;
      }
      v116 = &v110[8 * v105];
      *((_QWORD *)v116 + 8) = 0;
      *((_OWORD *)v116 + 2) = v26;
      *((_OWORD *)v116 + 3) = v26;
      *(_OWORD *)v116 = v26;
      *((_OWORD *)v116 + 1) = v26;
      v415 = v94;
      if ((float64x2_t *)v103 == v102)
      {
        v118 = &v110[8 * v105];
      }
      else
      {
        if (v104 - 8 >= 0x68)
        {
          v119 = (uint64_t)((uint64_t)v102 - v103) >> 3;
          v117 = (char *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8));
          v118 = &v110[8 * v105];
          if (v103 + (v104 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v110[v104 & 0xFFFFFFFFFFFFFFF8] >= 0x20)
          {
            v120 = ((v104 - 8) >> 3) + 1;
            v117 = (char *)v106 - 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
            v121 = 8 * v119;
            v122 = (__int128 *)(v103 + 8 * v119 - 16);
            v123 = &v110[v121 - 16];
            v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v125 = *v122;
              *(v123 - 1) = *(v122 - 1);
              *v123 = v125;
              v122 -= 2;
              v123 -= 2;
              v124 -= 4;
            }
            while (v124);
            v118 = &v116[-8 * (v120 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v120 == (v120 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_93;
          }
        }
        else
        {
          v117 = (char *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8));
          v118 = &v110[8 * v105];
        }
        do
        {
          v126 = *((_QWORD *)v117 - 1);
          v117 -= 8;
          *((_QWORD *)v118 - 1) = v126;
          v118 -= 8;
        }
        while (v117 != (char *)v103);
      }
LABEL_93:
      v127 = v116 + 72;
      v128 = (char *)v102 - (char *)v106;
      if (v128)
      {
        v129 = v110;
        memmove(v116 + 72, v106, v128);
        v110 = v129;
      }
      v91[2] = v118;
      v91[3] = &v127[v128];
      v91[4] = &v110[8 * v417];
      v94 = v415;
      if (v103)
        operator delete((void *)v103);
      goto LABEL_129;
    }
    v418 = (uint64_t)((uint64_t)v102 - v103) >> 3;
    v111 = (char *)v102 - (char *)v106;
    if ((unint64_t)((char *)v102 - (char *)v106) > 0x47)
    {
      v113 = (float64_t *)v91[3];
      v112 = 9;
      goto LABEL_106;
    }
    v112 = v111 >> 3;
    v113 = &v102->f64[9 - (v111 >> 3)];
    v114 = 64 - (v111 & 0xFFFFFFFFFFFFFFF8);
    if (v114 >= 0x68)
    {
      if (v102 >= (float64x2_t *)&v442[0].f64[1] || v442 >= (float64x2_t *)((char *)&v102->f64[1] + v114))
      {
        v130 = (v114 >> 3) + 1;
        v131 = (_OWORD *)v91[3];
        v132 = v130 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *v131 = v26;
          v131[1] = v26;
          v131 += 2;
          v132 -= 4;
        }
        while (v132);
        if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_105:
          v91[3] = v113;
          if (v102 == v106)
            goto LABEL_129;
LABEL_106:
          v133 = (char *)v113 - (char *)&v106[4].f64[1];
          v134 = v133 >> 3;
          v135 = (float64x2_t *)(v113 - 9);
          v136 = (char *)v113;
          if (v113 - 9 < (float64_t *)v102)
          {
            v137 = (v104 & 0xFFFFFFFFFFFFFFF8) + v133;
            v138 = v103 + v137 + 8;
            if ((unint64_t)v102 > v138)
              v138 = (unint64_t)v102;
            v139 = v138 + ~v103 - v137;
            if (v139 > 0x57)
            {
              v140 = (v139 >> 3) + 1;
              v141 = v140 & 0x3FFFFFFFFFFFFFFCLL;
              v135 = (float64x2_t *)((char *)v135 + v141 * 8);
              v142 = v113 + 2;
              v143 = (__int128 *)(v103 + 8 * v134 + 8 * v418 + 16);
              v144 = v140 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v145 = *v143;
                *(v142 - 1) = *(v143 - 1);
                *v142 = v145;
                v142 += 2;
                v143 += 2;
                v144 -= 4;
              }
              while (v144);
              v136 = (char *)&v113[v141];
              if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_115;
            }
            else
            {
              v136 = (char *)v113;
            }
            do
            {
              v146 = v135->f64[0];
              v135 = (float64x2_t *)((char *)v135 + 8);
              *(float64_t *)v136 = v146;
              v136 += 8;
            }
            while (v135 < v102);
          }
LABEL_115:
          v91[3] = v136;
          if (v113 != &v106[4].f64[1])
            memmove(&v113[-v134], (const void *)(v103 + (((unint64_t)v102 - v103) & 0xFFFFFFFFFFFFFFF8)), v133);
          v147 = v442;
          if (v106 <= v442)
          {
            v148 = 72;
            if (v91[3] <= (unint64_t)v442)
              v148 = 0;
            v147 = (float64x2_t *)((char *)v442 + v148);
          }
          if (v112 >= 0xA
            && (v106 >= (float64x2_t *)&v147->f64[1]
             || (unint64_t)v147 >= v103 + (v104 & 0xFFFFFFFFFFFFFFF8) + 8 * v112))
          {
            v106 = (float64x2_t *)((char *)v106 + 8 * (v112 & 0xFFFFFFFFFFFFFFFCLL));
            v149 = vld1q_dup_f64(v147->f64);
            v150 = (float64x2_t *)(v103 + 8 * v418 + 16);
            v151 = v112 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v150[-1] = v149;
              *v150 = v149;
              v150 += 2;
              v151 -= 4;
            }
            while (v151);
            if (v112 == (v112 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_129;
            v112 &= 3u;
          }
          do
          {
            v106->f64[0] = v147->f64[0];
            v106 = (float64x2_t *)((char *)v106 + 8);
            --v112;
          }
          while (v112);
LABEL_129:
          v92 = v91[3] - 72;
          v24 = v420;
LABEL_130:
          v152 = (v92 - *v424) >> 3;
          LODWORD(v442[0].f64[0]) = v85;
          *(_QWORD *)&v442[0].f64[1] = v152;
          sub_239C22598((char **)v94, v96, v442);
          v26 = 0uLL;
          goto LABEL_57;
        }
        v115 = &v102->f64[v130 & 0x3FFFFFFFFFFFFFFCLL];
      }
      else
      {
        v115 = (float64_t *)v91[3];
      }
    }
    else
    {
      v115 = (float64_t *)v91[3];
    }
    do
      *v115++ = v442[0].f64[0];
    while (v115 != v113);
    goto LABEL_105;
  }
LABEL_131:
  v153 = v392[16];
  v425 = v392[17];
  if (v153 != v425)
  {
    v154 = *(double *)&v391;
    do
    {
      *(_QWORD *)(v153 + 16) = 0;
      v458[0].f64[0] = v405;
      v428 = v153;
      v155 = *(_QWORD *)(v153 + 32);
      if (v155)
      {
        v156 = *(_QWORD *)(v391 + 80);
        v157 = (uint64_t *)(**(_QWORD **)(v153 + 48) + 8 * *(_QWORD *)(v153 + 24));
        v158 = 8 * v155;
        do
        {
          v159 = *v157;
          v160 = (_QWORD *)(v156 + 160 * *v157);
          v162 = v160[10];
          v161 = v160[11];
          v163 = v160[12];
          if (((*(unsigned __int8 *)(v161 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(v162 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v163 + 36)) >> 7)
            v164 = 2;
          else
            v164 = 1;
          if ((v164 & a2) != 0)
          {
            v165 = *(unsigned __int8 *)(v162 + 4);
            if (!*(_BYTE *)(v162 + 4) || *(_DWORD *)(v162 + 48) != -1)
            {
              v166 = *(unsigned __int8 *)(v161 + 4);
              if (!*(_BYTE *)(v161 + 4) || *(_DWORD *)(v161 + 48) != -1)
              {
                v167 = *(_BYTE *)(v163 + 4);
                if (!v167 || *(_DWORD *)(v163 + 32) != -1)
                {
                  LOBYTE(v442[0].f64[0]) = *(_BYTE *)(v162 + 4);
                  if (v165)
                    v168 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v162 + 48));
                  else
                    v168 = -1;
                  HIDWORD(v442[0].f64[0]) = v168;
                  LOBYTE(v442[0].f64[1]) = v166;
                  if (v166)
                    v169 = *(_DWORD *)(*v401 + 4 * *(unsigned int *)(v161 + 48));
                  else
                    v169 = -1;
                  HIDWORD(v442[0].f64[1]) = v169;
                  LOBYTE(v442[1].f64[0]) = v167;
                  HIDWORD(v442[1].f64[0]) = -1;
                  v170.f64[0] = sub_239C4C720((uint64_t)(v160 + 1), (uint64_t)&v433, (uint64_t)&v438[0].f64[1], v154, a4.n128_f64[0], a5.f64[0], a6.f64[0], a7.f64[0], a8.n128_f64[0], a9, a10);
                  v178 = (float64x2_t *)(v156 + 160 * v159 + 104);
                  if (v165)
                  {
                    *(float64x2x3_t *)(&v172 - 2) = vld3q_f64(&v438[0].f64[1]);
                    v179 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v168);
                    v173 = *(float64x2_t *)v179;
                    v174.f64[0] = *(float64_t *)(v179 + 16);
                    v175.f64[0] = v438[4].f64[1];
                    _Q6 = *(float64x2_t *)((char *)&v438[3] + 8);
                    v177.f64[0] = *(float64_t *)(v156 + 160 * v159 + 120);
                    v182 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v180, v178->f64[0]), _Q1, *v178, 1), v172, v177.f64[0]);
                    _Q0 = vmulq_f64(*(float64x2_t *)((char *)&v438[3] + 8), *v178);
                    _Q1.f64[0] = *(float64_t *)(v156 + 160 * v159 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    _Q0.f64[0] = _Q0.f64[0] + v438[4].f64[1] * v177.f64[0];
                    v170 = vsubq_f64(v174, _Q0);
                    v171 = vsubq_f64(*(float64x2_t *)v179, v182);
                    *(float64x2_t *)v179 = v171;
                    *(float64_t *)(v179 + 16) = v170.f64[0];
                  }
                  if (v166)
                  {
                    v184 = (const double *)v439;
                    *(float64x2x3_t *)(&v172 - 2) = vld3q_f64(v184);
                    v185 = **(_QWORD **)&v405 + 8 * (*(_DWORD *)(*(_QWORD *)&v405 + 28) + 3 * v169);
                    v173 = *(float64x2_t *)v185;
                    v174.f64[0] = *(float64_t *)(v185 + 16);
                    v175.f64[0] = v441[0].f64[0];
                    _Q6 = v440;
                    v177.f64[0] = *(float64_t *)(v156 + 160 * v159 + 120);
                    v188 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, v178->f64[0]), _Q1, *v178, 1), v172, v177.f64[0]);
                    _Q0 = vmulq_f64(v440, *v178);
                    _Q1.f64[0] = *(float64_t *)(v156 + 160 * v159 + 112);
                    __asm { FMLA            D0, D1, V6.D[1] }
                    _Q0.f64[0] = _Q0.f64[0] + v441[0].f64[0] * v177.f64[0];
                    v170 = vsubq_f64(v174, _Q0);
                    v171 = vsubq_f64(*(float64x2_t *)v185, v188);
                    *(float64x2_t *)v185 = v171;
                    *(float64_t *)(v185 + 16) = v170.f64[0];
                  }
                  v154 = sub_239C23F18((uint64_t *)v458, (uint64_t)v442, (uint64_t)&v438[0].f64[1], v170, v171.f64[0], v172, v173.f64[0], v174, v175, _Q6, v177);
                }
              }
            }
          }
          ++v157;
          v158 -= 8;
        }
        while (v158);
      }
      v153 = v428 + 56;
    }
    while (v428 + 56 != v425);
  }
  v190 = v392[1];
  v459 = *v392;
  v460 = v401;
  v461 = &v432;
  v404 = v190;
  v462 = v190;
  v463 = 0;
  v464 = a2;
  memset(v465.__m_.__opaque, 0, sizeof(v465.__m_.__opaque));
  v465.__m_.__sig = 850045863;
  v192 = *(_QWORD *)(v459 + 56);
  v191 = *(_QWORD *)(v459 + 64);
  if (v192 != v191)
  {
    v390 = *(_QWORD *)(v459 + 64);
    _D10 = 0;
    while (1)
    {
      v194 = *(_QWORD *)(v192 + 48);
      v195 = *(_QWORD *)(v192 + 56);
      v196 = ((*(unsigned __int8 *)(v195 + 52) >> 2) & 1) == (char)(32 * *(_BYTE *)(v194 + 52)) >> 7 ? 2 : 1;
      if ((v196 & v464) != 0)
      {
        v197 = *(unsigned __int8 *)(v194 + 4);
        if (!*(_BYTE *)(v194 + 4) || *(_DWORD *)(v194 + 48) != -1)
        {
          v198 = *(unsigned __int8 *)(v195 + 4);
          if (!*(_BYTE *)(v195 + 4) || *(_DWORD *)(v195 + 48) != -1)
            break;
        }
      }
LABEL_160:
      v192 += 120;
      if (v192 == v191)
        goto LABEL_252;
    }
    if (*(_BYTE *)(v194 + 4))
    {
      v199 = *(_DWORD *)(*v460 + 4 * *(unsigned int *)(v194 + 48));
      if (*(_BYTE *)(v195 + 4))
      {
LABEL_171:
        v200 = *(_DWORD *)(*v460 + 4 * *(unsigned int *)(v195 + 48));
        goto LABEL_174;
      }
    }
    else
    {
      v199 = -1;
      if (*(_BYTE *)(v195 + 4))
        goto LABEL_171;
    }
    v200 = -1;
LABEL_174:
    *(_QWORD *)(v192 + 32) = v194 + 16;
    *(_QWORD *)(v192 + 40) = v195 + 16;
    v454 = 0u;
    v455 = 0u;
    BYTE8(v455) = 1;
    v456 = 0.0;
    v457 = 1;
    memset(v458, 0, sizeof(v458));
    memset(v442, 0, sizeof(v442));
    v443 = 0u;
    v444 = 0.0;
    v448 = 0.0;
    *(float64x2_t *)&v446[16] = *(float64x2_t *)((char *)&v458[6] + 8);
    v447 = *(float64x2_t *)((char *)&v458[7] + 8);
    v445 = *(float64x2_t *)((char *)&v458[4] + 8);
    *(float64x2_t *)v446 = *(float64x2_t *)((char *)&v458[5] + 8);
    v450 = 0.0;
    v451 = 0.0;
    v449 = 0.0;
    v452 = *(__int128 *)((char *)&v458[1] + 8);
    v453 = 0.0;
    sub_239C23688(v192 + 24, (uint64_t)&v454, (uint64_t)v442, *(float64x2_t *)((char *)&v458[1] + 8), 0.0, *(float64x2_t *)((char *)&v458[6] + 8));
    v218.f64[0] = 0.0;
    v219.f64[0] = 1.0 / v456;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 32) + 24))
    {
      _Q1.f64[1] = v442[0].f64[1];
      _V4.D[1] = v442[2].f64[0];
      _Q6.f64[1] = v443.f64[1];
      v222.f64[0] = 0.0;
      v222.f64[1] = 1.0 / v456;
      v207 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v442[0].f64[0]), v222, v442[0], 1), (float64x2_t)0, v442[1].f64[0]);
      __asm { FMLA            D20, D10, V1.D[1] }
      _Q1.f64[0] = _D20 + v219.f64[0] * v442[1].f64[0];
      v201 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v442[1].f64[1]), v222, *(float64x2_t *)((char *)&v442[1] + 8), 1), (float64x2_t)0, v442[2].f64[1]);
      __asm { FMLA            D20, D10, V4.D[1] }
      v202.f64[0] = _D20 + v219.f64[0] * v442[2].f64[1];
      v206 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v443.f64[0]), v222, v443, 1), (float64x2_t)0, v444);
      __asm { FMLA            D4, D10, V6.D[1] }
      _Q6.f64[0] = _D4 + v219.f64[0] * v444;
      v204 = vaddq_f64(v207, (float64x2_t)0);
      v209 = vaddq_f64(_Q1, (float64x2_t)0);
      v203 = vaddq_f64(v201, (float64x2_t)0);
      v210 = vaddq_f64(v202, (float64x2_t)0);
      v202 = vaddq_f64(v206, (float64x2_t)0);
      v211 = vaddq_f64(_Q6, (float64x2_t)0);
      v212.f64[0] = v203.f64[1];
      v226 = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
      v227 = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
    }
    else
    {
      v204.f64[0] = 0.0;
      v227 = 0;
      v209.f64[0] = 0.0;
      v203.f64[0] = 0.0;
      v212.f64[0] = 0.0;
      v210.f64[0] = 0.0;
      v202.f64[0] = 0.0;
      v226 = 0;
      v211.f64[0] = 0.0;
    }
    *(_QWORD *)&v201.f64[0] = v455;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
    {
      _V7.D[1] = v445.f64[1];
      _V16.D[1] = *(_QWORD *)&v446[16];
      _V28.D[1] = v447.f64[1];
      v218.f64[1] = 1.0 / v456;
      v231 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v445.f64[0]), v218, v445, 1), (float64x2_t)0, *(double *)v446);
      __asm { FMLA            D30, D10, V7.D[1] }
      _Q6.f64[0] = _Q30.f64[0] + v219.f64[0] * *(double *)v446;
      v232 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), *(double *)&v446[8]), v218, *(float64x2_t *)&v446[8], 1), (float64x2_t)0, *(double *)&v446[24]);
      __asm { FMLA            D30, D10, V16.D[1] }
      _Q30.f64[0] = _Q30.f64[0] + v219.f64[0] * *(double *)&v446[24];
      v215 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v456), v447.f64[0]), v218, v447, 1), (float64x2_t)0, v448);
      __asm { FMLA            D16, D10, V28.D[1] }
      v218.f64[0] = _D16 + v219.f64[0] * v448;
      v207 = vaddq_f64(v231, (float64x2_t)0);
      v213 = vaddq_f64(_Q6, (float64x2_t)0);
      v206 = vaddq_f64(v232, (float64x2_t)0);
      v214 = vaddq_f64(_Q30, (float64x2_t)0);
      v234 = vaddq_f64(v215, (float64x2_t)0);
      v218 = vaddq_f64(v218, (float64x2_t)0);
      v215.f64[0] = v206.f64[1];
      v216 = vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL);
      v235 = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
    }
    else
    {
      v207.f64[0] = 0.0;
      v235 = 0;
      v213.f64[0] = 0.0;
      v206.f64[0] = 0.0;
      v215.f64[0] = 0.0;
      v214.f64[0] = 0.0;
      v234.f64[0] = 0.0;
      v216.i64[0] = 0;
    }
    v208.f64[0] = -1.0 / (v456 * v456);
    *(_QWORD *)&v236 = *(_OWORD *)&vmulq_f64(v201, v208);
    v237 = vmulq_n_f64(v454, v208.f64[0]);
    v238 = vextq_s8((int8x16_t)v237, (int8x16_t)v237, 8uLL).u64[0];
    v239 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 32) + 24))
    {
      v240.f64[0] = v237.f64[0];
      *(_QWORD *)&v240.f64[1] = v238;
      v10.f64[0] = v236 * v449;
      v11.f64[0] = v236 * v450;
      *(_QWORD *)&v204.f64[1] = v227;
      v203.f64[1] = v212.f64[0];
      v212.f64[0] = v236 * v451;
      *(_QWORD *)&v202.f64[1] = v226;
      v204 = vmlaq_n_f64(v204, v240, v449);
      *(_QWORD *)&v241 = *(_OWORD *)&vaddq_f64(v209, v10);
      v203 = vmlaq_n_f64(v203, v240, v450);
      *(_QWORD *)&v242 = *(_OWORD *)&vaddq_f64(v210, v11);
      v202 = vmlaq_n_f64(v202, v240, v451);
      *(_QWORD *)&v243 = *(_OWORD *)&vaddq_f64(v211, v212);
      v244 = v203.f64[1];
      *(_QWORD *)&v245 = vextq_s8((int8x16_t)v204, (int8x16_t)v204, 8uLL).u64[0];
      *(_QWORD *)&v246 = vextq_s8((int8x16_t)v202, (int8x16_t)v202, 8uLL).u64[0];
      if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
      {
LABEL_182:
        *(_QWORD *)&v237.f64[1] = v238;
        v210.f64[0] = v236 * *(double *)&v452;
        v11.f64[0] = v236 * *((double *)&v452 + 1);
        *(_QWORD *)&v207.f64[1] = v235;
        v206.f64[1] = v215.f64[0];
        v215.f64[0] = v236 * v453;
        *(_QWORD *)&v234.f64[1] = v216.i64[0];
        v207 = vmlaq_n_f64(v207, v237, *(double *)&v452);
        *(_QWORD *)&v247 = *(_OWORD *)&vaddq_f64(v213, v210);
        v206 = vmlaq_n_f64(v206, v237, *((double *)&v452 + 1));
        *(_QWORD *)&v248 = *(_OWORD *)&vaddq_f64(v214, v11);
        v249 = (int8x16_t)vmlaq_n_f64(v234, v237, v453);
        *(_QWORD *)&v239 = *(_OWORD *)&vaddq_f64(v218, v215);
        v250 = v206.f64[1];
        *(_QWORD *)&v251 = vextq_s8((int8x16_t)v207, (int8x16_t)v207, 8uLL).u64[0];
        *(_QWORD *)&v252 = vextq_s8(v249, v249, 8uLL).u64[0];
        goto LABEL_185;
      }
    }
    else
    {
      v204.f64[0] = 0.0;
      v245 = 0.0;
      v241 = 0.0;
      v203.f64[0] = 0.0;
      v244 = 0.0;
      v242 = 0.0;
      v202.f64[0] = 0.0;
      v246 = 0.0;
      v243 = 0.0;
      if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
        goto LABEL_182;
    }
    v207.f64[0] = 0.0;
    v251 = 0.0;
    v247 = 0.0;
    v206.f64[0] = 0.0;
    v250 = 0.0;
    v248 = 0.0;
    v249.i64[0] = 0;
    v252 = 0.0;
LABEL_185:
    v253 = *(float64x2_t **)(v192 + 24);
    v216.i64[0] = 0;
    v431 = (float64x2_t)v216;
    if (*(_BYTE *)(*(_QWORD *)(v192 + 32) + 24))
    {
      v10.f64[1] = -1.0;
      LOBYTE(v11.f64[1]) = 0;
      BYTE1(v11.f64[1]) = 0;
      BYTE2(v11.f64[1]) = 0;
      BYTE3(v11.f64[1]) = 0;
      BYTE4(v11.f64[1]) = 0;
      BYTE5(v11.f64[1]) = 0;
      BYTE6(v11.f64[1]) = 0;
      HIBYTE(v11.f64[1]) = 0;
      v254 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v204.f64[0]), (float64x2_t)xmmword_239EC68E0, v245), (float64x2_t)0, v241);
      v204.f64[0] = v204.f64[0] * 0.0 + v245 * 0.0 - v241;
      v255 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v203.f64[0]), (float64x2_t)xmmword_239EC68E0, v244), (float64x2_t)0, v242);
      v203.f64[0] = v203.f64[0] * 0.0 + v244 * 0.0 - v242;
      v256 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v202.f64[0]), (float64x2_t)xmmword_239EC68E0, v246), (float64x2_t)0, v243);
      v202.f64[0] = v202.f64[0] * 0.0 + v246 * 0.0 - v243;
      v257 = (int8x16_t)vaddq_f64(v254, (float64x2_t)0);
      v399 = vaddq_f64(v204, (float64x2_t)0);
      v258 = (int8x16_t)vaddq_f64(v255, (float64x2_t)0);
      v402 = vaddq_f64(v203, (float64x2_t)0);
      v408 = vaddq_f64(v256, (float64x2_t)0);
      v410 = vaddq_f64(v202, (float64x2_t)0);
      v393 = vextq_s8(v257, v257, 8uLL);
      v395 = (float64x2_t)v257;
      v396.i64[0] = vextq_s8(v258, v258, 8uLL).u64[0];
      v397 = (float64x2_t)v258;
      v202 = (float64x2_t)vextq_s8((int8x16_t)v408, (int8x16_t)v408, 8uLL);
      v406 = v202.f64[0];
    }
    else
    {
      v202.f64[0] = 0.0;
      v395 = v202;
      v202.f64[0] = 0.0;
      v393 = (int8x16_t)v202;
      v202.f64[0] = 0.0;
      v399 = v202;
      v202.f64[0] = 0.0;
      v397 = v202;
      v396.i64[0] = 0;
      v202.f64[0] = 0.0;
      v402 = v202;
      v202.f64[0] = 0.0;
      v408 = v202;
      v406 = 0.0;
      v202.f64[0] = 0.0;
      v410 = v202;
    }
    if (*(_BYTE *)(*(_QWORD *)(v192 + 40) + 24))
    {
      v259.f64[1] = -1.0;
      v260 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v207.f64[0]), (float64x2_t)xmmword_239EC68E0, v251), (float64x2_t)0, v247);
      v207.f64[0] = v207.f64[0] * 0.0 + v251 * 0.0 - v247;
      v261 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, v206.f64[0]), (float64x2_t)xmmword_239EC68E0, v250), (float64x2_t)0, v248);
      v206.f64[0] = v206.f64[0] * 0.0 + v250 * 0.0 - v248;
      v262 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68D0, *(double *)v249.i64), (float64x2_t)xmmword_239EC68E0, v252), (float64x2_t)0, v239);
      v259.f64[0] = *(double *)v249.i64 * 0.0 + v252 * 0.0 - v239;
      v263 = (int8x16_t)vaddq_f64(v260, (float64x2_t)0);
      v429 = vaddq_f64(v207, (float64x2_t)0);
      v426 = vaddq_f64(v206, (float64x2_t)0);
      v431 = vaddq_f64(v259, (float64x2_t)0);
      v414 = vextq_s8(v263, v263, 8uLL);
      v416 = (float64x2_t)v263;
      v412 = vaddq_f64(v261, (float64x2_t)0);
      v419.i64[0] = vextq_s8((int8x16_t)v412, (int8x16_t)v412, 8uLL).u64[0];
      v421 = vaddq_f64(v262, (float64x2_t)0);
      v202 = (float64x2_t)vextq_s8((int8x16_t)v421, (int8x16_t)v421, 8uLL);
    }
    else
    {
      v202.f64[0] = 0.0;
      v416 = v202;
      v202.f64[0] = 0.0;
      v414 = (int8x16_t)v202;
      v202.f64[0] = 0.0;
      v429 = v202;
      v202.f64[0] = 0.0;
      v412 = v202;
      v419.i64[0] = 0;
      v202.f64[0] = 0.0;
      v426 = v202;
      v202.f64[0] = 0.0;
      v421 = v202;
      v202.f64[0] = 0.0;
    }
    v423 = v202;
    v264 = (float64x2_t *)(v192 + 64);
    v265 = vmulq_f64(v201, v219);
    v266 = vmulq_n_f64(v454, v219.f64[0]);
    *(_QWORD *)&v266.f64[1] = vextq_s8((int8x16_t)v266, (int8x16_t)v266, 8uLL).u64[0];
    v268 = vsubq_f64(*v253, v266);
    v218.f64[0] = v253[1].f64[0];
    v267 = vsubq_f64(v218, v265);
    *(float64_t *)(v192 + 80) = v267.f64[0];
    *(_QWORD *)&v268.f64[1] = vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL).u64[0];
    *(float64x2_t *)(v192 + 64) = v268;
    v269 = *(_QWORD *)(v192 + 96);
    if (v269)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v269 + 24))(v269, v192 + 64);
      v270 = *(_QWORD *)(v192 + 96);
      v271 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v270 + 16))(v270);
      v272 = v271;
      if (*(_BYTE *)(*(_QWORD *)(v192 + 48) + 4))
      {
        switch(v271)
        {
          case 0:
            v273 = *(double *)(v270 + 32);
            v274 = *(float64x2_t *)(v270 + 16);
            v275 = *(double *)(v270 + 56);
            v276 = *(float64x2_t *)(v270 + 40);
            v277 = *(double *)(v270 + 80);
            v278 = *(float64x2_t *)(v270 + 64);
            v279 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v274, v395.f64[0]), v276, *(double *)v393.i64), v278, v399.f64[0]);
            v399.f64[0] = v273 * v395.f64[0] + v275 * *(double *)v393.i64 + v277 * v399.f64[0];
            v280 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v274, v397.f64[0]), v276, *(double *)v396.i64), v278, v402.f64[0]);
            v402.f64[0] = v273 * v397.f64[0] + v275 * *(double *)v396.i64 + v277 * v402.f64[0];
            v267 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v274, v408.f64[0]), v276, v406), v278, v410.f64[0]);
            v276.f64[0] = v273 * v408.f64[0] + v275 * v406 + v277 * v410.f64[0];
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL);
            v406 = v268.f64[0];
            v393.i64[0] = vextq_s8(v279, v279, 8uLL).u64[0];
            v395 = (float64x2_t)v279;
            v396.i64[0] = vextq_s8(v280, v280, 8uLL).u64[0];
            v397 = (float64x2_t)v280;
            v408 = v267;
            v410.f64[0] = v276.f64[0];
            break;
          case 1:
            *(_QWORD *)&v285.f64[1] = v393.i64[1];
            v286.f64[0] = v395.f64[0];
            *(_QWORD *)&v286.f64[1] = v393.i64[0];
            v285.f64[0] = *(float64_t *)(v270 + 32);
            v287 = *(float64x2_t *)(v270 + 16);
            v288 = (int8x16_t)vmulq_f64(v286, v287);
            v289.f64[0] = v397.f64[0];
            *(_QWORD *)&v289.f64[1] = v396.i64[0];
            v290 = (int8x16_t)vmulq_f64(v289, v287);
            v291.f64[0] = v408.f64[0];
            v291.f64[1] = v406;
            *(_QWORD *)&v399.f64[0] = *(_OWORD *)&vmulq_f64(v399, v285);
            *(_QWORD *)&v402.f64[0] = *(_OWORD *)&vmulq_f64(v402, v285);
            v292 = (int8x16_t)vmulq_f64(v291, v287);
            v267 = vmulq_f64(v410, v285);
            v408 = (float64x2_t)v292;
            v410.f64[0] = v267.f64[0];
            v393.i64[0] = vextq_s8(v288, v288, 8uLL).u64[0];
            v395 = (float64x2_t)v288;
            v396.i64[0] = vextq_s8(v290, v290, 8uLL).u64[0];
            v397 = (float64x2_t)v290;
            v268 = (float64x2_t)vextq_s8(v292, v292, 8uLL);
            v406 = v268.f64[0];
            break;
          case 2:
            v268.f64[0] = *(float64_t *)(v270 + 16);
            v281.f64[0] = v395.f64[0];
            *(_QWORD *)&v281.f64[1] = v393.i64[0];
            v282 = (int8x16_t)vmulq_n_f64(v281, v268.f64[0]);
            v283.f64[0] = v399.f64[0];
            v283.f64[1] = v397.f64[0];
            v393.i64[0] = vextq_s8(v282, v282, 8uLL).u64[0];
            v395 = (float64x2_t)v282;
            v399 = vmulq_n_f64(v283, v268.f64[0]);
            *(_QWORD *)&v284.f64[0] = v396.i64[0];
            v284.f64[1] = v402.f64[0];
            v396 = (int8x16_t)vmulq_n_f64(v284, v268.f64[0]);
            v397 = (float64x2_t)vextq_s8((int8x16_t)v399, (int8x16_t)v399, 8uLL);
            *(_QWORD *)&v402.f64[0] = vextq_s8(v396, v396, 8uLL).u64[0];
            v283.f64[0] = v408.f64[0];
            v283.f64[1] = v406;
            v267 = vmulq_n_f64(v283, v268.f64[0]);
            v408 = v267;
            *(_QWORD *)&v410.f64[0] = *(_OWORD *)&vmulq_f64(v268, v410);
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL);
            v406 = v268.f64[0];
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v270 + 56))(v442, v270);
            v293 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v395.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v393.i64), v443, v399.f64[0]);
            v399.f64[0] = v442[1].f64[0] * v395.f64[0] + v442[2].f64[1] * *(double *)v393.i64 + v444 * v399.f64[0];
            v294 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v397.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v396.i64), v443, v402.f64[0]);
            v402.f64[0] = v442[1].f64[0] * v397.f64[0] + v442[2].f64[1] * *(double *)v396.i64 + v444 * v402.f64[0];
            v268 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v408.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), v406), v443, v410.f64[0]);
            v295 = v442[1].f64[0] * v408.f64[0] + v442[2].f64[1] * v406 + v444 * v410.f64[0];
            v267 = (float64x2_t)vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL);
            v406 = v267.f64[0];
            v393.i64[0] = vextq_s8(v293, v293, 8uLL).u64[0];
            v395 = (float64x2_t)v293;
            v396.i64[0] = vextq_s8(v294, v294, 8uLL).u64[0];
            v397 = (float64x2_t)v294;
            v408 = v268;
            v410.f64[0] = v295;
            break;
          default:
            break;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(v192 + 56) + 4))
      {
        switch(v272)
        {
          case 0:
            v296 = *(double *)(v270 + 32);
            v297 = *(float64x2_t *)(v270 + 16);
            v298 = *(double *)(v270 + 56);
            v299 = *(float64x2_t *)(v270 + 40);
            v300 = *(double *)(v270 + 80);
            v301 = *(float64x2_t *)(v270 + 64);
            v302 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v297, v416.f64[0]), v299, *(double *)v414.i64), v301, v429.f64[0]);
            v429.f64[0] = v296 * v416.f64[0] + v298 * *(double *)v414.i64 + v300 * v429.f64[0];
            v303 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v297, v412.f64[0]), v299, *(double *)v419.i64), v301, v426.f64[0]);
            v304 = v296 * v412.f64[0] + v298 * *(double *)v419.i64 + v300 * v426.f64[0];
            v267 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v297, v421.f64[0]), v299, v423.f64[0]), v301, v431.f64[0]);
            v431.f64[0] = v296 * v421.f64[0] + v298 * v423.f64[0] + v300 * v431.f64[0];
            v268 = (float64x2_t)vextq_s8((int8x16_t)v267, (int8x16_t)v267, 8uLL);
            v423.f64[0] = v268.f64[0];
            v426.f64[0] = v304;
            v414.i64[0] = vextq_s8(v302, v302, 8uLL).u64[0];
            v416 = (float64x2_t)v302;
            v412 = (float64x2_t)v303;
            v419.i64[0] = vextq_s8(v303, v303, 8uLL).u64[0];
            v421 = v267;
            break;
          case 1:
            *(_QWORD *)&v306.f64[1] = v414.i64[1];
            v307.f64[0] = v416.f64[0];
            *(_QWORD *)&v307.f64[1] = v414.i64[0];
            v306.f64[0] = *(float64_t *)(v270 + 32);
            v308 = *(float64x2_t *)(v270 + 16);
            v309 = (int8x16_t)vmulq_f64(v307, v308);
            v310.f64[0] = v421.f64[0];
            v311.f64[0] = v412.f64[0];
            *(_QWORD *)&v311.f64[1] = v419.i64[0];
            v312 = (int8x16_t)vmulq_f64(v311, v308);
            v310.f64[1] = v423.f64[0];
            *(_QWORD *)&v426.f64[0] = *(_OWORD *)&vmulq_f64(v426, v306);
            *(_QWORD *)&v429.f64[0] = *(_OWORD *)&vmulq_f64(v429, v306);
            v313 = (int8x16_t)vmulq_f64(v310, v308);
            v267 = vmulq_f64(v431, v306);
            v431.f64[0] = v267.f64[0];
            v414.i64[0] = vextq_s8(v309, v309, 8uLL).u64[0];
            v416 = (float64x2_t)v309;
            v412 = (float64x2_t)v312;
            v419.i64[0] = vextq_s8(v312, v312, 8uLL).u64[0];
            v421 = (float64x2_t)v313;
            v268 = (float64x2_t)vextq_s8(v313, v313, 8uLL);
            v423.f64[0] = v268.f64[0];
            break;
          case 2:
            v268.f64[0] = *(float64_t *)(v270 + 16);
            v305.f64[0] = v416.f64[0];
            *(_QWORD *)&v305.f64[1] = v414.i64[0];
            v267.f64[0] = v429.f64[0];
            v267.f64[1] = v412.f64[0];
            v416 = vmulq_n_f64(v305, v268.f64[0]);
            v429 = vmulq_n_f64(v267, v268.f64[0]);
            v412 = (float64x2_t)vextq_s8((int8x16_t)v429, (int8x16_t)v429, 8uLL);
            v414.i64[0] = vextq_s8((int8x16_t)v416, (int8x16_t)v416, 8uLL).u64[0];
            *(_QWORD *)&v305.f64[0] = v419.i64[0];
            v305.f64[1] = v426.f64[0];
            v419 = (int8x16_t)vmulq_n_f64(v305, v268.f64[0]);
            *(_QWORD *)&v431.f64[0] = *(_OWORD *)&vmulq_f64(v268, v431);
            v305.f64[0] = v421.f64[0];
            v267.f64[1] = v423.f64[1];
            v305.f64[1] = v423.f64[0];
            v421 = vmulq_n_f64(v305, v268.f64[0]);
            v268 = (float64x2_t)vextq_s8((int8x16_t)v421, (int8x16_t)v421, 8uLL);
            v423.f64[0] = v268.f64[0];
            *(_QWORD *)&v426.f64[0] = vextq_s8(v419, v419, 8uLL).u64[0];
            break;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v270 + 56))(v442, v270);
            v314 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v416.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v414.i64), v443, v429.f64[0]);
            v429.f64[0] = v442[1].f64[0] * v416.f64[0] + v442[2].f64[1] * *(double *)v414.i64 + v444 * v429.f64[0];
            v315 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v412.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), *(double *)v419.i64), v443, v426.f64[0]);
            v268 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v442[0], v421.f64[0]), *(float64x2_t *)((char *)&v442[1] + 8), v423.f64[0]), v443, v431.f64[0]);
            v431.f64[0] = v442[1].f64[0] * v421.f64[0] + v442[2].f64[1] * v423.f64[0] + v444 * v431.f64[0];
            v267 = (float64x2_t)vextq_s8((int8x16_t)v268, (int8x16_t)v268, 8uLL);
            v423.f64[0] = v267.f64[0];
            v426.f64[0] = v442[1].f64[0] * v412.f64[0] + v442[2].f64[1] * *(double *)v419.i64 + v444 * v426.f64[0];
            v414.i64[0] = vextq_s8(v314, v314, 8uLL).u64[0];
            v416 = (float64x2_t)v314;
            v412 = (float64x2_t)v315;
            v419.i64[0] = vextq_s8(v315, v315, 8uLL).u64[0];
            v421 = v268;
            break;
          default:
            break;
        }
      }
    }
    _Q2 = *(float64x2_t *)(v192 + 64);
    _Q3 = vmulq_f64(_Q2, _Q2);
    _D4 = *(_QWORD *)(v192 + 72);
    __asm { FMLA            D3, D4, V2.D[1] }
    *(double *)(v192 + 88) = *((double *)&v432 + 1) * (_Q3.f64[0] + *(double *)(v192 + 80) * *(double *)(v192 + 80));
    if (!v198)
    {
LABEL_227:
      if (!v197)
        goto LABEL_250;
      v350 = *(unint64_t **)(v404 + 32);
      v351 = v350[11] + 24 * v199;
      v353 = *(char **)v351;
      v352 = *(char **)(v351 + 8);
      if (*(char **)v351 != v352)
      {
        while (*(_DWORD *)v353 < v199)
        {
          v353 += 16;
          if (v353 == v352)
            goto LABEL_236;
        }
      }
      if (v353 != v352)
      {
        if (*(_DWORD *)v353 == v199)
        {
          v354 = v350[2] + 8 * *((_QWORD *)v353 + 1);
LABEL_237:
          v267.f64[0] = *(float64_t *)(v354 + 16);
          _Q3.f64[0] = *(float64_t *)(v354 + 40);
          v268.f64[0] = *(float64_t *)(v354 + 64);
          v355.f64[0] = v408.f64[0];
          v355.f64[1] = v406;
          v356.f64[0] = v395.f64[0];
          v356.f64[1] = v397.f64[0];
          *(_QWORD *)&v357.f64[0] = v393.i64[0];
          *(_QWORD *)&v357.f64[1] = v396.i64[0];
          v358.f64[0] = v399.f64[0];
          v358.f64[1] = v402.f64[0];
          v359 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v356, v395.f64[0]), v357, *(double *)v393.i64), v358, v399.f64[0]);
          v360 = vmulq_f64(v355, v395);
          v360.f64[0] = v360.f64[0] + v406 * *(double *)v393.i64 + v410.f64[0] * v399.f64[0];
          v361 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v356, v397.f64[0]), v357, *(double *)v396.i64), v358, v402.f64[0]);
          v362 = vmulq_f64(v355, v397);
          v362.f64[0] = v362.f64[0] + v406 * *(double *)v396.i64 + v410.f64[0] * v402.f64[0];
          v400 = v357;
          v403 = v356;
          v398 = v358;
          v363 = vmulq_f64(v355, v355);
          v363.f64[0] = v363.f64[0] + v406 * v406 + v410.f64[0] * v410.f64[0];
          _Q2 = vaddq_f64(*(float64x2_t *)v354, v359);
          v364 = vaddq_f64(v267, v360);
          v365 = vaddq_f64(*(float64x2_t *)(v354 + 24), v361);
          v366 = vaddq_f64(*(float64x2_t *)(v354 + 48), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v356, v408.f64[0]), v357, v406), v358, v410.f64[0]));
          *(float64x2_t *)v354 = _Q2;
          *(float64_t *)(v354 + 16) = v364.f64[0];
          *(float64x2_t *)(v354 + 24) = v365;
          *(_QWORD *)(v354 + 40) = *(_OWORD *)&vaddq_f64(_Q3, v362);
          v367 = vaddq_f64(v268, v363);
          *(float64x2_t *)(v354 + 48) = v366;
          *(float64_t *)(v354 + 64) = v367.f64[0];
          if (!v198 || v200 < v199)
            goto LABEL_249;
          v368 = *(unint64_t **)(v404 + 32);
          v369 = v368[11] + 24 * v200;
          v371 = *(char **)v369;
          v370 = *(char **)(v369 + 8);
          if (*(char **)v369 != v370)
          {
            while (*(_DWORD *)v371 < v199)
            {
              v371 += 16;
              if (v371 == v370)
                goto LABEL_247;
            }
          }
          if (v371 != v370)
          {
            if (*(_DWORD *)v371 == v199)
            {
              v372 = v368[2] + 8 * *((_QWORD *)v371 + 1);
LABEL_248:
              v367.f64[0] = *(float64_t *)(v372 + 16);
              _Q2.f64[0] = *(float64_t *)(v372 + 40);
              v365.f64[0] = *(float64_t *)(v372 + 64);
              v373 = *(float64x2_t *)(v372 + 48);
              v374.f64[0] = v408.f64[0];
              v374.f64[1] = v406;
              v375 = vmulq_f64(v374, v416);
              v375.f64[0] = v375.f64[0] + v406 * *(double *)v414.i64 + v410.f64[0] * v429.f64[0];
              v376 = vmulq_f64(v374, v412);
              v376.f64[0] = v376.f64[0] + v406 * *(double *)v419.i64 + v410.f64[0] * v426.f64[0];
              v377 = vmulq_f64(v408, v421);
              v377.f64[0] = v377.f64[0] + v406 * v423.f64[0] + v410.f64[0] * v431.f64[0];
              v364 = vaddq_f64(*(float64x2_t *)v372, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v403, v416.f64[0]), v400, *(double *)v414.i64), v398, v429.f64[0]));
              _Q2 = vaddq_f64(_Q2, v376);
              v378 = vaddq_f64(*(float64x2_t *)(v372 + 24), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v403, v412.f64[0]), v400, *(double *)v419.i64), v398, v426.f64[0]));
              *(float64x2_t *)v372 = v364;
              *(_QWORD *)(v372 + 16) = *(_OWORD *)&vaddq_f64(v367, v375);
              *(float64x2_t *)(v372 + 24) = v378;
              *(float64_t *)(v372 + 40) = _Q2.f64[0];
              *(float64x2_t *)(v372 + 48) = vaddq_f64(v373, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v403, v421.f64[0]), v400, v423.f64[0]), v398, v431.f64[0]));
              *(_QWORD *)(v372 + 64) = *(_OWORD *)&vaddq_f64(v365, v377);
LABEL_249:
              v379 = *(_QWORD *)v404 + 8 * (*(_DWORD *)(v404 + 28) + 3 * v199);
              v364.f64[0] = *(float64_t *)(v379 + 16);
              _Q2.f64[0] = *(float64_t *)(v192 + 80);
              _Q3 = *v264;
              v381 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v403, v264->f64[0]), v400, *v264, 1), v398, _Q2.f64[0]);
              _D6 = v406;
              __asm { FMLA            D5, D6, V3.D[1] }
              _Q2.f64[0] = _D5 + v410.f64[0] * _Q2.f64[0];
              v268 = vsubq_f64(*(float64x2_t *)v379, v381);
              *(float64x2_t *)v379 = v268;
              *(_QWORD *)(v379 + 16) = *(_OWORD *)&vsubq_f64(v364, _Q2);
LABEL_250:
              v191 = v390;
              if (v198)
              {
                v384 = *(_QWORD *)v404 + 8 * (*(_DWORD *)(v404 + 28) + 3 * v200);
                v268.f64[0] = *(float64_t *)(v384 + 16);
                _Q2.f64[0] = *(float64_t *)(v192 + 80);
                _Q3 = *v264;
                *(_QWORD *)&_Q6.f64[0] = v414.i64[0];
                _Q5.f64[0] = v416.f64[0];
                _Q5.f64[1] = v412.f64[0];
                *(_QWORD *)&_Q6.f64[1] = v419.i64[0];
                v388 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, v264->f64[0]), _Q6, *v264, 1);
                _Q5.f64[0] = v429.f64[0];
                _Q5.f64[1] = v426.f64[0];
                v389 = vmlaq_n_f64(v388, _Q5, _Q2.f64[0]);
                _Q6.f64[0] = v423.f64[0];
                __asm { FMLA            D5, D6, V3.D[1] }
                _Q2.f64[0] = _Q5.f64[0] + v431.f64[0] * _Q2.f64[0];
                *(float64x2_t *)v384 = vsubq_f64(*(float64x2_t *)v384, v389);
                *(_QWORD *)(v384 + 16) = *(_OWORD *)&vsubq_f64(v268, _Q2);
              }
              goto LABEL_160;
            }
            v370 = v371;
          }
LABEL_247:
          v372 = sub_239C23138(v368, (char **)v369, v199, v370);
          goto LABEL_248;
        }
        v352 = v353;
      }
LABEL_236:
      v354 = sub_239C23138(v350, (char **)v351, v199, v352);
      goto LABEL_237;
    }
    if (!v197 || v199 < v200)
    {
LABEL_217:
      v336 = *(unint64_t **)(v404 + 32);
      v337 = v336[11] + 24 * v200;
      v339 = *(char **)v337;
      v338 = *(char **)(v337 + 8);
      if (*(char **)v337 != v338)
      {
        while (*(_DWORD *)v339 < v200)
        {
          v339 += 16;
          if (v339 == v338)
            goto LABEL_225;
        }
      }
      if (v339 != v338)
      {
        if (*(_DWORD *)v339 == v200)
        {
          v340 = v336[2] + 8 * *((_QWORD *)v339 + 1);
LABEL_226:
          v267.f64[0] = *(float64_t *)(v340 + 16);
          _Q3.f64[0] = *(float64_t *)(v340 + 40);
          v268.f64[0] = *(float64_t *)(v340 + 64);
          v341.f64[0] = v421.f64[0];
          v341.f64[1] = v423.f64[0];
          v342.f64[0] = v416.f64[0];
          v342.f64[1] = v412.f64[0];
          *(_QWORD *)&v343.f64[0] = v414.i64[0];
          *(_QWORD *)&v343.f64[1] = v419.i64[0];
          v344.f64[0] = v429.f64[0];
          v344.f64[1] = v426.f64[0];
          v345 = vmulq_f64(v341, v416);
          v345.f64[0] = v345.f64[0] + v423.f64[0] * *(double *)v414.i64 + v431.f64[0] * v429.f64[0];
          v346 = vmulq_f64(v341, v412);
          v346.f64[0] = v346.f64[0] + v423.f64[0] * *(double *)v419.i64 + v431.f64[0] * v426.f64[0];
          v347 = vmulq_f64(v341, v341);
          v347.f64[0] = v347.f64[0] + v423.f64[0] * v423.f64[0] + v431.f64[0] * v431.f64[0];
          _Q2 = vaddq_f64(*(float64x2_t *)v340, vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v342, v416.f64[0]), v343, *(double *)v414.i64), v344, v429.f64[0]));
          v267 = vaddq_f64(v267, v345);
          v348 = vaddq_f64(*(float64x2_t *)(v340 + 24), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v342, v412.f64[0]), v343, *(double *)v419.i64), v344, v426.f64[0]));
          _Q3 = vaddq_f64(_Q3, v346);
          v349 = vaddq_f64(*(float64x2_t *)(v340 + 48), vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v342, v421.f64[0]), v343, v423.f64[0]), v344, v431.f64[0]));
          *(float64x2_t *)v340 = _Q2;
          *(float64_t *)(v340 + 16) = v267.f64[0];
          *(float64x2_t *)(v340 + 24) = v348;
          *(float64_t *)(v340 + 40) = _Q3.f64[0];
          v268 = vaddq_f64(v268, v347);
          *(float64x2_t *)(v340 + 48) = v349;
          *(float64_t *)(v340 + 64) = v268.f64[0];
          goto LABEL_227;
        }
        v338 = v339;
      }
LABEL_225:
      v340 = sub_239C23138(v336, (char **)v337, v200, v338);
      goto LABEL_226;
    }
    v319 = *(unint64_t **)(v404 + 32);
    v320 = v319[11] + 24 * v199;
    v322 = *(char **)v320;
    v321 = *(char **)(v320 + 8);
    if (*(char **)v320 != v321)
    {
      while (*(_DWORD *)v322 < v200)
      {
        v322 += 16;
        if (v322 == v321)
          goto LABEL_215;
      }
    }
    if (v322 != v321)
    {
      if (*(_DWORD *)v322 == v200)
      {
        v323 = v319[2] + 8 * *((_QWORD *)v322 + 1);
LABEL_216:
        v267.f64[0] = *(float64_t *)(v323 + 16);
        _Q2.f64[0] = *(float64_t *)(v323 + 40);
        v268.f64[0] = *(float64_t *)(v323 + 64);
        v324.f64[0] = v421.f64[0];
        v324.f64[1] = v423.f64[0];
        *(_QWORD *)&v326.f64[0] = v414.i64[0];
        v325.f64[0] = v416.f64[0];
        v325.f64[1] = v412.f64[0];
        *(_QWORD *)&v326.f64[1] = v419.i64[0];
        v327.f64[0] = v429.f64[0];
        v327.f64[1] = v426.f64[0];
        v328 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v325, v395.f64[0]), v326, *(double *)v393.i64), v327, v399.f64[0]);
        v329 = vmulq_f64(v324, v395);
        v329.f64[0] = v329.f64[0] + v423.f64[0] * *(double *)v393.i64 + v431.f64[0] * v399.f64[0];
        v330 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v325, v397.f64[0]), v326, *(double *)v396.i64), v327, v402.f64[0]);
        v331 = vmulq_f64(v324, v397);
        v331.f64[0] = v331.f64[0] + v423.f64[0] * *(double *)v396.i64 + v431.f64[0] * v402.f64[0];
        v332 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v325, v408.f64[0]), v326, v406), v327, v410.f64[0]);
        v333 = vmulq_f64(v421, v408);
        v333.f64[0] = v333.f64[0] + v423.f64[0] * v406 + v431.f64[0] * v410.f64[0];
        _Q3 = vaddq_f64(*(float64x2_t *)v323, v328);
        v267 = vaddq_f64(v267, v329);
        v334 = vaddq_f64(*(float64x2_t *)(v323 + 24), v330);
        v335 = vaddq_f64(*(float64x2_t *)(v323 + 48), v332);
        *(float64x2_t *)v323 = _Q3;
        *(float64_t *)(v323 + 16) = v267.f64[0];
        *(float64x2_t *)(v323 + 24) = v334;
        *(_QWORD *)(v323 + 40) = *(_OWORD *)&vaddq_f64(_Q2, v331);
        v268 = vaddq_f64(v268, v333);
        *(float64x2_t *)(v323 + 48) = v335;
        *(float64_t *)(v323 + 64) = v268.f64[0];
        goto LABEL_217;
      }
      v321 = v322;
    }
LABEL_215:
    v323 = sub_239C23138(v319, (char **)v320, v200, v321);
    goto LABEL_216;
  }
LABEL_252:
  std::mutex::~mutex(&v465);
  if (__p)
  {
    v436 = __p;
    operator delete(__p);
  }
}

void sub_239C4C6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C4C6FC(uint64_t a1)
{
  return **(_QWORD **)(a1 + 136);
}

uint64_t sub_239C4C708(uint64_t a1)
{
  return **(_QWORD **)(a1 + 136);
}

uint64_t sub_239C4C714(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8);
}

double sub_239C4C720(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  float64x2_t v22;
  float64x2_t v23;
  int v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  int64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  int8x16_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  double v43;
  double v45;
  float64x2_t v47;
  double v53;
  float64x2_t v54;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  float64x2_t v60;
  int64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  int8x16_t v64;
  float64x2_t v65;
  float64x2_t v66;
  int8x16_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  double v72;
  double v74;
  double v76;
  float64x2_t v78;
  double v80;
  float64x2_t v81;
  float64x2_t *v84;
  float64x2_t v85;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  double v90;
  double result;
  uint64_t v97;
  float64x2_t v98;
  uint64_t v99;
  char v100;
  _OWORD v101[3];
  float64x2_t v102;
  _BYTE v103[80];
  __int128 v104;
  uint64_t v105;

  v98 = 0uLL;
  v99 = 0;
  v100 = 1;
  v14 = *(_QWORD *)(a1 + 80) + 16;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72) + 16;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 88) + 16;
  v105 = 0;
  *(_OWORD *)&v103[64] = 0u;
  v104 = 0u;
  *(_QWORD *)(a3 + 136) = 0;
  v97 = a3;
  memset(v103, 0, 64);
  v102 = 0u;
  memset(v101, 0, sizeof(v101));
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&v103[8];
  v15 = *(_OWORD *)&v103[24];
  v16 = *(_OWORD *)&v103[40];
  v17 = *(double *)&v103[56];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&v103[56];
  *(_OWORD *)(a3 + 104) = v16;
  *(_OWORD *)(a3 + 88) = v15;
  v18 = v104;
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 144) = v18;
  sub_239C24464((float64x2_t **)(a1 + 16), &v98, &v97, *(double *)&v18, *(double *)&v16, v17, a7, a8, a9, a10, a11);
  *(float64x2_t *)(a1 + 96) = v98;
  *(_QWORD *)(a1 + 112) = v99;
  v19 = *(_QWORD *)(a1 + 128);
  if (v19)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, a1 + 96);
    v20 = *(_QWORD *)(a1 + 128);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    v25 = v21;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 4))
    {
      switch(v21)
      {
        case 0:
          v26 = *(float64x2_t *)(v20 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 56);
          v27 = *(float64x2_t *)(v20 + 40);
          v28 = *(double *)(v20 + 80);
          v29 = *(float64x2_t *)(v20 + 64);
          goto LABEL_8;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          v30 = (int64x2_t)vmulq_f64(v23, _Q2);
          v22 = vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)(v20 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 64);
          v32 = *(float64x2_t *)(a3 + 32);
          v31 = *(float64x2_t *)(a3 + 48);
          v33 = *(int8x16_t *)(a3 + 16);
          *(_QWORD *)&v34.f64[0] = v30.i64[0];
          v34.f64[1] = *(float64_t *)(a3 + 24);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v34;
          v34.f64[0] = *(float64_t *)(v20 + 32);
          v35 = vmulq_f64((float64x2_t)vextq_s8(v33, (int8x16_t)v32, 8uLL), *(float64x2_t *)(v20 + 16));
          v23 = (float64x2_t)vzip1q_s64(v30, (int64x2_t)v35);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v23;
          v36 = vextq_s8((int8x16_t)v35, (int8x16_t)vmulq_laneq_f64(v34, v32, 1), 8uLL);
          *(int8x16_t *)(a3 + 32) = v36;
          v35.f64[0] = *(float64_t *)(v20 + 32);
          _Q2 = vmulq_f64(_Q2, v35);
          v37 = vmulq_f64(v31, *(float64x2_t *)(v20 + 16));
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v23;
          *(int8x16_t *)(a3 + 32) = v36;
          *(float64x2_t *)(a3 + 48) = v37;
          *(float64_t *)(a3 + 64) = _Q2.f64[0];
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 64);
          _Q2 = *(float64x2_t *)a3;
          v23 = vmulq_f64(v22, v23);
          v38 = vmulq_n_f64(*(float64x2_t *)(a3 + 48), v22.f64[0]);
          v39 = vmulq_n_f64(*(float64x2_t *)(a3 + 32), v22.f64[0]);
          v40 = vmulq_n_f64(*(float64x2_t *)(a3 + 16), v22.f64[0]);
          v22 = vmulq_n_f64(*(float64x2_t *)a3, v22.f64[0]);
          *(float64x2_t *)a3 = v22;
          *(float64x2_t *)(a3 + 16) = v40;
          *(float64x2_t *)(a3 + 32) = v39;
          *(float64x2_t *)(a3 + 48) = v38;
          *(float64_t *)(a3 + 64) = v23.f64[0];
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v26 = (float64x2_t)v101[0];
          _Q2.f64[0] = *((float64_t *)&v101[2] + 1);
          v27 = *(float64x2_t *)((char *)&v101[1] + 8);
          v28 = *(double *)v103;
          v29 = v102;
LABEL_8:
          v41 = *(double *)(a3 + 16);
          _Q7 = *(float64x2_t *)a3;
          v43 = *(double *)(a3 + 40);
          _Q17 = *(float64x2_t *)(a3 + 24);
          v45 = *(double *)(a3 + 64);
          _Q19 = *(float64x2_t *)(a3 + 48);
          v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, *(double *)a3), v27, *(float64x2_t *)a3, 1), v29, v41);
          __asm { FMLA            D21, D2, V7.D[1] }
          v53 = _D21 + v28 * v41;
          v54 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q17.f64[0]), v27, _Q17, 1), v29, v43);
          __asm { FMLA            D21, D2, V17.D[1] }
          v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v26, _Q19.f64[0]), v27, _Q19, 1), v29, v45);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)a3 = v47;
          *(double *)(a3 + 16) = v53;
          *(float64x2_t *)(a3 + 24) = v54;
          *(double *)(a3 + 40) = _D21 + v28 * v43;
          *(float64x2_t *)(a3 + 48) = v23;
          *(double *)(a3 + 64) = _D0 + v28 * v45;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 80) + 4))
    {
      switch(v25)
      {
        case 0:
          v57 = *(float64x2_t *)(v20 + 16);
          _Q2.f64[0] = *(float64_t *)(v20 + 56);
          v58 = *(float64x2_t *)(v20 + 40);
          v59 = *(double *)(v20 + 80);
          v60 = *(float64x2_t *)(v20 + 64);
          goto LABEL_15;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 88);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          v61 = (int64x2_t)vmulq_f64(v23, _Q2);
          v22 = vmulq_f64(*(float64x2_t *)(a3 + 72), *(float64x2_t *)(v20 + 16));
          _Q2.f64[0] = *(float64_t *)(a3 + 136);
          v62 = *(float64x2_t *)(a3 + 120);
          v63 = *(float64x2_t *)(a3 + 104);
          v64 = *(int8x16_t *)(a3 + 88);
          *(_QWORD *)&v65.f64[0] = v61.i64[0];
          v65.f64[1] = *(float64_t *)(a3 + 96);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v65;
          v65.f64[0] = *(float64_t *)(v20 + 32);
          v66 = vmulq_f64((float64x2_t)vextq_s8(v64, (int8x16_t)v63, 8uLL), *(float64x2_t *)(v20 + 16));
          v23 = (float64x2_t)vzip1q_s64(v61, (int64x2_t)v66);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v23;
          v67 = vextq_s8((int8x16_t)v66, (int8x16_t)vmulq_laneq_f64(v65, v63, 1), 8uLL);
          *(int8x16_t *)(a3 + 104) = v67;
          v66.f64[0] = *(float64_t *)(v20 + 32);
          _Q2 = vmulq_f64(_Q2, v66);
          v68 = vmulq_f64(v62, *(float64x2_t *)(v20 + 16));
          *(int8x16_t *)(a3 + 104) = v67;
          *(float64x2_t *)(a3 + 88) = v23;
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 120) = v68;
          *(float64_t *)(a3 + 136) = _Q2.f64[0];
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 136);
          _Q2 = *(float64x2_t *)(a3 + 72);
          v23 = vmulq_f64(v22, v23);
          v69 = vmulq_n_f64(*(float64x2_t *)(a3 + 120), v22.f64[0]);
          v70 = vmulq_n_f64(*(float64x2_t *)(a3 + 104), v22.f64[0]);
          v71 = vmulq_n_f64(*(float64x2_t *)(a3 + 88), v22.f64[0]);
          v22 = vmulq_n_f64(_Q2, v22.f64[0]);
          *(float64x2_t *)(a3 + 72) = v22;
          *(float64x2_t *)(a3 + 88) = v71;
          *(float64x2_t *)(a3 + 104) = v70;
          *(float64x2_t *)(a3 + 120) = v69;
          *(float64_t *)(a3 + 136) = v23.f64[0];
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v57 = (float64x2_t)v101[0];
          _Q2.f64[0] = *((float64_t *)&v101[2] + 1);
          v58 = *(float64x2_t *)((char *)&v101[1] + 8);
          v59 = *(double *)v103;
          v60 = v102;
LABEL_15:
          v72 = *(double *)(a3 + 88);
          _Q7 = *(float64x2_t *)(a3 + 72);
          v74 = *(double *)(a3 + 112);
          _Q17 = *(float64x2_t *)(a3 + 96);
          v76 = *(double *)(a3 + 136);
          _Q19 = *(float64x2_t *)(a3 + 120);
          v78 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q7.f64[0]), v58, _Q7, 1), v60, v72);
          __asm { FMLA            D21, D2, V7.D[1] }
          v80 = _D21 + v59 * v72;
          v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q17.f64[0]), v58, _Q17, 1), v60, v74);
          __asm { FMLA            D21, D2, V17.D[1] }
          v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v57, _Q19.f64[0]), v58, _Q19, 1), v60, v76);
          __asm { FMLA            D0, D2, V19.D[1] }
          *(float64x2_t *)(a3 + 72) = v78;
          *(double *)(a3 + 88) = v80;
          *(float64x2_t *)(a3 + 96) = v81;
          *(double *)(a3 + 112) = _D21 + v59 * v74;
          *(float64x2_t *)(a3 + 120) = v23;
          *(double *)(a3 + 136) = _D0 + v59 * v76;
          break;
        default:
          break;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 4))
    {
      v84 = (float64x2_t *)(a3 + 144);
      switch(v25)
      {
        case 0:
          v85 = *(float64x2_t *)(v20 + 16);
          _D2 = *(_QWORD *)(v20 + 56);
          v87 = *(float64x2_t *)(v20 + 40);
          v88 = *(double *)(v20 + 80);
          v89 = *(float64x2_t *)(v20 + 64);
          goto LABEL_22;
        case 1:
          v23.f64[0] = *(float64_t *)(a3 + 160);
          _Q2.f64[0] = *(float64_t *)(v20 + 32);
          *(float64x2_t *)(a3 + 144) = vmulq_f64(*(float64x2_t *)(a3 + 144), *(float64x2_t *)(v20 + 16));
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v23, _Q2);
          break;
        case 2:
          v22.f64[0] = *(float64_t *)(v20 + 16);
          v23.f64[0] = *(float64_t *)(a3 + 160);
          *v84 = vmulq_n_f64(*v84, v22.f64[0]);
          *(_QWORD *)(a3 + 160) = *(_OWORD *)&vmulq_f64(v22, v23);
          break;
        case 4:
          (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v20 + 56))(v101, v20);
          v85 = (float64x2_t)v101[0];
          _D2 = *((_QWORD *)&v101[2] + 1);
          v87 = *(float64x2_t *)((char *)&v101[1] + 8);
          v88 = *(double *)v103;
          v89 = v102;
LABEL_22:
          v90 = *(double *)(a3 + 160);
          _Q7 = *v84;
          __asm { FMLA            D0, D2, V7.D[1] }
          *v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v85, v84->f64[0]), v87, *v84, 1), v89, v90);
          *(double *)(a3 + 160) = _D0 + v88 * v90;
          break;
        default:
          break;
      }
    }
  }
  _Q2 = *(_OWORD *)(a1 + 96);
  _D4 = *(_QWORD *)(a1 + 104);
  __asm { FMLA            D3, D4, V2.D[1] }
  result = *(double *)(a2 + 8) * (_D3 + *(double *)(a1 + 112) * *(double *)(a1 + 112));
  *(double *)(a1 + 120) = result;
  return result;
}

BOOL sub_239C4CCB4(uint64_t *a1)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  void *v11;
  _BOOL8 v12;
  float64_t v18;
  float64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  unsigned int *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  float64x2_t v45;
  float32x2_t v46;
  char *v47;
  _OWORD *f64;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  float64x2_t *v55;
  float64x2_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  float64x2_t *v64;
  double v65;
  float64x2_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int64x2_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int64x2_t v75;
  int8x16_t *v76;
  int64x2_t v77;
  unint64_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  uint8x16_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint32x4_t v95;
  int8x16_t v96;
  uint32x4_t v97;
  uint32x4_t v98;
  int8x16_t v99;
  uint32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  uint8x16_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  uint32x4_t v106;
  uint32x4_t v107;
  uint32x4_t v108;
  uint32x4_t v109;
  unint64_t v110;
  int64x2_t v111;
  int64x2_t v112;
  unint64_t v113;
  int8x8_t *v114;
  int8x16_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int8x8_t v118;
  uint16x8_t v119;
  uint32x4_t v120;
  int8x16_t v121;
  int64x2_t v122;
  int64x2_t v123;
  uint32x4_t v124;
  int64x2_t v125;
  int v126;
  uint64_t v127;
  int v128;
  BOOL v129;
  float64x2_t v130;
  float64x2_t v131;
  double *v132;
  double *v133;
  uint64_t v134;
  uint64_t v135;
  double *v136;
  float64x2_t *v137;
  double v138;
  float64x2_t v139;
  double v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  _BYTE *v145;
  double *v146;
  unint64_t v147;
  double *v148;
  uint64_t v149;
  float64x2_t v150;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v157;
  float64x2_t v159;
  double v164;
  double v167;
  double v168;
  double v169;
  double *v170;
  double *v171;
  double *v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  char *v179;
  double *v180;
  unint64_t v181;
  uint64_t v182;
  char *v183;
  double *v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  _OWORD *v189;
  double *v190;
  uint64_t v191;
  __int128 v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  float64x2_t v209;
  float64x2_t v211;
  double v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  unint64_t v222;
  float64x2_t v223;
  int8x16_t v224;
  double v225;
  double v226;
  int8x16_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64_t v231;
  double v232;
  float64x2_t v233;
  float64_t v234;
  double v235;
  float64x2_t v236;
  float64_t v237;
  double v238;
  double v240;
  double v243;
  __int128 v244;
  __int128 v245;
  std::bad_alloc *exception;
  std::bad_alloc *v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  float64x2_t v257;
  double v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64_t v264;
  uint64_t v265;
  double v266;
  unint64_t v267;
  uint64_t v268;
  double *v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  uint64_t v273;
  double v274;
  unint64_t v275;
  __int128 v276;
  double v277;
  uint64_t v278;
  unint64_t v279;
  double v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  double *v286;
  double v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  uint64_t v293;
  void *v294;
  double *v295;
  double *v296;
  void *v297;
  double *v298;
  double *v299;
  _OWORD v300[2];
  uint64_t v301;
  __int128 v302;
  void *v303[3];
  void *v304;
  _BYTE *v305;
  uint64_t v306;
  void *v307;
  void *v308;
  uint64_t v309;
  float64x2_t memptr;
  _BYTE v311[32];
  float64x2_t v312;
  __int128 v313;
  __int128 v314;
  float64x2_t v315;
  __int128 v316;
  _BYTE v317[56];
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  char v323;
  void *__dst[2];
  int v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  char v336;
  void *v337[2];
  int v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  float64x2_t v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  void *v347;
  void *v348;
  char v349;
  _OWORD v350[2];
  char v351;
  void *v352;
  unsigned int v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  float64x2_t v357;
  __int128 v358;
  __int128 v359;
  float64x2_t v360;
  __int128 v361;
  char v362;
  void *__p;
  char v364;
  _OWORD v365[2];
  char v366;
  void *__src;
  unsigned int v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  float64x2_t v375;
  __int128 v376;
  char v377;
  void *v378;
  char v379;

  v3 = *(double *)a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = sub_239470FCC(v4, *a1);
  sub_2395F81B8((uint64_t)v365, (uint64_t)v5);
  v6 = sub_239470FCC(v4, v2);
  sub_2395F81B8((uint64_t)v350, (uint64_t)v6);
  _ZF = v377 == 1 || v362 == 1;
  if (_ZF || (v8 = (_QWORD *)a1[3], v9 = (uint64_t **)a1[4], v10 = a1[5], sub_23943F628(v9, (uint64_t)&v347), !v349))
  {
    v12 = 0;
    goto LABEL_10;
  }
  v11 = v347;
  v285 = v348;
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v348 - (_BYTE *)v347) >> 2) < *(_QWORD *)(v10 + 64))
  {
    v12 = 0;
    if (!v347)
      goto LABEL_10;
LABEL_78:
    v348 = v11;
    operator delete(v11);
    goto LABEL_10;
  }
  v282 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)v348 - (_BYTE *)v347) >> 2);
  v272 = v347;
  v279 = v2;
  __asm { FMOV            V0.2D, #-1.0 }
  v321 = _Q0;
  v322 = _Q0;
  v276 = _Q0;
  v323 = 1;
  __dst[0] = 0;
  __dst[1] = (void *)8;
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v18 = memptr.f64[0];
  __dst[0] = *(void **)&memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
    goto LABEL_251;
  v325 = 5;
  *(_QWORD *)(*(_QWORD *)&memptr.f64[0] + 32) = 0;
  **(_OWORD **)&v18 = 0u;
  *(_OWORD *)(*(_QWORD *)&v18 + 16) = 0u;
  v330 = xmmword_239F13AC0;
  v331 = unk_239F13AD0;
  v332 = xmmword_239F13AE0;
  v333 = unk_239F13AF0;
  v326 = xmmword_239F13A80;
  v327 = *(_OWORD *)algn_239F13A90;
  v328 = xmmword_239F13AA0;
  v329 = unk_239F13AB0;
  v334 = v276;
  v335 = v276;
  v336 = 1;
  v337[0] = 0;
  v337[1] = (void *)8;
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v19 = memptr.f64[0];
  v337[0] = *(void **)&memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
LABEL_251:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v247 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v247, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v338 = 5;
  *(_QWORD *)(*(_QWORD *)&memptr.f64[0] + 32) = 0;
  **(_OWORD **)&v19 = 0u;
  *(_OWORD *)(*(_QWORD *)&v19 + 16) = 0u;
  v343 = xmmword_239F13AC0;
  v344 = unk_239F13AD0;
  v345 = xmmword_239F13AE0;
  v346 = unk_239F13AF0;
  v339 = xmmword_239F13A80;
  v340 = *(_OWORD *)algn_239F13A90;
  v341 = xmmword_239F13AA0;
  v342 = (float64x2_t)unk_239F13AB0;
  v321 = v365[0];
  v322 = v365[1];
  v323 = v366;
  v20 = v368;
  sub_23945215C((uint64_t)__dst, v368);
  if ((_DWORD)v20)
    memcpy(__dst[0], __src, 8 * v20);
  v325 = v368;
  v330 = v373;
  v331 = v374;
  v332 = (__int128)v375;
  v333 = v376;
  v326 = v369;
  v327 = v370;
  v328 = v371;
  v329 = v372;
  v334 = v350[0];
  v335 = v350[1];
  v336 = v351;
  v21 = v353;
  sub_23945215C((uint64_t)v337, v353);
  if ((_DWORD)v21)
    memcpy(v337[0], v352, 8 * v21);
  v338 = v353;
  v343 = v358;
  v344 = v359;
  v345 = (__int128)v360;
  v346 = v361;
  v339 = v354;
  v340 = v355;
  v341 = v356;
  v342 = v357;
  v319 = 0u;
  v320 = 0u;
  v318 = 0u;
  v22 = v282;
  if (v285 == v272)
  {
    v23 = 0;
    v24 = v8[1];
    if (!v24)
      goto LABEL_72;
  }
  else
  {
    if (v282 >> 60)
      sub_2394189F8();
    *(_QWORD *)&v318 = operator new(16 * v282);
    *((_QWORD *)&v318 + 1) = v318;
    *(_QWORD *)&v319 = v318 + 16 * v282;
    v23 = (char *)operator new(16 * v282);
    *((_QWORD *)&v319 + 1) = v23;
    *(_QWORD *)&v320 = v23;
    *((_QWORD *)&v320 + 1) = &v23[16 * v282];
    v24 = v8[1];
    if (!v24)
      goto LABEL_72;
  }
  v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    v26 = LODWORD(v3);
    if (v24 <= LODWORD(v3))
      v26 = LODWORD(v3) % v24;
  }
  else
  {
    v26 = (v24 - 1) & LODWORD(v3);
  }
  v27 = *(uint64_t ***)(*v8 + 8 * v26);
  if (v27)
  {
    v28 = *v27;
    if (*v27)
    {
      if (v25.u32[0] < 2uLL)
      {
        while (1)
        {
          v30 = v28[1];
          if (v30 == LODWORD(v3))
          {
            if (*((_DWORD *)v28 + 4) == LODWORD(v3))
              goto LABEL_46;
          }
          else if ((v30 & (v24 - 1)) != v26)
          {
            goto LABEL_45;
          }
          v28 = (uint64_t *)*v28;
          if (!v28)
            goto LABEL_46;
        }
      }
      do
      {
        v29 = v28[1];
        if (v29 == LODWORD(v3))
        {
          if (*((_DWORD *)v28 + 4) == LODWORD(v3))
            break;
        }
        else
        {
          if (v29 >= v24)
            v29 %= v24;
          if (v29 != v26)
            goto LABEL_45;
        }
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
  }
  else
  {
LABEL_45:
    v28 = 0;
  }
LABEL_46:
  if (v25.u32[0] > 1uLL)
  {
    v31 = v2;
    if (v24 <= v2)
      v31 = v2 % v24;
  }
  else
  {
    v31 = ((_DWORD)v24 - 1) & v2;
  }
  v32 = *(uint64_t ***)(*v8 + 8 * v31);
  if (!v32 || (v33 = *v32) == 0)
  {
LABEL_72:
    v12 = 0;
    if (!v23)
      goto LABEL_74;
    goto LABEL_73;
  }
  if (v25.u32[0] < 2uLL)
  {
    v34 = v24 - 1;
    while (1)
    {
      v36 = v33[1];
      if (v36 == v2)
      {
        if (*((_DWORD *)v33 + 4) == (_DWORD)v2)
          goto LABEL_66;
      }
      else if ((v36 & v34) != v31)
      {
        goto LABEL_72;
      }
      v33 = (uint64_t *)*v33;
      if (!v33)
        goto LABEL_72;
    }
  }
  while (1)
  {
    v35 = v33[1];
    if (v35 == v2)
      break;
    if (v35 >= v24)
      v35 %= v24;
    if (v35 != v31)
      goto LABEL_72;
LABEL_55:
    v33 = (uint64_t *)*v33;
    if (!v33)
      goto LABEL_72;
  }
  if (*((_DWORD *)v33 + 4) != (_DWORD)v2)
    goto LABEL_55;
LABEL_66:
  if (!v28)
    goto LABEL_72;
  v260 = *(_QWORD *)&v3;
  if (v285 != v272)
  {
    v37 = 0;
    if (v282 <= 1)
      v38 = 1;
    else
      v38 = v282;
    v268 = v38;
    do
    {
      v40 = (unsigned int *)((char *)v347 + 12 * v37);
      v41 = *v40;
      v42 = (_QWORD *)v28[3];
      if (v42[4] <= v41 || ((*(_QWORD *)(v42[3] + ((v41 >> 3) & 0x1FFFFFF8)) >> v41) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 117, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v43 = v40[1];
      v44 = (_QWORD *)v33[3];
      if (v44[4] <= v43 || ((*(_QWORD *)(v44[3] + ((v43 >> 3) & 0x1FFFFFF8)) >> v43) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 117, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v45 = vcvtq_f64_f32(*(float32x2_t *)(v42[6] + 24 * v41));
      v46 = *(float32x2_t *)(v44[6] + 24 * v43);
      v47 = (char *)*((_QWORD *)&v318 + 1);
      if (*((_QWORD *)&v318 + 1) >= (unint64_t)v319)
      {
        v49 = (char *)v318;
        v50 = (uint64_t)(*((_QWORD *)&v318 + 1) - v318) >> 4;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 60)
          goto LABEL_254;
        v52 = v319 - v318;
        if ((uint64_t)(v319 - v318) >> 3 > v51)
          v51 = v52 >> 3;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0)
          v53 = 0xFFFFFFFFFFFFFFFLL;
        else
          v53 = v51;
        if (v53)
        {
          v262 = v45;
          if (v53 >> 60)
            goto LABEL_253;
          v54 = (char *)operator new(16 * v53);
          v45 = v262;
        }
        else
        {
          v54 = 0;
        }
        v55 = (float64x2_t *)&v54[16 * v50];
        *v55 = v45;
        f64 = (_OWORD *)v55[1].f64;
        if (v47 != v49)
        {
          do
          {
            v55[-1] = *((float64x2_t *)v47 - 1);
            --v55;
            v47 -= 16;
          }
          while (v47 != v49);
          v47 = (char *)v318;
        }
        *(_QWORD *)&v318 = v55;
        *((_QWORD *)&v318 + 1) = f64;
        *(_QWORD *)&v319 = &v54[16 * v53];
        if (v47)
          operator delete(v47);
      }
      else
      {
        **((_OWORD **)&v318 + 1) = v45;
        f64 = v47 + 16;
      }
      v56 = vcvtq_f64_f32(v46);
      *((_QWORD *)&v318 + 1) = f64;
      v57 = (char *)v320;
      if ((unint64_t)v320 < *((_QWORD *)&v320 + 1))
      {
        *(float64x2_t *)v320 = v56;
        v39 = v57 + 16;
      }
      else
      {
        v58 = (char *)*((_QWORD *)&v319 + 1);
        v59 = (uint64_t)(v320 - *((_QWORD *)&v319 + 1)) >> 4;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 60)
LABEL_254:
          sub_2394189F8();
        v61 = *((_QWORD *)&v320 + 1) - *((_QWORD *)&v319 + 1);
        if ((uint64_t)(*((_QWORD *)&v320 + 1) - *((_QWORD *)&v319 + 1)) >> 3 > v60)
          v60 = v61 >> 3;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
          v62 = 0xFFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          v263 = v56;
          if (v62 >> 60)
LABEL_253:
            sub_239418A80();
          v63 = (char *)operator new(16 * v62);
          v56 = v263;
        }
        else
        {
          v63 = 0;
        }
        v64 = (float64x2_t *)&v63[16 * v59];
        *v64 = v56;
        v39 = (_OWORD *)v64[1].f64;
        if (v57 != v58)
        {
          do
          {
            v64[-1] = *((float64x2_t *)v57 - 1);
            --v64;
            v57 -= 16;
          }
          while (v57 != v58);
          v57 = v58;
        }
        *((_QWORD *)&v319 + 1) = v64;
        *(_QWORD *)&v320 = v39;
        *((_QWORD *)&v320 + 1) = &v63[16 * v62];
        if (v57)
          operator delete(v57);
      }
      v22 = v282;
      *(_QWORD *)&v320 = v39;
      ++v37;
    }
    while (v37 != v268);
  }
  sub_239C4FFC8((uint64_t)v317, (uint64_t)v9);
  if (v317[48])
  {
    v326 = xmmword_239EC6840;
    *(_QWORD *)&v327 = 0;
    *(_QWORD *)&v329 = 0;
    v328 = xmmword_239EC6850;
    v330 = 0uLL;
    *(_QWORD *)&v333 = 0;
    *(_QWORD *)&v331 = 0x3FF0000000000000;
    v332 = 0uLL;
    sub_239C50084((uint64_t)&memptr, (uint64_t)v317, 0.0, v65, v66);
    v343 = v313;
    v344 = v314;
    v345 = (__int128)v315;
    v346 = v316;
    v339 = (__int128)memptr;
    v340 = *(_OWORD *)v311;
    v341 = *(_OWORD *)&v311[16];
    v342 = v312;
    v308 = 0;
    v307 = 0;
    v309 = 0;
    v305 = 0;
    v304 = 0;
    v306 = 0;
    memset(v303, 0, sizeof(v303));
    v300[0] = xmmword_239F0C420;
    v300[1] = xmmword_239F0C430;
    v302 = xmmword_239F0BF50;
    v301 = 0x3F50624DD2F1A9FCLL;
    v67 = v279;
    if (!sub_239E2280C((unint64_t *)&v318, (uint64_t)&v321, (double *)v300, (uint64_t)&v307, &v304, v303))
      goto LABEL_140;
    v68 = (unsigned __int8 *)v304;
    if (v304 == v305)
    {
      v70 = 0;
    }
    else
    {
      v69 = v305 - (_BYTE *)v304;
      if ((unint64_t)(v305 - (_BYTE *)v304) >= 8)
      {
        if (v69 >= 0x20)
        {
          v72 = 0uLL;
          v73.i64[0] = 0x202020202020202;
          v73.i64[1] = 0x202020202020202;
          v74 = (int8x16_t)vdupq_n_s64(1uLL);
          v71 = v69 & 0xFFFFFFFFFFFFFFE0;
          v75 = 0uLL;
          v76 = (int8x16_t *)((char *)v304 + 16);
          v77 = 0uLL;
          v78 = v69 & 0xFFFFFFFFFFFFFFE0;
          v79 = 0uLL;
          v80 = 0uLL;
          v81 = 0uLL;
          v82 = 0uLL;
          v83 = 0uLL;
          v84 = 0uLL;
          v85 = 0uLL;
          v86 = 0uLL;
          v87 = 0uLL;
          v88 = 0uLL;
          v89 = 0uLL;
          v90 = 0uLL;
          v91 = 0uLL;
          do
          {
            v92 = (uint8x16_t)vceqq_s8(v76[-1], v73);
            v93 = vmovl_u8(*(uint8x8_t *)v92.i8);
            v94 = vmovl_high_u8(v92);
            v95 = vmovl_high_u16(v94);
            v96.i64[0] = v95.u32[2];
            v96.i64[1] = v95.u32[3];
            v83 = vaddq_s64(v83, (int64x2_t)vandq_s8(v96, v74));
            v97 = vmovl_high_u16(v93);
            v98 = vmovl_u16(*(uint16x4_t *)v94.i8);
            v96.i64[0] = v95.u32[0];
            v96.i64[1] = v95.u32[1];
            v82 = vaddq_s64(v82, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v98.u32[2];
            v96.i64[1] = v98.u32[3];
            v81 = vaddq_s64(v81, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v97.u32[2];
            v96.i64[1] = v97.u32[3];
            v79 = vaddq_s64(v79, (int64x2_t)vandq_s8(v96, v74));
            v99 = *v76;
            v76 += 2;
            v100 = vmovl_u16(*(uint16x4_t *)v93.i8);
            v96.i64[0] = v98.u32[0];
            v96.i64[1] = v98.u32[1];
            v80 = vaddq_s64(v80, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v100.u32[0];
            v96.i64[1] = v100.u32[1];
            v101 = (int64x2_t)vandq_s8(v96, v74);
            v96.i64[0] = v100.u32[2];
            v96.i64[1] = v100.u32[3];
            v102 = (int64x2_t)vandq_s8(v96, v74);
            v96.i64[0] = v97.u32[0];
            v96.i64[1] = v97.u32[1];
            v103 = (uint8x16_t)vceqq_s8(v99, v73);
            v77 = vaddq_s64(v77, (int64x2_t)vandq_s8(v96, v74));
            v104 = vmovl_u8(*(uint8x8_t *)v103.i8);
            v105 = vmovl_high_u8(v103);
            v75 = vaddq_s64(v75, v102);
            v106 = vmovl_high_u16(v105);
            v72 = vaddq_s64(v72, v101);
            v96.i64[0] = v106.u32[2];
            v96.i64[1] = v106.u32[3];
            v91 = vaddq_s64(v91, (int64x2_t)vandq_s8(v96, v74));
            v107 = vmovl_high_u16(v104);
            v108 = vmovl_u16(*(uint16x4_t *)v105.i8);
            v96.i64[0] = v106.u32[0];
            v96.i64[1] = v106.u32[1];
            v90 = vaddq_s64(v90, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v108.u32[2];
            v96.i64[1] = v108.u32[3];
            v89 = vaddq_s64(v89, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v107.u32[2];
            v96.i64[1] = v107.u32[3];
            v87 = vaddq_s64(v87, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v108.u32[0];
            v96.i64[1] = v108.u32[1];
            v88 = vaddq_s64(v88, (int64x2_t)vandq_s8(v96, v74));
            v109 = vmovl_u16(*(uint16x4_t *)v104.i8);
            v96.i64[0] = v107.u32[0];
            v96.i64[1] = v107.u32[1];
            v86 = vaddq_s64(v86, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v109.u32[2];
            v96.i64[1] = v109.u32[3];
            v85 = vaddq_s64(v85, (int64x2_t)vandq_s8(v96, v74));
            v96.i64[0] = v109.u32[0];
            v96.i64[1] = v109.u32[1];
            v84 = vaddq_s64(v84, (int64x2_t)vandq_s8(v96, v74));
            v78 -= 32;
          }
          while (v78);
          v70 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v84, v72), vaddq_s64(v88, v80)), vaddq_s64(vaddq_s64(v86, v77), vaddq_s64(v90, v82))), vaddq_s64(vaddq_s64(vaddq_s64(v85, v75), vaddq_s64(v89, v81)), vaddq_s64(vaddq_s64(v87, v79), vaddq_s64(v91, v83)))));
          if (v69 == v71)
            goto LABEL_139;
          if ((v69 & 0x18) == 0)
          {
            v68 = (unsigned __int8 *)v304 + v71;
            goto LABEL_136;
          }
        }
        else
        {
          v70 = 0;
          v71 = 0;
        }
        v110 = v69 & 0xFFFFFFFFFFFFFFF8;
        v111 = 0uLL;
        v112 = (int64x2_t)v70;
        v113 = v71 - (v69 & 0xFFFFFFFFFFFFFFF8);
        v114 = (int8x8_t *)((char *)v304 + v71);
        v115 = (int8x16_t)vdupq_n_s64(1uLL);
        v116 = 0uLL;
        v117 = 0uLL;
        do
        {
          v118 = *v114++;
          v119 = vmovl_u8((uint8x8_t)vceq_s8(v118, (int8x8_t)0x202020202020202));
          v120 = vmovl_u16(*(uint16x4_t *)v119.i8);
          v121.i64[0] = v120.u32[0];
          v121.i64[1] = v120.u32[1];
          v122 = (int64x2_t)vandq_s8(v121, v115);
          v121.i64[0] = v120.u32[2];
          v121.i64[1] = v120.u32[3];
          v123 = (int64x2_t)vandq_s8(v121, v115);
          v124 = vmovl_high_u16(v119);
          v121.i64[0] = v124.u32[0];
          v121.i64[1] = v124.u32[1];
          v125 = (int64x2_t)vandq_s8(v121, v115);
          v121.i64[0] = v124.u32[2];
          v121.i64[1] = v124.u32[3];
          v117 = vaddq_s64(v117, (int64x2_t)vandq_s8(v121, v115));
          v116 = vaddq_s64(v116, v125);
          v111 = vaddq_s64(v111, v123);
          v112 = vaddq_s64(v112, v122);
          v113 += 8;
        }
        while (v113);
        v70 = vaddvq_s64(vaddq_s64(vaddq_s64(v112, v116), vaddq_s64(v111, v117)));
        if (v69 != v110)
        {
          v68 = (unsigned __int8 *)v304 + v110;
          goto LABEL_136;
        }
      }
      else
      {
        v70 = 0;
        do
        {
LABEL_136:
          v126 = *v68++;
          if (v126 == 2)
            ++v70;
        }
        while (v68 != v305);
      }
    }
LABEL_139:
    a1[10] = v70;
    v127 = a1[5];
    if (v70 >= *(_QWORD *)(v127 + 64)
      && (*(_DWORD *)v127 != 1
       || ((v128 = *(unsigned __int8 *)(v127 + 752), v70 >= 6) ? (v129 = v128 == 0) : (v129 = 1),
           v129
        || sub_239E2330C((uint64_t)&v321, (uint64_t)&v334, (uint64_t *)&v307, (uint64_t *)&v318, (uint64_t *)&v319 + 1, &v304))))
    {
      v297 = 0;
      v298 = 0;
      v299 = 0;
      v294 = 0;
      v295 = 0;
      v296 = 0;
      sub_239C5029C((uint64_t)&v294, v22);
      if (v285 != v272)
      {
        v132 = 0;
        v286 = 0;
        v133 = 0;
        v134 = 0;
        if (v22 <= 1)
          v135 = 1;
        else
          v135 = v22;
        v273 = v135;
        while (*((_BYTE *)v304 + v134) != 2)
        {
          v136 = v133;
LABEL_161:
          if (++v134 == v135)
            goto LABEL_220;
        }
        v137 = (float64x2_t *)((char *)v307 + 24 * v134);
        v138 = sub_239C503BC(v137, (uint64_t)&v326, (uint64_t)&v339);
        v140 = v138;
        if (v133 < v286)
        {
          *v133 = v138;
          v136 = v133 + 1;
LABEL_184:
          v298 = v136;
          *(_QWORD *)&v150.f64[0] = v327;
          _V4.D[1] = *((double *)&v330 + 1);
          *(_QWORD *)&v139.f64[0] = v333;
          *(_QWORD *)&v152 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v139);
          v153 = vsubq_f64((float64x2_t)0, (float64x2_t)v332);
          *(_QWORD *)&v150.f64[1] = v329;
          v154 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v326, (int64x2_t)v328), v153.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v326, (int64x2_t)v328), v153, 1), v150, v152);
          _Q0 = vmulq_f64((float64x2_t)v330, v153);
          _D1 = v153.f64[1];
          __asm { FMLA            D0, D1, V4.D[1] }
          _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], *(double *)&v331, v152);
          *(_QWORD *)&v157.f64[0] = v340;
          _V5.D[1] = *((double *)&v343 + 1);
          *(_QWORD *)&v153.f64[0] = v346;
          *(_QWORD *)&v153.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v153);
          v159 = vsubq_f64((float64x2_t)0, (float64x2_t)v345);
          _Q2 = (float64x2_t)vzip2q_s64((int64x2_t)v339, (int64x2_t)v341);
          v157.f64[1] = v342.f64[0];
          v130 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v339, (int64x2_t)v341), v159.f64[0]), _Q2, v159, 1), v157, v153.f64[0]);
          _Q1 = vmulq_f64((float64x2_t)v343, v159);
          _Q2.f64[0] = v159.f64[1];
          __asm { FMLA            D1, D2, V5.D[1] }
          _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *(double *)&v344, v153.f64[0]);
          _Q2.f64[0] = v137[1].f64[0];
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q0);
          *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, _Q1);
          _D5 = vsubq_f64(*v137, v154).f64[1];
          __asm { FMLA            D3, D5, V4.D[1] }
          v164 = sqrt(vmlad_n_f64(_D3, _Q0.f64[0], _Q0.f64[0]));
          _D4 = vsubq_f64(*v137, v130).f64[1];
          __asm { FMLA            D3, D4, V2.D[1] }
          v167 = sqrt(vmlad_n_f64(_D3, _Q1.f64[0], _Q1.f64[0]));
          if (v164 >= v167)
            v168 = v167;
          else
            v168 = v164;
          if (v164 < v167)
            v164 = v167;
          v169 = v164 / v168;
          v170 = v295;
          if (v295 >= v296)
          {
            v269 = v136;
            v172 = (double *)v294;
            v173 = (char *)v295 - (_BYTE *)v294;
            v174 = ((char *)v295 - (_BYTE *)v294) >> 3;
            v175 = v174 + 1;
            if ((unint64_t)(v174 + 1) >> 61)
              sub_2394189F8();
            v176 = (char *)v296 - (_BYTE *)v294;
            if (((char *)v296 - (_BYTE *)v294) >> 2 > v175)
              v175 = v176 >> 2;
            if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFF8)
              v177 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v177 = v175;
            if (v177)
            {
              if (v177 >> 61)
                sub_239418A80();
              v178 = v177;
              v179 = (char *)operator new(8 * v177);
              v177 = v178;
            }
            else
            {
              v179 = 0;
            }
            v180 = (double *)&v179[8 * v174];
            *v180 = v169;
            v171 = v180 + 1;
            if (v170 != v172)
            {
              v181 = (char *)(v170 - 1) - (char *)v172;
              if (v181 < 0x58)
                goto LABEL_261;
              if ((unint64_t)((char *)v170 - &v179[v173]) < 0x20)
                goto LABEL_261;
              v182 = (v181 >> 3) + 1;
              v183 = &v179[8 * v174 - 16];
              v184 = v170 - 2;
              v185 = v182 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v186 = *(_OWORD *)v184;
                *((_OWORD *)v183 - 1) = *((_OWORD *)v184 - 1);
                *(_OWORD *)v183 = v186;
                v183 -= 32;
                v184 -= 4;
                v185 -= 4;
              }
              while (v185);
              v180 -= v182 & 0x3FFFFFFFFFFFFFFCLL;
              v170 -= v182 & 0x3FFFFFFFFFFFFFFCLL;
              if (v182 != (v182 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_261:
                do
                {
                  v187 = *((_QWORD *)v170-- - 1);
                  *((_QWORD *)v180-- - 1) = v187;
                }
                while (v170 != v172);
              }
            }
            v294 = v180;
            v295 = v171;
            v296 = (double *)&v179[8 * v177];
            if (v172)
              operator delete(v172);
            v136 = v269;
          }
          else
          {
            *v295 = v169;
            v171 = v170 + 1;
          }
          v135 = v273;
          v295 = v171;
          v133 = v136;
          v67 = v279;
          goto LABEL_161;
        }
        v141 = v133 - v132;
        v142 = v141 + 1;
        if ((unint64_t)(v141 + 1) >> 61)
          sub_2394189F8();
        if (((char *)v286 - (char *)v132) >> 2 > v142)
          v142 = ((char *)v286 - (char *)v132) >> 2;
        if ((unint64_t)((char *)v286 - (char *)v132) >= 0x7FFFFFFFFFFFFFF8)
          v143 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v143 = v142;
        if (v143)
        {
          if (v143 >> 61)
            sub_239418A80();
          v144 = v143;
          v145 = operator new(8 * v143);
          v143 = v144;
        }
        else
        {
          v145 = 0;
        }
        v146 = (double *)&v145[8 * v141];
        *v146 = v140;
        if (v133 == v132)
        {
          v136 = v146 + 1;
        }
        else
        {
          v147 = (char *)(v133 - 1) - (char *)v132;
          if (v147 < 0x168
            || &v145[(char *)v133 - (char *)v132 - 8 - (v147 & 0xFFFFFFFFFFFFFFF8)] > &v145[(char *)v133
                                                                                            - (char *)v132
                                                                                            - 8]
            || (double *)((char *)v133 - (v147 & 0xFFFFFFFFFFFFFFF8) - 8) > v133 - 1
            || (unint64_t)((char *)v132 - v145) < 0x20)
          {
            v148 = v133;
            v136 = v146 + 1;
          }
          else
          {
            v188 = (v147 >> 3) + 1;
            v148 = &v133[-(v188 & 0x3FFFFFFFFFFFFFFCLL)];
            v189 = &v145[8 * v141 - 16];
            v190 = v133 - 2;
            v191 = v188 & 0x3FFFFFFFFFFFFFFCLL;
            v136 = v146 + 1;
            do
            {
              v192 = *(_OWORD *)v190;
              *(v189 - 1) = *((_OWORD *)v190 - 1);
              *v189 = v192;
              v189 -= 2;
              v190 -= 4;
              v191 -= 4;
            }
            while (v191);
            v146 -= v188 & 0x3FFFFFFFFFFFFFFCLL;
            if (v188 == (v188 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_181;
          }
          do
          {
            v149 = *((_QWORD *)v148-- - 1);
            *((_QWORD *)v146-- - 1) = v149;
          }
          while (v148 != v132);
        }
LABEL_181:
        v297 = v146;
        v298 = v136;
        v286 = (double *)&v145[8 * v143];
        v299 = v286;
        if (v132)
          operator delete(v132);
        v132 = v146;
        goto LABEL_184;
      }
      v136 = 0;
LABEL_220:
      *(_QWORD *)&v193 = vextq_s8((int8x16_t)v326, (int8x16_t)v326, 8uLL).u64[0];
      *(_QWORD *)&v130.f64[0] = v327;
      *(_QWORD *)&v194 = vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
      *(_QWORD *)&v195 = vextq_s8((int8x16_t)v330, (int8x16_t)v330, 8uLL).u64[0];
      *(_QWORD *)&v131.f64[0] = v340;
      *(_QWORD *)&v196 = vextq_s8((int8x16_t)v339, (int8x16_t)v339, 8uLL).u64[0];
      *(_QWORD *)&v197 = vextq_s8((int8x16_t)v341, (int8x16_t)v341, 8uLL).u64[0];
      *(_QWORD *)&v198 = vextq_s8((int8x16_t)v343, (int8x16_t)v343, 8uLL).u64[0];
      v283 = v326;
      v287 = *(double *)&v329;
      v277 = *(double *)&v327;
      v280 = *(double *)&v331;
      v270 = v328;
      v274 = v193;
      v264 = *(double *)&v330;
      v266 = v194;
      v256 = *(double *)&v340;
      v258 = v195;
      v254 = *(double *)&v339;
      v255 = v342.f64[0];
      v252 = *(double *)&v341;
      v253 = v196;
      v250 = *(double *)&v343;
      v251 = v197;
      v248 = v198;
      v249 = *(double *)&v344;
      if (v260 <= v67)
      {
        *(_QWORD *)&v202.f64[0] = v339;
        v202.f64[1] = v196;
        *(_QWORD *)&v203.f64[0] = v341;
        v203.f64[1] = v197;
        *(_QWORD *)&v204.f64[0] = v343;
        v204.f64[1] = v198;
        memptr = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v202, *(double *)&v326), v203, *(double *)&v328), v204, *(double *)&v330);
        *(double *)v311 = *(double *)&v340 * *(double *)&v326
                        + v342.f64[0] * *(double *)&v328
                        + *(double *)&v344 * *(double *)&v330;
        *(double *)&v311[24] = *(double *)&v340 * v193 + v342.f64[0] * v194 + *(double *)&v344 * v195;
        *(float64x2_t *)&v311[8] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v202, v193), v203, v194), v204, v195);
        v312 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v202, *(double *)&v327), v203, *(double *)&v329), v204, *(double *)&v331);
        *(double *)&v313 = vmulq_f64(v131, v130).f64[0]
                         + v342.f64[0] * *(double *)&v329
                         + *(double *)&v344 * *(double *)&v331;
      }
      else
      {
        *(_QWORD *)&v199.f64[0] = v326;
        v199.f64[1] = v193;
        *(_QWORD *)&v200.f64[0] = v328;
        v200.f64[1] = v194;
        *(_QWORD *)&v201.f64[0] = v330;
        v201.f64[1] = v195;
        memptr = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, *(double *)&v339), v200, *(double *)&v341), v201, *(double *)&v343);
        *(double *)v311 = *(double *)&v327 * *(double *)&v339
                        + *(double *)&v329 * *(double *)&v341
                        + *(double *)&v331 * *(double *)&v343;
        *(double *)&v311[24] = *(double *)&v327 * v196 + *(double *)&v329 * v197 + *(double *)&v331 * v198;
        *(float64x2_t *)&v311[8] = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, v196), v200, v197), v201, v198);
        v312 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v199, *(double *)&v340), v200, v342.f64[0]), v201, *(double *)&v344);
        *(double *)&v313 = vmulq_f64(v130, v131).f64[0]
                         + *(double *)&v329 * v342.f64[0]
                         + *(double *)&v331 * *(double *)&v344;
      }
      sub_239C5092C((uint64_t)&v289, (uint64_t)&memptr);
      v205 = vextq_s8(v292, v292, 8uLL).u64[0];
      v206 = vextq_s8(v291, v291, 8uLL).u64[0];
      v207 = vextq_s8(v290, v290, 8uLL).u64[0];
      v208 = vextq_s8(v289, v289, 8uLL).u64[0];
      *(_QWORD *)&v209.f64[0] = v327;
      _V5.D[1] = *((double *)&v330 + 1);
      *(_QWORD *)&v211.f64[0] = v333;
      *(_QWORD *)&v212 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v211);
      v213 = vsubq_f64((float64x2_t)0, (float64x2_t)v332);
      *(_QWORD *)&v209.f64[1] = v329;
      v214 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v326, (int64x2_t)v328), v213.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v326, (int64x2_t)v328), v213, 1), v209, v212);
      _Q1 = vmulq_f64((float64x2_t)v330, v213);
      _D2 = v213.f64[1];
      __asm { FMLA            D1, D2, V5.D[1] }
      _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *(double *)&v331, v212);
      *(_QWORD *)&v209.f64[0] = v340;
      _V16.D[1] = *((double *)&v343 + 1);
      *(_QWORD *)&v218.f64[0] = v346;
      *(_QWORD *)&v218.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v218);
      v219 = vsubq_f64((float64x2_t)0, (float64x2_t)v345);
      v209.f64[1] = v342.f64[0];
      v220 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v339, (int64x2_t)v341), v219.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v339, (int64x2_t)v341), v219, 1), v209, v218.f64[0]);
      _Q3 = vmulq_f64((float64x2_t)v343, v219);
      _D4 = v219.f64[1];
      __asm { FMLA            D3, D4, V16.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], *(double *)&v344, v218.f64[0]);
      v222 = vextq_s8((int8x16_t)v220, (int8x16_t)v220, 8uLL).u64[0];
      v223.f64[0] = v220.f64[0];
      *(_QWORD *)&v223.f64[1] = v222;
      v213.f64[0] = v214.f64[0];
      *(_QWORD *)&v213.f64[1] = vextq_s8((int8x16_t)v214, (int8x16_t)v214, 8uLL).u64[0];
      v224 = (int8x16_t)vsubq_f64(v213, v223);
      *(_QWORD *)&v225 = vextq_s8(v224, v224, 8uLL).u64[0];
      *(_QWORD *)&v226 = *(_OWORD *)&vsubq_f64(_Q1, _Q3);
      v214.f64[1] = v213.f64[1];
      *(_QWORD *)&v220.f64[1] = v222;
      v227 = (int8x16_t)vsubq_f64(v220, v214);
      v228 = (float64x2_t)vextq_s8(v227, v227, 8uLL);
      v229 = vsubq_f64(_Q3, _Q1);
      *(_QWORD *)&_Q3.f64[0] = v283;
      if (v260 <= v67)
        _Q3.f64[0] = v254;
      v231 = v274;
      if (v260 <= v67)
        v231 = v253;
      v232 = v277;
      if (v260 <= v67)
      {
        v232 = v256;
        v227.i64[0] = v224.i64[0];
        v228.f64[0] = v225;
        v229.f64[0] = v226;
      }
      *(_QWORD *)&v233.f64[0] = v270;
      if (v260 <= v67)
        v233.f64[0] = v252;
      v234 = v266;
      if (v260 <= v67)
        v234 = v251;
      v235 = v287;
      if (v260 <= v67)
        v235 = v255;
      v236.f64[0] = v264;
      if (v260 <= v67)
        v236.f64[0] = v250;
      v237 = v258;
      if (v260 <= v67)
        v237 = v248;
      v238 = v280;
      if (v260 <= v67)
        v238 = v249;
      _Q3.f64[1] = v231;
      v233.f64[1] = v234;
      v236.f64[1] = v237;
      _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q3, *(double *)v227.i64), v233, v228.f64[0]), v236, v229.f64[0]);
      v240 = v232 * *(double *)v227.i64 + v235 * v228.f64[0] + v238 * v229.f64[0];
      _D1 = _Q3.f64[1];
      v288 = (int8x16_t)_Q3;
      __asm { FMLA            D0, D1, V3.D[1] }
      v243 = sqrt(_D0 + v240 * v240);
      v229.f64[0] = 0.0000001;
      v12 = v243 >= 0.0000001;
      if (v243 >= 0.0000001)
      {
        v259 = v208;
        v261 = v207;
        v265 = v289.i64[0];
        v267 = v206;
        v271 = v290.i64[0];
        v275 = v205;
        v278 = v291.i64[0];
        v281 = v292.i64[0];
        v284 = v293;
        if (v136 != v297)
        {
          std::__sort<std::__less<double,double> &,double *>();
          std::__sort<std::__less<double,double> &,double *>();
          a1[7] = *(_QWORD *)((char *)v297 + ((((char *)v298 - (_BYTE *)v297) >> 1) & 0xFFFFFFFFFFFFFFF8));
          a1[9] = *(_QWORD *)((char *)v294 + ((((char *)v295 - (_BYTE *)v294) >> 1) & 0xFFFFFFFFFFFFFFF8));
        }
        v257 = (float64x2_t)vextq_s8(v288, v288, 8uLL);
        a1[6] = 0x3FF0000000000000;
        *((double *)a1 + 8) = sub_239C50B40((uint64_t)&v321, (uint64_t)&v334, v257, v229, v228);
        *(_QWORD *)&v244 = v265;
        *((_QWORD *)&v244 + 1) = v259;
        *(_OWORD *)(a1 + 11) = v244;
        *(_QWORD *)&v244 = v271;
        *((_QWORD *)&v244 + 1) = v261;
        *(_OWORD *)(a1 + 13) = v244;
        *(_QWORD *)&v244 = v278;
        *((_QWORD *)&v244 + 1) = v267;
        *(_OWORD *)(a1 + 15) = v244;
        *(_QWORD *)&v245 = v281;
        *((_QWORD *)&v245 + 1) = v275;
        a1[19] = v284;
        *(_OWORD *)(a1 + 17) = v245;
        *((double *)a1 + 22) = v240;
        *(_QWORD *)&v244 = v288.i64[0];
        *((_QWORD *)&v244 + 1) = *(_QWORD *)&v257.f64[0];
        *((_OWORD *)a1 + 10) = v244;
      }
      if (v294)
      {
        v295 = (double *)v294;
        operator delete(v294);
      }
      if (v297)
        operator delete(v297);
    }
    else
    {
LABEL_140:
      v12 = 0;
    }
    if (v303[0])
      operator delete(v303[0]);
    if (v304)
      operator delete(v304);
    if (v307)
    {
      v308 = v307;
      operator delete(v307);
    }
  }
  else
  {
    v12 = 0;
  }
  v23 = (char *)*((_QWORD *)&v319 + 1);
  if (*((_QWORD *)&v319 + 1))
  {
LABEL_73:
    *(_QWORD *)&v320 = v23;
    operator delete(v23);
  }
LABEL_74:
  if ((_QWORD)v318)
  {
    *((_QWORD *)&v318 + 1) = v318;
    operator delete((void *)v318);
  }
  free(v337[0]);
  free(__dst[0]);
  if (v349)
  {
    v11 = v347;
    if (v347)
      goto LABEL_78;
  }
LABEL_10:
  if (v364 < 0)
    operator delete(__p);
  free(v352);
  if (v379 < 0)
    operator delete(v378);
  free(__src);
  return v12;
}

void sub_239C4E2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,void *a62)
{
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;

  if (__p)
  {
    operator delete(__p);
    v63 = a62;
    if (!a62)
    {
LABEL_3:
      v64 = (void *)STACK[0x200];
      if (!STACK[0x200])
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v63 = a62;
    if (!a62)
      goto LABEL_3;
  }
  operator delete(v63);
  v64 = (void *)STACK[0x200];
  if (!STACK[0x200])
  {
LABEL_4:
    v65 = (void *)STACK[0x218];
    if (!STACK[0x218])
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v64);
  v65 = (void *)STACK[0x218];
  if (!STACK[0x218])
  {
LABEL_5:
    v66 = (void *)STACK[0x230];
    if (!STACK[0x230])
    {
LABEL_12:
      sub_2394FCFA8((uint64_t)&STACK[0x300]);
      free((void *)STACK[0x418]);
      free((void *)STACK[0x358]);
      if (LOBYTE(STACK[0x4C8]))
      {
        v67 = (void *)STACK[0x4B0];
        if (STACK[0x4B0])
        {
          STACK[0x4B8] = (unint64_t)v67;
          operator delete(v67);
        }
      }
      sub_2395D4668((uint64_t)&STACK[0x4D0]);
      sub_2395D4668((uint64_t)&STACK[0x668]);
      _Unwind_Resume(a1);
    }
LABEL_11:
    STACK[0x238] = (unint64_t)v66;
    operator delete(v66);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(v65);
  v66 = (void *)STACK[0x230];
  if (!STACK[0x230])
    goto LABEL_12;
  goto LABEL_11;
}

void sub_239C4E434(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  uint64_t *i;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int *j;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int *v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  BOOL v44;
  uint64_t v45;

  v2 = (uint64_t)a2;
  v3 = a1;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = a2;
    do
    {
      v4 = (v4 + *((_DWORD *)v5 + 12));
      v5 = (uint64_t *)*v5;
    }
    while (v5);
    v45 = v4;
    v44 = (_DWORD)v4 == 0;
    if ((_DWORD)v4)
    {
      v6 = 3 * v4;
      v7 = (int *)operator new(12 * v4);
      v8 = &v7[v6];
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v9 = v7;
    do
    {
      for (i = *(uint64_t **)(v2 + 40); i; i = (uint64_t *)*i)
      {
        v12 = *(unsigned int *)(v2 + 16) | ((unint64_t)*((unsigned int *)i + 4) << 32);
        v13 = *((_DWORD *)i + 12) + *((_DWORD *)i + 13);
        if (v9 < v8)
        {
          *(_QWORD *)v9 = v12;
          v9[2] = v13;
          v9 += 3;
        }
        else
        {
          v14 = 0xAAAAAAAAAAAAAAABLL * (v9 - v7) + 1;
          if (v14 > 0x1555555555555555)
            sub_2394189F8();
          if (0x5555555555555556 * (v8 - v7) > v14)
            v14 = 0x5555555555555556 * (v8 - v7);
          if (0xAAAAAAAAAAAAAAABLL * (v8 - v7) >= 0xAAAAAAAAAAAAAAALL)
            v15 = 0x1555555555555555;
          else
            v15 = v14;
          if (v15)
          {
            if (v15 > 0x1555555555555555)
              sub_239418A80();
            v16 = (char *)operator new(12 * v15);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * (v9 - v7)];
          *(_QWORD *)v17 = v12;
          *((_DWORD *)v17 + 2) = v13;
          for (j = (int *)v17; v9 != v7; j[2] = v20)
          {
            v19 = *(_QWORD *)(v9 - 3);
            v9 -= 3;
            v20 = v9[2];
            *(_QWORD *)(j - 3) = v19;
            j -= 3;
          }
          v8 = (int *)&v16[12 * v15];
          v9 = (int *)(v17 + 12);
          if (v7)
            operator delete(v7);
          v7 = j;
        }
      }
      v2 = *(_QWORD *)v2;
    }
    while (v2);
    v2 = v45;
    v3 = a1;
    v10 = v44;
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v10 = 1;
  }
  v21 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v9 - v7));
  if (v9 == v7)
    v22 = 0;
  else
    v22 = v21;
  sub_239C4EA78((unint64_t)v7, v9, v22, 1);
  v23 = 0;
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  if ((v10 & 1) == 0)
  {
    v23 = operator new(8 * v2);
    *v3 = v23;
    v3[1] = v23;
    v3[2] = &v23[v2];
  }
  if (v7 != v9)
  {
    v24 = v7;
    while (1)
    {
      v26 = v3[2];
      if ((unint64_t)v23 >= v26)
        break;
      *v23 = *(_QWORD *)v24;
      v25 = v23 + 1;
LABEL_39:
      v3[1] = v25;
      v24 += 3;
      v23 = v25;
      if (v24 == v9)
        goto LABEL_66;
    }
    v27 = v3;
    v28 = (_BYTE *)*v3;
    v29 = (uint64_t)v23 - *v3;
    v30 = v29 >> 3;
    v31 = (v29 >> 3) + 1;
    if (v31 >> 61)
      sub_2394189F8();
    v32 = v26 - (_QWORD)v28;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        sub_239418A80();
      v34 = operator new(8 * v33);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[8 * v30];
    *v35 = *(_QWORD *)v24;
    v25 = v35 + 1;
    if (v23 == (_QWORD *)v28)
    {
      v28 = v23;
      v3 = v27;
      goto LABEL_57;
    }
    v36 = (char *)(v23 - 1) - v28;
    if (v36 < 0x168
      || &v34[v29 - 8 - (v36 & 0xFFFFFFFFFFFFFFF8)] > &v34[v29 - 8]
      || (_QWORD *)((char *)v23 - (v36 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1
      || (unint64_t)((char *)v23 - v34 - v29) < 0x20)
    {
      v37 = v23;
      v3 = v27;
    }
    else
    {
      v39 = (v36 >> 3) + 1;
      v37 = &v23[-(v39 & 0x3FFFFFFFFFFFFFFCLL)];
      v40 = &v34[8 * v30 - 16];
      v41 = (__int128 *)(v23 - 2);
      v42 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      v3 = v27;
      do
      {
        v43 = *v41;
        *(v40 - 1) = *(v41 - 1);
        *v40 = v43;
        v40 -= 2;
        v41 -= 2;
        v42 -= 4;
      }
      while (v42);
      v35 -= v39 & 0x3FFFFFFFFFFFFFFCLL;
      if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_57;
    }
    do
    {
      v38 = *--v37;
      *--v35 = v38;
    }
    while (v37 != (_QWORD *)v28);
    v28 = (_BYTE *)*v3;
LABEL_57:
    *v3 = v35;
    v3[1] = v25;
    v3[2] = &v34[8 * v33];
    if (v28)
      operator delete(v28);
    goto LABEL_39;
  }
LABEL_66:
  if (v7)
    operator delete(v7);
}

void sub_239C4E834(_Unwind_Exception *exception_object)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

unint64_t sub_239C4E898(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = a1[1];
  if (!v3)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!v7)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      return 0;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v11 = v7[4];
  if (!v11)
    return 0;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = a3;
    if (v11 <= a3)
      v13 = a3 % v11;
  }
  else
  {
    v13 = ((_DWORD)v11 - 1) & a3;
  }
  v14 = *(uint64_t ***)(v7[3] + 8 * v13);
  if (!v14)
    return 0;
  v15 = *v14;
  if (!v15)
    return 0;
  if (v12.u32[0] < 2uLL)
  {
    v16 = v11 - 1;
    while (1)
    {
      v20 = v15[1];
      if (v20 == a3)
      {
        if (*((_DWORD *)v15 + 4) == a3)
          goto LABEL_43;
      }
      else if ((v20 & v16) != v13)
      {
        return 0;
      }
      v17 = 0;
      v18 = 0;
      v15 = (uint64_t *)*v15;
      if (!v15)
        return v18 | v17;
    }
  }
  while (1)
  {
    v19 = v15[1];
    if (v19 != a3)
    {
      if (v19 >= v11)
        v19 %= v11;
      if (v19 != v13)
        return 0;
      goto LABEL_32;
    }
    if (*((_DWORD *)v15 + 4) == a3)
      break;
LABEL_32:
    v17 = 0;
    v18 = 0;
    v15 = (uint64_t *)*v15;
    if (!v15)
      return v18 | v17;
  }
LABEL_43:
  v18 = (unint64_t)(v15 + 3) & 0xFFFFFFFFFFFFFF00;
  v17 = ((_BYTE)v15 + 24);
  return v18 | v17;
}

unint64_t sub_239C4EA78(unint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  unsigned int v15;
  int *v16;
  unsigned int v17;
  int *v18;
  unsigned int v19;
  int *v20;
  int v21;
  int *v22;
  unsigned int v23;
  int *v24;
  unsigned int v25;
  int v26;
  int *v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int *v41;
  int *v42;
  unsigned int v43;
  unsigned int v44;
  int *v45;
  int *v46;
  unsigned int v47;
  int v48;
  int *v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int *v64;
  int *v65;
  unsigned int v66;
  unsigned int v67;
  int *v68;
  int *v69;
  unsigned int v70;
  int v71;
  int *v72;
  int *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int *v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  int *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  int *v96;
  int *v97;
  int *v98;
  int *v99;
  unsigned int v100;
  int *v101;
  unsigned int v102;
  int *v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  BOOL v109;
  int *v110;
  unsigned int v111;
  int *v112;
  unsigned int v113;
  int *v114;
  int *v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  int v125;
  int *v126;
  unsigned int v127;
  int *v128;
  unsigned int v129;
  unsigned int v130;
  int *v131;
  int v132;
  int *v133;
  BOOL v135;
  uint64_t v136;
  int *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  int64_t v144;
  int64_t v145;
  BOOL v146;
  uint64_t v147;
  int *v148;
  unsigned int v149;
  int *v150;
  uint64_t v151;
  int *v152;
  uint64_t v153;
  uint64_t v154;
  int64_t v155;
  int v156;
  int v157;
  int v158;
  int *v159;
  char *v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unsigned int v166;
  uint64_t v167;
  int *v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int *v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  int *v177;
  unsigned int v178;
  uint64_t v179;
  int v180;
  int v181;
  int *v182;
  int *v183;
  int *v184;

  v7 = (int *)result;
LABEL_2:
  v8 = a2 - 3;
  v9 = a2 - 1;
  v182 = a2 - 2;
  v183 = a2 - 7;
  v184 = a2 - 4;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*v9 > v10[2])
        {
          v123 = *v10;
          *v10 = *v8;
          *v8 = v123;
          v124 = v10[1];
          v10[1] = *v182;
          *v182 = v124;
          v125 = v10[2];
          v10[2] = *v9;
          *v9 = v125;
        }
        return result;
      case 3:
        v126 = v10 + 2;
        v127 = v10[2];
        v128 = v10 + 5;
        v129 = v10[5];
        v130 = *v9;
        if (v129 > v127)
        {
          v131 = v10 + 1;
          v132 = *v10;
          if (v130 <= v129)
          {
            v179 = *(_QWORD *)(v10 + 3);
            v10[4] = v10[1];
            v131 = v10 + 4;
            *(_QWORD *)v10 = v179;
            v10[2] = v129;
            v10[3] = v132;
            v10[5] = v127;
            if (*v9 <= v127)
              return result;
            v10[3] = *v8;
            *v8 = v132;
            v126 = v10 + 5;
          }
          else
          {
            *v10 = *v8;
            *v8 = v132;
          }
          v128 = a2 - 1;
          goto LABEL_176;
        }
        if (v130 > v129)
        {
          v169 = v10[3];
          v10[3] = *v8;
          *v8 = v169;
          v170 = v10[4];
          v10[4] = *v182;
          *v182 = v170;
          v171 = v10[5];
          v10[5] = *v9;
          *v9 = v171;
          if (v10[5] > v10[2])
          {
            v172 = *v10;
            *v10 = v10[3];
            v10[3] = v172;
            v131 = v10 + 1;
            v182 = v10 + 4;
LABEL_176:
            v180 = *v131;
            *v131 = *v182;
            *v182 = v180;
            v181 = *v126;
            *v126 = *v128;
            *v128 = v181;
            return result;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_239C4F854(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_239C4FA44(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v144 = (unint64_t)(v12 - 2) >> 1;
              v145 = v144;
              do
              {
                if (v144 >= v145)
                {
                  v147 = (2 * v145) | 1;
                  v148 = &v10[3 * v147];
                  if (2 * v145 + 2 < v12)
                  {
                    v146 = v10[3 * v147 + 2] > v148[5];
                    v148 += 3 * v146;
                    if (v146)
                      v147 = 2 * v145 + 2;
                  }
                  v149 = v10[3 * v145 + 2];
                  if (v148[2] <= v149)
                  {
                    v150 = &v10[3 * v145];
                    v151 = *(_QWORD *)v150;
                    do
                    {
                      v152 = v150;
                      v150 = v148;
                      *v152 = *v148;
                      v152[1] = v148[1];
                      v152[2] = v148[2];
                      if (v144 < v147)
                        break;
                      v153 = (2 * v147) | 1;
                      v148 = &v10[3 * v153];
                      v154 = 2 * v147 + 2;
                      if (v154 < v12)
                      {
                        v146 = v10[3 * v153 + 2] > v148[5];
                        v148 += 3 * v146;
                        if (v146)
                          v153 = v154;
                      }
                      v147 = v153;
                    }
                    while (v148[2] <= v149);
                    *(_QWORD *)v150 = v151;
                    v150[2] = v149;
                  }
                }
                v146 = v145-- <= 0;
              }
              while (!v146);
              v155 = v11 / 0xCuLL;
              do
              {
                result = 0;
                v156 = *v10;
                v157 = v10[1];
                v158 = v10[2];
                v159 = v10;
                do
                {
                  v160 = (char *)(result + 1);
                  v161 = &v159[3 * result + 3];
                  v162 = (2 * result) | 1;
                  v163 = 2 * result + 2;
                  if (v163 < v155)
                  {
                    v146 = v159[3 * (_QWORD)v160 + 2] > v161[5];
                    v161 += 3 * v146;
                    if (v146)
                      v162 = v163;
                  }
                  *v159 = *v161;
                  v159[1] = v161[1];
                  v159[2] = v161[2];
                  v159 = v161;
                  result = v162;
                }
                while (v162 <= (uint64_t)((unint64_t)(v155 - 2) >> 1));
                if (v161 == a2 - 3)
                {
                  *v161 = v156;
                  v161[1] = v157;
                  v161[2] = v158;
                }
                else
                {
                  *v161 = *(a2 - 3);
                  v161[1] = *(a2 - 2);
                  v161[2] = *(a2 - 1);
                  *(a2 - 3) = v156;
                  *(a2 - 2) = v157;
                  *(a2 - 1) = v158;
                  v164 = (char *)v161 - (char *)v10 + 12;
                  if (v164 >= 13)
                  {
                    v165 = (v164 / 0xCuLL - 2) >> 1;
                    v166 = v161[2];
                    if (v10[3 * v165 + 2] > v166)
                    {
                      v167 = *(_QWORD *)v161;
                      do
                      {
                        v168 = v161;
                        v161 = &v10[3 * v165];
                        *v168 = *v161;
                        v168[1] = v161[1];
                        v168[2] = v161[2];
                        if (!v165)
                          break;
                        v165 = (v165 - 1) >> 1;
                      }
                      while (v10[3 * v165 + 2] > v166);
                      *(_QWORD *)v161 = v167;
                      v161[2] = v166;
                    }
                  }
                }
                a2 -= 3;
                v146 = v155-- <= 2;
              }
              while (!v146);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *v9;
          if ((unint64_t)v11 >= 0x601)
          {
            v16 = v10 + 2;
            v17 = v10[2];
            v18 = &v10[3 * v13 + 2];
            v19 = *v18;
            if (*v18 <= v17)
            {
              if (v15 <= v19)
                goto LABEL_23;
              v29 = *v14;
              *v14 = *v8;
              *v8 = v29;
              v22 = v14 + 1;
              v30 = v14[1];
              v14[1] = *v182;
              *v182 = v30;
              v31 = *v18;
              *v18 = *v9;
              *v9 = v31;
              if (*v18 <= *v16)
              {
LABEL_23:
                v41 = &v10[3 * v13];
                v44 = *(v41 - 1);
                v42 = v41 - 1;
                v43 = v44;
                v45 = v42 - 2;
                v46 = v10 + 5;
                v47 = *v184;
                if (v44 <= v10[5])
                {
                  if (v47 <= v43)
                    goto LABEL_37;
                  v51 = *v45;
                  *v45 = *(a2 - 6);
                  *(a2 - 6) = v51;
                  v50 = v42 - 1;
                  v52 = *(v42 - 1);
                  *(v42 - 1) = *(a2 - 5);
                  *(a2 - 5) = v52;
                  v53 = *v42;
                  *v42 = *(a2 - 4);
                  *(a2 - 4) = v53;
                  if (*v42 <= *v46)
                  {
LABEL_37:
                    v64 = &v10[3 * v13];
                    v67 = v64[5];
                    v65 = v64 + 5;
                    v66 = v67;
                    v68 = v65 - 2;
                    v69 = v10 + 8;
                    v70 = *v183;
                    if (v67 <= v10[8])
                    {
                      if (v70 <= v66)
                        goto LABEL_47;
                      v74 = *v68;
                      *v68 = *(a2 - 9);
                      *(a2 - 9) = v74;
                      v73 = v65 - 1;
                      v75 = *(v65 - 1);
                      *(v65 - 1) = *(a2 - 8);
                      *(a2 - 8) = v75;
                      v76 = *v65;
                      *v65 = *(a2 - 7);
                      *(a2 - 7) = v76;
                      v66 = *v65;
                      if (*v65 <= *v69)
                      {
LABEL_47:
                        v82 = *v18;
                        v83 = *v42;
                        if (*v18 <= *v42)
                        {
                          v84 = *v14;
                          if (v66 <= v82)
                          {
LABEL_56:
                            v91 = v14[1];
                            v92 = *(_QWORD *)v10;
                            *v10 = v84;
                            v10[1] = v91;
                            *(_QWORD *)v14 = v92;
                            v58 = v10[2];
                            v10[2] = v82;
                            goto LABEL_57;
                          }
                          result = (unint64_t)(v14 + 1);
                          v86 = v14[1];
                          v87 = *(_QWORD *)v68;
                          *(_QWORD *)v14 = *(_QWORD *)v68;
                          *v68 = v84;
                          *(v65 - 1) = v86;
                          *v18 = v66;
                          *v65 = v82;
                          v84 = v87;
                          if (v66 <= v83)
                          {
                            v82 = v66;
                            goto LABEL_56;
                          }
                          v88 = *v45;
                          *v45 = v87;
                          v85 = v42 - 1;
                          *v14 = v88;
                          v65 = v18;
                        }
                        else
                        {
                          v84 = *v45;
                          if (v66 <= v82)
                          {
                            v89 = *(_QWORD *)v14;
                            v14[1] = *(v42 - 1);
                            result = (unint64_t)(v14 + 1);
                            *v14 = v84;
                            *(_QWORD *)v45 = v89;
                            *v42 = v82;
                            *v18 = v83;
                            if (v66 <= v83)
                            {
                              v82 = v83;
                              goto LABEL_56;
                            }
                            *v14 = *v68;
                            *v68 = v84;
                            v85 = v14 + 1;
                            result = (unint64_t)(v65 - 1);
                            v42 = v18;
                          }
                          else
                          {
                            *v45 = *v68;
                            *v68 = v84;
                            v85 = v42 - 1;
                            result = (unint64_t)(v65 - 1);
                          }
                        }
                        v90 = *v85;
                        *v85 = *(_DWORD *)result;
                        *(_DWORD *)result = v90;
                        *v42 = v66;
                        *v65 = v83;
                        v84 = *v14;
                        v82 = *v18;
                        goto LABEL_56;
                      }
                      v77 = v10[6];
                      v10[6] = *v68;
                      *v68 = v77;
                      v72 = v10 + 7;
                      v78 = v65;
                    }
                    else
                    {
                      v71 = v10[6];
                      if (v70 <= v66)
                      {
                        v10[6] = *v68;
                        *v68 = v71;
                        v72 = v65 - 1;
                        v79 = v10[7];
                        v10[7] = *(v65 - 1);
                        *(v65 - 1) = v79;
                        v66 = v10[8];
                        v10[8] = *v65;
                        *v65 = v66;
                        if (*v183 <= v66)
                          goto LABEL_47;
                        v80 = *v68;
                        *v68 = *(a2 - 9);
                        *(a2 - 9) = v80;
                        v73 = a2 - 8;
                        v69 = v65;
                      }
                      else
                      {
                        v72 = v10 + 7;
                        v10[6] = *(a2 - 9);
                        *(a2 - 9) = v71;
                        v73 = a2 - 8;
                      }
                      v78 = a2 - 7;
                    }
                    result = *v72;
                    *v72 = *v73;
                    *v73 = result;
                    v81 = *v69;
                    *v69 = *v78;
                    *v78 = v81;
                    v66 = *v65;
                    goto LABEL_47;
                  }
                  v54 = v10[3];
                  v10[3] = *v45;
                  *v45 = v54;
                  v49 = v10 + 4;
                  v55 = v42;
                }
                else
                {
                  v48 = v10[3];
                  if (v47 <= v43)
                  {
                    v10[3] = *v45;
                    *v45 = v48;
                    v49 = v42 - 1;
                    v59 = v10[4];
                    v10[4] = *(v42 - 1);
                    *(v42 - 1) = v59;
                    v60 = v10[5];
                    v10[5] = *v42;
                    *v42 = v60;
                    if (*v184 <= v60)
                      goto LABEL_37;
                    v61 = *v45;
                    *v45 = *(a2 - 6);
                    *(a2 - 6) = v61;
                    v50 = a2 - 5;
                    v46 = v42;
                  }
                  else
                  {
                    v49 = v10 + 4;
                    v10[3] = *(a2 - 6);
                    *(a2 - 6) = v48;
                    v50 = a2 - 5;
                  }
                  v55 = a2 - 4;
                }
                v62 = *v49;
                result = *v50;
                *v49 = result;
                *v50 = v62;
                v63 = *v46;
                *v46 = *v55;
                *v55 = v63;
                goto LABEL_37;
              }
              v32 = *v10;
              *v10 = *v14;
              v20 = v10 + 1;
              *v14 = v32;
              v33 = &v10[3 * v13 + 2];
            }
            else
            {
              v20 = v10 + 1;
              v21 = *v10;
              if (v15 <= v19)
              {
                v38 = v10[1];
                *(_QWORD *)v10 = *(_QWORD *)v14;
                v14[1] = v38;
                v20 = v14 + 1;
                *v14 = v21;
                v10[2] = v19;
                *v18 = v17;
                if (*v9 <= v17)
                  goto LABEL_23;
                *v14 = *v8;
                *v8 = v21;
                v22 = a2 - 2;
                v16 = &v10[3 * v13 + 2];
              }
              else
              {
                *v10 = *v8;
                *v8 = v21;
                v22 = a2 - 2;
              }
              v33 = a2 - 1;
            }
            v39 = *v20;
            *v20 = *v22;
            *v22 = v39;
            v40 = *v16;
            *v16 = *v33;
            *v33 = v40;
            goto LABEL_23;
          }
          v18 = v10 + 2;
          v23 = v10[2];
          v24 = &v10[3 * v13 + 2];
          v25 = *v24;
          if (v23 > *v24)
          {
            v26 = *v14;
            if (v15 <= v23)
            {
              v56 = v14[1];
              *(_QWORD *)v14 = *(_QWORD *)v10;
              v10[1] = v56;
              v27 = v10 + 1;
              *v10 = v26;
              *v24 = v23;
              v10[2] = v25;
              if (*v9 <= v25)
                goto LABEL_58;
              *v10 = *v8;
              *v8 = v26;
              v28 = a2 - 2;
              v24 = v10 + 2;
            }
            else
            {
              *v14 = *v8;
              *v8 = v26;
              v27 = v14 + 1;
              v28 = a2 - 2;
            }
            v18 = a2 - 1;
LABEL_32:
            v57 = *v27;
            *v27 = *v28;
            *v28 = v57;
            v58 = *v24;
            *v24 = *v18;
LABEL_57:
            *v18 = v58;
            goto LABEL_58;
          }
          if (v15 > v23)
          {
            v34 = *v10;
            *v10 = *v8;
            *v8 = v34;
            v28 = v10 + 1;
            v35 = v10[1];
            v10[1] = *v182;
            *v182 = v35;
            v36 = v10[2];
            v10[2] = *v9;
            *v9 = v36;
            if (v10[2] > *v24)
            {
              v37 = *v14;
              *v14 = *v10;
              v27 = v14 + 1;
              *v10 = v37;
              goto LABEL_32;
            }
          }
LABEL_58:
          --a3;
          if ((a4 & 1) == 0)
          {
            v93 = *v10;
            v94 = v10[2];
            if (*(v10 - 1) > v94)
              goto LABEL_61;
            if (v94 <= *v9)
            {
              v112 = v10 + 3;
              do
              {
                v10 = v112;
                if (v112 >= a2)
                  break;
                v113 = v112[2];
                v112 += 3;
              }
              while (v94 <= v113);
            }
            else
            {
              v110 = v10;
              do
              {
                v10 = v110 + 3;
                v111 = v110[5];
                v110 += 3;
              }
              while (v94 <= v111);
            }
            v114 = a2;
            if (v10 < a2)
            {
              v115 = a2;
              do
              {
                v114 = v115 - 3;
                v116 = *(v115 - 1);
                v115 -= 3;
              }
              while (v94 > v116);
            }
            v117 = v7[1];
            while (v10 < v114)
            {
              v118 = *v10;
              *v10 = *v114;
              *v114 = v118;
              v119 = v10[1];
              v10[1] = v114[1];
              v114[1] = v119;
              v120 = v10[2];
              v10[2] = v114[2];
              v114[2] = v120;
              do
              {
                v121 = v10[5];
                v10 += 3;
              }
              while (v94 <= v121);
              do
              {
                v122 = *(v114 - 1);
                v114 -= 3;
              }
              while (v94 > v122);
            }
            if (v10 - 3 != v7)
            {
              *v7 = *(v10 - 3);
              v7[1] = *(v10 - 2);
              v7[2] = *(v10 - 1);
            }
            a4 = 0;
            *(v10 - 3) = v93;
            *(v10 - 2) = v117;
            *(v10 - 1) = v94;
            continue;
          }
          v93 = *v10;
          v94 = v10[2];
LABEL_61:
          v95 = v10[1];
          v96 = v10;
          do
          {
            v97 = v96;
            v96 += 3;
          }
          while (v97[5] > v94);
          v98 = a2;
          if (v97 == v10)
          {
            v101 = a2;
            while (v96 < v101)
            {
              v99 = v101 - 3;
              v102 = *(v101 - 1);
              v101 -= 3;
              if (v102 > v94)
                goto LABEL_71;
            }
            v99 = v101;
          }
          else
          {
            do
            {
              v99 = v98 - 3;
              v100 = *(v98 - 1);
              v98 -= 3;
            }
            while (v100 <= v94);
          }
LABEL_71:
          v10 = v96;
          if (v96 < v99)
          {
            v103 = v99;
            do
            {
              v104 = *v10;
              *v10 = *v103;
              *v103 = v104;
              v105 = v10[1];
              v10[1] = v103[1];
              v103[1] = v105;
              v106 = v10[2];
              v10[2] = v103[2];
              v103[2] = v106;
              do
              {
                v107 = v10[5];
                v10 += 3;
              }
              while (v107 > v94);
              do
              {
                v108 = *(v103 - 1);
                v103 -= 3;
              }
              while (v108 <= v94);
            }
            while (v10 < v103);
          }
          if (v10 - 3 != v7)
          {
            *v7 = *(v10 - 3);
            v7[1] = *(v10 - 2);
            v7[2] = *(v10 - 1);
          }
          *(v10 - 3) = v93;
          *(v10 - 2) = v95;
          *(v10 - 1) = v94;
          if (v96 < v99)
            goto LABEL_82;
          v109 = sub_239C4FB84(v7, v10 - 3);
          result = sub_239C4FB84(v10, a2);
          if (!(_DWORD)result)
          {
            if (v109)
              continue;
LABEL_82:
            result = sub_239C4EA78(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v109)
            return result;
          goto LABEL_2;
        }
        v133 = v10 + 3;
        v135 = v10 == a2 || v133 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v135)
          {
            v136 = 0;
            v137 = v10;
            do
            {
              v139 = v137[5];
              v140 = v137[2];
              v137 = v133;
              if (v139 > v140)
              {
                v141 = *(_QWORD *)v133;
                v142 = v136;
                do
                {
                  v143 = (char *)v10 + v142;
                  *(_QWORD *)(v143 + 12) = *(_QWORD *)((char *)v10 + v142);
                  *((_DWORD *)v143 + 5) = *(int *)((char *)v10 + v142 + 8);
                  if (!v142)
                  {
                    v138 = (uint64_t)v10;
                    goto LABEL_124;
                  }
                  v142 -= 12;
                }
                while (v139 > *((_DWORD *)v143 - 1));
                v138 = (uint64_t)v10 + v142 + 12;
LABEL_124:
                *(_QWORD *)v138 = v141;
                *(_DWORD *)(v138 + 8) = v139;
              }
              v133 = v137 + 3;
              v136 += 12;
            }
            while (v137 + 3 != a2);
          }
        }
        else if (!v135)
        {
          v173 = v10 + 2;
          do
          {
            v174 = v7[5];
            v175 = v7[2];
            v7 = v133;
            if (v174 > v175)
            {
              v176 = *(_QWORD *)v133;
              v177 = v173;
              do
              {
                *(_QWORD *)(v177 + 1) = *((_QWORD *)v177 - 1);
                v177[3] = *v177;
                v178 = *(v177 - 3);
                v177 -= 3;
              }
              while (v174 > v178);
              *(_QWORD *)(v177 + 1) = v176;
              v177[3] = v174;
            }
            v133 = v7 + 3;
            v173 += 3;
          }
          while (v7 + 3 != a2);
        }
        return result;
    }
  }
}

int *sub_239C4F854(int *result, int *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned int v4;
  _DWORD *v5;
  unsigned int *v6;
  unsigned int v7;
  int *v8;
  int v9;
  int *v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v4 = a2[2];
  v5 = result + 2;
  v6 = a3 + 2;
  v7 = a3[2];
  if (v4 <= result[2])
  {
    if (v7 > v4)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v10 = a2 + 1;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v7 = a2[2];
      a2[2] = a3[2];
      a3[2] = v7;
      if (a2[2] > *v5)
      {
        v14 = *result;
        *result = *a2;
        v8 = result + 1;
        *a2 = v14;
        v11 = result + 2;
        v15 = a2 + 2;
LABEL_10:
        v19 = *v8;
        *v8 = *v10;
        *v10 = v19;
        v20 = *v11;
        *v11 = *v15;
        *v15 = v20;
        v7 = *v6;
      }
    }
  }
  else
  {
    v8 = result + 1;
    v9 = *result;
    if (v7 > v4)
    {
      *result = *a3;
      *a3 = v9;
      v10 = a3 + 1;
      v11 = result + 2;
LABEL_9:
      v15 = a3 + 2;
      goto LABEL_10;
    }
    *result = *a2;
    *a2 = v9;
    v8 = a2 + 1;
    v16 = result[1];
    result[1] = a2[1];
    a2[1] = v16;
    v17 = result[2];
    result[2] = a2[2];
    a2[2] = v17;
    v7 = *v6;
    if (*v6 > v17)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v10 = a3 + 1;
      v11 = a2 + 2;
      goto LABEL_9;
    }
  }
  if (a4[2] > v7)
  {
    v21 = *a3;
    *a3 = *a4;
    *a4 = v21;
    v22 = a3[1];
    a3[1] = a4[1];
    a4[1] = v22;
    v23 = a3[2];
    a3[2] = a4[2];
    a4[2] = v23;
    if (a3[2] > a2[2])
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      if (a2[2] > *v5)
      {
        v27 = *result;
        *result = *a2;
        *a2 = v27;
        v28 = result[1];
        result[1] = a2[1];
        a2[1] = v28;
        v29 = result[2];
        result[2] = a2[2];
        a2[2] = v29;
      }
    }
  }
  return result;
}

int *sub_239C4FA44(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  int *result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  result = sub_239C4F854(a1, a2, a3, a4);
  if (a5[2] > a4[2])
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    if (a4[2] > a3[2])
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      v16 = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      if (a3[2] > a2[2])
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        if (a2[2] > a1[2])
        {
          v20 = *a1;
          *a1 = *a2;
          *a2 = v20;
          v21 = a1[1];
          a1[1] = a2[1];
          a2[1] = v21;
          v22 = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

BOOL sub_239C4FB84(int *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  int v12;
  int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  int *v18;
  int v19;
  int *v20;
  unsigned int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int *v34;
  uint64_t v35;
  int v36;
  int *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      if (*(a2 - 1) > a1[2])
      {
        v3 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v3;
        v4 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v4;
        v5 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v5;
      }
      return 1;
    case 3uLL:
      v6 = a1 + 2;
      v7 = a1[2];
      v8 = a1 + 5;
      v9 = a1[5];
      v10 = *(a2 - 1);
      if (v9 > v7)
      {
        v11 = a1 + 1;
        v12 = *a1;
        if (v10 <= v9)
        {
          v29 = *(_QWORD *)(a1 + 3);
          a1[4] = a1[1];
          v11 = a1 + 4;
          *(_QWORD *)a1 = v29;
          a1[2] = v9;
          a1[3] = v12;
          a1[5] = v7;
          if (*(a2 - 1) <= v7)
            return 1;
          a1[3] = *(a2 - 3);
          *(a2 - 3) = v12;
          v13 = a2 - 2;
          v6 = a1 + 5;
        }
        else
        {
          *a1 = *(a2 - 3);
          *(a2 - 3) = v12;
          v13 = a2 - 2;
        }
        v8 = a2 - 1;
        goto LABEL_21;
      }
      if (v10 > v9)
      {
        v22 = a1[3];
        a1[3] = *(a2 - 3);
        *(a2 - 3) = v22;
        v13 = a1 + 4;
        v23 = a1[4];
        a1[4] = *(a2 - 2);
        *(a2 - 2) = v23;
        v24 = a1[5];
        a1[5] = *(a2 - 1);
        *(a2 - 1) = v24;
        if (a1[5] > a1[2])
        {
          v25 = *a1;
          *a1 = a1[3];
          a1[3] = v25;
          v11 = a1 + 1;
LABEL_21:
          v30 = *v11;
          *v11 = *v13;
          *v13 = v30;
          v31 = *v6;
          *v6 = *v8;
          *v8 = v31;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_239C4F854(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_239C4FA44(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v14 = a1[2];
      v15 = (unsigned int *)(a1 + 5);
      v16 = a1[5];
      v17 = a1[8];
      if (v16 > v14)
      {
        v18 = a1 + 1;
        v19 = *a1;
        if (v17 <= v16)
        {
          v32 = *(_QWORD *)(a1 + 3);
          a1[4] = a1[1];
          v18 = a1 + 4;
          *(_QWORD *)a1 = v32;
          a1[2] = v16;
          a1[3] = v19;
          a1[5] = v14;
          if (v17 <= v14)
            goto LABEL_26;
          a1[3] = a1[6];
          a1[6] = v19;
          v20 = a1 + 7;
          v21 = (unsigned int *)(a1 + 5);
        }
        else
        {
          *a1 = a1[6];
          a1[6] = v19;
          v20 = a1 + 7;
          v21 = (unsigned int *)(a1 + 2);
        }
        v15 = (unsigned int *)(a1 + 8);
        goto LABEL_25;
      }
      if (v17 > v16)
      {
        v26 = *((_QWORD *)a1 + 3);
        v27 = *(_QWORD *)(a1 + 3);
        *(_QWORD *)(a1 + 3) = v26;
        *((_QWORD *)a1 + 3) = v27;
        a1[5] = v17;
        a1[8] = v16;
        if (v17 > v14)
        {
          v20 = a1 + 4;
          v28 = *a1;
          *a1 = v26;
          a1[3] = v28;
          v18 = a1 + 1;
          v21 = (unsigned int *)(a1 + 2);
LABEL_25:
          v33 = *v18;
          *v18 = *v20;
          *v20 = v33;
          *v21 = v17;
          *v15 = v14;
        }
      }
LABEL_26:
      v34 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      v37 = a1 + 6;
      while (1)
      {
        v39 = v34[2];
        if (v39 > v37[2])
        {
          v40 = *(_QWORD *)v34;
          v41 = v35;
          do
          {
            v42 = (char *)a1 + v41;
            *(_QWORD *)(v42 + 36) = *(_QWORD *)((char *)a1 + v41 + 24);
            *((_DWORD *)v42 + 11) = *(int *)((char *)a1 + v41 + 32);
            if (v41 == -24)
            {
              v38 = (uint64_t)a1;
              goto LABEL_29;
            }
            v41 -= 12;
          }
          while (v39 > *((_DWORD *)v42 + 5));
          v38 = (uint64_t)a1 + v41 + 36;
LABEL_29:
          *(_QWORD *)v38 = v40;
          *(_DWORD *)(v38 + 8) = v39;
          if (++v36 == 8)
            return v34 + 3 == a2;
        }
        v37 = v34;
        v35 += 12;
        v34 += 3;
        if (v34 == a2)
          return 1;
      }
  }
}

void sub_239C4FEE8(uint64_t a1)
{
  sub_2397A19BC(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C4FF0C(uint64_t a1)
{
  void (*v2)(uint64_t);
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  pthread_rwlock_t *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(void (**)(uint64_t))(a1 + 264);
  while (1)
  {
    j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(a1 + 288));
    v3 = *(unint64_t **)(a1 + 280);
    v4 = *v3;
    v5 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8) - **(_QWORD **)(a1 + 272)) >> 3);
    if (*v3 >= v5)
      break;
    v6 = *(pthread_rwlock_t **)(a1 + 288);
    if (v5 >= *(_QWORD *)(a1 + 296) + v4)
      v7 = *(_QWORD *)(a1 + 296) + v4;
    else
      v7 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8) - **(_QWORD **)(a1 + 272)) >> 3);
    *v3 = v7;
    j__pthread_rwlock_unlock(v6);
    v8 = v7 > v4;
    v9 = v7 - v4;
    if (v8)
    {
      v10 = 184 * v4;
      do
      {
        v2(**(_QWORD **)(a1 + 272) + v10);
        v10 += 184;
        --v9;
      }
      while (v9);
    }
  }
  j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 288));
  return 0;
}

uint64_t sub_239C4FFC8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v2)
  {
LABEL_14:
    *(_BYTE *)result = 0;
    *(_BYTE *)(result + 48) = 0;
    return result;
  }
  v3 = *(_DWORD *)(a2 + 24);
  v4 = *(_DWORD *)(a2 + 28);
  v5 = 2 * v4;
  v6 = v4 >= 0xF && v5 >= v3;
  if (v6 && (double)v4 / (double)(0xAAAAAAAAAAAAAAABLL * (v2 >> 2)) >= 0.1)
  {
    v8 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)result = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(result + 16) = v8;
    v9 = *(_OWORD *)(a2 + 112);
  }
  else
  {
    v7 = v5 < v3 && v3 >= 0xF;
    if (!v7 || (double)v3 / (double)(0xAAAAAAAAAAAAAAABLL * (v2 >> 2)) < 0.1)
      goto LABEL_14;
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)result = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(result + 16) = v10;
    v9 = *(_OWORD *)(a2 + 64);
  }
  *(_OWORD *)(result + 32) = v9;
  *(_BYTE *)(result + 48) = 1;
  return result;
}

uint64_t sub_239C50084(uint64_t a1, uint64_t a2, double a3, double a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t v8;
  float64x2_t v10;
  double v17;
  double v18;
  double cosval;
  double v20;
  __double2 v21;
  float64_t v22;
  float64_t v23;
  float64_t v24;
  float64_t v25;
  float64_t v26;
  float64_t v27;
  float64_t v28;
  float64_t v29;
  float64_t v30;
  float64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v42;
  float64_t v43;

  *(_OWORD *)a1 = xmmword_239F13A80;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_239F13A90;
  *(_OWORD *)(a1 + 32) = xmmword_239F13AA0;
  *(_OWORD *)(a1 + 48) = unk_239F13AB0;
  *(_OWORD *)(a1 + 96) = xmmword_239F13AE0;
  *(_OWORD *)(a1 + 112) = unk_239F13AF0;
  *(_OWORD *)(a1 + 64) = xmmword_239F13AC0;
  *(_OWORD *)(a1 + 80) = unk_239F13AD0;
  v8.f64[0] = *(float64_t *)(a2 + 16);
  _Q27 = *(float64x2_t *)a2;
  v10 = (float64x2_t)vextq_s8((int8x16_t)_Q27, (int8x16_t)_Q27, 8uLL);
  _Q0 = vmulq_f64(_Q27, _Q27);
  _D1 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D0, D1, V27.D[1] }
  v17 = _Q0.f64[0] + v8.f64[0] * v8.f64[0];
  if (v17 >= 0.0000002635)
  {
    v20 = sqrt(v17);
    v42 = *(float64x2_t *)a2;
    v43 = *(double *)(a2 + 16);
    v41 = v10;
    v21 = __sincos_stret(v20);
    cosval = v21.__cosval;
    v10 = v41;
    _Q27 = v42;
    v8.f64[0] = v43;
    v18 = v21.__sinval / v20;
    a5.f64[0] = 1.0 / v17 * (1.0 - v21.__cosval);
    _Q0.f64[0] = 1.0 / v17 * (1.0 - v21.__sinval / v20);
  }
  else
  {
    a5.f64[0] = 0.5 - v17 * (v17 / -720.0 + 0.0416666667);
    _Q0.f64[0] = 0.166666667 - v17 * (v17 / -5040.0 + 0.00833333333);
    v18 = 1.0 - v17 * _Q0.f64[0];
    cosval = 1.0 - v17 * a5.f64[0];
  }
  v22 = v10.f64[0] * (_Q27.f64[0] * a5.f64[0]);
  v23 = v8.f64[0] * (_Q27.f64[0] * a5.f64[0]);
  v24 = v8.f64[0] * (v10.f64[0] * a5.f64[0]);
  v25 = _Q27.f64[0] * v18;
  v5.f64[0] = v10.f64[0] * v18;
  v26 = v8.f64[0] * v18;
  v27 = v22 - v26;
  v28 = v23 + v5.f64[0];
  v29 = v22 + v26;
  v30 = v24 - v25;
  v31 = v23 - v5.f64[0];
  v5.f64[0] = *(float64_t *)(a2 + 40);
  v32.f64[0] = v10.f64[0];
  v32.f64[1] = v8.f64[0];
  v33 = *(float64x2_t *)(a2 + 24);
  v34 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v5, 8uLL);
  v35 = vsubq_f64(vmulq_laneq_f64(_Q27, v33, 1), vmulq_f64(v10, v33));
  v36 = vaddq_f64(v5, vmulq_f64(a5, v35));
  v5.f64[1] = *(float64_t *)(a2 + 24);
  v8.f64[1] = _Q27.f64[0];
  v37 = v24 + v25;
  v38 = vsubq_f64(vmulq_f64(v32, v5), vmulq_f64(v8, v34));
  v39 = (float64x2_t)vextq_s8((int8x16_t)v38, (int8x16_t)v35, 8uLL);
  v35.f64[1] = v38.f64[0];
  *(double *)a1 = cosval + _Q27.f64[0] * a5.f64[0] * _Q27.f64[0];
  *(float64_t *)(a1 + 8) = v29;
  *(float64_t *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = 0;
  *(float64_t *)(a1 + 32) = v27;
  *(double *)(a1 + 40) = cosval + v10.f64[0] * a5.f64[0] * v10.f64[0];
  *(float64_t *)(a1 + 48) = v37;
  *(_QWORD *)(a1 + 56) = 0;
  *(float64_t *)(a1 + 64) = v28;
  *(float64_t *)(a1 + 72) = v30;
  *(double *)(a1 + 80) = cosval + v8.f64[0] * a5.f64[0] * v8.f64[0];
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = *(_OWORD *)&vaddq_f64(v36, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q27, v38, 1), vmulq_f64(v10, v38))));
  *(float64x2_t *)(a1 + 96) = vaddq_f64(vaddq_f64(v33, vmulq_n_f64(v38, a5.f64[0])), vmulq_n_f64(vsubq_f64(vmulq_f64(v32, v35), vmulq_f64(v8, v39)), _Q0.f64[0]));
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return a1;
}

void sub_239C5029C(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      sub_2394189F8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = v4 - v2;
    v8 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    v9 = v8;
    if (v4 == v2)
      goto LABEL_11;
    if ((unint64_t)(v7 - 8) >= 0x58)
    {
      v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        v10 = v7 >> 3;
        v11 = ((unint64_t)(v7 - 8) >> 3) + 1;
        v12 = &v6[8 * v10 - 16];
        v13 = (__int128 *)(v4 - 16);
        v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v15 = *v13;
          *((_OWORD *)v12 - 1) = *(v13 - 1);
          *(_OWORD *)v12 = v15;
          v12 -= 32;
          v13 -= 2;
          v14 -= 4;
        }
        while (v14);
        v9 = &v8[-8 * (v11 & 0x3FFFFFFFFFFFFFFCLL)];
        v4 -= 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v16 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *((_QWORD *)v9 - 1) = v16;
      v9 -= 8;
    }
    while (v4 != v2);
LABEL_11:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v6[v5];
    if (v2)
      operator delete(v2);
  }
}

long double sub_239C503BC(float64x2_t *a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v3;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  double v10;
  float64x2_t v11;
  int8x16_t v12;
  double v13;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v19;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v31;
  int64x2_t v32;
  double v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  double v44;
  int8x16_t v45;
  float64x2_t v46;
  unint64_t v47;
  float64x2_t v48;
  double v49;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  int64x2_t v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  float64x2_t v78;
  double v80;
  double v81;
  double v84;
  uint64_t v89;
  float64_t v90;
  float64_t v91;
  float64x2_t v92;
  double v93;
  float64_t v94;
  int64x2_t v95;
  _BYTE v96[32];
  float64x2_t v97;
  double v98;

  v7.f64[0] = *(float64_t *)(a2 + 16);
  v8 = *(float64x2_t *)a2;
  *(_QWORD *)&v9.f64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  v10 = *(double *)(a2 + 48);
  v11 = *(float64x2_t *)(a2 + 32);
  v12.i64[0] = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
  v13 = *(double *)(a2 + 80);
  _Q29 = *(float64x2_t *)(a2 + 64);
  *(_QWORD *)&v15 = vextq_s8((int8x16_t)_Q29, (int8x16_t)_Q29, 8uLL).u64[0];
  *(float64_t *)v96 = v7.f64[0];
  v95 = (int64x2_t)v8;
  *(double *)&v96[24] = v10;
  *(float64x2_t *)&v96[8] = v11;
  v98 = v13;
  v97 = _Q29;
  v16 = (float64x2_t)vzip1q_s64((int64x2_t)v8, (int64x2_t)v11);
  v17 = (float64x2_t)vzip2q_s64((int64x2_t)v8, (int64x2_t)v11);
  _Q3.f64[0] = v7.f64[0];
  _Q3.f64[1] = v10;
  v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v8.f64[0]), v17, v8, 1), _Q3, v7.f64[0]);
  _Q4 = (int64x2_t)vmulq_f64(_Q29, v8);
  _D5 = v8.f64[1];
  __asm { FMLA            D4, D5, V29.D[1] }
  *(double *)_Q4.i64 = *(double *)_Q4.i64 + v13 * v7.f64[0];
  v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, v11.f64[0]), v17, v11, 1), _Q3, v10);
  _Q6 = (int64x2_t)vmulq_f64(_Q29, v11);
  _D7 = v11.f64[1];
  __asm { FMLA            D6, D7, V29.D[1] }
  *(double *)_Q6.i64 = *(double *)_Q6.i64 + v13 * v10;
  v29 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, _Q29.f64[0]), v17, _Q29, 1), _Q3, v13);
  _Q2 = vmulq_f64(_Q29, _Q29);
  _Q3.f64[0] = _Q29.f64[1];
  __asm { FMLA            D2, D3, V29.D[1] }
  _Q2.f64[0] = _Q2.f64[0] + v13 * v13;
  v31 = (float64x2_t)xmmword_239EC6820;
  v32 = (int64x2_t)vaddq_f64(v26, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V5.2D, #-1.0 }
  v92 = _Q5;
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q2, _Q5));
  _Q2.f64[1] = NAN;
  v34 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v19, (float64x2_t)xmmword_239EC6820)), _Q2), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)_Q6, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q4, v32)), vabsq_f64(v29))));
  v35 = -v10;
  if (v34 > 0.0001)
    goto LABEL_16;
  v36.f64[0] = v8.f64[0];
  v36.f64[1] = v9.f64[0];
  v37.f64[0] = v15;
  v37.f64[1] = _Q29.f64[0];
  *(_QWORD *)&v38.f64[0] = v12.i64[0];
  v38.f64[1] = v11.f64[0];
  v39 = vmulq_f64(v36, vmlaq_n_f64(vmulq_n_f64(v37, v35), v38, v13));
  v40 = vsubq_f64(v39, (float64x2_t)vdupq_laneq_s64((int64x2_t)v39, 1));
  if (fabs(v7.f64[0] * (v15 * v11.f64[0] - *(double *)v12.i64 * _Q29.f64[0]) + v40.f64[0] + -1.0) > 0.0001)
  {
LABEL_16:
    if (v34 > 0.1)
      goto LABEL_13;
    v8.f64[1] = v9.f64[0];
    v41.f64[0] = v15;
    v41.f64[1] = _Q29.f64[0];
    v42 = vmulq_n_f64(v41, v35);
    *(_QWORD *)&v41.f64[0] = v12.i64[0];
    v41.f64[1] = v11.f64[0];
    v43 = vmulq_f64(v8, vmlaq_n_f64(v42, v41, v13));
    if (fabs(v7.f64[0] * (v15 * v11.f64[0] - *(double *)v12.i64 * _Q29.f64[0])+ vsubq_f64(v43, (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1)).f64[0]+ -1.0) > 0.1)goto LABEL_13;
    sub_239516070((float64x2_t *)&v95);
    v13 = v98;
    _Q29 = v97;
    v12 = *(int8x16_t *)&v96[16];
    v7 = *(float64x2_t *)v96;
    v8 = (float64x2_t)v95;
    *(_QWORD *)&v15 = vextq_s8((int8x16_t)_Q29, (int8x16_t)_Q29, 8uLL).u64[0];
    *(_QWORD *)&v10 = vextq_s8(v12, v12, 8uLL).u64[0];
    *(_QWORD *)&v11.f64[0] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    *(_QWORD *)&v9.f64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    v31 = (float64x2_t)xmmword_239EC6820;
  }
  v44 = *(double *)(a2 + 112);
  v45 = *(int8x16_t *)(a2 + 96);
  v46 = *(float64x2_t *)a3;
  v47 = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
  v3.i64[0] = *(_QWORD *)(a3 + 48);
  v48 = *(float64x2_t *)(a3 + 32);
  *(_QWORD *)&v49 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  v40.f64[0] = *(float64_t *)(a3 + 80);
  _Q0 = *(float64x2_t *)(a3 + 64);
  *(_QWORD *)&_D1 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  *(_QWORD *)v96 = *(_QWORD *)(a3 + 16);
  _Q6.i64[0] = *(_QWORD *)v96;
  v95 = (int64x2_t)v46;
  *(_QWORD *)&v96[24] = v3.i64[0];
  *(float64x2_t *)&v96[8] = v48;
  v98 = v40.f64[0];
  v97 = _Q0;
  v52 = (float64x2_t)vzip1q_s64((int64x2_t)v46, (int64x2_t)v48);
  v53 = (float64x2_t)vzip2q_s64((int64x2_t)v46, (int64x2_t)v48);
  v54 = (float64x2_t)vzip1q_s64(_Q6, v3);
  _Q21 = (int64x2_t)vmulq_f64(_Q0, v46);
  _D22 = v46.f64[1];
  __asm { FMLA            D21, D22, V0.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + v40.f64[0] * *(double *)v96;
  _Q23 = (int8x16_t)vmulq_f64(_Q0, v48);
  _D24 = v48.f64[1];
  __asm { FMLA            D23, D24, V0.D[1] }
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + v40.f64[0] * *(double *)v3.i64;
  _Q25 = vmulq_f64(_Q0, _Q0);
  _D26 = _Q0.f64[1];
  __asm { FMLA            D25, D26, V0.D[1] }
  _Q25.f64[0] = _Q25.f64[0] + v40.f64[0] * v40.f64[0];
  v61 = (int64x2_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v48.f64[0]), v53, v48, 1), v54, *(double *)v3.i64), (float64x2_t)xmmword_239EC6830);
  *(_QWORD *)&v62.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q25, v92));
  v62.f64[1] = NAN;
  v63 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v46.f64[0]), v53, v46, 1), v54, *(double *)v96), v31)), v62), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v61, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v61)), vabsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, _Q0.f64[0]), v53, _Q0, 1), v54, v40.f64[0])))));
  *(double *)v3.i64 = -*(double *)v3.i64;
  if (v63 > 0.0001
    || (v64.f64[0] = v46.f64[0],
        *(_QWORD *)&v64.f64[1] = v47,
        v65.f64[0] = _D1,
        v65.f64[1] = _Q0.f64[0],
        v66.f64[0] = v49,
        v66.f64[1] = v48.f64[0],
        v67 = vmulq_f64(v64, vmlaq_n_f64(vmulq_n_f64(v65, *(double *)v3.i64), v66, v40.f64[0])),
        fabs(*(double *)v96 * (_D1 * v48.f64[0] - v49 * _Q0.f64[0])+ vsubq_f64(v67, (float64x2_t)vdupq_laneq_s64((int64x2_t)v67, 1)).f64[0]+ -1.0) > 0.0001))
  {
    v89 = v12.i64[0];
    v90 = v8.f64[0];
    v91 = _Q29.f64[0];
    v93 = v13;
    v94 = v7.f64[0];
    if (v63 <= 0.1)
    {
      *(_QWORD *)&v46.f64[1] = v47;
      v71.f64[0] = _D1;
      v71.f64[1] = _Q0.f64[0];
      v72.f64[0] = v49;
      v72.f64[1] = v48.f64[0];
      v73 = vmulq_f64(v46, vmlaq_n_f64(vmulq_n_f64(v71, *(double *)v3.i64), v72, v40.f64[0]));
      if (fabs(*(double *)v96 * (_D1 * v48.f64[0] - v49 * _Q0.f64[0])+ vsubq_f64(v73, (float64x2_t)vdupq_laneq_s64((int64x2_t)v73, 1)).f64[0]+ -1.0) <= 0.1)
      {
        sub_239516070((float64x2_t *)&v95);
        v54.f64[0] = *(float64_t *)v96;
        *(_QWORD *)&v40.f64[1] = v95.i64[1];
        v70 = *(_QWORD *)&v96[24];
        _Q0.f64[1] = v97.f64[1];
        v52 = (float64x2_t)vzip1q_s64(v95, *(int64x2_t *)&v96[8]);
        _D1 = v97.f64[1];
        v69 = *(_QWORD *)&v96[16];
        *(_QWORD *)&v53.f64[0] = v95.i64[1];
        v40.f64[0] = v98;
        v68 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
        v13 = v93;
        v7.f64[0] = v94;
        v8.f64[0] = v90;
        _Q29.f64[0] = v91;
        v12.i64[0] = v89;
        goto LABEL_12;
      }
    }
LABEL_13:
    sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v68 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
  v69 = vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
  v70 = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
LABEL_12:
  v74 = (float64x2_t)vextq_s8(v45, v45, 8uLL);
  v8.f64[1] = v11.f64[0];
  *(_QWORD *)&v9.f64[1] = v12.i64[0];
  v7.f64[1] = v10;
  v75 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v8, *(double *)v45.i64), v9, v74.f64[0]), v7, v44);
  v74.f64[0] = _Q29.f64[0] * *(double *)v45.i64 + v15 * v74.f64[0] + v13 * v44;
  v76 = *(double *)(a3 + 112);
  _Q20 = *(float64x2_t *)(a3 + 96);
  *(_QWORD *)&v54.f64[1] = v70;
  *(_QWORD *)&v52.f64[1] = v68;
  *(_QWORD *)&v53.f64[1] = v69;
  __asm { FMLA            D0, D1, V20.D[1] }
  _Q0.f64[0] = _Q0.f64[0] + v40.f64[0] * v76;
  v78 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, _Q20.f64[0]), v53, _Q20, 1), v54, v76));
  v40.f64[0] = a1[1].f64[0];
  _Q4 = vsubq_f64(vnegq_f64(v75), *a1);
  *(_QWORD *)&v80 = *(_OWORD *)&vsubq_f64(vnegq_f64(v74), v40);
  *(_QWORD *)&v81 = *(_OWORD *)&vsubq_f64(vnegq_f64(_Q0), v40);
  _D3 = vsubq_f64(v78, *a1).f64[1];
  __asm { FMLA            D2, D3, V4.D[1] }
  v84 = vmlad_n_f64(_D2, v81, v80);
  _D7 = _Q4.f64[1];
  __asm { FMLA            D6, D7, V4.D[1] }
  _Q4.f64[0] = sqrt(vmlad_n_f64(_D6, v80, v80));
  __asm { FMLA            D5, D3, V1.D[1] }
  return acos(v84 / (_Q4.f64[0] * sqrt(vmlad_n_f64(_D5, v81, v81)))) * 180.0 / 3.14159265;
}

uint64_t sub_239C5092C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  double v6;
  float64x2_t v7;
  unint64_t v8;
  double v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v18;
  float64x2_t v25;
  float64x2_t v28;
  int64x2_t v30;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;

  v4 = *(_OWORD *)(a2 + 32);
  v3 = *(_OWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v3;
  v6 = *(double *)(a1 + 16);
  v7 = *(float64x2_t *)a1;
  v8 = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
  v9 = *(double *)(a1 + 40);
  v10 = *(float64x2_t *)(a1 + 24);
  *(_QWORD *)&v11 = vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v12 = *(double *)(a1 + 64);
  _Q5 = *(float64x2_t *)(a1 + 48);
  *(_QWORD *)&v14 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  v15 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, (int64x2_t)v10);
  v16 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a1, (int64x2_t)v10);
  _Q20.f64[0] = v6;
  _Q20.f64[1] = v9;
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, *(double *)a1), v16, *(float64x2_t *)a1, 1), _Q20, v6);
  _Q21 = (int64x2_t)vmulq_f64(_Q5, *(float64x2_t *)a1);
  _D22 = *(_QWORD *)(a1 + 8);
  __asm { FMLA            D21, D22, V5.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + v12 * v6;
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, v10.f64[0]), v16, v10, 1), _Q20, v9);
  _Q23 = (int8x16_t)vmulq_f64(_Q5, v10);
  _D24 = *(_QWORD *)(a1 + 32);
  __asm { FMLA            D23, D24, V5.D[1] }
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + v12 * v9;
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v15, _Q5.f64[0]), v16, _Q5, 1), _Q20, v12);
  _Q19 = vmulq_f64(_Q5, _Q5);
  _Q20.f64[0] = *(float64_t *)(a1 + 56);
  __asm { FMLA            D19, D20, V5.D[1] }
  _Q19.f64[0] = _Q19.f64[0] + v12 * v12;
  v30 = (int64x2_t)vaddq_f64(v25, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V22.2D, #-1.0 }
  *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, _Q22));
  _Q19.f64[1] = NAN;
  v32 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v18, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v30, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v30)), vabsq_f64(v28))));
  v33 = -v9;
  if (v32 > 0.0001
    || (v34.f64[0] = *(float64_t *)a1,
        *(_QWORD *)&v34.f64[1] = v8,
        v35.f64[0] = v14,
        v35.f64[1] = *(float64_t *)(a1 + 48),
        v36.f64[0] = v11,
        v36.f64[1] = *(float64_t *)(a1 + 24),
        v37 = vmulq_f64(v34, vmlaq_n_f64(vmulq_n_f64(v35, v33), v36, v12)),
        fabs(v6 * (v14 * v10.f64[0] - v11 * _Q5.f64[0])+ vsubq_f64(v37, (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)).f64[0]+ -1.0) > 0.0001))
  {
    if (v32 > 0.1
      || (*(_QWORD *)&v7.f64[1] = v8,
          v38.f64[0] = v14,
          v38.f64[1] = *(float64_t *)(a1 + 48),
          v39 = vmulq_n_f64(v38, v33),
          v40.f64[0] = v11,
          v40.f64[1] = *(float64_t *)(a1 + 24),
          v41 = vmulq_f64(v7, vmlaq_n_f64(v39, v40, v12)),
          fabs(v6 * (v14 * v10.f64[0] - v11 * _Q5.f64[0])+ vsubq_f64(v41, (float64x2_t)vdupq_laneq_s64((int64x2_t)v41, 1)).f64[0]+ -1.0) > 0.1))
    {
      sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    sub_239516070((float64x2_t *)a1);
  }
  return a1;
}

double sub_239C50B40(uint64_t a1, uint64_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  double v9;
  float64x2_t v11;
  float64_t v12;
  float64x2_t v13;
  int64x2_t v19;
  int64x2_t v20;
  double v21;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v29;
  float64x2_t v31;
  double v32;
  double v35;
  double v39;
  float64x2_t v40;
  double v41;

  v7.f64[0] = *(float64_t *)(a1 + 80);
  a3.f64[0] = *(float64_t *)(a1 + 144);
  _Q5 = *(float64x2_t *)(a1 + 128);
  a5.f64[0] = *(float64_t *)(a1 + 176);
  *(_QWORD *)&v9 = *(_OWORD *)&vsubq_f64((float64x2_t)0, a5);
  _Q7 = vsubq_f64((float64x2_t)0, *(float64x2_t *)(a1 + 160));
  v11.f64[0] = v7.f64[0];
  v12 = v7.f64[0] * v7.f64[0];
  v7.f64[1] = *(float64_t *)(a1 + 112);
  v13 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a1 + 64), *(int64x2_t *)(a1 + 96)), _Q7.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a1 + 64), *(int64x2_t *)(a1 + 96)), _Q7, 1), v7, v9);
  _Q3 = vmulq_f64(_Q5, _Q7);
  _Q7.f64[0] = _Q7.f64[1];
  __asm { FMLA            D3, D7, V5.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], a3.f64[0], v9);
  _Q5.f64[0] = *(float64_t *)(a2 + 80);
  v19 = *(int64x2_t *)(a2 + 64);
  v20 = *(int64x2_t *)(a2 + 96);
  v5.f64[0] = *(float64_t *)(a2 + 144);
  v6.f64[0] = *(float64_t *)(a2 + 176);
  *(_QWORD *)&v21 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v6);
  _Q4 = vsubq_f64((float64x2_t)0, *(float64x2_t *)(a2 + 160));
  v23 = (float64x2_t)vzip1q_s64(v19, v20);
  v24 = (float64x2_t)vzip2q_s64(v19, v20);
  _Q18 = *(float64x2_t *)(a2 + 128);
  v26 = vmlaq_laneq_f64(vmulq_n_f64(v23, _Q4.f64[0]), v24, _Q4, 1);
  _Q6 = vmulq_f64(_Q18, _Q4);
  _Q4.f64[0] = _Q4.f64[1];
  __asm { FMLA            D6, D4, V18.D[1] }
  _Q4.f64[0] = _Q5.f64[0];
  _Q18.f64[0] = _Q5.f64[0] * _Q5.f64[0];
  _Q5.f64[1] = *(float64_t *)(a2 + 112);
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v5.f64[0], v21);
  _Q2 = vsubq_f64(v13, vmlaq_n_f64(v26, _Q5, v21));
  v29 = vsubq_f64(_Q3, _Q6);
  _Q5 = vmulq_f64(_Q2, _Q2);
  _Q6.f64[0] = _Q2.f64[1];
  __asm { FMLA            D5, D6, V2.D[1] }
  _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v29.f64[0], v29.f64[0]));
  v29.f64[0] = vmulq_f64(v29, _Q5).f64[0];
  v31 = vmulq_n_f64(_Q2, _Q5.f64[0]);
  v11.f64[1] = *(float64_t *)(a1 + 112);
  a4.f64[0] = 1.0 / sqrt(v12 + v11.f64[1] * v11.f64[1] + a3.f64[0] * a3.f64[0]);
  v32 = vmulq_f64(a3, a4).f64[0];
  _Q1 = vmulq_n_f64(v11, a4.f64[0]);
  _Q4.f64[1] = *(float64_t *)(a2 + 112);
  _Q2.f64[0] = 1.0 / sqrt(_Q18.f64[0] + _Q4.f64[1] * _Q4.f64[1] + v5.f64[0] * v5.f64[0]);
  *(_QWORD *)&v41 = *(_OWORD *)&vmulq_f64(v5, _Q2);
  v39 = v29.f64[0];
  v40 = vmulq_n_f64(_Q4, _Q2.f64[0]);
  _D8 = v31.f64[1];
  __asm { FMLA            D2, D8, V1.D[1] }
  v35 = acos(-(_Q2.f64[0] + v32 * v29.f64[0])) * 180.0 / 3.14159265;
  _V1.D[1] = v40.f64[1];
  __asm { FMLA            D0, D8, V1.D[1] }
  return vabdd_f64(v35, acos(vmlad_n_f64(_D0, v39, v41)) * 180.0 / 3.14159265);
}

_QWORD *sub_239C50CE4(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!sub_239AF2B88(a1, a2, a3))
  {
    sub_239A444D4((uint64_t)"unknown file", 204, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v6 = (_QWORD *)(*a1 + 40 * a2);
  v7 = (int8x8_t)v6[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a3;
      if (*(_QWORD *)&v7 <= a3)
        v9 = a3 % *(_QWORD *)&v7;
    }
    else
    {
      v9 = (*(_QWORD *)&v7 - 1) & a3;
    }
    v10 = *(_QWORD **)(*v6 + 8 * v9);
    if (v10)
    {
      v10 = (_QWORD *)*v10;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          v11 = *(_QWORD *)&v7 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == a3)
            {
              if (v10[2] == a3)
                return v10 + 3;
            }
            else if ((v13 & v11) != v9)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              return v10 + 3;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == a3)
          {
            if (v10[2] == a3)
              return v10 + 3;
          }
          else
          {
            if (v12 >= *(_QWORD *)&v7)
              v12 %= *(_QWORD *)&v7;
            if (v12 != v9)
              goto LABEL_22;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
LABEL_22:
    v10 = 0;
  }
  return v10 + 3;
}

BOOL sub_239C50E20(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (!a2)
    return 0;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a3;
    if (a2 <= a3)
      v5 = a3 % a2;
  }
  else
  {
    v5 = (a2 - 1) & a3;
  }
  v6 = *(_QWORD **)(a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = (_QWORD *)*v6;
  if (!v7)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a3)
      {
        if (v7[2] == a3)
          goto LABEL_22;
      }
      else if ((v9 & (a2 - 1)) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v8 = v7[1];
    if (v8 == a3)
      break;
    if (v8 >= a2)
      v8 %= a2;
    if (v8 != v5)
      return 0;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != a3)
    goto LABEL_11;
LABEL_22:
  v11 = (int8x8_t)v7[4];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8(v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v13 = a4;
      if (*(_QWORD *)&v11 <= a4)
        v13 = a4 % *(_QWORD *)&v11;
    }
    else
    {
      v13 = (*(_QWORD *)&v11 - 1) & a4;
    }
    v14 = *(_QWORD **)(v7[3] + 8 * v13);
    if (v14)
    {
      v14 = (_QWORD *)*v14;
      if (v14)
      {
        if (v12.u32[0] < 2uLL)
        {
          v15 = *(_QWORD *)&v11 - 1;
          while (1)
          {
            v17 = v14[1];
            if (v17 == a4)
            {
              if (v14[2] == a4)
                return v14 != 0;
            }
            else if ((v17 & v15) != v13)
            {
              goto LABEL_42;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              return v14 != 0;
          }
        }
        do
        {
          v16 = v14[1];
          if (v16 == a4)
          {
            if (v14[2] == a4)
              return v14 != 0;
          }
          else
          {
            if (v16 >= *(_QWORD *)&v11)
              v16 %= *(_QWORD *)&v11;
            if (v16 != v13)
              goto LABEL_42;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
LABEL_42:
    v14 = 0;
  }
  return v14 != 0;
}

_QWORD *sub_239C50FC8(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (!a2)
    goto LABEL_42;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a3;
    if (a2 <= a3)
      v5 = a3 % a2;
  }
  else
  {
    v5 = (a2 - 1) & a3;
  }
  v6 = *(_QWORD **)(a1 + 8 * v5);
  if (!v6 || (v7 = (_QWORD *)*v6) == 0)
  {
LABEL_42:
    v19 = 49;
    goto LABEL_44;
  }
  if (v4.u32[0] < 2uLL)
  {
    while (1)
    {
      v9 = v7[1];
      if (v9 == a3)
      {
        if (v7[2] == a3)
          goto LABEL_21;
      }
      else if ((v9 & (a2 - 1)) != v5)
      {
        goto LABEL_42;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v8 = v7[1];
    if (v8 == a3)
      break;
    if (v8 >= a2)
      v8 %= a2;
    if (v8 != v5)
      goto LABEL_42;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_42;
  }
  if (v7[2] != a3)
    goto LABEL_11;
LABEL_21:
  v10 = (int8x8_t)v7[4];
  if (!*(_QWORD *)&v10)
    goto LABEL_43;
  v11 = (uint8x8_t)vcnt_s8(v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = a4;
    if (*(_QWORD *)&v10 <= a4)
      v12 = a4 % *(_QWORD *)&v10;
  }
  else
  {
    v12 = (*(_QWORD *)&v10 - 1) & a4;
  }
  v13 = *(_QWORD **)(v7[3] + 8 * v12);
  if (!v13 || (v14 = (_QWORD *)*v13) == 0)
  {
LABEL_43:
    v19 = 52;
LABEL_44:
    sub_239A444D4((uint64_t)"unknown file", v19, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v11.u32[0] < 2uLL)
  {
    v15 = *(_QWORD *)&v10 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == a4)
      {
        if (v14[2] == a4)
          return v14 + 3;
      }
      else if ((v17 & v15) != v12)
      {
        goto LABEL_43;
      }
      v14 = (_QWORD *)*v14;
      if (!v14)
        goto LABEL_43;
    }
  }
  while (1)
  {
    v16 = v14[1];
    if (v16 == a4)
      break;
    if (v16 >= *(_QWORD *)&v10)
      v16 %= *(_QWORD *)&v10;
    if (v16 != v12)
      goto LABEL_43;
LABEL_31:
    v14 = (_QWORD *)*v14;
    if (!v14)
      goto LABEL_43;
  }
  if (v14[2] != a4)
    goto LABEL_31;
  return v14 + 3;
}

void sub_239C511BC(uint64_t a1, unint64_t a2, unint64_t a3, double a4)
{
  int8x8_t v4;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t prime;
  _QWORD *v16;
  unint64_t v17;
  int8x8_t v18;
  uint8x8_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  BOOL v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  unint64_t v49;
  float v50;
  float v51;
  _BOOL8 v52;
  unint64_t v53;
  unint64_t v54;
  size_t v55;
  unint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  unint64_t v59;
  uint8x8_t v60;
  uint64_t v61;
  _QWORD *v62;
  int8x8_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81[2];
  void *__p[2];
  float v83;
  size_t __n[2];
  void *v85[2];
  int v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;

  v7 = *(int8x8_t *)(a1 + 8);
  if (!*(_QWORD *)&v7)
    goto LABEL_21;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = a2;
    if (*(_QWORD *)&v7 <= a2)
      v9 = a2 % *(_QWORD *)&v7;
  }
  else
  {
    v9 = (*(_QWORD *)&v7 - 1) & a2;
  }
  v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (!v10 || (v11 = (_QWORD *)*v10) == 0)
  {
LABEL_21:
    *(_OWORD *)__n = 0u;
    *(_OWORD *)v85 = 0u;
    v86 = 1065353216;
    sub_239C51CF4((uint64_t)__n, a3, a3, a4);
    v80 = a2;
    *(_OWORD *)v81 = 0u;
    *(_OWORD *)__p = 0u;
    v83 = *(float *)&v86;
    prime = __n[1];
    if (__n[1] == 1)
    {
      prime = 2;
    }
    else
    {
      if ((__n[1] & (__n[1] - 1)) != 0)
      {
        prime = std::__next_prime(__n[1]);
        v4 = (int8x8_t)v81[1];
        v37 = (void *)prime >= v81[1];
        if ((void *)prime > v81[1])
          goto LABEL_23;
      }
      else
      {
        v4 = 0;
        v37 = 1;
        if (__n[1])
          goto LABEL_23;
      }
      if (v37)
        goto LABEL_24;
      v56 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v83);
      if (*(_QWORD *)&v4 < 3uLL || (v57 = (uint8x8_t)vcnt_s8(v4), v57.i16[0] = vaddlv_u8(v57), v57.u32[0] > 1uLL))
      {
        v56 = std::__next_prime(v56);
      }
      else
      {
        v58 = 1 << -(char)__clz(v56 - 1);
        if (v56 >= 2)
          v56 = v58;
      }
      if (prime <= v56)
        prime = v56;
      if (prime >= *(_QWORD *)&v4)
      {
LABEL_24:
        v16 = v85[0];
        if (v85[0])
        {
          v17 = (unint64_t)v81[1];
          do
          {
            v18 = (int8x8_t)v16[2];
            if (v17)
            {
              v19 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
              v19.i16[0] = vaddlv_u8(v19);
              if (v19.u32[0] > 1uLL)
              {
                v4 = (int8x8_t)v16[2];
                if (*(_QWORD *)&v18 >= v17)
                  v4 = (int8x8_t)(*(_QWORD *)&v18 % v17);
              }
              else
              {
                v4 = (int8x8_t)((v17 - 1) & *(_QWORD *)&v18);
              }
              v20 = (_QWORD *)*((_QWORD *)v81[0] + *(_QWORD *)&v4);
              if (v20)
              {
                v21 = (_QWORD *)*v20;
                if (v21)
                {
                  if (v19.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v23 = v21[1];
                      if (v23 == *(_QWORD *)&v18)
                      {
                        if (v21[2] == *(_QWORD *)&v18)
                          goto LABEL_84;
                      }
                      else if ((v23 & (v17 - 1)) != *(_QWORD *)&v4)
                      {
                        goto LABEL_46;
                      }
                      v21 = (_QWORD *)*v21;
                      if (!v21)
                        goto LABEL_46;
                    }
                  }
                  do
                  {
                    v22 = v21[1];
                    if (v22 == *(_QWORD *)&v18)
                    {
                      if (v21[2] == *(_QWORD *)&v18)
                        goto LABEL_84;
                    }
                    else
                    {
                      if (v22 >= v17)
                        v22 %= v17;
                      if (v22 != *(_QWORD *)&v4)
                        break;
                    }
                    v21 = (_QWORD *)*v21;
                  }
                  while (v21);
                }
              }
            }
LABEL_46:
            prime = (unint64_t)operator new(0x20uLL);
            *(_QWORD *)prime = 0;
            *(int8x8_t *)(prime + 8) = v18;
            *(_OWORD *)(prime + 16) = *((_OWORD *)v16 + 1);
            v24 = (float)((unint64_t)__p[1] + 1);
            if (!v17 || (float)(v83 * (float)v17) < v24)
            {
              v25 = (v17 & (v17 - 1)) != 0;
              if (v17 < 3)
                v25 = 1;
              v26 = v25 | (2 * v17);
              v27 = vcvtps_u32_f32(v24 / v83);
              if (v26 <= v27)
                v28 = v27;
              else
                v28 = v26;
              if (v28 == 1)
              {
                v28 = 2;
              }
              else if ((v28 & (v28 - 1)) != 0)
              {
                v28 = std::__next_prime(v28);
                v17 = (unint64_t)v81[1];
              }
              if (v28 > v17)
                goto LABEL_58;
              if (v28 < v17)
              {
                v29 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v83);
                if (v17 < 3
                  || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v17), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
                {
                  v29 = std::__next_prime(v29);
                }
                else
                {
                  v31 = 1 << -(char)__clz(v29 - 1);
                  if (v29 >= 2)
                    v29 = v31;
                }
                if (v28 <= v29)
                  v28 = v29;
                if (v28 < v17)
LABEL_58:
                  sub_239A501C8((uint64_t)v81, v28);
              }
              v17 = (unint64_t)v81[1];
              if (((unint64_t)v81[1] & ((unint64_t)v81[1] - 1)) != 0)
              {
                if ((void *)*(_QWORD *)&v18 >= v81[1])
                  v4 = (int8x8_t)(*(_QWORD *)&v18 % (unint64_t)v81[1]);
                else
                  v4 = v18;
              }
              else
              {
                v4 = (int8x8_t)(((uint64_t)v81[1] - 1) & *(_QWORD *)&v18);
              }
            }
            v32 = v81[0];
            v33 = (unint64_t *)*((_QWORD *)v81[0] + *(_QWORD *)&v4);
            if (v33)
            {
              *(_QWORD *)prime = *v33;
            }
            else
            {
              *(void **)prime = __p[0];
              __p[0] = (void *)prime;
              v32[*(_QWORD *)&v4] = __p;
              if (!*(_QWORD *)prime)
                goto LABEL_83;
              v34 = *(_QWORD *)(*(_QWORD *)prime + 8);
              if ((v17 & (v17 - 1)) != 0)
              {
                if (v34 >= v17)
                  v34 %= v17;
              }
              else
              {
                v34 &= v17 - 1;
              }
              v33 = (unint64_t *)((char *)v81[0] + 8 * v34);
            }
            *v33 = prime;
LABEL_83:
            ++__p[1];
LABEL_84:
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        v35 = *(_QWORD *)(a1 + 8);
        if (v35)
        {
          v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
          v36.i16[0] = vaddlv_u8(v36);
          if (v36.u32[0] > 1uLL)
          {
            prime = a2;
            if (a2 >= v35)
              prime = a2 % v35;
          }
          else
          {
            prime = (v35 - 1) & a2;
          }
          v38 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
          if (v38)
          {
            v39 = (_QWORD *)*v38;
            if (v39)
            {
              if (v36.u32[0] < 2uLL)
              {
                while (1)
                {
                  v41 = v39[1];
                  if (v41 == a2)
                  {
                    if (v39[2] == a2)
                      goto LABEL_168;
                  }
                  else if ((v41 & (v35 - 1)) != prime)
                  {
                    goto LABEL_109;
                  }
                  v39 = (_QWORD *)*v39;
                  if (!v39)
                    goto LABEL_109;
                }
              }
              do
              {
                v40 = v39[1];
                if (v40 == a2)
                {
                  if (v39[2] == a2)
                    goto LABEL_168;
                }
                else
                {
                  if (v40 >= v35)
                    v40 %= v35;
                  if (v40 != prime)
                    break;
                }
                v39 = (_QWORD *)*v39;
              }
              while (v39);
            }
          }
        }
LABEL_109:
        v42 = operator new(0x40uLL);
        v43 = v42;
        v44 = (_QWORD *)(a1 + 16);
        v87 = v42;
        v88 = a1 + 16;
        *v42 = 0;
        v42[1] = v80;
        v45 = v81[0];
        v46 = (unint64_t)v81[1];
        v81[0] = 0;
        v81[1] = 0;
        v42[2] = v80;
        v42[3] = v45;
        v42[4] = v46;
        v48 = __p[0];
        v47 = __p[1];
        v42[5] = __p[0];
        v42[6] = v47;
        *((float *)v42 + 14) = v83;
        if (v47)
        {
          v49 = v48[1];
          if ((v46 & (v46 - 1)) != 0)
          {
            if (v49 >= v46)
              v49 %= v46;
          }
          else
          {
            v49 &= v46 - 1;
          }
          v45[v49] = v42 + 5;
          __p[0] = 0;
          __p[1] = 0;
        }
        v89 = 1;
        v50 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v51 = *(float *)(a1 + 32);
        if (!v35 || (float)(v51 * (float)v35) < v50)
        {
          v52 = 1;
          if (v35 >= 3)
            v52 = (v35 & (v35 - 1)) != 0;
          v53 = v52 | (2 * v35);
          v54 = vcvtps_u32_f32(v50 / v51);
          if (v53 <= v54)
            v55 = v54;
          else
            v55 = v53;
          if (v55 == 1)
          {
            v55 = 2;
          }
          else if ((v55 & (v55 - 1)) != 0)
          {
            v55 = std::__next_prime(v55);
            v35 = *(_QWORD *)(a1 + 8);
          }
          if (v55 > v35)
            goto LABEL_134;
          if (v55 < v35)
          {
            v59 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
            if (v35 < 3 || (v60 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
            {
              v59 = std::__next_prime(v59);
            }
            else
            {
              v61 = 1 << -(char)__clz(v59 - 1);
              if (v59 >= 2)
                v59 = v61;
            }
            if (v55 <= v59)
              v55 = v59;
            if (v55 < v35)
LABEL_134:
              sub_239A501C8(a1, v55);
          }
          v35 = *(_QWORD *)(a1 + 8);
          if ((v35 & (v35 - 1)) != 0)
          {
            if (v80 >= v35)
              prime = v80 % v35;
            else
              prime = v80;
          }
          else
          {
            prime = (v35 - 1) & v80;
          }
        }
        v66 = *(_QWORD *)a1;
        v67 = *(_QWORD **)(*(_QWORD *)a1 + 8 * prime);
        if (v67)
        {
          *v43 = *v67;
        }
        else
        {
          *v43 = *v44;
          *v44 = v43;
          *(_QWORD *)(v66 + 8 * prime) = v44;
          if (!*v43)
            goto LABEL_167;
          v68 = *(_QWORD *)(*v43 + 8);
          if ((v35 & (v35 - 1)) != 0)
          {
            if (v68 >= v35)
              v68 %= v35;
          }
          else
          {
            v68 &= v35 - 1;
          }
          v67 = (_QWORD *)(*(_QWORD *)a1 + 8 * v68);
        }
        *v67 = v43;
LABEL_167:
        ++*(_QWORD *)(a1 + 24);
LABEL_168:
        v69 = __p[0];
        if (__p[0])
        {
          do
          {
            v70 = (_QWORD *)*v69;
            operator delete(v69);
            v69 = v70;
          }
          while (v70);
        }
        v71 = v81[0];
        v81[0] = 0;
        if (v71)
          operator delete(v71);
        v72 = v85[0];
        if (v85[0])
        {
          do
          {
            v73 = (_QWORD *)*v72;
            operator delete(v72);
            v72 = v73;
          }
          while (v73);
        }
        v74 = (void *)__n[0];
        __n[0] = 0;
        if (v74)
          operator delete(v74);
        return;
      }
    }
LABEL_23:
    sub_239A501C8((uint64_t)v81, prime);
    goto LABEL_24;
  }
  if (v8.u32[0] < 2uLL)
  {
    v12 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v14 = v11[1];
      if (v14 == a2)
      {
        if (v11[2] == a2)
          goto LABEL_141;
      }
      else if ((v14 & v12) != v9)
      {
        goto LABEL_21;
      }
      v11 = (_QWORD *)*v11;
      if (!v11)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v13 = v11[1];
    if (v13 == a2)
      break;
    if (v13 >= *(_QWORD *)&v7)
      v13 %= *(_QWORD *)&v7;
    if (v13 != v9)
      goto LABEL_21;
LABEL_11:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_21;
  }
  if (v11[2] != a2)
    goto LABEL_11;
LABEL_141:
  v62 = v11 + 3;
  v63 = (int8x8_t)v11[4];
  if (v63)
  {
    v64 = (uint8x8_t)vcnt_s8(v63);
    v64.i16[0] = vaddlv_u8(v64);
    if (v64.u32[0] > 1uLL)
    {
      v65 = a3;
      if (*(_QWORD *)&v63 <= a3)
        v65 = a3 % *(_QWORD *)&v63;
    }
    else
    {
      v65 = (*(_QWORD *)&v63 - 1) & a3;
    }
    v75 = *(_QWORD **)(*v62 + 8 * v65);
    if (v75)
    {
      v76 = (_QWORD *)*v75;
      if (v76)
      {
        if (v64.u32[0] < 2uLL)
        {
          v77 = *(_QWORD *)&v63 - 1;
          while (1)
          {
            v79 = v76[1];
            if (v79 == a3)
            {
              if (v76[2] == a3)
                goto LABEL_195;
            }
            else if ((v79 & v77) != v65)
            {
              goto LABEL_194;
            }
            v76 = (_QWORD *)*v76;
            if (!v76)
              goto LABEL_194;
          }
        }
        do
        {
          v78 = v76[1];
          if (v78 == a3)
          {
            if (v76[2] == a3)
            {
LABEL_195:
              sub_239A444D4((uint64_t)"unknown file", 153, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
          }
          else
          {
            if (v78 >= *(_QWORD *)&v63)
              v78 %= *(_QWORD *)&v63;
            if (v78 != v65)
              break;
          }
          v76 = (_QWORD *)*v76;
        }
        while (v76);
      }
    }
  }
LABEL_194:
  sub_239C51CF4((uint64_t)v62, a3, a3, a4);
}

void sub_239C51ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_239C5201C((uint64_t)&a20);
  sub_239C51FD4((uint64_t)&a9);
  sub_239420950((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_239C51B24(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2 = (int8x8_t)a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (*(_QWORD *)&v2 <= a2)
        v4 = a2 % *(_QWORD *)&v2;
    }
    else
    {
      v4 = (*(_QWORD *)&v2 - 1) & a2;
    }
    v5 = *a1;
    v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      v7 = *v6;
      if (v7)
      {
        v8 = *(_QWORD *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2)
                goto LABEL_22;
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            v7 = (uint64_t *)*v7;
            if (!v7)
              return;
          }
        }
        do
        {
          v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v2 <= a2)
                  a2 %= *(_QWORD *)&v2;
              }
              else
              {
                a2 &= v8;
              }
              v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                v12 = v11;
                v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2)
                goto LABEL_39;
              v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(_QWORD *)&v2)
                  v13 %= *(_QWORD *)&v2;
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7)
                  goto LABEL_40;
                v14 = *(_QWORD *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(_QWORD *)&v2)
                    v14 %= *(_QWORD *)&v2;
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2)
LABEL_40:
                  *(_QWORD *)(v5 + 8 * a2) = 0;
              }
              v15 = *v7;
              if (*v7)
              {
                v16 = *(_QWORD *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(_QWORD *)&v2)
                    v16 %= *(_QWORD *)&v2;
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(_QWORD *)(*a1 + 8 * v16) = v12;
                  v15 = *v7;
                }
              }
              *v12 = v15;
              *v7 = 0;
              --a1[3];
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(_QWORD *)&v2)
              v10 %= *(_QWORD *)&v2;
            if (v10 != v4)
              return;
          }
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

void sub_239C51CF4(uint64_t a1, unint64_t a2, uint64_t a3, double a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  double *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  double **v26;
  unint64_t v27;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = (double *)operator new(0x20uLL);
  *v15 = 0.0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = a3;
  v15[3] = a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_35:
        sub_239A501C8(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7)
        v7 %= v9;
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(double ***)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_58:
    *v26 = v15;
    goto LABEL_59;
  }
  *v15 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (double **)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_239C51FC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239C51FD4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_239C5201C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_239C52088(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_239418A80();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_239C521D4(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_239A501C8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239C52498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239C524AC(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *i;
  size_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_BYTE *)v10 + 24) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_72;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = v17;
  else
    prime = v16;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61)
      sub_239418A80();
    v19 = operator new(8 * prime);
    v20 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v19;
    if (v20)
      operator delete(v20);
    v21 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    v23 = (uint64_t *)(a1 + 4);
    v22 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v22)
      goto LABEL_59;
    v24 = v22[1];
    v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v26 = v24 & v25;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v23;
      for (i = (_QWORD *)*v22; *v22; i = (_QWORD *)*v22)
      {
        v28 = i[1] & v25;
        if (v28 == v26)
        {
          v22 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
        {
          *v22 = *i;
          v29 = 8 * v28;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v29);
          **(_QWORD **)(*(_QWORD *)a1 + v29) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v22;
          v22 = i;
          v26 = v28;
        }
      }
LABEL_59:
      v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime)
      v24 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v23;
    v33 = (_QWORD *)*v22;
    if (!*v22)
      goto LABEL_59;
    while (1)
    {
      v35 = v33[1];
      if (v35 >= prime)
        v35 %= prime;
      if (v35 != v24)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *v22 = *v33;
        v34 = 8 * v35;
        *v33 = **(_QWORD **)(*(_QWORD *)a1 + v34);
        **(_QWORD **)(*(_QWORD *)a1 + v34) = v33;
        v33 = v22;
      }
      v35 = v24;
LABEL_64:
      v22 = v33;
      v33 = (_QWORD *)*v33;
      v24 = v35;
      if (!v33)
        goto LABEL_59;
    }
  }
  if (prime >= v7)
    goto LABEL_60;
  v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    v30 = std::__next_prime(v30);
  }
  else
  {
    v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2)
      v30 = v32;
  }
  if (prime <= v30)
    prime = v30;
  if (prime < v7)
  {
    if (!prime)
    {
      v40 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v40)
        operator delete(v40);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  v7 = *((_QWORD *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  v36 = *(_QWORD **)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v37)
  {
    *v10 = *v37;
LABEL_80:
    *v37 = v10;
    goto LABEL_81;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    v38 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7)
        v38 %= v7;
    }
    else
    {
      v38 &= v7 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_239C528FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_239C52910(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
  }
  else
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_35:
        sub_239A501C8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v24)
  {
    *(_QWORD *)v10 = *v24;
LABEL_58:
    *v24 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v23 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239C52C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239C5201C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239C52C18(uint64_t a1, unint64_t a2)
{
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  _QWORD *v16;
  _QWORD *v17;
  char *v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  float64x2_t *v28;
  float64x2_t v29;
  uint64_t *v30;
  int64x2_t v31;
  float64x2_t v32;
  unint64_t v33;
  int64x2_t v34;
  float64x2_t v35;
  double v36;
  double v37;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v49;
  int64x2_t v50;
  float64x2_t v51;
  double v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  int8x16_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int64x2_t v73;
  double v74;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  double v87;
  int8x16_t v88;
  int8x16_t v89;
  unint64_t v90;
  _OWORD *v91;
  char *v92;
  size_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  size_t v99;
  __int128 v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  unint64_t *v105;
  char *v106;
  char *v107;
  char *v108;
  __int128 v109;
  const void *v110;
  unint64_t v111;
  char *v112;
  char *v113;
  size_t v114;
  size_t v115;
  int64x2_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  int64x2_t v121;
  int64x2_t *v122;
  int64x2_t v123;
  int64x2_t v124;
  uint64_t v125;
  unsigned __int32 v126;
  uint64_t i;
  unint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  __int128 v139;
  uint64_t v140;
  char *v141;
  __int128 v142;
  char *v143;
  size_t v144;
  char *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  __int128 v150;
  char *v151;
  char *v152;
  __int128 v153;
  int64_t v154;
  uint64_t v155;
  size_t v156;
  char *v157;
  uint64_t v158;
  double *v159;
  double v163;
  _QWORD *v164;
  _QWORD *v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  char *v186;
  double *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _BYTE *v192;
  double *v193;
  unint64_t v194;
  double *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  double *v201;
  uint64_t v202;
  uint64_t v203;
  _OWORD *v204;
  double *v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  _OWORD *v209;
  double *v210;
  uint64_t v211;
  __int128 v212;
  unint64_t *v213;
  unint64_t *v214;
  unint64_t v215;
  char *v216;
  char *v217;
  _QWORD *v218;
  _QWORD *v219;
  uint64_t v220;
  uint64_t j;
  void *v222;
  char *v223;
  char *v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t k;
  void *v229;
  char *v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  double v236;
  double *v237;
  double *v238;
  char *v239;
  char *v240;
  unint64_t *v241;
  unint64_t *v242;
  _QWORD *v243;
  void *v244;
  _QWORD *v245;
  void *v246;
  _QWORD *v247;
  _QWORD *v248;
  void *v249;
  float64_t v250;
  _QWORD *v251;
  float64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  float64_t v255;
  unint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  unint64_t v261;
  double *v262;
  _QWORD *v263;
  _QWORD *v264;
  _QWORD *v265;
  void *v266;
  _QWORD *v267;
  _QWORD *v268;
  _QWORD *v269;
  void *v270;
  char *v271;
  double v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t *v275;
  unint64_t *v276;
  unint64_t v277;
  double v278;
  unint64_t v279;
  double *v280;
  unint64_t *v281;
  unint64_t *v282;
  double v283;
  unint64_t v284;
  double v285;
  double v286;
  unint64_t *v287;
  unint64_t *v288;
  unint64_t *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  _BYTE *v294;
  unint64_t *v295;
  unint64_t v296;
  uint64_t v297;
  _OWORD *v298;
  unint64_t *v299;
  uint64_t v300;
  __int128 v301;
  unint64_t v302;
  unint64_t v303;
  char *v304;
  char *v305;
  double *m;
  double v307;
  double *v308;
  double *n;
  double v310;
  double *v311;
  _QWORD *v312;
  _QWORD *v313;
  float64_t v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  double *v318;
  unint64_t v319;
  unint64_t v320;
  float64_t v321;
  float64x2_t v322;
  unint64_t v323;
  char *v324;
  float64x2_t v326;
  uint64_t v327;
  double *v328;
  float64x2_t v329;
  char *v330;
  uint64_t *v331;
  double *v332;
  char *v333;
  unint64_t *v334;
  unint64_t *v335;
  unint64_t *v336;
  double *v337;
  double *v338;
  double *v339;
  char *v340;
  char *v341;
  char *v342;
  int64x2_t __token;
  std::string __token_16;
  uint64_t v345;
  float64x2_t v346;
  double v347;
  uint64_t v348;
  void *v349;
  char *v350;
  char *v351;
  float64x2_t __p;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  double v356;
  size_t __sz;
  char *v358;
  char *v359;
  void *v360;
  unint64_t v361;
  char *v362;
  void *v363;
  _QWORD *v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  int v368;
  unint64_t v369;
  __int128 v370;
  __int128 v371;
  int v372;
  __int128 v373;
  __int128 v374;
  int v375;
  __int128 v376;
  __int128 v377;
  int v378;

  kdebug_trace();
  v364 = 0;
  v363 = 0;
  v365 = 0;
  sub_239E24B10(a1, (uint64_t)&v363, 1);
  v361 = 0;
  v360 = 0;
  v362 = 0;
  v358 = 0;
  __sz = 0;
  v359 = 0;
  v376 = 0uLL;
  *(_QWORD *)&v377 = 0;
  v331 = (uint64_t *)(a1 + 232);
  sub_239AFA8E8((uint64_t *)(a1 + 232), (uint64_t)&v376);
  v3 = (unint64_t *)*((_QWORD *)&v376 + 1);
  v4 = (unint64_t *)v376;
  v5 = *((_QWORD *)&v376 + 1) - v376;
  v6 = (uint64_t)(*((_QWORD *)&v376 + 1) - v376) >> 4;
  if (v6)
  {
    if (v5 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(*((_QWORD *)&v376 + 1) - v376);
    v360 = &v7[v361 & 0xFFFFFFFFFFFFFFF0];
    v361 = (unint64_t)v360;
    v362 = &v7[16 * v6];
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v359[-__sz] >> 3) < v6)
  {
    if (v5 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(24 * v6);
    __sz = (size_t)&v8[24 * ((uint64_t)&v358[-__sz] / 24)];
    v358 = (char *)__sz;
    v359 = &v8[24 * v6];
  }
  if (v6)
  {
    if (v5 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(24 * v6);
    v10 = &v9[24 * v6];
    v6 = (unint64_t)v9;
  }
  else
  {
    v10 = 0;
  }
  if (v4 == v3 || v363 == v364)
  {
    v324 = (char *)v6;
    if (!v4)
      goto LABEL_92;
    goto LABEL_91;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  v329 = _Q0;
  v324 = (char *)v6;
  do
  {
    v16 = v363;
    if (v363 != v364)
    {
      v17 = v363;
      while (*v17 != *v4)
      {
        if (++v17 == v364)
        {
          v17 = v364;
          break;
        }
      }
      if (v17 != v364)
      {
        while (*v16 != v4[1])
        {
          if (++v16 == v364)
          {
            v16 = v364;
            break;
          }
        }
        if (v16 != v364)
        {
          v18 = (char *)v361;
          if (v361 >= (unint64_t)v362)
          {
            v20 = (char *)v360;
            v21 = (uint64_t)(v361 - (_QWORD)v360) >> 4;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 60)
              sub_2394189F8();
            v23 = v362 - (_BYTE *)v360;
            if ((v362 - (_BYTE *)v360) >> 3 > v22)
              v22 = v23 >> 3;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
              v24 = 0xFFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              if (v24 >> 60)
                sub_239418A80();
              v25 = (char *)operator new(16 * v24);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[16 * v21];
            *(_OWORD *)v26 = *(_OWORD *)v4;
            v27 = v26;
            if (v18 != v20)
            {
              do
              {
                *((_OWORD *)v27 - 1) = *((_OWORD *)v18 - 1);
                v27 -= 16;
                v18 -= 16;
              }
              while (v18 != v20);
              v18 = (char *)v360;
            }
            v19 = v26 + 16;
            v360 = v27;
            v361 = (unint64_t)(v26 + 16);
            v362 = &v25[16 * v24];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_OWORD *)v361 = *(_OWORD *)v4;
            v19 = v18 + 16;
          }
          v361 = (unint64_t)v19;
          v28 = (float64x2_t *)sub_239C50CE4(v331, *v4, v4[1]);
          v29.f64[0] = v28[8].f64[0];
          v322 = v29;
          v326 = v28[7];
          v30 = sub_239BF5CF4(a1, v4[1]);
          v32 = *((float64x2_t *)v30 + 4);
          v33 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
          v34.i64[0] = v30[14];
          v35 = *((float64x2_t *)v30 + 6);
          *(_QWORD *)&v36 = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
          v37 = *((double *)v30 + 18);
          _Q0 = *((float64x2_t *)v30 + 8);
          *(_QWORD *)&v39 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
          __token_16.__r_.__value_.__r.__words[0] = v30[10];
          v31.i64[0] = __token_16.__r_.__value_.__r.__words[0];
          __token = (int64x2_t)v32;
          v345 = v34.i64[0];
          *(float64x2_t *)&__token_16.__r_.__value_.__r.__words[1] = v35;
          v347 = v37;
          v346 = _Q0;
          v40 = (float64x2_t)vzip1q_s64((int64x2_t)v32, (int64x2_t)v35);
          v41 = (float64x2_t)vzip2q_s64((int64x2_t)v32, (int64x2_t)v35);
          v42 = (float64x2_t)vzip1q_s64(v31, v34);
          _Q21 = (int64x2_t)vmulq_f64(_Q0, v32);
          _D22 = v32.f64[1];
          __asm { FMLA            D21, D22, V0.D[1] }
          *(double *)_Q21.i64 = *(double *)_Q21.i64 + v37 * *(double *)&__token_16.__r_.__value_.__l.__data_;
          _Q23 = (int8x16_t)vmulq_f64(_Q0, v35);
          _D24 = v35.f64[1];
          __asm { FMLA            D23, D24, V0.D[1] }
          _D24 = _Q0.f64[1];
          *(double *)_Q23.i64 = *(double *)_Q23.i64 + v37 * *(double *)v34.i64;
          __asm { FMLA            D26, D24, V0.D[1] }
          v49.f64[0] = _D26 + v37 * v37;
          v50 = (int64x2_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v35.f64[0]), v41, v35, 1), v42, *(double *)v34.i64), (float64x2_t)xmmword_239EC6830);
          *(_QWORD *)&v51.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v49, v329));
          v51.f64[1] = NAN;
          v52 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, v32.f64[0]), v41, v32, 1), v42, *(double *)&__token_16.__r_.__value_.__l.__data_), (float64x2_t)xmmword_239EC6820)), v51), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v50, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v50)), vabsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v40, _Q0.f64[0]), v41, _Q0, 1), v42, v37)))));
          v53 = -*(double *)v34.i64;
          if (v52 > 0.0001)
            goto LABEL_405;
          v54.f64[0] = v32.f64[0];
          *(_QWORD *)&v54.f64[1] = v33;
          v55.f64[0] = v39;
          v55.f64[1] = _Q0.f64[0];
          v56.f64[0] = v36;
          v56.f64[1] = v35.f64[0];
          v57 = vmlaq_n_f64(vmulq_n_f64(v55, v53), v56, v37);
          v58 = vmulq_f64(v54, v57);
          if (fabs(*(double *)&__token_16.__r_.__value_.__l.__data_ * (v39 * v35.f64[0] - v36 * _Q0.f64[0])+ vsubq_f64(v58, (float64x2_t)vdupq_laneq_s64((int64x2_t)v58, 1)).f64[0]+ -1.0) > 0.0001)
          {
LABEL_405:
            if (v52 > 0.1
              || (*(_QWORD *)&v32.f64[1] = v33,
                  v62.f64[0] = v39,
                  v62.f64[1] = _Q0.f64[0],
                  v63.f64[0] = v36,
                  v63.f64[1] = v35.f64[0],
                  v64 = vmulq_f64(v32, vmlaq_n_f64(vmulq_n_f64(v62, v53), v63, v37)),
                  fabs(*(double *)&__token_16.__r_.__value_.__l.__data_ * (v39 * v35.f64[0] - v36 * _Q0.f64[0])+ vsubq_f64(v64, (float64x2_t)vdupq_laneq_s64((int64x2_t)v64, 1)).f64[0]+ -1.0) > 0.1))
            {
              sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            sub_239516070((float64x2_t *)&__token);
            *(_QWORD *)&v42.f64[0] = __token_16.__r_.__value_.__r.__words[0];
            *(_QWORD *)&v61.f64[0] = v345;
            _Q0 = v346;
            v40 = (float64x2_t)vzip1q_s64(__token, *(int64x2_t *)&__token_16.__r_.__value_.__r.__words[1]);
            v39 = v346.f64[1];
            v60.i64[0] = __token_16.__r_.__value_.__r.__words[2];
            *(_QWORD *)&v41.f64[0] = __token.i64[1];
            v37 = v347;
            *(_QWORD *)&v59 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
          }
          else
          {
            *(_QWORD *)&v59 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
            v60.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
            *(_QWORD *)&v61.f64[0] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
          }
          v65.f64[0] = v40.f64[0];
          v65.f64[1] = v59;
          v66.f64[0] = _Q0.f64[0];
          v66.f64[1] = v41.f64[0];
          __p = v65;
          v353 = v66;
          *(_QWORD *)&v65.f64[0] = v60.i64[0];
          v65.f64[1] = v39;
          v356 = v37;
          v66.f64[0] = v42.f64[0];
          v66.f64[1] = v61.f64[0];
          v354 = v65;
          v355 = v66;
          v65.f64[0] = v40.f64[0];
          v65.f64[1] = v41.f64[0];
          v67.f64[0] = v59;
          *(_QWORD *)&v67.f64[1] = v60.i64[0];
          v68.f64[0] = _Q0.f64[0];
          v68.f64[1] = v39;
          v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v40.f64[0]), v67, v59), v68, _Q0.f64[0]);
          v57.f64[0] = v42.f64[0] * v40.f64[0] + v61.f64[0] * v59 + v37 * _Q0.f64[0];
          v70 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v41.f64[0]), v67, *(double *)v60.i64), v68, v39);
          v51.f64[0] = v42.f64[0] * v41.f64[0] + v61.f64[0] * *(double *)v60.i64 + v37 * v39;
          v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v42.f64[0]), v67, v61.f64[0]), v68, v37);
          v72 = vmulq_f64(v66, v66);
          v72.f64[0] = v72.f64[0] + v61.f64[0] * v61.f64[0] + v37 * v37;
          v73 = (int64x2_t)vaddq_f64(v70, (float64x2_t)xmmword_239EC6830);
          *(_QWORD *)&v72.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v72, v329));
          v72.f64[1] = NAN;
          v74 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v69, (float64x2_t)xmmword_239EC6820)), v72), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v73, (int8x16_t)v51, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64((int64x2_t)v57, v73)), vabsq_f64(v71))));
          if (v74 > 0.0001)
            goto LABEL_406;
          *(_QWORD *)&v75.f64[0] = v60.i64[0];
          v75.f64[1] = v39;
          v76 = vnegq_f64(v75);
          v77 = vmuld_lane_f64(v61.f64[0], v76, 1);
          v78.f64[0] = v61.f64[0];
          v78.f64[1] = v37;
          v79 = vmlaq_n_f64(vmulq_n_f64(v76, v42.f64[0]), v78, v41.f64[0]);
          v78.f64[0] = _Q0.f64[0];
          v78.f64[1] = v59;
          v80 = vmulq_f64(v78, v79);
          if (fabs(v80.f64[0] + v40.f64[0] * (v77 + v37 * *(double *)v60.i64) - v80.f64[1] + -1.0) > 0.0001)
          {
LABEL_406:
            if (v74 > 0.1
              || (*(_QWORD *)&v81.f64[0] = v60.i64[0],
                  v81.f64[1] = v39,
                  v82 = vnegq_f64(v81),
                  v61.f64[1] = v37,
                  _Q0.f64[1] = v59,
                  v83 = vmulq_f64(_Q0, vmlaq_n_f64(vmulq_n_f64(v82, v42.f64[0]), v61, v41.f64[0])),
                  fabs(v83.f64[0]+ v40.f64[0] * (vmuld_lane_f64(v61.f64[0], v82, 1) + v37 * *(double *)v60.i64)- v83.f64[1]+ -1.0) > 0.1))
            {
              sub_239A444D4((uint64_t)"unknown file", 18, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            sub_239516070(&__p);
            v37 = v356;
            v60 = (int8x16_t)v354;
            v42 = v355;
            v40 = __p;
            _Q0 = v353;
            *(_QWORD *)&v61.f64[0] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
            *(_QWORD *)&v39 = vextq_s8(v60, v60, 8uLL).u64[0];
            *(_QWORD *)&v41.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
            *(_QWORD *)&v59 = vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL).u64[0];
          }
          _Q19 = v326;
          _Q17 = vmulq_f64(_Q19, _Q19);
          _D18 = v326.f64[1];
          __asm { FMLA            D17, D18, V19.D[1] }
          _Q17.f64[0] = 1.0 / sqrt(_Q17.f64[0] + v322.f64[0] * v322.f64[0]);
          v87 = vmulq_f64(v322, _Q17).f64[0];
          v88 = (int8x16_t)vmulq_n_f64(v326, _Q17.f64[0]);
          _Q19.f64[0] = *(double *)vextq_s8(v88, v88, 8uLL).i64;
          v42.f64[1] = v61.f64[0];
          v40.f64[1] = v59;
          *(_QWORD *)&v41.f64[1] = v60.i64[0];
          _Q0.f64[0] = _Q0.f64[0] * *(double *)v88.i64 + v39 * _Q19.f64[0] + v37 * v87;
          v89 = (int8x16_t)vnegq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v40, *(double *)v88.i64), v41, _Q19.f64[0]), v42, v87));
          v90 = vextq_s8(v89, v89, 8uLL).u64[0];
          *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vnegq_f64(_Q0);
          v91 = v358;
          if (v358 >= v359)
          {
            v93 = __sz;
            v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v358[-__sz] >> 3);
            v95 = v94 + 1;
            if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_2394189F8();
            if (0x5555555555555556 * ((uint64_t)&v359[-__sz] >> 3) > v95)
              v95 = 0x5555555555555556 * ((uint64_t)&v359[-__sz] >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v359[-__sz] >> 3) >= 0x555555555555555)
              v96 = 0xAAAAAAAAAAAAAAALL;
            else
              v96 = v95;
            if (v96)
            {
              v321 = _Q0.f64[0];
              v323 = v90;
              v327 = v89.i64[0];
              if (v96 > 0xAAAAAAAAAAAAAAALL)
                sub_239418A80();
              v97 = (char *)operator new(24 * v96);
              v89.i64[0] = v327;
              _Q0.f64[0] = v321;
              v90 = v323;
            }
            else
            {
              v97 = 0;
            }
            v98 = &v97[24 * v94];
            *((_QWORD *)v98 + 2) = *(_QWORD *)&_Q0.f64[0];
            v89.i64[1] = v90;
            *(int8x16_t *)v98 = v89;
            v99 = (size_t)v98;
            if (v91 != (_OWORD *)v93)
            {
              do
              {
                v100 = *(_OWORD *)((char *)v91 - 24);
                *(_QWORD *)(v99 - 8) = *((_QWORD *)v91 - 1);
                *(_OWORD *)(v99 - 24) = v100;
                v99 -= 24;
                v91 = (_OWORD *)((char *)v91 - 24);
              }
              while (v91 != (_OWORD *)v93);
              v91 = (_OWORD *)__sz;
            }
            v101 = &v97[24 * v96];
            v92 = v98 + 24;
            __sz = v99;
            v358 = v98 + 24;
            v359 = v101;
            if (v91)
              operator delete(v91);
          }
          else
          {
            *((_QWORD *)v358 + 2) = *(_QWORD *)&_Q0.f64[0];
            v89.i64[1] = v90;
            *v91 = v89;
            v92 = (char *)v91 + 24;
          }
          v358 = v92;
          if (v324 < v10)
          {
            *(_QWORD *)v324 = *v4;
            *((_QWORD *)v324 + 1) = v4[1];
            *((_QWORD *)v324 + 2) = 0;
            v324 += 24;
          }
          else
          {
            v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v324[-v6] >> 3) + 1;
            if (v102 > 0xAAAAAAAAAAAAAAALL)
              sub_2394189F8();
            if (0x5555555555555556 * ((uint64_t)&v10[-v6] >> 3) > v102)
              v102 = 0x5555555555555556 * ((uint64_t)&v10[-v6] >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v10[-v6] >> 3) >= 0x555555555555555)
              v103 = 0xAAAAAAAAAAAAAAALL;
            else
              v103 = v102;
            if (v103)
            {
              if (v103 > 0xAAAAAAAAAAAAAAALL)
                sub_239418A80();
              v104 = (char *)operator new(24 * v103);
            }
            else
            {
              v104 = 0;
            }
            v105 = (unint64_t *)&v104[8 * ((uint64_t)&v324[-v6] >> 3)];
            *v105 = *v4;
            v105[1] = v4[1];
            v105[2] = 0;
            if (v324 == (char *)v6)
            {
              v108 = &v104[8 * ((uint64_t)&v324[-v6] >> 3)];
            }
            else
            {
              v106 = &v104[8 * ((uint64_t)&v324[-v6] >> 3)];
              v107 = v324;
              do
              {
                v108 = v106 - 24;
                v109 = *(_OWORD *)(v107 - 24);
                *((_QWORD *)v106 - 1) = *((_QWORD *)v107 - 1);
                *(_OWORD *)(v106 - 24) = v109;
                v107 -= 24;
                v106 -= 24;
              }
              while (v107 != (char *)v6);
            }
            v10 = &v104[24 * v103];
            v324 = (char *)(v105 + 3);
            if (v6)
              operator delete((void *)v6);
            v6 = (unint64_t)v108;
          }
        }
      }
    }
    v4 += 2;
  }
  while (v4 != v3);
  v4 = (unint64_t *)v376;
  if ((_QWORD)v376)
  {
LABEL_91:
    *((_QWORD *)&v376 + 1) = v4;
    operator delete(v4);
  }
LABEL_92:
  v350 = 0;
  v349 = 0;
  v351 = 0;
  v110 = (const void *)__sz;
  v111 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v358[-__sz] >> 3);
  v332 = (double *)v6;
  if (v111 < 0x29)
  {
    v112 = &v358[-__sz];
    if (v358 == (char *)__sz)
    {
      v113 = 0;
      v114 = 0;
    }
    else
    {
      v113 = (char *)operator new((size_t)&v358[-__sz]);
      v349 = v113;
      v350 = v113;
      v351 = &v113[24 * v111];
      v114 = 24 * ((unint64_t)(v112 - 24) / 0x18) + 24;
      memcpy(v113, v110, v114);
    }
    v350 = &v113[v114];
    goto LABEL_144;
  }
  __p = 0uLL;
  v353.f64[0] = 0.0;
  if (v111 >> 61)
    sub_2394189F8();
  v115 = 0x5555555555555558 * ((uint64_t)&v358[-__sz] >> 3);
  v116 = (int64x2_t *)operator new(v115);
  *(_QWORD *)&__p.f64[0] = v116;
  *(_QWORD *)&v353.f64[0] = &v116->i64[v111];
  bzero(v116, 8 * v111);
  v117 = &v116->i64[v115 / 8];
  *(_QWORD *)&__p.f64[1] = &v116->i64[v115 / 8];
  if (v115 - 8 >= 0x18)
  {
    v120 = ((v115 - 8) >> 3) + 1;
    v118 = v120 & 0x3FFFFFFFFFFFFFFCLL;
    v121 = (int64x2_t)xmmword_239EC6860;
    v122 = v116 + 1;
    v123 = vdupq_n_s64(2uLL);
    v124 = vdupq_n_s64(4uLL);
    v125 = v120 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v122[-1] = v121;
      *v122 = vaddq_s64(v121, v123);
      v121 = vaddq_s64(v121, v124);
      v122 += 2;
      v125 -= 4;
    }
    while (v125);
    if (v120 == v118)
      goto LABEL_105;
    v119 = &v116->i64[v120 & 0x3FFFFFFFFFFFFFFCLL];
  }
  else
  {
    v118 = 0;
    v119 = (uint64_t *)v116;
  }
  do
    *v119++ = v118++;
  while (v119 != v117);
LABEL_105:
  __token_16.__r_.__value_.__s.__data_[7] = 12;
  strcpy(__token.i8, "/dev/urandom");
  std::random_device::random_device((std::random_device *)&v370, (const std::string *)&__token);
  if (__token_16.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)__token.i64[0]);
  v126 = MEMORY[0x23B83DE30](&v370);
  __token.i32[0] = v126;
  for (i = 1; i != 624; ++i)
  {
    v126 = i + 1812433253 * (v126 ^ (v126 >> 30));
    __token.i32[i] = v126;
  }
  v348 = 0;
  v376 = xmmword_239EC6600;
  v128 = (unint64_t)(v117 - 1);
  if (v128 > (unint64_t)v116)
  {
    v129 = v111 - 1;
    v130 = (uint64_t *)v116;
    do
    {
      *(_QWORD *)&v373 = 0;
      *((_QWORD *)&v373 + 1) = v129;
      v131 = sub_239455AB4((uint64_t)&v376, (uint64_t)&__token, &v373);
      if (v131)
      {
        v132 = *v130;
        *v130 = v130[v131];
        v130[v131] = v132;
      }
      ++v130;
      --v129;
    }
    while ((unint64_t)v130 < v128);
  }
  v133 = v349;
  if (0xAAAAAAAAAAAAAAABLL * ((v351 - (_BYTE *)v349) >> 3) <= 0x27)
  {
    v134 = v350;
    v135 = (char *)operator new(0x3C0uLL);
    v136 = &v135[24 * ((v134 - v133) / 24)];
    v137 = v136;
    if (v134 != v133)
    {
      v138 = &v135[24 * ((v134 - v133) / 24)];
      do
      {
        v137 = v138 - 24;
        v139 = *(_OWORD *)(v134 - 24);
        *((_QWORD *)v138 - 1) = *((_QWORD *)v134 - 1);
        *(_OWORD *)(v138 - 24) = v139;
        v134 -= 24;
        v138 -= 24;
      }
      while (v134 != v133);
    }
    v349 = v137;
    v350 = v136;
    v351 = v135 + 960;
    if (v133)
      operator delete(v133);
  }
  v140 = 0;
  v141 = v350;
  do
  {
    v144 = __sz + 24 * *(_QWORD *)(*(_QWORD *)&__p.f64[0] + 8 * v140);
    if (v141 < v351)
    {
      v142 = *(_OWORD *)v144;
      *((_QWORD *)v141 + 2) = *(_QWORD *)(v144 + 16);
      *(_OWORD *)v141 = v142;
      v143 = v141 + 24;
    }
    else
    {
      v145 = (char *)v349;
      v146 = 0xAAAAAAAAAAAAAAABLL * ((v141 - (_BYTE *)v349) >> 3);
      v147 = v146 + 1;
      if (v146 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_2394189F8();
      if (0x5555555555555556 * ((v351 - (_BYTE *)v349) >> 3) > v147)
        v147 = 0x5555555555555556 * ((v351 - (_BYTE *)v349) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v351 - (_BYTE *)v349) >> 3) >= 0x555555555555555)
        v148 = 0xAAAAAAAAAAAAAAALL;
      else
        v148 = v147;
      if (v148)
      {
        if (v148 > 0xAAAAAAAAAAAAAAALL)
          sub_239418A80();
        v149 = (char *)operator new(24 * v148);
      }
      else
      {
        v149 = 0;
      }
      v150 = *(_OWORD *)v144;
      v151 = &v149[24 * v146];
      *((_QWORD *)v151 + 2) = *(_QWORD *)(v144 + 16);
      *(_OWORD *)v151 = v150;
      v152 = v151;
      if (v141 != v145)
      {
        do
        {
          v153 = *(_OWORD *)(v141 - 24);
          *((_QWORD *)v152 - 1) = *((_QWORD *)v141 - 1);
          *(_OWORD *)(v152 - 24) = v153;
          v152 -= 24;
          v141 -= 24;
        }
        while (v141 != v145);
        v141 = (char *)v349;
      }
      v143 = v151 + 24;
      v349 = v152;
      v350 = v151 + 24;
      v351 = &v149[24 * v148];
      if (v141)
        operator delete(v141);
    }
    v350 = v143;
    ++v140;
    v141 = v143;
  }
  while (v140 != 40);
  std::random_device::~random_device((std::random_device *)&v370);
  if (*(_QWORD *)&__p.f64[0])
    operator delete(*(void **)&__p.f64[0]);
  v113 = (char *)v349;
  v6 = (unint64_t)v332;
LABEL_144:
  v330 = v350;
  if (v113 != v350)
  {
    v328 = (double *)(v6 + 16);
    while (1)
    {
      v340 = 0;
      v341 = 0;
      v342 = 0;
      v337 = 0;
      v338 = 0;
      v339 = 0;
      v154 = v361 - (_QWORD)v360;
      if ((void *)v361 != v360)
      {
        if (v154 < 0)
          sub_2394189F8();
        v155 = v154 >> 4;
        v340 = (char *)operator new(v361 - (_QWORD)v360);
        v341 = v340;
        v342 = &v340[16 * (v154 >> 4)];
        v154 = (int64_t)operator new((unint64_t)v154 >> 1);
        v337 = (double *)v154;
        v338 = (double *)v154;
        v339 = (double *)(v154 + 8 * v155);
      }
      v156 = __sz;
      v157 = v358;
      if ((char *)__sz != v358)
        break;
LABEL_240:
      v334 = 0;
      v336 = 0;
      __token = 0u;
      *(_OWORD *)&__token_16.__r_.__value_.__l.__data_ = 0u;
      LODWORD(__token_16.__r_.__value_.__r.__words[2]) = 1065353216;
      __p = 0u;
      v353 = 0u;
      LODWORD(v354.f64[0]) = 1065353216;
      v376 = 0u;
      v377 = 0u;
      v378 = 1065353216;
      v373 = 0u;
      v374 = 0u;
      v375 = 1065353216;
      v370 = 0u;
      v371 = 0u;
      v372 = 1065353216;
      v213 = (unint64_t *)v363;
      v214 = v364;
      while (v213 != v214)
      {
        v215 = *v213;
        v369 = v215;
        sub_239C521D4((uint64_t)&__token, v215, &v369)[3] = 0;
        sub_239C521D4((uint64_t)&__p, v215, &v369)[3] = 0;
        *((_BYTE *)sub_239C524AC((float *)&v376, v215, &v369) + 24) = 0;
        v366 = 0u;
        v367 = 0u;
        v368 = 1065353216;
        v216 = sub_239C52910((uint64_t)&v373, v215, &v369);
        v217 = v216;
        if (*((_QWORD *)v216 + 6))
        {
          v218 = (_QWORD *)*((_QWORD *)v216 + 5);
          if (v218)
          {
            do
            {
              v219 = (_QWORD *)*v218;
              operator delete(v218);
              v218 = v219;
            }
            while (v219);
          }
          *((_QWORD *)v217 + 5) = 0;
          v220 = *((_QWORD *)v217 + 4);
          if (v220)
          {
            for (j = 0; j != v220; ++j)
              *(_QWORD *)(*((_QWORD *)v217 + 3) + 8 * j) = 0;
          }
          *((_QWORD *)v217 + 6) = 0;
        }
        v222 = (void *)*((_QWORD *)v217 + 3);
        *((_QWORD *)v217 + 3) = 0;
        if (v222)
          operator delete(v222);
        *((_QWORD *)v217 + 4) = 0;
        *((_QWORD *)v217 + 5) = 0;
        *((_QWORD *)v217 + 6) = 0;
        *((_DWORD *)v217 + 14) = 1065353216;
        v366 = 0u;
        v367 = 0u;
        v368 = 1065353216;
        v223 = sub_239C52910((uint64_t)&v370, v215, &v369);
        v224 = v223;
        if (*((_QWORD *)v223 + 6))
        {
          v225 = (_QWORD *)*((_QWORD *)v223 + 5);
          if (v225)
          {
            do
            {
              v226 = (_QWORD *)*v225;
              operator delete(v225);
              v225 = v226;
            }
            while (v226);
          }
          *((_QWORD *)v224 + 5) = 0;
          v227 = *((_QWORD *)v224 + 4);
          if (v227)
          {
            for (k = 0; k != v227; ++k)
              *(_QWORD *)(*((_QWORD *)v224 + 3) + 8 * k) = 0;
          }
          *((_QWORD *)v224 + 6) = 0;
        }
        v229 = (void *)*((_QWORD *)v224 + 3);
        *((_QWORD *)v224 + 3) = 0;
        if (v229)
          operator delete(v229);
        *((_QWORD *)v224 + 4) = 0;
        *((_QWORD *)v224 + 5) = 0;
        *((_QWORD *)v224 + 6) = 0;
        *((_DWORD *)v224 + 14) = 1065353216;
        ++v213;
      }
      v230 = v340;
      if (v341 != v340)
      {
        v231 = 0;
        v232 = 0;
        do
        {
          v233 = (unint64_t *)&v230[v231];
          v234 = *v233;
          *(_QWORD *)&v366 = v234;
          v369 = v233[1];
          v235 = v369;
          v236 = v337[v232];
          v237 = (double *)sub_239C521D4((uint64_t)&__p, v234, &v366);
          v237[3] = v236 + v237[3];
          v238 = (double *)sub_239C521D4((uint64_t)&__token, v235, &v369);
          v238[3] = v236 + v238[3];
          v239 = sub_239C52910((uint64_t)&v373, v235, &v369);
          *((double *)sub_239C521D4((uint64_t)(v239 + 24), v234, &v366) + 3) = v236;
          v240 = sub_239C52910((uint64_t)&v370, v234, &v366);
          *((double *)sub_239C521D4((uint64_t)(v240 + 24), v235, &v369) + 3) = v236;
          ++v232;
          v230 = v340;
          v231 += 16;
        }
        while (v232 < (v341 - v340) >> 4);
      }
      v335 = 0;
      v241 = v364;
      v242 = (unint64_t *)v363;
      if (v364 != v363)
      {
        do
        {
          *(_QWORD *)&v366 = 0;
          if (v242 == v241)
          {
LABEL_320:
            v277 = 0;
          }
          else
          {
            do
            {
              v274 = *v242;
              v369 = v274;
              if (!*((_BYTE *)sub_239C524AC((float *)&v376, v274, &v369) + 24)
                && *((double *)sub_239C521D4((uint64_t)&__token, v274, &v369) + 3) <= 2.22044605e-16)
              {
                v275 = (unint64_t *)v363;
                v276 = v364;
                if (v363 == v364)
                  goto LABEL_320;
                v277 = 0;
                v278 = -1.79769313e308;
                do
                {
                  v279 = *v275;
                  v369 = v279;
                  if (!*((_BYTE *)sub_239C524AC((float *)&v376, v279, &v369) + 24)
                    && *((double *)sub_239C521D4((uint64_t)&__token, v279, &v369) + 3) <= 2.22044605e-16)
                  {
                    v280 = (double *)sub_239C521D4((uint64_t)&__p, v279, &v369);
                    if (v280[3] > v278)
                    {
                      v277 = v279;
                      v278 = v280[3];
                    }
                  }
                  ++v275;
                }
                while (v275 != v276);
                goto LABEL_321;
              }
              ++v242;
            }
            while (v242 != v241);
            v281 = (unint64_t *)v363;
            v282 = v364;
            if (v363 == v364)
              goto LABEL_320;
            v277 = 0;
            v283 = -1.79769313e308;
            do
            {
              v284 = *v281;
              v369 = v284;
              if (!*((_BYTE *)sub_239C524AC((float *)&v376, v284, &v369) + 24))
              {
                v285 = *((double *)sub_239C521D4((uint64_t)&__p, v284, &v369) + 3);
                v286 = *((double *)sub_239C521D4((uint64_t)&__token, v284, &v369) + 3) + 1.0;
                if ((v285 + 1.0) / v286 > v283)
                {
                  v277 = v284;
                  v283 = (v285 + 1.0) / v286;
                }
              }
              ++v281;
            }
            while (v281 != v282);
LABEL_321:
            *(_QWORD *)&v366 = v277;
          }
          *((_BYTE *)sub_239C524AC((float *)&v376, v277, &v366) + 24) = 1;
          v287 = v335;
          if (v335 >= v336)
          {
            v289 = v334;
            v290 = v335 - v334;
            v291 = v290 + 1;
            if ((unint64_t)(v290 + 1) >> 61)
              sub_2394189F8();
            v292 = (char *)v336 - (char *)v334;
            if (((char *)v336 - (char *)v334) >> 2 > v291)
              v291 = v292 >> 2;
            if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF8)
              v293 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v293 = v291;
            if (v293)
            {
              if (v293 >> 61)
                sub_239418A80();
              v294 = operator new(8 * v293);
            }
            else
            {
              v294 = 0;
            }
            v295 = (unint64_t *)&v294[8 * v290];
            *v295 = v277;
            v288 = v295 + 1;
            if (v335 != v334)
            {
              v296 = (char *)(v335 - 1) - (char *)v334;
              if (v296 < 0x58)
                goto LABEL_407;
              if ((unint64_t)((char *)v334 - v294) < 0x20)
                goto LABEL_407;
              v297 = (v296 >> 3) + 1;
              v298 = &v294[8 * v290 - 16];
              v299 = v335 - 2;
              v300 = v297 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v301 = *(_OWORD *)v299;
                *(v298 - 1) = *((_OWORD *)v299 - 1);
                *v298 = v301;
                v298 -= 2;
                v299 -= 4;
                v300 -= 4;
              }
              while (v300);
              v295 -= v297 & 0x3FFFFFFFFFFFFFFCLL;
              v287 = &v335[-(v297 & 0x3FFFFFFFFFFFFFFCLL)];
              if (v297 != (v297 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_407:
                do
                {
                  v302 = *--v287;
                  *--v295 = v302;
                }
                while (v287 != v334);
              }
            }
            v334 = v295;
            v336 = (unint64_t *)&v294[8 * v293];
            if (v289)
              operator delete(v289);
          }
          else
          {
            *v335 = v277;
            v288 = v335 + 1;
          }
          v335 = v288;
          v303 = v366;
          v304 = sub_239C52910((uint64_t)&v373, v366, &v366);
          v305 = sub_239C52910((uint64_t)&v370, v303, &v366);
          for (m = (double *)*((_QWORD *)v304 + 5); m; m = *(double **)m)
          {
            v307 = m[3];
            v308 = (double *)sub_239C521D4((uint64_t)&__p, *((_QWORD *)m + 2), (_QWORD *)m + 2);
            v308[3] = v308[3] - v307;
          }
          for (n = (double *)*((_QWORD *)v305 + 5); n; n = *(double **)n)
          {
            v310 = n[3];
            v311 = (double *)sub_239C521D4((uint64_t)&__token, *((_QWORD *)n + 2), (_QWORD *)n + 2);
            v311[3] = v311[3] - v310;
          }
          v241 = v364;
          v242 = (unint64_t *)v363;
        }
        while ((char *)v288 - (char *)v334 < (unint64_t)((char *)v364 - (_BYTE *)v363));
      }
      v243 = (_QWORD *)v371;
      if ((_QWORD)v371)
      {
        do
        {
          v263 = (_QWORD *)*v243;
          v264 = (_QWORD *)v243[5];
          if (v264)
          {
            do
            {
              v265 = (_QWORD *)*v264;
              operator delete(v264);
              v264 = v265;
            }
            while (v265);
          }
          v266 = (void *)v243[3];
          v243[3] = 0;
          if (v266)
            operator delete(v266);
          operator delete(v243);
          v243 = v263;
        }
        while (v263);
      }
      v244 = (void *)v370;
      *(_QWORD *)&v370 = 0;
      if (v244)
        operator delete(v244);
      v245 = (_QWORD *)v374;
      if ((_QWORD)v374)
      {
        do
        {
          v267 = (_QWORD *)*v245;
          v268 = (_QWORD *)v245[5];
          if (v268)
          {
            do
            {
              v269 = (_QWORD *)*v268;
              operator delete(v268);
              v268 = v269;
            }
            while (v269);
          }
          v270 = (void *)v245[3];
          v245[3] = 0;
          if (v270)
            operator delete(v270);
          operator delete(v245);
          v245 = v267;
        }
        while (v267);
      }
      v246 = (void *)v373;
      *(_QWORD *)&v373 = 0;
      if (v246)
        operator delete(v246);
      v247 = (_QWORD *)v377;
      if ((_QWORD)v377)
      {
        do
        {
          v248 = (_QWORD *)*v247;
          operator delete(v247);
          v247 = v248;
        }
        while (v248);
      }
      v249 = (void *)v376;
      *(_QWORD *)&v376 = 0;
      if (v249)
        operator delete(v249);
      v250 = v353.f64[0];
      if (*(_QWORD *)&v353.f64[0])
      {
        do
        {
          v251 = **(_QWORD ***)&v250;
          operator delete(*(void **)&v250);
          v250 = *(double *)&v251;
        }
        while (v251);
      }
      v252 = __p.f64[0];
      __p.f64[0] = 0.0;
      if (v252 != 0.0)
        operator delete(*(void **)&v252);
      v253 = (_QWORD *)__token_16.__r_.__value_.__r.__words[0];
      if (__token_16.__r_.__value_.__r.__words[0])
      {
        do
        {
          v254 = (_QWORD *)*v253;
          operator delete(v253);
          v253 = v254;
        }
        while (v254);
      }
      v255 = *(double *)__token.i64;
      __token.i64[0] = 0;
      if (v255 != 0.0)
        operator delete(*(void **)&v255);
      __token = 0u;
      *(_OWORD *)&__token_16.__r_.__value_.__l.__data_ = 0u;
      LODWORD(__token_16.__r_.__value_.__r.__words[2]) = 1065353216;
      v256 = v334;
      if (v335 != v334)
      {
        v257 = 0;
        v258 = 0;
        do
        {
          *(_QWORD *)&__p.f64[0] = &v256[v257];
          sub_2395193BC((uint64_t)&__token, &v256[v257], (uint64_t)&unk_239EC6E98, &__p)[3] = v258++;
          v256 = v334;
          ++v257;
        }
        while (v258 < v335 - v334);
      }
      v259 = v340;
      if (v341 != v340)
      {
        v260 = 0;
        v261 = 0;
        v262 = v328;
        do
        {
          *(_QWORD *)&v376 = 0;
          v271 = &v259[v260];
          *(_QWORD *)&v376 = *(_QWORD *)v271;
          *(_QWORD *)&v373 = 0;
          *(_QWORD *)&v373 = *((_QWORD *)v271 + 1);
          v272 = v337[v261];
          *(_QWORD *)&__p.f64[0] = &v376;
          v273 = sub_2395193BC((uint64_t)&__token, (unint64_t *)&v376, (uint64_t)&unk_239EC6E98, &__p)[3];
          *(_QWORD *)&__p.f64[0] = &v373;
          if (v272
             * ((double)(unint64_t)sub_2395193BC((uint64_t)&__token, (unint64_t *)&v373, (uint64_t)&unk_239EC6E98, &__p)[3]- (double)v273) < 0.0)*v262 = fabs(v272) + *v262;
          ++v261;
          v259 = v340;
          v262 += 3;
          v260 += 16;
        }
        while (v261 < (v341 - v340) >> 4);
      }
      v312 = (_QWORD *)__token_16.__r_.__value_.__r.__words[0];
      if (__token_16.__r_.__value_.__r.__words[0])
      {
        do
        {
          v313 = (_QWORD *)*v312;
          operator delete(v312);
          v312 = v313;
        }
        while (v313);
      }
      v314 = *(double *)__token.i64;
      __token.i64[0] = 0;
      v6 = (unint64_t)v332;
      if (v314 != 0.0)
        operator delete(*(void **)&v314);
      if (v334)
        operator delete(v334);
      if (v337)
        operator delete(v337);
      if (v340)
        operator delete(v340);
      v113 += 24;
      if (v113 == v330)
        goto LABEL_358;
    }
    v158 = 0;
    v333 = v113;
    while (1)
    {
      _Q1 = *(_OWORD *)v156;
      _D3 = *((_QWORD *)v113 + 1);
      __asm { FMLA            D4, D3, V1.D[1] }
      v163 = _D4 + *(double *)(v156 + 16) * *((double *)v113 + 2);
      v164 = (char *)v360 + 16 * v158;
      v165 = v164 + 1;
      v166 = v341;
      if (v163 <= 0.0)
      {
        if (v341 >= v342)
        {
          v178 = v340;
          v179 = (v341 - v340) >> 4;
          v180 = v179 + 1;
          if ((unint64_t)(v179 + 1) >> 60)
LABEL_382:
            sub_2394189F8();
          v181 = v342 - v340;
          if ((v342 - v340) >> 3 > v180)
            v180 = v181 >> 3;
          if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF0)
            v182 = 0xFFFFFFFFFFFFFFFLL;
          else
            v182 = v180;
          if (v182 >> 60)
LABEL_381:
            sub_239418A80();
          v183 = (char *)operator new(16 * v182);
          v184 = &v183[16 * v179];
          *(_QWORD *)v184 = *v165;
          *((_QWORD *)v184 + 1) = *v164;
          if (v341 == v340)
          {
            v186 = &v183[16 * v179];
            v113 = v333;
          }
          else
          {
            v185 = &v183[16 * v179];
            v113 = v333;
            do
            {
              v186 = v185 - 16;
              *((_OWORD *)v185 - 1) = *((_OWORD *)v166 - 1);
              v166 -= 16;
              v185 -= 16;
            }
            while (v166 != v340);
          }
          v168 = v184 + 16;
          v340 = v186;
          v342 = &v183[16 * v182];
          if (v178)
          {
            operator delete(v178);
            v154 = (int64_t)v338;
          }
        }
        else
        {
          *(_QWORD *)v341 = *v165;
          *((_QWORD *)v341 + 1) = *v164;
          v168 = v341 + 16;
        }
        v341 = v168;
        v163 = -v163;
        if (v154 >= (unint64_t)v339)
        {
          v187 = v337;
          v197 = (v154 - (uint64_t)v337) >> 3;
          v198 = v197 + 1;
          if ((unint64_t)(v197 + 1) >> 61)
            sub_2394189F8();
          v199 = (char *)v339 - (char *)v337;
          if (((char *)v339 - (char *)v337) >> 2 > v198)
            v198 = v199 >> 2;
          if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8)
            v191 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v191 = v198;
          if (v191)
          {
            if (v191 >> 61)
              sub_239418A80();
            v192 = operator new(8 * v191);
          }
          else
          {
            v192 = 0;
          }
          v193 = (double *)&v192[8 * v197];
          *v193 = v163;
          v159 = v193 + 1;
          if ((double *)v154 != v337)
          {
            v200 = v154 - 8 - (_QWORD)v337;
            if (v200 < 0x168)
            {
              v201 = (double *)v154;
              goto LABEL_217;
            }
            if (&v192[v154 - (_QWORD)v337 - 8 - (v200 & 0xFFFFFFFFFFFFFFF8)] > &v192[v154 - (_QWORD)v337 - 8])
            {
              v201 = (double *)v154;
              goto LABEL_217;
            }
            if (v154 - 8 - (v200 & 0xFFFFFFFFFFFFFFF8) > v154 - 8)
            {
              v201 = (double *)v154;
              goto LABEL_217;
            }
            if ((unint64_t)((char *)v337 - v192) < 0x20)
            {
              v201 = (double *)v154;
              goto LABEL_217;
            }
            v208 = (v200 >> 3) + 1;
            v201 = (double *)(v154 - 8 * (v208 & 0x3FFFFFFFFFFFFFFCLL));
            v209 = &v192[8 * v197 - 16];
            v210 = (double *)(v154 - 16);
            v211 = v208 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v212 = *(_OWORD *)v210;
              *(v209 - 1) = *((_OWORD *)v210 - 1);
              *v209 = v212;
              v209 -= 2;
              v210 -= 4;
              v211 -= 4;
            }
            while (v211);
            v193 -= v208 & 0x3FFFFFFFFFFFFFFCLL;
            if (v208 != (v208 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_217:
                v202 = *((_QWORD *)v201-- - 1);
                *((_QWORD *)v193-- - 1) = v202;
              }
              while (v201 != v337);
            }
          }
LABEL_218:
          v337 = v193;
          v339 = (double *)&v192[8 * v191];
          if (v187)
            operator delete(v187);
          goto LABEL_153;
        }
      }
      else
      {
        if (v341 >= v342)
        {
          v169 = v340;
          v170 = (v341 - v340) >> 4;
          v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 60)
            goto LABEL_382;
          v172 = v342 - v340;
          if ((v342 - v340) >> 3 > v171)
            v171 = v172 >> 3;
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFF0)
            v173 = 0xFFFFFFFFFFFFFFFLL;
          else
            v173 = v171;
          if (v173 >> 60)
            goto LABEL_381;
          v174 = (char *)operator new(16 * v173);
          v175 = &v174[16 * v170];
          *(_QWORD *)v175 = *v164;
          *((_QWORD *)v175 + 1) = *v165;
          if (v341 == v340)
          {
            v177 = &v174[16 * v170];
            v113 = v333;
          }
          else
          {
            v176 = &v174[16 * v170];
            v113 = v333;
            do
            {
              v177 = v176 - 16;
              *((_OWORD *)v176 - 1) = *((_OWORD *)v166 - 1);
              v166 -= 16;
              v176 -= 16;
            }
            while (v166 != v340);
          }
          v167 = v175 + 16;
          v340 = v177;
          v342 = &v174[16 * v173];
          if (v169)
          {
            operator delete(v169);
            v154 = (int64_t)v338;
          }
        }
        else
        {
          *(_QWORD *)v341 = *v164;
          *((_QWORD *)v341 + 1) = *v165;
          v167 = v341 + 16;
        }
        v341 = v167;
        if (v154 >= (unint64_t)v339)
        {
          v187 = v337;
          v188 = (v154 - (uint64_t)v337) >> 3;
          v189 = v188 + 1;
          if ((unint64_t)(v188 + 1) >> 61)
            sub_2394189F8();
          v190 = (char *)v339 - (char *)v337;
          if (((char *)v339 - (char *)v337) >> 2 > v189)
            v189 = v190 >> 2;
          if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8)
            v191 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v191 = v189;
          if (v191)
          {
            if (v191 >> 61)
              goto LABEL_381;
            v192 = operator new(8 * v191);
            v113 = v333;
          }
          else
          {
            v192 = 0;
          }
          v193 = (double *)&v192[8 * v188];
          *v193 = v163;
          v159 = v193 + 1;
          if ((double *)v154 == v337)
            goto LABEL_218;
          v194 = v154 - 8 - (_QWORD)v337;
          if (v194 >= 0x168)
          {
            if (&v192[v154 - (_QWORD)v337 - 8 - (v194 & 0xFFFFFFFFFFFFFFF8)] > &v192[v154 - (_QWORD)v337 - 8])
            {
              v195 = (double *)v154;
            }
            else if (v154 - 8 - (v194 & 0xFFFFFFFFFFFFFFF8) > v154 - 8)
            {
              v195 = (double *)v154;
            }
            else if ((unint64_t)((char *)v337 - v192) >= 0x20)
            {
              v203 = (v194 >> 3) + 1;
              v195 = (double *)(v154 - 8 * (v203 & 0x3FFFFFFFFFFFFFFCLL));
              v204 = &v192[8 * v188 - 16];
              v205 = (double *)(v154 - 16);
              v206 = v203 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v207 = *(_OWORD *)v205;
                *(v204 - 1) = *((_OWORD *)v205 - 1);
                *v204 = v207;
                v204 -= 2;
                v205 -= 4;
                v206 -= 4;
              }
              while (v206);
              v193 -= v203 & 0x3FFFFFFFFFFFFFFCLL;
              if (v203 == (v203 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_218;
            }
            else
            {
              v195 = (double *)v154;
            }
          }
          else
          {
            v195 = (double *)v154;
          }
          do
          {
            v196 = *((_QWORD *)v195-- - 1);
            *((_QWORD *)v193-- - 1) = v196;
          }
          while (v195 != v337);
          goto LABEL_218;
        }
      }
      *(double *)v154 = v163;
      v159 = (double *)(v154 + 8);
LABEL_153:
      v338 = v159;
      ++v158;
      v156 += 24;
      v154 = (int64_t)v159;
      if ((char *)v156 == v157)
        goto LABEL_240;
    }
  }
LABEL_358:
  v315 = (uint64_t)&v324[-v6] / 24;
  v316 = 126 - 2 * __clz(v315);
  if (v324 == (char *)v6)
    v317 = 0;
  else
    v317 = v316;
  sub_239C54E80(v6, (unint64_t)v324, v317, 1);
  if (v324 != (char *)v6)
  {
    if (v315 <= 1)
      v315 = 1;
    v318 = v332 + 2;
    do
    {
      if (*v318 / (double)(0xAAAAAAAAAAAAAAABLL * ((v350 - (_BYTE *)v349) >> 3)) > 0.15)
      {
        v319 = *((_QWORD *)v318 - 2);
        v320 = *((_QWORD *)v318 - 1);
        if (sub_239C50CE4(v331, v319, v320)[1] < a2 && sub_239AF2B88(v331, v319, v320))
        {
          sub_239C51B24((uint64_t *)(*v331 + 40 * v319), v320);
          sub_239C51B24((uint64_t *)(*v331 + 40 * v320), v319);
        }
      }
      v318 += 3;
      --v315;
    }
    while (v315);
  }
  kdebug_trace();
  if (v349)
  {
    v350 = (char *)v349;
    operator delete(v349);
  }
  if (v332)
    operator delete(v332);
  if (__sz)
  {
    v358 = (char *)__sz;
    operator delete((void *)__sz);
  }
  if (v360)
  {
    v361 = (unint64_t)v360;
    operator delete(v360);
  }
  if (v363)
  {
    v364 = v363;
    operator delete(v363);
  }
}

void sub_239C54B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)STACK[0xA98];
  if (STACK[0xA98])
  {
    STACK[0xAA0] = (unint64_t)v3;
    operator delete(v3);
  }
  if (v1)
  {
    operator delete(v1);
    v4 = (void *)STACK[0xAF8];
    if (!STACK[0xAF8])
    {
LABEL_5:
      v5 = (void *)STACK[0xB10];
      if (!STACK[0xB10])
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else
  {
    v4 = (void *)STACK[0xAF8];
    if (!STACK[0xAF8])
      goto LABEL_5;
  }
  STACK[0xB00] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0xB10];
  if (!STACK[0xB10])
  {
LABEL_6:
    v6 = (void *)STACK[0xB28];
    if (!STACK[0xB28])
      goto LABEL_7;
    goto LABEL_11;
  }
LABEL_10:
  STACK[0xB18] = (unint64_t)v5;
  operator delete(v5);
  v6 = (void *)STACK[0xB28];
  if (!STACK[0xB28])
LABEL_7:
    _Unwind_Resume(a1);
LABEL_11:
  STACK[0xB30] = (unint64_t)v6;
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_239C54E80(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  double v17;
  uint64_t v18;
  double v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  double *v24;
  double v25;
  unint64_t v26;
  double v27;
  double *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  BOOL v34;
  unint64_t v35;
  double v36;
  double *v37;
  unint64_t v38;
  double v39;
  __int128 v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  double v59;
  __int128 v60;
  _OWORD *v61;
  BOOL v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  double v67;
  double v68;
  __int128 v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;
  int64_t v73;
  int64_t v74;
  BOOL v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  double v79;
  double v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int64_t v85;
  int64_t v86;
  double v87;
  uint64_t v88;
  double v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  double v97;
  __int128 v98;
  unint64_t v99;
  _QWORD *v100;
  double v101;
  double v102;
  __int128 v103;
  _QWORD *v104;
  uint64_t v105;
  double v106;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v46 = *(double *)(a2 - 8);
        v47 = *(double *)(v8 + 16);
        if (v46 > v47)
        {
          v48 = *(double *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 24);
          *(double *)(a2 - 24) = v48;
          v49 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v49;
          *(double *)(v8 + 16) = v46;
          *(double *)(a2 - 8) = v47;
        }
        return result;
      case 3:
        return (uint64_t)sub_239C556B0((double *)v8, (double *)(v8 + 24), (double *)(a2 - 24));
      case 4:
        result = (uint64_t)sub_239C556B0((double *)v8, (double *)(v8 + 24), (double *)(v8 + 48));
        v50 = *(double *)(a2 - 8);
        v51 = *(double *)(v8 + 64);
        if (v50 > v51)
        {
          v52 = *(_QWORD *)(v8 + 48);
          *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v52;
          v53 = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v53;
          *(double *)(v8 + 64) = v50;
          *(double *)(a2 - 8) = v51;
          v54 = *(double *)(v8 + 64);
          v55 = *(double *)(v8 + 40);
          if (v54 > v55)
          {
            v56 = *(_QWORD *)(v8 + 48);
            v57 = *(_QWORD *)(v8 + 56);
            v58 = *(_OWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = v56;
            *(_QWORD *)(v8 + 32) = v57;
            *(_OWORD *)(v8 + 48) = v58;
            *(double *)(v8 + 40) = v54;
            *(double *)(v8 + 64) = v55;
            v59 = *(double *)(v8 + 16);
            if (v54 > v59)
            {
              v60 = *(_OWORD *)v8;
              *(_QWORD *)v8 = v56;
              *(_QWORD *)(v8 + 8) = v57;
              *(_OWORD *)(v8 + 24) = v60;
              *(double *)(v8 + 16) = v54;
              *(double *)(v8 + 40) = v59;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)sub_239C557BC(v8, v8 + 24, v8 + 48, (double *)(v8 + 72), (double *)(a2 - 24));
      default:
        if (v9 <= 575)
        {
          v61 = (_OWORD *)(v8 + 24);
          v63 = v8 == a2 || v61 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v63)
            {
              v64 = 0;
              v65 = (_OWORD *)v8;
              do
              {
                v67 = *((double *)v65 + 5);
                v68 = *((double *)v65 + 2);
                v65 = v61;
                if (v67 > v68)
                {
                  v69 = *v61;
                  v70 = v64;
                  do
                  {
                    v71 = (double *)(v8 + v70);
                    v72 = *(_QWORD *)(v8 + v70 + 8);
                    v71[3] = *(double *)(v8 + v70);
                    *((_QWORD *)v71 + 4) = v72;
                    v71[5] = *(double *)(v8 + v70 + 16);
                    if (!v70)
                    {
                      v66 = v8;
                      goto LABEL_73;
                    }
                    v70 -= 24;
                  }
                  while (v67 > *(v71 - 1));
                  v66 = v8 + v70 + 24;
LABEL_73:
                  *(_OWORD *)v66 = v69;
                  *(double *)(v66 + 16) = v67;
                }
                v61 = (_OWORD *)((char *)v65 + 24);
                v64 += 24;
              }
              while ((_OWORD *)((char *)v65 + 24) != (_OWORD *)a2);
            }
          }
          else if (!v63)
          {
            v100 = (_QWORD *)(v8 + 16);
            do
            {
              v101 = *(double *)(v7 + 40);
              v102 = *(double *)(v7 + 16);
              v7 = (uint64_t)v61;
              if (v101 > v102)
              {
                v103 = *v61;
                v104 = v100;
                do
                {
                  v105 = *(v104 - 1);
                  v104[1] = *(v104 - 2);
                  v104[2] = v105;
                  v104[3] = *v104;
                  v106 = *((double *)v104 - 3);
                  v104 -= 3;
                }
                while (v101 > v106);
                *(_OWORD *)(v104 + 1) = v103;
                *((double *)v104 + 3) = v101;
              }
              v61 = (_OWORD *)(v7 + 24);
              v100 += 3;
            }
            while (v7 + 24 != a2);
          }
          return result;
        }
        if (a3)
        {
          v11 = (unint64_t)v10 >> 1;
          v12 = v8 + 24 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 >= 0xC01)
          {
            sub_239C556B0((double *)v7, (double *)(v7 + 24 * v11), (double *)(a2 - 24));
            v13 = 24 * v11;
            v14 = (double *)(24 * v11 + v7 - 24);
            sub_239C556B0((double *)(v7 + 24), v14, (double *)(a2 - 48));
            v15 = (double *)(v7 + 24 + v13);
            sub_239C556B0((double *)(v7 + 48), v15, (double *)(a2 - 72));
            result = (uint64_t)sub_239C556B0(v14, (double *)v12, v15);
            v16 = *(_OWORD *)v7;
            *(_OWORD *)v7 = *(_OWORD *)v12;
            *(_OWORD *)v12 = v16;
            *(_QWORD *)&v16 = *(_QWORD *)(v7 + 16);
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v12 + 16);
            *(_QWORD *)(v12 + 16) = v16;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v17 = *(double *)(v7 + 16);
            if (*(double *)(v7 - 8) > v17)
              goto LABEL_15;
            if (v17 <= *(double *)(a2 - 8))
            {
              v35 = v7 + 24;
              do
              {
                v8 = v35;
                if (v35 >= a2)
                  break;
                v36 = *(double *)(v35 + 16);
                v35 += 24;
              }
              while (v17 <= v36);
            }
            else
            {
              v18 = v7;
              do
              {
                v8 = v18 + 24;
                v19 = *(double *)(v18 + 40);
                v18 += 24;
              }
              while (v17 <= v19);
            }
            v37 = (double *)a2;
            if (v8 < a2)
            {
              v38 = a2;
              do
              {
                v37 = (double *)(v38 - 24);
                v39 = *(double *)(v38 - 8);
                v38 -= 24;
              }
              while (v17 > v39);
            }
            v40 = *(_OWORD *)v7;
            while (v8 < (unint64_t)v37)
            {
              v41 = *(double *)v8;
              *(double *)v8 = *v37;
              *v37 = v41;
              v42 = *(_QWORD *)(v8 + 8);
              *(double *)(v8 + 8) = v37[1];
              *((_QWORD *)v37 + 1) = v42;
              v43 = *(_QWORD *)(v8 + 16);
              *(double *)(v8 + 16) = v37[2];
              *((_QWORD *)v37 + 2) = v43;
              do
              {
                v44 = *(double *)(v8 + 40);
                v8 += 24;
              }
              while (v17 <= v44);
              do
              {
                v45 = *(v37 - 1);
                v37 -= 3;
              }
              while (v17 > v45);
            }
            if (v8 - 24 != v7)
            {
              *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 16);
              *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 - 8);
            }
            a4 = 0;
            *(_OWORD *)(v8 - 24) = v40;
            *(double *)(v8 - 8) = v17;
            continue;
          }
          result = (uint64_t)sub_239C556B0((double *)(v7 + 24 * v11), (double *)v7, (double *)(a2 - 24));
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v17 = *(double *)(v7 + 16);
LABEL_15:
          v20 = *(_OWORD *)v7;
          v21 = v7;
          do
          {
            v22 = v21;
            v21 += 24;
          }
          while (*(double *)(v22 + 40) > v17);
          v23 = a2;
          if (v22 == v7)
          {
            v26 = a2;
            while (v21 < v26)
            {
              v24 = (double *)(v26 - 24);
              v27 = *(double *)(v26 - 8);
              v26 -= 24;
              if (v27 > v17)
                goto LABEL_25;
            }
            v24 = (double *)v26;
          }
          else
          {
            do
            {
              v24 = (double *)(v23 - 24);
              v25 = *(double *)(v23 - 8);
              v23 -= 24;
            }
            while (v25 <= v17);
          }
LABEL_25:
          v8 = v21;
          if (v21 < (unint64_t)v24)
          {
            v28 = v24;
            do
            {
              v29 = *(double *)v8;
              *(double *)v8 = *v28;
              *v28 = v29;
              v30 = *(_QWORD *)(v8 + 8);
              *(double *)(v8 + 8) = v28[1];
              *((_QWORD *)v28 + 1) = v30;
              v31 = *(_QWORD *)(v8 + 16);
              *(double *)(v8 + 16) = v28[2];
              *((_QWORD *)v28 + 2) = v31;
              do
              {
                v32 = *(double *)(v8 + 40);
                v8 += 24;
              }
              while (v32 > v17);
              do
              {
                v33 = *(v28 - 1);
                v28 -= 3;
              }
              while (v33 <= v17);
            }
            while (v8 < (unint64_t)v28);
          }
          if (v8 - 24 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 24);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 - 8);
          }
          *(_OWORD *)(v8 - 24) = v20;
          *(double *)(v8 - 8) = v17;
          if (v21 < (unint64_t)v24)
            goto LABEL_36;
          v34 = sub_239C55984(v7, v8 - 24);
          result = sub_239C55984(v8, a2);
          if (!(_DWORD)result)
          {
            if (v34)
              continue;
LABEL_36:
            result = sub_239C54E80(v7, v8 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v8 - 24;
          if (v34)
            return result;
          goto LABEL_2;
        }
        if (v8 != a2)
        {
          v73 = (unint64_t)(v10 - 2) >> 1;
          v74 = v73;
          do
          {
            if (v73 >= v74)
            {
              v76 = (2 * v74) | 1;
              v77 = v8 + 24 * v76;
              if (2 * v74 + 2 < v10 && *(double *)(v77 + 16) > *(double *)(v77 + 40))
              {
                v77 += 24;
                v76 = 2 * v74 + 2;
              }
              v78 = v8 + 24 * v74;
              v79 = *(double *)(v77 + 16);
              v80 = *(double *)(v78 + 16);
              if (v79 <= v80)
              {
                v81 = *(_OWORD *)v78;
                do
                {
                  v82 = v78;
                  v78 = v77;
                  *(_QWORD *)v82 = *(_QWORD *)v77;
                  *(_QWORD *)(v82 + 8) = *(_QWORD *)(v77 + 8);
                  *(double *)(v82 + 16) = v79;
                  if (v73 < v76)
                    break;
                  v83 = 2 * v76;
                  v76 = (2 * v76) | 1;
                  v77 = v8 + 24 * v76;
                  v84 = v83 + 2;
                  if (v84 < v10 && *(double *)(v77 + 16) > *(double *)(v77 + 40))
                  {
                    v77 += 24;
                    v76 = v84;
                  }
                  v79 = *(double *)(v77 + 16);
                }
                while (v79 <= v80);
                *(_OWORD *)v78 = v81;
                *(double *)(v78 + 16) = v80;
              }
            }
            v75 = v74-- <= 0;
          }
          while (!v75);
          v85 = v9 / 0x18uLL;
          do
          {
            v86 = 0;
            v87 = *(double *)v8;
            v88 = *(_QWORD *)(v8 + 8);
            v89 = *(double *)(v8 + 16);
            v90 = v8;
            do
            {
              v91 = (_QWORD *)v90;
              v90 += 24 * v86 + 24;
              v92 = 2 * v86;
              result = (2 * v86) | 1;
              v86 = result;
              v93 = v92 + 2;
              if (v93 < v85 && *(double *)(v90 + 16) > *(double *)(v90 + 40))
              {
                v90 += 24;
                v86 = v93;
              }
              *v91 = *(_QWORD *)v90;
              v91[1] = *(_QWORD *)(v90 + 8);
              v91[2] = *(_QWORD *)(v90 + 16);
            }
            while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
            if (v90 == a2 - 24)
            {
              *(double *)v90 = v87;
              *(_QWORD *)(v90 + 8) = v88;
            }
            else
            {
              *(_QWORD *)v90 = *(_QWORD *)(a2 - 24);
              *(_QWORD *)(v90 + 8) = *(_QWORD *)(a2 - 16);
              *(_QWORD *)(v90 + 16) = *(_QWORD *)(a2 - 8);
              *(double *)(a2 - 24) = v87;
              *(_QWORD *)(a2 - 16) = v88;
              *(double *)(a2 - 8) = v89;
              v94 = v90 - v8 + 24;
              if (v94 < 25)
                goto LABEL_98;
              v95 = (v94 / 0x18uLL - 2) >> 1;
              v96 = v8 + 24 * v95;
              v97 = *(double *)(v96 + 16);
              v89 = *(double *)(v90 + 16);
              if (v97 <= v89)
                goto LABEL_98;
              v98 = *(_OWORD *)v90;
              do
              {
                v99 = v90;
                v90 = v96;
                *(_QWORD *)v99 = *(_QWORD *)v96;
                *(_QWORD *)(v99 + 8) = *(_QWORD *)(v96 + 8);
                *(double *)(v99 + 16) = v97;
                if (!v95)
                  break;
                v95 = (v95 - 1) >> 1;
                v96 = v8 + 24 * v95;
                v97 = *(double *)(v96 + 16);
              }
              while (v97 > v89);
              *(_OWORD *)v90 = v98;
            }
            *(double *)(v90 + 16) = v89;
LABEL_98:
            a2 -= 24;
            v75 = v85-- <= 2;
          }
          while (!v75);
        }
        return result;
    }
  }
}

double *sub_239C556B0(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t v17;

  v3 = a2[2];
  v4 = result[2];
  v5 = a3[2];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v8 = *a2;
      *a2 = *a3;
      *a3 = v8;
      v9 = *((_QWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_QWORD *)a3 + 1) = v9;
      a2[2] = v5;
      a3[2] = v3;
      v10 = a2[2];
      v11 = result[2];
      if (v10 > v11)
      {
        v12 = *result;
        *result = *a2;
        *a2 = v12;
        v13 = *((_QWORD *)result + 1);
        result[1] = a2[1];
        *((_QWORD *)a2 + 1) = v13;
        result[2] = v10;
        a2[2] = v11;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      *a2 = v6;
      v14 = *((_QWORD *)result + 1);
      result[1] = a2[1];
      *((_QWORD *)a2 + 1) = v14;
      result[2] = v3;
      a2[2] = v4;
      v15 = a3[2];
      if (v15 <= v4)
        return result;
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *((_QWORD *)a2 + 1);
      a2[1] = a3[1];
      *((_QWORD *)a3 + 1) = v17;
      a2[2] = v15;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      v7 = *((_QWORD *)result + 1);
      result[1] = a3[1];
      *((_QWORD *)a3 + 1) = v7;
      result[2] = v5;
    }
    a3[2] = v4;
  }
  return result;
}

double *sub_239C557BC(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5)
{
  double *result;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;

  result = sub_239C556B0((double *)a1, (double *)a2, (double *)a3);
  v11 = a4[2];
  v12 = *(double *)(a3 + 16);
  if (v11 > v12)
  {
    v13 = *(double *)a3;
    *(double *)a3 = *a4;
    *a4 = v13;
    v14 = *(_QWORD *)(a3 + 8);
    *(double *)(a3 + 8) = a4[1];
    *((_QWORD *)a4 + 1) = v14;
    *(double *)(a3 + 16) = v11;
    a4[2] = v12;
    v15 = *(double *)(a3 + 16);
    v16 = *(double *)(a2 + 16);
    if (v15 > v16)
    {
      v17 = *(double *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(double *)a3 = v17;
      v18 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v18;
      *(double *)(a2 + 16) = v15;
      *(double *)(a3 + 16) = v16;
      v19 = *(double *)(a2 + 16);
      v20 = *(double *)(a1 + 16);
      if (v19 > v20)
      {
        v21 = *(double *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(double *)a2 = v21;
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v22;
        *(double *)(a1 + 16) = v19;
        *(double *)(a2 + 16) = v20;
      }
    }
  }
  v23 = a5[2];
  v24 = a4[2];
  if (v23 > v24)
  {
    v25 = *a4;
    *a4 = *a5;
    *a5 = v25;
    v26 = *((_QWORD *)a4 + 1);
    a4[1] = a5[1];
    *((_QWORD *)a5 + 1) = v26;
    a4[2] = v23;
    a5[2] = v24;
    v27 = a4[2];
    v28 = *(double *)(a3 + 16);
    if (v27 > v28)
    {
      v29 = *(double *)a3;
      *(double *)a3 = *a4;
      *a4 = v29;
      v30 = *(_QWORD *)(a3 + 8);
      *(double *)(a3 + 8) = a4[1];
      *((_QWORD *)a4 + 1) = v30;
      *(double *)(a3 + 16) = v27;
      a4[2] = v28;
      v31 = *(double *)(a3 + 16);
      v32 = *(double *)(a2 + 16);
      if (v31 > v32)
      {
        v33 = *(double *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(double *)a3 = v33;
        v34 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v34;
        *(double *)(a2 + 16) = v31;
        *(double *)(a3 + 16) = v32;
        v35 = *(double *)(a2 + 16);
        v36 = *(double *)(a1 + 16);
        if (v35 > v36)
        {
          v37 = *(double *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(double *)a2 = v37;
          v38 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v38;
          *(double *)(a1 + 16) = v35;
          *(double *)(a2 + 16) = v36;
        }
      }
    }
  }
  return result;
}

BOOL sub_239C55984(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  double v29;
  __int128 v30;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(double *)(a2 - 8);
      v7 = *(double *)(a1 + 16);
      if (v6 > v7)
      {
        v8 = *(double *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(double *)(a2 - 24) = v8;
        v9 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v9;
        *(double *)(a1 + 16) = v6;
        *(double *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_239C556B0((double *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_239C556B0((double *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      v20 = *(double *)(a2 - 8);
      v21 = *(double *)(a1 + 64);
      if (v20 > v21)
      {
        v22 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v22;
        v23 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v23;
        *(double *)(a1 + 64) = v20;
        *(double *)(a2 - 8) = v21;
        v24 = *(double *)(a1 + 64);
        v25 = *(double *)(a1 + 40);
        if (v24 > v25)
        {
          v26 = *(_QWORD *)(a1 + 48);
          v27 = *(_QWORD *)(a1 + 56);
          v28 = *(_OWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v26;
          *(_QWORD *)(a1 + 32) = v27;
          *(_OWORD *)(a1 + 48) = v28;
          *(double *)(a1 + 40) = v24;
          *(double *)(a1 + 64) = v25;
          v29 = *(double *)(a1 + 16);
          if (v24 > v29)
          {
            v30 = *(_OWORD *)a1;
            *(_QWORD *)a1 = v26;
            *(_QWORD *)(a1 + 8) = v27;
            *(_OWORD *)(a1 + 24) = v30;
            *(double *)(a1 + 16) = v24;
            *(double *)(a1 + 40) = v29;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_239C557BC(a1, a1 + 24, a1 + 48, (double *)(a1 + 72), (double *)(a2 - 24));
      return 1;
    default:
      v10 = a1 + 48;
      sub_239C556B0((double *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v11 + 16);
    if (v15 > *(double *)(v10 + 16))
    {
      v16 = *(_OWORD *)v11;
      v17 = v12;
      do
      {
        v18 = a1 + v17;
        v19 = *(_QWORD *)(a1 + v17 + 56);
        *(_QWORD *)(v18 + 72) = *(_QWORD *)(a1 + v17 + 48);
        *(_QWORD *)(v18 + 80) = v19;
        *(_QWORD *)(v18 + 88) = *(_QWORD *)(a1 + v17 + 64);
        if (v17 == -48)
        {
          v14 = a1;
          goto LABEL_7;
        }
        v17 -= 24;
      }
      while (v15 > *(double *)(v18 + 40));
      v14 = a1 + v17 + 72;
LABEL_7:
      *(_OWORD *)v14 = v16;
      *(double *)(v14 + 16) = v15;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

void sub_239C55BA0(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t *v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  unsigned int *v11;
  unsigned int *v12;
  int *v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  char *v30;
  char *v31;
  char *v32;
  _BYTE *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  uint8x8_t v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  _BYTE *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  int *v65;
  char *v66;
  uint64_t v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  char v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  BOOL v84;
  int *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  float64x2_t *v96;
  float64x2_t *v97;
  unsigned int v98;
  double v99;
  int *v100;
  unint64_t v101;
  uint8x8_t v102;
  unint64_t v103;
  int *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t **v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  float64x2_t *v111;
  double v112;
  float64x2_t *v113;
  float64x2_t v114;
  double v120;
  char *v121;
  char *v122;
  int64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  char *v130;
  char *v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  float64x2_t *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  float64x2_t *v141;
  void *v142;
  uint64_t v143;
  _OWORD *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  double v151;
  double v152;
  int v153;
  double *v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double *v184;
  double v185;
  double v186;
  double v187;
  double v188;
  long double v189;
  long double v190;
  long double v191;
  long double v192;
  long double v193;
  long double v194;
  long double v195;
  long double v196;
  long double v197;
  long double v198;
  long double v199;
  long double v200;
  long double v201;
  long double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  __int128 v212;
  __int128 v213;
  uint64_t v214;
  void *v215;
  char *v216;
  char *v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  BOOL v221;
  unint64_t v222;
  int8x8_t v223;
  unint64_t v224;
  uint8x8_t v225;
  unint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint8x8_t v232;
  unint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  uint64_t v237;
  char *v238;
  unint64_t v239;
  int v240;
  double *v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double *v270;
  double v271;
  double v272;
  double v273;
  double v274;
  long double v275;
  long double v276;
  long double v277;
  long double v278;
  long double v279;
  long double v280;
  long double v281;
  long double v282;
  long double v283;
  long double v284;
  long double v285;
  long double v286;
  long double v287;
  long double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  float64x2_t v299;
  double v300;
  int8x16_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  __int128 v308;
  char *v309;
  uint64_t v310;
  __int128 v311;
  char *v312;
  unint64_t v313;
  uint8x8_t v314;
  _QWORD **v315;
  unint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  uint64_t v319;
  float v320;
  float v321;
  _BOOL8 v322;
  unint64_t v323;
  unint64_t v324;
  size_t prime;
  unint64_t v326;
  uint8x8_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  unint64_t v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  char **v337;
  char *v338;
  char *v339;
  __int128 v340;
  uint64_t v341;
  char *v342;
  char *v343;
  unint64_t v344;
  char *v345;
  char *v346;
  __int128 v347;
  char *v348;
  __int128 v349;
  char *v350;
  char *v351;
  __int128 v352;
  _QWORD *v353;
  _QWORD *v354;
  void *v355;
  _QWORD *v356;
  _QWORD *v357;
  void *v358;
  uint64_t *v359;
  _QWORD *v360;
  uint64_t v361;
  int *v364;
  char *v365;
  double v366;
  unsigned int *v367;
  __int128 v368;
  unint64_t v369;
  int64_t v370;
  uint64_t v371;
  __int128 v372;
  uint64_t v373;
  uint64_t v374;
  int *v375;
  int *v376;
  int *v377;
  unsigned int *v379;
  int *v380;
  char *v381;
  int *v382;
  int *v383;
  char *v384;
  uint64_t v385;
  char *v386;
  unint64_t v387;
  void *v388;
  void *v389;
  uint64_t v390;
  void *__p;
  float64x2_t *v392;
  float64x2_t *v393;
  void *v394;
  char *v395;
  char *v396;
  void *v397;
  unsigned int *v398;
  uint64_t v399;
  void *v400[2];
  void *v401[2];
  int v402;
  __int128 v403;
  __int128 v404;
  int v405;
  unint64_t *v406;
  unint64_t *v407;
  uint64_t v408;
  unsigned int *v409;
  unsigned int *v410;
  uint64_t v411;

  v406 = 0;
  v407 = 0;
  v408 = 0;
  sub_239E24B10((uint64_t)a1, (uint64_t)&v406, 1);
  v7 = v406;
  v8 = v407;
  v403 = 0u;
  v404 = 0u;
  v405 = 1065353216;
  if (v406 == v407)
    goto LABEL_443;
  do
  {
    sub_239465800((uint64_t)&v403, v7, v7);
    ++v7;
  }
  while (v7 != v8);
  v9 = (_QWORD *)v404;
  *(_OWORD *)v400 = 0u;
  *(_OWORD *)v401 = 0u;
  v402 = 1065353216;
  if (!(_QWORD)v404)
    goto LABEL_443;
  v379 = (unsigned int *)(a2 + 16);
  v374 = a2;
  while (2)
  {
    v387 = v9[2];
    v10 = sub_239470FCC((uint64_t)a1, v387);
    if (*((_BYTE *)v10 + 232) != 2)
      goto LABEL_6;
    v397 = 0;
    v398 = 0;
    v399 = 0;
    sub_239C57DB8((uint64_t)a1, v387, (uint64_t)&v397, 1);
    v359 = v10;
    v360 = v9;
    v12 = (unsigned int *)v397;
    v11 = v398;
    if (v397 == v398)
    {
      v14 = 0;
      v13 = 0;
      goto LABEL_164;
    }
    v364 = 0;
    v13 = 0;
    v14 = 0;
    v367 = v398;
    while (2)
    {
      v15 = *v12;
      v16 = *a1;
      if (v15 >= (a1[1] - *a1) >> 6
        || (v15 != 0xFFFFFFFF ? (_ZF = *(_DWORD *)(v16 + (v15 << 6)) == -1) : (_ZF = 1), _ZF))
      {
        sub_239A444D4((uint64_t)"unknown file", 308, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v18 = v16 + (v15 << 6);
      if (*(_BYTE *)(v18 + 59) == 1)
        goto LABEL_11;
      v19 = a1[5];
      if (!v19)
        goto LABEL_452;
      v20 = *(_QWORD *)(v18 + 8);
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        v22 = v20;
        if (v19 <= v20)
          v22 = v20 % v19;
      }
      else
      {
        v22 = ((_DWORD)v19 - 1) & v20;
      }
      v23 = *(uint64_t ***)(a1[4] + 8 * v22);
      if (!v23 || (v24 = *v23) == 0)
      {
LABEL_452:
        sub_239A444D4((uint64_t)"unknown file", 642, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v21.u32[0] < 2uLL)
      {
        v25 = v19 - 1;
        while (1)
        {
          v27 = v24[1];
          if (v27 == v20)
          {
            if (*((_DWORD *)v24 + 4) == (_DWORD)v20)
              goto LABEL_38;
          }
          else if ((v27 & v25) != v22)
          {
            goto LABEL_452;
          }
          v24 = (uint64_t *)*v24;
          if (!v24)
            goto LABEL_452;
        }
      }
      while (1)
      {
        v26 = v24[1];
        if (v26 == v20)
          break;
        if (v26 >= v19)
          v26 %= v19;
        if (v26 != v22)
          goto LABEL_452;
LABEL_28:
        v24 = (uint64_t *)*v24;
        if (!v24)
          goto LABEL_452;
      }
      if (*((_DWORD *)v24 + 4) != (_DWORD)v20)
        goto LABEL_28;
LABEL_38:
      if (*((_BYTE *)v24 + 51) == 1)
        goto LABEL_11;
      v409 = 0;
      v410 = 0;
      v411 = 0;
      v385 = (int)v20;
      sub_239C580BC((uint64_t)a1, v20, (uint64_t)&v409);
      v394 = 0;
      v395 = 0;
      v396 = 0;
      v28 = v409;
      v29 = v410;
      if (v409 == v410)
      {
        v33 = 0;
        v32 = 0;
        goto LABEL_121;
      }
      v30 = 0;
      v31 = 0;
      v32 = 0;
      while (2)
      {
        v35 = *v28;
        v36 = *a1;
        if (v35 >= (a1[1] - *a1) >> 6
          || (v35 != 0xFFFFFFFF ? (v37 = *(_DWORD *)(v36 + (v35 << 6)) == -1) : (v37 = 1), v37))
        {
          sub_239A444D4((uint64_t)"unknown file", 308, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v38 = a1[10];
        if (!v38)
          goto LABEL_451;
        v39 = *(_QWORD *)(v36 + (v35 << 6) + 16);
        v40 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
        v40.i16[0] = vaddlv_u8(v40);
        if (v40.u32[0] > 1uLL)
        {
          v41 = *(_QWORD *)(v36 + (v35 << 6) + 16);
          if (v38 <= v39)
            v41 = v39 % v38;
        }
        else
        {
          v41 = ((_DWORD)v38 - 1) & v39;
        }
        v42 = *(uint64_t ***)(a1[9] + 8 * v41);
        if (!v42 || (v43 = *v42) == 0)
        {
LABEL_451:
          sub_239A444D4((uint64_t)"unknown file", 779, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        if (v40.u32[0] < 2uLL)
        {
          v44 = v38 - 1;
          while (1)
          {
            v46 = v43[1];
            if (v46 == v39)
            {
              if (*((_DWORD *)v43 + 4) == (_DWORD)v39)
                goto LABEL_70;
            }
            else if ((v46 & v44) != v41)
            {
              goto LABEL_451;
            }
            v43 = (uint64_t *)*v43;
            if (!v43)
              goto LABEL_451;
          }
        }
        while (2)
        {
          v45 = v43[1];
          if (v45 != v39)
          {
            if (v45 >= v38)
              v45 %= v38;
            if (v45 != v41)
              goto LABEL_451;
            goto LABEL_60;
          }
          if (*((_DWORD *)v43 + 4) != (_DWORD)v39)
          {
LABEL_60:
            v43 = (uint64_t *)*v43;
            if (!v43)
              goto LABEL_451;
            continue;
          }
          break;
        }
LABEL_70:
        if (*(_BYTE *)(v36 + (v35 << 6) + 59) == 1 || *((_BYTE *)v43 + 256) != 2 || !*((_QWORD *)&v403 + 1))
          goto LABEL_44;
        v47 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v403 + 8));
        v47.i16[0] = vaddlv_u8(v47);
        if (v47.u32[0] > 1uLL)
        {
          v48 = *(_QWORD *)(v36 + (v35 << 6) + 16);
          if (v39 >= *((_QWORD *)&v403 + 1))
            v48 = v39 % *((_QWORD *)&v403 + 1);
        }
        else
        {
          v48 = (*((_QWORD *)&v403 + 1) - 1) & v39;
        }
        v49 = *(_QWORD **)(v403 + 8 * v48);
        if (!v49)
          goto LABEL_44;
        v50 = (_QWORD *)*v49;
        if (!v50)
          goto LABEL_44;
        if (v47.u32[0] < 2uLL)
        {
          while (1)
          {
            v52 = v50[1];
            if (v52 == v39)
            {
              if (v50[2] == v39)
                goto LABEL_93;
            }
            else if ((v52 & (*((_QWORD *)&v403 + 1) - 1)) != v48)
            {
              goto LABEL_44;
            }
            v50 = (_QWORD *)*v50;
            if (!v50)
              goto LABEL_44;
          }
        }
        while (2)
        {
          v51 = v50[1];
          if (v51 != v39)
          {
            if (v51 >= *((_QWORD *)&v403 + 1))
              v51 %= *((_QWORD *)&v403 + 1);
            if (v51 != v48)
              goto LABEL_44;
            goto LABEL_82;
          }
          if (v50[2] != v39)
          {
LABEL_82:
            v50 = (_QWORD *)*v50;
            if (!v50)
              goto LABEL_44;
            continue;
          }
          break;
        }
LABEL_93:
        if (v32 < v31)
        {
          *(_QWORD *)v32 = v39;
          v34 = v32 + 8;
          goto LABEL_43;
        }
        v380 = v13;
        v375 = v14;
        v53 = v32 - v30;
        v54 = (v32 - v30) >> 3;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          sub_2394189F8();
        if ((v31 - v30) >> 2 > v55)
          v55 = (v31 - v30) >> 2;
        if ((unint64_t)(v31 - v30) >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
        {
          v370 = v32 - v30;
          if (v56 >> 61)
            sub_239418A80();
          v57 = v32;
          v58 = v30;
          v59 = v56;
          v60 = operator new(8 * v56);
          v30 = v58;
          v32 = v57;
          v56 = v59;
          v53 = v370;
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[8 * v54];
        *(_QWORD *)v61 = v39;
        v34 = v61 + 8;
        if (v32 == v30)
        {
          v14 = v375;
          v13 = v380;
          goto LABEL_110;
        }
        v62 = v32 - 8 - v30;
        if (v62 < 0x168
          || &v60[v53 - 8 - (v62 & 0xFFFFFFFFFFFFFFF8)] > &v60[v53 - 8]
          || &v32[-(v62 & 0xFFFFFFFFFFFFFFF8) - 8] > v32 - 8
          || (unint64_t)(v32 - &v60[v53]) < 0x20)
        {
          v63 = v32;
          v14 = v375;
          v13 = v380;
          do
          {
LABEL_107:
            v64 = *((_QWORD *)v63 - 1);
            v63 -= 8;
            *((_QWORD *)v61 - 1) = v64;
            v61 -= 8;
          }
          while (v63 != v30);
          goto LABEL_110;
        }
        v67 = (v62 >> 3) + 1;
        v63 = &v32[-8 * (v67 & 0x3FFFFFFFFFFFFFFCLL)];
        v68 = &v60[8 * v54 - 16];
        v69 = v32 - 16;
        v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
        v14 = v375;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 4;
        }
        while (v70);
        v61 -= 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
        v13 = v380;
        if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_107;
LABEL_110:
        v31 = &v60[8 * v56];
        v394 = v61;
        v395 = v34;
        v396 = v31;
        if (v30)
        {
          v381 = v31;
          v65 = v14;
          v66 = v34;
          operator delete(v30);
          v34 = v66;
          v14 = v65;
          v31 = v381;
        }
        v30 = v61;
LABEL_43:
        v395 = v34;
        v32 = v34;
LABEL_44:
        v28 += 2;
        if (v28 != v29)
          continue;
        break;
      }
      v33 = v394;
LABEL_121:
      v72 = (v32 - v33) >> 3;
      if (v72 >= a3 && v72 <= a4)
      {
        if (v32 - v33 == 8)
        {
          v74 = 1;
        }
        else
        {
          v382 = v13;
          v376 = v14;
          v75 = 0;
          v76 = v72 - 1;
          if (v72 - 1 <= 1)
            v77 = 1;
          else
            v77 = v72 - 1;
          v361 = v77;
          v78 = (unint64_t *)(v33 + 8);
          v371 = (v32 - v33) >> 3;
          while (1)
          {
            v79 = v75 + 1;
            if (v75 + 1 < v72)
              break;
LABEL_131:
            ++v78;
            --v76;
            v75 = v79;
            v72 = v371;
            if (v79 == v361)
            {
              v74 = 1;
              v14 = v376;
              v13 = v382;
              goto LABEL_138;
            }
          }
          v80 = *(_QWORD *)&v33[8 * v75];
          v81 = v76;
          v82 = v78;
          while (1)
          {
            v83 = *v82++;
            if (!sub_239AF2B88(a1 + 29, v80, v83))
              break;
            if (!--v81)
              goto LABEL_131;
          }
          v74 = 0;
          v14 = v376;
          v13 = v382;
          v72 = v371;
        }
LABEL_138:
        v84 = *((_BYTE *)v24 + 51) == 2;
        if (v13 >= v364)
        {
          v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 3) + 1;
          if (v86 > 0xAAAAAAAAAAAAAAALL)
            sub_2394189F8();
          if (0x5555555555555556 * (((char *)v364 - (char *)v14) >> 3) > v86)
            v86 = 0x5555555555555556 * (((char *)v364 - (char *)v14) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v364 - (char *)v14) >> 3) >= 0x555555555555555)
            v87 = 0xAAAAAAAAAAAAAAALL;
          else
            v87 = v86;
          if (v87)
          {
            if (v87 > 0xAAAAAAAAAAAAAAALL)
              sub_239418A80();
            v88 = v72;
            v89 = (char *)operator new(24 * v87);
            v72 = v88;
          }
          else
          {
            v89 = 0;
          }
          v90 = &v89[8 * (((char *)v13 - (char *)v14) >> 3)];
          *(_QWORD *)v90 = v385;
          *((_QWORD *)v90 + 1) = v72;
          v90[16] = v74;
          v90[17] = v84;
          if (v13 == v14)
          {
            v14 = (int *)&v89[8 * (((char *)v13 - (char *)v14) >> 3)];
          }
          else
          {
            v91 = &v89[8 * (((char *)v13 - (char *)v14) >> 3)];
            do
            {
              v92 = *(_OWORD *)(v13 - 6);
              *((_QWORD *)v91 - 1) = *((_QWORD *)v13 - 1);
              *(_OWORD *)(v91 - 24) = v92;
              v91 -= 24;
              v13 -= 6;
            }
            while (v13 != v14);
            v13 = v14;
            v14 = (int *)v91;
          }
          v364 = (int *)&v89[24 * v87];
          v85 = (int *)(v90 + 24);
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v13 = v385;
          *((_QWORD *)v13 + 1) = v72;
          *((_BYTE *)v13 + 16) = v74;
          v85 = v13 + 6;
          *((_BYTE *)v13 + 17) = v84;
        }
        v33 = v394;
        v13 = v85;
      }
      if (v33)
      {
        v395 = v33;
        operator delete(v33);
      }
      if (v409)
      {
        v410 = v409;
        operator delete(v409);
      }
      a2 = v374;
      v11 = v367;
LABEL_11:
      v12 += 2;
      if (v12 != v11)
        continue;
      break;
    }
LABEL_164:
    v93 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 3));
    if (v13 == v14)
      v94 = 0;
    else
      v94 = v93;
    sub_239C583D0((unint64_t)v14, (unint64_t)v13, v94, 1);
    v394 = 0;
    v395 = 0;
    v396 = 0;
    __p = 0;
    v392 = 0;
    v393 = 0;
    if (v13 == v14)
      goto LABEL_435;
    v95 = 0;
    v386 = 0;
    v96 = 0;
    v97 = 0;
    v98 = *((_DWORD *)v359 + 51);
    if (v98 >= *((_DWORD *)v359 + 50))
      v98 = *((_DWORD *)v359 + 50);
    v99 = fmax((double)v98 * 0.01, 50.0);
    v100 = v14;
    v377 = v14;
    v101 = v387;
    v383 = v13;
    while (2)
    {
      v102 = (uint8x8_t)vcnt_s8((int8x8_t)v400[1]);
      v102.i16[0] = vaddlv_u8(v102);
      v103 = (unint64_t)v400[1] - 1;
      v104 = v100;
LABEL_172:
      v105 = *(_QWORD *)v104;
      if (v400[1])
      {
        if (v102.u32[0] > 1uLL)
        {
          v106 = (int)v105;
          if (v400[1] <= (void *)(int)v105)
            v106 = (int)v105 % (unint64_t)v400[1];
        }
        else
        {
          v106 = v103 & (int)v105;
        }
        v107 = (uint64_t **)*((_QWORD *)v400[0] + v106);
        if (!v107 || (v108 = *v107) == 0)
        {
LABEL_195:
          v100 = v104;
          goto LABEL_196;
        }
        if (v102.u32[0] < 2uLL)
        {
          while (1)
          {
            v109 = v108[1];
            if (v109 == (int)v105)
            {
              if (*((_DWORD *)v108 + 4) == (_DWORD)v105)
                goto LABEL_193;
            }
            else if ((v109 & v103) != v106)
            {
              goto LABEL_195;
            }
            v108 = (uint64_t *)*v108;
            if (!v108)
              goto LABEL_195;
          }
        }
        while (1)
        {
          v110 = v108[1];
          if (v110 == (int)v105)
          {
            if (*((_DWORD *)v108 + 4) == (_DWORD)v105)
            {
LABEL_193:
              v104 += 6;
              if (v104 == v13)
                goto LABEL_254;
              goto LABEL_172;
            }
          }
          else
          {
            if ((void *)v110 >= v400[1])
              v110 %= (unint64_t)v400[1];
            if (v110 != v106)
              goto LABEL_195;
          }
          v108 = (uint64_t *)*v108;
          if (!v108)
            goto LABEL_195;
        }
      }
LABEL_196:
      v111 = (float64x2_t *)(sub_239A6A0F0(a1, v101, v105) + 16);
      if (v97 == v96)
      {
        if (v99 < 1.79769313e308)
          goto LABEL_202;
LABEL_205:
        v122 = v386;
        goto LABEL_246;
      }
      v112 = 1.79769313e308;
      v113 = v97;
      do
      {
        v114 = *v113++;
        _D4 = vsubq_f64(v114, *v111).f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        v120 = sqrt(_D3);
        if (v120 < v112)
          v112 = v120;
      }
      while (v113 != v96);
      if (v112 <= v99)
        goto LABEL_205;
LABEL_202:
      if (v386 < v396)
      {
        *(_QWORD *)v386 = *(_QWORD *)v100;
        v121 = v386 + 8;
        goto LABEL_226;
      }
      v123 = v386 - v95;
      v124 = (v386 - v95) >> 3;
      v125 = v124 + 1;
      if ((unint64_t)(v124 + 1) >> 61)
        sub_2394189F8();
      v126 = v95;
      v127 = v396 - v95;
      if ((v396 - v95) >> 2 > v125)
        v125 = v127 >> 2;
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
        v128 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v128 = v125;
      if (v128)
      {
        if (!(v128 >> 61))
        {
          v129 = operator new(8 * v128);
          goto LABEL_216;
        }
LABEL_457:
        sub_239418A80();
      }
      v129 = 0;
LABEL_216:
      v130 = &v129[8 * v124];
      *(_QWORD *)v130 = *(_QWORD *)v100;
      v121 = v130 + 8;
      v131 = v126;
      if (v386 == v126)
      {
        a2 = v374;
        v14 = v377;
      }
      else
      {
        v132 = v386 - 8 - v126;
        if (v132 < 0x58)
        {
          v133 = v386;
          goto LABEL_222;
        }
        if ((unint64_t)(v386 - &v129[v123]) >= 0x20)
        {
          v143 = (v132 >> 3) + 1;
          v133 = &v386[-8 * (v143 & 0x3FFFFFFFFFFFFFFCLL)];
          v144 = &v129[8 * v124 - 16];
          v145 = v386 - 16;
          v146 = v143 & 0x3FFFFFFFFFFFFFFCLL;
          a2 = v374;
          do
          {
            v147 = *(_OWORD *)v145;
            *(v144 - 1) = *((_OWORD *)v145 - 1);
            *v144 = v147;
            v144 -= 2;
            v145 -= 32;
            v146 -= 4;
          }
          while (v146);
          v130 -= 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
          v14 = v377;
          v131 = v126;
          if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_223;
        }
        else
        {
          v133 = v386;
LABEL_222:
          a2 = v374;
          v14 = v377;
          v131 = v126;
          do
          {
LABEL_223:
            v134 = *((_QWORD *)v133 - 1);
            v133 -= 8;
            *((_QWORD *)v130 - 1) = v134;
            v130 -= 8;
          }
          while (v133 != v131);
        }
      }
      v394 = v130;
      v395 = v121;
      v396 = &v129[8 * v128];
      v13 = v383;
      if (v131)
      {
        operator delete(v131);
        v96 = v392;
      }
LABEL_226:
      v395 = v121;
      if (v96 >= v393)
      {
        v135 = (float64x2_t *)__p;
        v136 = ((char *)v96 - (_BYTE *)__p) >> 4;
        v137 = v136 + 1;
        if ((unint64_t)(v136 + 1) >> 60)
          sub_2394189F8();
        v138 = (char *)v393 - (_BYTE *)__p;
        if (((char *)v393 - (_BYTE *)__p) >> 3 > v137)
          v137 = v138 >> 3;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
          v139 = 0xFFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        if (v139)
        {
          if (v139 >> 60)
            goto LABEL_457;
          v140 = (char *)operator new(16 * v139);
          a2 = v374;
          v14 = v377;
          v13 = v383;
        }
        else
        {
          v140 = 0;
        }
        v141 = (float64x2_t *)&v140[16 * v136];
        *v141 = *v111;
        if (v96 == v135)
        {
          v142 = v96;
          v97 = (float64x2_t *)&v140[16 * v136];
        }
        else
        {
          v97 = (float64x2_t *)&v140[16 * v136];
          do
          {
            v97[-1] = v96[-1];
            --v97;
            --v96;
          }
          while (v96 != v135);
          v142 = __p;
        }
        v96 = v141 + 1;
        __p = v97;
        v392 = v141 + 1;
        v393 = (float64x2_t *)&v140[16 * v139];
        v101 = v387;
        if (v142)
          operator delete(v142);
      }
      else
      {
        *v96++ = *v111;
        v101 = v387;
      }
      v392 = v96;
      sub_239C59ACC((uint64_t)v400, *v100, *v100);
      v95 = (char *)v394;
      v122 = v395;
LABEL_246:
      v386 = v122;
      if (a5 > (v122 - v95) >> 3)
      {
        v100 += 6;
        if (v100 != v13)
          continue;
      }
      break;
    }
LABEL_254:
    if (v95 != v386)
    {
      v148 = *(_QWORD *)v95;
      v149 = sub_239A6A0F0(a1, v101, *(_QWORD *)v95);
      v150 = sub_2394650AC((uint64_t)a1, v101);
      v151 = -*((double *)v150 + 2) / *(double *)v150 + *(double *)(v149 + 16) * (1.0 / *(double *)v150);
      v152 = -*((double *)v150 + 3) / *((double *)v150 + 1) + *(double *)(v149 + 24) * (1.0 / *((double *)v150 + 1));
      v153 = *((unsigned __int8 *)v150 + 32);
      v384 = v95;
      if (v153 == 2)
      {
        v184 = (double *)v150[5];
        v185 = *v184;
        v186 = v184[1];
        v188 = v184[2];
        v187 = v184[3];
        v189 = sqrt(v152 * v152 + v151 * v151);
        v190 = atan2(v189, 1.0);
        v191 = v189
             / (v190
              + v185 * (v190 * (v190 * v190))
              + v186 * (v190 * v190 * (v190 * (v190 * v190)))
              + v188 * (v190 * v190 * (v190 * v190 * (v190 * (v190 * v190))))
              + v187 * (v190 * v190 * (v190 * v190 * (v190 * v190 * (v190 * (v190 * v190))))));
        v192 = sqrt(v152 * v191 * (v152 * v191) + v151 * v191 * (v151 * v191));
        v193 = atan2(v192, 1.0);
        v194 = v192
             / (v193
              + v185 * (v193 * (v193 * v193))
              + v186 * (v193 * v193 * (v193 * (v193 * v193)))
              + v188 * (v193 * v193 * (v193 * v193 * (v193 * (v193 * v193))))
              + v187 * (v193 * v193 * (v193 * v193 * (v193 * v193 * (v193 * (v193 * v193))))));
        v195 = sqrt(v152 * v194 * (v152 * v194) + v151 * v194 * (v151 * v194));
        v196 = atan2(v195, 1.0);
        v197 = v195
             / (v196
              + v185 * (v196 * (v196 * v196))
              + v186 * (v196 * v196 * (v196 * (v196 * v196)))
              + v188 * (v196 * v196 * (v196 * v196 * (v196 * (v196 * v196))))
              + v187 * (v196 * v196 * (v196 * v196 * (v196 * v196 * (v196 * (v196 * v196))))));
        v198 = sqrt(v152 * v197 * (v152 * v197) + v151 * v197 * (v151 * v197));
        v199 = atan2(v198, 1.0);
        v200 = v198
             / (v199
              + v185 * (v199 * (v199 * v199))
              + v186 * (v199 * v199 * (v199 * (v199 * v199)))
              + v188 * (v199 * v199 * (v199 * v199 * (v199 * (v199 * v199))))
              + v187 * (v199 * v199 * (v199 * v199 * (v199 * v199 * (v199 * (v199 * v199))))));
        v201 = sqrt(v152 * v200 * (v152 * v200) + v151 * v200 * (v151 * v200));
        v202 = atan2(v201, 1.0);
        v203 = v201
             / (v202
              + v185 * (v202 * (v202 * v202))
              + v186 * (v202 * v202 * (v202 * (v202 * v202)))
              + v188 * (v202 * v202 * (v202 * v202 * (v202 * (v202 * v202))))
              + v187 * (v202 * v202 * (v202 * v202 * (v202 * v202 * (v202 * (v202 * v202))))));
      }
      else
      {
        if (v153 != 1)
          goto LABEL_262;
        v154 = (double *)v150[5];
        v156 = *v154;
        v155 = v154[1];
        v157 = v154[2];
        v158 = v154[3];
        v159 = v154[4];
        v160 = v152 * v152;
        if (v158 * v158 + v159 * v159 > 2.22507386e-308)
        {
          v161 = v160 + v151 * v151;
          v162 = 1.0 / (v156 * v161 + 1.0 + v155 * (v161 * v161) + v157 * (v161 * (v161 * v161)));
          v163 = v162 * (v151 - (v159 * (v161 + (v151 + v151) * v151) + (v158 + v158) * (v151 * v152)));
          v164 = (v152 - ((v159 + v159) * (v151 * v152) + v158 * (v161 + (v152 + v152) * v152))) * v162;
          v165 = v164 * v164 + v163 * v163;
          v166 = 1.0 / (v156 * v165 + 1.0 + v155 * (v165 * v165) + v157 * (v165 * (v165 * v165)));
          v167 = v163 * v164;
          v168 = v159 * (v165 + (v163 + v163) * v163) + (v158 + v158) * (v163 * v164);
          v169 = (v159 + v159) * v167 + v158 * (v165 + (v164 + v164) * v164);
          v170 = v166 * (v151 - v168);
          v171 = (v152 - v169) * v166;
          v172 = v171 * v171 + v170 * v170;
          v173 = 1.0 / (v156 * v172 + 1.0 + v155 * (v172 * v172) + v157 * (v172 * (v172 * v172)));
          v174 = v170 * v171;
          v175 = v173 * (v151 - (v159 * (v172 + (v170 + v170) * v170) + (v158 + v158) * (v170 * v171)));
          v176 = (v152 - ((v159 + v159) * v174 + v158 * (v172 + (v171 + v171) * v171))) * v173;
          v177 = v176 * v176 + v175 * v175;
          v178 = 1.0 / (v156 * v177 + 1.0 + v155 * (v177 * v177) + v157 * (v177 * (v177 * v177)));
          v179 = v175 * v176;
          v180 = v178 * (v151 - (v159 * (v177 + (v175 + v175) * v175) + (v158 + v158) * (v175 * v176)));
          v181 = (v152 - ((v159 + v159) * v179 + v158 * (v177 + (v176 + v176) * v176))) * v178;
          v182 = v181 * v181 + v180 * v180;
          v183 = 1.0 / (v156 * v182 + 1.0 + v155 * (v182 * v182) + v157 * (v182 * (v182 * v182)));
          v151 = v183 * (v151 - (v159 * (v182 + (v180 + v180) * v180) + (v158 + v158) * (v180 * v181)));
          v152 = (v152 - ((v159 + v159) * (v180 * v181) + v158 * (v182 + (v181 + v181) * v181))) * v183;
          goto LABEL_262;
        }
        v204 = 1.0
             / (v156 * (v160 + v151 * v151)
              + 1.0
              + v155 * ((v160 + v151 * v151) * (v160 + v151 * v151))
              + v157 * ((v160 + v151 * v151) * ((v160 + v151 * v151) * (v160 + v151 * v151))));
        v205 = v152 * v204 * (v152 * v204) + v151 * v204 * (v151 * v204);
        v206 = 1.0 / (v156 * v205 + 1.0 + v155 * (v205 * v205) + v157 * (v205 * (v205 * v205)));
        v207 = v152 * v206 * (v152 * v206) + v151 * v206 * (v151 * v206);
        v208 = 1.0 / (v156 * v207 + 1.0 + v155 * (v207 * v207) + v157 * (v207 * (v207 * v207)));
        v209 = v152 * v208 * (v152 * v208) + v151 * v208 * (v151 * v208);
        v210 = 1.0 / (v156 * v209 + 1.0 + v155 * (v209 * v209) + v157 * (v209 * (v209 * v209)));
        v211 = v152 * v210 * (v152 * v210) + v151 * v210 * (v151 * v210);
        v203 = 1.0 / (v156 * v211 + 1.0 + v155 * (v211 * v211) + v157 * (v211 * (v211 * v211)));
      }
      v151 = v151 * v203;
      v152 = v152 * v203;
LABEL_262:
      v388 = 0;
      v389 = 0;
      v390 = 0;
      sub_239C580BC((uint64_t)a1, v148, (uint64_t)&v388);
      v214 = (uint64_t)v388;
      v215 = v389;
      if (v388 == v389)
      {
        v238 = 0;
        v218 = 0;
        goto LABEL_340;
      }
      v216 = 0;
      v217 = 0;
      v218 = 0;
LABEL_264:
      v219 = *(unsigned int *)v214;
      v220 = *a1;
      if (v219 >= (a1[1] - *a1) >> 6
        || (v219 != 0xFFFFFFFF ? (v221 = *(_DWORD *)(v220 + (v219 << 6)) == -1) : (v221 = 1), v221))
      {
        sub_239A444D4((uint64_t)"unknown file", 308, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v222 = *(_QWORD *)(v220 + (v219 << 6) + 16);
      if (v222 == v387)
      {
LABEL_312:
        v238 = v217;
        goto LABEL_313;
      }
      v223 = (int8x8_t)a1[10];
      if (!*(_QWORD *)&v223)
        goto LABEL_450;
      v224 = *(_QWORD *)(v220 + (v219 << 6) + 16);
      v225 = (uint8x8_t)vcnt_s8(v223);
      v225.i16[0] = vaddlv_u8(v225);
      if (v225.u32[0] > 1uLL)
      {
        v226 = *(_QWORD *)(v220 + (v219 << 6) + 16);
        if (*(_QWORD *)&v223 <= v224)
          v226 = v224 % *(_QWORD *)&v223;
      }
      else
      {
        v226 = (v223.i32[0] - 1) & v224;
      }
      v227 = *(uint64_t ***)(a1[9] + 8 * v226);
      if (!v227 || (v228 = *v227) == 0)
      {
LABEL_450:
        sub_239A444D4((uint64_t)"unknown file", 779, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v225.u32[0] < 2uLL)
      {
        v229 = *(_QWORD *)&v223 - 1;
        while (1)
        {
          v231 = v228[1];
          if (v231 == v224)
          {
            if (*((_DWORD *)v228 + 4) == (_DWORD)v222)
              goto LABEL_290;
          }
          else if ((v231 & v229) != v226)
          {
            goto LABEL_450;
          }
          v228 = (uint64_t *)*v228;
          if (!v228)
            goto LABEL_450;
        }
      }
      while (1)
      {
        v230 = v228[1];
        if (v230 == v224)
        {
          if (*((_DWORD *)v228 + 4) == (_DWORD)v222)
          {
LABEL_290:
            if (*(_BYTE *)(v220 + (v219 << 6) + 59) == 1 || *((_BYTE *)v228 + 256) != 2 || !*((_QWORD *)&v403 + 1))
              goto LABEL_312;
            v232 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v403 + 8));
            v232.i16[0] = vaddlv_u8(v232);
            if (v232.u32[0] > 1uLL)
            {
              v233 = *(_QWORD *)(v220 + (v219 << 6) + 16);
              if (v222 >= *((_QWORD *)&v403 + 1))
                v233 = v222 % *((_QWORD *)&v403 + 1);
            }
            else
            {
              v233 = (*((_QWORD *)&v403 + 1) - 1) & v222;
            }
            v234 = *(_QWORD **)(v403 + 8 * v233);
            if (!v234)
              goto LABEL_312;
            v235 = (_QWORD *)*v234;
            if (!v235)
              goto LABEL_312;
            if (v232.u32[0] < 2uLL)
            {
              while (1)
              {
                v237 = v235[1];
                if (v237 == v222)
                {
                  if (v235[2] == v222)
                    goto LABEL_315;
                }
                else if ((v237 & (*((_QWORD *)&v403 + 1) - 1)) != v233)
                {
                  goto LABEL_312;
                }
                v235 = (_QWORD *)*v235;
                if (!v235)
                  goto LABEL_312;
              }
            }
            while (2)
            {
              v236 = v235[1];
              if (v236 != v222)
              {
                if (v236 >= *((_QWORD *)&v403 + 1))
                  v236 %= *((_QWORD *)&v403 + 1);
                if (v236 != v233)
                  goto LABEL_312;
                goto LABEL_302;
              }
              if (v235[2] != v222)
              {
LABEL_302:
                v235 = (_QWORD *)*v235;
                if (!v235)
                  goto LABEL_312;
                continue;
              }
              break;
            }
LABEL_315:
            v239 = v220 + (v219 << 6);
            *(double *)&v212 = -*((double *)v228 + 5) / *((double *)v228 + 3)
                             + *(double *)(v239 + 24) * (1.0 / *((double *)v228 + 3));
            *(double *)&v213 = -*((double *)v228 + 6) / *((double *)v228 + 4)
                             + *(double *)(v239 + 32) * (1.0 / *((double *)v228 + 4));
            v240 = *((unsigned __int8 *)v228 + 56);
            if (v240 == 2)
            {
              v270 = (double *)v228[8];
              v271 = *v270;
              v272 = v270[1];
              v273 = v270[2];
              v274 = v270[3];
              v275 = sqrt(*(double *)&v213 * *(double *)&v213 + *(double *)&v212 * *(double *)&v212);
              v365 = v216;
              v368 = v213;
              v372 = v212;
              v276 = atan2(v275, 1.0);
              v277 = v275
                   / (v276
                    + v271 * (v276 * (v276 * v276))
                    + v272 * (v276 * v276 * (v276 * (v276 * v276)))
                    + v273 * (v276 * v276 * (v276 * v276 * (v276 * (v276 * v276))))
                    + v274 * (v276 * v276 * (v276 * v276 * (v276 * v276 * (v276 * (v276 * v276))))));
              v278 = sqrt(*(double *)&v368 * v277 * (*(double *)&v368 * v277)+ *(double *)&v372 * v277 * (*(double *)&v372 * v277));
              v279 = atan2(v278, 1.0);
              v280 = v278
                   / (v279
                    + v271 * (v279 * (v279 * v279))
                    + v272 * (v279 * v279 * (v279 * (v279 * v279)))
                    + v273 * (v279 * v279 * (v279 * v279 * (v279 * (v279 * v279))))
                    + v274 * (v279 * v279 * (v279 * v279 * (v279 * v279 * (v279 * (v279 * v279))))));
              v281 = sqrt(*(double *)&v368 * v280 * (*(double *)&v368 * v280)+ *(double *)&v372 * v280 * (*(double *)&v372 * v280));
              v282 = atan2(v281, 1.0);
              v283 = v281
                   / (v282
                    + v271 * (v282 * (v282 * v282))
                    + v272 * (v282 * v282 * (v282 * (v282 * v282)))
                    + v273 * (v282 * v282 * (v282 * v282 * (v282 * (v282 * v282))))
                    + v274 * (v282 * v282 * (v282 * v282 * (v282 * v282 * (v282 * (v282 * v282))))));
              v284 = sqrt(*(double *)&v368 * v283 * (*(double *)&v368 * v283)+ *(double *)&v372 * v283 * (*(double *)&v372 * v283));
              v285 = atan2(v284, 1.0);
              v286 = v284
                   / (v285
                    + v271 * (v285 * (v285 * v285))
                    + v272 * (v285 * v285 * (v285 * (v285 * v285)))
                    + v273 * (v285 * v285 * (v285 * v285 * (v285 * (v285 * v285))))
                    + v274 * (v285 * v285 * (v285 * v285 * (v285 * v285 * (v285 * (v285 * v285))))));
              v287 = sqrt(*(double *)&v368 * v286 * (*(double *)&v368 * v286)+ *(double *)&v372 * v286 * (*(double *)&v372 * v286));
              v288 = atan2(v287, 1.0);
              v213 = v368;
              v212 = v372;
              v216 = v365;
              v289 = v287
                   / (v288
                    + v271 * (v288 * (v288 * v288))
                    + v272 * (v288 * v288 * (v288 * (v288 * v288)))
                    + v273 * (v288 * v288 * (v288 * v288 * (v288 * (v288 * v288))))
                    + v274 * (v288 * v288 * (v288 * v288 * (v288 * v288 * (v288 * (v288 * v288))))));
              goto LABEL_321;
            }
            if (v240 == 1)
            {
              v241 = (double *)v228[8];
              v243 = *v241;
              v242 = v241[1];
              v244 = v241[2];
              v245 = v241[3];
              v246 = v241[4];
              if (v245 * v245 + v246 * v246 > 2.22507386e-308)
              {
                v247 = *(double *)&v213 * *(double *)&v213 + *(double *)&v212 * *(double *)&v212;
                v248 = 1.0 / (v243 * v247 + 1.0 + v242 * (v247 * v247) + v244 * (v247 * (v247 * v247)));
                v249 = v248
                     * (*(double *)&v212
                      - (v246 * (v247 + (*(double *)&v212 + *(double *)&v212) * *(double *)&v212)
                       + (v245 + v245) * (*(double *)&v212 * *(double *)&v213)));
                v250 = (*(double *)&v213
                      - ((v246 + v246) * (*(double *)&v212 * *(double *)&v213)
                       + v245 * (v247 + (*(double *)&v213 + *(double *)&v213) * *(double *)&v213)))
                     * v248;
                v251 = v250 * v250 + v249 * v249;
                v252 = 1.0 / (v243 * v251 + 1.0 + v242 * (v251 * v251) + v244 * (v251 * (v251 * v251)));
                v253 = v249 * v250;
                v254 = v246 * (v251 + (v249 + v249) * v249) + (v245 + v245) * (v249 * v250);
                v255 = (v246 + v246) * v253 + v245 * (v251 + (v250 + v250) * v250);
                v256 = v252 * (*(double *)&v212 - v254);
                v257 = (*(double *)&v213 - v255) * v252;
                v258 = v257 * v257 + v256 * v256;
                v259 = 1.0 / (v243 * v258 + 1.0 + v242 * (v258 * v258) + v244 * (v258 * (v258 * v258)));
                v260 = v256 * v257;
                v261 = v259
                     * (*(double *)&v212 - (v246 * (v258 + (v256 + v256) * v256) + (v245 + v245) * (v256 * v257)));
                v262 = (*(double *)&v213 - ((v246 + v246) * v260 + v245 * (v258 + (v257 + v257) * v257))) * v259;
                v263 = v262 * v262 + v261 * v261;
                v264 = 1.0 / (v243 * v263 + 1.0 + v242 * (v263 * v263) + v244 * (v263 * (v263 * v263)));
                v265 = v261 * v262;
                v266 = v264
                     * (*(double *)&v212 - (v246 * (v263 + (v261 + v261) * v261) + (v245 + v245) * (v261 * v262)));
                v267 = (*(double *)&v213 - ((v246 + v246) * v265 + v245 * (v263 + (v262 + v262) * v262))) * v264;
                v268 = v267 * v267 + v266 * v266;
                v269 = 1.0 / (v243 * v268 + 1.0 + v242 * (v268 * v268) + v244 * (v268 * (v268 * v268)));
                *(double *)&v212 = v269
                                 * (*(double *)&v212
                                  - (v246 * (v268 + (v266 + v266) * v266)
                                   + (v245 + v245) * (v266 * v267)));
                *(double *)&v213 = (*(double *)&v213
                                  - ((v246 + v246) * (v266 * v267)
                                   + v245 * (v268 + (v267 + v267) * v267)))
                                 * v269;
                goto LABEL_322;
              }
              v290 = *(double *)&v213 * *(double *)&v213 + *(double *)&v212 * *(double *)&v212;
              v291 = 1.0 / (v243 * v290 + 1.0 + v242 * (v290 * v290) + v244 * (v290 * (v290 * v290)));
              v292 = *(double *)&v213 * v291 * (*(double *)&v213 * v291)
                   + *(double *)&v212 * v291 * (*(double *)&v212 * v291);
              v293 = 1.0 / (v243 * v292 + 1.0 + v242 * (v292 * v292) + v244 * (v292 * (v292 * v292)));
              v294 = *(double *)&v213 * v293 * (*(double *)&v213 * v293)
                   + *(double *)&v212 * v293 * (*(double *)&v212 * v293);
              v295 = 1.0 / (v243 * v294 + 1.0 + v242 * (v294 * v294) + v244 * (v294 * (v294 * v294)));
              v296 = *(double *)&v213 * v295 * (*(double *)&v213 * v295)
                   + *(double *)&v212 * v295 * (*(double *)&v212 * v295);
              v297 = 1.0 / (v243 * v296 + 1.0 + v242 * (v296 * v296) + v244 * (v296 * (v296 * v296)));
              v298 = *(double *)&v213 * v297 * (*(double *)&v213 * v297)
                   + *(double *)&v212 * v297 * (*(double *)&v212 * v297);
              v289 = 1.0 / (v243 * v298 + 1.0 + v242 * (v298 * v298) + v244 * (v298 * (v298 * v298)));
LABEL_321:
              *(double *)&v212 = *(double *)&v212 * v289;
              *(double *)&v213 = *(double *)&v213 * v289;
            }
LABEL_322:
            *(_QWORD *)&v299.f64[0] = v212;
            *(_QWORD *)&v299.f64[1] = v213;
            v300 = 1.0 / sqrt(*(double *)&v212 * *(double *)&v212 + *(double *)&v213 * *(double *)&v213 + 1.0);
            v301 = (int8x16_t)vmulq_n_f64(v299, v300);
            v302 = vextq_s8(v301, v301, 8uLL).u64[0];
            if (v217 >= v216)
            {
              v303 = (v217 - v218) >> 5;
              v304 = v303 + 1;
              if ((unint64_t)(v303 + 1) >> 59)
                sub_2394189F8();
              v366 = v300;
              v369 = v302;
              v373 = v301.i64[0];
              if ((v216 - v218) >> 4 > v304)
                v304 = (v216 - v218) >> 4;
              if ((unint64_t)(v216 - v218) >= 0x7FFFFFFFFFFFFFE0)
                v305 = 0x7FFFFFFFFFFFFFFLL;
              else
                v305 = v304;
              if (v305 >> 59)
                sub_239418A80();
              v306 = (char *)operator new(32 * v305);
              v307 = &v306[32 * v303];
              *(_QWORD *)v307 = v222;
              *((double *)v307 + 3) = v366;
              *(_QWORD *)&v308 = v373;
              *((_QWORD *)&v308 + 1) = v369;
              *(_OWORD *)(v307 + 8) = v308;
              if (v217 == v218)
              {
                v218 = &v306[32 * v303];
                v14 = v377;
              }
              else
              {
                v309 = &v306[32 * v303];
                v14 = v377;
                do
                {
                  v310 = *((_QWORD *)v217 - 4);
                  v217 -= 32;
                  *((_QWORD *)v309 - 4) = v310;
                  v309 -= 32;
                  v311 = *(_OWORD *)(v217 + 8);
                  *((_QWORD *)v309 + 3) = *((_QWORD *)v217 + 3);
                  *(_OWORD *)(v309 + 8) = v311;
                }
                while (v217 != v218);
                v217 = v218;
                v218 = v309;
              }
              v216 = &v306[32 * v305];
              v238 = v307 + 32;
              if (v217)
              {
                v312 = &v306[32 * v305];
                operator delete(v217);
                v216 = v312;
              }
            }
            else
            {
              *(_QWORD *)v217 = v222;
              *((double *)v217 + 3) = v300;
              v301.i64[1] = v302;
              *(int8x16_t *)(v217 + 8) = v301;
              v238 = v217 + 32;
            }
LABEL_313:
            v214 += 8;
            v217 = v238;
            if ((void *)v214 == v215)
            {
LABEL_340:
              v313 = *(_QWORD *)(a2 + 8);
              if (v313)
              {
                v314 = (uint8x8_t)vcnt_s8((int8x8_t)v313);
                v314.i16[0] = vaddlv_u8(v314);
                if (v314.u32[0] > 1uLL)
                {
                  v214 = v148;
                  if (v148 >= v313)
                    v214 = v148 % v313;
                }
                else
                {
                  v214 = (v313 - 1) & v148;
                }
                v315 = *(_QWORD ***)(*(_QWORD *)a2 + 8 * v214);
                v316 = v387;
                if (v315)
                {
                  v317 = *v315;
                  if (*v315)
                  {
                    if (v314.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v319 = v317[1];
                        if (v319 == v148)
                        {
                          if (v317[2] == v148)
                            goto LABEL_400;
                        }
                        else if ((v319 & (v313 - 1)) != v214)
                        {
                          goto LABEL_360;
                        }
                        v317 = (_QWORD *)*v317;
                        if (!v317)
                          goto LABEL_360;
                      }
                    }
                    do
                    {
                      v318 = v317[1];
                      if (v318 == v148)
                      {
                        if (v317[2] == v148)
                          goto LABEL_400;
                      }
                      else
                      {
                        if (v318 >= v313)
                          v318 %= v313;
                        if (v318 != v214)
                          break;
                      }
                      v317 = (_QWORD *)*v317;
                    }
                    while (v317);
                  }
                }
              }
LABEL_360:
              v317 = operator new(0x58uLL);
              v409 = (unsigned int *)v317;
              v410 = v379;
              *v317 = 0;
              v317[1] = v148;
              v317[2] = v148;
              *(_OWORD *)(v317 + 3) = 0u;
              *(_OWORD *)(v317 + 5) = 0u;
              *(_OWORD *)(v317 + 7) = 0u;
              *(_OWORD *)(v317 + 9) = 0u;
              LOBYTE(v411) = 1;
              v320 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
              v321 = *(float *)(a2 + 32);
              if (v313 && (float)(v321 * (float)v313) >= v320)
              {
                v316 = v387;
              }
              else
              {
                v322 = v313 < 3 || (v313 & (v313 - 1)) != 0;
                v316 = v387;
                v323 = v322 | (2 * v313);
                v324 = vcvtps_u32_f32(v320 / v321);
                if (v323 <= v324)
                  prime = v324;
                else
                  prime = v323;
                if (prime == 1)
                {
                  prime = 2;
                }
                else if ((prime & (prime - 1)) != 0)
                {
                  prime = std::__next_prime(prime);
                  v313 = *(_QWORD *)(a2 + 8);
                }
                if (prime > v313)
                  goto LABEL_374;
                if (prime < v313)
                {
                  v326 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
                  if (v313 < 3
                    || (v327 = (uint8x8_t)vcnt_s8((int8x8_t)v313), v327.i16[0] = vaddlv_u8(v327), v327.u32[0] > 1uLL))
                  {
                    v326 = std::__next_prime(v326);
                  }
                  else
                  {
                    v328 = 1 << -(char)__clz(v326 - 1);
                    if (v326 >= 2)
                      v326 = v328;
                  }
                  if (prime <= v326)
                    prime = v326;
                  if (prime < v313)
LABEL_374:
                    sub_239A501C8(a2, prime);
                }
                v313 = *(_QWORD *)(a2 + 8);
                if ((v313 & (v313 - 1)) != 0)
                {
                  if (v148 >= v313)
                    v214 = v148 % v313;
                  else
                    v214 = v148;
                }
                else
                {
                  v214 = (v313 - 1) & v148;
                }
              }
              v329 = *(_QWORD *)a2;
              v330 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v214);
              if (v330)
              {
                *v317 = *v330;
                goto LABEL_398;
              }
              *v317 = *(_QWORD *)v379;
              *(_QWORD *)v379 = v317;
              *(_QWORD *)(v329 + 8 * v214) = v379;
              if (*v317)
              {
                v331 = *(_QWORD *)(*v317 + 8);
                if ((v313 & (v313 - 1)) != 0)
                {
                  if (v331 >= v313)
                    v331 %= v313;
                }
                else
                {
                  v331 &= v313 - 1;
                }
                v330 = (_QWORD *)(*(_QWORD *)a2 + 8 * v331);
LABEL_398:
                *v330 = v317;
              }
              ++*(_QWORD *)(a2 + 24);
LABEL_400:
              v332 = (char *)v317[8];
              v317[3] = v316;
              v317[4] = 0x3FF0000000000000;
              *((double *)v317 + 5) = v151;
              *((double *)v317 + 6) = v152;
              v317[7] = 0x3FF0000000000000;
              v333 = (v238 - v218) >> 5;
              v334 = v317[10];
              if (v333 <= (v334 - (uint64_t)v332) >> 5)
              {
                v343 = (char *)v317[9];
                v337 = (char **)(v317 + 9);
                v342 = v343;
                v344 = (v343 - v332) >> 5;
                if (v344 >= v333)
                {
                  v101 = v387;
                  v350 = v332;
                  if (v218 != v238)
                  {
                    v351 = v218;
                    do
                    {
                      *(_QWORD *)v350 = *(_QWORD *)v351;
                      v352 = *(_OWORD *)(v351 + 8);
                      *((_QWORD *)v350 + 3) = *((_QWORD *)v351 + 3);
                      *(_OWORD *)(v350 + 8) = v352;
                      v350 += 32;
                      v351 += 32;
                    }
                    while (v351 != v238);
                  }
                  v341 = v350 - v332;
                }
                else
                {
                  v345 = &v218[32 * v344];
                  v101 = v387;
                  if (v342 != v332)
                  {
                    v346 = v218;
                    do
                    {
                      *(_QWORD *)v332 = *(_QWORD *)v346;
                      v347 = *(_OWORD *)(v346 + 8);
                      *((_QWORD *)v332 + 3) = *((_QWORD *)v346 + 3);
                      *(_OWORD *)(v332 + 8) = v347;
                      v346 += 32;
                      v332 += 32;
                    }
                    while (v346 != v345);
                    v332 = *v337;
                  }
                  v348 = v332;
                  if (v345 != v238)
                  {
                    v348 = v332;
                    do
                    {
                      *(_QWORD *)v348 = *(_QWORD *)v345;
                      v349 = *(_OWORD *)(v345 + 8);
                      *((_QWORD *)v348 + 3) = *((_QWORD *)v345 + 3);
                      *(_OWORD *)(v348 + 8) = v349;
                      v348 += 32;
                      v345 += 32;
                    }
                    while (v345 != v238);
                  }
                  v341 = v348 - v332;
                }
              }
              else
              {
                if (v332)
                {
                  v317[9] = v332;
                  operator delete(v332);
                  v334 = 0;
                  v317[8] = 0;
                  v317[9] = 0;
                  v317[10] = 0;
                }
                if (v238 - v218 < 0)
                  goto LABEL_456;
                v335 = v334 >> 4;
                if (v334 >> 4 <= v333)
                  v335 = (v238 - v218) >> 5;
                v336 = (unint64_t)v334 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v335;
                if (v336 >> 59)
LABEL_456:
                  sub_2394189F8();
                v332 = (char *)operator new(32 * v336);
                v317[9] = v332;
                v337 = (char **)(v317 + 9);
                *(v337 - 1) = v332;
                v337[1] = &v332[32 * v336];
                v338 = v332;
                if (v218 != v238)
                {
                  v339 = v218;
                  v338 = v332;
                  do
                  {
                    *(_QWORD *)v338 = *(_QWORD *)v339;
                    v340 = *(_OWORD *)(v339 + 8);
                    *((_QWORD *)v338 + 3) = *((_QWORD *)v339 + 3);
                    *(_OWORD *)(v338 + 8) = v340;
                    v338 += 32;
                    v339 += 32;
                  }
                  while (v339 != v238);
                }
                v341 = v338 - v332;
                v101 = v387;
              }
              *v337 = &v332[v341];
              if (v388)
              {
                v389 = v388;
                operator delete(v388);
              }
              if (v218)
                operator delete(v218);
              v95 = v384 + 8;
              goto LABEL_254;
            }
            goto LABEL_264;
          }
        }
        else
        {
          if (v230 >= *(_QWORD *)&v223)
            v230 %= *(_QWORD *)&v223;
          if (v230 != v226)
            goto LABEL_450;
        }
        v228 = (uint64_t *)*v228;
        if (!v228)
          goto LABEL_450;
      }
    }
    if (__p)
      operator delete(__p);
    if (v394)
      operator delete(v394);
LABEL_435:
    if (v14)
      operator delete(v14);
    if (v397)
    {
      v398 = (unsigned int *)v397;
      operator delete(v397);
    }
    v9 = v360;
LABEL_6:
    v9 = (_QWORD *)*v9;
    if (v9)
      continue;
    break;
  }
  v353 = v401[0];
  if (v401[0])
  {
    do
    {
      v354 = (_QWORD *)*v353;
      operator delete(v353);
      v353 = v354;
    }
    while (v354);
  }
  v355 = v400[0];
  v400[0] = 0;
  if (v355)
    operator delete(v355);
LABEL_443:
  v356 = (_QWORD *)v404;
  if ((_QWORD)v404)
  {
    do
    {
      v357 = (_QWORD *)*v356;
      operator delete(v356);
      v356 = v357;
    }
    while (v357);
  }
  v358 = (void *)v403;
  *(_QWORD *)&v403 = 0;
  if (v358)
    operator delete(v358);
  if (v406)
  {
    v407 = v406;
    operator delete(v406);
  }
}

void sub_239C57BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,void *a43)
{
  uint64_t v43;
  void *v45;

  v45 = *(void **)(v43 - 200);
  if (!v45)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v43 - 192) = v45;
  operator delete(v45);
  _Unwind_Resume(exception_object);
}

void sub_239C57DB8(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  char *v4;
  unint64_t v5;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v4 = *(char **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (v5 <= a2)
        v9 = a2 % v5;
    }
    else
    {
      v9 = ((_DWORD)v5 - 1) & a2;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          v12 = v5 - 1;
          while (1)
          {
            v14 = v11[1];
            if (v14 == a2)
            {
              if (*((_DWORD *)v11 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v14 & v12) != v9)
            {
              return;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              return;
          }
        }
        while (1)
        {
          v13 = v11[1];
          if (v13 == a2)
            break;
          if (v13 >= v5)
            v13 %= v5;
          if (v13 != v9)
            return;
LABEL_11:
          v11 = (uint64_t *)*v11;
          if (!v11)
            return;
        }
        if (*((_DWORD *)v11 + 4) != a2)
          goto LABEL_11;
LABEL_22:
        v15 = v11[57];
        if (v15 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v4) >> 3)
        {
          if (v15 >> 61)
LABEL_59:
            sub_2394189F8();
          v16 = 8 * v15;
          v17 = (char *)operator new(8 * v15);
          *(_QWORD *)a3 = v17;
          *(_QWORD *)(a3 + 8) = v17;
          *(_QWORD *)(a3 + 16) = &v17[v16];
          if (v4)
            operator delete(v4);
        }
        v18 = (uint64_t **)v11[56];
        if (v18)
        {
          v19 = *(char **)(a3 + 8);
          while (1)
          {
            v21 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v19 >= v21)
              break;
            *(_QWORD *)v19 = *((unsigned int *)v18 + 5);
            v20 = v19 + 8;
LABEL_29:
            *(_QWORD *)(a3 + 8) = v20;
            v18 = (uint64_t **)*v18;
            v19 = v20;
            if (!v18)
              goto LABEL_56;
          }
          v22 = *(char **)a3;
          v23 = (uint64_t)&v19[-*(_QWORD *)a3];
          v24 = v23 >> 3;
          v25 = (v23 >> 3) + 1;
          if (v25 >> 61)
            goto LABEL_59;
          v26 = v21 - (_QWORD)v22;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 61)
              sub_239418A80();
            v28 = operator new(8 * v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = &v28[8 * v24];
          *v29 = *((unsigned int *)v18 + 5);
          v20 = (char *)(v29 + 1);
          if (v19 == v22)
            goto LABEL_54;
          v30 = v19 - 8 - v22;
          if (v30 < 0x168)
          {
            v31 = v19;
            goto LABEL_53;
          }
          if (&v28[v23 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v28[v23 - 8])
          {
            v31 = v19;
          }
          else
          {
            if (&v19[-(v30 & 0xFFFFFFFFFFFFFFF8) - 8] <= v19 - 8)
            {
              if ((unint64_t)(v19 - v28 - v23) < 0x20)
              {
                v31 = v19;
                goto LABEL_53;
              }
              v32 = (v30 >> 3) + 1;
              v31 = &v19[-8 * (v32 & 0x3FFFFFFFFFFFFFFCLL)];
              v33 = &v28[8 * v24 - 16];
              v34 = v19 - 16;
              v35 = v32 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              v29 -= v32 & 0x3FFFFFFFFFFFFFFCLL;
              if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_53;
LABEL_54:
              *(_QWORD *)a3 = v29;
              *(_QWORD *)(a3 + 8) = v20;
              *(_QWORD *)(a3 + 16) = &v28[8 * v27];
              if (v22)
                operator delete(v22);
              goto LABEL_29;
            }
            v31 = v19;
          }
          do
          {
LABEL_53:
            v37 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v29 = v37;
          }
          while (v31 != v22);
          goto LABEL_54;
        }
LABEL_56:
        if ((a4 & 1) != 0)
          std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      }
    }
  }
}

uint64_t sub_239C580BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t **v17;
  _QWORD *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  v3 = *(_QWORD **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (v4 <= a2)
      v7 = a2 % v4;
  }
  else
  {
    v7 = ((_DWORD)v4 - 1) & a2;
  }
  v8 = *(uint64_t ***)(*(_QWORD *)(a1 + 32) + 8 * v7);
  if (!v8)
    return 0;
  v9 = *v8;
  if (!*v8)
    return 0;
  if (v6.u32[0] < 2uLL)
  {
    v10 = v4 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == a2)
      {
        if (*((_DWORD *)v9 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v12 & v10) != v7)
      {
        return 0;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        return 0;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == a2)
      break;
    if (v11 >= v4)
      v11 %= v4;
    if (v11 != v7)
      return 0;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      return 0;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_11;
LABEL_22:
  v14 = v9[17];
  if (v14 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v3) >> 3)
  {
    if (v14 >> 61)
LABEL_58:
      sub_2394189F8();
    v15 = v14;
    v16 = operator new(8 * v14);
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v16;
    *(_QWORD *)(a3 + 16) = &v16[v15];
    if (v3)
    {
      operator delete(v3);
      v3 = *(_QWORD **)(a3 + 8);
    }
    else
    {
      v3 = v16;
    }
  }
  v17 = (uint64_t **)v9[16];
  if (v17)
  {
    while (2)
    {
      v19 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v3 < v19)
      {
        *v3 = *((unsigned int *)v17 + 5);
        v18 = v3 + 1;
      }
      else
      {
        v20 = *(char **)a3;
        v21 = (uint64_t)v3 - *(_QWORD *)a3;
        v22 = v21 >> 3;
        v23 = (v21 >> 3) + 1;
        if (v23 >> 61)
          goto LABEL_58;
        v24 = v19 - (_QWORD)v20;
        if (v24 >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 >> 61)
            sub_239418A80();
          v26 = operator new(8 * v25);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[8 * v22];
        *v27 = *((unsigned int *)v17 + 5);
        v18 = v27 + 1;
        if (v3 != (_QWORD *)v20)
        {
          v28 = (char *)(v3 - 1) - v20;
          if (v28 < 0x168)
          {
            v29 = (char *)v3;
            goto LABEL_54;
          }
          if (&v26[v21 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v26[v21 - 8])
          {
            v29 = (char *)v3;
            goto LABEL_54;
          }
          if ((_QWORD *)((char *)v3 - (v28 & 0xFFFFFFFFFFFFFFF8) - 8) > v3 - 1)
          {
            v29 = (char *)v3;
            goto LABEL_54;
          }
          if ((unint64_t)((char *)v3 - v26 - v21) < 0x20)
          {
            v29 = (char *)v3;
            goto LABEL_54;
          }
          v30 = (v28 >> 3) + 1;
          v29 = (char *)&v3[-(v30 & 0x3FFFFFFFFFFFFFFCLL)];
          v31 = &v26[8 * v22 - 16];
          v32 = (__int128 *)(v3 - 2);
          v33 = v30 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v34 = *v32;
            *(v31 - 1) = *(v32 - 1);
            *v31 = v34;
            v31 -= 2;
            v32 -= 2;
            v33 -= 4;
          }
          while (v33);
          v27 -= v30 & 0x3FFFFFFFFFFFFFFCLL;
          if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_54:
              v35 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v27 = v35;
            }
            while (v29 != v20);
          }
        }
        *(_QWORD *)a3 = v27;
        *(_QWORD *)(a3 + 8) = v18;
        *(_QWORD *)(a3 + 16) = &v26[8 * v25];
        if (v20)
          operator delete(v20);
      }
      *(_QWORD *)(a3 + 8) = v18;
      v17 = (uint64_t **)*v17;
      v3 = v18;
      if (!v17)
        break;
      continue;
    }
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  return 1;
}

unint64_t sub_239C583D0(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t j;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  char v63;
  char v64;
  _QWORD *v65;
  BOOL v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  int v72;
  int v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  char v101;
  char v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  int64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  char v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v140;
  char v141;
  unint64_t v142;
  char v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  int v147;
  char v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unint64_t v155;
  int v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  char v162;

  v7 = result;
LABEL_2:
  i = v7;
  while (2)
  {
    v7 = i;
    v9 = a2 - i;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - i) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (*(_BYTE *)(a2 - 7))
        {
          if (!*(_BYTE *)(i + 17))
          {
            v63 = *(_BYTE *)(i + 16);
            v64 = *(_BYTE *)(a2 - 8);
            goto LABEL_523;
          }
        }
        else if (*(_BYTE *)(i + 17))
        {
          return result;
        }
        v64 = *(_BYTE *)(a2 - 8);
        v63 = *(_BYTE *)(i + 16);
        if (v64)
        {
          if (!*(_BYTE *)(i + 16))
          {
            v64 = 1;
            goto LABEL_523;
          }
        }
        else if (*(_BYTE *)(i + 16))
        {
          return result;
        }
        if (*(_QWORD *)(a2 - 16) <= *(_QWORD *)(i + 8))
          return result;
LABEL_523:
        v160 = *(_QWORD *)i;
        *(_QWORD *)i = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v160;
        v161 = *(_QWORD *)(i + 8);
        *(_QWORD *)(i + 8) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v161;
        *(_BYTE *)(i + 16) = v64;
        *(_BYTE *)(a2 - 8) = v63;
        v162 = *(_BYTE *)(i + 17);
        *(_BYTE *)(i + 17) = *(_BYTE *)(a2 - 7);
        *(_BYTE *)(a2 - 7) = v162;
        return result;
      case 3:
        return (unint64_t)sub_239C59D9C((uint64_t *)i, (uint64_t *)(i + 24), (uint64_t *)(a2 - 24));
      case 4:
        return (unint64_t)sub_239C5A034(i, i + 24, i + 48, a2 - 24);
      case 5:
        return (unint64_t)sub_239C5A1F4(i, i + 24, i + 48, i + 72, a2 - 24);
      default:
        if (v9 <= 575)
        {
          v65 = (_QWORD *)(i + 24);
          v67 = i == a2 || v65 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (v67)
              return result;
            v68 = 0;
            v69 = (_QWORD *)i;
            while (1)
            {
              v71 = v69;
              v69 = v65;
              v72 = *((unsigned __int8 *)v71 + 41);
              if (*((_BYTE *)v71 + 41))
              {
                if (!*((_BYTE *)v71 + 17))
                {
                  v73 = *((unsigned __int8 *)v71 + 40);
                  v74 = *((_BYTE *)v71 + 16);
                  goto LABEL_285;
                }
              }
              else if (*((_BYTE *)v71 + 17))
              {
                goto LABEL_275;
              }
              v73 = *((unsigned __int8 *)v71 + 40);
              v74 = *((_BYTE *)v71 + 16);
              if (!*((_BYTE *)v71 + 40))
              {
                if (*((_BYTE *)v71 + 16))
                  goto LABEL_275;
LABEL_284:
                if (v71[4] <= v71[1])
                  goto LABEL_275;
                goto LABEL_285;
              }
              if (*((_BYTE *)v71 + 16))
                goto LABEL_284;
              v73 = 1;
LABEL_285:
              v76 = v71[3];
              v75 = v71[4];
              v77 = v71[1];
              v71[3] = *v71;
              v69[1] = v77;
              *((_BYTE *)v69 + 16) = v74;
              *((_BYTE *)v69 + 17) = *((_BYTE *)v71 + 17);
              v70 = i;
              if (v71 != (_QWORD *)i)
              {
                if (v72)
                {
                  v78 = v68;
                  if (!v73)
                  {
                    v79 = v68;
                    while (1)
                    {
                      v85 = i + v79;
                      v86 = *(_BYTE *)(i + v79 - 7);
                      if (v86)
                      {
                        result = *(unsigned __int8 *)(v85 - 8);
                        if (*(_BYTE *)(v85 - 8))
                          goto LABEL_310;
                        result = *(_QWORD *)(i + v79 - 16);
                        if (v75 <= result)
                          goto LABEL_317;
                        v83 = 0;
                      }
                      else
                      {
                        result = *(_QWORD *)(v85 - 16);
                        v83 = *(_BYTE *)(v85 - 8);
                      }
                      v71 -= 3;
                      v84 = i + v79;
                      *(_QWORD *)v84 = *(_QWORD *)(v85 - 24);
                      *(_QWORD *)(v84 + 8) = result;
                      *(_BYTE *)(v84 + 16) = v83;
                      *(_BYTE *)(v84 + 17) = v86;
                      v79 -= 24;
                      if (!v79)
                        goto LABEL_273;
                    }
                  }
                  while (1)
                  {
                    v80 = i + v78;
                    v81 = *(_BYTE *)(i + v78 - 7);
                    v82 = *(_BYTE *)(i + v78 - 8);
                    if (v81 && *(_BYTE *)(i + v78 - 8))
                    {
                      v70 = i + v78;
                      result = *(_QWORD *)(i + v78 - 16);
                      if (v75 <= result)
                        goto LABEL_274;
                      v82 = 1;
                    }
                    *(_OWORD *)v80 = *(_OWORD *)(v80 - 24);
                    *(_BYTE *)(v80 + 16) = v82;
                    *(_BYTE *)(v80 + 17) = v81;
                    v78 -= 24;
                    if (!v78)
                      goto LABEL_273;
                  }
                }
                if (v73)
                {
                  v79 = v68;
                  while (1)
                  {
                    v87 = i + v79;
                    if (*(_BYTE *)(i + v79 - 7))
                      goto LABEL_317;
                    v88 = *(_BYTE *)(v87 - 8);
                    result = *(_QWORD *)(v87 - 16);
                    v89 = !v88 || v75 > result;
                    if (!v89)
                      break;
                    v71 -= 3;
                    v90 = i + v79;
                    *(_QWORD *)v90 = *(_QWORD *)(v87 - 24);
                    *(_QWORD *)(v90 + 8) = result;
                    *(_BYTE *)(v90 + 16) = v88;
                    *(_BYTE *)(v90 + 17) = 0;
                    v79 -= 24;
                    if (!v79)
                      goto LABEL_273;
                  }
LABEL_310:
                  v70 = i + v79;
                }
                else
                {
                  v91 = v68;
                  while (1)
                  {
                    v70 = i + v91;
                    if (*(_BYTE *)(i + v91 - 7))
                      goto LABEL_274;
                    if (*(_BYTE *)(v70 - 8))
                      break;
                    v92 = i + v91;
                    result = *(_QWORD *)(i + v91 - 16);
                    if (v75 <= result)
                      break;
                    v71 -= 3;
                    *(_QWORD *)v92 = *(_QWORD *)(v70 - 24);
                    *(_QWORD *)(v92 + 8) = result;
                    *(_WORD *)(v92 + 16) = 0;
                    v91 -= 24;
                    if (!v91)
                    {
LABEL_273:
                      v70 = i;
                      goto LABEL_274;
                    }
                  }
LABEL_317:
                  v70 = (unint64_t)v71;
                }
              }
LABEL_274:
              *(_QWORD *)v70 = v76;
              *(_QWORD *)(v70 + 8) = v75;
              *(_BYTE *)(v70 + 16) = v73;
              *(_BYTE *)(v70 + 17) = v72;
LABEL_275:
              v65 = v69 + 3;
              v68 += 24;
              if (v69 + 3 == (_QWORD *)a2)
                return result;
            }
          }
          if (v67)
            return result;
          while (1)
          {
            v145 = v7;
            v7 = (uint64_t)v65;
            v146 = *(_BYTE *)(v145 + 41);
            if (v146)
            {
              if (!*(_BYTE *)(v145 + 17))
              {
                LOBYTE(v147) = *(_BYTE *)(v145 + 40);
                v150 = *v65;
                v149 = *(_QWORD *)(v145 + 32);
                if (!(_BYTE)v147)
                  goto LABEL_497;
                do
                {
                  do
                  {
LABEL_493:
                    v151 = v145;
                    v152 = *(_QWORD *)(v145 + 8);
                    *(_QWORD *)(v145 + 24) = *(_QWORD *)v145;
                    *(_QWORD *)(v145 + 32) = v152;
                    *(_WORD *)(v145 + 40) = *(_WORD *)(v145 + 16);
                    v145 -= 24;
                  }
                  while (!*(_BYTE *)(v151 - 7));
                }
                while (!*(_BYTE *)(v151 - 8) || v149 > *(_QWORD *)(v151 - 16));
LABEL_501:
                v145 = v151;
                goto LABEL_502;
              }
            }
            else if (*(_BYTE *)(v145 + 17))
            {
              goto LABEL_479;
            }
            v147 = *(unsigned __int8 *)(v145 + 40);
            v148 = *(_BYTE *)(v145 + 16);
            if (*(_BYTE *)(v145 + 40))
            {
              if (!*(_BYTE *)(v145 + 16))
              {
                v149 = *(_QWORD *)(v145 + 32);
                v150 = *v65;
                if (*(_BYTE *)(v145 + 41))
                  goto LABEL_492;
                goto LABEL_503;
              }
            }
            else if (*(_BYTE *)(v145 + 16))
            {
              goto LABEL_479;
            }
            v149 = *(_QWORD *)(v145 + 32);
            if (v149 > *(_QWORD *)(v145 + 8))
            {
              v150 = *v65;
              if (*(_BYTE *)(v145 + 41))
              {
                if (*(_BYTE *)(v145 + 40))
                {
LABEL_492:
                  LOBYTE(v147) = 1;
                  goto LABEL_493;
                }
                do
                {
                  do
                  {
LABEL_497:
                    v151 = v145;
                    v153 = *(_QWORD *)(v145 + 8);
                    *(_QWORD *)(v145 + 24) = *(_QWORD *)v145;
                    *(_QWORD *)(v145 + 32) = v153;
                    *(_WORD *)(v145 + 40) = *(_WORD *)(v145 + 16);
                    v145 -= 24;
                  }
                  while (!*(_BYTE *)(v151 - 7));
                }
                while (!*(_BYTE *)(v151 - 8) && v149 > *(_QWORD *)(v151 - 16));
LABEL_500:
                LOBYTE(v147) = 0;
                goto LABEL_501;
              }
LABEL_503:
              *(_QWORD *)v7 = *(_QWORD *)v145;
              *(_QWORD *)(v7 + 8) = *(_QWORD *)(v145 + 8);
              *(_BYTE *)(v7 + 16) = v148;
              *(_BYTE *)(v7 + 17) = *(_BYTE *)(v145 + 17);
              if (!*(_BYTE *)(v145 - 7))
              {
                if (v147)
                {
                  while (1)
                  {
                    v154 = *(_BYTE *)(v145 - 8);
                    v155 = *(_QWORD *)(v145 - 16);
                    if (v154 && v149 <= v155)
                      break;
                    v151 = v145 - 24;
                    *(_QWORD *)v145 = *(_QWORD *)(v145 - 24);
                    *(_QWORD *)(v145 + 8) = v155;
                    *(_BYTE *)(v145 + 16) = v154;
                    *(_BYTE *)(v145 + 17) = *(_BYTE *)(v145 - 7);
                    v157 = *(unsigned __int8 *)(v145 - 31);
                    v145 -= 24;
                    if (v157)
                      goto LABEL_501;
                  }
                }
                else
                {
                  while (!*(_BYTE *)(v145 - 8))
                  {
                    v158 = *(_QWORD *)(v145 - 16);
                    if (v149 <= v158)
                      break;
                    v151 = v145 - 24;
                    *(_QWORD *)v145 = *(_QWORD *)(v145 - 24);
                    *(_QWORD *)(v145 + 8) = v158;
                    *(_BYTE *)(v145 + 16) = 0;
                    *(_BYTE *)(v145 + 17) = *(_BYTE *)(v145 - 7);
                    v159 = *(unsigned __int8 *)(v145 - 31);
                    v145 -= 24;
                    if (v159)
                      goto LABEL_500;
                  }
                  LOBYTE(v147) = 0;
                }
              }
LABEL_502:
              *(_QWORD *)v145 = v150;
              *(_QWORD *)(v145 + 8) = v149;
              *(_BYTE *)(v145 + 16) = v147;
              *(_BYTE *)(v145 + 17) = v146;
            }
LABEL_479:
            v65 = (_QWORD *)(v7 + 24);
            if (v7 + 24 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (i == a2)
            return result;
          v93 = (unint64_t)(v10 - 2) >> 1;
          v94 = v93;
          while (1)
          {
            v96 = v94;
            if (v93 < v94)
              goto LABEL_322;
            v97 = (2 * v94) | 1;
            v98 = i + 24 * v97;
            if (2 * v94 + 2 < v10)
              break;
LABEL_335:
            v99 = i + 24 * v94;
            v100 = *(unsigned __int8 *)(v99 + 17);
            if (*(_BYTE *)(v98 + 17))
            {
              if (!*(_BYTE *)(v99 + 17))
                goto LABEL_322;
            }
            else if (*(_BYTE *)(v99 + 17))
            {
              v101 = *(_BYTE *)(v99 + 16);
              v102 = *(_BYTE *)(v98 + 16);
              goto LABEL_346;
            }
            v102 = *(_BYTE *)(v98 + 16);
            v101 = *(_BYTE *)(v99 + 16);
            if (v102)
            {
              if (!*(_BYTE *)(v99 + 16))
                goto LABEL_322;
              goto LABEL_345;
            }
            if (*(_BYTE *)(v99 + 16))
            {
              v102 = 0;
              v101 = 1;
LABEL_346:
              v104 = *(_QWORD *)v99;
              v103 = *(_QWORD *)(v99 + 8);
              *(_QWORD *)v99 = *(_QWORD *)v98;
              *(_QWORD *)(v99 + 8) = *(_QWORD *)(v98 + 8);
              *(_BYTE *)(v99 + 16) = v102;
              *(_BYTE *)(v99 + 17) = *(_BYTE *)(v98 + 17);
              if (v93 < v97)
              {
LABEL_320:
                v95 = v98;
LABEL_321:
                *(_QWORD *)v95 = v104;
                *(_QWORD *)(v95 + 8) = v103;
                *(_BYTE *)(v95 + 16) = v101;
                *(_BYTE *)(v95 + 17) = v100;
                goto LABEL_322;
              }
              if (v100)
              {
                if (v101)
                {
                  v95 = v98;
                  while (1)
                  {
                    v98 = v95;
                    v106 = 2 * v97;
                    v97 = (2 * v97) | 1;
                    v95 = i + 24 * v97;
                    v107 = v106 + 2;
                    if (v107 < v10)
                    {
                      if (*(_BYTE *)(v95 + 17))
                      {
                        if (!*(_BYTE *)(v95 + 41))
                          goto LABEL_362;
                      }
                      else if (*(_BYTE *)(v95 + 41))
                      {
                        goto LABEL_363;
                      }
                      if (*(_BYTE *)(v95 + 16))
                      {
                        if (!*(_BYTE *)(v95 + 40))
                          goto LABEL_362;
                      }
                      else if (*(_BYTE *)(v95 + 40))
                      {
                        goto LABEL_363;
                      }
                      if (*(_QWORD *)(v95 + 8) > *(_QWORD *)(v95 + 32))
                      {
LABEL_362:
                        v95 += 24;
                        v97 = v107;
                      }
                    }
LABEL_363:
                    v105 = *(_BYTE *)(v95 + 16);
                    if (*(_BYTE *)(v95 + 17) && *(_BYTE *)(v95 + 16))
                    {
                      if (*(_QWORD *)(v95 + 8) > v103)
                        goto LABEL_320;
                      v105 = 1;
                    }
                    *(_QWORD *)v98 = *(_QWORD *)v95;
                    *(_QWORD *)(v98 + 8) = *(_QWORD *)(v95 + 8);
                    *(_BYTE *)(v98 + 16) = v105;
                    *(_BYTE *)(v98 + 17) = *(_BYTE *)(v95 + 17);
                    if (v93 < v97)
                      goto LABEL_321;
                  }
                }
                while (2)
                {
                  v108 = 2 * v97;
                  v97 = (2 * v97) | 1;
                  v95 = i + 24 * v97;
                  v109 = v108 + 2;
                  if (v109 < v10)
                  {
                    if (*(_BYTE *)(v95 + 17))
                    {
                      if (!*(_BYTE *)(v95 + 41))
                        goto LABEL_378;
LABEL_373:
                      if (*(_BYTE *)(v95 + 16))
                      {
                        if (!*(_BYTE *)(v95 + 40))
                        {
LABEL_378:
                          v95 += 24;
                          v97 = v109;
                          goto LABEL_379;
                        }
LABEL_377:
                        if (*(_QWORD *)(v95 + 8) > *(_QWORD *)(v95 + 32))
                          goto LABEL_378;
                      }
                      else if (!*(_BYTE *)(v95 + 40))
                      {
                        goto LABEL_377;
                      }
                    }
                    else if (!*(_BYTE *)(v95 + 41))
                    {
                      goto LABEL_373;
                    }
                  }
LABEL_379:
                  v110 = *(_BYTE *)(v95 + 16);
                  if (*(_BYTE *)(v95 + 17))
                  {
                    if (*(_BYTE *)(v95 + 16) || *(_QWORD *)(v95 + 8) > v103)
                      goto LABEL_320;
                    v110 = 0;
                  }
                  *(_QWORD *)v98 = *(_QWORD *)v95;
                  *(_QWORD *)(v98 + 8) = *(_QWORD *)(v95 + 8);
                  *(_BYTE *)(v98 + 16) = v110;
                  *(_BYTE *)(v98 + 17) = *(_BYTE *)(v95 + 17);
                  v98 = v95;
                  if (v93 < v97)
                    goto LABEL_321;
                  continue;
                }
              }
              if (!v101)
              {
                while (2)
                {
                  v111 = 2 * v97;
                  v97 = (2 * v97) | 1;
                  v95 = i + 24 * v97;
                  v112 = v111 + 2;
                  if (v112 >= v10)
                    goto LABEL_395;
                  if (*(_BYTE *)(v95 + 17))
                  {
                    if (!*(_BYTE *)(v95 + 41))
                      goto LABEL_394;
LABEL_389:
                    if (*(_BYTE *)(v95 + 16))
                    {
                      if (!*(_BYTE *)(v95 + 40))
                      {
LABEL_394:
                        v95 += 24;
                        v97 = v112;
                        goto LABEL_395;
                      }
                    }
                    else if (*(_BYTE *)(v95 + 40))
                    {
                      goto LABEL_395;
                    }
                    if (*(_QWORD *)(v95 + 8) > *(_QWORD *)(v95 + 32))
                      goto LABEL_394;
                  }
                  else if (!*(_BYTE *)(v95 + 41))
                  {
                    goto LABEL_389;
                  }
LABEL_395:
                  if (*(_BYTE *)(v95 + 17) || *(_BYTE *)(v95 + 16) || *(_QWORD *)(v95 + 8) > v103)
                    goto LABEL_320;
                  *(_QWORD *)v98 = *(_QWORD *)v95;
                  *(_QWORD *)(v98 + 8) = *(_QWORD *)(v95 + 8);
                  *(_BYTE *)(v98 + 16) = 0;
                  *(_BYTE *)(v98 + 17) = *(_BYTE *)(v95 + 17);
                  v98 = v95;
                  if (v93 < v97)
                    goto LABEL_321;
                  continue;
                }
              }
              while (2)
              {
                v113 = 2 * v97;
                v97 = (2 * v97) | 1;
                v95 = i + 24 * v97;
                v114 = v113 + 2;
                if (v114 < v10)
                {
                  if (*(_BYTE *)(v95 + 17))
                  {
                    if (!*(_BYTE *)(v95 + 41))
                      goto LABEL_411;
LABEL_406:
                    if (*(_BYTE *)(v95 + 16))
                    {
                      if (!*(_BYTE *)(v95 + 40))
                      {
LABEL_411:
                        v95 += 24;
                        v97 = v114;
                        goto LABEL_412;
                      }
                    }
                    else if (*(_BYTE *)(v95 + 40))
                    {
                      goto LABEL_412;
                    }
                    if (*(_QWORD *)(v95 + 8) > *(_QWORD *)(v95 + 32))
                      goto LABEL_411;
                  }
                  else if (!*(_BYTE *)(v95 + 41))
                  {
                    goto LABEL_406;
                  }
                }
LABEL_412:
                if (*(_BYTE *)(v95 + 17))
                  goto LABEL_320;
                v115 = *(_BYTE *)(v95 + 16);
                if (v115)
                {
                  if (*(_QWORD *)(v95 + 8) > v103)
                    goto LABEL_320;
                }
                *(_QWORD *)v98 = *(_QWORD *)v95;
                *(_QWORD *)(v98 + 8) = *(_QWORD *)(v95 + 8);
                *(_BYTE *)(v98 + 16) = v115;
                *(_BYTE *)(v98 + 17) = *(_BYTE *)(v95 + 17);
                v98 = v95;
                if (v93 < v97)
                  goto LABEL_321;
                continue;
              }
            }
LABEL_345:
            if (*(_QWORD *)(v98 + 8) <= *(_QWORD *)(v99 + 8))
              goto LABEL_346;
LABEL_322:
            v94 = v96 - 1;
            if (!v96)
            {
              v116 = v9 / 0x18uLL;
              while (1)
              {
                v117 = 0;
                v118 = *(_QWORD *)i;
                v119 = *(_QWORD *)(i + 8);
                v120 = *(_BYTE *)(i + 16);
                v121 = *(_BYTE *)(i + 17);
                v122 = i;
                do
                {
                  result = v122;
                  v122 += 24 * v117 + 24;
                  v123 = 2 * v117;
                  v117 = (2 * v117) | 1;
                  v124 = v123 + 2;
                  if (v124 >= v116)
                    goto LABEL_421;
                  if (*(_BYTE *)(v122 + 17))
                  {
                    if (!*(_BYTE *)(v122 + 41))
                      goto LABEL_420;
                  }
                  else if (*(_BYTE *)(v122 + 41))
                  {
                    goto LABEL_421;
                  }
                  if (*(_BYTE *)(v122 + 16))
                  {
                    if (!*(_BYTE *)(v122 + 40))
                      goto LABEL_420;
                  }
                  else if (*(_BYTE *)(v122 + 40))
                  {
                    goto LABEL_421;
                  }
                  if (*(_QWORD *)(v122 + 8) > *(_QWORD *)(v122 + 32))
                  {
LABEL_420:
                    v122 += 24;
                    v117 = v124;
                  }
LABEL_421:
                  *(_QWORD *)result = *(_QWORD *)v122;
                  *(_QWORD *)(result + 8) = *(_QWORD *)(v122 + 8);
                  *(_BYTE *)(result + 16) = *(_BYTE *)(v122 + 16);
                  *(_BYTE *)(result + 17) = *(_BYTE *)(v122 + 17);
                }
                while (v117 <= (uint64_t)((unint64_t)(v116 - 2) >> 1));
                if (v122 == a2 - 24)
                {
                  *(_QWORD *)v122 = v118;
                  *(_QWORD *)(v122 + 8) = v119;
                  *(_BYTE *)(v122 + 16) = v120;
                  *(_BYTE *)(v122 + 17) = v121;
                }
                else
                {
                  *(_QWORD *)v122 = *(_QWORD *)(a2 - 24);
                  *(_QWORD *)(v122 + 8) = *(_QWORD *)(a2 - 16);
                  *(_BYTE *)(v122 + 16) = *(_BYTE *)(a2 - 8);
                  *(_BYTE *)(v122 + 17) = *(_BYTE *)(a2 - 7);
                  *(_QWORD *)(a2 - 24) = v118;
                  *(_QWORD *)(a2 - 16) = v119;
                  *(_BYTE *)(a2 - 8) = v120;
                  *(_BYTE *)(a2 - 7) = v121;
                  v125 = v122 - i + 24;
                  if (v125 >= 25)
                  {
                    v126 = v125 / 0x18uLL - 2;
                    v127 = v126 >> 1;
                    v128 = i + 24 * (v126 >> 1);
                    v129 = *(unsigned __int8 *)(v122 + 17);
                    if (*(_BYTE *)(v128 + 17))
                    {
                      if (!*(_BYTE *)(v122 + 17))
                      {
                        v130 = *(_BYTE *)(v122 + 16);
                        v131 = *(_BYTE *)(v128 + 16);
                        goto LABEL_444;
                      }
LABEL_439:
                      v131 = *(_BYTE *)(v128 + 16);
                      v130 = *(_BYTE *)(v122 + 16);
                      if (v131)
                      {
                        if (!*(_BYTE *)(v122 + 16))
                        {
                          v131 = 1;
                          goto LABEL_444;
                        }
LABEL_443:
                        result = *(_QWORD *)(v122 + 8);
                        if (*(_QWORD *)(v128 + 8) > result)
                        {
LABEL_444:
                          result = *(_QWORD *)v122;
                          v132 = *(_QWORD *)(v122 + 8);
                          *(_QWORD *)v122 = *(_QWORD *)v128;
                          *(_QWORD *)(v122 + 8) = *(_QWORD *)(v128 + 8);
                          *(_BYTE *)(v122 + 16) = v131;
                          *(_BYTE *)(v122 + 17) = *(_BYTE *)(v128 + 17);
                          if (v126 >= 2)
                          {
                            if (!v129)
                            {
                              if (v130)
                              {
                                v133 = i + 24 * (v126 >> 1);
                                while (1)
                                {
                                  v142 = v127 - 1;
                                  v127 = (v127 - 1) >> 1;
                                  v128 = i + 24 * v127;
                                  if (*(_BYTE *)(v128 + 17))
                                  {
                                    v140 = *(_QWORD *)(v128 + 8);
                                    v141 = *(_BYTE *)(v128 + 16);
                                  }
                                  else
                                  {
                                    if (!*(_BYTE *)(v128 + 16))
                                      goto LABEL_474;
                                    v140 = *(_QWORD *)(v128 + 8);
                                    if (v140 <= v132)
                                      goto LABEL_474;
                                    v141 = 1;
                                  }
                                  *(_QWORD *)v133 = *(_QWORD *)v128;
                                  *(_QWORD *)(v133 + 8) = v140;
                                  *(_BYTE *)(v133 + 16) = v141;
                                  *(_BYTE *)(v133 + 17) = *(_BYTE *)(v128 + 17);
                                  v133 = i + 24 * v127;
                                  if (v142 < 2)
                                    goto LABEL_475;
                                }
                              }
                              while (1)
                              {
                                v133 = v128;
                                v144 = v127 - 1;
                                v127 = (v127 - 1) >> 1;
                                v128 = i + 24 * v127;
                                v143 = *(_BYTE *)(v128 + 16);
                                if (!*(_BYTE *)(v128 + 17))
                                {
                                  if (*(_BYTE *)(v128 + 16))
                                  {
                                    v143 = 1;
                                  }
                                  else
                                  {
                                    if (*(_QWORD *)(v128 + 8) <= v132)
                                      goto LABEL_474;
                                    v143 = 0;
                                  }
                                }
                                *(_QWORD *)v133 = *(_QWORD *)v128;
                                *(_QWORD *)(v133 + 8) = *(_QWORD *)(v128 + 8);
                                *(_BYTE *)(v133 + 16) = v143;
                                *(_BYTE *)(v133 + 17) = *(_BYTE *)(v128 + 17);
                                if (v144 < 2)
                                  goto LABEL_475;
                              }
                            }
                            v133 = i + 24 * (v126 >> 1);
                            if (v130)
                            {
                              while (1)
                              {
                                v134 = v127 - 1;
                                v127 = (v127 - 1) >> 1;
                                v128 = i + 24 * v127;
                                if (!*(_BYTE *)(v128 + 17))
                                  break;
                                if (!*(_BYTE *)(v128 + 16))
                                  break;
                                v135 = *(_QWORD *)(v128 + 8);
                                if (v135 <= v132)
                                  break;
                                *(_QWORD *)v133 = *(_QWORD *)v128;
                                *(_QWORD *)(v133 + 8) = v135;
                                *(_BYTE *)(v133 + 16) = 1;
                                *(_BYTE *)(v133 + 17) = *(_BYTE *)(v128 + 17);
                                v133 = i + 24 * v127;
                                if (v134 <= 1)
                                  goto LABEL_475;
                              }
                            }
                            else
                            {
                              while (1)
                              {
                                v136 = v127 - 1;
                                v127 = (v127 - 1) >> 1;
                                v128 = i + 24 * v127;
                                if (!*(_BYTE *)(v128 + 17))
                                  break;
                                v137 = *(_BYTE *)(v128 + 16);
                                v138 = *(_QWORD *)(v128 + 8);
                                if (!v137 && v138 <= v132)
                                  break;
                                *(_QWORD *)v133 = *(_QWORD *)v128;
                                *(_QWORD *)(v133 + 8) = v138;
                                *(_BYTE *)(v133 + 16) = v137;
                                *(_BYTE *)(v133 + 17) = *(_BYTE *)(v128 + 17);
                                v133 = i + 24 * v127;
                                if (v136 < 2)
                                  goto LABEL_475;
                              }
                            }
LABEL_474:
                            v128 = v133;
                          }
LABEL_475:
                          *(_QWORD *)v128 = result;
                          *(_QWORD *)(v128 + 8) = v132;
                          *(_BYTE *)(v128 + 16) = v130;
                          *(_BYTE *)(v128 + 17) = v129;
                        }
                      }
                      else if (!*(_BYTE *)(v122 + 16))
                      {
                        goto LABEL_443;
                      }
                    }
                    else if (!*(_BYTE *)(v122 + 17))
                    {
                      goto LABEL_439;
                    }
                  }
                }
                a2 -= 24;
                v89 = v116-- <= 2;
                if (v89)
                  return result;
              }
            }
          }
          if (*(_BYTE *)(v98 + 17))
          {
            if (!*(_BYTE *)(v98 + 41))
            {
LABEL_334:
              v98 += 24;
              v97 = 2 * v94 + 2;
              goto LABEL_335;
            }
          }
          else if (*(_BYTE *)(v98 + 41))
          {
            goto LABEL_335;
          }
          if (*(_BYTE *)(v98 + 16))
          {
            if (!*(_BYTE *)(v98 + 40))
              goto LABEL_334;
          }
          else if (*(_BYTE *)(v98 + 40))
          {
            goto LABEL_335;
          }
          if (*(_QWORD *)(v98 + 8) <= *(_QWORD *)(v98 + 32))
            goto LABEL_335;
          goto LABEL_334;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = i + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 >= 0xC01)
        {
          sub_239C59D9C((uint64_t *)v7, (uint64_t *)(v7 + 24 * v11), (uint64_t *)(a2 - 24));
          v13 = 24 * v11;
          v14 = (uint64_t *)(24 * v11 + v7 - 24);
          sub_239C59D9C((uint64_t *)(v7 + 24), v14, (uint64_t *)(a2 - 48));
          v15 = (uint64_t *)(v7 + 24 + v13);
          sub_239C59D9C((uint64_t *)(v7 + 48), v15, (uint64_t *)(a2 - 72));
          result = (unint64_t)sub_239C59D9C(v14, (uint64_t *)v12, v15);
          v16 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v16;
          v17 = *(_BYTE *)(v7 + 16);
          *(_BYTE *)(v7 + 16) = *(_BYTE *)(v12 + 16);
          *(_BYTE *)(v12 + 16) = v17;
          v18 = *(_BYTE *)(v7 + 17);
          *(_BYTE *)(v7 + 17) = *(_BYTE *)(v12 + 17);
          *(_BYTE *)(v12 + 17) = v18;
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_18;
LABEL_8:
          v19 = *(unsigned __int8 *)(v7 + 17);
          if (*(_BYTE *)(v7 - 7))
          {
            if (!*(_BYTE *)(v7 + 17))
            {
              v20 = *(_QWORD *)v7;
              v21 = *(_QWORD *)(v7 + 8);
              LOBYTE(v22) = *(_BYTE *)(v7 + 16);
              if (!(_BYTE)v22)
                goto LABEL_11;
              goto LABEL_46;
            }
          }
          else if (*(_BYTE *)(v7 + 17))
          {
            v43 = *(_QWORD *)v7;
            v27 = *(_QWORD *)(v7 + 8);
            LOBYTE(v22) = *(_BYTE *)(v7 + 16);
            if (!*(_BYTE *)(a2 - 7))
              goto LABEL_135;
LABEL_132:
            v45 = 0;
            v46 = 1;
            goto LABEL_147;
          }
          v22 = *(unsigned __int8 *)(v7 + 16);
          v26 = *(_BYTE *)(v7 + 16) == 0;
          if (*(_BYTE *)(v7 - 8))
          {
            if (!*(_BYTE *)(v7 + 16))
              goto LABEL_25;
          }
          else if (*(_BYTE *)(v7 + 16))
          {
            v43 = *(_QWORD *)v7;
            v27 = *(_QWORD *)(v7 + 8);
            v44 = *(_BYTE *)(a2 - 7) == 0;
            if (*(_BYTE *)(v7 + 17))
              goto LABEL_134;
            v26 = 0;
            goto LABEL_145;
          }
          v27 = *(_QWORD *)(v7 + 8);
          if (*(_QWORD *)(v7 - 16) > v27)
            goto LABEL_25;
          v43 = *(_QWORD *)v7;
          v44 = *(_BYTE *)(a2 - 7) == 0;
          if (*(_BYTE *)(v7 + 17))
          {
LABEL_134:
            if (v44)
            {
LABEL_135:
              v46 = 0;
              v47 = v22 == 0;
LABEL_136:
              i = v7 + 24;
              v45 = *(unsigned __int8 *)(v7 + 41);
              if (!*(_BYTE *)(v7 + 41))
                goto LABEL_204;
              if (v47)
              {
                v48 = v7 + 32;
                while (*(_BYTE *)(v48 + 8) || v27 <= *(_QWORD *)v48)
                {
                  v45 = *(unsigned __int8 *)(v48 + 33);
                  v48 += 24;
                  if (!v45)
                    goto LABEL_143;
                }
                v45 = 0;
LABEL_143:
                i = v48 - 8;
                goto LABEL_204;
              }
LABEL_151:
              v49 = i;
              v50 = v7;
              while (1)
              {
                i = v49;
                if (!*(_BYTE *)(v50 + 40) || v27 > *(_QWORD *)(v50 + 32))
                  break;
                v49 += 24;
                v50 = i;
                if (!*(_BYTE *)(i + 41))
                {
                  v45 = 0;
                  i += 24;
                  goto LABEL_204;
                }
              }
LABEL_188:
              v45 = 0;
              goto LABEL_204;
            }
            goto LABEL_132;
          }
LABEL_145:
          if (!v44)
          {
            i = v7 + 24;
            if (v7 + 24 >= a2)
            {
              LOBYTE(v19) = 0;
              v45 = 1;
              v46 = 1;
              goto LABEL_204;
            }
            LOBYTE(v19) = 0;
            v46 = 1;
            LOBYTE(v22) = 1;
            if (!v26)
              goto LABEL_169;
            goto LABEL_177;
          }
          LOBYTE(v19) = 0;
          v46 = 0;
          v45 = 1;
LABEL_147:
          v47 = v22 == 0;
          if (!(_BYTE)v22)
          {
            if (*(_BYTE *)(a2 - 8))
              goto LABEL_166;
LABEL_157:
            if (v27 > *(_QWORD *)(a2 - 16))
            {
              if ((v45 & 1) != 0)
              {
                if ((_BYTE)v22)
                {
LABEL_160:
                  for (i = v7 + 24; *(_BYTE *)(i + 17) || *(_BYTE *)(i + 16) && v27 <= *(_QWORD *)(i + 8); i += 24)
                    ;
                  goto LABEL_204;
                }
                for (i = v7 + 24; *(_BYTE *)(i + 17) || *(_BYTE *)(i + 16) || v27 <= *(_QWORD *)(i + 8); i += 24)
                  ;
                goto LABEL_202;
              }
              goto LABEL_136;
            }
LABEL_166:
            i = v7 + 24;
            if (v7 + 24 >= a2)
              goto LABEL_204;
            if (!v45)
            {
              if ((_BYTE)v22)
              {
                while (1)
                {
                  v45 = *(unsigned __int8 *)(i + 17);
                  if (!*(_BYTE *)(i + 17))
                    goto LABEL_204;
                  v45 = *(unsigned __int8 *)(i + 16);
                  if (!*(_BYTE *)(i + 16))
                    goto LABEL_204;
                  if (v27 <= *(_QWORD *)(i + 8))
                  {
                    i += 24;
                    if (i < a2)
                      continue;
                  }
                  goto LABEL_188;
                }
              }
              while (1)
              {
                LOBYTE(v22) = *(_BYTE *)(i + 17);
                if (!(_BYTE)v22)
                  goto LABEL_188;
                if (*(_BYTE *)(i + 16) || v27 <= *(_QWORD *)(i + 8))
                {
                  i += 24;
                  if (i < a2)
                    continue;
                }
                v45 = 0;
                LOBYTE(v22) = 0;
                goto LABEL_204;
              }
            }
            if ((_BYTE)v22)
            {
LABEL_169:
              v51 = i;
              v52 = v7;
              while (1)
              {
                i = v51;
                if (!*(_BYTE *)(v52 + 41) && (!*(_BYTE *)(v52 + 40) || v27 > *(_QWORD *)(v52 + 32)))
                  goto LABEL_203;
                v51 += 24;
                v52 = i;
                if (i + 24 >= a2)
                  goto LABEL_196;
              }
            }
LABEL_177:
            v51 = i;
            i = v7;
            while (1)
            {
              v53 = i;
              i = v51;
              if (!*(_BYTE *)(v53 + 41) && !*(_BYTE *)(v53 + 40) && v27 > *(_QWORD *)(v53 + 32))
                break;
              v51 += 24;
              if (i + 24 >= a2)
              {
                LOBYTE(v22) = 0;
LABEL_196:
                v45 = 1;
                i = v51;
                goto LABEL_204;
              }
            }
LABEL_202:
            LOBYTE(v22) = 0;
LABEL_203:
            v45 = 1;
            goto LABEL_204;
          }
          if (*(_BYTE *)(a2 - 8))
            goto LABEL_157;
          if (v45)
            goto LABEL_160;
          i = v7 + 24;
          v45 = *(unsigned __int8 *)(v7 + 41);
          if (*(_BYTE *)(v7 + 41))
            goto LABEL_151;
LABEL_204:
          v54 = (_BYTE *)a2;
          if (i >= a2)
            goto LABEL_217;
          v55 = (_BYTE *)(a2 - 8);
          while ((v45 & 1) == 0)
          {
            if (!v46)
              goto LABEL_208;
LABEL_213:
            if ((_BYTE)v22)
            {
              if (!*v55)
                goto LABEL_208;
            }
            else if (*v55)
            {
              goto LABEL_216;
            }
            if (v27 <= *((_QWORD *)v55 - 1))
              goto LABEL_216;
LABEL_208:
            v46 = *(v55 - 23);
            v55 -= 24;
          }
          if (!v46)
            goto LABEL_213;
LABEL_216:
          v54 = v55 - 16;
LABEL_217:
          if (i < (unint64_t)v54)
          {
            v56 = *(_QWORD *)i;
            *(_QWORD *)i = *(_QWORD *)v54;
            *(_QWORD *)v54 = v56;
            v57 = *(_QWORD *)(i + 8);
            *(_QWORD *)(i + 8) = *((_QWORD *)v54 + 1);
            *((_QWORD *)v54 + 1) = v57;
            LOBYTE(v57) = *(_BYTE *)(i + 16);
            *(_BYTE *)(i + 16) = v54[16];
            v54[16] = v57;
            LOBYTE(v57) = *(_BYTE *)(i + 17);
            *(_BYTE *)(i + 17) = v54[17];
            v54[17] = v57;
            if (v45)
            {
              if ((_BYTE)v22)
              {
                do
                {
                  do
                    i += 24;
                  while (*(_BYTE *)(i + 17));
                }
                while (*(_BYTE *)(i + 16) && v27 <= *(_QWORD *)(i + 8));
              }
              else
              {
                do
                {
                  do
                    i += 24;
                  while (*(_BYTE *)(i + 17));
                }
                while (*(_BYTE *)(i + 16) || v27 <= *(_QWORD *)(i + 8));
              }
            }
            else
            {
              v58 = i + 24;
              if (!*(_BYTE *)(i + 41))
              {
                i += 24;
                goto LABEL_244;
              }
              if ((_BYTE)v22)
              {
                v59 = i + 32;
                do
                {
                  if (!*(_BYTE *)(v59 + 8))
                    break;
                  if (v27 > *(_QWORD *)v59)
                  {
                    i = v58;
                    goto LABEL_244;
                  }
                  v58 += 24;
                  v60 = *(unsigned __int8 *)(v59 + 33);
                  v59 += 24;
                }
                while (v60);
                i = v59 - 8;
                goto LABEL_244;
              }
              v61 = i + 32;
              do
              {
                if (!*(_BYTE *)(v61 + 8) && v27 > *(_QWORD *)v61)
                  break;
                v62 = *(unsigned __int8 *)(v61 + 33);
                v61 += 24;
              }
              while (v62);
              i = v61 - 8;
            }
            while (1)
            {
LABEL_244:
              v54 -= 24;
              if ((v45 & 1) != 0)
              {
                if (v54[17])
                  goto LABEL_217;
              }
              else if (!v54[17])
              {
                continue;
              }
              if ((_BYTE)v22)
              {
                if (!v54[16])
                  continue;
              }
              else if (v54[16])
              {
                goto LABEL_217;
              }
              if (v27 <= *((_QWORD *)v54 + 1))
                goto LABEL_217;
            }
          }
          if (i - 24 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(i - 24);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(i - 16);
            *(_BYTE *)(v7 + 16) = *(_BYTE *)(i - 8);
            *(_BYTE *)(v7 + 17) = *(_BYTE *)(i - 7);
          }
          a4 = 0;
          *(_QWORD *)(i - 24) = v43;
          *(_QWORD *)(i - 16) = v27;
          *(_BYTE *)(i - 8) = v22;
          *(_BYTE *)(i - 7) = v19;
          continue;
        }
        result = (unint64_t)sub_239C59D9C((uint64_t *)(v7 + 24 * v11), (uint64_t *)v7, (uint64_t *)(a2 - 24));
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_8;
LABEL_18:
        v19 = *(unsigned __int8 *)(v7 + 17);
        v22 = *(unsigned __int8 *)(v7 + 16);
LABEL_25:
        v20 = *(_QWORD *)v7;
        v21 = *(_QWORD *)(v7 + 8);
        if (!v19)
        {
          if (!v22)
          {
LABEL_11:
            for (j = v7 + 24; *(_BYTE *)(j + 17) || *(_BYTE *)(j + 16) || *(_QWORD *)(j + 8) > v21; j += 24)
              ;
            LOBYTE(v19) = 0;
            LOBYTE(v22) = 0;
            v24 = j - 24;
            v25 = 1;
            goto LABEL_52;
          }
LABEL_46:
          for (j = v7 + 24; *(_BYTE *)(j + 17) || *(_BYTE *)(j + 16) && *(_QWORD *)(j + 8) > v21; j += 24)
            ;
          v25 = 0;
          LOBYTE(v19) = 0;
          v24 = j - 24;
LABEL_52:
          v29 = 1;
          if (v24 != v7)
            goto LABEL_53;
          goto LABEL_32;
        }
        if (v22)
        {
          v28 = v7 + 24;
          do
          {
            j = v28;
            if (!*(_BYTE *)(v28 + 17))
              break;
            if (!*(_BYTE *)(v28 + 16))
              break;
            v28 += 24;
          }
          while (*(_QWORD *)(j + 8) > v21);
          v25 = 0;
          v29 = 0;
          if (j - 24 != v7)
            goto LABEL_53;
        }
        else
        {
          LOBYTE(v22) = *(_BYTE *)(v7 + 41);
          if (!(_BYTE)v22)
          {
            v29 = 0;
            j = v7 + 24;
            v25 = 1;
            if (v7 + 24 >= a2)
            {
LABEL_87:
              v30 = (_BYTE *)a2;
              goto LABEL_88;
            }
            goto LABEL_33;
          }
          v31 = v7;
          do
          {
            if (!*(_BYTE *)(v31 + 40) && *(_QWORD *)(v31 + 32) <= v21)
            {
              v29 = 0;
              LOBYTE(v22) = 0;
              goto LABEL_84;
            }
            v22 = *(unsigned __int8 *)(v31 + 65);
            v31 += 24;
          }
          while (v22);
          v29 = 0;
LABEL_84:
          j = v31 + 24;
          v25 = 1;
          if (v31 != v7)
          {
LABEL_53:
            v30 = (_BYTE *)(a2 - 24);
            if ((v29 & 1) != 0)
            {
              if (*(_BYTE *)(a2 - 7))
              {
                v29 = 1;
                v30 = (_BYTE *)(a2 - 24);
                goto LABEL_88;
              }
              v32 = (_BYTE *)(a2 - 8);
              if ((v25 & 1) != 0)
              {
                v33 = (_BYTE *)(a2 - 8);
                v30 = (_BYTE *)(a2 - 24);
                do
                {
                  if (*v33)
                    break;
                  if (*((_QWORD *)v33 - 1) > v21)
                    goto LABEL_77;
                  v30 -= 24;
                  v34 = *(v33 - 23);
                  v33 -= 24;
                }
                while (!v34);
                v30 = v33 - 16;
LABEL_77:
                v25 = 1;
                v29 = 1;
                goto LABEL_88;
              }
              do
              {
                if (*v32 && *((_QWORD *)v32 - 1) > v21)
                  break;
                v35 = *(v32 - 23);
                v32 -= 24;
              }
              while (!v35);
              v25 = 0;
              v30 = v32 - 16;
              goto LABEL_82;
            }
            while (2)
            {
              if (v30[17])
              {
                if (v30[16])
                {
                  if ((v25 & 1) != 0)
                  {
                    v29 = 0;
                    v25 = 1;
                    goto LABEL_88;
                  }
                }
                else if (!v25)
                {
                  goto LABEL_58;
                }
                if (*((_QWORD *)v30 + 1) > v21)
                {
                  v29 = 0;
                  goto LABEL_88;
                }
              }
LABEL_58:
              v30 -= 24;
              continue;
            }
          }
        }
LABEL_32:
        if (j >= a2)
          goto LABEL_87;
LABEL_33:
        v30 = (_BYTE *)(a2 - 24);
        if (!*(_BYTE *)(a2 - 7))
        {
          while (!v29)
          {
LABEL_42:
            if (j >= (unint64_t)v30)
              goto LABEL_88;
            v30 -= 24;
            if (v30[17])
              goto LABEL_34;
          }
LABEL_37:
          if (v30[16])
          {
            if ((v25 & 1) != 0)
            {
              v25 = 1;
              goto LABEL_88;
            }
          }
          else if (!v25)
          {
            goto LABEL_42;
          }
          if (*((_QWORD *)v30 + 1) > v21)
            goto LABEL_88;
          goto LABEL_42;
        }
LABEL_34:
        if ((v29 & 1) == 0)
          goto LABEL_37;
LABEL_82:
        v29 = 1;
LABEL_88:
        i = j;
        if (j >= (unint64_t)v30)
          goto LABEL_123;
        i = j;
        v36 = (unint64_t)v30;
        while (2)
        {
          v37 = *(_QWORD *)i;
          *(_QWORD *)i = *(_QWORD *)v36;
          *(_QWORD *)v36 = v37;
          v38 = *(_QWORD *)(i + 8);
          *(_QWORD *)(i + 8) = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = v38;
          LOBYTE(v38) = *(_BYTE *)(i + 16);
          *(_BYTE *)(i + 16) = *(_BYTE *)(v36 + 16);
          *(_BYTE *)(v36 + 16) = v38;
          LOBYTE(v38) = *(_BYTE *)(i + 17);
          *(_BYTE *)(i + 17) = *(_BYTE *)(v36 + 17);
          *(_BYTE *)(v36 + 17) = v38;
          if (v29)
          {
            if ((v25 & 1) != 0)
            {
              do
              {
                do
                  i += 24;
                while (*(_BYTE *)(i + 17));
              }
              while (*(_BYTE *)(i + 16) || *(_QWORD *)(i + 8) > v21);
            }
            else
            {
              do
              {
                do
                  i += 24;
                while (*(_BYTE *)(i + 17));
              }
              while (*(_BYTE *)(i + 16) && *(_QWORD *)(i + 8) > v21);
            }
          }
          else if ((v25 & 1) != 0)
          {
            if (*(_BYTE *)(i + 41))
            {
              v39 = i + 32;
              do
              {
                if (!*(_BYTE *)(v39 + 8) && *(_QWORD *)v39 <= v21)
                  break;
                v40 = *(unsigned __int8 *)(v39 + 33);
                v39 += 24;
              }
              while (v40);
              i = v39 - 8;
            }
            else
            {
              i += 24;
            }
          }
          else
          {
            v41 = i + 24;
            do
            {
              i = v41;
              if (!*(_BYTE *)(v41 + 17))
                break;
              if (!*(_BYTE *)(v41 + 16))
                break;
              v41 += 24;
            }
            while (*(_QWORD *)(i + 8) > v21);
          }
          while (1)
          {
            v36 -= 24;
            if (*(_BYTE *)(v36 + 17))
              break;
            if (v29)
            {
LABEL_120:
              if (*(_BYTE *)(v36 + 16))
              {
                if ((v25 & 1) != 0)
                  goto LABEL_90;
                goto LABEL_115;
              }
              if (v25)
              {
LABEL_115:
                if (*(_QWORD *)(v36 + 8) > v21)
                  goto LABEL_90;
              }
            }
          }
          if ((v29 & 1) == 0)
            goto LABEL_120;
LABEL_90:
          if (i < v36)
            continue;
          break;
        }
LABEL_123:
        if (i - 24 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(i - 24);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(i - 16);
          *(_BYTE *)(v7 + 16) = *(_BYTE *)(i - 8);
          *(_BYTE *)(v7 + 17) = *(_BYTE *)(i - 7);
        }
        *(_QWORD *)(i - 24) = v20;
        *(_QWORD *)(i - 16) = v21;
        *(_BYTE *)(i - 8) = v22;
        *(_BYTE *)(i - 7) = v19;
        if (j < (unint64_t)v30)
        {
LABEL_128:
          result = sub_239C583D0(v7, i - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v42 = sub_239C5A444(v7, i - 24);
        result = sub_239C5A444(i, a2);
        if (!(_DWORD)result)
        {
          if (v42)
            continue;
          goto LABEL_128;
        }
        a2 = i - 24;
        if (!v42)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_239C59ACC(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_34;
    if (prime < v7)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < v7)
LABEL_34:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *v13 = *v24;
LABEL_58:
    *v24 = v13;
    goto LABEL_59;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v25 = *(_QWORD *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_239C59D88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239C59D9C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = (char *)a2 + 17;
  v4 = (char *)result + 17;
  if (!*((_BYTE *)a2 + 17))
  {
    if (*((_BYTE *)result + 17))
    {
      v6 = *((unsigned __int8 *)a2 + 16);
      if (*((_BYTE *)a3 + 17))
        goto LABEL_41;
      goto LABEL_36;
    }
LABEL_8:
    v6 = *((unsigned __int8 *)a2 + 16);
    if (*((_BYTE *)a2 + 16))
    {
      if (!*((_BYTE *)result + 16))
      {
LABEL_13:
        v5 = (char *)a3 + 17;
        if (*((_BYTE *)a3 + 17))
        {
          if (!*((_BYTE *)a2 + 17))
          {
            v7 = *((_BYTE *)a3 + 16);
            goto LABEL_26;
          }
        }
        else if (*((_BYTE *)a2 + 17))
        {
          goto LABEL_27;
        }
LABEL_20:
        v7 = *((_BYTE *)a3 + 16);
        if (v7)
        {
          if (!v6)
          {
            v7 = 1;
            goto LABEL_26;
          }
        }
        else if (v6)
        {
          LOBYTE(v6) = 1;
          goto LABEL_27;
        }
        if (a3[1] <= (unint64_t)a2[1])
          goto LABEL_27;
LABEL_26:
        v8 = *result;
        *result = *a3;
        *a3 = v8;
        v9 = result[1];
        result[1] = a3[1];
        a3[1] = v9;
        LOBYTE(v9) = *((_BYTE *)result + 16);
        *((_BYTE *)result + 16) = v7;
        *((_BYTE *)a3 + 16) = v9;
LABEL_54:
        v3 = v5;
        goto LABEL_55;
      }
    }
    else if (*((_BYTE *)result + 16))
    {
      goto LABEL_16;
    }
    if (a2[1] > (unint64_t)result[1])
      goto LABEL_13;
LABEL_16:
    if (*((_BYTE *)a3 + 17))
    {
      if (!*((_BYTE *)a2 + 17))
        goto LABEL_41;
    }
    else if (*((_BYTE *)a2 + 17))
    {
      return result;
    }
LABEL_36:
    if (*((_BYTE *)a3 + 16))
    {
      if (!v6)
        goto LABEL_41;
    }
    else if (v6)
    {
      return result;
    }
    if (a3[1] <= (unint64_t)a2[1])
      return result;
LABEL_41:
    v15 = *a2;
    *a2 = *a3;
    *a3 = v15;
    v16 = a2[1];
    a2[1] = a3[1];
    a3[1] = v16;
    *((_BYTE *)a2 + 16) = *((_BYTE *)a3 + 16);
    *((_BYTE *)a3 + 16) = v6;
    LOBYTE(v16) = *((_BYTE *)a2 + 17);
    *((_BYTE *)a2 + 17) = *((_BYTE *)a3 + 17);
    *((_BYTE *)a3 + 17) = v16;
    if (*((_BYTE *)a2 + 17))
    {
      if (!*v4)
      {
        v17 = *((_BYTE *)result + 16);
        v18 = *((_BYTE *)a2 + 16);
        goto LABEL_50;
      }
    }
    else if (*v4)
    {
      return result;
    }
    v18 = *((_BYTE *)a2 + 16);
    v17 = *((_BYTE *)result + 16);
    if (v18)
    {
      if (!*((_BYTE *)result + 16))
      {
        v18 = 1;
        goto LABEL_50;
      }
    }
    else if (*((_BYTE *)result + 16))
    {
      return result;
    }
    if (a2[1] <= (unint64_t)result[1])
      return result;
LABEL_50:
    v19 = *result;
    *result = *a2;
    *a2 = v19;
    v20 = result[1];
    result[1] = a2[1];
    a2[1] = v20;
    *((_BYTE *)result + 16) = v18;
    *((_BYTE *)a2 + 16) = v17;
LABEL_55:
    v23 = *v4;
    *v4 = *v3;
    *v3 = v23;
    return result;
  }
  if (*((_BYTE *)result + 17))
    goto LABEL_8;
  v5 = (char *)a3 + 17;
  v6 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a3 + 17))
    goto LABEL_20;
LABEL_27:
  v10 = *result;
  *result = *a2;
  *a2 = v10;
  v11 = result[1];
  result[1] = a2[1];
  a2[1] = v11;
  LOBYTE(v10) = *((_BYTE *)result + 16);
  *((_BYTE *)result + 16) = v6;
  *((_BYTE *)a2 + 16) = v10;
  v12 = *((unsigned __int8 *)result + 17);
  *((_BYTE *)result + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a2 + 17) = v12;
  if (*v5)
  {
    if (!v12)
    {
      v13 = *((_BYTE *)a2 + 16);
      v14 = *((_BYTE *)a3 + 16);
LABEL_53:
      v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      v22 = a2[1];
      a2[1] = a3[1];
      a3[1] = v22;
      *((_BYTE *)a2 + 16) = v14;
      *((_BYTE *)a3 + 16) = v13;
      v4 = (char *)a2 + 17;
      goto LABEL_54;
    }
  }
  else if (v12)
  {
    return result;
  }
  v14 = *((_BYTE *)a3 + 16);
  v13 = *((_BYTE *)a2 + 16);
  if (v14)
  {
    if (!*((_BYTE *)a2 + 16))
    {
      v14 = 1;
      goto LABEL_53;
    }
  }
  else if (*((_BYTE *)a2 + 16))
  {
    return result;
  }
  if (a3[1] > v11)
    goto LABEL_53;
  return result;
}

uint64_t *sub_239C5A034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  result = sub_239C59D9C((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (*(_BYTE *)(a4 + 17))
  {
    if (!*(_BYTE *)(a3 + 17))
    {
      v9 = *(_BYTE *)(a3 + 16);
      v10 = *(_BYTE *)(a4 + 16);
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(a3 + 17))
  {
    return result;
  }
  v10 = *(_BYTE *)(a4 + 16);
  v9 = *(_BYTE *)(a3 + 16);
  if (v10)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v10 = 1;
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(a3 + 16))
  {
    return result;
  }
  if (*(_QWORD *)(a4 + 8) <= *(_QWORD *)(a3 + 8))
    return result;
LABEL_10:
  v11 = *(_QWORD *)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v11;
  v12 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a3 + 16) = v10;
  *(_BYTE *)(a4 + 16) = v9;
  v13 = *(_BYTE *)(a3 + 17);
  *(_BYTE *)(a3 + 17) = *(_BYTE *)(a4 + 17);
  *(_BYTE *)(a4 + 17) = v13;
  if (*(_BYTE *)(a3 + 17))
  {
    if (!*(_BYTE *)(a2 + 17))
    {
      v14 = *(_BYTE *)(a2 + 16);
      v15 = *(_BYTE *)(a3 + 16);
      goto LABEL_19;
    }
  }
  else if (*(_BYTE *)(a2 + 17))
  {
    return result;
  }
  v15 = *(_BYTE *)(a3 + 16);
  v14 = *(_BYTE *)(a2 + 16);
  if (v15)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      v15 = 1;
      goto LABEL_19;
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    return result;
  }
  if (*(_QWORD *)(a3 + 8) <= *(_QWORD *)(a2 + 8))
    return result;
LABEL_19:
  v16 = *(_QWORD *)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v16;
  v17 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a2 + 16) = v15;
  *(_BYTE *)(a3 + 16) = v14;
  v18 = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(a3 + 17);
  *(_BYTE *)(a3 + 17) = v18;
  if (!*(_BYTE *)(a2 + 17))
  {
    if (*(_BYTE *)(a1 + 17))
      return result;
LABEL_23:
    v20 = *(_BYTE *)(a2 + 16);
    v19 = *(_BYTE *)(a1 + 16);
    if (v20)
    {
      if (!*(_BYTE *)(a1 + 16))
      {
        v20 = 1;
        goto LABEL_28;
      }
    }
    else if (*(_BYTE *)(a1 + 16))
    {
      return result;
    }
    if (*(_QWORD *)(a2 + 8) <= *(_QWORD *)(a1 + 8))
      return result;
    goto LABEL_28;
  }
  if (*(_BYTE *)(a1 + 17))
    goto LABEL_23;
  v19 = *(_BYTE *)(a1 + 16);
  v20 = *(_BYTE *)(a2 + 16);
LABEL_28:
  v21 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v21;
  v22 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v22;
  *(_BYTE *)(a1 + 16) = v20;
  *(_BYTE *)(a2 + 16) = v19;
  v23 = *(_BYTE *)(a1 + 17);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a2 + 17) = v23;
  return result;
}

uint64_t *sub_239C5A1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  result = sub_239C5A034(a1, a2, a3, a4);
  if (*(_BYTE *)(a5 + 17))
  {
    if (!*(_BYTE *)(a4 + 17))
    {
      v11 = *(_BYTE *)(a4 + 16);
      v12 = *(_BYTE *)(a5 + 16);
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(a4 + 17))
  {
    return result;
  }
  v12 = *(_BYTE *)(a5 + 16);
  v11 = *(_BYTE *)(a4 + 16);
  if (v12)
  {
    if (!*(_BYTE *)(a4 + 16))
    {
      v12 = 1;
      goto LABEL_10;
    }
  }
  else if (*(_BYTE *)(a4 + 16))
  {
    return result;
  }
  if (*(_QWORD *)(a5 + 8) <= *(_QWORD *)(a4 + 8))
    return result;
LABEL_10:
  v13 = *(_QWORD *)a4;
  *(_QWORD *)a4 = *(_QWORD *)a5;
  *(_QWORD *)a5 = v13;
  v14 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v14;
  *(_BYTE *)(a4 + 16) = v12;
  *(_BYTE *)(a5 + 16) = v11;
  v15 = *(_BYTE *)(a4 + 17);
  *(_BYTE *)(a4 + 17) = *(_BYTE *)(a5 + 17);
  *(_BYTE *)(a5 + 17) = v15;
  if (*(_BYTE *)(a4 + 17))
  {
    if (!*(_BYTE *)(a3 + 17))
    {
      v16 = *(_BYTE *)(a3 + 16);
      v17 = *(_BYTE *)(a4 + 16);
      goto LABEL_19;
    }
  }
  else if (*(_BYTE *)(a3 + 17))
  {
    return result;
  }
  v17 = *(_BYTE *)(a4 + 16);
  v16 = *(_BYTE *)(a3 + 16);
  if (v17)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v17 = 1;
      goto LABEL_19;
    }
  }
  else if (*(_BYTE *)(a3 + 16))
  {
    return result;
  }
  if (*(_QWORD *)(a4 + 8) <= *(_QWORD *)(a3 + 8))
    return result;
LABEL_19:
  v18 = *(_QWORD *)a3;
  *(_QWORD *)a3 = *(_QWORD *)a4;
  *(_QWORD *)a4 = v18;
  v19 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v19;
  *(_BYTE *)(a3 + 16) = v17;
  *(_BYTE *)(a4 + 16) = v16;
  v20 = *(_BYTE *)(a3 + 17);
  *(_BYTE *)(a3 + 17) = *(_BYTE *)(a4 + 17);
  *(_BYTE *)(a4 + 17) = v20;
  if (*(_BYTE *)(a3 + 17))
  {
    if (!*(_BYTE *)(a2 + 17))
    {
      v21 = *(_BYTE *)(a2 + 16);
      v22 = *(_BYTE *)(a3 + 16);
      goto LABEL_28;
    }
  }
  else if (*(_BYTE *)(a2 + 17))
  {
    return result;
  }
  v22 = *(_BYTE *)(a3 + 16);
  v21 = *(_BYTE *)(a2 + 16);
  if (v22)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      v22 = 1;
      goto LABEL_28;
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    return result;
  }
  if (*(_QWORD *)(a3 + 8) <= *(_QWORD *)(a2 + 8))
    return result;
LABEL_28:
  v23 = *(_QWORD *)a2;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v23;
  v24 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a2 + 16) = v22;
  *(_BYTE *)(a3 + 16) = v21;
  v25 = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a2 + 17) = *(_BYTE *)(a3 + 17);
  *(_BYTE *)(a3 + 17) = v25;
  if (!*(_BYTE *)(a2 + 17))
  {
    if (*(_BYTE *)(a1 + 17))
      return result;
LABEL_32:
    v27 = *(_BYTE *)(a2 + 16);
    v26 = *(_BYTE *)(a1 + 16);
    if (v27)
    {
      if (!*(_BYTE *)(a1 + 16))
      {
        v27 = 1;
        goto LABEL_37;
      }
    }
    else if (*(_BYTE *)(a1 + 16))
    {
      return result;
    }
    if (*(_QWORD *)(a2 + 8) <= *(_QWORD *)(a1 + 8))
      return result;
    goto LABEL_37;
  }
  if (*(_BYTE *)(a1 + 17))
    goto LABEL_32;
  v26 = *(_BYTE *)(a1 + 16);
  v27 = *(_BYTE *)(a2 + 16);
LABEL_37:
  v28 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = v28;
  v29 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v29;
  *(_BYTE *)(a1 + 16) = v27;
  *(_BYTE *)(a2 + 16) = v26;
  v30 = *(_BYTE *)(a1 + 17);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a2 + 17) = v30;
  return result;
}

BOOL sub_239C5A444(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_BYTE *)(a2 - 7))
      {
        if (!*(_BYTE *)(a1 + 17))
        {
          v6 = *(_BYTE *)(a1 + 16);
          v7 = *(_BYTE *)(a2 - 8);
          goto LABEL_56;
        }
      }
      else if (*(_BYTE *)(a1 + 17))
      {
        return result;
      }
      v7 = *(_BYTE *)(a2 - 8);
      v6 = *(_BYTE *)(a1 + 16);
      if (v7)
      {
        if (!*(_BYTE *)(a1 + 16))
        {
          v7 = 1;
          goto LABEL_56;
        }
      }
      else if (*(_BYTE *)(a1 + 16))
      {
        return result;
      }
      if (*(_QWORD *)(a2 - 16) <= *(_QWORD *)(a1 + 8))
        return result;
LABEL_56:
      v33 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
      *(_QWORD *)(a2 - 24) = v33;
      v34 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 16) = v34;
      *(_BYTE *)(a1 + 16) = v7;
      *(_BYTE *)(a2 - 8) = v6;
      v35 = *(_BYTE *)(a1 + 17);
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 - 7);
      *(_BYTE *)(a2 - 7) = v35;
      return result;
    case 3uLL:
      sub_239C59D9C((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_239C5A034(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_239C5A1F4(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v8 = a1 + 48;
      sub_239C59D9C((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v9 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (2)
  {
    v13 = *(unsigned __int8 *)(v9 + 17);
    if (*(_BYTE *)(v9 + 17))
    {
      if (!*(_BYTE *)(v8 + 17))
      {
        v14 = *(unsigned __int8 *)(v9 + 16);
        v15 = *(_BYTE *)(v8 + 16);
        goto LABEL_19;
      }
    }
    else if (*(_BYTE *)(v8 + 17))
    {
      goto LABEL_9;
    }
    v14 = *(unsigned __int8 *)(v9 + 16);
    v15 = *(_BYTE *)(v8 + 16);
    if (*(_BYTE *)(v9 + 16))
    {
      if (!*(_BYTE *)(v8 + 16))
      {
        v14 = 1;
        goto LABEL_19;
      }
    }
    else if (*(_BYTE *)(v8 + 16))
    {
      goto LABEL_9;
    }
    if (*(_QWORD *)(v9 + 8) <= *(_QWORD *)(v8 + 8))
      goto LABEL_9;
LABEL_19:
    v17 = *(_QWORD *)v9;
    v16 = *(_QWORD *)(v9 + 8);
    *(_QWORD *)v9 = *(_QWORD *)v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    *(_BYTE *)(v9 + 16) = v15;
    *(_BYTE *)(v9 + 17) = *(_BYTE *)(v8 + 17);
    v12 = a1;
    if (v8 == a1)
      goto LABEL_8;
    v18 = v10;
    if (!v13)
    {
      while (1)
      {
        v26 = a1 + v18;
        if (*(_BYTE *)(a1 + v18 + 41))
        {
LABEL_41:
          v12 = v8;
          goto LABEL_8;
        }
        v27 = *(_BYTE *)(v26 + 40);
        if (v14)
        {
          if (!*(_BYTE *)(v26 + 40))
          {
            v24 = *(_QWORD *)(a1 + v18 + 32);
            goto LABEL_30;
          }
        }
        else if (*(_BYTE *)(v26 + 40))
        {
          goto LABEL_41;
        }
        v23 = a1 + v18;
        v24 = *(_QWORD *)(a1 + v18 + 32);
        if (v16 <= v24)
        {
LABEL_42:
          v12 = v23 + 48;
          goto LABEL_8;
        }
LABEL_30:
        v8 -= 24;
        *(_QWORD *)(v26 + 48) = *(_QWORD *)(v26 + 24);
        v25 = a1 + v18;
        *(_QWORD *)(v25 + 56) = v24;
        *(_BYTE *)(v25 + 64) = v27;
        *(_BYTE *)(v25 + 65) = 0;
        v18 -= 24;
        if (v18 == -48)
        {
LABEL_7:
          v12 = a1;
          goto LABEL_8;
        }
      }
    }
    if (!v14)
    {
      v19 = v10;
      while (1)
      {
        v31 = a1 + v19;
        v32 = *(_BYTE *)(a1 + v19 + 41);
        if (v32)
        {
          if (*(_BYTE *)(v31 + 40))
            goto LABEL_41;
          v23 = a1 + v19;
          v28 = *(_QWORD *)(a1 + v19 + 32);
          if (v16 <= v28)
            goto LABEL_42;
          v29 = 0;
        }
        else
        {
          v28 = *(_QWORD *)(v31 + 32);
          v29 = *(_BYTE *)(v31 + 40);
        }
        v8 -= 24;
        *(_QWORD *)(v31 + 48) = *(_QWORD *)(v31 + 24);
        v30 = a1 + v19;
        *(_QWORD *)(v30 + 56) = v28;
        *(_BYTE *)(v30 + 64) = v29;
        *(_BYTE *)(v30 + 65) = v32;
        v19 -= 24;
        if (v19 == -48)
          goto LABEL_7;
      }
    }
    while (1)
    {
      v20 = a1 + v18;
      v21 = *(_BYTE *)(a1 + v18 + 41);
      v22 = *(_BYTE *)(a1 + v18 + 40);
      if (!v21 || !*(_BYTE *)(a1 + v18 + 40))
        goto LABEL_23;
      if (v16 <= *(_QWORD *)(a1 + v18 + 32))
        break;
      v22 = 1;
LABEL_23:
      *(_OWORD *)(v20 + 48) = *(_OWORD *)(v20 + 24);
      *(_BYTE *)(v20 + 64) = v22;
      *(_BYTE *)(v20 + 65) = v21;
      v18 -= 24;
      if (v18 == -48)
        goto LABEL_7;
    }
    v12 = a1 + v18 + 48;
LABEL_8:
    *(_QWORD *)v12 = v17;
    *(_QWORD *)(v12 + 8) = v16;
    *(_BYTE *)(v12 + 16) = v14;
    *(_BYTE *)(v12 + 17) = v13;
    if (++v11 == 8)
      return v9 + 24 == a2;
LABEL_9:
    v8 = v9;
    v10 += 24;
    v9 += 24;
    if (v9 != a2)
      continue;
    return 1;
  }
}

void sub_239C5A78C(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  float64_t v21;
  uint64_t v22;
  float64_t v23;
  _QWORD *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  float64x2_t v28;
  float64x2_t v29;
  unint64_t v30;
  double v31;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v37;
  float64x2_t v40;
  float64x2_t v43;
  int64x2_t v45;
  double v46;
  double v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double v56;
  double v57;
  double v58;
  float64x2_t v60;
  int64x2_t v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v67;
  float64x2_t v70;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v77;
  int64x2_t v78;
  double v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v85;
  float64x2_t v87;
  int64x2_t v90;
  float64x2_t v91;
  int64x2_t v92;
  float64x2_t v93;
  double v94;
  std::bad_alloc *exception;
  std::bad_alloc *v99;
  std::bad_alloc *v100;
  std::bad_alloc *v101;
  uint64_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  double v115;
  double v116;
  double v117;
  float64x2_t v118;
  int64x2_t v119;
  float64_t v120;
  int64x2_t v121;
  float64_t v122;
  int64x2_t v123;
  double v124;
  float64x2_t v125;
  double v126;
  float64x2_t v127;
  uint64_t v128;
  float64x2_t v129;
  uint64_t v130;
  float64x2_t v131[4];
  int64x2_t memptr;
  _BYTE v133[32];
  float64x2_t v134;
  double v135;
  unint64_t *v136;
  unint64_t *v137;
  uint64_t v138;

  v4 = a1;
  v5 = (uint64_t *)(a1 + 232);
  v136 = 0;
  v137 = 0;
  v138 = 0;
  sub_239AFA8E8((uint64_t *)(a1 + 232), (uint64_t)&v136);
  v7 = v136;
  v6 = v137;
  if (v136 != v137)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    v118 = _Q0;
    v103 = v4;
    do
    {
      v12 = v7[1];
      if (v12 >= *v7)
        v13 = *v7;
      else
        v13 = v7[1];
      if (*v7 <= v12)
        v14 = v7[1];
      else
        v14 = *v7;
      v15 = sub_2395D7BEC(v4, v13);
      v16 = sub_2395D7BEC(v4, v14);
      if (*((_BYTE *)v15 + 232) == 1 || *((_BYTE *)v16 + 232) == 1)
      {
        if (sub_239AF2B88(v5, v13, v14))
        {
          sub_239C51B24((uint64_t *)(*v5 + 40 * v13), v14);
          sub_239C51B24((uint64_t *)(*v5 + 40 * v14), v13);
        }
      }
      else
      {
        v18 = v6;
        v19 = v5;
        v20 = *((unsigned int *)v15 + 14);
        memptr.i64[0] = 0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (8 * v20 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
        v21 = *(double *)memptr.i64;
        if (!memptr.i64[0])
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v99 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v99, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if ((_DWORD)v20)
          memcpy((void *)memptr.i64[0], (const void *)v15[5], 8 * v20);
        v117 = *((double *)v15 + 10);
        v116 = *((double *)v15 + 14);
        v113 = *((int8x16_t *)v15 + 6);
        v114 = *((int8x16_t *)v15 + 4);
        v115 = *((double *)v15 + 18);
        v112 = *((int8x16_t *)v15 + 8);
        v22 = *((unsigned int *)v16 + 14);
        memptr.i64[0] = 0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (8 * v22 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
        v23 = *(double *)memptr.i64;
        if (!memptr.i64[0])
        {
          v100 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v101 = std::bad_alloc::bad_alloc(v100);
          __cxa_throw(v101, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if ((_DWORD)v22)
          memcpy((void *)memptr.i64[0], (const void *)v16[5], 8 * v22);
        v110 = *((float64x2_t *)v16 + 7);
        v111 = *((float64x2_t *)v16 + 5);
        v106 = *((float64x2_t *)v16 + 6);
        v107 = *((float64x2_t *)v16 + 4);
        v108 = *((float64x2_t *)v16 + 11);
        v109 = *((float64x2_t *)v16 + 9);
        v104 = *((float64x2_t *)v16 + 10);
        v105 = *((float64x2_t *)v16 + 8);
        v5 = v19;
        v24 = sub_239C50CE4(v19, v13, v14);
        v25 = v24[1];
        v26 = *(_OWORD *)(v24 + 7);
        memptr = *(int64x2_t *)(v24 + 5);
        *(_OWORD *)v133 = v26;
        v27 = *(_OWORD *)(v24 + 9);
        v135 = *((double *)v24 + 13);
        v28 = *(float64x2_t *)(v24 + 11);
        *(_OWORD *)&v133[16] = v27;
        v134 = v28;
        v29 = (float64x2_t)memptr;
        v30 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
        *(_QWORD *)&v31 = vextq_s8(*(int8x16_t *)&v133[8], *(int8x16_t *)&v133[8], 8uLL).u64[0];
        _Q5 = v134;
        *(_QWORD *)&v33 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        v34 = (float64x2_t)vzip1q_s64(memptr, *(int64x2_t *)&v133[8]);
        v35 = (float64x2_t)vzip2q_s64(memptr, *(int64x2_t *)&v133[8]);
        _Q20.f64[0] = *(float64_t *)v133;
        _Q20.f64[1] = *((float64_t *)&v27 + 1);
        v37 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)memptr.i64), v35, (float64x2_t)memptr, 1), _Q20, *(double *)v133);
        _Q21 = (int64x2_t)vmulq_f64(v134, (float64x2_t)memptr);
        _D22 = *(double *)&memptr.i64[1];
        __asm { FMLA            D21, D22, V5.D[1] }
        *(double *)_Q21.i64 = *(double *)_Q21.i64 + v135 * *(double *)v133;
        v40 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, *(double *)&v133[8]), v35, *(float64x2_t *)&v133[8], 1), _Q20, *((double *)&v27 + 1));
        _Q23 = (int8x16_t)vmulq_f64(v134, *(float64x2_t *)&v133[8]);
        _D24 = v27;
        __asm { FMLA            D23, D24, V5.D[1] }
        *(double *)_Q23.i64 = *(double *)_Q23.i64 + v135 * *((double *)&v27 + 1);
        v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v34, v134.f64[0]), v35, v134, 1), _Q20, v135);
        _Q19 = vmulq_f64(_Q5, _Q5);
        _Q20.f64[0] = v134.f64[1];
        __asm { FMLA            D19, D20, V5.D[1] }
        _Q19.f64[0] = _Q19.f64[0] + v135 * v135;
        v45 = (int64x2_t)vaddq_f64(v40, (float64x2_t)xmmword_239EC6830);
        *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, v118));
        _Q19.f64[1] = NAN;
        v46 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v37, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v45, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v45)), vabsq_f64(v43))));
        v47 = -*((double *)&v27 + 1);
        v6 = v18;
        if (v46 > 0.0001
          || (*(_QWORD *)&v48.f64[0] = memptr.i64[0],
              *(_QWORD *)&v48.f64[1] = v30,
              v49.f64[0] = v33,
              v49.f64[1] = v134.f64[0],
              v50.f64[0] = v31,
              v50.f64[1] = *(float64_t *)&v133[8],
              v51 = vmulq_f64(v48, vmlaq_n_f64(vmulq_n_f64(v49, v47), v50, v135)),
              fabs(*(double *)v133 * (v33 * *(double *)&v133[8] - v31 * v134.f64[0])+ vsubq_f64(v51, (float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1)).f64[0]+ -1.0) > 0.0001))
        {
          if (v46 > 0.1
            || (*(_QWORD *)&v29.f64[1] = v30,
                v52.f64[0] = v33,
                v52.f64[1] = v134.f64[0],
                v53 = vmulq_n_f64(v52, v47),
                v54.f64[0] = v31,
                v54.f64[1] = *(float64_t *)&v133[8],
                v55 = vmulq_f64(v29, vmlaq_n_f64(v53, v54, v135)),
                fabs(*(double *)v133 * (v33 * *(double *)&v133[8] - v31 * v134.f64[0])+ vsubq_f64(v55, (float64x2_t)vdupq_laneq_s64((int64x2_t)v55, 1)).f64[0]+ -1.0) > 0.1))
          {
            sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          sub_239516070((float64x2_t *)&memptr);
        }
        *(_QWORD *)&v56 = vextq_s8(v114, v114, 8uLL).u64[0];
        *(_QWORD *)&v57 = vextq_s8(v113, v113, 8uLL).u64[0];
        *(_QWORD *)&v58 = vextq_s8(v112, v112, 8uLL).u64[0];
        _Q0 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v107, *(double *)v114.i64), v106, *(double *)v113.i64), v105, *(double *)v112.i64), (float64x2_t)0, v104);
        v60 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v111, *(double *)v114.i64), v110, *(double *)v113.i64), v109, *(double *)v112.i64), (float64x2_t)0, v108);
        _Q2 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v107, v56), v106, v57), v105, v58), (float64x2_t)0, v104);
        v62 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v111, v56), v110, v57), v109, v58), (float64x2_t)0, v108);
        _Q3 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v107, v117), v106, v116), v105, v115), (float64x2_t)0, v104);
        v126 = v60.f64[0];
        v125 = _Q0;
        v128 = v62.i64[0];
        v127 = _Q2;
        v130 = *(_OWORD *)&vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v111, v117), v110, v116), v109, v115), (float64x2_t)0, v108);
        v129 = _Q3;
        v64 = (float64x2_t)vzip1q_s64((int64x2_t)_Q0, (int64x2_t)_Q2);
        v65 = (float64x2_t)vzip2q_s64((int64x2_t)_Q0, (int64x2_t)_Q2);
        _Q18 = (float64x2_t)vzip1q_s64((int64x2_t)v60, v62);
        v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, _Q0.f64[0]), v65, _Q0, 1), _Q18, v60.f64[0]);
        _Q19 = (int64x2_t)vmulq_f64(_Q3, _Q0);
        _D5 = _Q0.f64[1];
        __asm { FMLA            D19, D5, V3.D[1] }
        *(double *)_Q19.i64 = vmlad_n_f64(*(double *)_Q19.i64, v60.f64[0], *(double *)&v130);
        v70 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, _Q2.f64[0]), v65, _Q2, 1), _Q18, *(double *)v62.i64);
        _Q21 = (int8x16_t)vmulq_f64(_Q3, _Q2);
        _D5 = _Q2.f64[1];
        __asm { FMLA            D21, D5, V3.D[1] }
        *(double *)_Q21.i64 = vmlad_n_f64(*(double *)_Q21.i64, *(double *)v62.i64, *(double *)&v130);
        v73 = vmlaq_laneq_f64(vmulq_n_f64(v64, _Q3.f64[0]), v65, _Q3, 1);
        v74 = (float64x2_t)vdupq_lane_s64(v130, 0);
        v75 = vmlaq_n_f64(v73, _Q18, *(double *)&v130);
        _Q17 = vmulq_f64(_Q3, _Q3);
        _Q18.f64[0] = _Q3.f64[1];
        __asm { FMLA            D17, D18, V3.D[1] }
        _Q17.f64[0] = vmlad_n_f64(_Q17.f64[0], *(double *)&v130, *(double *)&v130);
        v77 = vaddq_f64(v67, (float64x2_t)xmmword_239EC6820);
        v78 = (int64x2_t)vaddq_f64(v70, (float64x2_t)xmmword_239EC6830);
        *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q17, v118));
        _Q17.f64[1] = NAN;
        v79 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v77), _Q17), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v78, _Q21, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q19, v78)), vabsq_f64(v75))));
        v80 = (float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL);
        v81 = (float64x2_t)vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL);
        if (v79 > 0.0001)
          goto LABEL_54;
        v82 = vmulq_f64(_Q0, vmlaq_f64(vmulq_n_f64(v80, -*(double *)v62.i64), v81, v74));
        __asm { FMLA            D19, D2, V3.D[1] }
        _Q20 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v82, 1);
        if (fabs(_D19 * v60.f64[0] + vsubq_f64(v82, _Q20).f64[0] + -1.0) > 0.0001)
        {
LABEL_54:
          if (v79 > 0.1)
            goto LABEL_48;
          v85 = vmulq_f64(_Q0, vmlaq_f64(vmulq_n_f64(v80, -*(double *)v62.i64), v81, v74));
          __asm { FMLA            D4, D2, V3.D[1] }
          if (fabs(_D4 * v60.f64[0] + vsubq_f64(v85, (float64x2_t)vdupq_laneq_s64((int64x2_t)v85, 1)).f64[0] + -1.0) > 0.1)
          {
LABEL_48:
            sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          sub_239516070(&v125);
        }
        v87 = (float64x2_t)memptr;
        v60.f64[0] = *(float64_t *)v133;
        _Q0.f64[0] = *(float64_t *)&v133[24];
        _Q4 = *(float64x2_t *)&v133[8];
        _Q2 = v134;
        v90 = vzip2q_s64(memptr, *(int64x2_t *)&v133[8]);
        v120 = v134.f64[0];
        v119 = vzip1q_s64(memptr, *(int64x2_t *)&v133[8]);
        v122 = v134.f64[1];
        v121 = v90;
        v124 = v135;
        v123 = vzip1q_s64((int64x2_t)v60, (int64x2_t)_Q0);
        *(double *)v90.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v133 * *(double *)memptr.i64, *(double *)&v133[24], *(double *)&v133[8]), v135, v134.f64[0]);
        __asm
        {
          FMLA            D20, D0, V4.D[1]
          FMLA            D20, D5, V2.D[1]
        }
        v91 = vmulq_f64(v60, v60);
        v91.f64[0] = v91.f64[0] + _Q0.f64[0] * _Q0.f64[0] + v124 * v124;
        v92 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v87, v87, 1), _Q4, _Q4, 1), _Q2, _Q2, 1), (float64x2_t)xmmword_239EC6830);
        *(_QWORD *)&v93.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v91, v118));
        v93.f64[1] = NAN;
        v94 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, v87.f64[0]), _Q4, _Q4.f64[0]), _Q2, _Q2.f64[0]), (float64x2_t)xmmword_239EC6820)), v93), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)_Q20, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v90, v92)), vabsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v87, *(double *)v133), _Q4, *(double *)&v133[24]), _Q2, v135)))));
        if (v94 > 0.0001
          || fabs(v134.f64[0] * (*(double *)&v133[24] * *(double *)&memptr.i64[1] - *(double *)&v133[16] * *(double *)v133)+ *(double *)memptr.i64 * (v135 * *(double *)&v133[16] - v134.f64[1] * *(double *)&v133[24])- *(double *)&v133[8] * (v135 * *(double *)&memptr.i64[1] - v134.f64[1] * *(double *)v133)+ -1.0) > 0.0001)
        {
          if (v94 > 0.1
            || fabs(v134.f64[0]* (*(double *)&v133[24] * *(double *)&memptr.i64[1] - *(double *)&v133[16] * *(double *)v133)+ *(double *)memptr.i64 * (v135 * *(double *)&v133[16] - v134.f64[1] * *(double *)&v133[24])- *(double *)&v133[8] * (v135 * *(double *)&memptr.i64[1] - v134.f64[1] * *(double *)v133)+ -1.0) > 0.1)
          {
            sub_239A444D4((uint64_t)"unknown file", 18, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          sub_239516070((float64x2_t *)&v119);
        }
        sub_2396F7B74((uint64_t)&v125, (uint64_t)&v119, (uint64_t)v131);
        v125 = 0uLL;
        v126 = 0.0;
        sub_239458B60(v131, v125.f64);
        _V1.D[1] = v125.f64[1];
        _D3 = v125.f64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        if (sqrt(_D2 + v126 * v126) * 180.0 / 3.14159265 > a3 && v25 < a2 && sub_239AF2B88(v5, v13, v14))
        {
          sub_239C51B24((uint64_t *)(*v5 + 40 * v13), v14);
          sub_239C51B24((uint64_t *)(*v5 + 40 * v14), v13);
        }
        free(*(void **)&v23);
        free(*(void **)&v21);
        v4 = v103;
      }
      v7 += 2;
    }
    while (v7 != v6);
    v7 = v136;
  }
  if (v7)
  {
    v137 = v7;
    operator delete(v7);
  }
}

void sub_239C5B0C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(_QWORD *)(v1 - 144) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C5B130()
{
  JUMPOUT(0x239C5B118);
}

void sub_239C5B138()
{
  JUMPOUT(0x239C5B118);
}

void sub_239C5B140(uint64_t a1, unint64_t a2, long double a3)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v30;
  float64x2_t v31;
  std::bad_alloc *exception;
  std::bad_alloc *v40;
  std::bad_alloc *v41;
  std::bad_alloc *v42;
  uint64_t v43;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  int8x16_t v53;
  float64x2_t v54;
  float64_t v55;
  int8x16_t v56;
  float64x2_t v57;
  float64_t v58;
  double v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  void *memptr[2];

  v4 = a1;
  v5 = (uint64_t *)(a1 + 232);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_239AFA8E8((uint64_t *)(a1 + 232), (uint64_t)&v61);
  v7 = v61;
  v6 = v62;
  if (v61 != v62)
  {
    v43 = v4;
    do
    {
      v8 = v7[1];
      if (v8 >= *v7)
        v9 = *v7;
      else
        v9 = v7[1];
      if (*v7 <= v8)
        v10 = v7[1];
      else
        v10 = *v7;
      v11 = sub_2395D7BEC(v4, v9);
      v12 = sub_2395D7BEC(v4, v10);
      if (*((_BYTE *)v11 + 232) == 1 || *((_BYTE *)v12 + 232) == 1)
      {
        if (sub_239AF2B88(v5, v9, v10))
        {
          sub_239C51B24((uint64_t *)(*v5 + 40 * v9), v10);
          sub_239C51B24((uint64_t *)(*v5 + 40 * v10), v9);
        }
      }
      else
      {
        v14 = *((unsigned int *)v11 + 14);
        memptr[0] = 0;
        malloc_type_posix_memalign(memptr, 0x20uLL, (8 * v14 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
        v15 = memptr[0];
        if (!memptr[0])
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v40 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v40, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if ((_DWORD)v14)
          memcpy(memptr[0], (const void *)v11[5], 8 * v14);
        v58 = *((double *)v11 + 10);
        v54 = *((float64x2_t *)v11 + 4);
        v55 = *((double *)v11 + 14);
        v53 = *((int8x16_t *)v11 + 6);
        v60 = v11[18];
        v56 = *((int8x16_t *)v11 + 8);
        v59 = *((double *)v11 + 22);
        v57 = *((float64x2_t *)v11 + 10);
        v16 = *((unsigned int *)v12 + 14);
        memptr[0] = 0;
        malloc_type_posix_memalign(memptr, 0x20uLL, (8 * v16 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
        v17 = memptr[0];
        if (!memptr[0])
        {
          v41 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v42 = std::bad_alloc::bad_alloc(v41);
          __cxa_throw(v42, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if ((_DWORD)v16)
          memcpy(memptr[0], (const void *)v12[5], 8 * v16);
        v51 = *((float64x2_t *)v12 + 7);
        v52 = *((float64x2_t *)v12 + 5);
        v46 = *((float64x2_t *)v12 + 6);
        v47 = *((float64x2_t *)v12 + 4);
        v48 = *((float64x2_t *)v12 + 8);
        v49 = *((float64x2_t *)v12 + 11);
        v50 = *((float64x2_t *)v12 + 9);
        v45 = *((float64x2_t *)v12 + 10);
        v18 = (float64x2_t *)sub_239C50CE4(v5, v9, v10);
        v19 = v54;
        *(_QWORD *)&_Q0.f64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
        _Q6 = v57;
        _D2 = vextq_s8(v56, v56, 8uLL).u64[0];
        *(_QWORD *)&_Q6.f64[1] = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
        *(_QWORD *)&v19.f64[1] = v53.i64[0];
        *(_QWORD *)&_Q0.f64[1] = vextq_s8(v53, v53, 8uLL).u64[0];
        v23 = vmlsq_laneq_f64(vmulq_n_f64(v19, vnegq_f64(_Q6).f64[0]), _Q0, _Q6, 1);
        _Q0.f64[0] = v58;
        _D5 = v59;
        _Q0.f64[1] = v55;
        v25 = vmlsq_lane_f64(v23, _Q0, v59, 0);
        __asm { FMLS            D0, D2, V6.D[1] }
        _D1 = v60;
        __asm { FMLS            D0, D1, V5.D[0] }
        _Q1 = vaddq_f64(v45, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v47, v25.f64[0]), v46, v25, 1), v48, _Q0.f64[0]));
        v30 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v52, v25.f64[0]), v51, v25, 1), v50, _Q0.f64[0]);
        v31 = vaddq_f64(v49, v30);
        v30.f64[0] = v18[8].f64[0];
        _Q3 = v18[7];
        _Q4 = vmulq_f64(_Q3, _Q3);
        _D5 = v18[7].f64[1];
        __asm { FMLA            D4, D5, V3.D[1] }
        _Q4.f64[0] = 1.0 / sqrt(_Q4.f64[0] + v30.f64[0] * v30.f64[0]);
        *(_QWORD *)&v30.f64[0] = *(_OWORD *)&vmulq_f64(v30, _Q4);
        _Q3 = vmulq_n_f64(_Q3, _Q4.f64[0]);
        _Q4 = vmulq_f64(_Q1, _Q1);
        _D5 = _Q1.f64[1];
        __asm { FMLA            D4, D5, V1.D[1] }
        _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v31.f64[0], v31.f64[0]));
        *(_QWORD *)&v31.f64[0] = *(_OWORD *)&vmulq_f64(v31, _Q4);
        _Q1.f64[0] = vmulq_n_f64(_Q1, *(double *)&_Q4).f64[1];
        __asm { FMLA            D4, D1, V3.D[1] }
        v4 = v43;
        _CF = acos(fmax(fmin(vmlad_n_f64(_Q4.f64[0], v31.f64[0], v30.f64[0]), 1.0), -1.0)) * 180.0 / 3.14159265 <= a3
           || *(_QWORD *)&v18->f64[1] >= a2;
        if (!_CF && sub_239AF2B88(v5, v9, v10))
        {
          sub_239C51B24((uint64_t *)(*v5 + 40 * v9), v10);
          sub_239C51B24((uint64_t *)(*v5 + 40 * v10), v9);
        }
        free(v17);
        free(v15);
      }
      v7 += 2;
    }
    while (v7 != v6);
    v7 = v61;
  }
  if (v7)
  {
    v62 = v7;
    operator delete(v7);
  }
}

void sub_239C5B538(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(_QWORD *)(v1 - 144) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C5B58C(uint64_t a1, __int128 *a2, unint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  size_t prime;
  unint64_t v17;
  uint64_t v18;
  int64x2_t *v19;
  void *v20;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t *v27;
  int64x2_t *v30;
  unint64_t v31;
  uint64_t *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int64x2_t *v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  int v47;
  float64x2_t v48;
  uint8x8_t v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  float64x2_t v67;
  int64x2_t v68;
  uint64_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  int64x2_t *v77;
  int64x2_t *v78;
  int64x2_t *v79;
  uint64_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  double v87;
  char *v88;
  char *v89;
  int64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _BYTE *v96;
  double *v97;
  unint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  int64_t v105;
  char *v106;
  size_t v107;
  char *v108;
  int64x2_t *v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  __int128 v117;
  __int128 v118;
  int v119;
  char *v120;
  float64_t v121;
  int64_t v122;
  size_t v123;
  unint64_t v124;
  uint64_t v125;
  float64x2_t *v126;
  char *v127;
  float64_t v128;
  int64_t v129;
  size_t v130;
  unint64_t v131;
  uint64_t v132;
  float64x2_t *v133;
  char *v134;
  float64_t v135;
  int64_t v136;
  size_t v137;
  unint64_t v138;
  uint64_t v139;
  float64x2_t *v140;
  size_t v141;
  _OWORD *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int8x16_t v159;
  unint64_t v160;
  uint64_t v161;
  int8x16_t v162;
  unint64_t v163;
  uint64_t v164;
  int8x16_t v165;
  unint64_t v166;
  int8x16_t *v167;
  __int8 *v168;
  int8x16_t *v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  char *v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  unint64_t v189;
  unint64_t v190;
  float64x2_t *v191;
  char *v192;
  float64x2_t *v193;
  float64x2_t *v194;
  unint64_t v195;
  float64x2_t v196;
  unint64_t v197;
  uint64_t v198;
  double *v199;
  double *v200;
  double v201;
  double v202;
  char *v203;
  unsigned int v204;
  char *v205;
  char *v206;
  unint64_t v207;
  size_t v208;
  size_t v209;
  float64_t v210;
  float64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  double v216;
  char *v217;
  int64x2_t v219;
  float64_t *v220;
  double v222;
  char *v224;
  double v225;
  double v226;
  float64x2_t v227;
  float64x2_t v229;
  float64x2_t v231;
  float64x2_t v235;
  double v238;
  float64x2_t v240;
  double v243;
  _QWORD *v245;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  unint64_t v255;
  double v256;
  size_t v257;
  _OWORD *v258;
  char *v259;
  char *v260;
  char *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  __int128 v269;
  char *v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int8x16_t v275;
  unint64_t v276;
  uint64_t v277;
  int8x16_t v278;
  unint64_t v279;
  uint64_t v280;
  int8x16_t v281;
  unint64_t v282;
  int8x16_t *v283;
  __int8 *v284;
  int8x16_t *v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  char *v295;
  _QWORD *v296;
  _QWORD *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  char *v304;
  unint64_t v305;
  unint64_t v306;
  float64x2_t *v307;
  char *v308;
  float64x2_t *v309;
  float64x2_t *v310;
  unint64_t v311;
  float64x2_t v312;
  unint64_t v313;
  uint64_t v314;
  double *v315;
  double *v316;
  double v317;
  char *v318;
  unsigned int v319;
  char *v320;
  char *v321;
  unint64_t v322;
  size_t v323;
  size_t v324;
  float64_t v325;
  float64_t v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  double v332;
  char *v333;
  int64x2_t v335;
  float64_t *v336;
  double v338;
  char *v340;
  double v341;
  double v342;
  float64x2_t v343;
  float64x2_t v345;
  float64x2_t v347;
  float64x2_t v351;
  double v354;
  float64x2_t v356;
  double v359;
  uint64_t v361;
  double v364;
  double v365;
  unint64_t v368;
  double v369;
  size_t v370;
  _OWORD *v371;
  char *v372;
  char *v373;
  char *v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  __int128 v380;
  uint64_t v381;
  __int128 v382;
  char *v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int8x16_t v388;
  unint64_t v389;
  uint64_t v390;
  int8x16_t v391;
  unint64_t v392;
  uint64_t v393;
  int8x16_t v394;
  unint64_t v395;
  int8x16_t *v396;
  __int8 *v397;
  int8x16_t *v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  char *v402;
  char *v403;
  char *v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  char *v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  char *v415;
  char *v416;
  char *v417;
  unint64_t v418;
  unint64_t v419;
  float64x2_t *v420;
  char *v421;
  float64x2_t *v422;
  float64x2_t *v423;
  unint64_t v424;
  float64x2_t v425;
  unint64_t v426;
  uint64_t v427;
  double *v428;
  double *v429;
  double v430;
  double v431;
  char *v432;
  unsigned int v433;
  char *v434;
  char *v435;
  unint64_t v436;
  size_t v437;
  size_t v438;
  float64_t v439;
  float64_t v440;
  uint64_t v441;
  uint64_t v442;
  double v443;
  unint64_t v444;
  char *v445;
  double v446;
  char *v447;
  int64x2_t v449;
  float64_t *v450;
  double v452;
  char *v454;
  double v455;
  double v456;
  float64x2_t v457;
  float64x2_t v459;
  float64x2_t v461;
  float64x2_t v465;
  double v468;
  float64x2_t v470;
  double v473;
  uint64_t v475;
  long double v478;
  long double v479;
  double v480;
  double v481;
  unint64_t v484;
  double v485;
  int v486;
  int v487;
  int v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  size_t v492;
  float64_t v493;
  float64_t v494;
  int8x16_t v495;
  float64_t v496;
  float64_t v497;
  _OWORD *v498;
  __int128 *v499;
  uint64_t v500;
  __int128 v501;
  uint64_t v502;
  int8x16_t *v503;
  uint64_t v504;
  unint64_t v505;
  double *v506;
  double *v507;
  double v508;
  int8x16_t v509;
  uint64_t *v510;
  _QWORD *v511;
  uint64_t v512;
  uint64_t v513;
  size_t v514;
  size_t v515;
  unint64_t v516;
  float64_t v517;
  float64_t v518;
  uint64_t v519;
  _OWORD *v520;
  __int128 *v521;
  uint64_t v522;
  __int128 v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  double v527;
  uint64_t (*v528)();
  double *v529;
  float64x2_t *v530;
  uint64_t v531;
  float64x2_t v532;
  float64x2_t v533;
  double v534;
  char *v535;
  unsigned int v536;
  uint64_t v537;
  char *v538;
  double v539;
  double v540;
  __double2 v541;
  double v543;
  double v544;
  double v545;
  double v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double v553;
  double v554;
  double v555;
  double v556;
  double v557;
  double v558;
  double v559;
  double v560;
  double v561;
  double v562;
  float64x2_t v563;
  double v564;
  double v565;
  float64x2_t v566;
  float64x2_t v567;
  double v568;
  float64x2_t v569;
  float64x2_t v570;
  uint64_t v571;
  double v572;
  double v575;
  uint64_t v576;
  uint64_t v577;
  double v578;
  uint64_t v579;
  double *v580;
  char *v581;
  char *v582;
  int64x2_t v584;
  float64_t *v585;
  double v587;
  char *v589;
  double v590;
  double v591;
  float64x2_t v592;
  float64x2_t v594;
  float64x2_t v596;
  float64x2_t v600;
  double v603;
  float64x2_t v605;
  double v608;
  _QWORD *v610;
  double v613;
  double v614;
  double v615;
  uint64_t v616;
  int v617;
  uint64_t v618;
  size_t v619;
  float64_t v620;
  float64_t v621;
  int8x16_t v622;
  float64_t v623;
  float64_t v624;
  _OWORD *v625;
  __int128 *v626;
  uint64_t v627;
  __int128 v628;
  uint64_t v629;
  int8x16_t *v630;
  uint64_t v631;
  unint64_t v632;
  double *v633;
  double *v634;
  double v635;
  int8x16_t v636;
  uint64_t *v637;
  _QWORD *v638;
  uint64_t v639;
  uint64_t v640;
  size_t v641;
  size_t v642;
  unint64_t v643;
  float64_t v644;
  float64_t v645;
  uint64_t v646;
  _OWORD *v647;
  __int128 *v648;
  uint64_t v649;
  __int128 v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  double v654;
  uint64_t (*v655)();
  double *v656;
  float64x2_t *v657;
  uint64_t v658;
  float64x2_t v659;
  float64x2_t v660;
  double v661;
  char *v662;
  unsigned int v663;
  uint64_t v664;
  char *v665;
  double v666;
  double cosval;
  __double2 v668;
  double v670;
  double v671;
  double v672;
  double v673;
  double v674;
  double v675;
  double v676;
  double v677;
  double v678;
  double v679;
  double v680;
  double v681;
  double v682;
  double v683;
  double v684;
  double v685;
  double v686;
  double v687;
  double v688;
  double v689;
  float64x2_t v690;
  double v691;
  double v692;
  float64x2_t v693;
  float64x2_t v694;
  double v695;
  float64x2_t v696;
  float64x2_t v697;
  uint64_t v698;
  double v699;
  double v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  char *v706;
  char *v707;
  char *v708;
  int64x2_t v710;
  float64_t *v711;
  double v713;
  char *v715;
  double v716;
  double v717;
  float64x2_t v718;
  float64x2_t v720;
  float64x2_t v722;
  float64x2_t v726;
  double v729;
  float64x2_t v731;
  double v734;
  uint64_t v736;
  uint64_t v739;
  int v740;
  uint64_t v741;
  size_t v742;
  float64_t v743;
  float64_t v744;
  int8x16_t v745;
  float64_t v746;
  float64_t v747;
  _OWORD *v748;
  __int128 *v749;
  uint64_t v750;
  __int128 v751;
  uint64_t v752;
  int8x16_t *v753;
  uint64_t v754;
  unint64_t v755;
  double *v756;
  double *v757;
  double v758;
  int8x16_t v759;
  uint64_t *v760;
  _QWORD *v761;
  uint64_t v762;
  uint64_t v763;
  size_t v764;
  size_t v765;
  unint64_t v766;
  float64_t v767;
  float64_t v768;
  uint64_t v769;
  _OWORD *v770;
  __int128 *v771;
  uint64_t v772;
  __int128 v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  double v777;
  uint64_t (*v778)();
  double *v779;
  float64x2_t *v780;
  uint64_t v781;
  float64x2_t v782;
  float64x2_t v783;
  double v784;
  char *v785;
  unsigned int v786;
  uint64_t v787;
  char *v788;
  double v789;
  double v790;
  __double2 v791;
  double v793;
  double v794;
  double v795;
  double v796;
  double v797;
  double v798;
  double v799;
  double v800;
  double v801;
  double v802;
  double v803;
  double v804;
  double v805;
  double v806;
  double v807;
  double v808;
  double v809;
  double v810;
  double v811;
  double v812;
  float64x2_t v813;
  double v814;
  double v815;
  float64x2_t v816;
  float64x2_t v817;
  double v818;
  float64x2_t v819;
  float64x2_t v820;
  uint64_t v821;
  double v822;
  double v825;
  uint64_t v826;
  uint64_t v827;
  double v828;
  double v829;
  uint64_t v830;
  char *v831;
  char *v832;
  char *v833;
  int64x2_t v835;
  float64_t *v836;
  double v838;
  char *v840;
  double v841;
  double v842;
  float64x2_t v843;
  float64x2_t v845;
  float64x2_t v847;
  float64x2_t v851;
  double v854;
  float64x2_t v856;
  double v859;
  uint64_t v861;
  _QWORD *v862;
  long double v865;
  long double v866;
  uint64_t *j;
  _QWORD *v868;
  char *v869;
  uint64_t v870;
  uint64_t v871;
  __int128 v872;
  uint64_t v873;
  __int128 v874;
  void *v875;
  _QWORD *v876;
  _QWORD *v877;
  uint64_t *i;
  _QWORD *v879;
  char *v880;
  uint64_t v881;
  uint64_t v882;
  __int128 v883;
  uint64_t v884;
  __int128 v885;
  void *v886;
  _QWORD *v887;
  _QWORD *v888;
  uint64_t *k;
  _QWORD *v890;
  char *v891;
  uint64_t v892;
  uint64_t v893;
  __int128 v894;
  uint64_t v895;
  __int128 v896;
  void *v897;
  _QWORD *v898;
  _QWORD *v899;
  void *v900;
  uint64_t *v901;
  uint64_t *v902;
  int8x16_t v903;
  float64x2_t v904;
  unint64_t v905;
  double v906;
  float64x2_t v907;
  int8x16_t v908;
  double v909;
  double v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v919;
  float64x2_t v922;
  int64x2_t v924;
  double v925;
  double v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  _QWORD *v934;
  _QWORD *v935;
  void *v936;
  std::bad_alloc *v937;
  std::bad_alloc *v938;
  std::bad_alloc *v939;
  std::bad_alloc *v940;
  std::bad_alloc *v941;
  std::bad_alloc *v942;
  std::bad_alloc *v943;
  std::bad_alloc *v944;
  std::bad_alloc *v945;
  std::bad_alloc *v946;
  std::bad_alloc *v947;
  std::bad_alloc *v948;
  std::bad_alloc *v949;
  std::bad_alloc *v950;
  std::bad_alloc *v951;
  std::bad_alloc *v952;
  std::bad_alloc *v953;
  std::bad_alloc *v954;
  std::bad_alloc *v955;
  std::bad_alloc *v956;
  std::bad_alloc *exception;
  std::bad_alloc *v958;
  std::bad_alloc *v959;
  std::bad_alloc *v960;
  std::bad_alloc *v961;
  std::bad_alloc *v962;
  std::bad_alloc *v963;
  std::bad_alloc *v964;
  std::bad_alloc *v965;
  std::bad_alloc *v966;
  std::bad_alloc *v967;
  std::bad_alloc *v968;
  std::bad_alloc *v969;
  std::bad_alloc *v970;
  std::bad_alloc *v971;
  std::bad_alloc *v972;
  std::bad_alloc *v973;
  std::bad_alloc *v974;
  std::bad_alloc *v975;
  std::bad_alloc *v976;
  std::bad_alloc *v977;
  std::bad_alloc *v978;
  std::bad_alloc *v979;
  std::bad_alloc *v980;
  std::bad_alloc *v981;
  std::bad_alloc *v982;
  std::bad_alloc *v983;
  std::bad_alloc *v984;
  uint64_t v985;
  unint64_t v986;
  uint64_t v987;
  uint64_t v988;
  unint64_t v989;
  unint64_t v990;
  unsigned int v991;
  int v992;
  unsigned int v993;
  unsigned int v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  unint64_t v998;
  unint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  _QWORD *v1002;
  int64x2_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  int64x2_t v1007;
  float64x2_t v1008;
  int64x2_t v1009;
  unint64_t v1010;
  unint64_t v1011;
  unint64_t v1012;
  __int128 *v1013;
  int64x2_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  size_t v1018[2];
  unint64_t v1019;
  unint64_t v1020;
  unint64_t v1021;
  size_t size[2];
  uint64_t sizea;
  uint64_t sizeb;
  uint64_t sizec;
  uint64_t sized;
  int64x2_t v1027;
  __int128 v1028;
  uint64_t v1029;
  __int128 v1030;
  uint64_t v1031;
  __int128 v1032;
  __int128 v1033;
  unint64_t v1034;
  unint64_t v1035;
  unint64_t v1036;
  unint64_t v1037;
  __int128 v1038;
  __int128 v1039;
  uint64_t v1040;
  __int128 v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  float64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  unint64_t v1048;
  char *i8;
  int64x2_t v1050;
  __int128 v1051;
  float64_t v1052;
  __int128 v1053;
  float64_t v1054;
  __int128 v1055;
  double v1056;
  unint64_t v1057;
  unint64_t v1058;
  __int128 *v1059;
  unint64_t v1060;
  unint64_t v1061;
  unint64_t v1062;
  char v1063;
  __int128 v1064;
  uint64_t v1065;
  __int128 v1066;
  uint64_t v1067;
  __int128 v1068;
  uint64_t v1069;
  int64x2_t *v1070;
  char *v1071;
  char *v1072;
  char *v1073;
  void *v1074[2];
  void *v1075[2];
  float v1076;
  unint64_t *v1077;
  unint64_t *v1078;
  uint64_t v1079;
  void *v1080[2];
  void *__p[2];
  int v1082;
  void *v1083;
  unint64_t *v1084;
  uint64_t v1085;
  void *v1086[2];
  char v1087;
  void *v1088[2];
  char v1089;
  uint64_t v1090;
  int v1091;
  float64x2_t v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 v1098;
  __int128 v1099;
  uint64_t v1100;
  float64x2_t v1101;
  _BYTE v1102[32];
  float64x2_t v1103;
  double v1104;
  void *v1105;
  void *v1106;
  void *v1107;
  void *v1108;
  void *v1109;
  void *v1110;
  void *v1111;
  void *v1112;
  double v1113;
  __int128 v1114;
  unint64_t v1115;
  __int128 v1116;
  __int128 v1117;
  int v1118;
  void *v1119;
  char *v1120;
  char *v1121;
  void *v1122;
  _BYTE *v1123;
  char *v1124;
  void *v1125;
  int8x16_t *v1126;
  int8x16_t *v1127;
  void *v1128;
  char *v1129;
  char *v1130;
  void *v1131;
  size_t v1132;
  unsigned int v1133;
  void *v1134;
  size_t v1135;
  unsigned int v1136;
  void *v1137;
  size_t v1138;
  int v1139;
  void *v1140[3];
  void *v1141;
  void *v1142;
  void *v1143;
  float64x2_t memptr;
  float64_t v1145;
  float64x2_t v1146;
  double v1147;
  float64x2_t v1148;
  double v1149;
  int8x16_t v1150;
  double v1151;
  _QWORD v1152[2];
  uint64_t *v1153;
  size_t __sz;
  __int128 v1155;
  __int128 v1156;
  int v1157;
  double v1158;
  char *v1159;
  char *v1160;
  float64x2_t *v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  char v1166;
  __int128 v1167;
  uint64_t v1168;
  char v1169;
  uint64_t v1170;
  char v1171;
  uint64_t v1172;
  uint64_t v1173;
  __int128 v1174;
  char v1175;
  uint64_t v1176;
  char v1177[24];
  char v1178[24];
  uint64_t v1179;
  int v1180;
  float64x2_t v1181;
  __int128 v1182;
  __int128 v1183;
  __int128 v1184;
  __int128 v1185;
  __int128 v1186;
  __int128 v1187;
  __int128 v1188;
  uint64_t v1189;
  __int128 v1190;
  __int128 v1191;
  __int128 v1192;
  __int128 v1193;
  __int16 v1194;
  __int128 v1195;
  __int128 v1196;
  int v1197;
  __int128 v1198;
  __int128 v1199;
  int v1200;
  uint64_t v1201;

  v1201 = *MEMORY[0x24BDAC8D0];
  v1083 = 0;
  v1084 = 0;
  v1085 = 0;
  sub_239E24B10(a1, (uint64_t)&v1083, 1);
  v8 = (unint64_t *)v1083;
  v9 = v1084;
  *(_OWORD *)v1080 = 0u;
  *(_OWORD *)__p = 0u;
  v1082 = 1065353216;
  if (v1083 != v1084)
  {
    do
    {
      sub_239465800((uint64_t)v1080, v8, v8);
      ++v8;
    }
    while (v8 != v9);
  }
  v1063 = a4;
  v1077 = 0;
  v1078 = 0;
  v1079 = 0;
  sub_239AFA8E8((uint64_t *)(a1 + 232), (uint64_t)&v1077);
  v10 = v1077;
  if ((unint64_t)((char *)v1078 - (char *)v1077) < 0x20)
  {
    v11 = 0;
    if (!v1077)
      goto LABEL_6;
    goto LABEL_5;
  }
  *(_OWORD *)v1074 = 0u;
  *(_OWORD *)v1075 = 0u;
  v1076 = 1.0;
  v1071 = 0;
  v1072 = 0;
  v1073 = 0;
  prime = (unint64_t)(float)(unint64_t)__p[1];
  v1059 = a2;
  if (prime == 1)
  {
    prime = 2;
LABEL_15:
    sub_239A501C8((uint64_t)v1074, prime);
    goto LABEL_16;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)(float)(unint64_t)__p[1]);
    v20 = v1074[1];
    _CF = (void *)prime >= v1074[1];
    if ((void *)prime > v1074[1])
      goto LABEL_15;
  }
  else
  {
    v20 = 0;
    _CF = 1;
    if (prime)
      goto LABEL_15;
  }
  if (!_CF)
  {
    v22 = vcvtps_u32_f32((float)(unint64_t)v1075[1] / v1076);
    if ((unint64_t)v20 < 3
      || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < (unint64_t)v20)
      goto LABEL_15;
  }
LABEL_16:
  v17 = (char *)v1078 - (char *)v1077;
  v18 = ((char *)v1078 - (char *)v1077) >> 4;
  if (v1078 == v1077)
  {
    v1070 = 0;
    i8 = 0;
  }
  else
  {
    if (v17 >= 0x1C71C71C71C71C71)
      sub_2394189F8();
    v19 = (int64x2_t *)operator new(144 * v18);
    i8 = v19[9 * v18].i8;
    v1070 = v19;
  }
  if (v18)
  {
    if ((v17 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v1071 = (char *)operator new(v17 >> 1);
    v1072 = v1071;
    v1073 = &v1071[8 * v18];
  }
  v25 = __p[0];
  if (__p[0])
  {
    do
    {
      v31 = v25[2];
      v1152[0] = v31;
      if (*((_BYTE *)sub_2395D7BEC(a1, v31) + 232) == 2)
      {
        v32 = sub_239BF5CF4(a1, v31);
        v33 = sub_239C0BEEC((uint64_t)v1074, v31, v1152);
        v34 = *((_OWORD *)v32 + 4);
        v35 = *((_OWORD *)v32 + 5);
        v36 = *((_OWORD *)v32 + 6);
        *(_OWORD *)(v33 + 72) = *((_OWORD *)v32 + 7);
        *(_OWORD *)(v33 + 56) = v36;
        *(_OWORD *)(v33 + 40) = v35;
        *(_OWORD *)(v33 + 24) = v34;
        v37 = *((_OWORD *)v32 + 8);
        v38 = *((_OWORD *)v32 + 9);
        v39 = *((_OWORD *)v32 + 10);
        *(_OWORD *)(v33 + 136) = *((_OWORD *)v32 + 11);
        *(_OWORD *)(v33 + 120) = v39;
        *(_OWORD *)(v33 + 104) = v38;
        *(_OWORD *)(v33 + 88) = v37;
      }
      v25 = (_QWORD *)*v25;
    }
    while (v25);
  }
  v27 = v1077;
  v26 = v1078;
  if (v1077 == v1078)
  {
    v11 = 0;
    v40 = v1070;
    goto LABEL_746;
  }
  __asm { FMOV            V0.2D, #1.0 }
  v1041 = _Q0;
  v30 = v1070;
  while (2)
  {
    v42 = sub_239AFAB78((uint64_t *)(a1 + 232), *v27, v27[1]);
    if (v42[1] < a3)
      goto LABEL_47;
    v43 = v27[1];
    v44 = v43 >= *v27 ? *v27 : v27[1];
    v45 = *v27 <= v43 ? v27[1] : *v27;
    v46 = sub_2395D7BEC(a1, v44);
    v47 = *((unsigned __int8 *)sub_2395D7BEC(a1, v45) + 232);
    _ZF = *((_BYTE *)v46 + 232) == 2 && v47 == 2;
    if (!_ZF || !v1080[1])
      goto LABEL_47;
    v50 = (uint8x8_t)vcnt_s8((int8x8_t)v1080[1]);
    v50.i16[0] = vaddlv_u8(v50);
    if (v50.u32[0] > 1uLL)
    {
      v51 = v44;
      if ((void *)v44 >= v1080[1])
        v51 = v44 % (unint64_t)v1080[1];
    }
    else
    {
      v51 = ((unint64_t)v1080[1] - 1) & v44;
    }
    v52 = (_QWORD *)*((_QWORD *)v1080[0] + v51);
    if (!v52)
      goto LABEL_47;
    v53 = (_QWORD *)*v52;
    if (!*v52)
      goto LABEL_47;
    v54 = (unint64_t)v1080[1] - 1;
    if (v50.u32[0] < 2uLL)
    {
      while (1)
      {
        v55 = v53[1];
        if (v55 == v44)
        {
          if (v53[2] == v44)
            goto LABEL_81;
        }
        else if ((v55 & v54) != v51)
        {
          goto LABEL_47;
        }
        v53 = (_QWORD *)*v53;
        if (!v53)
          goto LABEL_47;
      }
    }
    while (1)
    {
      v56 = v53[1];
      if (v56 == v44)
        break;
      if ((void *)v56 >= v1080[1])
        v56 %= (unint64_t)v1080[1];
      if (v56 != v51)
        goto LABEL_47;
LABEL_75:
      v53 = (_QWORD *)*v53;
      if (!v53)
        goto LABEL_47;
    }
    if (v53[2] != v44)
      goto LABEL_75;
LABEL_81:
    if (v50.u32[0] > 1uLL)
    {
      v57 = v45;
      if ((void *)v45 >= v1080[1])
        v57 = v45 % (unint64_t)v1080[1];
    }
    else
    {
      v57 = v54 & v45;
    }
    v58 = (_QWORD *)*((_QWORD *)v1080[0] + v57);
    if (v58)
    {
      v59 = (_QWORD *)*v58;
      if (v59)
      {
        if (v50.u32[0] < 2uLL)
        {
          while (1)
          {
            v60 = v59[1];
            if (v60 == v45)
            {
              if (v59[2] == v45)
                goto LABEL_101;
            }
            else if ((v60 & v54) != v57)
            {
              goto LABEL_47;
            }
            v59 = (_QWORD *)*v59;
            if (!v59)
              goto LABEL_47;
          }
        }
        do
        {
          v61 = v59[1];
          if (v61 == v45)
          {
            if (v59[2] == v45)
            {
LABEL_101:
              v62 = *(int64x2_t *)(v42 + 11);
              v63 = *(int64x2_t *)(v42 + 5);
              v72 = *(int64x2_t *)(v42 + 9);
              v48.f64[0] = (float64_t)v42[16];
              _Q3 = *((float64x2_t *)v42 + 7);
              _Q4 = vmulq_f64(_Q3, _Q3);
              _D5 = v42[15];
              __asm { FMLA            D4, D5, V3.D[1] }
              _Q4.f64[0] = 1.0 / sqrt(_Q4.f64[0] + v48.f64[0] * v48.f64[0]);
              v67 = vmulq_n_f64(_Q3, _Q4.f64[0]);
              v68 = (int64x2_t)_D5;
              v68.i64[0] = v42[10];
              v69 = *(_OWORD *)&vmulq_f64(v48, _Q4);
              v70 = (int64x2_t)(unint64_t)v42[7];
              v71 = vzip1q_s64(vdupq_laneq_s64(*(int64x2_t *)(v42 + 7), 1), v72);
              v72.i64[0] = v42[13];
              v73.i64[1] = *((_QWORD *)&v1041 + 1);
              v73.i64[0] = v69;
              if (v30 >= (int64x2_t *)i8)
              {
                v74 = 0x8E38E38E38E38E39 * (v30 - v1070) + 1;
                if (v74 > 0x1C71C71C71C71C7)
                  sub_2394189F8();
                if (0x1C71C71C71C71C72 * ((i8 - (char *)v1070) >> 4) > v74)
                  v74 = 0x1C71C71C71C71C72 * ((i8 - (char *)v1070) >> 4);
                if (0x8E38E38E38E38E39 * ((i8 - (char *)v1070) >> 4) >= 0xE38E38E38E38E3)
                  v75 = 0x1C71C71C71C71C7;
                else
                  v75 = v74;
                if (v75)
                {
                  v1003 = v71;
                  v1007 = (int64x2_t)(unint64_t)v42[7];
                  v1009 = v68;
                  v1014 = v72;
                  *(int64x2_t *)v1018 = v73;
                  *(float64x2_t *)size = v67;
                  v1027 = *(int64x2_t *)(v42 + 5);
                  v1050 = *(int64x2_t *)(v42 + 11);
                  if (v75 > 0x1C71C71C71C71C7)
                    sub_239418A80();
                  v1001 = v75;
                  v76 = (char *)operator new(144 * v75);
                  v62 = v1050;
                  v67 = *(float64x2_t *)size;
                  v63 = v1027;
                  v75 = v1001;
                  v72 = v1014;
                  v73 = *(int64x2_t *)v1018;
                  v70 = v1007;
                  v68 = v1009;
                  v71 = v1003;
                }
                else
                {
                  v76 = 0;
                }
                v77 = (int64x2_t *)&v76[16 * (v30 - v1070)];
                v77->i64[0] = v44;
                v77->i64[1] = v45;
                v77[3] = v71;
                v77[4] = v68;
                v77[1] = v63;
                v77[2] = v70;
                v77[5] = v62;
                v77[6] = v72;
                v77[7] = (int64x2_t)v67;
                v77[8] = v73;
                v78 = v77;
                if (v30 == v1070)
                {
                  v79 = v1070;
                }
                else
                {
                  v79 = v1070;
                  do
                  {
                    v80 = v30[-9].i64[0];
                    v30 -= 9;
                    v78[-9].i64[0] = v80;
                    v78 -= 9;
                    v78->i64[1] = v30->i64[1];
                    v81 = v30[1];
                    v82 = v30[2];
                    v83 = v30[4];
                    v78[3] = v30[3];
                    v78[4] = v83;
                    v78[1] = v81;
                    v78[2] = v82;
                    v84 = v30[5];
                    v85 = v30[6];
                    v86 = v30[8];
                    v78[7] = v30[7];
                    v78[8] = v86;
                    v78[5] = v84;
                    v78[6] = v85;
                  }
                  while (v30 != v1070);
                }
                i8 = &v76[144 * v75];
                v30 = v77 + 9;
                if (v79)
                  operator delete(v79);
                v1070 = v78;
              }
              else
              {
                v30->i64[0] = v44;
                v30->i64[1] = v45;
                v30[1] = v63;
                v30[2] = v70;
                v30[3] = v71;
                v30[4] = v68;
                v30[5] = v62;
                v30[6] = v72;
                v30[7] = (int64x2_t)v67;
                v30[8] = v73;
                v30 += 9;
              }
              v87 = (double)(unint64_t)v42[1];
              v88 = v1072;
              if (v1072 < v1073)
              {
                *(double *)v1072 = v87;
                v41 = v1072 + 8;
              }
              else
              {
                v89 = v1071;
                v90 = v1072 - v1071;
                v91 = (v1072 - v1071) >> 3;
                v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 61)
                  sub_2394189F8();
                v93 = v1073 - v1071;
                if ((v1073 - v1071) >> 2 > v92)
                  v92 = v93 >> 2;
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
                  v94 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v94 = v92;
                if (v94)
                {
                  if (v94 >> 61)
                    sub_239418A80();
                  v95 = v94;
                  v96 = operator new(8 * v94);
                  v94 = v95;
                  v90 = v1072 - v1071;
                }
                else
                {
                  v96 = 0;
                }
                v97 = (double *)&v96[8 * v91];
                *v97 = v87;
                v41 = (char *)(v97 + 1);
                if (v1072 != v1071)
                {
                  v98 = v1072 - 8 - v1071;
                  if (v98 < 0x58)
                    goto LABEL_817;
                  if ((unint64_t)(v1072 - &v96[v90]) < 0x20)
                    goto LABEL_817;
                  v99 = (v98 >> 3) + 1;
                  v100 = &v96[8 * v91 - 16];
                  v101 = v1072 - 16;
                  v102 = v99 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v103 = *(_OWORD *)v101;
                    *(v100 - 1) = *((_OWORD *)v101 - 1);
                    *v100 = v103;
                    v100 -= 2;
                    v101 -= 32;
                    v102 -= 4;
                  }
                  while (v102);
                  v97 -= v99 & 0x3FFFFFFFFFFFFFFCLL;
                  v88 = &v1072[-8 * (v99 & 0x3FFFFFFFFFFFFFFCLL)];
                  if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_817:
                    do
                    {
                      v104 = *((_QWORD *)v88 - 1);
                      v88 -= 8;
                      *((_QWORD *)v97-- - 1) = v104;
                    }
                    while (v88 != v1071);
                  }
                }
                v1071 = (char *)v97;
                v1073 = &v96[8 * v94];
                if (v89)
                  operator delete(v89);
              }
              v1072 = v41;
              break;
            }
          }
          else
          {
            if ((void *)v61 >= v1080[1])
              v61 %= (unint64_t)v1080[1];
            if (v61 != v57)
              break;
          }
          v59 = (_QWORD *)*v59;
        }
        while (v59);
      }
    }
LABEL_47:
    v27 += 2;
    if (v27 != v26)
      continue;
    break;
  }
  v11 = 0;
  if (!v1075[1])
  {
    v40 = v1070;
    goto LABEL_746;
  }
  v40 = v1070;
  v105 = (char *)v30 - (char *)v1070;
  if (v30 == v1070)
    goto LABEL_746;
  v106 = v1072;
  if (v1072 == v1071)
  {
    v11 = 0;
    if (v1072)
      goto LABEL_747;
    goto LABEL_748;
  }
  sub_239BAB9F8((uint64_t)v1152, (uint64_t)v1074);
  v1156 = 0u;
  v1155 = 0u;
  v1157 = 1065353216;
  v1160 = 0;
  v1158 = 0.0;
  v1159 = 0;
  v107 = 0x8E38E38E38E38E39 * (v105 >> 4);
  if (v107 > 0x1C71C71C71C71C7)
    sub_2394189F8();
  v108 = (char *)operator new(v105);
  v1158 = *(double *)&v108;
  v1159 = v108;
  v1160 = &v108[16 * (v105 >> 4)];
  v109 = v1070;
  do
  {
    *(_QWORD *)v108 = v109->i64[0];
    *((_QWORD *)v108 + 1) = v109->i64[1];
    v110 = v109[1];
    v111 = v109[2];
    v112 = v109[4];
    *((int64x2_t *)v108 + 3) = v109[3];
    *((int64x2_t *)v108 + 4) = v112;
    *((int64x2_t *)v108 + 1) = v110;
    *((int64x2_t *)v108 + 2) = v111;
    v113 = v109[5];
    v114 = v109[6];
    v115 = v109[8];
    *((int64x2_t *)v108 + 7) = v109[7];
    *((int64x2_t *)v108 + 8) = v115;
    *((int64x2_t *)v108 + 5) = v113;
    *((int64x2_t *)v108 + 6) = v114;
    v108 += 144;
    v109 += 9;
  }
  while (v109 != v30);
  v1159 = v108;
  v1161 = 0;
  v1163 = 0;
  v1162 = 0;
  v1164 = 0x3FF0000000000000;
  v1165 = 0xA00000001;
  v1166 = 0;
  v1167 = xmmword_239F0C440;
  v1168 = 0x3EB0C6F7A0B5ED8DLL;
  v1169 = 0;
  v1170 = 0x3FF7B8BAC710CB29;
  v1171 = 0;
  v1172 = 0;
  v1173 = 0;
  v1174 = xmmword_239F0C450;
  v1175 = 1;
  v1176 = 0x3FF0000000000000;
  v1177[23] = 7;
  strcpy(v1177, "NOT SET");
  v1178[23] = 7;
  strcpy(v1178, "NOT SET");
  v1179 = 0;
  v1180 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v1008 = _Q0;
  v1181 = _Q0;
  v1182 = 0u;
  v1183 = 0u;
  v1184 = 0u;
  v1185 = 0u;
  v1186 = 0u;
  v1187 = 0u;
  v1188 = 0u;
  v1189 = 0;
  *(_QWORD *)&v1190 = 0x100000032;
  DWORD2(v1190) = 2;
  v1191 = v1041;
  v1192 = xmmword_239F0C460;
  v1193 = xmmword_239F0C470;
  v1194 = 257;
  v1195 = 0u;
  v1196 = 0u;
  v1197 = 1065353216;
  v1198 = 0u;
  v1199 = 0u;
  v1200 = 1065353216;
  if (v107 == (v1072 - v1071) >> 3)
    sub_23945D3D0(&v1161, v1071, v1072, v107);
  v1194 = *((_WORD *)v1059 + 32);
  v117 = v1059[1];
  v118 = v1059[3];
  v1192 = v1059[2];
  v1193 = v118;
  v1190 = *v1059;
  v1191 = v117;
  LOBYTE(v1194) = v1063;
  v1167 = xmmword_239F0C010;
  HIDWORD(v1165) = v1190;
  v1175 = 0;
  v1168 = 0x3EB0C6F7A0B5ED8DLL;
  *((_QWORD *)&v1174 + 1) = 0x3F1A36E2EB1C432DLL;
  v1166 = 0;
  v119 = *((_DWORD *)v1059 + 1);
  if (!v119)
  {
    v134 = v1159;
    v135 = v1158;
    v136 = (int64_t)&v1159[-*(_QWORD *)&v1158];
    if (v1159 == *(char **)&v1158)
      goto LABEL_171;
    v137 = __sz;
    if (!__sz || *((_QWORD *)&v1196 + 1) > 1uLL)
      goto LABEL_170;
    v138 = v136 / 144;
    v139 = v1162;
    v140 = v1161;
    v1129 = 0;
    v1128 = 0;
    v1130 = 0;
    if ((unint64_t)(v136 + 143) > 0x11E)
    {
      if (v138 >> 60)
        sub_2394189F8();
      v1128 = operator new(16 * v138);
      v1129 = (char *)v1128;
      v1130 = (char *)v1128 + 16 * v138;
      v1125 = operator new(72 * v138);
      v1126 = (int8x16_t *)v1125;
      v1127 = (int8x16_t *)((char *)v1125 + 72 * v138);
    }
    else
    {
      v1126 = 0;
      v1125 = 0;
      v1127 = 0;
    }
    v1012 = v138;
    if (v137 > 0x38E38E38E38E38ELL)
      sub_2394189F8();
    v257 = 72 * v137;
    v258 = operator new(v257);
    v1005 = (v139 - (uint64_t)v140) >> 3;
    v259 = (char *)v258 + v257;
    v1122 = v258;
    v1124 = (char *)v258 + v257;
    do
    {
      *((_QWORD *)v258 + 8) = 0x3FF0000000000000;
      *v258 = xmmword_239F13A00;
      v258[1] = *(_OWORD *)algn_239F13A10;
      v258[2] = xmmword_239F13A20;
      v258[3] = *(_OWORD *)dbl_239F13A30;
      v258 = (_OWORD *)((char *)v258 + 72);
      v257 -= 72;
    }
    while (v257);
    v1123 = v259;
    v1120 = 0;
    v1119 = 0;
    v1121 = 0;
    if (v138 >> 61)
      sub_2394189F8();
    v260 = (char *)operator new(8 * v138);
    v261 = &v260[8 * v138];
    v1119 = v260;
    v1121 = v261;
    memset_pattern16(v260, &unk_239EC6930, 8 * v138);
    v1120 = v261;
    v1116 = 0u;
    v1117 = 0u;
    v1118 = 1065353216;
    v262 = v1153;
    if (v1153)
    {
      v263 = 0;
      v264 = 0;
      do
      {
        v265 = v262[5];
        v266 = v262[9];
        v267 = *(_OWORD *)(v262 + 7);
        v268 = v262[13];
        v269 = *(_OWORD *)(v262 + 11);
        v270 = (char *)v1122 + v263;
        *(_OWORD *)v270 = *(_OWORD *)(v262 + 3);
        *((_QWORD *)v270 + 2) = v265;
        *(_OWORD *)(v270 + 24) = v267;
        *((_QWORD *)v270 + 5) = v266;
        *((_OWORD *)v270 + 3) = v269;
        *((_QWORD *)v270 + 8) = v268;
        *(_QWORD *)&v1101.f64[0] = v262 + 2;
        sub_2395193BC((uint64_t)&v1116, (unint64_t *)v262 + 2, (uint64_t)&unk_239EC6E98, &v1101)[3] = v264++;
        v262 = (uint64_t *)*v262;
        v263 += 72;
      }
      while (v262);
      v135 = v1158;
      v134 = v1159;
    }
    for (; *(char **)&v135 != v134; *(_QWORD *)&v135 += 144)
    {
      v1101.f64[0] = v135;
      v272 = sub_2395193BC((uint64_t)&v1116, *(unint64_t **)&v135, (uint64_t)&unk_239EC6E98, &v1101)[3];
      *(_QWORD *)&v1101.f64[0] = *(_QWORD *)&v135 + 8;
      v273 = sub_2395193BC((uint64_t)&v1116, (unint64_t *)(*(_QWORD *)&v135 + 8), (uint64_t)&unk_239EC6E98, &v1101)[3];
      v274 = *(_QWORD *)(*(_QWORD *)&v135 + 32);
      v275 = *(int8x16_t *)(*(_QWORD *)&v135 + 16);
      v276 = vextq_s8(v275, v275, 8uLL).u64[0];
      v277 = *(_QWORD *)(*(_QWORD *)&v135 + 64);
      v278 = *(int8x16_t *)(*(_QWORD *)&v135 + 48);
      v279 = vextq_s8(v278, v278, 8uLL).u64[0];
      v280 = *(_QWORD *)(*(_QWORD *)&v135 + 96);
      v281 = *(int8x16_t *)(*(_QWORD *)&v135 + 80);
      v282 = vextq_s8(v281, v281, 8uLL).u64[0];
      v283 = v1126;
      if (v1126 >= v1127)
      {
        v285 = (int8x16_t *)v1125;
        v286 = 0x8E38E38E38E38E39 * (((char *)v1126 - (_BYTE *)v1125) >> 3);
        v287 = v286 + 1;
        if (v286 + 1 > 0x38E38E38E38E38ELL)
          sub_2394189F8();
        if (0x1C71C71C71C71C72 * (((char *)v1127 - (_BYTE *)v1125) >> 3) > v287)
          v287 = 0x1C71C71C71C71C72 * (((char *)v1127 - (_BYTE *)v1125) >> 3);
        if (0x8E38E38E38E38E39 * (((char *)v1127 - (_BYTE *)v1125) >> 3) >= 0x1C71C71C71C71C7)
          v288 = 0x38E38E38E38E38ELL;
        else
          v288 = v287;
        if (v288)
        {
          v1016 = *(_QWORD *)(*(_QWORD *)&v135 + 32);
          v1020 = v276;
          sizeb = *(_QWORD *)(*(_QWORD *)&v135 + 64);
          v1030 = *(_OWORD *)(*(_QWORD *)&v135 + 16);
          v1035 = v279;
          v1043 = *(_QWORD *)(*(_QWORD *)&v135 + 96);
          v1053 = *(_OWORD *)(*(_QWORD *)&v135 + 48);
          v1061 = v282;
          v1066 = *(_OWORD *)(*(_QWORD *)&v135 + 80);
          if (v288 > 0x38E38E38E38E38ELL)
            sub_239418A80();
          v289 = (char *)operator new(72 * v288);
          v282 = v1061;
          v281.i64[0] = v1066;
          v280 = v1043;
          v278.i64[0] = v1053;
          v275.i64[0] = v1030;
          v279 = v1035;
          v276 = v1020;
          v277 = sizeb;
          v274 = v1016;
        }
        else
        {
          v289 = 0;
        }
        v290 = &v289[72 * v286];
        *((_QWORD *)v290 + 2) = v274;
        v275.i64[1] = v276;
        *(int8x16_t *)v290 = v275;
        *((_QWORD *)v290 + 5) = v277;
        v278.i64[1] = v279;
        *(int8x16_t *)(v290 + 24) = v278;
        *((_QWORD *)v290 + 8) = v280;
        v281.i64[1] = v282;
        *((int8x16_t *)v290 + 3) = v281;
        v291 = v290;
        if (v283 != v285)
        {
          do
          {
            *(int8x16_t *)(v291 - 72) = *(int8x16_t *)((char *)v283 - 72);
            v292 = *(__int128 *)((char *)&v283[-4] + 8);
            v293 = *(__int128 *)((char *)&v283[-3] + 8);
            v294 = *(__int128 *)((char *)&v283[-2] + 8);
            *((_QWORD *)v291 - 1) = v283[-1].i64[1];
            *(_OWORD *)(v291 - 24) = v294;
            *(_OWORD *)(v291 - 40) = v293;
            *(_OWORD *)(v291 - 56) = v292;
            v291 -= 72;
            v283 = (int8x16_t *)((char *)v283 - 72);
          }
          while (v283 != v285);
          v283 = v285;
        }
        v295 = &v289[72 * v288];
        v284 = v290 + 72;
        v1125 = v291;
        v1127 = (int8x16_t *)v295;
        if (v283)
          operator delete(v283);
      }
      else
      {
        v1126[1].i64[0] = v274;
        v275.i64[1] = v276;
        *v283 = v275;
        v283[2].i64[1] = v277;
        v278.i64[1] = v279;
        *(int8x16_t *)((char *)v283 + 24) = v278;
        v283[4].i64[0] = v280;
        v281.i64[1] = v282;
        v283[3] = v281;
        v284 = &v283[4].i8[8];
      }
      v1126 = (int8x16_t *)v284;
      v296 = v1129;
      if (v1129 < v1130)
      {
        *(_QWORD *)v1129 = v272;
        v296[1] = v273;
        v271 = (char *)(v296 + 2);
      }
      else
      {
        v297 = v1128;
        v298 = (v1129 - (_BYTE *)v1128) >> 4;
        v299 = v298 + 1;
        if ((unint64_t)(v298 + 1) >> 60)
          sub_2394189F8();
        v300 = v1130 - (_BYTE *)v1128;
        if ((v1130 - (_BYTE *)v1128) >> 3 > v299)
          v299 = v300 >> 3;
        if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF0)
          v301 = 0xFFFFFFFFFFFFFFFLL;
        else
          v301 = v299;
        if (v301)
        {
          if (v301 >> 60)
            sub_239418A80();
          v302 = (char *)operator new(16 * v301);
        }
        else
        {
          v302 = 0;
        }
        v303 = &v302[16 * v298];
        *(_QWORD *)v303 = v272;
        *((_QWORD *)v303 + 1) = v273;
        v304 = v303;
        if (v296 != v297)
        {
          do
          {
            *((_OWORD *)v304 - 1) = *((_OWORD *)v296 - 1);
            v304 -= 16;
            v296 -= 2;
          }
          while (v296 != v297);
          v296 = v1128;
        }
        v271 = v303 + 16;
        v1128 = v304;
        v1129 = v303 + 16;
        v1130 = &v302[16 * v301];
        if (v296)
          operator delete(v296);
      }
      v1129 = v271;
    }
    v305 = v1012;
    if (v1005 == v1012)
    {
      v306 = 0;
      v307 = v1161;
      v308 = (char *)v1119;
      if (v1012 <= 1)
        v305 = 1;
      if (v305 < 4)
        goto LABEL_305;
      if ((unint64_t)((_BYTE *)v1119 - (_BYTE *)v1161) <= 0x1F)
        goto LABEL_305;
      v306 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      v309 = (float64x2_t *)((char *)v1119 + 16);
      v310 = v1161 + 1;
      v311 = v305 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v312 = vsqrtq_f64(*v310);
        v309[-1] = vsqrtq_f64(v310[-1]);
        *v309 = v312;
        v309 += 2;
        v310 += 2;
        v311 -= 4;
      }
      while (v311);
      if (v305 != v306)
      {
LABEL_305:
        v313 = v305 - v306;
        v314 = v306;
        v315 = (double *)&v308[v314 * 8];
        v316 = &v307->f64[v314];
        do
        {
          v317 = *v316++;
          *v315++ = sqrt(v317);
          --v313;
        }
        while (v313);
      }
    }
    v1114 = xmmword_239F0C480;
    v1113 = *(double *)&v1191 * 0.05;
    v1115 = 5;
    sub_239C60CE8((uint64_t)&v1101, (uint64_t)&v1113, (uint64_t *)&v1125, &v1119, (uint64_t *)&v1128, (uint64_t *)&v1122);
    v1115 = (int)v1190;
    v1087 = 7;
    strcpy((char *)v1086, "NOT SET");
    v1089 = 7;
    strcpy((char *)v1088, "NOT SET");
    v1090 = 0;
    v1091 = 0;
    v1092 = v1008;
    v1093 = 0u;
    v1094 = 0u;
    v1095 = 0u;
    v1096 = 0u;
    v1097 = 0u;
    v1098 = 0u;
    v1099 = 0u;
    v1100 = 0;
    v318 = (char *)v1122;
    v319 = 954437177 * ((v1123 - (_BYTE *)v1122) >> 3);
    v320 = (char *)v1126;
    v321 = (char *)v1125;
    sub_239DF6044((uint64_t)v1140, v319);
    v322 = 0x8E38E38E38E38E39 * ((v320 - v321) >> 3);
    v1067 = 954437177 * ((v320 - v321) >> 3);
    v323 = (8 * v1067 + 31) & 0xFFFFFFFE0;
    v1138 = v323 >> 3;
    memptr.f64[0] = 0.0;
    malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v323, 0x100BBD03uLL);
    v1137 = *(void **)&memptr.f64[0];
    v1054 = memptr.f64[0];
    if (!*(_QWORD *)&memptr.f64[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v958 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v958, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v1139 = 954437177 * ((v320 - v321) >> 3);
    v324 = (8 * v319 + 31) & 0xFFFFFFFE0;
    v1135 = v324 >> 3;
    memptr.f64[0] = 0.0;
    malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v324, 0x100BBD03uLL);
    v1134 = *(void **)&memptr.f64[0];
    if (!*(_QWORD *)&memptr.f64[0])
    {
      v963 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v964 = std::bad_alloc::bad_alloc(v963);
      __cxa_throw(v964, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v1136 = v319;
    memptr.f64[0] = 0.0;
    malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (24 * v319 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v325 = memptr.f64[0];
    if (!*(_QWORD *)&memptr.f64[0])
    {
      v969 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v970 = std::bad_alloc::bad_alloc(v969);
      __cxa_throw(v970, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v1031 = -1431655765 * ((v320 - v321) >> 3);
    memptr.f64[0] = 0.0;
    malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (8 * v1031 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v326 = memptr.f64[0];
    if (!*(_QWORD *)&memptr.f64[0])
    {
      v975 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v976 = std::bad_alloc::bad_alloc(v975);
      __cxa_throw(v976, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v1132 = v324 >> 3;
    memptr.f64[0] = 0.0;
    malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v324, 0x100BBD03uLL);
    v1131 = *(void **)&memptr.f64[0];
    if (!*(_QWORD *)&memptr.f64[0])
    {
      v981 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v982 = std::bad_alloc::bad_alloc(v981);
      __cxa_throw(v982, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v1133 = v319;
    if (v1129 == v1128)
    {
      v1092 = 0uLL;
      v487 = 3;
      LODWORD(v1090) = 0;
      v1091 = 0;
      goto LABEL_667;
    }
    v994 = v319;
    v997 = 3 * v319;
    v327 = 0;
    v328 = v321;
    v329 = 0;
    if ((unint64_t)((v1129 - (_BYTE *)v1128) >> 4) <= 1)
      v330 = 1;
    else
      v330 = (v1129 - (_BYTE *)v1128) >> 4;
    v331 = v328 + 24;
    v332 = 0.0;
    do
    {
      v333 = &v318[72 * *(_QWORD *)((char *)v1128 + v327 + 8)];
      _Q1.f64[0] = *((float64_t *)v333 + 2);
      v335 = *(int64x2_t *)v333;
      v336 = (float64_t *)(v333 + 40);
      _Q3 = *(int64x2_t *)(v333 + 24);
      v338 = *((double *)v333 + 8);
      _Q5 = *((_OWORD *)v333 + 3);
      v340 = &v318[72 * *(_QWORD *)((char *)v1128 + v327)];
      v341 = *((double *)v331 + 2);
      v342 = *((double *)v331 + 5);
      v343 = (float64x2_t)vzip1q_s64(v335, _Q3);
      _Q2 = (float64x2_t)vzip2q_s64(v335, _Q3);
      _Q1.f64[1] = *v336;
      v345 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v343, *((double *)v331 - 3)), _Q2, *(float64x2_t *)(v331 - 24), 1), _Q1, *((double *)v331 - 1));
      _D7 = *((_QWORD *)v331 - 2);
      __asm { FMLA            D3, D7, V5.D[1] }
      v347 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v343, *(double *)v331), _Q2, *(float64x2_t *)v331, 1), _Q1, v341);
      _D17 = *((_QWORD *)v331 + 1);
      __asm { FMLA            D7, D17, V5.D[1] }
      _D7 = _D7 + v338 * v341;
      v351 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v343, *((double *)v331 + 3)), _Q2, *(float64x2_t *)(v331 + 24), 1), _Q1, v342);
      _Q2.f64[0] = *((float64_t *)v331 + 4);
      __asm { FMLA            D1, D2, V5.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + v338 * v342;
      _Q2.f64[0] = *((float64_t *)v340 + 2);
      _Q4 = *(_OWORD *)v340;
      *(_QWORD *)&_Q5 = *((_QWORD *)v340 + 5);
      _Q17 = *(float64x2_t *)(v340 + 24);
      v354 = *((double *)v340 + 8);
      _Q19 = *((float64x2_t *)v340 + 3);
      v356 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v345, *(double *)v340), v347, *(float64x2_t *)v340, 1), v351, _Q2.f64[0]);
      __asm { FMLA            D21, D7, V4.D[1] }
      _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
      __asm
      {
        FMLA            D21, D7, V17.D[1]
        FMLA            D3, D7, V19.D[1]
      }
      memptr = v356;
      v1146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v345, _Q17.f64[0]), v347, _Q17, 1), v351, *(double *)&_Q5);
      v1145 = _Q2.f64[0];
      v1147 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
      v1148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v345, _Q19.f64[0]), v347, _Q19, 1), v351, v354);
      v1149 = *(double *)_Q3.i64 + _Q1.f64[0] * v354;
      v1150 = 0uLL;
      v1151 = 0.0;
      sub_239458B60(&memptr, (double *)v1150.i64);
      v359 = v1151;
      _Q1 = v1150;
      v361 = (8 * v329) & 0x7FFFFFFF8;
      *(_QWORD *)(*(_QWORD *)&v326 + v361) = v1150.i64[0];
      *(_QWORD *)(*(_QWORD *)&v326 + v361 + 8 * v1067) = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
      *(double *)(*(_QWORD *)&v326 + v361 + 16 * v1067) = v359;
      _D3 = _Q1.i64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v332 = v332 + _D2 + v359 * v359;
      *(_QWORD *)(*(_QWORD *)&v1054 + v361) = *((_QWORD *)v1119 + v329++);
      v331 += 72;
      v327 += 16;
    }
    while (v330 != v329);
    v364 = *((double *)&v1114 + 1);
    v365 = *(double *)&v1114;
    v1092.f64[0] = v332;
    if (v332 <= *(double *)&v1114 || v1115 == 0 || *((double *)&v1114 + 1) >= 1.79769313e308)
    {
      LODWORD(v368) = 0;
      v369 = 1.79769313e308;
      goto LABEL_554;
    }
    v368 = 0;
    v616 = 3 * v319;
    v990 = (v997 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v1058 = (v1031 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v1047 = (v1058 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v988 = (v990 + 1) & 0x3FFFFFFFFFFFFFFCLL;
LABEL_482:
    v1000 = v368;
    v617 = 0;
    v618 = 0;
    v619 = (8 * (3 * v322) + 31) & 0xFFFFFFFE0;
    while (1)
    {
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v619, 0x100BBD03uLL);
      v621 = memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v939 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v940 = std::bad_alloc::bad_alloc(v939);
        __cxa_throw(v940, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v622.i64[0] = 0xFFFFFFFFLL;
      v622.i64[1] = 0xFFFFFFFFLL;
      if ((_DWORD)v322)
      {
        v623 = v326;
        v624 = memptr.f64[0];
        if (v1058 < 3)
          goto LABEL_494;
        v623 = v326;
        v624 = memptr.f64[0];
        if (*(_QWORD *)&memptr.f64[0] - *(_QWORD *)&v326 < 0x20uLL)
          goto LABEL_494;
        v625 = (_OWORD *)(*(_QWORD *)&memptr.f64[0] + 16);
        v626 = (__int128 *)(*(_QWORD *)&v326 + 16);
        v627 = (v1058 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v628 = *v626;
          *(v625 - 1) = *(v626 - 1);
          *v625 = v628;
          v625 += 2;
          v626 += 2;
          v627 -= 4;
        }
        while (v627);
        if (v1058 + 1 != v1047)
          break;
      }
LABEL_495:
      if (v1136)
      {
        bzero(v1134, 8 * v1136);
        v622.i64[0] = 0xFFFFFFFFLL;
        v622.i64[1] = 0xFFFFFFFFLL;
      }
      v630 = (int8x16_t *)v1128;
      if (v1129 != v1128)
      {
        v631 = 0;
        v632 = (v1129 - (_BYTE *)v1128) >> 4;
        v633 = (double *)v1137;
        v634 = (double *)v1134;
        if (v632 <= 1)
          v632 = 1;
        do
        {
          v635 = *(double *)(*(_QWORD *)&v621 + 8 * (v617 + v631)) * v633[v631];
          v636 = vandq_s8(v630[v631], v622);
          v634[v636.i64[0]] = v634[v636.i64[0]] - v635;
          v634[v636.i64[1]] = v635 + v634[v636.i64[1]];
          ++v631;
        }
        while (v632 != v631);
      }
      free(*(void **)&v621);
      sub_239DF6208((uint64_t)v1140, (uint64_t *)&v1128, (uint64_t *)&v1137, (uint64_t)&v1134, (uint64_t)&v1131);
      v637 = (uint64_t *)v1131;
      if (v1131 != *(void **)&v325)
      {
        if (v994)
          v638 = (_QWORD *)(*(_QWORD *)&v325 + 8 * v618);
        else
          v638 = 0;
        v639 = *(_QWORD *)&v325 + 8 * v618 + 8 * v616;
        if (!v994)
          v639 = 0;
        for (; v638 != (_QWORD *)v639; v638 += 3)
        {
          v640 = *v637++;
          *v638 = v640;
        }
        goto LABEL_485;
      }
      v641 = v1133;
      v642 = (8 * v1133 + 31) & 0xFFFFFFFE0;
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v642, 0x100BBD03uLL);
      v620 = memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v945 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v946 = std::bad_alloc::bad_alloc(v945);
        __cxa_throw(v946, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if ((_DWORD)v641)
      {
        if (v642 >> 3 < v641)
        {
          free(*(void **)&memptr.f64[0]);
          memptr.f64[0] = 0.0;
          malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v642, 0x100BBD03uLL);
          v620 = memptr.f64[0];
          if (!*(_QWORD *)&memptr.f64[0])
          {
            v951 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v952 = std::bad_alloc::bad_alloc(v951);
            __cxa_throw(v952, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
        }
        v643 = (v641 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v644 = v325;
        v645 = v620;
        if (v643 < 3 || (v644 = v325, v645 = v620, *(_QWORD *)&v620 - *(_QWORD *)&v325 <= 0x1FuLL))
        {
          do
          {
LABEL_520:
            v651 = **(_QWORD **)&v644;
            *(_QWORD *)&v644 += 8;
            **(_QWORD **)&v645 = v651;
            *(_QWORD *)&v645 += 8;
          }
          while (*(_QWORD *)&v645 != *(_QWORD *)&v620 + 8 * v641);
        }
        else
        {
          v646 = (v643 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          *(_QWORD *)&v644 = *(_QWORD *)&v325 + 8 * v646;
          v647 = (_OWORD *)(*(_QWORD *)&v620 + 16);
          v648 = (__int128 *)(*(_QWORD *)&v325 + 16);
          v649 = v646;
          do
          {
            v650 = *v648;
            *(v647 - 1) = *(v648 - 1);
            *v647 = v650;
            v647 += 2;
            v648 += 2;
            v649 -= 4;
          }
          while (v649);
          if (v643 + 1 != v646)
          {
            *(_QWORD *)&v645 = *(_QWORD *)&v620 + 8 * v646;
            goto LABEL_520;
          }
        }
        v652 = 0;
        v653 = v618;
        do
        {
          *(_QWORD *)(*(_QWORD *)&v325 + 8 * v653) = *(_QWORD *)(*(_QWORD *)&v620 + 8 * v652++);
          v653 += 3;
        }
        while (v641 != v652);
        goto LABEL_484;
      }
      free(*(void **)&memptr.f64[0]);
      v620 = 0.0;
LABEL_484:
      free(*(void **)&v620);
      v619 = (8 * (3 * v322) + 31) & 0xFFFFFFFE0;
LABEL_485:
      ++v618;
      v617 += v322;
      if (v618 == 3)
      {
        if (!v994)
        {
          v654 = 0.0;
LABEL_529:
          v655 = objc_release_x28;
          goto LABEL_534;
        }
        v654 = **(double **)&v325 * **(double **)&v325;
        if ((_DWORD)v616 == 1)
          goto LABEL_529;
        v655 = objc_release_x28;
        if (v990 < 3)
        {
          v656 = (double *)(*(_QWORD *)&v325 + 8);
          goto LABEL_533;
        }
        v657 = (float64x2_t *)(*(_QWORD *)&v325 + 24);
        v658 = (v990 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v659 = vmulq_f64(v657[-1], v657[-1]);
          v660 = vmulq_f64(*v657, *v657);
          v654 = v654 + v659.f64[0] + v659.f64[1] + v660.f64[0] + v660.f64[1];
          v657 += 2;
          v658 -= 4;
        }
        while (v658);
        v656 = (double *)(*(_QWORD *)&v325 + 8 + 8 * v988);
        if (v990 + 1 != v988)
        {
          do
          {
LABEL_533:
            v661 = *v656++;
            v654 = v654 + v661 * v661;
          }
          while (v656 != (double *)(*(_QWORD *)&v325 + 8 * v997));
        }
LABEL_534:
        v662 = (char *)v1122;
        if (v1123 != v1122)
        {
          v663 = 0;
          if ((unint64_t)((v1123 - (_BYTE *)v1122) / 72) <= 1)
            v664 = 1;
          else
            v664 = (v1123 - (_BYTE *)v1122) / 72;
          v665 = (char *)v1122 + 24;
          do
          {
            v698 = *(_QWORD *)&v325 + 8 * v663;
            v699 = *(double *)(v698 + 16);
            _Q7 = *(_OWORD *)v698;
            _D13 = *(double *)(v698 + 8);
            __asm { FMLA            D0, D13, V7.D[1] }
            v702 = _D0 + v699 * v699;
            if (v702 >= *((double *)v655 + 223))
            {
              v666 = sqrt(v702);
              v1039 = *(_OWORD *)v698;
              v668 = __sincos_stret(v666);
              cosval = v668.__cosval;
              *(_QWORD *)&_Q7 = v1039;
              v670 = v668.__sinval / v666;
              v671 = 1.0 / v702 * (1.0 - v668.__cosval);
            }
            else
            {
              v671 = 0.5 - v702 * (v702 / -720.0 + 0.0416666667);
              v670 = 1.0 - v702 * (0.166666667 - v702 * (v702 / -5040.0 + 0.00833333333));
              cosval = 1.0 - v702 * v671;
            }
            v672 = v671 * *(double *)&_Q7;
            v673 = v671 * _D13;
            v674 = cosval + v671 * *(double *)&_Q7 * *(double *)&_Q7;
            v675 = cosval + v671 * _D13 * _D13;
            v676 = cosval + v671 * v699 * v699;
            v677 = v671 * *(double *)&_Q7 * _D13;
            v678 = v672 * v699;
            v679 = v673 * v699;
            v680 = v670 * *(double *)&_Q7;
            v681 = v670 * _D13;
            v682 = v670 * v699;
            v683 = v677 - v682;
            v684 = v681 + v678;
            v685 = v677 + v682;
            v686 = v679 - v680;
            v687 = v678 - v681;
            v688 = v680 + v679;
            v689 = *((double *)v665 - 1);
            v690 = *(float64x2_t *)(v665 - 24);
            v691 = *((double *)v665 + 2);
            v692 = *((double *)v665 + 5);
            v693 = *(float64x2_t *)(v665 + 24);
            v694 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v690, v674), *(float64x2_t *)v665, v685), v693, v687);
            v695 = v689 * v674 + v691 * v685 + v692 * v687;
            v696 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v690, v683), *(float64x2_t *)v665, v675), v693, v688);
            v697 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v690, v684), *(float64x2_t *)v665, v686), v693, v676);
            *((double *)v665 - 1) = v695;
            *(float64x2_t *)(v665 - 24) = v694;
            *((double *)v665 + 2) = v689 * v683 + v691 * v675 + v692 * v688;
            *(float64x2_t *)v665 = v696;
            *((double *)v665 + 5) = v689 * v684 + v691 * v686 + v692 * v676;
            *(float64x2_t *)(v665 + 24) = v697;
            v665 += 72;
            v663 += 3;
            --v664;
          }
          while (v664);
        }
        if (v1129 == v1128)
        {
          v332 = 0.0;
        }
        else
        {
          v703 = 0;
          v704 = 0;
          if ((unint64_t)((v1129 - (_BYTE *)v1128) >> 4) <= 1)
            v705 = 1;
          else
            v705 = (v1129 - (_BYTE *)v1128) >> 4;
          v706 = (char *)v1137;
          v707 = (char *)v1125 + 24;
          v332 = 0.0;
          do
          {
            v708 = &v662[72 * *(_QWORD *)((char *)v1128 + v703 + 8)];
            _Q1.f64[0] = *((float64_t *)v708 + 2);
            v710 = *(int64x2_t *)v708;
            v711 = (float64_t *)(v708 + 40);
            _Q3 = *(int64x2_t *)(v708 + 24);
            v713 = *((double *)v708 + 8);
            _Q5 = *((_OWORD *)v708 + 3);
            v715 = &v662[72 * *(_QWORD *)((char *)v1128 + v703)];
            v716 = *((double *)v707 + 2);
            v717 = *((double *)v707 + 5);
            v718 = (float64x2_t)vzip1q_s64(v710, _Q3);
            _Q2 = (float64x2_t)vzip2q_s64(v710, _Q3);
            _Q1.f64[1] = *v711;
            v720 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v718, *((double *)v707 - 3)), _Q2, *(float64x2_t *)(v707 - 24), 1), _Q1, *((double *)v707 - 1));
            _D7 = *((_QWORD *)v707 - 2);
            __asm { FMLA            D3, D7, V5.D[1] }
            v722 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v718, *(double *)v707), _Q2, *(float64x2_t *)v707, 1), _Q1, v716);
            _D17 = *((_QWORD *)v707 + 1);
            __asm { FMLA            D7, D17, V5.D[1] }
            _D7 = _D7 + v713 * v716;
            v726 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v718, *((double *)v707 + 3)), _Q2, *(float64x2_t *)(v707 + 24), 1), _Q1, v717);
            _Q2.f64[0] = *((float64_t *)v707 + 4);
            __asm { FMLA            D1, D2, V5.D[1] }
            _Q1.f64[0] = _Q1.f64[0] + v713 * v717;
            _Q2.f64[0] = *((float64_t *)v715 + 2);
            _Q4 = *(_OWORD *)v715;
            *(_QWORD *)&_Q5 = *((_QWORD *)v715 + 5);
            _Q17 = *(float64x2_t *)(v715 + 24);
            v729 = *((double *)v715 + 8);
            _Q19 = *((float64x2_t *)v715 + 3);
            v731 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v720, *(double *)v715), v722, *(float64x2_t *)v715, 1), v726, _Q2.f64[0]);
            __asm { FMLA            D21, D7, V4.D[1] }
            _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
            __asm
            {
              FMLA            D21, D7, V17.D[1]
              FMLA            D3, D7, V19.D[1]
            }
            memptr = v731;
            v1146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v720, _Q17.f64[0]), v722, _Q17, 1), v726, *(double *)&_Q5);
            v1145 = _Q2.f64[0];
            v1147 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
            v1148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v720, _Q19.f64[0]), v722, _Q19, 1), v726, v729);
            v1149 = *(double *)_Q3.i64 + _Q1.f64[0] * v729;
            v1150 = 0uLL;
            v1151 = 0.0;
            sub_239458B60(&memptr, (double *)v1150.i64);
            v734 = v1151;
            _Q1 = v1150;
            v736 = (8 * v704) & 0x7FFFFFFF8;
            *(_QWORD *)(*(_QWORD *)&v326 + v736) = v1150.i64[0];
            *(_QWORD *)(*(_QWORD *)&v326 + v736 + 8 * v1067) = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
            *(double *)(*(_QWORD *)&v326 + v736 + 16 * v1067) = v734;
            _D3 = _Q1.i64[1];
            __asm { FMLA            D2, D3, V1.D[1] }
            v332 = v332 + _D2 + v734 * v734;
            *(_QWORD *)&v706[v736] = *((_QWORD *)v1119 + v704++);
            v707 += 72;
            v703 += 16;
          }
          while (v705 != v704);
        }
        v616 = v997;
        v368 = v1000 + 1;
        v364 = *((double *)&v1114 + 1);
        v365 = *(double *)&v1114;
        v369 = sqrt(v654);
        if (v332 <= *(double *)&v1114 || v368 >= v1115 || v369 <= *((double *)&v1114 + 1))
        {
LABEL_554:
          v1092.f64[1] = v332;
          LODWORD(v1090) = v368;
          v1091 = 0;
          if (v332 <= v365)
          {
            v487 = 3;
LABEL_667:
            v1091 = v487;
          }
          else if (v369 <= v364)
          {
            v487 = 2;
            goto LABEL_667;
          }
          free(v1131);
          free(*(void **)&v326);
          free(*(void **)&v325);
          free(v1134);
          free(v1137);
          free(v1143);
          free(v1142);
          free(v1141);
          free(v1140[0]);
          v1181.f64[0] = v1104;
          v1181.f64[1] = v1092.f64[1];
          LODWORD(v1179) = v1090 + LODWORD(v1103.f64[0]);
          v1180 = v1091;
          for (i = v1153; i; i = (uint64_t *)*i)
          {
            v1140[0] = i + 2;
            v879 = sub_2395193BC((uint64_t)&v1116, (unint64_t *)i + 2, (uint64_t)&unk_239EC6E98, (_QWORD **)v1140);
            v880 = (char *)v1122 + 72 * v879[3];
            v881 = *((_QWORD *)v880 + 2);
            v882 = *((_QWORD *)v880 + 5);
            v883 = *(_OWORD *)(v880 + 24);
            v884 = *((_QWORD *)v880 + 8);
            v885 = *((_OWORD *)v880 + 3);
            *(_OWORD *)(i + 3) = *(_OWORD *)v880;
            i[5] = v881;
            *(_OWORD *)(i + 7) = v883;
            i[9] = v882;
            *(_OWORD *)(i + 11) = v885;
            i[13] = v884;
          }
          if ((_QWORD)v1099)
          {
            *((_QWORD *)&v1099 + 1) = v1099;
            operator delete((void *)v1099);
          }
          v40 = v1070;
          if (*((_QWORD *)&v1096 + 1))
          {
            *(_QWORD *)&v1097 = *((_QWORD *)&v1096 + 1);
            operator delete(*((void **)&v1096 + 1));
          }
          if (*((_QWORD *)&v1094 + 1))
          {
            *(_QWORD *)&v1095 = *((_QWORD *)&v1094 + 1);
            operator delete(*((void **)&v1094 + 1));
          }
          if ((_QWORD)v1093)
          {
            *((_QWORD *)&v1093 + 1) = v1093;
            operator delete((void *)v1093);
          }
          if ((v1089 & 0x80000000) == 0)
          {
            if ((v1087 & 0x80000000) == 0)
              goto LABEL_680;
LABEL_693:
            operator delete(v1086[0]);
            v886 = v1111;
            if (!v1111)
              goto LABEL_682;
LABEL_681:
            v1112 = v886;
            operator delete(v886);
            goto LABEL_682;
          }
          operator delete(v1088[0]);
          if (v1087 < 0)
            goto LABEL_693;
LABEL_680:
          v886 = v1111;
          if (v1111)
            goto LABEL_681;
LABEL_682:
          if (v1109)
          {
            v1110 = v1109;
            operator delete(v1109);
          }
          if (v1107)
          {
            v1108 = v1107;
            operator delete(v1107);
          }
          if (v1105)
          {
            v1106 = v1105;
            operator delete(v1105);
          }
          if ((v1102[31] & 0x80000000) != 0)
          {
            operator delete(*(void **)&v1102[8]);
            if ((v1102[7] & 0x80000000) == 0)
              goto LABEL_690;
          }
          else if ((v1102[7] & 0x80000000) == 0)
          {
LABEL_690:
            v887 = (_QWORD *)v1117;
            if (!(_QWORD)v1117)
              goto LABEL_725;
            goto LABEL_697;
          }
          operator delete(*(void **)&v1101.f64[0]);
          v887 = (_QWORD *)v1117;
          if (!(_QWORD)v1117)
            goto LABEL_725;
          do
          {
LABEL_697:
            v888 = (_QWORD *)*v887;
            operator delete(v887);
            v887 = v888;
          }
          while (v888);
          goto LABEL_725;
        }
        goto LABEL_482;
      }
    }
    *(_QWORD *)&v624 = *(_QWORD *)&v621 + 8 * v1047;
    *(_QWORD *)&v623 = *(_QWORD *)&v326 + 8 * v1047;
    do
    {
LABEL_494:
      v629 = **(_QWORD **)&v623;
      *(_QWORD *)&v623 += 8;
      **(_QWORD **)&v624 = v629;
      *(_QWORD *)&v624 += 8;
    }
    while (*(_QWORD *)&v624 != *(_QWORD *)&v621 + 8 * v1031);
    goto LABEL_495;
  }
  if (v119 == 1)
  {
    v127 = v1159;
    v128 = v1158;
    v129 = (int64_t)&v1159[-*(_QWORD *)&v1158];
    if (v1159 != *(char **)&v1158)
    {
      v130 = __sz;
      if (!__sz || *((_QWORD *)&v1196 + 1) > 1uLL)
        goto LABEL_170;
      v131 = v129 / 144;
      v132 = v1162;
      v133 = v1161;
      v1129 = 0;
      v1128 = 0;
      v1130 = 0;
      v1011 = v129 / 144;
      if ((unint64_t)(v129 + 143) > 0x11E)
      {
        if (v131 >> 60)
          sub_2394189F8();
        v1128 = operator new(16 * v131);
        v1129 = (char *)v1128;
        v1130 = (char *)v1128 + 16 * v131;
        v1125 = operator new(72 * v131);
        v1126 = (int8x16_t *)v1125;
        v1127 = (int8x16_t *)((char *)v1125 + 72 * v131);
      }
      else
      {
        v1126 = 0;
        v1125 = 0;
        v1127 = 0;
      }
      if (v130 > 0x38E38E38E38E38ELL)
        sub_2394189F8();
      v141 = 72 * v130;
      v142 = operator new(v141);
      v1004 = (v132 - (uint64_t)v133) >> 3;
      v143 = (char *)v142 + v141;
      v1122 = v142;
      v1124 = (char *)v142 + v141;
      do
      {
        *((_QWORD *)v142 + 8) = 0x3FF0000000000000;
        *v142 = xmmword_239F13A00;
        v142[1] = *(_OWORD *)algn_239F13A10;
        v142[2] = xmmword_239F13A20;
        v142[3] = *(_OWORD *)dbl_239F13A30;
        v142 = (_OWORD *)((char *)v142 + 72);
        v141 -= 72;
      }
      while (v141);
      v1123 = v143;
      v1120 = 0;
      v1119 = 0;
      v1121 = 0;
      if (v1011 >> 61)
        sub_2394189F8();
      v144 = (char *)operator new(8 * v1011);
      v145 = &v144[8 * v1011];
      v1119 = v144;
      v1121 = v145;
      memset_pattern16(v144, &unk_239EC6930, 8 * v1011);
      v1120 = v145;
      v1116 = 0u;
      v1117 = 0u;
      v1118 = 1065353216;
      v146 = v1153;
      if (v1153)
      {
        v147 = 0;
        v148 = 0;
        do
        {
          v149 = v146[5];
          v150 = v146[9];
          v151 = *(_OWORD *)(v146 + 7);
          v152 = v146[13];
          v153 = *(_OWORD *)(v146 + 11);
          v154 = (char *)v1122 + v147;
          *(_OWORD *)v154 = *(_OWORD *)(v146 + 3);
          *((_QWORD *)v154 + 2) = v149;
          *(_OWORD *)(v154 + 24) = v151;
          *((_QWORD *)v154 + 5) = v150;
          *((_OWORD *)v154 + 3) = v153;
          *((_QWORD *)v154 + 8) = v152;
          *(_QWORD *)&v1101.f64[0] = v146 + 2;
          sub_2395193BC((uint64_t)&v1116, (unint64_t *)v146 + 2, (uint64_t)&unk_239EC6E98, &v1101)[3] = v148++;
          v146 = (uint64_t *)*v146;
          v147 += 72;
        }
        while (v146);
        v128 = v1158;
        v127 = v1159;
      }
      for (; *(char **)&v128 != v127; *(_QWORD *)&v128 += 144)
      {
        v1101.f64[0] = v128;
        v156 = sub_2395193BC((uint64_t)&v1116, *(unint64_t **)&v128, (uint64_t)&unk_239EC6E98, &v1101)[3];
        *(_QWORD *)&v1101.f64[0] = *(_QWORD *)&v128 + 8;
        v157 = sub_2395193BC((uint64_t)&v1116, (unint64_t *)(*(_QWORD *)&v128 + 8), (uint64_t)&unk_239EC6E98, &v1101)[3];
        v158 = *(_QWORD *)(*(_QWORD *)&v128 + 32);
        v159 = *(int8x16_t *)(*(_QWORD *)&v128 + 16);
        v160 = vextq_s8(v159, v159, 8uLL).u64[0];
        v161 = *(_QWORD *)(*(_QWORD *)&v128 + 64);
        v162 = *(int8x16_t *)(*(_QWORD *)&v128 + 48);
        v163 = vextq_s8(v162, v162, 8uLL).u64[0];
        v164 = *(_QWORD *)(*(_QWORD *)&v128 + 96);
        v165 = *(int8x16_t *)(*(_QWORD *)&v128 + 80);
        v166 = vextq_s8(v165, v165, 8uLL).u64[0];
        v167 = v1126;
        if (v1126 >= v1127)
        {
          v169 = (int8x16_t *)v1125;
          v170 = 0x8E38E38E38E38E39 * (((char *)v1126 - (_BYTE *)v1125) >> 3);
          v171 = v170 + 1;
          if (v170 + 1 > 0x38E38E38E38E38ELL)
            sub_2394189F8();
          if (0x1C71C71C71C71C72 * (((char *)v1127 - (_BYTE *)v1125) >> 3) > v171)
            v171 = 0x1C71C71C71C71C72 * (((char *)v1127 - (_BYTE *)v1125) >> 3);
          if (0x8E38E38E38E38E39 * (((char *)v1127 - (_BYTE *)v1125) >> 3) >= 0x1C71C71C71C71C7)
            v172 = 0x38E38E38E38E38ELL;
          else
            v172 = v171;
          if (v172)
          {
            v1015 = *(_QWORD *)(*(_QWORD *)&v128 + 32);
            v1019 = v160;
            sizea = *(_QWORD *)(*(_QWORD *)&v128 + 64);
            v1028 = *(_OWORD *)(*(_QWORD *)&v128 + 16);
            v1034 = v163;
            v1042 = *(_QWORD *)(*(_QWORD *)&v128 + 96);
            v1051 = *(_OWORD *)(*(_QWORD *)&v128 + 48);
            v1060 = v166;
            v1064 = *(_OWORD *)(*(_QWORD *)&v128 + 80);
            if (v172 > 0x38E38E38E38E38ELL)
              sub_239418A80();
            v173 = (char *)operator new(72 * v172);
            v166 = v1060;
            v165.i64[0] = v1064;
            v164 = v1042;
            v162.i64[0] = v1051;
            v159.i64[0] = v1028;
            v163 = v1034;
            v160 = v1019;
            v161 = sizea;
            v158 = v1015;
          }
          else
          {
            v173 = 0;
          }
          v174 = &v173[72 * v170];
          *((_QWORD *)v174 + 2) = v158;
          v159.i64[1] = v160;
          *(int8x16_t *)v174 = v159;
          *((_QWORD *)v174 + 5) = v161;
          v162.i64[1] = v163;
          *(int8x16_t *)(v174 + 24) = v162;
          *((_QWORD *)v174 + 8) = v164;
          v165.i64[1] = v166;
          *((int8x16_t *)v174 + 3) = v165;
          v175 = v174;
          if (v167 != v169)
          {
            do
            {
              *(int8x16_t *)(v175 - 72) = *(int8x16_t *)((char *)v167 - 72);
              v176 = *(__int128 *)((char *)&v167[-4] + 8);
              v177 = *(__int128 *)((char *)&v167[-3] + 8);
              v178 = *(__int128 *)((char *)&v167[-2] + 8);
              *((_QWORD *)v175 - 1) = v167[-1].i64[1];
              *(_OWORD *)(v175 - 24) = v178;
              *(_OWORD *)(v175 - 40) = v177;
              *(_OWORD *)(v175 - 56) = v176;
              v175 -= 72;
              v167 = (int8x16_t *)((char *)v167 - 72);
            }
            while (v167 != v169);
            v167 = v169;
          }
          v179 = &v173[72 * v172];
          v168 = v174 + 72;
          v1125 = v175;
          v1127 = (int8x16_t *)v179;
          if (v167)
            operator delete(v167);
        }
        else
        {
          v1126[1].i64[0] = v158;
          v159.i64[1] = v160;
          *v167 = v159;
          v167[2].i64[1] = v161;
          v162.i64[1] = v163;
          *(int8x16_t *)((char *)v167 + 24) = v162;
          v167[4].i64[0] = v164;
          v165.i64[1] = v166;
          v167[3] = v165;
          v168 = &v167[4].i8[8];
        }
        v1126 = (int8x16_t *)v168;
        v180 = v1129;
        if (v1129 < v1130)
        {
          *(_QWORD *)v1129 = v156;
          v180[1] = v157;
          v155 = (char *)(v180 + 2);
        }
        else
        {
          v181 = v1128;
          v182 = (v1129 - (_BYTE *)v1128) >> 4;
          v183 = v182 + 1;
          if ((unint64_t)(v182 + 1) >> 60)
            sub_2394189F8();
          v184 = v1130 - (_BYTE *)v1128;
          if ((v1130 - (_BYTE *)v1128) >> 3 > v183)
            v183 = v184 >> 3;
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF0)
            v185 = 0xFFFFFFFFFFFFFFFLL;
          else
            v185 = v183;
          if (v185)
          {
            if (v185 >> 60)
              sub_239418A80();
            v186 = (char *)operator new(16 * v185);
          }
          else
          {
            v186 = 0;
          }
          v187 = &v186[16 * v182];
          *(_QWORD *)v187 = v156;
          *((_QWORD *)v187 + 1) = v157;
          v188 = v187;
          if (v180 != v181)
          {
            do
            {
              *((_OWORD *)v188 - 1) = *((_OWORD *)v180 - 1);
              v188 -= 16;
              v180 -= 2;
            }
            while (v180 != v181);
            v180 = v1128;
          }
          v155 = v187 + 16;
          v1128 = v188;
          v1129 = v187 + 16;
          v1130 = &v186[16 * v185];
          if (v180)
            operator delete(v180);
        }
        v1129 = v155;
      }
      v189 = v1011;
      if (v1004 == v1011)
      {
        v190 = 0;
        v191 = v1161;
        v192 = (char *)v1119;
        if (v1011 <= 1)
          v189 = 1;
        if (v189 < 4)
          goto LABEL_227;
        if ((unint64_t)((_BYTE *)v1119 - (_BYTE *)v1161) <= 0x1F)
          goto LABEL_227;
        v190 = v189 & 0xFFFFFFFFFFFFFFFCLL;
        v193 = (float64x2_t *)((char *)v1119 + 16);
        v194 = v1161 + 1;
        v195 = v189 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v196 = vsqrtq_f64(*v194);
          v193[-1] = vsqrtq_f64(v194[-1]);
          *v193 = v196;
          v193 += 2;
          v194 += 2;
          v195 -= 4;
        }
        while (v195);
        if (v189 != v190)
        {
LABEL_227:
          v197 = v189 - v190;
          v198 = v190;
          v199 = (double *)&v192[v198 * 8];
          v200 = &v191->f64[v198];
          do
          {
            v201 = *v200++;
            *v199++ = sqrt(v201);
            --v197;
          }
          while (v197);
        }
      }
      v1114 = xmmword_239F0C480;
      v202 = *(double *)&v1191 * 0.05;
      v1113 = *(double *)&v1191 * 0.05;
      v1115 = 5;
      sub_239C60CE8((uint64_t)&v1101, (uint64_t)&v1113, (uint64_t *)&v1125, &v1119, (uint64_t *)&v1128, (uint64_t *)&v1122);
      v1115 = (int)v1190;
      v1087 = 7;
      strcpy((char *)v1086, "NOT SET");
      v1089 = 7;
      strcpy((char *)v1088, "NOT SET");
      v1090 = 0;
      v1091 = 0;
      v1092 = v1008;
      v1093 = 0u;
      v1094 = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1097 = 0u;
      v1098 = 0u;
      v1099 = 0u;
      v1100 = 0;
      v203 = (char *)v1122;
      v204 = 954437177 * ((v1123 - (_BYTE *)v1122) >> 3);
      v205 = (char *)v1126;
      v206 = (char *)v1125;
      sub_239DF6044((uint64_t)v1140, v204);
      v207 = 0x8E38E38E38E38E39 * ((v205 - v206) >> 3);
      v1065 = 954437177 * ((v205 - v206) >> 3);
      v208 = (8 * v1065 + 31) & 0xFFFFFFFE0;
      v1138 = v208 >> 3;
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v208, 0x100BBD03uLL);
      v1137 = *(void **)&memptr.f64[0];
      v1052 = memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v955 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v956 = std::bad_alloc::bad_alloc(v955);
        __cxa_throw(v956, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v1139 = 954437177 * ((v205 - v206) >> 3);
      v209 = (8 * v204 + 31) & 0xFFFFFFFE0;
      v1135 = v209 >> 3;
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v209, 0x100BBD03uLL);
      v1134 = *(void **)&memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v961 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v962 = std::bad_alloc::bad_alloc(v961);
        __cxa_throw(v962, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v1136 = v204;
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (24 * v204 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
      v210 = memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v967 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v968 = std::bad_alloc::bad_alloc(v967);
        __cxa_throw(v968, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v1029 = -1431655765 * ((v205 - v206) >> 3);
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (8 * v1029 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
      v211 = memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v973 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v974 = std::bad_alloc::bad_alloc(v973);
        __cxa_throw(v974, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v1132 = v209 >> 3;
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v209, 0x100BBD03uLL);
      v1131 = *(void **)&memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v979 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v980 = std::bad_alloc::bad_alloc(v979);
        __cxa_throw(v980, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v1133 = v204;
      if (v1129 == v1128)
      {
        v1092 = 0uLL;
        v486 = 3;
        LODWORD(v1090) = 0;
        v1091 = 0;
        goto LABEL_634;
      }
      v993 = v204;
      v996 = 3 * v204;
      v212 = 0;
      v213 = 0;
      if ((unint64_t)((v1129 - (_BYTE *)v1128) >> 4) <= 1)
        v214 = 1;
      else
        v214 = (v1129 - (_BYTE *)v1128) >> 4;
      v215 = v206 + 24;
      v216 = 0.0;
      do
      {
        v217 = &v203[72 * *(_QWORD *)((char *)v1128 + v212 + 8)];
        _Q1.f64[0] = *((float64_t *)v217 + 2);
        v219 = *(int64x2_t *)v217;
        v220 = (float64_t *)(v217 + 40);
        _Q3 = *(int64x2_t *)(v217 + 24);
        v222 = *((double *)v217 + 8);
        _Q5 = *((_OWORD *)v217 + 3);
        v224 = &v203[72 * *(_QWORD *)((char *)v1128 + v212)];
        v225 = *((double *)v215 + 2);
        v226 = *((double *)v215 + 5);
        v227 = (float64x2_t)vzip1q_s64(v219, _Q3);
        _Q2 = (float64x2_t)vzip2q_s64(v219, _Q3);
        _Q1.f64[1] = *v220;
        v229 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v227, *((double *)v215 - 3)), _Q2, *(float64x2_t *)(v215 - 24), 1), _Q1, *((double *)v215 - 1));
        _D7 = *((_QWORD *)v215 - 2);
        __asm { FMLA            D3, D7, V5.D[1] }
        v231 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v227, *(double *)v215), _Q2, *(float64x2_t *)v215, 1), _Q1, v225);
        _D17 = *((_QWORD *)v215 + 1);
        __asm { FMLA            D7, D17, V5.D[1] }
        _D7 = _D7 + v222 * v225;
        v235 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v227, *((double *)v215 + 3)), _Q2, *(float64x2_t *)(v215 + 24), 1), _Q1, v226);
        _Q2.f64[0] = *((float64_t *)v215 + 4);
        __asm { FMLA            D1, D2, V5.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v222 * v226;
        _Q2.f64[0] = *((float64_t *)v224 + 2);
        _Q4 = *(_OWORD *)v224;
        *(_QWORD *)&_Q5 = *((_QWORD *)v224 + 5);
        _Q17 = *(float64x2_t *)(v224 + 24);
        v238 = *((double *)v224 + 8);
        _Q19 = *((float64x2_t *)v224 + 3);
        v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v229, *(double *)v224), v231, *(float64x2_t *)v224, 1), v235, _Q2.f64[0]);
        __asm { FMLA            D21, D7, V4.D[1] }
        _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
        __asm
        {
          FMLA            D21, D7, V17.D[1]
          FMLA            D3, D7, V19.D[1]
        }
        memptr = v240;
        v1146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v229, _Q17.f64[0]), v231, _Q17, 1), v235, *(double *)&_Q5);
        v1145 = _Q2.f64[0];
        v1147 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
        v1148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v229, _Q19.f64[0]), v231, _Q19, 1), v235, v238);
        v1149 = *(double *)_Q3.i64 + _Q1.f64[0] * v238;
        v1150 = 0uLL;
        v1151 = 0.0;
        sub_239458B60(&memptr, (double *)v1150.i64);
        v243 = v1151;
        _Q1 = v1150;
        v245 = (_QWORD *)(*(_QWORD *)&v211 + 8 * v213);
        *v245 = v1150.i64[0];
        v245[v1065] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
        *(double *)&v245[2 * v1065] = v243;
        _D3 = _Q1.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v248 = _D2 + v243 * v243;
        v249 = 1.0;
        if (v248 > v202 * v202)
        {
          v250 = sqrt(v248);
          v248 = (v202 + v202) * v250 - v202 * v202;
          v249 = v202 / v250;
        }
        v216 = v216 + v248;
        *(double *)(*(_QWORD *)&v1052 + 8 * v213) = v249 * *((double *)v1119 + v213);
        ++v213;
        v215 += 72;
        v212 += 16;
      }
      while (v214 != v213);
      v251 = *((double *)&v1114 + 1);
      v252 = *(double *)&v1114;
      v1092.f64[0] = v216;
      if (v216 <= *(double *)&v1114 || v1115 == 0 || *((double *)&v1114 + 1) >= 1.79769313e308)
      {
        LODWORD(v255) = 0;
        v256 = 1.79769313e308;
        goto LABEL_478;
      }
      v255 = 0;
      v489 = v996;
      v989 = (v996 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
      v1057 = (v1029 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v1046 = (v1057 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v987 = (v989 + 1) & 0x3FFFFFFFFFFFFFFCLL;
LABEL_405:
      v999 = v255;
      v490 = 0;
      v491 = 0;
      v492 = (8 * (3 * v207) + 31) & 0xFFFFFFFE0;
      while (1)
      {
        memptr.f64[0] = 0.0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v492, 0x100BBD03uLL);
        v494 = memptr.f64[0];
        if (!*(_QWORD *)&memptr.f64[0])
        {
          v937 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v938 = std::bad_alloc::bad_alloc(v937);
          __cxa_throw(v938, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v495.i64[0] = 0xFFFFFFFFLL;
        v495.i64[1] = 0xFFFFFFFFLL;
        if ((_DWORD)v207)
        {
          v496 = v211;
          v497 = memptr.f64[0];
          if (v1057 < 3)
            goto LABEL_417;
          v496 = v211;
          v497 = memptr.f64[0];
          if (*(_QWORD *)&memptr.f64[0] - *(_QWORD *)&v211 < 0x20uLL)
            goto LABEL_417;
          v498 = (_OWORD *)(*(_QWORD *)&memptr.f64[0] + 16);
          v499 = (__int128 *)(*(_QWORD *)&v211 + 16);
          v500 = (v1057 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v501 = *v499;
            *(v498 - 1) = *(v499 - 1);
            *v498 = v501;
            v498 += 2;
            v499 += 2;
            v500 -= 4;
          }
          while (v500);
          if (v1057 + 1 != v1046)
            break;
        }
LABEL_418:
        if (v1136)
        {
          bzero(v1134, 8 * v1136);
          v495.i64[0] = 0xFFFFFFFFLL;
          v495.i64[1] = 0xFFFFFFFFLL;
        }
        v503 = (int8x16_t *)v1128;
        if (v1129 != v1128)
        {
          v504 = 0;
          v505 = (v1129 - (_BYTE *)v1128) >> 4;
          v506 = (double *)v1137;
          v507 = (double *)v1134;
          if (v505 <= 1)
            v505 = 1;
          do
          {
            v508 = *(double *)(*(_QWORD *)&v494 + 8 * (v490 + v504)) * v506[v504];
            v509 = vandq_s8(v503[v504], v495);
            v507[v509.i64[0]] = v507[v509.i64[0]] - v508;
            v507[v509.i64[1]] = v508 + v507[v509.i64[1]];
            ++v504;
          }
          while (v505 != v504);
        }
        free(*(void **)&v494);
        sub_239DF6208((uint64_t)v1140, (uint64_t *)&v1128, (uint64_t *)&v1137, (uint64_t)&v1134, (uint64_t)&v1131);
        v510 = (uint64_t *)v1131;
        if (v1131 != *(void **)&v210)
        {
          if (v993)
            v511 = (_QWORD *)(*(_QWORD *)&v210 + 8 * v491);
          else
            v511 = 0;
          v512 = *(_QWORD *)&v210 + 8 * v491 + 8 * v489;
          if (!v993)
            v512 = 0;
          for (; v511 != (_QWORD *)v512; v511 += 3)
          {
            v513 = *v510++;
            *v511 = v513;
          }
          goto LABEL_408;
        }
        v514 = v1133;
        v515 = (8 * v1133 + 31) & 0xFFFFFFFE0;
        memptr.f64[0] = 0.0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v515, 0x100BBD03uLL);
        v493 = memptr.f64[0];
        if (!*(_QWORD *)&memptr.f64[0])
        {
          v943 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v944 = std::bad_alloc::bad_alloc(v943);
          __cxa_throw(v944, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if ((_DWORD)v514)
        {
          if (v515 >> 3 < v514)
          {
            free(*(void **)&memptr.f64[0]);
            memptr.f64[0] = 0.0;
            malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v515, 0x100BBD03uLL);
            v493 = memptr.f64[0];
            if (!*(_QWORD *)&memptr.f64[0])
            {
              v949 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v950 = std::bad_alloc::bad_alloc(v949);
              __cxa_throw(v950, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
            }
          }
          v516 = (v514 - 1) & 0x1FFFFFFFFFFFFFFFLL;
          v517 = v210;
          v518 = v493;
          if (v516 < 3 || (v517 = v210, v518 = v493, *(_QWORD *)&v493 - *(_QWORD *)&v210 <= 0x1FuLL))
          {
            do
            {
LABEL_443:
              v524 = **(_QWORD **)&v517;
              *(_QWORD *)&v517 += 8;
              **(_QWORD **)&v518 = v524;
              *(_QWORD *)&v518 += 8;
            }
            while (*(_QWORD *)&v518 != *(_QWORD *)&v493 + 8 * v514);
          }
          else
          {
            v519 = (v516 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            *(_QWORD *)&v517 = *(_QWORD *)&v210 + 8 * v519;
            v520 = (_OWORD *)(*(_QWORD *)&v493 + 16);
            v521 = (__int128 *)(*(_QWORD *)&v210 + 16);
            v522 = v519;
            do
            {
              v523 = *v521;
              *(v520 - 1) = *(v521 - 1);
              *v520 = v523;
              v520 += 2;
              v521 += 2;
              v522 -= 4;
            }
            while (v522);
            if (v516 + 1 != v519)
            {
              *(_QWORD *)&v518 = *(_QWORD *)&v493 + 8 * v519;
              goto LABEL_443;
            }
          }
          v525 = 0;
          v526 = v491;
          do
          {
            *(_QWORD *)(*(_QWORD *)&v210 + 8 * v526) = *(_QWORD *)(*(_QWORD *)&v493 + 8 * v525++);
            v526 += 3;
          }
          while (v514 != v525);
          goto LABEL_407;
        }
        free(*(void **)&memptr.f64[0]);
        v493 = 0.0;
LABEL_407:
        free(*(void **)&v493);
        v492 = (8 * (3 * v207) + 31) & 0xFFFFFFFE0;
LABEL_408:
        ++v491;
        v490 += v207;
        if (v491 == 3)
        {
          if (!v993)
          {
            v527 = 0.0;
LABEL_452:
            v528 = objc_release_x28;
            goto LABEL_457;
          }
          v527 = **(double **)&v210 * **(double **)&v210;
          if ((_DWORD)v489 == 1)
            goto LABEL_452;
          v528 = objc_release_x28;
          if (v989 < 3)
          {
            v529 = (double *)(*(_QWORD *)&v210 + 8);
            goto LABEL_456;
          }
          v530 = (float64x2_t *)(*(_QWORD *)&v210 + 24);
          v531 = (v989 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v532 = vmulq_f64(v530[-1], v530[-1]);
            v533 = vmulq_f64(*v530, *v530);
            v527 = v527 + v532.f64[0] + v532.f64[1] + v533.f64[0] + v533.f64[1];
            v530 += 2;
            v531 -= 4;
          }
          while (v531);
          v529 = (double *)(*(_QWORD *)&v210 + 8 + 8 * v987);
          if (v989 + 1 != v987)
          {
            do
            {
LABEL_456:
              v534 = *v529++;
              v527 = v527 + v534 * v534;
            }
            while (v529 != (double *)(*(_QWORD *)&v210 + 8 * v996));
          }
LABEL_457:
          v535 = (char *)v1122;
          if (v1123 != v1122)
          {
            v536 = 0;
            if ((unint64_t)((v1123 - (_BYTE *)v1122) / 72) <= 1)
              v537 = 1;
            else
              v537 = (v1123 - (_BYTE *)v1122) / 72;
            v538 = (char *)v1122 + 24;
            do
            {
              v571 = *(_QWORD *)&v210 + 8 * v536;
              v572 = *(double *)(v571 + 16);
              _Q7 = *(_OWORD *)v571;
              _D13 = *(double *)(v571 + 8);
              __asm { FMLA            D0, D13, V7.D[1] }
              v575 = _D0 + v572 * v572;
              if (v575 >= *((double *)v528 + 223))
              {
                v539 = sqrt(v575);
                v1038 = *(_OWORD *)v571;
                v541 = __sincos_stret(v539);
                v540 = v541.__cosval;
                *(_QWORD *)&_Q7 = v1038;
                v543 = v541.__sinval / v539;
                v544 = 1.0 / v575 * (1.0 - v541.__cosval);
              }
              else
              {
                v544 = 0.5 - v575 * (v575 / -720.0 + 0.0416666667);
                v543 = 1.0 - v575 * (0.166666667 - v575 * (v575 / -5040.0 + 0.00833333333));
                v540 = 1.0 - v575 * v544;
              }
              v545 = v544 * *(double *)&_Q7;
              v546 = v544 * _D13;
              v547 = v540 + v544 * *(double *)&_Q7 * *(double *)&_Q7;
              v548 = v540 + v544 * _D13 * _D13;
              v549 = v540 + v544 * v572 * v572;
              v550 = v544 * *(double *)&_Q7 * _D13;
              v551 = v545 * v572;
              v552 = v546 * v572;
              v553 = v543 * *(double *)&_Q7;
              v554 = v543 * _D13;
              v555 = v543 * v572;
              v556 = v550 - v555;
              v557 = v554 + v551;
              v558 = v550 + v555;
              v559 = v552 - v553;
              v560 = v551 - v554;
              v561 = v553 + v552;
              v562 = *((double *)v538 - 1);
              v563 = *(float64x2_t *)(v538 - 24);
              v564 = *((double *)v538 + 2);
              v565 = *((double *)v538 + 5);
              v566 = *(float64x2_t *)(v538 + 24);
              v567 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v563, v547), *(float64x2_t *)v538, v558), v566, v560);
              v568 = v562 * v547 + v564 * v558 + v565 * v560;
              v569 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v563, v556), *(float64x2_t *)v538, v548), v566, v561);
              v570 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v563, v557), *(float64x2_t *)v538, v559), v566, v549);
              *((double *)v538 - 1) = v568;
              *(float64x2_t *)(v538 - 24) = v567;
              *((double *)v538 + 2) = v562 * v556 + v564 * v548 + v565 * v561;
              *(float64x2_t *)v538 = v569;
              *((double *)v538 + 5) = v562 * v557 + v564 * v559 + v565 * v549;
              *(float64x2_t *)(v538 + 24) = v570;
              v538 += 72;
              v536 += 3;
              --v537;
            }
            while (v537);
          }
          if (v1129 == v1128)
          {
            v216 = 0.0;
          }
          else
          {
            v576 = 0;
            v577 = 0;
            v578 = v1113;
            if ((unint64_t)((v1129 - (_BYTE *)v1128) >> 4) <= 1)
              v579 = 1;
            else
              v579 = (v1129 - (_BYTE *)v1128) >> 4;
            v580 = (double *)v1137;
            v581 = (char *)v1125 + 24;
            v216 = 0.0;
            do
            {
              v582 = &v535[72 * *(_QWORD *)((char *)v1128 + v576 + 8)];
              _Q1.f64[0] = *((float64_t *)v582 + 2);
              v584 = *(int64x2_t *)v582;
              v585 = (float64_t *)(v582 + 40);
              _Q3 = *(int64x2_t *)(v582 + 24);
              v587 = *((double *)v582 + 8);
              _Q5 = *((_OWORD *)v582 + 3);
              v589 = &v535[72 * *(_QWORD *)((char *)v1128 + v576)];
              v590 = *((double *)v581 + 2);
              v591 = *((double *)v581 + 5);
              v592 = (float64x2_t)vzip1q_s64(v584, _Q3);
              _Q2 = (float64x2_t)vzip2q_s64(v584, _Q3);
              _Q1.f64[1] = *v585;
              v594 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v592, *((double *)v581 - 3)), _Q2, *(float64x2_t *)(v581 - 24), 1), _Q1, *((double *)v581 - 1));
              _D7 = *((_QWORD *)v581 - 2);
              __asm { FMLA            D3, D7, V5.D[1] }
              v596 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v592, *(double *)v581), _Q2, *(float64x2_t *)v581, 1), _Q1, v590);
              _D17 = *((_QWORD *)v581 + 1);
              __asm { FMLA            D7, D17, V5.D[1] }
              _D7 = _D7 + v587 * v590;
              v600 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v592, *((double *)v581 + 3)), _Q2, *(float64x2_t *)(v581 + 24), 1), _Q1, v591);
              _Q2.f64[0] = *((float64_t *)v581 + 4);
              __asm { FMLA            D1, D2, V5.D[1] }
              _Q1.f64[0] = _Q1.f64[0] + v587 * v591;
              _Q2.f64[0] = *((float64_t *)v589 + 2);
              _Q4 = *(_OWORD *)v589;
              *(_QWORD *)&_Q5 = *((_QWORD *)v589 + 5);
              _Q17 = *(float64x2_t *)(v589 + 24);
              v603 = *((double *)v589 + 8);
              _Q19 = *((float64x2_t *)v589 + 3);
              v605 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v594, *(double *)v589), v596, *(float64x2_t *)v589, 1), v600, _Q2.f64[0]);
              __asm { FMLA            D21, D7, V4.D[1] }
              _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
              __asm
              {
                FMLA            D21, D7, V17.D[1]
                FMLA            D3, D7, V19.D[1]
              }
              memptr = v605;
              v1146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v594, _Q17.f64[0]), v596, _Q17, 1), v600, *(double *)&_Q5);
              v1145 = _Q2.f64[0];
              v1147 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
              v1148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v594, _Q19.f64[0]), v596, _Q19, 1), v600, v603);
              v1149 = *(double *)_Q3.i64 + _Q1.f64[0] * v603;
              v1150 = 0uLL;
              v1151 = 0.0;
              sub_239458B60(&memptr, (double *)v1150.i64);
              v608 = v1151;
              _Q1 = v1150;
              v610 = (_QWORD *)(*(_QWORD *)&v211 + 8 * v577);
              *v610 = v1150.i64[0];
              v610[v1065] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
              *(double *)&v610[2 * v1065] = v608;
              _D3 = _Q1.i64[1];
              __asm { FMLA            D2, D3, V1.D[1] }
              v613 = _D2 + v608 * v608;
              v614 = 1.0;
              if (v613 > v578 * v578)
              {
                v615 = sqrt(v613);
                v613 = (v578 + v578) * v615 - v578 * v578;
                v614 = v578 / v615;
              }
              v216 = v216 + v613;
              v580[v577] = v614 * *((double *)v1119 + v577);
              ++v577;
              v581 += 72;
              v576 += 16;
            }
            while (v579 != v577);
          }
          v489 = v996;
          v255 = v999 + 1;
          v251 = *((double *)&v1114 + 1);
          v252 = *(double *)&v1114;
          v256 = sqrt(v527);
          if (v216 <= *(double *)&v1114 || v255 >= v1115 || v256 <= *((double *)&v1114 + 1))
          {
LABEL_478:
            v1092.f64[1] = v216;
            LODWORD(v1090) = v255;
            v1091 = 0;
            if (v216 <= v252)
            {
              v486 = 3;
LABEL_634:
              v1091 = v486;
            }
            else if (v256 <= v251)
            {
              v486 = 2;
              goto LABEL_634;
            }
            free(v1131);
            free(*(void **)&v211);
            free(*(void **)&v210);
            free(v1134);
            free(v1137);
            free(v1143);
            free(v1142);
            free(v1141);
            free(v1140[0]);
            v1181.f64[0] = v1104;
            v1181.f64[1] = v1092.f64[1];
            LODWORD(v1179) = v1090 + LODWORD(v1103.f64[0]);
            v1180 = v1091;
            for (j = v1153; j; j = (uint64_t *)*j)
            {
              v1140[0] = j + 2;
              v868 = sub_2395193BC((uint64_t)&v1116, (unint64_t *)j + 2, (uint64_t)&unk_239EC6E98, (_QWORD **)v1140);
              v869 = (char *)v1122 + 72 * v868[3];
              v870 = *((_QWORD *)v869 + 2);
              v871 = *((_QWORD *)v869 + 5);
              v872 = *(_OWORD *)(v869 + 24);
              v873 = *((_QWORD *)v869 + 8);
              v874 = *((_OWORD *)v869 + 3);
              *(_OWORD *)(j + 3) = *(_OWORD *)v869;
              j[5] = v870;
              *(_OWORD *)(j + 7) = v872;
              j[9] = v871;
              *(_OWORD *)(j + 11) = v874;
              j[13] = v873;
            }
            if ((_QWORD)v1099)
            {
              *((_QWORD *)&v1099 + 1) = v1099;
              operator delete((void *)v1099);
            }
            v40 = v1070;
            if (*((_QWORD *)&v1096 + 1))
            {
              *(_QWORD *)&v1097 = *((_QWORD *)&v1096 + 1);
              operator delete(*((void **)&v1096 + 1));
            }
            if (*((_QWORD *)&v1094 + 1))
            {
              *(_QWORD *)&v1095 = *((_QWORD *)&v1094 + 1);
              operator delete(*((void **)&v1094 + 1));
            }
            if ((_QWORD)v1093)
            {
              *((_QWORD *)&v1093 + 1) = v1093;
              operator delete((void *)v1093);
            }
            if ((v1089 & 0x80000000) == 0)
            {
              if ((v1087 & 0x80000000) == 0)
                goto LABEL_647;
LABEL_660:
              operator delete(v1086[0]);
              v875 = v1111;
              if (!v1111)
                goto LABEL_649;
LABEL_648:
              v1112 = v875;
              operator delete(v875);
              goto LABEL_649;
            }
            operator delete(v1088[0]);
            if (v1087 < 0)
              goto LABEL_660;
LABEL_647:
            v875 = v1111;
            if (v1111)
              goto LABEL_648;
LABEL_649:
            if (v1109)
            {
              v1110 = v1109;
              operator delete(v1109);
            }
            if (v1107)
            {
              v1108 = v1107;
              operator delete(v1107);
            }
            if (v1105)
            {
              v1106 = v1105;
              operator delete(v1105);
            }
            if ((v1102[31] & 0x80000000) != 0)
            {
              operator delete(*(void **)&v1102[8]);
              if ((v1102[7] & 0x80000000) == 0)
                goto LABEL_657;
            }
            else if ((v1102[7] & 0x80000000) == 0)
            {
LABEL_657:
              v876 = (_QWORD *)v1117;
              if (!(_QWORD)v1117)
                goto LABEL_725;
              goto LABEL_664;
            }
            operator delete(*(void **)&v1101.f64[0]);
            v876 = (_QWORD *)v1117;
            if (!(_QWORD)v1117)
              goto LABEL_725;
            do
            {
LABEL_664:
              v877 = (_QWORD *)*v876;
              operator delete(v876);
              v876 = v877;
            }
            while (v877);
            goto LABEL_725;
          }
          goto LABEL_405;
        }
      }
      *(_QWORD *)&v497 = *(_QWORD *)&v494 + 8 * v1046;
      *(_QWORD *)&v496 = *(_QWORD *)&v211 + 8 * v1046;
      do
      {
LABEL_417:
        v502 = **(_QWORD **)&v496;
        *(_QWORD *)&v496 += 8;
        **(_QWORD **)&v497 = v502;
        *(_QWORD *)&v497 += 8;
      }
      while (*(_QWORD *)&v497 != *(_QWORD *)&v494 + 8 * v1029);
      goto LABEL_418;
    }
LABEL_171:
    v11 = 0;
    goto LABEL_745;
  }
  v11 = 0;
  if (v119 != 2)
    goto LABEL_745;
  v120 = v1159;
  v121 = v1158;
  v122 = (int64_t)&v1159[-*(_QWORD *)&v1158];
  if (v1159 == *(char **)&v1158)
    goto LABEL_171;
  v123 = __sz;
  if (!__sz || *((_QWORD *)&v1196 + 1) > 1uLL)
  {
LABEL_170:
    v11 = 0;
    v40 = v1070;
    goto LABEL_745;
  }
  v124 = v122 / 144;
  v125 = v1162;
  v126 = v1161;
  v1129 = 0;
  v1128 = 0;
  v1130 = 0;
  v1010 = v122 / 144;
  if ((unint64_t)(v122 + 143) > 0x11E)
  {
    if (v124 >> 60)
      sub_2394189F8();
    v1128 = operator new(16 * v124);
    v1129 = (char *)v1128;
    v1130 = (char *)v1128 + 16 * v124;
    v1125 = operator new(72 * v124);
    v1126 = (int8x16_t *)v1125;
    v1127 = (int8x16_t *)((char *)v1125 + 72 * v124);
  }
  else
  {
    v1126 = 0;
    v1125 = 0;
    v1127 = 0;
  }
  if (v123 > 0x38E38E38E38E38ELL)
    sub_2394189F8();
  v370 = 72 * v123;
  v371 = operator new(v370);
  v1006 = (v125 - (uint64_t)v126) >> 3;
  v372 = (char *)v371 + v370;
  v1122 = v371;
  v1124 = (char *)v371 + v370;
  do
  {
    *((_QWORD *)v371 + 8) = 0x3FF0000000000000;
    *v371 = xmmword_239F13A00;
    v371[1] = *(_OWORD *)algn_239F13A10;
    v371[2] = xmmword_239F13A20;
    v371[3] = *(_OWORD *)dbl_239F13A30;
    v371 = (_OWORD *)((char *)v371 + 72);
    v370 -= 72;
  }
  while (v370);
  v1123 = v372;
  v1120 = 0;
  v1119 = 0;
  v1121 = 0;
  if (v1010 >> 61)
    sub_2394189F8();
  v373 = (char *)operator new(8 * v1010);
  v374 = &v373[8 * v1010];
  v1119 = v373;
  v1121 = v374;
  memset_pattern16(v373, &unk_239EC6930, 8 * v1010);
  v1120 = v374;
  v1116 = 0u;
  v1117 = 0u;
  v1118 = 1065353216;
  v375 = v1153;
  if (v1153)
  {
    v376 = 0;
    v377 = 0;
    do
    {
      v378 = v375[5];
      v379 = v375[9];
      v380 = *(_OWORD *)(v375 + 7);
      v381 = v375[13];
      v382 = *(_OWORD *)(v375 + 11);
      v383 = (char *)v1122 + v376;
      *(_OWORD *)v383 = *(_OWORD *)(v375 + 3);
      *((_QWORD *)v383 + 2) = v378;
      *(_OWORD *)(v383 + 24) = v380;
      *((_QWORD *)v383 + 5) = v379;
      *((_OWORD *)v383 + 3) = v382;
      *((_QWORD *)v383 + 8) = v381;
      *(_QWORD *)&v1101.f64[0] = v375 + 2;
      sub_2395193BC((uint64_t)&v1116, (unint64_t *)v375 + 2, (uint64_t)&unk_239EC6E98, &v1101)[3] = v377++;
      v375 = (uint64_t *)*v375;
      v376 += 72;
    }
    while (v375);
    v121 = v1158;
    v120 = v1159;
  }
  for (; *(char **)&v121 != v120; *(_QWORD *)&v121 += 144)
  {
    v1101.f64[0] = v121;
    v385 = sub_2395193BC((uint64_t)&v1116, *(unint64_t **)&v121, (uint64_t)&unk_239EC6E98, &v1101)[3];
    *(_QWORD *)&v1101.f64[0] = *(_QWORD *)&v121 + 8;
    v386 = sub_2395193BC((uint64_t)&v1116, (unint64_t *)(*(_QWORD *)&v121 + 8), (uint64_t)&unk_239EC6E98, &v1101)[3];
    v387 = *(_QWORD *)(*(_QWORD *)&v121 + 32);
    v388 = *(int8x16_t *)(*(_QWORD *)&v121 + 16);
    v389 = vextq_s8(v388, v388, 8uLL).u64[0];
    v390 = *(_QWORD *)(*(_QWORD *)&v121 + 64);
    v391 = *(int8x16_t *)(*(_QWORD *)&v121 + 48);
    v392 = vextq_s8(v391, v391, 8uLL).u64[0];
    v393 = *(_QWORD *)(*(_QWORD *)&v121 + 96);
    v394 = *(int8x16_t *)(*(_QWORD *)&v121 + 80);
    v395 = vextq_s8(v394, v394, 8uLL).u64[0];
    v396 = v1126;
    if (v1126 >= v1127)
    {
      v398 = (int8x16_t *)v1125;
      v399 = 0x8E38E38E38E38E39 * (((char *)v1126 - (_BYTE *)v1125) >> 3);
      v400 = v399 + 1;
      if (v399 + 1 > 0x38E38E38E38E38ELL)
        sub_2394189F8();
      if (0x1C71C71C71C71C72 * (((char *)v1127 - (_BYTE *)v1125) >> 3) > v400)
        v400 = 0x1C71C71C71C71C72 * (((char *)v1127 - (_BYTE *)v1125) >> 3);
      if (0x8E38E38E38E38E39 * (((char *)v1127 - (_BYTE *)v1125) >> 3) >= 0x1C71C71C71C71C7)
        v401 = 0x38E38E38E38E38ELL;
      else
        v401 = v400;
      if (v401)
      {
        v1017 = *(_QWORD *)(*(_QWORD *)&v121 + 32);
        v1021 = v389;
        sizec = *(_QWORD *)(*(_QWORD *)&v121 + 64);
        v1032 = *(_OWORD *)(*(_QWORD *)&v121 + 16);
        v1036 = v392;
        v1044 = *(_QWORD *)(*(_QWORD *)&v121 + 96);
        v1055 = *(_OWORD *)(*(_QWORD *)&v121 + 48);
        v1062 = v395;
        v1068 = *(_OWORD *)(*(_QWORD *)&v121 + 80);
        if (v401 > 0x38E38E38E38E38ELL)
          sub_239418A80();
        v402 = (char *)operator new(72 * v401);
        v395 = v1062;
        v394.i64[0] = v1068;
        v393 = v1044;
        v391.i64[0] = v1055;
        v388.i64[0] = v1032;
        v392 = v1036;
        v389 = v1021;
        v390 = sizec;
        v387 = v1017;
      }
      else
      {
        v402 = 0;
      }
      v403 = &v402[72 * v399];
      *((_QWORD *)v403 + 2) = v387;
      v388.i64[1] = v389;
      *(int8x16_t *)v403 = v388;
      *((_QWORD *)v403 + 5) = v390;
      v391.i64[1] = v392;
      *(int8x16_t *)(v403 + 24) = v391;
      *((_QWORD *)v403 + 8) = v393;
      v394.i64[1] = v395;
      *((int8x16_t *)v403 + 3) = v394;
      v404 = v403;
      if (v396 != v398)
      {
        do
        {
          *(int8x16_t *)(v404 - 72) = *(int8x16_t *)((char *)v396 - 72);
          v405 = *(__int128 *)((char *)&v396[-4] + 8);
          v406 = *(__int128 *)((char *)&v396[-3] + 8);
          v407 = *(__int128 *)((char *)&v396[-2] + 8);
          *((_QWORD *)v404 - 1) = v396[-1].i64[1];
          *(_OWORD *)(v404 - 24) = v407;
          *(_OWORD *)(v404 - 40) = v406;
          *(_OWORD *)(v404 - 56) = v405;
          v404 -= 72;
          v396 = (int8x16_t *)((char *)v396 - 72);
        }
        while (v396 != v398);
        v396 = v398;
      }
      v408 = &v402[72 * v401];
      v397 = v403 + 72;
      v1125 = v404;
      v1127 = (int8x16_t *)v408;
      if (v396)
        operator delete(v396);
    }
    else
    {
      v1126[1].i64[0] = v387;
      v388.i64[1] = v389;
      *v396 = v388;
      v396[2].i64[1] = v390;
      v391.i64[1] = v392;
      *(int8x16_t *)((char *)v396 + 24) = v391;
      v396[4].i64[0] = v393;
      v394.i64[1] = v395;
      v396[3] = v394;
      v397 = &v396[4].i8[8];
    }
    v1126 = (int8x16_t *)v397;
    v409 = v1129;
    if (v1129 < v1130)
    {
      *(_QWORD *)v1129 = v385;
      v409[1] = v386;
      v384 = (char *)(v409 + 2);
    }
    else
    {
      v410 = v1128;
      v411 = (v1129 - (_BYTE *)v1128) >> 4;
      v412 = v411 + 1;
      if ((unint64_t)(v411 + 1) >> 60)
        sub_2394189F8();
      v413 = v1130 - (_BYTE *)v1128;
      if ((v1130 - (_BYTE *)v1128) >> 3 > v412)
        v412 = v413 >> 3;
      if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFF0)
        v414 = 0xFFFFFFFFFFFFFFFLL;
      else
        v414 = v412;
      if (v414)
      {
        if (v414 >> 60)
          sub_239418A80();
        v415 = (char *)operator new(16 * v414);
      }
      else
      {
        v415 = 0;
      }
      v416 = &v415[16 * v411];
      *(_QWORD *)v416 = v385;
      *((_QWORD *)v416 + 1) = v386;
      v417 = v416;
      if (v409 != v410)
      {
        do
        {
          *((_OWORD *)v417 - 1) = *((_OWORD *)v409 - 1);
          v417 -= 16;
          v409 -= 2;
        }
        while (v409 != v410);
        v409 = v1128;
      }
      v384 = v416 + 16;
      v1128 = v417;
      v1129 = v416 + 16;
      v1130 = &v415[16 * v414];
      if (v409)
        operator delete(v409);
    }
    v1129 = v384;
  }
  v418 = v1010;
  if (v1006 == v1010)
  {
    v419 = 0;
    v420 = v1161;
    v421 = (char *)v1119;
    if (v1010 <= 1)
      v418 = 1;
    if (v418 < 4)
      goto LABEL_381;
    if ((unint64_t)((_BYTE *)v1119 - (_BYTE *)v1161) <= 0x1F)
      goto LABEL_381;
    v419 = v418 & 0xFFFFFFFFFFFFFFFCLL;
    v422 = (float64x2_t *)((char *)v1119 + 16);
    v423 = v1161 + 1;
    v424 = v418 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v425 = vsqrtq_f64(*v423);
      v422[-1] = vsqrtq_f64(v423[-1]);
      *v422 = v425;
      v422 += 2;
      v423 += 2;
      v424 -= 4;
    }
    while (v424);
    if (v418 != v419)
    {
LABEL_381:
      v426 = v418 - v419;
      v427 = v419;
      v428 = (double *)&v421[v427 * 8];
      v429 = &v420->f64[v427];
      do
      {
        v430 = *v429++;
        *v428++ = sqrt(v430);
        --v426;
      }
      while (v426);
    }
  }
  v1114 = xmmword_239F0C480;
  v431 = *(double *)&v1191 * 0.05;
  v1113 = *(double *)&v1191 * 0.05;
  v1115 = 5;
  sub_239C60CE8((uint64_t)&v1101, (uint64_t)&v1113, (uint64_t *)&v1125, &v1119, (uint64_t *)&v1128, (uint64_t *)&v1122);
  v1115 = (int)v1190;
  v1087 = 7;
  strcpy((char *)v1086, "NOT SET");
  v1089 = 7;
  strcpy((char *)v1088, "NOT SET");
  v1090 = 0;
  v1091 = 0;
  v1092 = v1008;
  v1093 = 0u;
  v1094 = 0u;
  v1095 = 0u;
  v1096 = 0u;
  v1097 = 0u;
  v1098 = 0u;
  v1099 = 0u;
  v1100 = 0;
  v432 = (char *)v1122;
  v433 = 954437177 * ((v1123 - (_BYTE *)v1122) >> 3);
  v434 = (char *)v1126;
  v435 = (char *)v1125;
  sub_239DF6044((uint64_t)v1140, v433);
  v436 = 0x8E38E38E38E38E39 * ((v434 - v435) >> 3);
  v1069 = 954437177 * ((v434 - v435) >> 3);
  v437 = (8 * v1069 + 31) & 0xFFFFFFFE0;
  v1138 = v437 >> 3;
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v437, 0x100BBD03uLL);
  v1137 = *(void **)&memptr.f64[0];
  v1045 = memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v959 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v960 = std::bad_alloc::bad_alloc(v959);
    __cxa_throw(v960, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v1139 = 954437177 * ((v434 - v435) >> 3);
  v438 = (8 * v433 + 31) & 0xFFFFFFFE0;
  v1135 = v438 >> 3;
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v438, 0x100BBD03uLL);
  v1134 = *(void **)&memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v965 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v966 = std::bad_alloc::bad_alloc(v965);
    __cxa_throw(v966, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v1136 = v433;
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (24 * v433 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v439 = memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v971 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v972 = std::bad_alloc::bad_alloc(v971);
    __cxa_throw(v972, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  sized = -1431655765 * ((v434 - v435) >> 3);
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (8 * sized + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v440 = memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v977 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v978 = std::bad_alloc::bad_alloc(v977);
    __cxa_throw(v978, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v1132 = v438 >> 3;
  memptr.f64[0] = 0.0;
  v1056 = v440;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v438, 0x100BBD03uLL);
  v995 = 3 * v433;
  v1131 = *(void **)&memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v983 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v984 = std::bad_alloc::bad_alloc(v983);
    __cxa_throw(v984, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v1133 = v433;
  if (v1129 == v1128)
  {
    v1092 = 0uLL;
    v488 = 3;
    LODWORD(v1090) = 0;
    v1091 = 0;
    goto LABEL_700;
  }
  v992 = v436;
  v441 = 0;
  v442 = 0;
  v443 = v431 * v431;
  v444 = (v1129 - (_BYTE *)v1128) >> 4;
  if (v444 <= 1)
    v444 = 1;
  v1037 = v444;
  v445 = v435 + 24;
  v446 = 0.0;
  do
  {
    v447 = &v432[72 * *(_QWORD *)((char *)v1128 + v441 + 8)];
    _Q1.f64[0] = *((float64_t *)v447 + 2);
    v449 = *(int64x2_t *)v447;
    v450 = (float64_t *)(v447 + 40);
    _Q3 = *(int64x2_t *)(v447 + 24);
    v452 = *((double *)v447 + 8);
    _Q5 = *((_OWORD *)v447 + 3);
    v454 = &v432[72 * *(_QWORD *)((char *)v1128 + v441)];
    v455 = *((double *)v445 + 2);
    v456 = *((double *)v445 + 5);
    v457 = (float64x2_t)vzip1q_s64(v449, _Q3);
    _Q2 = (float64x2_t)vzip2q_s64(v449, _Q3);
    _Q1.f64[1] = *v450;
    v459 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v457, *((double *)v445 - 3)), _Q2, *(float64x2_t *)(v445 - 24), 1), _Q1, *((double *)v445 - 1));
    _D7 = *((_QWORD *)v445 - 2);
    __asm { FMLA            D3, D7, V5.D[1] }
    v461 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v457, *(double *)v445), _Q2, *(float64x2_t *)v445, 1), _Q1, v455);
    _D17 = *((_QWORD *)v445 + 1);
    __asm { FMLA            D7, D17, V5.D[1] }
    _D7 = _D7 + v452 * v455;
    v465 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v457, *((double *)v445 + 3)), _Q2, *(float64x2_t *)(v445 + 24), 1), _Q1, v456);
    _Q2.f64[0] = *((float64_t *)v445 + 4);
    __asm { FMLA            D1, D2, V5.D[1] }
    _Q1.f64[0] = _Q1.f64[0] + v452 * v456;
    _Q2.f64[0] = *((float64_t *)v454 + 2);
    _Q4 = *(_OWORD *)v454;
    *(_QWORD *)&_Q5 = *((_QWORD *)v454 + 5);
    _Q17 = *(float64x2_t *)(v454 + 24);
    v468 = *((double *)v454 + 8);
    _Q19 = *((float64x2_t *)v454 + 3);
    v470 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v459, *(double *)v454), v461, *(float64x2_t *)v454, 1), v465, _Q2.f64[0]);
    __asm { FMLA            D21, D7, V4.D[1] }
    _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
    __asm
    {
      FMLA            D21, D7, V17.D[1]
      FMLA            D3, D7, V19.D[1]
    }
    memptr = v470;
    v1146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v459, _Q17.f64[0]), v461, _Q17, 1), v465, *(double *)&_Q5);
    v1145 = _Q2.f64[0];
    v1147 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
    v1148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v459, _Q19.f64[0]), v461, _Q19, 1), v465, v468);
    v1149 = *(double *)_Q3.i64 + _Q1.f64[0] * v468;
    v1150 = 0uLL;
    v1151 = 0.0;
    sub_239458B60(&memptr, (double *)v1150.i64);
    v473 = v1151;
    _Q1 = v1150;
    v475 = (8 * v442) & 0x7FFFFFFF8;
    *(_QWORD *)(*(_QWORD *)&v440 + v475) = v1150.i64[0];
    *(_QWORD *)(*(_QWORD *)&v440 + v475 + 8 * v1069) = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
    *(double *)(*(_QWORD *)&v440 + v475 + 16 * v1069) = v473;
    _D3 = _Q1.i64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    v478 = 1.0 / v443 * (_D2 + v473 * v473);
    v479 = v478 + 1.0;
    v446 = v446 + v443 * log1p(v478);
    *(long double *)(*(_QWORD *)&v1045 + v475) = *((double *)v1119 + v442++) * (1.0 / v479);
    v445 += 72;
    v441 += 16;
  }
  while (v1037 != v442);
  v480 = *((double *)&v1114 + 1);
  v481 = *(double *)&v1114;
  v1092.f64[0] = v446;
  if (v446 <= *(double *)&v1114 || v1115 == 0 || *((double *)&v1114 + 1) >= 1.79769313e308)
  {
    LODWORD(v484) = 0;
    v485 = 1.79769313e308;
    goto LABEL_630;
  }
  v484 = 0;
  v739 = 3 * v433;
  v986 = (v995 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  v1048 = (sized - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v1040 = (v1048 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v1002 = (_QWORD *)(*(_QWORD *)&v440 + 8 * v1040);
  v1013 = (__int128 *)(*(_QWORD *)&v440 + 16);
  v991 = v433;
  v985 = (v986 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  while (2)
  {
    v998 = v484;
    v740 = 0;
    v741 = 0;
    v742 = (8 * sized + 31) & 0xFFFFFFFE0;
    while (2)
    {
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v742, 0x100BBD03uLL);
      v744 = memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v941 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v942 = std::bad_alloc::bad_alloc(v941);
        __cxa_throw(v942, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v745.i64[0] = 0xFFFFFFFFLL;
      v745.i64[1] = 0xFFFFFFFFLL;
      if (v992)
      {
        v746 = v440;
        v747 = memptr.f64[0];
        if (v1048 < 3 || (v746 = v440, v747 = memptr.f64[0], *(_QWORD *)&memptr.f64[0] - *(_QWORD *)&v440 < 0x20uLL))
        {
          do
          {
LABEL_570:
            v752 = **(_QWORD **)&v746;
            *(_QWORD *)&v746 += 8;
            **(_QWORD **)&v747 = v752;
            *(_QWORD *)&v747 += 8;
          }
          while (*(_QWORD *)&v747 != *(_QWORD *)&v744 + 8 * sized);
        }
        else
        {
          v748 = (_OWORD *)(*(_QWORD *)&memptr.f64[0] + 16);
          v749 = v1013;
          v750 = (v1048 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v751 = *v749;
            *(v748 - 1) = *(v749 - 1);
            *v748 = v751;
            v748 += 2;
            v749 += 2;
            v750 -= 4;
          }
          while (v750);
          if (v1048 + 1 != v1040)
          {
            *(_QWORD *)&v747 = *(_QWORD *)&v744 + 8 * v1040;
            v746 = *(double *)&v1002;
            goto LABEL_570;
          }
        }
      }
      if (v1136)
      {
        bzero(v1134, 8 * v1136);
        v745.i64[0] = 0xFFFFFFFFLL;
        v745.i64[1] = 0xFFFFFFFFLL;
      }
      v753 = (int8x16_t *)v1128;
      if (v1129 != v1128)
      {
        v754 = 0;
        v755 = (v1129 - (_BYTE *)v1128) >> 4;
        v756 = (double *)v1137;
        v757 = (double *)v1134;
        if (v755 <= 1)
          v755 = 1;
        do
        {
          v758 = *(double *)(*(_QWORD *)&v744 + 8 * (v740 + v754)) * v756[v754];
          v759 = vandq_s8(v753[v754], v745);
          v757[v759.i64[0]] = v757[v759.i64[0]] - v758;
          v757[v759.i64[1]] = v758 + v757[v759.i64[1]];
          ++v754;
        }
        while (v755 != v754);
      }
      free(*(void **)&v744);
      sub_239DF6208((uint64_t)v1140, (uint64_t *)&v1128, (uint64_t *)&v1137, (uint64_t)&v1134, (uint64_t)&v1131);
      v760 = (uint64_t *)v1131;
      if (v1131 == *(void **)&v439)
      {
        v764 = v1133;
        v765 = (8 * v1133 + 31) & 0xFFFFFFFE0;
        memptr.f64[0] = 0.0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v765, 0x100BBD03uLL);
        v743 = memptr.f64[0];
        if (!*(_QWORD *)&memptr.f64[0])
        {
          v947 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v948 = std::bad_alloc::bad_alloc(v947);
          __cxa_throw(v948, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if (!(_DWORD)v764)
        {
          free(*(void **)&memptr.f64[0]);
          v743 = 0.0;
LABEL_560:
          free(*(void **)&v743);
          v742 = (8 * sized + 31) & 0xFFFFFFFE0;
          goto LABEL_561;
        }
        if (v765 >> 3 < v764)
        {
          free(*(void **)&memptr.f64[0]);
          memptr.f64[0] = 0.0;
          malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v765, 0x100BBD03uLL);
          v743 = memptr.f64[0];
          if (!*(_QWORD *)&memptr.f64[0])
          {
            v953 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v954 = std::bad_alloc::bad_alloc(v953);
            __cxa_throw(v954, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
        }
        v766 = (v764 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v767 = v439;
        v768 = v743;
        if (v766 >= 3)
        {
          v767 = v439;
          v768 = v743;
          if (*(_QWORD *)&v743 - *(_QWORD *)&v439 > 0x1FuLL)
          {
            v769 = (v766 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            *(_QWORD *)&v767 = *(_QWORD *)&v439 + 8 * v769;
            v770 = (_OWORD *)(*(_QWORD *)&v743 + 16);
            v771 = (__int128 *)(*(_QWORD *)&v439 + 16);
            v772 = v769;
            do
            {
              v773 = *v771;
              *(v770 - 1) = *(v771 - 1);
              *v770 = v773;
              v770 += 2;
              v771 += 2;
              v772 -= 4;
            }
            while (v772);
            if (v766 + 1 == v769)
              goto LABEL_597;
            *(_QWORD *)&v768 = *(_QWORD *)&v743 + 8 * v769;
          }
        }
        do
        {
          v774 = **(_QWORD **)&v767;
          *(_QWORD *)&v767 += 8;
          **(_QWORD **)&v768 = v774;
          *(_QWORD *)&v768 += 8;
        }
        while (*(_QWORD *)&v768 != *(_QWORD *)&v743 + 8 * v764);
LABEL_597:
        v775 = 0;
        v776 = v741;
        do
        {
          *(_QWORD *)(*(_QWORD *)&v439 + 8 * v776) = *(_QWORD *)(*(_QWORD *)&v743 + 8 * v775++);
          v776 += 3;
        }
        while (v764 != v775);
        goto LABEL_560;
      }
      if (v433)
        v761 = (_QWORD *)(*(_QWORD *)&v439 + 8 * v741);
      else
        v761 = 0;
      v762 = *(_QWORD *)&v439 + 8 * v741 + 8 * v739;
      if (!v433)
        v762 = 0;
      for (; v761 != (_QWORD *)v762; v761 += 3)
      {
        v763 = *v760++;
        *v761 = v763;
      }
LABEL_561:
      ++v741;
      v740 += v992;
      if (v741 != 3)
        continue;
      break;
    }
    if (v433)
    {
      v777 = **(double **)&v439 * **(double **)&v439;
      v778 = objc_release_x28;
      if ((_DWORD)v739 != 1)
      {
        if (v986 < 3)
        {
          v779 = (double *)(*(_QWORD *)&v439 + 8);
          goto LABEL_609;
        }
        v780 = (float64x2_t *)(*(_QWORD *)&v439 + 24);
        v781 = (v986 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v782 = vmulq_f64(v780[-1], v780[-1]);
          v783 = vmulq_f64(*v780, *v780);
          v777 = v777 + v782.f64[0] + v782.f64[1] + v783.f64[0] + v783.f64[1];
          v780 += 2;
          v781 -= 4;
        }
        while (v781);
        v779 = (double *)(*(_QWORD *)&v439 + 8 + 8 * v985);
        if (v986 + 1 != v985)
        {
          do
          {
LABEL_609:
            v784 = *v779++;
            v777 = v777 + v784 * v784;
          }
          while (v779 != (double *)(*(_QWORD *)&v439 + 8 * v995));
        }
      }
    }
    else
    {
      v777 = 0.0;
      v778 = objc_release_x28;
    }
    v785 = (char *)v1122;
    if (v1123 != v1122)
    {
      v786 = 0;
      if ((unint64_t)((v1123 - (_BYTE *)v1122) / 72) <= 1)
        v787 = 1;
      else
        v787 = (v1123 - (_BYTE *)v1122) / 72;
      v788 = (char *)v1122 + 24;
      do
      {
        v821 = *(_QWORD *)&v439 + 8 * v786;
        v822 = *(double *)(v821 + 16);
        _Q7 = *(_OWORD *)v821;
        _D13 = *(double *)(v821 + 8);
        __asm { FMLA            D0, D13, V7.D[1] }
        v825 = _D0 + v822 * v822;
        if (v825 >= *((double *)v778 + 223))
        {
          v789 = sqrt(v825);
          v1033 = *(_OWORD *)v821;
          v791 = __sincos_stret(v789);
          v790 = v791.__cosval;
          *(_QWORD *)&_Q7 = v1033;
          v793 = v791.__sinval / v789;
          v794 = 1.0 / v825 * (1.0 - v791.__cosval);
        }
        else
        {
          v794 = 0.5 - v825 * (v825 / -720.0 + 0.0416666667);
          v793 = 1.0 - v825 * (0.166666667 - v825 * (v825 / -5040.0 + 0.00833333333));
          v790 = 1.0 - v825 * v794;
        }
        v795 = v794 * *(double *)&_Q7;
        v796 = v794 * _D13;
        v797 = v790 + v794 * *(double *)&_Q7 * *(double *)&_Q7;
        v798 = v790 + v794 * _D13 * _D13;
        v799 = v790 + v794 * v822 * v822;
        v800 = v794 * *(double *)&_Q7 * _D13;
        v801 = v795 * v822;
        v802 = v796 * v822;
        v803 = v793 * *(double *)&_Q7;
        v804 = v793 * _D13;
        v805 = v793 * v822;
        v806 = v800 - v805;
        v807 = v804 + v801;
        v808 = v800 + v805;
        v809 = v802 - v803;
        v810 = v801 - v804;
        v811 = v803 + v802;
        v812 = *((double *)v788 - 1);
        v813 = *(float64x2_t *)(v788 - 24);
        v814 = *((double *)v788 + 2);
        v815 = *((double *)v788 + 5);
        v816 = *(float64x2_t *)(v788 + 24);
        v817 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v813, v797), *(float64x2_t *)v788, v808), v816, v810);
        v818 = v812 * v797 + v814 * v808 + v815 * v810;
        v819 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v813, v806), *(float64x2_t *)v788, v798), v816, v811);
        v820 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v813, v807), *(float64x2_t *)v788, v809), v816, v799);
        *((double *)v788 - 1) = v818;
        *(float64x2_t *)(v788 - 24) = v817;
        *((double *)v788 + 2) = v812 * v806 + v814 * v798 + v815 * v811;
        *(float64x2_t *)v788 = v819;
        *((double *)v788 + 5) = v812 * v807 + v814 * v809 + v815 * v799;
        *(float64x2_t *)(v788 + 24) = v820;
        v788 += 72;
        v786 += 3;
        --v787;
      }
      while (v787);
    }
    if (v1129 == v1128)
    {
      v446 = 0.0;
    }
    else
    {
      v826 = 0;
      v827 = 0;
      v828 = v1113 * v1113;
      v829 = 1.0 / (v1113 * v1113);
      if ((unint64_t)((v1129 - (_BYTE *)v1128) >> 4) <= 1)
        v830 = 1;
      else
        v830 = (v1129 - (_BYTE *)v1128) >> 4;
      v831 = (char *)v1137;
      v832 = (char *)v1125 + 24;
      v446 = 0.0;
      do
      {
        v833 = &v785[72 * *(_QWORD *)((char *)v1128 + v826 + 8)];
        _Q1.f64[0] = *((float64_t *)v833 + 2);
        v835 = *(int64x2_t *)v833;
        v836 = (float64_t *)(v833 + 40);
        _Q3 = *(int64x2_t *)(v833 + 24);
        v838 = *((double *)v833 + 8);
        _Q5 = *((_OWORD *)v833 + 3);
        v840 = &v785[72 * *(_QWORD *)((char *)v1128 + v826)];
        v841 = *((double *)v832 + 2);
        v842 = *((double *)v832 + 5);
        v843 = (float64x2_t)vzip1q_s64(v835, _Q3);
        _Q2 = (float64x2_t)vzip2q_s64(v835, _Q3);
        _Q1.f64[1] = *v836;
        v845 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v843, *((double *)v832 - 3)), _Q2, *(float64x2_t *)(v832 - 24), 1), _Q1, *((double *)v832 - 1));
        _D7 = *((_QWORD *)v832 - 2);
        __asm { FMLA            D3, D7, V5.D[1] }
        v847 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v843, *(double *)v832), _Q2, *(float64x2_t *)v832, 1), _Q1, v841);
        _D17 = *((_QWORD *)v832 + 1);
        __asm { FMLA            D7, D17, V5.D[1] }
        _D7 = _D7 + v838 * v841;
        v851 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v843, *((double *)v832 + 3)), _Q2, *(float64x2_t *)(v832 + 24), 1), _Q1, v842);
        _Q2.f64[0] = *((float64_t *)v832 + 4);
        __asm { FMLA            D1, D2, V5.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v838 * v842;
        _Q2.f64[0] = *((float64_t *)v840 + 2);
        _Q4 = *(_OWORD *)v840;
        *(_QWORD *)&_Q5 = *((_QWORD *)v840 + 5);
        _Q17 = *(float64x2_t *)(v840 + 24);
        v854 = *((double *)v840 + 8);
        _Q19 = *((float64x2_t *)v840 + 3);
        v856 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v845, *(double *)v840), v847, *(float64x2_t *)v840, 1), v851, _Q2.f64[0]);
        __asm { FMLA            D21, D7, V4.D[1] }
        _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
        __asm
        {
          FMLA            D21, D7, V17.D[1]
          FMLA            D3, D7, V19.D[1]
        }
        memptr = v856;
        v1146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v845, _Q17.f64[0]), v847, _Q17, 1), v851, *(double *)&_Q5);
        v1145 = _Q2.f64[0];
        v1147 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
        v1148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v845, _Q19.f64[0]), v847, _Q19, 1), v851, v854);
        v1149 = *(double *)_Q3.i64 + _Q1.f64[0] * v854;
        v1150 = 0uLL;
        v1151 = 0.0;
        sub_239458B60(&memptr, (double *)v1150.i64);
        v859 = v1151;
        _Q1 = v1150;
        v861 = (8 * v827) & 0x7FFFFFFF8;
        v862 = (_QWORD *)(*(_QWORD *)&v1056 + v861);
        *v862 = v1150.i64[0];
        v862[v1069] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
        *(double *)&v862[2 * v1069] = v859;
        _D3 = _Q1.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v865 = v829 * (_D2 + v859 * v859);
        v866 = v865 + 1.0;
        v446 = v446 + v828 * log1p(v865);
        *(long double *)&v831[v861] = *((double *)v1119 + v827++) * (1.0 / v866);
        v832 += 72;
        v826 += 16;
      }
      while (v830 != v827);
    }
    v739 = v995;
    v484 = v998 + 1;
    v480 = *((double *)&v1114 + 1);
    v481 = *(double *)&v1114;
    v485 = sqrt(v777);
    v440 = v1056;
    v433 = v991;
    if (v446 > *(double *)&v1114 && v484 < v1115 && v485 > *((double *)&v1114 + 1))
      continue;
    break;
  }
LABEL_630:
  v1092.f64[1] = v446;
  LODWORD(v1090) = v484;
  v1091 = 0;
  if (v446 <= v481)
  {
    v488 = 3;
LABEL_700:
    v1091 = v488;
  }
  else if (v485 <= v480)
  {
    v488 = 2;
    goto LABEL_700;
  }
  free(v1131);
  free(*(void **)&v440);
  free(*(void **)&v439);
  free(v1134);
  free(v1137);
  free(v1143);
  free(v1142);
  free(v1141);
  free(v1140[0]);
  v1181.f64[0] = v1104;
  v1181.f64[1] = v1092.f64[1];
  LODWORD(v1179) = v1090 + LODWORD(v1103.f64[0]);
  v1180 = v1091;
  for (k = v1153; k; k = (uint64_t *)*k)
  {
    v1140[0] = k + 2;
    v890 = sub_2395193BC((uint64_t)&v1116, (unint64_t *)k + 2, (uint64_t)&unk_239EC6E98, (_QWORD **)v1140);
    v891 = (char *)v1122 + 72 * v890[3];
    v892 = *((_QWORD *)v891 + 2);
    v893 = *((_QWORD *)v891 + 5);
    v894 = *(_OWORD *)(v891 + 24);
    v895 = *((_QWORD *)v891 + 8);
    v896 = *((_OWORD *)v891 + 3);
    *(_OWORD *)(k + 3) = *(_OWORD *)v891;
    k[5] = v892;
    *(_OWORD *)(k + 7) = v894;
    k[9] = v893;
    *(_OWORD *)(k + 11) = v896;
    k[13] = v895;
  }
  if ((_QWORD)v1099)
  {
    *((_QWORD *)&v1099 + 1) = v1099;
    operator delete((void *)v1099);
  }
  v40 = v1070;
  if (*((_QWORD *)&v1096 + 1))
  {
    *(_QWORD *)&v1097 = *((_QWORD *)&v1096 + 1);
    operator delete(*((void **)&v1096 + 1));
  }
  if (*((_QWORD *)&v1094 + 1))
  {
    *(_QWORD *)&v1095 = *((_QWORD *)&v1094 + 1);
    operator delete(*((void **)&v1094 + 1));
  }
  if ((_QWORD)v1093)
  {
    *((_QWORD *)&v1093 + 1) = v1093;
    operator delete((void *)v1093);
  }
  if ((v1089 & 0x80000000) == 0)
  {
    if ((v1087 & 0x80000000) == 0)
      goto LABEL_713;
LABEL_757:
    operator delete(v1086[0]);
    v897 = v1111;
    if (!v1111)
      goto LABEL_715;
LABEL_714:
    v1112 = v897;
    operator delete(v897);
    goto LABEL_715;
  }
  operator delete(v1088[0]);
  if (v1087 < 0)
    goto LABEL_757;
LABEL_713:
  v897 = v1111;
  if (v1111)
    goto LABEL_714;
LABEL_715:
  if (v1109)
  {
    v1110 = v1109;
    operator delete(v1109);
  }
  if (v1107)
  {
    v1108 = v1107;
    operator delete(v1107);
  }
  if (v1105)
  {
    v1106 = v1105;
    operator delete(v1105);
  }
  if ((v1102[31] & 0x80000000) == 0)
  {
    if ((v1102[7] & 0x80000000) == 0)
      goto LABEL_723;
LABEL_760:
    operator delete(*(void **)&v1101.f64[0]);
    v898 = (_QWORD *)v1117;
    if (!(_QWORD)v1117)
      goto LABEL_725;
    do
    {
LABEL_724:
      v899 = (_QWORD *)*v898;
      operator delete(v898);
      v898 = v899;
    }
    while (v899);
    goto LABEL_725;
  }
  operator delete(*(void **)&v1102[8]);
  if ((v1102[7] & 0x80000000) != 0)
    goto LABEL_760;
LABEL_723:
  v898 = (_QWORD *)v1117;
  if ((_QWORD)v1117)
    goto LABEL_724;
LABEL_725:
  v900 = (void *)v1116;
  *(_QWORD *)&v1116 = 0;
  if (v900)
    operator delete(v900);
  if (v1119)
    operator delete(v1119);
  if (v1122)
    operator delete(v1122);
  if (v1125)
    operator delete(v1125);
  if (v1128)
  {
    v1129 = (char *)v1128;
    operator delete(v1128);
  }
  v901 = v1153;
  if (v1153)
  {
    do
    {
      v902 = sub_239BF5CF4(a1, v901[2]);
      v903.i64[0] = v901[5];
      v904 = *(float64x2_t *)(v901 + 3);
      v905 = vextq_s8((int8x16_t)v904, (int8x16_t)v904, 8uLL).u64[0];
      v906 = *((double *)v901 + 9);
      v907 = *(float64x2_t *)(v901 + 7);
      v908.i64[0] = vextq_s8((int8x16_t)v907, (int8x16_t)v907, 8uLL).u64[0];
      v909 = *((double *)v901 + 13);
      _Q3 = *(float64x2_t *)(v901 + 11);
      *(_QWORD *)&v911 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
      v1101 = v904;
      *(float64x2_t *)&v1102[8] = v907;
      *(_QWORD *)v1102 = v903.i64[0];
      *(double *)&v1102[24] = v906;
      v1103 = _Q3;
      v1104 = v909;
      v912 = (float64x2_t)vzip1q_s64((int64x2_t)v904, (int64x2_t)v907);
      v913 = (float64x2_t)vzip2q_s64((int64x2_t)v904, (int64x2_t)v907);
      *(_QWORD *)&v914.f64[0] = v903.i64[0];
      v914.f64[1] = v906;
      v915 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, v904.f64[0]), v913, v904, 1), v914, *(double *)v903.i64);
      _Q21 = (int64x2_t)vmulq_f64(_Q3, v904);
      _D22 = v904.f64[1];
      __asm { FMLA            D21, D22, V3.D[1] }
      _D22 = _Q3.f64[1];
      *(double *)_Q21.i64 = *(double *)_Q21.i64 + v909 * *(double *)v903.i64;
      v919 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, v907.f64[0]), v913, v907, 1), v914, v906);
      _Q24 = (int8x16_t)vmulq_f64(_Q3, v907);
      _D25 = v907.f64[1];
      __asm { FMLA            D24, D25, V3.D[1] }
      *(double *)_Q24.i64 = *(double *)_Q24.i64 + v909 * v906;
      v922 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v912, _Q3.f64[0]), v913, _Q3, 1), v914, v909);
      _Q19 = vmulq_f64(_Q3, _Q3);
      __asm { FMLA            D19, D22, V3.D[1] }
      _Q19.f64[0] = _Q19.f64[0] + v909 * v909;
      v924 = (int64x2_t)vaddq_f64(v919, (float64x2_t)xmmword_239EC6830);
      *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, v1008));
      _Q19.f64[1] = NAN;
      v925 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v915, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v924, _Q24, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v924)), vabsq_f64(v922))));
      v926 = -v906;
      if (v925 > 0.0001
        || (v927.f64[0] = v904.f64[0],
            *(_QWORD *)&v927.f64[1] = v905,
            v928.f64[0] = v911,
            v928.f64[1] = _Q3.f64[0],
            *(_QWORD *)&v929.f64[0] = v908.i64[0],
            v929.f64[1] = v907.f64[0],
            v930 = vmulq_f64(v927, vmlaq_n_f64(vmulq_n_f64(v928, v926), v929, v909)),
            fabs(*(double *)v903.i64 * (v911 * v907.f64[0] - *(double *)v908.i64 * _Q3.f64[0])+ vsubq_f64(v930, (float64x2_t)vdupq_laneq_s64((int64x2_t)v930, 1)).f64[0]+ -1.0) > 0.0001))
      {
        if (v925 > 0.1
          || (*(_QWORD *)&v904.f64[1] = v905,
              v931.f64[0] = v911,
              v931.f64[1] = _Q3.f64[0],
              *(_QWORD *)&v932.f64[0] = v908.i64[0],
              v932.f64[1] = v907.f64[0],
              v933 = vmulq_f64(v904, vmlaq_n_f64(vmulq_n_f64(v931, v926), v932, v909)),
              fabs(*(double *)v903.i64 * (v911 * v907.f64[0] - *(double *)v908.i64 * _Q3.f64[0])+ vsubq_f64(v933, (float64x2_t)vdupq_laneq_s64((int64x2_t)v933, 1)).f64[0]+ -1.0) > 0.1))
        {
          sub_239A444D4((uint64_t)"unknown file", 36, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        sub_239516070(&v1101);
        v909 = v1104;
        _Q3 = v1103;
        v908 = *(int8x16_t *)&v1102[16];
        v903 = *(int8x16_t *)v1102;
        v904 = v1101;
        *(_QWORD *)&v911 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
        *(_QWORD *)&v906 = vextq_s8(v908, v908, 8uLL).u64[0];
        *(_QWORD *)&v907.f64[0] = vextq_s8(v903, v903, 8uLL).u64[0];
        v905 = vextq_s8((int8x16_t)v904, (int8x16_t)v904, 8uLL).u64[0];
      }
      *(_QWORD *)&v904.f64[1] = v905;
      *(_QWORD *)&v907.f64[1] = v908.i64[0];
      _Q3.f64[1] = v911;
      v902[10] = v903.i64[0];
      *((float64x2_t *)v902 + 4) = v904;
      *((double *)v902 + 14) = v906;
      *((float64x2_t *)v902 + 6) = v907;
      *((double *)v902 + 18) = v909;
      *((float64x2_t *)v902 + 8) = _Q3;
      v901 = (uint64_t *)*v901;
    }
    while (v901);
    v11 = 1;
    v40 = v1070;
  }
  else
  {
    v11 = 1;
  }
LABEL_745:
  sub_239C60B1C((uint64_t)v1152);
LABEL_746:
  v106 = v1071;
  if (v1071)
LABEL_747:
    operator delete(v106);
LABEL_748:
  if (v40)
    operator delete(v40);
  v934 = v1075[0];
  if (v1075[0])
  {
    do
    {
      v935 = (_QWORD *)*v934;
      operator delete(v934);
      v934 = v935;
    }
    while (v935);
  }
  v936 = v1074[0];
  v1074[0] = 0;
  if (v936)
    operator delete(v936);
  v10 = v1077;
  if (v1077)
  {
LABEL_5:
    v1078 = v10;
    operator delete(v10);
  }
LABEL_6:
  v12 = __p[0];
  if (__p[0])
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v14 = v1080[0];
  v1080[0] = 0;
  if (v14)
    operator delete(v14);
  if (v1083)
  {
    v1084 = (unint64_t *)v1083;
    operator delete(v1083);
  }
  return v11;
}

void sub_239C60518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,void *a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  uint64_t a65;
  void *v66;

  v66 = (void *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    STACK[0x3F8] = (unint64_t)v66;
    operator delete(v66);
  }
  sub_239C60B1C((uint64_t)&STACK[0x510]);
  if (a48)
  {
    operator delete(a48);
    if (!__p)
    {
LABEL_5:
      sub_239420950((uint64_t)&a51);
      if (a56)
      {
        a57 = (uint64_t)a56;
        operator delete(a56);
      }
      sub_239420950((uint64_t)&a59);
      if (!a64)
        _Unwind_Resume(a1);
      a65 = (uint64_t)a64;
      operator delete(a64);
      _Unwind_Resume(a1);
    }
  }
  else if (!__p)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  goto LABEL_5;
}

void sub_239C60AEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,_QWORD *__p)
{
  _QWORD *v61;
  _QWORD *v62;

  v61 = __p;
  if (__p)
  {
    do
    {
      v62 = (_QWORD *)*v61;
      operator delete(v61);
      v61 = v62;
    }
    while (v62);
  }
  if (a59)
    operator delete(a59);
  JUMPOUT(0x239C6090CLL);
}

uint64_t sub_239C60B1C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  _QWORD *v24;
  void *v25;

  v2 = *(_QWORD **)(a1 + 624);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 608);
  *(_QWORD *)(a1 + 608) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 584);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(void **)(a1 + 472);
  if (v8)
  {
    *(_QWORD *)(a1 + 480) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 432);
  if (v9)
  {
    *(_QWORD *)(a1 + 440) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 400);
  if (v10)
  {
    *(_QWORD *)(a1 + 408) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 376);
  if (v11)
  {
    *(_QWORD *)(a1 + 384) = v11;
    operator delete(v11);
  }
  if (*(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    if ((*(char *)(a1 + 319) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((*(char *)(a1 + 319) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(*(void **)(a1 + 296));
LABEL_19:
  v12 = *(_QWORD **)(a1 + 256);
  if (v12 == (_QWORD *)(a1 + 232))
  {
    v13 = 4;
    v12 = (_QWORD *)(a1 + 232);
  }
  else
  {
    if (!v12)
      goto LABEL_26;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_26:
  v14 = *(_QWORD **)(a1 + 224);
  if (v14 == (_QWORD *)(a1 + 200))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 200);
  }
  else
  {
    if (!v14)
      goto LABEL_31;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_31:
  v16 = *(void **)(a1 + 104);
  if (v16)
  {
    *(_QWORD *)(a1 + 112) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 80);
  if (v17)
  {
    *(_QWORD *)(a1 + 88) = v17;
    operator delete(v17);
  }
  v18 = *(_QWORD **)(a1 + 56);
  if (v18)
  {
    do
    {
      v24 = (_QWORD *)*v18;
      v25 = (void *)v18[8];
      if (v25)
      {
        v18[9] = v25;
        operator delete(v25);
      }
      operator delete(v18);
      v18 = v24;
    }
    while (v24);
  }
  v19 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v19)
    operator delete(v19);
  v20 = *(_QWORD **)(a1 + 16);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v22)
    operator delete(v22);
  return a1;
}

void sub_239C60CE8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  float64_t v17;
  float64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v30;
  float64_t *v31;
  double v33;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v41;
  float64x2_t v43;
  float64x2_t v47;
  double v50;
  float64x2_t v52;
  double v55;
  _QWORD *v57;
  double v60;
  unsigned __int8 v61;
  uint64_t v62;
  double v63;
  double v64;
  unint64_t v67;
  double v68;
  int v69;
  uint64_t v70;
  size_t v71;
  float64_t v72;
  float64_t v73;
  int8x16_t v74;
  float64_t v75;
  float64_t v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  double *v87;
  double *v88;
  double v89;
  int8x16_t v90;
  uint64_t *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  size_t v95;
  size_t v96;
  unint64_t v97;
  float64_t v98;
  float64_t v99;
  uint64_t v100;
  _OWORD *v101;
  __int128 *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  double *v109;
  float64x2_t *v110;
  uint64_t v111;
  float64x2_t v112;
  float64x2_t v113;
  double v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  double v119;
  double cosval;
  __double2 v121;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  uint64_t v142;
  double v143;
  float64x2_t v144;
  double v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  uint64_t v149;
  double v150;
  double v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  double v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  int64x2_t v165;
  float64_t *v166;
  double v168;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  float64x2_t v174;
  float64x2_t v176;
  float64x2_t v178;
  float64x2_t v182;
  double v185;
  float64x2_t v187;
  double v190;
  _QWORD *v192;
  double v195;
  unsigned __int8 v196;
  int v197;
  std::bad_alloc *v198;
  std::bad_alloc *v199;
  std::bad_alloc *v200;
  std::bad_alloc *v201;
  std::bad_alloc *v202;
  std::bad_alloc *v203;
  std::bad_alloc *exception;
  std::bad_alloc *v205;
  std::bad_alloc *v206;
  std::bad_alloc *v207;
  std::bad_alloc *v208;
  std::bad_alloc *v209;
  std::bad_alloc *v210;
  std::bad_alloc *v211;
  std::bad_alloc *v212;
  std::bad_alloc *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v228;
  void *v229[2];
  unsigned int v230;
  void *v231[2];
  unsigned int v232;
  void *v233[2];
  int v234;
  void *v235[12];
  float64x2_t memptr;
  float64_t v237;
  float64x2_t v238;
  double v239;
  float64x2_t v240;
  double v241;
  int8x16_t v242;
  double v243;

  *(_BYTE *)(a1 + 23) = 7;
  strcpy((char *)a1, "NOT SET");
  *(_BYTE *)(a1 + 47) = 7;
  strcpy((char *)(a1 + 24), "NOT SET");
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  v13 = *a3;
  v12 = a3[1];
  v225 = 954437177 * ((a6[1] - *a6) >> 3);
  sub_239DF6044((uint64_t)v235, v225);
  v14 = 0x8E38E38E38E38E39 * ((v12 - v13) >> 3);
  v228 = 954437177 * ((v12 - v13) >> 3);
  v15 = (8 * v228 + 31) & 0xFFFFFFFE0;
  v233[1] = (void *)(v15 >> 3);
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v15, 0x100BBD03uLL);
  v233[0] = *(void **)&memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v205 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v205, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v234 = 954437177 * ((v12 - v13) >> 3);
  v16 = (8 * v225 + 31) & 0xFFFFFFFE0;
  v231[1] = (void *)(v16 >> 3);
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v16, 0x100BBD03uLL);
  v231[0] = *(void **)&memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v206 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v207 = std::bad_alloc::bad_alloc(v206);
    __cxa_throw(v207, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v232 = v225;
  v224 = 3 * v225;
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (8 * v224 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v17 = memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v208 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v209 = std::bad_alloc::bad_alloc(v208);
    __cxa_throw(v209, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v219 = (3 * v14);
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, (8 * v219 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v18 = memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v210 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v211 = std::bad_alloc::bad_alloc(v210);
    __cxa_throw(v211, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v229[1] = (void *)(v16 >> 3);
  memptr.f64[0] = 0.0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v16, 0x100BBD03uLL);
  v229[0] = *(void **)&memptr.f64[0];
  if (!*(_QWORD *)&memptr.f64[0])
  {
    v212 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v213 = std::bad_alloc::bad_alloc(v212);
    __cxa_throw(v213, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v214 = a1;
  v230 = v225;
  v19 = a5[1] - *a5;
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = v19 >> 4;
    if (v23 <= 1)
      v23 = 1;
    v222 = v23;
    v24 = 0.0;
    do
    {
      v26 = (uint64_t *)(*a5 + v20);
      v27 = *v26;
      v28 = *a6 + 72 * v26[1];
      _Q1.f64[0] = *(float64_t *)(v28 + 16);
      v30 = *(int64x2_t *)v28;
      v31 = (float64_t *)(v28 + 40);
      _Q3 = *(int64x2_t *)(v28 + 24);
      v33 = *(double *)(v28 + 64);
      _Q5 = *(_OWORD *)(v28 + 48);
      v35 = *a3 + v21;
      v36 = *a6 + 72 * v27;
      v37 = *(double *)(v35 + 40);
      v38 = *(double *)(v35 + 64);
      v39 = (float64x2_t)vzip1q_s64(v30, _Q3);
      _Q2 = (float64x2_t)vzip2q_s64(v30, _Q3);
      _Q1.f64[1] = *v31;
      v41 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, *(double *)v35), _Q2, *(float64x2_t *)v35, 1), _Q1, *(double *)(v35 + 16));
      _D7 = *(_QWORD *)(v35 + 8);
      __asm { FMLA            D3, D7, V5.D[1] }
      v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, *(double *)(v35 + 24)), _Q2, *(float64x2_t *)(v35 + 24), 1), _Q1, v37);
      _D17 = *(_QWORD *)(v35 + 32);
      __asm { FMLA            D7, D17, V5.D[1] }
      _D7 = _D7 + v33 * v37;
      v47 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v39, *(double *)(v35 + 48)), _Q2, *(float64x2_t *)(v35 + 48), 1), _Q1, v38);
      _Q2.f64[0] = *(float64_t *)(v35 + 56);
      __asm { FMLA            D1, D2, V5.D[1] }
      _Q1.f64[0] = _Q1.f64[0] + v33 * v38;
      _Q2.f64[0] = *(float64_t *)(v36 + 16);
      _Q4 = *(_OWORD *)v36;
      *(_QWORD *)&_Q5 = *(_QWORD *)(v36 + 40);
      _Q17 = *(float64x2_t *)(v36 + 24);
      v50 = *(double *)(v36 + 64);
      _Q19 = *(float64x2_t *)(v36 + 48);
      v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, *(double *)v36), v43, *(float64x2_t *)v36, 1), v47, _Q2.f64[0]);
      __asm { FMLA            D21, D7, V4.D[1] }
      _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
      __asm
      {
        FMLA            D21, D7, V17.D[1]
        FMLA            D3, D7, V19.D[1]
      }
      memptr = v52;
      v238 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, _Q17.f64[0]), v43, _Q17, 1), v47, *(double *)&_Q5);
      v237 = _Q2.f64[0];
      v239 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
      v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v41, _Q19.f64[0]), v43, _Q19, 1), v47, v50);
      v241 = *(double *)_Q3.i64 + _Q1.f64[0] * v50;
      v242 = 0uLL;
      v243 = 0.0;
      sub_239458B60(&memptr, (double *)v242.i64);
      v55 = v243;
      _Q1 = v242;
      v57 = (_QWORD *)(*(_QWORD *)&v18 + 8 * v22);
      *v57 = v242.i64[0];
      v57[v228] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
      *(double *)&v57[2 * v228] = v55;
      _D3 = _Q1.i64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v60 = sqrt(_D2 + v55 * v55);
      if (v60 > 0.0)
      {
        v25 = 1.0 / v60;
      }
      else
      {
        v61 = atomic_load((unsigned __int8 *)&qword_25693D9E0);
        if ((v61 & 1) == 0 && __cxa_guard_acquire(&qword_25693D9E0))
        {
          qword_25693D9D8 = 0x5FE0000000000000;
          __cxa_guard_release(&qword_25693D9E0);
        }
        v25 = *(double *)&qword_25693D9D8;
      }
      v24 = v24 + v60 + v60;
      *((double *)v233[0] + v22) = v25 * *(double *)(*a4 + 8 * v22);
      ++v22;
      v21 += 72;
      v20 += 16;
    }
    while (v222 != v22);
  }
  else
  {
    v24 = 0.0;
  }
  v62 = v214;
  *(double *)(v214 + 64) = v24;
  v64 = *(double *)(a2 + 8);
  v63 = *(double *)(a2 + 16);
  if (v24 <= v64 || *(_QWORD *)(a2 + 24) == 0 || v63 >= 1.79769313e308)
  {
    LODWORD(v67) = 0;
    v68 = 1.79769313e308;
    goto LABEL_101;
  }
  v67 = 0;
  v216 = (v224 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  v223 = (v219 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v221 = (v223 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v215 = (v216 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v217 = v67;
    v69 = 0;
    v70 = 0;
    v71 = (8 * (3 * v14) + 31) & 0xFFFFFFFE0;
    do
    {
      memptr.f64[0] = 0.0;
      malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v71, 0x100BBD03uLL);
      v73 = memptr.f64[0];
      if (!*(_QWORD *)&memptr.f64[0])
      {
        v198 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v199 = std::bad_alloc::bad_alloc(v198);
        __cxa_throw(v199, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v74.i64[0] = 0xFFFFFFFFLL;
      v74.i64[1] = 0xFFFFFFFFLL;
      if ((_DWORD)v14)
      {
        v75 = v18;
        v76 = memptr.f64[0];
        if (v223 < 3)
          goto LABEL_39;
        v75 = v18;
        v76 = memptr.f64[0];
        if (*(_QWORD *)&memptr.f64[0] - *(_QWORD *)&v18 < 0x20uLL)
          goto LABEL_39;
        v77 = (_OWORD *)(*(_QWORD *)&memptr.f64[0] + 16);
        v78 = (__int128 *)(*(_QWORD *)&v18 + 16);
        v79 = (v223 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v80 = *v78;
          *(v77 - 1) = *(v78 - 1);
          *v77 = v80;
          v77 += 2;
          v78 += 2;
          v79 -= 4;
        }
        while (v79);
        if (v223 + 1 != v221)
        {
          *(_QWORD *)&v76 = *(_QWORD *)&v73 + 8 * v221;
          *(_QWORD *)&v75 = *(_QWORD *)&v18 + 8 * v221;
          do
          {
LABEL_39:
            v81 = **(_QWORD **)&v75;
            *(_QWORD *)&v75 += 8;
            **(_QWORD **)&v76 = v81;
            *(_QWORD *)&v76 += 8;
          }
          while (*(_QWORD *)&v76 != *(_QWORD *)&v73 + 8 * v219);
        }
      }
      if (v232)
      {
        bzero(v231[0], 8 * v232);
        v74.i64[0] = 0xFFFFFFFFLL;
        v74.i64[1] = 0xFFFFFFFFLL;
      }
      v82 = *a5;
      v83 = a5[1];
      v84 = v83 - *a5;
      if (v83 != *a5)
      {
        v85 = 0;
        v86 = v84 >> 4;
        v87 = (double *)v233[0];
        v88 = (double *)v231[0];
        if (v86 <= 1)
          v86 = 1;
        do
        {
          v89 = *(double *)(*(_QWORD *)&v73 + 8 * (v69 + v85)) * v87[v85];
          v90 = vandq_s8(*(int8x16_t *)(v82 + 16 * v85), v74);
          v88[v90.i64[0]] = v88[v90.i64[0]] - v89;
          v88[v90.i64[1]] = v89 + v88[v90.i64[1]];
          ++v85;
        }
        while (v86 != v85);
      }
      free(*(void **)&v73);
      sub_239DF6208((uint64_t)v235, a5, (uint64_t *)v233, (uint64_t)v231, (uint64_t)v229);
      v91 = (uint64_t *)v229[0];
      if (v229[0] == *(void **)&v17)
      {
        v95 = v230;
        v96 = (8 * v230 + 31) & 0xFFFFFFFE0;
        memptr.f64[0] = 0.0;
        malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v96, 0x100BBD03uLL);
        v72 = memptr.f64[0];
        if (!*(_QWORD *)&memptr.f64[0])
        {
          v200 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v201 = std::bad_alloc::bad_alloc(v200);
          __cxa_throw(v201, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if (!(_DWORD)v95)
        {
          free(*(void **)&memptr.f64[0]);
          v72 = 0.0;
LABEL_29:
          free(*(void **)&v72);
          v71 = (8 * (3 * v14) + 31) & 0xFFFFFFFE0;
          goto LABEL_30;
        }
        if (v96 >> 3 < v95)
        {
          free(*(void **)&memptr.f64[0]);
          memptr.f64[0] = 0.0;
          malloc_type_posix_memalign((void **)&memptr, 0x20uLL, v96, 0x100BBD03uLL);
          v72 = memptr.f64[0];
          if (!*(_QWORD *)&memptr.f64[0])
          {
            v202 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v203 = std::bad_alloc::bad_alloc(v202);
            __cxa_throw(v203, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
        }
        v97 = (v95 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        v98 = v17;
        v99 = v72;
        if (v97 >= 3)
        {
          v98 = v17;
          v99 = v72;
          if (*(_QWORD *)&v72 - *(_QWORD *)&v17 > 0x1FuLL)
          {
            v100 = (v97 + 1) & 0x3FFFFFFFFFFFFFFCLL;
            *(_QWORD *)&v98 = *(_QWORD *)&v17 + 8 * v100;
            v101 = (_OWORD *)(*(_QWORD *)&v72 + 16);
            v102 = (__int128 *)(*(_QWORD *)&v17 + 16);
            v103 = v100;
            do
            {
              v104 = *v102;
              *(v101 - 1) = *(v102 - 1);
              *v101 = v104;
              v101 += 2;
              v102 += 2;
              v103 -= 4;
            }
            while (v103);
            if (v97 + 1 == v100)
              goto LABEL_66;
            *(_QWORD *)&v99 = *(_QWORD *)&v72 + 8 * v100;
          }
        }
        do
        {
          v105 = **(_QWORD **)&v98;
          *(_QWORD *)&v98 += 8;
          **(_QWORD **)&v99 = v105;
          *(_QWORD *)&v99 += 8;
        }
        while (*(_QWORD *)&v99 != *(_QWORD *)&v72 + 8 * v95);
LABEL_66:
        v106 = 0;
        v107 = v70;
        do
        {
          *(_QWORD *)(*(_QWORD *)&v17 + 8 * v107) = *(_QWORD *)(*(_QWORD *)&v72 + 8 * v106++);
          v107 += 3;
        }
        while (v95 != v106);
        goto LABEL_29;
      }
      if (v225)
        v92 = (_QWORD *)(*(_QWORD *)&v17 + 8 * v70);
      else
        v92 = 0;
      v93 = *(_QWORD *)&v17 + 8 * v70 + 8 * v224;
      if (!v225)
        v93 = 0;
      for (; v92 != (_QWORD *)v93; v92 += 3)
      {
        v94 = *v91++;
        *v92 = v94;
      }
LABEL_30:
      ++v70;
      v69 += v14;
    }
    while (v70 != 3);
    if (v225)
    {
      v108 = **(double **)&v17 * **(double **)&v17;
      if ((_DWORD)v224 != 1)
      {
        if (v216 < 3)
        {
          v109 = (double *)(*(_QWORD *)&v17 + 8);
          goto LABEL_77;
        }
        v110 = (float64x2_t *)(*(_QWORD *)&v17 + 24);
        v111 = (v216 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v112 = vmulq_f64(v110[-1], v110[-1]);
          v113 = vmulq_f64(*v110, *v110);
          v108 = v108 + v112.f64[0] + v112.f64[1] + v113.f64[0] + v113.f64[1];
          v110 += 2;
          v111 -= 4;
        }
        while (v111);
        v109 = (double *)(*(_QWORD *)&v17 + 8 + 8 * v215);
        if (v216 + 1 != v215)
        {
          do
          {
LABEL_77:
            v114 = *v109++;
            v108 = v108 + v114 * v114;
          }
          while (v109 != (double *)(*(_QWORD *)&v17 + 8 * v224));
        }
      }
    }
    else
    {
      v108 = 0.0;
    }
    v115 = *a6;
    if (a6[1] != *a6)
    {
      v116 = 0;
      v117 = 0;
      v118 = 0;
      do
      {
        v149 = *(_QWORD *)&v17 + 8 * v116;
        v150 = *(double *)(v149 + 16);
        _Q7 = *(_OWORD *)v149;
        _D13 = *(double *)(v149 + 8);
        __asm { FMLA            D0, D13, V7.D[1] }
        v153 = _D0 + v150 * v150;
        if (v153 >= 0.0000002635)
        {
          v119 = sqrt(v153);
          v220 = *(_QWORD *)v149;
          v121 = __sincos_stret(v119);
          cosval = v121.__cosval;
          *(_QWORD *)&_Q7 = v220;
          v123 = v121.__sinval / v119;
          v124 = 1.0 / v153 * (1.0 - v121.__cosval);
        }
        else
        {
          v124 = 0.5 - v153 * (v153 / -720.0 + 0.0416666667);
          v123 = 1.0 - v153 * (0.166666667 - v153 * (v153 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v153 * v124;
        }
        v125 = v124 * *(double *)&_Q7;
        v126 = v124 * _D13;
        v127 = cosval + v124 * *(double *)&_Q7 * *(double *)&_Q7;
        v128 = cosval + v124 * _D13 * _D13;
        v129 = cosval + v124 * v150 * v150;
        v130 = v124 * *(double *)&_Q7 * _D13;
        v131 = v125 * v150;
        v132 = v126 * v150;
        v133 = v123 * *(double *)&_Q7;
        v134 = v123 * _D13;
        v135 = v123 * v150;
        v136 = v130 - v135;
        v137 = v134 + v131;
        v138 = v130 + v135;
        v139 = v132 - v133;
        v140 = v131 - v134;
        v141 = v133 + v132;
        v142 = v115 + v117;
        v143 = *(double *)(v115 + v117 + 16);
        v144 = *(float64x2_t *)(v115 + v117);
        v145 = *(double *)(v115 + v117 + 40);
        v146 = *(float64x2_t *)(v115 + v117 + 24);
        v147 = *(double *)(v115 + v117 + 64);
        v148 = *(float64x2_t *)(v115 + v117 + 48);
        *(double *)(v142 + 16) = v143 * v127 + v145 * v138 + v147 * v140;
        *(float64x2_t *)v142 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v144, v127), v146, v138), v148, v140);
        *(double *)(v142 + 40) = v143 * v136 + v145 * v128 + v147 * v141;
        *(float64x2_t *)(v142 + 24) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v144, v136), v146, v128), v148, v141);
        *(double *)(v142 + 64) = v143 * v137 + v145 * v139 + v147 * v129;
        *(float64x2_t *)(v142 + 48) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v144, v137), v146, v139), v148, v129);
        ++v118;
        v115 = *a6;
        v117 += 72;
        v116 += 3;
      }
      while (v118 < 0x8E38E38E38E38E39 * ((a6[1] - *a6) >> 3));
    }
    v154 = a5[1] - *a5;
    if (v154)
    {
      v155 = 0;
      v156 = 0;
      v157 = 0;
      v158 = v154 >> 4;
      if (v158 <= 1)
        v159 = 1;
      else
        v159 = v158;
      v24 = 0.0;
      do
      {
        v161 = (uint64_t *)(*a5 + v155);
        v162 = *v161;
        v163 = *a6 + 72 * v161[1];
        _Q1.f64[0] = *(float64_t *)(v163 + 16);
        v165 = *(int64x2_t *)v163;
        v166 = (float64_t *)(v163 + 40);
        _Q3 = *(int64x2_t *)(v163 + 24);
        v168 = *(double *)(v163 + 64);
        _Q5 = *(_OWORD *)(v163 + 48);
        v170 = *a3 + v156;
        v171 = *a6 + 72 * v162;
        v172 = *(double *)(v170 + 40);
        v173 = *(double *)(v170 + 64);
        v174 = (float64x2_t)vzip1q_s64(v165, _Q3);
        _Q2 = (float64x2_t)vzip2q_s64(v165, _Q3);
        _Q1.f64[1] = *v166;
        v176 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, *(double *)v170), _Q2, *(float64x2_t *)v170, 1), _Q1, *(double *)(v170 + 16));
        _D7 = *(_QWORD *)(v170 + 8);
        __asm { FMLA            D3, D7, V5.D[1] }
        v178 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, *(double *)(v170 + 24)), _Q2, *(float64x2_t *)(v170 + 24), 1), _Q1, v172);
        _D17 = *(_QWORD *)(v170 + 32);
        __asm { FMLA            D7, D17, V5.D[1] }
        _D7 = _D7 + v168 * v172;
        v182 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v174, *(double *)(v170 + 48)), _Q2, *(float64x2_t *)(v170 + 48), 1), _Q1, v173);
        _Q2.f64[0] = *(float64_t *)(v170 + 56);
        __asm { FMLA            D1, D2, V5.D[1] }
        _Q1.f64[0] = _Q1.f64[0] + v168 * v173;
        _Q2.f64[0] = *(float64_t *)(v171 + 16);
        _Q4 = *(_OWORD *)v171;
        *(_QWORD *)&_Q5 = *(_QWORD *)(v171 + 40);
        _Q17 = *(float64x2_t *)(v171 + 24);
        v185 = *(double *)(v171 + 64);
        _Q19 = *(float64x2_t *)(v171 + 48);
        v187 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, *(double *)v171), v178, *(float64x2_t *)v171, 1), v182, _Q2.f64[0]);
        __asm { FMLA            D21, D7, V4.D[1] }
        _Q2.f64[0] = _D21 + _Q1.f64[0] * _Q2.f64[0];
        __asm
        {
          FMLA            D21, D7, V17.D[1]
          FMLA            D3, D7, V19.D[1]
        }
        memptr = v187;
        v238 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, _Q17.f64[0]), v178, _Q17, 1), v182, *(double *)&_Q5);
        v237 = _Q2.f64[0];
        v239 = _D21 + _Q1.f64[0] * *(double *)&_Q5;
        v240 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v176, _Q19.f64[0]), v178, _Q19, 1), v182, v185);
        v241 = *(double *)_Q3.i64 + _Q1.f64[0] * v185;
        v242 = 0uLL;
        v243 = 0.0;
        sub_239458B60(&memptr, (double *)v242.i64);
        v190 = v243;
        _Q1 = v242;
        v192 = (_QWORD *)(*(_QWORD *)&v18 + 8 * v157);
        *v192 = v242.i64[0];
        v192[v228] = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
        *(double *)&v192[2 * v228] = v190;
        _D3 = _Q1.i64[1];
        __asm { FMLA            D2, D3, V1.D[1] }
        v195 = sqrt(_D2 + v190 * v190);
        if (v195 > 0.0)
        {
          v160 = 1.0 / v195;
        }
        else
        {
          v196 = atomic_load((unsigned __int8 *)&qword_25693D9E0);
          if ((v196 & 1) == 0 && __cxa_guard_acquire(&qword_25693D9E0))
          {
            qword_25693D9D8 = 0x5FE0000000000000;
            __cxa_guard_release(&qword_25693D9E0);
          }
          v160 = *(double *)&qword_25693D9D8;
        }
        v24 = v24 + v195 + v195;
        *((double *)v233[0] + v157) = v160 * *(double *)(*a4 + 8 * v157);
        ++v157;
        v156 += 72;
        v155 += 16;
      }
      while (v159 != v157);
    }
    else
    {
      v24 = 0.0;
    }
    v67 = v217 + 1;
    v64 = *(double *)(a2 + 8);
    v63 = *(double *)(a2 + 16);
    v68 = sqrt(v108);
  }
  while (v24 > v64 && v67 < *(_QWORD *)(a2 + 24) && v68 > v63);
  v62 = v214;
LABEL_101:
  *(double *)(v62 + 72) = v24;
  *(_DWORD *)(v62 + 48) = v67;
  *(_DWORD *)(v62 + 56) = 0;
  if (v24 <= v64)
  {
    v197 = 3;
LABEL_105:
    *(_DWORD *)(v62 + 56) = v197;
  }
  else if (v68 <= v63)
  {
    v197 = 2;
    goto LABEL_105;
  }
  free(v229[0]);
  free(*(void **)&v18);
  free(*(void **)&v17);
  free(v231[0]);
  free(v233[0]);
  free(v235[9]);
  free(v235[6]);
  free(v235[3]);
  free(v235[0]);
}

void sub_239C61B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  sub_239C0BE14(v46);
  _Unwind_Resume(a1);
}

void **sub_239C61C1C(void **a1)
{
  free(a1[9]);
  free(a1[6]);
  free(a1[3]);
  free(*a1);
  return a1;
}

uint64_t sub_239C61C5C(uint64_t *a1, __int128 *a2, int a3, unint64_t a4, size_t a5, unint64_t a6, unint64_t a7, char a8)
{
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  size_t prime;
  void *v25;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64x2_t *v32;
  char *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  int v56;
  float64x2_t v57;
  uint8x8_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  int64x2_t v71;
  int64x2_t v72;
  float64x2_t v76;
  int64x2_t v77;
  uint64_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  int64x2_t *v86;
  int64x2_t *v87;
  int64x2_t *v88;
  int64x2_t *v89;
  uint64_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  double v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  double *v107;
  unint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  int64x2_t *v115;
  char *v116;
  size_t v117;
  _QWORD *v118;
  _QWORD *v119;
  void *v120;
  int8x8_t v121;
  BOOL v122;
  unint64_t v123;
  uint8x8_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  uint8x8_t v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  __int128 v141;
  float v142;
  _BOOL8 v143;
  unint64_t v144;
  unint64_t v145;
  size_t v146;
  unint64_t v147;
  uint8x8_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  size_t v153;
  int64x2_t *v154;
  int64x2_t *v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  __int128 v162;
  __int128 v163;
  int v164;
  _BOOL4 v165;
  uint64_t *i;
  uint64_t *v167;
  __int128 v168;
  _QWORD *v169;
  void *v170;
  _QWORD *v171;
  void *v172;
  unint64_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  float64x2_t v179;
  int64x2_t v180;
  __int128 v181;
  char *i8;
  int64x2_t v183;
  size_t __sz;
  uint64_t __sza;
  char v186;
  __int128 *v187;
  int64x2_t *v188;
  unint64_t v189;
  int64x2_t *v190;
  size_t __n[2];
  void *v192[2];
  int v193;
  void *v194;
  char *v195;
  unint64_t v196;
  void *v197[2];
  void *v198[2];
  float v199;
  unint64_t *v200;
  unint64_t *v201;
  uint64_t v202;
  void *v203[2];
  void *__p[2];
  int v205;
  void *v206;
  unint64_t *v207;
  uint64_t v208;
  _QWORD v209[2];
  uint64_t *v210;
  __int128 v211;
  __int128 v212;
  float v213;
  uint64_t *v214;
  uint64_t *v215;
  int64x2_t *v216;
  _QWORD v217[4];
  uint64_t v218;
  char v219;
  __int128 v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  char v228;
  uint64_t v229;
  char v230[24];
  char v231[24];
  uint64_t v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int16 v248;
  __int128 v249;
  __int128 v250;
  int v251;
  __int128 v252;
  __int128 v253;
  int v254;
  uint64_t v255;

  v255 = *MEMORY[0x24BDAC8D0];
  v206 = 0;
  v207 = 0;
  v208 = 0;
  sub_239E24B10((uint64_t)a1, (uint64_t)&v206, 1);
  v16 = (unint64_t *)v206;
  v17 = v207;
  *(_OWORD *)v203 = 0u;
  *(_OWORD *)__p = 0u;
  v205 = 1065353216;
  if (v206 != v207)
  {
    do
    {
      sub_239465800((uint64_t)v203, v16, v16);
      ++v16;
    }
    while (v16 != v17);
  }
  v200 = 0;
  v201 = 0;
  v202 = 0;
  sub_239AFA8E8(a1 + 29, (uint64_t)&v200);
  v18 = v200;
  if ((unint64_t)((char *)v201 - (char *)v200) < 0x20)
  {
    v19 = 0;
    if (!v200)
      goto LABEL_6;
    goto LABEL_5;
  }
  *(_OWORD *)v197 = 0u;
  *(_OWORD *)v198 = 0u;
  v199 = 1.0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  prime = (unint64_t)(float)(unint64_t)__p[1];
  v187 = a2;
  v186 = a8;
  if (prime == 1)
  {
    prime = 2;
LABEL_29:
    sub_239A501C8((uint64_t)v197, prime);
    goto LABEL_30;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime((unint64_t)(float)(unint64_t)__p[1]);
    v25 = v197[1];
    _CF = (void *)prime >= v197[1];
    if ((void *)prime > v197[1])
      goto LABEL_29;
  }
  else
  {
    v25 = 0;
    _CF = 1;
    if (prime)
      goto LABEL_29;
  }
  if (!_CF)
  {
    v27 = vcvtps_u32_f32((float)(unint64_t)v198[1] / v199);
    if ((unint64_t)v25 < 3
      || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v27 = std::__next_prime(v27);
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
    }
    if (prime <= v27)
      prime = v27;
    if (prime < (unint64_t)v25)
      goto LABEL_29;
  }
LABEL_30:
  v30 = (char *)v201 - (char *)v200;
  v31 = ((char *)v201 - (char *)v200) >> 4;
  if (v201 == v200)
  {
    v190 = 0;
    i8 = 0;
  }
  else
  {
    if (v30 >= 0x1C71C71C71C71C71)
      sub_2394189F8();
    v32 = (int64x2_t *)operator new(144 * v31);
    i8 = v32[9 * v31].i8;
    v190 = v32;
  }
  if (v31 > (uint64_t)(v196 - (_QWORD)v194) >> 3)
  {
    if ((v30 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v33 = (char *)operator new(v30 >> 1);
    v194 = &v33[(v195 - (_BYTE *)v194) & 0xFFFFFFFFFFFFFFF8];
    v195 = (char *)v194;
    v196 = (unint64_t)&v33[8 * v31];
  }
  v34 = __p[0];
  if (__p[0])
  {
    do
    {
      v41 = v34[2];
      v209[0] = v41;
      if (*((_BYTE *)sub_2395D7BEC((uint64_t)a1, v41) + 232) == 2)
      {
        v42 = sub_239BF5CF4((uint64_t)a1, v41);
        v43 = sub_239C0BEEC((uint64_t)v197, v41, v209);
        v44 = *((_OWORD *)v42 + 4);
        v45 = *((_OWORD *)v42 + 5);
        v46 = *((_OWORD *)v42 + 6);
        *(_OWORD *)(v43 + 72) = *((_OWORD *)v42 + 7);
        *(_OWORD *)(v43 + 56) = v46;
        *(_OWORD *)(v43 + 40) = v45;
        *(_OWORD *)(v43 + 24) = v44;
        v47 = *((_OWORD *)v42 + 8);
        v48 = *((_OWORD *)v42 + 9);
        v49 = *((_OWORD *)v42 + 10);
        *(_OWORD *)(v43 + 136) = *((_OWORD *)v42 + 11);
        *(_OWORD *)(v43 + 120) = v49;
        *(_OWORD *)(v43 + 104) = v48;
        *(_OWORD *)(v43 + 88) = v47;
      }
      v34 = (_QWORD *)*v34;
    }
    while (v34);
  }
  v35 = a4;
  __sz = a5;
  v189 = a6;
  v37 = v200;
  v36 = v201;
  if (v200 == v201)
  {
    v19 = 0;
LABEL_147:
    v115 = v190;
    goto LABEL_148;
  }
  __asm { FMOV            V0.2D, #1.0 }
  v181 = _Q0;
  v188 = v190;
  while (2)
  {
    v51 = sub_239AFAB78(a1 + 29, *v37, v37[1]);
    if (v51[1] < a7)
      goto LABEL_46;
    v52 = v37[1];
    v53 = v52 >= *v37 ? *v37 : v37[1];
    v54 = *v37 <= v52 ? v37[1] : *v37;
    v55 = sub_2395D7BEC((uint64_t)a1, v53);
    v56 = *((unsigned __int8 *)sub_2395D7BEC((uint64_t)a1, v54) + 232);
    _ZF = *((_BYTE *)v55 + 232) == 2 && v56 == 2;
    if (!_ZF || !v203[1])
      goto LABEL_46;
    v59 = (uint8x8_t)vcnt_s8((int8x8_t)v203[1]);
    v59.i16[0] = vaddlv_u8(v59);
    if (v59.u32[0] > 1uLL)
    {
      v60 = v53;
      if ((void *)v53 >= v203[1])
        v60 = v53 % (unint64_t)v203[1];
    }
    else
    {
      v60 = ((unint64_t)v203[1] - 1) & v53;
    }
    v61 = (_QWORD *)*((_QWORD *)v203[0] + v60);
    if (!v61)
      goto LABEL_46;
    v62 = (_QWORD *)*v61;
    if (!*v61)
      goto LABEL_46;
    v63 = (unint64_t)v203[1] - 1;
    if (v59.u32[0] < 2uLL)
    {
      while (1)
      {
        v64 = v62[1];
        if (v64 == v53)
        {
          if (v62[2] == v53)
            goto LABEL_80;
        }
        else if ((v64 & v63) != v60)
        {
          goto LABEL_46;
        }
        v62 = (_QWORD *)*v62;
        if (!v62)
          goto LABEL_46;
      }
    }
    while (1)
    {
      v65 = v62[1];
      if (v65 == v53)
        break;
      if ((void *)v65 >= v203[1])
        v65 %= (unint64_t)v203[1];
      if (v65 != v60)
        goto LABEL_46;
LABEL_74:
      v62 = (_QWORD *)*v62;
      if (!v62)
        goto LABEL_46;
    }
    if (v62[2] != v53)
      goto LABEL_74;
LABEL_80:
    if (v59.u32[0] > 1uLL)
    {
      v66 = v54;
      if ((void *)v54 >= v203[1])
        v66 = v54 % (unint64_t)v203[1];
    }
    else
    {
      v66 = v63 & v54;
    }
    v67 = (_QWORD *)*((_QWORD *)v203[0] + v66);
    if (v67)
    {
      v68 = (_QWORD *)*v67;
      if (v68)
      {
        if (v59.u32[0] < 2uLL)
        {
          while (1)
          {
            v69 = v68[1];
            if (v69 == v54)
            {
              if (v68[2] == v54)
                goto LABEL_100;
            }
            else if ((v69 & v63) != v66)
            {
              goto LABEL_46;
            }
            v68 = (_QWORD *)*v68;
            if (!v68)
              goto LABEL_46;
          }
        }
        do
        {
          v70 = v68[1];
          if (v70 == v54)
          {
            if (v68[2] == v54)
            {
LABEL_100:
              v71 = *(int64x2_t *)(v51 + 11);
              v72 = *(int64x2_t *)(v51 + 5);
              v81 = *(int64x2_t *)(v51 + 9);
              v57.f64[0] = (float64_t)v51[16];
              _Q3 = *((float64x2_t *)v51 + 7);
              _Q4 = vmulq_f64(_Q3, _Q3);
              _D5 = v51[15];
              __asm { FMLA            D4, D5, V3.D[1] }
              _Q4.f64[0] = 1.0 / sqrt(_Q4.f64[0] + v57.f64[0] * v57.f64[0]);
              v76 = vmulq_n_f64(_Q3, _Q4.f64[0]);
              v77 = (int64x2_t)_D5;
              v77.i64[0] = v51[10];
              v78 = *(_OWORD *)&vmulq_f64(v57, _Q4);
              v79 = (int64x2_t)(unint64_t)v51[7];
              v80 = vzip1q_s64(vdupq_laneq_s64(*(int64x2_t *)(v51 + 7), 1), v81);
              v81.i64[0] = v51[13];
              v82.i64[1] = *((_QWORD *)&v181 + 1);
              v82.i64[0] = v78;
              if (v188 >= (int64x2_t *)i8)
              {
                v83 = 0x8E38E38E38E38E39 * (v188 - v190) + 1;
                if (v83 > 0x1C71C71C71C71C7)
                  sub_2394189F8();
                if (0x1C71C71C71C71C72 * ((i8 - (char *)v190) >> 4) > v83)
                  v83 = 0x1C71C71C71C71C72 * ((i8 - (char *)v190) >> 4);
                if (0x8E38E38E38E38E39 * ((i8 - (char *)v190) >> 4) >= 0xE38E38E38E38E3)
                  v84 = 0x1C71C71C71C71C7;
                else
                  v84 = v83;
                if (v84)
                {
                  v174 = v80;
                  v175 = (int64x2_t)(unint64_t)v51[7];
                  v176 = v77;
                  v177 = v81;
                  v178 = v82;
                  v179 = v76;
                  v180 = *(int64x2_t *)(v51 + 5);
                  v183 = *(int64x2_t *)(v51 + 11);
                  if (v84 > 0x1C71C71C71C71C7)
                    sub_239418A80();
                  v173 = v84;
                  v85 = (char *)operator new(144 * v84);
                  v71 = v183;
                  v76 = v179;
                  v72 = v180;
                  v84 = v173;
                  v81 = v177;
                  v82 = v178;
                  v79 = v175;
                  v77 = v176;
                  v80 = v174;
                }
                else
                {
                  v85 = 0;
                }
                v86 = (int64x2_t *)&v85[16 * (v188 - v190)];
                v86->i64[0] = v53;
                v86->i64[1] = v54;
                v86[3] = v80;
                v86[4] = v77;
                v86[1] = v72;
                v86[2] = v79;
                v86[5] = v71;
                v86[6] = v81;
                v86[7] = (int64x2_t)v76;
                v86[8] = v82;
                v87 = v86;
                if (v188 == v190)
                {
                  v88 = v190;
                }
                else
                {
                  v88 = v190;
                  v89 = v188;
                  do
                  {
                    v90 = v89[-9].i64[0];
                    v89 -= 9;
                    v87[-9].i64[0] = v90;
                    v87 -= 9;
                    v87->i64[1] = v89->i64[1];
                    v91 = v89[1];
                    v92 = v89[2];
                    v93 = v89[4];
                    v87[3] = v89[3];
                    v87[4] = v93;
                    v87[1] = v91;
                    v87[2] = v92;
                    v94 = v89[5];
                    v95 = v89[6];
                    v96 = v89[8];
                    v87[7] = v89[7];
                    v87[8] = v96;
                    v87[5] = v94;
                    v87[6] = v95;
                  }
                  while (v89 != v190);
                }
                i8 = &v85[144 * v84];
                v188 = v86 + 9;
                if (v88)
                  operator delete(v88);
                v190 = v87;
              }
              else
              {
                v188->i64[0] = v53;
                v188->i64[1] = v54;
                v188[1] = v72;
                v188[2] = v79;
                v188[3] = v80;
                v188[4] = v77;
                v188[5] = v71;
                v188[6] = v81;
                v188[7] = (int64x2_t)v76;
                v188[8] = v82;
                v188 += 9;
              }
              v97 = (double)(unint64_t)v51[1];
              v98 = v195;
              if ((unint64_t)v195 < v196)
              {
                *(double *)v195 = v97;
                v50 = v98 + 8;
              }
              else
              {
                v99 = (char *)v194;
                v100 = v195 - (_BYTE *)v194;
                v101 = (v195 - (_BYTE *)v194) >> 3;
                v102 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 61)
                  sub_2394189F8();
                v103 = v196 - (_QWORD)v194;
                if ((uint64_t)(v196 - (_QWORD)v194) >> 2 > v102)
                  v102 = v103 >> 2;
                if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
                  v104 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v104 = v102;
                if (v104)
                {
                  if (v104 >> 61)
                    sub_239418A80();
                  v105 = v104;
                  v106 = operator new(8 * v104);
                  v104 = v105;
                  v100 = v195 - (_BYTE *)v194;
                }
                else
                {
                  v106 = 0;
                }
                v107 = (double *)&v106[8 * v101];
                *v107 = v97;
                v50 = (char *)(v107 + 1);
                if (v98 != v99)
                {
                  v108 = v98 - 8 - v99;
                  if (v108 < 0x58)
                    goto LABEL_273;
                  if ((unint64_t)(v98 - &v106[v100]) < 0x20)
                    goto LABEL_273;
                  v109 = (v108 >> 3) + 1;
                  v110 = &v106[8 * v101 - 16];
                  v111 = v98 - 16;
                  v112 = v109 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v113 = *(_OWORD *)v111;
                    *(v110 - 1) = *((_OWORD *)v111 - 1);
                    *v110 = v113;
                    v110 -= 2;
                    v111 -= 32;
                    v112 -= 4;
                  }
                  while (v112);
                  v107 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
                  v98 -= 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_273:
                    do
                    {
                      v114 = *((_QWORD *)v98 - 1);
                      v98 -= 8;
                      *((_QWORD *)v107-- - 1) = v114;
                    }
                    while (v98 != v99);
                  }
                }
                v194 = v107;
                v195 = v50;
                v196 = (unint64_t)&v106[8 * v104];
                if (v99)
                  operator delete(v99);
              }
              v195 = v50;
              break;
            }
          }
          else
          {
            if ((void *)v70 >= v203[1])
              v70 %= (unint64_t)v203[1];
            if (v70 != v66)
              break;
          }
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
    }
LABEL_46:
    v37 += 2;
    if (v37 != v36)
      continue;
    break;
  }
  v19 = 0;
  if (!v198[1])
    goto LABEL_147;
  v115 = v190;
  if (v188 == v190)
    goto LABEL_148;
  v116 = v195;
  if (v195 != v194)
  {
    *(_OWORD *)__n = 0u;
    *(_OWORD *)v192 = 0u;
    v193 = 1065353216;
    if (a3)
      sub_239C55BA0(a1, (uint64_t)__n, v35, __sz, v189);
    sub_239BAB9F8((uint64_t)v209, (uint64_t)v197);
    v212 = 0u;
    v211 = 0u;
    v213 = *(float *)&v193;
    v117 = __n[1];
    if (__n[1] == 1)
    {
      v117 = 2;
      goto LABEL_174;
    }
    if ((__n[1] & (__n[1] - 1)) != 0)
    {
      v117 = std::__next_prime(__n[1]);
      v121 = *(int8x8_t *)((char *)&v211 + 8);
      v122 = v117 >= *((_QWORD *)&v211 + 1);
      if (v117 > *((_QWORD *)&v211 + 1))
        goto LABEL_174;
    }
    else
    {
      v121 = 0;
      v122 = 1;
      if (__n[1])
        goto LABEL_174;
    }
    if (!v122)
    {
      v123 = vcvtps_u32_f32((float)*((unint64_t *)&v212 + 1) / v213);
      if (*(_QWORD *)&v121 < 3uLL
        || (v124 = (uint8x8_t)vcnt_s8(v121), v124.i16[0] = vaddlv_u8(v124), v124.u32[0] > 1uLL))
      {
        v123 = std::__next_prime(v123);
      }
      else
      {
        v125 = 1 << -(char)__clz(v123 - 1);
        if (v123 >= 2)
          v123 = v125;
      }
      if (v117 <= v123)
        v117 = v123;
      if (v117 < *(_QWORD *)&v121)
LABEL_174:
        sub_239A501C8((uint64_t)&v211, v117);
    }
    __sza = (char *)v188 - (char *)v190;
    v126 = (char *)v192[0];
    if (v192[0])
    {
      v127 = *((_QWORD *)&v211 + 1);
      do
      {
        v128 = *((_QWORD *)v126 + 2);
        if (v127)
        {
          v129 = (uint8x8_t)vcnt_s8((int8x8_t)v127);
          v129.i16[0] = vaddlv_u8(v129);
          if (v129.u32[0] > 1uLL)
          {
            v37 = (unint64_t *)*((_QWORD *)v126 + 2);
            if (v128 >= v127)
              v37 = (unint64_t *)(v128 % v127);
          }
          else
          {
            v37 = (unint64_t *)((v127 - 1) & v128);
          }
          v130 = *(_QWORD **)(v211 + 8 * (_QWORD)v37);
          if (v130)
          {
            v131 = (_QWORD *)*v130;
            if (v131)
            {
              if (v129.u32[0] < 2uLL)
              {
                while (1)
                {
                  v133 = v131[1];
                  if (v133 == v128)
                  {
                    if (v131[2] == v128)
                      goto LABEL_240;
                  }
                  else if ((unint64_t *)(v133 & (v127 - 1)) != v37)
                  {
                    goto LABEL_197;
                  }
                  v131 = (_QWORD *)*v131;
                  if (!v131)
                    goto LABEL_197;
                }
              }
              do
              {
                v132 = v131[1];
                if (v132 == v128)
                {
                  if (v131[2] == v128)
                    goto LABEL_240;
                }
                else
                {
                  if (v132 >= v127)
                    v132 %= v127;
                  if ((unint64_t *)v132 != v37)
                    break;
                }
                v131 = (_QWORD *)*v131;
              }
              while (v131);
            }
          }
        }
LABEL_197:
        v134 = (char *)operator new(0x58uLL);
        *(_QWORD *)v134 = 0;
        *((_QWORD *)v134 + 1) = v128;
        *((_QWORD *)v134 + 2) = *((_QWORD *)v126 + 2);
        *(_OWORD *)(v134 + 24) = *(_OWORD *)(v126 + 24);
        v135 = *(_OWORD *)(v126 + 40);
        v136 = *((_QWORD *)v126 + 7);
        *((_QWORD *)v134 + 8) = 0;
        *((_QWORD *)v134 + 7) = v136;
        *(_OWORD *)(v134 + 40) = v135;
        *((_QWORD *)v134 + 9) = 0;
        *((_QWORD *)v134 + 10) = 0;
        v138 = *((_QWORD *)v126 + 8);
        v137 = *((_QWORD *)v126 + 9);
        v139 = v137 - v138;
        if (v137 != v138)
        {
          if (v139 < 0)
            sub_2394189F8();
          v140 = (char *)operator new(v137 - v138);
          *((_QWORD *)v134 + 8) = v140;
          *((_QWORD *)v134 + 9) = v140;
          *((_QWORD *)v134 + 10) = &v140[32 * (v139 >> 5)];
          do
          {
            *(_QWORD *)v140 = *(_QWORD *)v138;
            v141 = *(_OWORD *)(v138 + 8);
            *((_QWORD *)v140 + 3) = *(_QWORD *)(v138 + 24);
            *(_OWORD *)(v140 + 8) = v141;
            v140 += 32;
            v138 += 32;
          }
          while (v138 != v137);
          *((_QWORD *)v134 + 9) = v140;
        }
        v142 = (float)(unint64_t)(*((_QWORD *)&v212 + 1) + 1);
        if (!v127 || (float)(v213 * (float)v127) < v142)
        {
          v143 = (v127 & (v127 - 1)) != 0;
          if (v127 < 3)
            v143 = 1;
          v144 = v143 | (2 * v127);
          v145 = vcvtps_u32_f32(v142 / v213);
          if (v144 <= v145)
            v146 = v145;
          else
            v146 = v144;
          if (v146 == 1)
          {
            v146 = 2;
          }
          else if ((v146 & (v146 - 1)) != 0)
          {
            v146 = std::__next_prime(v146);
            v127 = *((_QWORD *)&v211 + 1);
          }
          if (v146 > v127)
            goto LABEL_214;
          if (v146 < v127)
          {
            v147 = vcvtps_u32_f32((float)*((unint64_t *)&v212 + 1) / v213);
            if (v127 < 3
              || (v148 = (uint8x8_t)vcnt_s8((int8x8_t)v127), v148.i16[0] = vaddlv_u8(v148), v148.u32[0] > 1uLL))
            {
              v147 = std::__next_prime(v147);
            }
            else
            {
              v149 = 1 << -(char)__clz(v147 - 1);
              if (v147 >= 2)
                v147 = v149;
            }
            if (v146 <= v147)
              v146 = v147;
            if (v146 < v127)
LABEL_214:
              sub_239A501C8((uint64_t)&v211, v146);
          }
          v127 = *((_QWORD *)&v211 + 1);
          if ((*((_QWORD *)&v211 + 1) & (*((_QWORD *)&v211 + 1) - 1)) != 0)
          {
            if (v128 >= *((_QWORD *)&v211 + 1))
              v37 = (unint64_t *)(v128 % *((_QWORD *)&v211 + 1));
            else
              v37 = (unint64_t *)v128;
          }
          else
          {
            v37 = (unint64_t *)((*((_QWORD *)&v211 + 1) - 1) & v128);
          }
        }
        v150 = v211;
        v151 = *(_QWORD **)(v211 + 8 * (_QWORD)v37);
        if (v151)
        {
          *(_QWORD *)v134 = *v151;
        }
        else
        {
          *(_QWORD *)v134 = v212;
          *(_QWORD *)&v212 = v134;
          *(_QWORD *)(v150 + 8 * (_QWORD)v37) = &v212;
          if (!*(_QWORD *)v134)
            goto LABEL_239;
          v152 = *(_QWORD *)(*(_QWORD *)v134 + 8);
          if ((v127 & (v127 - 1)) != 0)
          {
            if (v152 >= v127)
              v152 %= v127;
          }
          else
          {
            v152 &= v127 - 1;
          }
          v151 = (_QWORD *)(v211 + 8 * v152);
        }
        *v151 = v134;
LABEL_239:
        ++*((_QWORD *)&v212 + 1);
LABEL_240:
        v126 = *(char **)v126;
      }
      while (v126);
    }
    v214 = 0;
    v215 = 0;
    v216 = 0;
    v153 = 0x8E38E38E38E38E39 * (__sza >> 4);
    if (v153 > 0x1C71C71C71C71C7)
      sub_2394189F8();
    v115 = v190;
    v154 = (int64x2_t *)operator new(__sza);
    v214 = (uint64_t *)v154;
    v215 = (uint64_t *)v154;
    v216 = &v154[__sza >> 4];
    v155 = v190;
    do
    {
      v154->i64[0] = v155->i64[0];
      v154->i64[1] = v155->i64[1];
      v156 = v155[1];
      v157 = v155[2];
      v158 = v155[4];
      v154[3] = v155[3];
      v154[4] = v158;
      v154[1] = v156;
      v154[2] = v157;
      v159 = v155[5];
      v160 = v155[6];
      v161 = v155[8];
      v154[7] = v155[7];
      v154[8] = v161;
      v154[5] = v159;
      v154[6] = v160;
      v154 += 9;
      v155 += 9;
    }
    while (v155 != v188);
    v215 = (uint64_t *)v154;
    memset(v217, 0, 24);
    v217[3] = 0x3FF0000000000000;
    v218 = 0xA00000001;
    v219 = 0;
    v220 = xmmword_239F0C440;
    v221 = 0x3EB0C6F7A0B5ED8DLL;
    v222 = 0;
    v223 = 0x3FF7B8BAC710CB29;
    v224 = 0;
    v225 = 0;
    v226 = 0;
    v227 = xmmword_239F0C450;
    v228 = 1;
    v229 = 0x3FF0000000000000;
    v230[23] = 7;
    strcpy(v230, "NOT SET");
    v231[23] = 7;
    strcpy(v231, "NOT SET");
    v232 = 0;
    v233 = 0;
    v234 = 0xBFF0000000000000;
    v235 = 0xBFF0000000000000;
    v236 = 0u;
    v237 = 0u;
    v238 = 0u;
    v239 = 0u;
    v240 = 0u;
    v241 = 0u;
    v242 = 0u;
    v243 = 0;
    *(_QWORD *)&v244 = 0x100000032;
    DWORD2(v244) = 2;
    v245 = v181;
    v246 = xmmword_239F0C460;
    v247 = xmmword_239F0C470;
    v248 = 257;
    v249 = 0u;
    v250 = 0u;
    v251 = 1065353216;
    v252 = 0u;
    v253 = 0u;
    v254 = 1065353216;
    if (v153 == (v195 - (_BYTE *)v194) >> 3)
      sub_23945D3D0(v217, (char *)v194, v195, v153);
    v248 = *((_WORD *)v187 + 32);
    v162 = v187[1];
    v163 = v187[3];
    v246 = v187[2];
    v247 = v163;
    v244 = *v187;
    v245 = v162;
    LOBYTE(v248) = v186;
    v220 = xmmword_239F0C010;
    HIDWORD(v218) = v244;
    v228 = 0;
    v221 = 0x3EB0C6F7A0B5ED8DLL;
    *((_QWORD *)&v227 + 1) = 0x3F1A36E2EB1C432DLL;
    v219 = 0;
    v164 = *((_DWORD *)v187 + 2);
    if (v164 == 2)
    {
      v165 = sub_239C10530(v209);
    }
    else if (v164 == 1)
    {
      v165 = sub_239C0C504(v209);
    }
    else
    {
      v19 = 0;
      if (v164)
      {
LABEL_257:
        sub_239C60B1C((uint64_t)v209);
        v169 = v192[0];
        if (v192[0])
        {
          do
          {
            v171 = (_QWORD *)*v169;
            v172 = (void *)v169[8];
            if (v172)
            {
              v169[9] = v172;
              operator delete(v172);
            }
            operator delete(v169);
            v169 = v171;
          }
          while (v171);
        }
        v170 = (void *)__n[0];
        __n[0] = 0;
        if (v170)
          operator delete(v170);
LABEL_148:
        v116 = (char *)v194;
        if (!v194)
          goto LABEL_150;
        goto LABEL_149;
      }
      v165 = sub_239C14540(v209);
    }
    if (v165)
    {
      for (i = v210; i; i = (uint64_t *)*i)
      {
        v167 = sub_239BF5CF4((uint64_t)a1, i[2]);
        v168 = *(_OWORD *)(i + 15);
        v167[22] = i[17];
        *((_OWORD *)v167 + 10) = v168;
      }
      v19 = 1;
    }
    else
    {
      v19 = 0;
    }
    goto LABEL_257;
  }
  v19 = 0;
  if (v195)
  {
LABEL_149:
    v195 = v116;
    operator delete(v116);
  }
LABEL_150:
  if (v115)
    operator delete(v115);
  v118 = v198[0];
  if (v198[0])
  {
    do
    {
      v119 = (_QWORD *)*v118;
      operator delete(v118);
      v118 = v119;
    }
    while (v119);
  }
  v120 = v197[0];
  v197[0] = 0;
  if (v120)
    operator delete(v120);
  v18 = v200;
  if (v200)
  {
LABEL_5:
    v201 = v18;
    operator delete(v18);
  }
LABEL_6:
  v20 = __p[0];
  if (__p[0])
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = v203[0];
  v203[0] = 0;
  if (v22)
    operator delete(v22);
  if (v206)
  {
    v207 = (unint64_t *)v206;
    operator delete(v206);
  }
  return v19;
}

void sub_239C62DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59)
{
  if (__p)
    operator delete(__p);
  if (a36)
    operator delete(a36);
  sub_239420950((uint64_t)&a45);
  if (a50)
  {
    a51 = (uint64_t)a50;
    operator delete(a50);
  }
  sub_239420950((uint64_t)&a53);
  if (!a58)
    _Unwind_Resume(a1);
  a59 = (uint64_t)a58;
  operator delete(a58);
  _Unwind_Resume(a1);
}

void sub_239C63118(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,_QWORD *__p)
{
  _QWORD *v55;
  _QWORD *v56;

  v55 = __p;
  if (__p)
  {
    do
    {
      v56 = (_QWORD *)*v55;
      operator delete(v55);
      v55 = v56;
    }
    while (v56);
  }
  if (a53)
    operator delete(a53);
  JUMPOUT(0x239C630F8);
}

uint64_t sub_239C63148(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  float64x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  long double v72;
  unint64_t v73;
  unint64_t v74;
  double v75;
  long double v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  void *v84;
  int v86;
  _OWORD *v87;
  __int128 v88;
  __int128 v89;
  float64x2_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  float64x2_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unint64_t v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  double v107;
  unint64_t v108;
  double v109;
  long double v110;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  float64x2_t v121;
  __int128 v122;
  __int128 v123;
  float64x2_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  float64x2_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  char *v134;
  uint64_t v136;
  float64x2_t *v137;
  uint64_t v138;
  unint64_t v139;
  float64x2_t v140;
  void *v141;
  char *v142;
  char *v143;
  void *v144;
  char *v145;
  char *v146;
  void *v147;
  char *v148;
  char *v149;
  float64x2_t v150;
  int v151;
  unint64_t v152;
  _BYTE v153[2281];
  _BYTE v154[32];
  _BYTE v155[24];
  __int128 v156;
  __int128 v157;
  float64x2_t v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  float64x2_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  float64x2_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  double v179;
  void **v180;
  void **v181;
  void **v182;
  char v183;
  char v184;
  char v185;
  void *__p;
  void *v187;
  uint64_t v188;
  void *__src;
  unint64_t v190;
  unint64_t v191;
  unsigned int v192;
  unsigned int v193;
  char *v194;
  int v195;
  char v196;
  uint64_t v197;
  int v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  float64x2_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  float64x2_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  float64x2_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  float64x2_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  float64x2_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  float64x2_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v138 = v6;
  v247 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t)v2 - v1;
  if ((unint64_t)v2 - v1 < 0x30)
    return 0;
  v137 = v5;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v141 = 0;
  v142 = 0;
  v143 = 0;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF9)
    sub_2394189F8();
  v9 = v4;
  v10 = v3;
  v11 = v2;
  v12 = (uint64_t *)v1;
  v13 = 2 * v7;
  v14 = (char *)operator new(2 * v7);
  v15 = v7 >> 3;
  v147 = v14;
  v148 = v14;
  v149 = &v14[16 * (v7 >> 3)];
  v16 = (char *)operator new(2 * v7);
  v144 = v16;
  v145 = v16;
  v146 = &v16[16 * v15];
  v17 = (char *)operator new(v13);
  v141 = v17;
  v142 = v17;
  v143 = &v17[16 * v15];
  v18 = v16;
  v19 = v14;
  if (v12 != v11)
  {
    __asm { FMOV            V0.2D, #1.0 }
    v140 = _Q0;
    do
    {
      v25 = *v12;
      v26 = *v12;
      v27 = v10[1];
      if ((v27 & (v27 - 1)) != 0)
      {
        v29 = *v12;
        if (v27 <= v26)
          v29 = v26 % v27;
        v28 = *(uint64_t **)(*v10 + 8 * v29);
        do
        {
          do
            v28 = (uint64_t *)*v28;
          while (v28[1] != v26);
        }
        while (*((_DWORD *)v28 + 4) != (_DWORD)v25);
      }
      else
      {
        v28 = *(uint64_t **)(*v10 + 8 * (((_DWORD)v27 - 1) & v26));
        do
        {
          do
            v28 = (uint64_t *)*v28;
          while (v28[1] != v26);
        }
        while (*((_DWORD *)v28 + 4) != (_DWORD)v25);
      }
      v150 = vmlaq_f64(vdivq_f64(vnegq_f64(*(float64x2_t *)(v9 + 16)), *(float64x2_t *)v9), vdivq_f64(v140, *(float64x2_t *)v9), *(float64x2_t *)(v28 + 5));
      sub_239465308((unsigned __int8 *)(v9 + 32), v150.f64, 5, (double *)v155);
      v30 = v148;
      if (v148 >= v149)
      {
        v32 = (char *)v147;
        v33 = (v148 - (_BYTE *)v147) >> 4;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 60)
          sub_2394189F8();
        v35 = v149 - (_BYTE *)v147;
        if ((v149 - (_BYTE *)v147) >> 3 > v34)
          v34 = v35 >> 3;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          if (v36 >> 60)
            sub_239418A80();
          v37 = (char *)operator new(16 * v36);
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[16 * v33];
        *(_OWORD *)v38 = *(_OWORD *)v155;
        v39 = v38;
        if (v30 != v32)
        {
          do
          {
            *((_OWORD *)v39 - 1) = *((_OWORD *)v30 - 1);
            v39 -= 16;
            v30 -= 16;
          }
          while (v30 != v32);
          v30 = (char *)v147;
        }
        v31 = v38 + 16;
        v147 = v39;
        v148 = v38 + 16;
        v149 = &v37[16 * v36];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_OWORD *)v148 = *(_OWORD *)v155;
        v31 = v30 + 16;
      }
      v148 = v31;
      v40 = v10[6];
      if ((v40 & (v40 - 1)) != 0)
      {
        v42 = v26;
        if (v40 <= v26)
          v42 = v26 % v40;
        v41 = *(uint64_t **)(v10[5] + 8 * v42);
        do
        {
          do
            v41 = (uint64_t *)*v41;
          while (v41[1] != v26);
        }
        while (*((_DWORD *)v41 + 4) != (_DWORD)v25);
      }
      else
      {
        v41 = *(uint64_t **)(v10[5] + 8 * (((_DWORD)v40 - 1) & v26));
        do
        {
          do
            v41 = (uint64_t *)*v41;
          while (v41[1] != v26);
        }
        while (*((_DWORD *)v41 + 4) != (_DWORD)v25);
      }
      v150 = vmlaq_f64(vdivq_f64(vnegq_f64(*(float64x2_t *)(v9 + 208)), *(float64x2_t *)(v9 + 192)), vdivq_f64(v140, *(float64x2_t *)(v9 + 192)), *(float64x2_t *)(v41 + 5));
      sub_239465308((unsigned __int8 *)(v9 + 224), v150.f64, 5, (double *)v155);
      v43 = v145;
      if (v145 >= v146)
      {
        v45 = (char *)v144;
        v46 = (v145 - (_BYTE *)v144) >> 4;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60)
          sub_2394189F8();
        v48 = v146 - (_BYTE *)v144;
        if ((v146 - (_BYTE *)v144) >> 3 > v47)
          v47 = v48 >> 3;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
          v49 = 0xFFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          if (v49 >> 60)
            sub_239418A80();
          v50 = (char *)operator new(16 * v49);
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[16 * v46];
        *(_OWORD *)v51 = *(_OWORD *)v155;
        v52 = v51;
        if (v43 != v45)
        {
          do
          {
            *((_OWORD *)v52 - 1) = *((_OWORD *)v43 - 1);
            v52 -= 16;
            v43 -= 16;
          }
          while (v43 != v45);
          v43 = (char *)v144;
        }
        v44 = v51 + 16;
        v144 = v52;
        v145 = v51 + 16;
        v146 = &v50[16 * v49];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_OWORD *)v145 = *(_OWORD *)v155;
        v44 = v43 + 16;
      }
      v145 = v44;
      v53 = v10[11];
      if ((v53 & (v53 - 1)) != 0)
      {
        v55 = v26;
        if (v53 <= v26)
          v55 = v26 % v53;
        v54 = *(uint64_t **)(v10[10] + 8 * v55);
        do
        {
          do
            v54 = (uint64_t *)*v54;
          while (v54[1] != v26);
        }
        while (*((_DWORD *)v54 + 4) != (_DWORD)v25);
      }
      else
      {
        v54 = *(uint64_t **)(v10[10] + 8 * (((_DWORD)v53 - 1) & v26));
        do
        {
          do
            v54 = (uint64_t *)*v54;
          while (v54[1] != v26);
        }
        while (*((_DWORD *)v54 + 4) != (_DWORD)v25);
      }
      v150 = vmlaq_f64(vdivq_f64(vnegq_f64(*(float64x2_t *)(v9 + 400)), *(float64x2_t *)(v9 + 384)), vdivq_f64(v140, *(float64x2_t *)(v9 + 384)), *(float64x2_t *)(v54 + 5));
      sub_239465308((unsigned __int8 *)(v9 + 416), v150.f64, 5, (double *)v155);
      v56 = v142;
      if (v142 < v143)
      {
        *(_OWORD *)v142 = *(_OWORD *)v155;
        v17 = v56 + 16;
      }
      else
      {
        v57 = (char *)v141;
        v58 = (v142 - (_BYTE *)v141) >> 4;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 60)
          sub_2394189F8();
        v60 = v143 - (_BYTE *)v141;
        if ((v143 - (_BYTE *)v141) >> 3 > v59)
          v59 = v60 >> 3;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0)
          v61 = 0xFFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          if (v61 >> 60)
            sub_239418A80();
          v62 = (char *)operator new(16 * v61);
        }
        else
        {
          v62 = 0;
        }
        v63 = &v62[16 * v58];
        *(_OWORD *)v63 = *(_OWORD *)v155;
        v64 = v63;
        if (v56 != v57)
        {
          do
          {
            *((_OWORD *)v64 - 1) = *((_OWORD *)v56 - 1);
            v64 -= 16;
            v56 -= 16;
          }
          while (v56 != v57);
          v56 = (char *)v141;
        }
        v17 = v63 + 16;
        v141 = v64;
        v142 = v63 + 16;
        v143 = &v62[16 * v61];
        if (v56)
          operator delete(v56);
      }
      v142 = v17;
      ++v12;
    }
    while (v12 != v11);
    v14 = (char *)v147;
    v19 = v148;
    v16 = (char *)v144;
    v18 = v145;
  }
  v219 = xmmword_239F13AC0;
  v220 = unk_239F13AD0;
  v221 = xmmword_239F13AE0;
  v222 = unk_239F13AF0;
  v215 = xmmword_239F13A80;
  v216 = *(_OWORD *)algn_239F13A90;
  v217 = xmmword_239F13AA0;
  v218 = xmmword_239F13AB0;
  v211 = xmmword_239F13AC0;
  v212 = unk_239F13AD0;
  v213 = xmmword_239F13AE0;
  v214 = unk_239F13AF0;
  v207 = xmmword_239F13A80;
  v208 = *(_OWORD *)algn_239F13A90;
  v209 = xmmword_239F13AA0;
  v210 = xmmword_239F13AB0;
  v203 = xmmword_239F13AC0;
  v204 = unk_239F13AD0;
  v205 = xmmword_239F13AE0;
  v206 = unk_239F13AF0;
  v65 = v19 - v14;
  v199 = xmmword_239F13A80;
  v200 = *(_OWORD *)algn_239F13A90;
  v66 = (v19 - v14) >> 4;
  v67 = v18 - v16;
  v201 = xmmword_239F13AA0;
  v202 = xmmword_239F13AB0;
  v8 = 0;
  if (v66 != v67 >> 4 || v65 < 0x50 || v66 != (v17 - (_BYTE *)v141) >> 4)
    goto LABEL_153;
  v68 = v137[1].f64[1];
  v159 = xmmword_239F13AC0;
  v160 = unk_239F13AD0;
  v161 = xmmword_239F13AE0;
  v162 = unk_239F13AF0;
  *(_OWORD *)&v155[8] = xmmword_239F13A80;
  v156 = *(_OWORD *)algn_239F13A90;
  v157 = xmmword_239F13AA0;
  v158 = xmmword_239F13AB0;
  v167 = xmmword_239F13AC0;
  v168 = unk_239F13AD0;
  v169 = xmmword_239F13AE0;
  v170 = unk_239F13AF0;
  v163 = xmmword_239F13A80;
  v164 = *(_OWORD *)algn_239F13A90;
  v165 = xmmword_239F13AA0;
  v166 = xmmword_239F13AB0;
  v171 = xmmword_239F13A80;
  v172 = *(_OWORD *)algn_239F13A90;
  v173 = xmmword_239F13AA0;
  v174 = xmmword_239F13AB0;
  v175 = xmmword_239F13AC0;
  v176 = unk_239F13AD0;
  v177 = xmmword_239F13AE0;
  v178 = unk_239F13AF0;
  *(_QWORD *)v155 = &off_250AFC040;
  v179 = v68 * v68;
  v180 = &v147;
  v181 = &v144;
  v182 = &v141;
  v183 = 0;
  v184 = 0;
  v69 = *(_QWORD *)&v137->f64[0];
  v150 = v137[2];
  v151 = 5;
  v152 = v69;
  LODWORD(v223) = 0;
  sub_239454CD8((int *)&v223, (uint64_t)v153);
  v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 16))((uint64_t)v155);
  v193 = v70;
  v71 = (*(uint64_t (__cdecl **)())(*(_QWORD *)v155 + 24))();
  v192 = v71;
  v72 = v150.f64[1];
  LODWORD(v73) = 1;
  if (v150.f64[1] < 1.0 && v150.f64[1] > 0.0)
  {
    *(double *)&v74 = log(1.0 - v150.f64[0]);
    v75 = *(double *)&v74;
    LODWORD(v74) = v151;
    v76 = pow(v72, (double)v74);
    v73 = vcvtpd_u64_f64(v75 / log(1.0 - v76));
    if (v73 == -1)
    {
      v136 = 120;
LABEL_173:
      sub_239A444D4((uint64_t)"unknown file", v136, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  if (v70 < v71)
  {
    v136 = 171;
    goto LABEL_173;
  }
  v227 = xmmword_239F13AC0;
  v228 = unk_239F13AD0;
  v229 = xmmword_239F13AE0;
  v230 = unk_239F13AF0;
  v223 = xmmword_239F13A80;
  v224 = *(_OWORD *)algn_239F13A90;
  v225 = xmmword_239F13AA0;
  v226 = xmmword_239F13AB0;
  v231 = xmmword_239F13A80;
  v232 = *(_OWORD *)algn_239F13A90;
  v233 = xmmword_239F13AA0;
  v234 = xmmword_239F13AB0;
  v237 = xmmword_239F13AE0;
  v238 = unk_239F13AF0;
  v235 = xmmword_239F13AC0;
  v236 = unk_239F13AD0;
  v239 = xmmword_239F13A80;
  v240 = *(_OWORD *)algn_239F13A90;
  v245 = xmmword_239F13AE0;
  v246 = unk_239F13AF0;
  v241 = xmmword_239F13AA0;
  v242 = xmmword_239F13AB0;
  v243 = xmmword_239F13AC0;
  v244 = unk_239F13AD0;
  v190 = 0;
  __src = 0;
  v191 = 0;
  if (v70)
  {
    v77 = ((unint64_t)v70 - 1) >> 6;
    v78 = operator new(8 * (v77 + 1));
    v79 = v78;
    v191 = v77 + 1;
    __src = v78;
    v190 = v70;
    if (v70 >= 0x41)
      v80 = ((unint64_t)v70 - 1) >> 6;
    else
      v80 = 0;
    v78[v80] = 0;
    if (v70 >= 0x40)
      bzero(v78, 8 * ((unint64_t)v70 >> 6));
    if ((v70 & 0x3F) != 0)
      v79[(unint64_t)v70 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v70 & 0x3F));
  }
  v139 = v73;
  if ((_DWORD)v73)
  {
    v81 = 0;
    v82 = -2147483647;
    while (1)
    {
      if (v192 > v193)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v193)
      {
        if ((double)v193 * 0.5 >= (double)v192)
          sub_239455384((uint64_t)v153, &v193, (int *)&v192, (int32x4_t **)&__p);
        else
          sub_2394551BC((uint64_t)v153, &v193, &v192, (int32x4_t **)&__p);
      }
      else
      {
        v187 = 0;
        __p = 0;
        v188 = 0;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v155 + 40))((uint64_t)v155, (uint64_t *)&__p))
        break;
      v83 = 1;
      v84 = __p;
      if (__p)
        goto LABEL_107;
LABEL_108:
      if (v139 - 1 == v81++ || !v83)
        goto LABEL_146;
    }
    v86 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v155 + 32))((uint64_t)v155, (uint64_t *)&__src);
    if (v86 <= v82)
    {
      v100 = v190;
    }
    else
    {
      v87 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 48))((uint64_t)v155);
      v227 = v87[4];
      v228 = v87[5];
      v229 = v87[6];
      v88 = v87[8];
      v230 = v87[7];
      v223 = *v87;
      v224 = v87[1];
      v225 = v87[2];
      v226 = *((float64x2_t *)v87 + 3);
      v89 = v87[9];
      v90 = *((float64x2_t *)v87 + 11);
      v233 = v87[10];
      v234 = v90;
      v231 = v88;
      v232 = v89;
      v91 = v87[12];
      v92 = v87[13];
      v93 = v87[15];
      v237 = v87[14];
      v238 = v93;
      v235 = v91;
      v236 = v92;
      v94 = v87[16];
      v95 = v87[17];
      v96 = *((float64x2_t *)v87 + 19);
      v241 = v87[18];
      v242 = v96;
      v239 = v94;
      v240 = v95;
      v97 = v87[20];
      v98 = v87[21];
      v99 = v87[23];
      v245 = v87[22];
      v246 = v99;
      v243 = v97;
      v244 = v98;
      v100 = v190;
      if (&__src != (void **)v138)
      {
        if (v190)
        {
          v101 = *(void **)v138;
          if (v190 <= *(_QWORD *)(v138 + 16) << 6)
          {
            v102 = v190 - 1;
          }
          else
          {
            if (v101)
            {
              operator delete(v101);
              *(_QWORD *)v138 = 0;
              *(_QWORD *)(v138 + 8) = 0;
              *(_QWORD *)(v138 + 16) = 0;
              v100 = v190;
            }
            if ((v100 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v102 = v100 - 1;
            v103 = ((v100 - 1) >> 6) + 1;
            v101 = operator new(8 * v103);
            *(_QWORD *)v138 = v101;
            *(_QWORD *)(v138 + 8) = 0;
            *(_QWORD *)(v138 + 16) = v103;
          }
          memmove(v101, __src, ((v102 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v100 = v190;
        }
        *(_QWORD *)(v138 + 8) = v100;
      }
      v82 = v86;
    }
    v185 = 1;
    v197 = (uint64_t)__src;
    v198 = 0;
    v194 = (char *)__src + 8 * (v100 >> 6);
    v195 = v100 & 0x3F;
    v104 = sub_239458E50((uint64_t)&v197, (uint64_t)&v194, &v185);
    v106 = v139;
    if (v104)
    {
      LODWORD(v105) = v193;
      v107 = (double)v104 / (double)v105;
      if (v107 >= 1.0)
      {
        v106 = 1;
      }
      else
      {
        v106 = 1;
        if (v107 > 0.0)
        {
          *(double *)&v108 = log(1.0 - v150.f64[0]);
          v109 = *(double *)&v108 * 3.0;
          LODWORD(v108) = v151;
          v110 = pow(v107, (double)v108);
          v106 = vcvtpd_u64_f64(v109 / log(1.0 - v110));
          if (v106 == -1)
          {
            sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
        }
      }
    }
    v83 = v106 > v81 || v152 > v81;
    v84 = __p;
    if (!__p)
      goto LABEL_108;
LABEL_107:
    v187 = v84;
    operator delete(v84);
    goto LABEL_108;
  }
LABEL_146:
  v159 = v227;
  v160 = v228;
  v161 = v229;
  v162 = v230;
  *(_OWORD *)&v155[8] = v223;
  v156 = v224;
  v157 = v225;
  v158 = v226;
  v165 = v233;
  v166 = v234;
  v163 = v231;
  v164 = v232;
  v169 = v237;
  v170 = v238;
  v167 = v235;
  v168 = v236;
  v173 = v241;
  v174 = v242;
  v171 = v239;
  v172 = v240;
  v177 = v245;
  v178 = v246;
  v175 = v243;
  v176 = v244;
  v112 = *(void **)v138;
  v113 = *(_QWORD *)v138 + 8 * (*(_QWORD *)(v138 + 8) >> 6);
  v114 = *(_QWORD *)(v138 + 8) & 0x3FLL;
  v196 = 1;
  __p = v112;
  LODWORD(v187) = 0;
  v197 = v113;
  v198 = v114;
  v115 = sub_239458E50((uint64_t)&__p, (uint64_t)&v197, &v196);
  if (__src)
    operator delete(__src);
  v116 = (v148 - (_BYTE *)v147) >> 4;
  v117 = *(_QWORD *)&v137[1].f64[0];
  if (v117 >= v116)
    v117 = (v148 - (_BYTE *)v147) >> 4;
  if (v115 < (int)v117 || (double)v115 / (double)v116 < v137[3].f64[0])
  {
    sub_239911CF8((uint64_t)v154);
    v8 = 0;
    v134 = (char *)v141;
    if (!v141)
      goto LABEL_155;
    goto LABEL_154;
  }
  v219 = v159;
  v220 = v160;
  v221 = v161;
  v222 = v162;
  v215 = *(_OWORD *)&v155[8];
  v216 = v156;
  v217 = v157;
  v218 = v158;
  v209 = v165;
  v210 = v166;
  v207 = v163;
  v208 = v164;
  v213 = v169;
  v214 = v170;
  v211 = v167;
  v212 = v168;
  v201 = v173;
  v202 = v174;
  v199 = v171;
  v200 = v172;
  v205 = v177;
  v206 = v178;
  v203 = v175;
  v204 = v176;
  sub_239911CF8((uint64_t)v154);
  v118 = v220;
  *(_OWORD *)(v9 + 128) = v219;
  *(_OWORD *)(v9 + 144) = v118;
  v119 = v222;
  *(_OWORD *)(v9 + 160) = v221;
  *(_OWORD *)(v9 + 176) = v119;
  v120 = v216;
  *(_OWORD *)(v9 + 64) = v215;
  *(_OWORD *)(v9 + 80) = v120;
  v121 = v218;
  *(_OWORD *)(v9 + 96) = v217;
  *(float64x2_t *)(v9 + 112) = v121;
  v122 = v207;
  v123 = v208;
  v124 = v210;
  *(_OWORD *)(v9 + 288) = v209;
  *(float64x2_t *)(v9 + 304) = v124;
  *(_OWORD *)(v9 + 256) = v122;
  *(_OWORD *)(v9 + 272) = v123;
  v125 = v211;
  v126 = v212;
  v127 = v214;
  *(_OWORD *)(v9 + 352) = v213;
  *(_OWORD *)(v9 + 368) = v127;
  *(_OWORD *)(v9 + 320) = v125;
  *(_OWORD *)(v9 + 336) = v126;
  v128 = v199;
  v129 = v200;
  v130 = v202;
  *(_OWORD *)(v9 + 480) = v201;
  *(float64x2_t *)(v9 + 496) = v130;
  *(_OWORD *)(v9 + 448) = v128;
  *(_OWORD *)(v9 + 464) = v129;
  v131 = v203;
  v132 = v204;
  v133 = v206;
  *(_OWORD *)(v9 + 544) = v205;
  *(_OWORD *)(v9 + 560) = v133;
  v8 = 1;
  *(_OWORD *)(v9 + 512) = v131;
  *(_OWORD *)(v9 + 528) = v132;
LABEL_153:
  v134 = (char *)v141;
  if (v141)
  {
LABEL_154:
    v142 = v134;
    operator delete(v134);
  }
LABEL_155:
  if (v144)
  {
    v145 = (char *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = (char *)v147;
    operator delete(v147);
  }
  return v8;
}

void sub_239C63FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36)
{
  void *v37;
  void *v38;
  void *v39;

  v37 = (void *)STACK[0xE30];
  if (STACK[0xE30])
  {
    STACK[0xE38] = (unint64_t)v37;
    operator delete(v37);
  }
  if (STACK[0xE48])
    operator delete((void *)STACK[0xE48]);
  sub_239911CF8((uint64_t)&STACK[0xAD8]);
  if (a30)
  {
    operator delete(a30);
    v38 = a33;
    if (!a33)
    {
LABEL_7:
      v39 = a36;
      if (!a36)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  else
  {
    v38 = a33;
    if (!a33)
      goto LABEL_7;
  }
  operator delete(v38);
  v39 = a36;
  if (!a36)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(v39);
  _Unwind_Resume(a1);
}

void sub_239C640B0()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239C640C4(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 8) - **(_QWORD **)(a1 + 400)) >> 4;
}

uint64_t sub_239C640D8()
{
  return 5;
}

uint64_t sub_239C640E0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v37;
  double v50;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v57;
  double v63;
  float64x2_t v65;
  float64x2_t v69;
  float64x2_t v70;
  double v74;
  float64_t v77;
  double v81;
  double v82;
  float64x2_t v84;
  double v95;
  double v124;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  float64_t v135;
  double v136;
  float64_t v137;
  double v138;
  float64_t v139;
  float64_t v140;
  double v141;
  double v142;
  double v143;
  float64_t v144;
  double v145;
  double v146;
  float64_t v147;
  float64_t v148;
  float64_t v149;
  float64_t v150;
  double v151;
  float64_t v152;
  double v153;
  float64_t v154;
  float64_t v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  float64_t v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  float64_t v173;
  double v174;
  double v175;
  float64_t v176;
  double v177;
  double v178;
  double v179;
  float64x2_t v180;
  double v181;
  double v182;
  double v183;
  float64_t v184;
  double v185;
  double v186;
  float64_t v187;
  float64_t v188;
  double v189;
  double v190;
  float64_t v191;
  float64_t v192;
  float64x2_t v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  float64x2_t v203;
  float64x2_t v204;
  double v205;
  double v206;
  double v207;
  float64x2_t v208;
  float64x2_t v209;
  double v210;
  float64_t v211;
  double v212;
  float64x2_t v213;
  float64x2_t v214;
  double v215;
  float64x2_t v216;
  double v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  double v223;
  double v224;
  __int128 v225;
  double v226;
  uint64_t v227;
  double v228;
  __int128 v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;

  sub_23941C5D8((uint64_t)a2, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 400) + 8) - **(_QWORD **)(a1 + 400)) >> 4, 0);
  v4 = *(uint64_t **)(a1 + 400);
  v5 = *v4;
  if (v4[1] == *v4)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v11 = **(_QWORD **)(a1 + 408);
    if (v8 >= (*(_QWORD *)(*(_QWORD *)(a1 + 408) + 8) - v11) >> 4
      || (v12 = **(_QWORD **)(a1 + 416), v8 >= (*(_QWORD *)(*(_QWORD *)(a1 + 416) + 8) - v12) >> 4))
    {
      sub_23941D884();
    }
    v13 = (double *)(v11 + v6);
    v14 = (double *)(v12 + v6);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v16 = *(float64x2_t *)(v15 + 32);
    _Q1 = *(float64x2_t *)(v15 + 96);
    v18.f64[0] = *(float64_t *)(v15 + 16);
    v20 = *(float64x2_t *)(v15 + 128);
    v19 = *(float64x2_t *)(v15 + 144);
    v21 = vmulq_n_f64(v20, v18.f64[0]);
    _Q15 = vmulq_n_f64(v19, v18.f64[0]);
    _Q21 = *(float64x2_t *)(v15 + 256);
    v23 = *(float64x2_t *)(v15 + 272);
    v25 = vmulq_n_f64(_Q21, v18.f64[0]);
    v209 = v25;
    _Q14 = vmulq_n_f64(v23, v18.f64[0]);
    v25.f64[0] = *(float64_t *)(v15 + 48);
    _D6 = *(double *)(v15 + 112);
    v18.f64[1] = v25.f64[0];
    v28 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v15, (int64x2_t)v16), vnegq_f64(_Q1).f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v15, (int64x2_t)v16), _Q1, 1), v18, _D6, 0);
    v29 = *(float64x2_t *)(v15 + 64);
    v31 = *(float64x2_t *)(v15 + 160);
    v30 = *(float64x2_t *)(v15 + 176);
    v33 = *(float64x2_t *)(v15 + 192);
    v32 = *(float64x2_t *)(v15 + 208);
    v35 = *(float64x2_t *)(v15 + 224);
    v34 = *(float64x2_t *)(v15 + 240);
    _Q24 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, *(double *)v15), v31, v16.f64[0]), v33, v29.f64[0]), (float64x2_t)0, v35);
    v37 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, *(double *)v15), v30, v16.f64[0]), v32, v29.f64[0]), (float64x2_t)0, v34).f64[0];
    _D30 = *(double *)(v15 + 80);
    _Q18 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v20, *(float64x2_t *)v15, 1), v31, v16, 1), v33, v29, 1), (float64x2_t)0, v35);
    _Q10 = *(float64x2_t *)(v15 + 288);
    _Q9 = *(float64x2_t *)(v15 + 304);
    _Q12 = *(float64x2_t *)(v15 + 320);
    _Q11 = *(float64x2_t *)(v15 + 336);
    _D31 = *(_QWORD *)(v15 + 72);
    __asm { FMLS            D23, D31, V1.D[1] }
    v50 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v19, *(float64x2_t *)v15, 1), v30, v16, 1), v32, v29, 1), (float64x2_t)0, v34).f64[0];
    _Q31 = vmlaq_n_f64(v21, v31, v25.f64[0]);
    v53 = *(float64x2_t *)(v15 + 352);
    v52 = *(float64x2_t *)(v15 + 368);
    __asm { FMLS            D23, D30, V6.D[0] }
    v208 = vmlaq_f64(vmlaq_n_f64(_Q31, v33, _D30), (float64x2_t)0, v35);
    v204 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(_Q15, v30, v25.f64[0]), v32, _D30), (float64x2_t)0, v34);
    _Q26 = vaddq_f64(v35, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v20, v28.f64[0]), v31, v28, 1), v33, _D23));
    _Q5 = vaddq_f64(v34, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v19, v28.f64[0]), v30, v28, 1), v32, _D23));
    v57 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q21, *(double *)v15), _Q10, v16.f64[0]), _Q12, v29.f64[0]), (float64x2_t)0, v53);
    _Q25 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v23, *(double *)v15), _Q9, v16.f64[0]), _Q11, v29.f64[0]), (float64x2_t)0, v52);
    _Q27 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(_Q21, *(float64x2_t *)v15, 1), _Q10, v16, 1), _Q12, v29, 1), (float64x2_t)0, v53);
    _Q17 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v23, *(float64x2_t *)v15, 1), _Q9, v16, 1), _Q11, v29, 1), (float64x2_t)0, v52);
    _Q28 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v209, _Q10, v25.f64[0]), _Q12, _D30), (float64x2_t)0, v53);
    _Q7 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(_Q14, _Q9, v25.f64[0]), _Q11, _D30), (float64x2_t)0, v52);
    v63 = vaddq_f64(v52, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v28.f64[0]), _Q9, v28, 1), _Q11, _D23)).f64[0];
    _Q23 = vaddq_f64(v53, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q21, v28.f64[0]), _Q10, v28, 1), _Q12, _D23));
    v52.f64[0] = _Q23.f64[0] * v37;
    *(_QWORD *)&v16.f64[0] = vdupq_laneq_s64((int64x2_t)_Q23, 1).u64[0];
    v25.f64[0] = vmuld_lane_f64(v37, _Q23, 1);
    v31.f64[0] = vmuld_n_f64(v37, v63);
    v65 = v57;
    _Q4 = vmulq_n_f64(_Q26, v57.f64[0]);
    _Q13 = _Q5;
    _Q5.f64[0] = vmuld_n_f64(_Q5.f64[0], v57.f64[0]);
    _Q6 = vmulq_laneq_f64(_Q26, v57, 1);
    v57.f64[0] = vmuld_lane_f64(_Q13.f64[0], v57, 1);
    *(_QWORD *)&_Q11.f64[0] = *(_OWORD *)&vsubq_f64(v52, _Q5);
    v221 = vmlaq_n_f64(vnegq_f64(_Q4), _Q24, _Q23.f64[0]);
    v218 = vmlaq_laneq_f64(vnegq_f64(_Q6), _Q24, _Q23, 1);
    v69 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(_Q26, _Q25.f64[0])), _Q24, v63);
    v212 = vsubq_f64(v25, v57).f64[0];
    v213 = v69;
    v69.f64[0] = _Q23.f64[0] * v50;
    v25.f64[0] = vmuld_lane_f64(v50, _Q23, 1);
    v70.f64[0] = vmuld_n_f64(v50, v63);
    _Q5.f64[0] = vmuld_n_f64(_Q13.f64[0], _Q27.f64[0]);
    v57.f64[0] = vmuld_lane_f64(_Q13.f64[0], _Q27, 1);
    _Q31.f64[0] = vsubq_f64(v69, _Q5).f64[0];
    v220 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(_Q26, _Q27.f64[0])), _Q18, _Q23.f64[0]);
    _Q9.f64[0] = vsubq_f64(v25, v57).f64[0];
    v219 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(_Q26, _Q27, 1)), _Q18, _Q23, 1);
    _Q1 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(_Q26, _Q17.f64[0])), _Q18, v63);
    v203 = _Q1;
    v179 = _Q17.f64[0];
    _Q1.f64[0] = vmuld_lane_f64(v204.f64[0], _Q23, 1);
    v193 = _Q23;
    v25.f64[0] = vmuld_lane_f64(_Q13.f64[0], _Q28, 1);
    v217 = vsubq_f64(_Q1, v25).f64[0];
    v25.f64[0] = 0.0;
    v25.f64[1] = v63;
    v16.f64[1] = -_Q23.f64[0];
    v191 = v65.f64[1];
    _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, v65.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v63), v65, 1), v16, _Q25.f64[0]);
    _Q19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q27.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v63), _Q27, 1), v16, _Q17.f64[0]);
    v215 = vmlsq_f64(v31, _Q13, _Q25).f64[0];
    v216 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v25, _Q28.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v63), _Q28, 1), v16, _Q7.f64[0]);
    _Q23.f64[0] = vmuld_lane_f64(*v14, _Q16, 1);
    v189 = *(double *)(v5 + v6);
    _Q14.f64[0] = v189;
    _Q6.f64[0] = v13[1];
    v156 = *v13;
    v194 = *(double *)(v5 + v6 + 8);
    v222 = _Q16;
    v223 = vmlsq_f64(v70, _Q13, _Q17).f64[0];
    v25.f64[0] = v194 * _Q6.f64[0] * v223;
    _Q10.f64[0] = vmuld_lane_f64(*v14, _Q19, 1);
    _Q17.f64[0] = v189 * _Q6.f64[0] * v215;
    v176 = -(_Q23.f64[0] * v189);
    v29.f64[0] = v14[1];
    _Q4.f64[0] = v29.f64[0] * _Q16.f64[0];
    v186 = v189 * (v29.f64[0] * _Q16.f64[0]);
    v180 = _Q19;
    v70.f64[0] = v29.f64[0] * _Q19.f64[0];
    v74 = v194 * (v29.f64[0] * _Q19.f64[0]);
    v199 = vmuld_lane_f64(v189, _Q16, 1);
    v206 = _Q31.f64[0];
    v201 = vmuld_lane_f64(v194, _Q19, 1);
    v197 = v189 * _Q16.f64[0];
    _D8 = v194 * _Q19.f64[0];
    v178 = _Q7.f64[0];
    _Q22 = vmlaq_n_f64(vnegq_f64(vmulq_n_f64(_Q26, _Q7.f64[0])), v208, v63);
    _Q1.f64[1] = v204.f64[1];
    _Q1.f64[0] = vmuld_n_f64(v204.f64[0], v63);
    _Q1.f64[0] = vmlsq_f64(_Q1, _Q13, _Q7).f64[0];
    v77 = _Q14.f64[0] * _Q14.f64[0] * _Q6.f64[0] * v215;
    _Q5.f64[0] = v189 * _Q6.f64[0] * _Q1.f64[0];
    v172 = v194 * _Q6.f64[0] * _Q1.f64[0];
    v174 = v194 * v194 * _Q6.f64[0] * v223;
    v31.f64[0] = _Q1.f64[0];
    _Q18.f64[0] = _Q23.f64[0];
    v153 = _Q23.f64[0];
    v16.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(-(_Q10.f64[0] * v194) * _Q17.f64[0] + v176 * v25.f64[0] + v186 * v25.f64[0] + v74 * _Q17.f64[0], v194 * _Q6.f64[0] * v199, _Q31.f64[0]), v189 * _Q6.f64[0] * v201, _Q11.f64[0]), -(v189 * _Q16.f64[0] * (v194 * _Q6.f64[0])), _Q9.f64[0]), -(v194 * _Q19.f64[0] * (v189 * _Q6.f64[0])), v212)- _Q23.f64[0] * v77- _Q23.f64[0] * _Q5.f64[0]- _Q10.f64[0] * v174- _Q10.f64[0] * v172;
    _Q23.f64[0] = vmuld_lane_f64(*v14, v216, 1);
    v166 = v16.f64[0]
         - _Q23.f64[0] * _Q17.f64[0]
         - _Q23.f64[0] * v25.f64[0]
         + _Q4.f64[0] * v77
         + _Q4.f64[0] * _Q5.f64[0];
    _Q19.f64[0] = v14[1] * v216.f64[0];
    v183 = v194 * (v189 * _Q16.f64[0]);
    _Q1.f64[1] = v219.f64[1];
    __asm { FMLA            D0, D2, V1.D[1] }
    v181 = -(v201 * v189);
    _Q1.f64[1] = v221.f64[1];
    __asm { FMLA            D0, D2, V1.D[1] }
    v164 = -(v199 * v194);
    _Q1.f64[1] = v220.f64[1];
    __asm { FMLA            D0, D2, V1.D[1] }
    v25.f64[0] = vmuld_lane_f64(_Q14.f64[0] * _Q14.f64[0], v213, 1);
    _Q5.f64[0] = _D0 + _Q18.f64[0] * v25.f64[0];
    v214 = _Q22;
    v81 = vmuld_lane_f64(v189, _Q22, 1);
    v157 = vmuld_lane_f64(v194 * v194, v203, 1);
    v162 = vmuld_lane_f64(v194, _Q22, 1);
    v152 = _Q5.f64[0]
         + _Q18.f64[0] * v81
         + _Q10.f64[0] * v157
         + _Q10.f64[0] * v162
         + _Q23.f64[0] * vmuld_lane_f64(v189, v213, 1)
         + _Q23.f64[0] * vmuld_lane_f64(v194, v203, 1)
         - _Q4.f64[0] * v25.f64[0]
         - _Q4.f64[0] * v81;
    v82 = *v13;
    v25.f64[0] = v189 * *v13;
    _Q1.f64[0] = v194 * *v13;
    v210 = _Q11.f64[0];
    v211 = _Q9.f64[0];
    v207 = v31.f64[0];
    v177 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(-(_Q10.f64[0] * v194) * (v25.f64[0] * v215)+ v176 * (_Q1.f64[0] * v223)+ v186 * (_Q1.f64[0] * v223)+ v74 * (v25.f64[0] * v215), _Q1.f64[0] * v199, _Q31.f64[0]), v25.f64[0] * v201, _Q11.f64[0]), -(v189 * _Q16.f64[0] * _Q1.f64[0]), _Q9.f64[0]), -(_D8 * v25.f64[0]), v212)+ v153 * (v189 * v194 * v203.f64[0])- v153 * (_Q14.f64[0] * _Q14.f64[0] * v82 * v215)- v153 * (v25.f64[0] * v31.f64[0])+ _Q10.f64[0] * (v189 * v194 * v213.f64[0])
         - _Q10.f64[0] * (v194 * v194 * v82 * v223)
         - _Q10.f64[0] * (_Q1.f64[0] * v31.f64[0])
         - _Q23.f64[0] * (v25.f64[0] * v215)
         - _Q23.f64[0] * (_Q1.f64[0] * v223)
         - _Q4.f64[0] * (v189 * v194 * v203.f64[0])
         + _Q4.f64[0] * (_Q14.f64[0] * _Q14.f64[0] * v82 * v215);
    _Q15.f64[0] = v189 * _D8;
    _Q23.f64[1] = v218.f64[1];
    v196 = v194 * v194 * v180.f64[0];
    v171 = -(v216.f64[0] * *v13);
    v195 = _Q23.f64[0];
    _Q18.f64[0] = v166 + v70.f64[0] * v174 + v70.f64[0] * v172;
    v173 = v152 - v70.f64[0] * v157 - v70.f64[0] * v162;
    v175 = _Q18.f64[0];
    v159 = vmlad_n_f64(v189 * _D8 * v218.f64[0] - v189 * _Q16.f64[0] * (v82 * v217), -(v196 * v82), _Q9.f64[0])
         - _D8 * (v82 * v217)
         + v171 * (v189 * v212)
         + v171 * (v194 * _Q9.f64[0])
         + v153 * (_Q14.f64[0] * _Q14.f64[0] * v213.f64[0])
         + v153 * (v189 * _Q22.f64[0])
         + _Q10.f64[0] * (v194 * v194 * v203.f64[0])
         + _Q10.f64[0] * (v194 * _Q22.f64[0])
         + v195 * (v189 * v213.f64[0])
         + v195 * (v194 * v203.f64[0])
         - v195 * (v82 * v31.f64[0])
         - _Q4.f64[0] * (_Q14.f64[0] * _Q14.f64[0] * v213.f64[0])
         - _Q4.f64[0] * (v189 * _Q22.f64[0])
         - v70.f64[0] * (v194 * v194 * v203.f64[0])
         - v70.f64[0] * (v194 * _Q22.f64[0]);
    _Q21.f64[1] = _Q28.f64[1];
    _Q20 = vmulq_laneq_f64(_Q26, _Q28, 1);
    v84 = vnegq_f64(vmulq_n_f64(_Q26, _Q28.f64[0]));
    _Q7.f64[1] = v208.f64[1];
    _Q26.f64[0] = v193.f64[0];
    _Q30 = vmlaq_n_f64(v84, v208, v193.f64[0]);
    _Q3 = vmlaq_laneq_f64(vnegq_f64(_Q20), v208, v193, 1);
    _Q16.f64[1] = v191;
    __asm { FMLA            D11, D26, V16.D[1] }
    _Q16.f64[1] = _Q27.f64[1];
    __asm { FMLA            D20, D26, V16.D[1] }
    v168 = _Q20.f64[0];
    _Q20.f64[0] = v193.f64[0] * v204.f64[0];
    __asm { FMLA            D7, D26, V21.D[1] }
    v170 = _Q7.f64[0];
    _Q7.f64[0] = vmuld_n_f64(_Q13.f64[0], _Q28.f64[0]);
    _Q16.f64[0] = vsubq_f64(_Q20, _Q7).f64[0];
    v163 = vmlad_n_f64(_Q11.f64[0], 0.0, _Q25.f64[0]);
    v188 = _Q30.f64[1];
    _Q9.f64[1] = v216.f64[1];
    __asm
    {
      FMLS            D17, D2, V13.D[1]
      FMLA            D17, D15, V23.D[1]
    }
    _Q7.f64[0] = vmuld_lane_f64(_Q14.f64[0] * _Q14.f64[0], v222, 1);
    _Q20.f64[0] = vmuld_lane_f64(v194 * v194, v180, 1);
    _Q13.f64[0] = v199;
    _Q21.f64[0] = _Q14.f64[0] * _Q14.f64[0] * v222.f64[0];
    _Q23.f64[0] = vmuld_lane_f64(_Q6.f64[0], v216, 1);
    _D29 = v197;
    _Q5.f64[0] = v196;
    v167 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(_Q17.f64[0], _Q6.f64[0] * _Q7.f64[0], v210) + v199 * (_Q6.f64[0] * _Q16.f64[0]), _Q6.f64[0] * _Q20.f64[0], _Q31.f64[0])+ v201 * (_Q6.f64[0] * _Q16.f64[0])+ _Q23.f64[0] * (v189 * v210)+ _Q23.f64[0] * (v194 * _Q31.f64[0]), -(_Q21.f64[0] * _Q6.f64[0]), v212)- v197 * (_Q6.f64[0] * v217), -(v196 * _Q6.f64[0]), _Q9.f64[0]);
    _Q6.f64[0] = v194 * v216.f64[0];
    _Q17.f64[1] = v219.f64[1];
    _Q15 = v220;
    __asm
    {
      FMLA            D4, D6, V17.D[1]
      FMLA            D4, D5, V17.D[1]
      FMLS            D1, D30, V9.D[1]
    }
    v209.f64[0] = _Q16.f64[0];
    _Q17 = v221;
    _Q18.f64[0] = v201;
    _Q5.f64[0] = vmuld_lane_f64(*v13, v216, 1);
    v165 = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(_Q1.f64[0], _Q3.f64[0], v216.f64[0]), v164, v220.f64[0]), *v13 * _Q7.f64[0], v210)+ v199 * (*v13 * _Q16.f64[0]), v181, v221.f64[0]), *v13 * _Q20.f64[0], _Q31.f64[0])+ v201 * (*v13 * _Q16.f64[0])+ _Q5.f64[0] * (v189 * v210)+ _Q5.f64[0] * (v194 * _Q31.f64[0]), v183, v219.f64[0]), -(_Q21.f64[0] * *v13), v212);
    v169 = v159 - _Q19.f64[0] * (v189 * v213.f64[0]);
    _Q2 = _Q22;
    __asm { FMLS            D4, D19, V2.D[1] }
    _D0 = v195;
    __asm
    {
      FMLA            D4, D0, V2.D[1]
      FMLA            D4, D8, V3.D[1]
    }
    _D0 = v189 * v216.f64[0];
    _Q16.f64[1] = v218.f64[1];
    __asm
    {
      FMLA            D4, D0, V16.D[1]
      FMLA            D4, D21, V16.D[1]
    }
    v150 = _Q30.f64[0];
    __asm
    {
      FMLS            D4, D13, V30.D[1]
      FMLS            D4, D20, V15.D[1]
    }
    _Q1.f64[0] = -(v216.f64[1] * v194);
    __asm
    {
      FMLA            D4, D1, V15.D[1]
      FMLS            D4, D18, V30.D[1]
      FMLS            D31, D18, V30.D[0]
      FMLS            D31, D19, V2.D[0]
    }
    _D0 = -(v216.f64[1] * v189);
    __asm
    {
      FMLA            D4, D0, V17.D[1]
      FMLS            D4, D7, V17.D[1]
      FMLS            D31, D7, V17.D[0]
      FMLS            D31, D13, V30.D[0]
      FMLS            D31, D20, V15.D[0]
      FMLA            D4, D29, V3.D[1]
    }
    v141 = _Q4.f64[0];
    _Q31.f64[0] = vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(vmlad_n_f64(_Q31.f64[0], _D0, v221.f64[0]), _Q1.f64[0], v220.f64[0]), _Q5.f64[0], _Q16.f64[0]), v197, _Q3.f64[0]), v196, v219.f64[0]), v194 * v216.f64[0], v219.f64[0]);
    _Q15.f64[1] = v222.f64[1];
    _Q17.f64[1] = v180.f64[1];
    _D0 = v194 * v14[1];
    __asm { FMLA            D1, D0, V17.D[1] }
    v95 = v13[1];
    _Q2.f64[0] = v14[1];
    _D29 = v212;
    _Q19.f64[1] = v213.f64[1];
    _Q13.f64[0] = v189;
    v190 = vmuld_lane_f64(v189, v213, 1);
    v192 = _Q2.f64[0] * v222.f64[0] + _Q2.f64[0] * v222.f64[0];
    v205 = vmuld_lane_f64(v189, v222, 1);
    _Q16.f64[0] = vmuld_lane_f64(*v14, v222, 1);
    v144 = _Q16.f64[0] + _Q16.f64[0];
    v204.f64[0] = vmuld_lane_f64(v194, v180, 1);
    v160 = vmlad_n_f64(vmuld_lane_f64(_Q2.f64[0], v222, 1), *v14, v222.f64[0]);
    v161 = v194 * _Q9.f64[0];
    v158 = vmlad_n_f64(vmuld_lane_f64(_Q2.f64[0], v180, 1), *v14, v180.f64[0]);
    v202 = vmuld_lane_f64(*v14, v216, 1);
    _Q30.f64[0] = vmuld_lane_f64(*v14, v180, 1);
    _Q12.f64[0] = vmuld_lane_f64(v194, v203, 1);
    _Q28.f64[0] = _Q16.f64[0];
    v198 = _Q16.f64[0];
    _Q1.f64[0] = v189 * v222.f64[0] * -2.0 * (v95 * v212)
               - v192 * v190
               + (v205 + v205) * (v95 * v210)
               + (_Q16.f64[0] + _Q16.f64[0]) * v190
               + -(v222.f64[0] * v95) * (v194 * _Q9.f64[0])
               + v204.f64[0] * (v95 * v210)
               + vmuld_lane_f64(v95, v222, 1) * (v194 * v206)
               - v194 * v180.f64[0] * (v95 * v212)
               + _Q16.f64[0] * _Q12.f64[0]
               - _Q2.f64[0] * v222.f64[0] * _Q12.f64[0]
               - v202 * (v95 * v215);
    _Q3.f64[0] = vmuld_lane_f64(v194, v213, 1);
    _Q16.f64[0] = v95 * v207;
    v184 = _Q2.f64[0] * v180.f64[0];
    _Q20.f64[0] = v194 * v95 * v223;
    v208.f64[0] = _Q2.f64[0] * v216.f64[0];
    _Q23.f64[0] = v189 * v95 * v215;
    v154 = _Q1.f64[0]
         + _Q30.f64[0] * _Q3.f64[0]
         - _Q28.f64[0] * (v95 * v207)
         - _Q2.f64[0] * v180.f64[0] * _Q3.f64[0]
         + _Q2.f64[0] * v222.f64[0] * (v95 * v207)
         + _Q2.f64[0] * v216.f64[0] * (v95 * v215)
         + v192 * _Q23.f64[0]
         - _Q28.f64[0] * _Q20.f64[0]
         + _Q2.f64[0] * v180.f64[0] * (v194 * v95 * v215);
    _Q22.f64[0] = _Q2.f64[0] * v222.f64[0];
    _Q2.f64[0] = _Q30.f64[1];
    __asm { FMLS            D28, D2, V15.D[1] }
    _Q2.f64[0] = v221.f64[1];
    __asm { FMLS            D28, D2, V9.D[1] }
    _Q3.f64[1] = v218.f64[1];
    _Q25.f64[1] = v219.f64[1];
    v200 = v194 * v180.f64[0];
    __asm
    {
      FMLA            D28, D14, V3.D[1]
      FMLS            D28, D1, V19.D[1]
    }
    _Q14.f64[0] = v95 * v216.f64[0];
    __asm { FMLS            D28, D14, V29.D[0] }
    v146 = v194 * v222.f64[0];
    __asm { FMLA            D28, D1, V25.D[1] }
    _Q6.f64[0] = _Q9.f64[0];
    v138 = v200 + v200;
    _Q5.f64[1] = v203.f64[1];
    _Q10.f64[0] = vmuld_lane_f64(v189, v203, 1);
    _Q18.f64[0] = v95 * v223;
    _Q21.f64[0] = v202;
    v182 = _Q30.f64[0];
    _D29 = v198;
    _Q10.f64[0] = (v204.f64[0] + v204.f64[0]) * (v95 * v206)
                - (v200 + v200) * (v95 * _Q9.f64[0])
                - _Q22.f64[0] * _Q10.f64[0]
                - v202 * (v95 * v223)
                - _Q30.f64[0] * (v95 * v207)
                + _Q30.f64[0] * v190
                + v198 * _Q10.f64[0]
                + -(v180.f64[0] * v95) * (v189 * v212);
    _Q30.f64[0] = v189 * v222.f64[0];
    _Q26.f64[0] = v205;
    v148 = _Q10.f64[0]
         - v189 * v222.f64[0] * (v95 * _Q9.f64[0])
         + vmuld_lane_f64(v95, v180, 1) * (v189 * v210)
         + v205 * (v95 * v206);
    v185 = _Q22.f64[0];
    _Q1.f64[0] = _Q30.f64[1];
    __asm { FMLS            D2, D1, V17.D[1] }
    _Q24.f64[1] = v220.f64[1];
    _Q27.f64[0] = v220.f64[1];
    __asm { FMLS            D2, D27, V9.D[1] }
    _Q27.f64[0] = vmuld_lane_f64(v95, v216, 1);
    __asm { FMLS            D2, D14, V6.D[0] }
    _D0 = v208.f64[0];
    __asm { FMLS            D2, D0, V5.D[1] }
    _Q3.f64[1] = v203.f64[1];
    __asm
    {
      FMLS            D2, D26, V24.D[1]
      FMLA            D2, D4, V25.D[1]
      FMLA            D2, D30, V25.D[1]
    }
    v136 = v189 * v180.f64[0];
    _Q6.f64[1] = v218.f64[1];
    __asm { FMLA            D2, D0, V6.D[1] }
    v137 = -(v180.f64[1] * v189);
    _V0.D[1] = v221.f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    v135 = _Q30.f64[0] + _Q30.f64[0];
    __asm { FMLA            D28, D1, V6.D[1] }
    _V8.D[1] = v213.f64[1];
    _Q15.f64[1] = v214.f64[1];
    __asm { FMLS            D28, D22, V15.D[1] }
    _Q19.f64[0] = v194;
    v151 = -(v222.f64[1] * v194);
    __asm
    {
      FMLA            D28, D1, V24.D[1]
      FMLA            D28, D29, V15.D[1]
      FMLA            D28, D21, V8.D[1]
    }
    _Q25.f64[0] = v204.f64[0];
    __asm { FMLS            D28, D25, V0.D[1] }
    _D0 = vmuld_lane_f64(_Q13.f64[0] * _Q13.f64[0], v222, 1);
    v147 = _Q13.f64[0] * _Q13.f64[0];
    __asm { FMLA            D10, D0, V8.D[1] }
    _Q4.f64[0] = vmuld_lane_f64(_Q19.f64[0] * _Q19.f64[0], v180, 1);
    _Q11.f64[1] = v203.f64[1];
    __asm
    {
      FMLA            D10, D4, V3.D[1]
      FMLA            D10, D25, V15.D[1]
    }
    v142 = vmuld_lane_f64(v189, v216, 1);
    __asm { FMLA            D10, D3, V8.D[1] }
    v143 = vmuld_lane_f64(v194, v216, 1);
    __asm { FMLA            D10, D3, V11.D[1] }
    _Q1.f64[0] = v207;
    __asm { FMLS            D10, D27, V1.D[0] }
    _Q13.f64[0] = v184;
    _Q10.f64[1] = v213.f64[1];
    _Q21.f64[0] = v194 * v180.f64[0];
    __asm { FMLS            D8, D21, V15.D[1] }
    v140 = -(v216.f64[0] * v194);
    __asm { FMLA            D8, D3, V11.D[1] }
    _D0 = v147 * v222.f64[0];
    __asm { FMLS            D8, D0, V10.D[1] }
    _Q1.f64[0] = v189 * v222.f64[0];
    __asm { FMLS            D8, D1, V15.D[1] }
    v139 = _Q19.f64[0] * _Q19.f64[0] * v180.f64[0];
    __asm { FMLS            D8, D3, V11.D[1] }
    v187 = v154 - v144 * _Q23.f64[0];
    v155 = v148
         + v208.f64[0] * _Q18.f64[0]
         + v184 * _Q16.f64[0]
         - v184 * v190
         - (_Q13.f64[0] + _Q13.f64[0]) * _Q12.f64[0]
         + (v182 + v182) * _Q12.f64[0]
         + (_Q13.f64[0] + _Q13.f64[0]) * _Q20.f64[0]
         - (v182 + v182) * _Q20.f64[0]
         + v184 * _Q23.f64[0]
         - v182 * _Q23.f64[0];
    _Q4.f64[0] = v205 + v205;
    v145 = (v205 + v205) * (v156 * v210)
         + v189 * v222.f64[0] * -2.0 * (v156 * v212)
         - v192 * (v189 * v213.f64[0])
         + v144 * (v189 * v213.f64[0])
         - v182 * (_Q19.f64[0] * v156 * v215)
         + v185 * (_Q19.f64[0] * v156 * v223)
         + v184 * (_Q19.f64[0] * v156 * v215)
         - v198 * (_Q19.f64[0] * v156 * v223)
         + v208.f64[0] * (v156 * v215)
         - v184 * (_Q19.f64[0] * v213.f64[0])
         + v185 * (v156 * v207)
         - v185 * (_Q19.f64[0] * v203.f64[0])
         - v202 * (v156 * v215)
         + v182 * (_Q19.f64[0] * v213.f64[0])
         - v144 * (v189 * *v13 * v215);
    _Q21 = v221;
    __asm { FMLS            D28, D4, V21.D[1] }
    _Q7.f64[0] = v150;
    _Q11.f64[1] = v216.f64[1];
    __asm { FMLS            D1, D21, V11.D[1] }
    _Q15.f64[1] = v216.f64[1];
    __asm { FMLS            D1, D4, V21.D[0] }
    _Q4.f64[0] = v214.f64[0];
    _Q11.f64[0] = v217;
    __asm { FMLS            D0, D7, V17.D[1] }
    _Q3.f64[0] = v220.f64[0];
    __asm
    {
      FMLS            D0, D3, V15.D[1]
      FMLS            D0, D13, V4.D[0]
    }
    _Q6.f64[0] = v204.f64[0] + v204.f64[0];
    __asm { FMLS            D0, D6, V3.D[0] }
    _D8 = v204.f64[0];
    __asm { FMLS            D1, D8, V21.D[0] }
    v149 = _Q5.f64[0];
    _Q30.f64[0] = v194 * v180.f64[0];
    v221.f64[0] = v205 * (v156 * v206)
                - v189 * v222.f64[0] * (v156 * _Q9.f64[0])
                + vmuld_lane_f64(*v13, v180, 1) * (v189 * v210)
                + -(v180.f64[0] * v156) * (v189 * v212)
                + v182 * (v189 * v213.f64[0])
                + v198 * (v189 * v203.f64[0])
                - v182 * (v156 * v207)
                - v202 * (v156 * v223)
                - v184 * (v189 * v213.f64[0])
                - _Q22.f64[0] * (v189 * v203.f64[0])
                + v208.f64[0] * (v156 * v223)
                + v184 * (v156 * v207)
                - (v200 + v200) * (v156 * _Q9.f64[0])
                + (v204.f64[0] + v204.f64[0]) * (*v13 * v206)
                + (v182 + v182) * (_Q19.f64[0] * v203.f64[0])
                - (_Q13.f64[0] + _Q13.f64[0]) * (_Q19.f64[0] * v203.f64[0]);
    _Q13.f64[0] = v205;
    _Q9.f64[0] = v213.f64[0];
    _Q3.f64[0] = v214.f64[0];
    __asm { FMLS            D7, D30, V11.D[0] }
    _Q10.f64[0] = v189 * v222.f64[0];
    __asm { FMLS            D7, D10, V11.D[0] }
    _Q15 = v203;
    _Q17.f64[0] = v207;
    __asm { FMLS            D27, D23, V17.D[0] }
    _Q30.f64[0] = *v13 * v216.f64[0];
    _Q18.f64[0] = v147 * v222.f64[0];
    __asm { FMLS            D29, D18, V9.D[0] }
    _Q6.f64[0] = v139;
    __asm { FMLS            D29, D6, V15.D[0] }
    _Q22.f64[0] = v194 * v180.f64[0];
    __asm { FMLS            D29, D22, V3.D[0] }
    _Q10.f64[0] = v211;
    _Q5.f64[0] = v212;
    __asm
    {
      FMLS            D7, D18, V5.D[0]
      FMLS            D7, D6, V10.D[0]
    }
    _Q18.f64[0] = v208.f64[0];
    __asm { FMLS            D1, D30, V5.D[0] }
    _Q26.f64[0] = v209.f64[0];
    __asm { FMLS            D0, D30, V10.D[0] }
    _Q14.f64[0] = v207;
    _Q12.f64[0] = v185;
    _Q24.f64[0] = v184;
    _Q19.f64[0] = v202;
    _Q27.f64[0] = v189 * *v13 * v215;
    _Q30.f64[0] = v182;
    _Q20 = v214;
    __asm
    {
      FMLS            D1, D12, V20.D[0]
      FMLS            D1, D18, V9.D[0]
    }
    _Q21.f64[0] = v208.f64[0];
    _Q18.f64[1] = v220.f64[1];
    _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], v151, v220.f64[0]) + v192 * _Q27.f64[0];
    _Q16.f64[0] = v221.f64[0]
                - v198 * (v189 * v156 * v223)
                - v182 * _Q27.f64[0]
                + v185 * (v189 * v156 * v223)
                + v184 * _Q27.f64[0];
    __asm { FMLS            D2, D24, V20.D[1] }
    _Q4.f64[0] = v204.f64[0] + v204.f64[0];
    __asm { FMLS            D2, D4, V18.D[1] }
    _Q24.f64[0] = v220.f64[0];
    __asm
    {
      FMLA            D2, D30, V20.D[1]
      FMLS            D0, D21, V15.D[0]
      FMLA            D2, D19, V15.D[1]
      FMLS            D7, D19, V14.D[0]
    }
    _Q22 = v216;
    _Q25.f64[0] = v217;
    _Q23.f64[0] = v214.f64[0];
    _Q19.f64[0] = v14[1];
    __asm { FMLA            D18, D19, V22.D[1] }
    v224 = vmlad_n_f64(v170, 0.0, v178) + _Q18.f64[0];
    _D8 = v141 + v175 + v167 + v173;
    _Q10.f64[0] = vmlad_n_f64(vmlad_n_f64(_Q31.f64[0], v171, v217), v195, v214.f64[0]) + v169 + v177 + v165;
    _Q18.f64[0] = v158 + vmlad_n_f64(v168, 0.0, v179);
    _Q21.f64[0] = v214.f64[1];
    __asm
    {
      FMLA            D27, D21, V22.D[1]
      FMLS            D30, D21, V22.D[0]
      FMLA            D5, D23, V22.D[1]
      FMLS            D6, D23, V22.D[0]
      FMLS            D17, D25, V22.D[0]
      FMLA            D17, D26, V22.D[1]
    }
    _Q20.f64[0] = v216.f64[0] + v189 * v222.f64[0] + v194 * v180.f64[0];
    __asm { FMLS            D0, D13, V24.D[0] }
    _Q21.f64[0] = v216.f64[1] + v205 + v204.f64[0];
    _Q2.f64[0] = _Q2.f64[0] + v155;
    _Q1.f64[0] = v145
               - v198 * (v156 * v207)
               + v198 * (v194 * v203.f64[0])
               - v194 * v180.f64[0] * (v156 * v212)
               + -(v222.f64[0] * *v13) * v161
               + v204.f64[0] * (v156 * v210)
               + _Q1.f64[0];
    v124 = _D0 + _Q16.f64[0];
    _Q3.f64[0] = (_Q7.f64[0] + _Q17.f64[0]) * (_Q7.f64[0] + _Q17.f64[0]);
    v234 = _Q18.f64[0] * _Q2.f64[0]
         + (v160 + v163) * (v187 + _Q28.f64[0])
         + _Q20.f64[0] * _Q27.f64[0]
         + _Q21.f64[0] * _Q30.f64[0];
    v235 = _Q30.f64[0] * _Q30.f64[0]
         + _Q27.f64[0] * _Q27.f64[0]
         + _Q3.f64[0]
         + (v187 + _Q28.f64[0]) * (v187 + _Q28.f64[0])
         + _Q2.f64[0] * _Q2.f64[0];
    v231 = _Q21.f64[0] * _Q21.f64[0]
         + _Q20.f64[0] * _Q20.f64[0]
         + (v160 + v163) * (v160 + v163)
         + _Q18.f64[0] * _Q18.f64[0];
    v232 = v234;
    v233 = _Q18.f64[0] * v124 + (v160 + v163) * _Q1.f64[0] + _Q20.f64[0] * _Q5.f64[0] + _Q21.f64[0] * _Q6.f64[0];
    v237 = v233;
    v238 = v124 * _Q2.f64[0] + (v187 + _Q28.f64[0]) * _Q1.f64[0] + _Q27.f64[0] * _Q5.f64[0] + _Q30.f64[0] * _Q6.f64[0];
    v236 = v238;
    v239 = _Q6.f64[0] * _Q6.f64[0] + _Q5.f64[0] * _Q5.f64[0] + _Q1.f64[0] * _Q1.f64[0] + v124 * v124 + _Q3.f64[0];
    sub_239A22B38((uint64_t)&v225);
    _V1.D[1] = *((_QWORD *)&v225 + 1);
    _V3.D[1] = v227;
    _V5.D[1] = *((_QWORD *)&v229 + 1);
    __asm
    {
      FMLA            D6, D8, V1.D[1]
      FMLA            D1, D8, V3.D[1]
      FMLA            D2, D8, V5.D[1]
    }
    v131 = *a2;
    v132 = v8 >> 6;
    v133 = 1 << v8;
    if ((_D6 + _Q10.f64[0] * v226) * v224 + (_D1 + _Q10.f64[0] * v228) * _D8 + (_D2 + _Q10.f64[0] * v230) * _Q10.f64[0] >= *(double *)(a1 + 392))
    {
      v9 = *(_QWORD *)(v131 + 8 * v132) & ~v133;
    }
    else
    {
      v9 = *(_QWORD *)(v131 + 8 * v132) | v133;
      v7 = (v7 + 1);
    }
    *(_QWORD *)(v131 + 8 * v132) = v9;
    ++v8;
    v10 = *(uint64_t **)(a1 + 400);
    v5 = *v10;
    v6 += 16;
  }
  while (v8 < (v10[1] - *v10) >> 4);
  return v7;
}

uint64_t sub_239C65788(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t *v61;
  uint64_t *v62;
  float64x2_t **v63;
  _OWORD *v68;
  uint64_t v69;
  float64x2_t v70;
  uint64_t v71;
  float64x2_t v72;
  unint64_t v73;
  uint64_t v74;
  double v75;
  unint64_t v77;
  double v78;
  int64x2_t v81;
  unint64_t v82;
  float64x2_t v83;
  int8x16_t v84;
  float64x2_t v85;
  float64x2_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float64x2_t **v90;
  uint64_t v91;
  size_t v92;
  double *v93;
  float64x2_t *v94;
  float64x2_t *v95;
  uint64_t v96;
  uint64_t v99;
  unint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  double *v105;
  double *v106;
  float64x2_t v107;
  uint64_t *v109;
  float64x2_t v111;
  unsigned __int128 v112;
  float64x2_t v113;
  double v116;
  uint64_t v119;
  unint64_t v120;
  int v122;
  int8x16_t v123;
  char *v124;
  unint64_t v125;
  char v126;
  double v127;
  char *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  float64x2_t v142;
  float64x2_t v143;
  unint64_t v144;
  unint64_t v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  _OWORD *v155;
  float64x2_t v156;
  int64x2_t v157;
  uint64_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  _OWORD *v173;
  float64x2_t v174;
  float64x2_t v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  float64x2_t *v180;
  float64_t v181;
  float64_t v182;
  float64_t v183;
  float64x2_t v184;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  int v206;
  char *v207;
  float64x2_t v209;
  float64x2_t v210;
  double v211;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  double v216;
  float64x2_t *v217;
  float64x2_t v218;
  int8x16_t v219;
  float64x2_t v220;
  float64x2_t v222;
  float64x2_t v225;
  double v227;
  double v229;
  float64x2_t v231;
  int v232;
  float64x2_t v233;
  double v236;
  int8x16_t v237;
  BOOL v238;
  __int128 v239;
  __int128 v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  int8x16_t v246;
  double v247;
  float64x2_t v248;
  unint64_t v249;
  double v250;
  double v251;
  double v252;
  float64x2_t *v253;
  float64x2_t v254;
  float64x2_t v256;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  int8x16_t v276;
  int8x16_t v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  float64x2_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  float64x2_t v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  void *v294;
  double v296;
  int v297;
  float64x2_t **v298;
  unint64_t v299;
  float64_t v300;
  float64_t v301;
  int8x16_t v302;
  int8x16_t v303;
  float64_t v304;
  uint64_t v305;
  uint64_t v306;
  float64x2_t v308;
  double v309;
  double v310;
  double v311;
  float64x2_t v312;
  float64x2_t v313;
  double v314;
  double v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  double v320;
  float64x2_t v321;
  float64_t v322;
  float64x2_t v323;
  int8x16_t v324;
  int8x16_t v325;
  float64_t v326;
  unint64_t v327;
  float64x2_t v328;
  float64x2_t v329;
  uint64_t v330;
  float64x2_t v331;
  float64x2_t v332;
  unint64_t v333;
  float64x2_t v334;
  float64_t v335;
  float64x2_t v336;
  float64_t v337;
  float64x2_t v338;
  float64x2_t v339;
  int8x16_t v340;
  float64x2_t v341;
  double v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  int64x2_t v347;
  float64x2_t v348;
  int64x2_t v349;
  float64x2_t v350;
  unint64_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64_t v354;
  float64x2_t v355;
  float64x2_t v356;
  double v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  int8x16_t v362;
  float64_t v363;
  float64_t v364;
  int8x16_t v365;
  uint64_t v366;
  double v367;
  unint64_t v368;
  double v369;
  int8x16_t v370;
  int8x16_t v371;
  float64x2_t v372;
  double v373;
  unint64_t v374;
  unint64_t v375;
  double v376;
  float64x2_t v377;
  float64x2_t v378;
  double v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  double v384;
  double v385;
  double v386;
  char *v387;
  float64x2_t v388;
  int8x16_t v389;
  float64x2_t v390;
  char *v391;
  double v392;
  int8x16_t v393;
  float64_t v394;
  unint64_t v395;
  int8x16_t v396;
  _OWORD v397[24];
  char v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  float64x2_t v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  float64x2_t v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  float64x2_t v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  void *v423;
  void *v424;
  char *v425;
  void *v426;
  void *v427;
  char *v428;
  void *v429;
  void *v430;
  char *v431;
  void *__p;
  float64x2_t *v433;
  _OWORD *f64;
  void *v435;
  _BYTE *v436;
  uint64_t v437;
  __int128 v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  _BYTE v442[48];
  _BYTE v443[24];
  double v444;
  uint64_t v445;
  char v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  uint64_t v451;
  _QWORD v452[9];
  _QWORD v453[12];

  v3 = a1;
  v453[9] = *MEMORY[0x24BDAC8D0];
  v430 = 0;
  v429 = 0;
  v431 = 0;
  v427 = 0;
  v426 = 0;
  v428 = 0;
  v424 = 0;
  v423 = 0;
  v425 = 0;
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v383 = 0;
    v5 = 0;
    v387 = 0;
    v6 = 0;
    v391 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v13 = *(unsigned int *)(v4 + 4 * v8);
      v14 = **(_QWORD **)(v3 + 400);
      if (v13 >= (*(_QWORD *)(*(_QWORD *)(v3 + 400) + 8) - v14) >> 4)
        break;
      v15 = (_OWORD *)(v14 + 16 * v13);
      v395 = v8;
      if (v7 >= v391)
      {
        v16 = (v7 - v9) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          goto LABEL_143;
        if ((v391 - v9) >> 3 > v17)
          v17 = (v391 - v9) >> 3;
        v18 = (unint64_t)(v391 - v9) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v17;
        if (v18)
        {
          if (v18 >> 60)
            goto LABEL_142;
          v19 = (char *)operator new(16 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[16 * v16];
        *(_OWORD *)v20 = *v15;
        if (v7 == v9)
        {
          v22 = v7;
          v9 = &v19[16 * v16];
          v3 = a1;
        }
        else
        {
          v21 = &v19[16 * v16];
          v3 = a1;
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v7 - 1);
            v21 -= 16;
            v7 -= 16;
          }
          while (v7 != v9);
          v22 = v9;
          v9 = v21;
        }
        v7 = v20 + 16;
        v429 = v9;
        v391 = &v19[16 * v18];
        v431 = v391;
        if (v22)
          operator delete(v22);
        v8 = v395;
      }
      else
      {
        *(_OWORD *)v7 = *v15;
        v7 += 16;
      }
      v430 = v7;
      v23 = **(_QWORD **)(v3 + 408);
      if (v13 >= (*(_QWORD *)(*(_QWORD *)(v3 + 408) + 8) - v23) >> 4)
        break;
      v24 = (_OWORD *)(v23 + 16 * v13);
      if (v6 >= v387)
      {
        v25 = (v6 - v10) >> 4;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60)
          goto LABEL_143;
        if ((v387 - v10) >> 3 > v26)
          v26 = (v387 - v10) >> 3;
        v27 = (unint64_t)(v387 - v10) >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v26;
        if (v27)
        {
          if (v27 >> 60)
            goto LABEL_142;
          v28 = (char *)operator new(16 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[16 * v25];
        *(_OWORD *)v29 = *v24;
        if (v6 == v10)
        {
          v31 = v6;
          v10 = &v28[16 * v25];
          v3 = a1;
        }
        else
        {
          v30 = &v28[16 * v25];
          v3 = a1;
          do
          {
            *((_OWORD *)v30 - 1) = *((_OWORD *)v6 - 1);
            v30 -= 16;
            v6 -= 16;
          }
          while (v6 != v10);
          v31 = v10;
          v10 = v30;
        }
        v6 = v29 + 16;
        v426 = v10;
        v387 = &v28[16 * v27];
        v428 = v387;
        if (v31)
          operator delete(v31);
        v8 = v395;
      }
      else
      {
        *(_OWORD *)v6 = *v24;
        v6 += 16;
      }
      v427 = v6;
      v32 = **(_QWORD **)(v3 + 416);
      if (v13 >= (*(_QWORD *)(*(_QWORD *)(v3 + 416) + 8) - v32) >> 4)
        break;
      v33 = (_OWORD *)(v32 + 16 * v13);
      if ((unint64_t)v5 < v383)
      {
        *(_OWORD *)v5 = *v33;
        v12 = v5 + 16;
      }
      else
      {
        v34 = (v5 - v11) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
LABEL_143:
          sub_2394189F8();
        if ((uint64_t)(v383 - (_QWORD)v11) >> 3 > v35)
          v35 = (uint64_t)(v383 - (_QWORD)v11) >> 3;
        if (v383 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v36 = 0xFFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
        {
          if (v36 >> 60)
LABEL_142:
            sub_239418A80();
          v37 = (char *)operator new(16 * v36);
          v3 = a1;
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[16 * v34];
        *(_OWORD *)v38 = *v33;
        if (v5 == v11)
        {
          v11 = &v37[16 * v34];
        }
        else
        {
          v39 = &v37[16 * v34];
          do
          {
            *((_OWORD *)v39 - 1) = *((_OWORD *)v5 - 1);
            v39 -= 16;
            v5 -= 16;
          }
          while (v5 != v11);
          v5 = v11;
          v11 = v39;
        }
        v40 = &v37[16 * v36];
        v12 = v38 + 16;
        v423 = v11;
        v383 = (unint64_t)v40;
        v425 = v40;
        if (v5)
          operator delete(v5);
        v8 = v395;
      }
      v424 = v12;
      ++v8;
      v4 = *a2;
      v5 = (char *)v12;
      if (v8 >= (a2[1] - *a2) >> 2)
        goto LABEL_68;
    }
    sub_23941D884();
  }
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v6 = 0;
  v9 = 0;
  v7 = 0;
LABEL_68:
  *(_QWORD *)&v41 = 0;
  v403 = xmmword_239F13AC0;
  v404 = unk_239F13AD0;
  v405 = xmmword_239F13AE0;
  v406 = unk_239F13AF0;
  v399 = xmmword_239F13A80;
  v400 = *(_OWORD *)algn_239F13A90;
  v401 = xmmword_239F13AA0;
  v402 = xmmword_239F13AB0;
  v407 = xmmword_239F13A80;
  v408 = *(_OWORD *)algn_239F13A90;
  v409 = xmmword_239F13AA0;
  v410 = xmmword_239F13AB0;
  v414 = unk_239F13AF0;
  v413 = xmmword_239F13AE0;
  v412 = unk_239F13AD0;
  v411 = xmmword_239F13AC0;
  v415 = xmmword_239F13A80;
  v416 = *(_OWORD *)algn_239F13A90;
  v422 = unk_239F13AF0;
  v421 = xmmword_239F13AE0;
  v417 = xmmword_239F13AA0;
  v418 = xmmword_239F13AB0;
  v420 = unk_239F13AD0;
  v419 = xmmword_239F13AC0;
  LOBYTE(v397[0]) = 0;
  v398 = 0;
  if (*(_BYTE *)(v3 + 808))
  {
    v42 = *(_OWORD *)(v3 + 504);
    v397[4] = *(_OWORD *)(v3 + 488);
    v397[5] = v42;
    v43 = *(_OWORD *)(v3 + 536);
    v397[6] = *(_OWORD *)(v3 + 520);
    v397[7] = v43;
    v44 = *(_OWORD *)(v3 + 440);
    v397[0] = *(_OWORD *)(v3 + 424);
    v397[1] = v44;
    v45 = *(_OWORD *)(v3 + 472);
    v397[2] = *(_OWORD *)(v3 + 456);
    v397[3] = v45;
    v46 = *(_OWORD *)(v3 + 552);
    v47 = *(_OWORD *)(v3 + 568);
    v48 = *(_OWORD *)(v3 + 584);
    v397[11] = *(_OWORD *)(v3 + 600);
    v397[10] = v48;
    v397[9] = v47;
    v397[8] = v46;
    v49 = *(_OWORD *)(v3 + 616);
    v50 = *(_OWORD *)(v3 + 632);
    v51 = *(_OWORD *)(v3 + 648);
    v397[15] = *(_OWORD *)(v3 + 664);
    v397[14] = v51;
    v397[13] = v50;
    v397[12] = v49;
    v52 = *(_OWORD *)(v3 + 680);
    v53 = *(_OWORD *)(v3 + 696);
    v54 = *(_OWORD *)(v3 + 712);
    v397[19] = *(_OWORD *)(v3 + 728);
    v397[18] = v54;
    v397[17] = v53;
    v397[16] = v52;
    v41 = *(_OWORD *)(v3 + 744);
    v55 = *(_OWORD *)(v3 + 760);
    v56 = *(_OWORD *)(v3 + 776);
    v397[23] = *(_OWORD *)(v3 + 792);
    v397[22] = v56;
    v397[21] = v55;
    v397[20] = v41;
    v398 = 1;
  }
  v57 = (v7 - v9) >> 4;
  if (v57 != (v6 - v10) >> 4)
    goto LABEL_139;
  v58 = 0;
  if ((unint64_t)(v7 - v9) < 0x50 || v57 != ((char *)v12 - v11) >> 4)
  {
LABEL_132:
    v294 = v423;
    if (!v423)
      goto LABEL_134;
    goto LABEL_133;
  }
  v59 = 0;
  v453[0] = &v429;
  v453[1] = &v426;
  v453[2] = &v423;
  v453[3] = &v429;
  v453[4] = &v423;
  v453[5] = &v426;
  v453[6] = &v426;
  v453[7] = &v423;
  v453[8] = &v429;
  v452[0] = &v399;
  v452[1] = &v407;
  v452[2] = &v415;
  v452[3] = &v399;
  v297 = -1;
  v60 = -1.0;
  v452[4] = &v415;
  v452[5] = &v407;
  v452[8] = &v399;
  v362.i64[0] = v41;
  v358 = v41;
  v363 = *(double *)&v41;
  v359 = v41;
  v364 = *(double *)&v41;
  v360 = v41;
  v365.i64[0] = v41;
  v361 = v41;
  v357 = *(double *)&v41;
  v304 = *(double *)&v41;
  v299 = v41;
  v302.i64[0] = v41;
  v301 = *(double *)&v41;
  v303.i64[0] = v41;
  v300 = *(double *)&v41;
  v452[6] = &v407;
  v452[7] = &v415;
  do
  {
    v61 = (uint64_t *)v453[3 * v59];
    v305 = 3 * v59 + 1;
    v62 = (uint64_t *)v453[v305];
    v306 = 3 * v59 + 2;
    v63 = (float64x2_t **)v453[v306];
    __asm { FMOV            V0.2D, #1.0 }
    v396 = _Q0;
    if (!v398)
    {
      v120 = v61[1] - *v61;
      if (v120 < 0x50 || v120 != v62[1] - *v62)
        goto LABEL_74;
      v298 = (float64x2_t **)v453[v306];
      v436 = 0;
      v435 = 0;
      v437 = 0;
      v122 = sub_2394411A4();
      v124 = (char *)v435;
      if (v435 == v436)
        v122 = 0;
      if (v122 == 1)
      {
        v296 = v60;
        v125 = 0;
        v126 = 0;
        v127 = 1.79769313e308;
        v393.i64[0] = 0;
        v78 = 1.0;
        *(double *)&v381 = 0.0;
        v123.i64[0] = 0;
        v377 = (float64x2_t)v123;
        v74 = 0;
        v123.i64[0] = 0;
        v389 = v123;
        *(double *)&v374 = 0.0;
        v385 = 1.0;
        v71 = 0;
        v123.i64[0] = 0;
        v372 = (float64x2_t)v123;
        v123.i64[0] = 1.0;
        v370 = v123;
        v369 = 0.0;
        v366 = 0;
        v371.i64[0] = 1.0;
        v368 = 0;
        v367 = 0.0;
        do
        {
          v128 = &v124[72 * v125];
          v446 = 0;
          v445 = 0x300000003;
          v447 = *(_OWORD *)v128;
          v129 = *((_OWORD *)v128 + 1);
          v130 = *((_OWORD *)v128 + 2);
          v131 = *((_OWORD *)v128 + 3);
          v451 = *((_QWORD *)v128 + 8);
          v450 = v131;
          v449 = v130;
          v448 = v129;
          sub_239456468((uint64_t)&v438, (__CLPK_doublereal *)&v447, 3);
          v134.f64[0] = *(float64_t *)v442;
          v135.f64[0] = v441.f64[0];
          v136 = v440;
          v137 = v439;
          v138 = (float64x2_t)v438;
          v139 = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
          v140 = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
          v141 = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
          v142 = *(float64x2_t *)&v442[8];
          v143 = *(float64x2_t *)&v443[8];
          v144 = vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL).u64[0];
          v145 = vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL).u64[0];
          v146 = vnegq_f64(v440);
          v147 = vmlad_n_f64(vmuld_lane_f64(v441.f64[1], v146, 1), *(double *)v442, v440.f64[0]);
          *(_QWORD *)&v148.f64[0] = vdupq_laneq_s64((int64x2_t)v441, 1).u64[0];
          v148.f64[1] = *(float64_t *)v442;
          v149 = vmlaq_laneq_f64(vmulq_n_f64(v146, v441.f64[0]), v148, v439, 1);
          v150.f64[0] = v439.f64[0];
          v150.f64[1] = *((float64_t *)&v438 + 1);
          v151 = vmulq_f64(v150, v149);
          if (v151.f64[0] + v147 * *(double *)&v438 - v151.f64[1] >= 0.0)
          {
            v330 = *(_QWORD *)&v441.f64[1];
            v332 = v441;
            v334 = v134;
            v337 = *(double *)&v141;
            v340.i64[0] = *(_QWORD *)&v440.f64[0];
            v342 = *(double *)&v139;
            v344 = v439;
            v351 = v140;
            v354 = *(double *)&v438;
          }
          else
          {
            *(_QWORD *)&v138.f64[1] = v141;
            v152 = (int8x16_t)vnegq_f64(v138);
            *(_QWORD *)&v137.f64[1] = v140;
            v150 = (float64x2_t)vextq_s8(v152, v152, 8uLL);
            v153 = (int8x16_t)vnegq_f64(v137);
            v351 = vextq_s8(v153, v153, 8uLL).u64[0];
            v354 = *(double *)v152.i64;
            *(_QWORD *)&v136.f64[1] = v139;
            v337 = v150.f64[0];
            v340 = (int8x16_t)vnegq_f64(v136);
            *(_QWORD *)&v342 = vextq_s8(v340, v340, 8uLL).u64[0];
            v344 = (float64x2_t)v153;
            *(_QWORD *)&v135.f64[1] = vextq_s8((int8x16_t)v441, (int8x16_t)v441, 8uLL).u64[0];
            v332 = vnegq_f64(v135);
            v334 = vnegq_f64(v134);
            v330 = *(_QWORD *)&v332.f64[1];
          }
          v150.f64[0] = v444;
          v326 = *(double *)v443;
          v328 = v150;
          v132.f64[0] = *(double *)&v443[8]
                      * (*(double *)v443 * *(double *)&v442[16] - *(double *)&v442[40] * *(double *)&v442[24])
                      + *(double *)&v442[8] * (v444 * *(double *)&v442[40] - *(double *)&v443[16] * *(double *)v443)
                      - *(double *)&v442[32]
                      * (v444 * *(double *)&v442[16] - *(double *)&v443[16] * *(double *)&v442[24]);
          v133.f64[0] = 0.0;
          v325 = (int8x16_t)vcgtq_f64(v133, v132);
          v154 = (int8x16_t)vdupq_lane_s64(v325.i64[0], 0);
          *(_QWORD *)&v143.f64[1] = v144;
          *(_QWORD *)&v142.f64[1] = v145;
          v346 = (float64x2_t)vbslq_s8(v154, (int8x16_t)vnegq_f64(*(float64x2_t *)&v442[24]), *(int8x16_t *)&v442[24]);
          v322 = *(double *)&v442[40];
          v324 = v154;
          v347 = (int64x2_t)vbslq_s8(v154, (int8x16_t)vnegq_f64(v142), (int8x16_t)v142);
          v349 = (int64x2_t)vbslq_s8(v154, (int8x16_t)vnegq_f64(v143), (int8x16_t)v143);
          v433 = 0;
          __p = 0;
          f64 = 0;
          v155 = operator new(0x80uLL);
          v156.f64[0] = v322;
          v156.f64[1] = v326;
          v157 = (int64x2_t)vbslq_s8(v324, (int8x16_t)vnegq_f64(v156), (int8x16_t)v156);
          COERCE_DOUBLE(v158 = vbslq_s8(v325, (int8x16_t)vnegq_f64(v328), (int8x16_t)v328).i64[0]);
          v159.f64[1] = v332.f64[1];
          v160.f64[0] = v332.f64[0];
          *(_QWORD *)&v160.f64[1] = v330;
          v159.f64[0] = 1.0 / sqrt(v160.f64[0] * v160.f64[0] + v160.f64[1] * v160.f64[1] + v334.f64[0] * v334.f64[0]);
          v161 = vmulq_f64(v334, v159);
          v162 = vmulq_n_f64(v160, v159.f64[0]);
          *(_QWORD *)&v163.f64[0] = v351;
          v333 = vextq_s8((int8x16_t)v162, (int8x16_t)v162, 8uLL).u64[0];
          v335 = v162.f64[0];
          *(_QWORD *)&v162.f64[1] = v333;
          *(_QWORD *)&v163.f64[1] = v340.i64[0];
          v159.f64[0] = v354;
          v159.f64[1] = v337;
          v164 = vmulq_f64(v159, (float64x2_t)0);
          v165 = vaddq_f64(v162, vmlaq_f64(v164, (float64x2_t)0, v163));
          v352 = v163;
          v355 = v159;
          v166 = vmlaq_f64(vmlaq_f64(vnegq_f64(v159), (float64x2_t)0, v163), (float64x2_t)0, v162);
          v313 = v164;
          v314 = *(double *)vextq_s8((int8x16_t)v347, (int8x16_t)v347, 8uLL).i64;
          v167 = vmlaq_f64(vaddq_f64(v163, v164), (float64x2_t)0, v162);
          v321 = (float64x2_t)vdupq_lane_s64(v157.i64[0], 0);
          v323 = (float64x2_t)vdupq_laneq_s64(v347, 1);
          v168 = vmlaq_f64(vmulq_n_f64(v167, *(double *)v347.i64), v323, v166);
          v156.f64[0] = v161.f64[0] * 0.0 - (v344.f64[0] - v342 * 0.0);
          v163.f64[0] = v342 + v344.f64[0] * 0.0 + v161.f64[0] * 0.0;
          v169 = v163.f64[0] * *(double *)v347.i64 + v156.f64[0] * v314;
          v170 = vmlaq_f64(vmulq_laneq_f64(v167, v346, 1), v321, v166);
          v318 = (float64x2_t)vdupq_laneq_s64(v349, 1);
          v319 = (float64x2_t)vdupq_laneq_s64(v157, 1);
          v171 = vmlaq_f64(vmulq_n_f64(v167, *(double *)v349.i64), v318, v166);
          v310 = *(double *)vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).i64;
          v311 = *(double *)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 8uLL).i64;
          v320 = *(double *)v157.i64;
          v166.f64[0] = v163.f64[0] * v311 + v156.f64[0] * *(double *)v157.i64;
          v309 = *(double *)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL).i64;
          v167.f64[0] = v163.f64[0] * *(double *)v349.i64 + v156.f64[0] * v309;
          v156.f64[0] = v161.f64[0] + v344.f64[0] * 0.0 + v342 * 0.0;
          v172 = vmlaq_f64(v170, v319, v165);
          v317 = (float64x2_t)vdupq_lane_s64(v158, 0);
          v315 = *(double *)&v158;
          *(double *)&v327 = v167.f64[0] + v156.f64[0] * *(double *)&v158;
          v329 = vmlaq_f64(v171, v317, v165);
          v155[4] = v329;
          v155[5] = v327;
          *(double *)v324.i64 = v169 + v156.f64[0] * v346.f64[0];
          *(double *)v325.i64 = v166.f64[0] + v156.f64[0] * v310;
          v155[2] = v172;
          v155[3] = v325.u64[0];
          v331 = v172;
          v155[1] = v324.u64[0];
          v312 = v165;
          v308 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v346.f64[0], 0);
          v338 = vmlaq_f64(v168, v308, v165);
          v341 = v161;
          *v155 = v338;
          v316 = v162;
          v155[6] = v162;
          *((_QWORD *)v155 + 14) = *(_QWORD *)&v161.f64[0];
          *((_QWORD *)v155 + 15) = 0x3FF0000000000000;
          __p = v155;
          f64 = v155 + 8;
          v173 = operator new(0x100uLL);
          v174.f64[0] = v335;
          *(_QWORD *)&v174.f64[1] = v333;
          v173[8] = v338;
          v175 = vnegq_f64(v174);
          v173[9] = v324.u64[0];
          v173[10] = v331;
          v173[11] = v325.u64[0];
          v173[12] = v329;
          v173[13] = v327;
          v173[14] = v175;
          v336 = v175;
          v339 = vnegq_f64(v341);
          *((_QWORD *)v173 + 30) = *(_QWORD *)&v339.f64[0];
          *((_QWORD *)v173 + 31) = 0x3FF0000000000000;
          v176 = v155[5];
          v173[4] = v155[4];
          v173[5] = v176;
          v177 = v155[7];
          v173[6] = v155[6];
          v173[7] = v177;
          v178 = v155[1];
          *v173 = *v155;
          v173[1] = v178;
          v179 = v155[3];
          v173[2] = v155[2];
          v173[3] = v179;
          __p = v173;
          f64 = v173 + 16;
          operator delete(v155);
          v433 = (float64x2_t *)(v173 + 16);
          v180 = (float64x2_t *)operator new(0x200uLL);
          v181 = v341.f64[0] + vmulq_f64(v344, (float64x2_t)0).f64[0] + v342 * 0.0;
          v182 = v344.f64[0] + v342 * 0.0 + v341.f64[0] * 0.0;
          v183 = v344.f64[0] * 0.0 - v342 + v341.f64[0] * 0.0;
          v184 = vmlaq_f64(vmlaq_f64(v355, (float64x2_t)0, v352), (float64x2_t)0, v316);
          __asm { FMOV            V3.2D, #-1.0 }
          v186 = (float64x2_t)COERCE_UNSIGNED_INT64(v183 * *(double *)v347.i64 + v182 * v314 + v181 * v346.f64[0]);
          v343 = v186;
          v345 = (float64x2_t)COERCE_UNSIGNED_INT64(v183 * *(double *)v349.i64 + v182 * v309 + v181 * v315);
          v187 = vmlaq_f64(vmlaq_f64(v313, _Q3, v352), (float64x2_t)0, v316);
          v188 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v187, *(double *)v349.i64), v318, v184), v317, v312);
          v353 = vmlaq_f64(vmlaq_f64(vmulq_laneq_f64(v187, v346, 1), v321, v184), v319, v312);
          v356 = (float64x2_t)COERCE_UNSIGNED_INT64(v183 * v311 + v182 * v320 + v181 * v310);
          v180[20] = v188;
          v180[21] = v345;
          v180[18] = v353;
          v180[19] = v356;
          v348 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v187, *(double *)v347.i64), v323, v184), v308, v312);
          v350 = v188;
          v180[16] = v348;
          v180[17] = v186;
          v180[22] = v316;
          v180[23].f64[0] = v341.f64[0];
          v180[23].f64[1] = 1.0;
          v189 = *((float64x2_t *)v173 + 13);
          v180[12] = *((float64x2_t *)v173 + 12);
          v180[13] = v189;
          v190 = *((float64x2_t *)v173 + 15);
          v180[14] = *((float64x2_t *)v173 + 14);
          v180[15] = v190;
          v191 = *((float64x2_t *)v173 + 9);
          v180[8] = *((float64x2_t *)v173 + 8);
          v180[9] = v191;
          v192 = *((float64x2_t *)v173 + 11);
          v180[10] = *((float64x2_t *)v173 + 10);
          v180[11] = v192;
          v193 = *((float64x2_t *)v173 + 5);
          v180[4] = *((float64x2_t *)v173 + 4);
          v180[5] = v193;
          v194 = *((float64x2_t *)v173 + 7);
          v180[6] = *((float64x2_t *)v173 + 6);
          v180[7] = v194;
          v195 = *((float64x2_t *)v173 + 1);
          *v180 = *(float64x2_t *)v173;
          v180[1] = v195;
          v196 = *((float64x2_t *)v173 + 3);
          v180[2] = *((float64x2_t *)v173 + 2);
          v180[3] = v196;
          __p = v180;
          f64 = (_OWORD *)v180[32].f64;
          operator delete(v173);
          v180[28] = v350;
          v180[29] = v345;
          v180[26] = v353;
          v180[27] = v356;
          v180[24] = v348;
          v180[25] = v343;
          v180[30] = v336;
          v199.f64[1] = v339.f64[1];
          v180[31].f64[0] = v339.f64[0];
          v180[31].f64[1] = 1.0;
          v433 = v180 + 32;
          if (&v180[32] != __p)
          {
            v200 = 0;
            v201 = ((char *)&v180[32] - (_BYTE *)__p) >> 7;
            v202 = *v61;
            v203 = *v62;
            v204 = (char *)v435 + 72 * v125;
            if (v201 <= 1)
              v201 = 1;
            v199 = *(float64x2_t *)v204;
            v86 = *(float64x2_t *)(v204 + 24);
            v85 = *((float64x2_t *)v204 + 3);
            do
            {
              v205 = 0;
              v206 = 0;
              v207 = (char *)__p + 128 * v200;
              _D6 = *((_QWORD *)v207 + 6);
              v209 = *((float64x2_t *)v207 + 2);
              v210 = *((float64x2_t *)v207 + 4);
              v211 = *((double *)v207 + 10);
              _Q18 = (float64x2_t)vextq_s8((int8x16_t)v210, (int8x16_t)v210, 8uLL);
              v197.f64[0] = *((float64_t *)v207 + 14);
              _D21 = vextq_s8(*((int8x16_t *)v207 + 6), *((int8x16_t *)v207 + 6), 8uLL).u64[0];
              v213 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v207, (int64x2_t)v209);
              v214 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v207, (int64x2_t)v209);
              v216 = 0.0;
              do
              {
                v217 = (float64x2_t *)(v202 + v205);
                v218.f64[0] = *(float64_t *)(v202 + v205);
                _Q28.f64[0] = *(float64_t *)(v202 + v205 + 8);
                v219 = *(int8x16_t *)(v203 + v205);
                *(_QWORD *)&v220.f64[0] = v396.i64[0];
                *(_QWORD *)&v220.f64[1] = v219.i64[0];
                _Q29 = vaddq_f64(v85, vmlaq_n_f64(vmulq_n_f64(v199, v218.f64[0]), v86, _Q28.f64[0]));
                v222.f64[0] = 0.0;
                v222.f64[1] = _Q29.f64[0];
                _Q27 = vmlaq_f64(vnegq_f64(vmulq_f64(v220, (float64x2_t)vextq_s8((int8x16_t)_Q29, (int8x16_t)0, 8uLL))), v222, (float64x2_t)vextq_s8(v219, v396, 8uLL));
                *(_QWORD *)&v222.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(_Q29, (float64x2_t)v219, 1)), (float64x2_t)v219, _Q29, 1);
                v215.f64[1] = *((float64_t *)v207 + 6);
                v215.f64[0] = *((float64_t *)v207 + 2);
                _Q26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v213, _Q27.f64[0]), v214, _Q27, 1), v215, v222.f64[0]);
                __asm { FMLA            D29, D18, V27.D[1] }
                v225.f64[0] = *((float64_t *)v207 + 12);
                *(_QWORD *)&v225.f64[1] = _D21;
                __asm { FMLA            D8, D21, V27.D[1] }
                v218.f64[1] = _Q28.f64[0];
                v227 = vmlad_n_f64(_D8, v197.f64[0], v222.f64[0]);
                __asm { FMLA            D10, D28, V26.D[1] }
                _Q26.f64[0] = -(vmlad_n_f64(_Q29.f64[0], v211, v222.f64[0]) + _D10);
                v229 = v227 / _Q26.f64[0];
                _Q25 = vdivq_f64(vmulq_n_f64(v218, v227), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q26.f64[0], 0));
                __asm { FMLA            D28, D6, V25.D[1] }
                _Q28.f64[0] = _Q28.f64[0] + v211 * (v227 / _Q26.f64[0]);
                v231 = vaddq_f64(v225, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v207, _Q25.f64[0]), v209, _Q25, 1), v210, v227 / _Q26.f64[0]));
                _Q28.f64[0] = vaddq_f64(v197, _Q28).f64[0];
                v232 = v229 > 0.0;
                if (_Q28.f64[0] <= 0.0)
                  v232 = 0;
                v206 += v232;
                v233 = vdivq_f64(_Q25, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v229, 0));
                _Q27 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q28.f64[0], 0);
                _Q28 = *v217;
                _Q26 = vdivq_f64(v231, _Q27);
                _Q28.f64[0] = vsubq_f64(v233, *v217).f64[1];
                __asm { FMLA            D27, D28, V25.D[1] }
                v236 = v216 + _Q27.f64[0];
                _Q27.f64[0] = vsubq_f64(_Q26, *(float64x2_t *)(v203 + v205)).f64[1];
                __asm { FMLA            D26, D27, V25.D[1] }
                v216 = v236 + _Q26.f64[0];
                v205 += 16;
              }
              while (v205 != 80);
              if (v206 == 5 && v216 < v127)
              {
                v72 = *((float64x2_t *)v204 + 1);
                v364 = *((double *)v204 + 4);
                v365 = *((int8x16_t *)v204 + 3);
                v361 = vextq_s8(v365, v365, 8uLL).u64[0];
                v362 = *(int8x16_t *)v204;
                v360 = vextq_s8(*((int8x16_t *)v204 + 2), *((int8x16_t *)v204 + 2), 8uLL).u64[0];
                v363 = *((double *)v204 + 2);
                v359 = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
                v358 = vextq_s8(v362, v362, 8uLL).u64[0];
                v371 = *(int8x16_t *)v207;
                v368 = vextq_s8(v371, v371, 8uLL).u64[0];
                v367 = *((double *)v207 + 2);
                v366 = *((_QWORD *)v207 + 3);
                v372 = *((float64x2_t *)v207 + 2);
                v370 = vextq_s8((int8x16_t)v372, (int8x16_t)v372, 8uLL);
                v71 = *((_QWORD *)v207 + 7);
                v369 = *((double *)v207 + 6);
                v389 = *((int8x16_t *)v207 + 4);
                v374 = vextq_s8(v389, v389, 8uLL).u64[0];
                v74 = *((_QWORD *)v207 + 11);
                v385 = *((double *)v207 + 10);
                v393 = *((int8x16_t *)v207 + 6);
                v237 = vextq_s8(v393, v393, 8uLL);
                v381 = v237.u64[0];
                v237.i64[0] = *((_QWORD *)v207 + 14);
                v78 = *((double *)v207 + 15);
                v377 = (float64x2_t)v237;
                v126 = 1;
                v127 = v216;
                v357 = *((double *)v204 + 8);
              }
              ++v200;
            }
            while (v200 != v201);
          }
          if (__p)
          {
            v433 = (float64x2_t *)__p;
            operator delete(__p);
          }
          ++v125;
          v124 = (char *)v435;
        }
        while (v125 < 0x8E38E38E38E38E39 * ((v436 - (_BYTE *)v435) >> 3));
        v63 = v298;
        if ((v126 & 1) != 0)
        {
          v269.f64[0] = v364;
          *(_QWORD *)&v268.f64[0] = v365.i64[0];
          *(_QWORD *)&v268.f64[1] = v361;
          v270 = vmulq_f64(v268, v268);
          *(_QWORD *)&v269.f64[1] = v360;
          v271 = vmulq_f64(v269, v269);
          *(_QWORD *)&v273.f64[0] = v362.i64[0];
          v272.f64[0] = v363;
          *(_QWORD *)&v272.f64[1] = v359;
          _Q5 = vmulq_f64(v272, v272);
          *(_QWORD *)&v273.f64[1] = v358;
          v274 = vmulq_f64(v273, v273);
          v275 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v274, (float64x2_t)vdupq_laneq_s64((int64x2_t)v274, 1)), _Q5), (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q5, 1)), v271), (float64x2_t)vdupq_laneq_s64((int64x2_t)v271, 1)), v270), (float64x2_t)vdupq_laneq_s64((int64x2_t)v270, 1)).f64[0]+ v357 * v357)), 0);
          v276 = (int8x16_t)vdivq_f64(v268, v275);
          *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vdivq_f64(v269, v275);
          v277 = (int8x16_t)vdivq_f64(v272, v275);
          v86 = vdivq_f64(v273, v275);
          v85 = (float64x2_t)vextq_s8(v276, v276, 8uLL);
          v300 = v85.f64[0];
          v301 = _Q5.f64[0];
          v302.i64[0] = vextq_s8(v277, v277, 8uLL).u64[0];
          v303.i64[0] = v276.i64[0];
          v304 = v86.f64[0];
          v299 = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u64[0];
          v60 = v296;
          *(_QWORD *)&_Q5.f64[0] = v393.i64[0];
          v72 = (float64x2_t)v389;
          v75 = v385;
          v77 = v381;
          _Q18 = v377;
          v73 = v374;
          v69 = v366;
          if (!v435)
            goto LABEL_123;
        }
        else
        {
          _Q5.f64[0] = 0.0;
          v78 = 1.0;
          *(double *)&v77 = 0.0;
          _Q18.f64[0] = 0.0;
          v74 = 0;
          v72.f64[0] = 0.0;
          *(double *)&v73 = 0.0;
          v75 = 1.0;
          v71 = 0;
          v199.f64[0] = 0.0;
          v372 = v199;
          v199.f64[0] = 1.0;
          v370 = (int8x16_t)v199;
          v369 = 0.0;
          v69 = 0;
          v371.i64[0] = 1.0;
          v368 = 0;
          v367 = 0.0;
          v60 = v296;
          if (!v435)
          {
LABEL_123:
            if ((v126 & 1) == 0)
              goto LABEL_74;
            goto LABEL_77;
          }
        }
      }
      else
      {
        v126 = 0;
        _Q5.f64[0] = 0.0;
        v78 = 1.0;
        *(double *)&v77 = 0.0;
        _Q18.f64[0] = 0.0;
        v74 = 0;
        v72.f64[0] = 0.0;
        *(double *)&v73 = 0.0;
        v75 = 1.0;
        v71 = 0;
        v123.i64[0] = 0;
        v372 = (float64x2_t)v123;
        v123.i64[0] = 1.0;
        v370 = v123;
        v369 = 0.0;
        v69 = 0;
        v371.i64[0] = 1.0;
        v368 = 0;
        v367 = 0.0;
        v63 = v298;
        if (!v435)
          goto LABEL_123;
      }
      v436 = v124;
      v394 = _Q5.f64[0];
      v390 = v72;
      v386 = v75;
      v382 = v77;
      v378 = _Q18;
      v375 = v73;
      operator delete(v124);
      v73 = v375;
      _Q18 = v378;
      v77 = v382;
      v75 = v386;
      v72 = v390;
      v63 = v298;
      _Q5.f64[0] = v394;
      goto LABEL_123;
    }
    v68 = &v397[8 * v59];
    v368 = vextq_s8(*(int8x16_t *)v68, *(int8x16_t *)v68, 8uLL).u64[0];
    v69 = *((_QWORD *)v68 + 3);
    v70 = *((float64x2_t *)v68 + 2);
    v370 = vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL);
    v71 = *((_QWORD *)v68 + 7);
    v72 = *((float64x2_t *)v68 + 4);
    v73 = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
    v75 = *((double *)v68 + 10);
    v74 = *((_QWORD *)v68 + 11);
    _Q5 = *((float64x2_t *)v68 + 6);
    v77 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    _Q18.f64[0] = *((float64_t *)v68 + 14);
    v78 = *((double *)v68 + 15);
    _Q0 = vmulq_f64(_Q5, _Q5);
    _D1 = *((_QWORD *)v68 + 13);
    __asm { FMLA            D0, D1, V5.D[1] }
    _Q0.f64[0] = 1.0 / sqrt(_Q0.f64[0] + _Q18.f64[0] * _Q18.f64[0]);
    v81 = (int64x2_t)vmulq_n_f64(_Q5, _Q0.f64[0]);
    _Q0.f64[0] = vmulq_f64(_Q18, _Q0).f64[0];
    *(double *)&v82 = -_Q0.f64[0];
    *(_QWORD *)&v83.f64[0] = vdupq_laneq_s64(v81, 1).u64[0];
    v83.f64[1] = -*(double *)v81.i64;
    v81.i64[0] = 0;
    v86.f64[1] = _Q0.f64[0];
    v371 = *(int8x16_t *)v68;
    v367 = *((double *)v68 + 2);
    v84 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, *(double *)v68), (float64x2_t)COERCE_UNSIGNED_INT64(-_Q0.f64[0]), *(float64x2_t *)v68, 1), v83, v367);
    v372 = v70;
    v369 = *((double *)v68 + 6);
    v302 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v70.f64[0]), (float64x2_t)v82, v70, 1), v83, v369);
    v303 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v86, v72.f64[0]), (float64x2_t)v82, v72, 1), v83, v75);
    v85 = (float64x2_t)vextq_s8(v303, v303, 8uLL);
    *(_QWORD *)&v86.f64[0] = vextq_s8(v302, v302, 8uLL).u64[0];
    v300 = v85.f64[0];
    v301 = v86.f64[0];
    v304 = *(double *)v84.i64;
    v299 = vextq_s8(v84, v84, 8uLL).u64[0];
LABEL_77:
    v373 = *(double *)&v73;
    v376 = _Q18.f64[0];
    v380 = *(double *)&v77;
    v384 = v75;
    v388 = v72;
    v392 = _Q5.f64[0];
    v88 = *v61;
    v87 = v61[1];
    v447 = 0uLL;
    *(_QWORD *)&v448 = 0;
    v89 = v87 - v88;
    if (v89)
    {
      if (v89 < 0)
        sub_2394189F8();
      v90 = v63;
      v91 = v89 >> 4;
      v92 = 3 * (v89 >> 4);
      v93 = (double *)operator new(v92 * 8);
      v94 = (float64x2_t *)v93;
      *(_QWORD *)&v448 = &v93[3 * v91];
      v95 = (float64x2_t *)&v93[v92];
      *(_QWORD *)&v447 = v93;
      *((_QWORD *)&v447 + 1) = &v93[v92];
      v96 = *v61;
      v63 = v90;
      _D28 = v380;
      _D30 = v373;
      if (v61[1] != *v61)
      {
        v99 = 0;
        v100 = 0;
        *(_QWORD *)&v101.f64[0] = v371.i64[0];
        v101.f64[1] = v372.f64[0];
        *(_QWORD *)&v86.f64[0] = v368;
        *(_QWORD *)&v86.f64[1] = v370.i64[0];
        v85.f64[0] = v367;
        v85.f64[1] = v369;
        v102.f64[0] = v304;
        *(_QWORD *)&v102.f64[1] = v299;
        *(_QWORD *)&v103.f64[0] = v303.i64[0];
        v103.f64[1] = v300;
        *(_QWORD *)&v104.f64[0] = v302.i64[0];
        v104.f64[1] = v301;
        v105 = v93 + 2;
        do
        {
          v106 = (double *)(v96 + v99);
          v107 = vmulq_n_f64(v102, *v106);
          _Q17 = *(float64x2_t *)v106;
          v109 = (uint64_t *)(*v62 + v99);
          _Q18.i64[0] = *v109;
          *(_QWORD *)&v111.f64[0] = v396.i64[0];
          v112 = *(_OWORD *)v109;
          _Q18.i64[1] = v112 >> 64;
          *(_QWORD *)&v111.f64[1] = v112;
          v113 = vaddq_f64(v103, vmlaq_n_f64(v107, v104, _Q17.f64[1]));
          _Q21.f64[0] = 0.0;
          _Q21.f64[1] = v113.f64[0];
          _Q19 = vmlaq_f64(vnegq_f64(vmulq_f64(v111, (float64x2_t)vextq_s8((int8x16_t)v113, (int8x16_t)0, 8uLL))), _Q21, (float64x2_t)vextq_s8(_Q18, v396, 8uLL));
          *(_QWORD *)&v116 = *(_OWORD *)&vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v113, (float64x2_t)_Q18, 1)), (float64x2_t)_Q18, v113, 1);
          _Q16 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v101, _Q19.f64[0]), v86, _Q19, 1), v85, v116);
          __asm
          {
            FMLA            D18, D30, V19.D[1]
            FMLA            D21, D28, V19.D[1]
          }
          _Q21.f64[0] = vmlad_n_f64(_Q21.f64[0], v376, v116);
          __asm { FMLA            D6, D7, V16.D[1] }
          *(double *)&v119 = -(vmlad_n_f64(*(double *)_Q18.i64, v384, v116) + _D6);
          *((float64x2_t *)v105 - 1) = vdivq_f64(vmulq_n_f64(_Q17, _Q21.f64[0]), (float64x2_t)vdupq_lane_s64(v119, 0));
          *v105 = _Q21.f64[0] / *(double *)&v119;
          v105 += 3;
          ++v100;
          v96 = *v61;
          v99 += 16;
        }
        while (v100 < (v61[1] - *v61) >> 4);
      }
    }
    else
    {
      v94 = 0;
      v95 = 0;
    }
    *(_OWORD *)v442 = xmmword_239F13AC0;
    *(_OWORD *)&v442[16] = unk_239F13AD0;
    *(_OWORD *)&v442[32] = xmmword_239F13AE0;
    *(_OWORD *)v443 = unk_239F13AF0;
    v438 = xmmword_239F13A80;
    v439 = *(float64x2_t *)algn_239F13A90;
    v440 = (float64x2_t)xmmword_239F13AA0;
    v441 = xmmword_239F13AB0;
    v238 = sub_239C044F8((__int128 **)&v447, v63, (uint64_t)&v438, xmmword_239F13AB0, v86.f64[0], v85);
    *(double *)&v239 = v392;
    *(float64_t *)&v240 = v388.f64[0];
    if (v238)
    {
      if (v94 == v95)
      {
        v252 = 0.0;
      }
      else
      {
        *(_QWORD *)&v241.f64[1] = v370.i64[1];
        *(_QWORD *)&v242.f64[0] = v371.i64[0];
        v242.f64[1] = v372.f64[0];
        v243.f64[0] = v392;
        v243.f64[1] = v380;
        *(_QWORD *)&v244.f64[0] = v368;
        *(_QWORD *)&v244.f64[1] = v370.i64[0];
        v245 = vmlaq_n_f64(vmulq_n_f64(v242, v392), v244, v380);
        v244.f64[0] = v367;
        v248.f64[1] = v369;
        v246 = (int8x16_t)vmlaq_n_f64(v245, v248, v376);
        v247 = vmulq_f64(v388, v243).f64[0];
        v248.f64[0] = v247 + v373 * v380 + v384 * v376;
        v249 = vextq_s8(v246, v246, 8uLL).u64[0];
        v250 = vmulq_f64(v243, v372).f64[0] + v380 * *(double *)v370.i64 + v376 * v369;
        v251 = v247 + v380 * v373 + v376 * v384;
        v252 = 0.0;
        v253 = v94;
        do
        {
          v241.f64[0] = v253[1].f64[0];
          v254 = *v253;
          v253 = (float64x2_t *)((char *)v253 + 24);
          _V16.D[1] = v254.f64[1];
          *(_QWORD *)&v256.f64[0] = v246.i64[0];
          _Q18 = vaddq_f64(v241, v248);
          *(_QWORD *)&v256.f64[1] = v249;
          _Q17 = vaddq_f64(v254, v256);
          _D20 = _Q17.f64[1];
          __asm { FMLA            D19, D20, V16.D[1] }
          _D21 = v254.f64[1];
          __asm { FMLA            D20, D21, V16.D[1] }
          _D21 = v254.f64[1] + v250;
          __asm { FMLA            D16, D21, V17.D[1] }
          v252 = v252
               + vmlad_n_f64(_D19, v241.f64[0], _Q18.f64[0])
               / (sqrt(_D20 + v241.f64[0] * v241.f64[0])
                * sqrt(vmlad_n_f64(_D16, v241.f64[0] + v251, _Q18.f64[0])));
        }
        while (v253 != v95);
      }
      if (v252 / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3)) > v60)
      {
        v264 = v452[3 * v59];
        *(_OWORD *)(v264 + 40) = 0u;
        *(_OWORD *)(v264 + 72) = 0u;
        *(_OWORD *)(v264 + 8) = 0u;
        *(_OWORD *)(v264 + 24) = 0u;
        *(_OWORD *)(v264 + 56) = 0u;
        *(_OWORD *)(v264 + 88) = 0u;
        *(_OWORD *)(v264 + 104) = 0u;
        *(_QWORD *)v264 = 0x3FF0000000000000;
        *(_QWORD *)(v264 + 40) = 0x3FF0000000000000;
        *(_QWORD *)(v264 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(v264 + 120) = 0x3FF0000000000000;
        v265 = v452[v305];
        *(_QWORD *)&v266 = v371.i64[0];
        *((_QWORD *)&v266 + 1) = v368;
        *(_OWORD *)v265 = v266;
        *(double *)(v265 + 16) = v367;
        *(_QWORD *)(v265 + 24) = v69;
        *(float64_t *)&v266 = v372.f64[0];
        *((_QWORD *)&v266 + 1) = v370.i64[0];
        *(_OWORD *)(v265 + 32) = v266;
        *(double *)(v265 + 48) = v369;
        *(_QWORD *)(v265 + 56) = v71;
        *((double *)&v240 + 1) = v373;
        *(_OWORD *)(v265 + 64) = v240;
        *((double *)&v239 + 1) = v380;
        *(double *)(v265 + 80) = v384;
        *(_QWORD *)(v265 + 88) = v74;
        *(_OWORD *)(v265 + 96) = v239;
        *(double *)(v265 + 112) = v376;
        *(double *)(v265 + 120) = v78;
        v267 = v452[v306];
        *(_OWORD *)(v267 + 64) = *(_OWORD *)v442;
        *(_OWORD *)(v267 + 80) = *(_OWORD *)&v442[16];
        *(_OWORD *)(v267 + 96) = *(_OWORD *)&v442[32];
        *(_OWORD *)(v267 + 112) = *(_OWORD *)v443;
        *(_OWORD *)v267 = v438;
        *(float64x2_t *)(v267 + 16) = v439;
        *(float64x2_t *)(v267 + 32) = v440;
        *(float64x2_t *)(v267 + 48) = v441;
        v297 = v59;
        v60 = v252 / (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v95 - (char *)v94) >> 3));
      }
    }
    if (v94)
      operator delete(v94);
LABEL_74:
    ++v59;
  }
  while (v59 != 3);
  if (v297 != -1)
  {
    v278 = v404;
    *(_OWORD *)(a1 + 72) = v403;
    *(_OWORD *)(a1 + 88) = v278;
    v279 = v406;
    *(_OWORD *)(a1 + 104) = v405;
    *(_OWORD *)(a1 + 120) = v279;
    v280 = v400;
    *(_OWORD *)(a1 + 8) = v399;
    *(_OWORD *)(a1 + 24) = v280;
    v281 = v402;
    *(_OWORD *)(a1 + 40) = v401;
    *(float64x2_t *)(a1 + 56) = v281;
    v282 = v407;
    v283 = v408;
    v284 = v409;
    *(float64x2_t *)(a1 + 184) = v410;
    *(_OWORD *)(a1 + 168) = v284;
    *(_OWORD *)(a1 + 152) = v283;
    *(_OWORD *)(a1 + 136) = v282;
    v285 = v411;
    v286 = v412;
    v287 = v413;
    *(_OWORD *)(a1 + 248) = v414;
    *(_OWORD *)(a1 + 232) = v287;
    *(_OWORD *)(a1 + 216) = v286;
    *(_OWORD *)(a1 + 200) = v285;
    v288 = v415;
    v289 = v416;
    v290 = v418;
    *(_OWORD *)(a1 + 296) = v417;
    *(float64x2_t *)(a1 + 312) = v290;
    *(_OWORD *)(a1 + 264) = v288;
    *(_OWORD *)(a1 + 280) = v289;
    v291 = v419;
    v292 = v420;
    v293 = v422;
    *(_OWORD *)(a1 + 360) = v421;
    *(_OWORD *)(a1 + 376) = v293;
    v58 = 1;
    *(_OWORD *)(a1 + 328) = v291;
    *(_OWORD *)(a1 + 344) = v292;
    goto LABEL_132;
  }
LABEL_139:
  v58 = 0;
  v294 = v423;
  if (v423)
  {
LABEL_133:
    v424 = v294;
    operator delete(v294);
  }
LABEL_134:
  if (v426)
  {
    v427 = v426;
    operator delete(v426);
  }
  if (v429)
  {
    v430 = v429;
    operator delete(v429);
  }
  return v58;
}

void sub_239C66F64(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)STACK[0x808];
  if (STACK[0x808])
  {
    STACK[0x810] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x7A8];
  if (STACK[0x7A8])
  {
    STACK[0x7B0] = (unint64_t)v3;
    operator delete(v3);
    v4 = (void *)STACK[0x7C0];
    if (!STACK[0x7C0])
    {
LABEL_5:
      v5 = (void *)STACK[0x7D8];
      if (!STACK[0x7D8])
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v4 = (void *)STACK[0x7C0];
    if (!STACK[0x7C0])
      goto LABEL_5;
  }
  STACK[0x7C8] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0x7D8];
  if (!STACK[0x7D8])
LABEL_6:
    _Unwind_Resume(a1);
LABEL_9:
  STACK[0x7E0] = (unint64_t)v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_239C6702C(uint64_t a1)
{
  return a1 + 8;
}

__n128 sub_239C67034@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;

  v2 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 48) = v5;
  v6 = *(_OWORD *)(a1 + 136);
  v7 = *(_OWORD *)(a1 + 152);
  v8 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 176) = v8;
  *(_OWORD *)(a2 + 128) = v6;
  *(_OWORD *)(a2 + 144) = v7;
  v9 = *(_OWORD *)(a1 + 200);
  v10 = *(_OWORD *)(a1 + 216);
  v11 = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 240) = v11;
  *(_OWORD *)(a2 + 192) = v9;
  *(_OWORD *)(a2 + 208) = v10;
  v12 = *(_OWORD *)(a1 + 264);
  v13 = *(_OWORD *)(a1 + 280);
  v14 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 288) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 304) = v14;
  *(_OWORD *)(a2 + 256) = v12;
  *(_OWORD *)(a2 + 272) = v13;
  result = *(__n128 *)(a1 + 328);
  v16 = *(_OWORD *)(a1 + 344);
  v17 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a2 + 352) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a2 + 368) = v17;
  *(__n128 *)(a2 + 320) = result;
  *(_OWORD *)(a2 + 336) = v16;
  return result;
}

BOOL sub_239C670BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, double *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  char v53;
  char *v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  float64x2_t *v91;
  char *v92;
  uint64_t v93;
  double *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  long double v99;
  long double v100;
  long double v101;
  long double v102;
  long double v103;
  long double v104;
  long double v105;
  long double v106;
  long double v107;
  long double v108;
  long double v109;
  long double v110;
  long double v111;
  long double v112;
  double v113;
  double v114;
  double v115;
  double *v116;
  _QWORD *v117;
  int8x8_t v118;
  uint8x8_t v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  float64x2_t *v125;
  uint64_t v126;
  int v127;
  double *v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  uint64_t v166;
  _QWORD *v167;
  BOOL v168;
  unint64_t v169;
  unint64_t v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v191;
  double v196;
  BOOL v198;
  BOOL v200;
  BOOL v201;
  uint64_t v203;
  char v204;
  char *v205;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v213;
  double v215;
  double v216;
  double v217;
  int8x16_t v220;
  double v221;
  void *__p[3];
  __int128 v223;
  _OWORD *v224;

  v8 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
    return v8 != v7;
  v208 = a1[1];
  v12 = v7 - v8;
  v13 = v12 >> 3;
  v223 = 0uLL;
  v224 = 0;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (v12 >> 3 <= v14)
  {
    if (v12 >> 3 < v14)
      *(_QWORD *)(a4 + 8) = *(_QWORD *)a4 + 24 * v13;
  }
  else
  {
    sub_239C67EEC((void **)a4, (v12 >> 3) - v14, &v223);
    v12 = a1[1] - *a1;
    v13 = v12 >> 3;
  }
  v15 = (char *)*a5;
  v16 = (char *)a5[1];
  v17 = (unint64_t)&v16[-*a5];
  v18 = v13 - v17;
  v211 = a5;
  if (v13 > v17)
  {
    v19 = a5[2];
    if (v19 - (uint64_t)v16 >= v18)
    {
      bzero(v16, v13 - v17);
      a5[1] = &v16[v18];
      v26 = a6;
      goto LABEL_36;
    }
    v207 = v8;
    if (v12 < 0)
      sub_2394189F8();
    v20 = v19 - (_QWORD)v15;
    v21 = 2 * (v19 - (_QWORD)v15);
    if (v21 <= v13)
      v21 = v13;
    if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
      v22 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    v23 = (char *)operator new(v22);
    v24 = &v23[v17];
    bzero(&v23[v17], v13 - v17);
    if (v16 == v15)
      goto LABEL_34;
    if (v17 < 8 || (unint64_t)(v15 - v23) < 0x20)
      goto LABEL_31;
    if (v17 >= 0x20)
    {
      v25 = v17 & 0xFFFFFFFFFFFFFFE0;
      v27 = v16 - 16;
      v28 = &v23[v16 - 16 - v15];
      v29 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v30 = *(_OWORD *)v27;
        *((_OWORD *)v28 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v28 = v30;
        v28 -= 32;
        v27 -= 32;
        v29 -= 32;
      }
      while (v29);
      if (v17 == v25)
        goto LABEL_33;
      if ((v17 & 0x18) == 0)
      {
        v24 -= v25;
        v16 -= v25;
        goto LABEL_31;
      }
    }
    else
    {
      v25 = 0;
    }
    v31 = v25 - (v17 & 0xFFFFFFFFFFFFFFF8);
    v32 = &v16[-v25 - 8];
    v33 = v32 - v15;
    do
    {
      v34 = *(_QWORD *)v32;
      v32 -= 8;
      *(_QWORD *)&v23[v33] = v34;
      v33 -= 8;
      v31 += 8;
    }
    while (v31);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_33;
    v24 -= v17 & 0xFFFFFFFFFFFFFFF8;
    v16 -= v17 & 0xFFFFFFFFFFFFFFF8;
LABEL_31:
    v35 = v24 - 1;
    do
    {
      v36 = *--v16;
      *v35-- = v36;
    }
    while (v16 != v15);
LABEL_33:
    v24 = v23;
LABEL_34:
    v26 = a6;
    *v211 = (uint64_t)v24;
    v211[1] = (uint64_t)&v23[v13];
    v211[2] = (uint64_t)&v23[v22];
    v8 = v207;
    if (v15)
      operator delete(v15);
    goto LABEL_36;
  }
  v26 = a6;
  if (v13 < v17)
    a5[1] = &v15[v13];
LABEL_36:
  v37 = a1[1] - *a1;
  v38 = v37 >> 3;
  v39 = (char *)*v26;
  v40 = (char *)v26[1];
  v41 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v40[-*v26];
  v42 = (v37 >> 3) - v41;
  if (v37 >> 3 <= v41)
  {
    if (v37 >> 3 >= v41)
      goto LABEL_57;
    v54 = &v39[3 * v38];
    goto LABEL_56;
  }
  v43 = v26[2];
  if (0xAAAAAAAAAAAAAAABLL * (v43 - (_QWORD)v40) >= v42)
  {
    v54 = &v40[3 * v42];
    do
    {
      *v40 = 0;
      *(_WORD *)(v40 + 1) = 0;
      v40 += 3;
    }
    while (v40 != v54);
LABEL_56:
    v26[1] = v54;
    goto LABEL_57;
  }
  if (v37 < 0)
    sub_2394189F8();
  v44 = 0xAAAAAAAAAAAAAAABLL * (v43 - (_QWORD)v39);
  v45 = 2 * v44;
  if (2 * v44 <= v38)
    v45 = v38;
  if (v44 >= 0x2AAAAAAAAAAAAAAALL)
    v46 = 0x5555555555555555;
  else
    v46 = v45;
  if (v46 >= 0x5555555555555556)
    sub_239418A80();
  v47 = (char *)operator new(3 * v46);
  v48 = &v47[3 * v41];
  v49 = &v47[3 * v38];
  v50 = v48;
  do
  {
    *v50 = 0;
    *(_WORD *)(v50 + 1) = 0;
    v50 += 3;
  }
  while (v50 != v49);
  v51 = (char *)*v26;
  if (v40 != (char *)*v26)
  {
    do
    {
      v52 = *(_WORD *)(v40 - 3);
      v40 -= 3;
      v53 = v40[2];
      *(_WORD *)(v48 - 3) = v52;
      v48 -= 3;
      v48[2] = v53;
    }
    while (v40 != v51);
    v40 = (char *)*v26;
  }
  *v26 = v48;
  v26[1] = v49;
  v26[2] = &v47[3 * v46];
  if (v40)
    operator delete(v40);
LABEL_57:
  v223 = 0uLL;
  v224 = 0;
  v55 = operator new(0x80uLL);
  v56 = *(_OWORD *)(a3 + 144);
  v55[4] = *(_OWORD *)(a3 + 128);
  v55[5] = v56;
  v57 = *(_OWORD *)(a3 + 176);
  v55[6] = *(_OWORD *)(a3 + 160);
  v55[7] = v57;
  v58 = *(_OWORD *)(a3 + 80);
  *v55 = *(_OWORD *)(a3 + 64);
  v55[1] = v58;
  v59 = *(_OWORD *)(a3 + 112);
  v55[2] = *(_OWORD *)(a3 + 96);
  v55[3] = v59;
  *(_QWORD *)&v223 = v55;
  v224 = v55 + 8;
  v60 = (__int128 *)operator new(0x100uLL);
  v61 = *(_OWORD *)(a3 + 336);
  v60[12] = *(_OWORD *)(a3 + 320);
  v60[13] = v61;
  v62 = *(_OWORD *)(a3 + 368);
  v60[14] = *(_OWORD *)(a3 + 352);
  v60[15] = v62;
  v63 = *(_OWORD *)(a3 + 272);
  v60[8] = *(_OWORD *)(a3 + 256);
  v60[9] = v63;
  v64 = *(_OWORD *)(a3 + 304);
  v60[10] = *(_OWORD *)(a3 + 288);
  v60[11] = v64;
  v65 = *(_OWORD *)(a3 + 64);
  v66 = *(_OWORD *)(a3 + 80);
  v67 = *(_OWORD *)(a3 + 112);
  v60[2] = *(_OWORD *)(a3 + 96);
  v60[3] = v67;
  *v60 = v65;
  v60[1] = v66;
  v68 = *(_OWORD *)(a3 + 128);
  v69 = *(_OWORD *)(a3 + 144);
  v70 = *(_OWORD *)(a3 + 176);
  v60[6] = *(_OWORD *)(a3 + 160);
  v60[7] = v70;
  v60[4] = v68;
  v60[5] = v69;
  *(_QWORD *)&v223 = v60;
  v224 = v60 + 16;
  operator delete(v55);
  *((_QWORD *)&v223 + 1) = v60 + 16;
  v71 = operator new(0x200uLL);
  v72 = *(_OWORD *)(a3 + 528);
  v71[20] = *(_OWORD *)(a3 + 512);
  v71[21] = v72;
  v73 = *(_OWORD *)(a3 + 560);
  v71[22] = *(_OWORD *)(a3 + 544);
  v71[23] = v73;
  v74 = *(_OWORD *)(a3 + 464);
  v71[16] = *(_OWORD *)(a3 + 448);
  v71[17] = v74;
  v75 = *(_OWORD *)(a3 + 496);
  v71[18] = *(_OWORD *)(a3 + 480);
  v71[19] = v75;
  v76 = v60[8];
  v77 = v60[9];
  v78 = v60[11];
  v71[10] = v60[10];
  v71[11] = v78;
  v71[8] = v76;
  v71[9] = v77;
  v79 = v60[12];
  v80 = v60[13];
  v81 = v60[15];
  v71[14] = v60[14];
  v71[15] = v81;
  v71[12] = v79;
  v71[13] = v80;
  v82 = *v60;
  v83 = v60[1];
  v84 = v60[3];
  v71[2] = v60[2];
  v71[3] = v84;
  *v71 = v82;
  v71[1] = v83;
  v85 = v60[4];
  v86 = v60[5];
  v87 = v60[7];
  v71[6] = v60[6];
  v71[7] = v87;
  v71[4] = v85;
  v71[5] = v86;
  *(_QWORD *)&v223 = v71;
  v224 = v71 + 32;
  operator delete(v60);
  *((_QWORD *)&v223 + 1) = v71 + 24;
  v88 = *a1;
  if (a1[1] == *a1)
    goto LABEL_129;
  v209 = a3 + 448;
  v210 = a3 + 64;
  v89 = 0;
  v213 = a3 + 256;
  while (2)
  {
    v90 = *(unsigned int *)(v88 + 8 * v89);
    v91 = (float64x2_t *)operator new(0x30uLL);
    v92 = (char *)operator new(0x30uLL);
    v93 = 0;
    __p[1] = v92 + 48;
    __p[2] = v92 + 48;
    __p[0] = v92;
    do
    {
      v117 = (_QWORD *)(a2 + 40 * v93);
      v118 = (int8x8_t)v117[1];
      if (v118)
      {
        v119 = (uint8x8_t)vcnt_s8(v118);
        v119.i16[0] = vaddlv_u8(v119);
        if (v119.u32[0] > 1uLL)
        {
          v120 = v90;
          if (*(_QWORD *)&v118 <= v90)
            v120 = v90 % *(_QWORD *)&v118;
        }
        else
        {
          v120 = (v118.i32[0] - 1) & v90;
        }
        v121 = *(uint64_t **)(*v117 + 8 * v120);
        if (v121)
        {
          v121 = (uint64_t *)*v121;
          if (v121)
          {
            if (v119.u32[0] < 2uLL)
            {
              v122 = *(_QWORD *)&v118 - 1;
              while (1)
              {
                v124 = v121[1];
                if (v124 == v90)
                {
                  if (*((_DWORD *)v121 + 4) == (_DWORD)v90)
                    goto LABEL_85;
                }
                else if ((v124 & v122) != v120)
                {
                  goto LABEL_84;
                }
                v121 = (uint64_t *)*v121;
                if (!v121)
                  goto LABEL_85;
              }
            }
            do
            {
              v123 = v121[1];
              if (v123 == v90)
              {
                if (*((_DWORD *)v121 + 4) == (_DWORD)v90)
                  break;
              }
              else
              {
                if (v123 >= *(_QWORD *)&v118)
                  v123 %= *(_QWORD *)&v118;
                if (v123 != v120)
                  goto LABEL_84;
              }
              v121 = (uint64_t *)*v121;
            }
            while (v121);
          }
        }
      }
      else
      {
LABEL_84:
        v121 = 0;
      }
LABEL_85:
      v125 = &v91[v93];
      *v125 = *(float64x2_t *)(v121 + 5);
      v126 = a3 + 192 * v93;
      v114 = -*(double *)(v126 + 16) / *(double *)v126 + v125->f64[0] * (1.0 / *(double *)v126);
      v115 = -*(double *)(v126 + 24) / *(double *)(v126 + 8) + v125->f64[1] * (1.0 / *(double *)(v126 + 8));
      v127 = *(unsigned __int8 *)(v126 + 32);
      if (v127 == 2)
      {
        v94 = *(double **)(v126 + 40);
        v95 = *v94;
        v96 = v94[1];
        v98 = v94[2];
        v97 = v94[3];
        v99 = sqrt(v115 * v115 + v114 * v114);
        v100 = atan2(v99, 1.0);
        v101 = v99
             / (v100
              + v95 * (v100 * (v100 * v100))
              + v96 * (v100 * v100 * (v100 * (v100 * v100)))
              + v98 * (v100 * v100 * (v100 * v100 * (v100 * (v100 * v100))))
              + v97 * (v100 * v100 * (v100 * v100 * (v100 * v100 * (v100 * (v100 * v100))))));
        v102 = sqrt(v115 * v101 * (v115 * v101) + v114 * v101 * (v114 * v101));
        v103 = atan2(v102, 1.0);
        v104 = v102
             / (v103
              + v95 * (v103 * (v103 * v103))
              + v96 * (v103 * v103 * (v103 * (v103 * v103)))
              + v98 * (v103 * v103 * (v103 * v103 * (v103 * (v103 * v103))))
              + v97 * (v103 * v103 * (v103 * v103 * (v103 * v103 * (v103 * (v103 * v103))))));
        v105 = sqrt(v115 * v104 * (v115 * v104) + v114 * v104 * (v114 * v104));
        v106 = atan2(v105, 1.0);
        v107 = v105
             / (v106
              + v95 * (v106 * (v106 * v106))
              + v96 * (v106 * v106 * (v106 * (v106 * v106)))
              + v98 * (v106 * v106 * (v106 * v106 * (v106 * (v106 * v106))))
              + v97 * (v106 * v106 * (v106 * v106 * (v106 * v106 * (v106 * (v106 * v106))))));
        v108 = sqrt(v115 * v107 * (v115 * v107) + v114 * v107 * (v114 * v107));
        v109 = atan2(v108, 1.0);
        v110 = v108
             / (v109
              + v95 * (v109 * (v109 * v109))
              + v96 * (v109 * v109 * (v109 * (v109 * v109)))
              + v98 * (v109 * v109 * (v109 * v109 * (v109 * (v109 * v109))))
              + v97 * (v109 * v109 * (v109 * v109 * (v109 * v109 * (v109 * (v109 * v109))))));
        v111 = sqrt(v115 * v110 * (v115 * v110) + v114 * v110 * (v114 * v110));
        v112 = atan2(v111, 1.0);
        v113 = v111
             / (v112
              + v95 * (v112 * (v112 * v112))
              + v96 * (v112 * v112 * (v112 * (v112 * v112)))
              + v98 * (v112 * v112 * (v112 * v112 * (v112 * (v112 * v112))))
              + v97 * (v112 * v112 * (v112 * v112 * (v112 * v112 * (v112 * (v112 * v112))))));
LABEL_62:
        v114 = v114 * v113;
        v115 = v115 * v113;
        goto LABEL_63;
      }
      if (v127 == 1)
      {
        v128 = *(double **)(v126 + 40);
        v130 = *v128;
        v129 = v128[1];
        v131 = v128[2];
        v132 = v128[3];
        v133 = v128[4];
        if (v132 * v132 + v133 * v133 <= 2.22507386e-308)
        {
          v157 = v115 * v115 + v114 * v114;
          v158 = 1.0 / (v130 * v157 + 1.0 + v129 * (v157 * v157) + v131 * (v157 * (v157 * v157)));
          v159 = v115 * v158 * (v115 * v158) + v114 * v158 * (v114 * v158);
          v160 = 1.0 / (v130 * v159 + 1.0 + v129 * (v159 * v159) + v131 * (v159 * (v159 * v159)));
          v161 = v115 * v160 * (v115 * v160) + v114 * v160 * (v114 * v160);
          v162 = 1.0 / (v130 * v161 + 1.0 + v129 * (v161 * v161) + v131 * (v161 * (v161 * v161)));
          v163 = v115 * v162 * (v115 * v162) + v114 * v162 * (v114 * v162);
          v164 = 1.0 / (v130 * v163 + 1.0 + v129 * (v163 * v163) + v131 * (v163 * (v163 * v163)));
          v165 = v115 * v164 * (v115 * v164) + v114 * v164 * (v114 * v164);
          v113 = 1.0 / (v130 * v165 + 1.0 + v129 * (v165 * v165) + v131 * (v165 * (v165 * v165)));
          goto LABEL_62;
        }
        v134 = v115 * v115 + v114 * v114;
        v135 = 1.0 / (v130 * v134 + 1.0 + v129 * (v134 * v134) + v131 * (v134 * (v134 * v134)));
        v136 = v135 * (v114 - (v133 * (v134 + (v114 + v114) * v114) + (v132 + v132) * (v114 * v115)));
        v137 = (v115 - ((v133 + v133) * (v114 * v115) + v132 * (v134 + (v115 + v115) * v115))) * v135;
        v138 = v137 * v137 + v136 * v136;
        v139 = 1.0 / (v130 * v138 + 1.0 + v129 * (v138 * v138) + v131 * (v138 * (v138 * v138)));
        v140 = v136 * v137;
        v141 = v133 * (v138 + (v136 + v136) * v136) + (v132 + v132) * (v136 * v137);
        v142 = (v133 + v133) * v140 + v132 * (v138 + (v137 + v137) * v137);
        v143 = v139 * (v114 - v141);
        v144 = (v115 - v142) * v139;
        v145 = v144 * v144 + v143 * v143;
        v146 = 1.0 / (v130 * v145 + 1.0 + v129 * (v145 * v145) + v131 * (v145 * (v145 * v145)));
        v147 = v143 * v144;
        v148 = v146 * (v114 - (v133 * (v145 + (v143 + v143) * v143) + (v132 + v132) * (v143 * v144)));
        v149 = (v115 - ((v133 + v133) * v147 + v132 * (v145 + (v144 + v144) * v144))) * v146;
        v150 = v149 * v149 + v148 * v148;
        v151 = 1.0 / (v130 * v150 + 1.0 + v129 * (v150 * v150) + v131 * (v150 * (v150 * v150)));
        v152 = v148 * v149;
        v153 = v151 * (v114 - (v133 * (v150 + (v148 + v148) * v148) + (v132 + v132) * (v148 * v149)));
        v154 = (v115 - ((v133 + v133) * v152 + v132 * (v150 + (v149 + v149) * v149))) * v151;
        v155 = v154 * v154 + v153 * v153;
        v156 = 1.0 / (v130 * v155 + 1.0 + v129 * (v155 * v155) + v131 * (v155 * (v155 * v155)));
        v114 = v156 * (v114 - (v133 * (v155 + (v153 + v153) * v153) + (v132 + v132) * (v153 * v154)));
        v115 = (v115 - ((v133 + v133) * (v153 * v154) + v132 * (v155 + (v154 + v154) * v154))) * v156;
      }
LABEL_63:
      v116 = (double *)&v92[16 * v93];
      *v116 = v114;
      v116[1] = v115;
      ++v93;
    }
    while (v93 != 3);
    if (sub_239C6808C(__p, &v223, (uint64_t)&v220))
    {
      v166 = *(_QWORD *)a4 + 24 * v89;
      *(int8x16_t *)v166 = v220;
      *(double *)(v166 + 16) = v221;
      v167 = operator new(0x18uLL);
      *v167 = a3;
      v167[1] = a3 + 192;
      v167[2] = a3 + 384;
      *(_QWORD *)&v215 = vextq_s8(v220, v220, 8uLL).u64[0];
      v216 = *(double *)v220.i64;
      v217 = v221;
      v168 = sub_239E1BE24((uint64_t)v167, (uint64_t)(v167 + 3), a7, *(double *)v220.i64, v215, v221);
      v170 = v169;
      operator delete(v167);
      if (v168)
      {
        if (v170 >= 3)
        {
          v171 = sub_239C503BC((float64x2_t *)&v220, v210, v213);
          v172 = sub_239C503BC((float64x2_t *)&v220, v210, v209);
          v173 = fmin(v171, 1.79769313e308);
          if (v172 >= v173)
            v174 = v173;
          else
            v174 = v172;
          v175 = sub_239C503BC((float64x2_t *)&v220, v213, v209);
          v179 = fmax(v171, 0.0);
          if (v179 < v172)
            v179 = v172;
          v180 = v179 >= v175 ? v179 : v175;
          v181 = a7[4];
          if (v180 >= v181)
          {
            v182 = fmin(v172, 1.79769313e308);
            if (v175 < v182)
              v182 = v175;
            v183 = v175 >= v173 ? v173 : v175;
            v184 = *a7;
            v176.f64[0] = *(double *)(a3 + 80) * v216 + *(double *)(a3 + 112) * v215 + *(double *)(a3 + 144) * v217;
            v177.f64[0] = *(float64_t *)(a3 + 176);
            _Q4 = vsubq_f64(*v91, vmlaq_f64(*(float64x2_t *)(a3 + 16), *(float64x2_t *)a3, vdivq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 64), v216), *(float64x2_t *)(a3 + 96), v215), *(float64x2_t *)(a3 + 128), v217), *(float64x2_t *)(a3 + 160)), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(v176, v177), 0))));
            _Q6 = vmulq_f64(_Q4, _Q4);
            _D7 = _Q4.f64[1];
            __asm { FMLA            D6, D7, V4.D[1] }
            v191 = sqrt(_Q6.f64[0]);
            _Q6.f64[0] = *(double *)(a3 + 272) * v216 + *(double *)(a3 + 304) * v215 + *(double *)(a3 + 336) * v217;
            v178.f64[0] = *(float64_t *)(a3 + 368);
            _Q16 = vmlaq_f64(*(float64x2_t *)(a3 + 208), *(float64x2_t *)(a3 + 192), vdivq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 256), v216), *(float64x2_t *)(a3 + 288), v215), *(float64x2_t *)(a3 + 320), v217), *(float64x2_t *)(a3 + 352)), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64(_Q6, v178), 0)));
            _Q5 = vsubq_f64(v91[1], _Q16);
            _Q6 = vmulq_f64(_Q5, _Q5);
            _D7 = _Q5.f64[1];
            __asm { FMLA            D6, D7, V5.D[1] }
            v196 = sqrt(_Q6.f64[0]);
            _Q6.f64[0] = *(double *)(a3 + 464) * v216 + *(double *)(a3 + 496) * v215 + *(double *)(a3 + 528) * v217;
            _Q16.f64[0] = *(float64_t *)(a3 + 560);
            _Q16.f64[0] = vsubq_f64(v91[32], vmlaq_f64(*(float64x2_t *)(a3 + 400), *(float64x2_t *)(a3 + 384), vdivq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a3 + 448), v216), *(float64x2_t *)(a3 + 480), v215), *(float64x2_t *)(a3 + 512), v217), *(float64x2_t *)(a3 + 544)), (float64x2_t)vdupq_lane_s64((uint64_t)vaddq_f64(_Q6, _Q16), 0)))).f64[1];
            __asm { FMLA            D7, D16, V6.D[1] }
            v198 = sqrt(_D7) >= *a7 || v182 <= v181;
            _NF = !v198 && v196 < v184;
            v200 = !_NF || v183 <= v181;
            v201 = !v200 && v191 < v184;
            if (v201 && v174 > v181)
            {
              v203 = *v211;
              v204 = 2;
              goto LABEL_125;
            }
          }
        }
      }
      else
      {
        v203 = *v211;
        v204 = 1;
LABEL_125:
        *(_BYTE *)(v203 + v89) = v204;
        v205 = (char *)(*a6 + 3 * v89);
        *v205 = v204;
        v205[1] = v204;
        v205[2] = v204;
      }
    }
    if (__p[0])
      operator delete(__p[0]);
    operator delete(v91);
    ++v89;
    v88 = *a1;
    if (v89 < (a1[1] - *a1) >> 3)
      continue;
    break;
  }
  v71 = (_OWORD *)v223;
  if ((_QWORD)v223)
LABEL_129:
    operator delete(v71);
  v7 = v208;
  return v8 != v7;
}

void sub_239C67E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
  uint64_t v32;
  void *v34;

  v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(_QWORD *)(v32 - 168) = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

void sub_239C67EEC(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

BOOL sub_239C6808C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  _BOOL8 v5;
  size_t v9;
  double *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  double *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  __int128 v24;
  double v25;
  __int128 v26;
  double v27;
  __int128 v28;
  double v29;
  __int128 v30;
  int v31;
  int v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  std::bad_alloc *exception;
  std::bad_alloc *v38;
  void *v39[3];
  void *v40;
  unsigned int v41;
  void *v42;
  char v43;
  void *v44[2];
  int v45;
  int v46;

  v3 = a1[1] - *a1;
  if (v3 < 0x20 || (uint64_t)v3 >> 4 != (uint64_t)(a2[1] - *a2) >> 7)
    return 0;
  v9 = (((4 * v3) & 0x7FFFFFFF8) + 31) & 0xFFFFFFFE0;
  v44[1] = (void *)(v9 >> 3);
  v39[0] = 0;
  malloc_type_posix_memalign(v39, 0x20uLL, v9, 0x100BBD03uLL);
  v10 = (double *)v39[0];
  v44[0] = v39[0];
  if (!v39[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v38 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v38, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v11 = v3 >> 4;
  v12 = 2 * (v3 >> 4);
  v45 = v12;
  v46 = 4;
  v13 = a1[1];
  v14 = v13 - *a1;
  if (v13 != *a1)
  {
    v15 = 0;
    v16 = v14 >> 4;
    v17 = 4 * v11;
    v18 = 6 * v11;
    if (v16 <= 1)
      v16 = 1;
    v19 = (double *)(*a1 + 8);
    v20 = *a2 + 64;
    do
    {
      v21 = *(v19 - 1);
      v22 = *v19;
      v23 = *(double *)(v20 - 48);
      v24 = *(_OWORD *)(v20 - 64);
      v25 = *(double *)(v20 - 16);
      v26 = *(_OWORD *)(v20 - 32);
      v27 = *(double *)(v20 + 16);
      v28 = *(_OWORD *)v20;
      v29 = *(double *)(v20 + 48);
      v30 = *(_OWORD *)(v20 + 32);
      v10[v15] = *(double *)&v24 - v21 * v23;
      v10[v12 + v15] = *(double *)&v26 - v21 * v25;
      v31 = v17 + v15;
      v10[v31] = *(double *)&v28 - v21 * v27;
      v32 = v18 + v15;
      v10[v32] = *(double *)&v30 - v21 * v29;
      v10[v15 + 1] = *((double *)&v24 + 1) - v22 * v23;
      v10[v12 + v15 + 1] = *((double *)&v26 + 1) - v22 * v25;
      v10[v31 + 1] = *((double *)&v28 + 1) - v22 * v27;
      v10[v32 + 1] = *((double *)&v30 + 1) - v22 * v29;
      v15 += 2;
      v19 += 2;
      v20 += 128;
      --v16;
    }
    while (v16);
  }
  sub_23945B548((uint64_t)v39, (uint64_t)v44, 3, 0);
  v5 = v43 != 0;
  if (v43)
  {
    v35.f64[0] = *((float64_t *)v40 + 3);
    v33.f64[0] = *((float64_t *)v40 + 2 * v41 + 3);
    v34.f64[0] = *((float64_t *)v40 + 3 * v41 + 3);
    v35.f64[1] = *((float64_t *)v40 + v41 + 3);
    *(_QWORD *)(a3 + 16) = *(_OWORD *)&vdivq_f64(v33, v34);
    *(float64x2_t *)a3 = vdivq_f64(v35, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v34.f64[0], 0));
  }
  free(v42);
  free(v40);
  free(v39[0]);
  free(v44[0]);
  return v5;
}

void sub_239C682B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_239C682C8(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5, unsigned __int8 a6)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  double *v23;
  unint64_t v24;
  unint64_t *v26;
  uint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  double *v34;
  uint64_t *v35;
  uint64_t *v36;
  unint64_t v38;
  int8x8_t v41;
  uint8x8_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  char *v53;
  unint64_t *v54;
  __int128 v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  double *v67;
  uint64_t *v68;
  uint64_t *v69;
  BOOL v70;
  unint64_t v71;
  BOOL v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  unint64_t *v77;
  char *v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  __int128 v96;
  char *v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint8x8_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  float v110;
  _BOOL8 v111;
  unint64_t v112;
  unint64_t v113;
  size_t prime;
  unint64_t v115;
  uint8x8_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t *v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  float v127;
  size_t v128;
  unint64_t *v129;
  unint64_t *i;
  unint64_t v131;
  uint8x8_t v132;
  unint64_t v133;
  int8x8_t v134;
  BOOL v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  unint64_t v147;
  char *v148;
  uint64_t *v149;
  char *v150;
  unint64_t *v151;
  unint64_t *v152;
  int8x8_t *v153;
  unint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int *v163;
  unint64_t v164;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  int8x8_t v179;
  unint64_t v180;
  unint64_t v181;
  uint8x8_t v182;
  unint64_t v183;
  uint64_t **v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  _QWORD *j;
  _QWORD *v190;
  unint64_t v191;
  unint64_t v192;
  float64x2_t *v193;
  float64x2_t *v194;
  unint64_t v195;
  char *v196;
  _QWORD *v197;
  _QWORD *v198;
  void *v199;
  uint8x8_t v200;
  unint64_t v201;
  unint64_t v202;
  uint8x8_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  char *v215;
  char *v216;
  int64_t v217;
  unint64_t *v218;
  char *v219;
  char *v220;
  _QWORD *v221;
  char *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  char **v230;
  char *v231;
  int64_t v232;
  char *v233;
  char *v234;
  char *v235;
  __int128 v236;
  char *v237;
  char *v238;
  void *v239;
  void *v240;
  _QWORD *v241;
  void *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t *v245;
  _QWORD *v246;
  void *v247;
  unint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  double *v252;
  double *v253;
  double *v254;
  double v255;
  double v256;
  double v257;
  char *v258;
  double v259;
  uint64_t *v260;
  uint64_t *v261;
  __int128 v262;
  unint64_t v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t *v270;
  uint64_t *v271;
  __int128 v272;
  unint64_t v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t *v280;
  uint64_t *v281;
  __int128 v282;
  unint64_t v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  double v290;
  unsigned int v291;
  size_t v292;
  size_t v293;
  unsigned int v294;
  size_t v295;
  size_t v296;
  uint64_t v297;
  size_t v298;
  double *v299;
  char *v300;
  double v301;
  double *v302;
  double v303;
  double *v304;
  double v305;
  unsigned int v306;
  size_t v307;
  size_t v308;
  unsigned int v309;
  size_t v310;
  size_t v311;
  uint64_t v312;
  size_t v313;
  double v314;
  double *v315;
  double v316;
  double *v317;
  __int128 v318;
  unsigned __int8 *v319;
  uint64_t v320;
  unint64_t v321;
  int v322;
  int v323;
  uint64_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int8x16_t *v327;
  unint64_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int8x16_t v335;
  int8x16_t v336;
  uint8x16_t v337;
  uint16x8_t v338;
  uint16x8_t v339;
  uint8x16_t v340;
  uint16x8_t v341;
  uint16x8_t v342;
  unint64_t v343;
  int32x4_t v344;
  int32x4_t v345;
  uint64_t v346;
  int8x8_t *v347;
  int8x16_t v348;
  int8x8_t v349;
  uint16x8_t v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  BOOL v356;
  uint64_t v357;
  void *v358;
  _QWORD *v359;
  _QWORD *v360;
  void *v361;
  _QWORD *v362;
  _QWORD *v363;
  void *v364;
  _QWORD *v365;
  _QWORD *v366;
  void *v367;
  uint64_t v368;
  char *v369;
  __int128 v370;
  __int128 v371;
  unint64_t v372;
  _QWORD *v373;
  __int128 v374;
  _QWORD *v375;
  char *v376;
  _QWORD *v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  char *v381;
  char *v382;
  __int128 v383;
  char *v384;
  char *v385;
  char *v386;
  void *v387;
  void *v388;
  std::bad_alloc *exception;
  std::bad_alloc *v391;
  std::bad_alloc *v392;
  std::bad_alloc *v393;
  std::bad_alloc *v394;
  std::bad_alloc *v395;
  std::bad_alloc *v396;
  std::bad_alloc *v397;
  std::bad_alloc *v398;
  std::bad_alloc *v399;
  std::bad_alloc *v400;
  std::bad_alloc *v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t *__dst;
  unint64_t *v411;
  unint64_t v412;
  char *v413;
  _QWORD *v414;
  uint64_t v416;
  unint64_t *__p;
  unint64_t *__pa;
  uint64_t *__pb;
  unint64_t *v420;
  uint64_t v421;
  unint64_t *v422;
  __int128 v423;
  unint64_t v424;
  uint64_t *v425;
  int v426;
  unint64_t v427;
  void *v429[3];
  void *memptr;
  _BYTE *v431;
  uint64_t v432;
  void *v433[2];
  uint64_t v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  char *v439;
  void *v440;
  unsigned int v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  char v452;
  void *v453;
  unsigned int v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  __int128 v463;
  __int128 v464;
  char v465;
  void *v466;
  unsigned int v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  float v478;
  __int128 v479;
  __int128 v480;
  int v481;
  __int128 v482;
  __int128 v483;
  int v484;
  char *v485;
  char *v486;
  char *v487;
  char *v488;
  char *v489;
  char *v490;
  char *v491;
  __int128 v492;
  unint64_t *v493;
  unint64_t *v494;
  uint64_t v495;
  __int128 v496;
  uint64_t v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  size_t v501;
  unsigned int v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  char v513;
  void *v514;
  size_t v515;
  unsigned int v516;
  __int128 v517;
  __int128 v518;
  __int128 v519;
  __int128 v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  char v527;
  void *v528;
  size_t v529;
  unsigned int v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  __int128 v535;
  __int128 v536;
  __int128 v537;
  __int128 v538;
  _QWORD v539[4];

  v539[1] = *MEMORY[0x24BDAC8D0];
  v493 = 0;
  v494 = 0;
  v495 = 0;
  v425 = a1 + 29;
  sub_239AFA8E8(a1 + 29, (uint64_t)&v493);
  v9 = v493;
  v10 = v494;
  if (v493 == v494)
  {
    v15 = 0;
    if (v493)
      goto LABEL_694;
    return v15;
  }
  v11 = a1[11];
  if (v11)
  {
    v12 = -1;
    do
    {
      v13 = *(_DWORD *)(v11 + 220);
      if ((v13 & 0x80000000) == 0)
      {
        v14 = v12 >= v13 ? *(_DWORD *)(v11 + 220) : v12;
        v12 = v12 == -1 ? *(_DWORD *)(v11 + 220) : v14;
        if (!v12)
          break;
      }
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    v12 = -1;
  }
  v426 = v12;
  v408 = a3;
  v414 = a2;
  v16 = 0;
  v17 = 0;
  do
  {
    v19 = *v9;
    v18 = v9[1];
    v20 = sub_239470FCC((uint64_t)a1, *v9);
    v21 = sub_239470FCC((uint64_t)a1, v18);
    if (v426 < 0 || (*((_DWORD *)v20 + 49) == v426 ? (v22 = *((_DWORD *)v21 + 49) == v426) : (v22 = 0), v22))
    {
      v23 = (double *)sub_239AFAB78(v425, v19, v18);
      v24 = *((_QWORD *)v23 + 1);
      if (v16 <= v24)
        v16 = *((_QWORD *)v23 + 1);
      if (v17 > v24)
        v24 = v17;
      if (v23[3] < 60.0 && v23[2] > 2.0)
        v17 = v24;
    }
    v9 += 2;
  }
  while (v9 != v10);
  if (v16 < 0x10)
  {
    v15 = 0;
    goto LABEL_693;
  }
  v26 = v493;
  v422 = v494;
  if (v17 < 0x10)
  {
    v420 = 0;
    v31 = 0;
    v63 = 0;
    goto LABEL_136;
  }
  v27 = (uint64_t)a1;
  v28 = v426;
  if (v493 != v494)
  {
    v29 = v494;
    __p = 0;
    v420 = 0;
    v30 = 0;
    v412 = a6;
    while (1)
    {
      v33 = *v26;
      v32 = v26[1];
      v34 = (double *)sub_239AFAB78(v425, *v26, v32);
      v35 = sub_239470FCC(v27, v33);
      v36 = sub_239470FCC(v27, v32);
      if ((v28 & 0x80000000) == 0 && (*((_DWORD *)v35 + 49) != v28 || *((_DWORD *)v36 + 49) != v28))
      {
        v31 = v30;
        goto LABEL_40;
      }
      v38 = *((_QWORD *)v34 + 1);
      if (v34[2] < 2.0 || v34[3] > 60.0 || (double)v17 * 0.1 >= (double)v38)
      {
LABEL_54:
        v31 = v30;
        goto LABEL_113;
      }
      if (!v412)
      {
        if (v30 < v420)
          goto LABEL_112;
        v44 = 0xAAAAAAAAAAAAAAABLL * (v30 - __p) + 1;
        if (v44 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * (v420 - __p) > v44)
          v44 = 0x5555555555555556 * (v420 - __p);
        if (0xAAAAAAAAAAAAAAABLL * (v420 - __p) >= 0x555555555555555)
          v45 = 0xAAAAAAAAAAAAAAALL;
        else
          v45 = v44;
        if (v45)
        {
          if (v45 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v46 = (char *)operator new(24 * v45);
        }
        else
        {
          v46 = 0;
        }
        v52 = (unint64_t *)&v46[8 * (v30 - __p)];
        *v52 = v33;
        v52[1] = v32;
        v52[2] = v38;
        if (v30 == __p)
          goto LABEL_128;
        v53 = &v46[8 * (v30 - __p)];
        v54 = __p;
        v27 = (uint64_t)a1;
        v28 = v426;
        do
        {
          v55 = *(_OWORD *)(v30 - 3);
          *((_QWORD *)v53 - 1) = *(v30 - 1);
          *(_OWORD *)(v53 - 24) = v55;
          v53 -= 24;
          v30 -= 3;
        }
        while (v30 != __p);
LABEL_127:
        v30 = v54;
        __p = (unint64_t *)v53;
LABEL_129:
        v420 = (unint64_t *)&v46[24 * v45];
        v31 = v52 + 3;
        if (v30)
          operator delete(v30);
        v29 = v422;
        goto LABEL_40;
      }
      v41 = (int8x8_t)a5[1];
      if (!*(_QWORD *)&v41)
        goto LABEL_111;
      v42 = (uint8x8_t)vcnt_s8(v41);
      v42.i16[0] = vaddlv_u8(v42);
      if (v42.u32[0] > 1uLL)
      {
        v43 = v33;
        if (v33 >= *(_QWORD *)&v41)
          v43 = v33 % *(_QWORD *)&v41;
      }
      else
      {
        v43 = (*(_QWORD *)&v41 - 1) & v33;
      }
      v47 = *(_QWORD **)(*a5 + 8 * v43);
      if (!v47)
        goto LABEL_111;
      v48 = (_QWORD *)*v47;
      if (!*v47)
        goto LABEL_111;
      v49 = *(_QWORD *)&v41 - 1;
      if (v42.u32[0] < 2uLL)
      {
        while (1)
        {
          v50 = v48[1];
          if (v33 == v50)
          {
            if (v48[2] == v33)
              goto LABEL_92;
          }
          else if ((v50 & v49) != v43)
          {
            goto LABEL_111;
          }
          v48 = (_QWORD *)*v48;
          if (!v48)
            goto LABEL_111;
        }
      }
      while (1)
      {
        v51 = v48[1];
        if (v33 == v51)
          break;
        if (v51 >= *(_QWORD *)&v41)
          v51 %= *(_QWORD *)&v41;
        if (v51 != v43)
          goto LABEL_111;
LABEL_81:
        v48 = (_QWORD *)*v48;
        if (!v48)
          goto LABEL_111;
      }
      if (v48[2] != v33)
        goto LABEL_81;
LABEL_92:
      if (v42.u32[0] > 1uLL)
      {
        v56 = v32;
        if (v32 >= *(_QWORD *)&v41)
          v56 = v32 % *(_QWORD *)&v41;
      }
      else
      {
        v56 = v49 & v32;
      }
      v57 = *(_QWORD **)(*a5 + 8 * v56);
      if (v57)
      {
        v58 = (_QWORD *)*v57;
        if (v58)
        {
          if (v42.u32[0] < 2uLL)
          {
            while (1)
            {
              v59 = v58[1];
              if (v32 == v59)
              {
                if (v58[2] == v32)
                  goto LABEL_54;
              }
              else if ((v59 & v49) != v56)
              {
                goto LABEL_111;
              }
              v58 = (_QWORD *)*v58;
              if (!v58)
                goto LABEL_111;
            }
          }
          do
          {
            v60 = v58[1];
            if (v32 == v60)
            {
              if (v58[2] == v32)
                goto LABEL_54;
            }
            else
            {
              if (v60 >= *(_QWORD *)&v41)
                v60 %= *(_QWORD *)&v41;
              if (v60 != v56)
                break;
            }
            v58 = (_QWORD *)*v58;
          }
          while (v58);
        }
      }
LABEL_111:
      if (v30 >= v420)
      {
        v61 = 0xAAAAAAAAAAAAAAABLL * (v30 - __p) + 1;
        if (v61 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * (v420 - __p) > v61)
          v61 = 0x5555555555555556 * (v420 - __p);
        if (0xAAAAAAAAAAAAAAABLL * (v420 - __p) >= 0x555555555555555)
          v45 = 0xAAAAAAAAAAAAAAALL;
        else
          v45 = v61;
        if (v45)
        {
          if (v45 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v46 = (char *)operator new(24 * v45);
        }
        else
        {
          v46 = 0;
        }
        v52 = (unint64_t *)&v46[8 * (v30 - __p)];
        *v52 = v33;
        v52[1] = v32;
        v52[2] = v38;
        if (v30 != __p)
        {
          v53 = &v46[8 * (v30 - __p)];
          v54 = __p;
          v27 = (uint64_t)a1;
          v28 = v426;
          do
          {
            v62 = *(_OWORD *)(v30 - 3);
            *((_QWORD *)v53 - 1) = *(v30 - 1);
            *(_OWORD *)(v53 - 24) = v62;
            v53 -= 24;
            v30 -= 3;
          }
          while (v30 != __p);
          goto LABEL_127;
        }
LABEL_128:
        __p = v52;
        v27 = (uint64_t)a1;
        v28 = v426;
        goto LABEL_129;
      }
LABEL_112:
      *v30 = v33;
      v30[1] = v32;
      v31 = v30 + 3;
      v30[2] = v38;
LABEL_113:
      v27 = (uint64_t)a1;
LABEL_40:
      v26 += 2;
      v30 = v31;
      if (v26 == v29)
        goto LABEL_134;
    }
  }
  __p = 0;
  v420 = 0;
  v31 = 0;
LABEL_134:
  v63 = (uint64_t *)__p;
  if (0xAAAAAAAAAAAAAAABLL * (v31 - __p) <= 9)
  {
    v26 = v493;
    v422 = v494;
    v16 = v17;
LABEL_136:
    if (v26 != v422)
    {
      while (1)
      {
        __pa = (unint64_t *)v63;
        v66 = *v26;
        v65 = v26[1];
        v67 = (double *)sub_239AFAB78(v425, *v26, v65);
        v68 = sub_239470FCC((uint64_t)a1, v66);
        v69 = sub_239470FCC((uint64_t)a1, v65);
        if ((v426 < 0 || (*((_DWORD *)v68 + 49) == v426 ? (v70 = *((_DWORD *)v69 + 49) == v426) : (v70 = 0), v70))
          && ((v71 = *((_QWORD *)v67 + 1), v67[3] <= 60.0) ? (v72 = v67[2] < 2.0) : (v72 = 1),
              v72 ? (v73 = (double)v16 * 0.1 < (double)v71) : (v73 = 0),
              v73))
        {
          if (v31 >= v420)
          {
            v74 = 0xAAAAAAAAAAAAAAABLL * (v31 - __pa) + 1;
            if (v74 > 0xAAAAAAAAAAAAAAALL)
              sub_2394189F8();
            if (0x5555555555555556 * (v420 - __pa) > v74)
              v74 = 0x5555555555555556 * (v420 - __pa);
            if (0xAAAAAAAAAAAAAAABLL * (v420 - __pa) >= 0x555555555555555)
              v75 = 0xAAAAAAAAAAAAAAALL;
            else
              v75 = v74;
            if (v75)
            {
              if (v75 > 0xAAAAAAAAAAAAAAALL)
                sub_239418A80();
              v76 = (char *)operator new(24 * v75);
            }
            else
            {
              v76 = 0;
            }
            v77 = (unint64_t *)&v76[8 * (v31 - __pa)];
            *v77 = v66;
            v77[1] = v65;
            v77[2] = v71;
            if (v31 == __pa)
            {
              v63 = (uint64_t *)&v76[8 * (v31 - __pa)];
            }
            else
            {
              v78 = &v76[8 * (v31 - __pa)];
              do
              {
                v79 = *(_OWORD *)(v31 - 3);
                *((_QWORD *)v78 - 1) = *(v31 - 1);
                *(_OWORD *)(v78 - 24) = v79;
                v78 -= 24;
                v31 -= 3;
              }
              while (v31 != __pa);
              v31 = __pa;
              v63 = (uint64_t *)v78;
            }
            v420 = (unint64_t *)&v76[24 * v75];
            v64 = (uint64_t *)(v77 + 3);
            if (v31)
              operator delete(v31);
            goto LABEL_140;
          }
          *v31 = v66;
          v31[1] = v65;
          v64 = (uint64_t *)(v31 + 3);
          v31[2] = v71;
        }
        else
        {
          v64 = (uint64_t *)v31;
        }
        v63 = (uint64_t *)__pa;
LABEL_140:
        v26 += 2;
        v31 = (unint64_t *)v64;
        if (v26 == v422)
          goto LABEL_175;
      }
    }
    v64 = (uint64_t *)v31;
LABEL_175:
    if (v63 != v64)
      goto LABEL_176;
LABEL_182:
    v15 = 0;
    goto LABEL_691;
  }
  v64 = (uint64_t *)v31;
  if (__p == v31)
    goto LABEL_182;
LABEL_176:
  v492 = 0uLL;
  v491 = 0;
  __pb = v63;
  v80 = 0xAAAAAAAAAAAAAAABLL * (v64 - v63);
  if (v80 >= 0x3E7)
    v81 = 999;
  else
    v81 = 0xAAAAAAAAAAAAAAABLL * (v64 - v63);
  if (v81)
  {
    v82 = (char *)operator new(24 * v81);
    v83 = (unint64_t)&v82[24 * v81];
    v413 = v82;
  }
  else
  {
    v413 = 0;
    v83 = 0;
  }
  sub_239C6B2A0((uint64_t)&v491, v81);
  *(_QWORD *)&v437 = sub_239C6B3C4;
  sub_239C6B3D8((uint64_t)__pb, v64, (uint64_t (**)(uint64_t *, uint64_t *))&v437, 126 - 2 * __clz(v80), 1);
  if (v81)
  {
    v84 = 0;
    v85 = v413;
    do
    {
      v86 = &__pb[3 * v84];
      v88 = *v86;
      v87 = v86[1];
      if ((unint64_t)v85 < v83)
      {
        *(_QWORD *)v85 = v88;
        *((_QWORD *)v85 + 1) = v87;
        *((_QWORD *)v85 + 2) = 0;
        v85 += 24;
      }
      else
      {
        v89 = 0xAAAAAAAAAAAAAAABLL * ((v85 - v413) >> 3) + 1;
        if (v89 > 0xAAAAAAAAAAAAAAALL)
          sub_2394189F8();
        if (0x5555555555555556 * ((uint64_t)(v83 - (_QWORD)v413) >> 3) > v89)
          v89 = 0x5555555555555556 * ((uint64_t)(v83 - (_QWORD)v413) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v83 - (_QWORD)v413) >> 3) >= 0x555555555555555)
          v90 = 0xAAAAAAAAAAAAAAALL;
        else
          v90 = v89;
        if (v90)
        {
          if (v90 > 0xAAAAAAAAAAAAAAALL)
            sub_239418A80();
          v91 = (char *)operator new(24 * v90);
        }
        else
        {
          v91 = 0;
        }
        v92 = &v91[8 * ((v85 - v413) >> 3)];
        *(_QWORD *)v92 = v88;
        *((_QWORD *)v92 + 1) = v87;
        *((_QWORD *)v92 + 2) = 0;
        if (v85 == v413)
        {
          v97 = &v91[8 * ((v85 - v413) >> 3)];
          v95 = v413;
        }
        else
        {
          v93 = v85;
          v94 = &v91[8 * ((v85 - v413) >> 3)];
          v95 = v413;
          do
          {
            v96 = *(_OWORD *)(v93 - 24);
            v97 = v94 - 24;
            *((_QWORD *)v94 - 1) = *((_QWORD *)v93 - 1);
            *(_OWORD *)(v94 - 24) = v96;
            v93 -= 24;
            v94 -= 24;
          }
          while (v93 != v413);
        }
        v83 = (unint64_t)&v91[24 * v90];
        v85 = v92 + 24;
        if (v95)
          operator delete(v95);
        v413 = v97;
      }
      ++v84;
    }
    while (v84 != v81);
  }
  else
  {
    v85 = v413;
  }
  v498 = 0u;
  v499 = 0u;
  LODWORD(v500) = 1065353216;
  v433[0] = 0;
  v433[1] = 0;
  v434 = 0;
  v98 = (uint64_t)a1;
  sub_239433C1C((uint64_t)a1, (uint64_t)v433, 1);
  v99 = (unint64_t *)v433[0];
  v100 = (unint64_t *)v433[1];
  while (v99 != v100)
  {
    v101 = *v99;
    v476 = 0uLL;
    *(_QWORD *)&v477 = 0;
    sub_239A6CF30(v98, v101, (uint64_t)&v476, 1);
    v423 = v476;
    v102 = v477;
    v476 = 0uLL;
    *(_QWORD *)&v477 = 0;
    v103 = *((_QWORD *)&v498 + 1);
    if (*((_QWORD *)&v498 + 1))
    {
      v104 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v498 + 8));
      v104.i16[0] = vaddlv_u8(v104);
      if (v104.u32[0] > 1uLL)
      {
        v83 = v101;
        if (v101 >= *((_QWORD *)&v498 + 1))
          v83 = v101 % *((_QWORD *)&v498 + 1);
      }
      else
      {
        v83 = (*((_QWORD *)&v498 + 1) - 1) & v101;
      }
      v105 = *(_QWORD **)(v498 + 8 * v83);
      if (v105)
      {
        v106 = (_QWORD *)*v105;
        if (v106)
        {
          if (v104.u32[0] < 2uLL)
          {
            while (1)
            {
              v108 = v106[1];
              if (v108 == v101)
              {
                if (v106[2] == v101)
                  goto LABEL_250;
              }
              else if ((v108 & (*((_QWORD *)&v498 + 1) - 1)) != v83)
              {
                goto LABEL_231;
              }
              v106 = (_QWORD *)*v106;
              if (!v106)
                goto LABEL_231;
            }
          }
          do
          {
            v107 = v106[1];
            if (v107 == v101)
            {
              if (v106[2] == v101)
              {
LABEL_250:
                v118 = (void *)v423;
                goto LABEL_270;
              }
            }
            else
            {
              if (v107 >= *((_QWORD *)&v498 + 1))
                v107 %= *((_QWORD *)&v498 + 1);
              if (v107 != v83)
                break;
            }
            v106 = (_QWORD *)*v106;
          }
          while (v106);
        }
      }
    }
LABEL_231:
    v109 = (char *)operator new(0x30uLL);
    *(_QWORD *)&v437 = v109;
    *((_QWORD *)&v437 + 1) = &v499;
    *(_QWORD *)v109 = 0;
    *((_QWORD *)v109 + 1) = v101;
    *((_QWORD *)v109 + 2) = v101;
    *(_OWORD *)(v109 + 24) = v423;
    *((_QWORD *)v109 + 5) = v102;
    LOBYTE(v438) = 1;
    v110 = (float)(unint64_t)(*((_QWORD *)&v499 + 1) + 1);
    if (!v103 || (float)(*(float *)&v500 * (float)v103) < v110)
    {
      v111 = (v103 & (v103 - 1)) != 0;
      if (v103 < 3)
        v111 = 1;
      v112 = v111 | (2 * v103);
      v113 = vcvtps_u32_f32(v110 / *(float *)&v500);
      if (v112 <= v113)
        prime = v113;
      else
        prime = v112;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v103 = *((_QWORD *)&v498 + 1);
      }
      if (prime > v103)
        goto LABEL_243;
      if (prime < v103)
      {
        v115 = vcvtps_u32_f32((float)*((unint64_t *)&v499 + 1) / *(float *)&v500);
        if (v103 < 3 || (v116 = (uint8x8_t)vcnt_s8((int8x8_t)v103), v116.i16[0] = vaddlv_u8(v116), v116.u32[0] > 1uLL))
        {
          v115 = std::__next_prime(v115);
        }
        else
        {
          v117 = 1 << -(char)__clz(v115 - 1);
          if (v115 >= 2)
            v115 = v117;
        }
        if (prime <= v115)
          prime = v115;
        if (prime < v103)
LABEL_243:
          sub_239427FE0((uint64_t)&v498, prime);
      }
      v103 = *((_QWORD *)&v498 + 1);
      if ((v103 & (v103 - 1)) != 0)
      {
        if (v101 >= *((_QWORD *)&v498 + 1))
          v83 = v101 % *((_QWORD *)&v498 + 1);
        else
          v83 = v101;
      }
      else
      {
        v83 = (*((_QWORD *)&v498 + 1) - 1) & v101;
      }
    }
    v119 = v498;
    v120 = *(_QWORD **)(v498 + 8 * v83);
    if (v120)
    {
      *(_QWORD *)v109 = *v120;
    }
    else
    {
      *(_QWORD *)v109 = v499;
      *(_QWORD *)&v499 = v109;
      *(_QWORD *)(v119 + 8 * v83) = &v499;
      if (!*(_QWORD *)v109)
        goto LABEL_269;
      v121 = *(_QWORD *)(*(_QWORD *)v109 + 8);
      if ((v103 & (v103 - 1)) != 0)
      {
        if (v121 >= v103)
          v121 %= v103;
      }
      else
      {
        v121 &= v103 - 1;
      }
      v120 = (_QWORD *)(v498 + 8 * v121);
    }
    *v120 = v109;
LABEL_269:
    ++*((_QWORD *)&v499 + 1);
    v118 = 0;
LABEL_270:
    v98 = (uint64_t)a1;
    if (v118)
      operator delete(v118);
    if ((_QWORD)v476)
    {
      *((_QWORD *)&v476 + 1) = v476;
      operator delete((void *)v476);
    }
    ++v99;
  }
  v123 = (unint64_t *)v85;
  v122 = (unint64_t *)v413;
  if (v413 != v85)
  {
LABEL_277:
    v411 = v123;
    v125 = *v122;
    v126 = v122[1];
    v476 = 0u;
    v477 = 0u;
    v478 = 1.0;
    v127 = (float)(unint64_t)(((char *)v433[1] - (char *)v433[0]) >> 3);
    v128 = (unint64_t)v127;
    if ((unint64_t)v127 == 1)
    {
      v128 = 2;
LABEL_279:
      sub_239427FE0((uint64_t)&v476, v128);
LABEL_280:
      v129 = (unint64_t *)v433[0];
      for (i = (unint64_t *)v433[1]; v129 != i; ++v129)
      {
        v131 = *v129;
        v437 = *v129;
        sub_239C6BD70((uint64_t)&v476, v131, &v437);
      }
      v132 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v498 + 8));
      v132.i16[0] = vaddlv_u8(v132);
      if (v132.u32[0] > 1uLL)
      {
        if (v125 >= *((_QWORD *)&v498 + 1))
          v133 = v125 % *((_QWORD *)&v498 + 1);
        else
          v133 = v125;
      }
      else
      {
        v133 = (*((_QWORD *)&v498 + 1) - 1) & v125;
      }
      v136 = *(_QWORD **)(v498 + 8 * v133);
      if (!v136 || (v137 = (_QWORD *)*v136) == 0)
      {
        v140 = 24;
        goto LABEL_308;
      }
      if (v132.u32[0] < 2uLL)
      {
        while (1)
        {
          v139 = v137[1];
          if (v139 == v125)
          {
            if (v137[2] == v125)
              goto LABEL_306;
          }
          else if ((v139 & (*((_QWORD *)&v498 + 1) - 1)) != v133)
          {
            goto LABEL_305;
          }
          v137 = (_QWORD *)*v137;
          if (!v137)
            goto LABEL_306;
        }
      }
      while (1)
      {
        v138 = v137[1];
        if (v138 == v125)
        {
          if (v137[2] == v125)
            goto LABEL_306;
        }
        else
        {
          if (v138 >= *((_QWORD *)&v498 + 1))
            v138 %= *((_QWORD *)&v498 + 1);
          if (v138 != v133)
          {
LABEL_305:
            v137 = 0;
LABEL_306:
            v140 = (uint64_t)(v137 + 3);
LABEL_308:
            __dst = v122;
            if (v132.u32[0] >= 2uLL)
            {
              v142 = v126;
              if (v126 >= *((_QWORD *)&v498 + 1))
                v142 = v126 % *((_QWORD *)&v498 + 1);
              v141 = *(_QWORD **)(v498 + 8 * v142);
              do
              {
                do
                  v141 = (_QWORD *)*v141;
                while (v141[1] != v126);
              }
              while (v141[2] != v126);
            }
            else
            {
              v141 = *(_QWORD **)(v498 + 8 * ((*((_QWORD *)&v498 + 1) - 1) & v126));
              do
              {
                do
                  v141 = (_QWORD *)*v141;
                while (v141[1] != v126);
              }
              while (v141[2] != v126);
            }
            v490 = 0;
            v489 = 0;
            v488 = 0;
            v144 = *(_QWORD **)v140;
            v143 = *(_QWORD **)(v140 + 8);
            v145 = (_QWORD *)v141[3];
            v146 = (_QWORD *)v141[4];
            if (v146 - v145 >= (unint64_t)(((uint64_t)v143 - *(_QWORD *)v140) >> 3))
              v147 = ((uint64_t)v143 - *(_QWORD *)v140) >> 3;
            else
              v147 = v146 - v145;
            if (v147)
            {
              if (v147 >> 61)
                sub_2394189F8();
              v488 = (char *)operator new(8 * v147);
              v489 = v488;
              v490 = &v488[8 * v147];
              v144 = *(_QWORD **)v140;
              v143 = *(_QWORD **)(v140 + 8);
              v145 = (_QWORD *)v141[3];
              v146 = (_QWORD *)v141[4];
            }
            *(_QWORD *)&v437 = &v488;
            if (v144 == v143 || v145 == v146)
            {
              v148 = (char *)v411;
              goto LABEL_334;
            }
            while (2)
            {
              if (*v144 < *v145)
              {
                if (++v144 == v143)
                  goto LABEL_333;
LABEL_328:
                if (v145 == v146)
                  goto LABEL_333;
                continue;
              }
              break;
            }
            if (*v145 >= *v144)
              sub_2394340F0((uint64_t *)&v437, v144++);
            ++v145;
            if (v144 != v143)
              goto LABEL_328;
LABEL_333:
            v149 = (uint64_t *)v488;
            v150 = v489;
            v148 = (char *)v411;
            if (v488 != v489)
            {
              do
              {
                v155 = *v149;
                v437 = 0uLL;
                *(_QWORD *)&v438 = 0;
                sub_239C580BC((uint64_t)a1, v155, (uint64_t)&v437);
                v156 = v437;
                if ((_QWORD)v437 != *((_QWORD *)&v437 + 1))
                {
                  v157 = *a1;
                  v158 = (a1[1] - *a1) >> 6;
                  v159 = *((_QWORD *)&v476 + 1);
                  v160 = *((_QWORD *)&v476 + 1) - 1;
                  v161 = v476;
                  v162 = (unsigned int *)v437;
                  if ((v159 & (v159 - 1)) != 0)
                  {
                    while (1)
                    {
                      v164 = *v162;
                      if (v158 <= v164)
                        break;
                      if (v164 == 0xFFFFFFFF || *(_DWORD *)(v157 + (v164 << 6)) == -1)
                        break;
                      v166 = v157 + (v164 << 6);
                      if (*(_BYTE *)(v166 + 59) != 1)
                      {
                        v167 = *(_QWORD *)(v166 + 16);
                        v168 = v167;
                        if (v167 >= v159)
                          v168 = v167 % v159;
                        v169 = *(_QWORD **)(v161 + 8 * v168);
                        do
                        {
                          do
                            v169 = (_QWORD *)*v169;
                          while (v169[1] != v167);
                        }
                        while (v169[2] != v167);
                        ++v169[3];
                      }
                      v162 += 2;
                      if (v162 == *((unsigned int **)&v156 + 1))
                        goto LABEL_364;
                    }
                  }
                  else
                  {
                    v163 = (unsigned int *)v437;
                    while (1)
                    {
                      v170 = *v163;
                      if (v158 <= v170)
                        break;
                      if (v170 == 0xFFFFFFFF || *(_DWORD *)(v157 + (v170 << 6)) == -1)
                        break;
                      v172 = v157 + (v170 << 6);
                      if (*(_BYTE *)(v172 + 59) != 1)
                      {
                        v173 = *(_QWORD *)(v172 + 16);
                        v174 = *(_QWORD **)(v161 + 8 * (v160 & v173));
                        do
                        {
                          do
                            v174 = (_QWORD *)*v174;
                          while (v174[1] != v173);
                        }
                        while (v174[2] != v173);
                        ++v174[3];
                      }
                      v163 += 2;
                      if (v163 == *((unsigned int **)&v156 + 1))
                        goto LABEL_364;
                    }
                  }
                  sub_239A444D4((uint64_t)"unknown file", 308, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
LABEL_364:
                if ((_QWORD)v156)
                {
                  *((_QWORD *)&v437 + 1) = v156;
                  operator delete((void *)v156);
                }
                ++v149;
              }
              while (v149 != (uint64_t *)v150);
            }
LABEL_334:
            v152 = (unint64_t *)v433[0];
            v151 = (unint64_t *)v433[1];
            v153 = (int8x8_t *)a1;
            if (v433[0] == v433[1])
              goto LABEL_422;
            v154 = 0;
            v421 = -1;
            v424 = 0;
            v416 = -1;
            while (2)
            {
              v179 = v153[10];
              if (!*(_QWORD *)&v179)
                goto LABEL_696;
              v180 = *v152;
              v181 = *v152;
              v182 = (uint8x8_t)vcnt_s8(v179);
              v182.i16[0] = vaddlv_u8(v182);
              if (v182.u32[0] > 1uLL)
              {
                v183 = *v152;
                if (*(_QWORD *)&v179 <= v181)
                  v183 = v181 % *(_QWORD *)&v179;
              }
              else
              {
                v183 = (v179.i32[0] - 1) & v181;
              }
              v184 = *(uint64_t ***)(*(_QWORD *)&v153[9] + 8 * v183);
              if (!v184 || (v185 = *v184) == 0)
              {
LABEL_696:
                sub_239A444D4((uint64_t)"unknown file", 779, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              if (v182.u32[0] < 2uLL)
              {
                v186 = *(_QWORD *)&v179 - 1;
                while (1)
                {
                  v188 = v185[1];
                  if (v188 == v181)
                  {
                    if (*((_DWORD *)v185 + 4) == (_DWORD)v180)
                      goto LABEL_397;
                  }
                  else if ((v188 & v186) != v183)
                  {
                    goto LABEL_696;
                  }
                  v185 = (uint64_t *)*v185;
                  if (!v185)
                    goto LABEL_696;
                }
              }
              while (2)
              {
                v187 = v185[1];
                if (v187 != v181)
                {
                  if (v187 >= *(_QWORD *)&v179)
                    v187 %= *(_QWORD *)&v179;
                  if (v187 != v183)
                    goto LABEL_696;
LABEL_387:
                  v185 = (uint64_t *)*v185;
                  if (!v185)
                    goto LABEL_696;
                  continue;
                }
                break;
              }
              if (*((_DWORD *)v185 + 4) != (_DWORD)v180)
                goto LABEL_387;
LABEL_397:
              if ((v426 < 0 || *((_DWORD *)v185 + 55) == v426)
                && sub_239AF2B88(v425, v125, *v152)
                && sub_239AF2B88(v425, v126, v180))
              {
                for (j = (_QWORD *)v414[1]; j != (_QWORD *)v414[2]; j += 3)
                {
                  if (v125 == *j && v126 == j[1] && v180 == j[2])
                    goto LABEL_376;
                }
                if ((*((_QWORD *)&v476 + 1) & (*((_QWORD *)&v476 + 1) - 1)) != 0)
                {
                  v191 = v180;
                  if (v180 >= *((_QWORD *)&v476 + 1))
                    v191 = v180 % *((_QWORD *)&v476 + 1);
                  v190 = *(_QWORD **)(v476 + 8 * v191);
                  do
                  {
                    do
                      v190 = (_QWORD *)*v190;
                    while (v190[1] != v180);
                  }
                  while (v190[2] != v180);
                }
                else
                {
                  v190 = *(_QWORD **)(v476 + 8 * ((*((_QWORD *)&v476 + 1) - 1) & v180));
                  do
                  {
                    do
                      v190 = (_QWORD *)*v190;
                    while (v190[1] != v180);
                  }
                  while (v190[2] != v180);
                }
                v192 = v190[3];
                if (v192 > v424)
                {
                  v193 = (float64x2_t *)sub_239AFAB78(v425, v125, v180);
                  v194 = (float64x2_t *)sub_239AFAB78(v425, v126, v180);
                  v175 = vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v193[1], (float64x2_t)xmmword_239F0C490), (int32x4_t)vcgtq_f64(v194[1], (float64x2_t)xmmword_239F0C490)))), vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64((float64x2_t)xmmword_239F0C490, v193[1]), (int32x4_t)vcgtq_f64((float64x2_t)xmmword_239F0C490,
                                                                                 v194[1])))),
                                                              0xFuLL)),
                                                (int8x8_t)0x8000400020001));
                  v176 = v416;
                  if (v175 == 15)
                    v176 = v180;
                  v416 = v176;
                  v177 = v424;
                  if (v175 == 15)
                    v177 = v192;
                  v424 = v177;
                }
                v178 = v421;
                if (v192 > v154)
                  v178 = v180;
                v421 = v178;
                if (v192 > v154)
                  v154 = v192;
                v153 = (int8x8_t *)a1;
              }
LABEL_376:
              if (++v152 != v151)
                continue;
              break;
            }
            v148 = (char *)v411;
            v195 = v416;
            if (v424 >= 0xC || (v195 = v421, v154 > 0xB))
            {
              __dst[2] = v195;
              if (*((_QWORD *)&v498 + 1))
              {
                v200 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v498 + 8));
                v200.i16[0] = vaddlv_u8(v200);
                if (v200.u32[0] > 1uLL)
                {
                  v201 = v195;
                  if (v195 >= *((_QWORD *)&v498 + 1))
                    v201 = v195 % *((_QWORD *)&v498 + 1);
                }
                else
                {
                  v201 = (*((_QWORD *)&v498 + 1) - 1) & v195;
                }
                v206 = *(_QWORD **)(v498 + 8 * v201);
                if (v206)
                {
                  v205 = (_QWORD *)*v206;
                  if (*v206)
                  {
                    if (v200.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v208 = v205[1];
                        if (v208 == v195)
                        {
                          if (v205[2] == v195)
                            goto LABEL_459;
                        }
                        else if ((v208 & (*((_QWORD *)&v498 + 1) - 1)) != v201)
                        {
                          goto LABEL_458;
                        }
                        v205 = (_QWORD *)*v205;
                        if (!v205)
                          goto LABEL_459;
                      }
                    }
                    do
                    {
                      v207 = v205[1];
                      if (v207 == v195)
                      {
                        if (v205[2] == v195)
                          break;
                      }
                      else
                      {
                        if (v207 >= *((_QWORD *)&v498 + 1))
                          v207 %= *((_QWORD *)&v498 + 1);
                        if (v207 != v201)
                          goto LABEL_458;
                      }
                      v205 = (_QWORD *)*v205;
                    }
                    while (v205);
                  }
                }
                else
                {
LABEL_458:
                  v205 = 0;
                }
              }
              else
              {
                v205 = 0;
              }
LABEL_459:
              v486 = 0;
              v485 = 0;
              v487 = 0;
              v209 = v489;
              v210 = v488;
              v211 = v489 - v488;
              if (v489 != v488)
              {
                if (v211 < 0)
                  sub_2394189F8();
                v485 = (char *)operator new(v489 - v488);
                v486 = v485;
                v487 = &v485[8 * (v211 >> 3)];
              }
              v213 = (_QWORD *)v205[3];
              v212 = (_QWORD *)v205[4];
              *(_QWORD *)&v437 = &v485;
              if (v210 != v209 && v213 != v212)
              {
                do
                {
                  if (*(_QWORD *)v210 < *v213)
                  {
                    v210 += 8;
                    if (v210 == v209)
                      break;
                  }
                  else
                  {
                    if (*v213 >= *(_QWORD *)v210)
                    {
                      sub_2394340F0((uint64_t *)&v437, v210);
                      v210 += 8;
                    }
                    ++v213;
                    if (v210 == v209)
                      break;
                  }
                }
                while (v213 != v212);
              }
              v215 = (char *)v492;
              if ((unint64_t)v492 >= *((_QWORD *)&v492 + 1))
              {
                v222 = v491;
                v223 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v492 - (_QWORD)v491) >> 3);
                v224 = v223 + 1;
                if (v223 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_2394189F8();
                if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v492 + 1) - (_QWORD)v491) >> 3) > v224)
                  v224 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v492 + 1) - (_QWORD)v491) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v492 + 1) - (_QWORD)v491) >> 3) >= 0x555555555555555)
                  v225 = 0xAAAAAAAAAAAAAAALL;
                else
                  v225 = v224;
                v439 = (char *)&v492 + 8;
                if (v225)
                {
                  if (v225 > 0xAAAAAAAAAAAAAAALL)
                    sub_239418A80();
                  v226 = (char *)operator new(24 * v225);
                }
                else
                {
                  v226 = 0;
                }
                *(_QWORD *)&v437 = v226;
                *((_QWORD *)&v437 + 1) = &v226[24 * v223];
                v228 = &v226[24 * v225];
                *(_QWORD *)&v438 = *((_QWORD *)&v437 + 1);
                *((_QWORD *)&v438 + 1) = v228;
                v229 = *((_QWORD *)&v437 + 1);
                *(_QWORD *)(*((_QWORD *)&v437 + 1) + 8) = 0;
                v230 = (char **)(v229 + 8);
                v227 = &v226[24 * v223];
                *((_QWORD *)v227 + 2) = 0;
                *(_QWORD *)v227 = 0;
                v231 = v485;
                v232 = v486 - v485;
                if (v486 != v485)
                {
                  if (v232 < 0)
                    sub_2394189F8();
                  v233 = (char *)operator new(v486 - v485);
                  *(_QWORD *)v227 = v233;
                  *v230 = v233;
                  v234 = &v233[8 * (v232 >> 3)];
                  *((_QWORD *)v227 + 2) = v234;
                  memcpy(v233, v231, v232);
                  *v230 = v234;
                }
                v221 = v227 + 24;
                *(_QWORD *)&v438 = v227 + 24;
                v123 = v411;
                if (v215 == v222)
                {
                  v491 = v227;
                  *(_QWORD *)&v492 = v227 + 24;
                  *((_QWORD *)&v492 + 1) = v228;
                  v218 = __dst;
                }
                else
                {
                  v218 = __dst;
                  do
                  {
                    v235 = v227;
                    *((_QWORD *)v227 - 2) = 0;
                    *((_QWORD *)v227 - 1) = 0;
                    v236 = *(_OWORD *)(v215 - 24);
                    v215 -= 24;
                    *(_OWORD *)(v227 - 24) = v236;
                    v227 -= 24;
                    *((_QWORD *)v235 - 1) = *((_QWORD *)v215 + 2);
                    *(_QWORD *)v215 = 0;
                    *((_QWORD *)v215 + 1) = 0;
                    *((_QWORD *)v215 + 2) = 0;
                  }
                  while (v215 != v222);
                  v215 = v491;
                  v237 = (char *)v492;
                  v491 = v227;
                  v492 = v438;
                  v221 = (_QWORD *)v438;
                  if (v237 != v215)
                  {
                    v238 = v237;
                    do
                    {
                      v240 = (void *)*((_QWORD *)v238 - 3);
                      v238 -= 24;
                      v239 = v240;
                      if (v240)
                      {
                        *((_QWORD *)v237 - 2) = v239;
                        operator delete(v239);
                      }
                      v237 = v238;
                    }
                    while (v238 != v215);
                  }
                }
                if (v215)
                  operator delete(v215);
              }
              else
              {
                *(_QWORD *)v492 = 0;
                *((_QWORD *)v215 + 1) = 0;
                *((_QWORD *)v215 + 2) = 0;
                v216 = v485;
                v217 = v486 - v485;
                v218 = __dst;
                if (v486 != v485)
                {
                  if (v217 < 0)
                    sub_2394189F8();
                  v219 = (char *)operator new(v486 - v485);
                  *(_QWORD *)v215 = v219;
                  *((_QWORD *)v215 + 1) = v219;
                  v220 = &v219[8 * (v217 >> 3)];
                  *((_QWORD *)v215 + 2) = v220;
                  memcpy(v219, v216, v217);
                  *((_QWORD *)v215 + 1) = v220;
                }
                v221 = v215 + 24;
                v123 = v411;
              }
              *(_QWORD *)&v492 = v221;
              if (v485)
              {
                v486 = v485;
                operator delete(v485);
              }
              v122 = v218 + 3;
              v196 = v488;
              if (v488)
              {
LABEL_425:
                v489 = v196;
                operator delete(v196);
              }
            }
            else
            {
LABEL_422:
              v122 = __dst;
              if (v148 != (char *)(__dst + 3))
                memmove(__dst, __dst + 3, v148 - (char *)(__dst + 3));
              v123 = (unint64_t *)(v148 - 24);
              v196 = v488;
              if (v488)
                goto LABEL_425;
            }
            v197 = (_QWORD *)v477;
            if ((_QWORD)v477)
            {
              do
              {
                v198 = (_QWORD *)*v197;
                operator delete(v197);
                v197 = v198;
              }
              while (v198);
            }
            v199 = (void *)v476;
            *(_QWORD *)&v476 = 0;
            if (v199)
              operator delete(v199);
            v124 = (char *)v123;
            if (v122 == v123)
              goto LABEL_513;
            goto LABEL_277;
          }
        }
        v137 = (_QWORD *)*v137;
        if (!v137)
          goto LABEL_306;
      }
    }
    if ((v128 & ((unint64_t)v127 - 1)) != 0)
    {
      v128 = std::__next_prime((unint64_t)v127);
      v134 = *(int8x8_t *)((char *)&v476 + 8);
      v135 = v128 >= *((_QWORD *)&v476 + 1);
      if (v128 > *((_QWORD *)&v476 + 1))
        goto LABEL_279;
    }
    else
    {
      v134 = 0;
      v135 = 1;
      if (v128)
        goto LABEL_279;
    }
    if (v135)
      goto LABEL_280;
    v202 = vcvtps_u32_f32((float)*((unint64_t *)&v477 + 1) / v478);
    if (*(_QWORD *)&v134 < 3uLL || (v203 = (uint8x8_t)vcnt_s8(v134), v203.i16[0] = vaddlv_u8(v203), v203.u32[0] > 1uLL))
    {
      v202 = std::__next_prime(v202);
    }
    else
    {
      v204 = 1 << -(char)__clz(v202 - 1);
      if (v202 >= 2)
        v202 = v204;
    }
    if (v128 <= v202)
      v128 = v202;
    if (v128 >= *(_QWORD *)&v134)
      goto LABEL_280;
    goto LABEL_279;
  }
  v124 = v413;
LABEL_513:
  if (v433[0])
  {
    v433[1] = v433[0];
    operator delete(v433[0]);
  }
  v241 = (_QWORD *)v499;
  if ((_QWORD)v499)
  {
    do
    {
      v246 = (_QWORD *)*v241;
      v247 = (void *)v241[3];
      if (v247)
      {
        v241[4] = v247;
        operator delete(v247);
      }
      operator delete(v241);
      v241 = v246;
    }
    while (v246);
  }
  v242 = (void *)v498;
  *(_QWORD *)&v498 = 0;
  if (v242)
    operator delete(v242);
  v64 = __pb;
  if (v413 == v124)
  {
    v15 = 0;
    v376 = v491;
    if (v491)
      goto LABEL_682;
    goto LABEL_689;
  }
  v243 = 0;
  v406 = 0;
  v402 = 0;
  v403 = 0;
  v244 = ((char *)v123 - v413) / 24;
  if (v244 <= 1)
    v244 = 1;
  v427 = v244;
  v407 = -1;
  v404 = -1;
  v405 = -1;
  v245 = v425;
  while (1)
  {
    v248 = (unint64_t *)&v413[24 * v243];
    v249 = *v248;
    v250 = v248[1];
    v251 = v248[2];
    if (sub_239AF2B88(v245, *v248, v250) && sub_239AF2B88(v245, v249, v251) && sub_239AF2B88(v245, v250, v251))
      break;
LABEL_525:
    if (++v243 == v427)
      goto LABEL_659;
  }
  v252 = (double *)sub_239AFAB78(v245, v249, v250);
  v253 = (double *)sub_239AFAB78(v245, v249, v251);
  v254 = (double *)sub_239AFAB78(v245, v250, v251);
  v255 = v252[2];
  if (v253[2] < v255)
    v255 = v253[2];
  if (v254[2] >= v255)
    v256 = v255;
  else
    v256 = v254[2];
  if (v252[3] >= v253[3])
    v257 = v252[3];
  else
    v257 = v253[3];
  v258 = v491;
  if (v257 >= v254[3])
    v259 = v257;
  else
    v259 = v254[3];
  v476 = 0u;
  v477 = 0u;
  v478 = 1.0;
  v479 = 0u;
  v480 = 0u;
  v481 = 1065353216;
  v482 = 0u;
  v483 = 0u;
  v484 = 1065353216;
  sub_239C6C058((uint64_t)&v437);
  v489 = 0;
  v488 = 0;
  v490 = 0;
  sub_239C6C29C(a1, v249, &v476);
  v260 = sub_2394650AC((uint64_t)a1, v249);
  v261 = v260;
  v262 = *(_OWORD *)v260;
  v438 = *((_OWORD *)v260 + 1);
  v437 = v262;
  LOBYTE(v439) = *((_BYTE *)v260 + 32);
  if (&v437 != (__int128 *)v260)
  {
    v263 = *((unsigned int *)v260 + 14);
    sub_23945215C((uint64_t)&v440, v263);
    if ((_DWORD)v263)
      memcpy(v440, (const void *)v261[5], 8 * v263);
    v441 = *((_DWORD *)v261 + 14);
  }
  v264 = *((_OWORD *)v261 + 4);
  v265 = *((_OWORD *)v261 + 5);
  v266 = *((_OWORD *)v261 + 7);
  v444 = *((_OWORD *)v261 + 6);
  v445 = v266;
  v442 = v264;
  v443 = v265;
  v267 = *((_OWORD *)v261 + 8);
  v268 = *((_OWORD *)v261 + 9);
  v269 = *((_OWORD *)v261 + 11);
  v448 = *((_OWORD *)v261 + 10);
  v449 = v269;
  v446 = v267;
  v447 = v268;
  sub_239C6C29C(a1, v250, &v479);
  v270 = sub_2394650AC((uint64_t)a1, v250);
  v271 = v270;
  v272 = *((_OWORD *)v270 + 1);
  v450 = *(_OWORD *)v270;
  v451 = v272;
  v452 = *((_BYTE *)v270 + 32);
  if (&v450 != (__int128 *)v270)
  {
    v273 = *((unsigned int *)v270 + 14);
    sub_23945215C((uint64_t)&v453, v273);
    if ((_DWORD)v273)
      memcpy(v453, (const void *)v271[5], 8 * v273);
    v454 = *((_DWORD *)v271 + 14);
  }
  v274 = *((_OWORD *)v271 + 4);
  v275 = *((_OWORD *)v271 + 5);
  v276 = *((_OWORD *)v271 + 7);
  v457 = *((_OWORD *)v271 + 6);
  v458 = v276;
  v455 = v274;
  v456 = v275;
  v277 = *((_OWORD *)v271 + 8);
  v278 = *((_OWORD *)v271 + 9);
  v279 = *((_OWORD *)v271 + 11);
  v461 = *((_OWORD *)v271 + 10);
  v462 = v279;
  v459 = v277;
  v460 = v278;
  sub_239C6C29C(a1, v251, &v482);
  v280 = sub_2394650AC((uint64_t)a1, v251);
  v281 = v280;
  v282 = *((_OWORD *)v280 + 1);
  v463 = *(_OWORD *)v280;
  v464 = v282;
  v465 = *((_BYTE *)v280 + 32);
  if (&v463 != (__int128 *)v280)
  {
    v283 = *((unsigned int *)v280 + 14);
    sub_23945215C((uint64_t)&v466, v283);
    if ((_DWORD)v283)
      memcpy(v466, (const void *)v281[5], 8 * v283);
    v467 = *((_DWORD *)v281 + 14);
  }
  v284 = *((_OWORD *)v281 + 4);
  v285 = *((_OWORD *)v281 + 5);
  v286 = *((_OWORD *)v281 + 7);
  v470 = *((_OWORD *)v281 + 6);
  v471 = v286;
  v468 = v284;
  v469 = v285;
  v287 = *((_OWORD *)v281 + 8);
  v288 = *((_OWORD *)v281 + 9);
  v289 = *((_OWORD *)v281 + 11);
  v474 = *((_OWORD *)v281 + 10);
  v475 = v289;
  v472 = v287;
  v473 = v288;
  *(_OWORD *)v433 = xmmword_239F0C3C0;
  v434 = 10;
  v436 = xmmword_239F0BF20;
  v435 = xmmword_239EC67E0;
  if (!*((_BYTE *)sub_239470FCC((uint64_t)a1, v249) + 233)
    || !*((_BYTE *)sub_239470FCC((uint64_t)a1, v250) + 233)
    || !*((_BYTE *)sub_239470FCC((uint64_t)a1, v251) + 233))
  {
    v305 = *(double *)(a4 + 56);
    v498 = v437;
    v499 = v438;
    LOBYTE(v500) = (_BYTE)v439;
    v306 = v441;
    v307 = 8 * v441;
    v308 = (v307 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)&v500 + 1) = 0;
    v501 = v308 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v308, 0x100BBD03uLL);
    *((_QWORD *)&v500 + 1) = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v391 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v391, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if (v306)
      memcpy(memptr, v440, v307);
    v502 = v441;
    v507 = v446;
    v508 = v447;
    v509 = v448;
    v510 = v449;
    v503 = v442;
    v504 = v443;
    v505 = v444;
    v506 = v445;
    v511 = v450;
    v512 = v451;
    v513 = v452;
    v309 = v454;
    v310 = 8 * v454;
    v311 = (v310 + 31) & 0xFFFFFFFE0;
    v514 = 0;
    v515 = v311 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v311, 0x100BBD03uLL);
    v514 = memptr;
    if (!memptr)
    {
      v392 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v393 = std::bad_alloc::bad_alloc(v392);
      __cxa_throw(v393, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if (v309)
      memcpy(memptr, v453, v310);
    v516 = v454;
    v521 = v459;
    v522 = v460;
    v523 = v461;
    v524 = v462;
    v517 = v455;
    v518 = v456;
    v519 = v457;
    v520 = v458;
    v525 = v463;
    v526 = v464;
    v527 = v465;
    v312 = v467;
    v313 = (8 * v467 + 31) & 0xFFFFFFFE0;
    v528 = 0;
    v529 = v313 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v313, 0x100BBD03uLL);
    v528 = memptr;
    if (!memptr)
    {
      v394 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v395 = std::bad_alloc::bad_alloc(v394);
      __cxa_throw(v395, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((_DWORD)v312)
      memcpy(memptr, v466, 8 * v312);
    v530 = v467;
    v535 = v472;
    v536 = v473;
    v537 = v474;
    v538 = v475;
    v531 = v468;
    v532 = v469;
    v533 = v470;
    v534 = v471;
    v486 = 0;
    v485 = 0;
    v487 = 0;
    v485 = (char *)operator new(0x240uLL);
    v486 = v485;
    v487 = v485 + 576;
    v299 = (double *)sub_239C02C54((uint64_t)&v487, (uint64_t)&v498, (uint64_t)v539, (uint64_t)v485);
    v486 = (char *)v299;
    v300 = v485;
    if (v299 == (double *)v485)
    {
      *(double *)&v435 = v305 + v305;
    }
    else
    {
      v314 = 0.0;
      v315 = (double *)v485;
      do
      {
        v316 = *v315;
        v315 += 24;
        v314 = v314 + v316;
      }
      while (v315 != v299);
      *(double *)&v435 = (v305 + v305) * (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v299 - v485) >> 6)) / v314;
      if (!v485)
        goto LABEL_589;
      do
      {
        v317 = v299 - 24;
        free(*((void **)v299 - 19));
        v299 = v317;
      }
      while (v317 != (double *)v300);
      v299 = (double *)v485;
    }
LABEL_588:
    v486 = v300;
    operator delete(v299);
    goto LABEL_589;
  }
  v290 = *(double *)(a4 + 56);
  v498 = v437;
  v499 = v438;
  LOBYTE(v500) = (_BYTE)v439;
  v291 = v441;
  v292 = 8 * v441;
  v293 = (v292 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)&v500 + 1) = 0;
  v501 = v293 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v293, 0x100BBD03uLL);
  *((_QWORD *)&v500 + 1) = memptr;
  if (!memptr)
  {
    v400 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v401 = std::bad_alloc::bad_alloc(v400);
    __cxa_throw(v401, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v291)
    memcpy(memptr, v440, v292);
  v502 = v441;
  v507 = v446;
  v508 = v447;
  v509 = v448;
  v510 = v449;
  v503 = v442;
  v504 = v443;
  v505 = v444;
  v506 = v445;
  v511 = v450;
  v512 = v451;
  v513 = v452;
  v294 = v454;
  v295 = 8 * v454;
  v296 = (v295 + 31) & 0xFFFFFFFE0;
  v514 = 0;
  v515 = v296 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v296, 0x100BBD03uLL);
  v514 = memptr;
  if (!memptr)
  {
    v396 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v397 = std::bad_alloc::bad_alloc(v396);
    __cxa_throw(v397, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v294)
    memcpy(memptr, v453, v295);
  v516 = v454;
  v521 = v459;
  v522 = v460;
  v523 = v461;
  v524 = v462;
  v517 = v455;
  v518 = v456;
  v519 = v457;
  v520 = v458;
  v525 = v463;
  v526 = v464;
  v527 = v465;
  v297 = v467;
  v298 = (8 * v467 + 31) & 0xFFFFFFFE0;
  v528 = 0;
  v529 = v298 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v298, 0x100BBD03uLL);
  v528 = memptr;
  if (!memptr)
  {
    v398 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v399 = std::bad_alloc::bad_alloc(v398);
    __cxa_throw(v399, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v297)
    memcpy(memptr, v466, 8 * v297);
  v530 = v467;
  v535 = v472;
  v536 = v473;
  v537 = v474;
  v538 = v475;
  v531 = v468;
  v532 = v469;
  v533 = v470;
  v534 = v471;
  v486 = 0;
  v485 = 0;
  v487 = 0;
  v485 = (char *)operator new(0x240uLL);
  v486 = v485;
  v487 = v485 + 576;
  v299 = (double *)sub_239C02C54((uint64_t)&v487, (uint64_t)&v498, (uint64_t)v539, (uint64_t)v485);
  v486 = (char *)v299;
  v300 = v485;
  if (v299 == (double *)v485)
  {
    *(double *)&v435 = v290;
    if (!v485)
      goto LABEL_589;
    goto LABEL_588;
  }
  v301 = 0.0;
  v302 = (double *)v485;
  do
  {
    v303 = *v302;
    v302 += 24;
    v301 = v301 + v303;
  }
  while (v302 != v299);
  *(double *)&v435 = v290 * (double)(0xAAAAAAAAAAAAAAABLL * (((char *)v299 - v485) >> 6)) / v301;
  if (v485)
  {
    if (v299 != (double *)v485)
    {
      do
      {
        v304 = v299 - 24;
        free(*((void **)v299 - 19));
        v299 = v304;
      }
      while (v304 != (double *)v300);
      v299 = (double *)v485;
    }
    goto LABEL_588;
  }
LABEL_589:
  free(v528);
  free(v514);
  free(*((void **)&v500 + 1));
  if ((sub_239C63148(*(_QWORD *)&v258[24 * v243]) & 1) == 0)
  {
    v323 = 25;
    v245 = v425;
    goto LABEL_640;
  }
  v486 = 0;
  v485 = 0;
  v487 = 0;
  memptr = 0;
  v431 = 0;
  v432 = 0;
  memset(v429, 0, sizeof(v429));
  v318 = *(_OWORD *)(a4 + 184);
  v498 = *(_OWORD *)(a4 + 168);
  v499 = v318;
  v500 = *(_OWORD *)(a4 + 200);
  v501 = *(_QWORD *)(a4 + 216);
  v245 = v425;
  if (*((_BYTE *)sub_239470FCC((uint64_t)a1, v249) + 233)
    && *((_BYTE *)sub_239470FCC((uint64_t)a1, v250) + 233)
    && *((_BYTE *)sub_239470FCC((uint64_t)a1, v251) + 233))
  {
    *(_QWORD *)&v498 = *(_QWORD *)(a4 + 648);
  }
  if (!sub_239C670BC((uint64_t *)&v258[24 * v243], (uint64_t)&v476, (uint64_t)&v437, (uint64_t)&v485, &memptr, v429, (double *)&v498))goto LABEL_634;
  v319 = (unsigned __int8 *)memptr;
  v320 = v407;
  if (memptr == v431)
  {
    v322 = 0;
    goto LABEL_614;
  }
  v321 = v431 - (_BYTE *)memptr;
  if ((unint64_t)(v431 - (_BYTE *)memptr) < 8)
  {
    v322 = 0;
    goto LABEL_611;
  }
  if (v321 < 0x20)
  {
    v322 = 0;
    v324 = 0;
LABEL_606:
    v343 = v321 & 0xFFFFFFFFFFFFFFF8;
    v344 = 0uLL;
    v345 = (int32x4_t)v322;
    v346 = v324 - (v321 & 0xFFFFFFFFFFFFFFF8);
    v347 = (int8x8_t *)((char *)memptr + v324);
    v348.i64[0] = 0x100000001;
    v348.i64[1] = 0x100000001;
    do
    {
      v349 = *v347++;
      v350 = vmovl_u8((uint8x8_t)vceq_s8(v349, (int8x8_t)0x202020202020202));
      v344 = vaddq_s32(v344, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v350), v348));
      v345 = vaddq_s32(v345, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v350.i8), v348));
      v346 += 8;
    }
    while (v346);
    v322 = vaddvq_s32(vaddq_s32(v345, v344));
    if (v321 == v343)
      goto LABEL_614;
    v319 = (unsigned __int8 *)memptr + v343;
    goto LABEL_611;
  }
  v325 = 0uLL;
  v324 = v321 & 0xFFFFFFFFFFFFFFE0;
  v326 = 0uLL;
  v327 = (int8x16_t *)((char *)memptr + 16);
  v328 = v321 & 0xFFFFFFFFFFFFFFE0;
  v329 = 0uLL;
  v330 = 0uLL;
  v331 = 0uLL;
  v332 = 0uLL;
  v333 = 0uLL;
  v334 = 0uLL;
  v335.i64[0] = 0x100000001;
  v335.i64[1] = 0x100000001;
  v336.i64[0] = 0x202020202020202;
  v336.i64[1] = 0x202020202020202;
  do
  {
    v337 = (uint8x16_t)vceqq_s8(v327[-1], v336);
    v338 = vmovl_u8(*(uint8x8_t *)v337.i8);
    v339 = vmovl_high_u8(v337);
    v340 = (uint8x16_t)vceqq_s8(*v327, v336);
    v341 = vmovl_u8(*(uint8x8_t *)v340.i8);
    v342 = vmovl_high_u8(v340);
    v330 = vaddq_s32(v330, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v339), v335));
    v329 = vaddq_s32(v329, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v339.i8), v335));
    v326 = vaddq_s32(v326, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v338), v335));
    v325 = vaddq_s32(v325, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v338.i8), v335));
    v334 = vaddq_s32(v334, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v342), v335));
    v333 = vaddq_s32(v333, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v342.i8), v335));
    v332 = vaddq_s32(v332, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v341), v335));
    v331 = vaddq_s32(v331, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v341.i8), v335));
    v327 += 2;
    v328 -= 32;
  }
  while (v328);
  v322 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v331, v325), vaddq_s32(v333, v329)), vaddq_s32(vaddq_s32(v332, v326), vaddq_s32(v334, v330))));
  if (v321 == v324)
    goto LABEL_614;
  if ((v321 & 0x18) != 0)
    goto LABEL_606;
  v319 = (unsigned __int8 *)memptr + v324;
  do
  {
LABEL_611:
    v351 = *v319++;
    if (v351 == 2)
      ++v322;
  }
  while (v319 != v431);
LABEL_614:
  v352 = v406;
  if (v406 <= v322)
    v352 = v322;
  if (v406 < v322)
    v320 = v243;
  v406 = v352;
  v407 = v320;
  if (v256 >= 2.0)
  {
    if (v403 <= v322)
      v353 = v322;
    else
      v353 = v403;
    v354 = v404;
    if (v403 < v322)
      v354 = v243;
    v403 = v353;
    v404 = v354;
    if (v259 < 60.0)
    {
      v355 = v402;
      v356 = v402 >= v322;
      if (v402 <= v322)
        v355 = v322;
      v402 = v355;
      v357 = v405;
      if (!v356)
        v357 = v243;
      v405 = v357;
      if (!v243 || __ROR8__(0xCCCCCCCCCCCCCCCDLL * v243, 2) > 0xCCCCCCCCCCCCCCCuLL || v357 == -1)
      {
        v323 = 0;
        v358 = v429[0];
        if (!v429[0])
          goto LABEL_636;
      }
      else
      {
        v323 = 23;
        v358 = v429[0];
        if (!v429[0])
          goto LABEL_636;
      }
      goto LABEL_635;
    }
  }
LABEL_634:
  v323 = 25;
  v358 = v429[0];
  if (v429[0])
LABEL_635:
    operator delete(v358);
LABEL_636:
  if (memptr)
    operator delete(memptr);
  if (v485)
  {
    v486 = v485;
    operator delete(v485);
  }
LABEL_640:
  if (v488)
    operator delete(v488);
  free(v466);
  free(v453);
  free(v440);
  v359 = (_QWORD *)v483;
  if ((_QWORD)v483)
  {
    do
    {
      v360 = (_QWORD *)*v359;
      operator delete(v359);
      v359 = v360;
    }
    while (v360);
  }
  v361 = (void *)v482;
  *(_QWORD *)&v482 = 0;
  if (v361)
    operator delete(v361);
  v362 = (_QWORD *)v480;
  if ((_QWORD)v480)
  {
    do
    {
      v363 = (_QWORD *)*v362;
      operator delete(v362);
      v362 = v363;
    }
    while (v363);
  }
  v364 = (void *)v479;
  *(_QWORD *)&v479 = 0;
  if (v364)
    operator delete(v364);
  v365 = (_QWORD *)v477;
  if ((_QWORD)v477)
  {
    do
    {
      v366 = (_QWORD *)*v365;
      operator delete(v365);
      v365 = v366;
    }
    while (v366);
  }
  v367 = (void *)v476;
  *(_QWORD *)&v476 = 0;
  if (v367)
    operator delete(v367);
  if (v323 == 25 || !v323)
    goto LABEL_525;
LABEL_659:
  v368 = v405;
  if (v405 == -1 && (v368 = v404, v404 == -1) && (v368 = v407, v407 == -1))
  {
    v15 = 0;
    v64 = __pb;
    v376 = v491;
    if (v491)
      goto LABEL_682;
  }
  else
  {
    v369 = &v413[24 * v368];
    v370 = *(_OWORD *)v369;
    *(_QWORD *)(v408 + 16) = *((_QWORD *)v369 + 2);
    *(_OWORD *)v408 = v370;
    v371 = *(_OWORD *)v369;
    v497 = *((_QWORD *)v369 + 2);
    v496 = v371;
    v373 = (_QWORD *)v414[2];
    v372 = v414[3];
    if ((unint64_t)v373 >= v372)
    {
      v377 = (_QWORD *)v414[1];
      v378 = 0xAAAAAAAAAAAAAAABLL * (v373 - v377) + 1;
      if (v378 > 0xAAAAAAAAAAAAAAALL)
        sub_2394189F8();
      v379 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v372 - (_QWORD)v377) >> 3);
      if (2 * v379 > v378)
        v378 = 2 * v379;
      if (v379 >= 0x555555555555555)
        v380 = 0xAAAAAAAAAAAAAAALL;
      else
        v380 = v378;
      if (v380)
      {
        if (v380 > 0xAAAAAAAAAAAAAAALL)
          sub_239418A80();
        v381 = (char *)operator new(24 * v380);
      }
      else
      {
        v381 = 0;
      }
      v382 = &v381[8 * (v373 - v377)];
      *(_OWORD *)v382 = v496;
      *((_QWORD *)v382 + 2) = v497;
      v375 = v382 + 24;
      if (v373 != v377)
      {
        do
        {
          v383 = *(_OWORD *)(v373 - 3);
          *((_QWORD *)v382 - 1) = *(v373 - 1);
          *(_OWORD *)(v382 - 24) = v383;
          v382 -= 24;
          v373 -= 3;
        }
        while (v373 != v377);
        v373 = (_QWORD *)v414[1];
      }
      v414[1] = v382;
      v414[2] = v375;
      v414[3] = &v381[24 * v380];
      if (v373)
        operator delete(v373);
    }
    else
    {
      v374 = *(_OWORD *)v369;
      v373[2] = *((_QWORD *)v369 + 2);
      *(_OWORD *)v373 = v374;
      v375 = v373 + 3;
    }
    v64 = __pb;
    v414[2] = v375;
    v15 = 1;
    v376 = v491;
    if (v491)
    {
LABEL_682:
      v384 = (char *)v492;
      v385 = v376;
      if ((char *)v492 != v376)
      {
        v386 = (char *)v492;
        do
        {
          v388 = (void *)*((_QWORD *)v386 - 3);
          v386 -= 24;
          v387 = v388;
          if (v388)
          {
            *((_QWORD *)v384 - 2) = v387;
            operator delete(v387);
          }
          v384 = v386;
        }
        while (v386 != v376);
        v385 = v491;
      }
      *(_QWORD *)&v492 = v376;
      operator delete(v385);
    }
  }
LABEL_689:
  if (v413)
    operator delete(v413);
LABEL_691:
  if (v64)
    operator delete(v64);
LABEL_693:
  v9 = v493;
  if (v493)
  {
LABEL_694:
    v494 = v9;
    operator delete(v9);
  }
  return v15;
}

void sub_239C6AEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  uint64_t v67;
  void *v69;
  void *v70;
  void *v71;

  v69 = *(void **)(v67 + 728);
  if (v69)
    operator delete(v69);
  sub_239C6C4A0(&a67);
  sub_239C6C4D8((uint64_t)&STACK[0x410]);
  sub_23942A16C((void **)&STACK[0x4C0]);
  if (a42)
  {
    operator delete(a42);
    v70 = __p;
    if (!__p)
    {
LABEL_5:
      v71 = (void *)STACK[0x4D8];
      if (!STACK[0x4D8])
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v70 = __p;
    if (!__p)
      goto LABEL_5;
  }
  operator delete(v70);
  v71 = (void *)STACK[0x4D8];
  if (!STACK[0x4D8])
LABEL_6:
    _Unwind_Resume(a1);
LABEL_9:
  STACK[0x4E0] = (unint64_t)v71;
  operator delete(v71);
  _Unwind_Resume(a1);
}

void sub_239C6B2A0(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

BOOL sub_239C6B3C4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) > *(_QWORD *)(a2 + 16);
}

uint64_t sub_239C6B3D8(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  int64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  __int128 v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  __int128 v56;
  uint64_t *v57;
  int64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  __int128 v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  int64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 3;
  v73 = a2;
  v74 = a2 - 6;
  v71 = a2 - 9;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v11);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(v10, v9);
        if ((_DWORD)result)
        {
          v33 = *v9;
          *v9 = *(a2 - 3);
          *(a2 - 3) = v33;
          v34 = v9[1];
          v9[1] = *(a2 - 2);
          *(a2 - 2) = v34;
          v35 = v9[2];
          v9[2] = *(a2 - 1);
          *(a2 - 1) = v35;
        }
        return result;
      case 3uLL:
        return sub_239C6C864(v9, v9 + 3, v10, a3);
      case 4uLL:
        return sub_239C6C9D8(v9, v9 + 3, v9 + 6, v10, a3);
      case 5uLL:
        return sub_239C6CAE8(v9, v9 + 3, v9 + 6, v9 + 9, v10, a3);
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (v9 != a2)
            {
              v36 = v9 + 3;
              if (v9 + 3 != a2)
              {
                v37 = 0;
                v38 = v9;
                do
                {
                  v40 = v38;
                  v38 = v36;
                  result = (*a3)(v36, v40);
                  if ((_DWORD)result)
                  {
                    v41 = *(_OWORD *)v38;
                    v78 = v38[2];
                    v77 = v41;
                    v42 = v37;
                    do
                    {
                      v43 = (char *)v9 + v42;
                      *(_OWORD *)(v43 + 24) = *(_OWORD *)((char *)v9 + v42);
                      *((_QWORD *)v43 + 5) = *(uint64_t *)((char *)v9 + v42 + 16);
                      if (!v42)
                      {
                        v39 = (uint64_t)v9;
                        goto LABEL_62;
                      }
                      v42 -= 24;
                      result = (*a3)((uint64_t *)&v77, (uint64_t *)((char *)v9 + v42));
                    }
                    while ((result & 1) != 0);
                    v39 = (uint64_t)v9 + v42 + 24;
LABEL_62:
                    *(_OWORD *)v39 = v77;
                    *(_QWORD *)(v39 + 16) = v78;
                  }
                  v36 = v38 + 3;
                  v37 += 24;
                }
                while (v38 + 3 != a2);
              }
            }
          }
          else if (v9 != a2)
          {
            v53 = v9 + 3;
            if (v9 + 3 != a2)
            {
              v54 = v9 - 3;
              do
              {
                v55 = v9;
                v9 = v53;
                result = (*a3)(v53, v55);
                if ((_DWORD)result)
                {
                  v56 = *(_OWORD *)v9;
                  v78 = v9[2];
                  v77 = v56;
                  v57 = v54;
                  do
                  {
                    *((_OWORD *)v57 + 3) = *(_OWORD *)(v57 + 3);
                    v57[8] = v57[5];
                    result = (*a3)((uint64_t *)&v77, v57);
                    v57 -= 3;
                  }
                  while ((result & 1) != 0);
                  *((_OWORD *)v57 + 3) = v77;
                  v57[8] = v78;
                }
                v53 = v9 + 3;
                v54 += 3;
              }
              while (v9 + 3 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v44 = (v13 - 2) >> 1;
            v75 = v44;
            do
            {
              if (v75 >= v44)
              {
                v46 = (2 * v44) | 1;
                v47 = &v9[3 * v46];
                if (2 * v44 + 2 < (uint64_t)v13 && (*a3)(&v9[3 * v46], v47 + 3))
                {
                  v47 += 3;
                  v46 = 2 * v44 + 2;
                }
                v48 = &v9[3 * v44];
                result = (*a3)(v47, v48);
                if ((result & 1) == 0)
                {
                  v49 = *(_OWORD *)v48;
                  v78 = v48[2];
                  v77 = v49;
                  do
                  {
                    v50 = v47;
                    *v48 = *v47;
                    v48[1] = v47[1];
                    v48[2] = v47[2];
                    if (v75 < v46)
                      break;
                    v51 = (2 * v46) | 1;
                    v47 = &v9[3 * v51];
                    v52 = 2 * v46 + 2;
                    if (v52 < (uint64_t)v13 && (*a3)(&v9[3 * v51], v47 + 3))
                    {
                      v47 += 3;
                      v51 = v52;
                    }
                    result = (*a3)(v47, (uint64_t *)&v77);
                    v48 = v50;
                    v46 = v51;
                  }
                  while (!(_DWORD)result);
                  *(_OWORD *)v50 = v77;
                  v50[2] = v78;
                }
              }
              v45 = v44-- <= 0;
            }
            while (!v45);
            v58 = v12 / 0x18uLL;
            v59 = v73;
            do
            {
              if (v58 >= 2)
              {
                v60 = 0;
                v76 = *v9;
                v61 = v9;
                v70 = v9[2];
                v72 = v9[1];
                do
                {
                  v62 = &v61[3 * v60 + 3];
                  v63 = (2 * v60) | 1;
                  v64 = 2 * v60 + 2;
                  if (v64 < v58)
                  {
                    result = (*a3)(&v61[3 * v60 + 3], &v61[3 * v60 + 6]);
                    if ((_DWORD)result)
                    {
                      v62 += 3;
                      v63 = v64;
                    }
                  }
                  *v61 = *v62;
                  v61[1] = v62[1];
                  v61[2] = v62[2];
                  v61 = v62;
                  v60 = v63;
                }
                while (v63 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
                if (v62 == v59 - 3)
                {
                  *v62 = v76;
                  v62[1] = v72;
                  v62[2] = v70;
                }
                else
                {
                  *v62 = *(v59 - 3);
                  v62[1] = *(v59 - 2);
                  v62[2] = *(v59 - 1);
                  *(v59 - 3) = v76;
                  *(v59 - 2) = v72;
                  *(v59 - 1) = v70;
                  v65 = (char *)v62 - (char *)v9 + 24;
                  if (v65 >= 25)
                  {
                    v66 = (v65 / 0x18uLL - 2) >> 1;
                    v67 = &v9[3 * v66];
                    result = (*a3)(v67, v62);
                    if ((_DWORD)result)
                    {
                      v68 = *(_OWORD *)v62;
                      v78 = v62[2];
                      v77 = v68;
                      do
                      {
                        v69 = v67;
                        *v62 = *v67;
                        v62[1] = v67[1];
                        v62[2] = v67[2];
                        if (!v66)
                          break;
                        v66 = (v66 - 1) >> 1;
                        v67 = &v9[3 * v66];
                        result = (*a3)(v67, (uint64_t *)&v77);
                        v62 = v69;
                      }
                      while ((result & 1) != 0);
                      *(_OWORD *)v69 = v77;
                      v69[2] = v78;
                    }
                  }
                }
              }
              v59 -= 3;
              v45 = (unint64_t)v58-- > 2;
            }
            while (v45);
          }
          return result;
        }
        v14 = &v9[3 * (v13 >> 1)];
        if ((unint64_t)v12 < 0xC01)
        {
          sub_239C6C864(&v9[3 * (v13 >> 1)], v9, v10, a3);
        }
        else
        {
          sub_239C6C864(v9, &v9[3 * (v13 >> 1)], v10, a3);
          v15 = 3 * (v13 >> 1);
          sub_239C6C864(v9 + 3, &v9[v15 - 3], v74, a3);
          sub_239C6C864(v9 + 6, &v9[v15 + 3], v71, a3);
          sub_239C6C864(&v9[v15 - 3], &v9[v15], &v9[v15 + 3], a3);
          v16 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v16;
          v17 = v9[2];
          v9[2] = v14[2];
          v14[2] = v17;
        }
        --a4;
        a2 = v73;
        if ((a5 & 1) == 0 && ((*a3)(v9 - 3, v9) & 1) == 0)
        {
          v27 = *(_OWORD *)v9;
          v78 = v9[2];
          v77 = v27;
          result = (*a3)((uint64_t *)&v77, v10);
          if ((result & 1) != 0)
          {
            v11 = v9;
            do
            {
              v11 += 3;
              result = (*a3)((uint64_t *)&v77, v11);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v28 = v9 + 3;
            do
            {
              v11 = v28;
              if (v28 >= v73)
                break;
              result = (*a3)((uint64_t *)&v77, v28);
              v28 = v11 + 3;
            }
            while (!(_DWORD)result);
          }
          v29 = v73;
          if (v11 < v73)
          {
            v29 = v73;
            do
            {
              v29 -= 3;
              result = (*a3)((uint64_t *)&v77, v29);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v29)
          {
            v30 = *v11;
            *v11 = *v29;
            *v29 = v30;
            v31 = v11[1];
            v11[1] = v29[1];
            v29[1] = v31;
            v32 = v11[2];
            v11[2] = v29[2];
            v29[2] = v32;
            do
              v11 += 3;
            while (!(*a3)((uint64_t *)&v77, v11));
            do
            {
              v29 -= 3;
              result = (*a3)((uint64_t *)&v77, v29);
            }
            while ((result & 1) != 0);
          }
          if (v11 - 3 != v9)
          {
            *v9 = *(v11 - 3);
            v9[1] = *(v11 - 2);
            v9[2] = *(v11 - 1);
          }
          a5 = 0;
          *(_OWORD *)(v11 - 3) = v77;
          *(v11 - 1) = v78;
          continue;
        }
        v18 = *(_OWORD *)v9;
        v78 = v9[2];
        v77 = v18;
        v19 = v9;
        do
        {
          v20 = v19;
          v19 += 3;
        }
        while (((*a3)(v19, (uint64_t *)&v77) & 1) != 0);
        v21 = v73;
        if (v20 == v9)
        {
          v21 = v73;
          do
          {
            if (v19 >= v21)
              break;
            v21 -= 3;
          }
          while (((*a3)(v21, (uint64_t *)&v77) & 1) == 0);
        }
        else
        {
          do
            v21 -= 3;
          while (!(*a3)(v21, (uint64_t *)&v77));
        }
        v11 = v19;
        if (v19 < v21)
        {
          v22 = v21;
          do
          {
            v23 = *v11;
            *v11 = *v22;
            *v22 = v23;
            v24 = v11[1];
            v11[1] = v22[1];
            v22[1] = v24;
            v25 = v11[2];
            v11[2] = v22[2];
            v22[2] = v25;
            do
              v11 += 3;
            while (((*a3)(v11, (uint64_t *)&v77) & 1) != 0);
            do
              v22 -= 3;
            while (!(*a3)(v22, (uint64_t *)&v77));
          }
          while (v11 < v22);
        }
        if (v11 - 3 != v9)
        {
          *v9 = *(v11 - 3);
          v9[1] = *(v11 - 2);
          v9[2] = *(v11 - 1);
        }
        *(_OWORD *)(v11 - 3) = v77;
        *(v11 - 1) = v78;
        if (v19 < v21)
        {
LABEL_30:
          result = sub_239C6B3D8(v9, v11 - 3, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v26 = sub_239C6CC40(v9, v11 - 3, a3);
        result = sub_239C6CC40(v11, v73, a3);
        if (!(_DWORD)result)
        {
          if (v26)
            continue;
          goto LABEL_30;
        }
        a2 = v11 - 3;
        if (!v26)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_239C6BD70(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_OWORD *)v10 + 1) = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5)
        v5 %= v7;
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_59:
    *v23 = v10;
    goto LABEL_60;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239C6C044(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239C6C058(uint64_t a1)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  __int128 v13;
  void *memptr;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_OWORD *)(a1 + 16) = _Q0;
  v13 = _Q0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v7 = memptr;
  *(_QWORD *)(a1 + 40) = memptr;
  if (!v7)
    goto LABEL_5;
  *(_DWORD *)(a1 + 56) = 5;
  v7[4] = 0;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *(_OWORD *)(a1 + 192) = v13;
  *(_OWORD *)(a1 + 128) = xmmword_239F13AC0;
  *(_OWORD *)(a1 + 144) = unk_239F13AD0;
  *(_OWORD *)(a1 + 160) = xmmword_239F13AE0;
  *(_OWORD *)(a1 + 176) = unk_239F13AF0;
  *(_OWORD *)(a1 + 64) = xmmword_239F13A80;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)algn_239F13A90;
  *(_OWORD *)(a1 + 96) = xmmword_239F13AA0;
  *(float64x2_t *)(a1 + 112) = xmmword_239F13AB0;
  *(_OWORD *)(a1 + 208) = v13;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v8 = memptr;
  *(_QWORD *)(a1 + 232) = memptr;
  if (!v8)
    goto LABEL_5;
  *(_DWORD *)(a1 + 248) = 5;
  v8[4] = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *(_OWORD *)(a1 + 320) = xmmword_239F13AC0;
  *(_OWORD *)(a1 + 336) = unk_239F13AD0;
  *(_OWORD *)(a1 + 352) = xmmword_239F13AE0;
  *(_OWORD *)(a1 + 368) = unk_239F13AF0;
  *(_OWORD *)(a1 + 256) = xmmword_239F13A80;
  *(_OWORD *)(a1 + 272) = *(_OWORD *)algn_239F13A90;
  *(_OWORD *)(a1 + 288) = xmmword_239F13AA0;
  *(float64x2_t *)(a1 + 304) = xmmword_239F13AB0;
  *(_OWORD *)(a1 + 384) = v13;
  *(_OWORD *)(a1 + 400) = v13;
  *(_BYTE *)(a1 + 416) = 1;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v9 = memptr;
  *(_QWORD *)(a1 + 424) = memptr;
  if (!v9)
  {
LABEL_5:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v12 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v12, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  *(_DWORD *)(a1 + 440) = 5;
  v9[4] = 0;
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *(_OWORD *)(a1 + 512) = xmmword_239F13AC0;
  *(_OWORD *)(a1 + 528) = unk_239F13AD0;
  *(_OWORD *)(a1 + 544) = xmmword_239F13AE0;
  *(_OWORD *)(a1 + 560) = unk_239F13AF0;
  *(_OWORD *)(a1 + 448) = xmmword_239F13A80;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)algn_239F13A90;
  *(_OWORD *)(a1 + 480) = xmmword_239F13AA0;
  *(float64x2_t *)(a1 + 496) = xmmword_239F13AB0;
  return a1;
}

void sub_239C6C270(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
  {
    do
    {
      free(*(void **)(v2 - 152));
      v2 -= 192;
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239C6C29C(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *j;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  __int16 v25;

  if (a3[3])
  {
    v6 = (_QWORD *)a3[2];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    a3[2] = 0;
    v8 = a3[1];
    if (v8)
    {
      for (i = 0; i != v8; ++i)
        *(_QWORD *)(*a3 + 8 * i) = 0;
    }
    a3[3] = 0;
  }
  v10 = a1[10];
  if (!v10)
    return 0;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = a2;
    if (v10 <= a2)
      v12 = a2 % v10;
  }
  else
  {
    v12 = ((_DWORD)v10 - 1) & a2;
  }
  v13 = *(uint64_t ***)(a1[9] + 8 * v12);
  if (!v13)
    return 0;
  v14 = *v13;
  if (!v14)
    return 0;
  if (v11.u32[0] < 2uLL)
  {
    v15 = v10 - 1;
    while (1)
    {
      v17 = v14[1];
      if (v17 == a2)
      {
        if (*((_DWORD *)v14 + 4) == a2)
          goto LABEL_29;
      }
      else if ((v17 & v15) != v12)
      {
        return 0;
      }
      v14 = (uint64_t *)*v14;
      if (!v14)
        return 0;
    }
  }
  while (1)
  {
    v16 = v14[1];
    if (v16 == a2)
      break;
    if (v16 >= v10)
      v16 %= v10;
    if (v16 != v12)
      return 0;
LABEL_18:
    v14 = (uint64_t *)*v14;
    if (!v14)
      return 0;
  }
  if (*((_DWORD *)v14 + 4) != a2)
    goto LABEL_18;
LABEL_29:
  for (j = (uint64_t *)v14[56]; j; j = (uint64_t *)*j)
  {
    v20 = *((unsigned int *)j + 5);
    v21 = *a1;
    if (v20 >= (a1[1] - *a1) >> 6 || (*(_DWORD *)(v21 + (v20 << 6)) != -1 ? (v22 = (_DWORD)v20 == -1) : (v22 = 1), v22))
    {
      sub_239A444D4((uint64_t)"unknown file", 347, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v23 = v21 + (v20 << 6);
    v24 = sub_239C6C570((uint64_t)a3, *((_DWORD *)j + 4), (_DWORD *)j + 4);
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(v23 + 8);
    *(_OWORD *)(v24 + 40) = *(_OWORD *)(v23 + 24);
    *(_OWORD *)(v24 + 56) = *(_OWORD *)(v23 + 40);
    if (v24 + 16 != (char *)v23)
    {
      v25 = *(_WORD *)(v23 + 56);
      v24[74] = *(_BYTE *)(v23 + 58);
      *((_WORD *)v24 + 36) = v25;
    }
    *(_WORD *)(v24 + 75) = *(_WORD *)(v23 + 59);
  }
  return 1;
}

void **sub_239C6C4A0(void **a1)
{
  free(a1[53]);
  free(a1[29]);
  free(a1[5]);
  return a1;
}

uint64_t sub_239C6C4D8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v2 = *(_QWORD **)(a1 + 96);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v4)
    operator delete(v4);
  v5 = *(_QWORD **)(a1 + 56);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
    operator delete(v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v9;
    }
    while (v9);
  }
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v10)
    operator delete(v10);
  return a1;
}

char *sub_239C6C570(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = (char *)operator new(0x50uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 14) = -1;
  *((_QWORD *)v10 + 3) = -1;
  *((_QWORD *)v10 + 4) = -1;
  *((_QWORD *)v10 + 8) = 0;
  *(_WORD *)(v10 + 75) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v6 = v3;
  }
  else
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_35;
    if (prime < v7)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v7)
LABEL_35:
        sub_239A501C8(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v23)
  {
    *(_QWORD *)v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v6) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_239C6C850(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239C6C864(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v11 = a1 + 2;
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v12 = a1[1];
      a1[1] = a3[1];
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      v19 = a1[1];
      a1[1] = a2[1];
      a2[1] = v19;
      v11 = a2 + 2;
      v20 = a1[2];
      a1[2] = a2[2];
      a2[2] = v20;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      v12 = a2[1];
      a2[1] = a3[1];
    }
    a3[1] = v12;
    v16 = a3 + 2;
    goto LABEL_10;
  }
  if ((_DWORD)result)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    v16 = a2 + 2;
    v15 = a2[2];
    a2[2] = a3[2];
    a3[2] = v15;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      v18 = a1[1];
      a1[1] = a2[1];
      a2[1] = v18;
      v11 = a1 + 2;
LABEL_10:
      v22 = *v11;
      *v11 = *v16;
      *v16 = v22;
    }
  }
  return result;
}

uint64_t sub_239C6C9D8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_239C6C864(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    v13 = a3[2];
    a3[2] = a4[2];
    a4[2] = v13;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      v15 = a2[1];
      a2[1] = a3[1];
      a3[1] = v15;
      v16 = a2[2];
      a2[2] = a3[2];
      a3[2] = v16;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        v18 = a1[1];
        a1[1] = a2[1];
        a2[1] = v18;
        v19 = a1[2];
        a1[2] = a2[2];
        a2[2] = v19;
      }
    }
  }
  return result;
}

uint64_t sub_239C6CAE8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_239C6C9D8(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    v15 = a4[2];
    a4[2] = a5[2];
    a5[2] = v15;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      v17 = a3[1];
      a3[1] = a4[1];
      a4[1] = v17;
      v18 = a3[2];
      a3[2] = a4[2];
      a4[2] = v18;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        v21 = a2[2];
        a2[2] = a3[2];
        a3[2] = v21;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
          v23 = a1[1];
          a1[1] = a2[1];
          a2[1] = v23;
          v24 = a1[2];
          a1[2] = a2[2];
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

BOOL sub_239C6CC40(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  uint64_t v19;

  v6 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((*a3)(a2 - 3, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v9;
        v10 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3uLL:
      sub_239C6C864(a1, a1 + 3, a2 - 3, a3);
      return 1;
    case 4uLL:
      sub_239C6C9D8(a1, a1 + 3, a1 + 6, a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_239C6CAE8(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3);
      return 1;
    default:
      v11 = a1 + 6;
      sub_239C6C864(a1, a1 + 3, a1 + 6, a3);
      v12 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v12, v11))
    {
      v18 = *(_OWORD *)v12;
      v19 = v12[2];
      v16 = v13;
      do
      {
        v17 = (char *)a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)a1 + v16 + 48);
        *((_QWORD *)v17 + 11) = *(uint64_t *)((char *)a1 + v16 + 64);
        if (v16 == -48)
        {
          v15 = (uint64_t)a1;
          goto LABEL_7;
        }
        v16 -= 24;
      }
      while (((*a3)((uint64_t *)&v18, (uint64_t *)v17 + 3) & 1) != 0);
      v15 = (uint64_t)a1 + v16 + 72;
LABEL_7:
      *(_OWORD *)v15 = v18;
      *(_QWORD *)(v15 + 16) = v19;
      if (++v14 == 8)
        return v12 + 3 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 3;
    if (v12 == a2)
      return 1;
  }
}

uint64_t sub_239C6CE38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239C6CE88(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;

  v3 = a1[10];
  if (!v3)
    goto LABEL_47;
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2;
    if (v3 <= a2)
      v5 = a2 % v3;
  }
  else
  {
    v5 = ((_DWORD)v3 - 1) & a2;
  }
  v6 = *(uint64_t ***)(a1[9] + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
  {
LABEL_47:
    v23 = 265;
    goto LABEL_49;
  }
  if (v4.u32[0] < 2uLL)
  {
    v8 = v3 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == a2)
      {
        if (*((_DWORD *)v7 + 4) == a2)
          goto LABEL_21;
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_47;
      }
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_47;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == a2)
      break;
    if (v9 >= v3)
      v9 %= v3;
    if (v9 != v5)
      goto LABEL_47;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
      goto LABEL_47;
  }
  if (*((_DWORD *)v7 + 4) != a2)
    goto LABEL_11;
LABEL_21:
  v11 = v7[55];
  if (!v11)
    goto LABEL_48;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = a3;
    if (v11 <= a3)
      v13 = a3 % v11;
  }
  else
  {
    v13 = ((_DWORD)v11 - 1) & a3;
  }
  v14 = *(uint64_t ***)(v7[54] + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_48:
    v23 = 271;
    goto LABEL_49;
  }
  if (v12.u32[0] < 2uLL)
  {
    v16 = v11 - 1;
    while (1)
    {
      v18 = v15[1];
      if (v18 == a3)
      {
        if (*((_DWORD *)v15 + 4) == a3)
          goto LABEL_41;
      }
      else if ((v18 & v16) != v13)
      {
        goto LABEL_48;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_48;
    }
  }
  while (2)
  {
    v17 = v15[1];
    if (v17 != a3)
    {
      if (v17 >= v11)
        v17 %= v11;
      if (v17 != v13)
        goto LABEL_48;
      goto LABEL_31;
    }
    if (*((_DWORD *)v15 + 4) != a3)
    {
LABEL_31:
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_48;
      continue;
    }
    break;
  }
LABEL_41:
  v19 = *((unsigned int *)v15 + 5);
  v20 = *a1;
  if (v19 >= (a1[1] - *a1) >> 6 || (*(_DWORD *)(v20 + (v19 << 6)) != -1 ? (v21 = (_DWORD)v19 == -1) : (v21 = 1), v21))
  {
    v23 = 276;
LABEL_49:
    sub_239A444D4((uint64_t)"unknown file", v23, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  return v20 + (v19 << 6) + 8;
}

uint64_t sub_239C6D0D8(uint64_t a1)
{
  if (*(char *)(a1 + 1087) < 0)
    operator delete(*(void **)(a1 + 1064));
  free(*(void **)(a1 + 856));
  if (*(char *)(a1 + 679) < 0)
    operator delete(*(void **)(a1 + 656));
  free(*(void **)(a1 + 448));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  free(*(void **)(a1 + 40));
  return a1;
}

double sub_239C6D140(double *a1, double *a2)
{
  unint64_t v2;
  uint64_t v3;
  double v4;
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  uint64_t v12;
  double v13;

  if (a1 != a2)
  {
    v2 = (char *)a2 - (char *)a1 - 8;
    v3 = (v2 >> 3) + 1;
    v4 = 0.0;
    v5 = a1;
    if (v2 >= 8)
    {
      v6 = a1 + 1;
      v7 = v3 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v4 = v4 + *(v6 - 1) + *v6;
        v6 += 2;
        v7 -= 2;
      }
      while (v7);
      if (v3 == (v3 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_8:
        v9 = (double)(unint64_t)(a2 - a1);
        v10 = 0.0;
        if (v2 >= 8)
        {
          v11 = a1 + 1;
          v12 = v3 & 0x3FFFFFFFFFFFFFFELL;
          do
          {
            v10 = v10 + *(v11 - 1) * *(v11 - 1) + *v11 * *v11;
            v11 += 2;
            v12 -= 2;
          }
          while (v12);
          if (v3 == (v3 & 0x3FFFFFFFFFFFFFFELL))
            return v4 / v9;
          a1 += v3 & 0x3FFFFFFFFFFFFFFELL;
        }
        do
        {
          v13 = *a1++;
          v10 = v10 + v13 * v13;
        }
        while (a1 != a2);
        return v4 / v9;
      }
      v5 = &a1[v3 & 0x3FFFFFFFFFFFFFFELL];
    }
    do
    {
      v8 = *v5++;
      v4 = v4 + v8;
    }
    while (v5 != a2);
    goto LABEL_8;
  }
  return NAN;
}

double sub_239C6D230(_BYTE *a1, _BYTE *a2, float a3)
{
  size_t v4;
  uint64_t v5;
  char *v7;
  double *v8;
  unint64_t v9;
  float v10;
  double *v11;
  double v12;

  v4 = a2 - a1;
  v5 = (a2 - a1) >> 3;
  if (a2 == a1)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v7 = (char *)operator new(a2 - a1);
    v8 = (double *)&v7[8 * v5];
    memcpy(v7, a1, v4);
  }
  v9 = v5 - 1;
  v10 = (float)(unint64_t)(v5 - 1) * a3;
  if (v5 - 1 >= (unint64_t)v10)
    v9 = (unint64_t)v10;
  v11 = (double *)&v7[8 * v9];
  if (v11 != v8)
    sub_2395F71EC((double *)v7, (double *)&v7[8 * v9], v8);
  v12 = *v11;
  operator delete(v7);
  return v12;
}

void sub_239C6D304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (v10)
    operator delete(v10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239C6D330(uint64_t *result, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  int8x8_t **v6;
  int8x8_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v2 = result[10];
  if (!v2)
    goto LABEL_96;
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2[1];
    if (v2 <= v3)
      v5 = v3 % v2;
  }
  else
  {
    v5 = ((_DWORD)v2 - 1) & v3;
  }
  v6 = *(int8x8_t ***)(result[9] + 8 * v5);
  if (!v6 || (v7 = *v6) == 0)
  {
LABEL_96:
    v43 = 134;
    goto LABEL_98;
  }
  v8 = *a2;
  if (v4.u32[0] < 2uLL)
  {
    v9 = v2 - 1;
    while (1)
    {
      v11 = v7[1];
      if (*(_QWORD *)&v11 == v3)
      {
        if (v7[2].i32[0] == (_DWORD)v3)
          goto LABEL_21;
      }
      else if ((*(_QWORD *)&v11 & v9) != v5)
      {
        goto LABEL_96;
      }
      v7 = (int8x8_t *)*v7;
      if (!v7)
        goto LABEL_96;
    }
  }
  while (1)
  {
    v10 = (unint64_t)v7[1];
    if (v10 == v3)
      break;
    if (v10 >= v2)
      v10 %= v2;
    if (v10 != v5)
      goto LABEL_96;
LABEL_11:
    v7 = (int8x8_t *)*v7;
    if (!v7)
      goto LABEL_96;
  }
  if (v7[2].i32[0] != (_DWORD)v3)
    goto LABEL_11;
LABEL_21:
  v12 = (int8x8_t)result[5];
  if (!*(_QWORD *)&v12)
    goto LABEL_97;
  v13 = *a2;
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = *a2;
    if (*(_QWORD *)&v12 <= v13)
      v15 = v13 % *(_QWORD *)&v12;
  }
  else
  {
    v15 = (v12.i32[0] - 1) & v13;
  }
  v16 = *(uint64_t ***)(result[4] + 8 * v15);
  if (!v16 || (v17 = *v16) == 0)
  {
LABEL_97:
    v43 = 136;
    goto LABEL_98;
  }
  if (v14.u32[0] < 2uLL)
  {
    v18 = *(_QWORD *)&v12 - 1;
    while (1)
    {
      v20 = v17[1];
      if (v20 == v13)
      {
        if (*((_DWORD *)v17 + 4) == (_DWORD)v8)
          goto LABEL_41;
      }
      else if ((v20 & v18) != v15)
      {
        goto LABEL_97;
      }
      v17 = (uint64_t *)*v17;
      if (!v17)
        goto LABEL_97;
    }
  }
  while (2)
  {
    v19 = v17[1];
    if (v19 != v13)
    {
      if (v19 >= *(_QWORD *)&v12)
        v19 %= *(_QWORD *)&v12;
      if (v19 != v15)
        goto LABEL_97;
      goto LABEL_31;
    }
    if (*((_DWORD *)v17 + 4) != (_DWORD)v8)
    {
LABEL_31:
      v17 = (uint64_t *)*v17;
      if (!v17)
        goto LABEL_97;
      continue;
    }
    break;
  }
LABEL_41:
  v21 = v7[55];
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8(v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v23 = *a2;
      if (*(_QWORD *)&v21 <= v13)
        v23 = v13 % *(_QWORD *)&v21;
    }
    else
    {
      v23 = (v21.i32[0] - 1) & v13;
    }
    v24 = *(uint64_t **)(*(_QWORD *)&v7[54] + 8 * v23);
    if (v24)
    {
      v24 = (uint64_t *)*v24;
      if (v24)
      {
        if (v22.u32[0] < 2uLL)
        {
          v25 = *(_QWORD *)&v21 - 1;
          while (1)
          {
            v27 = v24[1];
            if (v27 == v13)
            {
              if (*((_DWORD *)v24 + 4) == (_DWORD)v8)
                goto LABEL_62;
            }
            else if ((v27 & v25) != v23)
            {
              goto LABEL_61;
            }
            v24 = (uint64_t *)*v24;
            if (!v24)
              goto LABEL_62;
          }
        }
        do
        {
          v26 = v24[1];
          if (v26 == v13)
          {
            if (*((_DWORD *)v24 + 4) == (_DWORD)v8)
              break;
          }
          else
          {
            if (v26 >= *(_QWORD *)&v21)
              v26 %= *(_QWORD *)&v21;
            if (v26 != v23)
              goto LABEL_61;
          }
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
    }
  }
  else
  {
LABEL_61:
    v24 = 0;
  }
LABEL_62:
  v28 = v17[15];
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v30 = a2[1];
      if (v28 <= v3)
        v30 = v3 % v28;
    }
    else
    {
      v30 = ((_DWORD)v28 - 1) & v3;
    }
    v31 = *(uint64_t **)(v17[14] + 8 * v30);
    if (v31)
    {
      v31 = (uint64_t *)*v31;
      if (v31)
      {
        if (v29.u32[0] < 2uLL)
        {
          v32 = v28 - 1;
          while (1)
          {
            v34 = v31[1];
            if (v34 == v3)
            {
              if (*((_DWORD *)v31 + 4) == (_DWORD)v3)
                goto LABEL_83;
            }
            else if ((v34 & v32) != v30)
            {
              goto LABEL_82;
            }
            v31 = (uint64_t *)*v31;
            if (!v31)
              goto LABEL_83;
          }
        }
        do
        {
          v33 = v31[1];
          if (v33 == v3)
          {
            if (*((_DWORD *)v31 + 4) == (_DWORD)v3)
              break;
          }
          else
          {
            if (v33 >= v28)
              v33 %= v28;
            if (v33 != v30)
              goto LABEL_82;
          }
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
    }
  }
  else
  {
LABEL_82:
    v31 = 0;
  }
LABEL_83:
  if (!v24)
  {
    v43 = 139;
    goto LABEL_98;
  }
  if (!v31)
  {
    v43 = 140;
    goto LABEL_98;
  }
  v35 = *((unsigned int *)v31 + 5);
  if ((_DWORD)v35 != *((_DWORD *)v24 + 5))
  {
    v43 = 141;
    goto LABEL_98;
  }
  v36 = *result;
  if (v35 >= (result[1] - *result) >> 6
    || (*(_DWORD *)(v36 + (v35 << 6)) != -1 ? (v37 = (_DWORD)v35 == -1) : (v37 = 1), v37))
  {
    v43 = 143;
    goto LABEL_98;
  }
  v38 = v36 + (v35 << 6);
  v40 = *(_QWORD *)(v38 + 8);
  v39 = (uint64_t *)(v38 + 8);
  if (v8 != v40)
  {
    v43 = 145;
    goto LABEL_98;
  }
  if (v3 != *(_QWORD *)(v36 + (v35 << 6) + 16))
  {
    v43 = 147;
LABEL_98:
    sub_239A444D4((uint64_t)"unknown file", v43, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_OWORD *)v39 = *(_OWORD *)a2;
  v41 = v36 + (v35 << 6);
  *(_OWORD *)(v41 + 24) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v41 + 40) = *((_OWORD *)a2 + 2);
  if (v39 != a2)
  {
    v42 = *((_WORD *)a2 + 24);
    *(_BYTE *)(v41 + 58) = *((_BYTE *)a2 + 50);
    *(_WORD *)(v41 + 56) = v42;
  }
  *(_WORD *)(v41 + 59) = *(_WORD *)((char *)a2 + 51);
  return result;
}

void sub_239C6D834()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239C6D848(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_250AFC090;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_239C6D8A0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250AFC090;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_239C6D8E0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  float64x2_t *v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v20;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  double v27;
  unsigned int *v28;
  unsigned int *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  void *__p;
  unsigned int *v38;
  uint64_t v39;

  v3 = *a2;
  v4 = 8 * *a2;
  v5 = *(unsigned int *)(**(_QWORD **)(a1 + 72) + v4);
  v6 = *(uint64_t **)(a1 + 48);
  v7 = *v6;
  if (v5 >= (v6[1] - *v6) >> 6 || (v5 != 0xFFFFFFFF ? (_ZF = *(_DWORD *)(v7 + (v5 << 6)) == -1) : (_ZF = 1), _ZF))
  {
    sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (((*(_QWORD *)(**(_QWORD **)(a1 + 56) + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) == 0)
  {
    *(_BYTE *)(v7 + (v5 << 6) + 59) = 1;
    return;
  }
  v9 = (float64x2_t *)(**(_QWORD **)(a1 + 64) + 24 * v3);
  v10 = *(double **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = **(_QWORD **)(a1 + 16);
  v13 = *(_QWORD *)(v12 + v4);
  _Q3 = *v9;
  _D5 = *(_QWORD *)(v11 + 112);
  __asm { FMLA            D4, D5, V3.D[1] }
  v20 = _D4 + *(double *)(v11 + 144) * v9[1].f64[0] + *(double *)(v11 + 176);
  if (v20 < v10[23] || v20 > v10[22])
  {
    *((_BYTE *)sub_2395D7CD8((uint64_t)v6, *(_QWORD *)(v12 + v4)) + 27) = 1;
    __p = 0;
    v38 = 0;
    v39 = 0;
    sub_239C580BC(*(_QWORD *)(a1 + 48), v13, (uint64_t)&__p);
    v22 = (unsigned int *)__p;
    v23 = v38;
    if (__p != v38)
    {
      do
      {
        v24 = *v22;
        v25 = **(_QWORD **)(a1 + 48);
        if (v24 >= (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) - v25) >> 6
          || (v24 != 0xFFFFFFFF ? (v26 = *(_DWORD *)(v25 + (v24 << 6)) == -1) : (v26 = 1), v26))
        {
          sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        *(_BYTE *)(v25 + (v24 << 6) + 59) = 1;
        v22 += 2;
      }
      while (v22 != v23);
      v22 = (unsigned int *)__p;
    }
    if (!v22)
      return;
LABEL_35:
    v38 = v22;
    operator delete(v22);
    return;
  }
  v27 = v10[25];
  __p = 0;
  v38 = 0;
  v39 = 0;
  sub_239C580BC((uint64_t)v6, v13, (uint64_t)&__p);
  v28 = (unsigned int *)__p;
  v29 = v38;
  if (__p == v38)
  {
LABEL_33:
    v36 = 0;
  }
  else
  {
    while (1)
    {
      v30 = *v28;
      v31 = *(uint64_t **)(a1 + 48);
      v32 = *v31;
      if (v30 >= (v31[1] - *v31) >> 6
        || (v30 != 0xFFFFFFFF ? (v33 = *(_DWORD *)(v32 + (v30 << 6)) == -1) : (v33 = 1), v33))
      {
        sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v34 = v32 + (v30 << 6);
      if (*(_BYTE *)(v34 + 59) == 2)
      {
        v35 = sub_239BF5CF4((uint64_t)v31, *(_QWORD *)(v34 + 16));
        if (sub_239C503BC(v9, *(_QWORD *)(a1 + 40) + 64, (uint64_t)(v35 + 8)) >= v27)
          break;
      }
      v28 += 2;
      if (v28 == v29)
        goto LABEL_33;
    }
    sub_2397A15E8(*(os_unfair_lock_s **)(a1 + 8));
    ++**(_QWORD **)(a1 + 24);
    sub_2397A1600(*(os_unfair_lock_s **)(a1 + 8));
    v36 = 2;
  }
  *(_BYTE *)(v7 + (v5 << 6) + 59) = v36;
  v22 = (unsigned int *)__p;
  if (__p)
    goto LABEL_35;
}

void sub_239C6DBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239C6DBFC(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v11 - 2) = v13;
            operator delete(v13);
          }
          v11 = v12;
        }
        while (v12 != v2);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

char *sub_239C6DD1C(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_239418A80();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

char *sub_239C6DE64(char *result, unsigned int a2, _QWORD *a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *j;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int16 v22;

  v5 = result;
  if (a3[3])
  {
    result = (char *)a3[2];
    if (result)
    {
      do
      {
        v6 = *(char **)result;
        operator delete(result);
        result = v6;
      }
      while (v6);
    }
    a3[2] = 0;
    v7 = a3[1];
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*a3 + 8 * i) = 0;
    }
    a3[3] = 0;
  }
  v9 = *((_QWORD *)v5 + 5);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = a2;
      if (v9 <= a2)
        v11 = a2 % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & a2;
    }
    v12 = *(uint64_t ***)(*((_QWORD *)v5 + 4) + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        if (v10.u32[0] < 2uLL)
        {
          v14 = v9 - 1;
          while (1)
          {
            v16 = v13[1];
            if (v16 == a2)
            {
              if (*((_DWORD *)v13 + 4) == a2)
                goto LABEL_29;
            }
            else if ((v16 & v14) != v11)
            {
              return result;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              return result;
          }
        }
        do
        {
          v15 = v13[1];
          if (v15 == a2)
          {
            if (*((_DWORD *)v13 + 4) == a2)
            {
LABEL_29:
              for (j = (uint64_t *)v13[16]; j; j = (uint64_t *)*j)
              {
                v18 = *((unsigned int *)j + 5);
                v19 = *(_QWORD *)v5;
                if (v18 >= (uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 6
                  || (*(_DWORD *)(v19 + (v18 << 6)) != -1 ? (v20 = (_DWORD)v18 == -1) : (v20 = 1), v20))
                {
                  sub_239A444D4((uint64_t)"unknown file", 396, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                v21 = v19 + (v18 << 6);
                result = sub_239C6C570((uint64_t)a3, *((_DWORD *)j + 4), (_DWORD *)j + 4);
                *(_OWORD *)(result + 24) = *(_OWORD *)(v21 + 8);
                *(_OWORD *)(result + 40) = *(_OWORD *)(v21 + 24);
                *(_OWORD *)(result + 56) = *(_OWORD *)(v21 + 40);
                if (result + 16 != (char *)v21)
                {
                  v22 = *(_WORD *)(v21 + 56);
                  result[74] = *(_BYTE *)(v21 + 58);
                  *((_WORD *)result + 36) = v22;
                }
                *(_WORD *)(result + 75) = *(_WORD *)(v21 + 59);
              }
              return result;
            }
          }
          else
          {
            if (v15 >= v9)
              v15 %= v9;
            if (v15 != v11)
              return result;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
  return result;
}

uint64_t sub_239C6E060(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int8x8_t *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  char *v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  unint64_t *v57;
  unint64_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  int8x8_t v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  double *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v85;
  void *v86;
  uint64_t *v87;
  uint64_t *v88;
  int v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _QWORD *v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  double *v108;
  _QWORD *v109;
  _QWORD *v110;
  int64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  int64_t v118;
  int64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  double *v132;
  unint64_t v133;
  double *v134;
  double v135;
  uint64_t *v137;
  int64_t v138;
  uint64_t v139;
  __int128 v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t *v147;
  char *v148;
  void *v149;
  char *v150;
  int64_t v151;
  int64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int64_t v156;
  unint64_t v157;
  _BYTE *v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  _OWORD *v162;
  char *v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  int64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  char *v194;
  _OWORD *v195;
  _OWORD *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  __int128 v201;
  char *v202;
  char *v203;
  __int128 v204;
  _BYTE *v205;
  _BYTE *v206;
  uint64_t i;
  double v208;
  __int128 v209;
  uint64_t v210;
  size_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  double *v216;
  double *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  double v221;
  double *v222;
  unint64_t v223;
  double *v224;
  uint64_t v225;
  _BOOL4 v226;
  _QWORD *v227;
  uint64_t v228;
  double v229;
  double *v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  float64x2_t v234;
  _BYTE *v235;
  _BYTE *v236;
  uint64_t v237;
  void **v238;
  void **v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t j;
  void *v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  char *v250;
  _QWORD *v251;
  _QWORD *v252;
  void *v253;
  uint64_t *v254;
  size_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unsigned int *v259;
  unsigned int *v260;
  unint64_t v261;
  uint64_t v262;
  BOOL v263;
  unint64_t v264;
  uint64_t v265;
  unsigned int *v266;
  unsigned int *v267;
  int64_t v268;
  char *v269;
  unint64_t v270;
  uint64_t v271;
  BOOL v272;
  unint64_t v273;
  uint64_t v274;
  uint8x8_t v275;
  unint64_t v276;
  uint64_t **v277;
  uint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  _OWORD *v283;
  char *v284;
  void *v285;
  char *v286;
  int64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  char *v292;
  char *v293;
  char *v294;
  char *v295;
  int64_t v296;
  int64_t v297;
  unint64_t v298;
  uint64_t v299;
  unint64_t v300;
  _BYTE *v301;
  char *v302;
  unint64_t v303;
  uint64_t v304;
  _OWORD *v305;
  char *v306;
  uint64_t v307;
  __int128 v308;
  uint64_t v309;
  _BYTE *v310;
  char *v311;
  void *v312;
  char *v313;
  int64_t v314;
  int64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  _BYTE *v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  _OWORD *v323;
  char *v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  char *v328;
  char *v329;
  void **v330;
  void **v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t *v338;
  _QWORD *v339;
  _QWORD *v340;
  __int128 v341;
  void **v342;
  unint64_t v343;
  void *v344;
  size_t v345;
  size_t v346;
  char *v347;
  char *v348;
  int64_t v349;
  __int128 v350;
  __int128 v351;
  _BOOL4 v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  int v357;
  char *v358;
  __int128 v359;
  uint64_t *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  int v364;
  unsigned int *v365;
  unsigned int *v366;
  unint64_t v367;
  uint64_t v368;
  BOOL v369;
  unsigned int *v370;
  unsigned int *v371;
  unint64_t v372;
  uint64_t v373;
  BOOL v374;
  _QWORD *v375;
  char *v376;
  char *v377;
  void *v378;
  char *v379;
  void *v380;
  void *v381;
  void **v382;
  void **v383;
  void *v384;
  char *v385;
  char *v386;
  void *v387;
  char *v388;
  void *v389;
  void *v390;
  char *v391;
  _QWORD *v392;
  void *v393;
  char *v394;
  void *v395;
  void *v396;
  BOOL v397;
  _QWORD *v398;
  void *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  uint64_t v402;
  _QWORD *v403;
  unint64_t v404;
  uint8x8_t v405;
  unint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  float64x2_t v413;
  double v414;
  float64x2_t v415;
  uint64_t *v416;
  uint64_t **v417;
  uint64_t **v418;
  unint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  std::bad_alloc *v425;
  std::bad_alloc *v426;
  std::bad_alloc *exception;
  std::bad_alloc *v428;
  uint64_t **v429;
  _QWORD *v430;
  unsigned int v431;
  uint64_t v432;
  char *__p;
  void *__pa;
  void *__pb;
  char *__pc;
  float64x2_t v437;
  char *v438;
  unint64_t v439;
  char *v440;
  uint64_t v441;
  void *v442;
  uint64_t v443;
  uint64_t *v444;
  unint64_t *v445;
  uint64_t *v446;
  unsigned int *v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t *v452;
  unsigned int *v453;
  uint64_t v454;
  int8x8_t *v455;
  void *v456;
  _OWORD v457[3];
  __int16 v458;
  char v459;
  __int16 v460;
  void *memptr[2];
  void *v462[2];
  int v463;
  int v464;
  unint64_t v465;
  void *v466[2];
  unint64_t v467;
  __int128 v468;
  __int128 v469;
  void *v470[2];
  __int128 v471;
  __int128 v472;
  float64x2_t v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  __int128 v477;
  void *v478[3];
  void *v479;
  char *v480;
  char *v481;
  void *v482;
  char *v483;
  char *v484;
  void *v485;
  char *v486;
  char *v487;
  void *v488[2];
  char *v489;
  void *v490[2];
  char *v491;
  std::__shared_weak_count v492;
  std::__shared_weak_count *v493;
  _BYTE v494[24];
  _BYTE *v495;
  void *v496;
  char *v497;
  unint64_t v498;
  void **v499;
  void *v500[2];
  __int128 v501;
  void *v502[2];
  size_t v503;
  int v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  _QWORD v513[24];

  v1 = a1;
  v513[21] = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 88);
  if (v2)
  {
    v3 = 0;
    do
    {
      if (*((_BYTE *)v2 + 256) == 2)
        ++v3;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  kdebug_trace();
  v4 = (int8x8_t *)(v1 + 1832);
  v429 = (uint64_t **)(v1 + 400);
  v454 = v1 + 1936;
  v430 = (_QWORD *)(v1 + 1912);
  __asm { FMOV            V0.2D, #1.0 }
  v437 = _Q0;
  v455 = (int8x8_t *)(v1 + 1832);
  v443 = v1;
  while (2)
  {
    while (2)
    {
      while (2)
      {
        while (2)
        {
          v7 = *(uint64_t **)v1;
          v8 = *(_QWORD *)(v1 + 32);
          v500[1] = 0;
          v500[0] = 0;
          *(_QWORD *)&v501 = 0;
          v470[0] = 0;
          v470[1] = 0;
          *(_QWORD *)&v471 = 0;
          v456 = 0;
          v457[0] = 0uLL;
          sub_239433C1C((uint64_t)v7, (uint64_t)v500, 1);
          v9 = (uint64_t *)v500[1];
          v10 = (uint64_t *)v500[0];
          v11 = (char *)v500[1] - (char *)v500[0];
          if (v500[1] == v500[0])
          {
            v78 = 0;
            v466[0] = 0;
            v466[1] = 0;
            v467 = 0;
            v77 = (uint64_t *)v443;
            goto LABEL_134;
          }
          if (v11 < 0)
            sub_2394189F8();
          v470[0] = operator new((char *)v500[1] - (char *)v500[0]);
          v470[1] = v470[0];
          *(_QWORD *)&v471 = (char *)v470[0] + 8 * (v11 >> 3);
          v448 = v8;
          v451 = v7 + 29;
          v456 = operator new(v11);
          *(_QWORD *)&v457[0] = v456;
          v438 = (char *)v456;
          v440 = (char *)v456 + 8 * (v11 >> 3);
          *((_QWORD *)&v457[0] + 1) = v440;
          __p = (char *)v456;
          v444 = v9;
          do
          {
            v12 = *v10;
            v13 = *(_QWORD **)(v8 + 664);
            v14 = *(_QWORD **)(v8 + 672);
            if (v13 != v14)
            {
              while (*v13 != v12)
              {
                if (++v13 == v14)
                {
                  v13 = *(_QWORD **)(v8 + 672);
                  break;
                }
              }
            }
            if (v13 == v14)
            {
              if (*((unsigned __int8 *)sub_239470FCC((uint64_t)v7, *v10) + 232) - 1 < 2)
              {
                v4 = v455;
                goto LABEL_11;
              }
              v15 = *(_QWORD *)(v443 + 1944);
              v4 = v455;
              if (v15 != v454)
              {
                while (*(_QWORD *)(v15 + 16) != v12)
                {
                  v15 = *(_QWORD *)(v15 + 8);
                  if (v15 == v454)
                    goto LABEL_25;
                }
                if (v15 != v454)
                {
                  if (v438 < v440)
                  {
                    *(_QWORD *)v438 = v12;
                    v16 = v438 + 8;
LABEL_71:
                    *(_QWORD *)&v457[0] = v16;
                    v438 = v16;
                    goto LABEL_49;
                  }
                  v35 = __p;
                  v36 = (v438 - __p) >> 3;
                  v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 61)
LABEL_675:
                    sub_2394189F8();
                  if ((v440 - __p) >> 2 > v37)
                    v37 = (v440 - __p) >> 2;
                  if ((unint64_t)(v440 - __p) >= 0x7FFFFFFFFFFFFFF8)
                    v38 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v38 = v37;
                  if (v38)
                  {
                    if (v38 >> 61)
LABEL_676:
                      sub_239418A80();
                    v39 = operator new(8 * v38);
                    v35 = __p;
                  }
                  else
                  {
                    v39 = 0;
                  }
                  v40 = &v39[8 * v36];
                  *(_QWORD *)v40 = v12;
                  v16 = v40 + 8;
                  if (v438 == v35)
                  {
                    v43 = v35;
                    v4 = v455;
LABEL_68:
                    v456 = v40;
                    v440 = &v39[8 * v38];
                    *((_QWORD *)&v457[0] + 1) = v440;
                    if (v43)
                      operator delete(v43);
                    __p = v40;
                    goto LABEL_71;
                  }
                  v41 = v438 - 8 - v35;
                  v4 = v455;
                  if (v41 >= 0x58)
                  {
                    if ((unint64_t)(__p - v39) >= 0x20)
                    {
                      v45 = (v41 >> 3) + 1;
                      v42 = &v438[-8 * (v45 & 0x3FFFFFFFFFFFFFFCLL)];
                      v46 = &v39[8 * v36 - 16];
                      v47 = v438 - 16;
                      v48 = v45 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v49 = *(_OWORD *)v47;
                        *(v46 - 1) = *((_OWORD *)v47 - 1);
                        *v46 = v49;
                        v46 -= 2;
                        v47 -= 32;
                        v48 -= 4;
                      }
                      while (v48);
                      v40 -= 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
                      v43 = __p;
                      if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_68;
                      goto LABEL_67;
                    }
                    v42 = v438;
                  }
                  else
                  {
                    v42 = v438;
                  }
                  v43 = __p;
                  do
                  {
LABEL_67:
                    v44 = *((_QWORD *)v42 - 1);
                    v42 -= 8;
                    *((_QWORD *)v40 - 1) = v44;
                    v40 -= 8;
                  }
                  while (v42 != v43);
                  goto LABEL_68;
                }
              }
LABEL_25:
              v17 = (char *)v470[1];
              if (v470[1] < (void *)v471)
              {
                *(_QWORD *)v470[1] = v12;
                v18 = v17 + 8;
LABEL_48:
                v470[1] = v18;
LABEL_49:
                v9 = v444;
                v8 = v448;
                goto LABEL_11;
              }
              v19 = (char *)v470[0];
              v20 = (char *)v470[1] - (char *)v470[0];
              v21 = ((char *)v470[1] - (char *)v470[0]) >> 3;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 61)
                goto LABEL_675;
              v23 = v471 - (unint64_t)v470[0];
              if ((uint64_t)(v471 - (unint64_t)v470[0]) >> 2 > v22)
                v22 = v23 >> 2;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
                v24 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                if (v24 >> 61)
                  goto LABEL_676;
                v25 = operator new(8 * v24);
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[8 * v21];
              *v26 = v12;
              v18 = v26 + 1;
              if (v17 == v19)
              {
                v4 = v455;
                goto LABEL_46;
              }
              v27 = v17 - 8 - v19;
              if (v27 >= 0x58)
              {
                v28 = v17 - &v25[v20];
                v4 = v455;
                if (v28 >= 0x20)
                {
                  v29 = (v27 >> 3) + 1;
                  v30 = &v25[8 * v21 - 16];
                  v31 = v17 - 16;
                  v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v33 = *(_OWORD *)v31;
                    *(v30 - 1) = *((_OWORD *)v31 - 1);
                    *v30 = v33;
                    v30 -= 2;
                    v31 -= 32;
                    v32 -= 4;
                  }
                  while (v32);
                  v26 -= v29 & 0x3FFFFFFFFFFFFFFCLL;
                  v17 -= 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v29 == (v29 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_46:
                    v470[0] = v26;
                    v470[1] = v18;
                    *(_QWORD *)&v471 = &v25[8 * v24];
                    if (v19)
                      operator delete(v19);
                    goto LABEL_48;
                  }
                }
              }
              else
              {
                v4 = v455;
              }
              do
              {
                v34 = *((_QWORD *)v17 - 1);
                v17 -= 8;
                *--v26 = v34;
              }
              while (v17 != v19);
              goto LABEL_46;
            }
LABEL_11:
            ++v10;
          }
          while (v10 != v9);
          v51 = (unint64_t *)v470[0];
          v50 = (unint64_t *)v470[1];
          v466[0] = 0;
          v466[1] = 0;
          v467 = 0;
          if (v470[0] == v470[1])
          {
            v77 = (uint64_t *)v443;
            v78 = v438;
            goto LABEL_134;
          }
          v52 = 0;
          __pa = 0;
          v441 = -1;
          v53 = -1;
          v445 = (unint64_t *)v470[1];
          while (2)
          {
            v54 = *v51;
            v55 = sub_239E312E8(v4, *v51);
            if (v55 <= v52)
              goto LABEL_79;
            v56 = v466[0];
            v466[1] = 0;
            v467 = 0;
            v466[0] = 0;
            if (v56)
              operator delete(v56);
            sub_239BF0570(v451, v54, (uint64_t)v466);
            v58 = (unint64_t *)v466[0];
            v57 = (unint64_t *)v466[1];
            if (v466[0] == v466[1])
            {
              v52 = v55;
              v53 = v54;
              goto LABEL_79;
            }
            v59 = *(_QWORD **)(v448 + 664);
            v60 = *(_QWORD **)(v448 + 672);
            while (2)
            {
              v61 = *v58;
              v62 = v59;
              if (v59 != v60)
              {
                while (*v62 != v61)
                {
                  if (++v62 == v60)
                  {
                    v62 = v60;
                    break;
                  }
                }
              }
              if (v62 != v60)
                goto LABEL_86;
              v63 = (int8x8_t)v7[10];
              if (!*(_QWORD *)&v63)
                goto LABEL_648;
              v64 = *v58;
              v65 = (uint8x8_t)vcnt_s8(v63);
              v65.i16[0] = vaddlv_u8(v65);
              if (v65.u32[0] > 1uLL)
              {
                v66 = *v58;
                if (*(_QWORD *)&v63 <= v64)
                  v66 = v64 % *(_QWORD *)&v63;
              }
              else
              {
                v66 = (v63.i32[0] - 1) & v64;
              }
              v67 = *(uint64_t ***)(v7[9] + 8 * v66);
              if (!v67 || (v68 = *v67) == 0)
              {
LABEL_648:
                sub_239A444D4((uint64_t)"unknown file", 779, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              if (v65.u32[0] < 2uLL)
              {
                v69 = *(_QWORD *)&v63 - 1;
                while (1)
                {
                  v71 = v68[1];
                  if (v71 == v64)
                  {
                    if (*((_DWORD *)v68 + 4) == (_DWORD)v61)
                      goto LABEL_111;
                  }
                  else if ((v71 & v69) != v66)
                  {
                    goto LABEL_648;
                  }
                  v68 = (uint64_t *)*v68;
                  if (!v68)
                    goto LABEL_648;
                }
              }
              while (2)
              {
                v70 = v68[1];
                if (v70 != v64)
                {
                  if (v70 >= *(_QWORD *)&v63)
                    v70 %= *(_QWORD *)&v63;
                  if (v70 != v66)
                    goto LABEL_648;
                  goto LABEL_101;
                }
                if (*((_DWORD *)v68 + 4) != (_DWORD)v61)
                {
LABEL_101:
                  v68 = (uint64_t *)*v68;
                  if (!v68)
                    goto LABEL_648;
                  continue;
                }
                break;
              }
LABEL_111:
              if (*((_BYTE *)v68 + 256) == 2)
              {
                if (!sub_239AF2B88(v451, v54, *v58))
                {
                  sub_239A444D4((uint64_t)"unknown file", 197, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                v72 = (_QWORD *)(*v451 + 40 * v54);
                v73 = v72[1];
                if ((v73 & (v73 - 1)) != 0)
                {
                  v75 = v61;
                  if (v73 <= v61)
                    v75 = v61 % v73;
                  v74 = *(double **)(*v72 + 8 * v75);
                  do
                  {
                    do
                      v74 = *(double **)v74;
                    while (*((_QWORD *)v74 + 1) != v61);
                  }
                  while (*((_QWORD *)v74 + 2) != v61);
                }
                else
                {
                  v74 = *(double **)(*v72 + 8 * ((v73 - 1) & v61));
                  do
                  {
                    do
                      v74 = *(double **)v74;
                    while (*((_QWORD *)v74 + 1) != v61);
                  }
                  while (*((_QWORD *)v74 + 2) != v61);
                }
                if (v74[5] > 2.0)
                {
                  __pa = (void *)v55;
                  v52 = v55;
                  v53 = v54;
                  v441 = v54;
                  goto LABEL_126;
                }
              }
LABEL_86:
              if (++v58 != v57)
                continue;
              break;
            }
            v52 = v55;
            v53 = v54;
LABEL_126:
            v4 = v455;
            v50 = v445;
LABEL_79:
            if (++v51 != v50)
              continue;
            break;
          }
          v76 = v441;
          v77 = (uint64_t *)v443;
          v78 = v438;
          if (v441 != -1 && (unint64_t)__pa >= 0xF || v53 != -1 && (v76 = v53, v52 > 5))
          {
LABEL_145:
            v85 = 1;
            v86 = v466[0];
            if (!v466[0])
              goto LABEL_147;
            goto LABEL_146;
          }
LABEL_134:
          v79 = (unint64_t *)v456;
          if (v456 != v78)
          {
            v80 = 0;
            v81 = -1;
            do
            {
              v82 = *v79;
              v83 = sub_239E312E8(v4, *v79);
              if (v83 > v80)
              {
                v81 = v82;
                v80 = v83;
              }
              ++v79;
            }
            while (v79 != (unint64_t *)v78);
            v76 = v81;
            _CF = v81 != -1 && v80 >= 0xF;
            v77 = (uint64_t *)v443;
            if (_CF)
              goto LABEL_145;
          }
          v76 = 0;
          v85 = 0;
          v86 = v466[0];
          if (v466[0])
          {
LABEL_146:
            v466[1] = v86;
            operator delete(v86);
          }
LABEL_147:
          if (v456)
            operator delete(v456);
          if (v470[0])
          {
            v470[1] = v470[0];
            operator delete(v470[0]);
          }
          if (v500[0])
          {
            v500[1] = v500[0];
            operator delete(v500[0]);
          }
          if (!(_DWORD)v85)
            return v85;
          v87 = (uint64_t *)*v77;
          v432 = v77[4];
          v442 = (void *)v76;
          v88 = sub_2395D7BEC(*v77, v76);
          v452 = v87;
          v446 = v88;
          v431 = v85;
          if (!*((_BYTE *)v88 + 233) && *((_DWORD *)v88 + 48) != -1)
          {
            v89 = *((_DWORD *)sub_239470FCC((uint64_t)v87, v76) + 48);
            v500[1] = 0;
            v500[0] = 0;
            *(_QWORD *)&v501 = 0;
            v90 = v87[11];
            if (v90)
            {
              v91 = 0;
              v92 = 0;
              v93 = 0;
              while (2)
              {
                if (*(_DWORD *)(v90 + 216) != v89)
                  goto LABEL_160;
                if (v93 < v92)
                {
                  *(_QWORD *)v93 = *(unsigned int *)(v90 + 16);
                  v94 = v93 + 8;
                }
                else
                {
                  v95 = (v93 - v91) >> 3;
                  v96 = v95 + 1;
                  if ((unint64_t)(v95 + 1) >> 61)
                    sub_2394189F8();
                  if ((v92 - v91) >> 2 > v96)
                    v96 = (v92 - v91) >> 2;
                  if ((unint64_t)(v92 - v91) >= 0x7FFFFFFFFFFFFFF8)
                    v97 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v97 = v96;
                  if (v97)
                  {
                    if (v97 >> 61)
                      sub_239418A80();
                    v98 = operator new(8 * v97);
                  }
                  else
                  {
                    v98 = 0;
                  }
                  v99 = &v98[8 * v95];
                  *v99 = *(unsigned int *)(v90 + 16);
                  v94 = v99 + 1;
                  if (v93 != v91)
                  {
                    v100 = v93 - 8 - v91;
                    if (v100 < 0x168
                      || &v98[v93 - v91 - 8 - (v100 & 0xFFFFFFFFFFFFFFF8)] > &v98[v93 - v91 - 8]
                      || &v93[-(v100 & 0xFFFFFFFFFFFFFFF8) - 8] > v93 - 8
                      || (unint64_t)(v91 - v98) < 0x20)
                    {
                      v101 = v93;
                    }
                    else
                    {
                      v103 = (v100 >> 3) + 1;
                      v101 = &v93[-8 * (v103 & 0x3FFFFFFFFFFFFFFCLL)];
                      v104 = &v98[8 * v95 - 16];
                      v105 = v93 - 16;
                      v106 = v103 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v107 = *(_OWORD *)v105;
                        *(v104 - 1) = *((_OWORD *)v105 - 1);
                        *v104 = v107;
                        v104 -= 2;
                        v105 -= 32;
                        v106 -= 4;
                      }
                      while (v106);
                      v99 -= v103 & 0x3FFFFFFFFFFFFFFCLL;
                      if (v103 == (v103 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_177;
                    }
                    do
                    {
                      v102 = *((_QWORD *)v101 - 1);
                      v101 -= 8;
                      *--v99 = v102;
                    }
                    while (v101 != v91);
                  }
LABEL_177:
                  v92 = &v98[8 * v97];
                  v500[0] = v99;
                  v500[1] = v94;
                  *(_QWORD *)&v501 = v92;
                  if (v91)
                    operator delete(v91);
                  v91 = (char *)v99;
                }
                v500[1] = v94;
                v93 = (char *)v94;
LABEL_160:
                v90 = *(_QWORD *)v90;
                if (!v90)
                  break;
                continue;
              }
            }
            std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
            v108 = (double *)v446;
            v109 = v500[1];
            v110 = v500[0];
            v470[0] = 0;
            v470[1] = 0;
            *(_QWORD *)&v471 = 0;
            v111 = (char *)v500[1] - (char *)v500[0];
            if (v500[1] == v500[0])
            {
              v135 = -1.0;
              v110 = v500[1];
              v76 = (uint64_t)v442;
              v87 = v452;
            }
            else
            {
              if (v111 < 0)
                sub_2394189F8();
              v470[0] = operator new((char *)v500[1] - (char *)v500[0]);
              v470[1] = v470[0];
              *(_QWORD *)&v471 = (char *)v470[0] + 8 * (v111 >> 3);
              v112 = v110;
              v87 = v452;
              do
              {
                v114 = sub_239470FCC((uint64_t)v87, *v112);
                if (*((_BYTE *)v114 + 232) == 2)
                {
                  v115 = *v114;
                  v116 = (char *)v470[1];
                  if (v470[1] < (void *)v471)
                  {
                    *(_QWORD *)v470[1] = v115;
                    v113 = v116 + 8;
                  }
                  else
                  {
                    v117 = (char *)v470[0];
                    v118 = (char *)v470[1] - (char *)v470[0];
                    v119 = ((char *)v470[1] - (char *)v470[0]) >> 3;
                    v120 = v119 + 1;
                    if ((unint64_t)(v119 + 1) >> 61)
                      sub_2394189F8();
                    v121 = v471 - (unint64_t)v470[0];
                    if ((uint64_t)(v471 - (unint64_t)v470[0]) >> 2 > v120)
                      v120 = v121 >> 2;
                    if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
                      v122 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v122 = v120;
                    if (v122)
                    {
                      if (v122 >> 61)
                        sub_239418A80();
                      v123 = operator new(8 * v122);
                    }
                    else
                    {
                      v123 = 0;
                    }
                    v124 = (uint64_t *)&v123[8 * v119];
                    *v124 = v115;
                    v113 = v124 + 1;
                    if (v116 != v117)
                    {
                      v125 = v116 - 8 - v117;
                      if (v125 < 0x58)
                        goto LABEL_689;
                      if ((unint64_t)(v116 - &v123[v118]) < 0x20)
                        goto LABEL_689;
                      v126 = (v125 >> 3) + 1;
                      v127 = &v123[8 * v119 - 16];
                      v128 = v116 - 16;
                      v129 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v130 = *(_OWORD *)v128;
                        *(v127 - 1) = *((_OWORD *)v128 - 1);
                        *v127 = v130;
                        v127 -= 2;
                        v128 -= 32;
                        v129 -= 4;
                      }
                      while (v129);
                      v124 -= v126 & 0x3FFFFFFFFFFFFFFCLL;
                      v116 -= 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
                      if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_689:
                        do
                        {
                          v131 = *((_QWORD *)v116 - 1);
                          v116 -= 8;
                          *--v124 = v131;
                        }
                        while (v116 != v117);
                      }
                    }
                    v470[0] = v124;
                    v470[1] = v113;
                    *(_QWORD *)&v471 = &v123[8 * v122];
                    if (v117)
                      operator delete(v117);
                    v87 = v452;
                  }
                  v470[1] = v113;
                }
                ++v112;
              }
              while (v112 != v109);
              v132 = (double *)v470[1];
              if (v470[1] == v470[0])
              {
                v135 = -1.0;
                v76 = (uint64_t)v442;
                v108 = (double *)v446;
                if (v470[1])
                  goto LABEL_223;
              }
              else
              {
                sub_239470FCC((uint64_t)v87, v442);
                v108 = (double *)v446;
                v132 = (double *)v470[0];
                v133 = (unint64_t)(((char *)v470[1] - (char *)v470[0]) >> 3) >> 1;
                v134 = (double *)((char *)v470[0] + 8 * v133);
                if (v134 != v470[1])
                {
                  sub_2395F71EC((double *)v470[0], v134, (double *)v470[1]);
                  v132 = (double *)v470[0];
                }
                v135 = v132[v133];
                v76 = (uint64_t)v442;
LABEL_223:
                v470[1] = v132;
                operator delete(v132);
                v110 = v500[0];
              }
            }
            if (v110)
              operator delete(v110);
            if (v135 > *v108 * 0.1 && v135 < *v108 * 10.0)
            {
              *v108 = v135;
              v108[1] = v135;
            }
          }
          v490[1] = 0;
          v490[0] = 0;
          v491 = 0;
          sub_239C57DB8((uint64_t)v87, v76, (uint64_t)v490, 1);
          v137 = (uint64_t *)v490[0];
          v488[1] = 0;
          v488[0] = 0;
          v489 = 0;
          v486 = 0;
          v485 = 0;
          v487 = 0;
          v483 = 0;
          v482 = 0;
          v484 = 0;
          v480 = 0;
          v479 = 0;
          v481 = 0;
          v449 = (uint64_t *)v490[1];
          v138 = (char *)v490[1] - (char *)v490[0];
          v1 = v443;
          if (v490[1] != v490[0])
          {
            if (v138 < 0)
              sub_2394189F8();
            v139 = v138 >> 3;
            v488[0] = operator new((char *)v490[1] - (char *)v490[0]);
            v488[1] = v488[0];
            v489 = (char *)v488[0] + 8 * (v138 >> 3);
            v485 = operator new(v138);
            v486 = (char *)v485;
            v487 = (char *)v485 + 8 * (v138 >> 3);
            if ((unint64_t)v138 >= 0x5555555555555551)
              sub_2394189F8();
            v482 = operator new(24 * v139);
            v483 = (char *)v482;
            v484 = (char *)v482 + 24 * v139;
            while (1)
            {
              v142 = *v137;
              v143 = *v137;
              v144 = *v87;
              if (v143 >= (v87[1] - *v87) >> 6
                || (v143 != 0xFFFFFFFF ? (_ZF = *(_DWORD *)(v144 + (v143 << 6)) == -1) : (_ZF = 1), _ZF))
              {
                sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                sub_239A4475C();
                abort();
              }
              v146 = *(_QWORD *)(v144 + (v143 << 6) + 8);
              v147 = sub_2395D7CD8((uint64_t)v87, v146);
              v4 = v455;
              if (*((_BYTE *)v147 + 27) == 2 && !*(_BYTE *)(v144 + (v143 << 6) + 59))
                break;
LABEL_238:
              ++v137;
              v87 = v452;
              if (v137 == v449)
              {
                v205 = v488[1];
                v206 = v488[0];
                v76 = (uint64_t)v442;
                v1 = v443;
                goto LABEL_326;
              }
            }
            v148 = (char *)v488[1];
            if (v488[1] < v489)
            {
              *(_QWORD *)v488[1] = v146;
              v149 = v148 + 8;
LABEL_269:
              v488[1] = v149;
              v167 = v486;
              if (v486 >= v487)
              {
                v169 = (char *)v485;
                v170 = v486 - (_BYTE *)v485;
                v171 = (v486 - (_BYTE *)v485) >> 3;
                v172 = v171 + 1;
                if ((unint64_t)(v171 + 1) >> 61)
LABEL_671:
                  sub_2394189F8();
                v173 = v487 - (_BYTE *)v485;
                if ((v487 - (_BYTE *)v485) >> 2 > v172)
                  v172 = v173 >> 2;
                if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
                  v174 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v174 = v172;
                if (v174)
                {
                  if (v174 >> 61)
                    goto LABEL_666;
                  v175 = v174;
                  v176 = (char *)operator new(8 * v174);
                  v174 = v175;
                }
                else
                {
                  v176 = 0;
                }
                v177 = &v176[8 * v171];
                *(_QWORD *)v177 = v142;
                v168 = v177 + 8;
                if (v167 != v169)
                {
                  v178 = v167 - 8 - v169;
                  if (v178 < 0x58)
                    goto LABEL_690;
                  if ((unint64_t)(v167 - &v176[v170]) < 0x20)
                    goto LABEL_690;
                  v179 = (v178 >> 3) + 1;
                  v180 = &v176[8 * v171 - 16];
                  v181 = v167 - 16;
                  v182 = v179 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v183 = *(_OWORD *)v181;
                    *((_OWORD *)v180 - 1) = *((_OWORD *)v181 - 1);
                    *(_OWORD *)v180 = v183;
                    v180 -= 32;
                    v181 -= 32;
                    v182 -= 4;
                  }
                  while (v182);
                  v177 -= 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
                  v167 -= 8 * (v179 & 0x3FFFFFFFFFFFFFFCLL);
                  if (v179 != (v179 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_690:
                    do
                    {
                      v184 = *((_QWORD *)v167 - 1);
                      v167 -= 8;
                      *((_QWORD *)v177 - 1) = v184;
                      v177 -= 8;
                    }
                    while (v167 != v169);
                  }
                }
                v485 = v177;
                v486 = v168;
                v487 = &v176[8 * v174];
                if (v169)
                  operator delete(v169);
                v4 = v455;
              }
              else
              {
                *(_QWORD *)v486 = v142;
                v168 = v167 + 8;
              }
              v486 = v168;
              *(float64x2_t *)v500 = vmlaq_f64(vdivq_f64(vnegq_f64(*((float64x2_t *)v446 + 1)), *(float64x2_t *)v446), vdivq_f64(v437, *(float64x2_t *)v446), *(float64x2_t *)(v144 + (v143 << 6) + 24));
              sub_239465308((unsigned __int8 *)v446 + 32, (double *)v500, 5, (double *)v470);
              v185 = v480;
              if (v480 >= v481)
              {
                v187 = (char *)v479;
                v188 = (v480 - (_BYTE *)v479) >> 4;
                v189 = v188 + 1;
                if ((unint64_t)(v188 + 1) >> 60)
                  sub_2394189F8();
                v190 = v481 - (_BYTE *)v479;
                if ((v481 - (_BYTE *)v479) >> 3 > v189)
                  v189 = v190 >> 3;
                if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0)
                  v191 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v191 = v189;
                if (v191)
                {
                  if (v191 >> 60)
                    sub_239418A80();
                  v192 = (char *)operator new(16 * v191);
                }
                else
                {
                  v192 = 0;
                }
                v193 = &v192[16 * v188];
                *(_OWORD *)v193 = *(_OWORD *)v470;
                v194 = v193;
                if (v185 != v187)
                {
                  do
                  {
                    *((_OWORD *)v194 - 1) = *((_OWORD *)v185 - 1);
                    v194 -= 16;
                    v185 -= 16;
                  }
                  while (v185 != v187);
                  v185 = (char *)v479;
                }
                v186 = v193 + 16;
                v479 = v194;
                v480 = v193 + 16;
                v481 = &v192[16 * v191];
                if (v185)
                  operator delete(v185);
              }
              else
              {
                *(_OWORD *)v480 = *(_OWORD *)v470;
                v186 = v185 + 16;
              }
              v480 = v186;
              v195 = v483;
              if (v483 < v484)
              {
                v140 = *(_OWORD *)v147;
                *((_QWORD *)v483 + 2) = v147[2];
                *v195 = v140;
                v141 = (char *)v195 + 24;
              }
              else
              {
                v196 = v482;
                v197 = 0xAAAAAAAAAAAAAAABLL * ((v483 - (_BYTE *)v482) >> 3);
                v198 = v197 + 1;
                if (v197 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_2394189F8();
                if (0x5555555555555556 * ((v484 - (_BYTE *)v482) >> 3) > v198)
                  v198 = 0x5555555555555556 * ((v484 - (_BYTE *)v482) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v484 - (_BYTE *)v482) >> 3) >= 0x555555555555555)
                  v199 = 0xAAAAAAAAAAAAAAALL;
                else
                  v199 = v198;
                if (v199)
                {
                  if (v199 > 0xAAAAAAAAAAAAAAALL)
LABEL_666:
                    sub_239418A80();
                  v200 = (char *)operator new(24 * v199);
                }
                else
                {
                  v200 = 0;
                }
                v201 = *(_OWORD *)v147;
                v202 = &v200[24 * v197];
                *((_QWORD *)v202 + 2) = v147[2];
                *(_OWORD *)v202 = v201;
                v203 = v202;
                if (v195 != v196)
                {
                  do
                  {
                    v204 = *(_OWORD *)((char *)v195 - 24);
                    *((_QWORD *)v203 - 1) = *((_QWORD *)v195 - 1);
                    *(_OWORD *)(v203 - 24) = v204;
                    v203 -= 24;
                    v195 = (_OWORD *)((char *)v195 - 24);
                  }
                  while (v195 != v196);
                  v195 = v482;
                }
                v4 = v455;
                v141 = v202 + 24;
                v482 = v203;
                v483 = v202 + 24;
                v484 = &v200[24 * v199];
                if (v195)
                  operator delete(v195);
              }
              v483 = v141;
              goto LABEL_238;
            }
            v150 = (char *)v488[0];
            v151 = (char *)v488[1] - (char *)v488[0];
            v152 = ((char *)v488[1] - (char *)v488[0]) >> 3;
            v153 = v152 + 1;
            if ((unint64_t)(v152 + 1) >> 61)
              goto LABEL_671;
            v154 = v489 - (char *)v488[0];
            if ((v489 - (char *)v488[0]) >> 2 > v153)
              v153 = v154 >> 2;
            if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
              v155 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v155 = v153;
            if (v155)
            {
              __pb = (void *)((char *)v488[1] - (char *)v488[0]);
              if (v155 >> 61)
                goto LABEL_666;
              v156 = ((char *)v488[1] - (char *)v488[0]) >> 3;
              v157 = v155;
              v158 = operator new(8 * v155);
              v155 = v157;
              v152 = v156;
              v151 = (int64_t)__pb;
            }
            else
            {
              v158 = 0;
            }
            v159 = &v158[8 * v152];
            *v159 = v146;
            v149 = v159 + 1;
            if (v148 == v150)
            {
              v4 = v455;
            }
            else
            {
              v160 = v148 - 8 - v150;
              if (v160 < 0x58)
              {
                v4 = v455;
                goto LABEL_266;
              }
              v4 = v455;
              if ((unint64_t)(v148 - &v158[v151]) < 0x20)
                goto LABEL_691;
              v161 = (v160 >> 3) + 1;
              v162 = &v158[8 * v152 - 16];
              v163 = v148 - 16;
              v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v165 = *(_OWORD *)v163;
                *(v162 - 1) = *((_OWORD *)v163 - 1);
                *v162 = v165;
                v162 -= 2;
                v163 -= 32;
                v164 -= 4;
              }
              while (v164);
              v159 -= v161 & 0x3FFFFFFFFFFFFFFCLL;
              v148 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
              if (v161 != (v161 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_691:
                do
                {
LABEL_266:
                  v166 = *((_QWORD *)v148 - 1);
                  v148 -= 8;
                  *--v159 = v166;
                }
                while (v148 != v150);
              }
            }
            v488[0] = v159;
            v488[1] = v149;
            v489 = &v158[8 * v155];
            if (v150)
              operator delete(v150);
            goto LABEL_269;
          }
          v206 = 0;
          v205 = 0;
LABEL_326:
          if ((unint64_t)(v205 - v206) < 0x30)
          {
            for (i = *(_QWORD *)(v1 + 1944); i != v454; i = *(_QWORD *)(i + 8))
            {
              if (*(_QWORD *)(i + 16) == v76)
              {
                if (i != v454)
                {
                  sub_239BFD31C(v87, v76, 3uLL);
                  v226 = 0;
                  goto LABEL_384;
                }
                break;
              }
            }
            v227 = operator new(0x18uLL);
            v226 = 0;
            v228 = *(_QWORD *)(v1 + 1936);
            v227[1] = v454;
            v227[2] = v442;
            *v227 = v228;
            *(_QWORD *)(v228 + 8) = v227;
            *(_QWORD *)(v1 + 1936) = v227;
            ++*(_QWORD *)(v1 + 1952);
            goto LABEL_384;
          }
          memset(v478, 0, sizeof(v478));
          v474 = xmmword_239F13AC0;
          v475 = unk_239F13AD0;
          v476 = xmmword_239F13AE0;
          v477 = unk_239F13AF0;
          *(_OWORD *)v470 = xmmword_239F13A80;
          v471 = *(_OWORD *)algn_239F13A90;
          v472 = xmmword_239F13AA0;
          v473 = xmmword_239F13AB0;
          *(_OWORD *)v466 = xmmword_239F0C3C0;
          v467 = 5;
          v469 = xmmword_239F0BF20;
          v468 = xmmword_239EC67E0;
          v208 = *(double *)(v432 + 48);
          v209 = *((_OWORD *)v446 + 1);
          *(_OWORD *)v500 = *(_OWORD *)v446;
          v501 = v209;
          LOBYTE(v502[0]) = *((_BYTE *)v446 + 32);
          v210 = *((unsigned int *)v446 + 14);
          v211 = (8 * v210 + 31) & 0xFFFFFFFE0;
          v502[1] = 0;
          v503 = v211 >> 3;
          memptr[0] = 0;
          malloc_type_posix_memalign(memptr, 0x20uLL, v211, 0x100BBD03uLL);
          v502[1] = memptr[0];
          if (!memptr[0])
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v428 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v428, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          if ((_DWORD)v210)
            memcpy(memptr[0], (const void *)v446[5], 8 * v210);
          v504 = *((_DWORD *)v446 + 14);
          v212 = *((_OWORD *)v446 + 9);
          v509 = *((_OWORD *)v446 + 8);
          v510 = v212;
          v213 = *((_OWORD *)v446 + 11);
          v511 = *((_OWORD *)v446 + 10);
          v512 = v213;
          v214 = *((_OWORD *)v446 + 5);
          v505 = *((_OWORD *)v446 + 4);
          v506 = v214;
          v215 = *((_OWORD *)v446 + 7);
          v507 = *((_OWORD *)v446 + 6);
          v508 = v215;
          v456 = 0;
          v457[0] = 0uLL;
          v456 = operator new(0xC0uLL);
          *(_QWORD *)&v457[0] = v456;
          *((_QWORD *)&v457[0] + 1) = (char *)v456 + 192;
          v216 = (double *)sub_239C02C54((uint64_t)v457 + 8, (uint64_t)v500, (uint64_t)v513, (uint64_t)v456);
          *(_QWORD *)&v457[0] = v216;
          v217 = (double *)v456;
          v218 = (char *)v216 - (_BYTE *)v456;
          if (v216 == v456)
          {
            *(double *)&v468 = v208;
            goto LABEL_349;
          }
          v219 = 0xAAAAAAAAAAAAAAABLL * (v218 >> 6);
          v220 = v218 - 192;
          v221 = 0.0;
          v222 = (double *)v456;
          if (v220 > 0xBF)
          {
            v223 = v220 / 0xC0 + 1;
            v224 = (double *)v456;
            v225 = v223 & 0x3FFFFFFFFFFFFFELL;
            do
            {
              v221 = v221 + *v224 + v224[24];
              v224 += 48;
              v225 -= 2;
            }
            while (v225);
            if (v223 == (v223 & 0x3FFFFFFFFFFFFFELL))
            {
              *(double *)&v468 = v208 * (double)v219 / v221;
              goto LABEL_347;
            }
            v222 = (double *)((char *)v456 + 192 * (v223 & 0x3FFFFFFFFFFFFFELL));
          }
          do
          {
            v229 = *v222;
            v222 += 24;
            v221 = v221 + v229;
          }
          while (v222 != v216);
          *(double *)&v468 = v208 * (double)v219 / v221;
          if (v456)
          {
            do
            {
LABEL_347:
              v230 = v216 - 24;
              free(*((void **)v216 - 19));
              v216 = v230;
            }
            while (v230 != v217);
            v216 = (double *)v456;
LABEL_349:
            *(_QWORD *)&v457[0] = v217;
            operator delete(v216);
          }
          free(v502[1]);
          v1 = v443;
          if ((sub_239C02D94(&v482, &v479, (__int128 *)v470, (uint64_t)v478, (uint64_t)v466) & 1) == 0)
          {
            v241 = *(_QWORD *)(v443 + 1944);
            if (v241 == v454)
              goto LABEL_371;
            while (*(void **)(v241 + 16) != v442)
            {
              v241 = *(_QWORD *)(v241 + 8);
              if (v241 == v454)
                goto LABEL_371;
            }
            if (v241 == v454)
            {
LABEL_371:
              v246 = operator new(0x18uLL);
              v226 = 0;
              v247 = *(_QWORD *)(v443 + 1936);
              v246[1] = v454;
              v246[2] = v442;
              *v246 = v247;
              *(_QWORD *)(v247 + 8) = v246;
              *(_QWORD *)(v443 + 1936) = v246;
              ++*(_QWORD *)(v443 + 1952);
              v245 = v478[0];
              if (!v478[0])
                goto LABEL_384;
            }
            else
            {
              sub_239BFD31C(v87, (uint64_t)v442, 3uLL);
              v226 = 0;
              v245 = v478[0];
              if (!v478[0])
                goto LABEL_384;
            }
            goto LABEL_383;
          }
          v231 = v475;
          *((_OWORD *)v446 + 8) = v474;
          *((_OWORD *)v446 + 9) = v231;
          v232 = v477;
          *((_OWORD *)v446 + 10) = v476;
          *((_OWORD *)v446 + 11) = v232;
          v233 = v471;
          *((_OWORD *)v446 + 4) = *(_OWORD *)v470;
          *((_OWORD *)v446 + 5) = v233;
          v234 = v473;
          *((_OWORD *)v446 + 6) = v472;
          *((float64x2_t *)v446 + 7) = v234;
          *((_BYTE *)v446 + 232) = 2;
          v235 = v488[1];
          v236 = v488[0];
          v465 = 0;
          v237 = *(_QWORD *)(v432 + 8);
          if (!v237)
            LODWORD(v237) = std::thread::hardware_concurrency();
          sub_2397A15E0(&v464);
          sub_2397A2A50((uint64_t)v500, v237, 0);
          v499 = 0;
          v238 = (void **)operator new(0x50uLL);
          *v238 = &off_250AFC090;
          v238[1] = &v464;
          v238[2] = v488;
          v238[3] = &v465;
          v238[4] = (void *)v432;
          v238[5] = v446;
          v238[6] = v87;
          v238[7] = v478;
          v238[8] = &v482;
          v238[9] = &v485;
          v499 = v238;
          sub_2397A376C((unint64_t *)v500, (v235 - v236) >> 3, &v496, 0);
          v239 = v499;
          if (v499 == &v496)
          {
            v239 = &v496;
            v240 = 4;
LABEL_361:
            (*((void (**)(void))*v239 + v240))();
          }
          else if (v499)
          {
            v240 = 5;
            goto LABEL_361;
          }
          v226 = v465 > 5;
          if (v465 > 5)
          {
            v242 = operator new(0x18uLL);
            v1 = v443;
            v243 = *(_QWORD *)(v443 + 1912);
            v242[1] = v430;
            v242[2] = v442;
            *v242 = v243;
            *(_QWORD *)(v243 + 8) = v242;
            *(_QWORD *)(v443 + 1912) = v242;
            ++*(_QWORD *)(v443 + 1928);
            *(_QWORD *)(v443 + 1904) = v442;
          }
          else
          {
            for (j = *(_QWORD *)(v443 + 1944); j != v454; j = *(_QWORD *)(j + 8))
            {
              if (*(void **)(j + 16) == v442)
              {
                if (j != v454)
                {
                  sub_239BFD31C(v87, (uint64_t)v442, 3uLL);
                  goto LABEL_376;
                }
                break;
              }
            }
            v248 = operator new(0x18uLL);
            v249 = *(_QWORD *)(v443 + 1936);
            v248[1] = v454;
            v248[2] = v442;
            *v248 = v249;
            *(_QWORD *)(v249 + 8) = v248;
            *(_QWORD *)(v443 + 1936) = v248;
            ++*(_QWORD *)(v443 + 1952);
LABEL_376:
            *(_OWORD *)memptr = 0u;
            *(_OWORD *)v462 = 0u;
            v463 = 1065353216;
            sub_239C6C29C(v87, v442, memptr);
            v250 = (char *)v462[0];
            if (v462[0])
            {
              do
              {
                LODWORD(v456) = *((_DWORD *)v250 + 4);
                v457[0] = *(_OWORD *)(v250 + 24);
                v457[1] = *(_OWORD *)(v250 + 40);
                v457[2] = *(_OWORD *)(v250 + 56);
                v459 = v250[74];
                v458 = *((_WORD *)v250 + 36);
                v460 = *(_WORD *)(v250 + 75);
                LOBYTE(v460) = 0;
                sub_239C6D330(v87, (uint64_t *)v457);
                v250 = *(char **)v250;
              }
              while (v250);
              v251 = v462[0];
              if (v462[0])
              {
                do
                {
                  v252 = (_QWORD *)*v251;
                  operator delete(v251);
                  v251 = v252;
                }
                while (v252);
              }
            }
            v253 = memptr[0];
            memptr[0] = 0;
            v1 = v443;
            if (v253)
              operator delete(v253);
          }
          sub_2397A2E14(v500);
          nullsub_4(&v464);
          v245 = v478[0];
          if (v478[0])
LABEL_383:
            operator delete(v245);
LABEL_384:
          if (v479)
          {
            v480 = (char *)v479;
            operator delete(v479);
          }
          if (v482)
          {
            v483 = (char *)v482;
            operator delete(v482);
          }
          if (v485)
          {
            v486 = (char *)v485;
            operator delete(v485);
          }
          if (v488[0])
          {
            v488[1] = v488[0];
            operator delete(v488[0]);
          }
          if (v490[0])
          {
            v490[1] = v490[0];
            operator delete(v490[0]);
          }
          if (!v226)
            continue;
          break;
        }
        v254 = *(uint64_t **)v1;
        __pc = *(char **)(v1 + 32);
        v456 = 0;
        v457[0] = 0uLL;
        sub_239C57DB8((uint64_t)v254, v442, (uint64_t)&v456, 0);
        v466[0] = 0;
        v466[1] = 0;
        v467 = 0;
        memptr[0] = 0;
        memptr[1] = 0;
        v462[0] = 0;
        v497 = 0;
        v496 = 0;
        v498 = 0;
        *(_OWORD *)v470 = 0u;
        v471 = 0u;
        LODWORD(v472) = 1065353216;
        v255 = *(_QWORD *)&v457[0] - (_QWORD)v456;
        v256 = (uint64_t)(*(_QWORD *)&v457[0] - (_QWORD)v456) >> 3;
        if (*(void **)&v457[0] != v456)
        {
          if ((v255 & 0x8000000000000000) != 0)
            sub_2394189F8();
          v466[0] = operator new(v255);
          v466[1] = v466[0];
          v467 = (unint64_t)v466[0] + 8 * v256;
        }
        sub_239C6DBFC((uint64_t)memptr, v256);
        sub_239C6B2A0((uint64_t)&v496, v256);
        v258 = (unint64_t *)(__pc + 480);
        if (!__pc[488])
          v258 = (unint64_t *)(__pc + 32);
        v439 = *v258;
        v260 = (unsigned int *)v456;
        v259 = *(unsigned int **)&v457[0];
        v447 = *(unsigned int **)&v457[0];
        while (2)
        {
          if (v260 != v259)
          {
            v261 = *v260;
            v262 = *v254;
            if (v261 >= (v254[1] - *v254) >> 6
              || (v261 != 0xFFFFFFFF ? (v263 = *(_DWORD *)(v262 + (v261 << 6)) == -1) : (v263 = 1), v263))
            {
              sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
              sub_239A4475C();
              abort();
            }
            v264 = v262 + (v261 << 6);
            v265 = *(_QWORD *)(v264 + 8);
            if (!(*(unsigned __int8 *)(v264 + 59) | *((unsigned __int8 *)sub_2395D7CD8((uint64_t)v254, v265) + 27)))
            {
              v450 = v265;
              v453 = v260;
              v500[1] = 0;
              v500[0] = 0;
              *(_QWORD *)&v501 = 0;
              sub_239C580BC((uint64_t)v254, v265, (uint64_t)v500);
              v490[1] = 0;
              v490[0] = 0;
              v491 = 0;
              v488[1] = 0;
              v488[0] = 0;
              v489 = 0;
              v266 = (unsigned int *)v500[1];
              v267 = (unsigned int *)v500[0];
              v268 = (char *)v500[1] - (char *)v500[0];
              if (v500[1] != v500[0])
              {
                if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFF9)
                  sub_2394189F8();
                v490[0] = operator new(2 * v268);
                v490[1] = v490[0];
                v491 = (char *)v490[0] + 16 * (v268 >> 3);
                v269 = (char *)operator new(v268);
                v488[0] = v269;
                v488[1] = v269;
                v489 = &v269[8 * (v268 >> 3)];
                while (1)
                {
                  v270 = *v267;
                  v271 = *v254;
                  if (v270 >= (v254[1] - *v254) >> 6
                    || (v270 != 0xFFFFFFFF ? (v272 = *(_DWORD *)(v271 + (v270 << 6)) == -1) : (v272 = 1), v272))
                  {
                    sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
                  v273 = v254[10];
                  if (!v273)
                    goto LABEL_647;
                  v274 = *(_QWORD *)(v271 + (v270 << 6) + 16);
                  v275 = (uint8x8_t)vcnt_s8((int8x8_t)v273);
                  v275.i16[0] = vaddlv_u8(v275);
                  if (v275.u32[0] > 1uLL)
                  {
                    v276 = *(_QWORD *)(v271 + (v270 << 6) + 16);
                    if (v273 <= v274)
                      v276 = v274 % v273;
                  }
                  else
                  {
                    v276 = ((_DWORD)v273 - 1) & v274;
                  }
                  v277 = *(uint64_t ***)(v254[9] + 8 * v276);
                  if (!v277 || (v278 = *v277) == 0)
                  {
LABEL_647:
                    sub_239A444D4((uint64_t)"unknown file", 788, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
                  if (v275.u32[0] < 2uLL)
                  {
                    v279 = v273 - 1;
                    while (1)
                    {
                      v281 = v278[1];
                      if (v281 == v274)
                      {
                        if (*((_DWORD *)v278 + 4) == (_DWORD)v274)
                          goto LABEL_440;
                      }
                      else if ((v281 & v279) != v276)
                      {
                        goto LABEL_647;
                      }
                      v278 = (uint64_t *)*v278;
                      if (!v278)
                        goto LABEL_647;
                    }
                  }
                  while (1)
                  {
                    v280 = v278[1];
                    if (v280 == v274)
                      break;
                    if (v280 >= v273)
                      v280 %= v273;
                    if (v280 != v276)
                      goto LABEL_647;
LABEL_430:
                    v278 = (uint64_t *)*v278;
                    if (!v278)
                      goto LABEL_647;
                  }
                  if (*((_DWORD *)v278 + 4) != (_DWORD)v274)
                    goto LABEL_430;
LABEL_440:
                  if (*((_BYTE *)v278 + 256) == 2)
                  {
                    v282 = v271 + (v270 << 6);
                    if (!*(_BYTE *)(v282 + 59))
                    {
                      v283 = (_OWORD *)(v282 + 24);
                      v284 = (char *)v490[1];
                      if (v490[1] < v491)
                      {
                        *(_OWORD *)v490[1] = *v283;
                        v285 = v284 + 16;
                        goto LABEL_459;
                      }
                      v286 = (char *)v490[0];
                      v287 = ((char *)v490[1] - (char *)v490[0]) >> 4;
                      v288 = v287 + 1;
                      if ((unint64_t)(v287 + 1) >> 60)
                        sub_2394189F8();
                      v289 = v491 - (char *)v490[0];
                      if ((v491 - (char *)v490[0]) >> 3 > v288)
                        v288 = v289 >> 3;
                      if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFF0)
                        v290 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v290 = v288;
                      if (!v290)
                      {
                        v291 = 0;
                        goto LABEL_454;
                      }
                      if (v290 >> 60)
                        goto LABEL_663;
                      v291 = (char *)operator new(16 * v290);
                      v4 = v455;
LABEL_454:
                      v292 = &v291[16 * v287];
                      *(_OWORD *)v292 = *v283;
                      v293 = v292;
                      if (v284 != v286)
                      {
                        do
                        {
                          *((_OWORD *)v293 - 1) = *((_OWORD *)v284 - 1);
                          v293 -= 16;
                          v284 -= 16;
                        }
                        while (v284 != v286);
                        v284 = (char *)v490[0];
                      }
                      v285 = v292 + 16;
                      v490[0] = v293;
                      v490[1] = v292 + 16;
                      v491 = &v291[16 * v290];
                      if (v284)
                        operator delete(v284);
LABEL_459:
                      v490[1] = v285;
                      v294 = (char *)v488[1];
                      if (v488[1] < v489)
                      {
                        *(_QWORD *)v488[1] = v274;
                        v269 = v294 + 8;
                        goto LABEL_413;
                      }
                      v295 = (char *)v488[0];
                      v296 = (char *)v488[1] - (char *)v488[0];
                      v297 = ((char *)v488[1] - (char *)v488[0]) >> 3;
                      v298 = v297 + 1;
                      if ((unint64_t)(v297 + 1) >> 61)
                        sub_2394189F8();
                      v299 = v489 - (char *)v488[0];
                      if ((v489 - (char *)v488[0]) >> 2 > v298)
                        v298 = v299 >> 2;
                      if ((unint64_t)v299 >= 0x7FFFFFFFFFFFFFF8)
                        v300 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v300 = v298;
                      if (!v300)
                      {
                        v301 = 0;
                        goto LABEL_470;
                      }
                      if (v300 >> 61)
LABEL_663:
                        sub_239418A80();
                      v301 = operator new(8 * v300);
LABEL_470:
                      v302 = &v301[8 * v297];
                      *(_QWORD *)v302 = v274;
                      v269 = v302 + 8;
                      if (v294 != v295)
                      {
                        v303 = v294 - 8 - v295;
                        if (v303 < 0x58)
                          goto LABEL_692;
                        if ((unint64_t)(v294 - &v301[v296]) < 0x20)
                          goto LABEL_692;
                        v304 = (v303 >> 3) + 1;
                        v305 = &v301[8 * v297 - 16];
                        v306 = v294 - 16;
                        v307 = v304 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v308 = *(_OWORD *)v306;
                          *(v305 - 1) = *((_OWORD *)v306 - 1);
                          *v305 = v308;
                          v305 -= 2;
                          v306 -= 32;
                          v307 -= 4;
                        }
                        while (v307);
                        v302 -= 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
                        v294 -= 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
                        if (v304 != (v304 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_692:
                          do
                          {
                            v309 = *((_QWORD *)v294 - 1);
                            v294 -= 8;
                            *((_QWORD *)v302 - 1) = v309;
                            v302 -= 8;
                          }
                          while (v294 != v295);
                        }
                      }
                      v488[0] = v302;
                      v488[1] = v269;
                      v489 = &v301[8 * v300];
                      if (v295)
                        operator delete(v295);
                      v4 = v455;
LABEL_413:
                      v488[1] = v269;
                    }
                  }
                  v267 += 2;
                  if (v267 == v266)
                  {
                    v310 = v488[0];
                    goto LABEL_484;
                  }
                }
              }
              v310 = 0;
              v269 = 0;
LABEL_484:
              v260 = v453;
              if (v439 <= (v269 - v310) >> 3)
              {
                v311 = (char *)v466[1];
                if (v466[1] >= (void *)v467)
                {
                  v313 = (char *)v466[0];
                  v314 = (char *)v466[1] - (char *)v466[0];
                  v315 = ((char *)v466[1] - (char *)v466[0]) >> 3;
                  v316 = v315 + 1;
                  if ((unint64_t)(v315 + 1) >> 61)
                    sub_2394189F8();
                  v317 = v467 - (unint64_t)v466[0];
                  if ((uint64_t)(v467 - (unint64_t)v466[0]) >> 2 > v316)
                    v316 = v317 >> 2;
                  if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF8)
                    v318 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v318 = v316;
                  if (v318)
                  {
                    if (v318 >> 61)
                      sub_239418A80();
                    v319 = operator new(8 * v318);
                  }
                  else
                  {
                    v319 = 0;
                  }
                  v320 = &v319[8 * v315];
                  *v320 = v450;
                  v312 = v320 + 1;
                  if (v311 != v313)
                  {
                    v321 = v311 - 8 - v313;
                    if (v321 < 0x58)
                      goto LABEL_693;
                    if ((unint64_t)(v311 - &v319[v314]) < 0x20)
                      goto LABEL_693;
                    v322 = (v321 >> 3) + 1;
                    v323 = &v319[8 * v315 - 16];
                    v324 = v311 - 16;
                    v325 = v322 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v326 = *(_OWORD *)v324;
                      *(v323 - 1) = *((_OWORD *)v324 - 1);
                      *v323 = v326;
                      v323 -= 2;
                      v324 -= 32;
                      v325 -= 4;
                    }
                    while (v325);
                    v320 -= v322 & 0x3FFFFFFFFFFFFFFCLL;
                    v311 -= 8 * (v322 & 0x3FFFFFFFFFFFFFFCLL);
                    if (v322 != (v322 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_693:
                      do
                      {
                        v327 = *((_QWORD *)v311 - 1);
                        v311 -= 8;
                        *--v320 = v327;
                      }
                      while (v311 != v313);
                    }
                  }
                  v466[0] = v320;
                  v466[1] = v312;
                  v467 = (unint64_t)&v319[8 * v318];
                  if (v313)
                    operator delete(v313);
                }
                else
                {
                  *(_QWORD *)v466[1] = v450;
                  v312 = v311 + 8;
                }
                v466[1] = v312;
                v328 = (char *)memptr[1];
                if (memptr[1] >= v462[0])
                {
                  v329 = sub_239C6DD1C((char **)memptr, (uint64_t)v490);
                }
                else
                {
                  *(_QWORD *)memptr[1] = 0;
                  *((_QWORD *)v328 + 1) = 0;
                  *((_QWORD *)v328 + 2) = 0;
                  *(_OWORD *)v328 = *(_OWORD *)v490;
                  *((_QWORD *)v328 + 2) = v491;
                  v490[1] = 0;
                  v490[0] = 0;
                  v491 = 0;
                  v329 = v328 + 24;
                }
                memptr[1] = v329;
                v330 = (void **)v488[0];
                v331 = (void **)v488[1];
                while (v330 != v331)
                {
                  v482 = 0;
                  v482 = *v330;
                  v338 = sub_239BF5CF4((uint64_t)v254, (unint64_t)v482);
                  v485 = &v482;
                  v339 = sub_23955BDE0((uint64_t)v470, (uint64_t *)&v482, (uint64_t)&unk_239EC6E98, (_QWORD **)&v485);
                  v340 = v339;
                  v341 = *(_OWORD *)v338;
                  *(_OWORD *)(v339 + 5) = *((_OWORD *)v338 + 1);
                  *(_OWORD *)(v339 + 3) = v341;
                  *((_BYTE *)v339 + 56) = *((_BYTE *)v338 + 32);
                  if (v339 + 3 != v338)
                  {
                    v342 = (void **)(v339 + 8);
                    v343 = *((unsigned int *)v338 + 14);
                    if ((_DWORD)v343)
                    {
                      v344 = (void *)v339[8];
                      v345 = 8 * v343;
                      if (v340[9] < v343)
                      {
                        free(v344);
                        v346 = (v345 + 31) & 0xFFFFFFFE0;
                        v340[8] = 0;
                        v340[9] = v346 >> 3;
                        v485 = 0;
                        malloc_type_posix_memalign(&v485, 0x20uLL, v346, 0x100BBD03uLL);
                        v344 = v485;
                        *v342 = v485;
                        if (!v344)
                        {
                          v425 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                          v426 = std::bad_alloc::bad_alloc(v425);
                          __cxa_throw(v426, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                        }
                      }
                      memcpy(v344, (const void *)v338[5], v345);
                    }
                    else
                    {
                      free(*v342);
                      *v342 = 0;
                      v340[9] = 0;
                    }
                    *((_DWORD *)v340 + 20) = *((_DWORD *)v338 + 14);
                  }
                  v332 = *((_OWORD *)v338 + 4);
                  v333 = *((_OWORD *)v338 + 5);
                  v334 = *((_OWORD *)v338 + 6);
                  *(_OWORD *)(v340 + 17) = *((_OWORD *)v338 + 7);
                  *(_OWORD *)(v340 + 15) = v334;
                  *(_OWORD *)(v340 + 13) = v333;
                  *(_OWORD *)(v340 + 11) = v332;
                  v335 = *((_OWORD *)v338 + 8);
                  v336 = *((_OWORD *)v338 + 9);
                  v337 = *((_OWORD *)v338 + 10);
                  *(_OWORD *)(v340 + 25) = *((_OWORD *)v338 + 11);
                  *(_OWORD *)(v340 + 23) = v337;
                  *(_OWORD *)(v340 + 21) = v336;
                  *(_OWORD *)(v340 + 19) = v335;
                  ++v330;
                }
                v347 = v497;
                if ((unint64_t)v497 >= v498)
                {
                  v348 = sub_239C52088((char **)&v496, (uint64_t)v488);
                  v310 = v488[0];
                }
                else
                {
                  v310 = 0;
                  *(_QWORD *)v497 = 0;
                  *((_QWORD *)v347 + 1) = 0;
                  *((_QWORD *)v347 + 2) = 0;
                  *(_OWORD *)v347 = *(_OWORD *)v488;
                  *((_QWORD *)v347 + 2) = v489;
                  v488[1] = 0;
                  v488[0] = 0;
                  v489 = 0;
                  v348 = v347 + 24;
                }
                v497 = v348;
                v260 = v453;
              }
              if (v310)
              {
                v488[1] = v310;
                operator delete(v310);
              }
              if (v490[0])
              {
                v490[1] = v490[0];
                operator delete(v490[0]);
              }
              if (v500[0])
              {
                v500[1] = v500[0];
                operator delete(v500[0]);
              }
            }
            v260 += 2;
            v259 = v447;
            continue;
          }
          break;
        }
        v349 = (char *)v466[1] - (char *)v466[0];
        if (v466[1] == v466[0])
        {
          v352 = 1;
          v1 = v443;
        }
        else
        {
          v490[1] = 0;
          v490[0] = 0;
          v491 = 0;
          v488[1] = 0;
          v488[0] = 0;
          v489 = 0;
          v486 = 0;
          v485 = 0;
          v487 = 0;
          v350 = *(_OWORD *)(__pc + 200);
          v351 = *(_OWORD *)(__pc + 184);
          *(_OWORD *)v500 = *(_OWORD *)(__pc + 168);
          v501 = v351;
          *(_OWORD *)v502 = v350;
          v503 = *((_QWORD *)__pc + 27);
          v502[1] = (void *)v439;
          v352 = sub_239E1C19C(&v496, memptr, (uint64_t)v470, (uint64_t)v500, (uint64_t)v490, (uint64_t)v488, &v485, v257, 0, 0);
          if (v352)
          {
            v353 = 0;
            if ((unint64_t)(v349 >> 3) <= 1)
              v354 = 1;
            else
              v354 = v349 >> 3;
            do
            {
              v355 = *((_QWORD *)v466[0] + v353);
              v356 = sub_2395D7CD8((uint64_t)v254, v355);
              v357 = *((unsigned __int8 *)v488[0] + v353);
              if (v357 == 1)
              {
                *((_BYTE *)v356 + 27) = 1;
                v483 = 0;
                v482 = 0;
                v484 = 0;
                sub_239C580BC((uint64_t)v254, v355, (uint64_t)&v482);
                v365 = (unsigned int *)v482;
                v366 = (unsigned int *)v483;
                if (v482 != v483)
                {
                  do
                  {
                    v367 = *v365;
                    v368 = *v254;
                    if (v367 >= (v254[1] - *v254) >> 6
                      || (v367 != 0xFFFFFFFF ? (v369 = *(_DWORD *)(v368 + (v367 << 6)) == -1) : (v369 = 1), v369))
                    {
                      sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                      sub_239A4475C();
                      abort();
                    }
                    *(_BYTE *)(v368 + (v367 << 6) + 59) = 1;
                    v365 += 2;
                  }
                  while (v365 != v366);
                  v365 = (unsigned int *)v482;
                }
                if (v365)
                {
                  v483 = (char *)v365;
                  operator delete(v365);
                }
              }
              else if (v357 == 2)
              {
                v358 = (char *)v490[0] + 24 * v353;
                v359 = *(_OWORD *)v358;
                v356[2] = *((_QWORD *)v358 + 2);
                *(_OWORD *)v356 = v359;
                *((_BYTE *)v356 + 27) = 2;
                v360 = (uint64_t *)((char *)v496 + 24 * v353);
                v361 = *v360;
                if (v360[1] != *v360)
                {
                  v362 = 0;
                  do
                  {
                    v363 = sub_239C6CE88(v254, *(_QWORD *)(v361 + 8 * v362), v355);
                    v364 = *(unsigned __int8 *)(*((_QWORD *)v485 + 3 * v353) + v362);
                    if ((v364 - 1) < 2)
                      *(_BYTE *)(v363 + 51) = v364;
                    ++v362;
                    v361 = *v360;
                  }
                  while (v362 < (v360[1] - *v360) >> 3);
                }
              }
              v483 = 0;
              v482 = 0;
              v484 = 0;
              sub_239C580BC((uint64_t)v254, v355, (uint64_t)&v482);
              v370 = (unsigned int *)v482;
              v371 = (unsigned int *)v483;
              if (v482 != v483)
              {
                do
                {
                  v372 = *v370;
                  v373 = *v254;
                  if (v372 >= (v254[1] - *v254) >> 6
                    || (v372 != 0xFFFFFFFF ? (v374 = *(_DWORD *)(v373 + (v372 << 6)) == -1) : (v374 = 1), v374))
                  {
                    sub_239A444D4((uint64_t)"unknown file", 316, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                    sub_239A4475C();
                    abort();
                  }
                  v375 = sub_239E313F4(v4, *(_QWORD *)(v373 + (v372 << 6) + 16));
                  ++*v375;
                  v370 += 2;
                }
                while (v370 != v371);
                v370 = (unsigned int *)v482;
              }
              if (v370)
              {
                v483 = (char *)v370;
                operator delete(v370);
              }
              ++v353;
            }
            while (v353 != v354);
          }
          v376 = (char *)v485;
          v1 = v443;
          if (v485)
          {
            v377 = v486;
            v378 = v485;
            if (v486 != v485)
            {
              v379 = v486;
              do
              {
                v381 = (void *)*((_QWORD *)v379 - 3);
                v379 -= 24;
                v380 = v381;
                if (v381)
                {
                  *((_QWORD *)v377 - 2) = v380;
                  operator delete(v380);
                }
                v377 = v379;
              }
              while (v379 != v376);
              v378 = v485;
              v1 = v443;
            }
            v486 = v376;
            operator delete(v378);
          }
          if (v488[0])
          {
            v488[1] = v488[0];
            operator delete(v488[0]);
          }
          if (v490[0])
          {
            v490[1] = v490[0];
            operator delete(v490[0]);
          }
        }
        v382 = (void **)v471;
        if ((_QWORD)v471)
        {
          do
          {
            v383 = (void **)*v382;
            free(v382[8]);
            operator delete(v382);
            v382 = v383;
          }
          while (v383);
        }
        v384 = v470[0];
        v470[0] = 0;
        if (v384)
          operator delete(v384);
        v385 = (char *)v496;
        if (v496)
        {
          v386 = v497;
          v387 = v496;
          if (v497 != v496)
          {
            v388 = v497;
            do
            {
              v390 = (void *)*((_QWORD *)v388 - 3);
              v388 -= 24;
              v389 = v390;
              if (v390)
              {
                *((_QWORD *)v386 - 2) = v389;
                operator delete(v389);
              }
              v386 = v388;
            }
            while (v388 != v385);
            v387 = v496;
            v1 = v443;
          }
          v497 = v385;
          operator delete(v387);
        }
        v391 = (char *)memptr[0];
        if (memptr[0])
        {
          v392 = memptr[1];
          v393 = memptr[0];
          if (memptr[1] != memptr[0])
          {
            v394 = (char *)memptr[1];
            do
            {
              v396 = (void *)*((_QWORD *)v394 - 3);
              v394 -= 24;
              v395 = v396;
              if (v396)
              {
                *(v392 - 2) = v395;
                operator delete(v395);
              }
              v392 = v394;
            }
            while (v394 != v391);
            v393 = memptr[0];
            v1 = v443;
          }
          memptr[1] = v391;
          operator delete(v393);
        }
        if (v466[0])
        {
          v466[1] = v466[0];
          operator delete(v466[0]);
        }
        if (v456)
        {
          *(_QWORD *)&v457[0] = v456;
          operator delete(v456);
        }
        if (!v352)
          continue;
        break;
      }
      LODWORD(v500[0]) = 1;
      v493 = 0;
      v495 = 0;
      v397 = sub_239E19D48(v1, (int *)v500, &v492);
      v398 = v495;
      if (v495 == v494)
      {
        v398 = v494;
        v400 = 4;
        v399 = v442;
LABEL_605:
        (*(void (**)(void))(*v398 + 8 * v400))();
      }
      else
      {
        v399 = v442;
        if (v495)
        {
          v400 = 5;
          goto LABEL_605;
        }
      }
      v401 = v493;
      if (v493 == &v492)
      {
        v401 = &v492;
        v402 = 4;
LABEL_610:
        (*((void (**)(void))&v401->~__shared_weak_count + v402))();
      }
      else if (v493)
      {
        v402 = 5;
        goto LABEL_610;
      }
      if (!v397)
      {
        v500[0] = v399;
        sub_239E31764(v430, (uint64_t *)v500);
        sub_239BFD31C(*(uint64_t **)v1, (uint64_t)v399, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 32));
        v1 = v443;
        continue;
      }
      break;
    }
    v85 = v431;
    if (!*(_BYTE *)(v1 + 56))
      goto LABEL_650;
    v403 = *(_QWORD **)(v1 + 48);
    v404 = v403[1];
    if (!v404)
      goto LABEL_650;
    v405 = (uint8x8_t)vcnt_s8((int8x8_t)v404);
    v405.i16[0] = vaddlv_u8(v405);
    if (v405.u32[0] > 1uLL)
    {
      v406 = v442;
      if (v404 <= v442)
        v406 = v442 % v404;
    }
    else
    {
      v406 = ((_DWORD)v404 - 1) & v442;
    }
    v407 = *(uint64_t ***)(*v403 + 8 * v406);
    if (!v407)
      goto LABEL_650;
    v408 = *v407;
    if (!*v407)
      goto LABEL_650;
    if (v405.u32[0] < 2uLL)
    {
      v409 = v404 - 1;
      while (1)
      {
        v411 = v408[1];
        if (v411 == v442)
        {
          if (*((_DWORD *)v408 + 4) == (_DWORD)v442)
            goto LABEL_635;
        }
        else if ((v411 & v409) != v406)
        {
          goto LABEL_650;
        }
        v408 = (uint64_t *)*v408;
        if (!v408)
          goto LABEL_650;
      }
    }
    while (2)
    {
      v410 = v408[1];
      if (v410 != v442)
      {
        if (v410 >= v404)
          v410 %= v404;
        if (v410 != v406)
          goto LABEL_650;
        goto LABEL_624;
      }
      if (*((_DWORD *)v408 + 4) != (_DWORD)v442)
      {
LABEL_624:
        v408 = (uint64_t *)*v408;
        if (!v408)
          goto LABEL_650;
        continue;
      }
      break;
    }
LABEL_635:
    v412 = sub_2395D7BEC(*(_QWORD *)v1, v442);
    v413.f64[0] = 0.75;
    if (!sub_239E23D14(*(uint64_t **)v443, (float64_t *)v412, v408[3], (float *)v470, v413, v414, v415))
    {
      v500[0] = v442;
      sub_239E31764(v430, (uint64_t *)v500);
      sub_239BFD31C(*(uint64_t **)v443, (uint64_t)v442, *(_QWORD *)(*(_QWORD *)(v443 + 32) + 32));
      v416 = *(uint64_t **)(v443 + 400);
      v417 = v429;
LABEL_638:
      v418 = v417;
      if (v416)
      {
        do
        {
          v417 = (uint64_t **)v416;
          v419 = v416[4];
          if ((unint64_t)v442 < v419)
          {
            v416 = *v417;
            goto LABEL_638;
          }
          if (v419 >= (unint64_t)v442)
            goto LABEL_646;
          v416 = v417[1];
        }
        while (v416);
        v418 = v417 + 1;
      }
      v420 = (uint64_t *)operator new(0x28uLL);
      v420[4] = (uint64_t)v442;
      *v420 = 0;
      v420[1] = 0;
      v420[2] = (uint64_t)v417;
      *v418 = v420;
      v421 = **(_QWORD **)(v443 + 392);
      if (v421)
      {
        *(_QWORD *)(v443 + 392) = v421;
        v420 = *v418;
      }
      sub_2394213B8(*(uint64_t **)(v443 + 400), v420);
      ++*(_QWORD *)(v443 + 408);
LABEL_646:
      v1 = v443;
      continue;
    }
    break;
  }
  v1 = v443;
LABEL_650:
  v422 = *(uint64_t **)(*(_QWORD *)v1 + 88);
  if (v422)
  {
    v423 = 0;
    do
    {
      if (*((_BYTE *)v422 + 256) == 2)
        ++v423;
      v422 = (uint64_t *)*v422;
    }
    while (v422);
  }
  kdebug_trace();
  return v85;
}

