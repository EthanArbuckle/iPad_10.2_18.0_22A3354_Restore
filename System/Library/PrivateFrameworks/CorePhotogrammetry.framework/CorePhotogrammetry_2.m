uint64_t *sub_2394BB548(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (a3 == a2)
    return result;
  while (1)
  {
    v4 = a3 - result;
    if (v4 < 2)
      return result;
    if (v4 == 3)
    {
      v44 = *result;
      v45 = result[1];
      v46 = *(double *)(*a4 + 24 * v45);
      v47 = *(a3 - 1);
      v48 = *(double *)(*a4 + 24 * v47);
      if (*(double *)(*a4 + 24 * *result) >= v46)
      {
        if (v46 < v48)
        {
          result[1] = v47;
          *(a3 - 1) = v45;
          v58 = *result;
          v59 = result[1];
          if (*(double *)(*a4 + 24 * *result) < *(double *)(*a4 + 24 * v59))
          {
            *result = v59;
            result[1] = v58;
          }
        }
      }
      else if (v46 >= v48)
      {
        *result = v45;
        result[1] = v44;
        v60 = *(a3 - 1);
        if (*(double *)(*a4 + 24 * v44) < *(double *)(*a4 + 24 * v60))
        {
          result[1] = v60;
          *(a3 - 1) = v44;
        }
      }
      else
      {
        *result = v47;
        *(a3 - 1) = v44;
      }
      return result;
    }
    if (v4 == 2)
    {
      v49 = *result;
      v50 = *(a3 - 1);
      if (*(double *)(*a4 + 24 * *result) < *(double *)(*a4 + 24 * v50))
      {
        *result = v50;
        *(a3 - 1) = v49;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      if (a3 - 1 == result)
        return result;
      while (2)
      {
        v51 = a3;
        if (result == a3)
        {
LABEL_80:
          if (v51 != result)
          {
            v57 = *result;
            *result = *v51;
            *v51 = v57;
          }
        }
        else
        {
          v52 = result + 1;
          if (result + 1 != a3)
          {
            v53 = *result;
            v51 = result;
            v54 = result + 1;
            do
            {
              v56 = *v54++;
              v55 = v56;
              if (*(double *)(*a4 + 24 * v53) < *(double *)(*a4 + 24 * v56))
              {
                v53 = v55;
                v51 = v52;
              }
              v52 = v54;
            }
            while (v54 != a3);
            goto LABEL_80;
          }
        }
        if (++result == a3 - 1)
          return result;
        continue;
      }
    }
    v5 = &result[v4 >> 1];
    v6 = a3 - 1;
    v7 = *(a3 - 1);
    v8 = *result;
    v9 = *v5;
    v10 = *(double *)(*a4 + 24 * *v5);
    v11 = *(double *)(*a4 + 24 * v7);
    if (*(double *)(*a4 + 24 * *result) < v10)
    {
      if (v10 < v11)
      {
        *result = v7;
        *v6 = v8;
LABEL_15:
        v13 = 1;
        goto LABEL_17;
      }
      *result = v9;
      *v5 = v8;
      if (*(double *)(*a4 + 24 * v8) >= *(double *)(*a4 + 24 * *v6))
        goto LABEL_15;
      *v5 = *v6;
      *v6 = v8;
LABEL_14:
      v13 = 2;
      goto LABEL_17;
    }
    if (v10 < v11)
    {
      *v5 = v7;
      *v6 = v9;
      v12 = *result;
      if (*(double *)(*a4 + 24 * *result) >= *(double *)(*a4 + 24 * *v5))
        goto LABEL_15;
      *result = *v5;
      *v5 = v12;
      goto LABEL_14;
    }
    v13 = 0;
LABEL_17:
    v14 = *a4;
    v15 = *result;
    v16 = *(double *)(*a4 + 24 * *v5);
    v17 = *(double *)(*a4 + 24 * *result);
    if (v16 < v17)
      break;
    v18 = a3 - 1;
    while (--v18 != result)
    {
      if (v16 < *(double *)(v14 + 24 * *v18))
      {
        *result = *v18;
        *v18 = v15;
        ++v13;
        v19 = result + 1;
        if (result + 1 < v18)
          goto LABEL_19;
        goto LABEL_32;
      }
    }
    v32 = result + 1;
    if (*(double *)(v14 + 24 * *v6) >= v17)
    {
      if (v32 == v6)
        return result;
      while (1)
      {
        v33 = *v32;
        if (*(double *)(v14 + 24 * *v32) < v17)
          break;
        if (++v32 == v6)
          return result;
      }
      *v32++ = *v6;
      *v6 = v33;
    }
    if (v32 == v6)
      return result;
    while (1)
    {
      v37 = *a4;
      v38 = *(double *)(*a4 + 24 * *result);
      do
      {
        v40 = *v32++;
        v39 = v40;
      }
      while (*(double *)(v37 + 24 * v40) >= v38);
      v41 = v32 - 1;
      do
      {
        v43 = *--v6;
        v42 = v43;
      }
      while (*(double *)(v37 + 24 * v43) < v38);
      if (v41 >= v6)
        break;
      *v41 = v42;
      *v6 = v39;
    }
    result = v32 - 1;
    if (v41 > a2)
      return result;
LABEL_64:
    if (a3 == a2)
      return result;
  }
  v18 = a3 - 1;
  v19 = result + 1;
  if (result + 1 >= a3 - 1)
  {
LABEL_32:
    v25 = v19;
  }
  else
  {
LABEL_19:
    v20 = v19;
    while (1)
    {
      v21 = *a4;
      v22 = *(double *)(*a4 + 24 * *v5);
      do
      {
        v24 = *v20++;
        v23 = v24;
      }
      while (v22 < *(double *)(v21 + 24 * v24));
      v25 = v20 - 1;
      do
      {
        v27 = *--v18;
        v26 = v27;
      }
      while (v22 >= *(double *)(v21 + 24 * v27));
      if (v25 >= v18)
        break;
      *v25 = v26;
      *v18 = v23;
      ++v13;
      if (v25 == v5)
        v5 = v18;
    }
  }
  if (v25 != v5)
  {
    v28 = *v25;
    if (*(double *)(*a4 + 24 * *v25) < *(double *)(*a4 + 24 * *v5))
    {
      *v25 = *v5;
      *v5 = v28;
      ++v13;
    }
  }
  if (v25 == a2)
    return result;
  if (v13)
  {
LABEL_38:
    if (v25 <= a2)
      result = v25 + 1;
    else
      a3 = v25;
    goto LABEL_64;
  }
  v29 = *a4;
  if (v25 <= a2)
  {
    v34 = v25 + 1;
    while (v34 != a3)
    {
      v35 = *(double *)(v29 + 24 * *(v34 - 1));
      v36 = *(double *)(v29 + 24 * *v34++);
      if (v35 < v36)
        goto LABEL_38;
    }
  }
  else
  {
    while (v19 != v25)
    {
      v30 = *(double *)(v29 + 24 * *(v19 - 1));
      v31 = *(double *)(v29 + 24 * *v19++);
      if (v30 < v31)
        goto LABEL_38;
    }
  }
  return result;
}

uint64_t sub_2394BBA18(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394BB548(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394BA7B4(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394BA2E4(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394B9E30(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394B997C(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394B9E30(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394BA2E4(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394BAC84((uint64_t)v7, a2, v8);
  sub_2394B8EF4((uint64_t)v7, v8, v10);
  sub_2394B8EF4((uint64_t)v7, v10, v11);
  sub_2394BAF70((uint64_t)v7, v11, v9);
  sub_2394BAF70((uint64_t)v7, v9, v18);
  sub_2394B891C(v7, v18, v16);
  sub_2394B891C(v7, v16, v20);
  return sub_2394BBFF0((uint64_t)v7, v20, a3);
}

uint64_t sub_2394BBD04(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394B997C(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394BA2E4(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394B94CC(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394BB548(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394B9E30(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394BB548(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394B94CC(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394BAF70(v7, a2, v8);
  sub_2394B91E0(v7, v8, v10);
  sub_2394B91E0(v7, v10, v11);
  sub_2394B891C(v7, v11, v9);
  sub_2394B891C(v7, v9, v18);
  sub_2394BAC84(v7, v18, v16);
  sub_2394BAC84(v7, v16, v20);
  return sub_2394B8C08(v7, v20, a3);
}

uint64_t sub_2394BBFF0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v3 = (char *)a3 - (char *)a2;
  v4 = a3 - a2;
  if (v4 <= *(_QWORD *)(result + 16))
    return result;
  v7 = (__int128 *)result;
  v8 = a2;
  v9 = a2;
  v10 = a2;
  v11 = a2;
  if (a2 < a3)
  {
    v13 = a3 - a2;
    v12 = v4 + (v4 < 0);
    v9 = &a2[v13 / 2];
    v22 = *(_OWORD *)result;
    if (v9 != a3)
      sub_2394BA2E4(a2, &a2[v12 >> 1], a3, (uint64_t *)&v22);
    v10 = a2;
    v8 = a2;
    if (v3 >= 9)
    {
      v10 = &a2[(v9 - a2) / 2];
      v22 = *v7;
      if ((v9 - a2) / 2 != v13 / 2)
        sub_2394B94CC(a2, &a2[(v9 - a2) / 2], v9, (uint64_t *)&v22);
      if ((char *)v9 - (char *)a2 < 9)
      {
        v8 = a2;
        if (v10 < v9)
        {
LABEL_12:
          v15 = (v9 - v10 + (unint64_t)(v9 - v10 < 0)) >> 1;
          v11 = &v10[v15];
          v22 = *v7;
          if (v11 != v9)
            sub_2394B997C(v10, &v10[v15], v9, (uint64_t *)&v22);
          goto LABEL_16;
        }
        goto LABEL_15;
      }
      v14 = ((8 * ((v9 - a2) / 2)) >> 3) / 2;
      v8 = &a2[v14];
      v22 = *v7;
      if (v14 != (v9 - a2) / 2)
        sub_2394BA7B4(a2, &a2[v14], v10, (uint64_t *)&v22);
    }
    if (v10 < v9)
      goto LABEL_12;
LABEL_15:
    v11 = v10;
  }
LABEL_16:
  v16 = v9;
  if (v9 < a3)
  {
    v17 = (a3 - v9 + (unint64_t)(a3 - v9 < 0)) >> 1;
    v16 = &v9[v17];
    v22 = *v7;
    if (v16 != a3)
      sub_2394BB548(v9, &v9[v17], a3, (uint64_t *)&v22);
  }
  v18 = v9;
  if (v9 < v16)
  {
    v19 = (v16 - v9 + (unint64_t)(v16 - v9 < 0)) >> 1;
    v18 = &v9[v19];
    v22 = *v7;
    if (v18 != v16)
      sub_2394BA7B4(v9, &v9[v19], v16, (uint64_t *)&v22);
  }
  v20 = v16;
  if (v16 < a3)
  {
    v21 = (a3 - v16 + (unint64_t)(a3 - v16 < 0)) >> 1;
    v20 = &v16[v21];
    v22 = *v7;
    if (v20 != a3)
      sub_2394B997C(v16, &v16[v21], a3, (uint64_t *)&v22);
  }
  sub_2394BB25C(v7, a2, v8);
  sub_2394B8C08(v7, v8, v10);
  sub_2394B8C08(v7, v10, v11);
  sub_2394B91E0(v7, v11, v9);
  sub_2394B91E0(v7, v9, v18);
  sub_2394BBA18(v7, v18, v16);
  sub_2394BBA18(v7, v16, v20);
  return sub_2394B891C(v7, v20, a3);
}

double sub_2394BC2DC@<D0>(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t **a4@<X3>, unsigned int a5@<W4>, _BYTE *a6@<X6>, uint64_t **a7@<X8>)
{
  int v10;
  double result;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;

  v10 = *(_DWORD *)(a1 + 8);
  if (v10 == 2)
  {
    v15 = (uint64_t)a2;
    v16 = a1;
    v13 = *a4;
    sub_2394BD468(a1, (uint64_t)a2, a3, &v13, a5, (uint64_t)&v15, a7, a6);
  }
  else if (v10 == 3)
  {
    v15 = (uint64_t)a2;
    v16 = a1;
    v14 = *a4;
    sub_2394BC41C(a1, (uint64_t)a2, a3, &v14, a5, (uint64_t)&v15, a7, a6);
  }
  else
  {
    v12 = *a4;
    v20 = 0;
    v18 = 0;
    v19 = 0;
    v22 = v12;
    sub_2394CED50(a1, a2, &v22, 2500, 0, &v15);
    v21 = v15;
    sub_2394CF158(a1, a2, &v20, (int *)&v19, (int *)&v18, &v21, 0, &v17);
    v15 = v17;
    *(_QWORD *)&result = sub_2394CCE80(a1, (uint64_t)a2, v20, &v15, v19, v18, (uint64_t *)a7).n128_u64[0];
  }
  return result;
}

void sub_2394BC41C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t **a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X6>, uint64_t **a7@<X8>, _BYTE *a8)
{
  int v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  __int128 *v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t **v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  uint64_t v89;
  __int128 *v90;
  void *v91;
  char *v92;
  _BYTE *v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  uint64_t **v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _OWORD *v107;
  __int128 *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t *v111;
  unint64_t **v112;
  unint64_t **v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t *v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  void *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t *v133;
  uint64_t v134;
  char *v135;
  int v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  char *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  void *v151;
  __int128 v152;
  _BYTE v153[265];
  void *v154;
  __int128 v155;
  _BYTE v156[256];
  void *v157;
  __int128 v158;
  _BYTE v159[512];
  void *__p;
  __int128 v161;
  _QWORD v162[66];

  v162[64] = *MEMORY[0x24BDAC8D0];
  if (a8)
    *a8 = 1;
  v13 = (_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(a1 + 8);
  if (v12 == 2)
  {
    if (!a3)
      goto LABEL_82;
    if (a3 == 5)
    {
LABEL_55:
      sub_2394BE434(a1, (__int128 *)a2, a7);
      return;
    }
    v151 = operator new(0x100uLL);
    *(_QWORD *)&v152 = v151;
    *((_QWORD *)&v152 + 1) = (char *)v151 + 256;
    v142 = *a4;
    __p = v162;
    v161 = xmmword_239EC6CD0;
    v157 = v159;
    v158 = xmmword_239EC6CD0;
    v154 = v162;
    v145 = (char *)v162;
    sub_2394BE6D4((uint64_t)&v157, (char **)&v154, &v145);
    v33 = (char *)v157 + 8 * v158;
    if ((_QWORD)v158 == *((_QWORD *)&v158 + 1))
    {
      sub_2394BEA3C((uint64_t)&v157, (uint64_t)v33, 1, &v142, &v154);
    }
    else
    {
      *v33 = v142;
      *(_QWORD *)&v158 = v158 + 1;
    }
    *((_BYTE *)v142 + 64) = 1;
    v154 = &v151;
    sub_2394C5488((void ***)&v154, &v142);
    LODWORD(v34) = *(_DWORD *)v13;
    if ((*(_DWORD *)v13 & 0x80000000) != 0)
    {
      v35 = 0;
      v36 = 0;
      *(_QWORD *)&v158 = 0;
      goto LABEL_161;
    }
    v35 = 0;
    v36 = 0;
    v37 = v158;
LABEL_39:
    --v37;
    v38 = (_QWORD *)*((_QWORD *)v157 + v37);
    *(_QWORD *)&v158 = v37;
    if ((v34 & 0x80000000) != 0)
      goto LABEL_38;
    v39 = 0;
    while (1)
    {
      v40 = v38[v39];
      v148 = v40;
      if (*(_BYTE *)(v40 + 64))
      {
        if (*(_BYTE *)(v40 + 64) == 1)
          goto LABEL_43;
      }
      else
      {
        v42 = *(__int128 **)a6;
        v41 = *(_QWORD *)(a6 + 8);
        v43 = *(char **)(v40 + 40);
        v154 = *(void **)(v40 + 32);
        v145 = v43;
        v44 = *(char **)(v40 + 48);
        v149 = *(_QWORD *)(v40 + 56);
        v150 = v44;
        if (sub_2394C5728(v41, &v154, &v145, &v150, &v149, v42, 1) == 1)
        {
          v45 = (char *)v157 + 8 * v158;
          if ((_QWORD)v158 == *((_QWORD *)&v158 + 1))
          {
            sub_2394BEA3C((uint64_t)&v157, (uint64_t)v45, 1, &v148, &v154);
          }
          else
          {
            *v45 = v148;
            *(_QWORD *)&v158 = v158 + 1;
          }
          *(_BYTE *)(v148 + 64) = 1;
          v154 = &v151;
          sub_2394C5488((void ***)&v154, &v148);
          goto LABEL_43;
        }
        *(_BYTE *)(v148 + 64) = 2;
      }
      v35 = v39;
      v36 = v38;
LABEL_43:
      v34 = *(int *)v13;
      v23 = v39++ < v34;
      if (!v23)
      {
        v37 = v158;
LABEL_38:
        if (v37)
          goto LABEL_39;
LABEL_161:
        if (*((_QWORD *)&v158 + 1) && v159 != v157)
          operator delete(v157);
        if (*((_QWORD *)&v161 + 1) && v162 != __p)
          operator delete(__p);
        __p = v36;
        sub_2394C55FC(v13, (unint64_t **)v151, (unint64_t **)v152, (uint64_t *)&__p, v35, (uint64_t *)a7);
        v133 = *a7;
        v134 = *(_QWORD *)(a2 + 16);
        *((_OWORD *)v133 + 1) = *(_OWORD *)a2;
        v133[4] = v134;
        if (v151)
        {
          *(_QWORD *)&v152 = v151;
          operator delete(v151);
        }
        return;
      }
    }
  }
  if (v12 != 3)
  {
    if (!a3)
      goto LABEL_82;
    if (a3 == 5)
      goto LABEL_55;
    if (!v12)
      goto LABEL_82;
    v140 = a7;
    v161 = 0uLL;
    __p = 0;
    v46 = operator new(8uLL);
    v47 = *a4;
    *v46 = *a4;
    *((_QWORD *)&v161 + 1) = v46 + 1;
    __p = v46;
    *(_QWORD *)&v161 = v46 + 1;
    while (1)
    {
      v47 = (uint64_t *)*v47;
      v49 = *(__int128 **)a6;
      v48 = *(_QWORD *)(a6 + 8);
      v50 = (void *)v47[5];
      v157 = (void *)v47[4];
      v151 = v50;
      v51 = (char *)v47[7];
      v154 = (void *)v47[6];
      v145 = v51;
      if (sub_2394C5728(v48, &v157, &v151, &v154, (uint64_t *)&v145, v49, 1) != 1)
        break;
      v52 = (char *)v161;
      if ((unint64_t)v161 < *((_QWORD *)&v161 + 1))
      {
        *(_QWORD *)v161 = v47;
        *(_QWORD *)&v161 = v52 + 8;
      }
      else
      {
        v53 = (char *)__p;
        v54 = v161 - (_QWORD)__p;
        v55 = (uint64_t)(v161 - (_QWORD)__p) >> 3;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61)
LABEL_192:
          sub_2394189F8();
        v57 = *((_QWORD *)&v161 + 1) - (_QWORD)__p;
        if ((uint64_t)(*((_QWORD *)&v161 + 1) - (_QWORD)__p) >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 61)
LABEL_193:
            sub_239418A80();
          v59 = operator new(8 * v58);
          v60 = &v59[8 * v55];
          *v60 = v47;
          v61 = (uint64_t)(v60 + 1);
          if (v52 == v53)
          {
LABEL_79:
            __p = v60;
            *((_QWORD *)&v161 + 1) = &v59[8 * v58];
            if (!v52)
              goto LABEL_81;
LABEL_80:
            operator delete(v52);
            goto LABEL_81;
          }
        }
        else
        {
          v59 = 0;
          v60 = (_QWORD *)(8 * v55);
          *(_QWORD *)(8 * v55) = v47;
          v61 = 8 * v55 + 8;
          if (v52 == v53)
            goto LABEL_79;
        }
        v62 = v52 - 8 - v53;
        if (v62 < 0x58)
          goto LABEL_196;
        if ((unint64_t)(v52 - &v59[v54]) < 0x20)
          goto LABEL_196;
        v63 = (v62 >> 3) + 1;
        v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
        v65 = &v52[-v64];
        v60 = (_QWORD *)((char *)v60 - v64);
        v66 = &v59[8 * v55 - 16];
        v67 = v52 - 16;
        v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v69 = *(_OWORD *)v67;
          *(v66 - 1) = *((_OWORD *)v67 - 1);
          *v66 = v69;
          v66 -= 2;
          v67 -= 32;
          v68 -= 4;
        }
        while (v68);
        v52 = v65;
        if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_196:
          do
          {
            v70 = *((_QWORD *)v52 - 1);
            v52 -= 8;
            *--v60 = v70;
          }
          while (v52 != v53);
        }
        v52 = (char *)__p;
        __p = v60;
        *((_QWORD *)&v161 + 1) = &v59[8 * v58];
        if (v52)
          goto LABEL_80;
LABEL_81:
        *(_QWORD *)&v161 = v61;
      }
    }
    v88 = *a4;
    while (1)
    {
      while (1)
      {
        v88 = (uint64_t *)v88[1];
        v90 = *(__int128 **)a6;
        v89 = *(_QWORD *)(a6 + 8);
        v91 = (void *)v88[5];
        v157 = (void *)v88[4];
        v151 = v91;
        v92 = (char *)v88[7];
        v154 = (void *)v88[6];
        v145 = v92;
        if (sub_2394C5728(v89, &v157, &v151, &v154, (uint64_t *)&v145, v90, 1) != 1)
        {
          v112 = (unint64_t **)__p;
          v113 = (unint64_t **)v161;
          if (__p != (void *)v161)
          {
            v114 = *(unint64_t **)(a1 + 48);
            v115 = *(_QWORD *)(a1 + 32) - 1;
            do
            {
              v116 = *v112++;
              *v116 = (unint64_t)v114 & 0xFFFFFFFFFFFFFFFCLL | 2;
              *(_QWORD *)(a1 + 48) = v116;
              *(_QWORD *)(a1 + 32) = v115--;
              v114 = v116;
            }
            while (v112 != v113);
          }
          v117 = *(_QWORD *)(a1 + 136);
          if (!v117)
          {
            sub_2394B61FC((_QWORD *)(a1 + 104));
            v117 = *(_QWORD *)(a1 + 136);
          }
          *(_QWORD *)(a1 + 136) = *(_QWORD *)v117 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)v117 = 0;
          *(_BYTE *)(v117 + 8) = 0;
          ++*(_QWORD *)(a1 + 120);
          v118 = v140;
          *v140 = (uint64_t *)v117;
          v119 = v47[4];
          v120 = *(_QWORD *)(a1 + 48);
          if (!v120)
          {
            sub_2394B6434((_QWORD *)(a1 + 16));
            v120 = *(_QWORD *)(a1 + 48);
            v118 = v140;
          }
          *(_QWORD *)(a1 + 48) = *(_QWORD *)v120 & 0xFFFFFFFFFFFFFFFCLL;
          v121 = 0uLL;
          *(_OWORD *)v120 = 0u;
          *(_OWORD *)(v120 + 16) = 0u;
          *(_QWORD *)(v120 + 32) = v117;
          *(_QWORD *)(v120 + 40) = v119;
          *(_BYTE *)(v120 + 64) = 0;
          *(_QWORD *)(v120 + 48) = 0;
          *(_QWORD *)(v120 + 56) = 0;
          ++*(_QWORD *)(a1 + 32);
          v122 = v88[5];
          v123 = *v118;
          v124 = *(_QWORD *)(a1 + 48);
          if (!v124)
          {
            sub_2394B6434((_QWORD *)(a1 + 16));
            v124 = *(_QWORD *)(a1 + 48);
            v118 = v140;
            v121 = 0uLL;
          }
          *(_QWORD *)(a1 + 48) = *(_QWORD *)v124 & 0xFFFFFFFFFFFFFFFCLL;
          *(_OWORD *)v124 = v121;
          *(_OWORD *)(v124 + 16) = v121;
          *(_QWORD *)(v124 + 32) = v122;
          *(_QWORD *)(v124 + 40) = v123;
          *(_QWORD *)(v124 + 48) = 0;
          *(_QWORD *)(v124 + 56) = 0;
          *(_BYTE *)(v124 + 64) = 0;
          ++*(_QWORD *)(a1 + 32);
          *(_QWORD *)(v120 + 8) = v124;
          *(_QWORD *)v124 = v120;
          v47[1] = v120;
          *(_QWORD *)v120 = v47;
          *(_QWORD *)(v124 + 8) = v88;
          *v88 = v124;
          *(_QWORD *)v47[4] = v47;
          *(_QWORD *)v88[5] = v88;
          **v118 = v120;
          v125 = *v118;
          v126 = *(_QWORD *)(a2 + 16);
          *((_OWORD *)v125 + 1) = *(_OWORD *)a2;
          v125[4] = v126;
          v127 = __p;
          if (__p)
            goto LABEL_185;
          return;
        }
        v93 = (_BYTE *)v161;
        if ((unint64_t)v161 < *((_QWORD *)&v161 + 1))
        {
          *(_QWORD *)v161 = v88;
          v94 = (uint64_t)(v93 + 8);
          goto LABEL_114;
        }
        v95 = __p;
        v96 = v161 - (_QWORD)__p;
        v97 = (uint64_t)(v161 - (_QWORD)__p) >> 3;
        v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 61)
          goto LABEL_192;
        v99 = *((_QWORD *)&v161 + 1) - (_QWORD)__p;
        if ((uint64_t)(*((_QWORD *)&v161 + 1) - (_QWORD)__p) >> 2 > v98)
          v98 = v99 >> 2;
        v100 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v98;
        if (v100)
          break;
        v101 = 0;
        v102 = (uint64_t **)(8 * v97);
        *(_QWORD *)(8 * v97) = v88;
        v94 = 8 * v97 + 8;
        if (v93 == v95)
          goto LABEL_109;
LABEL_126:
        v103 = v93 - 8 - v95;
        if (v103 < 0x58)
          goto LABEL_197;
        if ((unint64_t)(v93 - &v101[v96]) < 0x20)
          goto LABEL_197;
        v104 = (v103 >> 3) + 1;
        v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
        v106 = &v93[-v105];
        v102 = (uint64_t **)((char *)v102 - v105);
        v107 = &v101[8 * v97 - 16];
        v108 = (__int128 *)(v93 - 16);
        v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v108;
          *(v107 - 1) = *(v108 - 1);
          *v107 = v110;
          v107 -= 2;
          v108 -= 2;
          v109 -= 4;
        }
        while (v109);
        v93 = v106;
        if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_197:
          do
          {
            v111 = (uint64_t *)*((_QWORD *)v93 - 1);
            v93 -= 8;
            *--v102 = v111;
          }
          while (v93 != v95);
        }
        v93 = __p;
        __p = v102;
        *((_QWORD *)&v161 + 1) = &v101[8 * v100];
        if (v93)
          goto LABEL_110;
LABEL_114:
        *(_QWORD *)&v161 = v94;
      }
      if (v100 >> 61)
        goto LABEL_193;
      v101 = operator new(8 * v100);
      v102 = (uint64_t **)&v101[8 * v97];
      *v102 = v88;
      v94 = (uint64_t)(v102 + 1);
      if (v93 != v95)
        goto LABEL_126;
LABEL_109:
      __p = v102;
      *((_QWORD *)&v161 + 1) = &v101[8 * v100];
      if (!v93)
        goto LABEL_114;
LABEL_110:
      operator delete(v93);
      *(_QWORD *)&v161 = v94;
    }
  }
  if (!a3)
  {
LABEL_82:
    *a7 = (uint64_t *)(*a4)[a5 + 4];
    return;
  }
  v154 = v156;
  v155 = xmmword_239EC6CE0;
  v151 = v153;
  v152 = xmmword_239EC6CE0;
  if (!a8)
  {
    v143 = *a4;
    __p = v162;
    v161 = xmmword_239EC6CD0;
    v157 = v159;
    v158 = xmmword_239EC6CD0;
    v145 = (char *)v162;
    v150 = (char *)v162;
    sub_2394BE6D4((uint64_t)&v157, &v145, &v150);
    v71 = (uint64_t **)((char *)v157 + 8 * v158);
    if ((_QWORD)v158 == *((_QWORD *)&v158 + 1))
    {
      sub_2394BEA3C((uint64_t)&v157, (uint64_t)v71, 1, &v143, &v145);
    }
    else
    {
      *v71 = v143;
      *(_QWORD *)&v158 = v158 + 1;
    }
    v72 = v143;
    *((_BYTE *)v143 + 64) = 1;
    v73 = (uint64_t **)((char *)v154 + 8 * v155);
    if ((_QWORD)v155 == *((_QWORD *)&v155 + 1))
    {
      sub_2394BEA3C((uint64_t)&v154, (uint64_t)v73, 1, &v143, &v145);
    }
    else
    {
      *v73 = v72;
      *(_QWORD *)&v155 = v155 + 1;
    }
    v17 = (uint64_t *)a7;
    LODWORD(v74) = *(_DWORD *)v13;
    if ((*(_DWORD *)v13 & 0x80000000) != 0)
    {
      *(_QWORD *)&v158 = 0;
      goto LABEL_170;
    }
    v75 = v158;
LABEL_90:
    --v75;
    v76 = (char *)*((_QWORD *)v157 + v75);
    *(_QWORD *)&v158 = v75;
    if ((v74 & 0x80000000) != 0)
      goto LABEL_89;
    v77 = 0;
    while (1)
    {
      v79 = *(_QWORD *)&v76[8 * v77];
      v147 = v79;
      if (!*(_BYTE *)(v79 + 64))
        break;
      if (*(_BYTE *)(v79 + 64) != 1)
        goto LABEL_93;
LABEL_95:
      v74 = *(int *)v13;
      v23 = v77++ < v74;
      if (!v23)
      {
        v75 = v158;
LABEL_89:
        if (v75)
          goto LABEL_90;
LABEL_170:
        if (*((_QWORD *)&v158 + 1) && v159 != v157)
          operator delete(v157);
        if (*((_QWORD *)&v161 + 1) && v162 != __p)
          operator delete(__p);
LABEL_176:
        if ((unint64_t)v152 > 0x80)
        {
          v135 = (char *)v151 + 16 * v152;
          v136 = *((_DWORD *)v135 - 2);
          v137 = (char *)*((_QWORD *)v135 - 2);
          __p = v154;
          v157 = (char *)v154 + 8 * v155;
          v145 = v137;
          sub_2394C0CC8(v13, (unint64_t ***)&__p, (unint64_t ***)&v157, (uint64_t *)&v145, v136, v17);
        }
        else
        {
          sub_2394BEDD0(v13, (uint64_t)&v154, (uint64_t)&v151, v17);
        }
        v138 = *v17;
        v139 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)(v138 + 16) = *(_OWORD *)a2;
        *(_QWORD *)(v138 + 32) = v139;
        goto LABEL_180;
      }
    }
    v81 = *(__int128 **)a6;
    v80 = *(_QWORD *)(a6 + 8);
    v82 = *(char **)(v79 + 40);
    v145 = *(char **)(v79 + 32);
    v84 = *(_QWORD *)(v79 + 48);
    v83 = *(_QWORD *)(v79 + 56);
    v149 = v84;
    v150 = v82;
    v148 = v83;
    if (sub_2394C5728(v80, &v145, &v150, &v149, &v148, v81, 1) == 1)
    {
      v85 = (char *)v157 + 8 * v158;
      if ((_QWORD)v158 == *((_QWORD *)&v158 + 1))
      {
        sub_2394BEA3C((uint64_t)&v157, (uint64_t)v85, 1, &v147, &v145);
      }
      else
      {
        *v85 = v147;
        *(_QWORD *)&v158 = v158 + 1;
      }
      v86 = v147;
      *(_BYTE *)(v147 + 64) = 1;
      v87 = (char *)v154 + 8 * v155;
      if ((_QWORD)v155 == *((_QWORD *)&v155 + 1))
      {
        sub_2394BEA3C((uint64_t)&v154, (uint64_t)v87, 1, &v147, &v145);
      }
      else
      {
        *v87 = v86;
        *(_QWORD *)&v155 = v155 + 1;
      }
      goto LABEL_95;
    }
    *(_BYTE *)(v147 + 64) = 2;
LABEL_93:
    v145 = v76;
    v146 = v77;
    v78 = (char *)v151 + 16 * v152;
    if ((_QWORD)v152 == *((_QWORD *)&v152 + 1))
    {
      sub_2394BEC60((uint64_t)&v151, v78, 1, (uint64_t)&v145, &v150);
    }
    else
    {
      *(_QWORD *)v78 = v76;
      *((_DWORD *)v78 + 2) = v146;
      *(_QWORD *)&v152 = v152 + 1;
    }
    goto LABEL_95;
  }
  v144 = *a4;
  *a8 = 1;
  __p = v162;
  v161 = xmmword_239EC6CD0;
  v157 = v159;
  v158 = xmmword_239EC6CD0;
  v145 = (char *)v162;
  v150 = (char *)v162;
  sub_2394BE6D4((uint64_t)&v157, &v145, &v150);
  v14 = (uint64_t **)((char *)v157 + 8 * v158);
  if ((_QWORD)v158 == *((_QWORD *)&v158 + 1))
  {
    sub_2394BEA3C((uint64_t)&v157, (uint64_t)v14, 1, &v144, &v145);
  }
  else
  {
    *v14 = v144;
    *(_QWORD *)&v158 = v158 + 1;
  }
  v15 = v144;
  *((_BYTE *)v144 + 64) = 1;
  v16 = (uint64_t **)((char *)v154 + 8 * v155);
  if ((_QWORD)v155 == *((_QWORD *)&v155 + 1))
  {
    sub_2394BEA3C((uint64_t)&v154, (uint64_t)v16, 1, &v144, &v145);
  }
  else
  {
    *v16 = v15;
    *(_QWORD *)&v155 = v155 + 1;
  }
  v17 = (uint64_t *)a7;
  LODWORD(v18) = *(_DWORD *)v13;
  if ((*(_DWORD *)v13 & 0x80000000) != 0)
  {
    *(_QWORD *)&v158 = 0;
    goto LABEL_146;
  }
  v19 = v158;
  while (2)
  {
    --v19;
    v20 = (char *)*((_QWORD *)v157 + v19);
    *(_QWORD *)&v158 = v19;
    if ((v18 & 0x80000000) != 0)
      goto LABEL_13;
    v21 = 0;
    do
    {
      v24 = *(_QWORD *)&v20[8 * v21];
      v147 = v24;
      if (*(_BYTE *)(v24 + 64))
      {
        if (*(_BYTE *)(v24 + 64) == 1)
          goto LABEL_19;
        goto LABEL_17;
      }
      v26 = *(__int128 **)a6;
      v25 = *(_QWORD *)(a6 + 8);
      v27 = *(char **)(v24 + 40);
      v145 = *(char **)(v24 + 32);
      v29 = *(_QWORD *)(v24 + 48);
      v28 = *(_QWORD *)(v24 + 56);
      v149 = v29;
      v150 = v27;
      v148 = v28;
      if (sub_2394C5728(v25, &v145, &v150, &v149, &v148, v26, 1) != 1)
      {
        *(_BYTE *)(v147 + 64) = 2;
LABEL_17:
        v145 = v20;
        v146 = v21;
        v22 = (char *)v151 + 16 * v152;
        if ((_QWORD)v152 == *((_QWORD *)&v152 + 1))
        {
          sub_2394BEC60((uint64_t)&v151, v22, 1, (uint64_t)&v145, &v150);
        }
        else
        {
          *(_QWORD *)v22 = v20;
          *((_DWORD *)v22 + 2) = v146;
          *(_QWORD *)&v152 = v152 + 1;
        }
        goto LABEL_19;
      }
      v30 = (char *)v157 + 8 * v158;
      if ((_QWORD)v158 == *((_QWORD *)&v158 + 1))
      {
        sub_2394BEA3C((uint64_t)&v157, (uint64_t)v30, 1, &v147, &v145);
      }
      else
      {
        *v30 = v147;
        *(_QWORD *)&v158 = v158 + 1;
      }
      v31 = v147;
      *(_BYTE *)(v147 + 64) = 1;
      v32 = (char *)v154 + 8 * v155;
      if ((_QWORD)v155 == *((_QWORD *)&v155 + 1))
      {
        sub_2394BEA3C((uint64_t)&v154, (uint64_t)v32, 1, &v147, &v145);
      }
      else
      {
        *v32 = v31;
        *(_QWORD *)&v155 = v155 + 1;
      }
LABEL_19:
      v18 = *(int *)v13;
      v23 = v21++ < v18;
    }
    while (v23);
    v19 = v158;
LABEL_13:
    if (v19)
      continue;
    break;
  }
LABEL_146:
  if (*((_QWORD *)&v158 + 1) && v159 != v157)
    operator delete(v157);
  if (*((_QWORD *)&v161 + 1) && v162 != __p)
    operator delete(__p);
  if (*a8)
    goto LABEL_176;
  if ((_QWORD)v155)
  {
    v128 = (uint64_t *)v154;
    v129 = 8 * v155;
    do
    {
      v130 = *v128++;
      *(_BYTE *)(v130 + 64) = 0;
      v129 -= 8;
    }
    while (v129);
  }
  if ((_QWORD)v152)
  {
    v131 = (char *)v151;
    v132 = (char *)v151 + 16 * v152;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v131 + 8 * *((int *)v131 + 2)) + 64) = 0;
      v131 += 16;
    }
    while (v131 != v132);
  }
  *v17 = 0;
LABEL_180:
  if (*((_QWORD *)&v152 + 1) && v153 != v151)
    operator delete(v151);
  if (*((_QWORD *)&v155 + 1))
  {
    v127 = v154;
    if (v156 != v154)
LABEL_185:
      operator delete(v127);
  }
}

void sub_2394BD310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;

  if (STACK[0x3A0] && v24 != STACK[0x390])
    operator delete((void *)STACK[0x390]);
  if (STACK[0x5B8] && v23 != STACK[0x5A8])
    operator delete((void *)STACK[0x5A8]);
  if (a23 && (void *)a9 != a21)
    operator delete(a21);
  if (STACK[0x288])
  {
    if (a10 != STACK[0x278])
      operator delete((void *)STACK[0x278]);
  }
  _Unwind_Resume(a1);
}

void sub_2394BD468(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X6>, uint64_t **a7@<X8>, _BYTE *a8)
{
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  char *v24;
  char **v25;
  char *v26;
  char **v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char **v67;
  char *v68;
  char **v69;
  _QWORD *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _OWORD *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  unint64_t **v90;
  unint64_t **v91;
  unint64_t *v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  char *v123;
  int v124;
  char *v125;
  char *v126;
  void *v127;
  __int128 v128;
  _BYTE v129[265];
  void *v130;
  __int128 v131;
  _BYTE v132[256];
  void *v133;
  __int128 v134;
  _BYTE v135[512];
  void *__p;
  __int128 v137;
  _QWORD v138[66];

  v138[64] = *MEMORY[0x24BDAC8D0];
  if (a8)
    *a8 = 1;
  v13 = (_QWORD *)(a1 + 8);
  v12 = *(_DWORD *)(a1 + 8);
  if (v12 == 2)
  {
    if (!a3)
      goto LABEL_82;
    if (a3 == 5)
    {
LABEL_55:
      sub_2394BE434(a1, (__int128 *)a2, a7);
      return;
    }
    v127 = operator new(0x100uLL);
    *(_QWORD *)&v128 = v127;
    *((_QWORD *)&v128 + 1) = (char *)v127 + 256;
    v120 = (_QWORD *)*a4;
    __p = v138;
    v137 = xmmword_239EC6CD0;
    v133 = v135;
    v134 = xmmword_239EC6CD0;
    v130 = v138;
    v123 = (char *)v138;
    sub_2394BE6D4((uint64_t)&v133, (char **)&v130, &v123);
    v28 = (char *)v133 + 8 * v134;
    if ((_QWORD)v134 == *((_QWORD *)&v134 + 1))
    {
      sub_2394BEA3C((uint64_t)&v133, (uint64_t)v28, 1, &v120, &v130);
    }
    else
    {
      *v28 = v120;
      *(_QWORD *)&v134 = v134 + 1;
    }
    *((_BYTE *)v120 + 64) = 1;
    v130 = &v127;
    sub_2394C5488((void ***)&v130, &v120);
    LODWORD(v29) = *(_DWORD *)v13;
    if ((*(_DWORD *)v13 & 0x80000000) != 0)
    {
      v30 = 0;
      v31 = 0;
      *(_QWORD *)&v134 = 0;
      goto LABEL_161;
    }
    v30 = 0;
    v31 = 0;
    v32 = v134;
LABEL_39:
    --v32;
    v33 = (_QWORD *)*((_QWORD *)v133 + v32);
    *(_QWORD *)&v134 = v32;
    if ((v29 & 0x80000000) != 0)
      goto LABEL_38;
    v34 = 0;
    while (1)
    {
      v35 = (char *)v33[v34];
      v123 = v35;
      if (v35[64])
      {
        if (v35[64] == 1)
          goto LABEL_43;
      }
      else
      {
        v130 = v35;
        if (sub_2394CCA5C(*(_QWORD *)(a6 + 8), (uint64_t)&v130, 3, *(__int128 **)a6, 1) == 1)
        {
          v36 = (char *)v133 + 8 * v134;
          if ((_QWORD)v134 == *((_QWORD *)&v134 + 1))
          {
            sub_2394BEA3C((uint64_t)&v133, (uint64_t)v36, 1, &v123, &v130);
          }
          else
          {
            *v36 = v123;
            *(_QWORD *)&v134 = v134 + 1;
          }
          v123[64] = 1;
          v130 = &v127;
          sub_2394C5488((void ***)&v130, &v123);
          goto LABEL_43;
        }
        v123[64] = 2;
      }
      v30 = v34;
      v31 = v33;
LABEL_43:
      v29 = *(int *)v13;
      v23 = v34++ < v29;
      if (!v23)
      {
        v32 = v134;
LABEL_38:
        if (v32)
          goto LABEL_39;
LABEL_161:
        if (*((_QWORD *)&v134 + 1) && v135 != v133)
          operator delete(v133);
        if (*((_QWORD *)&v137 + 1) && v138 != __p)
          operator delete(__p);
        __p = v31;
        sub_2394C55FC(v13, (unint64_t **)v127, (unint64_t **)v128, (uint64_t *)&__p, v30, (uint64_t *)a7);
        v111 = *a7;
        v112 = *(_QWORD *)(a2 + 16);
        *((_OWORD *)v111 + 1) = *(_OWORD *)a2;
        v111[4] = v112;
        if (v127)
        {
          *(_QWORD *)&v128 = v127;
          operator delete(v127);
        }
        return;
      }
    }
  }
  if (v12 != 3)
  {
    if (!a3)
      goto LABEL_82;
    if (a3 == 5)
      goto LABEL_55;
    if (!v12)
      goto LABEL_82;
    v118 = a7;
    v137 = 0uLL;
    __p = 0;
    v37 = operator new(8uLL);
    v38 = (_QWORD *)*a4;
    *v37 = *a4;
    *((_QWORD *)&v137 + 1) = v37 + 1;
    __p = v37;
    *(_QWORD *)&v137 = v37 + 1;
    while (1)
    {
      v38 = (_QWORD *)*v38;
      v133 = v38;
      if (sub_2394CCA5C(*(_QWORD *)(a6 + 8), (uint64_t)&v133, 3, *(__int128 **)a6, 1) != 1)
        break;
      v39 = (char *)v137;
      if ((unint64_t)v137 < *((_QWORD *)&v137 + 1))
      {
        *(_QWORD *)v137 = v38;
        *(_QWORD *)&v137 = v39 + 8;
      }
      else
      {
        v40 = (char *)__p;
        v41 = v137 - (_QWORD)__p;
        v42 = (uint64_t)(v137 - (_QWORD)__p) >> 3;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
LABEL_192:
          sub_2394189F8();
        v44 = *((_QWORD *)&v137 + 1) - (_QWORD)__p;
        if ((uint64_t)(*((_QWORD *)&v137 + 1) - (_QWORD)__p) >> 2 > v43)
          v43 = v44 >> 2;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 61)
LABEL_193:
            sub_239418A80();
          v46 = operator new(8 * v45);
          v47 = &v46[8 * v42];
          *v47 = v38;
          v48 = (uint64_t)(v47 + 1);
          if (v39 == v40)
          {
LABEL_79:
            __p = v47;
            *((_QWORD *)&v137 + 1) = &v46[8 * v45];
            if (!v39)
              goto LABEL_81;
LABEL_80:
            operator delete(v39);
            goto LABEL_81;
          }
        }
        else
        {
          v46 = 0;
          v47 = (_QWORD *)(8 * v42);
          *(_QWORD *)(8 * v42) = v38;
          v48 = 8 * v42 + 8;
          if (v39 == v40)
            goto LABEL_79;
        }
        v49 = v39 - 8 - v40;
        if (v49 < 0x58)
          goto LABEL_196;
        if ((unint64_t)(v39 - &v46[v41]) < 0x20)
          goto LABEL_196;
        v50 = (v49 >> 3) + 1;
        v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
        v52 = &v39[-v51];
        v47 = (_QWORD *)((char *)v47 - v51);
        v53 = &v46[8 * v42 - 16];
        v54 = v39 - 16;
        v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v56 = *(_OWORD *)v54;
          *(v53 - 1) = *((_OWORD *)v54 - 1);
          *v53 = v56;
          v53 -= 2;
          v54 -= 32;
          v55 -= 4;
        }
        while (v55);
        v39 = v52;
        if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_196:
          do
          {
            v57 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *--v47 = v57;
          }
          while (v39 != v40);
        }
        v39 = (char *)__p;
        __p = v47;
        *((_QWORD *)&v137 + 1) = &v46[8 * v45];
        if (v39)
          goto LABEL_80;
LABEL_81:
        *(_QWORD *)&v137 = v48;
      }
    }
    v70 = (_QWORD *)*a4;
    while (1)
    {
      while (1)
      {
        v70 = (_QWORD *)v70[1];
        v133 = v70;
        if (sub_2394CCA5C(*(_QWORD *)(a6 + 8), (uint64_t)&v133, 3, *(__int128 **)a6, 1) != 1)
        {
          v90 = (unint64_t **)__p;
          v91 = (unint64_t **)v137;
          if (__p != (void *)v137)
          {
            v92 = *(unint64_t **)(a1 + 48);
            v93 = *(_QWORD *)(a1 + 32) - 1;
            do
            {
              v94 = *v90++;
              *v94 = (unint64_t)v92 & 0xFFFFFFFFFFFFFFFCLL | 2;
              *(_QWORD *)(a1 + 48) = v94;
              *(_QWORD *)(a1 + 32) = v93--;
              v92 = v94;
            }
            while (v90 != v91);
          }
          v95 = *(_QWORD *)(a1 + 136);
          if (!v95)
          {
            sub_2394B61FC((_QWORD *)(a1 + 104));
            v95 = *(_QWORD *)(a1 + 136);
          }
          *(_QWORD *)(a1 + 136) = *(_QWORD *)v95 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)v95 = 0;
          *(_BYTE *)(v95 + 8) = 0;
          ++*(_QWORD *)(a1 + 120);
          v96 = v118;
          *v118 = (uint64_t *)v95;
          v97 = v38[4];
          v98 = *(_QWORD *)(a1 + 48);
          if (!v98)
          {
            sub_2394B6434((_QWORD *)(a1 + 16));
            v98 = *(_QWORD *)(a1 + 48);
            v96 = v118;
          }
          *(_QWORD *)(a1 + 48) = *(_QWORD *)v98 & 0xFFFFFFFFFFFFFFFCLL;
          v99 = 0uLL;
          *(_OWORD *)v98 = 0u;
          *(_OWORD *)(v98 + 16) = 0u;
          *(_QWORD *)(v98 + 32) = v95;
          *(_QWORD *)(v98 + 40) = v97;
          *(_BYTE *)(v98 + 64) = 0;
          *(_QWORD *)(v98 + 48) = 0;
          *(_QWORD *)(v98 + 56) = 0;
          ++*(_QWORD *)(a1 + 32);
          v100 = v70[5];
          v101 = *v96;
          v102 = *(_QWORD *)(a1 + 48);
          if (!v102)
          {
            sub_2394B6434((_QWORD *)(a1 + 16));
            v102 = *(_QWORD *)(a1 + 48);
            v96 = v118;
            v99 = 0uLL;
          }
          *(_QWORD *)(a1 + 48) = *(_QWORD *)v102 & 0xFFFFFFFFFFFFFFFCLL;
          *(_OWORD *)v102 = v99;
          *(_OWORD *)(v102 + 16) = v99;
          *(_QWORD *)(v102 + 32) = v100;
          *(_QWORD *)(v102 + 40) = v101;
          *(_QWORD *)(v102 + 48) = 0;
          *(_QWORD *)(v102 + 56) = 0;
          *(_BYTE *)(v102 + 64) = 0;
          ++*(_QWORD *)(a1 + 32);
          *(_QWORD *)(v98 + 8) = v102;
          *(_QWORD *)v102 = v98;
          v38[1] = v98;
          *(_QWORD *)v98 = v38;
          *(_QWORD *)(v102 + 8) = v70;
          *v70 = v102;
          *(_QWORD *)v38[4] = v38;
          *(_QWORD *)v70[5] = v70;
          **v96 = v98;
          v103 = *v96;
          v104 = *(_QWORD *)(a2 + 16);
          *((_OWORD *)v103 + 1) = *(_OWORD *)a2;
          v103[4] = v104;
          v105 = __p;
          if (__p)
            goto LABEL_185;
          return;
        }
        v71 = (_BYTE *)v137;
        if ((unint64_t)v137 < *((_QWORD *)&v137 + 1))
        {
          *(_QWORD *)v137 = v70;
          v72 = (uint64_t)(v71 + 8);
          goto LABEL_114;
        }
        v73 = __p;
        v74 = v137 - (_QWORD)__p;
        v75 = (uint64_t)(v137 - (_QWORD)__p) >> 3;
        v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 61)
          goto LABEL_192;
        v77 = *((_QWORD *)&v137 + 1) - (_QWORD)__p;
        if ((uint64_t)(*((_QWORD *)&v137 + 1) - (_QWORD)__p) >> 2 > v76)
          v76 = v77 >> 2;
        v78 = (unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v76;
        if (v78)
          break;
        v79 = 0;
        v80 = (_QWORD *)(8 * v75);
        *(_QWORD *)(8 * v75) = v70;
        v72 = 8 * v75 + 8;
        if (v71 == v73)
          goto LABEL_109;
LABEL_126:
        v81 = v71 - 8 - v73;
        if (v81 < 0x58)
          goto LABEL_197;
        if ((unint64_t)(v71 - &v79[v74]) < 0x20)
          goto LABEL_197;
        v82 = (v81 >> 3) + 1;
        v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
        v84 = &v71[-v83];
        v80 = (_QWORD *)((char *)v80 - v83);
        v85 = &v79[8 * v75 - 16];
        v86 = (__int128 *)(v71 - 16);
        v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v88 = *v86;
          *(v85 - 1) = *(v86 - 1);
          *v85 = v88;
          v85 -= 2;
          v86 -= 2;
          v87 -= 4;
        }
        while (v87);
        v71 = v84;
        if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_197:
          do
          {
            v89 = *((_QWORD *)v71 - 1);
            v71 -= 8;
            *--v80 = v89;
          }
          while (v71 != v73);
        }
        v71 = __p;
        __p = v80;
        *((_QWORD *)&v137 + 1) = &v79[8 * v78];
        if (v71)
          goto LABEL_110;
LABEL_114:
        *(_QWORD *)&v137 = v72;
      }
      if (v78 >> 61)
        goto LABEL_193;
      v79 = operator new(8 * v78);
      v80 = &v79[8 * v75];
      *v80 = v70;
      v72 = (uint64_t)(v80 + 1);
      if (v71 != v73)
        goto LABEL_126;
LABEL_109:
      __p = v80;
      *((_QWORD *)&v137 + 1) = &v79[8 * v78];
      if (!v71)
        goto LABEL_114;
LABEL_110:
      operator delete(v71);
      *(_QWORD *)&v137 = v72;
    }
  }
  if (!a3)
  {
LABEL_82:
    *a7 = *(uint64_t **)(*a4 + 8 * a5 + 32);
    return;
  }
  v130 = v132;
  v131 = xmmword_239EC6CE0;
  v127 = v129;
  v128 = xmmword_239EC6CE0;
  if (!a8)
  {
    v121 = (_QWORD *)*a4;
    __p = v138;
    v137 = xmmword_239EC6CD0;
    v133 = v135;
    v134 = xmmword_239EC6CD0;
    v123 = (char *)v138;
    v126 = (char *)v138;
    sub_2394BE6D4((uint64_t)&v133, &v123, &v126);
    v58 = (char *)v133 + 8 * v134;
    if ((_QWORD)v134 == *((_QWORD *)&v134 + 1))
    {
      sub_2394BEA3C((uint64_t)&v133, (uint64_t)v58, 1, &v121, &v123);
    }
    else
    {
      *v58 = v121;
      *(_QWORD *)&v134 = v134 + 1;
    }
    v59 = v121;
    *((_BYTE *)v121 + 64) = 1;
    v60 = (char *)v130 + 8 * v131;
    if ((_QWORD)v131 == *((_QWORD *)&v131 + 1))
    {
      sub_2394BEA3C((uint64_t)&v130, (uint64_t)v60, 1, &v121, &v123);
    }
    else
    {
      *v60 = v59;
      *(_QWORD *)&v131 = v131 + 1;
    }
    v17 = (uint64_t *)a7;
    LODWORD(v61) = *(_DWORD *)v13;
    if ((*(_DWORD *)v13 & 0x80000000) != 0)
    {
      *(_QWORD *)&v134 = 0;
      goto LABEL_170;
    }
    v62 = v134;
LABEL_90:
    --v62;
    v63 = (char *)*((_QWORD *)v133 + v62);
    *(_QWORD *)&v134 = v62;
    if ((v61 & 0x80000000) != 0)
      goto LABEL_89;
    v64 = 0;
    while (1)
    {
      v66 = *(char **)&v63[8 * v64];
      v125 = v66;
      if (!v66[64])
        break;
      if (v66[64] != 1)
        goto LABEL_93;
LABEL_95:
      v61 = *(int *)v13;
      v23 = v64++ < v61;
      if (!v23)
      {
        v62 = v134;
LABEL_89:
        if (v62)
          goto LABEL_90;
LABEL_170:
        if (*((_QWORD *)&v134 + 1) && v135 != v133)
          operator delete(v133);
        if (*((_QWORD *)&v137 + 1) && v138 != __p)
          operator delete(__p);
LABEL_176:
        if ((unint64_t)v128 > 0x80)
        {
          v113 = (char *)v127 + 16 * v128;
          v114 = *((_DWORD *)v113 - 2);
          v115 = (char *)*((_QWORD *)v113 - 2);
          __p = v130;
          v133 = (char *)v130 + 8 * v131;
          v123 = v115;
          sub_2394C0CC8(v13, (unint64_t ***)&__p, (unint64_t ***)&v133, (uint64_t *)&v123, v114, v17);
        }
        else
        {
          sub_2394BEDD0(v13, (uint64_t)&v130, (uint64_t)&v127, v17);
        }
        v116 = *v17;
        v117 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)(v116 + 16) = *(_OWORD *)a2;
        *(_QWORD *)(v116 + 32) = v117;
        goto LABEL_180;
      }
    }
    v123 = v66;
    if (sub_2394CCA5C(*(_QWORD *)(a6 + 8), (uint64_t)&v123, 3, *(__int128 **)a6, 1) == 1)
    {
      v67 = (char **)((char *)v133 + 8 * v134);
      if ((_QWORD)v134 == *((_QWORD *)&v134 + 1))
      {
        sub_2394BEA3C((uint64_t)&v133, (uint64_t)v67, 1, &v125, &v123);
      }
      else
      {
        *v67 = v125;
        *(_QWORD *)&v134 = v134 + 1;
      }
      v68 = v125;
      v125[64] = 1;
      v69 = (char **)((char *)v130 + 8 * v131);
      if ((_QWORD)v131 == *((_QWORD *)&v131 + 1))
      {
        sub_2394BEA3C((uint64_t)&v130, (uint64_t)v69, 1, &v125, &v123);
      }
      else
      {
        *v69 = v68;
        *(_QWORD *)&v131 = v131 + 1;
      }
      goto LABEL_95;
    }
    v125[64] = 2;
LABEL_93:
    v123 = v63;
    v124 = v64;
    v65 = (char *)v127 + 16 * v128;
    if ((_QWORD)v128 == *((_QWORD *)&v128 + 1))
    {
      sub_2394BEC60((uint64_t)&v127, v65, 1, (uint64_t)&v123, &v126);
    }
    else
    {
      *(_QWORD *)v65 = v63;
      *((_DWORD *)v65 + 2) = v124;
      *(_QWORD *)&v128 = v128 + 1;
    }
    goto LABEL_95;
  }
  v122 = (_QWORD *)*a4;
  *a8 = 1;
  __p = v138;
  v137 = xmmword_239EC6CD0;
  v133 = v135;
  v134 = xmmword_239EC6CD0;
  v123 = (char *)v138;
  v126 = (char *)v138;
  sub_2394BE6D4((uint64_t)&v133, &v123, &v126);
  v14 = (char *)v133 + 8 * v134;
  if ((_QWORD)v134 == *((_QWORD *)&v134 + 1))
  {
    sub_2394BEA3C((uint64_t)&v133, (uint64_t)v14, 1, &v122, &v123);
  }
  else
  {
    *v14 = v122;
    *(_QWORD *)&v134 = v134 + 1;
  }
  v15 = v122;
  *((_BYTE *)v122 + 64) = 1;
  v16 = (char *)v130 + 8 * v131;
  if ((_QWORD)v131 == *((_QWORD *)&v131 + 1))
  {
    sub_2394BEA3C((uint64_t)&v130, (uint64_t)v16, 1, &v122, &v123);
  }
  else
  {
    *v16 = v15;
    *(_QWORD *)&v131 = v131 + 1;
  }
  v17 = (uint64_t *)a7;
  LODWORD(v18) = *(_DWORD *)v13;
  if ((*(_DWORD *)v13 & 0x80000000) != 0)
  {
    *(_QWORD *)&v134 = 0;
    goto LABEL_146;
  }
  v19 = v134;
  while (2)
  {
    --v19;
    v20 = (char *)*((_QWORD *)v133 + v19);
    *(_QWORD *)&v134 = v19;
    if ((v18 & 0x80000000) != 0)
      goto LABEL_13;
    v21 = 0;
    do
    {
      v24 = *(char **)&v20[8 * v21];
      v125 = v24;
      if (v24[64])
      {
        if (v24[64] == 1)
          goto LABEL_19;
        goto LABEL_17;
      }
      v123 = v24;
      if (sub_2394CCA5C(*(_QWORD *)(a6 + 8), (uint64_t)&v123, 3, *(__int128 **)a6, 1) != 1)
      {
        v125[64] = 2;
LABEL_17:
        v123 = v20;
        v124 = v21;
        v22 = (char *)v127 + 16 * v128;
        if ((_QWORD)v128 == *((_QWORD *)&v128 + 1))
        {
          sub_2394BEC60((uint64_t)&v127, v22, 1, (uint64_t)&v123, &v126);
        }
        else
        {
          *(_QWORD *)v22 = v20;
          *((_DWORD *)v22 + 2) = v124;
          *(_QWORD *)&v128 = v128 + 1;
        }
        goto LABEL_19;
      }
      v25 = (char **)((char *)v133 + 8 * v134);
      if ((_QWORD)v134 == *((_QWORD *)&v134 + 1))
      {
        sub_2394BEA3C((uint64_t)&v133, (uint64_t)v25, 1, &v125, &v123);
      }
      else
      {
        *v25 = v125;
        *(_QWORD *)&v134 = v134 + 1;
      }
      v26 = v125;
      v125[64] = 1;
      v27 = (char **)((char *)v130 + 8 * v131);
      if ((_QWORD)v131 == *((_QWORD *)&v131 + 1))
      {
        sub_2394BEA3C((uint64_t)&v130, (uint64_t)v27, 1, &v125, &v123);
      }
      else
      {
        *v27 = v26;
        *(_QWORD *)&v131 = v131 + 1;
      }
LABEL_19:
      v18 = *(int *)v13;
      v23 = v21++ < v18;
    }
    while (v23);
    v19 = v134;
LABEL_13:
    if (v19)
      continue;
    break;
  }
LABEL_146:
  if (*((_QWORD *)&v134 + 1) && v135 != v133)
    operator delete(v133);
  if (*((_QWORD *)&v137 + 1) && v138 != __p)
    operator delete(__p);
  if (*a8)
    goto LABEL_176;
  if ((_QWORD)v131)
  {
    v106 = (uint64_t *)v130;
    v107 = 8 * v131;
    do
    {
      v108 = *v106++;
      *(_BYTE *)(v108 + 64) = 0;
      v107 -= 8;
    }
    while (v107);
  }
  if ((_QWORD)v128)
  {
    v109 = (char *)v127;
    v110 = (char *)v127 + 16 * v128;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v109 + 8 * *((int *)v109 + 2)) + 64) = 0;
      v109 += 16;
    }
    while (v109 != v110);
  }
  *v17 = 0;
LABEL_180:
  if (*((_QWORD *)&v128 + 1) && v129 != v127)
    operator delete(v127);
  if (*((_QWORD *)&v131 + 1))
  {
    v105 = v130;
    if (v132 != v130)
LABEL_185:
      operator delete(v105);
  }
}

void sub_2394BE2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;

  if (STACK[0x390] && v22 != STACK[0x380])
    operator delete((void *)STACK[0x380]);
  if (STACK[0x5A8] && v21 != STACK[0x598])
    operator delete((void *)STACK[0x598]);
  if (a21 && (void *)a9 != a19)
    operator delete(a19);
  if (STACK[0x278])
  {
    if (a10 != STACK[0x268])
      operator delete((void *)STACK[0x268]);
  }
  _Unwind_Resume(a1);
}

void sub_2394BE434(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t **a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  int8x16_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  uint64_t *v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  __int16 v54;

  v7 = a1 + 8;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 2)
  {
    v11 = *(uint64_t **)(a1 + 200);
    v12 = *v11;
    if (v11 == *(uint64_t **)(*v11 + 32))
    {
      v13 = 0;
    }
    else if (v11 == *(uint64_t **)(v12 + 40))
    {
      v13 = 1;
    }
    else
    {
      v39 = v11 == *(uint64_t **)(v12 + 48);
      v13 = 2;
      if (!v39)
        v13 = 3;
    }
    v23 = *(_QWORD **)(v12 + 8 * v13);
    v24 = v23[4];
    v25 = v23[5];
    v26 = v23[6];
    v54 = 0;
    v53 = 0;
    v27 = *(_QWORD *)(v24 + 32);
    v51 = *(_OWORD *)(v24 + 16);
    v52 = v27;
    v28 = *(_QWORD *)(v25 + 32);
    v49 = *(_OWORD *)(v25 + 16);
    v50 = v28;
    v29 = *(_QWORD *)(v26 + 32);
    v47 = *(_OWORD *)(v26 + 16);
    v48 = v29;
    v30 = *((_QWORD *)a2 + 2);
    v45 = *a2;
    v46 = v30;
    v22 = sub_2394C3C18((uint64_t)&v53, (double *)&v51, (double *)&v49, (double *)&v47, (double *)&v45);
  }
  else
  {
    if (v6 != 1)
    {
      v44 = *(uint64_t **)(a1 + 200);
      sub_2394B5B58(a1 + 8, &v44, a3);
      v14 = *a3;
      v15 = *((_QWORD *)a2 + 2);
      *((_OWORD *)v14 + 1) = *a2;
      v14[4] = v15;
      return;
    }
    v8 = *(uint64_t **)(a1 + 200);
    v9 = *v8;
    if (v8 == *(uint64_t **)(*v8 + 32))
    {
      v10 = 0;
    }
    else if (v8 == *(uint64_t **)(v9 + 40))
    {
      v10 = 1;
    }
    else
    {
      v39 = v8 == *(uint64_t **)(v9 + 48);
      v10 = 2;
      if (!v39)
        v10 = 3;
    }
    v16 = *(_QWORD *)(v9 + 8 * v10);
    v18 = *(_QWORD *)(v16 + 32);
    v17 = *(_QWORD *)(v16 + 40);
    v19 = *(_QWORD *)(v18 + 32);
    v51 = *(_OWORD *)(v18 + 16);
    v52 = v19;
    v20 = *(_QWORD *)(v17 + 32);
    v49 = *(_OWORD *)(v17 + 16);
    v50 = v20;
    v21 = *((_QWORD *)a2 + 2);
    v47 = *a2;
    v48 = v21;
    v22 = sub_2394C2060((uint64_t)&v45, (double *)&v51, (double *)&v49, (double *)&v47);
  }
  v31 = v22;
  v44 = *(uint64_t **)(a1 + 200);
  sub_2394B5B58(v7, &v44, a3);
  v32 = *a3;
  v33 = *((_QWORD *)a2 + 2);
  *((_OWORD *)v32 + 1) = *a2;
  v32[4] = v33;
  if (v31 == -1)
  {
    v34 = *(int8x16_t **)(a1 + 56);
    if (v34)
    {
      v35 = v34[4].i64[1];
      v34 = (int8x16_t *)((char *)v34 + 72);
      if ((v35 & 3) == 2)
      {
        do
        {
          while (1)
          {
            v37 = v34[4].i64[1];
            v34 = (int8x16_t *)((char *)v34 + 72);
            v36 = v37;
            v38 = v37 & 3;
            if (v38 != 1)
              break;
            v34 = (int8x16_t *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          }
          if (v38)
            v39 = v38 == 3;
          else
            v39 = 1;
        }
        while (!v39);
      }
    }
    if (v34 != *(int8x16_t **)(a1 + 64))
    {
      v40 = v34->i64[0];
      do
      {
        v34[2] = vextq_s8(v34[2], v34[2], 8uLL);
        v34->i64[0] = v34->i64[1];
        v34->i64[1] = v40;
        do
        {
          while (1)
          {
            v41 = v34[4].i64[1];
            v34 = (int8x16_t *)((char *)v34 + 72);
            v40 = v41;
            v42 = v41 & 3;
            if (v42 != 1)
              break;
            v34 = (int8x16_t *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
          }
          if (v42)
            v43 = v42 == 3;
          else
            v43 = 1;
        }
        while (!v43);
      }
      while (v34 != *(int8x16_t **)(a1 + 64));
    }
  }
}

void sub_2394BE6D4(uint64_t a1, char **a2, char **a3)
{
  char *v4;
  int64_t v5;
  unint64_t v6;
  char *v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _OWORD *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  __int128 *v28;
  _OWORD *v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  _OWORD *v36;
  __int128 *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  _OWORD *v47;
  __int128 *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v4 = *a2;
  v5 = *a3 - *a2;
  v6 = v5 >> 3;
  if ((unint64_t)(v5 >> 3) > *(_QWORD *)(a1 + 16))
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF9)
      sub_2394BE9C4((uint64_t)"get_next_capacity, allocator's max size reached");
    v9 = (char *)operator new(v5);
    v10 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = 0;
      if ((_QWORD *)(a1 + 24) != v10)
        operator delete(v10);
    }
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)a1 = v9;
    v11 = *a2;
    v12 = *a3;
    if (*a2 == *a3)
    {
      v14 = v9;
    }
    else
    {
      v13 = v12 - v11 - 8;
      if (v13 < 0x18)
      {
        v14 = v9;
      }
      else
      {
        v14 = v9;
        if ((unint64_t)(v9 - v11) >= 0x20)
        {
          v15 = (v13 >> 3) + 1;
          v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
          v17 = &v11[v16];
          v14 = &v9[v16];
          v18 = v9 + 16;
          v19 = (__int128 *)(v11 + 16);
          v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v21 = *v19;
            *(v18 - 1) = *(v19 - 1);
            *v18 = v21;
            v18 += 2;
            v19 += 2;
            v20 -= 4;
          }
          while (v20);
          v11 = v17;
          if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_32;
        }
      }
      do
      {
        v40 = *(_QWORD *)v11;
        v11 += 8;
        *(_QWORD *)v14 = v40;
        v14 += 8;
      }
      while (v11 != v12);
    }
LABEL_32:
    *(_QWORD *)(a1 + 8) = (v14 - v9) >> 3;
    return;
  }
  v22 = *(_QWORD **)a1;
  v23 = *(_QWORD *)(a1 + 8);
  if (v6 <= v23)
  {
    if (*a3 != v4)
    {
      if ((unint64_t)v5 < 0x20)
      {
        v32 = v5 >> 3;
      }
      else
      {
        v32 = v5 >> 3;
        if ((unint64_t)((char *)v22 - v4) >= 0x20)
        {
          v33 = v6 & 0xFFFFFFFFFFFFFFFCLL;
          v34 = &v4[v33 * 8];
          v35 = &v22[v33];
          v32 = ((unint64_t)v5 >> 3) & 3;
          v36 = v22 + 2;
          v37 = (__int128 *)(v4 + 16);
          v38 = v6 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *v36 = v39;
            v36 += 2;
            v37 += 2;
            v38 -= 4;
          }
          while (v38);
          v4 = v34;
          v22 = v35;
          if (v6 == (v6 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_48;
        }
      }
      do
      {
        v52 = *(_QWORD *)v4;
        v4 += 8;
        *v22++ = v52;
        --v32;
      }
      while (v32);
    }
    goto LABEL_48;
  }
  if (!v23)
  {
    v26 = *(_QWORD **)a1;
    v27 = *a2;
    goto LABEL_36;
  }
  if (v23 < 4)
  {
    v24 = *(_QWORD *)(a1 + 8);
LABEL_34:
    v26 = v22;
    v27 = v4;
    do
    {
      v41 = *(_QWORD *)v27;
      v27 += 8;
      *v26++ = v41;
      --v24;
    }
    while (v24);
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)((char *)v22 - v4) < 0x20)
    goto LABEL_34;
  v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  v26 = &v22[v25];
  v27 = &v4[v25 * 8];
  v24 = *(_QWORD *)(a1 + 8) & 3;
  v28 = (__int128 *)(v4 + 16);
  v29 = v22 + 2;
  v30 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v31 = *v28;
    *(v29 - 1) = *(v28 - 1);
    *v29 = v31;
    v28 += 2;
    v29 += 2;
    v30 -= 4;
  }
  while (v30);
  v22 = v26;
  v4 = v27;
  if (v23 != (v23 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_34;
LABEL_36:
  v42 = v6 - v23;
  if (v6 != v23)
  {
    if (v42 < 4 || (unint64_t)((char *)v26 - v27) < 0x20)
    {
      v44 = v27;
      v45 = v6 - v23;
      v46 = v26;
    }
    else
    {
      v43 = v42 & 0xFFFFFFFFFFFFFFFCLL;
      v44 = &v27[v43 * 8];
      v45 = v42 & 3;
      v46 = &v26[v43];
      v47 = v26 + 2;
      v48 = (__int128 *)(v27 + 16);
      v49 = v42 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v50 = *v48;
        *(v47 - 1) = *(v48 - 1);
        *v47 = v50;
        v47 += 2;
        v48 += 2;
        v49 -= 4;
      }
      while (v49);
      if (v42 == (v42 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_48;
    }
    do
    {
      v51 = *(_QWORD *)v44;
      v44 += 8;
      *v46++ = v51;
      --v45;
    }
    while (v45);
  }
LABEL_48:
  *(_QWORD *)(a1 + 8) = v6;
}

void sub_2394BE9C4(uint64_t a1)
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(0x10uLL);
  *exception = &off_250ADCC40;
  exception[1] = a1;
  __cxa_throw(exception, (struct type_info *)&unk_250ADCC18, (void (*)(void *))std::exception::~exception);
}

void sub_2394BEA00(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B83E31CLL);
}

const char *sub_2394BEA24(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "unknown boost::container exception";
}

void sub_2394BEA3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v6 = 0xFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (0xFFFFFFFFFFFFFFFLL - v8 < a3 - v8 + v7)
    goto LABEL_32;
  v10 = v8 >> 61;
  v11 = 8 * v8;
  if (v10 > 4)
    v12 = -1;
  else
    v12 = v11;
  v13 = v11 / 5;
  if (v10)
    v13 = v12;
  v14 = v7 + a3;
  if (v13 < 0xFFFFFFFFFFFFFFFLL)
    v6 = v13;
  v15 = v14 <= v6 ? v6 : v14;
  if (v15 >> 60)
LABEL_32:
    sub_2394BE9C4((uint64_t)"get_next_capacity, allocator's max size reached");
  v19 = *(uint64_t **)a1;
  v20 = (char *)operator new(8 * v15);
  v21 = v20;
  v22 = *(uint64_t **)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)a1 + 8 * v23;
  v25 = v20;
  if (*(_QWORD *)a1 != a2)
  {
    v26 = a2 - (_QWORD)v22 - 8;
    v27 = *(uint64_t **)a1;
    v25 = v20;
    if (v26 < 0x18)
      goto LABEL_35;
    v27 = *(uint64_t **)a1;
    v25 = v20;
    if ((unint64_t)(v20 - (char *)v22) < 0x20)
      goto LABEL_35;
    v28 = (v26 >> 3) + 1;
    v29 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    v27 = &v22[v29];
    v25 = &v20[v29 * 8];
    v30 = v20 + 16;
    v31 = (__int128 *)(v22 + 2);
    v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v33 = *v31;
      *(v30 - 1) = *(v31 - 1);
      *v30 = v33;
      v30 += 2;
      v31 += 2;
      v32 -= 4;
    }
    while (v32);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        v34 = *v27++;
        *(_QWORD *)v25 = v34;
        v25 += 8;
      }
      while (v27 != (uint64_t *)a2);
    }
  }
  *(_QWORD *)v25 = *a4;
  if (v24 != a2)
  {
    v35 = &v25[8 * a3];
    v36 = (unint64_t)&v22[v23 - 1] - a2;
    if (v36 < 0x38)
    {
      v37 = (uint64_t *)a2;
      do
      {
LABEL_27:
        v45 = *v37++;
        *(_QWORD *)v35 = v45;
        v35 += 8;
      }
      while (v37 != (uint64_t *)v24);
      goto LABEL_28;
    }
    v38 = &v25[8 * a3];
    v37 = (uint64_t *)a2;
    if ((unint64_t)&v38[-a2] < 0x20)
      goto LABEL_27;
    v39 = (v36 >> 3) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = (uint64_t *)(a2 + v40);
    v35 += v40;
    v41 = v38 + 16;
    v42 = (__int128 *)(a2 + 16);
    v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v44 = *v42;
      *(v41 - 1) = *(v42 - 1);
      *v41 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_27;
  }
LABEL_28:
  if (v22 && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  v46 = *(_QWORD *)(a1 + 8) + a3;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v46;
  *(_QWORD *)(a1 + 16) = v15;
  *a5 = &v21[a2 - (_QWORD)v19];
}

void sub_2394BEC60(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v19;
  char *v20;
  char *v21;
  _DWORD *v22;
  uint64_t v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;

  v6 = 0x7FFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v8 < a3 - v8 + v7)
    goto LABEL_23;
  v10 = v8 >> 61;
  v11 = 8 * v8;
  if (v10 > 4)
    v12 = -1;
  else
    v12 = v11;
  v13 = v11 / 5;
  if (v10)
    v13 = v12;
  v14 = v7 + a3;
  if (v13 < 0x7FFFFFFFFFFFFFFLL)
    v6 = v13;
  v15 = v14 <= v6 ? v6 : v14;
  if (v15 >> 59)
LABEL_23:
    sub_2394BE9C4((uint64_t)"get_next_capacity, allocator's max size reached");
  v19 = *(_DWORD **)a1;
  v20 = (char *)operator new(16 * v15);
  v21 = v20;
  v22 = *(_DWORD **)a1;
  v23 = *(_QWORD *)a1 + 16 * *(_QWORD *)(a1 + 8);
  v24 = v20;
  if (*(_BYTE **)a1 != a2)
  {
    v25 = *(_DWORD **)a1;
    v24 = v20;
    do
    {
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_DWORD *)v24 + 2) = v25[2];
      v24 += 16;
      v25 += 4;
    }
    while (v25 != (_DWORD *)a2);
  }
  *(_QWORD *)v24 = *(_QWORD *)a4;
  *((_DWORD *)v24 + 2) = *(_DWORD *)(a4 + 8);
  if ((_BYTE *)v23 != a2)
  {
    v26 = &v24[16 * a3];
    v27 = a2;
    do
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_DWORD *)v26 + 2) = *((_DWORD *)v27 + 2);
      v27 += 16;
      v26 += 16;
    }
    while (v27 != (_BYTE *)v23);
  }
  if (v22 && a1 + 24 != *(_QWORD *)a1)
    operator delete(*(void **)a1);
  v28 = *(_QWORD *)(a1 + 8) + a3;
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v15;
  *a5 = &v21[a2 - (_BYTE *)v19];
}

uint64_t sub_2394BEDD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t result;
  __int128 v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  char v41;
  int v42;
  uint64_t v43;
  unint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t **v47;
  uint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v67;
  uint64_t (*v68)(_QWORD);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD v80[129];

  v7 = off_2569345C8;
  if ((*(_BYTE *)off_2569345C8(&off_2569345C8) & 1) != 0)
  {
    v8 = a1[16];
    if (v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_DWORD *)off_2569345B0(&off_2569345B0) = -2;
  do
  {
    v69 = v68(&off_2569345B0);
    v71 = v69 + v70;
    *(_QWORD *)(v71 + 8208) = 0;
    *(_QWORD *)(v71 + 8200) = 0;
    *(_WORD *)(v69 + v70 + v72 + 16) = 0;
  }
  while (v70 != 24552);
  v73 = v68(&off_2569345B0);
  memset((void *)(v73 + 4), 255, 0x1000uLL);
  *(_BYTE *)v7(&off_2569345C8) = 1;
  v8 = a1[16];
  if (!v8)
  {
LABEL_3:
    sub_2394B61FC(a1 + 12);
    v8 = a1[16];
  }
LABEL_4:
  a1[16] = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 0;
  ++a1[14];
  *a4 = v8;
  bzero(v80, 0x400uLL);
  if (*(_BYTE *)(a3 + 8))
  {
    v74 = a2;
    v77 = a1 + 1;
    v11 = (_DWORD *)off_2569345B0(&off_2569345B0);
    v12 = 0;
    v13 = v11 + 1;
    v14 = v11 + 2050;
    v15 = v11 + 1025;
    result = 12;
    v17 = 0uLL;
    v78 = a1;
    v75 = v11 + 1025;
    v76 = v8;
    do
    {
      v20 = *v9 + 16 * v12;
      v21 = *(_QWORD *)v20;
      v22 = *(_QWORD *)(*(_QWORD *)v20 + 8 * *(int *)(v20 + 8));
      if (*(_QWORD *)v20 == *(_QWORD *)v22)
      {
        v23 = 0;
      }
      else if (v21 == *(_QWORD *)(v22 + 8))
      {
        v23 = 1;
      }
      else if (v21 == *(_QWORD *)(v22 + 16))
      {
        v23 = 2;
      }
      else
      {
        v23 = 3;
      }
      *(_BYTE *)(v22 + 64) = 0;
      v24 = (unsigned int *)((char *)&unk_239EC6BE8 + 12 * v23);
      v25 = *(_QWORD *)(v22 + 32 + 8 * *v24);
      v26 = *(_QWORD *)(v22 + 32 + 8 * v24[1]);
      v27 = *(_QWORD *)(v22 + 32 + 8 * v24[2]);
      *(_QWORD *)v25 = v22;
      *(_QWORD *)v26 = v22;
      *(_QWORD *)v27 = v22;
      v28 = a1[5];
      if (!v28)
      {
        v29 = v11;
        v30 = v10;
        v31 = v14;
        sub_2394B6434(v77);
        v17 = 0uLL;
        result = 12;
        v14 = v31;
        v10 = v30;
        a1 = v78;
        v9 = (_QWORD *)a3;
        v11 = v29;
        v15 = v75;
        v8 = v76;
        v28 = v78[5];
      }
      a1[5] = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFFCLL;
      *(_OWORD *)v28 = v17;
      *(_OWORD *)(v28 + 16) = v17;
      *(_QWORD *)(v28 + 32) = v26;
      *(_QWORD *)(v28 + 40) = v25;
      *(_QWORD *)(v28 + 48) = v27;
      *(_QWORD *)(v28 + 56) = v8;
      *(_BYTE *)(v28 + 64) = 0;
      ++a1[3];
      v80[v12] = v28;
      *(_QWORD *)v8 = v28;
      *(_QWORD *)(v28 + 24) = v22;
      *(_QWORD *)(v22 + 8 * v23) = v28;
      if (v27 == *(_QWORD *)(v28 + 32))
      {
        v32 = 0;
      }
      else if (v27 == *(_QWORD *)(v28 + 40))
      {
        v32 = 1;
      }
      else if (v27 == *(_QWORD *)(v28 + 48))
      {
        v32 = 2;
      }
      else
      {
        v32 = 3;
      }
      v33 = ((unsigned __int16)(419 * (v26 >> 5)) ^ (unsigned __int16)(v25 >> 5)) & 0x3FF;
      while (v13[v33] != -1)
      {
        v33 = ((_WORD)v33 + 1) & 0x3FF;
        if (v33 == (((unsigned __int16)(419 * (v26 >> 5)) ^ (unsigned __int16)(v25 >> 5)) & 0x3FF))
LABEL_48:
          sub_2394BF3AC("", "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/3rd-party/CGAL/include/CGAL/Small_unordered_map.h", 83, "");
      }
      v34 = v33;
      v13[v34] = 1;
      v35 = &v14[6 * v33];
      *(_QWORD *)v35 = v25;
      *((_QWORD *)v35 + 1) = v26;
      *((_BYTE *)v35 + 16) = v12;
      *((_BYTE *)v35 + 17) = v32;
      v15[v34] = *v11;
      *v11 = v33;
      if (v25 == *(_QWORD *)(v28 + 32))
      {
        v36 = 0;
      }
      else if (v25 == *(_QWORD *)(v28 + 40))
      {
        v36 = 1;
      }
      else if (v25 == *(_QWORD *)(v28 + 48))
      {
        v36 = 2;
      }
      else
      {
        v36 = 3;
      }
      v37 = ((unsigned __int16)(419 * (v27 >> 5)) ^ (unsigned __int16)(v26 >> 5)) & 0x3FF;
      v38 = v37;
      while (v13[v38] != -1)
      {
        v38 = ((_WORD)v38 + 1) & 0x3FF;
        if (v38 == v37)
          goto LABEL_48;
      }
      v39 = v38;
      v13[v39] = 1;
      v40 = &v14[6 * v38];
      *(_QWORD *)v40 = v26;
      *((_QWORD *)v40 + 1) = v27;
      *((_BYTE *)v40 + 16) = v12;
      *((_BYTE *)v40 + 17) = v36;
      v15[v39] = v33;
      *v11 = v38;
      if (v26 == *(_QWORD *)(v28 + 32))
      {
        v41 = 0;
      }
      else if (v26 == *(_QWORD *)(v28 + 40))
      {
        v41 = 1;
      }
      else if (v26 == *(_QWORD *)(v28 + 48))
      {
        v41 = 2;
      }
      else
      {
        v41 = 3;
      }
      v42 = ((unsigned __int16)(v27 >> 5) ^ (unsigned __int16)(419 * (v25 >> 5))) & 0x3FF;
      while (v13[v42] != -1)
      {
        v42 = (v42 + 1) & 0x3FF;
        if (v42 == (((unsigned __int16)(v27 >> 5) ^ (unsigned __int16)(419 * (v25 >> 5))) & 0x3FF))
          goto LABEL_48;
      }
      v18 = v42;
      v13[v18] = 1;
      v19 = &v14[6 * v42];
      *(_QWORD *)v19 = v27;
      *((_QWORD *)v19 + 1) = v25;
      *((_BYTE *)v19 + 16) = v12;
      *((_BYTE *)v19 + 17) = v41;
      v15[v18] = v38;
      *v11 = v42;
      ++v12;
    }
    while (v12 != v10);
    a2 = v74;
  }
  else
  {
    result = off_2569345B0(&off_2569345B0);
    v11 = (_DWORD *)result;
    v42 = *(_DWORD *)result;
    if (*(_DWORD *)result == -2)
      goto LABEL_51;
  }
  v52 = v11 + 2050;
  v53 = v11 + 1;
  do
  {
    v54 = v42;
    v55 = &v52[6 * v42];
    if (*v55 < v55[1])
    {
      v56 = &v52[6 * v42];
      v57 = v80[*((unsigned __int8 *)v56 + 16)];
      v58 = *((unsigned __int8 *)v56 + 17);
      v53[v54] = -1;
      v61 = v55;
      v60 = *v55;
      v59 = v61[1];
      v62 = ((unsigned __int16)(419 * (v60 >> 5)) ^ (unsigned __int16)(v59 >> 5)) & 0x3FF;
      while (1)
      {
        if (v53[v62] == 1)
        {
          v63 = (uint64_t *)&v52[6 * v62];
          v65 = *v63;
          v64 = v63[1];
          if (v65 == v59 && v64 == v60)
            break;
        }
        v62 = ((_WORD)v62 + 1) & 0x3FF;
        if (v62 == (((unsigned __int16)(419 * (v60 >> 5)) ^ (unsigned __int16)(v59 >> 5)) & 0x3FF))
          sub_2394BF3AC("", "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/3rd-party/CGAL/include/CGAL/Small_unordered_map.h", 98, "");
      }
      v53[v62] = -1;
      v67 = HIBYTE(LOWORD(v52[6 * v62 + 4]));
      result = v80[LOWORD(v52[6 * v62 + 4])];
      *(_QWORD *)(v57 + 8 * v58) = result;
      *(_QWORD *)(result + 8 * v67) = v57;
    }
    v42 = v11[v54 + 1025];
  }
  while (v42 != -2);
LABEL_51:
  v43 = *(_QWORD *)(a2 + 8);
  if (v43)
  {
    v44 = *(unint64_t ***)a2;
    v45 = 8 * v43;
    v46 = 8 * v43;
    v47 = *(unint64_t ***)a2;
    do
    {
      v48 = (uint64_t)*v47++;
      *(_BYTE *)(v48 + 64) = 0;
      v46 -= 8;
    }
    while (v46);
    v49 = (unint64_t *)a1[5];
    v50 = a1[3] - 1;
    do
    {
      v51 = *v44++;
      *v51 = (unint64_t)v49 & 0xFFFFFFFFFFFFFFFCLL | 2;
      a1[5] = v51;
      a1[3] = v50--;
      v49 = v51;
      v45 -= 8;
    }
    while (v45);
  }
  *v11 = -2;
  return result;
}

void sub_2394BF3AC(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  int v5;
  std::logic_error *exception;
  size_t v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  unint64_t v25;
  _QWORD v26[2];
  unint64_t v27;
  _QWORD __dst[2];
  unint64_t v29;
  char v30[24];

  v5 = a3;
  off_2569308C0("assertion", a1, a2, a3, a4);
  switch(dword_2569308C8)
  {
    case 2:
      exit(0);
    case 1:
      exit(1);
    case 0:
      abort();
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x78uLL);
  v30[23] = 4;
  strcpy(v30, "CGAL");
  v9 = strlen(a1);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v11 = operator new(v13 + 1);
    __dst[1] = v10;
    v29 = v14 | 0x8000000000000000;
    __dst[0] = v11;
  }
  else
  {
    HIBYTE(v29) = v9;
    v11 = __dst;
    if (!v9)
    {
      LOBYTE(__dst[0]) = 0;
      v12 = strlen(a2);
      if (v12 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  memcpy(v11, a1, v10);
  *((_BYTE *)v11 + v10) = 0;
  v12 = strlen(a2);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
LABEL_12:
    sub_23941A5AC();
LABEL_17:
  v15 = v12;
  if (v12 >= 0x17)
  {
    v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v17 = v12 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v26[1] = v15;
    v27 = v18 | 0x8000000000000000;
    v26[0] = v16;
  }
  else
  {
    HIBYTE(v27) = v12;
    v16 = v26;
    if (!v12)
    {
LABEL_24:
      *((_BYTE *)v16 + v15) = 0;
      v19 = strlen(a4);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v20 = v19;
      if (v19 >= 0x17)
      {
        v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v22 = v19 | 7;
        v23 = v22 + 1;
        v21 = operator new(v22 + 1);
        v24[1] = v20;
        v25 = v23 | 0x8000000000000000;
        v24[0] = v21;
      }
      else
      {
        HIBYTE(v25) = v19;
        v21 = v24;
        if (!v19)
        {
LABEL_33:
          *((_BYTE *)v21 + v20) = 0;
          sub_2394BFB4C(exception, (uint64_t)v30, (uint64_t)__dst, (uint64_t)v26, v5, (uint64_t)v24);
          __cxa_throw(exception, (struct type_info *)&unk_250ADCC70, (void (*)(void *))sub_2394BF6E8);
        }
      }
      memcpy(v21, a4, v20);
      goto LABEL_33;
    }
  }
  memcpy(v16, a2, v15);
  goto LABEL_24;
}

void sub_2394BF620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;

  if (a14 < 0)
  {
    operator delete(a9);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if (a32 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if (a32 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v33 & 1) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  if (!v33)
LABEL_6:
    _Unwind_Resume(a1);
LABEL_11:
  __cxa_free_exception(v32);
  _Unwind_Resume(a1);
}

void sub_2394BF6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v23);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2394BF6B4);
}

void sub_2394BF6E8(std::logic_error *this)
{
  this->__vftable = (std::logic_error_vtbl *)off_250ADCCC0;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_9:
      operator delete((void *)this[2].__imp_.__imp_);
      if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_10:
      operator delete(this[1].__vftable);
      std::logic_error::~logic_error(this);
      return;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4].__vftable);
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
    goto LABEL_9;
LABEL_4:
  if (SHIBYTE(this[2].__vftable) < 0)
    goto LABEL_10;
LABEL_5:
  std::logic_error::~logic_error(this);
}

uint64_t sub_2394BF77C(const char *a1, const char *a2, const char *a3, uint64_t a4, const char *a5)
{
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  std::locale v31;

  v9 = sub_239458500(MEMORY[0x24BEDB310], (uint64_t)"CGAL error: ", 12);
  v10 = strlen(a1);
  v11 = sub_239458500(v9, (uint64_t)a1, v10);
  v12 = sub_239458500(v11, (uint64_t)" violation!", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  v14 = sub_239458500(v12, (uint64_t)"Expression : ", 13);
  v15 = strlen(a2);
  v16 = sub_239458500(v14, (uint64_t)a2, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  v18 = sub_239458500(v16, (uint64_t)"File       : ", 13);
  v19 = strlen(a3);
  v20 = sub_239458500(v18, (uint64_t)a3, v19);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v21 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  sub_239458500(v20, (uint64_t)"Line       : ", 13);
  v22 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  v24 = sub_239458500(v22, (uint64_t)"Explanation: ", 13);
  v25 = strlen(a5);
  v26 = sub_239458500(v24, (uint64_t)a5, v25);
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
  v27 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  v28 = sub_239458500(v26, (uint64_t)"Refer to the bug-reporting instructions at https://www.cgal.org/bug_report.html", 79);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
  v29 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_2394BFAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_2394BFAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_2394BFAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_2394BFB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_2394BFB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_2394BFB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2394BFB4C(std::logic_error *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  char __p[20];
  char v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  __int128 __dst;
  uint64_t v21;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    __dst = *(_OWORD *)a2;
    v21 = *(_QWORD *)(a2 + 16);
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a3 + 16);
      goto LABEL_6;
    }
  }
  sub_23941A7F8(v18, *(void **)a3, *(_QWORD *)(a3 + 8));
LABEL_6:
  if (*(char *)(a4 + 23) < 0)
  {
    sub_23941A7F8(v16, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)a4;
    v17 = *(_QWORD *)(a4 + 16);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_23941A7F8(v14, *(void **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a6;
    v15 = *(_QWORD *)(a6 + 16);
  }
  v13 = 19;
  strcpy(__p, "assertion violation");
  sub_2394BFDB8(a1, &__dst, (__int128 *)v18, (__int128 *)v16, a5, (__int128 *)v14, (uint64_t)__p);
  if (v13 < 0)
  {
    operator delete(*(void **)__p);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v14[0]);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_21:
    operator delete(v18[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_22:
    operator delete((void *)__dst);
    goto LABEL_17;
  }
LABEL_20:
  operator delete(v16[0]);
  if (SHIBYTE(v19) < 0)
    goto LABEL_21;
LABEL_16:
  if (SHIBYTE(v21) < 0)
    goto LABEL_22;
LABEL_17:
  a1->__vftable = (std::logic_error_vtbl *)off_250ADCC98;
  return a1;
}

void sub_2394BFD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v35 - 57) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  if ((*(char *)(v35 - 57) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v35 - 80));
  _Unwind_Resume(exception_object);
}

std::logic_error *sub_2394BFDB8(std::logic_error *a1, __int128 *a2, __int128 *a3, __int128 *a4, int a5, __int128 *a6, uint64_t a7)
{
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string::size_type v26;
  uint64_t v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  unsigned int v32;
  void **v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  std::string::size_type size;
  std::string *v50;
  std::string *v51;
  unint64_t v52;
  std::string::value_type *v53;
  __int128 *v54;
  std::string::size_type *v55;
  unint64_t v56;
  __int128 v57;
  std::string::value_type v58;
  int v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  std::string::size_type v64;
  uint64_t v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  std::string *v68;
  __int128 v69;
  unsigned int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  uint64_t v75;
  std::logic_error *v76;
  std::logic_error v77;
  __int128 v78;
  std::logic_error v79;
  std::logic_error *v80;
  std::logic_error v81;
  uint64_t v83;
  std::string v84;
  std::string::value_type v85[8];
  char v86;
  std::string::value_type v87[8];
  char v88;
  std::string v89;
  void *__p[2];
  std::string::size_type v91;
  std::string::value_type __s[8];
  char v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  __int128 v105;
  std::string::size_type v106;
  char *v107;
  char *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)&v94.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v94, " ERROR: ");
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a2;
  else
    v15 = *(const std::string::value_type **)a2;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)a2 + 23);
  else
    v16 = *((_QWORD *)a2 + 1);
  v17 = std::string::insert(&v94, 0, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  v19 = *(char *)(a7 + 23);
  if (v19 >= 0)
    v20 = (const std::string::value_type *)a7;
  else
    v20 = *(const std::string::value_type **)a7;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a7 + 23);
  else
    v21 = *(_QWORD *)(a7 + 8);
  v22 = std::string::append(&v95, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v96.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v93 = 1;
  strcpy(__s, "!");
  v24 = std::string::append(&v96, __s, 1uLL);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v97.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  v26 = *((unsigned __int8 *)a3 + 23);
  if (*((char *)a3 + 23) < 0)
  {
    v27 = *((_QWORD *)a3 + 1);
    if (v27)
      goto LABEL_15;
LABEL_23:
    v32 = 0;
    HIBYTE(v91) = 0;
    LOBYTE(__p[0]) = 0;
    goto LABEL_24;
  }
  v27 = *((unsigned __int8 *)a3 + 23);
  if (!*((_BYTE *)a3 + 23))
    goto LABEL_23;
LABEL_15:
  *((_BYTE *)&v89.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v89, "\nExpr: ");
  if ((v26 & 0x80u) == 0)
    v28 = (const std::string::value_type *)a3;
  else
    v28 = *(const std::string::value_type **)a3;
  if ((v26 & 0x80u) == 0)
    v29 = v26;
  else
    v29 = *((_QWORD *)a3 + 1);
  v30 = std::string::append(&v89, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v91 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = HIBYTE(v91);
LABEL_24:
  if ((v32 & 0x80u) == 0)
    v33 = __p;
  else
    v33 = (void **)__p[0];
  if ((v32 & 0x80u) == 0)
    v34 = v32;
  else
    v34 = (std::string::size_type)__p[1];
  v83 = v27;
  v35 = std::string::append(&v97, (const std::string::value_type *)v33, v34);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v88 = 7;
  strcpy(v87, "\nFile: ");
  v37 = std::string::append(&v98, v87, 7uLL);
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v99.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = *((char *)a4 + 23);
  if (v39 >= 0)
    v40 = (const std::string::value_type *)a4;
  else
    v40 = *(const std::string::value_type **)a4;
  if (v39 >= 0)
    v41 = *((unsigned __int8 *)a4 + 23);
  else
    v41 = *((_QWORD *)a4 + 1);
  v42 = std::string::append(&v99, v40, v41);
  v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v86 = 7;
  strcpy(v85, "\nLine: ");
  v44 = std::string::append(&v100, v85, 7uLL);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  memset(&v84, 0, sizeof(v84));
  v107 = (char *)&v105 + 2;
  v108 = (char *)&v106 + 7;
  if (a5 >= 0)
    v46 = a5;
  else
    v46 = -a5;
  LODWORD(v104.__r_.__value_.__l.__data_) = v46;
  v104.__r_.__value_.__l.__size_ = (std::string::size_type)&v106 + 7;
  v104.__r_.__value_.__s.__data_[16] = 48;
  HIDWORD(v104.__r_.__value_.__r.__words[2]) = 48;
  v47 = sub_2394C0A48((uint64_t)&v104);
  v48 = (_QWORD *)v47;
  if (a5 < 0)
  {
    *(_BYTE *)(v47 - 1) = 45;
    v48 = (_QWORD *)(v47 - 1);
    v107 = (char *)(v47 - 1);
    v108 = (char *)&v106 + 7;
    size = (std::string::size_type)&v106 - v47 + 8;
    if (size >= 0x17)
    {
LABEL_41:
      std::string::__grow_by(&v84, 0x16uLL, size - 22, 0, 0, 0, 0);
      v84.__r_.__value_.__l.__size_ = 0;
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v84;
      else
        v50 = (std::string *)v84.__r_.__value_.__r.__words[0];
      if (v48 == (std::string::size_type *)((char *)&v106 + 7))
        goto LABEL_45;
      goto LABEL_48;
    }
  }
  else
  {
    v107 = (char *)v47;
    v108 = (char *)&v106 + 7;
    size = (std::string::size_type)&v106 - v47 + 7;
    if ((unint64_t)&v106 - v47 + 7 >= 0x17)
      goto LABEL_41;
  }
  v50 = &v84;
  if (v48 == (std::string::size_type *)((char *)&v106 + 7))
  {
LABEL_45:
    v51 = v50;
    goto LABEL_56;
  }
LABEL_48:
  v52 = (char *)&v105 - (char *)v48 + 23;
  if (v52 < 0x20 || (unint64_t)((char *)v50 - (char *)v48) < 0x20)
  {
    v51 = v50;
    v53 = (std::string::value_type *)v48;
  }
  else
  {
    v51 = (std::string *)((char *)v50 + (v52 & 0xFFFFFFFFFFFFFFE0));
    v53 = (char *)v48 + (v52 & 0xFFFFFFFFFFFFFFE0);
    v54 = (__int128 *)(v48 + 2);
    v55 = &v50->__r_.__value_.__r.__words[2];
    v56 = v52 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v57 = *v54;
      *((_OWORD *)v55 - 1) = *(v54 - 1);
      *(_OWORD *)v55 = v57;
      v54 += 2;
      v55 += 4;
      v56 -= 32;
    }
    while (v56);
    if (v52 == (v52 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_56;
  }
  do
  {
    v58 = *v53++;
    v51->__r_.__value_.__s.__data_[0] = v58;
    v51 = (std::string *)((char *)v51 + 1);
  }
  while (v53 != (char *)&v106 + 7);
LABEL_56:
  v51->__r_.__value_.__s.__data_[0] = 0;
  v59 = SHIBYTE(v84.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
  {
    v84.__r_.__value_.__l.__size_ = size;
  }
  else
  {
    v59 = size & 0x7F;
    *((_BYTE *)&v84.__r_.__value_.__s + 23) = size & 0x7F;
    size = v84.__r_.__value_.__l.__size_;
  }
  if (v59 >= 0)
    v60 = &v84;
  else
    v60 = (std::string *)v84.__r_.__value_.__r.__words[0];
  if (v59 >= 0)
    v61 = v59;
  else
    v61 = size;
  v62 = std::string::append(&v101, (const std::string::value_type *)v60, v61);
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = *((unsigned __int8 *)a6 + 23);
  if (*((char *)a6 + 23) < 0)
  {
    v65 = *((_QWORD *)a6 + 1);
    if (v65)
      goto LABEL_67;
LABEL_75:
    v70 = 0;
    HIBYTE(v106) = 0;
    LOBYTE(v105) = 0;
    goto LABEL_76;
  }
  v65 = *((unsigned __int8 *)a6 + 23);
  if (!*((_BYTE *)a6 + 23))
    goto LABEL_75;
LABEL_67:
  *((_BYTE *)&v104.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v104, "\nExplanation: ");
  if ((v64 & 0x80u) == 0)
    v66 = (const std::string::value_type *)a6;
  else
    v66 = *(const std::string::value_type **)a6;
  if ((v64 & 0x80u) == 0)
    v67 = v64;
  else
    v67 = *((_QWORD *)a6 + 1);
  v68 = std::string::append(&v104, v66, v67);
  v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
  v106 = v68->__r_.__value_.__r.__words[2];
  v105 = v69;
  v68->__r_.__value_.__l.__size_ = 0;
  v68->__r_.__value_.__r.__words[2] = 0;
  v68->__r_.__value_.__r.__words[0] = 0;
  v70 = HIBYTE(v106);
LABEL_76:
  if ((v70 & 0x80u) == 0)
    v71 = (const std::string::value_type *)&v105;
  else
    v71 = (const std::string::value_type *)v105;
  if ((v70 & 0x80u) == 0)
    v72 = v70;
  else
    v72 = *((_QWORD *)&v105 + 1);
  v73 = std::string::append(&v102, v71, v72);
  v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v103.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(a1, &v103);
  if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v106) & 0x80000000) == 0)
      goto LABEL_84;
LABEL_87:
    operator delete((void *)v105);
    if (!v65)
      goto LABEL_89;
    goto LABEL_88;
  }
  operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v106) < 0)
    goto LABEL_87;
LABEL_84:
  if (!v65)
  {
LABEL_89:
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_101;
  }
LABEL_88:
  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_89;
  operator delete(v104.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    v75 = v83;
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v102.__r_.__value_.__l.__data_);
  v75 = v83;
  if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v84.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_92:
    if ((v86 & 0x80000000) == 0)
      goto LABEL_93;
    goto LABEL_104;
  }
LABEL_103:
  operator delete(v101.__r_.__value_.__l.__data_);
  if ((v86 & 0x80000000) == 0)
  {
LABEL_93:
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_105;
  }
LABEL_104:
  operator delete(*(void **)v85);
  if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_94:
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_95;
    goto LABEL_106;
  }
LABEL_105:
  operator delete(v100.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_95:
    if ((v88 & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_107;
  }
LABEL_106:
  operator delete(v99.__r_.__value_.__l.__data_);
  if ((v88 & 0x80000000) == 0)
  {
LABEL_96:
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_97;
    goto LABEL_108;
  }
LABEL_107:
  operator delete(*(void **)v87);
  if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_97:
    if ((SHIBYTE(v91) & 0x80000000) == 0)
      goto LABEL_98;
LABEL_109:
    operator delete(__p[0]);
    if (!v75)
      goto LABEL_111;
    goto LABEL_110;
  }
LABEL_108:
  operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91) < 0)
    goto LABEL_109;
LABEL_98:
  if (!v75)
  {
LABEL_111:
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_112;
    goto LABEL_119;
  }
LABEL_110:
  if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_111;
  operator delete(v89.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_112:
    if ((v93 & 0x80000000) == 0)
      goto LABEL_113;
    goto LABEL_120;
  }
LABEL_119:
  operator delete(v97.__r_.__value_.__l.__data_);
  if ((v93 & 0x80000000) == 0)
  {
LABEL_113:
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_114;
    goto LABEL_121;
  }
LABEL_120:
  operator delete(*(void **)__s);
  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_114:
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_115;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v96.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_115:
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_116;
LABEL_123:
    operator delete(v94.__r_.__value_.__l.__data_);
    a1->__vftable = (std::logic_error_vtbl *)off_250ADCCC0;
    v76 = a1 + 1;
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_117;
    goto LABEL_124;
  }
LABEL_122:
  operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_123;
LABEL_116:
  a1->__vftable = (std::logic_error_vtbl *)off_250ADCCC0;
  v76 = a1 + 1;
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_117:
    v77 = (std::logic_error)*a2;
    v76[1].__vftable = (std::logic_error_vtbl *)*((_QWORD *)a2 + 2);
    *v76 = v77;
    goto LABEL_125;
  }
LABEL_124:
  sub_23941A7F8(v76, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_125:
  if (*((char *)a3 + 23) < 0)
  {
    sub_23941A7F8(&a1[2].__imp_, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v78 = *a3;
    a1[3].__imp_.__imp_ = (const char *)*((_QWORD *)a3 + 2);
    *(_OWORD *)&a1[2].__imp_.__imp_ = v78;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_23941A7F8(&a1[4], *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v79 = (std::logic_error)*a4;
    a1[5].__vftable = (std::logic_error_vtbl *)*((_QWORD *)a4 + 2);
    a1[4] = v79;
  }
  LODWORD(a1[5].__imp_.__imp_) = a5;
  v80 = a1 + 6;
  if (*((char *)a6 + 23) < 0)
  {
    sub_23941A7F8(v80, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v81 = (std::logic_error)*a6;
    a1[7].__vftable = (std::logic_error_vtbl *)*((_QWORD *)a6 + 2);
    *v80 = v81;
  }
  return a1;
}

void sub_2394C0590(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 63) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 39) & 0x80000000) == 0)
      {
LABEL_8:
        std::logic_error::~logic_error((std::logic_error *)v1);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*v4);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((*(char *)(v1 + 39) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_2394C0610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  uint64_t v78;

  if (*(char *)(v78 - 145) < 0)
    operator delete(*(void **)(v78 - 168));
  if (*(char *)(v78 - 201) < 0)
  {
    operator delete(*(void **)(v78 - 224));
    if ((a16 & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(v78 - 233) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_16;
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((*(char *)(v78 - 233) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(*(void **)(v78 - 256));
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(a17);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a28 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(a75);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a23);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a40 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(a73);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_12:
    if (!a10)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a35);
  if (!a10)
    goto LABEL_25;
LABEL_23:
  if (a34 < 0)
    operator delete(a29);
LABEL_25:
  if (a72 < 0)
  {
    operator delete(a68);
    if ((a47 & 0x80000000) == 0)
    {
LABEL_27:
      if ((a66 & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_33;
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(a42);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_28:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_29:
    if (a53 < 0)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a54);
  if (a53 < 0)
  {
LABEL_30:
    operator delete(a48);
    _Unwind_Resume(a1);
  }
LABEL_35:
  _Unwind_Resume(a1);
}

void sub_2394C087C(std::logic_error *this)
{
  this->__vftable = (std::logic_error_vtbl *)off_250ADCCC0;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4].__vftable);
  if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      std::logic_error::~logic_error(this);
      JUMPOUT(0x23B83E31CLL);
    }
LABEL_9:
    operator delete(this[1].__vftable);
    goto LABEL_5;
  }
LABEL_8:
  operator delete((void *)this[2].__imp_.__imp_);
  if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_9;
}

void sub_2394C0918(std::logic_error *this)
{
  this->__vftable = (std::logic_error_vtbl *)off_250ADCCC0;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_9:
      operator delete((void *)this[2].__imp_.__imp_);
      if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
        goto LABEL_5;
LABEL_10:
      operator delete(this[1].__vftable);
      std::logic_error::~logic_error(this);
      return;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4].__vftable);
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
    goto LABEL_9;
LABEL_4:
  if (SHIBYTE(this[2].__vftable) < 0)
    goto LABEL_10;
LABEL_5:
  std::logic_error::~logic_error(this);
}

void sub_2394C09AC(std::logic_error *this)
{
  this->__vftable = (std::logic_error_vtbl *)off_250ADCCC0;
  if (SHIBYTE(this[7].__vftable) < 0)
  {
    operator delete(this[6].__vftable);
    if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(this[5].__vftable) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[4].__vftable);
  if ((SHIBYTE(this[3].__imp_.__imp_) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
    {
LABEL_5:
      std::logic_error::~logic_error(this);
      JUMPOUT(0x23B83E31CLL);
    }
LABEL_9:
    operator delete(this[1].__vftable);
    goto LABEL_5;
  }
LABEL_8:
  operator delete((void *)this[2].__imp_.__imp_);
  if ((SHIBYTE(this[2].__vftable) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_9;
}

uint64_t sub_2394C0A48(uint64_t a1)
{
  const std::locale *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  const std::locale::facet *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE *p_p;
  uint64_t *v11;
  int v12;
  char v13;
  _BYTE *v14;
  uint64_t v15;
  void **v16;
  unsigned int v17;
  uint64_t v18;
  void *__p;
  unint64_t v21;
  unsigned __int8 v22;
  std::locale v23;

  MEMORY[0x23B83E1E4](&v23);
  v2 = std::locale::classic();
  if (std::locale::operator==(&v23, v2))
  {
    v3 = *(_DWORD *)a1;
    do
    {
      v4 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4 - 1;
      *(_BYTE *)(v4 - 1) = *(_DWORD *)(a1 + 20) + v3 % 0xA;
      LODWORD(v4) = *(_DWORD *)a1;
      v3 = *(_DWORD *)a1 / 0xAu;
      *(_DWORD *)a1 = v3;
    }
    while (v4 > 9);
    v5 = *(_QWORD *)(a1 + 8);
    goto LABEL_28;
  }
  v6 = std::locale::use_facet(&v23, MEMORY[0x24BEDB588]);
  ((void (*)(void **__return_ptr))v6->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v22 < 0)
  {
    v7 = v21;
    if (!v21 || *(char *)__p <= 0)
      goto LABEL_24;
LABEL_11:
    v8 = ((uint64_t (*)(const std::locale::facet *))v6->__vftable[1].~facet_0)(v6);
    v9 = 0;
    p_p = __p;
    if ((v22 & 0x80u) == 0)
      p_p = &__p;
    v11 = (uint64_t *)(a1 + 8);
    LOBYTE(v12) = *p_p;
    v13 = *p_p;
    do
    {
      if (!v13)
      {
        if (++v9 < v7)
        {
          v16 = (v22 & 0x80u) == 0 ? &__p : (void **)__p;
          v12 = *((char *)v16 + v9);
          if (v12 < 1)
            LOBYTE(v12) = 127;
        }
        v14 = (_BYTE *)(*v11 - 1);
        *v11 = (uint64_t)v14;
        *v14 = v8;
        v13 = v12;
      }
      --v13;
      v15 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v15 - 1;
      *(_BYTE *)(v15 - 1) = *(_DWORD *)(a1 + 20) + *(_DWORD *)a1 % 0xAu;
      LODWORD(v15) = *(_DWORD *)a1;
      *(_DWORD *)a1 /= 0xAu;
    }
    while (v15 > 9);
    goto LABEL_26;
  }
  v7 = v22;
  if (v22 && (char)__p > 0)
    goto LABEL_11;
LABEL_24:
  v11 = (uint64_t *)(a1 + 8);
  v17 = *(_DWORD *)a1;
  do
  {
    v18 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v18 - 1;
    *(_BYTE *)(v18 - 1) = *(_DWORD *)(a1 + 20) + v17 % 0xA;
    LODWORD(v18) = *(_DWORD *)a1;
    v17 = *(_DWORD *)a1 / 0xAu;
    *(_DWORD *)a1 = v17;
  }
  while (v18 > 9);
LABEL_26:
  v5 = *v11;
  if ((char)v22 < 0)
    operator delete(__p);
LABEL_28:
  std::locale::~locale(&v23);
  return v5;
}

void sub_2394C0C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

void sub_2394C0CC8(_QWORD *a1@<X0>, unint64_t ***a2@<X1>, unint64_t ***a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t **v9;
  unint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a2;
  v10 = *a3;
  v11 = *a4;
  v12 = a1[16];
  if (!v12)
  {
    sub_2394B61FC(a1 + 12);
    v12 = a1[16];
  }
  a1[16] = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 0;
  ++a1[14];
  if (*(_DWORD *)a1 == 3)
  {
    v17 = v11;
    v18 = v12;
    sub_2394C1034(a1, &v18, &v17, a5, 0xFFFFFFFFLL, 0, &v16);
    *(_QWORD *)v12 = v16;
    if (v9 == v10)
      goto LABEL_9;
  }
  else
  {
    v16 = v11;
    v17 = v12;
    sub_2394C0DF4(a1, &v17, &v16, a5, &v18);
    *(_QWORD *)v12 = v18;
    if (v9 == v10)
      goto LABEL_9;
  }
  v13 = (unint64_t *)a1[5];
  v14 = a1[3] - 1;
  do
  {
    v15 = *v9++;
    *v15 = (unint64_t)v13 & 0xFFFFFFFFFFFFFFFCLL | 2;
    a1[5] = v15;
    a1[3] = v14--;
    v13 = v15;
  }
  while (v9 != v10);
LABEL_9:
  *a6 = v12;
}

_QWORD *sub_2394C0DF4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v6 = a5;
  *a5 = 0;
  v7 = dword_239EC6C60[a4];
  v8 = *a3;
  v9 = *(_QWORD **)(*a3 + 8 * v7 + 32);
  v10 = *(_QWORD **)(*a3 + 8 * a4);
  if (*a3 == *v10)
  {
    v28 = 0;
  }
  else
  {
    if (v8 == v10[1])
    {
      v12 = 1;
    }
    else
    {
      v11 = v8 == v10[2];
      v12 = 2;
      if (!v11)
        v12 = 3;
    }
    v28 = v12;
  }
  v13 = 0;
  v29 = a4;
  v30 = result + 1;
  v14 = 0uLL;
  v15 = dword_239EC6C60[a4];
  v33 = a2;
  v34 = v6;
  v31 = v15;
  v32 = result;
  do
  {
    while (1)
    {
      v16 = dword_239EC6C6C[v15];
      v17 = *(_QWORD *)(v8 + 8 * v16);
      if (*(_BYTE *)(v17 + 64) != 1)
        break;
      v8 = *(_QWORD *)(v8 + 8 * v16);
      if (v9 == *(_QWORD **)(v17 + 32))
      {
        v15 = 0;
      }
      else if (v9 == *(_QWORD **)(v8 + 40))
      {
        v15 = 1;
      }
      else if (v9 == *(_QWORD **)(v8 + 48))
      {
        v15 = 2;
      }
      else
      {
        v15 = 3;
      }
    }
    *(_BYTE *)(v17 + 64) = 0;
    v18 = *a2;
    v15 = dword_239EC6C60[v15];
    v19 = v8 + 8 * v15;
    v22 = *(_QWORD *)(v19 + 32);
    v20 = (_QWORD **)(v19 + 32);
    v21 = v22;
    v23 = result[5];
    if (!v23)
    {
      sub_2394B6434(v30);
      v14 = 0uLL;
      v7 = v31;
      result = v32;
      a2 = v33;
      v6 = v34;
      v23 = v32[5];
    }
    result[5] = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFFCLL;
    *(_OWORD *)v23 = v14;
    *(_OWORD *)(v23 + 16) = v14;
    *(_QWORD *)(v23 + 32) = v18;
    *(_QWORD *)(v23 + 40) = v9;
    *(_QWORD *)(v23 + 48) = v21;
    *(_QWORD *)(v23 + 56) = 0;
    *(_BYTE *)(v23 + 64) = 0;
    ++result[3];
    *v6 = v23;
    v24 = *(_QWORD **)(v8 + 8 * v16);
    if (v8 == *v24)
    {
      *(_QWORD *)v23 = v24;
      *v24 = v23;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = v13;
      *v9 = v23;
      if (!v13)
        goto LABEL_29;
LABEL_28:
      *(_QWORD *)(v13 + 8) = v23;
      goto LABEL_29;
    }
    if (v8 == v24[1])
    {
      *(_QWORD *)v23 = v24;
      v24[1] = v23;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = v13;
      *v9 = v23;
      if (v13)
        goto LABEL_28;
    }
    else
    {
      if (v8 == v24[2])
        v25 = 2;
      else
        v25 = 3;
      *(_QWORD *)v23 = v24;
      v24[v25] = v23;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = v13;
      *v9 = v23;
      if (v13)
        goto LABEL_28;
    }
LABEL_29:
    v9 = *v20;
    v13 = v23;
  }
  while (*v20 != *(_QWORD **)(*a3 + 8 * v7 + 32));
  v26 = *(_QWORD *)(*(_QWORD *)(*a3 + 8 * v29) + 8 * v28);
  v27 = *v6;
  *(_QWORD *)(v27 + 8) = v26;
  *(_QWORD *)(v26 + 16) = v27;
  return result;
}

void sub_2394C1034(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  unsigned int v7;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v7 = a5;
  if (a6 != 100)
  {
    v15 = *(_OWORD *)(*a3 + 32);
    v16 = *(_OWORD *)(*a3 + 48);
    v17 = a1[5];
    if (!v17)
    {
      v41 = *(_OWORD *)(*a3 + 48);
      v42 = *(_OWORD *)(*a3 + 32);
      sub_2394B6434(a1 + 1);
      v16 = v41;
      v15 = v42;
      v17 = a1[5];
    }
    a1[5] = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFCLL;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_OWORD *)(v17 + 32) = v15;
    *(_OWORD *)(v17 + 48) = v16;
    *(_BYTE *)(v17 + 64) = 0;
    ++a1[3];
    *a7 = v17;
    v18 = 8 * a4;
    *(_QWORD *)(v17 + 32 + v18) = *a2;
    v19 = *a3;
    v20 = *(_QWORD **)(*a3 + v18);
    if (*a3 == *v20)
    {
      v22 = 0;
    }
    else if (v19 == v20[1])
    {
      v22 = 1;
    }
    else
    {
      v21 = v19 == v20[2];
      v22 = 2;
      if (!v21)
        v22 = 3;
    }
    v23 = 0;
    *(_QWORD *)(v17 + 8 * a4) = v20;
    v20[v22] = v17;
    v24 = v7;
    while (1)
    {
      if (v23 == v24 || *(_QWORD *)(v17 + 8 * v23))
        goto LABEL_15;
      **(_QWORD **)(v17 + 8 * v23 + 32) = v17;
      v25 = (_QWORD *)*a3;
      v26 = *a3 + 32;
      v27 = *(_QWORD *)(v26 + 8 * byte_239EC6C50[4 * v23 + a4]);
      v28 = *(_QWORD *)(v26 + 8 * byte_239EC6C50[4 * a4 + v23]);
      v29 = *(_QWORD *)(*a3 + 8 * v23);
      if (*(_BYTE *)(v29 + 64) == 1)
        break;
      v30 = v23;
LABEL_20:
      *(_BYTE *)(v29 + 64) = 0;
      v31 = *(_QWORD *)(v29 + 32);
      if (v27 == v31)
      {
        v32 = 0;
        if (v28 == v31)
          goto LABEL_50;
      }
      else if (v27 == *(_QWORD *)(v29 + 40))
      {
        v32 = 1;
        if (v28 == v31)
          goto LABEL_50;
      }
      else
      {
        if (v27 == *(_QWORD *)(v29 + 48))
          v32 = 2;
        else
          v32 = 3;
        if (v28 == v31)
        {
LABEL_50:
          v36 = 0;
          goto LABEL_52;
        }
      }
      if (v28 == *(_QWORD *)(v29 + 40))
      {
        v36 = 1;
      }
      else if (v28 == *(_QWORD *)(v29 + 48))
      {
        v36 = 2;
      }
      else
      {
        v36 = 3;
      }
LABEL_52:
      v37 = *(_QWORD *)(v29 + 8 * byte_239EC6C50[4 * v32 + v36] + 32);
      v38 = *(_QWORD **)(v29 + 8 * byte_239EC6C50[4 * v36 + v32]);
      if (v37 == v38[4])
      {
        v39 = 0;
        if (v38 == v25)
          goto LABEL_62;
      }
      else
      {
        if (v37 != v38[5])
        {
          if (v37 == v38[6])
            v39 = 2;
          else
            v39 = 3;
          if (v38 != v25)
            goto LABEL_14;
LABEL_62:
          v40 = *a2;
          v43 = v25;
          v44 = v40;
          sub_2394C1034(&v45, a1, &v44, &v43, v30, v39, (a6 + 1));
          v38 = v45;
          goto LABEL_14;
        }
        v39 = 1;
        if (v38 == v25)
          goto LABEL_62;
      }
LABEL_14:
      v38[v39] = v17;
      *(_QWORD *)(v17 + 8 * v23) = v38;
LABEL_15:
      if (++v23 == 4)
        return;
    }
    while (1)
    {
      v25 = (_QWORD *)v29;
      v34 = *(_QWORD *)(v29 + 32);
      if (v27 == v34)
      {
        v35 = 0;
        if (v28 != v34)
          goto LABEL_39;
      }
      else if (v27 == *(_QWORD *)(v29 + 40))
      {
        v35 = 1;
        if (v28 != v34)
          goto LABEL_39;
      }
      else
      {
        if (v27 == *(_QWORD *)(v29 + 48))
          v35 = 2;
        else
          v35 = 3;
        if (v28 != v34)
        {
LABEL_39:
          if (v28 == v25[5])
          {
            v33 = 1;
          }
          else if (v28 == v25[6])
          {
            v33 = 2;
          }
          else
          {
            v33 = 3;
          }
          goto LABEL_28;
        }
      }
      v33 = 0;
LABEL_28:
      v30 = byte_239EC6C50[4 * v35 + v33];
      v29 = v25[v30];
      if (*(_BYTE *)(v29 + 64) != 1)
        goto LABEL_20;
    }
  }
  v13 = *a2;
  v46 = *a3;
  v47 = v13;
  sub_2394C1390(a1, &v47, &v46, a4, a5, a7);
}

void sub_2394C1390(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  void **v56;
  void **v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  unsigned int v65;
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 v69;
  _QWORD *v70;
  void *__p[2];
  __int128 v72;
  __int128 v73;

  v12 = *(_OWORD *)(*a3 + 32);
  v13 = *(_OWORD *)(*a3 + 48);
  v14 = a1[5];
  if (!v14)
  {
    v69 = *(_OWORD *)(*a3 + 32);
    v66 = *(_OWORD *)(*a3 + 48);
    sub_2394B6434(a1 + 1);
    v13 = v66;
    v12 = v69;
    v14 = a1[5];
  }
  a1[5] = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)(v14 + 32) = v12;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 48) = v13;
  *(_BYTE *)(v14 + 64) = 0;
  ++a1[3];
  *a6 = v14;
  v15 = 8 * a4;
  *(_QWORD *)(v14 + 32 + v15) = *a2;
  v16 = *a3;
  v17 = *(_QWORD **)(*a3 + v15);
  v68 = a2;
  if (*a3 == *v17)
  {
    v19 = 0;
  }
  else if (v16 == v17[1])
  {
    v19 = 1;
  }
  else
  {
    v18 = v16 == v17[2];
    v19 = 2;
    if (!v18)
      v19 = 3;
  }
  v20 = 0;
  *(_QWORD *)(v14 + 8 * a4) = v17;
  v17[v19] = v14;
  v70 = a1;
  v67 = a1 + 1;
  v72 = 0uLL;
  v73 = 0uLL;
  *(_OWORD *)__p = 0uLL;
  do
  {
LABEL_11:
    while (2)
    {
      while (v20 == (_DWORD)a5 || *(_QWORD *)(v14 + 8 * (int)v20))
      {
        if (++v20 == 4)
          goto LABEL_58;
      }
      **(_QWORD **)(v14 + 8 * v20 + 32) = v14;
      v21 = *a3;
      v22 = *a3 + 32;
      v23 = *(_QWORD *)(v22 + 8 * byte_239EC6C50[4 * v20 + a4]);
      v24 = *(_QWORD *)(v22 + 8 * byte_239EC6C50[4 * a4 + v20]);
      v25 = *(_QWORD *)(*a3 + 8 * (int)v20);
      if (*(_BYTE *)(v25 + 64) != 1)
      {
        v26 = v20;
        *(_BYTE *)(v25 + 64) = 0;
        v27 = *(_QWORD *)(v25 + 32);
        if (v23 == v27)
          goto LABEL_39;
        goto LABEL_17;
      }
      do
      {
        v21 = v25;
        v31 = *(_QWORD *)(v25 + 32);
        if (v23 == v31)
        {
          v32 = 0;
          if (v24 == v31)
            goto LABEL_22;
        }
        else if (v23 == *(_QWORD *)(v25 + 40))
        {
          v32 = 1;
          if (v24 == v31)
            goto LABEL_22;
        }
        else
        {
          v32 = 2;
          if (v23 != *(_QWORD *)(v21 + 48))
            v32 = 3;
          if (v24 == v31)
          {
LABEL_22:
            v29 = 0;
            goto LABEL_23;
          }
        }
        if (v24 == *(_QWORD *)(v21 + 40))
        {
          v29 = 1;
        }
        else
        {
          v29 = 2;
          if (v24 != *(_QWORD *)(v21 + 48))
            v29 = 3;
        }
LABEL_23:
        v30 = byte_239EC6C50[4 * v32 + v29];
        v25 = *(_QWORD *)(v21 + 8 * v30);
      }
      while (*(_BYTE *)(v25 + 64) == 1);
      v26 = v30;
      *(_BYTE *)(v25 + 64) = 0;
      v27 = *(_QWORD *)(v25 + 32);
      if (v23 == v27)
      {
LABEL_39:
        v28 = 0;
        if (v24 != v27)
          goto LABEL_40;
LABEL_45:
        v33 = 0;
        goto LABEL_47;
      }
LABEL_17:
      if (v23 == *(_QWORD *)(v25 + 40))
      {
        v28 = 1;
        if (v24 != v27)
          goto LABEL_40;
        goto LABEL_45;
      }
      v18 = v23 == *(_QWORD *)(v25 + 48);
      v28 = 2;
      if (!v18)
        v28 = 3;
      if (v24 == v27)
        goto LABEL_45;
LABEL_40:
      if (v24 == *(_QWORD *)(v25 + 40))
      {
        v33 = 1;
      }
      else
      {
        v18 = v24 == *(_QWORD *)(v25 + 48);
        v33 = 2;
        if (!v18)
          v33 = 3;
      }
LABEL_47:
      v34 = *(_QWORD *)(v25 + 8 * byte_239EC6C50[4 * v28 + v33] + 32);
      v35 = *(_QWORD **)(v25 + 8 * byte_239EC6C50[4 * v33 + v28]);
      if (v34 == v35[4])
      {
        v36 = 0;
        if (v35 == (_QWORD *)v21)
          goto LABEL_65;
      }
      else if (v34 == v35[5])
      {
        v36 = 1;
        if (v35 == (_QWORD *)v21)
          goto LABEL_65;
      }
      else
      {
        if (v34 == v35[6])
          v36 = 2;
        else
          v36 = 3;
        if (v35 == (_QWORD *)v21)
        {
LABEL_65:
          v65 = v36;
          v45 = __p[1];
          v63 = *a3;
          if ((void *)v72 == __p[1])
            v46 = 0;
          else
            v46 = 102 * ((uint64_t)(v72 - (unint64_t)__p[1]) >> 3) - 1;
          v47 = *((_QWORD *)&v73 + 1) + v73;
          if (v46 == *((_QWORD *)&v73 + 1) + (_QWORD)v73)
          {
            sub_2394C19E0((uint64_t)__p);
            v45 = __p[1];
            v47 = *((_QWORD *)&v73 + 1) + v73;
          }
          v48 = v45[v47 / 0x66] + 40 * (v47 % 0x66);
          *(_DWORD *)v48 = v65;
          *(_QWORD *)(v48 + 8) = v14;
          *(_DWORD *)(v48 + 16) = v20;
          *(_QWORD *)(v48 + 24) = v63;
          *(_QWORD *)(v48 + 32) = a4 | (unint64_t)(a5 << 32);
          ++*((_QWORD *)&v73 + 1);
          *a3 = v21;
          v49 = *(_OWORD *)(v21 + 32);
          v50 = *(_OWORD *)(v21 + 48);
          v51 = v70;
          v14 = v70[5];
          if (!v14)
          {
            v62 = *(_OWORD *)(v21 + 48);
            v64 = *(_OWORD *)(v21 + 32);
            sub_2394B6434(v67);
            v51 = v70;
            v14 = v70[5];
            v50 = v62;
            v49 = v64;
          }
          v51[5] = *(_QWORD *)v14 & 0xFFFFFFFFFFFFFFFCLL;
          *(_OWORD *)v14 = 0u;
          *(_OWORD *)(v14 + 16) = 0u;
          *(_OWORD *)(v14 + 32) = v49;
          *(_OWORD *)(v14 + 48) = v50;
          *(_BYTE *)(v14 + 64) = 0;
          ++v51[3];
          v52 = 8 * v26;
          *(_QWORD *)(v14 + 32 + v52) = *v68;
          *a6 = v14;
          v53 = *a3;
          v54 = *(_QWORD **)(*a3 + v52);
          if (*a3 == *v54)
          {
            v55 = 0;
          }
          else if (v53 == v54[1])
          {
            v55 = 1;
          }
          else
          {
            v18 = v53 == v54[2];
            v55 = 2;
            if (!v18)
              v55 = 3;
          }
          v20 = 0;
          *(_QWORD *)(v14 + 8 * v26) = v54;
          v54[v55] = v14;
          a5 = v65;
          a4 = v26;
          continue;
        }
      }
      break;
    }
    v35[v36] = v14;
    *(_QWORD *)(v14 + 8 * (int)v20) = v35;
    v14 = *a6;
    ++v20;
  }
  while (v20 != 4);
LABEL_58:
  while (1)
  {
    v37 = *((_QWORD *)&v73 + 1);
    if (!*((_QWORD *)&v73 + 1))
      break;
    v38 = v72;
    v39 = 102 * ((uint64_t)(v72 - (unint64_t)__p[1]) >> 3) - 1;
    v40 = v73;
    if ((void *)v72 == __p[1])
      v39 = 0;
    v41 = (int *)(*((_QWORD *)__p[1] + ((uint64_t)v73 + *((_QWORD *)&v73 + 1) - 1) / 0x66uLL)
                + 40 * (((uint64_t)v73 + *((_QWORD *)&v73 + 1) - 1) % 0x66uLL));
    v42 = *v41;
    v43 = *((_QWORD *)v41 + 1);
    *a6 = v43;
    v44 = v41[4];
    *a3 = *((_QWORD *)v41 + 3);
    a4 = v41[8];
    a5 = v41[9];
    *((_QWORD *)&v73 + 1) = v37 - 1;
    if ((unint64_t)(v39 - (v37 + v40) + 1) >= 0xCC)
    {
      operator delete(*(void **)(v38 - 8));
      *(_QWORD *)&v72 = v72 - 8;
    }
    *(_QWORD *)(v14 + 8 * v42) = v43;
    *(_QWORD *)(v43 + 8 * v44) = v14;
    v20 = v44 + 1;
    v14 = v43;
    if ((_DWORD)v44 != 3)
    {
      v14 = v43;
      goto LABEL_11;
    }
  }
  v56 = (void **)__p[1];
  v57 = (void **)v72;
  *((_QWORD *)&v73 + 1) = 0;
  v58 = v72 - (unint64_t)__p[1];
  if ((unint64_t)v72 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v56);
      v57 = (void **)v72;
      v56 = (void **)((char *)__p[1] + 8);
      __p[1] = v56;
      v58 = v72 - (_QWORD)v56;
    }
    while ((_QWORD)v72 - (_QWORD)v56 > 0x10uLL);
  }
  v59 = v58 >> 3;
  if (v59 == 1)
  {
    v60 = 51;
LABEL_86:
    *(_QWORD *)&v73 = v60;
  }
  else if (v59 == 2)
  {
    v60 = 102;
    goto LABEL_86;
  }
  if (v56 != v57)
  {
    do
    {
      v61 = *v56++;
      operator delete(v61);
    }
    while (v56 != v57);
    if ((void *)v72 != __p[1])
      *(_QWORD *)&v72 = v72 + (((unint64_t)__p[1] - v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_2394C19B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_2394C1F9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394C19CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_2394C1F9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394C19E0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF0uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF0uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2394C1F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2394C1F58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394C1F6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394C1F84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394C1F9C(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 51;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 102;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2394C2060(uint64_t a1, double *a2, double *a3, double *a4)
{
  unint64_t StatusReg;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  void *v19;
  double v20;
  double v21[2];
  void *v22;
  double v23;
  void *__p[4];
  void *v25;
  double v26;
  double v27[2];
  void *v28;
  double v29;
  void *v30[4];
  double v31;
  double v32;
  double v33[2];
  double v34;
  double v35;
  void *v36[4];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), 0x400000uLL);
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v31 = -*a2;
  v32 = v8;
  v33[0] = -v9;
  v33[1] = v9;
  v34 = -v10;
  v35 = v10;
  v11 = *a3;
  v12 = a3[1];
  v13 = a3[2];
  *(double *)&v25 = -*a3;
  v26 = v11;
  v27[0] = -v12;
  v27[1] = v12;
  *(double *)&v28 = -v13;
  v29 = v13;
  v14 = *a4;
  v15 = a4[1];
  v16 = a4[2];
  *(double *)&v19 = -*a4;
  v20 = v14;
  v21[0] = -v15;
  v21[1] = v15;
  *(double *)&v22 = -v16;
  v23 = v16;
  v17 = sub_2394C24E8(&v31, v33, &v34, (double *)&v25, v27, (double *)&v28, (double *)&v19, v21, (double *)&v22);
  if ((_DWORD)v17 == HIDWORD(v17))
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  }
  else
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
    sub_2394C2334(a2, (uint64_t)&v31);
    sub_2394C2334(a3, (uint64_t)&v25);
    sub_2394C2334(a4, (uint64_t)&v19);
    v17 = sub_2394C2964((uint64_t)&v31, (uint64_t)&v34, (uint64_t)&v25, (uint64_t)&v28, (uint64_t)&v19, (uint64_t)&v22);
    if (!(_DWORD)v17)
    {
      v17 = sub_2394C2964((uint64_t)&v34, (uint64_t)v36, (uint64_t)&v28, (uint64_t)v30, (uint64_t)&v22, (uint64_t)__p);
      if (!(_DWORD)v17)
        v17 = sub_2394C2964((uint64_t)&v31, (uint64_t)v36, (uint64_t)&v25, (uint64_t)v30, (uint64_t)&v19, (uint64_t)__p);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(double *)&v22 != 0.0)
    {
      v23 = *(double *)&v22;
      operator delete(v22);
    }
    if (*(double *)&v19 != 0.0)
    {
      v20 = *(double *)&v19;
      operator delete(v19);
    }
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
    if (*(double *)&v28 != 0.0)
    {
      v29 = *(double *)&v28;
      operator delete(v28);
    }
    if (*(double *)&v25 != 0.0)
    {
      v26 = *(double *)&v25;
      operator delete(v25);
    }
    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }
    if (v34 != 0.0)
    {
      v35 = v34;
      operator delete(*(void **)&v34);
    }
    if (v31 != 0.0)
    {
      v32 = v31;
      operator delete(*(void **)&v31);
    }
  }
  return v17;
}

void sub_2394C22E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_2394C2498((uint64_t)va);
  sub_2394C2498(v15 - 160);
  _Unwind_Resume(a1);
}

void sub_2394C22FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394C2498(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2394C2310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_2394C2498((uint64_t)va);
  sub_2394C2498((uint64_t)va1);
  sub_2394C2498(v3 - 160);
  _Unwind_Resume(a1);
}

void sub_2394C2334(double *a1@<X1>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  void *__p[2];
  __int128 v16;
  void *v17[2];
  __int128 v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  sub_2394C3714((uint64_t)v19, v4);
  v5 = a1[1];
  *(_OWORD *)v17 = 0u;
  v18 = 0u;
  sub_2394C3714((uint64_t)v17, v5);
  v6 = a1[2];
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  sub_2394C3714((uint64_t)__p, v6);
  sub_2394C3A60((uint64_t)v19, (uint64_t)v17, (uint64_t)__p, (uint64_t)&v21);
  v7 = v22;
  v8 = v23;
  v9 = v25;
  v10 = v26;
  v11 = v28;
  v12 = v29;
  v13 = v24;
  v14 = v27;
  *(_OWORD *)a2 = v21;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  *(_OWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v10;
  *(_OWORD *)(a2 + 64) = v14;
  *(_QWORD *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 88) = v12;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void sub_2394C2424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void *v19;
  void *v20;

  if (a9)
  {
    operator delete(a9);
    v19 = a13;
    if (!a13)
    {
LABEL_3:
      v20 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v19 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v19);
  v20 = __p;
  if (!__p)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(v20);
  goto LABEL_5;
}

void sub_2394C2488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (!a17)
    JUMPOUT(0x2394C244CLL);
  JUMPOUT(0x2394C2444);
}

uint64_t sub_2394C2498(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2394C24E8(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  uint64_t v16;
  uint64_t v17;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  __int16 v23;
  __int16 v24;
  __int16 v27;
  __int16 v28;

  v16 = sub_2394C261C(a1, a2, a4, a5, a7, a8);
  v17 = v16;
  v19 = v16 >= 0 && (int)v16 < 1;
  if ((((_DWORD)v16 == HIDWORD(v16)) & v19) != 0)
    v20 = 0;
  else
    v20 = 256;
  v28 = v20 | v19 ^ 1;
  if (!sub_2394C286C((unsigned __int8 *)&v28))
  {
    v21 = sub_2394C261C(a2, a3, a5, a6, a8, a9);
    v17 = v21;
    v23 = v21 >= 0 && (int)v21 < 1;
    if ((((_DWORD)v21 == HIDWORD(v21)) & v23) != 0)
      v24 = 0;
    else
      v24 = 256;
    v27 = v24 | v23 ^ 1;
    if (!sub_2394C286C((unsigned __int8 *)&v27))
      return sub_2394C261C(a1, a3, a4, a6, a7, a9);
  }
  return v17;
}

uint64_t sub_2394C261C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  double v21[2];
  double v22[2];
  double v23[2];
  double v24[2];

  v6 = a3[1] + *a1;
  v24[0] = a1[1] + *a3;
  v24[1] = v6;
  v7 = a4[1] + *a2;
  v23[0] = a2[1] + *a4;
  v23[1] = v7;
  v8 = a5[1] + *a1;
  v22[0] = a1[1] + *a5;
  v22[1] = v8;
  v9 = a6[1] + *a2;
  v21[0] = a2[1] + *a6;
  v21[1] = v9;
  v10 = sub_2394C2734(v24, v21);
  v12 = v11;
  v13 = sub_2394C2734(v22, v23);
  if (v14 < -v10)
    return 0x100000001;
  v16 = -v13;
  if (v12 < v16)
    return -1;
  v17 = v14 != -v10;
  if (v12 != v16)
    v17 = 1;
  v18 = !v17;
  v19 = 0x100000000;
  if (v18)
    v19 = 0;
  v20 = 0xFFFFFFFFLL;
  if (v18)
    v20 = 0;
  return v20 | v19;
}

double sub_2394C2734(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double result;
  double v8;
  double v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = -*a1;
  if (*a1 > 0.0)
  {
    v6 = *a2;
    v5 = a2[1];
    if (v3 <= 0.0)
    {
      if (v6 <= 0.0)
      {
        if (v5 <= 0.0)
          return -0.0;
      }
      else
      {
        if (v5 <= 0.0)
          v9 = a1[1];
        else
          v9 = -*a1;
        v4 = v9;
      }
      return -v4 * a2[1];
    }
    if (v6 > 0.0)
    {
      if (v5 <= 0.0)
        return v3 * *a2;
      result = v2 * a2[1];
      if (result < a1[1] * *a2)
        return a1[1] * *a2;
      return result;
    }
    if (v5 > 0.0)
      return v2 * a2[1];
    return -0.0;
  }
  if (v3 <= 0.0)
    return -0.0;
  if (*a2 > 0.0)
    v8 = a1[1];
  else
    v8 = -*a1;
  return v8 * *a2;
}

BOOL sub_2394C286C(unsigned __int8 *a1)
{
  int v1;
  std::runtime_error *exception;
  std::string v4;

  v1 = *a1;
  if (v1 != a1[1])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_23941A4FC(&v4, "Undecidable conversion of CGAL::Uncertain<T>");
    std::runtime_error::runtime_error(exception, &v4);
    exception->__vftable = (std::runtime_error_vtbl *)&off_250ADCD18;
    __cxa_throw(exception, (struct type_info *)&unk_250ADCCF0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return v1 != 0;
}

void sub_2394C2904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_2394C2940(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394C2964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  const void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  const void *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  const void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *__p;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  char *v48;
  uint64_t v49;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v13 = *(const void **)a3;
    v12 = *(_QWORD *)(a3 + 8);
    v14 = v12 - *(_QWORD *)a3;
    if (v12 != *(_QWORD *)a3)
    {
      if (v14 < 0)
        sub_2394189F8();
      v15 = (char *)operator new(v12 - *(_QWORD *)a3);
      v16 = &v15[2 * (v14 >> 1)];
      v46 = v15;
      v48 = v16;
      memcpy(v15, v13, v14);
      v47 = v16;
    }
    v49 = *(_QWORD *)(a3 + 24);
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
    {
LABEL_3:
      sub_2394C3324((double *)a4, (double *)a2, (uint64_t)&v42);
      if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
        goto LABEL_4;
LABEL_14:
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v23 = *(const void **)a5;
      v22 = *(_QWORD *)(a5 + 8);
      v24 = v22 - *(_QWORD *)a5;
      if (v22 != *(_QWORD *)a5)
      {
        if (v24 < 0)
          sub_2394189F8();
        v25 = (char *)operator new(v22 - *(_QWORD *)a5);
        v26 = &v25[2 * (v24 >> 1)];
        v38 = v25;
        v40 = v26;
        memcpy(v25, v23, v24);
        v39 = v26;
      }
      v41 = *(_QWORD *)(a5 + 24);
      if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
        goto LABEL_5;
      goto LABEL_18;
    }
  }
  else
  {
    sub_2394C3324((double *)a3, (double *)a1, (uint64_t)&v46);
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
      goto LABEL_3;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v18 = *(const void **)a4;
  v17 = *(_QWORD *)(a4 + 8);
  v19 = v17 - *(_QWORD *)a4;
  if (v17 != *(_QWORD *)a4)
  {
    if (v19 < 0)
      sub_2394189F8();
    v20 = (char *)operator new(v17 - *(_QWORD *)a4);
    v21 = &v20[2 * (v19 >> 1)];
    v42 = v20;
    v44 = v21;
    memcpy(v20, v18, v19);
    v43 = v21;
  }
  v45 = *(_QWORD *)(a4 + 24);
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    goto LABEL_14;
LABEL_4:
  sub_2394C3324((double *)a5, (double *)a1, (uint64_t)&v38);
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
LABEL_5:
    sub_2394C3324((double *)a6, (double *)a2, (uint64_t)&__p);
    goto LABEL_22;
  }
LABEL_18:
  __p = 0;
  v35 = 0;
  v36 = 0;
  v28 = *(const void **)a6;
  v27 = *(_QWORD *)(a6 + 8);
  v29 = v27 - *(_QWORD *)a6;
  if (v27 != *(_QWORD *)a6)
  {
    if (v29 < 0)
      sub_2394189F8();
    v30 = (char *)operator new(v27 - *(_QWORD *)a6);
    v31 = &v30[2 * (v29 >> 1)];
    __p = v30;
    v36 = v31;
    memcpy(v30, v28, v29);
    v35 = v31;
  }
  v37 = *(_QWORD *)(a6 + 24);
LABEL_22:
  v32 = sub_2394C2CD0((unint64_t)&v46, (double *)&v42, (unint64_t)&v38, (double *)&__p);
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  return v32;
}

void sub_2394C2C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v24;
  void *v25;
  void *v26;

  if (a10)
  {
    operator delete(a10);
    v24 = a14;
    if (!a14)
    {
LABEL_3:
      v25 = a18;
      if (!a18)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v24 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v24);
  v25 = a18;
  if (!a18)
  {
LABEL_4:
    v26 = __p;
    if (!__p)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v25);
  v26 = __p;
  if (!__p)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  operator delete(v26);
  goto LABEL_6;
}

uint64_t sub_2394C2CD0(unint64_t a1, double *a2, unint64_t a3, double *a4)
{
  char *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  __int16 *v18;
  __int16 *v19;
  double v20;
  void *__p;
  char *v22;
  double v23;

  sub_2394C2EC8(a1, a4, (uint64_t)&__p);
  sub_2394C2EC8(a3, a2, (uint64_t)&v18);
  v6 = (char *)__p;
  if (__p == v22)
  {
    if (v18 == v19)
    {
LABEL_34:
      v16 = 0;
      if (!v18)
        goto LABEL_36;
    }
    else
    {
      if (*(v19 - 1) > 0)
        v16 = 0xFFFFFFFFLL;
      else
        v16 = 1;
      if (!v18)
        goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v18 != v19)
  {
    v7 = (v22 - (_BYTE *)__p) >> 1;
    v8 = v23 + (double)(unint64_t)v7;
    v9 = v19 - v18;
    v10 = v20 + (double)(unint64_t)v9;
    if (v8 >= v10)
      v11 = v23 + (double)(unint64_t)v7;
    else
      v11 = v20 + (double)(unint64_t)v9;
    if (v20 >= v23)
      v12 = v23;
    else
      v12 = v20;
    while (1)
    {
      v11 = v11 + -1.0;
      if (v11 < v12)
        goto LABEL_34;
      v13 = v23 <= v11;
      if (v8 <= v11)
        v13 = 0;
      if (v13 == 1)
      {
        v14 = *((_WORD *)__p + (int)(v11 - v23));
        v15 = v20 <= v11;
        if (v10 <= v11)
          v15 = 0;
        if (v15 != 1)
          goto LABEL_17;
      }
      else
      {
        v14 = 0;
        v15 = v20 <= v11;
        if (v10 <= v11)
          v15 = 0;
        if (v15 != 1)
        {
LABEL_17:
          if (v14 > 0)
            goto LABEL_44;
          goto LABEL_23;
        }
      }
      if (v14 > v18[(int)(v11 - v20)])
      {
LABEL_44:
        v16 = 1;
        if (v18)
          goto LABEL_35;
        goto LABEL_36;
      }
LABEL_23:
      if (v13)
      {
        LOWORD(v13) = *((_WORD *)__p + (int)(v11 - v23));
        if (v15)
          goto LABEL_27;
      }
      else if (v15)
      {
LABEL_27:
        LOWORD(v15) = v18[(int)(v11 - v20)];
      }
      if ((__int16)v13 < (__int16)v15)
      {
        v16 = 0xFFFFFFFFLL;
        if (v18)
          goto LABEL_35;
        goto LABEL_36;
      }
    }
  }
  if (*((__int16 *)v22 - 1) > 0)
    v16 = 1;
  else
    v16 = 0xFFFFFFFFLL;
  if (v18)
  {
LABEL_35:
    v19 = v18;
    operator delete(v18);
    v6 = (char *)__p;
  }
LABEL_36:
  if (v6)
  {
    v22 = v6;
    operator delete(v6);
  }
  return v16;
}

void sub_2394C2EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2394C2EC8@<X0>(unint64_t result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  _OWORD *v26;
  int v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  _WORD *i;
  _WORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;

  v4 = *(_QWORD *)result;
  v5 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result == v5 || (v7 = *a2, v8 = *((_QWORD *)a2 + 1), *(_QWORD *)a2 == v8))
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v9 = (uint64_t *)result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(double *)(a3 + 24) = *(double *)(result + 24) + a2[3];
  v39 = 0;
  result = (unint64_t)sub_2394C310C(a3, ((v8 - *(_QWORD *)&v7) >> 1) + ((v5 - v4) >> 1), &v39);
  v10 = *v9;
  v11 = v9[1] - *v9;
  if (v11)
  {
    v12 = v11 >> 1;
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 1);
    v15 = *(_WORD **)a3;
    v16 = v14 - *(_QWORD *)a2;
    if (v14 == *(_QWORD *)a2)
    {
      if (v12 <= 1)
        v23 = 1;
      else
        v23 = v12;
      if (v23 >= 0x18)
      {
        if ((_DWORD)v23)
          v25 = (unint64_t)(v23 - 1) >> 32 == 0;
        else
          v25 = 0;
        if (v25)
        {
          LODWORD(v24) = v23 & 0xFFFFFFF0;
          v26 = v15 + 8;
          v27 = v23 & 0xFFFFFFF0;
          do
          {
            *(v26 - 1) = 0uLL;
            *v26 = 0uLL;
            v26 += 2;
            v27 -= 16;
          }
          while (v27);
          if ((_DWORD)v24 == (_DWORD)v23)
            goto LABEL_26;
        }
        else
        {
          LODWORD(v24) = 0;
        }
      }
      else
      {
        LODWORD(v24) = 0;
      }
      do
      {
        v15[v24] = 0;
        v24 = (v24 + 1);
      }
      while (v12 > v24);
      goto LABEL_26;
    }
    v17 = 0;
    v18 = v16 >> 1;
    do
    {
      v19 = 0;
      LOWORD(v20) = 0;
      do
      {
        v21 = (v17 + v19);
        result = *(__int16 *)(*(_QWORD *)&v13 + 2 * v19);
        v22 = (__int16)v15[v21] + (__int16)v20 + result * *(__int16 *)(v10 + 2 * v17);
        v15[v21] = v22;
        v20 = (v22 - (__int16)v22) >> 16;
        ++v19;
      }
      while (v18 > v19);
      v15[(v17++ + v19)] = v20;
    }
    while (v12 > v17);
  }
LABEL_26:
  v29 = *(_WORD **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  v30 = *(_QWORD *)a3 - v28;
  if (*(_QWORD *)a3 != v28)
  {
    for (i = (_WORD *)(v28 - 2); !*i; --i)
    {
      *(_QWORD *)(a3 + 8) = i;
      v30 += 2;
      v25 = i == v29;
      if (v25)
        return result;
    }
    v32 = i + 1;
    if (v32 != v29 && !*v29)
    {
      v33 = 0;
      do
      {
        v34 = (unsigned __int16)v29[(unint64_t)v33 / 2 + 1];
        v33 += 2;
      }
      while (!v34);
      v35 = v33 >> 1;
      *(double *)(a3 + 24) = *(double *)(a3 + 24) + (double)(v33 >> 1);
      if (v33)
      {
        v36 = &v29[v35];
        v37 = 2 * v35 + v30;
        v38 = -v37;
        if (v32 != v36)
          result = (unint64_t)memmove(v29, v36, -v37);
        *(_QWORD *)(a3 + 8) = (char *)v29 + v38;
      }
    }
  }
  return result;
}

void sub_2394C30F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int16 *sub_2394C310C(uint64_t a1, unint64_t a2, const __int16 *a3)
{
  unint64_t v6;
  __int16 *v7;
  __int16 *result;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  __int16 *v13;
  unsigned int v14;
  unint64_t v15;
  __int16 *v16;
  unint64_t v17;
  int16x8_t v18;
  int16x8_t *v19;
  unint64_t v20;
  __int16 *v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  __int16 *v30;
  unint64_t v31;
  uint64_t v32;
  __int16 *v33;
  int16x8_t v34;
  int16x8_t *v35;
  unint64_t v36;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(__int16 **)a1;
  result = v7;
  if (a2 > (uint64_t)(v6 - (_QWORD)v7) >> 1)
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v7);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_39;
    if (v6 <= a2)
      v9 = a2;
    else
      v9 = v6;
    v10 = v6 >= 0x7FFFFFFFFFFFFFFELL;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v9;
    if (v11 < 0)
LABEL_39:
      sub_2394189F8();
    v12 = v11;
    result = (__int16 *)operator new(2 * v11);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v13 = &result[a2];
    v14 = *(unsigned __int16 *)a3;
    v15 = (a2 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    v16 = result;
    if (v15 < 0xF)
      goto LABEL_42;
    v17 = v15 + 1;
    v16 = &result[v17 & 0xFFFFFFFFFFFFFFF0];
    v18 = vdupq_n_s16(v14);
    v19 = (int16x8_t *)(result + 8);
    v20 = v17 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v19[-1] = v18;
      *v19 = v18;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
    if (v17 != (v17 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_42:
      do
        *v16++ = v14;
      while (v16 != v13);
    }
    goto LABEL_38;
  }
  v21 = *(__int16 **)(a1 + 8);
  v22 = (char *)v21 - (char *)v7;
  v23 = v21 - v7;
  if (v23 >= a2)
    v24 = a2;
  else
    v24 = v21 - v7;
  if (v24)
  {
    if (v24 < 0x10 || v7 < a3 + 1 && &v7[v24] > a3)
      goto LABEL_43;
    result = &v7[v24 & 0xFFFFFFFFFFFFFFF0];
    v25 = vld1q_dup_s16(a3);
    v26 = (int16x8_t *)(v7 + 8);
    v27 = v24 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    v28 = v24 == (v24 & 0xFFFFFFFFFFFFFFF0);
    v24 &= 0xFu;
    if (!v28)
    {
LABEL_43:
      do
      {
        *result++ = *a3;
        --v24;
      }
      while (v24);
    }
  }
  v10 = a2 >= v23;
  v29 = a2 - v23;
  if (v29 == 0 || !v10)
  {
    v13 = &v7[a2];
LABEL_38:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v30 = &v21[v29];
  v31 = 2 * a2 - (v22 & 0xFFFFFFFFFFFFFFFELL) - 2;
  if (v31 < 0x2E || v21 < a3 + 1 && (__int16 *)((char *)v21 + v31 + 2) > a3)
    goto LABEL_44;
  v32 = (v31 >> 1) + 1;
  v33 = &v21[v32 & 0xFFFFFFFFFFFFFFF0];
  v34 = vld1q_dup_s16(a3);
  v35 = (int16x8_t *)(v21 + 8);
  v36 = v32 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v35[-1] = v34;
    *v35 = v34;
    v35 += 2;
    v36 -= 16;
  }
  while (v36);
  v21 = v33;
  if (v32 != (v32 & 0xFFFFFFFFFFFFFFF0))
  {
LABEL_44:
    do
      *v21++ = *a3;
    while (v21 != v30);
  }
  *(_QWORD *)(a1 + 8) = v30;
  return result;
}

void sub_2394C3324(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  __int16 v23;
  int v24;
  char *v25;
  double v26;
  __int16 v28;
  char *v31;
  char *v32;
  char *i;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)a1 == v6)
  {
    v9 = a2[3];
    v10 = v9 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 1);
  }
  else
  {
    v7 = a1[3];
    v8 = a2[3];
    if (v8 >= v7)
      v9 = a1[3];
    else
      v9 = a2[3];
    v10 = v7 + (double)(unint64_t)((v6 - *(_QWORD *)a1) >> 1);
    v11 = v8 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 1);
    if (v10 < v11)
      v10 = v11;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(double *)(a3 + 24) = v9;
  v12 = v10 - v9;
  sub_2394C3584(a3, (int)(v10 - v9 + 1.0));
  v13 = *(char **)a3;
  **(_WORD **)a3 = 0;
  if (v12 > 0.0)
  {
    LOWORD(v14) = 0;
    v15 = 0;
    v16 = a1[3];
    v17 = *a1;
    v18 = a2[3];
    v19 = *a2;
    v20 = v16 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 1);
    v21 = v18 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 1);
    v22 = 0.0;
    do
    {
      v26 = v9 + v22;
      if (v16 <= v26 && v20 > v26)
      {
        v28 = *(_WORD *)(*(_QWORD *)&v17 + 2 * (int)(v26 - v16));
        if (v18 > v26 || v21 <= v26)
        {
LABEL_26:
          v23 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v28 = 0;
        if (v18 > v26 || v21 <= v26)
          goto LABEL_26;
      }
      v23 = *(_WORD *)(*(_QWORD *)&v19 + 2 * (int)(v26 - v18));
LABEL_12:
      v24 = v28 - v23 + (__int16)v14;
      v25 = &v13[2 * v15++];
      *(_WORD *)v25 = v24;
      v14 = (v24 - (__int16)v24) >> 16;
      *((_WORD *)v25 + 1) = v14;
      v22 = (double)(int)v15;
    }
    while (v12 > (double)(int)v15);
  }
  v31 = *(char **)(a3 + 8);
  v32 = (char *)(v13 - v31);
  if (v13 != v31)
  {
    for (i = v31 - 2; !*(_WORD *)i; i -= 2)
    {
      *(_QWORD *)(a3 + 8) = i;
      v32 += 2;
      if (i == v13)
        return;
    }
    v35 = i + 2;
    if (v35 != v13 && !*(_WORD *)v13)
    {
      v36 = 0;
      do
      {
        v37 = *(unsigned __int16 *)&v13[v36 + 2];
        v36 += 2;
      }
      while (!v37);
      v38 = v36 >> 1;
      *(double *)(a3 + 24) = *(double *)(a3 + 24) + (double)(v36 >> 1);
      if (v36)
      {
        v39 = &v13[2 * v38];
        v40 = &v32[2 * v38];
        v41 = -(uint64_t)v40;
        if (v35 != v39)
          memmove(v13, v39, -(uint64_t)v40);
        *(_QWORD *)(a3 + 8) = &v13[v41];
      }
    }
  }
}

void sub_2394C3568(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2394C3584(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      bzero(v5, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      sub_2394189F8();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        sub_239418A80();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_2394C3714(uint64_t a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  int v9;
  __int128 v10;
  __int16 v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _WORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  unint64_t v29;
  __int16 v30;
  double v31;
  double v32;
  char *v33;
  char *v34;
  unint64_t v36;
  __int16 v37;
  BOOL v38;

  if (a2 == 0.0)
    return;
  if (a2 < -32768.5 || a2 > 32767.5)
  {
    v3 = *(double *)(a1 + 24);
    do
    {
      do
      {
        v3 = v3 + 1.0;
        a2 = a2 * 0.0000152587891;
      }
      while (a2 < -32768.5);
    }
    while (a2 > 32767.5);
    *(double *)(a1 + 24) = v3;
  }
  if (a2 >= -0.50000763 && a2 <= 0.49999237)
  {
    v4 = *(double *)(a1 + 24);
    do
    {
      v4 = v4 + -1.0;
      a2 = a2 * 65536.0;
    }
    while (a2 >= -0.50000763 && a2 <= 0.49999237);
    *(double *)(a1 + 24) = v4;
  }
  v5 = 0.0;
  v6 = a2;
  v7 = (int)a2;
  v8 = a2 - (double)(int)a2;
  if (v8 <= 0.5)
    goto LABEL_17;
LABEL_22:
  v9 = v7 + 1;
  while (1)
  {
    *(double *)&v10 = a2 - (double)v9;
    if (*(double *)&v10 < 0.49999237)
      v11 = v9;
    else
      v11 = v9 + 1;
    v13 = *(char **)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v13 < v12)
    {
      *(_WORD *)v13 = v11;
      v14 = (uint64_t)(v13 + 2);
      goto LABEL_48;
    }
    v15 = *(char **)a1;
    v16 = (uint64_t)&v13[-*(_QWORD *)a1];
    if (v16 <= -3)
      sub_2394189F8();
    v17 = v16 >> 1;
    v18 = v12 - (_QWORD)v15;
    if (v18 <= (v16 >> 1) + 1)
      v19 = v17 + 1;
    else
      v19 = v18;
    if (v18 >= 0x7FFFFFFFFFFFFFFELL)
      v20 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 < 0)
        sub_239418A80();
      v21 = operator new(2 * v20);
      v22 = &v21[2 * v17];
      *v22 = v11;
      v14 = (uint64_t)(v22 + 1);
      if (v13 == v15)
        goto LABEL_46;
LABEL_40:
      v23 = v13 - 2 - v15;
      if (v23 < 0x1E)
        goto LABEL_62;
      if (v13 - v21 - (v16 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
        goto LABEL_62;
      v24 = (v23 >> 1) + 1;
      v25 = 2 * (v24 & 0xFFFFFFFFFFFFFFF0);
      v26 = &v13[-v25];
      v22 = (_WORD *)((char *)v22 - v25);
      v27 = &v21[2 * v17 - 16];
      v28 = v13 - 16;
      v29 = v24 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v10 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v10;
        v27 -= 2;
        v28 -= 32;
        v29 -= 16;
      }
      while (v29);
      v13 = v26;
      if (v24 != (v24 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_62:
        do
        {
          v30 = *((_WORD *)v13 - 1);
          v13 -= 2;
          *--v22 = v30;
        }
        while (v13 != v15);
      }
      goto LABEL_46;
    }
    v21 = 0;
    v22 = (_WORD *)(2 * v17);
    *(_WORD *)(2 * v17) = v11;
    v14 = 2 * v17 + 2;
    if (v13 != v15)
      goto LABEL_40;
LABEL_46:
    *(_QWORD *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = &v21[2 * v20];
    if (v15)
      operator delete(v15);
LABEL_48:
    *(_QWORD *)(a1 + 8) = v14;
    LOWORD(v10) = *(_WORD *)(v14 - 2);
    v31 = v5 + (double)vmovl_s16(*(int16x4_t *)&v10).i32[0];
    v32 = v6 - v31;
    if (v6 - v31 == 0.0)
      break;
    v5 = v31 * 65536.0;
    v6 = v6 * 65536.0;
    a2 = v32 * 65536.0;
    *(double *)(a1 + 24) = *(double *)(a1 + 24) + -1.0;
    v7 = (int)a2;
    v8 = a2 - (double)(int)a2;
    if (v8 > 0.5)
      goto LABEL_22;
LABEL_17:
    if (v8 >= -0.5)
    {
      if ((v7 & 1) != 0 && v8 == 0.5)
        goto LABEL_22;
      v9 = v7 & ~(v8 == -0.5);
    }
    else
    {
      v9 = v7 - 1;
    }
  }
  v33 = (char *)(v14 - 2);
  v34 = *(char **)a1;
  if (*(_QWORD *)a1 != v14 && v33 > v34)
  {
    v36 = (unint64_t)(v34 + 2);
    do
    {
      v37 = *(_WORD *)(v36 - 2);
      *(_WORD *)(v36 - 2) = *(_WORD *)v33;
      *(_WORD *)v33 = v37;
      v33 -= 2;
      v38 = v36 >= (unint64_t)v33;
      v36 += 2;
    }
    while (!v38);
  }
}

double sub_2394C3A60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  int64_t v22;
  char *v23;
  char *v24;
  double result;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v9 = *(const void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v10 = v8 - *(_QWORD *)a1;
  if (v8 != *(_QWORD *)a1)
  {
    if (v10 < 0)
      sub_2394189F8();
    v11 = (char *)operator new(v8 - *(_QWORD *)a1);
    *(_QWORD *)a4 = v11;
    v12 = &v11[2 * (v10 >> 1)];
    *(_QWORD *)(a4 + 16) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a4 + 8) = v12;
  }
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 24) = v13;
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 48) = 0;
  v15 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v16 = v14 - *(_QWORD *)a2;
  if (v14 != *(_QWORD *)a2)
  {
    if (v16 < 0)
      sub_2394189F8();
    v17 = (char *)operator new(v14 - *(_QWORD *)a2);
    *(_QWORD *)(a4 + 32) = v17;
    *(_QWORD *)(a4 + 40) = v17;
    v18 = &v17[2 * (v16 >> 1)];
    *(_QWORD *)(a4 + 48) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a4 + 40) = v18;
  }
  v19 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 56) = v19;
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  v21 = *(const void **)a3;
  v20 = *(_QWORD *)(a3 + 8);
  v22 = v20 - *(_QWORD *)a3;
  if (v20 != *(_QWORD *)a3)
  {
    if (v22 < 0)
      sub_2394189F8();
    v23 = (char *)operator new(v20 - *(_QWORD *)a3);
    *(_QWORD *)(a4 + 64) = v23;
    *(_QWORD *)(a4 + 72) = v23;
    v24 = &v23[2 * (v22 >> 1)];
    *(_QWORD *)(a4 + 80) = v24;
    memcpy(v23, v21, v22);
    *(_QWORD *)(a4 + 72) = v24;
  }
  result = *(double *)(a3 + 24);
  *(double *)(a4 + 88) = result;
  return result;
}

void sub_2394C3BA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void **v5;
  void *v6;
  void *v7;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 72) = v4;
    operator delete(v4);
  }
  v5 = v2;
  while (1)
  {
    v7 = *(v5 - 4);
    v5 -= 4;
    v6 = v7;
    if (v7)
    {
      *(v2 - 3) = v6;
      operator delete(v6);
    }
    v2 = v5;
    if (v5 == (void **)v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_2394C3C18(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;

  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v8 = a3[1];
  v9 = a3[2];
  v10 = a4[1];
  v11 = a4[2];
  v12 = a5[1];
  v13 = a5[2];
  v14 = vabdd_f64(*a3, *a2);
  v15 = vabdd_f64(v8, v5);
  v16 = vabdd_f64(v9, v7);
  v17 = vabdd_f64(*a4, *a2);
  v18 = vabdd_f64(*a5, *a2);
  v19 = vabdd_f64(v10, v5);
  v20 = vabdd_f64(v12, v5);
  v21 = vabdd_f64(v11, v7);
  v22 = vabdd_f64(v13, v7);
  if (v14 < v17)
    v14 = v17;
  if (v14 >= v18)
    v23 = v14;
  else
    v23 = v18;
  if (v15 >= v19)
    v24 = v15;
  else
    v24 = v19;
  if (v24 < v20)
    v24 = v20;
  if (v16 >= v21)
    v25 = v16;
  else
    v25 = v21;
  if (v25 < v22)
    v25 = v22;
  if (v23 <= v25)
    v26 = v23;
  else
    v26 = v25;
  if (v23 <= v25)
    v27 = v25;
  else
    v27 = v23;
  if (v24 <= v27)
  {
    if (v24 < v26)
      v26 = v24;
  }
  else
  {
    v27 = v24;
  }
  if (v26 >= 1.0e-97)
  {
    if (v27 < 1.0e102)
    {
      v29 = v8 - v5;
      v30 = *a5 - v6;
      v31 = *a3 - v6;
      v32 = *a4 - v6;
      v33 = v12 - v5;
      v34 = v10 - v5;
      v35 = v11 - v7;
      v36 = v13 - v7;
      v37 = v31 * v34 - v32 * v29;
      v38 = v9 - v7;
      v39 = v32 * v33 - v30 * v34;
      v40 = v23 * 5.11071278e-15 * v24;
      v41 = v37 * v36 - (v31 * v33 - v30 * v29) * v35 + v39 * v38;
      if (v41 > v40 * v25)
        return 1;
      if (v41 < -(v40 * v25))
        return 0xFFFFFFFFLL;
    }
  }
  else if (v26 == 0.0)
  {
    return 0;
  }
  return sub_2394C3D68(a1, a2, a3, a4, a5);
}

uint64_t sub_2394C3D68(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  unint64_t StatusReg;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  void *v24;
  double v25;
  double v26[2];
  void *v27;
  double v28;
  void *__p[4];
  void *v30;
  double v31;
  double v32[2];
  void *v33;
  double v34;
  void *v35[4];
  void *v36;
  double v37;
  double v38[2];
  void *v39;
  double v40;
  void *v41[4];
  double v42;
  double v43;
  double v44[2];
  double v45;
  double v46;
  void *v47[4];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), 0x400000uLL);
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v42 = -*a2;
  v43 = v10;
  v44[0] = -v11;
  v44[1] = v11;
  v45 = -v12;
  v46 = v12;
  v13 = *a3;
  v14 = a3[1];
  v15 = a3[2];
  *(double *)&v36 = -*a3;
  v37 = v13;
  v38[0] = -v14;
  v38[1] = v14;
  *(double *)&v39 = -v15;
  v40 = v15;
  v16 = *a4;
  v17 = a4[1];
  v18 = a4[2];
  *(double *)&v30 = -*a4;
  v31 = v16;
  v32[0] = -v17;
  v32[1] = v17;
  *(double *)&v33 = -v18;
  v34 = v18;
  v19 = *a5;
  v20 = a5[1];
  v21 = a5[2];
  *(double *)&v24 = -*a5;
  v25 = v19;
  v26[0] = -v20;
  v26[1] = v20;
  *(double *)&v27 = -v21;
  v28 = v21;
  v22 = sub_2394C406C(&v42, v44, &v45, (double *)&v36, v38, (double *)&v39, (double *)&v30, v32, (double *)&v33, (double *)&v24, v26, (double *)&v27);
  if ((_DWORD)v22 == HIDWORD(v22))
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  }
  else
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
    sub_2394C2334(a2, (uint64_t)&v42);
    sub_2394C2334(a3, (uint64_t)&v36);
    sub_2394C2334(a4, (uint64_t)&v30);
    sub_2394C2334(a5, (uint64_t)&v24);
    v22 = sub_2394C4328((uint64_t)&v42, (uint64_t)&v45, (uint64_t)v47, (uint64_t)&v36, (uint64_t)&v39, (uint64_t)v41, (uint64_t)&v30, (uint64_t)&v33, (uint64_t)v35, (uint64_t)&v24, (uint64_t)&v27, (uint64_t)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(double *)&v27 != 0.0)
    {
      v28 = *(double *)&v27;
      operator delete(v27);
    }
    if (*(double *)&v24 != 0.0)
    {
      v25 = *(double *)&v24;
      operator delete(v24);
    }
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    if (*(double *)&v33 != 0.0)
    {
      v34 = *(double *)&v33;
      operator delete(v33);
    }
    if (*(double *)&v30 != 0.0)
    {
      v31 = *(double *)&v30;
      operator delete(v30);
    }
    if (v41[0])
    {
      v41[1] = v41[0];
      operator delete(v41[0]);
    }
    if (*(double *)&v39 != 0.0)
    {
      v40 = *(double *)&v39;
      operator delete(v39);
    }
    if (*(double *)&v36 != 0.0)
    {
      v37 = *(double *)&v36;
      operator delete(v36);
    }
    if (v47[0])
    {
      v47[1] = v47[0];
      operator delete(v47[0]);
    }
    if (v45 != 0.0)
    {
      v46 = v45;
      operator delete(*(void **)&v45);
    }
    if (v42 != 0.0)
    {
      v43 = v42;
      operator delete(*(void **)&v42);
    }
  }
  return v22;
}

void sub_2394C401C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_2394C2498((uint64_t)&a13);
  sub_2394C2498((uint64_t)&a25);
  sub_2394C2498((uint64_t)&a37);
  sub_2394C2498(v37 - 160);
  _Unwind_Resume(a1);
}

void sub_2394C4058(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394C2498(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_2394C406C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24[2];
  double v25[2];
  double v26[2];
  double v27[2];
  double v28[2];
  double v29[2];
  double v30[2];
  double v31[2];
  double v32[2];

  v12 = a4[1] + *a1;
  v32[0] = a1[1] + *a4;
  v32[1] = v12;
  v13 = a7[1] + *a1;
  v31[0] = a1[1] + *a7;
  v31[1] = v13;
  v14 = a10[1] + *a1;
  v30[0] = a1[1] + *a10;
  v30[1] = v14;
  v15 = a5[1] + *a2;
  v29[0] = a2[1] + *a5;
  v29[1] = v15;
  v16 = a8[1] + *a2;
  v28[0] = a2[1] + *a8;
  v28[1] = v16;
  v17 = a11[1] + *a2;
  v27[0] = a2[1] + *a11;
  v27[1] = v17;
  v18 = a6[1] + *a3;
  v26[0] = a3[1] + *a6;
  v26[1] = v18;
  v19 = a9[1] + *a3;
  v25[0] = a3[1] + *a9;
  v25[1] = v19;
  v20 = a12[1] + *a3;
  v24[0] = a3[1] + *a12;
  v24[1] = v20;
  v21 = sub_2394C4200(v32, v31, v30, v29, v28, v27, v26, v25, v24);
  if (v21 < 0.0)
    return 0x100000001;
  if (v22 < 0.0)
    return -1;
  if (v22 == -v21)
    return 0;
  return 0x1FFFFFFFFLL;
}

double sub_2394C4200(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v35[2];
  double v36[2];
  double v37[2];

  v17 = sub_2394C2734(a1, a5);
  v19 = v18;
  v20 = sub_2394C2734(a4, a2);
  v37[0] = v21 + v17;
  v37[1] = v19 + v20;
  v22 = sub_2394C2734(a1, a8);
  v24 = v23;
  v25 = sub_2394C2734(a7, a2);
  v36[0] = v26 + v22;
  v36[1] = v24 + v25;
  v27 = sub_2394C2734(a4, a8);
  v29 = v28;
  v30 = sub_2394C2734(a7, a5);
  v35[0] = v31 + v27;
  v35[1] = v29 + v30;
  v32 = sub_2394C2734(v37, a9);
  sub_2394C2734(v36, a6);
  return v33 + v32 + sub_2394C2734(v35, a3);
}

uint64_t sub_2394C4328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  const void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  const void *v41;
  int64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  const void *v46;
  int64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  const void *v56;
  int64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  const void *v61;
  int64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  const void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *__p;
  void *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  char *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  char *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  char *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  char *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  __int16 *v109;
  __int16 *v110;

  v12 = a8;
  v14 = a6;
  v15 = a5;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v26 = *(const void **)a4;
    v25 = *(_QWORD *)(a4 + 8);
    v27 = v25 - *(_QWORD *)a4;
    if (v25 != *(_QWORD *)a4)
    {
      if (v27 < 0)
        sub_2394189F8();
      v28 = (char *)operator new(v25 - *(_QWORD *)a4);
      v29 = &v28[2 * (v27 >> 1)];
      v105 = v28;
      v107 = v29;
      memcpy(v28, v26, v27);
      v106 = v29;
    }
    v108 = *(_QWORD *)(a4 + 24);
    v14 = a6;
    v12 = a8;
    v15 = a5;
    goto LABEL_15;
  }
  sub_2394C3324((double *)a4, (double *)a1, (uint64_t)&v105);
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
LABEL_15:
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v31 = *(const void **)a7;
    v30 = *(_QWORD *)(a7 + 8);
    v32 = v30 - *(_QWORD *)a7;
    if (v30 != *(_QWORD *)a7)
    {
      if (v32 < 0)
        sub_2394189F8();
      v33 = (char *)operator new(v30 - *(_QWORD *)a7);
      v34 = &v33[2 * (v32 >> 1)];
      v101 = v33;
      v103 = v34;
      memcpy(v33, v31, v32);
      v102 = v34;
    }
    v104 = *(_QWORD *)(a7 + 24);
    goto LABEL_19;
  }
  sub_2394C3324((double *)a7, (double *)a1, (uint64_t)&v101);
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    sub_2394C3324((double *)a10, (double *)a1, (uint64_t)&v97);
    v20 = a11;
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
      goto LABEL_5;
LABEL_23:
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v41 = *(const void **)v15;
    v40 = *(_QWORD *)(v15 + 8);
    v42 = v40 - *(_QWORD *)v15;
    if (v40 != *(_QWORD *)v15)
    {
      if (v42 < 0)
        sub_2394189F8();
      v43 = (char *)operator new(v40 - *(_QWORD *)v15);
      v44 = &v43[2 * (v42 >> 1)];
      v93 = v43;
      v95 = v44;
      memcpy(v43, v41, v42);
      v94 = v44;
    }
    v96 = *(_QWORD *)(v15 + 24);
    goto LABEL_27;
  }
LABEL_19:
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v36 = *(const void **)a10;
  v35 = *(_QWORD *)(a10 + 8);
  v37 = v35 - *(_QWORD *)a10;
  if (v35 != *(_QWORD *)a10)
  {
    if (v37 < 0)
      sub_2394189F8();
    v38 = (char *)operator new(v35 - *(_QWORD *)a10);
    v39 = &v38[2 * (v37 >> 1)];
    v97 = v38;
    v99 = v39;
    memcpy(v38, v36, v37);
    v98 = v39;
  }
  v100 = *(_QWORD *)(a10 + 24);
  v20 = a11;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    goto LABEL_23;
LABEL_5:
  sub_2394C3324((double *)v15, (double *)a2, (uint64_t)&v93);
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
LABEL_27:
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v46 = *(const void **)v12;
    v45 = *(_QWORD *)(v12 + 8);
    v47 = v45 - *(_QWORD *)v12;
    if (v45 != *(_QWORD *)v12)
    {
      if (v47 < 0)
        sub_2394189F8();
      v48 = (char *)operator new(v45 - *(_QWORD *)v12);
      v49 = &v48[2 * (v47 >> 1)];
      v89 = v48;
      v91 = v49;
      memcpy(v48, v46, v47);
      v90 = v49;
    }
    v92 = *(_QWORD *)(v12 + 24);
    goto LABEL_31;
  }
  sub_2394C3324((double *)v12, (double *)a2, (uint64_t)&v89);
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    sub_2394C3324((double *)v20, (double *)a2, (uint64_t)&v85);
    v21 = a12;
    v22 = a9;
    if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
      goto LABEL_8;
LABEL_35:
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v56 = *(const void **)v14;
    v55 = *(_QWORD *)(v14 + 8);
    v57 = v55 - *(_QWORD *)v14;
    if (v55 != *(_QWORD *)v14)
    {
      if (v57 < 0)
        sub_2394189F8();
      v58 = (char *)operator new(v55 - *(_QWORD *)v14);
      v59 = &v58[2 * (v57 >> 1)];
      v81 = v58;
      v83 = v59;
      memcpy(v58, v56, v57);
      v82 = v59;
    }
    v84 = *(_QWORD *)(v14 + 24);
    goto LABEL_39;
  }
LABEL_31:
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v51 = *(const void **)v20;
  v50 = *(_QWORD *)(v20 + 8);
  v52 = v50 - *(_QWORD *)v20;
  if (v50 != *(_QWORD *)v20)
  {
    if (v52 < 0)
      sub_2394189F8();
    v53 = (char *)operator new(v50 - *(_QWORD *)v20);
    v54 = &v53[2 * (v52 >> 1)];
    v85 = v53;
    v87 = v54;
    memcpy(v53, v51, v52);
    v86 = v54;
  }
  v88 = *(_QWORD *)(v20 + 24);
  v21 = a12;
  v22 = a9;
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    goto LABEL_35;
LABEL_8:
  sub_2394C3324((double *)v14, (double *)a3, (uint64_t)&v81);
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
  {
LABEL_39:
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v61 = *(const void **)v22;
    v60 = *(_QWORD *)(v22 + 8);
    v62 = v60 - *(_QWORD *)v22;
    if (v60 != *(_QWORD *)v22)
    {
      if (v62 < 0)
        sub_2394189F8();
      v63 = (char *)operator new(v60 - *(_QWORD *)v22);
      v64 = &v63[2 * (v62 >> 1)];
      v77 = v63;
      v79 = v64;
      memcpy(v63, v61, v62);
      v78 = v64;
    }
    v80 = *(_QWORD *)(v22 + 24);
    goto LABEL_43;
  }
  sub_2394C3324((double *)v22, (double *)a3, (uint64_t)&v77);
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    sub_2394C3324((double *)v21, (double *)a3, (uint64_t)&__p);
    goto LABEL_47;
  }
LABEL_43:
  __p = 0;
  v74 = 0;
  v75 = 0;
  v66 = *(const void **)v21;
  v65 = *(_QWORD *)(v21 + 8);
  v67 = v65 - *(_QWORD *)v21;
  if (v65 != *(_QWORD *)v21)
  {
    if (v67 < 0)
      sub_2394189F8();
    v68 = (char *)operator new(v65 - *(_QWORD *)v21);
    v69 = &v68[2 * (v67 >> 1)];
    __p = v68;
    v75 = v69;
    memcpy(v68, v66, v67);
    v74 = v69;
  }
  v76 = *(_QWORD *)(v21 + 24);
LABEL_47:
  sub_2394C4ABC((unint64_t)&v105, (double *)&v101, (double *)&v97, (unint64_t)&v93, (double *)&v89, (double *)&v85, (unint64_t)&v81, (double *)&v77, &v109, (double *)&__p);
  if (v109 == v110)
  {
    v70 = 0;
    if (v109)
    {
LABEL_52:
      v110 = v109;
      operator delete(v109);
    }
  }
  else
  {
    if (*(v110 - 1) > 0)
      v70 = 1;
    else
      v70 = 0xFFFFFFFFLL;
    if (v109)
      goto LABEL_52;
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  return v70;
}

void sub_2394C48E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  uint64_t v37;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;

  if (__p)
  {
    operator delete(__p);
    v39 = a20;
    if (!a20)
    {
LABEL_3:
      v40 = a24;
      if (!a24)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v39 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v39);
  v40 = a24;
  if (!a24)
  {
LABEL_4:
    v41 = a28;
    if (!a28)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v40);
  v41 = a28;
  if (!a28)
  {
LABEL_5:
    v42 = a32;
    if (!a32)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v41);
  v42 = a32;
  if (!a32)
  {
LABEL_6:
    v43 = a36;
    if (!a36)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v42);
  v43 = a36;
  if (!a36)
  {
LABEL_7:
    v44 = *(void **)(v37 - 184);
    if (!v44)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(v43);
  v44 = *(void **)(v37 - 184);
  if (!v44)
  {
LABEL_8:
    v45 = *(void **)(v37 - 152);
    if (!v45)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  *(_QWORD *)(v37 - 176) = v44;
  operator delete(v44);
  v45 = *(void **)(v37 - 152);
  if (!v45)
LABEL_10:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v37 - 144) = v45;
  operator delete(v45);
  goto LABEL_10;
}

void sub_2394C4ABC(unint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, unint64_t a4@<X3>, double *a5@<X4>, double *a6@<X5>, unint64_t a7@<X6>, double *a8@<X7>, _QWORD *a9@<X8>, double *a10)
{
  char *v17;
  char *v18;
  _BYTE *v19;
  double *v20;
  const void *v21;
  int64_t v22;
  char *v23;
  char *v24;
  void *v25;
  int64_t v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  void *v30;
  int64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  void *v35;
  int64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  void *v43[4];
  void *v44;
  void *v45;
  void *v46;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *__p;
  char *v54;
  char *v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;

  sub_2394C2EC8(a1, a5, (uint64_t)&v57);
  sub_2394C2EC8(a4, a2, (uint64_t)&__p);
  v17 = (char *)__p;
  if (__p != v54)
  {
    sub_2394C3324((double *)&v57, (double *)&__p, (uint64_t)&v61);
    v17 = (char *)__p;
    if (!__p)
      goto LABEL_4;
    goto LABEL_3;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v21 = v57;
  v22 = v58 - v57;
  if (v58 != v57)
  {
    if (v22 < 0)
      sub_2394189F8();
    v40 = a9;
    v23 = (char *)operator new(v58 - v57);
    v24 = &v23[2 * (v22 >> 1)];
    v61 = v23;
    v63 = v24;
    memcpy(v23, v21, v22);
    v62 = v24;
    a9 = v40;
  }
  v64 = v60;
  if (v17)
  {
LABEL_3:
    v54 = v17;
    operator delete(v17);
  }
LABEL_4:
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  sub_2394C2EC8(a1, a8, (uint64_t)&__p);
  sub_2394C2EC8(a7, a2, (uint64_t)&v49);
  v18 = (char *)v49;
  if (v49 != v50)
  {
    sub_2394C3324((double *)&__p, (double *)&v49, (uint64_t)&v57);
    v18 = (char *)v49;
    if (!v49)
      goto LABEL_9;
    goto LABEL_8;
  }
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v25 = __p;
  v26 = v54 - (_BYTE *)__p;
  if (v54 != __p)
  {
    if (v26 < 0)
      sub_2394189F8();
    v27 = a9;
    v28 = (char *)operator new(v54 - (_BYTE *)__p);
    v29 = &v28[2 * (v26 >> 1)];
    v57 = v28;
    v59 = v29;
    memcpy(v28, v25, v26);
    v58 = v29;
    a9 = v27;
  }
  v60 = v56;
  if (v18)
  {
LABEL_8:
    v50 = v18;
    operator delete(v18);
  }
LABEL_9:
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
  sub_2394C2EC8(a4, a8, (uint64_t)&v49);
  sub_2394C2EC8(a7, a5, (uint64_t)&v46);
  v19 = v46;
  if (v46 != v47)
  {
    sub_2394C3324((double *)&v49, (double *)&v46, (uint64_t)&__p);
    v19 = v46;
    v20 = a10;
    if (!v46)
      goto LABEL_14;
    goto LABEL_13;
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  v30 = v49;
  v31 = v50 - (_BYTE *)v49;
  if (v50 != v49)
  {
    if (v31 < 0)
      sub_2394189F8();
    v32 = a9;
    v33 = (char *)operator new(v50 - (_BYTE *)v49);
    v34 = &v33[2 * (v31 >> 1)];
    __p = v33;
    v55 = v34;
    memcpy(v33, v30, v31);
    v54 = v34;
    a9 = v32;
  }
  v56 = v52;
  v20 = a10;
  if (v19)
  {
LABEL_13:
    v47 = v19;
    operator delete(v19);
  }
LABEL_14:
  if (v49)
  {
    v50 = (char *)v49;
    operator delete(v49);
  }
  sub_2394C2EC8((unint64_t)&v61, v20, (uint64_t)&v46);
  sub_2394C2EC8((unint64_t)&v57, a6, (uint64_t)&v44);
  if (v44 == v45)
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    v35 = v46;
    v36 = v47 - (_BYTE *)v46;
    if (v47 != v46)
    {
      if (v36 < 0)
        sub_2394189F8();
      v37 = a9;
      v38 = (char *)operator new(v47 - (_BYTE *)v46);
      v39 = &v38[2 * (v36 >> 1)];
      v49 = v38;
      v51 = v39;
      memcpy(v38, v35, v36);
      v50 = v39;
      a9 = v37;
    }
    v52 = v48;
  }
  else
  {
    sub_2394C3324((double *)&v46, (double *)&v44, (uint64_t)&v49);
  }
  sub_2394C2EC8((unint64_t)&__p, a3, (uint64_t)v43);
  sub_2394C50E8((uint64_t)&v49, (uint64_t)v43, a9);
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  if (v49)
  {
    v50 = (char *)v49;
    operator delete(v49);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_2394C4EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;

  if (__p)
  {
    operator delete(__p);
    v31 = a16;
    if (!a16)
    {
LABEL_3:
      v32 = a20;
      if (!a20)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v31 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = a20;
  if (!a20)
  {
LABEL_4:
    v33 = a28;
    if (!a28)
    {
LABEL_10:
      v34 = *(void **)(v29 - 152);
      if (v34)
      {
        *(_QWORD *)(v29 - 144) = v34;
        operator delete(v34);
      }
      v35 = *(void **)(v29 - 120);
      if (v35)
      {
        *(_QWORD *)(v29 - 112) = v35;
        operator delete(v35);
      }
      _Unwind_Resume(exception_object);
    }
LABEL_9:
    operator delete(v33);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v32);
  v33 = a28;
  if (!a28)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_2394C50C4()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 120))
    JUMPOUT(0x2394C50BCLL);
  JUMPOUT(0x2394C50B4);
}

void sub_2394C50D4()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 152))
    JUMPOUT(0x2394C50E0);
  JUMPOUT(0x2394C50BCLL);
}

void sub_2394C50E8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  const void *v6;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  char *v16;

  v6 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v9 = *(const void **)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v10 = v8 - *(_QWORD *)a2;
    if (v8 != *(_QWORD *)a2)
    {
      if (v10 < 0)
        sub_2394189F8();
      v11 = (char *)operator new(v8 - *(_QWORD *)a2);
      *a3 = v11;
      a3[1] = v11;
      v12 = &v11[2 * (v10 >> 1)];
      a3[2] = v12;
      memcpy(v11, v9, v10);
      a3[1] = v12;
    }
    v13 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
    {
      sub_2394C5228((double *)a1, (double *)a2, (uint64_t)a3);
      return;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v14 = v5 - (_QWORD)v6;
    if (v5 - (uint64_t)v6 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v5 - (_QWORD)v6);
    *a3 = v15;
    v16 = &v15[2 * (v14 >> 1)];
    a3[2] = v16;
    memcpy(v15, v6, v14);
    a3[1] = v16;
    v13 = *(_QWORD *)(a1 + 24);
  }
  a3[3] = v13;
}

void sub_2394C5208(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2394C5228(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  __int16 v23;
  int v24;
  char *v25;
  double v26;
  __int16 v28;
  char *v31;
  char *v32;
  char *i;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v6 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)a1 == v6)
  {
    v9 = a2[3];
    v10 = v9 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 1);
  }
  else
  {
    v7 = a1[3];
    v8 = a2[3];
    if (v8 >= v7)
      v9 = a1[3];
    else
      v9 = a2[3];
    v10 = v7 + (double)(unint64_t)((v6 - *(_QWORD *)a1) >> 1);
    v11 = v8 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 1);
    if (v10 < v11)
      v10 = v11;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(double *)(a3 + 24) = v9;
  v12 = v10 - v9;
  sub_2394C3584(a3, (int)(v10 - v9 + 1.0));
  v13 = *(char **)a3;
  **(_WORD **)a3 = 0;
  if (v12 > 0.0)
  {
    LOWORD(v14) = 0;
    v15 = 0;
    v16 = a1[3];
    v17 = *a1;
    v18 = a2[3];
    v19 = *a2;
    v20 = v16 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 1);
    v21 = v18 + (double)(unint64_t)((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 1);
    v22 = 0.0;
    do
    {
      v26 = v9 + v22;
      if (v16 <= v26 && v20 > v26)
      {
        v28 = *(_WORD *)(*(_QWORD *)&v17 + 2 * (int)(v26 - v16));
        if (v18 > v26 || v21 <= v26)
        {
LABEL_26:
          v23 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v28 = 0;
        if (v18 > v26 || v21 <= v26)
          goto LABEL_26;
      }
      v23 = *(_WORD *)(*(_QWORD *)&v19 + 2 * (int)(v26 - v18));
LABEL_12:
      v24 = (__int16)v14 + v28 + v23;
      v25 = &v13[2 * v15++];
      *(_WORD *)v25 = v24;
      v14 = (v24 - (__int16)v24) >> 16;
      *((_WORD *)v25 + 1) = v14;
      v22 = (double)(int)v15;
    }
    while (v12 > (double)(int)v15);
  }
  v31 = *(char **)(a3 + 8);
  v32 = (char *)(v13 - v31);
  if (v13 != v31)
  {
    for (i = v31 - 2; !*(_WORD *)i; i -= 2)
    {
      *(_QWORD *)(a3 + 8) = i;
      v32 += 2;
      if (i == v13)
        return;
    }
    v35 = i + 2;
    if (v35 != v13 && !*(_WORD *)v13)
    {
      v36 = 0;
      do
      {
        v37 = *(unsigned __int16 *)&v13[v36 + 2];
        v36 += 2;
      }
      while (!v37);
      v38 = v36 >> 1;
      *(double *)(a3 + 24) = *(double *)(a3 + 24) + (double)(v36 >> 1);
      if (v36)
      {
        v39 = &v13[2 * v38];
        v40 = &v32[2 * v38];
        v41 = -(uint64_t)v40;
        if (v35 != v39)
          memmove(v13, v39, -(uint64_t)v40);
        *(_QWORD *)(a3 + 8) = &v13[v41];
      }
    }
  }
}

void sub_2394C546C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ***sub_2394C5488(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_2394189F8();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_239418A80();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_2394C55FC(_QWORD *a1@<X0>, unint64_t **a2@<X1>, unint64_t **a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = *a4;
  v12 = a1[16];
  if (!v12)
  {
    sub_2394B61FC(a1 + 12);
    v12 = a1[16];
  }
  a1[16] = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 0;
  ++a1[14];
  if (*(_DWORD *)a1 == 3)
  {
    v17 = v11;
    v18 = v12;
    sub_2394C1034(a1, &v18, &v17, a5, 0xFFFFFFFFLL, 0, &v16);
    *(_QWORD *)v12 = v16;
    if (a2 == a3)
      goto LABEL_9;
  }
  else
  {
    v16 = v11;
    v17 = v12;
    sub_2394C0DF4(a1, &v17, &v16, a5, &v18);
    *(_QWORD *)v12 = v18;
    if (a2 == a3)
      goto LABEL_9;
  }
  v13 = (unint64_t *)a1[5];
  v14 = a1[3] - 1;
  do
  {
    v15 = *a2++;
    *v15 = (unint64_t)v13 & 0xFFFFFFFFFFFFFFFCLL | 2;
    a1[5] = v15;
    a1[3] = v14--;
    v13 = v15;
  }
  while (a2 != a3);
LABEL_9:
  *a6 = v12;
}

uint64_t sub_2394C5728(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5, __int128 *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int16 v53;

  v13 = *a2;
  v14 = *(_QWORD *)(a1 + 200);
  if (*a2 == v14)
  {
    v19 = *a4;
    v20 = *a3;
    v21 = *a5;
    v53 = 0;
    v52 = 0;
    v22 = *(_QWORD *)(v19 + 32);
    v50 = *(_OWORD *)(v19 + 16);
    v51 = v22;
    v23 = *(_QWORD *)(v20 + 32);
    v48 = *(_OWORD *)(v20 + 16);
    v49 = v23;
    v24 = *(_QWORD *)(v21 + 32);
    v46 = *(_OWORD *)(v21 + 16);
    v47 = v24;
    v25 = *((_QWORD *)a6 + 2);
    v44 = *a6;
    v45 = v25;
    result = sub_2394C3C18((uint64_t)&v52, (double *)&v50, (double *)&v48, (double *)&v46, (double *)&v44);
    if ((_DWORD)result)
      return result;
    v26 = (double *)(*a4 + 16);
    v27 = *a3;
LABEL_12:
    v33 = (double *)(v27 + 16);
    v34 = *a5;
    return sub_2394C59F4(a1, v26, v33, (double *)(v34 + 16), (double *)a6, a7);
  }
  v16 = *a3;
  v17 = *a4;
  if (*a3 == v14)
  {
    v28 = *a5;
    v53 = 0;
    v52 = 0;
    v29 = *(_QWORD *)(v17 + 32);
    v50 = *(_OWORD *)(v17 + 16);
    v51 = v29;
    v30 = *(_QWORD *)(v28 + 32);
    v48 = *(_OWORD *)(v28 + 16);
    v49 = v30;
    v31 = *(_QWORD *)(v13 + 32);
    v46 = *(_OWORD *)(v13 + 16);
    v47 = v31;
    v32 = *((_QWORD *)a6 + 2);
    v44 = *a6;
    v45 = v32;
    result = sub_2394C3C18((uint64_t)&v52, (double *)&v50, (double *)&v48, (double *)&v46, (double *)&v44);
    if ((_DWORD)result)
      return result;
    v26 = (double *)(*a4 + 16);
    v33 = (double *)(*a5 + 16);
    v34 = *a2;
    return sub_2394C59F4(a1, v26, v33, (double *)(v34 + 16), (double *)a6, a7);
  }
  if (v17 == v14)
  {
    v35 = *a5;
    v53 = 0;
    v52 = 0;
    v36 = *(_QWORD *)(v16 + 32);
    v50 = *(_OWORD *)(v16 + 16);
    v51 = v36;
    v37 = *(_QWORD *)(v13 + 32);
    v48 = *(_OWORD *)(v13 + 16);
    v49 = v37;
    v38 = *(_QWORD *)(v35 + 32);
    v46 = *(_OWORD *)(v35 + 16);
    v47 = v38;
    v39 = *((_QWORD *)a6 + 2);
    v44 = *a6;
    v45 = v39;
    result = sub_2394C3C18((uint64_t)&v52, (double *)&v50, (double *)&v48, (double *)&v46, (double *)&v44);
    if ((_DWORD)result)
      return result;
    v26 = (double *)(*a3 + 16);
    v27 = *a2;
    goto LABEL_12;
  }
  if (*a5 != v14)
    return sub_2394C5E8C(a1, (double *)(v13 + 16), (double *)(v16 + 16), (double *)(v17 + 16), (double *)(*a5 + 16), (double *)a6, a7);
  v53 = 0;
  v52 = 0;
  v40 = *(_QWORD *)(v13 + 32);
  v50 = *(_OWORD *)(v13 + 16);
  v51 = v40;
  v41 = *(_QWORD *)(v16 + 32);
  v48 = *(_OWORD *)(v16 + 16);
  v49 = v41;
  v42 = *(_QWORD *)(v17 + 32);
  v46 = *(_OWORD *)(v17 + 16);
  v47 = v42;
  v43 = *((_QWORD *)a6 + 2);
  v44 = *a6;
  v45 = v43;
  result = sub_2394C3C18((uint64_t)&v52, (double *)&v50, (double *)&v48, (double *)&v46, (double *)&v44);
  if (!(_DWORD)result)
  {
    v26 = (double *)(*a2 + 16);
    v33 = (double *)(*a3 + 16);
    v34 = *a4;
    return sub_2394C59F4(a1, v26, v33, (double *)(v34 + 16), (double *)a6, a7);
  }
  return result;
}

unint64_t sub_2394C59F4(uint64_t a1, double *a2, double *a3, double *a4, double *a5, int a6)
{
  unint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  double *v17;
  int v18;
  double *v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _BYTE v56[8];
  double *v57;
  double *v58;
  double *v59;
  double *v60;
  double *v61;

  v61 = (double *)*MEMORY[0x24BDAC8D0];
  result = sub_2394C631C((uint64_t)&v57, a2, a3, a4, a5);
  if (!(_DWORD)result && a6)
  {
    v57 = a2;
    v58 = a3;
    v59 = a4;
    v60 = a5;
    *(_QWORD *)&v54 = a1;
    sub_2394C9880((uint64_t)&v57, &v61, (uint64_t)&v54, 4, 1);
    v13 = *((_QWORD *)a2 + 2);
    v54 = *(_OWORD *)a2;
    v55 = v13;
    v14 = *((_QWORD *)a3 + 2);
    v52 = *(_OWORD *)a3;
    v53 = v14;
    v15 = *((_QWORD *)a4 + 2);
    v50 = *(_OWORD *)a4;
    v51 = v15;
    v16 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
    v17 = v60;
    if (v60 == a5)
      return 0xFFFFFFFFLL;
    v18 = v16;
    if (v60 == a4)
    {
      v21 = *((_QWORD *)a2 + 2);
      v54 = *(_OWORD *)a2;
      v55 = v21;
      v22 = *((_QWORD *)a3 + 2);
      v52 = *(_OWORD *)a3;
      v53 = v22;
      v23 = *((_QWORD *)a5 + 2);
      v50 = *(_OWORD *)a5;
      v51 = v23;
      v24 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
      if (v24)
        return (v24 * v18);
      v17 = v60;
      if (v60 != a3)
      {
LABEL_6:
        if (v17 != a2)
          goto LABEL_7;
LABEL_21:
        v28 = *((_QWORD *)a5 + 2);
        v54 = *(_OWORD *)a5;
        v55 = v28;
        v29 = *((_QWORD *)a3 + 2);
        v52 = *(_OWORD *)a3;
        v53 = v29;
        v30 = *((_QWORD *)a4 + 2);
        v50 = *(_OWORD *)a4;
        v51 = v30;
        v31 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
        if (v31)
          return (v31 * v18);
LABEL_7:
        v19 = v59;
        if (v59 == a5)
          return 0xFFFFFFFFLL;
        if (v59 == a4)
        {
          v32 = *((_QWORD *)a2 + 2);
          v54 = *(_OWORD *)a2;
          v55 = v32;
          v33 = *((_QWORD *)a3 + 2);
          v52 = *(_OWORD *)a3;
          v53 = v33;
          v34 = *((_QWORD *)a5 + 2);
          v50 = *(_OWORD *)a5;
          v51 = v34;
          v24 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
          if (v24)
            return (v24 * v18);
          v19 = v59;
          if (v59 != a3)
          {
LABEL_10:
            if (v19 != a2)
              goto LABEL_11;
LABEL_27:
            v38 = *((_QWORD *)a5 + 2);
            v54 = *(_OWORD *)a5;
            v55 = v38;
            v39 = *((_QWORD *)a3 + 2);
            v52 = *(_OWORD *)a3;
            v53 = v39;
            v40 = *((_QWORD *)a4 + 2);
            v50 = *(_OWORD *)a4;
            v51 = v40;
            v31 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
            if (!v31)
              goto LABEL_11;
            return (v31 * v18);
          }
        }
        else if (v59 != a3)
        {
          goto LABEL_10;
        }
        v35 = *((_QWORD *)a2 + 2);
        v54 = *(_OWORD *)a2;
        v55 = v35;
        v36 = *((_QWORD *)a5 + 2);
        v52 = *(_OWORD *)a5;
        v53 = v36;
        v37 = *((_QWORD *)a4 + 2);
        v50 = *(_OWORD *)a4;
        v51 = v37;
        v24 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
        if (v24)
          return (v24 * v18);
        if (v59 != a2)
        {
LABEL_11:
          v20 = v58;
          if (v58 != a5)
          {
            if (v58 != a4)
            {
              if (v58 != a3)
                goto LABEL_14;
LABEL_31:
              v44 = *((_QWORD *)a2 + 2);
              v54 = *(_OWORD *)a2;
              v55 = v44;
              v45 = *((_QWORD *)a5 + 2);
              v52 = *(_OWORD *)a5;
              v53 = v45;
              v46 = *((_QWORD *)a4 + 2);
              v50 = *(_OWORD *)a4;
              v51 = v46;
              v24 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
              if (!v24)
              {
                if (v58 != a2)
                  return -v18;
LABEL_35:
                v47 = *((_QWORD *)a5 + 2);
                v54 = *(_OWORD *)a5;
                v55 = v47;
                v48 = *((_QWORD *)a3 + 2);
                v52 = *(_OWORD *)a3;
                v53 = v48;
                v49 = *((_QWORD *)a4 + 2);
                v50 = *(_OWORD *)a4;
                v51 = v49;
                v31 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
                if (!v31)
                  return -v18;
                return (v31 * v18);
              }
              return (v24 * v18);
            }
            v41 = *((_QWORD *)a2 + 2);
            v54 = *(_OWORD *)a2;
            v55 = v41;
            v42 = *((_QWORD *)a3 + 2);
            v52 = *(_OWORD *)a3;
            v53 = v42;
            v43 = *((_QWORD *)a5 + 2);
            v50 = *(_OWORD *)a5;
            v51 = v43;
            v24 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
            if (!v24)
            {
              v20 = v58;
              if (v58 != a3)
              {
LABEL_14:
                if (v20 != a2)
                  return -v18;
                goto LABEL_35;
              }
              goto LABEL_31;
            }
            return (v24 * v18);
          }
          return 0xFFFFFFFFLL;
        }
        goto LABEL_27;
      }
    }
    else if (v60 != a3)
    {
      goto LABEL_6;
    }
    v25 = *((_QWORD *)a2 + 2);
    v54 = *(_OWORD *)a2;
    v55 = v25;
    v26 = *((_QWORD *)a5 + 2);
    v52 = *(_OWORD *)a5;
    v53 = v26;
    v27 = *((_QWORD *)a4 + 2);
    v50 = *(_OWORD *)a4;
    v51 = v27;
    v24 = sub_2394C2060((uint64_t)v56, (double *)&v54, (double *)&v52, (double *)&v50);
    if (v24)
      return (v24 * v18);
    if (v60 != a2)
      goto LABEL_7;
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_2394C5E8C(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, int a7)
{
  uint64_t result;
  double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  _QWORD v59[3];
  double *v60;
  double *v61;
  double *v62;

  v62 = (double *)*MEMORY[0x24BDAC8D0];
  WORD2(v59[0]) = 0;
  LODWORD(v59[0]) = 0;
  result = sub_2394CAD00((uint64_t)v59, a2, a3, a4, a5, a6);
  if ((_DWORD)result || !a7)
    return result;
  v59[0] = a2;
  v59[1] = a3;
  v59[2] = a4;
  v60 = a5;
  v61 = a6;
  *(_QWORD *)&v55 = a1;
  sub_2394C9880((uint64_t)v59, &v62, (uint64_t)&v55, 4, 1);
  v15 = v61;
  if (v61 == a6)
    return 0xFFFFFFFFLL;
  if (v61 == a5)
  {
    v58 = 0;
    v57 = 0;
    v17 = *((_QWORD *)a2 + 2);
    v55 = *(_OWORD *)a2;
    v56 = v17;
    v18 = *((_QWORD *)a3 + 2);
    v53 = *(_OWORD *)a3;
    v54 = v18;
    v19 = *((_QWORD *)a4 + 2);
    v51 = *(_OWORD *)a4;
    v52 = v19;
    v20 = *((_QWORD *)a6 + 2);
    v49 = *(_OWORD *)a6;
    v50 = v20;
    result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
    if ((_DWORD)result)
      return result;
    v15 = v61;
    if (v61 != a4)
    {
LABEL_6:
      if (v15 != a3)
        goto LABEL_7;
LABEL_18:
      v58 = 0;
      v57 = 0;
      v25 = *((_QWORD *)a2 + 2);
      v55 = *(_OWORD *)a2;
      v56 = v25;
      v26 = *((_QWORD *)a6 + 2);
      v53 = *(_OWORD *)a6;
      v54 = v26;
      v27 = *((_QWORD *)a4 + 2);
      v51 = *(_OWORD *)a4;
      v52 = v27;
      v28 = *((_QWORD *)a5 + 2);
      v49 = *(_OWORD *)a5;
      v50 = v28;
      result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
      if ((_DWORD)result)
        return result;
      if (v61 != a2)
        goto LABEL_8;
      goto LABEL_20;
    }
  }
  else if (v61 != a4)
  {
    goto LABEL_6;
  }
  v58 = 0;
  v57 = 0;
  v21 = *((_QWORD *)a2 + 2);
  v55 = *(_OWORD *)a2;
  v56 = v21;
  v22 = *((_QWORD *)a3 + 2);
  v53 = *(_OWORD *)a3;
  v54 = v22;
  v23 = *((_QWORD *)a6 + 2);
  v51 = *(_OWORD *)a6;
  v52 = v23;
  v24 = *((_QWORD *)a5 + 2);
  v49 = *(_OWORD *)a5;
  v50 = v24;
  result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
  if ((_DWORD)result)
    return result;
  v15 = v61;
  if (v61 == a3)
    goto LABEL_18;
LABEL_7:
  if (v15 != a2)
    goto LABEL_8;
LABEL_20:
  v58 = 0;
  v57 = 0;
  v29 = *((_QWORD *)a6 + 2);
  v55 = *(_OWORD *)a6;
  v56 = v29;
  v30 = *((_QWORD *)a3 + 2);
  v53 = *(_OWORD *)a3;
  v54 = v30;
  v31 = *((_QWORD *)a4 + 2);
  v51 = *(_OWORD *)a4;
  v52 = v31;
  v32 = *((_QWORD *)a5 + 2);
  v49 = *(_OWORD *)a5;
  v50 = v32;
  result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
  if ((_DWORD)result)
    return result;
LABEL_8:
  v16 = v60;
  if (v60 == a6)
    return 0xFFFFFFFFLL;
  if (v60 != a5)
  {
    if (v60 != a4)
      goto LABEL_11;
LABEL_24:
    v58 = 0;
    v57 = 0;
    v37 = *((_QWORD *)a2 + 2);
    v55 = *(_OWORD *)a2;
    v56 = v37;
    v38 = *((_QWORD *)a3 + 2);
    v53 = *(_OWORD *)a3;
    v54 = v38;
    v39 = *((_QWORD *)a6 + 2);
    v51 = *(_OWORD *)a6;
    v52 = v39;
    v40 = *((_QWORD *)a5 + 2);
    v49 = *(_OWORD *)a5;
    v50 = v40;
    result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
    if ((_DWORD)result)
      return result;
    v16 = v60;
    if (v60 != a3)
      goto LABEL_12;
LABEL_26:
    v58 = 0;
    v57 = 0;
    v41 = *((_QWORD *)a2 + 2);
    v55 = *(_OWORD *)a2;
    v56 = v41;
    v42 = *((_QWORD *)a6 + 2);
    v53 = *(_OWORD *)a6;
    v54 = v42;
    v43 = *((_QWORD *)a4 + 2);
    v51 = *(_OWORD *)a4;
    v52 = v43;
    v44 = *((_QWORD *)a5 + 2);
    v49 = *(_OWORD *)a5;
    v50 = v44;
    result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
    if ((_DWORD)result)
      return result;
    if (v60 != a2)
      return 0xFFFFFFFFLL;
    goto LABEL_28;
  }
  v58 = 0;
  v57 = 0;
  v33 = *((_QWORD *)a2 + 2);
  v55 = *(_OWORD *)a2;
  v56 = v33;
  v34 = *((_QWORD *)a3 + 2);
  v53 = *(_OWORD *)a3;
  v54 = v34;
  v35 = *((_QWORD *)a4 + 2);
  v51 = *(_OWORD *)a4;
  v52 = v35;
  v36 = *((_QWORD *)a6 + 2);
  v49 = *(_OWORD *)a6;
  v50 = v36;
  result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
  if ((_DWORD)result)
    return result;
  v16 = v60;
  if (v60 == a4)
    goto LABEL_24;
LABEL_11:
  if (v16 == a3)
    goto LABEL_26;
LABEL_12:
  if (v16 != a2)
    return 0xFFFFFFFFLL;
LABEL_28:
  v58 = 0;
  v57 = 0;
  v45 = *((_QWORD *)a6 + 2);
  v55 = *(_OWORD *)a6;
  v56 = v45;
  v46 = *((_QWORD *)a3 + 2);
  v53 = *(_OWORD *)a3;
  v54 = v46;
  v47 = *((_QWORD *)a4 + 2);
  v51 = *(_OWORD *)a4;
  v52 = v47;
  v48 = *((_QWORD *)a5 + 2);
  v49 = *(_OWORD *)a5;
  v50 = v48;
  result = sub_2394C3C18((uint64_t)&v57, (double *)&v55, (double *)&v53, (double *)&v51, (double *)&v49);
  if (!(_DWORD)result)
    return 0xFFFFFFFFLL;
  return result;
}

unint64_t sub_2394C631C(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  unint64_t StatusReg;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unint64_t v22;
  void *v24;
  double v25;
  double v26[2];
  void *v27;
  double v28;
  void *__p[4];
  void *v30;
  double v31;
  double v32[2];
  void *v33;
  double v34;
  void *v35[4];
  void *v36;
  double v37;
  double v38[2];
  void *v39;
  double v40;
  void *v41[4];
  double v42;
  double v43;
  double v44[2];
  double v45;
  double v46;
  void *v47[4];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), 0x400000uLL);
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v42 = -*a2;
  v43 = v10;
  v44[0] = -v11;
  v44[1] = v11;
  v45 = -v12;
  v46 = v12;
  v13 = *a3;
  v14 = a3[1];
  v15 = a3[2];
  *(double *)&v36 = -*a3;
  v37 = v13;
  v38[0] = -v14;
  v38[1] = v14;
  *(double *)&v39 = -v15;
  v40 = v15;
  v16 = *a4;
  v17 = a4[1];
  v18 = a4[2];
  *(double *)&v30 = -*a4;
  v31 = v16;
  v32[0] = -v17;
  v32[1] = v17;
  *(double *)&v33 = -v18;
  v34 = v18;
  v19 = *a5;
  v20 = a5[1];
  v21 = a5[2];
  *(double *)&v24 = -*a5;
  v25 = v19;
  v26[0] = -v20;
  v26[1] = v20;
  *(double *)&v27 = -v21;
  v28 = v21;
  v22 = sub_2394C6620(&v42, v44, &v45, (double *)&v36, v38, (double *)&v39, (double *)&v30, v32, (double *)&v33, (double *)&v24, v26, (double *)&v27);
  if ((_DWORD)v22 == HIDWORD(v22))
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  }
  else
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
    sub_2394C2334(a2, (uint64_t)&v42);
    sub_2394C2334(a3, (uint64_t)&v36);
    sub_2394C2334(a4, (uint64_t)&v30);
    sub_2394C2334(a5, (uint64_t)&v24);
    v22 = sub_2394C7004((uint64_t)&v42, (uint64_t)&v45, (uint64_t)v47, (uint64_t)&v36, (uint64_t)&v39, (uint64_t)v41, (uint64_t)&v30, (uint64_t)&v33, (uint64_t)v35, (uint64_t)&v24, (double *)&v27, (double *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(double *)&v27 != 0.0)
    {
      v28 = *(double *)&v27;
      operator delete(v27);
    }
    if (*(double *)&v24 != 0.0)
    {
      v25 = *(double *)&v24;
      operator delete(v24);
    }
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    if (*(double *)&v33 != 0.0)
    {
      v34 = *(double *)&v33;
      operator delete(v33);
    }
    if (*(double *)&v30 != 0.0)
    {
      v31 = *(double *)&v30;
      operator delete(v30);
    }
    if (v41[0])
    {
      v41[1] = v41[0];
      operator delete(v41[0]);
    }
    if (*(double *)&v39 != 0.0)
    {
      v40 = *(double *)&v39;
      operator delete(v39);
    }
    if (*(double *)&v36 != 0.0)
    {
      v37 = *(double *)&v36;
      operator delete(v36);
    }
    if (v47[0])
    {
      v47[1] = v47[0];
      operator delete(v47[0]);
    }
    if (v45 != 0.0)
    {
      v46 = v45;
      operator delete(*(void **)&v45);
    }
    if (v42 != 0.0)
    {
      v43 = v42;
      operator delete(*(void **)&v42);
    }
  }
  return v22;
}

void sub_2394C65D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_2394C2498((uint64_t)&a13);
  sub_2394C2498((uint64_t)&a25);
  sub_2394C2498((uint64_t)&a37);
  sub_2394C2498(v37 - 160);
  _Unwind_Resume(a1);
}

void sub_2394C660C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394C2498(v1 - 160);
  _Unwind_Resume(a1);
}

unint64_t sub_2394C6620(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  unint64_t v97;
  uint64_t v98;
  double v100[2];
  double v101[2];
  double v102[2];
  double v103[2];
  double v104[2];
  double v105[2];
  double v106[2];
  double v107[2];
  double v108[2];
  double v109[2];
  double v110[2];
  double v111[2];
  double v112[2];
  double v113[2];
  double v114[2];
  double v115[2];
  double v116[2];
  double v117[2];
  double v118[2];
  double v119[2];
  double v120[2];
  double v121[2];

  v12 = a10[1] + *a1;
  v13 = a1[1] + *a10;
  v121[0] = v12;
  v121[1] = v13;
  v14 = a11[1] + *a2;
  v15 = a2[1] + *a11;
  v120[0] = v14;
  v120[1] = v15;
  v16 = a12[1] + *a3;
  v17 = a3[1] + *a12;
  v119[0] = v16;
  v119[1] = v17;
  if (v12 <= 0.0)
  {
    v20 = v12 * -v12;
    v19 = v13 * v13;
    if (v14 > 0.0)
      goto LABEL_9;
    goto LABEL_14;
  }
  if (v13 <= 0.0)
  {
    v20 = v13 * -v13;
    v19 = v12 * v12;
    if (v14 > 0.0)
      goto LABEL_9;
LABEL_14:
    v22 = v14 * -v14;
    v21 = v15 * v15;
    goto LABEL_16;
  }
  if (v12 >= v13)
    v18 = v12;
  else
    v18 = v13;
  v19 = v18 * v18;
  v20 = -0.0;
  if (v14 <= 0.0)
    goto LABEL_14;
LABEL_9:
  if (v15 <= 0.0)
  {
    v22 = v15 * -v15;
    v21 = v14 * v14;
  }
  else
  {
    if (v14 < v15)
      v14 = v15;
    v21 = v14 * v14;
    v22 = -0.0;
  }
LABEL_16:
  v23 = v20 + v22;
  v24 = v19 + v21;
  if (v16 <= 0.0)
  {
    v26 = v16 * -v16;
    v25 = v17 * v17;
  }
  else if (v17 <= 0.0)
  {
    v26 = v17 * -v17;
    v25 = v16 * v16;
  }
  else
  {
    if (v16 < v17)
      v16 = v17;
    v25 = v16 * v16;
    v26 = -0.0;
  }
  v118[0] = v23 + v26;
  v118[1] = v24 + v25;
  v27 = a10[1] + *a4;
  v28 = a4[1] + *a10;
  v117[0] = v27;
  v117[1] = v28;
  v29 = a11[1] + *a5;
  v30 = a5[1] + *a11;
  v116[0] = v29;
  v116[1] = v30;
  v31 = a12[1] + *a6;
  v32 = a6[1] + *a12;
  v115[0] = v31;
  v115[1] = v32;
  if (v27 <= 0.0)
  {
    v35 = v27 * -v27;
    v34 = v28 * v28;
    v36 = a9;
    if (v29 > 0.0)
      goto LABEL_31;
    goto LABEL_36;
  }
  if (v28 <= 0.0)
  {
    v35 = v28 * -v28;
    v34 = v27 * v27;
    v36 = a9;
    if (v29 > 0.0)
      goto LABEL_31;
LABEL_36:
    v38 = v29 * -v29;
    v37 = v30 * v30;
    goto LABEL_38;
  }
  if (v27 >= v28)
    v33 = v27;
  else
    v33 = v28;
  v34 = v33 * v33;
  v35 = -0.0;
  v36 = a9;
  if (v29 <= 0.0)
    goto LABEL_36;
LABEL_31:
  if (v30 <= 0.0)
  {
    v38 = v30 * -v30;
    v37 = v29 * v29;
  }
  else
  {
    if (v29 < v30)
      v29 = v30;
    v37 = v29 * v29;
    v38 = -0.0;
  }
LABEL_38:
  v39 = v35 + v38;
  v40 = v34 + v37;
  if (v31 <= 0.0)
  {
    v42 = v31 * -v31;
    v41 = v32 * v32;
  }
  else if (v32 <= 0.0)
  {
    v42 = v32 * -v32;
    v41 = v31 * v31;
  }
  else
  {
    if (v31 < v32)
      v31 = v32;
    v41 = v31 * v31;
    v42 = -0.0;
  }
  v114[0] = v39 + v42;
  v114[1] = v40 + v41;
  v43 = a10[1] + *a7;
  v44 = a7[1] + *a10;
  v113[0] = v43;
  v113[1] = v44;
  v45 = a11[1] + *a8;
  v46 = a8[1] + *a11;
  v112[0] = v45;
  v112[1] = v46;
  v47 = a12[1] + *v36;
  v48 = v36[1] + *a12;
  v111[0] = v47;
  v111[1] = v48;
  if (v43 <= 0.0)
  {
    v51 = v43 * -v43;
    v50 = v44 * v44;
    if (v45 > 0.0)
      goto LABEL_53;
    goto LABEL_58;
  }
  if (v44 <= 0.0)
  {
    v51 = v44 * -v44;
    v50 = v43 * v43;
    if (v45 > 0.0)
      goto LABEL_53;
LABEL_58:
    v53 = v45 * -v45;
    v52 = v46 * v46;
    goto LABEL_60;
  }
  if (v43 >= v44)
    v49 = v43;
  else
    v49 = v44;
  v50 = v49 * v49;
  v51 = -0.0;
  if (v45 <= 0.0)
    goto LABEL_58;
LABEL_53:
  if (v46 <= 0.0)
  {
    v53 = v46 * -v46;
    v52 = v45 * v45;
  }
  else
  {
    if (v45 < v46)
      v45 = v46;
    v52 = v45 * v45;
    v53 = -0.0;
  }
LABEL_60:
  v54 = v51 + v53;
  v55 = v50 + v52;
  if (v47 <= 0.0)
  {
    v57 = v47 * -v47;
    v56 = v48 * v48;
  }
  else if (v48 <= 0.0)
  {
    v57 = v48 * -v48;
    v56 = v47 * v47;
  }
  else
  {
    if (v47 < v48)
      v47 = v48;
    v56 = v47 * v47;
    v57 = -0.0;
  }
  v110[0] = v54 + v57;
  v110[1] = v55 + v56;
  v58 = a4[1] + *a1;
  v109[0] = a1[1] + *a4;
  v109[1] = v58;
  v59 = a5[1] + *a2;
  v108[0] = a2[1] + *a5;
  v108[1] = v59;
  v60 = a6[1] + *a3;
  v107[0] = a3[1] + *a6;
  v107[1] = v60;
  v61 = a7[1] + *a1;
  v106[0] = a1[1] + *a7;
  v106[1] = v61;
  v62 = a8[1] + *a2;
  v105[0] = a2[1] + *a8;
  v105[1] = v62;
  v63 = v36[1] + *a3;
  v104[0] = a3[1] + *v36;
  v104[1] = v63;
  v64 = sub_2394C2734(v108, v104);
  v66 = v65;
  v67 = sub_2394C2734(v107, v105);
  v69 = v68 + v64;
  v70 = v66 + v67;
  v103[0] = v68 + v64;
  v103[1] = v66 + v67;
  v71 = sub_2394C2734(v107, v106);
  v73 = v72;
  v74 = sub_2394C2734(v109, v104);
  v76 = v75 + v71;
  v77 = v73 + v74;
  v102[0] = v75 + v71;
  v102[1] = v73 + v74;
  v78 = sub_2394C2734(v109, v105);
  v80 = v79;
  v81 = sub_2394C2734(v108, v106);
  v83 = v82 + v78;
  v84 = v80 + v81;
  v101[0] = v83;
  v101[1] = v84;
  if (v69 <= 0.0)
  {
    v87 = v69 * -v69;
    v86 = v70 * v70;
    if (v76 > 0.0)
      goto LABEL_75;
    goto LABEL_81;
  }
  if (v70 <= 0.0)
  {
    v87 = v70 * -v70;
    v86 = v69 * v69;
    if (v76 > 0.0)
      goto LABEL_75;
LABEL_81:
    v90 = v76 * -v76;
    v89 = v77 * v77;
    goto LABEL_83;
  }
  if (v69 >= v70)
    v85 = v69;
  else
    v85 = v70;
  v86 = v85 * v85;
  v87 = -0.0;
  if (v76 <= 0.0)
    goto LABEL_81;
LABEL_75:
  if (v77 <= 0.0)
  {
    v90 = v77 * -v77;
    v89 = v76 * v76;
  }
  else
  {
    if (v76 >= v77)
      v88 = v76;
    else
      v88 = v77;
    v89 = v88 * v88;
    v90 = -0.0;
  }
LABEL_83:
  v91 = v87 + v90;
  v92 = v86 + v89;
  if (v83 <= 0.0)
  {
    v94 = v83 * -v83;
    v93 = v84 * v84;
  }
  else if (v84 <= 0.0)
  {
    v94 = v84 * -v84;
    v93 = v83 * v83;
  }
  else
  {
    if (v83 >= v84)
      v84 = v83;
    v93 = v84 * v84;
    v94 = -0.0;
  }
  v100[0] = v91 + v94;
  v100[1] = v92 + v93;
  v95 = sub_2394C6D1C(v121, v120, v119, v118, v113, v112, v111, v110, v117, v116, v115, v114, v103, v102, v101, v100);
  if (v95 >= 0.0)
  {
    if (v96 >= 0.0)
    {
      if (v96 == -v95)
      {
        v97 = 0;
        v98 = 0;
        return v98 | v97;
      }
      v97 = 0x100000000;
    }
    else
    {
      v97 = 0xFFFFFFFF00000000;
    }
    v98 = 0xFFFFFFFFLL;
    return v98 | v97;
  }
  v97 = 0x100000000;
  v98 = 1;
  return v98 | v97;
}

double sub_2394C6D1C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v79[2];
  double v80[2];
  double v81[2];
  double v82[2];
  double v83[2];
  double v84[2];
  double v85[2];
  double v86[2];
  double v87[2];
  double v88[3];

  v21 = sub_2394C2734(a5, a2);
  v23 = v22;
  v24 = sub_2394C2734(a1, a6);
  v88[0] = v25 + v21;
  v88[1] = v23 + v24;
  v26 = sub_2394C2734(a9, a2);
  v28 = v27;
  v29 = sub_2394C2734(a1, a10);
  v87[0] = v30 + v26;
  v87[1] = v28 + v29;
  v31 = sub_2394C2734(a13, a2);
  v33 = v32;
  v34 = sub_2394C2734(a1, a14);
  v86[0] = v35 + v31;
  v86[1] = v33 + v34;
  v36 = sub_2394C2734(a9, a6);
  v38 = v37;
  v39 = sub_2394C2734(a5, a10);
  v85[0] = v40 + v36;
  v85[1] = v38 + v39;
  v41 = sub_2394C2734(a13, a6);
  v43 = v42;
  v44 = sub_2394C2734(a5, a14);
  v84[0] = v45 + v41;
  v84[1] = v43 + v44;
  v46 = sub_2394C2734(a13, a10);
  v48 = v47;
  v49 = sub_2394C2734(a9, a14);
  v83[0] = v50 + v46;
  v83[1] = v48 + v49;
  v51 = sub_2394C2734(v85, a3);
  v54 = v53 + sub_2394C2734(v87, a7);
  v82[0] = v52 + v51 + sub_2394C2734(v88, a11);
  v82[1] = v54 + v55;
  v56 = sub_2394C2734(v84, a3);
  v59 = v58 + sub_2394C2734(v86, a7);
  v81[0] = v57 + v56 + sub_2394C2734(v88, a15);
  v81[1] = v59 + v60;
  v61 = sub_2394C2734(v83, a3);
  v64 = v63 + sub_2394C2734(v86, a11);
  v80[0] = v62 + v61 + sub_2394C2734(v87, a15);
  v80[1] = v64 + v65;
  v66 = sub_2394C2734(v83, a7);
  v69 = v68 + sub_2394C2734(v84, a11);
  v79[0] = v67 + v66 + sub_2394C2734(v85, a15);
  v79[1] = v69 + v70;
  v71 = sub_2394C2734(v79, a4);
  sub_2394C2734(v80, a8);
  v73 = v72 + v71 + sub_2394C2734(v81, a12);
  sub_2394C2734(v82, a16);
  return v74 + v73;
}

uint64_t sub_2394C7004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, double *a11, double *a12)
{
  double *v17;
  double *v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  const void *v30;
  int64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  const void *v35;
  int64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  const void *v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  const void *v45;
  int64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  int64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  const void *v57;
  int64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  const void *v62;
  int64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  const void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  const void *v72;
  int64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  const void *v77;
  int64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  const void *v82;
  int64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  const void *v87;
  int64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  const void *v92;
  int64_t v93;
  char *v94;
  char *v95;
  void *v96;
  void *v97;
  void *v98;
  uint64_t v99;
  char *v101;
  int64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int64_t v106;
  char *v107;
  char *v108;
  char *v109;
  int64_t v110;
  char *v111;
  char *v112;
  uint64_t v114;
  void *v117[4];
  void *v118[4];
  void *v119[4];
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  void *v127;
  char *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  char *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  void *v139;
  char *v140;
  uint64_t v141;
  void *v142;
  void *v143;
  char *v144;
  uint64_t v145;
  void *v146;
  void *v147;
  char *v148;
  uint64_t v149;
  void *v150;
  void *v151;
  char *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  char *v156;
  uint64_t v157;
  void *v158[4];
  void *v159;
  void *v160;
  char *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  char *v165;
  uint64_t v166;
  void *v167;
  void *v168;
  char *v169;
  uint64_t v170;
  void *v171[4];
  void *__p;
  void *v173;
  char *v174;
  uint64_t v175;
  void *v176;
  void *v177;
  char *v178;
  uint64_t v179;
  void *v180;
  void *v181;
  char *v182;
  uint64_t v183;
  void *v184[4];
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;

  if (*(_QWORD *)a10 != *(_QWORD *)(a10 + 8))
  {
    sub_2394C3324((double *)a1, (double *)a10, (uint64_t)&v193);
    v17 = a11;
    if (*(_QWORD *)a11 != *((_QWORD *)a11 + 1))
      goto LABEL_3;
LABEL_9:
    v189 = 0;
    v190 = 0;
    v191 = 0;
    v25 = *(const void **)a2;
    v24 = *(_QWORD *)(a2 + 8);
    v26 = v24 - *(_QWORD *)a2;
    if (v24 != *(_QWORD *)a2)
    {
      if (v26 < 0)
        sub_2394189F8();
      v27 = (char *)operator new(v24 - *(_QWORD *)a2);
      v28 = &v27[2 * (v26 >> 1)];
      v189 = v27;
      v191 = v28;
      memcpy(v27, v25, v26);
      v190 = v28;
    }
    v192 = *(_QWORD *)(a2 + 24);
    v18 = a12;
    v114 = a7;
    if (*(_QWORD *)a12 != *((_QWORD *)a12 + 1))
      goto LABEL_4;
    goto LABEL_13;
  }
  v193 = 0;
  v194 = 0;
  v195 = 0;
  v20 = *(const void **)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v21 = v19 - *(_QWORD *)a1;
  if (v19 != *(_QWORD *)a1)
  {
    if (v21 < 0)
      sub_2394189F8();
    v22 = (char *)operator new(v19 - *(_QWORD *)a1);
    v23 = &v22[2 * (v21 >> 1)];
    v193 = v22;
    v195 = v23;
    memcpy(v22, v20, v21);
    v194 = v23;
  }
  v196 = *(_QWORD *)(a1 + 24);
  v17 = a11;
  if (*(_QWORD *)a11 == *((_QWORD *)a11 + 1))
    goto LABEL_9;
LABEL_3:
  sub_2394C3324((double *)a2, v17, (uint64_t)&v189);
  v18 = a12;
  v114 = a7;
  if (*(_QWORD *)a12 != *((_QWORD *)a12 + 1))
  {
LABEL_4:
    sub_2394C3324((double *)a3, v18, (uint64_t)&v185);
    goto LABEL_17;
  }
LABEL_13:
  v185 = 0;
  v186 = 0;
  v187 = 0;
  v30 = *(const void **)a3;
  v29 = *(_QWORD *)(a3 + 8);
  v31 = v29 - *(_QWORD *)a3;
  if (v29 != *(_QWORD *)a3)
  {
    if (v31 < 0)
      sub_2394189F8();
    v32 = (char *)operator new(v29 - *(_QWORD *)a3);
    v33 = &v32[2 * (v31 >> 1)];
    v185 = v32;
    v187 = v33;
    memcpy(v32, v30, v31);
    v186 = v33;
    a7 = v114;
  }
  v188 = *(_QWORD *)(a3 + 24);
LABEL_17:
  sub_2394C2EC8((unint64_t)&v193, (double *)&v193, (uint64_t)&v180);
  sub_2394C2EC8((unint64_t)&v189, (double *)&v189, (uint64_t)&v176);
  sub_2394C50E8((uint64_t)&v180, (uint64_t)&v176, &v197);
  sub_2394C2EC8((unint64_t)&v185, (double *)&v185, (uint64_t)&__p);
  sub_2394C50E8((uint64_t)&v197, (uint64_t)&__p, v184);
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (*(_QWORD *)a10 != *(_QWORD *)(a10 + 8))
  {
    sub_2394C3324((double *)a4, (double *)a10, (uint64_t)&v180);
    if (*(_QWORD *)v17 != *((_QWORD *)v17 + 1))
      goto LABEL_27;
LABEL_33:
    v177 = 0;
    v176 = 0;
    v178 = 0;
    v40 = *(const void **)a5;
    v39 = *(_QWORD *)(a5 + 8);
    v41 = v39 - *(_QWORD *)a5;
    if (v39 != *(_QWORD *)a5)
    {
      if (v41 < 0)
        sub_2394189F8();
      v42 = (char *)operator new(v39 - *(_QWORD *)a5);
      v43 = &v42[2 * (v41 >> 1)];
      v176 = v42;
      v178 = v43;
      memcpy(v42, v40, v41);
      v177 = v43;
      a7 = v114;
    }
    v179 = *(_QWORD *)(a5 + 24);
    if (*(_QWORD *)v18 != *((_QWORD *)v18 + 1))
      goto LABEL_28;
    goto LABEL_37;
  }
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v35 = *(const void **)a4;
  v34 = *(_QWORD *)(a4 + 8);
  v36 = v34 - *(_QWORD *)a4;
  if (v34 != *(_QWORD *)a4)
  {
    if (v36 < 0)
      sub_2394189F8();
    v37 = (char *)operator new(v34 - *(_QWORD *)a4);
    v38 = &v37[2 * (v36 >> 1)];
    v180 = v37;
    v182 = v38;
    memcpy(v37, v35, v36);
    v181 = v38;
    a7 = v114;
  }
  v183 = *(_QWORD *)(a4 + 24);
  if (*(_QWORD *)v17 == *((_QWORD *)v17 + 1))
    goto LABEL_33;
LABEL_27:
  sub_2394C3324((double *)a5, v17, (uint64_t)&v176);
  if (*(_QWORD *)v18 != *((_QWORD *)v18 + 1))
  {
LABEL_28:
    sub_2394C3324((double *)a6, v18, (uint64_t)&__p);
    goto LABEL_41;
  }
LABEL_37:
  v173 = 0;
  __p = 0;
  v174 = 0;
  v45 = *(const void **)a6;
  v44 = *(_QWORD *)(a6 + 8);
  v46 = v44 - *(_QWORD *)a6;
  if (v44 != *(_QWORD *)a6)
  {
    if (v46 < 0)
      sub_2394189F8();
    v47 = (char *)operator new(v44 - *(_QWORD *)a6);
    v48 = &v47[2 * (v46 >> 1)];
    __p = v47;
    v174 = v48;
    memcpy(v47, v45, v46);
    v173 = v48;
    a7 = v114;
  }
  v175 = *(_QWORD *)(a6 + 24);
LABEL_41:
  sub_2394C2EC8((unint64_t)&v180, (double *)&v180, (uint64_t)&v167);
  sub_2394C2EC8((unint64_t)&v176, (double *)&v176, (uint64_t)&v163);
  sub_2394C50E8((uint64_t)&v167, (uint64_t)&v163, &v197);
  sub_2394C2EC8((unint64_t)&__p, (double *)&__p, (uint64_t)&v159);
  sub_2394C50E8((uint64_t)&v197, (uint64_t)&v159, v171);
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (*(_QWORD *)a10 != *(_QWORD *)(a10 + 8))
  {
    sub_2394C3324((double *)a7, (double *)a10, (uint64_t)&v167);
    if (*(_QWORD *)v17 != *((_QWORD *)v17 + 1))
      goto LABEL_51;
LABEL_57:
    v164 = 0;
    v163 = 0;
    v165 = 0;
    v49 = a8;
    v57 = *(const void **)a8;
    v56 = *(_QWORD *)(a8 + 8);
    v58 = v56 - *(_QWORD *)a8;
    if (v56 != *(_QWORD *)a8)
    {
      if (v58 < 0)
        sub_2394189F8();
      v59 = (char *)operator new(v56 - *(_QWORD *)a8);
      v60 = &v59[2 * (v58 >> 1)];
      v163 = v59;
      v165 = v60;
      memcpy(v59, v57, v58);
      v164 = v60;
    }
    v166 = *(_QWORD *)(a8 + 24);
    v50 = a9;
    if (*(_QWORD *)v18 != *((_QWORD *)v18 + 1))
      goto LABEL_52;
    goto LABEL_61;
  }
  v168 = 0;
  v167 = 0;
  v169 = 0;
  v52 = *(const void **)a7;
  v51 = *(_QWORD *)(a7 + 8);
  v53 = v51 - *(_QWORD *)a7;
  if (v51 != *(_QWORD *)a7)
  {
    if (v53 < 0)
      sub_2394189F8();
    v54 = (char *)operator new(v51 - *(_QWORD *)a7);
    v55 = &v54[2 * (v53 >> 1)];
    v167 = v54;
    v169 = v55;
    memcpy(v54, v52, v53);
    v168 = v55;
  }
  v170 = *(_QWORD *)(a7 + 24);
  if (*(_QWORD *)v17 == *((_QWORD *)v17 + 1))
    goto LABEL_57;
LABEL_51:
  sub_2394C3324((double *)a8, v17, (uint64_t)&v163);
  v49 = a8;
  v50 = a9;
  if (*(_QWORD *)v18 != *((_QWORD *)v18 + 1))
  {
LABEL_52:
    sub_2394C3324((double *)v50, v18, (uint64_t)&v159);
    goto LABEL_65;
  }
LABEL_61:
  v160 = 0;
  v159 = 0;
  v161 = 0;
  v62 = *(const void **)v50;
  v61 = *(_QWORD *)(v50 + 8);
  v63 = v61 - *(_QWORD *)v50;
  if (v61 != *(_QWORD *)v50)
  {
    if (v63 < 0)
      sub_2394189F8();
    v64 = (char *)operator new(v61 - *(_QWORD *)v50);
    v65 = &v64[2 * (v63 >> 1)];
    v159 = v64;
    v161 = v65;
    memcpy(v64, v62, v63);
    v160 = v65;
    a7 = v114;
  }
  v162 = *(_QWORD *)(v50 + 24);
LABEL_65:
  sub_2394C2EC8((unint64_t)&v167, (double *)&v167, (uint64_t)&v154);
  sub_2394C2EC8((unint64_t)&v163, (double *)&v163, (uint64_t)&v150);
  sub_2394C50E8((uint64_t)&v154, (uint64_t)&v150, &v197);
  sub_2394C2EC8((unint64_t)&v159, (double *)&v159, (uint64_t)&v146);
  sub_2394C50E8((uint64_t)&v197, (uint64_t)&v146, v158);
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v67 = *(const void **)a4;
    v66 = *(_QWORD *)(a4 + 8);
    v68 = v66 - *(_QWORD *)a4;
    if (v66 != *(_QWORD *)a4)
    {
      if (v68 < 0)
        sub_2394189F8();
      v69 = (char *)operator new(v66 - *(_QWORD *)a4);
      v70 = &v69[2 * (v68 >> 1)];
      v154 = v69;
      v156 = v70;
      memcpy(v69, v67, v68);
      v155 = v70;
      a7 = v114;
    }
    v157 = *(_QWORD *)(a4 + 24);
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
    {
LABEL_75:
      sub_2394C3324((double *)a5, (double *)a2, (uint64_t)&v150);
      if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
        goto LABEL_76;
      goto LABEL_88;
    }
  }
  else
  {
    sub_2394C3324((double *)a4, (double *)a1, (uint64_t)&v154);
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
      goto LABEL_75;
  }
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v72 = *(const void **)a5;
  v71 = *(_QWORD *)(a5 + 8);
  v73 = v71 - *(_QWORD *)a5;
  if (v71 != *(_QWORD *)a5)
  {
    if (v73 < 0)
      sub_2394189F8();
    v74 = (char *)operator new(v71 - *(_QWORD *)a5);
    v75 = &v74[2 * (v73 >> 1)];
    v150 = v74;
    v152 = v75;
    memcpy(v74, v72, v73);
    v151 = v75;
    a7 = v114;
  }
  v153 = *(_QWORD *)(a5 + 24);
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
LABEL_76:
    sub_2394C3324((double *)a6, (double *)a3, (uint64_t)&v146);
    if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
      goto LABEL_77;
    goto LABEL_92;
  }
LABEL_88:
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v77 = *(const void **)a6;
  v76 = *(_QWORD *)(a6 + 8);
  v78 = v76 - *(_QWORD *)a6;
  if (v76 != *(_QWORD *)a6)
  {
    if (v78 < 0)
      sub_2394189F8();
    v79 = (char *)operator new(v76 - *(_QWORD *)a6);
    v80 = &v79[2 * (v78 >> 1)];
    v146 = v79;
    v148 = v80;
    memcpy(v79, v77, v78);
    v147 = v80;
    a7 = v114;
  }
  v149 = *(_QWORD *)(a6 + 24);
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
LABEL_77:
    sub_2394C3324((double *)a7, (double *)a1, (uint64_t)&v142);
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
      goto LABEL_78;
LABEL_96:
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v87 = *(const void **)v49;
    v86 = *(_QWORD *)(v49 + 8);
    v88 = v86 - *(_QWORD *)v49;
    if (v86 != *(_QWORD *)v49)
    {
      if (v88 < 0)
        sub_2394189F8();
      v89 = (char *)operator new(v86 - *(_QWORD *)v49);
      v90 = &v89[2 * (v88 >> 1)];
      v138 = v89;
      v140 = v90;
      memcpy(v89, v87, v88);
      v139 = v90;
    }
    v141 = *(_QWORD *)(v49 + 24);
    if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
      goto LABEL_79;
    goto LABEL_100;
  }
LABEL_92:
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v82 = *(const void **)a7;
  v81 = *(_QWORD *)(a7 + 8);
  v83 = v81 - *(_QWORD *)a7;
  if (v81 != *(_QWORD *)a7)
  {
    if (v83 < 0)
      sub_2394189F8();
    v84 = (char *)operator new(v81 - *(_QWORD *)a7);
    v85 = &v84[2 * (v83 >> 1)];
    v142 = v84;
    v144 = v85;
    memcpy(v84, v82, v83);
    v143 = v85;
  }
  v145 = *(_QWORD *)(a7 + 24);
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    goto LABEL_96;
LABEL_78:
  sub_2394C3324((double *)v49, (double *)a2, (uint64_t)&v138);
  if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
LABEL_79:
    sub_2394C3324((double *)v50, (double *)a3, (uint64_t)&v134);
    goto LABEL_104;
  }
LABEL_100:
  v134 = 0;
  v135 = 0;
  v136 = 0;
  v92 = *(const void **)v50;
  v91 = *(_QWORD *)(v50 + 8);
  v93 = v91 - *(_QWORD *)v50;
  if (v91 != *(_QWORD *)v50)
  {
    if (v93 < 0)
      sub_2394189F8();
    v94 = (char *)operator new(v91 - *(_QWORD *)v50);
    v95 = &v94[2 * (v93 >> 1)];
    v134 = v94;
    v136 = v95;
    memcpy(v94, v92, v93);
    v135 = v95;
  }
  v137 = *(_QWORD *)(v50 + 24);
LABEL_104:
  sub_2394C2EC8((unint64_t)&v150, (double *)&v134, (uint64_t)&v197);
  sub_2394C2EC8((unint64_t)&v146, (double *)&v138, (uint64_t)&v126);
  v96 = v126;
  if (v126 != v127)
  {
    sub_2394C3324((double *)&v197, (double *)&v126, (uint64_t)&v130);
    v96 = v126;
    if (!v126)
      goto LABEL_107;
    goto LABEL_106;
  }
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v101 = v197;
  v102 = v198 - v197;
  if (v198 != v197)
  {
    if (v102 < 0)
      sub_2394189F8();
    v103 = (char *)operator new(v198 - v197);
    v104 = &v103[2 * (v102 >> 1)];
    v130 = v103;
    v132 = v104;
    memcpy(v103, v101, v102);
    v131 = v104;
  }
  v133 = v199;
  if (v96)
  {
LABEL_106:
    v127 = v96;
    operator delete(v96);
  }
LABEL_107:
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  sub_2394C2EC8((unint64_t)&v146, (double *)&v142, (uint64_t)&v197);
  sub_2394C2EC8((unint64_t)&v154, (double *)&v134, (uint64_t)&v122);
  v97 = v122;
  if (v122 != v123)
  {
    sub_2394C3324((double *)&v197, (double *)&v122, (uint64_t)&v126);
    v97 = v122;
    if (!v122)
      goto LABEL_112;
    goto LABEL_111;
  }
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v105 = v197;
  v106 = v198 - v197;
  if (v198 != v197)
  {
    if (v106 < 0)
      sub_2394189F8();
    v107 = (char *)operator new(v198 - v197);
    v108 = &v107[2 * (v106 >> 1)];
    v126 = v107;
    v128 = v108;
    memcpy(v107, v105, v106);
    v127 = v108;
  }
  v129 = v199;
  if (v97)
  {
LABEL_111:
    v123 = v97;
    operator delete(v97);
  }
LABEL_112:
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  sub_2394C2EC8((unint64_t)&v154, (double *)&v138, (uint64_t)&v197);
  sub_2394C2EC8((unint64_t)&v150, (double *)&v142, (uint64_t)&v120);
  v98 = v120;
  if (v120 != v121)
  {
    sub_2394C3324((double *)&v197, (double *)&v120, (uint64_t)&v122);
    v98 = v120;
    if (!v120)
      goto LABEL_117;
    goto LABEL_116;
  }
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v109 = v197;
  v110 = v198 - v197;
  if (v198 != v197)
  {
    if (v110 < 0)
      sub_2394189F8();
    v111 = (char *)operator new(v198 - v197);
    v112 = &v111[2 * (v110 >> 1)];
    v122 = v111;
    v124 = v112;
    memcpy(v111, v109, v110);
    v123 = v112;
  }
  v125 = v199;
  if (v98)
  {
LABEL_116:
    v121 = v98;
    operator delete(v98);
  }
LABEL_117:
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  sub_2394C2EC8((unint64_t)&v130, (double *)&v130, (uint64_t)v119);
  sub_2394C2EC8((unint64_t)&v126, (double *)&v126, (uint64_t)v118);
  sub_2394C50E8((uint64_t)v119, (uint64_t)v118, &v197);
  sub_2394C2EC8((unint64_t)&v122, (double *)&v122, (uint64_t)v117);
  sub_2394C50E8((uint64_t)&v197, (uint64_t)v117, &v120);
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v118[0])
  {
    v118[1] = v118[0];
    operator delete(v118[0]);
  }
  if (v119[0])
  {
    v119[1] = v119[0];
    operator delete(v119[0]);
  }
  sub_2394C85FC((unint64_t)&v193, (double *)&v189, (double *)&v185, (double *)v184, (unint64_t)&v167, (double *)&v163, (double *)&v159, (double *)v158, &v197, (unint64_t)&v180, (double *)&v176, (double *)&__p, (double *)v171, (unint64_t)&v130, (double *)&v126, (double *)&v122, (double *)&v120);
  if (v197 == v198)
  {
    v99 = 0;
    if (v197)
    {
LABEL_132:
      v198 = v197;
      operator delete(v197);
    }
  }
  else
  {
    if (*((__int16 *)v198 - 1) > 0)
      v99 = 1;
    else
      v99 = 0xFFFFFFFFLL;
    if (v197)
      goto LABEL_132;
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (v134)
  {
    v135 = v134;
    operator delete(v134);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (v158[0])
  {
    v158[1] = v158[0];
    operator delete(v158[0]);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v171[0])
  {
    v171[1] = v171[0];
    operator delete(v171[0]);
  }
  if (__p)
  {
    v173 = __p;
    operator delete(__p);
  }
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v184[0])
  {
    v184[1] = v184[0];
    operator delete(v184[0]);
  }
  if (v185)
  {
    v186 = v185;
    operator delete(v185);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  return v99;
}

void sub_2394C7EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a66;
  void *a70;
  uint64_t v70;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;

  if (__p)
  {
    operator delete(__p);
    v72 = a34;
    if (!a34)
    {
LABEL_3:
      v73 = *(void **)(v70 - 120);
      if (!v73)
      {
LABEL_8:
        if (a42)
          operator delete(a42);
        if (a46)
          operator delete(a46);
        if (a50)
        {
          operator delete(a50);
          v74 = a54;
          if (!a54)
          {
LABEL_14:
            v75 = a58;
            if (!a58)
              goto LABEL_15;
            goto LABEL_22;
          }
        }
        else
        {
          v74 = a54;
          if (!a54)
            goto LABEL_14;
        }
        operator delete(v74);
        v75 = a58;
        if (!a58)
        {
LABEL_15:
          v76 = a62;
          if (!a62)
            goto LABEL_16;
          goto LABEL_23;
        }
LABEL_22:
        operator delete(v75);
        v76 = a62;
        if (!a62)
        {
LABEL_16:
          v77 = a66;
          if (!a66)
            goto LABEL_17;
          goto LABEL_24;
        }
LABEL_23:
        operator delete(v76);
        v77 = a66;
        if (!a66)
        {
LABEL_17:
          v78 = a70;
          if (!a70)
            goto LABEL_18;
          goto LABEL_25;
        }
LABEL_24:
        operator delete(v77);
        v78 = a70;
        if (!a70)
        {
LABEL_18:
          v79 = (void *)STACK[0x208];
          if (!STACK[0x208])
          {
LABEL_27:
            v80 = (void *)STACK[0x228];
            if (STACK[0x228])
            {
              STACK[0x230] = (unint64_t)v80;
              operator delete(v80);
              v81 = (void *)STACK[0x248];
              if (!STACK[0x248])
              {
LABEL_29:
                v82 = (void *)STACK[0x268];
                if (!STACK[0x268])
                  goto LABEL_30;
                goto LABEL_34;
              }
            }
            else
            {
              v81 = (void *)STACK[0x248];
              if (!STACK[0x248])
                goto LABEL_29;
            }
            STACK[0x250] = (unint64_t)v81;
            operator delete(v81);
            v82 = (void *)STACK[0x268];
            if (!STACK[0x268])
            {
LABEL_30:
              v83 = (void *)STACK[0x288];
              if (!STACK[0x288])
              {
LABEL_36:
                v84 = (void *)STACK[0x2A8];
                if (STACK[0x2A8])
                {
                  STACK[0x2B0] = (unint64_t)v84;
                  operator delete(v84);
                  v85 = (void *)STACK[0x2C8];
                  if (!STACK[0x2C8])
                  {
LABEL_38:
                    v86 = (void *)STACK[0x2E8];
                    if (!STACK[0x2E8])
                      goto LABEL_39;
                    goto LABEL_43;
                  }
                }
                else
                {
                  v85 = (void *)STACK[0x2C8];
                  if (!STACK[0x2C8])
                    goto LABEL_38;
                }
                STACK[0x2D0] = (unint64_t)v85;
                operator delete(v85);
                v86 = (void *)STACK[0x2E8];
                if (!STACK[0x2E8])
                {
LABEL_39:
                  v87 = *(void **)(v70 - 248);
                  if (!v87)
                  {
LABEL_45:
                    v88 = *(void **)(v70 - 216);
                    if (v88)
                    {
                      *(_QWORD *)(v70 - 208) = v88;
                      operator delete(v88);
                      v89 = *(void **)(v70 - 184);
                      if (!v89)
                      {
LABEL_47:
                        v90 = *(void **)(v70 - 152);
                        if (!v90)
                          goto LABEL_49;
                        goto LABEL_48;
                      }
                    }
                    else
                    {
                      v89 = *(void **)(v70 - 184);
                      if (!v89)
                        goto LABEL_47;
                    }
                    *(_QWORD *)(v70 - 176) = v89;
                    operator delete(v89);
                    v90 = *(void **)(v70 - 152);
                    if (!v90)
LABEL_49:
                      _Unwind_Resume(a1);
LABEL_48:
                    *(_QWORD *)(v70 - 144) = v90;
                    operator delete(v90);
                    goto LABEL_49;
                  }
LABEL_44:
                  *(_QWORD *)(v70 - 240) = v87;
                  operator delete(v87);
                  goto LABEL_45;
                }
LABEL_43:
                STACK[0x2F0] = (unint64_t)v86;
                operator delete(v86);
                v87 = *(void **)(v70 - 248);
                if (!v87)
                  goto LABEL_45;
                goto LABEL_44;
              }
LABEL_35:
              STACK[0x290] = (unint64_t)v83;
              operator delete(v83);
              goto LABEL_36;
            }
LABEL_34:
            STACK[0x270] = (unint64_t)v82;
            operator delete(v82);
            v83 = (void *)STACK[0x288];
            if (!STACK[0x288])
              goto LABEL_36;
            goto LABEL_35;
          }
LABEL_26:
          STACK[0x210] = (unint64_t)v79;
          operator delete(v79);
          goto LABEL_27;
        }
LABEL_25:
        operator delete(v78);
        v79 = (void *)STACK[0x208];
        if (!STACK[0x208])
          goto LABEL_27;
        goto LABEL_26;
      }
LABEL_7:
      *(_QWORD *)(v70 - 112) = v73;
      operator delete(v73);
      goto LABEL_8;
    }
  }
  else
  {
    v72 = a34;
    if (!a34)
      goto LABEL_3;
  }
  operator delete(v72);
  v73 = *(void **)(v70 - 120);
  if (!v73)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_2394C83EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (!a42)
    JUMPOUT(0x2394C8234);
  JUMPOUT(0x2394C822CLL);
}

void sub_2394C83FC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 120))
    JUMPOUT(0x2394C8408);
  JUMPOUT(0x2394C8234);
}

void sub_2394C8410()
{
  JUMPOUT(0x2394C8234);
}

void sub_2394C8418()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 120))
    JUMPOUT(0x2394C8424);
  JUMPOUT(0x2394C8244);
}

void sub_2394C842C()
{
  JUMPOUT(0x2394C8244);
}

void sub_2394C8434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  void *a66;
  uint64_t a70;
  uint64_t v70;
  void *v71;
  void *v72;

  if (__p)
  {
    operator delete(__p);
    v71 = *(void **)(v70 - 120);
    if (!v71)
    {
LABEL_3:
      v72 = a66;
      if (!a66)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v71 = *(void **)(v70 - 120);
    if (!v71)
      goto LABEL_3;
  }
  *(_QWORD *)(v70 - 112) = v71;
  operator delete(v71);
  v72 = a66;
  if (!a66)
  {
LABEL_4:
    if (a70)
      goto LABEL_12;
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v72);
  if (a70)
LABEL_12:
    JUMPOUT(0x2394C82E4);
LABEL_13:
  JUMPOUT(0x2394C82E8);
}

void sub_2394C84C4()
{
  JUMPOUT(0x2394C82E8);
}

void sub_2394C84CC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;

  v1 = (void *)STACK[0x228];
  if (STACK[0x228])
  {
    STACK[0x230] = (unint64_t)v1;
    operator delete(v1);
    v2 = *(void **)(v0 - 120);
    if (!v2)
    {
LABEL_3:
      v3 = (void *)STACK[0x248];
      if (!STACK[0x248])
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v2 = *(void **)(v0 - 120);
    if (!v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v0 - 112) = v2;
  operator delete(v2);
  v3 = (void *)STACK[0x248];
  if (!STACK[0x248])
  {
LABEL_4:
    v4 = STACK[0x268];
    if (STACK[0x268])
      goto LABEL_9;
    goto LABEL_13;
  }
LABEL_8:
  STACK[0x250] = (unint64_t)v3;
  operator delete(v3);
  v4 = STACK[0x268];
  if (STACK[0x268])
  {
LABEL_9:
    STACK[0x270] = v4;
    JUMPOUT(0x2394C8340);
  }
LABEL_13:
  JUMPOUT(0x2394C8344);
}

void sub_2394C855C()
{
  JUMPOUT(0x2394C8344);
}

void sub_2394C8564()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;

  v1 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v1;
    operator delete(v1);
    v2 = *(void **)(v0 - 120);
    if (!v2)
    {
LABEL_3:
      v3 = (void *)STACK[0x2C8];
      if (!STACK[0x2C8])
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v2 = *(void **)(v0 - 120);
    if (!v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v0 - 112) = v2;
  operator delete(v2);
  v3 = (void *)STACK[0x2C8];
  if (!STACK[0x2C8])
  {
LABEL_4:
    v4 = STACK[0x2E8];
    if (STACK[0x2E8])
      goto LABEL_9;
    goto LABEL_13;
  }
LABEL_8:
  STACK[0x2D0] = (unint64_t)v3;
  operator delete(v3);
  v4 = STACK[0x2E8];
  if (STACK[0x2E8])
  {
LABEL_9:
    STACK[0x2F0] = v4;
    JUMPOUT(0x2394C839CLL);
  }
LABEL_13:
  JUMPOUT(0x2394C83A0);
}

void sub_2394C85F4()
{
  JUMPOUT(0x2394C83A0);
}

void sub_2394C85FC(unint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, unint64_t a5@<X4>, double *a6@<X5>, double *a7@<X6>, double *a8@<X7>, _QWORD *a9@<X8>, unint64_t a10, double *a11, double *a12, double *a13, unint64_t a14, double *a15, double *a16, double *a17)
{
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  _BYTE *v29;
  void *v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  char *v35;
  int64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  char *v40;
  int64_t v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  char *v45;
  int64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  void *v50;
  int64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  void *v55;
  int64_t v56;
  char *v57;
  char *v58;
  void *v59;
  int64_t v60;
  char *v61;
  char *v62;
  void *v63;
  int64_t v64;
  char *v65;
  char *v66;
  void *v67;
  int64_t v68;
  char *v69;
  char *v70;
  void *v71;
  int64_t v72;
  char *v73;
  char *v74;
  void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  void *v79;
  void *v80;
  int64_t v81;
  char *v82;
  char *v83;
  double *v86;
  unint64_t v87;
  void *v89;
  void *v90;
  void *v91[4];
  void *v92;
  void *v93;
  void *v94;
  _BYTE *v95;
  uint64_t v96;
  void *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  char *v115;
  uint64_t v116;
  void *v117;
  _BYTE *v118;
  uint64_t v119;
  void *__p;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  _BYTE *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;

  sub_2394C2EC8(a5, a2, (uint64_t)&v136);
  sub_2394C2EC8(a1, a6, (uint64_t)&v132);
  v23 = v132;
  v86 = a3;
  if (v132 != v133)
  {
    sub_2394C3324((double *)&v136, (double *)&v132, (uint64_t)&v140);
    v23 = v132;
    v24 = a10;
    if (!v132)
      goto LABEL_4;
    goto LABEL_3;
  }
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v31 = v136;
  v32 = v137 - v136;
  if (v137 != v136)
  {
    if (v32 < 0)
      sub_2394189F8();
    v33 = (char *)operator new(v137 - v136);
    v34 = &v33[2 * (v32 >> 1)];
    v140 = v33;
    v142 = v34;
    memcpy(v33, v31, v32);
    v141 = v34;
    a3 = v86;
  }
  v143 = v139;
  v24 = a10;
  if (v23)
  {
LABEL_3:
    v133 = v23;
    operator delete(v23);
  }
LABEL_4:
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  sub_2394C2EC8(v24, a2, (uint64_t)&v132);
  v87 = v24;
  sub_2394C2EC8(a1, a11, (uint64_t)&v128);
  v25 = v128;
  if (v128 != v129)
  {
    sub_2394C3324((double *)&v132, (double *)&v128, (uint64_t)&v136);
    v25 = v128;
    v26 = a14;
    if (!v128)
      goto LABEL_9;
    goto LABEL_8;
  }
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v35 = v132;
  v36 = v133 - v132;
  if (v133 != v132)
  {
    if (v36 < 0)
      sub_2394189F8();
    v37 = a9;
    v38 = (char *)operator new(v133 - v132);
    v39 = &v38[2 * (v36 >> 1)];
    v136 = v38;
    v138 = v39;
    memcpy(v38, v35, v36);
    v137 = v39;
    a9 = v37;
  }
  v139 = v135;
  a3 = v86;
  v26 = a14;
  if (v25)
  {
LABEL_8:
    v129 = v25;
    operator delete(v25);
  }
LABEL_9:
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  sub_2394C2EC8(v26, a2, (uint64_t)&v128);
  sub_2394C2EC8(a1, a15, (uint64_t)&v124);
  v27 = v124;
  if (v124 != v125)
  {
    sub_2394C3324((double *)&v128, (double *)&v124, (uint64_t)&v132);
    v27 = v124;
    if (!v124)
      goto LABEL_14;
    goto LABEL_13;
  }
  v132 = 0;
  v133 = 0;
  v134 = 0;
  v40 = v128;
  v41 = v129 - v128;
  if (v129 != v128)
  {
    if (v41 < 0)
      sub_2394189F8();
    v42 = a9;
    v43 = (char *)operator new(v129 - v128);
    v44 = &v43[2 * (v41 >> 1)];
    v132 = v43;
    v134 = v44;
    memcpy(v43, v40, v41);
    v133 = v44;
    a9 = v42;
  }
  v135 = v131;
  a3 = v86;
  if (v27)
  {
LABEL_13:
    v125 = v27;
    operator delete(v27);
  }
LABEL_14:
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  sub_2394C2EC8(v87, a6, (uint64_t)&v124);
  sub_2394C2EC8(a5, a11, (uint64_t)&__p);
  v28 = (char *)__p;
  if (__p != v121)
  {
    sub_2394C3324((double *)&v124, (double *)&__p, (uint64_t)&v128);
    v28 = (char *)__p;
    if (!__p)
      goto LABEL_19;
    goto LABEL_18;
  }
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v45 = v124;
  v46 = v125 - v124;
  if (v125 != v124)
  {
    if (v46 < 0)
      sub_2394189F8();
    v47 = a9;
    v48 = (char *)operator new(v125 - v124);
    v49 = &v48[2 * (v46 >> 1)];
    v128 = v48;
    v130 = v49;
    memcpy(v48, v45, v46);
    v129 = v49;
    a9 = v47;
  }
  v131 = v127;
  a3 = v86;
  if (v28)
  {
LABEL_18:
    v121 = v28;
    operator delete(v28);
  }
LABEL_19:
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  sub_2394C2EC8(v26, a6, (uint64_t)&__p);
  sub_2394C2EC8(a5, a15, (uint64_t)&v117);
  v29 = v117;
  if (v117 != v118)
  {
    sub_2394C3324((double *)&__p, (double *)&v117, (uint64_t)&v124);
    v29 = v117;
    if (!v117)
      goto LABEL_24;
    goto LABEL_23;
  }
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v50 = __p;
  v51 = v121 - (_BYTE *)__p;
  if (v121 != __p)
  {
    if (v51 < 0)
      sub_2394189F8();
    v52 = a9;
    v53 = (char *)operator new(v121 - (_BYTE *)__p);
    v54 = &v53[2 * (v51 >> 1)];
    v124 = v53;
    v126 = v54;
    memcpy(v53, v50, v51);
    v125 = v54;
    a9 = v52;
  }
  v127 = v123;
  a3 = v86;
  if (v29)
  {
LABEL_23:
    v118 = v29;
    operator delete(v29);
  }
LABEL_24:
  if (__p)
  {
    v121 = (char *)__p;
    operator delete(__p);
  }
  sub_2394C2EC8(v26, a11, (uint64_t)&v117);
  sub_2394C2EC8(v87, a15, (uint64_t)&v113);
  v30 = v113;
  if (v113 != v114)
  {
    sub_2394C3324((double *)&v117, (double *)&v113, (uint64_t)&__p);
    v30 = v113;
    if (!v113)
      goto LABEL_29;
    goto LABEL_28;
  }
  __p = 0;
  v121 = 0;
  v122 = 0;
  v55 = v117;
  v56 = v118 - (_BYTE *)v117;
  if (v118 != v117)
  {
    if (v56 < 0)
      sub_2394189F8();
    v57 = (char *)operator new(v118 - (_BYTE *)v117);
    v58 = &v57[2 * (v56 >> 1)];
    __p = v57;
    v122 = v58;
    memcpy(v57, v55, v56);
    v121 = v58;
    a3 = v86;
  }
  v123 = v119;
  if (v30)
  {
LABEL_28:
    v114 = v30;
    operator delete(v30);
  }
LABEL_29:
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  sub_2394C2EC8((unint64_t)&v128, a3, (uint64_t)&v109);
  sub_2394C2EC8((unint64_t)&v136, a7, (uint64_t)&v105);
  if (v105 == v106)
  {
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v59 = v109;
    v60 = v110 - (_BYTE *)v109;
    if (v110 != v109)
    {
      if (v60 < 0)
        sub_2394189F8();
      v61 = (char *)operator new(v110 - (_BYTE *)v109);
      v62 = &v61[2 * (v60 >> 1)];
      v113 = v61;
      v115 = v62;
      memcpy(v61, v59, v60);
      v114 = v62;
    }
    v116 = v112;
  }
  else
  {
    sub_2394C3324((double *)&v109, (double *)&v105, (uint64_t)&v113);
  }
  sub_2394C2EC8((unint64_t)&v140, a12, (uint64_t)&v101);
  sub_2394C50E8((uint64_t)&v113, (uint64_t)&v101, &v117);
  if (v101)
  {
    v102 = (char *)v101;
    operator delete(v101);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v105)
  {
    v106 = (char *)v105;
    operator delete(v105);
  }
  if (v109)
  {
    v110 = (char *)v109;
    operator delete(v109);
  }
  sub_2394C2EC8((unint64_t)&v124, a3, (uint64_t)&v105);
  sub_2394C2EC8((unint64_t)&v132, a7, (uint64_t)&v101);
  if (v101 == v102)
  {
    v109 = 0;
    v110 = 0;
    v111 = 0;
    v63 = v105;
    v64 = v106 - (_BYTE *)v105;
    if (v106 != v105)
    {
      if (v64 < 0)
        sub_2394189F8();
      v65 = (char *)operator new(v106 - (_BYTE *)v105);
      v66 = &v65[2 * (v64 >> 1)];
      v109 = v65;
      v111 = v66;
      memcpy(v65, v63, v64);
      v110 = v66;
    }
    v112 = v108;
  }
  else
  {
    sub_2394C3324((double *)&v105, (double *)&v101, (uint64_t)&v109);
  }
  sub_2394C2EC8((unint64_t)&v140, a16, (uint64_t)&v97);
  sub_2394C50E8((uint64_t)&v109, (uint64_t)&v97, &v113);
  if (v97)
  {
    v98 = (char *)v97;
    operator delete(v97);
  }
  if (v109)
  {
    v110 = (char *)v109;
    operator delete(v109);
  }
  if (v101)
  {
    v102 = (char *)v101;
    operator delete(v101);
  }
  if (v105)
  {
    v106 = (char *)v105;
    operator delete(v105);
  }
  sub_2394C2EC8((unint64_t)&__p, a3, (uint64_t)&v101);
  sub_2394C2EC8((unint64_t)&v132, a12, (uint64_t)&v97);
  if (v97 == v98)
  {
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v67 = v101;
    v68 = v102 - (_BYTE *)v101;
    if (v102 != v101)
    {
      if (v68 < 0)
        sub_2394189F8();
      v69 = (char *)operator new(v102 - (_BYTE *)v101);
      v70 = &v69[2 * (v68 >> 1)];
      v105 = v69;
      v107 = v70;
      memcpy(v69, v67, v68);
      v106 = v70;
    }
    v108 = v104;
  }
  else
  {
    sub_2394C3324((double *)&v101, (double *)&v97, (uint64_t)&v105);
  }
  sub_2394C2EC8((unint64_t)&v136, a16, (uint64_t)&v94);
  sub_2394C50E8((uint64_t)&v105, (uint64_t)&v94, &v109);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v105)
  {
    v106 = (char *)v105;
    operator delete(v105);
  }
  if (v97)
  {
    v98 = (char *)v97;
    operator delete(v97);
  }
  if (v101)
  {
    v102 = (char *)v101;
    operator delete(v101);
  }
  sub_2394C2EC8((unint64_t)&__p, a7, (uint64_t)&v97);
  sub_2394C2EC8((unint64_t)&v124, a12, (uint64_t)&v94);
  if (v94 == v95)
  {
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v71 = v97;
    v72 = v98 - (_BYTE *)v97;
    if (v98 != v97)
    {
      if (v72 < 0)
        sub_2394189F8();
      v73 = (char *)operator new(v98 - (_BYTE *)v97);
      v74 = &v73[2 * (v72 >> 1)];
      v101 = v73;
      v103 = v74;
      memcpy(v73, v71, v72);
      v102 = v74;
    }
    v104 = v100;
  }
  else
  {
    sub_2394C3324((double *)&v97, (double *)&v94, (uint64_t)&v101);
  }
  sub_2394C2EC8((unint64_t)&v128, a16, (uint64_t)&v92);
  sub_2394C50E8((uint64_t)&v101, (uint64_t)&v92, &v105);
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v101)
  {
    v102 = (char *)v101;
    operator delete(v101);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v97)
  {
    v98 = (char *)v97;
    operator delete(v97);
  }
  sub_2394C2EC8((unint64_t)&v105, a4, (uint64_t)&v94);
  sub_2394C2EC8((unint64_t)&v109, a8, (uint64_t)&v92);
  if (v92 == v93)
  {
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v75 = v94;
    v76 = v95 - (_BYTE *)v94;
    if (v95 != v94)
    {
      if (v76 < 0)
        sub_2394189F8();
      v77 = (char *)operator new(v95 - (_BYTE *)v94);
      v78 = &v77[2 * (v76 >> 1)];
      v97 = v77;
      v99 = v78;
      memcpy(v77, v75, v76);
      v98 = v78;
    }
    v100 = v96;
  }
  else
  {
    sub_2394C3324((double *)&v94, (double *)&v92, (uint64_t)&v97);
  }
  sub_2394C2EC8((unint64_t)&v113, a13, (uint64_t)v91);
  sub_2394C50E8((uint64_t)&v97, (uint64_t)v91, &v101);
  sub_2394C2EC8((unint64_t)&v117, a17, (uint64_t)&v89);
  v79 = v89;
  if (v89 != v90)
  {
    sub_2394C3324((double *)&v101, (double *)&v89, (uint64_t)a9);
    v79 = v89;
    if (!v89)
      goto LABEL_126;
    goto LABEL_125;
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v80 = v101;
  v81 = v102 - (_BYTE *)v101;
  if (v102 != v101)
  {
    if (v81 < 0)
      sub_2394189F8();
    v82 = (char *)operator new(v102 - (_BYTE *)v101);
    *a9 = v82;
    v83 = &v82[2 * (v81 >> 1)];
    a9[2] = v83;
    memcpy(v82, v80, v81);
    a9[1] = v83;
  }
  a9[3] = v104;
  if (v79)
  {
LABEL_125:
    v90 = v79;
    operator delete(v79);
  }
LABEL_126:
  if (v101)
  {
    v102 = (char *)v101;
    operator delete(v101);
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (v97)
  {
    v98 = (char *)v97;
    operator delete(v97);
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v105)
  {
    v106 = (char *)v105;
    operator delete(v105);
  }
  if (v109)
  {
    v110 = (char *)v109;
    operator delete(v109);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  if (__p)
  {
    v121 = (char *)__p;
    operator delete(__p);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v140)
  {
    v141 = v140;
    operator delete(v140);
  }
}

void sub_2394C9160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  uint64_t v56;
  uint64_t v57;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;

  v59 = *(void **)v56;
  if (*(_QWORD *)v56)
  {
    *(_QWORD *)(v56 + 8) = v59;
    operator delete(v59);
    v60 = __p;
    if (!__p)
    {
LABEL_3:
      v61 = a35;
      if (!a35)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else
  {
    v60 = __p;
    if (!__p)
      goto LABEL_3;
  }
  operator delete(v60);
  v61 = a35;
  if (!a35)
  {
LABEL_4:
    v62 = a19;
    if (!a19)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v61);
  v62 = a19;
  if (!a19)
  {
LABEL_5:
    v63 = a31;
    if (!a31)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v62);
  v63 = a31;
  if (!a31)
  {
LABEL_6:
    v64 = a23;
    if (!a23)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(v63);
  v64 = a23;
  if (!a23)
  {
LABEL_7:
    v65 = a27;
    if (!a27)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(v64);
  v65 = a27;
  if (!a27)
  {
LABEL_8:
    v66 = a39;
    if (!a39)
    {
LABEL_18:
      if (a43)
        operator delete(a43);
      if (a47)
        operator delete(a47);
      if (a51)
        operator delete(a51);
      if (a55)
        operator delete(a55);
      v67 = *(void **)(v57 - 256);
      if (v67)
      {
        *(_QWORD *)(v57 - 248) = v67;
        operator delete(v67);
      }
      v68 = *(void **)(v57 - 224);
      if (v68)
      {
        *(_QWORD *)(v57 - 216) = v68;
        operator delete(v68);
      }
      v69 = *(void **)(v57 - 192);
      if (v69)
      {
        *(_QWORD *)(v57 - 184) = v69;
        operator delete(v69);
      }
      v70 = *(void **)(v57 - 160);
      if (v70)
      {
        *(_QWORD *)(v57 - 152) = v70;
        operator delete(v70);
      }
      v71 = *(void **)(v57 - 128);
      if (v71)
      {
        *(_QWORD *)(v57 - 120) = v71;
        operator delete(v71);
      }
      _Unwind_Resume(exception_object);
    }
LABEL_17:
    operator delete(v66);
    goto LABEL_18;
  }
LABEL_16:
  operator delete(v65);
  v66 = a39;
  if (!a39)
    goto LABEL_18;
  goto LABEL_17;
}

void sub_2394C96C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (!a47)
    JUMPOUT(0x2394C9648);
  JUMPOUT(0x2394C9640);
}

void sub_2394C96D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  void *v43;
  void *v44;

  if (__p)
  {
    operator delete(__p);
    v43 = a43;
    if (!a43)
    {
LABEL_3:
      v44 = a35;
      if (!a35)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v43 = a43;
    if (!a43)
      goto LABEL_3;
  }
  operator delete(v43);
  v44 = a35;
  if (!a35)
  {
LABEL_4:
    if (a39)
      goto LABEL_11;
    goto LABEL_12;
  }
LABEL_8:
  operator delete(v44);
  if (a39)
LABEL_11:
    JUMPOUT(0x2394C9748);
LABEL_12:
  JUMPOUT(0x2394C9648);
}

void sub_2394C970C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43)
    JUMPOUT(0x2394C9718);
  if (!a35)
  {
    if (a39)
      JUMPOUT(0x2394C9748);
    JUMPOUT(0x2394C9648);
  }
  JUMPOUT(0x2394C9728);
}

void sub_2394C973C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a39)
    JUMPOUT(0x2394C9748);
  JUMPOUT(0x2394C9648);
}

void sub_2394C9750()
{
  JUMPOUT(0x2394C9648);
}

void sub_2394C9758(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  void *v47;
  void *v48;

  if (__p)
  {
    operator delete(__p);
    v47 = a47;
    if (!a47)
    {
LABEL_3:
      v48 = a39;
      if (!a39)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v47 = a47;
    if (!a47)
      goto LABEL_3;
  }
  operator delete(v47);
  v48 = a39;
  if (!a39)
  {
LABEL_4:
    if (a43)
      goto LABEL_11;
    goto LABEL_12;
  }
LABEL_8:
  operator delete(v48);
  if (a43)
LABEL_11:
    JUMPOUT(0x2394C97D0);
LABEL_12:
  JUMPOUT(0x2394C9658);
}

void sub_2394C9794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47)
    JUMPOUT(0x2394C97A0);
  if (!a39)
  {
    if (a43)
      JUMPOUT(0x2394C97D0);
    JUMPOUT(0x2394C9658);
  }
  JUMPOUT(0x2394C97B0);
}

void sub_2394C97C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43)
    JUMPOUT(0x2394C97D0);
  JUMPOUT(0x2394C9658);
}

void sub_2394C97D8()
{
  JUMPOUT(0x2394C9658);
}

void sub_2394C97E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51)
    JUMPOUT(0x2394C97ECLL);
  JUMPOUT(0x2394C9668);
}

void sub_2394C97F4()
{
  JUMPOUT(0x2394C9668);
}

void sub_2394C97FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a55)
    JUMPOUT(0x2394C9808);
  JUMPOUT(0x2394C9678);
}

void sub_2394C9810()
{
  JUMPOUT(0x2394C9678);
}

void sub_2394C9818()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 256))
    JUMPOUT(0x2394C9824);
  JUMPOUT(0x2394C9688);
}

void sub_2394C982C()
{
  JUMPOUT(0x2394C9688);
}

void sub_2394C9834()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 224))
    JUMPOUT(0x2394C9840);
  JUMPOUT(0x2394C9698);
}

void sub_2394C9848()
{
  JUMPOUT(0x2394C9698);
}

void sub_2394C9850()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 192))
    JUMPOUT(0x2394C985CLL);
  JUMPOUT(0x2394C96A8);
}

void sub_2394C9864()
{
  JUMPOUT(0x2394C96A8);
}

void sub_2394C986C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 - 160))
    JUMPOUT(0x2394C9878);
  JUMPOUT(0x2394C96B8);
}

uint64_t sub_2394C9880(uint64_t result, double **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double **v8;
  double **v9;
  double **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double **v16;
  uint64_t v17;
  double **v18;
  double **v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  BOOL v24;
  double v25;
  double v26;
  double **v27;
  char v28;
  BOOL v29;
  double *v30;
  double *v31;
  double v32;
  _BOOL4 v33;
  double v34;
  double v35;
  double **v36;
  BOOL v38;
  uint64_t v39;
  double **v40;
  double **v41;
  double **v42;
  double *v43;
  double *v44;
  double v45;
  _BOOL4 v46;
  double v47;
  double v48;
  uint64_t v49;
  double *v50;
  _BOOL4 v51;
  double v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  double **v56;
  unint64_t v57;
  double **v58;
  double *v59;
  double *v60;
  double v61;
  _BOOL4 v62;
  double v63;
  double v64;
  double **v65;
  double *v66;
  double *v67;
  BOOL v68;
  BOOL v69;
  double v70;
  double v71;
  double **v72;
  double **v73;
  double **v74;

  v8 = (double **)result;
LABEL_2:
  v9 = a2 - 1;
  v72 = a2 - 3;
  v73 = a2 - 2;
  v10 = v8;
  v74 = a2;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v8 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v30 = *(a2 - 1);
        v31 = *v8;
        v32 = **v8;
        v33 = *v30 < v32;
        if (*v30 < v32 || *v30 > v32 || (v34 = v31[1], v35 = v30[1], v33 = v35 < v34) || v35 > v34)
        {
          if (!v33)
            return result;
        }
        else if (v30[2] >= v31[2])
        {
          return result;
        }
        *v8 = v30;
        *(a2 - 1) = v31;
        return result;
      case 3uLL:
        return sub_2394C9E08(v8, v8 + 1, v9);
      case 4uLL:
        return sub_2394CA674(v8, v8 + 1, v8 + 2, v9);
      case 5uLL:
        return sub_2394CA7C0(v8, v8 + 1, v8 + 2, v8 + 3, v9);
      default:
        if (v12 > 191)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v54 = (v13 - 2) >> 1;
              v55 = v54 + 1;
              v56 = &v8[v54];
              do
              {
                sub_2394CA974((uint64_t)v8, a3, v12 >> 3, v56--);
                --v55;
              }
              while (v55);
              v57 = (unint64_t)v12 >> 3;
              do
              {
                result = (uint64_t)sub_2394CAB44(v8, (uint64_t)a2--, a3, v57);
                v68 = v57-- > 2;
              }
              while (v68);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = &v8[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_2394C9E08(v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_18;
          }
          else
          {
            sub_2394C9E08(v8, v16, v9);
            v17 = a5;
            v18 = v9;
            v19 = &v8[v15];
            sub_2394C9E08(v8 + 1, v19 - 1, v73);
            sub_2394C9E08(v8 + 2, &v8[v15 + 1], v72);
            sub_2394C9E08(v19 - 1, v16, &v8[v15 + 1]);
            v20 = *v8;
            *v8 = *v19;
            *v19 = v20;
            v9 = v18;
            a5 = v17;
            a2 = v74;
            if ((a5 & 1) != 0)
              goto LABEL_18;
          }
          v21 = *(v8 - 1);
          v22 = *v8;
          v23 = **v8;
          v24 = *v21 < v23;
          if (*v21 < v23 || *v21 > v23 || (v25 = v22[1], v26 = v21[1], v24 = v26 < v25) || v26 > v25)
          {
            if (!v24)
            {
LABEL_22:
              result = (uint64_t)sub_2394C9FC4(v8, a2);
              v10 = (double **)result;
              goto LABEL_23;
            }
          }
          else if (v21[2] >= v22[2])
          {
            goto LABEL_22;
          }
LABEL_18:
          v27 = sub_2394CA1E0(v8, a2);
          if ((v28 & 1) == 0)
            goto LABEL_21;
          v29 = sub_2394CA3CC(v8, v27);
          v10 = v27 + 1;
          result = sub_2394CA3CC(v27 + 1, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v29)
              continue;
LABEL_21:
            result = sub_2394C9880(v8, v27, a3, -v14, a5 & 1);
            v10 = v27 + 1;
LABEL_23:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v27;
          if (v29)
            return result;
          goto LABEL_2;
        }
        v36 = v8 + 1;
        v38 = v8 == a2 || v36 == a2;
        if ((a5 & 1) != 0)
        {
          if (v38)
            return result;
          v39 = 0;
          v40 = v8;
LABEL_48:
          v42 = v40;
          v40 = v36;
          v44 = *v42;
          v43 = v42[1];
          v45 = **v42;
          v46 = *v43 < v45;
          if (*v43 < v45 || *v43 > v45 || (v47 = v44[1], v48 = v43[1], v46 = v48 < v47) || v48 > v47)
          {
            if (!v46)
              goto LABEL_47;
          }
          else if (v43[2] >= v44[2])
          {
            goto LABEL_47;
          }
          v42[1] = v44;
          v41 = v8;
          if (v42 == v8)
            goto LABEL_46;
          v49 = v39;
          while (1)
          {
            v50 = *(double **)((char *)v8 + v49 - 8);
            v51 = *v43 < *v50;
            if (*v43 < *v50 || *v43 > *v50 || (v52 = v50[1], v53 = v43[1], v51 = v53 < v52) || v53 > v52)
            {
              if (!v51)
              {
                v41 = v42;
LABEL_46:
                *v41 = v43;
LABEL_47:
                v36 = v40 + 1;
                v39 += 8;
                if (v40 + 1 == a2)
                  return result;
                goto LABEL_48;
              }
            }
            else if (v43[2] >= v50[2])
            {
              v41 = (double **)((char *)v8 + v49);
              goto LABEL_46;
            }
            --v42;
            *(double **)((char *)v8 + v49) = v50;
            v49 -= 8;
            if (!v49)
            {
              v41 = v8;
              goto LABEL_46;
            }
          }
        }
        if (!v38)
        {
          do
          {
            v58 = v8;
            v8 = v36;
            v60 = *v58;
            v59 = v58[1];
            v61 = **v58;
            v62 = *v59 < v61;
            if (*v59 < v61 || *v59 > v61 || (v63 = v60[1], v64 = v59[1], v62 = v64 < v63) || v64 > v63)
            {
              if (v62)
                goto LABEL_87;
            }
            else if (v59[2] < v60[2])
            {
              do
              {
LABEL_87:
                while (1)
                {
                  v65 = v58;
                  v66 = v60;
                  v67 = *--v58;
                  v60 = v67;
                  v58[2] = v66;
                  v68 = *v59 <= *v67;
                  v69 = *v59 < *v67;
                  if (*v59 >= *v67 && v68)
                  {
                    v70 = v60[1];
                    v71 = v59[1];
                    v69 = v71 < v70;
                    if (v71 >= v70 && v71 <= v70)
                      break;
                  }
                  if (!v69)
                    goto LABEL_76;
                }
              }
              while (v59[2] < v60[2]);
LABEL_76:
              *v65 = v59;
            }
            v36 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t sub_2394C9E08(double **a1, double **a2, double **a3)
{
  double *v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double *v17;
  double v18;
  _BOOL4 v19;
  double *v20;
  double *v21;
  double v22;
  double v23;
  _BOOL4 v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  _BOOL4 v31;
  double v32;
  double v33;

  v3 = *a2;
  v4 = *a1;
  v5 = **a2;
  v6 = (*a2)[2];
  v7 = **a1;
  v8 = v5 < v7;
  if (v5 >= v7 && v5 <= v7)
  {
    v9 = v4[1];
    v10 = v3[1];
    v8 = v10 < v9;
    if (v10 >= v9 && v10 <= v9)
    {
      if (v6 >= v4[2])
        goto LABEL_6;
LABEL_13:
      v17 = *a3;
      v18 = **a3;
      v19 = v18 < v5;
      if (v18 < v5 || v18 > v5 || (v27 = v3[1], v28 = v17[1], v19 = v28 < v27, v28 < v27 || v28 > v27))
      {
        if (!v19)
        {
LABEL_30:
          *a1 = v3;
          *a2 = v4;
          v29 = *a3;
          v30 = **a3;
          v31 = v30 < *v4;
          if (v30 < *v4 || v30 > *v4 || (v32 = v4[1], v33 = v29[1], v31 = v33 < v32, v33 < v32 || v33 > v32))
          {
            if (!v31)
              return 1;
          }
          else if (v29[2] >= v4[2])
          {
            return 1;
          }
          *a2 = v29;
          *a3 = v4;
          return 2;
        }
      }
      else if (v17[2] >= v6)
      {
        goto LABEL_30;
      }
      *a1 = v17;
      *a3 = v4;
      return 1;
    }
  }
  if (v8)
    goto LABEL_13;
LABEL_6:
  v11 = *a3;
  v12 = **a3;
  v13 = v12 < v5;
  if (v12 < v5 || v12 > v5 || (v14 = v3[1], v15 = v11[1], v13 = v15 < v14) || v15 > v14)
  {
    if (!v13)
      return 0;
  }
  else if (v11[2] >= v6)
  {
    return 0;
  }
  *a2 = v11;
  *a3 = v3;
  v20 = *a2;
  v21 = *a1;
  v22 = **a2;
  v23 = **a1;
  v24 = v22 < v23;
  if (v22 >= v23 && v22 <= v23)
  {
    v25 = v21[1];
    v26 = v20[1];
    v24 = v26 < v25;
    if (v26 >= v25 && v26 <= v25)
    {
      if (v20[2] >= v21[2])
        return 1;
LABEL_26:
      *a1 = v20;
      *a2 = v21;
      return 2;
    }
  }
  if (v24)
    goto LABEL_26;
  return 1;
}

double **sub_2394C9FC4(double **a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  _BOOL4 v8;
  double v9;
  double v10;
  double **i;
  double *v12;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  BOOL v19;
  double v20;
  double v21;
  double *v22;
  _BOOL4 v23;
  double v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  double v32;
  double v33;
  double *v34;
  BOOL v35;
  _BOOL4 v36;
  double v37;
  double v38;

  v2 = *a1;
  v3 = *(a2 - 1);
  v4 = **a1;
  v5 = (*a1)[2];
  v6 = *v3;
  v7 = v3[2];
  v8 = v4 < *v3;
  if (v4 >= *v3 && v4 <= *v3)
  {
    v9 = v3[1];
    v10 = v2[1];
    v8 = v10 < v9;
    if (v10 >= v9 && v10 <= v9)
    {
      if (v5 >= v7)
        goto LABEL_6;
LABEL_17:
      for (i = a1 + 1; ; ++i)
      {
        v17 = *i;
        v18 = **i;
        v19 = v4 < v18;
        if (v4 < v18 || v4 > v18 || (v20 = v17[1], v21 = v2[1], v19 = v21 < v20) || v21 > v20)
        {
          if (v19)
            goto LABEL_25;
        }
        else if (v5 < v17[2])
        {
          goto LABEL_25;
        }
      }
    }
  }
  if (v8)
    goto LABEL_17;
LABEL_6:
  for (i = a1 + 1; i < a2; ++i)
  {
    v12 = *i;
    v13 = **i;
    v14 = v4 < v13;
    if (v4 < v13 || v4 > v13 || (v15 = v12[1], v16 = v2[1], v14 = v16 < v15) || v16 > v15)
    {
      if (v14)
        break;
    }
    else if (v5 < v12[2])
    {
      break;
    }
  }
LABEL_25:
  if (i < a2)
  {
    --a2;
    while (1)
    {
      v23 = v4 < v6;
      if (v4 < v6 || v4 > v6 || (v24 = v3[1], v25 = v2[1], v23 = v25 < v24) || v25 > v24)
      {
        if (!v23)
          break;
      }
      else if (v5 >= v7)
      {
        break;
      }
      v22 = *--a2;
      v3 = v22;
      v6 = *v22;
      v7 = v22[2];
    }
  }
  if (i < a2)
  {
    v26 = *i;
    v27 = *a2;
    do
    {
      *i++ = v27;
      *a2 = v26;
      v28 = *v2;
      v29 = v2[2];
      while (1)
      {
        v26 = *i;
        v30 = **i;
        v31 = v28 < v30;
        if (v28 < v30)
          break;
        if (v28 > v30)
          break;
        v32 = v26[1];
        v33 = v2[1];
        v31 = v33 < v32;
        if (v33 < v32 || v33 > v32)
          break;
        if (v29 < v26[2])
          goto LABEL_47;
LABEL_39:
        ++i;
      }
      if (!v31)
        goto LABEL_39;
      do
      {
LABEL_47:
        while (1)
        {
          v34 = *--a2;
          v27 = v34;
          v35 = v28 <= *v34;
          v36 = v28 < *v34;
          if (v28 >= *v34 && v35)
          {
            v37 = v27[1];
            v38 = v2[1];
            v36 = v38 < v37;
            if (v38 >= v37 && v38 <= v37)
              break;
          }
          if (!v36)
            goto LABEL_36;
        }
      }
      while (v29 < v27[2]);
LABEL_36:
      ;
    }
    while (i < a2);
  }
  if (i - 1 != a1)
    *a1 = *(i - 1);
  *(i - 1) = v2;
  return i;
}

double **sub_2394CA1E0(double **a1, double **a2)
{
  uint64_t v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  _BOOL4 v7;
  double v8;
  double v9;
  double **v10;
  unint64_t v11;
  double *v12;
  double *v13;
  BOOL v14;
  BOOL v15;
  double v16;
  double v17;
  double *v19;
  double *v20;
  BOOL v21;
  BOOL v22;
  double v23;
  double v24;
  double *v25;
  double **v26;
  double **v27;
  double v28;
  double v29;
  double v30;
  _BOOL4 v31;
  double v32;
  double v33;
  double *v34;
  BOOL v35;
  BOOL v36;
  double v37;
  double v38;

  v2 = 0;
  v3 = *a1;
  v4 = **a1;
  v5 = (*a1)[2];
  while (1)
  {
    v6 = a1[v2 + 1];
    v7 = *v6 < v4;
    if (*v6 >= v4 && *v6 <= v4)
    {
      v8 = v3[1];
      v9 = v6[1];
      v7 = v9 < v8;
      if (v9 >= v8 && v9 <= v8)
        break;
    }
    if (!v7)
      goto LABEL_9;
LABEL_3:
    ++v2;
  }
  if (v6[2] < v5)
    goto LABEL_3;
LABEL_9:
  v10 = &a1[v2];
  v11 = (unint64_t)&a1[v2 + 1];
  if (v2 * 8)
  {
    do
    {
      while (1)
      {
        v20 = *--a2;
        v19 = v20;
        v21 = *v20 <= v4;
        v22 = *v20 < v4;
        if (*v20 >= v4 && v21)
        {
          v23 = v3[1];
          v24 = v19[1];
          v22 = v24 < v23;
          if (v24 >= v23 && v24 <= v23)
            break;
        }
        if (v22)
          goto LABEL_32;
      }
    }
    while (v19[2] >= v5);
  }
  else if (v11 < (unint64_t)a2)
  {
    do
    {
      while (1)
      {
        v13 = *--a2;
        v12 = v13;
        v14 = *v13 <= v4;
        v15 = *v13 < v4;
        if (*v13 >= v4 && v14)
        {
          v16 = v3[1];
          v17 = v12[1];
          v15 = v17 < v16;
          if (v17 >= v16 && v17 <= v16)
            break;
        }
        if (v11 >= (unint64_t)a2 || v15)
          goto LABEL_32;
      }
    }
    while (v12[2] >= v5 && v11 < (unint64_t)a2);
  }
LABEL_32:
  if (v11 >= (unint64_t)a2)
    goto LABEL_53;
  v25 = *a2;
  v26 = (double **)v11;
  v27 = a2;
  while (2)
  {
    *v26++ = v25;
    *v27 = v6;
    v28 = *v3;
    v29 = v3[2];
    while (2)
    {
      v6 = *v26;
      v30 = **v26;
      v31 = v30 < v28;
      if (v30 >= v28 && v30 <= v28)
      {
        v32 = v3[1];
        v33 = v6[1];
        v31 = v33 < v32;
        if (v33 >= v32 && v33 <= v32)
        {
          if (v6[2] >= v29)
            goto LABEL_45;
          goto LABEL_37;
        }
      }
      if (v31)
      {
LABEL_37:
        ++v26;
        continue;
      }
      break;
    }
    do
    {
LABEL_45:
      while (1)
      {
        v34 = *--v27;
        v25 = v34;
        v35 = *v34 <= v28;
        v36 = *v34 < v28;
        if (*v34 >= v28 && v35)
        {
          v37 = v3[1];
          v38 = v25[1];
          v36 = v38 < v37;
          if (v38 >= v37 && v38 <= v37)
            break;
        }
        if (v36)
          goto LABEL_34;
      }
    }
    while (v25[2] >= v29);
LABEL_34:
    if (v26 < v27)
      continue;
    break;
  }
  v10 = v26 - 1;
LABEL_53:
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v3;
  return v10;
}

BOOL sub_2394CA3CC(double **a1, double **a2)
{
  uint64_t v4;
  _BOOL8 result;
  double **v6;
  double **v7;
  uint64_t v8;
  int v9;
  double **v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  _BOOL4 v15;
  double v16;
  double v17;
  uint64_t v18;
  double *v19;
  _BOOL4 v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  _BOOL4 v26;
  double v27;
  double v28;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v23 = *(a2 - 1);
      v24 = *a1;
      v25 = **a1;
      v26 = *v23 < v25;
      if (*v23 < v25 || *v23 > v25 || (v27 = v24[1], v28 = v23[1], v26 = v28 < v27) || v28 > v27)
      {
        if (!v26)
          return result;
      }
      else if (v23[2] >= v24[2])
      {
        return result;
      }
      *a1 = v23;
      *(a2 - 1) = v24;
      return result;
    case 3:
      sub_2394C9E08(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_2394CA674(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_2394CA7C0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      sub_2394C9E08(a1, a1 + 1, a1 + 2);
      v7 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
LABEL_8:
      v11 = *v7;
      v12 = *v6;
      v13 = **v7;
      v14 = **v6;
      v15 = v13 < v14;
      if (v13 < v14 || v13 > v14 || (v16 = v12[1], v17 = v11[1], v15 = v17 < v16) || v17 > v16)
      {
        if (!v15)
          goto LABEL_7;
      }
      else if (v11[2] >= v12[2])
      {
        goto LABEL_7;
      }
      *v7 = v12;
      v10 = a1;
      if (v6 == a1)
        goto LABEL_6;
      v18 = v8;
      break;
  }
  while (1)
  {
    v19 = *(double **)((char *)a1 + v18 + 8);
    v20 = *v11 < *v19;
    if (*v11 < *v19)
      break;
    if (*v11 > *v19)
      break;
    v21 = v19[1];
    v22 = v11[1];
    v20 = v22 < v21;
    if (v22 < v21 || v22 > v21)
      break;
    if (v11[2] >= v19[2])
    {
      v10 = v6;
      goto LABEL_6;
    }
LABEL_18:
    --v6;
    *(double **)((char *)a1 + v18 + 16) = v19;
    v18 -= 8;
    if (v18 == -16)
    {
      v10 = a1;
      goto LABEL_6;
    }
  }
  if (v20)
    goto LABEL_18;
  v10 = (double **)((char *)a1 + v18 + 16);
LABEL_6:
  *v10 = v11;
  if (++v9 == 8)
    return v7 + 1 == a2;
LABEL_7:
  v6 = v7;
  v8 += 8;
  if (++v7 != a2)
    goto LABEL_8;
  return 1;
}

uint64_t sub_2394CA674(double **a1, double **a2, double **a3, double **a4)
{
  uint64_t result;
  double *v9;
  double *v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  _BOOL4 v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  _BOOL4 v27;
  double v28;
  double v29;

  result = sub_2394C9E08(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = **a4;
  v12 = **a3;
  v13 = v11 < v12;
  if (v11 < v12 || v11 > v12 || (v14 = v10[1], v15 = v9[1], v13 = v15 < v14) || v15 > v14)
  {
    if (!v13)
      return result;
  }
  else if (v9[2] >= v10[2])
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  v16 = *a3;
  v17 = *a2;
  v18 = **a3;
  v19 = **a2;
  v20 = v18 < v19;
  if (v18 < v19 || v18 > v19 || (v21 = v17[1], v22 = v16[1], v20 = v22 < v21) || v22 > v21)
  {
    if (!v20)
      return result;
  }
  else if (v16[2] >= v17[2])
  {
    return result;
  }
  *a2 = v16;
  *a3 = v17;
  v23 = *a2;
  v24 = *a1;
  v25 = **a2;
  v26 = **a1;
  v27 = v25 < v26;
  if (v25 < v26 || v25 > v26 || (v28 = v24[1], v29 = v23[1], v27 = v29 < v28) || v29 > v28)
  {
    if (v27)
    {
LABEL_22:
      *a1 = v23;
      *a2 = v24;
    }
  }
  else if (v23[2] < v24[2])
  {
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_2394CA7C0(double **a1, double **a2, double **a3, double **a4, double **a5)
{
  uint64_t result;
  double *v11;
  double *v12;
  double v13;
  double v14;
  _BOOL4 v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  _BOOL4 v22;
  double v23;
  double v24;
  double *v25;
  double *v26;
  double v27;
  double v28;
  _BOOL4 v29;
  double v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  _BOOL4 v36;
  double v37;
  double v38;

  result = sub_2394CA674(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = **a5;
  v14 = **a4;
  v15 = v13 < v14;
  if (v13 < v14 || v13 > v14 || (v16 = v12[1], v17 = v11[1], v15 = v17 < v16) || v17 > v16)
  {
    if (!v15)
      return result;
  }
  else if (v11[2] >= v12[2])
  {
    return result;
  }
  *a4 = v11;
  *a5 = v12;
  v18 = *a4;
  v19 = *a3;
  v20 = **a4;
  v21 = **a3;
  v22 = v20 < v21;
  if (v20 < v21 || v20 > v21 || (v23 = v19[1], v24 = v18[1], v22 = v24 < v23) || v24 > v23)
  {
    if (!v22)
      return result;
  }
  else if (v18[2] >= v19[2])
  {
    return result;
  }
  *a3 = v18;
  *a4 = v19;
  v25 = *a3;
  v26 = *a2;
  v27 = **a3;
  v28 = **a2;
  v29 = v27 < v28;
  if (v27 < v28 || v27 > v28 || (v30 = v26[1], v31 = v25[1], v29 = v31 < v30) || v31 > v30)
  {
    if (!v29)
      return result;
  }
  else if (v25[2] >= v26[2])
  {
    return result;
  }
  *a2 = v25;
  *a3 = v26;
  v32 = *a2;
  v33 = *a1;
  v34 = **a2;
  v35 = **a1;
  v36 = v34 < v35;
  if (v34 < v35 || v34 > v35 || (v37 = v33[1], v38 = v32[1], v36 = v38 < v37) || v38 > v37)
  {
    if (v36)
    {
LABEL_29:
      *a1 = v32;
      *a2 = v33;
    }
  }
  else if (v32[2] < v33[2])
  {
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_2394CA974(uint64_t result, uint64_t a2, uint64_t a3, double **a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  double **v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  double v19;
  BOOL v20;
  double v21;
  double v22;
  double **v23;
  double *v24;
  double v25;
  BOOL v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double v33;
  _BOOL4 v34;
  double v35;
  double v36;

  if (a3 < 2)
    return result;
  v4 = (uint64_t)a4 - result;
  v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 3)
    return result;
  v6 = v4 >> 2;
  v7 = (v4 >> 2) + 1;
  v8 = (double **)(result + 8 * v7);
  v9 = v6 + 2;
  if (v9 < a3)
  {
    v10 = *v8;
    v11 = v8[1];
    v12 = **v8;
    v13 = v12 < *v11;
    if (v12 >= *v11 && v12 <= *v11)
    {
      v14 = v11[1];
      v15 = v10[1];
      v13 = v15 < v14;
      if (v15 >= v14 && v15 <= v14)
      {
        if (v10[2] >= v11[2])
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    if (v13)
    {
LABEL_11:
      ++v8;
      v7 = v9;
    }
  }
LABEL_12:
  v16 = *v8;
  v17 = *a4;
  v18 = **v8;
  v19 = **a4;
  v20 = v18 < v19;
  if (v18 < v19 || v18 > v19 || (v21 = v17[1], v22 = v16[1], v20 = v22 < v21) || v22 > v21)
  {
    if (v20)
      return result;
  }
  else if (v16[2] < v17[2])
  {
    return result;
  }
  *a4 = v16;
  if (v5 >= v7)
  {
    while (1)
    {
      v29 = 2 * v7;
      v7 = (2 * v7) | 1;
      v23 = (double **)(result + 8 * v7);
      v30 = v29 + 2;
      if (v30 < a3)
      {
        v31 = *v23;
        v32 = v23[1];
        v33 = **v23;
        v34 = v33 < *v32;
        if (v33 < *v32 || v33 > *v32 || (v35 = v32[1], v36 = v31[1], v34 = v36 < v35) || v36 > v35)
        {
          if (v34)
          {
LABEL_23:
            ++v23;
            v7 = v30;
          }
        }
        else if (v31[2] < v32[2])
        {
          goto LABEL_23;
        }
      }
      v24 = *v23;
      v25 = **v23;
      v26 = v25 < *v17;
      if (v25 < *v17 || v25 > *v17 || (v27 = v17[1], v28 = v24[1], v26 = v28 < v27) || v28 > v27)
      {
        if (v26)
          break;
      }
      else if (v24[2] < v17[2])
      {
        break;
      }
      *v8 = v24;
      v8 = v23;
      if (v5 < v7)
        goto LABEL_21;
    }
  }
  v23 = v8;
LABEL_21:
  *v23 = v17;
  return result;
}

double **sub_2394CAB44(double **result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  double *v5;
  double **v6;
  double **v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double **v20;
  double *v21;
  double v22;
  double v23;
  _BOOL4 v24;
  double v25;
  double v26;
  unint64_t v27;
  double *v28;
  double v29;
  _BOOL4 v30;
  double v31;
  double v32;

  if (a4 < 2)
    return result;
  v4 = 0;
  v5 = *result;
  v6 = result;
  do
  {
    v7 = v6;
    v6 += v4 + 1;
    v8 = 2 * v4;
    v4 = (2 * v4) | 1;
    v9 = v8 + 2;
    if (v9 < a4)
    {
      v10 = *v6;
      v11 = v6[1];
      v12 = **v6;
      v13 = v12 < *v11;
      if (v12 < *v11 || v12 > *v11 || (v14 = v11[1], v15 = v10[1], v13 = v15 < v14) || v15 > v14)
      {
        if (v13)
        {
LABEL_3:
          ++v6;
          v4 = v9;
        }
      }
      else if (v10[2] < v11[2])
      {
        goto LABEL_3;
      }
    }
    *v7 = *v6;
  }
  while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
  v16 = (double **)(a2 - 8);
  if (v6 == (double **)(a2 - 8))
    goto LABEL_25;
  *v6 = *v16;
  *v16 = v5;
  v17 = (char *)v6 - (char *)result + 8;
  if (v17 >= 9)
  {
    v18 = ((unint64_t)v17 >> 3) - 2;
    v19 = v18 >> 1;
    v20 = &result[v18 >> 1];
    v21 = *v20;
    v5 = *v6;
    v22 = **v20;
    v23 = **v6;
    v24 = v22 < v23;
    if (v22 < v23 || v22 > v23 || (v25 = v5[1], v26 = v21[1], v24 = v26 < v25) || v26 > v25)
    {
      if (v24)
        goto LABEL_23;
    }
    else
    {
      if (v21[2] >= v5[2])
        return result;
LABEL_23:
      *v6 = v21;
      if (v18 >= 2)
      {
        while (1)
        {
          v27 = v19 - 1;
          v19 = (v19 - 1) >> 1;
          v6 = &result[v19];
          v28 = *v6;
          v29 = **v6;
          v30 = v29 < *v5;
          if (v29 < *v5 || v29 > *v5 || (v31 = v5[1], v32 = v28[1], v30 = v32 < v31) || v32 > v31)
          {
            if (!v30)
              break;
          }
          else if (v28[2] >= v5[2])
          {
            break;
          }
          *v20 = v28;
          v20 = &result[v19];
          if (v27 <= 1)
            goto LABEL_25;
        }
      }
      v6 = v20;
LABEL_25:
      *v6 = v5;
    }
  }
  return result;
}

uint64_t sub_2394CAD00(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;

  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v16 = *a3;
  v15 = a3[1];
  v17 = a3[2];
  v18 = *a4;
  v19 = a4[1];
  v20 = a4[2];
  v21 = *a5;
  v22 = a5[1];
  v23 = a5[2];
  v24 = *a6;
  v25 = a6[1];
  v26 = a6[2];
  v27 = *a2 - *a6;
  v62 = v13 - v25;
  v63 = v27;
  v60 = v27 * v27 + (v13 - v25) * (v13 - v25) + (v14 - v26) * (v14 - v26);
  v61 = v14 - v26;
  v58 = v15 - v25;
  v59 = v16 - v24;
  v56 = v59 * v59 + v58 * v58 + (v17 - v26) * (v17 - v26);
  v57 = v17 - v26;
  v54 = v19 - v25;
  v55 = v18 - v24;
  v52 = v55 * v55 + v54 * v54 + (v20 - v26) * (v20 - v26);
  v53 = v20 - v26;
  v50 = v22 - v25;
  v51 = v21 - v24;
  v48 = v51 * v51 + v50 * v50 + (v23 - v26) * (v23 - v26);
  v49 = v23 - v26;
  v28 = vabdd_f64(v12, v24);
  v29 = vabdd_f64(v13, v25);
  v30 = vabdd_f64(v14, v26);
  v31 = vabdd_f64(v16, v24);
  v32 = vabdd_f64(v18, v24);
  v33 = vabdd_f64(v21, v24);
  v34 = vabdd_f64(v15, v25);
  v35 = vabdd_f64(v19, v25);
  v36 = vabdd_f64(v22, v25);
  v37 = vabdd_f64(v17, v26);
  v38 = vabdd_f64(v20, v26);
  v39 = vabdd_f64(v23, v26);
  if (v28 < v31)
    v28 = v31;
  if (v28 < v32)
    v28 = v32;
  if (v28 >= v33)
    v40 = v28;
  else
    v40 = v33;
  if (v29 >= v34)
    v34 = v29;
  if (v34 < v35)
    v34 = v35;
  if (v34 >= v36)
    v41 = v34;
  else
    v41 = v36;
  if (v30 >= v37)
    v37 = v30;
  if (v37 < v38)
    v37 = v38;
  if (v37 >= v39)
    v42 = v37;
  else
    v42 = v39;
  if (v40 <= v42)
    v43 = v40;
  else
    v43 = v42;
  if (v40 <= v42)
    v44 = v42;
  else
    v44 = v40;
  if (v41 <= v44)
  {
    if (v41 < v43)
      v43 = v41;
  }
  else
  {
    v44 = v41;
  }
  v45 = sub_2394CAFB0(&v63, &v62, &v61, &v60, &v55, &v54, &v53, &v52, &v59, &v58, &v57, &v56, &v51, &v50, &v49, &v48);
  if (v43 >= 1.0e-58)
  {
    if (v44 < 1.0e61)
    {
      v47 = v40 * 1.24661365e-13 * v41 * v42 * (v44 * v44);
      if (v45 > v47)
        return 1;
      if (v45 < -v47)
        return 0xFFFFFFFFLL;
    }
  }
  else if (v43 == 0.0)
  {
    return 0;
  }
  return sub_2394CB074(a1, a2, a3, a4, a5, a6);
}

double sub_2394CAFB0(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;

  v16 = *a5 * *a2 - *a1 * *a6;
  v17 = *a9 * *a2 - *a1 * *a10;
  v18 = *a13 * *a2 - *a1 * *a14;
  v19 = *a9 * *a6 - *a5 * *a10;
  v20 = *a13 * *a6 - *a5 * *a14;
  v21 = *a13 * *a10 - *a9 * *a14;
  return (v21 * *a7 - v20 * *a11 + v19 * *a15) * *a4
       - (v21 * *a3 - v18 * *a11 + v17 * *a15) * *a8
       + (v20 * *a3 - v18 * *a7 + v16 * *a15) * *a12
       - (v19 * *a3 - v17 * *a7 + v16 * *a11) * *a16;
}

uint64_t sub_2394CB074(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  unint64_t StatusReg;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  void *v29;
  double v30;
  double v31[2];
  void *v32;
  double v33;
  void *__p[4];
  void *v35;
  double v36;
  double v37[2];
  void *v38;
  double v39;
  void *v40[4];
  void *v41;
  double v42;
  double v43[2];
  void *v44;
  double v45;
  void *v46[4];
  void *v47;
  double v48;
  double v49[2];
  void *v50;
  double v51;
  void *v52[4];
  double v53;
  double v54;
  double v55[2];
  double v56;
  double v57;
  void *v58[4];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), 0x400000uLL);
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v53 = -*a2;
  v54 = v12;
  v55[0] = -v13;
  v55[1] = v13;
  v56 = -v14;
  v57 = v14;
  v15 = *a3;
  v16 = a3[1];
  v17 = a3[2];
  *(double *)&v47 = -*a3;
  v48 = v15;
  v49[0] = -v16;
  v49[1] = v16;
  *(double *)&v50 = -v17;
  v51 = v17;
  v18 = *a4;
  v19 = a4[1];
  v20 = a4[2];
  *(double *)&v41 = -*a4;
  v42 = v18;
  v43[0] = -v19;
  v43[1] = v19;
  *(double *)&v44 = -v20;
  v45 = v20;
  v21 = *a5;
  v22 = a5[1];
  v23 = a5[2];
  *(double *)&v35 = -*a5;
  v36 = v21;
  v37[0] = -v22;
  v37[1] = v22;
  *(double *)&v38 = -v23;
  v39 = v23;
  v24 = *a6;
  v25 = a6[1];
  v26 = a6[2];
  *(double *)&v29 = -*a6;
  v30 = v24;
  v31[0] = -v25;
  v31[1] = v25;
  *(double *)&v32 = -v26;
  v33 = v26;
  v27 = sub_2394CB41C(&v53, v55, &v56, (double *)&v47, v49, (double *)&v50, (double *)&v41, v43, (double *)&v44, (double *)&v35, v37, (double *)&v38, (double *)&v29, v31, (double *)&v32);
  if ((_DWORD)v27 == HIDWORD(v27))
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  }
  else
  {
    _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
    sub_2394C2334(a2, (uint64_t)&v53);
    sub_2394C2334(a3, (uint64_t)&v47);
    sub_2394C2334(a4, (uint64_t)&v41);
    sub_2394C2334(a5, (uint64_t)&v35);
    sub_2394C2334(a6, (uint64_t)&v29);
    v27 = sub_2394CBA88((uint64_t)&v53, (uint64_t)&v56, (uint64_t)v58, (uint64_t)&v47, (uint64_t)&v50, (uint64_t)v52, (uint64_t)&v41, (uint64_t)&v44, (uint64_t)v46, (uint64_t)&v35, (uint64_t)&v38, (uint64_t)v40, (uint64_t)&v29, (double *)&v32, (double *)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(double *)&v32 != 0.0)
    {
      v33 = *(double *)&v32;
      operator delete(v32);
    }
    if (*(double *)&v29 != 0.0)
    {
      v30 = *(double *)&v29;
      operator delete(v29);
    }
    if (v40[0])
    {
      v40[1] = v40[0];
      operator delete(v40[0]);
    }
    if (*(double *)&v38 != 0.0)
    {
      v39 = *(double *)&v38;
      operator delete(v38);
    }
    if (*(double *)&v35 != 0.0)
    {
      v36 = *(double *)&v35;
      operator delete(v35);
    }
    if (v46[0])
    {
      v46[1] = v46[0];
      operator delete(v46[0]);
    }
    if (*(double *)&v44 != 0.0)
    {
      v45 = *(double *)&v44;
      operator delete(v44);
    }
    if (*(double *)&v41 != 0.0)
    {
      v42 = *(double *)&v41;
      operator delete(v41);
    }
    if (v52[0])
    {
      v52[1] = v52[0];
      operator delete(v52[0]);
    }
    if (*(double *)&v50 != 0.0)
    {
      v51 = *(double *)&v50;
      operator delete(v50);
    }
    if (*(double *)&v47 != 0.0)
    {
      v48 = *(double *)&v47;
      operator delete(v47);
    }
    if (v58[0])
    {
      v58[1] = v58[0];
      operator delete(v58[0]);
    }
    if (v56 != 0.0)
    {
      v57 = v56;
      operator delete(*(void **)&v56);
    }
    if (v53 != 0.0)
    {
      v54 = v53;
      operator delete(*(void **)&v53);
    }
  }
  return v27;
}

void sub_2394CB3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  sub_2394C2498((uint64_t)&a17);
  sub_2394C2498((uint64_t)&a29);
  sub_2394C2498((uint64_t)&a41);
  sub_2394C2498((uint64_t)&a53);
  sub_2394C2498(v53 - 176);
  _Unwind_Resume(a1);
}

void sub_2394CB408(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394C2498(v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t sub_2394CB41C(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double *v55;
  double *v56;
  double *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v82[2];
  double v83[2];
  double v84[2];
  double v85[2];
  double v86[2];
  double v87[2];
  double v88[2];
  double v89[2];
  double v90[2];
  double v91[2];
  double v92[2];
  double v93[2];
  double v94[2];
  double v95[2];
  double v96[2];
  double v97[2];

  v15 = a13[1] + *a1;
  v16 = a1[1] + *a13;
  v97[0] = v15;
  v97[1] = v16;
  v17 = a14[1] + *a2;
  v18 = a2[1] + *a14;
  v96[0] = v17;
  v96[1] = v18;
  v19 = a15[1] + *a3;
  v20 = a3[1] + *a15;
  v95[0] = v19;
  v95[1] = v20;
  if (v15 <= 0.0)
  {
    v23 = v15 * -v15;
    v22 = v16 * v16;
    if (v17 > 0.0)
      goto LABEL_9;
    goto LABEL_14;
  }
  if (v16 <= 0.0)
  {
    v23 = v16 * -v16;
    v22 = v15 * v15;
    if (v17 > 0.0)
      goto LABEL_9;
LABEL_14:
    v25 = v17 * -v17;
    v24 = v18 * v18;
    goto LABEL_16;
  }
  if (v15 >= v16)
    v21 = v15;
  else
    v21 = v16;
  v22 = v21 * v21;
  v23 = -0.0;
  if (v17 <= 0.0)
    goto LABEL_14;
LABEL_9:
  if (v18 <= 0.0)
  {
    v25 = v18 * -v18;
    v24 = v17 * v17;
  }
  else
  {
    if (v17 < v18)
      v17 = v18;
    v24 = v17 * v17;
    v25 = -0.0;
  }
LABEL_16:
  v26 = v23 + v25;
  v27 = v22 + v24;
  if (v19 <= 0.0)
  {
    v29 = v19 * -v19;
    v28 = v20 * v20;
  }
  else if (v20 <= 0.0)
  {
    v29 = v20 * -v20;
    v28 = v19 * v19;
  }
  else
  {
    if (v19 < v20)
      v19 = v20;
    v28 = v19 * v19;
    v29 = -0.0;
  }
  v94[0] = v26 + v29;
  v94[1] = v27 + v28;
  v30 = a13[1] + *a4;
  v31 = a4[1] + *a13;
  v93[0] = v30;
  v93[1] = v31;
  v32 = a14[1] + *a5;
  v33 = a5[1] + *a14;
  v92[0] = v32;
  v92[1] = v33;
  v34 = a15[1] + *a6;
  v35 = a6[1] + *a15;
  v91[0] = v34;
  v91[1] = v35;
  if (v30 <= 0.0)
  {
    v38 = v30 * -v30;
    v37 = v31 * v31;
    v39 = a9;
    if (v32 > 0.0)
      goto LABEL_31;
    goto LABEL_36;
  }
  if (v31 <= 0.0)
  {
    v38 = v31 * -v31;
    v37 = v30 * v30;
    v39 = a9;
    if (v32 > 0.0)
      goto LABEL_31;
LABEL_36:
    v41 = v32 * -v32;
    v40 = v33 * v33;
    goto LABEL_38;
  }
  if (v30 >= v31)
    v36 = v30;
  else
    v36 = v31;
  v37 = v36 * v36;
  v38 = -0.0;
  v39 = a9;
  if (v32 <= 0.0)
    goto LABEL_36;
LABEL_31:
  if (v33 <= 0.0)
  {
    v41 = v33 * -v33;
    v40 = v32 * v32;
  }
  else
  {
    if (v32 < v33)
      v32 = v33;
    v40 = v32 * v32;
    v41 = -0.0;
  }
LABEL_38:
  v42 = v38 + v41;
  v43 = v37 + v40;
  if (v34 <= 0.0)
  {
    v45 = v34 * -v34;
    v44 = v35 * v35;
  }
  else if (v35 <= 0.0)
  {
    v45 = v35 * -v35;
    v44 = v34 * v34;
  }
  else
  {
    if (v34 < v35)
      v34 = v35;
    v44 = v34 * v34;
    v45 = -0.0;
  }
  v90[0] = v42 + v45;
  v90[1] = v43 + v44;
  v46 = a13[1] + *a7;
  v47 = a7[1] + *a13;
  v89[0] = v46;
  v89[1] = v47;
  v48 = a14[1] + *a8;
  v49 = a8[1] + *a14;
  v88[0] = v48;
  v88[1] = v49;
  v50 = a15[1] + *v39;
  v51 = v39[1] + *a15;
  v87[0] = v50;
  v87[1] = v51;
  if (v46 <= 0.0)
  {
    v54 = v46 * -v46;
    v53 = v47 * v47;
    v56 = a11;
    v55 = a12;
    v57 = a10;
    if (v48 > 0.0)
      goto LABEL_53;
    goto LABEL_58;
  }
  if (v47 <= 0.0)
  {
    v54 = v47 * -v47;
    v53 = v46 * v46;
    v56 = a11;
    v55 = a12;
    v57 = a10;
    if (v48 > 0.0)
      goto LABEL_53;
LABEL_58:
    v59 = v48 * -v48;
    v58 = v49 * v49;
    goto LABEL_60;
  }
  if (v46 >= v47)
    v52 = v46;
  else
    v52 = v47;
  v53 = v52 * v52;
  v54 = -0.0;
  v56 = a11;
  v55 = a12;
  v57 = a10;
  if (v48 <= 0.0)
    goto LABEL_58;
LABEL_53:
  if (v49 <= 0.0)
  {
    v59 = v49 * -v49;
    v58 = v48 * v48;
  }
  else
  {
    if (v48 < v49)
      v48 = v49;
    v58 = v48 * v48;
    v59 = -0.0;
  }
LABEL_60:
  v60 = v54 + v59;
  v61 = v53 + v58;
  if (v50 <= 0.0)
  {
    v63 = v50 * -v50;
    v62 = v51 * v51;
  }
  else if (v51 <= 0.0)
  {
    v63 = v51 * -v51;
    v62 = v50 * v50;
  }
  else
  {
    if (v50 < v51)
      v50 = v51;
    v62 = v50 * v50;
    v63 = -0.0;
  }
  v86[0] = v60 + v63;
  v86[1] = v61 + v62;
  v64 = a13[1] + *v57;
  v65 = v57[1] + *a13;
  v85[0] = v64;
  v85[1] = v65;
  v66 = a14[1] + *v56;
  v67 = v56[1] + *a14;
  v84[0] = v66;
  v84[1] = v67;
  v68 = a15[1] + *v55;
  v69 = v55[1] + *a15;
  v83[0] = v68;
  v83[1] = v69;
  if (v64 <= 0.0)
  {
    v72 = v64 * -v64;
    v71 = v65 * v65;
    if (v66 > 0.0)
      goto LABEL_75;
    goto LABEL_80;
  }
  if (v65 <= 0.0)
  {
    v72 = v65 * -v65;
    v71 = v64 * v64;
    if (v66 > 0.0)
      goto LABEL_75;
LABEL_80:
    v74 = v66 * -v66;
    v73 = v67 * v67;
    goto LABEL_82;
  }
  if (v64 >= v65)
    v70 = v64;
  else
    v70 = v65;
  v71 = v70 * v70;
  v72 = -0.0;
  if (v66 <= 0.0)
    goto LABEL_80;
LABEL_75:
  if (v67 <= 0.0)
  {
    v74 = v67 * -v67;
    v73 = v66 * v66;
  }
  else
  {
    if (v66 < v67)
      v66 = v67;
    v73 = v66 * v66;
    v74 = -0.0;
  }
LABEL_82:
  v75 = v72 + v74;
  v76 = v71 + v73;
  if (v68 <= 0.0)
  {
    v78 = v68 * -v68;
    v77 = v69 * v69;
  }
  else if (v69 <= 0.0)
  {
    v78 = v69 * -v69;
    v77 = v68 * v68;
  }
  else
  {
    if (v68 < v69)
      v68 = v69;
    v77 = v68 * v68;
    v78 = -0.0;
  }
  v82[0] = v75 + v78;
  v82[1] = v76 + v77;
  v79 = sub_2394C6D1C(v97, v96, v95, v94, v89, v88, v87, v86, v93, v92, v91, v90, v85, v84, v83, v82);
  if (v79 < 0.0)
    return 0x100000001;
  if (v80 < 0.0)
    return -1;
  if (v80 == -v79)
    return 0;
  return 0x1FFFFFFFFLL;
}

uint64_t sub_2394CBA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, double *a14, double *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v22;
  double *v23;
  uint64_t v27;
  const void *v28;
  int64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  const void *v49;
  int64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  const void *v55;
  int64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  const void *v60;
  int64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  int64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  const void *v71;
  int64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  const void *v76;
  int64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;
  int64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  const void *v88;
  int64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  const void *v93;
  int64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v100;
  uint64_t v101;
  void *v103[4];
  void *v104[4];
  void *v105[4];
  void *v106[4];
  void *v107;
  void *v108;
  char *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  char *v113;
  uint64_t v114;
  void *v115;
  void *v116;
  char *v117;
  uint64_t v118;
  void *v119[4];
  void *v120;
  void *v121;
  char *v122;
  uint64_t v123;
  void *v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132[4];
  void *__p;
  void *v134;
  char *v135;
  uint64_t v136;
  void *v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t v144;
  void *v145[4];
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  __int16 *v158;
  __int16 *v159;

  v15 = a8;
  v16 = a6;
  v17 = a5;
  v18 = a4;
  if (*(_QWORD *)a13 != *(_QWORD *)(a13 + 8))
  {
    sub_2394C3324((double *)a1, (double *)a13, (uint64_t)&v154);
    v22 = a14;
    if (*(_QWORD *)a14 != *((_QWORD *)a14 + 1))
      goto LABEL_3;
LABEL_9:
    v32 = v17;
    v33 = v16;
    v34 = v15;
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v36 = *(const void **)a2;
    v35 = *(_QWORD *)(a2 + 8);
    v37 = v35 - *(_QWORD *)a2;
    if (v35 != *(_QWORD *)a2)
    {
      if (v37 < 0)
        sub_2394189F8();
      v100 = v18;
      v38 = (char *)operator new(v37);
      v39 = &v38[2 * (v37 >> 1)];
      v150 = v38;
      v152 = v39;
      memcpy(v38, v36, v37);
      v151 = v39;
      v18 = v100;
    }
    v153 = *(_QWORD *)(a2 + 24);
    v15 = v34;
    v16 = v33;
    v17 = v32;
    v23 = a15;
    if (*(_QWORD *)a15 != *((_QWORD *)a15 + 1))
      goto LABEL_4;
    goto LABEL_13;
  }
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v28 = *(const void **)a1;
  v27 = *(_QWORD *)(a1 + 8);
  v29 = v27 - *(_QWORD *)a1;
  if (v27 != *(_QWORD *)a1)
  {
    if (v29 < 0)
      sub_2394189F8();
    v30 = (char *)operator new(v29);
    v31 = &v30[2 * (v29 >> 1)];
    v154 = v30;
    v156 = v31;
    memcpy(v30, v28, v29);
    v155 = v31;
    v18 = a4;
  }
  v157 = *(_QWORD *)(a1 + 24);
  v15 = a8;
  v16 = a6;
  v17 = a5;
  v22 = a14;
  if (*(_QWORD *)a14 == *((_QWORD *)a14 + 1))
    goto LABEL_9;
LABEL_3:
  sub_2394C3324((double *)a2, v22, (uint64_t)&v150);
  v23 = a15;
  if (*(_QWORD *)a15 != *((_QWORD *)a15 + 1))
  {
LABEL_4:
    sub_2394C3324((double *)a3, v23, (uint64_t)&v146);
    goto LABEL_17;
  }
LABEL_13:
  v40 = v17;
  v41 = v16;
  v42 = v15;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v44 = *(const void **)a3;
  v43 = *(_QWORD *)(a3 + 8);
  v45 = v43 - *(_QWORD *)a3;
  if (v43 != *(_QWORD *)a3)
  {
    if (v45 < 0)
      sub_2394189F8();
    v101 = v18;
    v46 = (char *)operator new(v45);
    v47 = &v46[2 * (v45 >> 1)];
    v146 = v46;
    v148 = v47;
    memcpy(v46, v44, v45);
    v147 = v47;
    v18 = v101;
  }
  v149 = *(_QWORD *)(a3 + 24);
  v15 = v42;
  v16 = v41;
  v17 = v40;
LABEL_17:
  sub_2394C2EC8((unint64_t)&v154, (double *)&v154, (uint64_t)&v141);
  sub_2394C2EC8((unint64_t)&v150, (double *)&v150, (uint64_t)&v137);
  sub_2394C50E8((uint64_t)&v141, (uint64_t)&v137, &v158);
  sub_2394C2EC8((unint64_t)&v146, (double *)&v146, (uint64_t)&__p);
  sub_2394C50E8((uint64_t)&v158, (uint64_t)&__p, v145);
  if (__p)
  {
    v134 = __p;
    operator delete(__p);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (*(_QWORD *)a13 != *(_QWORD *)(a13 + 8))
  {
    sub_2394C3324((double *)v18, (double *)a13, (uint64_t)&v141);
    if (*(_QWORD *)v22 != *((_QWORD *)v22 + 1))
      goto LABEL_27;
LABEL_33:
    v137 = 0;
    v138 = 0;
    v139 = 0;
    v55 = *(const void **)v17;
    v54 = *(_QWORD *)(v17 + 8);
    v56 = v54 - *(_QWORD *)v17;
    if (v54 != *(_QWORD *)v17)
    {
      if (v56 < 0)
        sub_2394189F8();
      v57 = (char *)operator new(v54 - *(_QWORD *)v17);
      v58 = &v57[2 * (v56 >> 1)];
      v137 = v57;
      v139 = v58;
      memcpy(v57, v55, v56);
      v138 = v58;
    }
    v140 = *(_QWORD *)(v17 + 24);
    if (*(_QWORD *)v23 != *((_QWORD *)v23 + 1))
      goto LABEL_28;
    goto LABEL_37;
  }
  v142 = 0;
  v141 = 0;
  v143 = 0;
  v49 = *(const void **)v18;
  v48 = *(_QWORD *)(v18 + 8);
  v50 = v48 - *(_QWORD *)v18;
  if (v48 != *(_QWORD *)v18)
  {
    if (v50 < 0)
      sub_2394189F8();
    v51 = v18;
    v52 = (char *)operator new(v48 - *(_QWORD *)v18);
    v53 = &v52[2 * (v50 >> 1)];
    v141 = v52;
    v143 = v53;
    memcpy(v52, v49, v50);
    v142 = v53;
    v18 = v51;
  }
  v144 = *(_QWORD *)(v18 + 24);
  if (*(_QWORD *)v22 == *((_QWORD *)v22 + 1))
    goto LABEL_33;
LABEL_27:
  sub_2394C3324((double *)v17, v22, (uint64_t)&v137);
  if (*(_QWORD *)v23 != *((_QWORD *)v23 + 1))
  {
LABEL_28:
    sub_2394C3324((double *)v16, v23, (uint64_t)&__p);
    goto LABEL_41;
  }
LABEL_37:
  __p = 0;
  v134 = 0;
  v135 = 0;
  v60 = *(const void **)v16;
  v59 = *(_QWORD *)(v16 + 8);
  v61 = v59 - *(_QWORD *)v16;
  if (v59 != *(_QWORD *)v16)
  {
    if (v61 < 0)
      sub_2394189F8();
    v62 = (char *)operator new(v59 - *(_QWORD *)v16);
    v63 = &v62[2 * (v61 >> 1)];
    __p = v62;
    v135 = v63;
    memcpy(v62, v60, v61);
    v134 = v63;
  }
  v136 = *(_QWORD *)(v16 + 24);
LABEL_41:
  sub_2394C2EC8((unint64_t)&v141, (double *)&v141, (uint64_t)&v128);
  sub_2394C2EC8((unint64_t)&v137, (double *)&v137, (uint64_t)&v124);
  sub_2394C50E8((uint64_t)&v128, (uint64_t)&v124, &v158);
  sub_2394C2EC8((unint64_t)&__p, (double *)&__p, (uint64_t)&v120);
  sub_2394C50E8((uint64_t)&v158, (uint64_t)&v120, v132);
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (*(_QWORD *)a13 != *(_QWORD *)(a13 + 8))
  {
    sub_2394C3324((double *)a7, (double *)a13, (uint64_t)&v128);
    if (*(_QWORD *)v22 != *((_QWORD *)v22 + 1))
      goto LABEL_51;
LABEL_57:
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v71 = *(const void **)v15;
    v70 = *(_QWORD *)(v15 + 8);
    v72 = v70 - *(_QWORD *)v15;
    if (v70 != *(_QWORD *)v15)
    {
      if (v72 < 0)
        sub_2394189F8();
      v73 = (char *)operator new(v70 - *(_QWORD *)v15);
      v74 = &v73[2 * (v72 >> 1)];
      v124 = v73;
      v126 = v74;
      memcpy(v73, v71, v72);
      v125 = v74;
    }
    v127 = *(_QWORD *)(v15 + 24);
    v64 = a9;
    if (*(_QWORD *)v23 != *((_QWORD *)v23 + 1))
      goto LABEL_52;
    goto LABEL_61;
  }
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v66 = *(const void **)a7;
  v65 = *(_QWORD *)(a7 + 8);
  v67 = v65 - *(_QWORD *)a7;
  if (v65 != *(_QWORD *)a7)
  {
    if (v67 < 0)
      sub_2394189F8();
    v68 = (char *)operator new(v65 - *(_QWORD *)a7);
    v69 = &v68[2 * (v67 >> 1)];
    v128 = v68;
    v130 = v69;
    memcpy(v68, v66, v67);
    v129 = v69;
  }
  v131 = *(_QWORD *)(a7 + 24);
  if (*(_QWORD *)v22 == *((_QWORD *)v22 + 1))
    goto LABEL_57;
LABEL_51:
  sub_2394C3324((double *)v15, v22, (uint64_t)&v124);
  v64 = a9;
  if (*(_QWORD *)v23 != *((_QWORD *)v23 + 1))
  {
LABEL_52:
    sub_2394C3324((double *)v64, v23, (uint64_t)&v120);
    goto LABEL_65;
  }
LABEL_61:
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v76 = *(const void **)v64;
  v75 = *(_QWORD *)(v64 + 8);
  v77 = v75 - *(_QWORD *)v64;
  if (v75 != *(_QWORD *)v64)
  {
    if (v77 < 0)
      sub_2394189F8();
    v78 = (char *)operator new(v75 - *(_QWORD *)v64);
    v79 = &v78[2 * (v77 >> 1)];
    v120 = v78;
    v122 = v79;
    memcpy(v78, v76, v77);
    v121 = v79;
  }
  v123 = *(_QWORD *)(v64 + 24);
LABEL_65:
  sub_2394C2EC8((unint64_t)&v128, (double *)&v128, (uint64_t)&v115);
  sub_2394C2EC8((unint64_t)&v124, (double *)&v124, (uint64_t)&v111);
  sub_2394C50E8((uint64_t)&v115, (uint64_t)&v111, &v158);
  sub_2394C2EC8((unint64_t)&v120, (double *)&v120, (uint64_t)&v107);
  sub_2394C50E8((uint64_t)&v158, (uint64_t)&v107, v119);
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (*(_QWORD *)a13 != *(_QWORD *)(a13 + 8))
  {
    sub_2394C3324((double *)a10, (double *)a13, (uint64_t)&v115);
    v80 = a11;
    if (*(_QWORD *)v22 != *((_QWORD *)v22 + 1))
      goto LABEL_75;
LABEL_81:
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v88 = *(const void **)v80;
    v87 = *(_QWORD *)(v80 + 8);
    v89 = v87 - *(_QWORD *)v80;
    if (v87 != *(_QWORD *)v80)
    {
      if (v89 < 0)
        sub_2394189F8();
      v90 = (char *)operator new(v87 - *(_QWORD *)v80);
      v91 = &v90[2 * (v89 >> 1)];
      v111 = v90;
      v113 = v91;
      memcpy(v90, v88, v89);
      v112 = v91;
    }
    v114 = *(_QWORD *)(v80 + 24);
    v81 = a12;
    if (*(_QWORD *)v23 != *((_QWORD *)v23 + 1))
      goto LABEL_76;
    goto LABEL_85;
  }
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v83 = *(const void **)a10;
  v82 = *(_QWORD *)(a10 + 8);
  v84 = v82 - *(_QWORD *)a10;
  if (v82 != *(_QWORD *)a10)
  {
    if (v84 < 0)
      sub_2394189F8();
    v85 = (char *)operator new(v82 - *(_QWORD *)a10);
    v86 = &v85[2 * (v84 >> 1)];
    v115 = v85;
    v117 = v86;
    memcpy(v85, v83, v84);
    v116 = v86;
  }
  v118 = *(_QWORD *)(a10 + 24);
  v80 = a11;
  if (*(_QWORD *)v22 == *((_QWORD *)v22 + 1))
    goto LABEL_81;
LABEL_75:
  sub_2394C3324((double *)v80, v22, (uint64_t)&v111);
  v81 = a12;
  if (*(_QWORD *)v23 != *((_QWORD *)v23 + 1))
  {
LABEL_76:
    sub_2394C3324((double *)v81, v23, (uint64_t)&v107);
    goto LABEL_89;
  }
LABEL_85:
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v93 = *(const void **)v81;
  v92 = *(_QWORD *)(v81 + 8);
  v94 = v92 - *(_QWORD *)v81;
  if (v92 != *(_QWORD *)v81)
  {
    if (v94 < 0)
      sub_2394189F8();
    v95 = (char *)operator new(v92 - *(_QWORD *)v81);
    v96 = &v95[2 * (v94 >> 1)];
    v107 = v95;
    v109 = v96;
    memcpy(v95, v93, v94);
    v108 = v96;
  }
  v110 = *(_QWORD *)(v81 + 24);
LABEL_89:
  sub_2394C2EC8((unint64_t)&v115, (double *)&v115, (uint64_t)v105);
  sub_2394C2EC8((unint64_t)&v111, (double *)&v111, (uint64_t)v104);
  sub_2394C50E8((uint64_t)v105, (uint64_t)v104, &v158);
  sub_2394C2EC8((unint64_t)&v107, (double *)&v107, (uint64_t)v103);
  sub_2394C50E8((uint64_t)&v158, (uint64_t)v103, v106);
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (v104[0])
  {
    v104[1] = v104[0];
    operator delete(v104[0]);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  sub_2394C85FC((unint64_t)&v154, (double *)&v150, (double *)&v146, (double *)v145, (unint64_t)&v128, (double *)&v124, (double *)&v120, (double *)v119, &v158, (unint64_t)&v141, (double *)&v137, (double *)&__p, (double *)v132, (unint64_t)&v115, (double *)&v111, (double *)&v107, (double *)v106);
  if (v158 == v159)
  {
    v97 = 0;
    if (v158)
    {
LABEL_102:
      v159 = v158;
      operator delete(v158);
    }
  }
  else
  {
    if (*(v159 - 1) > 0)
      v97 = 1;
    else
      v97 = 0xFFFFFFFFLL;
    if (v158)
      goto LABEL_102;
  }
  if (v106[0])
  {
    v106[1] = v106[0];
    operator delete(v106[0]);
  }
  if (v107)
  {
    v108 = v107;
    operator delete(v107);
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (v119[0])
  {
    v119[1] = v119[0];
    operator delete(v119[0]);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  if (v132[0])
  {
    v132[1] = v132[0];
    operator delete(v132[0]);
  }
  if (__p)
  {
    v134 = __p;
    operator delete(__p);
  }
  if (v137)
  {
    v138 = v137;
    operator delete(v137);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v145[0])
  {
    v145[1] = v145[0];
    operator delete(v145[0]);
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  return v97;
}

void sub_2394CC53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a68;
  void *a72;
  uint64_t v72;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;

  if (__p)
  {
    operator delete(__p);
    v74 = a40;
    if (!a40)
    {
LABEL_3:
      v75 = a44;
      if (!a44)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v74 = a40;
    if (!a40)
      goto LABEL_3;
  }
  operator delete(v74);
  v75 = a44;
  if (!a44)
  {
LABEL_4:
    v76 = a48;
    if (!a48)
    {
LABEL_10:
      if (a52)
      {
        operator delete(a52);
        v77 = a56;
        if (!a56)
        {
LABEL_12:
          v78 = a60;
          if (!a60)
            goto LABEL_13;
          goto LABEL_17;
        }
      }
      else
      {
        v77 = a56;
        if (!a56)
          goto LABEL_12;
      }
      operator delete(v77);
      v78 = a60;
      if (!a60)
      {
LABEL_13:
        v79 = a64;
        if (!a64)
        {
LABEL_19:
          if (a68)
          {
            operator delete(a68);
            v80 = a72;
            if (!a72)
            {
LABEL_21:
              v81 = (void *)STACK[0x218];
              if (!STACK[0x218])
                goto LABEL_22;
              goto LABEL_26;
            }
          }
          else
          {
            v80 = a72;
            if (!a72)
              goto LABEL_21;
          }
          STACK[0x200] = (unint64_t)v80;
          operator delete(v80);
          v81 = (void *)STACK[0x218];
          if (!STACK[0x218])
          {
LABEL_22:
            v82 = *(void **)(v72 - 248);
            if (!v82)
            {
LABEL_28:
              v83 = *(void **)(v72 - 216);
              if (v83)
              {
                *(_QWORD *)(v72 - 208) = v83;
                operator delete(v83);
                v84 = *(void **)(v72 - 184);
                if (!v84)
                {
LABEL_30:
                  v85 = *(void **)(v72 - 152);
                  if (!v85)
                    goto LABEL_32;
                  goto LABEL_31;
                }
              }
              else
              {
                v84 = *(void **)(v72 - 184);
                if (!v84)
                  goto LABEL_30;
              }
              *(_QWORD *)(v72 - 176) = v84;
              operator delete(v84);
              v85 = *(void **)(v72 - 152);
              if (!v85)
LABEL_32:
                _Unwind_Resume(a1);
LABEL_31:
              *(_QWORD *)(v72 - 144) = v85;
              operator delete(v85);
              goto LABEL_32;
            }
LABEL_27:
            *(_QWORD *)(v72 - 240) = v82;
            operator delete(v82);
            goto LABEL_28;
          }
LABEL_26:
          STACK[0x220] = (unint64_t)v81;
          operator delete(v81);
          v82 = *(void **)(v72 - 248);
          if (!v82)
            goto LABEL_28;
          goto LABEL_27;
        }
LABEL_18:
        operator delete(v79);
        goto LABEL_19;
      }
LABEL_17:
      operator delete(v78);
      v79 = a64;
      if (!a64)
        goto LABEL_19;
      goto LABEL_18;
    }
LABEL_9:
    operator delete(v76);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v75);
  v76 = a48;
  if (!a48)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_2394CC92C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  void *v62;
  void *v63;

  if (__p)
  {
    operator delete(__p);
    v62 = *(void **)(v61 - 120);
    if (!v62)
    {
LABEL_3:
      v63 = a56;
      if (!a56)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v62 = *(void **)(v61 - 120);
    if (!v62)
      goto LABEL_3;
  }
  *(_QWORD *)(v61 - 112) = v62;
  operator delete(v62);
  v63 = a56;
  if (!a56)
  {
LABEL_4:
    if (a60)
      goto LABEL_12;
    goto LABEL_13;
  }
LABEL_8:
  operator delete(v63);
  if (a60)
LABEL_12:
    JUMPOUT(0x2394CC880);
LABEL_13:
  JUMPOUT(0x2394CC884);
}

void sub_2394CC9BC()
{
  JUMPOUT(0x2394CC884);
}

void sub_2394CC9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *a72;
  uint64_t v72;
  void *v73;
  void *v74;
  unint64_t v75;

  if (__p)
  {
    operator delete(__p);
    v73 = *(void **)(v72 - 120);
    if (!v73)
    {
LABEL_3:
      v74 = a72;
      if (!a72)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v73 = *(void **)(v72 - 120);
    if (!v73)
      goto LABEL_3;
  }
  *(_QWORD *)(v72 - 112) = v73;
  operator delete(v73);
  v74 = a72;
  if (!a72)
  {
LABEL_4:
    v75 = STACK[0x218];
    if (STACK[0x218])
      goto LABEL_9;
    goto LABEL_13;
  }
LABEL_8:
  STACK[0x200] = (unint64_t)v74;
  operator delete(v74);
  v75 = STACK[0x218];
  if (STACK[0x218])
  {
LABEL_9:
    STACK[0x220] = v75;
    JUMPOUT(0x2394CC8DCLL);
  }
LABEL_13:
  JUMPOUT(0x2394CC8E0);
}

void sub_2394CCA54()
{
  JUMPOUT(0x2394CC8E0);
}

uint64_t sub_2394CCA5C(uint64_t a1, uint64_t a2, int a3, __int128 *a4, int a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  __int128 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _BYTE v52[8];

  v7 = *(_QWORD **)a2;
  v8 = *(_QWORD *)(a1 + 200);
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  if (*(_DWORD *)(a1 + 8) != 2)
  {
    if (v8 == v9)
    {
      if (!a3)
        goto LABEL_15;
    }
    else if (v8 == v7[5])
    {
      if (a3 == 1)
        goto LABEL_15;
    }
    else
    {
      if (v8 != v7[6])
      {
        if (v8 != v7[7] || a3 != 3)
          goto LABEL_19;
LABEL_15:
        v16 = v7 + 4;
        v17 = v16[byte_239EC6C50[4 * a3 + a3]];
        v18 = v16[byte_239EC6C50[4 * a3 + a3]];
        v19 = v16[a3];
        v21 = *(_OWORD *)(v17 + 16);
        v20 = (__int128 *)(v17 + 16);
        v22 = *((_QWORD *)v20 + 2);
        v50 = v21;
        v51 = v22;
        v24 = *(_OWORD *)(v18 + 16);
        v23 = (__int128 *)(v18 + 16);
        v25 = *((_QWORD *)v23 + 2);
        v48 = v24;
        v49 = v25;
        v26 = *(_QWORD *)(v19 + 32);
        v46 = *(_OWORD *)(v19 + 16);
        v47 = v26;
        v27 = sub_2394C2060((uint64_t)v52, (double *)&v50, (double *)&v48, (double *)&v46);
        v28 = *((_QWORD *)v20 + 2);
        v50 = *v20;
        v51 = v28;
        v29 = *((_QWORD *)v23 + 2);
        v48 = *v23;
        v49 = v29;
        v30 = *((_QWORD *)a4 + 2);
        v46 = *a4;
        v47 = v30;
        v31 = sub_2394C2060((uint64_t)v52, (double *)&v50, (double *)&v48, (double *)&v46) * v27;
        if (v31)
          return -v31;
LABEL_30:
        v45 = sub_2394CCD78(a1, (double *)v20, (double *)a4, (double *)v23) - 1;
        if (v45 >= 3)
          return 0xFFFFFFFFLL;
        else
          return dword_239EC6CB0[v45];
      }
      if (a3 == 2)
        goto LABEL_15;
    }
LABEL_19:
    v33 = 2;
    v34 = 1;
    if (a3 <= 1)
      v34 = 2;
    if (a3 <= 2)
      v33 = 3;
    v35 = v7 + 4;
    v12 = (double *)(v35[a3 < 1] + 16);
    v13 = (double *)(v35[v34] + 16);
    v14 = (double *)(v35[v33] + 16);
    return sub_2394C59F4(a1, v12, v13, v14, (double *)a4, a5);
  }
  if (v8 == v9)
  {
    v15 = 0;
  }
  else
  {
    v10 = v7[5];
    if (v8 == v10)
    {
      v15 = 1;
    }
    else
    {
      v11 = v7[6];
      if (v8 == v11)
      {
        v15 = 2;
      }
      else
      {
        if (v8 != v7[7])
        {
          v12 = (double *)(v9 + 16);
          v13 = (double *)(v10 + 16);
          v14 = (double *)(v11 + 16);
          return sub_2394C59F4(a1, v12, v13, v14, (double *)a4, a5);
        }
        v15 = 3;
      }
    }
  }
  v36 = v15;
  v37 = v7 + 4;
  v38 = v37[dword_239EC6C60[v36]];
  v39 = v37[dword_239EC6C6C[v36]];
  v40 = *(_OWORD *)(v38 + 16);
  v20 = (__int128 *)(v38 + 16);
  v41 = *((_QWORD *)v20 + 2);
  v50 = v40;
  v51 = v41;
  v42 = *(_OWORD *)(v39 + 16);
  v23 = (__int128 *)(v39 + 16);
  v43 = *((_QWORD *)v23 + 2);
  v48 = v42;
  v49 = v43;
  v44 = *((_QWORD *)a4 + 2);
  v46 = *a4;
  v47 = v44;
  result = sub_2394C2060((uint64_t)v52, (double *)&v50, (double *)&v48, (double *)&v46);
  if (!(_DWORD)result)
    goto LABEL_30;
  return result;
}

uint64_t sub_2394CCD78(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int v21;
  unsigned int v22;

  v4 = *a3;
  v5 = a3[2];
  v6 = *a2;
  v7 = a2[2];
  v8 = *a3 > *a2;
  if (*a3 < *a2)
    v8 = -1;
  if (v8)
    goto LABEL_9;
  v9 = a2[1];
  v10 = a3[1];
  v8 = v10 > v9;
  if (v10 < v9)
    v8 = -1;
  if (v8 || (v8 = v5 > v7, v5 >= v7))
  {
LABEL_9:
    if (!v8)
      return 1;
  }
  else
  {
    v8 = -1;
  }
  v11 = *a4;
  v12 = a4[2];
  v13 = v6 > *a4;
  if (v6 < *a4)
    v13 = -1;
  if (v13)
  {
    if (v8 == v13)
      return 0;
  }
  else
  {
    v15 = a4[1];
    v16 = a2[1];
    v13 = v16 > v15;
    if (v16 < v15)
      v13 = -1;
    v17 = v7 > v12;
    if (v7 < v12)
      v17 = -1;
    if (!v13)
      v13 = v17;
    if (v8 == v13)
      return 0;
  }
  v18 = v4 > v11;
  if (v4 < v11)
    v18 = -1;
  if (!v18)
  {
    v19 = a4[1];
    v20 = a3[1];
    v18 = v20 > v19;
    if (v20 < v19)
      v18 = -1;
    v21 = v5 > v12;
    if (v5 < v12)
      v21 = -1;
    if (!v18)
      v18 = v21;
  }
  if (v18 == v13)
    v22 = 2;
  else
    v22 = 4;
  if (v18)
    return v22;
  else
    return 3;
}

__n128 sub_2394CCE80@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  int v12;
  unsigned int v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = a7;
  switch(a3)
  {
    case 0:
      *a7 = *(_QWORD *)(*a4 + 8 * a5 + 32);
      return result;
    case 1:
      v11 = (_QWORD *)(a1 + 8);
      v19 = *a4;
      v12 = a5;
      v13 = a6;
      goto LABEL_10;
    case 2:
      v19 = *a4;
      sub_2394CD754(a1 + 8, &v19, a5, a7);
      goto LABEL_13;
    case 3:
      v19 = *a4;
      sub_2394CDD84((_QWORD *)(a1 + 8), &v19, a7);
      goto LABEL_13;
    case 4:
      v9 = *a4;
      v10 = *(_DWORD *)(a1 + 8);
      if (v10 == 2)
      {
        v19 = a2;
        v20 = a1;
        v18 = v9;
        sub_2394CE044(a1, &v18, &v19, v8);
      }
      else if (v10 == 1)
      {
        v19 = *a4;
        a7 = v8;
        v11 = (_QWORD *)(a1 + 8);
        v12 = 0;
        v13 = 1;
LABEL_10:
        sub_2394CCFE4(v11, &v19, v12, v13, a7);
      }
      else
      {
        v19 = a2;
        v20 = a1;
        v17 = v9;
        sub_2394CE168(a1, &v17, &v19, v8);
      }
LABEL_13:
      v15 = *v8;
      v16 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
      *(_QWORD *)(v15 + 32) = v16;
      break;
    default:
      sub_2394BE434(a1, (__int128 *)a2, (uint64_t **)a7);
      break;
  }
  return result;
}

void sub_2394CCFE4(_QWORD *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  _QWORD *v8;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  uint64_t v80;
  uint64_t v81;
  void *__p;
  uint64_t *v83;
  uint64_t *v84;

  LODWORD(v6) = a3;
  v8 = a1;
  if (*(_DWORD *)a1 == 2)
  {
    v37 = a1[16];
    if (!v37)
    {
      sub_2394B61FC(a1 + 12);
      v8 = a1;
      v37 = a1[16];
    }
    v8[16] = *(_QWORD *)v37 & 0xFFFFFFFFFFFFFFFCLL;
    *(_QWORD *)v37 = 0;
    *(_BYTE *)(v37 + 8) = 0;
    ++v8[14];
    *a5 = v37;
    v39 = 3 - (v6 + a4);
    v40 = *a2;
    v41 = *(_QWORD **)(*a2 + 8 * v39);
    if (*a2 == *v41)
    {
      v42 = 0;
      v43 = *(_QWORD *)(v40 + 8 * v6 + 32);
      v44 = v41[4];
      if (v43 == v44)
        goto LABEL_72;
    }
    else if (v40 == v41[1])
    {
      v42 = 1;
      v43 = *(_QWORD *)(v40 + 8 * v6 + 32);
      v44 = v41[4];
      if (v43 == v44)
        goto LABEL_72;
    }
    else
    {
      if (v40 == v41[2])
        v42 = 2;
      else
        v42 = 3;
      v43 = *(_QWORD *)(v40 + 8 * v6 + 32);
      v44 = v41[4];
      if (v43 == v44)
      {
LABEL_72:
        v53 = 0;
        v6 = v6;
        v54 = a4;
        v55 = *(_QWORD *)(v40 + 8 * a4 + 32);
        if (v55 != v44)
          goto LABEL_73;
LABEL_80:
        v56 = 0;
        v57 = v39;
        v58 = v8[5];
        if (v58)
        {
LABEL_82:
          v8[5] = *(_QWORD *)v58 & 0xFFFFFFFFFFFFFFFCLL;
          *(_BYTE *)(v58 + 64) = 0;
          v61 = 0uLL;
          *(_OWORD *)(v58 + 48) = 0u;
          *(_OWORD *)v58 = 0u;
          *(_OWORD *)(v58 + 16) = 0u;
          *(_OWORD *)(v58 + 32) = 0u;
          ++v8[3];
          *(_QWORD *)(v58 + 32 + 8 * v6) = *(_QWORD *)(*a2 + 8 * v6 + 32);
          **(_QWORD **)(*a2 + 8 * v6 + 32) = v58;
          *(_QWORD *)(v58 + 32 + 8 * v54) = v37;
          *(_QWORD *)(v58 + 32 + 8 * v57) = *(_QWORD *)(*a2 + 8 * v57 + 32);
          *(_QWORD *)(*a2 + 8 * v6 + 32) = v37;
          v62 = v8[5];
          if (!v62)
          {
            v63 = v8;
            v80 = v54;
            v64 = v57;
            v65 = v56;
            v66 = v6;
            v67 = v53;
            v68 = v42;
            sub_2394B6434(v8 + 1);
            v61 = 0uLL;
            v42 = v68;
            v53 = v67;
            v6 = v66;
            v56 = v65;
            v57 = v64;
            v54 = v80;
            v8 = v63;
            v62 = v63[5];
          }
          v8[5] = *(_QWORD *)v62 & 0xFFFFFFFFFFFFFFFCLL;
          *(_BYTE *)(v62 + 64) = 0;
          *(_OWORD *)(v62 + 48) = v61;
          *(_OWORD *)v62 = v61;
          *(_OWORD *)(v62 + 16) = v61;
          *(_OWORD *)(v62 + 32) = v61;
          v69 = v62 + 32;
          ++v8[3];
          v70 = v53;
          *(_QWORD *)(v69 + v70 * 8) = v41[v53 + 4];
          *(_QWORD *)(v62 + 32 + 8 * v56) = v37;
          *(_QWORD *)(v69 + 8 * v42) = v41[v42 + 4];
          v41[v70 + 4] = v37;
          v71 = *a2;
          v72 = *(_QWORD **)(*a2 + 8 * v54);
          *(_QWORD *)(v58 + 8 * v6) = *a2;
          *(_QWORD *)(v71 + 8 * v54) = v58;
          v73 = *a2;
          if (*a2 == *v72)
          {
            v75 = 0;
          }
          else if (v73 == v72[1])
          {
            v75 = 1;
          }
          else
          {
            v74 = v73 == v72[2];
            v75 = 2;
            if (!v74)
              v75 = 3;
          }
          *(_QWORD *)(v58 + 8 * v54) = v72;
          v72[v75] = v58;
          v76 = (_QWORD *)v41[v56];
          *(_QWORD *)(v62 + 8 * v53) = v41;
          v41[v56] = v62;
          if (v41 == (_QWORD *)*v76)
          {
            v77 = 0;
          }
          else if (v41 == (_QWORD *)v76[1])
          {
            v77 = 1;
          }
          else
          {
            v77 = 2;
            if (v41 != (_QWORD *)v76[2])
              v77 = 3;
          }
          *(_QWORD *)(v62 + 8 * v56) = v76;
          v76[v77] = v62;
          *(_QWORD *)(v58 + 8 * v57) = v62;
          *(_QWORD *)(v62 + 8 * v42) = v58;
          *(_QWORD *)v37 = v58;
          return;
        }
LABEL_81:
        v59 = v8;
        v60 = v42;
        sub_2394B6434(v8 + 1);
        v42 = v60;
        v8 = v59;
        v58 = v59[5];
        goto LABEL_82;
      }
    }
    if (v43 == v41[5])
    {
      v53 = 1;
      v6 = v6;
      v54 = a4;
      v55 = *(_QWORD *)(v40 + 8 * a4 + 32);
      if (v55 == v44)
        goto LABEL_80;
    }
    else
    {
      if (v43 == v41[6])
        v53 = 2;
      else
        v53 = 3;
      v6 = v6;
      v54 = a4;
      v55 = *(_QWORD *)(v40 + 8 * a4 + 32);
      if (v55 == v44)
        goto LABEL_80;
    }
LABEL_73:
    if (v55 == v41[5])
    {
      v56 = 1;
      v57 = v39;
      v58 = v8[5];
      if (v58)
        goto LABEL_82;
    }
    else
    {
      if (v55 == v41[6])
        v56 = 2;
      else
        v56 = 3;
      v57 = v39;
      v58 = v8[5];
      if (v58)
        goto LABEL_82;
    }
    goto LABEL_81;
  }
  if (*(_DWORD *)a1 == 3)
  {
    v10 = (uint64_t *)operator new(0x100uLL);
    __p = v10;
    v83 = v10;
    v84 = v10 + 32;
    v11 = *a2;
    v12 = *a2 + 32;
    v78 = v6;
    v13 = *(_QWORD *)(v12 + 8 * v6);
    v14 = *(_QWORD *)(v12 + 8 * a4);
    while (1)
    {
      if (v10 < v84)
      {
        *v10++ = v11;
        v83 = v10;
        *(_BYTE *)(v11 + 64) = 1;
        v16 = *(_QWORD *)(v11 + 32);
        if (v13 != v16)
          goto LABEL_8;
        goto LABEL_31;
      }
      v18 = (uint64_t *)__p;
      v19 = (char *)v10 - (_BYTE *)__p;
      v20 = ((char *)v10 - (_BYTE *)__p) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        sub_2394189F8();
      v22 = (char *)v84 - (_BYTE *)__p;
      if (((char *)v84 - (_BYTE *)__p) >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_239418A80();
        v24 = operator new(8 * v23);
        v25 = (uint64_t *)&v24[8 * v20];
        v26 = &v24[8 * v23];
        *v25 = v11;
        v27 = (uint64_t)(v25 + 1);
        if (v10 == v18)
        {
LABEL_28:
          __p = v25;
          v84 = (uint64_t *)v26;
LABEL_29:
          operator delete(v10);
          goto LABEL_30;
        }
      }
      else
      {
        v24 = 0;
        v25 = (uint64_t *)(8 * v20);
        v26 = 0;
        *(_QWORD *)(8 * v20) = v11;
        v27 = 8 * v20 + 8;
        if (v10 == v18)
          goto LABEL_28;
      }
      v28 = (char *)(v10 - 1) - (char *)v18;
      if (v28 < 0x168)
      {
        v29 = v10;
        goto LABEL_23;
      }
      if (&v24[v19 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v24[v19 - 8])
        break;
      if ((uint64_t *)((char *)v10 - (v28 & 0xFFFFFFFFFFFFFFF8) - 8) > v10 - 1)
      {
        v29 = v10;
        goto LABEL_23;
      }
      if ((unint64_t)((char *)v10 - &v24[v19]) < 0x20)
      {
        v29 = v10;
        goto LABEL_23;
      }
      v31 = (v28 >> 3) + 1;
      v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = &v10[v32 / 0xFFFFFFFFFFFFFFF8];
      v25 = (uint64_t *)((char *)v25 - v32);
      v33 = &v24[8 * v20 - 16];
      v34 = v10 - 2;
      v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *(_OWORD *)v34;
        *(v33 - 1) = *((_OWORD *)v34 - 1);
        *v33 = v36;
        v33 -= 2;
        v34 -= 4;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_23;
LABEL_24:
      v10 = (uint64_t *)__p;
      __p = v25;
      v84 = (uint64_t *)v26;
      if (v10)
        goto LABEL_29;
LABEL_30:
      v10 = (uint64_t *)v27;
      v83 = (uint64_t *)v27;
      *(_BYTE *)(v11 + 64) = 1;
      v16 = *(_QWORD *)(v11 + 32);
      if (v13 != v16)
      {
LABEL_8:
        if (v13 == *(_QWORD *)(v11 + 40))
        {
          v17 = 1;
        }
        else
        {
          v17 = 2;
          if (v13 != *(_QWORD *)(v11 + 48))
            v17 = 3;
        }
        goto LABEL_32;
      }
LABEL_31:
      v17 = 0;
LABEL_32:
      if (v14 == v16)
      {
        v15 = 0;
      }
      else if (v14 == *(_QWORD *)(v11 + 40))
      {
        v15 = 1;
      }
      else
      {
        v15 = 2;
        if (v14 != *(_QWORD *)(v11 + 48))
          v15 = 3;
      }
      v11 = *(_QWORD *)(v11 + 8 * byte_239EC6C50[4 * v17 + v15]);
      if (*a2 == v11)
      {
        v52 = __p;
        v81 = v11;
        sub_2394C55FC(a1, (unint64_t **)__p, (unint64_t **)v10, &v81, v78, a5);
        if (v52)
          operator delete(v52);
        return;
      }
    }
    v29 = v10;
    do
    {
LABEL_23:
      v30 = *--v29;
      *--v25 = v30;
    }
    while (v29 != v18);
    goto LABEL_24;
  }
  v45 = a1[16];
  if (!v45)
  {
    sub_2394B61FC(a1 + 12);
    v8 = a1;
    v45 = a1[16];
  }
  v8[16] = *(_QWORD *)v45 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)v45 = 0;
  *(_BYTE *)(v45 + 8) = 0;
  ++v8[14];
  *a5 = v45;
  v47 = *(_QWORD *)(*a2 + 40);
  v48 = v8[5];
  if (!v48)
  {
    v49 = v8;
    sub_2394B6434(v8 + 1);
    v8 = v49;
    v48 = v49[5];
  }
  v8[5] = *(_QWORD *)v48 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)v48 = 0u;
  *(_OWORD *)(v48 + 16) = 0u;
  *(_QWORD *)(v48 + 32) = v45;
  *(_QWORD *)(v48 + 40) = v47;
  *(_QWORD *)(v48 + 48) = 0;
  *(_QWORD *)(v48 + 56) = 0;
  *(_BYTE *)(v48 + 64) = 0;
  ++v8[3];
  **(_QWORD **)(*a2 + 40) = v48;
  *(_QWORD *)(*a2 + 40) = v45;
  v50 = *(_QWORD *)*a2;
  *(_QWORD *)v48 = v50;
  *(_QWORD *)(v50 + 8) = v48;
  v51 = (_QWORD *)*a2;
  *(_QWORD *)(v48 + 8) = *a2;
  *v51 = v48;
  *(_QWORD *)v45 = v48;
}

void sub_2394CD724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  if (v15)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_2394CD754(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  signed int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;

  v8 = *(_QWORD *)(a1 + 128);
  if (!v8)
  {
    sub_2394B61FC((_QWORD *)(a1 + 96));
    v8 = *(_QWORD *)(a1 + 128);
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 0;
  ++*(_QWORD *)(a1 + 112);
  *a4 = v8;
  if (*(_DWORD *)a1 == 2)
  {
    v23 = *(_QWORD **)(*a2 + 16);
    v24 = *(_OWORD *)(*a2 + 32);
    v25 = *(_QWORD *)(a1 + 40);
    if (!v25)
    {
      v74 = *(_OWORD *)(*a2 + 32);
      sub_2394B6434((_QWORD *)(a1 + 8));
      v24 = v74;
      v25 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFFCLL;
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    *(_OWORD *)(v25 + 32) = v24;
    *(_QWORD *)(v25 + 48) = v8;
    *(_QWORD *)(v25 + 56) = 0;
    *(_BYTE *)(v25 + 64) = 0;
    ++*(_QWORD *)(a1 + 24);
    v26 = *a2;
    if (*a2 == *v23)
    {
      v27 = 0;
    }
    else if (v26 == v23[1])
    {
      v27 = 1;
    }
    else
    {
      v21 = v26 == v23[2];
      v27 = 2;
      if (!v21)
        v27 = 3;
    }
    *(_QWORD *)(v25 + 16) = v23;
    v23[v27] = v25;
    v35 = *a2;
    *(_QWORD *)v25 = *a2;
    *(_QWORD *)(v35 + 16) = v25;
    **(_QWORD **)(*a2 + 32) = v25;
    v36 = *(_QWORD **)(*a2 + 8);
    v37 = *(_QWORD *)(*a2 + 32);
    v38 = *(_QWORD *)(*a2 + 48);
    v39 = *(_QWORD *)(a1 + 40);
    if (!v39)
    {
      sub_2394B6434((_QWORD *)(a1 + 8));
      v39 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)v39 & 0xFFFFFFFFFFFFFFFCLL;
    *(_OWORD *)v39 = 0u;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_QWORD *)(v39 + 32) = v37;
    *(_QWORD *)(v39 + 40) = v8;
    *(_QWORD *)(v39 + 48) = v38;
    *(_QWORD *)(v39 + 56) = 0;
    *(_BYTE *)(v39 + 64) = 0;
    ++*(_QWORD *)(a1 + 24);
    v40 = *a2;
    if (*a2 == *v36)
    {
      v41 = 0;
    }
    else if (v40 == v36[1])
    {
      v41 = 1;
    }
    else
    {
      v21 = v40 == v36[2];
      v41 = 2;
      if (!v21)
        v41 = 3;
    }
    *(_QWORD *)(v39 + 8) = v36;
    v36[v41] = v39;
    v48 = *a2;
    *(_QWORD *)v39 = *a2;
    *(_QWORD *)(v48 + 8) = v39;
    *(_QWORD *)(v39 + 16) = v25;
    *(_QWORD *)(v25 + 8) = v39;
    *(_QWORD *)(*a2 + 32) = v8;
    v44 = (_QWORD *)*a2;
    goto LABEL_86;
  }
  if (*(_DWORD *)a1 != 3)
    return;
  v9 = ((_BYTE)a3 + 1) & 3;
  v10 = ((a3 | 2) + (_BYTE)a3) & 3;
  v11 = *a2 + 32;
  v12 = *(_QWORD *)(v11 + 8 * a3);
  v13 = *(_QWORD *)(v11 + 8 * v9);
  v14 = *(_QWORD *)(v11 + 8 * v10);
  v15 = 6 - (v9 + a3 + v10);
  v16 = *(_QWORD **)(v11 + 8 * v15);
  v17 = *(_QWORD **)(*a2 + 8 * v9);
  v18 = *(_QWORD *)(a1 + 40);
  v72 = v16;
  v73 = v13;
  if (!v18)
  {
    v19 = *(_QWORD *)(v11 + 8 * (((a3 | 2) + (_BYTE)a3) & 3));
    sub_2394B6434((_QWORD *)(a1 + 8));
    v14 = v19;
    v16 = v72;
    v13 = v73;
    v18 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)(v18 + 32) = v12;
  *(_QWORD *)(v18 + 40) = v8;
  *(_QWORD *)(v18 + 48) = v14;
  *(_QWORD *)(v18 + 56) = v16;
  *(_BYTE *)(v18 + 64) = 0;
  ++*(_QWORD *)(a1 + 24);
  v20 = *a2;
  if (*a2 == *v17)
  {
    v22 = 0;
  }
  else if (v20 == v17[1])
  {
    v22 = 1;
  }
  else
  {
    v21 = v20 == v17[2];
    v22 = 2;
    if (!v21)
      v22 = 3;
  }
  *(_QWORD *)(v18 + 8) = v17;
  v17[v22] = v18;
  v28 = *a2;
  *(_QWORD *)(v18 + 24) = *a2;
  *(_QWORD *)(v28 + 8 * v9) = v18;
  v29 = a3;
  *v16 = v18;
  v30 = *(_QWORD **)(*a2 + 8 * v10);
  v31 = *(_QWORD *)(a1 + 40);
  if (!v31)
  {
    v32 = v14;
    sub_2394B6434((_QWORD *)(a1 + 8));
    v14 = v32;
    v16 = v72;
    v13 = v73;
    v31 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)v31 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_QWORD *)(v31 + 32) = v12;
  *(_QWORD *)(v31 + 40) = v13;
  *(_QWORD *)(v31 + 48) = v8;
  *(_QWORD *)(v31 + 56) = v16;
  *(_BYTE *)(v31 + 64) = 0;
  ++*(_QWORD *)(a1 + 24);
  v33 = *a2;
  if (*a2 == *v30)
  {
    v34 = 0;
  }
  else if (v33 == v30[1])
  {
    v34 = 1;
  }
  else
  {
    v21 = v33 == v30[2];
    v34 = 2;
    if (!v21)
      v34 = 3;
  }
  *(_QWORD *)(v31 + 16) = v30;
  v30[v34] = v31;
  v42 = *a2;
  *(_QWORD *)(v31 + 24) = *a2;
  *(_QWORD *)(v42 + 8 * v10) = v31;
  *(_QWORD *)(v18 + 16) = v31;
  *(_QWORD *)(v31 + 8) = v18;
  *(_QWORD *)(*a2 + 8 * v15 + 32) = v8;
  v43 = *a2;
  v44 = *(_QWORD **)(*a2 + 8 * v29);
  if (v43 == *v44)
  {
    v45 = 0;
    v46 = v44[4];
    if (v13 == v46)
      goto LABEL_57;
    goto LABEL_48;
  }
  if (v43 == v44[1])
  {
    v45 = 1;
    v46 = v44[4];
    if (v13 == v46)
      goto LABEL_57;
LABEL_48:
    if (v13 == v44[5])
    {
      v47 = 1;
      if (v14 == v46)
        goto LABEL_65;
    }
    else
    {
      if (v13 == v44[6])
        v47 = 2;
      else
        v47 = 3;
      if (v14 == v46)
        goto LABEL_65;
    }
LABEL_58:
    if (v14 == v44[5])
    {
      v49 = 1;
      v50 = v47;
      v51 = (_QWORD *)v44[v47];
      v61 = &v44[v45];
      v62 = v61[4];
      v54 = v61 + 4;
      v53 = v62;
      v56 = *(_QWORD *)(a1 + 40);
      if (v56)
        goto LABEL_67;
    }
    else
    {
      if (v14 == v44[6])
        v49 = 2;
      else
        v49 = 3;
      v50 = v47;
      v51 = (_QWORD *)v44[v47];
      v52 = &v44[v45];
      v55 = v52[4];
      v54 = v52 + 4;
      v53 = v55;
      v56 = *(_QWORD *)(a1 + 40);
      if (v56)
        goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v43 == v44[2])
    v45 = 2;
  else
    v45 = 3;
  v46 = v44[4];
  if (v13 != v46)
    goto LABEL_48;
LABEL_57:
  v47 = 0;
  if (v14 != v46)
    goto LABEL_58;
LABEL_65:
  v49 = 0;
  v50 = v47;
  v51 = (_QWORD *)v44[v47];
  v57 = &v44[v45];
  v58 = v57[4];
  v54 = v57 + 4;
  v53 = v58;
  v56 = *(_QWORD *)(a1 + 40);
  if (!v56)
  {
LABEL_66:
    v71 = v14;
    v59 = v49;
    v70 = v45;
    v69 = v50;
    sub_2394B6434((_QWORD *)(a1 + 8));
    v50 = v69;
    v45 = v70;
    v49 = v59;
    v14 = v71;
    v16 = v72;
    v13 = v73;
    v56 = *(_QWORD *)(a1 + 40);
  }
LABEL_67:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)v56 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)v56 = 0u;
  *(_OWORD *)(v56 + 16) = 0u;
  *(_QWORD *)(v56 + 32) = v53;
  *(_QWORD *)(v56 + 40) = v8;
  *(_QWORD *)(v56 + 48) = v16;
  *(_QWORD *)(v56 + 56) = v14;
  *(_BYTE *)(v56 + 64) = 0;
  ++*(_QWORD *)(a1 + 24);
  if (v44 == (_QWORD *)*v51)
  {
    v60 = 0;
  }
  else if (v44 == (_QWORD *)v51[1])
  {
    v60 = 1;
  }
  else
  {
    v60 = 2;
    if (v44 != (_QWORD *)v51[2])
      v60 = 3;
  }
  v63 = v45 + v47 + v49;
  *(_QWORD *)(v56 + 8) = v51;
  v51[v60] = v56;
  *(_QWORD *)(v56 + 16) = v44;
  v44[v50] = v56;
  *(_QWORD *)v56 = v18;
  *(_QWORD *)v18 = v56;
  v64 = v49;
  v65 = (_QWORD *)v44[v49];
  v66 = *v54;
  v67 = *(_QWORD *)(a1 + 40);
  if (!v67)
  {
    sub_2394B6434((_QWORD *)(a1 + 8));
    v16 = v72;
    v13 = v73;
    v67 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)v67 = 0u;
  *(_OWORD *)(v67 + 16) = 0u;
  *(_QWORD *)(v67 + 32) = v66;
  *(_QWORD *)(v67 + 40) = v13;
  *(_QWORD *)(v67 + 48) = v16;
  *(_QWORD *)(v67 + 56) = v8;
  *(_BYTE *)(v67 + 64) = 0;
  ++*(_QWORD *)(a1 + 24);
  if (v44 == (_QWORD *)*v65)
  {
    v68 = 0;
  }
  else if (v44 == (_QWORD *)v65[1])
  {
    v68 = 1;
  }
  else
  {
    v68 = 2;
    if (v44 != (_QWORD *)v65[2])
      v68 = 3;
  }
  *(_QWORD *)(v67 + 24) = v65;
  v65[v68] = v67;
  *(_QWORD *)(v67 + 16) = v44;
  v44[v64] = v67;
  *(_QWORD *)v67 = v31;
  *(_QWORD *)v31 = v67;
  *(_QWORD *)(v56 + 24) = v67;
  *(_QWORD *)(v67 + 8) = v56;
  v44[6 - v63 + 4] = v8;
LABEL_86:
  *(_QWORD *)v8 = v44;
}

void sub_2394CDD84(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v6 = a1[16];
  if (!v6)
  {
    sub_2394B61FC(a1 + 12);
    v6 = a1[16];
  }
  a1[16] = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFFCLL;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 0;
  ++a1[14];
  *a3 = v6;
  v7 = *(_QWORD *)(*a2 + 40);
  v8 = *(_QWORD *)(*a2 + 48);
  v9 = *(_QWORD *)(*a2 + 56);
  v11 = *(_QWORD **)(*a2 + 8);
  v10 = *(_QWORD **)(*a2 + 16);
  v12 = *(_QWORD **)(*a2 + 32);
  v30 = *(_QWORD **)(*a2 + 24);
  v13 = a1[5];
  if (!v13)
  {
    v14 = *(_QWORD **)(*a2 + 32);
    sub_2394B6434(a1 + 1);
    v12 = v14;
    v13 = a1[5];
  }
  a1[5] = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFFCLL;
  v15 = 0uLL;
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = v7;
  *(_QWORD *)(v13 + 48) = v8;
  *(_QWORD *)(v13 + 56) = v6;
  *(_BYTE *)(v13 + 64) = 0;
  ++a1[3];
  v16 = a1[5];
  if (!v16)
  {
    v17 = v12;
    sub_2394B6434(a1 + 1);
    v15 = 0uLL;
    v12 = v17;
    v16 = a1[5];
  }
  a1[5] = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)v16 = v15;
  *(_OWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 32) = v12;
  *(_QWORD *)(v16 + 40) = v7;
  *(_QWORD *)(v16 + 48) = v6;
  *(_QWORD *)(v16 + 56) = v9;
  *(_BYTE *)(v16 + 64) = 0;
  ++a1[3];
  v18 = a1[5];
  if (!v18)
  {
    v19 = v12;
    sub_2394B6434(a1 + 1);
    v12 = v19;
    v18 = a1[5];
  }
  a1[5] = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFFCLL;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)(v18 + 32) = v12;
  *(_QWORD *)(v18 + 40) = v6;
  *(_QWORD *)(v18 + 48) = v8;
  *(_QWORD *)(v18 + 56) = v9;
  *(_BYTE *)(v18 + 64) = 0;
  ++a1[3];
  v20 = *a2;
  *(_QWORD *)v13 = *a2;
  *(_QWORD *)(v20 + 24) = v13;
  v21 = *a2;
  *(_QWORD *)v16 = *a2;
  *(_QWORD *)(v21 + 16) = v16;
  v22 = *a2;
  *(_QWORD *)v18 = *a2;
  *(_QWORD *)(v22 + 8) = v18;
  *(_QWORD *)(v16 + 24) = v13;
  *(_QWORD *)(v13 + 16) = v16;
  *(_QWORD *)(v18 + 24) = v13;
  *(_QWORD *)(v13 + 8) = v18;
  *(_QWORD *)(v18 + 16) = v16;
  *(_QWORD *)(v16 + 8) = v18;
  v23 = *a2;
  if (*a2 == *v11)
  {
    v25 = 0;
  }
  else if (v23 == v11[1])
  {
    v25 = 1;
  }
  else
  {
    v24 = v23 == v11[2];
    v25 = 2;
    if (!v24)
      v25 = 3;
  }
  v11[v25] = v18;
  *(_QWORD *)(v18 + 8) = v11;
  v26 = *a2;
  if (*a2 == *v10)
  {
    *v10 = v16;
    *(_QWORD *)(v16 + 16) = v10;
    v28 = *a2;
    if (*a2 != *v30)
      goto LABEL_23;
    goto LABEL_28;
  }
  if (v26 == v10[1])
  {
    v10[1] = v16;
    *(_QWORD *)(v16 + 16) = v10;
    v28 = *a2;
    if (*a2 != *v30)
      goto LABEL_23;
LABEL_28:
    v29 = 0;
    goto LABEL_30;
  }
  v24 = v26 == v10[2];
  v27 = 2;
  if (!v24)
    v27 = 3;
  v10[v27] = v16;
  *(_QWORD *)(v16 + 16) = v10;
  v28 = *a2;
  if (*a2 == *v30)
    goto LABEL_28;
LABEL_23:
  if (v28 == v30[1])
  {
    v29 = 1;
  }
  else
  {
    v24 = v28 == v30[2];
    v29 = 2;
    if (!v24)
      v29 = 3;
  }
LABEL_30:
  v30[v29] = v13;
  *(_QWORD *)(v13 + 24) = v30;
  *(_QWORD *)(*a2 + 32) = v6;
  *v12 = v18;
  *(_QWORD *)v6 = *a2;
}

void sub_2394CE044(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10[3];
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t **v17;
  unint64_t **v18;
  char *v19;

  v17 = (unint64_t **)operator new(0x100uLL);
  v18 = v17;
  v19 = (char *)(v17 + 32);
  v15 = 0;
  v16 = 0;
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 == 2)
  {
    v11 = *a2;
    v10[0] = (uint64_t)&v15;
    v10[1] = (uint64_t)&v17;
    sub_2394DF7B4((uint64_t)v12, a1, &v11, a3, v10);
  }
  else if (v8 == 3)
  {
    v14 = *a2;
    v13[0] = (uint64_t)&v15;
    v13[1] = (uint64_t)&v17;
    sub_2394DF7B4((uint64_t)v12, a1, &v14, a3, v13);
  }
  v9 = v15;
  sub_2394C55FC((_QWORD *)(a1 + 8), v17, v18, &v9, v16, a4);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_2394CE144(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2394CE168(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10[3];
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t **v17;
  unint64_t **v18;
  char *v19;

  v17 = (unint64_t **)operator new(0x100uLL);
  v18 = v17;
  v19 = (char *)(v17 + 32);
  v15 = 0;
  v16 = 0;
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 == 2)
  {
    v11 = *a2;
    v10[0] = (uint64_t)&v15;
    v10[1] = (uint64_t)&v17;
    sub_2394DFB78((uint64_t)v12, a1, &v11, a3, v10);
  }
  else if (v8 == 3)
  {
    v14 = *a2;
    v13[0] = (uint64_t)&v15;
    v13[1] = (uint64_t)&v17;
    sub_2394DFB78((uint64_t)v12, a1, &v14, a3, v13);
  }
  v9 = v15;
  sub_2394C55FC((_QWORD *)(a1 + 8), v17, v18, &v9, v16, a4);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
}

void sub_2394CE268(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(_QWORD *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394CE28C(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, _DWORD *a6, int *a7, int *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t result;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43[8];

  v15 = *((_QWORD *)a3 + 2);
  v41 = *a3;
  v42 = v15;
  v16 = *((_QWORD *)a4 + 2);
  v39 = *a4;
  v40 = v16;
  v17 = *((_QWORD *)a5 + 2);
  v37 = *a5;
  v38 = v17;
  v18 = sub_2394C2060((uint64_t)v43, (double *)&v41, (double *)&v39, (double *)&v37);
  v19 = *((_QWORD *)a3 + 2);
  v41 = *a3;
  v42 = v19;
  v20 = *((_QWORD *)a4 + 2);
  v39 = *a4;
  v40 = v20;
  v21 = *((_QWORD *)a2 + 2);
  v37 = *a2;
  v38 = v21;
  v22 = sub_2394C2060((uint64_t)v43, (double *)&v41, (double *)&v39, (double *)&v37);
  if (!(v22 + v18))
    goto LABEL_4;
  v23 = v22;
  v24 = *((_QWORD *)a4 + 2);
  v41 = *a4;
  v42 = v24;
  v25 = *((_QWORD *)a5 + 2);
  v39 = *a5;
  v40 = v25;
  v26 = *((_QWORD *)a2 + 2);
  v37 = *a2;
  v38 = v26;
  v27 = sub_2394C2060((uint64_t)v43, (double *)&v41, (double *)&v39, (double *)&v37);
  if (v27 == -v18)
    goto LABEL_4;
  v28 = v27;
  v29 = *((_QWORD *)a5 + 2);
  v41 = *a5;
  v42 = v29;
  v30 = *((_QWORD *)a3 + 2);
  v39 = *a3;
  v40 = v30;
  v31 = *((_QWORD *)a2 + 2);
  v37 = *a2;
  v38 = v31;
  v32 = sub_2394C2060((uint64_t)v43, (double *)&v41, (double *)&v39, (double *)&v37);
  if (v32 == -v18)
  {
LABEL_4:
    *a6 = 4;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v34 = v23 == 0;
    if (!v28)
      ++v34;
    if (!v32)
      ++v34;
    if (v34 == 2)
    {
      result = 0;
      *a6 = 0;
      v35 = v28 != v18;
      if (v23 == v18)
        v35 = 2;
      *a7 = v35;
    }
    else if (v34 == 1)
    {
      result = 0;
      *a6 = 1;
      if (v28)
        v34 = 2;
      if (!v23)
        v34 = 0;
      *a7 = v34;
      if (v34 == 2)
        v36 = 0;
      else
        v36 = v34 + 1;
      *a8 = v36;
    }
    else if (v34)
    {
      return 0;
    }
    else
    {
      *a6 = 2;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2394CE4C0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, int *a5, int *a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int *v31;
  int *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int16 v42;

  v9 = *(_QWORD **)a3;
  v10 = *(_QWORD *)(a1 + 200);
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  if (v11 == v10)
  {
    v31 = a6;
    v32 = a5;
    v16 = 0;
  }
  else
  {
    v12 = v9[5];
    if (v12 == v10)
    {
      v31 = a6;
      v32 = a5;
      v16 = 1;
    }
    else
    {
      v13 = v9[6];
      if (v13 != v10)
      {
        v14 = v9[7];
        if (v14 != v10)
          return sub_2394CE73C(a1, (__int128 *)a2, (__int128 *)(v11 + 16), (__int128 *)(v12 + 16), (__int128 *)(v13 + 16), (__int128 *)(v14 + 16), a4, a5, a6);
      }
      v31 = a6;
      v32 = a5;
      if (v10 == v9[6])
        v16 = 2;
      else
        v16 = 3;
    }
  }
  v17 = ((_BYTE)v16 + 1) & 3;
  v18 = v9 + 4;
  v19 = v18[((_BYTE)v16 + 1) & 3];
  v20 = v18[((_BYTE)v16 + 2) & 3];
  v21 = v18[(v16 - 1) & 3];
  v42 = 0;
  v41 = 0;
  if ((v16 & 1) != 0)
  {
    v27 = *(_QWORD *)(v21 + 32);
    v39 = *(_OWORD *)(v21 + 16);
    v40 = v27;
    v28 = *(_QWORD *)(a2 + 16);
    v37 = *(_OWORD *)a2;
    v38 = v28;
    v29 = *(_QWORD *)(v19 + 32);
    v35 = *(_OWORD *)(v19 + 16);
    v36 = v29;
    v25 = *(_QWORD *)(v20 + 32);
    v26 = *(_OWORD *)(v20 + 16);
  }
  else
  {
    v22 = *(_QWORD *)(a2 + 16);
    v39 = *(_OWORD *)a2;
    v40 = v22;
    v23 = *(_QWORD *)(v19 + 32);
    v37 = *(_OWORD *)(v19 + 16);
    v38 = v23;
    v24 = *(_QWORD *)(v20 + 32);
    v35 = *(_OWORD *)(v20 + 16);
    v36 = v24;
    v25 = *(_QWORD *)(v21 + 32);
    v26 = *(_OWORD *)(v21 + 16);
  }
  v33 = v26;
  v34 = v25;
  result = sub_2394C3C18((uint64_t)&v41, (double *)&v39, (double *)&v37, (double *)&v35, (double *)&v33);
  if ((_DWORD)result != -1)
  {
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 1)
      {
        *a4 = 3;
        return result;
      }
      return 0;
    }
    LODWORD(v39) = 0;
    LODWORD(v37) = 0;
    result = sub_2394CE28C(a1, (__int128 *)a2, (__int128 *)(v19 + 16), (__int128 *)(v20 + 16), (__int128 *)(v21 + 16), a4, (int *)&v39, (int *)&v37);
    if ((_DWORD)result == -1)
      return result;
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 1)
      {
        result = 0;
        *v32 = v16;
        return result;
      }
      return 0;
    }
    v30 = ((_BYTE)v16 + 1) & 3;
    if ((_DWORD)v39)
    {
      v30 = ((_BYTE)v16 + 2) & 3;
      if ((_DWORD)v39 != 1)
        v30 = (v16 - 1) & 3;
    }
    *v32 = v30;
    if (*a4 != 1)
      return 0;
    if ((_DWORD)v37)
    {
      v17 = ((_BYTE)v16 + 2) & 3;
      if ((_DWORD)v37 != 1)
        v17 = (v16 - 1) & 3;
    }
    result = 0;
    *v31 = v17;
  }
  return result;
}

uint64_t sub_2394CE73C(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, _DWORD *a7, int *a8, int *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t result;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  __int16 v55;

  v55 = 0;
  v54 = 0;
  v16 = *((_QWORD *)a2 + 2);
  v52 = *a2;
  v53 = v16;
  v17 = *((_QWORD *)a4 + 2);
  v50 = *a4;
  v51 = v17;
  v18 = *((_QWORD *)a5 + 2);
  v48 = *a5;
  v49 = v18;
  v19 = *((_QWORD *)a6 + 2);
  v46 = *a6;
  v47 = v19;
  v20 = sub_2394C3C18((uint64_t)&v54, (double *)&v52, (double *)&v50, (double *)&v48, (double *)&v46);
  if (v20 == -1)
    goto LABEL_13;
  v21 = v20;
  v55 = 0;
  v54 = 0;
  v22 = *((_QWORD *)a3 + 2);
  v52 = *a3;
  v53 = v22;
  v23 = *((_QWORD *)a2 + 2);
  v50 = *a2;
  v51 = v23;
  v24 = *((_QWORD *)a5 + 2);
  v48 = *a5;
  v49 = v24;
  v25 = *((_QWORD *)a6 + 2);
  v46 = *a6;
  v47 = v25;
  v26 = sub_2394C3C18((uint64_t)&v54, (double *)&v52, (double *)&v50, (double *)&v48, (double *)&v46);
  if (v26 == -1)
    goto LABEL_13;
  v27 = v26;
  v55 = 0;
  v54 = 0;
  v28 = *((_QWORD *)a3 + 2);
  v52 = *a3;
  v53 = v28;
  v29 = *((_QWORD *)a4 + 2);
  v50 = *a4;
  v51 = v29;
  v30 = *((_QWORD *)a2 + 2);
  v48 = *a2;
  v49 = v30;
  v31 = *((_QWORD *)a6 + 2);
  v46 = *a6;
  v47 = v31;
  v32 = sub_2394C3C18((uint64_t)&v54, (double *)&v52, (double *)&v50, (double *)&v48, (double *)&v46);
  if (v32 == -1)
    goto LABEL_13;
  v33 = v32;
  v55 = 0;
  v54 = 0;
  v34 = *((_QWORD *)a3 + 2);
  v52 = *a3;
  v53 = v34;
  v35 = *((_QWORD *)a4 + 2);
  v50 = *a4;
  v51 = v35;
  v36 = *((_QWORD *)a5 + 2);
  v48 = *a5;
  v49 = v36;
  v37 = *((_QWORD *)a2 + 2);
  v46 = *a2;
  v47 = v37;
  v38 = sub_2394C3C18((uint64_t)&v54, (double *)&v52, (double *)&v50, (double *)&v48, (double *)&v46);
  if (v38 == -1)
  {
LABEL_13:
    *a7 = 4;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v39 = v38;
    v40 = v21 == 0;
    if (!v27)
      ++v40;
    if (!v33)
      ++v40;
    if (!v38)
      ++v40;
    switch(v40)
    {
      case 0:
        *a7 = 3;
        result = 1;
        break;
      case 1:
        result = 0;
        *a7 = 2;
        if (v33)
          v45 = 3;
        else
          v45 = 2;
        if (!v27)
          v45 = 1;
        if (!v21)
          v45 = 0;
        goto LABEL_43;
      case 2:
        result = 0;
        *a7 = 1;
        if (v27 == 1)
          v42 = 1;
        else
          v42 = 2;
        if (v21 == 1)
          v42 = 0;
        *a8 = v42;
        if (v33 == 1)
          v43 = 2;
        else
          v43 = 1;
        if (v39 == 1)
          v44 = 3;
        else
          v44 = v43;
        *a9 = v44;
        break;
      case 3:
        v45 = 0;
        *a7 = 0;
        if (v21 != 1)
        {
          if (v27 == 1)
          {
            v45 = 1;
          }
          else if (v33 == 1)
          {
            v45 = 2;
          }
          else
          {
            v45 = 3;
          }
        }
        result = 0;
LABEL_43:
        *a8 = v45;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t *sub_2394CEA4C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2394CED3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394CED50@<X0>(uint64_t result@<X0>, double *a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, _BYTE *a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double v10;
  double v11;
  int v12;
  _QWORD *v13;
  double v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  _QWORD *v19;
  uint64_t v20;
  double *v21;
  _QWORD *v22;
  double v23;
  double v24;
  uint64_t v25;
  double *v26;
  _QWORD *v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;

  if (a5)
    *a5 = 1;
  v6 = (_QWORD *)*a3;
  if (*(int *)(result + 8) < 3)
  {
LABEL_4:
    *a6 = v6;
    return result;
  }
  if (v6)
  {
    v7 = *(_QWORD *)(result + 200);
    if (v7 != v6[4])
      goto LABEL_7;
LABEL_12:
    v8 = 0;
    goto LABEL_15;
  }
  v6 = **(_QWORD ***)(result + 200);
  *a3 = v6;
  v7 = *(_QWORD *)(result + 200);
  if (v7 == v6[4])
    goto LABEL_12;
LABEL_7:
  if (v7 == v6[5])
  {
    v8 = 1;
    goto LABEL_15;
  }
  if (v7 == v6[6])
  {
    v8 = 2;
    goto LABEL_15;
  }
  if (v7 == v6[7])
  {
    v8 = 3;
LABEL_15:
    v6 = (_QWORD *)v6[v8];
    *a3 = v6;
  }
  v9 = 0;
  v10 = *a2;
  v11 = a2[1];
  v12 = a4 - 1;
  v13 = v6;
  v14 = a2[2];
  while (1)
  {
    v15 = (double *)v13[5];
    v16 = (double *)(v13[4] + 16);
    v18 = (double *)v13[6];
    v17 = (double *)v13[7];
    v19 = (_QWORD *)*v13;
    if (v9 == (_QWORD *)*v13
      || ((v15[2] - v10) * (v18[3] - v11) - (v18[2] - v10) * (v15[3] - v11)) * (v17[4] - v14)
       - ((v15[2] - v10) * (v17[3] - v11) - (v17[2] - v10) * (v15[3] - v11)) * (v18[4] - v14)
       + ((v18[2] - v10) * (v17[3] - v11) - (v17[2] - v10) * (v18[3] - v11)) * (v15[4] - v14) >= 0.0)
    {
      v19 = v13;
      v13 = v9;
      v21 = v15 + 2;
      v22 = (_QWORD *)v19[1];
      if (v13 == v22)
        goto LABEL_36;
    }
    else
    {
      v20 = *(_QWORD *)(result + 200);
      if (v19[4] == v20 || v19[5] == v20 || v19[6] == v20 || v19[7] == v20)
      {
        *a6 = v19;
        return result;
      }
      v16 = a2;
      v6 = (_QWORD *)*v13;
      if (v12)
        goto LABEL_17;
      v21 = v15 + 2;
      v22 = (_QWORD *)v19[1];
      if (v13 == v22)
        goto LABEL_36;
    }
    v23 = v16[1];
    v24 = v16[2];
    if (((v10 - *v16) * (v18[3] - v23) - (v18[2] - *v16) * (v11 - v23)) * (v17[4] - v24)
       - ((v10 - *v16) * (v17[3] - v23) - (v17[2] - *v16) * (v11 - v23)) * (v18[4] - v24)
       + ((v18[2] - *v16) * (v17[3] - v23) - (v17[2] - *v16) * (v18[3] - v23)) * (v14 - v24) < 0.0)
      break;
LABEL_36:
    v22 = v19;
    v19 = v13;
    v26 = v18 + 2;
    v27 = (_QWORD *)v22[2];
    if (v13 == v27)
      goto LABEL_44;
LABEL_37:
    v28 = v16[1];
    v29 = v16[2];
    if (((*v21 - *v16) * (v11 - v28) - (v10 - *v16) * (v21[1] - v28)) * (v17[4] - v29)
       - ((*v21 - *v16) * (v17[3] - v28) - (v17[2] - *v16) * (v21[1] - v28)) * (v14 - v29)
       + ((v10 - *v16) * (v17[3] - v28) - (v17[2] - *v16) * (v11 - v28)) * (v21[2] - v29) >= 0.0)
      goto LABEL_44;
    v30 = *(_QWORD *)(result + 200);
    if (v27[4] == v30 || v27[5] == v30 || v27[6] == v30 || v27[7] == v30)
    {
LABEL_53:
      *a6 = v27;
      return result;
    }
    v26 = a2;
    v6 = v27;
    v13 = v22;
    if (!v12)
      goto LABEL_45;
LABEL_17:
    v9 = v13;
    --v12;
    v13 = v6;
  }
  v25 = *(_QWORD *)(result + 200);
  if (v22[4] != v25 && v22[5] != v25 && v22[6] != v25 && v22[7] != v25)
  {
    v21 = a2;
    v6 = v22;
    v13 = v19;
    if (v12)
      goto LABEL_17;
    v26 = v18 + 2;
    v27 = (_QWORD *)v22[2];
    if (v19 == v27)
    {
LABEL_44:
      v27 = v22;
      v22 = v19;
LABEL_45:
      v6 = (_QWORD *)v27[3];
      if (v22 == v6)
        goto LABEL_53;
      v31 = v16[1];
      v32 = v16[2];
      if (((*v21 - *v16) * (v26[1] - v31) - (*v26 - *v16) * (v21[1] - v31)) * (v14 - v32)
         - ((*v21 - *v16) * (v11 - v31) - (v10 - *v16) * (v21[1] - v31)) * (v26[2] - v32)
         + ((*v26 - *v16) * (v11 - v31) - (v10 - *v16) * (v26[1] - v31)) * (v21[2] - v32) >= 0.0)
        goto LABEL_53;
      v33 = *(_QWORD *)(result + 200);
      if (v6[4] == v33)
        goto LABEL_4;
      if (v6[5] == v33)
        goto LABEL_4;
      if (v6[6] == v33)
        goto LABEL_4;
      if (v6[7] == v33)
        goto LABEL_4;
      v13 = v27;
      if (!v12)
        goto LABEL_4;
      goto LABEL_17;
    }
    goto LABEL_37;
  }
  *a6 = v22;
  return result;
}

uint64_t sub_2394CF158@<X0>(uint64_t result@<X0>, double *a2@<X1>, _DWORD *a3@<X2>, int *a4@<X3>, int *a5@<X4>, _QWORD *a6@<X5>, _BYTE *a7@<X6>, _QWORD *a8@<X8>)
{
  int *v8;
  _DWORD *v10;
  double *v11;
  uint64_t v12;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  double v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  unsigned int v51;
  _QWORD *v52;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  double *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int v111;
  int *v112;
  int v113;
  uint64_t v114;
  int16x4_t v115;
  int16x4_t v116;
  int v117;
  int v118;
  __int32 v119;
  int v120;
  int16x4_t v121;
  int v122;
  int v123;
  int v124;
  int *v126;
  _DWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  int v136;
  __int16 v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  int32x4_t v147;
  uint64_t v148;

  v8 = a5;
  v10 = a3;
  v11 = a2;
  v12 = result;
  v148 = *MEMORY[0x24BDAC8D0];
  if (a7)
    *a7 = 1;
  v14 = *(_DWORD *)(result + 8);
  if (v14 >= 1)
  {
    v15 = (_QWORD *)*a6;
    if (*a6)
    {
      v16 = *(_QWORD *)(result + 200);
      if (v16 != v15[4])
        goto LABEL_6;
    }
    else
    {
      v15 = **(_QWORD ***)(result + 200);
      *a6 = v15;
      v16 = *(_QWORD *)(result + 200);
      if (v16 != v15[4])
      {
LABEL_6:
        if (v16 == v15[5])
        {
          v17 = 1;
        }
        else if (v16 == v15[6])
        {
          v17 = 2;
        }
        else
        {
          if (v16 != v15[7])
          {
LABEL_15:
            v14 = *(_DWORD *)(result + 8);
            goto LABEL_16;
          }
          v17 = 3;
        }
LABEL_14:
        *a6 = v15[v17];
        goto LABEL_15;
      }
    }
    v17 = 0;
    goto LABEL_14;
  }
LABEL_16:
  v133 = result;
  switch(v14)
  {
    case -1:
      *a3 = 5;
      goto LABEL_18;
    case 0:
      v18 = *(_QWORD *)(result + 152);
      if (*(_QWORD *)(result + 120) == 1)
        goto LABEL_41;
      v19 = *(_QWORD *)(result + 144);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 48);
        v19 += 48;
        if ((v20 & 3) == 2)
        {
          do
          {
            while (1)
            {
              v22 = *(_QWORD *)(v19 + 48);
              v19 += 48;
              v21 = v22;
              v23 = v22 & 3;
              if (v23 != 1)
                break;
              v19 = v21 & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v23)
              v24 = v23 == 3;
            else
              v24 = 1;
          }
          while (!v24);
        }
      }
      if (v19 == v18)
        goto LABEL_41;
      while (v19 == *(_QWORD *)(result + 200))
      {
        v19 = *(_QWORD *)(result + 200);
        do
        {
          while (1)
          {
            v26 = *(_QWORD *)(v19 + 48);
            v19 += 48;
            v25 = v26;
            v27 = v26 & 3;
            if (v27 != 1)
              break;
            v19 = v25 & 0xFFFFFFFFFFFFFFFCLL;
          }
          if (v27)
            v28 = v27 == 3;
          else
            v28 = 1;
        }
        while (!v28);
        if (v19 == v18)
        {
LABEL_41:
          v19 = *(_QWORD *)(result + 152);
          break;
        }
      }
      v29 = *(double *)(v19 + 16);
      v30 = *a2 > v29;
      if (*a2 < v29)
        v30 = -1;
      if (!v30)
      {
        v31 = *(double *)(v19 + 24);
        v32 = a2[1];
        v30 = v32 > v31;
        if (v32 < v31)
          v30 = -1;
        if (!v30)
        {
          v33 = a2[2];
          v34 = *(double *)(v19 + 32);
          v30 = v33 > v34;
          if (v33 < v34)
            goto LABEL_50;
        }
      }
      if (!v30)
      {
        *a3 = 0;
        *a4 = 0;
      }
      else
      {
LABEL_50:
        *a3 = 5;
      }
      *a8 = *(_QWORD *)v19;
      return result;
    case 1:
      v35 = (_QWORD *)*a6;
      *a8 = *a6;
      v36 = v35[4];
      v37 = v35[5];
      v38 = *((_QWORD *)a2 + 2);
      v144 = *(_OWORD *)a2;
      v145 = v38;
      v39 = *(_QWORD *)(v36 + 32);
      v142 = *(_OWORD *)(v36 + 16);
      v143 = v39;
      v40 = *(_QWORD *)(v37 + 32);
      v140 = *(_OWORD *)(v37 + 16);
      v141 = v40;
      result = sub_2394C2060((uint64_t)&v138, (double *)&v144, (double *)&v142, (double *)&v140);
      if ((_DWORD)result)
      {
        *v10 = 5;
      }
      else
      {
        for (i = *(_QWORD *)(v12 + 200); v35[4] != i; i = *(_QWORD *)(v12 + 200))
        {
          v87 = v35[5];
          if (v87 == i || v35[6] == i || v35[7] == i)
            break;
          result = sub_2394CCD78(v12, (double *)(v35[4] + 16), v11, (double *)(v87 + 16));
          switch((int)result)
          {
            case 0:
              ++v35;
              goto LABEL_81;
            case 1:
              *v10 = 0;
              *a4 = 0;
              return result;
            case 2:
              v122 = 1;
              *v10 = 1;
              *a4 = 0;
              goto LABEL_142;
            case 3:
              *v10 = 0;
              *a4 = 1;
              return result;
            case 4:
LABEL_81:
              v35 = (_QWORD *)*v35;
              *a8 = v35;
              break;
            default:
              continue;
          }
        }
        *v10 = 4;
      }
      return result;
    case 2:
      v41 = (_QWORD *)*a6;
      *a8 = *a6;
      v42 = v41[4];
      v43 = v41[5];
      v44 = v41[6];
      WORD2(v134) = 0;
      LODWORD(v134) = 0;
      v45 = *(_QWORD *)(v42 + 32);
      v144 = *(_OWORD *)(v42 + 16);
      v145 = v45;
      v46 = *(_QWORD *)(v43 + 32);
      v142 = *(_OWORD *)(v43 + 16);
      v143 = v46;
      v47 = *(_QWORD *)(v44 + 32);
      v140 = *(_OWORD *)(v44 + 16);
      v141 = v47;
      v48 = *((_QWORD *)a2 + 2);
      v138 = *(_OWORD *)a2;
      v139 = v48;
      result = sub_2394C3C18((uint64_t)&v134, (double *)&v144, (double *)&v142, (double *)&v140, (double *)&v138);
      if ((_DWORD)result)
      {
        *v10 = 5;
        v49 = 3;
        goto LABEL_55;
      }
      v88 = *(_QWORD *)(v12 + 200);
      if (v88 == v41[4])
      {
LABEL_106:
        v114 = 0;
        goto LABEL_141;
      }
      v89 = 78606;
      v128 = v10;
      v130 = a8;
      v126 = v8;
      while (1)
      {
        if (v88 == v41[5])
        {
          v114 = 1;
          goto LABEL_141;
        }
        if (v88 == v41[6])
        {
          v114 = 2;
          goto LABEL_141;
        }
        if (v88 == v41[7])
        {
          v114 = 3;
LABEL_141:
          *v10 = 4;
          *a4 = dword_239EC6C6C[v114];
          v122 = dword_239EC6C60[v114];
LABEL_142:
          *v8 = v122;
          return result;
        }
        v91 = 0x5DEECE66DLL * v89 + 11;
        v92 = v11;
        v93 = v41[(((v91 >> 17) & 0x7FFFFFFF) - 3 * ((1431655766 * ((v91 >> 17) & 0x7FFFFFFF)) >> 32)) + 4];
        v94 = (((v91 >> 17) & 0x7FFFFFFF) - 3 * ((1431655766 * ((v91 >> 17) & 0x7FFFFFFF)) >> 32));
        v95 = dword_239EC6C60[v94];
        v96 = v41[v95 + 4];
        v90 = dword_239EC6C6C[v94];
        v97 = v41[v90 + 4];
        v98 = *(_QWORD *)(v93 + 32);
        v144 = *(_OWORD *)(v93 + 16);
        v145 = v98;
        v99 = *(_QWORD *)(v96 + 32);
        v142 = *(_OWORD *)(v96 + 16);
        v143 = v99;
        v100 = *((_QWORD *)v92 + 2);
        v140 = *(_OWORD *)v92;
        v141 = v100;
        result = sub_2394C2060((uint64_t)&v138, (double *)&v144, (double *)&v142, (double *)&v140);
        if ((_DWORD)result == -1)
          goto LABEL_91;
        v101 = result;
        v102 = *(_QWORD *)(v96 + 32);
        v144 = *(_OWORD *)(v96 + 16);
        v145 = v102;
        v103 = *(_QWORD *)(v97 + 32);
        v142 = *(_OWORD *)(v97 + 16);
        v143 = v103;
        v104 = *((_QWORD *)v92 + 2);
        v140 = *(_OWORD *)v92;
        v141 = v104;
        result = sub_2394C2060((uint64_t)&v138, (double *)&v144, (double *)&v142, (double *)&v140);
        if ((_DWORD)result == -1)
          break;
        v105 = result;
        v106 = *(_QWORD *)(v97 + 32);
        v144 = *(_OWORD *)(v97 + 16);
        v145 = v106;
        v107 = *(_QWORD *)(v93 + 32);
        v142 = *(_OWORD *)(v93 + 16);
        v143 = v107;
        v108 = *((_QWORD *)v92 + 2);
        v140 = *(_OWORD *)v92;
        v141 = v108;
        result = sub_2394C2060((uint64_t)&v138, (double *)&v144, (double *)&v142, (double *)&v140);
        if ((_DWORD)result != -1)
        {
          v123 = v101 == 0;
          if (!v105)
            ++v123;
          if (!(_DWORD)result)
            ++v123;
          if (v123 != 2)
          {
            if (v123 == 1)
            {
              *v128 = 1;
              if (v105)
                v124 = v90;
              else
                v124 = v95;
              if (!v101)
                v124 = ((v91 >> 17) & 0x7FFFFFFF) - 3 * ((1431655766 * ((v91 >> 17) & 0x7FFFFFFF)) >> 32);
              *a4 = v124;
              *v126 = dword_239EC6C60[v124];
            }
            else if (!v123)
            {
              *v128 = 2;
              *a4 = 3;
            }
            return result;
          }
          *v128 = 0;
          if (v105)
            v49 = ((v91 >> 17) & 0x7FFFFFFF) - 3 * ((1431655766 * ((v91 >> 17) & 0x7FFFFFFF)) >> 32);
          else
            v49 = v95;
          if (v101)
            v49 = v90;
LABEL_55:
          *a4 = v49;
          return result;
        }
        v11 = v92;
        v90 = v95;
LABEL_92:
        v89 = v91 & 0xFFFFFFFFFFFFLL;
        v41 = (_QWORD *)v41[v90];
        v10 = v128;
        *v130 = v41;
        v88 = *(_QWORD *)(v133 + 200);
        v8 = v126;
        if (v88 == v41[4])
          goto LABEL_106;
      }
      v90 = (((v91 >> 17) & 0x7FFFFFFF) - 3 * ((1431655766 * ((v91 >> 17) & 0x7FFFFFFF)) >> 32));
LABEL_91:
      v11 = v92;
      goto LABEL_92;
    case 3:
      v129 = a8;
      v50 = 0;
      v51 = 78606;
      v52 = (_QWORD *)*a6;
      break;
    default:
LABEL_18:
      *a8 = 0;
      return result;
  }
  do
  {
    v55 = v52[5] + 16;
    *(_QWORD *)&v144 = v52[4] + 16;
    *((_QWORD *)&v144 + 1) = v55;
    v56 = v52[7] + 16;
    v145 = v52[6] + 16;
    v146 = v56;
    v51 = 11 - 554899859 * v51;
    v57 = (v51 >> 17) & 3;
    v58 = (_QWORD *)v52[v57];
    if (v50 == v58)
    {
      *(_DWORD *)((unint64_t)&v147 | (4 * v57)) = 1;
    }
    else
    {
      v59 = *((_QWORD *)&v144 + v57);
      *((_QWORD *)&v144 + v57) = v11;
      v137 = 0;
      v136 = 0;
      v60 = *(_QWORD *)(v144 + 16);
      v142 = *(_OWORD *)v144;
      v143 = v60;
      v61 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 16);
      v140 = **((_OWORD **)&v144 + 1);
      v141 = v61;
      v62 = *(_QWORD *)(v145 + 16);
      v138 = *(_OWORD *)v145;
      v139 = v62;
      v63 = *(_QWORD *)(v146 + 16);
      v134 = *(_OWORD *)v146;
      v135 = v63;
      result = sub_2394C3C18((uint64_t)&v136, (double *)&v142, (double *)&v140, (double *)&v138, (double *)&v134);
      *(_DWORD *)((unint64_t)&v147 | (4 * v57)) = result;
      if ((_DWORD)result == -1)
        goto LABEL_74;
      *((_QWORD *)&v144 + v57) = v59;
    }
    v64 = v51 >> 17;
    v65 = ((v51 >> 17) + 1) & 3;
    v58 = (_QWORD *)v52[v65];
    v66 = (_DWORD *)((unint64_t)&v147 | (4 * v65));
    if (v50 == v58)
    {
      *v66 = 1;
      v72 = (v64 + 2) & 3;
      v58 = (_QWORD *)v52[v72];
      v73 = (_DWORD *)((unint64_t)&v147 | (4 * v72));
      if (v50 != v58)
        goto LABEL_66;
    }
    else
    {
      v67 = *((_QWORD *)&v144 + v65);
      *((_QWORD *)&v144 + v65) = a2;
      v137 = 0;
      v136 = 0;
      v68 = *(_QWORD *)(v144 + 16);
      v142 = *(_OWORD *)v144;
      v143 = v68;
      v69 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 16);
      v140 = **((_OWORD **)&v144 + 1);
      v141 = v69;
      v70 = *(_QWORD *)(v145 + 16);
      v138 = *(_OWORD *)v145;
      v139 = v70;
      v71 = *(_QWORD *)(v146 + 16);
      v134 = *(_OWORD *)v146;
      v135 = v71;
      result = sub_2394C3C18((uint64_t)&v136, (double *)&v142, (double *)&v140, (double *)&v138, (double *)&v134);
      *v66 = result;
      if ((_DWORD)result == -1)
        goto LABEL_69;
      *((_QWORD *)&v144 + v65) = v67;
      v72 = (v64 + 2) & 3;
      v58 = (_QWORD *)v52[v72];
      v73 = (_DWORD *)((unint64_t)&v147 | (4 * v72));
      if (v50 != v58)
      {
LABEL_66:
        v74 = *((_QWORD *)&v144 + v72);
        *((_QWORD *)&v144 + v72) = a2;
        v137 = 0;
        v136 = 0;
        v75 = *(_QWORD *)(v144 + 16);
        v142 = *(_OWORD *)v144;
        v143 = v75;
        v76 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 16);
        v140 = **((_OWORD **)&v144 + 1);
        v141 = v76;
        v77 = *(_QWORD *)(v145 + 16);
        v138 = *(_OWORD *)v145;
        v139 = v77;
        v78 = *(_QWORD *)(v146 + 16);
        v134 = *(_OWORD *)v146;
        v135 = v78;
        result = sub_2394C3C18((uint64_t)&v136, (double *)&v142, (double *)&v140, (double *)&v138, (double *)&v134);
        *v73 = result;
        if ((_DWORD)result == -1)
        {
LABEL_69:
          v11 = a2;
          goto LABEL_74;
        }
        *((_QWORD *)&v144 + v72) = v74;
        v79 = (v64 - 1) & 3;
        v58 = (_QWORD *)v52[v79];
        v11 = a2;
        if (v50 == v58)
          goto LABEL_57;
        goto LABEL_72;
      }
    }
    *v73 = 1;
    v79 = (v64 - 1) & 3;
    v58 = (_QWORD *)v52[v79];
    v11 = a2;
    if (v50 == v58)
    {
LABEL_57:
      v54 = 1;
      *(_DWORD *)((unint64_t)&v147 | (4 * v79)) = 1;
      continue;
    }
LABEL_72:
    v80 = *((_QWORD *)&v144 + v79);
    *((_QWORD *)&v144 + v79) = v11;
    v137 = 0;
    v136 = 0;
    v81 = *(_QWORD *)(v144 + 16);
    v142 = *(_OWORD *)v144;
    v143 = v81;
    v82 = *(_QWORD *)(*((_QWORD *)&v144 + 1) + 16);
    v140 = **((_OWORD **)&v144 + 1);
    v141 = v82;
    v83 = *(_QWORD *)(v145 + 16);
    v138 = *(_OWORD *)v145;
    v139 = v83;
    v84 = *(_QWORD *)(v146 + 16);
    v134 = *(_OWORD *)v146;
    v135 = v84;
    result = sub_2394C3C18((uint64_t)&v136, (double *)&v142, (double *)&v140, (double *)&v138, (double *)&v134);
    *(_DWORD *)((unint64_t)&v147 | (4 * v79)) = result;
    if ((_DWORD)result != -1)
    {
      *((_QWORD *)&v144 + v79) = v80;
      v54 = 1;
      continue;
    }
LABEL_74:
    v85 = *(_QWORD *)(v133 + 200);
    if (v85 == v58[4])
    {
      v113 = 0;
LABEL_110:
      *a4 = v113;
      *a3 = 4;
      *v129 = v58;
      return result;
    }
    if (v85 == v58[5])
    {
      v113 = 1;
      goto LABEL_110;
    }
    if (v85 == v58[6])
    {
      v113 = 2;
      goto LABEL_110;
    }
    if (v85 == v58[7])
    {
      v113 = 3;
      goto LABEL_110;
    }
    v54 = 0;
    v50 = v52;
    v52 = v58;
  }
  while ((v54 & 1) == 0);
  v109 = vceqzq_s32(v147);
  v110 = (int32x4_t)vandq_s8((int8x16_t)v109, (int8x16_t)xmmword_239EC6A60);
  v110.i32[0] = vaddvq_s32(v110) & 0xF;
  *(int8x8_t *)v110.i8 = vcnt_s8(*(int8x8_t *)v110.i8);
  v110.i16[0] = vaddlv_u8(*(uint8x8_t *)v110.i8);
  switch(v110.i32[0])
  {
    case 0:
      v111 = 3;
      v112 = a3;
      goto LABEL_138;
    case 1:
      v115 = vmovn_s32(v109);
      *a3 = 2;
      if ((v115.i8[4] & 1) != 0)
        v111 = 2;
      else
        v111 = 3;
      if ((v115.i8[2] & 1) != 0)
        v111 = 1;
      if ((v115.i8[0] & 1) != 0)
        v111 = 0;
      goto LABEL_137;
    case 2:
      v116 = vmovn_s32(v109);
      *a3 = 1;
      if ((v116.i8[2] & 1) != 0)
        v117 = 2;
      else
        v117 = 1;
      if ((v116.i8[0] & 1) == 0)
        v117 = 0;
      *a4 = v117;
      v118 = v117 + 1;
      if (!v147.i32[v117 + 1])
      {
        v118 = v117 + 2;
        v119 = v147.i32[v117 + 2];
        v120 = v117 + 3;
        if (!v119)
          v118 = v120;
      }
      *a5 = v118;
      *v129 = v52;
      return result;
    case 3:
      v121 = vmovn_s32(v109);
      *a3 = 0;
      if ((v121.i8[4] & 1) != 0)
        v111 = 3;
      else
        v111 = 2;
      if ((v121.i8[2] & 1) == 0)
        v111 = 1;
      if ((v121.i8[0] & 1) == 0)
        v111 = 0;
LABEL_137:
      v112 = a4;
LABEL_138:
      *v112 = v111;
      break;
    default:
      break;
  }
  *v129 = v52;
  return result;
}

void sub_2394CFD3C(char **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  char *v36;

  v6 = a1[2];
  v7 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v18 = *(const void **)a3;
        v17 = *(_QWORD *)(a3 + 8);
        v19 = v17 - *(_QWORD *)a3;
        if (v17 != *(_QWORD *)a3)
        {
          if (v19 < 0)
            sub_2394189F8();
          v15 = (char *)operator new(v17 - *(_QWORD *)a3);
          *(_QWORD *)v7 = v15;
          *((_QWORD *)v7 + 1) = v15;
          *((_QWORD *)v7 + 2) = &v15[8 * (v19 >> 3)];
          v16 = v19 & 0xFFFFFFFFFFFFFFF8;
          memcpy(v15, v18, v16);
          *((_QWORD *)v7 + 1) = &v15[v16];
        }
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v20 = &v12[24 * v8];
    v36 = &v12[24 * v11];
    v21 = 24 * a2;
    v22 = &v20[24 * a2];
    v23 = v20;
    do
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      v27 = *(const void **)a3;
      v26 = *(_QWORD *)(a3 + 8);
      v28 = v26 - *(_QWORD *)a3;
      if (v26 != *(_QWORD *)a3)
      {
        if (v28 < 0)
          sub_2394189F8();
        v24 = (char *)operator new(v26 - *(_QWORD *)a3);
        *(_QWORD *)v23 = v24;
        *((_QWORD *)v23 + 1) = v24;
        *((_QWORD *)v23 + 2) = &v24[8 * (v28 >> 3)];
        v25 = v28 & 0xFFFFFFFFFFFFFFF8;
        memcpy(v24, v27, v25);
        *((_QWORD *)v23 + 1) = &v24[v25];
      }
      v23 += 24;
      v21 -= 24;
    }
    while (v21);
    v30 = *a1;
    v29 = a1[1];
    if (v29 == *a1)
    {
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
    }
    else
    {
      do
      {
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        v20 -= 24;
        *((_QWORD *)v20 + 2) = 0;
        v31 = *(_OWORD *)(v29 - 24);
        v29 -= 24;
        *(_OWORD *)v20 = v31;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v29 + 2);
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
      }
      while (v29 != v30);
      v32 = *a1;
      v29 = a1[1];
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
      if (v29 != v32)
      {
        v33 = v29;
        do
        {
          v35 = (void *)*((_QWORD *)v33 - 3);
          v33 -= 24;
          v34 = v35;
          if (v35)
          {
            *((_QWORD *)v29 - 2) = v34;
            operator delete(v34);
          }
          v29 = v33;
        }
        while (v33 != v32);
        v29 = v32;
      }
    }
    if (v29)
      operator delete(v29);
  }
}

void sub_2394CFFF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2394CFFFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_2394D001C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D0034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a12 = v12;
  sub_23942A5F4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void **sub_2394D005C(int *a1, _QWORD **a2, void **a3)
{
  int v4;
  _QWORD *v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char **v19;
  void **v20;

  v4 = *a1;
  if (*a1 >= 2)
  {
    v16 = (char *)operator new(0x200uLL);
    v17 = v16;
    v18 = v16 + 512;
    v7 = *a2;
    if (v4 == 3)
    {
      v15 = v7;
      v14 = *v7;
      sub_2394D01E8((uint64_t)a1, &v15, &v14, &v16);
    }
    else
    {
      v10 = *v7;
      v11 = *v7;
      do
      {
        v19 = &v16;
        v20 = (void **)v11;
        sub_2394C5488((void ***)&v19, &v20);
        if (v7 == *(_QWORD **)(v11 + 32))
        {
          v12 = 0;
        }
        else if (v7 == *(_QWORD **)(v11 + 40))
        {
          v12 = 1;
        }
        else if (v7 == *(_QWORD **)(v11 + 48))
        {
          v12 = 2;
        }
        else
        {
          v12 = 3;
        }
        v11 = *(_QWORD *)(v11 + 8 * dword_239EC6C60[v12]);
      }
      while (v11 != v10);
    }
    v8 = v16;
    if (v16 != v17)
    {
      do
      {
        *(_BYTE *)(*(_QWORD *)v8 + 64) = 0;
        v13 = *(_QWORD *)v8;
        v20 = a3;
        sub_2394C5488(&v20, &v13);
        v8 += 8;
      }
      while (v8 != v17);
      v8 = v16;
    }
    if (v8)
    {
      v17 = v8;
      operator delete(v8);
    }
  }
  return a3;
}

void sub_2394D01B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394D01E8(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void **v38;
  void **v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  void **v44;
  void *__p[2];
  __int128 v46;
  __int128 v47;

  v46 = 0u;
  v47 = 0u;
  *(_OWORD *)__p = 0u;
  sub_2394D0644((uint64_t)__p);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v47 + 1) + (_QWORD)v47) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v47 + 1) + v47) & 0x1FF)) = *a3;
  ++*((_QWORD *)&v47 + 1);
  *(_BYTE *)(*a3 + 64) = 1;
  v44 = (void **)a4;
  sub_2394C5488(&v44, a3);
  v7 = *((_QWORD *)&v47 + 1);
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v7 - 1 + v47) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * ((v7 - 1 + v47) & 0x1FF));
    if ((void *)v46 == __p[1])
      v9 = 0;
    else
      v9 = (((_QWORD)v46 - (unint64_t)__p[1]) << 6) - 1;
    *((_QWORD *)&v47 + 1) = v7 - 1;
    if (v9 - (v7 + (_QWORD)v47) + 1 > 0x3FF)
    {
      operator delete(*(void **)(v46 - 8));
      *(_QWORD *)&v46 = v46 - 8;
    }
    for (i = 0; i != 4; ++i)
    {
      if (*(_QWORD *)(v8 + 8 * i + 32) != *a2)
      {
        v12 = *(_QWORD *)(v8 + 8 * i);
        if (!*(_BYTE *)(v12 + 64))
        {
          v13 = (char *)__p[1];
          v14 = (((_QWORD)v46 - (unint64_t)__p[1]) << 6) - 1;
          if ((void *)v46 == __p[1])
            v14 = 0;
          v15 = *((_QWORD *)&v47 + 1) + v47;
          if (v14 == *((_QWORD *)&v47 + 1) + (_QWORD)v47)
          {
            sub_2394D0644((uint64_t)__p);
            v13 = (char *)__p[1];
            v15 = *((_QWORD *)&v47 + 1) + v47;
          }
          *(_QWORD *)(*(_QWORD *)&v13[(v15 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v15 & 0x1FF)) = v12;
          ++*((_QWORD *)&v47 + 1);
          *(_BYTE *)(v12 + 64) = 1;
          v17 = (char *)a4[1];
          v16 = a4[2];
          if ((unint64_t)v17 < v16)
          {
            *(_QWORD *)v17 = v12;
            v11 = (uint64_t)(v17 + 8);
            goto LABEL_10;
          }
          v18 = a4;
          v19 = (char *)*a4;
          v20 = (uint64_t)&v17[-*a4];
          v21 = v20 >> 3;
          v22 = (v20 >> 3) + 1;
          if (v22 >> 61)
            sub_2394189F8();
          v23 = v16 - (_QWORD)v19;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 61)
              sub_239418A80();
            v25 = v24;
            v26 = operator new(8 * v24);
            v24 = v25;
            v27 = &v26[8 * v21];
            *v27 = v12;
            v11 = (uint64_t)(v27 + 1);
            if (v17 != v19)
            {
LABEL_28:
              v28 = v17 - 8 - v19;
              if (v28 < 0x58)
              {
                a4 = v18;
                goto LABEL_37;
              }
              v29 = v17 - &v26[v20];
              a4 = v18;
              if (v29 < 0x20)
                goto LABEL_59;
              v30 = (v28 >> 3) + 1;
              v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              v32 = &v17[-v31];
              v27 = (_QWORD *)((char *)v27 - v31);
              v33 = &v26[8 * v21 - 16];
              v34 = v17 - 16;
              v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              v17 = v32;
              if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_59:
                do
                {
LABEL_37:
                  v37 = *((_QWORD *)v17 - 1);
                  v17 -= 8;
                  *--v27 = v37;
                }
                while (v17 != v19);
              }
              v17 = (char *)*a4;
              *a4 = v27;
              a4[1] = v11;
              a4[2] = &v26[8 * v24];
              if (v17)
LABEL_39:
                operator delete(v17);
LABEL_10:
              a4[1] = v11;
              continue;
            }
          }
          else
          {
            v26 = 0;
            v27 = (_QWORD *)(8 * v21);
            *(_QWORD *)(8 * v21) = v12;
            v11 = 8 * v21 + 8;
            if (v17 != v19)
              goto LABEL_28;
          }
          a4 = v18;
          *v18 = v27;
          v18[1] = v11;
          v18[2] = &v26[8 * v24];
          if (v17)
            goto LABEL_39;
          goto LABEL_10;
        }
      }
    }
    v7 = *((_QWORD *)&v47 + 1);
  }
  while (*((_QWORD *)&v47 + 1));
  v38 = (void **)__p[1];
  v39 = (void **)v46;
  *((_QWORD *)&v47 + 1) = 0;
  if ((unint64_t)v46 - (unint64_t)__p[1] < 0x11)
  {
    v40 = ((unint64_t)v46 - (unint64_t)__p[1]) >> 3;
    if (v40 != 1)
      goto LABEL_43;
  }
  else
  {
    do
    {
      operator delete(*v38);
      v39 = (void **)v46;
      v38 = (void **)((char *)__p[1] + 8);
      __p[1] = v38;
    }
    while ((_QWORD)v46 - (_QWORD)v38 > 0x10uLL);
    v40 = ((_QWORD)v46 - (_QWORD)v38) >> 3;
    if (v40 != 1)
    {
LABEL_43:
      if (v40 == 2)
      {
        v41 = 512;
        goto LABEL_47;
      }
      goto LABEL_48;
    }
  }
  v41 = 256;
LABEL_47:
  *(_QWORD *)&v47 = v41;
LABEL_48:
  if (v38 != v39)
  {
    do
    {
      v42 = *v38++;
      operator delete(v42);
    }
    while (v38 != v39);
    if ((void *)v46 != __p[1])
      *(_QWORD *)&v46 = v46 + (((unint64_t)__p[1] - v46 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return a4;
}

void sub_2394D05E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394D0C00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D05F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394D0C00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D0608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394D0C00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D061C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394D0C00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D0630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394D0C00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D0644(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2394D0BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2394D0BBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D0BD0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D0BE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D0C00(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2394D0CC4(unsigned int *a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (!*((_BYTE *)a1 + 56))
  {
    v7 = *((_QWORD *)a1 + 2);
    v8 = *((_QWORD *)a1 + 3);
    v9 = 16 * (v8 - v7) - 1;
    if (v8 == v7)
      v9 = 0;
    if (v9 == *((_QWORD *)a1 + 5) + v5)
    {
      sub_2394D0E40((uint64_t)(a1 + 2));
      v7 = *((_QWORD *)a1 + 2);
      v8 = *((_QWORD *)a1 + 3);
    }
    if (v8 == v7)
    {
      v11 = 0;
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        goto LABEL_16;
    }
    else
    {
      v10 = *((_QWORD *)a1 + 6) + *((_QWORD *)a1 + 5);
      v11 = *(_QWORD *)(v7 + ((v10 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v10 & 0x7F);
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        goto LABEL_16;
    }
    if (v12 == a2)
    {
      *(_QWORD *)(v11 + 24) = v11;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v11);
      goto LABEL_18;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
LABEL_16:
    *(_QWORD *)(v11 + 24) = v12;
LABEL_18:
    ++*((_QWORD *)a1 + 6);
    pthread_cond_signal((pthread_cond_t *)(a1 + 32));
    v6 = 1;
    goto LABEL_19;
  }
LABEL_5:
  v6 = 0;
LABEL_19:
  sub_2397A16B4(v4);
  return v6;
}

void sub_2394D0E20(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_2394D0E40(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2394D139C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2394D13B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D13CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D13E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D1400()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394D1414(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x80uLL);
  *(_QWORD *)v2 = &off_250ADCD40;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *((_QWORD *)v2 + 15) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_2394D1484(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_250ADCD40;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

uint64_t sub_2394D14DC(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  float v9;
  unsigned int v10;
  _BOOL4 v11;
  unsigned int **v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  float64x2_t v17;
  uint64_t v18;
  __int128 v19;
  float64x2_t v20;
  int32x4_t v21;
  int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t *v25;
  int v26;
  int v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  float32x2_t v31;
  int32x4_t v32;
  int8x16_t v33;
  float32x2_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  double *v56;
  double *v57;
  double *v58;
  double *v59;
  double v60;
  double v61;
  double v62;
  float v63;
  double *v64;
  double *v65;
  double *v66;
  double *v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  float64x2_t *v78;
  float64x2_t *v79;
  float64x2_t *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  BOOL v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  float32_t v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32_t v93;
  int32x4_t v94;
  int8x16_t v95;
  float v96;
  float32x4_t v97;
  float32_t v98;
  int32x4_t v99;
  int8x16_t v100;
  float v101;
  int v102;
  uint64_t v103;
  float32x4_t v104;
  double v105;
  char v106;
  float32_t v107;
  int32x4_t v108;
  int8x16_t v109;
  float32x2_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  uint64_t v118;
  double *v119;
  double *v120;
  double *v121;
  double *v122;
  double v123;
  double v124;
  double v125;
  float v126;
  double v127;
  double *v128;
  double *v129;
  double *v130;
  double *v131;
  double v132;
  double v133;
  double v134;
  float v135;
  double v136;
  double *v137;
  BOOL v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  _QWORD *v142;
  int v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  float32x2_t *v149;
  __int128 *v150;
  unsigned int *v151;
  int v152;
  unsigned int *v153;
  uint64_t v154;
  float32x2_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x2_t v158;
  void *__p[2];
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  float64x2_t v165;
  double v166;
  int32x4_t v167;
  uint64_t v168;
  float64x2_t v169;
  double v170;
  __int128 v171;
  uint64_t v172;
  unsigned int v173;
  _QWORD v174[4];
  int v175;
  __int16 v176;
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(result + 120);
  v2 = **(_QWORD **)(result + 8);
  if (**(_QWORD **)(result + 16) + v1 < v2)
    v2 = **(_QWORD **)(result + 16) + v1;
  v147 = v2;
  if (v2 > v1)
  {
    v3 = result;
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 24);
      HIBYTE(v160) = 0;
      LOBYTE(__p[0]) = 0;
      sub_2396FD394(v174, v4, (__int128 *)__p);
      if (SHIBYTE(v160) < 0)
        operator delete(__p[0]);
      if (sub_2396FD7B0(*(_QWORD *)(v3 + 32)))
        break;
      v148 = v1;
      v5 = *(_QWORD *)(**(_QWORD **)(v3 + 40) + 24 * v1 + 8);
      v6 = *(unsigned int *)(v5 + 40);
      if ((v6 & 0x80000000) == 0)
      {
        v7 = *(uint64_t **)(v3 + 48);
        v8 = *v7;
        if ((int)v6 < (int)(-1431655765 * ((unint64_t)(v7[1] - *v7) >> 2)))
        {
          if (*((_BYTE *)v7 + 144))
          {
            v9 = *(float *)(v7[15] + 4 * v6);
            v10 = vcvtps_s32_f32(v9);
            v11 = v9 >= 1.0;
            if (v9 > 1.0)
              v11 = 0;
            v152 = v11;
            if (!*((_BYTE *)v7 + 112))
LABEL_127:
              sub_2394875CC();
          }
          else
          {
            v152 = 1;
            v10 = 1;
            if (!*((_BYTE *)v7 + 112))
              goto LABEL_127;
          }
          v12 = (unsigned int **)(v7[11] + 24 * v6);
          v13 = *v12;
          v151 = v12[1];
          if (*v12 != v151)
          {
            v149 = (float32x2_t *)(v8 + 12 * v6);
            v150 = (__int128 *)(v5 + 16);
            v14 = 2 * v10;
            v154 = v5;
            while (1)
            {
              v173 = 0;
              v153 = v13;
              v173 = *v13;
              v15 = *(_QWORD *)(v3 + 56);
              __p[0] = &v173;
              v16 = sub_2394D2028(v15, &v173, (uint64_t)&unk_239EC6E98, (_DWORD **)__p);
              *(float *)v17.f64 = *((double *)v16 + 5);
              v18 = *((_QWORD *)v150 + 2);
              v19 = *v150;
              v169 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(v16 + 3)));
              v170 = *(float *)v17.f64;
              v171 = v19;
              v172 = v18;
              *(double *)&v19 = *(double *)(v5 + 32) - v170 + v170;
              v165 = v169;
              v20 = vsubq_f64(*(float64x2_t *)(v5 + 16), v169);
              v21 = (int32x4_t)vaddq_f64(v20, v169);
              v166 = *(float *)v17.f64;
              v167 = v21;
              v168 = v19;
              v22 = *(_BYTE *)(*(_QWORD *)(v3 + 64) + 52) ? v10 : 1;
              v23 = (uint64_t **)(**(_QWORD **)(v3 + 72) + 24 * *(int *)(v5 + 40));
              v24 = *v23;
              v25 = v23[1];
              if (*v23 != v25)
                break;
LABEL_19:
              v13 = v153 + 1;
              if (v153 + 1 == v151)
                goto LABEL_5;
            }
            v26 = 0;
            v27 = 0;
            *(float32x2_t *)v21.i8 = *v149;
            v21.i32[2] = v149[1].i32[0];
            *(_QWORD *)&v20.f64[0] = v16[5];
            v28 = *(float64x2_t *)(v16 + 3);
            v17.f64[0] = *(float *)&v21.i32[2];
            v29 = vsubq_f64(v20, v17).f64[0];
            v30 = vsubq_f64(v28, vcvtq_f64_f32(*v149));
            *(float32x2_t *)&v30.f64[0] = vcvt_f32_f64(v30);
            *(float *)v28.f64 = v29;
            v31 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v30.f64[0], 1);
            v157 = *(float32x2_t *)&v28.f64[0];
            v158 = *(float32x2_t *)&v30.f64[0];
            v32 = (int32x4_t)v30;
            v32.i32[2] = LODWORD(v28.f64[0]);
            v33 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL), (int8x16_t)v32, 8uLL)), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL), (int8x16_t)v21, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL));
            v34 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1);
            v155 = (float32x2_t)vextq_s8(v33, v33, 8uLL).u64[0];
            v156 = *(float32x2_t *)v33.i8;
            while (1)
            {
              v35 = (_QWORD *)*v24;
              v36 = *(int *)(*v24 + 68);
              v37 = *(_QWORD *)(*(_QWORD *)(v3 + 80) + 200);
              v38 = *(_QWORD *)(*v24 + 32);
              if (v38 == v37 || (v39 = v35[5], v39 == v37) || (v40 = v35[6], v40 == v37) || v35[7] == v37)
              {
                v42 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 24) + 4 * v36);
                do
                  v43 = __ldaxr(v42);
                while (__stlxr(v43 + v14, v42));
                goto LABEL_36;
              }
              if (v5 == v38)
              {
                v41 = 0;
              }
              else if (v5 == v39)
              {
                v41 = 1;
              }
              else
              {
                v41 = v5 == v40 ? 2 : 3;
              }
              v44 = v35 + 4;
              v45 = v44[((_BYTE)v41 - 1) & 3];
              v46 = (v41 & 1) != 0 ? 1 : 2;
              v47 = v46 + v41;
              v48 = (v41 & 1) != 0 ? 2 : 1;
              v49 = v44[(v48 + (_BYTE)v41) & 3];
              v50 = v44[v47 & 3];
              v51 = *(_QWORD *)(v50 + 32);
              v52 = *(_QWORD *)(v49 + 32);
              v53 = *(_QWORD *)(v45 + 32);
              *(_OWORD *)__p = *(_OWORD *)(v50 + 16);
              v160 = v51;
              v161 = *(_OWORD *)(v49 + 16);
              v162 = v52;
              v163 = *(_OWORD *)(v45 + 16);
              v164 = v53;
              if ((v27 & 1) == 0 && sub_2394D232C((double *)__p, (__int128 *)&v169))
                break;
              if ((v26 & 1) == 0)
              {
                v176 = 0;
                v175 = 0;
                if (!sub_2394D27A8((uint64_t)&v175, (double *)__p, v165.f64))
                {
                  v26 = 0;
                  v5 = v154;
                  goto LABEL_36;
                }
                v116 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 48) + 4 * v36);
                do
                  v117 = __ldaxr(v116);
                while (__stlxr(v117 + v14, v116));
                if (v152)
                {
                  v118 = *(_QWORD *)(*v24 + 8 * v41);
                  v119 = *(double **)(*v24 + 32);
                  v120 = *(double **)(*v24 + 40);
                  v121 = *(double **)(*v24 + 48);
                  v122 = *(double **)(*v24 + 56);
                  v123 = v119[2];
                  v124 = v119[3];
                  v125 = v119[4];
                  v126 = (((v120[2] - v123) * (v121[3] - v124) - (v121[2] - v123) * (v120[3] - v124)) * (v122[4] - v125)
                        - ((v120[2] - v123) * (v122[3] - v124) - (v122[2] - v123) * (v120[3] - v124)) * (v121[4] - v125)
                        + ((v121[2] - v123) * (v122[3] - v124) - (v122[2] - v123) * (v121[3] - v124)) * (v120[4] - v125))
                       / 6.0;
                  v127 = v126;
                  v128 = *(double **)(v118 + 32);
                  v129 = *(double **)(v118 + 40);
                  v130 = *(double **)(v118 + 48);
                  v131 = *(double **)(v118 + 56);
                  v132 = v128[2];
                  v133 = v128[3];
                  v134 = v128[4];
                  v135 = (((v129[2] - v132) * (v130[3] - v133) - (v130[2] - v132) * (v129[3] - v133)) * (v131[4] - v134)
                        - ((v129[2] - v132) * (v131[3] - v133) - (v131[2] - v132) * (v129[3] - v133)) * (v130[4] - v134)
                        + ((v130[2] - v132) * (v131[3] - v133) - (v131[2] - v132) * (v130[3] - v133)) * (v129[4] - v134))
                       / 6.0;
                  v136 = v135;
                  v137 = *(double **)(v3 + 112);
                  v138 = *v137 * v127 <= v136 || *v137 * v136 <= v127;
                  if (!v138)
                  {
                    v77 = *(int *)(v118 + 68);
                    v139 = 72;
                    if ((int)v36 < (int)v77)
                      v139 = 96;
                    v140 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + v139)
                                          + 4
                                          * *(int *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 336)
                                                   + 16 * *(int *)(*v24 + 68)
                                                   + 4 * v41));
                    do
                      v141 = __ldaxr(v140);
                    while (__stlxr(v141 + v10, v140));
                    v142 = (_QWORD *)(*(_QWORD *)(v3 + 88) + 48);
                    v26 = 1;
                    v143 = v22;
                    goto LABEL_118;
                  }
                }
              }
              v26 = 1;
              v5 = v154;
LABEL_36:
              if (++v24 == v25 || (v27 & v26 & 1) != 0)
                goto LABEL_19;
            }
            if (v152)
            {
              v55 = *(_QWORD *)(*v24 + 8 * v41);
              v56 = *(double **)(v55 + 32);
              v57 = *(double **)(v55 + 40);
              v58 = *(double **)(v55 + 48);
              v59 = *(double **)(v55 + 56);
              v60 = v56[2];
              v61 = v56[3];
              v62 = v56[4];
              v63 = (((v57[2] - v60) * (v58[3] - v61) - (v58[2] - v60) * (v57[3] - v61)) * (v59[4] - v62)
                   - ((v57[2] - v60) * (v59[3] - v61) - (v59[2] - v60) * (v57[3] - v61)) * (v58[4] - v62)
                   + ((v58[2] - v60) * (v59[3] - v61) - (v59[2] - v60) * (v58[3] - v61)) * (v57[4] - v62))
                  / 6.0;
              v64 = *(double **)(*v24 + 32);
              v65 = *(double **)(*v24 + 40);
              v66 = *(double **)(*v24 + 48);
              v67 = *(double **)(*v24 + 56);
              v68 = v64[2];
              v69 = v64[3];
              v70 = v64[4];
              *(float *)&v60 = (((v65[2] - v68) * (v66[3] - v69) - (v66[2] - v68) * (v65[3] - v69)) * (v67[4] - v70)
                              - ((v65[2] - v68) * (v67[3] - v69) - (v67[2] - v68) * (v65[3] - v69)) * (v66[4] - v70)
                              + ((v66[2] - v68) * (v67[3] - v69) - (v67[2] - v68) * (v66[3] - v69)) * (v65[4] - v70))
                             / 6.0;
              if (**(double **)(v3 + 96) * *(float *)&v60 > v63)
              {
                v138 = (int)v36 <= *(_DWORD *)(v55 + 68);
                v71 = 72;
                if (!v138)
                  v71 = 96;
                v72 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + v71)
                                     + 4
                                     * *(int *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 336)
                                              + 16 * *(int *)(*v24 + 68)
                                              + 4 * v41));
                do
                  v73 = __ldaxr(v72);
                while (__stlxr(v73 - v10, v72));
              }
            }
            if (!**(_QWORD **)(v3 + 104))
            {
LABEL_121:
              v27 = 1;
              v5 = v154;
              goto LABEL_36;
            }
            v74 = 0;
            v75 = *v24;
            while (2)
            {
              v76 = *(_QWORD *)(v75 + 8 * v41);
              v77 = *(int *)(v76 + 68);
              v78 = *(float64x2_t **)(*(_QWORD *)(v3 + 80) + 200);
              if (*(float64x2_t **)(v76 + 32) == v78
                || (v79 = *(float64x2_t **)(v76 + 40), v79 == v78)
                || (v80 = *(float64x2_t **)(v76 + 48), v80 == v78)
                || (v81 = *(_QWORD *)(v76 + 56), (float64x2_t *)v81 == v78))
              {
                v142 = (_QWORD *)(*(_QWORD *)(v3 + 88) + 24);
                goto LABEL_117;
              }
              v82 = *(_QWORD **)(v3 + 88);
              if (((*(_QWORD *)(v82[45] + ((v77 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v77) & 1) != 0)
              {
                v142 = v82 + 3;
LABEL_117:
                v27 = 1;
                v143 = 2 * v22;
LABEL_118:
                v5 = v154;
                v144 = (unsigned int *)(*v142 + 4 * v77);
                do
                  v145 = __ldaxr(v144);
                while (__stlxr(v145 + v143, v144));
                goto LABEL_36;
              }
              if (v75 == *(_QWORD *)v76)
              {
                v79 = *(float64x2_t **)(v76 + 32);
                v86 = 1;
                v87 = 3;
                v41 = 2;
              }
              else if (v75 == *(_QWORD *)(v76 + 8))
              {
                v41 = 0;
                v86 = 2;
                v87 = 3;
              }
              else
              {
                v83 = *(_QWORD *)(v76 + 16);
                v84 = v75 == v83;
                v85 = v75 != v83;
                if (!v84)
                  v80 = *(float64x2_t **)(v76 + 56);
                v86 = 3;
                if (!v84)
                  v86 = 0;
                v41 = 2 * v85;
                v81 = *(_QWORD *)(v76 + 40);
                v79 = v80;
                v87 = 1;
              }
              *(float32x2_t *)v54.f32 = vcvt_f32_f64(v79[1]);
              v88 = v79[2].f64[0];
              v54.f32[2] = v88;
              v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL);
              v90 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v54, (int8x16_t)v54, 0xCuLL), (int8x16_t)v54, 8uLL);
              v91 = *(_QWORD *)(v76 + 32 + 8 * v86);
              v92 = *(float32x4_t *)(v91 + 16);
              *(float32x2_t *)v92.f32 = vcvt_f32_f64((float64x2_t)v92);
              v93 = *(double *)(v91 + 32);
              v92.f32[2] = v93;
              v94 = (int32x4_t)vsubq_f32(v92, v54);
              v95 = (int8x16_t)vmlsq_f32(vmulq_f32(v89, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v94, (int8x16_t)v94, 0xCuLL), (int8x16_t)v94, 8uLL)), v90, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v94, v94), (int8x16_t)v94, 0xCuLL));
              LODWORD(v96) = vadd_f32(vmla_f32(vmla_lane_f32(vmul_f32(v156, *(float32x2_t *)v94.i8), v34, *(float32x2_t *)v94.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), v155), vmla_f32(vmla_lane_f32(vmul_f32(v158, *(float32x2_t *)v95.i8), v31, *(float32x2_t *)v95.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), v157)).u32[0];
              v97 = *(float32x4_t *)(v81 + 16);
              *(float32x2_t *)v97.f32 = vcvt_f32_f64((float64x2_t)v97);
              v98 = *(double *)(v81 + 32);
              v97.f32[2] = v98;
              v99 = (int32x4_t)vsubq_f32(v97, v54);
              v100 = (int8x16_t)vmlsq_f32(vmulq_f32(v89, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL)), v90, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL));
              v101 = vadd_f32(vmla_f32(vmla_lane_f32(vmul_f32(v156, *(float32x2_t *)v99.i8), v34, *(float32x2_t *)v99.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL), v155), vmla_f32(vmla_lane_f32(vmul_f32(v158, *(float32x2_t *)v100.i8), v31, *(float32x2_t *)v100.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL), v157)).f32[0];
              if (v101 >= 0.0)
                v102 = 0;
              else
                v102 = -1;
              if (v101 > 0.0)
                v102 = 1;
              v103 = *(_QWORD *)(v76 + 32 + 8 * v41);
              v104 = *(float32x4_t *)(v103 + 16);
              v105 = *(double *)(v103 + 32);
              if (v96 >= 0.0)
              {
                v106 = 1;
                if (v96 <= 0.0)
                {
                  if (!v102)
                    goto LABEL_94;
                  v106 = 0;
                }
LABEL_82:
                *(float32x2_t *)v104.f32 = vcvt_f32_f64((float64x2_t)v104);
                v107 = v105;
                v104.f32[2] = v107;
                v108 = (int32x4_t)vsubq_f32(v104, v54);
                v109 = (int8x16_t)vmlsq_f32(vmulq_f32(v89, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v108, (int8x16_t)v108, 0xCuLL), (int8x16_t)v108, 8uLL)), v90, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL));
                v110 = vmla_f32(vmla_lane_f32(vmul_f32(v158, *(float32x2_t *)v109.i8), v31, *(float32x2_t *)v109.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL), v157);
                *(float32x2_t *)v109.i8 = vmla_lane_f32(vmul_f32(v156, *(float32x2_t *)v108.i8), v34, *(float32x2_t *)v108.i8, 1);
                v54 = (float32x4_t)vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL);
                v54.i32[0] = vadd_f32(vmla_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v54.f32, v155), v110).u32[0];
                if (v101 >= 0.0)
                {
                  if (!v102)
                  {
                    v41 = v86;
                    if (v54.f32[0] == 0.0)
                      goto LABEL_94;
                  }
                }
                else
                {
                  v41 = v86;
                  if (v54.f32[0] > 0.0)
                    goto LABEL_94;
                }
                if (v54.f32[0] < 0.0)
                {
                  v41 = v87;
                  if (v96 <= 0.0)
                    goto LABEL_121;
                }
                else
                {
                  if (v54.f32[0] > 0.0)
                    v111 = 1;
                  else
                    v111 = v106;
                  v41 = v87;
                  if ((v111 & 1) != 0)
                    goto LABEL_121;
                }
              }
              else if (v101 <= 0.0)
              {
                v106 = 1;
                goto LABEL_82;
              }
LABEL_94:
              ++v74;
              v112 = *(int *)(v82[42] + 16 * v77 + 4 * v41);
              v138 = (int)v77 <= *(_DWORD *)(*(_QWORD *)(v76 + 8 * v41) + 68);
              v113 = 9;
              if (!v138)
                v113 = 12;
              v114 = (unsigned int *)(v82[v113] + 4 * v112);
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 + v22, v114));
              v27 = 1;
              v75 = v76;
              if (v74 >= **(_QWORD **)(v3 + 104))
              {
                v5 = v154;
                goto LABEL_36;
              }
              continue;
            }
          }
        }
      }
LABEL_5:
      result = sub_2396FD3E8((uint64_t)v174);
      v1 = v148 + 1;
      if (v148 + 1 == v147)
        return result;
    }
    v146 = *(_QWORD *)(v3 + 24);
    HIBYTE(v160) = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C(v146, (uint64_t)__p);
    if (SHIBYTE(v160) < 0)
      operator delete(__p[0]);
    return sub_2396FD3E8((uint64_t)v174);
  }
  return result;
}

void sub_2394D1FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
    operator delete(__p);
  sub_2396FD3E8(v32 - 200);
  _Unwind_Resume(a1);
}

uint64_t *sub_2394D2028(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2394D2318(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2394D232C(double *a1, __int128 *a2)
{
  double *v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  double *v10;
  double *v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v20 = 0;
  v19 = 0;
  v4 = a1 + 3;
  v5 = a1 + 6;
  v6 = *((_QWORD *)a2 + 2);
  v17 = *a2;
  v18 = v6;
  v7 = *((_QWORD *)a2 + 5);
  v15 = *(__int128 *)((char *)a2 + 24);
  v16 = v7;
  v8 = sub_2394C3C18((uint64_t)&v19, a1, a1 + 3, a1 + 6, (double *)&v17);
  v9 = sub_2394C3C18((uint64_t)&v19, a1, v4, v5, (double *)&v15);
  if (v8 == -1)
  {
    if (v9 <= 1)
      goto LABEL_12;
    return 0;
  }
  if (v8)
  {
    if (v8 != 1 || v9 && v9 != -1)
      return 0;
    goto LABEL_15;
  }
  if (v9 == -1)
  {
LABEL_15:
    if (sub_2394C3C18((uint64_t)&v19, (double *)&v17, (double *)&v15, a1, v4) == 1
      || sub_2394C3C18((uint64_t)&v19, (double *)&v17, (double *)&v15, v4, v5) == 1)
    {
      return 0;
    }
    v10 = (double *)&v17;
    v11 = (double *)&v15;
    return sub_2394C3C18((uint64_t)&v19, v10, v11, v5, a1) != 1;
  }
  if (!v9)
  {
    v13 = *((_QWORD *)a2 + 2);
    v23 = *a2;
    v24 = v13;
    v14 = *((_QWORD *)a2 + 5);
    v21 = *(__int128 *)((char *)a2 + 24);
    v22 = v14;
    return sub_2394D2534(a1, v4, v5, (double *)&v23, (double *)&v21);
  }
  if (v9 != 1)
    return 0;
LABEL_12:
  if (sub_2394C3C18((uint64_t)&v19, (double *)&v15, (double *)&v17, a1, v4) == 1
    || sub_2394C3C18((uint64_t)&v19, (double *)&v15, (double *)&v17, v4, v5) == 1)
  {
    return 0;
  }
  v10 = (double *)&v15;
  v11 = (double *)&v17;
  return sub_2394C3C18((uint64_t)&v19, v10, v11, v5, a1) != 1;
}

BOOL sub_2394D2534(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  double *v7;
  int v10;
  double *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  double *v17;
  double *v18;
  double *v19;
  int v20;
  _BYTE v22[8];

  v7 = a3;
  v10 = sub_2394C2060((uint64_t)v22, a1, a2, a3);
  if (v10 == 1)
    v11 = a2;
  else
    v11 = v7;
  if (v10 != 1)
    v7 = a2;
  v12 = sub_2394C2060((uint64_t)v22, a4, a5, a1);
  v13 = sub_2394C2060((uint64_t)v22, a4, a5, v11);
  v14 = sub_2394C2060((uint64_t)v22, a4, a5, v7);
  v15 = v14;
  if (v12 == -1)
  {
    if (v13 == -1)
    {
      if (v14 == -1 || sub_2394C2060((uint64_t)v22, v11, v7, a4) == -1)
        return 0;
LABEL_37:
      v17 = v7;
      v18 = a1;
      v19 = a5;
      return sub_2394C2060((uint64_t)v22, v17, v18, v19) != -1;
    }
    if (!v13)
    {
      v16 = sub_2394C2060((uint64_t)v22, a1, v11, a4);
      if (v15 == -1)
      {
LABEL_24:
        if (v16 == -1)
          return 0;
        v17 = v11;
        v18 = v7;
        v19 = a5;
        return sub_2394C2060((uint64_t)v22, v17, v18, v19) != -1;
      }
      goto LABEL_18;
    }
LABEL_22:
    if (v13 != 1)
      return 0;
    v16 = sub_2394C2060((uint64_t)v22, a1, v11, a4);
    if (v15 != 1)
      goto LABEL_24;
LABEL_18:
    if (v16 == -1)
      return 0;
    goto LABEL_37;
  }
  if (v12)
  {
    if (v12 != 1)
      return 0;
    if (v13 != -1 && v13)
    {
      if (v13 != 1 || v14 == 1 || sub_2394C2060((uint64_t)v22, v11, v7, a5) == -1)
        return 0;
      goto LABEL_39;
    }
    v20 = sub_2394C2060((uint64_t)v22, a1, v11, a5);
    if (v15 != 1)
    {
LABEL_27:
      if (v20 == -1)
        return 0;
LABEL_39:
      v17 = v7;
      v18 = a1;
      goto LABEL_40;
    }
    goto LABEL_33;
  }
  if (v13 == -1)
  {
    v20 = sub_2394C2060((uint64_t)v22, a1, v11, a5);
    if (v15 == -1)
      goto LABEL_27;
LABEL_33:
    if (v20 != -1)
    {
      v17 = v11;
      v18 = v7;
LABEL_40:
      v19 = a4;
      return sub_2394C2060((uint64_t)v22, v17, v18, v19) != -1;
    }
    return 0;
  }
  if (v13)
    goto LABEL_22;
  if (v14 == 1)
  {
    if (sub_2394C2060((uint64_t)v22, v11, v7, a4) == -1)
      return 0;
    goto LABEL_37;
  }
  if (sub_2394C2060((uint64_t)v22, v11, v7, a5) != -1)
    goto LABEL_39;
  return 0;
}

BOOL sub_2394D27A8(uint64_t a1, double *a2, double *a3)
{
  unint64_t StatusReg;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  _BOOL8 result;
  double v20[48];
  double v21[72];

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0));
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), 0x400000uLL);
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v11 = a2[7];
  v12 = a2[8];
  v21[0] = -*a2;
  v21[1] = v4;
  v21[2] = -v5;
  v21[3] = v5;
  v21[4] = -v6;
  v21[5] = v6;
  v21[6] = -v7;
  v21[7] = v7;
  v21[8] = -v8;
  v21[9] = v8;
  v21[10] = -v9;
  v21[11] = v9;
  v21[12] = -v10;
  v21[13] = v10;
  v21[14] = -v11;
  v21[15] = v11;
  v21[16] = -v12;
  v21[17] = v12;
  v13 = *a3;
  v14 = a3[1];
  v15 = a3[2];
  v16 = a3[3];
  v17 = a3[4];
  v18 = a3[5];
  v20[0] = -*a3;
  v20[1] = v13;
  v20[2] = -v14;
  v20[3] = v14;
  v20[4] = -v15;
  v20[5] = v15;
  v20[6] = -v16;
  v20[7] = v16;
  v20[8] = -v17;
  v20[9] = v17;
  v20[10] = -v18;
  v20[11] = v18;
  result = sub_2394D2C8C(v21, v20);
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 4, 0), StatusReg);
  return result;
}

void sub_2394D294C(double *a1@<X1>, uint64_t a2@<X8>)
{
  void *v4[4];
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *__p;
  void *v14;
  void *v15[4];
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26[4];
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[72];

  sub_2394D735C(a1, (uint64_t)v26);
  sub_2394D735C(a1 + 3, (uint64_t)v15);
  sub_2394D735C(a1 + 6, (uint64_t)v4);
  sub_2394D7654((uint64_t)v26, (uint64_t)v15, (uint64_t)v4, v37);
  sub_2394D78B4(a2, (uint64_t)v37);
  sub_2394D7774((uint64_t)v37);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
}

void sub_2394D2AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_2394D43E8((uint64_t)&a9);
  sub_2394D43E8((uint64_t)&a33);
  sub_2394D43E8((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_2394D2B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_2394D43E8((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_2394D2B30(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void *v7[4];
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *__p;
  void *v17;
  void *v18[4];
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  sub_2394D735C((double *)a1, (uint64_t)v18);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_OWORD *)(a1 + 24);
  v6 = v4;
  sub_2394D735C((double *)&v5, (uint64_t)v7);
  sub_2394D7B98(a2, (uint64_t)v18, (uint64_t)v7);
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

void sub_2394D2C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_2394D43E8((uint64_t)&a13);
  sub_2394D43E8((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_2394D2C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_2394D43E8((uint64_t)&a37);
  _Unwind_Resume(a1);
}

BOOL sub_2394D2C8C(double *a1, double *a2)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  __int128 v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  _BOOL4 v23;
  _BOOL8 result;
  uint64_t v25;
  __int16 v27;
  __int16 v28;
  _BOOL4 v29;
  uint64_t v30;
  BOOL v31;
  __int16 v32;
  __int16 v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v38;
  __int16 v39;
  _BOOL4 v40;
  uint64_t v41;
  BOOL v42;
  __int16 v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v47;
  __int16 v48;
  double *v49;
  double *v50;
  _OWORD v51[3];
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58[2];
  double v59;
  double v60;
  uint64_t v61;
  double v62[2];
  double v63[2];
  double v64[2];
  double v65[2];
  double v66[2];
  double v67[3];

  v4 = a1 + 6;
  v50 = a1 + 12;
  sub_2394D3638((uint64_t)a2, (uint64_t)v65, -0.0, 0.0);
  sub_2394D3638((uint64_t)a2, (uint64_t)v62, -1.0, 1.0);
  v5 = *a1 + a2[1] + a2[6];
  v6 = a1[1] + a2[7] + *a2;
  v7 = a1[2] + a2[3] + a2[8];
  v8 = a1[3] + a2[9] + a2[2];
  v9 = a1 + 4;
  v10 = a1[4] + a2[5] + a2[10];
  v11 = a1[5] + a2[11] + a2[4];
  v12 = *((_OWORD *)a1 + 1);
  v51[0] = *(_OWORD *)a1;
  v51[1] = v12;
  v51[2] = *((_OWORD *)a1 + 2);
  v52 = v5;
  v53 = v6;
  v54 = v7;
  v55 = v8;
  v56 = v10;
  v57 = v11;
  sub_2394D3638((uint64_t)v51, (uint64_t)v58, -1.0, 1.0);
  v13 = a1 + 8;
  v14 = a1 + 10;
  v15 = a1 + 14;
  v16 = a1 + 16;
  v61 = sub_2394C406C(a1, a1 + 2, a1 + 4, v4, a1 + 8, a1 + 10, v50, a1 + 14, a1 + 16, v58, &v59, &v60);
  v17 = sub_2394D37DC((unsigned int *)&v61);
  if (v17)
  {
    v18 = v17;
    v49 = a1 + 2;
    *(_QWORD *)&v51[0] = sub_2394C406C(a1, a1 + 2, a1 + 4, v4, a1 + 8, a1 + 10, v50, v15, a1 + 16, v65, v66, v67);
    v19 = sub_2394D37DC((unsigned int *)v51);
    if (v19 == -1)
    {
      if (v18 == 1)
      {
        *(_QWORD *)&v51[0] = sub_2394C406C(v62, v63, v64, v65, v66, v67, a1, v49, v9, v4, v13, v14);
        if (sub_2394D37DC((unsigned int *)v51) != 1)
        {
          *(_QWORD *)&v51[0] = sub_2394C406C(v62, v63, v64, v65, v66, v67, v4, v13, v14, v50, v15, v16);
          if (sub_2394D37DC((unsigned int *)v51) != 1)
          {
            v20 = sub_2394C406C(v62, v63, v64, v65, v66, v67, v50, v15, v16, a1, v49, v9);
            goto LABEL_18;
          }
        }
      }
      return 0;
    }
    if (v19)
    {
      if (v19 == 1 && v18 == -1)
      {
        *(_QWORD *)&v51[0] = sub_2394C406C(v65, v66, v67, v62, v63, v64, a1, v49, v9, v4, v13, v14);
        if (sub_2394D37DC((unsigned int *)v51) != 1)
        {
          *(_QWORD *)&v51[0] = sub_2394C406C(v65, v66, v67, v62, v63, v64, v4, v13, v14, v50, v15, v16);
          if (sub_2394D37DC((unsigned int *)v51) != 1)
          {
            v20 = sub_2394C406C(v65, v66, v67, v62, v63, v64, v50, v15, v16, a1, v49, v9);
LABEL_18:
            *(_QWORD *)&v51[0] = v20;
            return sub_2394D37DC((unsigned int *)v51) != 1;
          }
        }
      }
      return 0;
    }
    if (v18 == -1)
    {
      v36 = sub_2394C406C(v65, v66, v67, v62, v63, v64, a1, v49, v9, v4, v13, v14);
      v38 = (int)v36 < 2 && SHIDWORD(v36) > 0;
      if ((((_DWORD)v36 == HIDWORD(v36)) & v38) != 0)
        v39 = 0;
      else
        v39 = 256;
      LOWORD(v51[0]) = v39 | v38 ^ 1;
      v40 = sub_2394C286C((unsigned __int8 *)v51);
      result = 0;
      if (v40)
      {
        v41 = sub_2394C406C(v65, v66, v67, v62, v63, v64, v4, v13, v14, v50, v15, v16);
        v42 = (int)v41 >= 2 || SHIDWORD(v41) <= 0;
        v43 = !v42;
        v44 = (((_DWORD)v41 == HIDWORD(v41)) & v43) != 0 ? 0 : 256;
        LOWORD(v58[0]) = v44 | v43 ^ 1;
        v45 = sub_2394C286C((unsigned __int8 *)v58);
        result = 0;
        if (v45)
        {
          v35 = sub_2394C406C(v65, v66, v67, v62, v63, v64, v50, v15, v16, a1, v49, v9);
          goto LABEL_65;
        }
      }
    }
    else
    {
      if (v18 != 1)
        return 0;
      v25 = sub_2394C406C(v62, v63, v64, v65, v66, v67, a1, v49, v9, v4, v13, v14);
      v27 = (int)v25 < 2 && SHIDWORD(v25) > 0;
      if ((((_DWORD)v25 == HIDWORD(v25)) & v27) != 0)
        v28 = 0;
      else
        v28 = 256;
      LOWORD(v51[0]) = v28 | v27 ^ 1;
      v29 = sub_2394C286C((unsigned __int8 *)v51);
      result = 0;
      if (v29)
      {
        v30 = sub_2394C406C(v62, v63, v64, v65, v66, v67, v4, v13, v14, v50, v15, v16);
        v31 = (int)v30 >= 2 || SHIDWORD(v30) <= 0;
        v32 = !v31;
        v33 = (((_DWORD)v30 == HIDWORD(v30)) & v32) != 0 ? 0 : 256;
        LOWORD(v58[0]) = v33 | v32 ^ 1;
        v34 = sub_2394C286C((unsigned __int8 *)v58);
        result = 0;
        if (v34)
        {
          v35 = sub_2394C406C(v62, v63, v64, v65, v66, v67, v50, v15, v16, a1, v49, v9);
LABEL_65:
          v47 = (int)v35 < 2 && SHIDWORD(v35) > 0;
          if ((((_DWORD)v35 == HIDWORD(v35)) & v47) != 0)
            v48 = 0;
          else
            v48 = 256;
          LOWORD(v61) = v48 | v47 ^ 1;
          return sub_2394C286C((unsigned __int8 *)&v61);
        }
      }
    }
  }
  else
  {
    v21 = sub_2394C406C(a1, a1 + 2, a1 + 4, v4, a1 + 8, a1 + 10, v50, a1 + 14, a1 + 16, v65, v66, v67);
    if (v21 >= 0 && (int)v21 < 1)
      v22 = 256;
    else
      v22 = 0;
    LOWORD(v51[0]) = v22 | (v21 >= 0 && (int)v21 < 1 && (_DWORD)v21 == HIDWORD(v21));
    v23 = sub_2394C286C((unsigned __int8 *)v51);
    result = 0;
    if (v23)
      return sub_2394D3354(a1, (uint64_t)a2);
  }
  return result;
}

BOOL sub_2394D3354(double *a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  __int16 v7;
  __int16 v8;
  _BOOL4 v9;
  double *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL8 result;
  uint64_t v16;
  __int16 v18;
  __int16 v19;
  double *v20;
  double *v21;
  double *v22;
  double *v23;
  double *v24;
  uint64_t v25;
  double v26[2];
  double v27[2];
  double v28[2];
  double v29[2];
  double v30[2];
  double v31[3];

  sub_2394D3638(a2, (uint64_t)v29, -0.0, 0.0);
  sub_2394D3638(a2, (uint64_t)v26, -1.0, 1.0);
  v4 = a1 + 6;
  v5 = sub_2394C24E8(a1, a1 + 2, a1 + 4, a1 + 6, a1 + 8, a1 + 10, a1 + 12, a1 + 14, a1 + 16);
  v7 = (int)v5 < 2 && SHIDWORD(v5) > 0;
  if ((((_DWORD)v5 == HIDWORD(v5)) & v7) != 0)
    v8 = 0;
  else
    v8 = 256;
  LOWORD(v25) = v8 | v7 ^ 1;
  v9 = sub_2394C286C((unsigned __int8 *)&v25);
  if (v9)
    v10 = a1 + 6;
  else
    v10 = a1 + 12;
  if (v9)
    v4 = a1 + 12;
  v21 = a1 + 2;
  v22 = a1 + 4;
  v25 = sub_2394C24E8(v29, v30, v31, v26, v27, v28, a1, a1 + 2, a1 + 4);
  v11 = sub_2394D37DC((unsigned int *)&v25);
  v23 = v4 + 2;
  v24 = v4 + 4;
  v25 = sub_2394C24E8(v29, v30, v31, v26, v27, v28, v4, v4 + 2, v4 + 4);
  v12 = sub_2394D37DC((unsigned int *)&v25);
  v20 = v10 + 4;
  v25 = sub_2394C24E8(v29, v30, v31, v26, v27, v28, v10, v10 + 2, v10 + 4);
  v13 = sub_2394D37DC((unsigned int *)&v25);
  v14 = v13;
  if (v11 == -1)
  {
    if (v12 == -1)
    {
      if (v13 != -1)
        goto LABEL_35;
      return 0;
    }
    if (!v12)
      goto LABEL_29;
  }
  else
  {
    if (v11)
    {
      result = 0;
      if (v11 != 1)
        return result;
      if (v12 != -1 && v12)
      {
        if (v12 != 1 || v14 == 1)
          return 0;
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    if (v12 == -1)
    {
      if (v13 == -1)
        goto LABEL_31;
      goto LABEL_35;
    }
    if (!v12)
    {
LABEL_30:
      if (v14 != 1)
      {
LABEL_31:
        v16 = sub_2394C24E8(a1, v21, v22, v10, v10 + 2, v20, v29, v30, v31);
        goto LABEL_36;
      }
LABEL_35:
      v16 = sub_2394C24E8(v10, v10 + 2, v20, v4, v23, v24, v29, v30, v31);
      goto LABEL_36;
    }
  }
  if (v12 != 1)
    return 0;
LABEL_29:
  v16 = sub_2394C24E8(v4, v23, v24, a1, v21, v22, v29, v30, v31);
LABEL_36:
  v18 = (int)v16 < 2 && SHIDWORD(v16) > 0;
  if ((((_DWORD)v16 == HIDWORD(v16)) & v18) != 0)
    v19 = 0;
  else
    v19 = 256;
  LOWORD(v25) = v19 | v18 ^ 1;
  return sub_2394C286C((unsigned __int8 *)&v25);
}

void sub_2394D3638(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  BOOL v8;
  __int16 v9;
  __int16 v10;
  __int128 v11;
  BOOL v12;
  __int16 v13;
  __int16 v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34[2];
  double v35[2];
  double v36[2];
  double v37[2];

  v37[0] = a3;
  v37[1] = a4;
  v8 = a3 == 0.0;
  if (a4 != 0.0)
    v8 = 0;
  v9 = a4 >= 0.0 && a3 >= 0.0 && v8;
  if (a4 >= 0.0 && a3 >= 0.0)
    v10 = 256;
  else
    v10 = 0;
  LOWORD(v34[0]) = v10 | v9;
  if (sub_2394C286C((unsigned __int8 *)v34))
  {
    v11 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  }
  else
  {
    v12 = a4 == 1.0;
    if (a3 != -1.0)
      v12 = 0;
    v13 = a4 >= 1.0 && a3 >= -1.0 && v12;
    if (a4 >= 1.0 && a3 >= -1.0)
      v14 = 256;
    else
      v14 = 0;
    LOWORD(v34[0]) = v14 | v13;
    if (sub_2394C286C((unsigned __int8 *)v34))
    {
      v15 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a2 + 16) = v15;
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 80);
    }
    else
    {
      v16 = *(double *)(a1 + 56) + *(double *)a1;
      v17 = *(double *)(a1 + 24) + *(double *)(a1 + 64);
      v18 = *(double *)(a1 + 72) + *(double *)(a1 + 16);
      v19 = *(double *)(a1 + 40) + *(double *)(a1 + 80);
      v20 = *(double *)(a1 + 88) + *(double *)(a1 + 32);
      v34[0] = *(double *)(a1 + 8) + *(double *)(a1 + 48);
      v34[1] = v16;
      v35[0] = v17;
      v35[1] = v18;
      v36[0] = v19;
      v36[1] = v20;
      v21 = sub_2394C2734(v37, v34);
      v23 = v22;
      v24 = sub_2394C2734(v37, v35);
      v26 = v25;
      v27 = sub_2394C2734(v37, v36);
      v28 = *(double *)(a1 + 8) + v23;
      v29 = *(double *)(a1 + 16) + v24;
      v30 = *(double *)(a1 + 24) + v26;
      v31 = *(double *)(a1 + 32) + v27;
      v33 = *(double *)(a1 + 40) + v32;
      *(double *)a2 = *(double *)a1 + v21;
      *(double *)(a2 + 8) = v28;
      *(double *)(a2 + 16) = v29;
      *(double *)(a2 + 24) = v30;
      *(double *)(a2 + 32) = v31;
      *(double *)(a2 + 40) = v33;
    }
  }
}

uint64_t sub_2394D37DC(unsigned int *a1)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string v4;

  result = *a1;
  if ((_DWORD)result != a1[1])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_23941A4FC(&v4, "Undecidable conversion of CGAL::Uncertain<T>");
    std::runtime_error::runtime_error(exception, &v4);
    exception->__vftable = (std::runtime_error_vtbl *)&off_250ADCD18;
    __cxa_throw(exception, (struct type_info *)&unk_250ADCCF0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_2394D3870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

BOOL sub_2394D38A8(unint64_t a1, unint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  int v10;
  int v11;
  _BOOL8 v12;
  void *v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _DWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _DWORD *v25;
  uint64_t v26;
  void *v27[4];
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD v38[48];
  void *v39[4];
  void *v40;
  void *v41;
  void *v42[4];
  void *v43;
  void *v44;
  void *v45[4];
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _DWORD *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  _DWORD *v54;
  uint64_t v55;
  void *v56[4];
  void *v57;
  void *v58;
  void *v59[4];
  void *v60;
  void *v61;
  void *v62[4];
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  _DWORD *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _DWORD *v71;
  uint64_t v72;
  void *v73[4];
  void *v74;
  void *v75;
  void *v76[4];
  void *v77;
  void *v78;
  void *v79[4];
  void *v80;
  void *v81;
  char v82;
  void *v83;
  void *v84;
  void *__p;
  void *v86;

  v4 = operator new(4uLL);
  *v4 = 0;
  v67 = v4 + 1;
  v68 = 0;
  v65 = v4;
  v66 = v4;
  v5 = operator new(4uLL);
  v82 = 0;
  v69 = v5;
  v71 = v5 + 1;
  *v5 = 1;
  v72 = 0;
  v70 = (char *)v5 + 2;
  sub_2394D5E6C(&v83, (uint64_t)&v65);
  sub_2394D4FAC(a2, (unint64_t)&v83, v73);
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  v6 = operator new(4uLL);
  *v6 = 1;
  v50 = v6 + 1;
  v51 = 0;
  v48 = v6;
  v49 = (char *)v6 + 2;
  v7 = operator new(4uLL);
  v52 = v7;
  v54 = v7 + 1;
  *v7 = 1;
  v55 = 0;
  v53 = (char *)v7 + 2;
  sub_2394D5E6C(&v83, (uint64_t)&v48);
  sub_2394D4FAC(a2, (unint64_t)&v83, v56);
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  sub_2394D4258(a2, v27);
  sub_2394D6D8C(&v83, a1, (unint64_t)v27);
  sub_2394D6FFC(v38, (uint64_t)&v83);
  sub_2394D6F1C((uint64_t)&v83);
  v8 = operator new(4uLL);
  *v8 = 1;
  v21 = v8 + 1;
  v22 = 0;
  v19 = v8;
  v20 = (char *)v8 + 2;
  v9 = operator new(4uLL);
  v23 = v9;
  v25 = v9 + 1;
  v26 = 0;
  *v9 = 1;
  v24 = (char *)v9 + 2;
  sub_2394D5E6C(&v83, (uint64_t)&v19);
  sub_2394D4FAC((unint64_t)v38, (unint64_t)&v83, v39);
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  v17 = a1 + 512;
  v18 = a1 + 448;
  v10 = sub_2394D5F80(a1, a1 + 64, a1 + 128, a1 + 192, a1 + 256, a1 + 320, a1 + 384, a1 + 448, a1 + 512, (uint64_t)v39, (uint64_t)v42, (uint64_t)v45);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  sub_2394D6F1C((uint64_t)v38);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v16 = a1 + 384;
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  if (!v10)
  {
    if (!sub_2394D5F80(a1, a1 + 64, a1 + 128, a1 + 192, a1 + 256, a1 + 320, v16, v18, v17, (uint64_t)v73, (uint64_t)v76, (uint64_t)v79))
    {
      v12 = sub_2394D4468(a1, a2);
      v13 = v63;
      if (!v63)
        goto LABEL_73;
LABEL_72:
      v64 = v13;
      operator delete(v13);
      goto LABEL_73;
    }
    goto LABEL_71;
  }
  v11 = sub_2394D5F80(a1, a1 + 64, a1 + 128, a1 + 192, a1 + 256, a1 + 320, v16, v18, v17, (uint64_t)v73, (uint64_t)v76, (uint64_t)v79);
  if (v11 == -1)
  {
    if (v10 == 1
      && sub_2394D5F80((unint64_t)v56, (unint64_t)v59, (unint64_t)v62, (uint64_t)v73, (uint64_t)v76, (uint64_t)v79, a1, a1 + 64, a1 + 128, a1 + 192, a1 + 256, a1 + 320) != 1&& sub_2394D5F80((unint64_t)v56, (unint64_t)v59, (unint64_t)v62, (uint64_t)v73, (uint64_t)v76, (uint64_t)v79,
                         a1 + 192,
                         a1 + 256,
                         a1 + 320,
                         v16,
                         v18,
                         v17) != 1)
    {
      goto LABEL_63;
    }
    goto LABEL_71;
  }
  if (!v11)
  {
    if (v10 == -1)
    {
      if (sub_2394D5F80((unint64_t)v73, (unint64_t)v76, (unint64_t)v79, (uint64_t)v56, (uint64_t)v59, (uint64_t)v62, a1, a1 + 64, a1 + 128, a1 + 192, a1 + 256, a1 + 320) != 1&& sub_2394D5F80((unint64_t)v73, (unint64_t)v76, (unint64_t)v79, (uint64_t)v56, (uint64_t)v59, (uint64_t)v62,
                           a1 + 192,
                           a1 + 256,
                           a1 + 320,
                           v16,
                           v18,
                           v17) != 1)
      {
        goto LABEL_96;
      }
    }
    else if (v10 == 1
           && sub_2394D5F80((unint64_t)v56, (unint64_t)v59, (unint64_t)v62, (uint64_t)v73, (uint64_t)v76, (uint64_t)v79, a1, a1 + 64, a1 + 128, a1 + 192, a1 + 256, a1 + 320) != 1&& sub_2394D5F80((unint64_t)v56, (unint64_t)v59, (unint64_t)v62, (uint64_t)v73, (uint64_t)v76, (uint64_t)v79,
                              a1 + 192,
                              a1 + 256,
                              a1 + 320,
                              v16,
                              v18,
                              v17) != 1)
    {
LABEL_63:
      v14 = sub_2394D5F80((unint64_t)v56, (unint64_t)v59, (unint64_t)v62, (uint64_t)v73, (uint64_t)v76, (uint64_t)v79, v16, v18, v17, a1, a1 + 64, a1 + 128);
      goto LABEL_97;
    }
LABEL_71:
    v12 = 0;
    v13 = v63;
    if (!v63)
      goto LABEL_73;
    goto LABEL_72;
  }
  if (v11 != 1
    || v10 != -1
    || sub_2394D5F80((unint64_t)v73, (unint64_t)v76, (unint64_t)v79, (uint64_t)v56, (uint64_t)v59, (uint64_t)v62, a1, a1 + 64, a1 + 128, a1 + 192, a1 + 256, a1 + 320) == 1|| sub_2394D5F80((unint64_t)v73, (unint64_t)v76, (unint64_t)v79, (uint64_t)v56, (uint64_t)v59, (uint64_t)v62,
                       a1 + 192,
                       a1 + 256,
                       a1 + 320,
                       v16,
                       v18,
                       v17) == 1)
  {
    goto LABEL_71;
  }
LABEL_96:
  v14 = sub_2394D5F80((unint64_t)v73, (unint64_t)v76, (unint64_t)v79, (uint64_t)v56, (uint64_t)v59, (uint64_t)v62, v16, v18, v17, a1, a1 + 64, a1 + 128);
LABEL_97:
  v12 = v14 != 1;
  v13 = v63;
  if (v63)
    goto LABEL_72;
LABEL_73:
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (v79[0])
  {
    v79[1] = v79[0];
    operator delete(v79[0]);
  }
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  return v12;
}

void sub_2394D40B0(_Unwind_Exception *a1)
{
  sub_2394D43E8((uint64_t)&STACK[0x3C0]);
  sub_2394D43E8((uint64_t)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

void sub_2394D4160(_Unwind_Exception *a1)
{
  sub_2394D4218((uint64_t)&STACK[0x588]);
  sub_2394D4218((uint64_t)&STACK[0x380]);
  sub_2394D43E8((uint64_t)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

void sub_2394D4184(_Unwind_Exception *a1)
{
  sub_2394D4218((uint64_t)&STACK[0x380]);
  sub_2394D43E8((uint64_t)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

void sub_2394D41A0(_Unwind_Exception *a1)
{
  void *v1;

  STACK[0x388] = (unint64_t)v1;
  operator delete(v1);
  sub_2394D43E8((uint64_t)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

void sub_2394D41C0(_Unwind_Exception *a1)
{
  sub_2394D43E8((uint64_t)&STACK[0x4C0]);
  _Unwind_Resume(a1);
}

void sub_2394D41D4(_Unwind_Exception *a1)
{
  sub_2394D4218((uint64_t)&STACK[0x588]);
  sub_2394D4218((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

void sub_2394D41F0(_Unwind_Exception *a1)
{
  sub_2394D4218((uint64_t)&STACK[0x480]);
  _Unwind_Resume(a1);
}

void sub_2394D4204(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D4218(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_2394D4258(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  sub_2394D59FC(a1, a1 + 192, &v21);
  *(_OWORD *)v3 = v21;
  v4 = v22;
  v5 = v23;
  *(_OWORD *)v6 = v24;
  v7 = v25;
  v8 = v26;
  *(_OWORD *)v9 = v27;
  v10 = v28;
  v11 = v29;
  *(_OWORD *)v12 = v30;
  v13 = v31;
  v14 = v32;
  *(_OWORD *)v15 = v33;
  v16 = v34;
  v17 = v35;
  *(_OWORD *)__p = v36;
  v19 = v37;
  v20 = v38;
  sub_2394D5E6C(a2, (uint64_t)v3);
  sub_2394D5E6C(a2 + 8, (uint64_t)v9);
  sub_2394D5E6C(a2 + 16, (uint64_t)v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_2394D43B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394D43E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394D43C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239EBFF1C();
  sub_2394D43E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D43E8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(_QWORD *)(a1 + 168) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(_QWORD *)(a1 + 136) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(_QWORD *)(a1 + 104) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(_QWORD *)(a1 + 72) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

BOOL sub_2394D4468(unint64_t a1, unint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;
  _BOOL8 v16;
  void *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  void *v24;
  _DWORD *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _DWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *__p;
  void *v34;
  void *v35[4];
  void *v36;
  void *v37;
  void *v38[4];
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  _DWORD *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _DWORD *v47;
  uint64_t v48;
  void *v49[4];
  void *v50;
  void *v51;
  void *v52[4];
  void *v53;
  void *v54;
  void *v55[4];
  void *v56;
  void *v57;
  void *v58[4];
  void *v59;
  void *v60;

  v4 = operator new(4uLL);
  *v4 = 0;
  v43 = v4 + 1;
  v44 = 0;
  v41 = v4;
  v42 = v4;
  v5 = operator new(4uLL);
  v45 = v5;
  v47 = v5 + 1;
  v48 = 0;
  *v5 = 1;
  v46 = (char *)v5 + 2;
  sub_2394D5E6C(&v31, (uint64_t)&v41);
  sub_2394D4FAC(a2, (unint64_t)&v31, v49);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  v6 = operator new(4uLL);
  *v6 = 1;
  v25 = v6 + 1;
  v26 = 0;
  v23 = v6;
  v24 = (char *)v6 + 2;
  v7 = operator new(4uLL);
  v27 = v7;
  v29 = v7 + 1;
  v30 = 0;
  *v7 = 1;
  v28 = (char *)v7 + 2;
  sub_2394D5E6C(v58, (uint64_t)&v23);
  sub_2394D4FAC(a2, (unint64_t)v58, &v31);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  v8 = sub_2394D70D4(a1, a1 + 64, a1 + 192, a1 + 256, a1 + 384, a1 + 448);
  v21 = a1 + 128;
  if (!v8)
  {
    v8 = sub_2394D70D4(a1 + 64, v21, a1 + 256, a1 + 320, a1 + 448, a1 + 512);
    if (!v8)
      v8 = sub_2394D70D4(a1, v21, a1 + 192, a1 + 320, a1 + 384, a1 + 512);
  }
  if (v8 == 1)
    v9 = a1 + 192;
  else
    v9 = a1 + 384;
  v22 = v9;
  if (v8 == 1)
    v10 = a1 + 384;
  else
    v10 = a1 + 192;
  v11 = sub_2394D70D4((unint64_t)v49, (unint64_t)v52, (uint64_t)&v31, (uint64_t)v35, a1, a1 + 64);
  if (!v11)
  {
    v11 = sub_2394D70D4((unint64_t)v52, (unint64_t)v55, (uint64_t)v35, (uint64_t)v38, a1 + 64, v21);
    if (!v11)
      v11 = sub_2394D70D4((unint64_t)v49, (unint64_t)v55, (uint64_t)&v31, (uint64_t)v38, a1, v21);
  }
  v20 = v22 + 64;
  v12 = sub_2394D70D4((unint64_t)v49, (unint64_t)v52, (uint64_t)&v31, (uint64_t)v35, v22, v22 + 64);
  v13 = v22 + 128;
  if (!v12)
  {
    v12 = sub_2394D70D4((unint64_t)v52, (unint64_t)v55, (uint64_t)v35, (uint64_t)v38, v20, v13);
    if (!v12)
      v12 = sub_2394D70D4((unint64_t)v49, (unint64_t)v55, (uint64_t)&v31, (uint64_t)v38, v22, v13);
  }
  v14 = sub_2394D70D4((unint64_t)v49, (unint64_t)v52, (uint64_t)&v31, (uint64_t)v35, v10, v10 + 64);
  v19 = v10 + 128;
  if (!v14)
  {
    v14 = sub_2394D70D4((unint64_t)v52, (unint64_t)v55, (uint64_t)v35, (uint64_t)v38, v10 + 64, v19);
    if (!v14)
      v14 = sub_2394D70D4((unint64_t)v49, (unint64_t)v55, (uint64_t)&v31, (uint64_t)v38, v10, v19);
  }
  if (v11 == -1)
  {
    if (v12 == -1)
    {
      if (v14 == -1)
        goto LABEL_71;
      v15 = sub_2394D70D4(v10, v10 + 64, v22, v20, (uint64_t)v49, (uint64_t)v52);
      if (v15)
        goto LABEL_106;
      v15 = sub_2394D70D4(v10 + 64, v19, v20, v13, (uint64_t)v52, (uint64_t)v55);
      if (v15)
        goto LABEL_106;
LABEL_84:
      v15 = sub_2394D70D4(v10, v19, v22, v13, (uint64_t)v49, (uint64_t)v55);
      goto LABEL_106;
    }
    if (v12)
    {
      if (v12 != 1)
        goto LABEL_71;
      if (v14 == 1)
      {
        v15 = sub_2394D70D4(v22, v20, a1, a1 + 64, (uint64_t)v49, (uint64_t)v52);
        if (v15)
          goto LABEL_106;
        v15 = sub_2394D70D4(v20, v13, a1 + 64, v21, (uint64_t)v52, (uint64_t)v55);
        if (v15)
          goto LABEL_106;
      }
      else
      {
        v15 = sub_2394D70D4(v22, v20, a1, a1 + 64, (uint64_t)v49, (uint64_t)v52);
        if (v15)
          goto LABEL_106;
        v15 = sub_2394D70D4(v20, v13, a1 + 64, v21, (uint64_t)v52, (uint64_t)v55);
        if (v15)
          goto LABEL_106;
      }
    }
    else if (v14 == -1)
    {
      v15 = sub_2394D70D4(v22, v20, a1, a1 + 64, (uint64_t)v49, (uint64_t)v52);
      if (v15)
        goto LABEL_106;
      v15 = sub_2394D70D4(v20, v13, a1 + 64, v21, (uint64_t)v52, (uint64_t)v55);
      if (v15)
        goto LABEL_106;
    }
    else
    {
      v15 = sub_2394D70D4(v22, v20, a1, a1 + 64, (uint64_t)v49, (uint64_t)v52);
      if (v15)
        goto LABEL_106;
      v15 = sub_2394D70D4(v20, v13, a1 + 64, v21, (uint64_t)v52, (uint64_t)v55);
      if (v15)
        goto LABEL_106;
    }
LABEL_102:
    v15 = sub_2394D70D4(v22, v13, a1, v21, (uint64_t)v49, (uint64_t)v55);
    goto LABEL_106;
  }
  if (!v11)
  {
    if (v12 == -1)
    {
      if (v14 == -1)
      {
        v15 = sub_2394D70D4(a1, a1 + 64, v10, v10 + 64, (uint64_t)v49, (uint64_t)v52);
        if (!v15)
        {
          v15 = sub_2394D70D4(a1 + 64, v21, v10 + 64, v19, (uint64_t)v52, (uint64_t)v55);
          if (!v15)
            goto LABEL_105;
        }
        goto LABEL_106;
      }
      v15 = sub_2394D70D4(v10, v10 + 64, v22, v20, (uint64_t)v49, (uint64_t)v52);
      if (v15)
        goto LABEL_106;
      v15 = sub_2394D70D4(v10 + 64, v19, v20, v13, (uint64_t)v52, (uint64_t)v55);
      if (v15)
        goto LABEL_106;
      goto LABEL_84;
    }
    if (!v12)
    {
      if (v14 != 1)
      {
        v15 = sub_2394D70D4(a1, a1 + 64, v10, v10 + 64, (uint64_t)v49, (uint64_t)v52);
        if (!v15)
        {
          v15 = sub_2394D70D4(a1 + 64, v21, v10 + 64, v19, (uint64_t)v52, (uint64_t)v55);
          if (!v15)
            goto LABEL_105;
        }
        goto LABEL_106;
      }
      v15 = sub_2394D70D4(v10, v10 + 64, v22, v20, (uint64_t)v49, (uint64_t)v52);
      if (v15)
        goto LABEL_106;
      v15 = sub_2394D70D4(v10 + 64, v19, v20, v13, (uint64_t)v52, (uint64_t)v55);
      if (v15)
        goto LABEL_106;
      goto LABEL_84;
    }
    if (v12 != 1)
      goto LABEL_71;
    if (v14 == 1)
    {
      v15 = sub_2394D70D4(v22, v20, a1, a1 + 64, (uint64_t)v49, (uint64_t)v52);
      if (v15)
        goto LABEL_106;
      v15 = sub_2394D70D4(v20, v13, a1 + 64, v21, (uint64_t)v52, (uint64_t)v55);
      if (v15)
        goto LABEL_106;
    }
    else
    {
      v15 = sub_2394D70D4(v22, v20, a1, a1 + 64, (uint64_t)v49, (uint64_t)v52);
      if (v15)
        goto LABEL_106;
      v15 = sub_2394D70D4(v20, v13, a1 + 64, v21, (uint64_t)v52, (uint64_t)v55);
      if (v15)
        goto LABEL_106;
    }
    goto LABEL_102;
  }
  if (v11 != 1)
    goto LABEL_71;
  if (v12 == -1)
  {
    if (v14 != 1)
    {
      v15 = sub_2394D70D4(a1, a1 + 64, v10, v10 + 64, (uint64_t)v49, (uint64_t)v52);
      if (!v15)
      {
        v15 = sub_2394D70D4(a1 + 64, v21, v10 + 64, v19, (uint64_t)v52, (uint64_t)v55);
        if (!v15)
          goto LABEL_105;
      }
      goto LABEL_106;
    }
    v15 = sub_2394D70D4(v10, v10 + 64, v22, v20, (uint64_t)v49, (uint64_t)v52);
    if (v15)
      goto LABEL_106;
    v15 = sub_2394D70D4(v10 + 64, v19, v20, v13, (uint64_t)v52, (uint64_t)v55);
    if (v15)
      goto LABEL_106;
    goto LABEL_84;
  }
  if (!v12)
  {
    if (v14 != 1)
    {
      v15 = sub_2394D70D4(a1, a1 + 64, v10, v10 + 64, (uint64_t)v49, (uint64_t)v52);
      if (!v15)
      {
        v15 = sub_2394D70D4(a1 + 64, v21, v10 + 64, v19, (uint64_t)v52, (uint64_t)v55);
        if (!v15)
          goto LABEL_105;
      }
      goto LABEL_106;
    }
    v15 = sub_2394D70D4(v10, v10 + 64, v22, v20, (uint64_t)v49, (uint64_t)v52);
    if (v15)
      goto LABEL_106;
    v15 = sub_2394D70D4(v10 + 64, v19, v20, v13, (uint64_t)v52, (uint64_t)v55);
    if (v15)
      goto LABEL_106;
    goto LABEL_84;
  }
  if (v12 == 1 && v14 != 1)
  {
    v15 = sub_2394D70D4(a1, a1 + 64, v10, v10 + 64, (uint64_t)v49, (uint64_t)v52);
    if (!v15)
    {
      v15 = sub_2394D70D4(a1 + 64, v21, v10 + 64, v19, (uint64_t)v52, (uint64_t)v55);
      if (!v15)
LABEL_105:
        v15 = sub_2394D70D4(a1, v21, v10, v19, (uint64_t)v49, (uint64_t)v55);
    }
LABEL_106:
    v16 = v15 != 1;
    v17 = v39;
    if (!v39)
      goto LABEL_108;
    goto LABEL_107;
  }
LABEL_71:
  v16 = 0;
  v17 = v39;
  if (v39)
  {
LABEL_107:
    v40 = v17;
    operator delete(v17);
  }
LABEL_108:
  if (v38[0])
  {
    v38[1] = v38[0];
    operator delete(v38[0]);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
  return v16;
}

void sub_2394D4ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  sub_2394D4218(v54 - 152);
  sub_2394D4218((uint64_t)&a14);
  sub_2394D43E8((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_2394D4EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_2394D4218((uint64_t)&a14);
  sub_2394D43E8((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_2394D4F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;

  operator delete(v54);
  sub_2394D43E8((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_2394D4F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_2394D43E8((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_2394D4F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_2394D4218((uint64_t)&a22);
  sub_2394D4218((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_2394D4F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  sub_2394D4218((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_2394D4F70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D4F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_2394D43E8((uint64_t)&a22);
  sub_2394D43E8((uint64_t)&a54);
  _Unwind_Resume(a1);
}

void sub_2394D4FAC(unint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v6;
  _DWORD *v7;
  _BOOL4 v8;
  _DWORD *v9;
  _DWORD *v10;
  _BOOL4 v11;
  void *v12[4];
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _DWORD *v25;
  uint64_t v26;
  void *__p;
  void *v28;
  _DWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  v6 = operator new(4uLL);
  *v6 = 0;
  v25 = v6 + 1;
  v26 = 0;
  v23 = v6;
  v24 = v6;
  v7 = operator new(4uLL);
  __p = v7;
  v29 = v7 + 1;
  v30 = 0;
  *v7 = 1;
  v28 = (char *)v7 + 2;
  v8 = sub_2394D52F8(a2, (double *)&v23);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v8)
  {
    sub_2394D5E6C(a3, a1);
    sub_2394D5E6C(a3 + 8, a1 + 64);
    sub_2394D5E6C(a3 + 16, a1 + 128);
  }
  else
  {
    v9 = operator new(4uLL);
    *v9 = 1;
    v25 = v9 + 1;
    v26 = 0;
    v23 = v9;
    v24 = (char *)v9 + 2;
    v28 = 0;
    v29 = 0;
    __p = 0;
    v10 = operator new(4uLL);
    __p = v10;
    v29 = v10 + 1;
    v30 = 0;
    *v10 = 1;
    v28 = (char *)v10 + 2;
    v11 = sub_2394D52F8(a2, (double *)&v23);
    if (__p)
    {
      v28 = __p;
      operator delete(__p);
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (v11)
    {
      sub_2394D5E6C(a3, a1 + 192);
      sub_2394D5E6C(a3 + 8, a1 + 256);
      sub_2394D5E6C(a3 + 16, a1 + 320);
    }
    else
    {
      sub_2394D59FC(a1, a1 + 192, v12);
      sub_2394D5824((double *)v12, a2, (uint64_t)&v23);
      sub_2394D53D8(a1, (unint64_t)&v23, (uint64_t)a3);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        v36 = v35;
        operator delete(v35);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (__p)
      {
        v28 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        v24 = v23;
        operator delete(v23);
      }
      if (v21)
      {
        v22 = v21;
        operator delete(v21);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        v14 = v13;
        operator delete(v13);
      }
      if (v12[0])
      {
        v12[1] = v12[0];
        operator delete(v12[0]);
      }
    }
  }
}

void sub_2394D5244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_2394D43E8((uint64_t)&a34);
  sub_2394D43E8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_2394D5260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394D43E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D5274(_Unwind_Exception *a1)
{
  sub_239EBFF1C();
  _Unwind_Resume(a1);
}

void sub_2394D528C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_2394D4218((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_2394D52A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  void *v35;

  operator delete(v35);
  _Unwind_Resume(a1);
}

void sub_2394D52B8(_Unwind_Exception *a1)
{
  sub_239EBFF1C();
  _Unwind_Resume(a1);
}

void sub_2394D52D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_2394D4218((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_2394D52E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2394D52F8(unint64_t a1, double *a2)
{
  void *v4;
  void *v5;
  _BYTE *v6;
  _BOOL8 v7;
  _BYTE *v9;
  _BYTE *v10;
  double v11;
  void *v12;
  void *v13;
  double v14;

  sub_2394C2EC8(a1, a2 + 4, (uint64_t)&v12);
  sub_2394C2EC8(a1 + 32, a2, (uint64_t)&v9);
  v4 = v12;
  v5 = v13;
  v6 = v9;
  if ((_BYTE *)v13 - (_BYTE *)v12 == v10 - v9 && !memcmp(v12, v9, (_BYTE *)v13 - (_BYTE *)v12))
    v7 = v4 == v5 || v14 == v11;
  else
    v7 = 0;
  if (v6)
  {
    v10 = v6;
    operator delete(v6);
    v4 = v12;
  }
  if (v4)
  {
    v13 = v4;
    operator delete(v4);
  }
  return v7;
}

void sub_2394D53BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2394D53D8(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v6[4];
  void *__p;
  void *v8;
  void *v9[4];
  void *v10;
  void *v11;
  void *v12[4];
  void *v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  sub_2394D5E6C(v12, a1);
  sub_2394D56D8((unint64_t)v12, a2);
  sub_2394D5E6C(v9, a1 + 64);
  sub_2394D56D8((unint64_t)v9, a2 + 64);
  sub_2394D5E6C(v6, a1 + 128);
  sub_2394D56D8((unint64_t)v6, a2 + 128);
  sub_2394D55C4((uint64_t)&v15, (uint64_t)v12, (uint64_t)v9, (uint64_t)v6);
  *(_OWORD *)a3 = v15;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v17;
  *(_OWORD *)(a3 + 32) = v18;
  *(_QWORD *)(a3 + 48) = v19;
  *(_QWORD *)(a3 + 56) = v20;
  *(_OWORD *)(a3 + 64) = v21;
  *(_QWORD *)(a3 + 80) = v22;
  *(_QWORD *)(a3 + 88) = v23;
  *(_OWORD *)(a3 + 96) = v24;
  *(_QWORD *)(a3 + 112) = v25;
  *(_QWORD *)(a3 + 120) = v26;
  *(_OWORD *)(a3 + 128) = v27;
  *(_QWORD *)(a3 + 144) = v28;
  *(_QWORD *)(a3 + 152) = v29;
  *(_OWORD *)(a3 + 160) = v30;
  *(_QWORD *)(a3 + 176) = v31;
  *(_QWORD *)(a3 + 184) = v32;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_2394D5554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_2394D4218((uint64_t)&a9);
  sub_2394D4218((uint64_t)&a17);
  sub_2394D4218((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_2394D557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_2394D4218((uint64_t)va);
  sub_2394D4218((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2394D559C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2394D4218((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D55B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_2394D4218((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D55C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  sub_2394D5E6C(&v8, a2);
  sub_2394D5E6C(&v14, a3);
  sub_2394D5E6C(&v20, a4);
  *(_OWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v16;
  *(_OWORD *)(a1 + 96) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_OWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 144) = v21;
  *(_QWORD *)(a1 + 152) = v22;
  *(_OWORD *)(a1 + 160) = v23;
  *(_QWORD *)(a1 + 176) = v24;
  *(_QWORD *)(a1 + 184) = v25;
  return a1;
}

void sub_2394D56C0(_Unwind_Exception *a1)
{
  sub_239EBFF1C();
  _Unwind_Resume(a1);
}

unint64_t sub_2394D56D8(unint64_t a1, unint64_t a2)
{
  double *v4;
  void **v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *__p[4];
  void *v11[4];
  __int128 v12;
  uint64_t v13;
  double v14;

  v4 = (double *)(a2 + 32);
  sub_2394C2EC8(a1, (double *)(a2 + 32), (uint64_t)v11);
  v5 = (void **)(a1 + 32);
  sub_2394C2EC8(a2, (double *)(a1 + 32), (uint64_t)__p);
  sub_2394C50E8((uint64_t)v11, (uint64_t)__p, &v12);
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v13;
  v13 = 0;
  v12 = 0uLL;
  *(double *)(a1 + 24) = v14;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  sub_2394C2EC8(a1 + 32, v4, (uint64_t)&v12);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a1 + 32) = v12;
  v8 = v13;
  *(double *)(a1 + 24) = *(double *)(a1 + 24) - v14;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_2394D57D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  void *v15;

  if (__p)
  {
    operator delete(__p);
    v15 = a13;
    if (!a13)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v15 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_2394D5824(double *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *v6[4];
  void *__p;
  void *v8;
  void *v9[4];
  void *v10;
  void *v11;
  void *v12[4];
  void *v13;
  void *v14;

  sub_2394D5938(a2, a1, (unint64_t)v12);
  sub_2394D5938(a2, a1 + 8, (unint64_t)v9);
  sub_2394D5938(a2, a1 + 16, (unint64_t)v6);
  sub_2394D55C4(a3, (uint64_t)v12, (uint64_t)v9, (uint64_t)v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_2394D58F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_2394D4218((uint64_t)&a9);
  sub_2394D4218((uint64_t)&a17);
  sub_2394D4218(v17 - 96);
  _Unwind_Resume(a1);
}

void sub_2394D5924(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 96);
  _Unwind_Resume(a1);
}

double sub_2394D5938@<D0>(uint64_t a1@<X0>, double *a2@<X1>, unint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  uint64_t v7;
  double result;
  __int128 v9;
  uint64_t v10;
  double v11;

  sub_2394D5E6C((_QWORD *)a3, a1);
  sub_2394C2EC8(a3, a2, (uint64_t)&v9);
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v5;
    operator delete(v5);
  }
  *(_OWORD *)a3 = v9;
  *(_QWORD *)(a3 + 16) = v10;
  *(double *)(a3 + 24) = v11;
  sub_2394C2EC8(a3 + 32, a2 + 4, (uint64_t)&v9);
  v6 = *(void **)(a3 + 32);
  if (v6)
  {
    *(_QWORD *)(a3 + 40) = v6;
    operator delete(v6);
  }
  *(_OWORD *)(a3 + 32) = v9;
  v7 = v10;
  result = *(double *)(a3 + 24) - v11;
  *(double *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 48) = v7;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

void sub_2394D59E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1);
  _Unwind_Resume(a1);
}

void sub_2394D59FC(unint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  void *v4[4];
  void *v5;
  void *v6;
  void *v7[4];
  void *v8;
  void *v9;
  void *v10[4];
  void *__p;
  void *v12;

  sub_2394D5AF8(a1, a2, v4);
  sub_2394D5E6C(a3, (uint64_t)v4);
  sub_2394D5E6C(a3 + 8, (uint64_t)v7);
  sub_2394D5E6C(a3 + 16, (uint64_t)v10);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  if (v4[0])
  {
    v4[1] = v4[0];
    operator delete(v4[0]);
  }
}

void sub_2394D5AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394D43E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394D5AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239EBFF1C();
  sub_2394D43E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394D5AF8(unint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  void *v7[4];
  void *__p;
  void *v9;
  void *v10[4];
  void *v11;
  void *v12;
  void *v13[4];
  void *v14;
  void *v15;

  v6 = sub_2394D5E6C(v13, a2);
  sub_2394D5C80((unint64_t)v6, a1);
  sub_2394D5E6C(v10, a2 + 64);
  sub_2394D5C80((unint64_t)v10, a1 + 64);
  sub_2394D5E6C(v7, a2 + 128);
  sub_2394D5C80((unint64_t)v7, a1 + 128);
  sub_2394D5E6C(a3, (uint64_t)v13);
  sub_2394D5E6C(a3 + 8, (uint64_t)v10);
  sub_2394D5E6C(a3 + 16, (uint64_t)v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_2394D5BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_2394D4218((uint64_t)&a9);
  sub_2394D4218((uint64_t)&a17);
  sub_2394D4218(v17 - 96);
  _Unwind_Resume(a1);
}

unint64_t sub_2394D5C80(unint64_t a1, unint64_t a2)
{
  double *v4;
  void **v5;
  void *v6;
  void *v7;
  char *v8;
  void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  void *__p;
  void *v15;
  void *v16;
  _BYTE *v17;
  double v18;
  __int128 v19;
  char *v20;
  double v21;

  v4 = (double *)(a2 + 32);
  sub_2394C2EC8(a1, (double *)(a2 + 32), (uint64_t)&v16);
  v5 = (void **)(a1 + 32);
  sub_2394C2EC8(a2, (double *)(a1 + 32), (uint64_t)&__p);
  if (__p != v15)
  {
    sub_2394C3324((double *)&v16, (double *)&__p, (uint64_t)&v19);
    v6 = *(void **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  v19 = 0uLL;
  v20 = 0;
  v10 = v16;
  v11 = v17 - (_BYTE *)v16;
  if (v17 != v16)
  {
    if (v11 < 0)
      sub_2394189F8();
    v12 = (char *)operator new(v17 - (_BYTE *)v16);
    v13 = &v12[2 * (v11 >> 1)];
    *(_QWORD *)&v19 = v12;
    v20 = v13;
    memcpy(v12, v10, v11);
    *((_QWORD *)&v19 + 1) = v13;
  }
  v21 = v18;
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
LABEL_3:
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
LABEL_4:
  *(_OWORD *)a1 = v19;
  *(_QWORD *)(a1 + 16) = v20;
  v20 = 0;
  v19 = 0uLL;
  *(double *)(a1 + 24) = v21;
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  sub_2394C2EC8(a1 + 32, v4, (uint64_t)&v19);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(a1 + 40) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a1 + 32) = v19;
  v8 = v20;
  *(double *)(a1 + 24) = *(double *)(a1 + 24) - v21;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_2394D5DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v21;
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v21 = a10;
    if (!a10)
    {
LABEL_3:
      v22 = a14;
      if (!a14)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v21 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v21);
  v22 = a14;
  if (!a14)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394D5E6C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[2 * (v6 >> 1)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  v9 = *(_QWORD *)(a2 + 24);
  a1[4] = 0;
  a1[3] = v9;
  a1[5] = 0;
  a1[6] = 0;
  v11 = *(_BYTE **)(a2 + 32);
  v10 = *(_BYTE **)(a2 + 40);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_2394189F8();
    v13 = (char *)operator new(v10 - v11);
    a1[4] = v13;
    a1[5] = v13;
    v14 = &v13[2 * (v12 >> 1)];
    a1[6] = v14;
    memcpy(v13, v11, v12);
    a1[5] = v14;
  }
  a1[7] = *(_QWORD *)(a2 + 56);
  return a1;
}

void sub_2394D5F4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394D5F80(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v19;
  uint64_t v20;
  void *v22[4];
  void *__p;
  void *v24;
  void *v25[4];
  void *v26;
  void *v27;
  void *v28[4];
  void *v29;
  void *v30;
  void *v31[4];
  void *v32;
  void *v33;
  void *v34[4];
  void *v35;
  void *v36;
  void *v37[4];
  void *v38;
  void *v39;
  void *v40[4];
  void *v41;
  void *v42;
  void *v43[4];
  void *v44;
  void *v45;
  void *v46[4];
  void *v47;
  void *v48;
  void *v49[4];
  void *v50;
  void *v51;
  char v52;

  v19 = sub_2394D5E6C(v46, a4);
  sub_2394D5C80((unint64_t)v19, a1);
  sub_2394D5E6C(v43, a7);
  sub_2394D5C80((unint64_t)v43, a1);
  sub_2394D5E6C(v40, a10);
  sub_2394D5C80((unint64_t)v40, a1);
  sub_2394D5E6C(v37, a5);
  sub_2394D5C80((unint64_t)v37, a2);
  sub_2394D5E6C(v34, a8);
  sub_2394D5C80((unint64_t)v34, a2);
  sub_2394D5E6C(v31, a11);
  sub_2394D5C80((unint64_t)v31, a2);
  sub_2394D5E6C(v28, a6);
  sub_2394D5C80((unint64_t)v28, a3);
  sub_2394D5E6C(v25, a9);
  sub_2394D5C80((unint64_t)v25, a3);
  sub_2394D5E6C(v22, a12);
  sub_2394D5C80((unint64_t)v22, a3);
  sub_2394D6338((uint64_t)v46, (double *)v43, (double *)v40, (uint64_t)v37, (double *)v34, (double *)v31, (uint64_t)v28, (double *)v25, v49, (double *)v22);
  v20 = sub_2394D67B4((uint64_t)&v52, v49);
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v28[0])
  {
    v28[1] = v28[0];
    operator delete(v28[0]);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  return v20;
}

void sub_2394D622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  sub_2394D4218(v66 - 136);
  sub_2394D4218((uint64_t)&a10);
  sub_2394D4218((uint64_t)&a18);
  sub_2394D4218((uint64_t)&a26);
  sub_2394D4218((uint64_t)&a34);
  sub_2394D4218((uint64_t)&a42);
  sub_2394D4218((uint64_t)&a50);
  sub_2394D4218((uint64_t)&a58);
  sub_2394D4218((uint64_t)&a66);
  sub_2394D4218(v66 - 200);
  _Unwind_Resume(a1);
}

void sub_2394D62A0()
{
  JUMPOUT(0x2394D6260);
}

void sub_2394D62A8()
{
  JUMPOUT(0x2394D6260);
}

void sub_2394D62B0()
{
  JUMPOUT(0x2394D6268);
}

void sub_2394D62B8()
{
  JUMPOUT(0x2394D6268);
}

void sub_2394D62C0()
{
  JUMPOUT(0x2394D6270);
}

void sub_2394D62C8()
{
  JUMPOUT(0x2394D6270);
}

void sub_2394D62D0()
{
  JUMPOUT(0x2394D6278);
}

void sub_2394D62D8()
{
  JUMPOUT(0x2394D6278);
}

void sub_2394D62E0()
{
  JUMPOUT(0x2394D6280);
}

void sub_2394D62E8()
{
  JUMPOUT(0x2394D6280);
}

void sub_2394D62F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  sub_2394D4218((uint64_t)&a66);
  sub_2394D4218(v66 - 200);
  _Unwind_Resume(a1);
}

void sub_2394D6310(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_2394D6324(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_2394D6338(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, double *a5@<X4>, double *a6@<X5>, uint64_t a7@<X6>, double *a8@<X7>, _QWORD *a9@<X8>, double *a10)
{
  _QWORD *v19;
  _QWORD *v20;
  void *v21[4];
  void *v22;
  void *v23;
  void *v24[4];
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *__p;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43[4];
  void *v44;
  void *v45;

  sub_2394D5938(a1, a5, (unint64_t)&v39);
  sub_2394D5938(a4, a2, (unint64_t)&v35);
  v19 = sub_2394D5E6C(v43, (uint64_t)&v39);
  sub_2394D5C80((unint64_t)v19, (unint64_t)&v35);
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  sub_2394D5938(a1, a8, (unint64_t)&v35);
  sub_2394D5938(a7, a2, (unint64_t)&v31);
  v20 = sub_2394D5E6C(&v39, (uint64_t)&v35);
  sub_2394D5C80((unint64_t)v20, (unint64_t)&v31);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  sub_2394D5938(a4, a8, (unint64_t)&v31);
  sub_2394D5938(a7, a5, (unint64_t)&v27);
  sub_2394D5E6C(&v35, (uint64_t)&v31);
  sub_2394D5C80((unint64_t)&v35, (unint64_t)&v27);
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  sub_2394D5938((uint64_t)v43, a10, (unint64_t)&v27);
  sub_2394D5938((uint64_t)&v39, a6, (unint64_t)v24);
  sub_2394D5E6C(&v31, (uint64_t)&v27);
  sub_2394D5C80((unint64_t)&v31, (unint64_t)v24);
  sub_2394D5938((uint64_t)&v35, a3, (unint64_t)v21);
  sub_2394D5E6C(a9, (uint64_t)&v31);
  sub_2394D56D8((unint64_t)a9, (unint64_t)v21);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (__p)
  {
    v38 = __p;
    operator delete(__p);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v43[0])
  {
    v43[1] = v43[0];
    operator delete(v43[0]);
  }
}

void sub_2394D663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;
  uint64_t v42;

  sub_2394D4218(v41);
  sub_2394D4218((uint64_t)&a9);
  sub_2394D4218((uint64_t)&a33);
  sub_2394D4218((uint64_t)&a17);
  sub_2394D4218((uint64_t)&a25);
  sub_2394D4218((uint64_t)&a41);
  sub_2394D4218(v42 - 208);
  sub_2394D4218(v42 - 144);
  _Unwind_Resume(a1);
}

void sub_2394D66E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 208);
  sub_2394D4218(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_2394D66FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_2394D4218(v41 - 208);
  sub_2394D4218((uint64_t)&a33);
  sub_2394D4218((uint64_t)&a41);
  sub_2394D4218(v41 - 144);
  _Unwind_Resume(a1);
}

void sub_2394D6730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_2394D4218((uint64_t)&a41);
  sub_2394D4218(v41 - 144);
  _Unwind_Resume(a1);
}

void sub_2394D674C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_2394D6760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_2394D4218(v41 - 144);
  sub_2394D4218((uint64_t)&a41);
  sub_2394D4218(v41 - 208);
  _Unwind_Resume(a1);
}

void sub_2394D6784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_2394D4218((uint64_t)&a41);
  sub_2394D4218(v41 - 208);
  _Unwind_Resume(a1);
}

void sub_2394D67A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D67B4(uint64_t a1, _QWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  void *v10;
  void *v11;
  _DWORD *v12;
  uint64_t v13;
  void *__p;
  void *v15;
  _DWORD *v16;
  uint64_t v17;

  v3 = operator new(4uLL);
  *v3 = 0;
  v12 = v3 + 1;
  v13 = 0;
  v10 = v3;
  v11 = v3;
  v4 = operator new(4uLL);
  __p = v4;
  v16 = v4 + 1;
  v17 = 0;
  *v4 = 1;
  v15 = (char *)v4 + 2;
  v5 = sub_2394D6924(a2, &v10);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v5 == -1)
    return 0xFFFFFFFFLL;
  v6 = operator new(4uLL);
  *v6 = 0;
  v12 = v6 + 1;
  v13 = 0;
  v10 = v6;
  v11 = v6;
  v7 = operator new(4uLL);
  __p = v7;
  v16 = v7 + 1;
  v17 = 0;
  *v7 = 1;
  v15 = (char *)v7 + 2;
  v8 = sub_2394D6924(&v10, a2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return v8 == -1;
}

void sub_2394D68D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394D4218((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394D68E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D68FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394D4218((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394D6910(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D6924(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  _WORD *v21;
  __int16 v22;
  _WORD *v23;
  _WORD *v24;
  _WORD *v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void *v37;
  void *v38;
  _WORD *v39;
  uint64_t v40;
  void *__p;
  void *v42;
  _WORD *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  double v47;
  char *v48;
  char *v49;
  double v50;

  v3 = a1[1];
  if (*a1 == v3)
  {
    v4 = 0;
    v6 = a1[4];
    v5 = a1[5];
    v7 = (double *)(a1 + 4);
    if (v6 != v5)
      goto LABEL_6;
LABEL_29:
    v9 = 0;
    v10 = a2[1];
    if (*a2 != v10)
      goto LABEL_10;
LABEL_30:
    v11 = 0;
    v14 = a2[4];
    v13 = a2[5];
    v12 = (double *)(a2 + 4);
    if (v14 != v13)
      goto LABEL_14;
LABEL_31:
    v16 = 0;
    if ((_DWORD)v9)
      goto LABEL_18;
    return -v16;
  }
  if (*(__int16 *)(v3 - 2) > 0)
    v4 = 1;
  else
    v4 = -1;
  v6 = a1[4];
  v5 = a1[5];
  v7 = (double *)(a1 + 4);
  if (v6 == v5)
    goto LABEL_29;
LABEL_6:
  if (*(__int16 *)(v5 - 2) > 0)
    v8 = 1;
  else
    v8 = -1;
  v9 = (v8 * v4);
  v10 = a2[1];
  if (*a2 == v10)
    goto LABEL_30;
LABEL_10:
  if (*(__int16 *)(v10 - 2) > 0)
    v11 = 1;
  else
    v11 = -1;
  v14 = a2[4];
  v13 = a2[5];
  v12 = (double *)(a2 + 4);
  if (v14 == v13)
    goto LABEL_31;
LABEL_14:
  if (*(__int16 *)(v13 - 2) > 0)
    v15 = 1;
  else
    v15 = -1;
  v16 = v15 * v11;
  if (!(_DWORD)v9)
    return -v16;
LABEL_18:
  if (!v16)
    return v9;
  if ((_DWORD)v9 == v16)
  {
    if (v6 == v5)
    {
      v17 = 0;
      if (v14 != v13)
      {
LABEL_25:
        if (*(__int16 *)(v13 - 2) < 1)
          v18 = -1;
        else
          v18 = 1;
LABEL_40:
        sub_2394C2EC8((unint64_t)a1, v12, (uint64_t)&v45);
        v21 = operator new(4uLL);
        v22 = v18 * v17;
        *v21 = v22;
        v43 = v21 + 2;
        v44 = 0;
        v21[1] = 0;
        v23 = v21 + 1;
        if (!v22)
          v23 = v21;
        __p = v21;
        v42 = v23;
        sub_2394C2EC8((unint64_t)&v45, (double *)&__p, (uint64_t)&v48);
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
        if (v45)
        {
          v46 = (char *)v45;
          operator delete(v45);
        }
        sub_2394C2EC8((unint64_t)a2, v7, (uint64_t)&__p);
        v24 = operator new(4uLL);
        *v24 = v22;
        v39 = v24 + 2;
        v40 = 0;
        v24[1] = 0;
        v25 = v24 + 1;
        if (!v22)
          v25 = v24;
        v37 = v24;
        v38 = v25;
        sub_2394C2EC8((unint64_t)&__p, (double *)&v37, (uint64_t)&v45);
        if (v37)
        {
          v38 = v37;
          operator delete(v37);
        }
        if (__p)
        {
          v42 = __p;
          operator delete(__p);
        }
        v26 = v48;
        if (v48 == v49)
        {
          if (v45 == v46)
          {
LABEL_83:
            v9 = 0;
          }
          else if (*((__int16 *)v46 - 1) > 0)
          {
            v9 = 0xFFFFFFFFLL;
          }
          else
          {
            v9 = 1;
          }
        }
        else
        {
          if (v45 != v46)
          {
            v27 = (v49 - v48) >> 1;
            v28 = v50 + (double)(unint64_t)v27;
            v29 = (v46 - (_BYTE *)v45) >> 1;
            v30 = v47 + (double)(unint64_t)v29;
            if (v28 >= v30)
              v31 = v50 + (double)(unint64_t)v27;
            else
              v31 = v47 + (double)(unint64_t)v29;
            if (v47 >= v50)
              v32 = v50;
            else
              v32 = v47;
            while (1)
            {
              v31 = v31 + -1.0;
              if (v31 < v32)
                goto LABEL_83;
              v33 = v50 <= v31;
              if (v28 <= v31)
                v33 = 0;
              if (v33 == 1)
              {
                v34 = *(_WORD *)&v48[2 * (int)(v31 - v50)];
                v35 = v47 <= v31;
                if (v30 <= v31)
                  v35 = 0;
                if (v35 != 1)
                  goto LABEL_68;
              }
              else
              {
                v34 = 0;
                v35 = v47 <= v31;
                if (v30 <= v31)
                  v35 = 0;
                if (v35 != 1)
                {
LABEL_68:
                  v36 = 0;
                  goto LABEL_73;
                }
              }
              v36 = *((_WORD *)v45 + (int)(v31 - v47));
LABEL_73:
              if (v34 > v36)
              {
                v9 = 1;
                goto LABEL_89;
              }
              if (v33)
              {
                LOWORD(v33) = *(_WORD *)&v48[2 * (int)(v31 - v50)];
                if (v35)
                  goto LABEL_78;
              }
              else if (v35)
              {
LABEL_78:
                LOWORD(v35) = *((_WORD *)v45 + (int)(v31 - v47));
              }
              if ((__int16)v33 < (__int16)v35)
              {
                v9 = 0xFFFFFFFFLL;
                goto LABEL_89;
              }
            }
          }
          if (*((__int16 *)v49 - 1) > 0)
            v9 = 1;
          else
            v9 = 0xFFFFFFFFLL;
        }
LABEL_89:
        if (v45)
        {
          v46 = (char *)v45;
          operator delete(v45);
          v26 = v48;
        }
        if (v26)
        {
          v49 = v26;
          operator delete(v26);
          return v9;
        }
        return v9;
      }
    }
    else
    {
      if (*(__int16 *)(v5 - 2) < 1)
        v17 = -1;
      else
        v17 = 1;
      if (v14 != v13)
        goto LABEL_25;
    }
    v18 = 0;
    goto LABEL_40;
  }
  if ((int)v9 < v16)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

void sub_2394D6CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v20;
  void *v21;

  if (__p)
  {
    operator delete(__p);
    v20 = a13;
    if (!a13)
    {
LABEL_3:
      v21 = *(void **)(v18 - 64);
      if (!v21)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      *(_QWORD *)(v18 - 56) = v21;
      operator delete(v21);
      goto LABEL_8;
    }
  }
  else
  {
    v20 = a13;
    if (!a13)
      goto LABEL_3;
  }
  operator delete(v20);
  v21 = *(void **)(v18 - 64);
  if (!v21)
    goto LABEL_8;
  goto LABEL_7;
}

_QWORD *sub_2394D6D8C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  void *v6[4];
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *__p;
  void *v16;

  sub_2394D53D8(a2, a3, (uint64_t)v6);
  sub_2394D6E48(a2, (uint64_t)v6, a1);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  return a1;
}

void sub_2394D6E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394D43E8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2394D6E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  sub_2394D5E6C(a3, a1);
  sub_2394D5E6C(a3 + 8, a1 + 64);
  sub_2394D5E6C(a3 + 16, a1 + 128);
  sub_2394D5E6C(a3 + 24, a2);
  sub_2394D5E6C(a3 + 32, a2 + 64);
  return sub_2394D5E6C(a3 + 40, a2 + 128);
}

void sub_2394D6ED0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D43E8(v1);
  _Unwind_Resume(a1);
}

void sub_2394D6EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239EBFF1C();
  sub_2394D43E8(v1);
  _Unwind_Resume(a1);
}

void sub_2394D6F04(_Unwind_Exception *a1)
{
  sub_239EBFF1C();
  _Unwind_Resume(a1);
}

uint64_t sub_2394D6F1C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v2 = *(void **)(a1 + 352);
  if (v2)
  {
    *(_QWORD *)(a1 + 360) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 320);
  if (v3)
  {
    *(_QWORD *)(a1 + 328) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 288);
  if (v4)
  {
    *(_QWORD *)(a1 + 296) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 224);
  if (v6)
  {
    *(_QWORD *)(a1 + 232) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 192);
  if (v7)
  {
    *(_QWORD *)(a1 + 200) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 160);
  if (v8)
  {
    *(_QWORD *)(a1 + 168) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 128);
  if (v9)
  {
    *(_QWORD *)(a1 + 136) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(_QWORD *)(a1 + 104) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 64);
  if (v11)
  {
    *(_QWORD *)(a1 + 72) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 32);
  if (v12)
  {
    *(_QWORD *)(a1 + 40) = v12;
    operator delete(v12);
  }
  v13 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v13;
    operator delete(v13);
  }
  return a1;
}

_QWORD *sub_2394D6FFC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = sub_2394D5E6C(a1, a2);
  sub_2394D5E6C(v4 + 8, a2 + 64);
  sub_2394D5E6C(a1 + 16, a2 + 128);
  sub_2394D5E6C(a1 + 24, a2 + 192);
  sub_2394D5E6C(a1 + 32, a2 + 256);
  sub_2394D5E6C(a1 + 40, a2 + 320);
  return a1;
}

void sub_2394D7098(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  do
  {
    v2 -= 192;
    sub_2394D43E8(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D70D4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  uint64_t v12;
  void *v14[4];
  void *__p;
  void *v16;
  void *v17[4];
  void *v18;
  void *v19;
  void *v20[4];
  void *v21;
  void *v22;
  void *v23[4];
  void *v24;
  void *v25;

  v11 = sub_2394D5E6C(v23, a3);
  sub_2394D5C80((unint64_t)v11, a1);
  sub_2394D5E6C(v20, a4);
  sub_2394D5C80((unint64_t)v20, a2);
  sub_2394D5E6C(v17, a5);
  sub_2394D5C80((unint64_t)v17, a1);
  sub_2394D5E6C(v14, a6);
  sub_2394D5C80((unint64_t)v14, a2);
  v12 = sub_2394D7294((uint64_t)v23, (double *)v20, (uint64_t)v17, (double *)v14);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  return v12;
}

void sub_2394D7210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_2394D4218((uint64_t)&a9);
  sub_2394D4218((uint64_t)&a17);
  sub_2394D4218((uint64_t)&a25);
  sub_2394D4218(v25 - 112);
  _Unwind_Resume(a1);
}

void sub_2394D724C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_2394D4218((uint64_t)va);
  sub_2394D4218(v17 - 112);
  _Unwind_Resume(a1);
}

void sub_2394D726C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_2394D7280(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394D4218(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D7294(uint64_t a1, double *a2, uint64_t a3, double *a4)
{
  uint64_t v6;
  void *v8[4];
  void *__p;
  void *v10;
  void *v11[4];
  void *v12;
  void *v13;

  sub_2394D5938(a1, a4, (unint64_t)v11);
  sub_2394D5938(a3, a2, (unint64_t)v8);
  v6 = sub_2394D6924(v11, v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  return v6;
}

void sub_2394D732C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_2394D4218((uint64_t)&a9);
  sub_2394D4218((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_2394D7348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2394D4218((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394D735C(double *a1@<X1>, uint64_t a2@<X8>)
{
  double v4;
  _DWORD *v5;
  double v6;
  _DWORD *v7;
  double v8;
  _DWORD *v9;
  void *v10[2];
  __int128 v11;
  void *__p;
  void *v13;
  _DWORD *v14;
  uint64_t v15;
  void *v16[2];
  __int128 v17;
  void *v18;
  void *v19;
  _DWORD *v20;
  uint64_t v21;
  void *v22[2];
  __int128 v23;
  void *v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  v4 = *a1;
  v26 = 0u;
  v27 = 0u;
  sub_2394C3714((uint64_t)&v26, v4);
  *(_OWORD *)v22 = v26;
  v23 = v27;
  v5 = operator new(4uLL);
  *v5 = 1;
  v6 = a1[1];
  v24[0] = v5;
  v24[1] = (char *)v5 + 2;
  v25 = (unint64_t)(v5 + 1);
  v26 = 0u;
  v27 = 0u;
  sub_2394C3714((uint64_t)&v26, v6);
  *(_OWORD *)v16 = v26;
  v17 = v27;
  v7 = operator new(4uLL);
  *v7 = 1;
  v8 = a1[2];
  v18 = v7;
  v19 = (char *)v7 + 2;
  v20 = v7 + 1;
  v21 = 0;
  v26 = 0u;
  v27 = 0u;
  sub_2394C3714((uint64_t)&v26, v8);
  *(_OWORD *)v10 = v26;
  v11 = v27;
  v9 = operator new(4uLL);
  *v9 = 1;
  __p = v9;
  v13 = (char *)v9 + 2;
  v14 = v9 + 1;
  v15 = 0;
  sub_2394D55C4((uint64_t)&v26, (uint64_t)v22, (uint64_t)v16, (uint64_t)v10);
  *(_OWORD *)a2 = v26;
  *(_OWORD *)(a2 + 16) = v27;
  *(_OWORD *)(a2 + 32) = v28;
  *(_QWORD *)(a2 + 48) = v29;
  *(_QWORD *)(a2 + 56) = v30;
  *(_OWORD *)(a2 + 64) = v31;
  *(_QWORD *)(a2 + 80) = v32;
  *(_QWORD *)(a2 + 88) = v33;
  *(_OWORD *)(a2 + 96) = v34;
  *(_QWORD *)(a2 + 112) = v35;
  *(_QWORD *)(a2 + 120) = v36;
  *(_OWORD *)(a2 + 128) = v37;
  *(_QWORD *)(a2 + 144) = v38;
  *(_QWORD *)(a2 + 152) = v39;
  *(_OWORD *)(a2 + 160) = v40;
  *(_QWORD *)(a2 + 176) = v41;
  *(_QWORD *)(a2 + 184) = v42;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_2394D7580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2394D4218((uint64_t)&a11);
  sub_2394D4218((uint64_t)&a19);
  sub_2394D4218((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2394D75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a9)
  {
    operator delete(a9);
    sub_2394D4218((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2394D75C0);
}

void sub_2394D75F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
    sub_2394D4218((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2394D75C0);
}

void sub_2394D7618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394D7654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sub_2394D5E6C(a4, a1);
  sub_2394D5E6C(a4 + 8, a1 + 64);
  sub_2394D5E6C(a4 + 16, a1 + 128);
  sub_2394D5E6C(a4 + 24, a2);
  sub_2394D5E6C(a4 + 32, a2 + 64);
  sub_2394D5E6C(a4 + 40, a2 + 128);
  sub_2394D5E6C(a4 + 48, a3);
  sub_2394D5E6C(a4 + 56, a3 + 64);
  return sub_2394D5E6C(a4 + 64, a3 + 128);
}

void sub_2394D7718(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_239EBFF1C();
  do
  {
    v2 -= 192;
    sub_2394D43E8(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D7774(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v2 = *(void **)(a1 + 544);
  if (v2)
  {
    *(_QWORD *)(a1 + 552) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 512);
  if (v3)
  {
    *(_QWORD *)(a1 + 520) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 480);
  if (v4)
  {
    *(_QWORD *)(a1 + 488) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 448);
  if (v5)
  {
    *(_QWORD *)(a1 + 456) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 416);
  if (v6)
  {
    *(_QWORD *)(a1 + 424) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 384);
  if (v7)
  {
    *(_QWORD *)(a1 + 392) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 352);
  if (v8)
  {
    *(_QWORD *)(a1 + 360) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 320);
  if (v9)
  {
    *(_QWORD *)(a1 + 328) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 288);
  if (v10)
  {
    *(_QWORD *)(a1 + 296) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 256);
  if (v11)
  {
    *(_QWORD *)(a1 + 264) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 224);
  if (v12)
  {
    *(_QWORD *)(a1 + 232) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 192);
  if (v13)
  {
    *(_QWORD *)(a1 + 200) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 160);
  if (v14)
  {
    *(_QWORD *)(a1 + 168) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 128);
  if (v15)
  {
    *(_QWORD *)(a1 + 136) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 96);
  if (v16)
  {
    *(_QWORD *)(a1 + 104) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 64);
  if (v17)
  {
    *(_QWORD *)(a1 + 72) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 32);
  if (v18)
  {
    *(_QWORD *)(a1 + 40) = v18;
    operator delete(v18);
  }
  v19 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v19;
    operator delete(v19);
  }
  return a1;
}

double sub_2394D78B4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 328) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a2 + 360) = 0;
  *(_QWORD *)(a2 + 368) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 400) = 0;
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 432) = 0;
  *(_QWORD *)(a2 + 416) = 0;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a2 + 456) = 0;
  *(_QWORD *)(a2 + 464) = 0;
  *(_QWORD *)(a2 + 448) = 0;
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a2 + 488) = 0;
  *(_QWORD *)(a2 + 496) = 0;
  *(_QWORD *)(a2 + 480) = 0;
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a2 + 528) = 0;
  *(_QWORD *)(a2 + 520) = 0;
  *(_QWORD *)(a2 + 512) = 0;
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a2 + 552) = 0;
  *(_QWORD *)(a2 + 544) = 0;
  *(_QWORD *)(a2 + 560) = 0;
  result = *(double *)(a2 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

uint64_t sub_2394D7B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  sub_2394D6E48(a2, a3, &v5);
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v6;
  v5 = 0uLL;
  *(_QWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v6 = 0;
  v8 = 0uLL;
  v9 = 0;
  *(_QWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  v11 = 0uLL;
  *(_QWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  v12 = 0;
  v14 = 0uLL;
  v15 = 0;
  *(_QWORD *)(a1 + 120) = v16;
  *(_OWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 144) = v18;
  v17 = 0uLL;
  *(_QWORD *)(a1 + 152) = v19;
  *(_OWORD *)(a1 + 160) = v20;
  *(_QWORD *)(a1 + 176) = v21;
  v18 = 0;
  v20 = 0uLL;
  v21 = 0;
  *(_QWORD *)(a1 + 184) = v22;
  *(_OWORD *)(a1 + 192) = v23;
  *(_QWORD *)(a1 + 208) = v24;
  v23 = 0uLL;
  *(_QWORD *)(a1 + 216) = v25;
  *(_OWORD *)(a1 + 224) = v26;
  *(_QWORD *)(a1 + 240) = v27;
  v24 = 0;
  v26 = 0uLL;
  v27 = 0;
  *(_QWORD *)(a1 + 248) = v28;
  *(_OWORD *)(a1 + 256) = v29;
  *(_QWORD *)(a1 + 272) = v30;
  v29 = 0uLL;
  *(_QWORD *)(a1 + 280) = v31;
  *(_OWORD *)(a1 + 288) = v32;
  *(_QWORD *)(a1 + 304) = v33;
  v30 = 0;
  v32 = 0uLL;
  v33 = 0;
  *(_QWORD *)(a1 + 312) = v34;
  *(_OWORD *)(a1 + 320) = v35;
  *(_QWORD *)(a1 + 336) = v36;
  v35 = 0uLL;
  *(_QWORD *)(a1 + 344) = v37;
  *(_OWORD *)(a1 + 352) = v38;
  *(_QWORD *)(a1 + 368) = v39;
  v36 = 0;
  v38 = 0uLL;
  v39 = 0;
  *(_QWORD *)(a1 + 376) = v40;
  sub_2394D6F1C((uint64_t)&v5);
  return a1;
}

_QWORD *sub_2394D7D58(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2394D8068(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394D8080()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394D8094(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_250ADCD88;
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *((_QWORD *)v2 + 13) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2394D80FC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_250ADCD88;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(__n128 *)(a2 + 56) = result;
  return result;
}

uint64_t sub_2394D814C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  float64x2_t v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  uint64_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint32x2_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int8x16_t v39;
  int8x16_t v40;
  float64x2_t v41;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v51;
  uint64x2_t v52;
  float64x2_t v54;
  int32x4_t v55;
  double v56;
  float64x2_t v57;
  int v58;
  int v59;
  float64x2_t v60;
  double v63;
  int v64;
  int v65;
  int v66;
  int64x2_t v67;
  float64x2_t v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  float32x4_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  float64x2_t v106;
  float64_t v107;
  int32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  int8x16_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unint64_t v115;
  uint64_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x2_t v119;
  uint64_t v120;
  uint64_t v121;
  float64x2_t *v122;
  float64x2_t *v123;
  uint64_t v124;
  uint64_t v125;
  _BOOL4 v127;
  float64x2_t *v128;
  uint64_t v129;
  uint64_t v130;
  float32_t v131;
  float32x4_t v132;
  float32x4_t v133;
  uint64_t v134;
  float32x4_t v135;
  float32_t v136;
  int32x4_t v137;
  int8x16_t v138;
  float v139;
  float32x4_t v140;
  float32_t v141;
  int32x4_t v142;
  int8x16_t v143;
  float v144;
  int v145;
  uint64_t v146;
  float32x4_t v147;
  double v148;
  char v149;
  float32_t v150;
  int32x4_t v151;
  int8x16_t v152;
  float32x2_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *p_shared_owners;
  unint64_t v165;
  std::bad_alloc *exception;
  std::bad_alloc *v168;
  float32x4_t v169;
  float32x4_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  int64x2_t v177;
  unint64_t v178;
  uint64_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  double v187;
  float64x2_t v188;
  float64x2_t v189;
  int64x2_t v190;
  float64x2_t v191;
  uint64_t v192;
  float64x2_t v193;
  void *__p[2];
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  float64x2_t v200;
  double v201;
  float64x2_t v202;
  double v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  void *v206;
  _QWORD v207[4];
  int v208;
  __int16 v209;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  HIBYTE(v195) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FD394(v207, v4, (__int128 *)__p);
  if (SHIBYTE(v195) < 0)
    operator delete(__p[0]);
  if (sub_2396FD7B0(*(_QWORD *)(a1 + 16)))
  {
    v5 = *(_QWORD *)(a1 + 8);
    HIBYTE(v195) = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C(v5, (uint64_t)__p);
    if (SHIBYTE(v195) < 0)
      operator delete(__p[0]);
    return sub_2396FD3E8((uint64_t)v207);
  }
  v206 = 0;
  v6 = *(_QWORD *)(a1 + 32);
  v206 = *(void **)(**(_QWORD **)(a1 + 24) + 8 * v3);
  __p[0] = v206;
  v7 = *(_QWORD *)(v6 + 24);
  if (!v7)
    sub_2394172E0();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v7 + 48))(&v204, v7, __p);
  if (!v204)
    goto LABEL_169;
  v8 = sub_2394650AC(*(_QWORD *)(a1 + 40), (unint64_t)v206);
  v183 = *((float64x2_t *)v8 + 1);
  v185 = *(float64x2_t *)v8;
  v9 = *((unsigned int *)v8 + 14);
  __p[0] = 0;
  malloc_type_posix_memalign(__p, 0x20uLL, (8 * v9 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v10 = __p[0];
  if (!__p[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v168 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v168, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v9)
    memcpy(__p[0], (const void *)v8[5], 8 * v9);
  v192 = v8[10];
  v179 = v8[14];
  v177 = *((int64x2_t *)v8 + 6);
  v187 = *((double *)v8 + 18);
  v186 = *((float64x2_t *)v8 + 8);
  *(_QWORD *)&v11.f64[1] = v8[17];
  *(_QWORD *)&v11.f64[0] = v8[22];
  v181 = v11;
  v188 = *((float64x2_t *)v8 + 10);
  v190 = *((int64x2_t *)v8 + 4);
  v12 = *(_QWORD *)(a1 + 48);
  __p[0] = &v206;
  v13 = sub_2394D7D58(v12, (unint64_t *)&v206, (uint64_t)&unk_239EC6E98, (_QWORD **)__p);
  v14 = *(_BYTE **)(a1 + 56);
  if (!v14[8])
  {
    v19 = 0;
    goto LABEL_65;
  }
  v15 = *(uint64_t **)v14;
  v16 = *(_QWORD *)(*(_QWORD *)v14 + 8);
  if (!v16)
    goto LABEL_175;
  v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = v206;
    if (v16 <= v206)
      v18 = v206 % v16;
  }
  else
  {
    v18 = ((_DWORD)v16 - 1) & v206;
  }
  v20 = *v15;
  v21 = *(uint64_t ***)(*v15 + 8 * v18);
  if (!v21 || (v22 = *v21) == 0)
LABEL_175:
    sub_23941D898("unordered_map::at: key not found");
  v23 = v16 - 1;
  if (v17.u32[0] < 2uLL)
  {
    while (1)
    {
      v24 = v22[1];
      if (v24 == v206)
      {
        if (*((_DWORD *)v22 + 4) == (_DWORD)v206)
          goto LABEL_26;
      }
      else if ((v24 & v23) != v18)
      {
        goto LABEL_175;
      }
      v22 = (uint64_t *)*v22;
      if (!v22)
        goto LABEL_175;
    }
  }
  while (1)
  {
    v26 = v22[1];
    if (v26 == v206)
      break;
    if (v26 >= v16)
      v26 %= v16;
    if (v26 != v18)
      goto LABEL_175;
LABEL_29:
    v22 = (uint64_t *)*v22;
    if (!v22)
      goto LABEL_175;
  }
  if (*((_DWORD *)v22 + 4) != (_DWORD)v206)
    goto LABEL_29;
LABEL_26:
  if (v17.u32[0] > 1uLL)
  {
    v25 = v206;
    if (v16 <= v206)
      v25 = v206 % v16;
  }
  else
  {
    v25 = ((_DWORD)v16 - 1) & v206;
  }
  v27 = *(uint64_t ***)(v20 + 8 * v25);
  if (!v27 || (v28 = *v27) == 0)
LABEL_176:
    sub_23941D898("unordered_map::at: key not found");
  v29 = *((_DWORD *)v22 + 5);
  if (v17.u32[0] < 2uLL)
  {
    while (1)
    {
      v30 = v28[1];
      if (v30 == v206)
      {
        if (*((_DWORD *)v28 + 4) == (_DWORD)v206)
          goto LABEL_45;
      }
      else if ((v30 & v23) != v25)
      {
        goto LABEL_176;
      }
      v28 = (uint64_t *)*v28;
      if (!v28)
        goto LABEL_176;
    }
  }
  while (2)
  {
    v32 = v28[1];
    if (v32 != v206)
    {
      if (v32 >= v16)
        v32 %= v16;
      if (v32 != v25)
        goto LABEL_176;
      goto LABEL_48;
    }
    if (*((_DWORD *)v28 + 4) != (_DWORD)v206)
    {
LABEL_48:
      v28 = (uint64_t *)*v28;
      if (!v28)
        goto LABEL_176;
      continue;
    }
    break;
  }
LABEL_45:
  if (v17.u32[0] > 1uLL)
  {
    v31 = v206;
    if (v16 <= v206)
      v31 = v206 % v16;
  }
  else
  {
    v31 = ((_DWORD)v16 - 1) & v206;
  }
  v33 = *(uint64_t ***)(v20 + 8 * v31);
  if (!v33 || (v34 = *v33) == 0)
LABEL_177:
    sub_23941D898("unordered_map::at: key not found");
  v35 = *((_DWORD *)v28 + 6);
  if (v17.u32[0] < 2uLL)
  {
    while (1)
    {
      v36 = v34[1];
      if (v36 == v206)
      {
        if (*((_DWORD *)v34 + 4) == (_DWORD)v206)
          goto LABEL_64;
      }
      else if ((v36 & v23) != v31)
      {
        goto LABEL_177;
      }
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_177;
    }
  }
  while (2)
  {
    v162 = v34[1];
    if (v162 != v206)
    {
      if (v162 >= v16)
        v162 %= v16;
      if (v162 != v31)
        goto LABEL_177;
      goto LABEL_162;
    }
    if (*((_DWORD *)v34 + 4) != (_DWORD)v206)
    {
LABEL_162:
      v34 = (uint64_t *)*v34;
      if (!v34)
        goto LABEL_177;
      continue;
    }
    break;
  }
LABEL_64:
  v19 = vcvt_u32_f32(vmul_f32(*(float32x2_t *)((char *)v34 + 28), vcvt_f32_u32(*(uint32x2_t *)((char *)v34 + 20))));
  if (!v14[8])
  {
LABEL_65:
    v29 = *(_DWORD *)(v204 + 64);
    v35 = *(_DWORD *)(v204 + 68);
  }
  v37 = v35 * v29;
  if (v35 * v29)
  {
    v38 = 0;
    v40 = (int8x16_t)v188;
    v39 = (int8x16_t)v190;
    v41 = vsubq_f64((float64x2_t)0, v188);
    _Q5 = (int8x16_t)v186;
    _Q6 = vmulq_f64(v186, v41);
    _D4 = v41.f64[1];
    *(_QWORD *)&v45 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v181);
    v46 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v190, v177), v41.f64[0]), (float64x2_t)vzip2q_s64(v190, v177), v41, 1);
    *(_QWORD *)&v47.f64[0] = v192;
    *(_QWORD *)&v41.f64[0] = v192;
    *(_QWORD *)&v41.f64[1] = v179;
    __asm { FMLA            D6, D4, V5.D[1] }
    v51 = vmlaq_n_f64(v46, v41, v45);
    _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v187, v45);
    v52.i64[0] = v19.u32[0];
    v52.i64[1] = v19.u32[1];
    *(_QWORD *)&v60.f64[0] = vextq_s8(v39, v39, 8uLL).u64[0];
    _D22 = vextq_s8(_Q5, _Q5, 8uLL).u64[0];
    *(float32x2_t *)_Q5.i8 = vcvt_f32_f64(v51);
    v172 = _Q6;
    *(float *)_Q6.f64 = _Q6.f64[0];
    v54 = vcvtq_f64_f32(*(float32x2_t *)_Q5.i8);
    v55 = vdupq_lane_s32(*(int32x2_t *)_Q5.i8, 1);
    v56 = *(float *)_Q6.f64;
    v55.i32[1] = LODWORD(_Q6.f64[0]);
    HIDWORD(_Q6.f64[0]) = _Q5.i32[0];
    v57 = vaddq_f64(v183, vcvtq_f64_u64(v52));
    LODWORD(_Q6.f64[1]) = _Q5.i32[1];
    v55.i32[2] = _Q5.i32[0];
    v169 = (float32x4_t)_Q6;
    v170 = (float32x4_t)v55;
    v58 = v19.i32[0];
    v59 = v19.i32[1];
    v39.i64[1] = v177.i64[0];
    *(_QWORD *)&v60.f64[1] = vextq_s8((int8x16_t)v177, (int8x16_t)v177, 8uLL).u64[0];
    *(_QWORD *)&v47.f64[1] = v179;
    v191 = (float64x2_t)v39;
    v193 = v47;
    __asm
    {
      FMOV            V25.2D, #0.5
      FMOV            V0.2D, #1.0
    }
    v40.i64[1] = vextq_s8(v40, v40, 8uLL).u64[0];
    v189 = (float64x2_t)v40;
    *(_QWORD *)&v63 = *(_OWORD *)&vsubq_f64(_Q0, v181);
    *(_QWORD *)&v51.f64[1] = vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
    v171 = v51;
    v178 = _D22;
    v180 = v60;
    v175 = v57;
    v176 = v54;
    v173 = v63;
    v174 = _Q25;
    while (1)
    {
      v64 = v38 / v29;
      v65 = v38 % v29;
      v66 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 48);
      if ((int)(v38 % v29) % v66
        || v64 % v66
        || v65 < *(_DWORD *)(v204 + 64) + v58
        && v64 < *(_DWORD *)(v204 + 68) + v59
        && v65 >= v58
        && v64 >= v59
        && *(unsigned __int8 *)(*(_QWORD *)(v204 + 56)
                              + (*(_DWORD *)(v204 + 72) * (v65 - v58)
                                             + *(_DWORD *)(v204 + 76) * (v64 - v59))) > 0x80u)
      {
        goto LABEL_68;
      }
      v67.i64[0] = v65;
      v67.i64[1] = v64;
      _Q0 = vsubq_f64(vdivq_f64(vsubq_f64(vaddq_f64(vcvtq_f64_s64(v67), _Q25), v57), v185), v189);
      v69 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v191, _Q0.f64[0]), v60, _Q0, 1), v193, v63);
      _Q3 = vmulq_f64(v186, _Q0);
      __asm { FMLA            D3, D22, V0.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v187, v63);
      *(float *)_Q0.f64 = _Q3.f64[0];
      v200 = v54;
      v201 = v56;
      v202 = vaddq_f64(vsubq_f64(vcvtq_f64_f32(vcvt_f32_f64(v69)), v54), v54);
      v203 = *(float *)_Q0.f64 - v56 + v56;
      v71 = (_QWORD *)v13[3];
      v72 = v71[5];
      v73 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 200);
      if (v72 == v73)
        break;
      v74 = v71[6];
      if (v74 == v73)
        goto LABEL_83;
      v75 = v71[7];
      if (v75 == v73)
        goto LABEL_83;
      v182 = _Q3;
      v184 = v69;
      v76 = *(_QWORD *)(v74 + 32);
      v77 = *(_QWORD *)(v72 + 32);
      v78 = *(_QWORD *)(v75 + 32);
      *(_OWORD *)__p = *(_OWORD *)(v74 + 16);
      v195 = v76;
      v196 = *(_OWORD *)(v72 + 16);
      v197 = v77;
      v198 = *(_OWORD *)(v75 + 16);
      v199 = v78;
      v209 = 0;
      v208 = 0;
      v79 = sub_2394D27A8((uint64_t)&v208, (double *)__p, v200.f64);
      _D22 = v178;
      v60 = v180;
      v57 = v175;
      v54 = v176;
      v63 = v173;
      _Q25 = v174;
      if (v79)
      {
        v81 = 0;
        v82 = v13[3];
        v83 = *(unsigned int *)(v82 + 68);
        if ((v83 & 0x80000000) != 0)
          goto LABEL_179;
        goto LABEL_104;
      }
      v71 = (_QWORD *)v13[3];
      v73 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 200);
      _Q3 = v182;
      v69 = v184;
      v84 = v71[4];
      if (v84 == v73)
        goto LABEL_68;
LABEL_84:
      v85 = v71[6];
      if (v85 != v73)
      {
        v86 = v71[7];
        if (v86 != v73)
        {
          v182 = _Q3;
          v184 = v69;
          v87 = *(_QWORD *)(v85 + 32);
          v88 = *(_QWORD *)(v86 + 32);
          v89 = *(_QWORD *)(v84 + 32);
          *(_OWORD *)__p = *(_OWORD *)(v85 + 16);
          v195 = v87;
          v196 = *(_OWORD *)(v86 + 16);
          v197 = v88;
          v198 = *(_OWORD *)(v84 + 16);
          v199 = v89;
          v209 = 0;
          v208 = 0;
          v90 = sub_2394D27A8((uint64_t)&v208, (double *)__p, v200.f64);
          _D22 = v178;
          v60 = v180;
          v57 = v175;
          v54 = v176;
          v63 = v173;
          _Q25 = v174;
          if (v90)
          {
            v81 = 1;
            v82 = v13[3];
            v83 = *(unsigned int *)(v82 + 68);
            if ((v83 & 0x80000000) != 0)
              goto LABEL_179;
            goto LABEL_104;
          }
          v71 = (_QWORD *)v13[3];
          v84 = v71[4];
          v73 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 200);
          _Q3 = v182;
          v69 = v184;
        }
      }
      if (v84 == v73)
        goto LABEL_68;
      v91 = v71[5];
      if (v91 != v73)
      {
        v92 = v71[7];
        if (v92 != v73)
        {
          v182 = _Q3;
          v184 = v69;
          v93 = *(_QWORD *)(v84 + 32);
          v94 = *(_QWORD *)(v92 + 32);
          v95 = *(_QWORD *)(v91 + 32);
          *(_OWORD *)__p = *(_OWORD *)(v84 + 16);
          v195 = v93;
          v196 = *(_OWORD *)(v92 + 16);
          v197 = v94;
          v198 = *(_OWORD *)(v91 + 16);
          v199 = v95;
          v209 = 0;
          v208 = 0;
          v96 = sub_2394D27A8((uint64_t)&v208, (double *)__p, v200.f64);
          _D22 = v178;
          v60 = v180;
          v57 = v175;
          v54 = v176;
          v63 = v173;
          _Q25 = v174;
          if (v96)
          {
            v81 = 2;
            v82 = v13[3];
            v83 = *(unsigned int *)(v82 + 68);
            if ((v83 & 0x80000000) != 0)
              goto LABEL_179;
            goto LABEL_104;
          }
          v71 = (_QWORD *)v13[3];
          v84 = v71[4];
          v73 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 200);
          _Q3 = v182;
          v69 = v184;
        }
      }
      if (v84 == v73)
        goto LABEL_68;
      v97 = v71[5];
      if (v97 == v73)
        goto LABEL_68;
      v98 = v71[6];
      if (v98 == v73)
        goto LABEL_68;
      v182 = _Q3;
      v184 = v69;
      v99 = *(_QWORD *)(v84 + 32);
      v100 = *(_QWORD *)(v97 + 32);
      v101 = *(_QWORD *)(v98 + 32);
      *(_OWORD *)__p = *(_OWORD *)(v84 + 16);
      v195 = v99;
      v196 = *(_OWORD *)(v97 + 16);
      v197 = v100;
      v198 = *(_OWORD *)(v98 + 16);
      v199 = v101;
      v209 = 0;
      v208 = 0;
      v102 = sub_2394D27A8((uint64_t)&v208, (double *)__p, v200.f64);
      _D22 = v178;
      v60 = v180;
      v57 = v175;
      v54 = v176;
      v63 = v173;
      _Q25 = v174;
      if (!v102)
        goto LABEL_68;
      v81 = 3;
      v82 = v13[3];
      v83 = *(unsigned int *)(v82 + 68);
      if ((v83 & 0x80000000) != 0)
        goto LABEL_179;
LABEL_104:
      v103 = **(_DWORD **)(a1 + 80);
      if ((int)v83 >= v103)
      {
LABEL_179:
        v105 = 915;
LABEL_180:
        sub_239A444D4((uint64_t)"unknown file", v105, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v104 = *(_DWORD *)(*(_QWORD *)(v82 + 8 * v81) + 68);
      v105 = 916;
      if ((v104 & 0x80000000) != 0 || (int)v104 >= v103)
        goto LABEL_180;
      v107 = vsubq_f64(v182, v172).f64[0];
      v106 = vsubq_f64(v184, v171);
      *(float32x2_t *)&v106.f64[0] = vcvt_f32_f64(v106);
      *(float *)&v107 = v107;
      v108 = (int32x4_t)v106;
      v108.i32[2] = LODWORD(v107);
      v109 = *(_QWORD *)(a1 + 88);
      v110 = *(int *)(*(_QWORD *)(v109 + 336) + 16 * v83 + 4 * v81);
      v111 = (int8x16_t)vmlsq_f32(vmulq_f32(v169, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v108, (int8x16_t)v108, 0xCuLL), (int8x16_t)v108, 8uLL)), v170, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL));
      if (v83 <= v104)
        v112 = 432;
      else
        v112 = 408;
      v113 = (unsigned int *)(*(_QWORD *)(v109 + v112) + 4 * v110);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 + 1, v113));
      if (**(_QWORD **)(a1 + 96))
      {
        v115 = 0;
        v116 = v13[3];
        v117 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v106.f64[0], 1);
        v118 = (float32x2_t)vextq_s8(v111, v111, 8uLL).u64[0];
        v119 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1);
        do
        {
          v120 = *(_QWORD *)(v116 + 8 * v81);
          v121 = *(int *)(v120 + 68);
          v122 = *(float64x2_t **)(*(_QWORD *)(a1 + 72) + 200);
          if (*(float64x2_t **)(v120 + 32) == v122
            || (v123 = *(float64x2_t **)(v120 + 40), v123 == v122)
            || *(float64x2_t **)(v120 + 48) == v122
            || (v124 = *(_QWORD *)(v120 + 56), (float64x2_t *)v124 == v122))
          {
            v160 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 384) + 4 * v121);
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 + 1, v160));
            break;
          }
          if (v116 == *(_QWORD *)v120)
          {
            v123 = *(float64x2_t **)(v120 + 32);
            v129 = 1;
            v130 = 3;
            v81 = 2;
          }
          else if (v116 == *(_QWORD *)(v120 + 8))
          {
            v81 = 0;
            v129 = 2;
            v130 = 3;
          }
          else
          {
            v125 = *(_QWORD *)(v120 + 16);
            _ZF = v116 == v125;
            v127 = v116 != v125;
            if (_ZF)
              v128 = *(float64x2_t **)(v120 + 48);
            else
              v128 = *(float64x2_t **)(v120 + 56);
            v129 = 3;
            if (!_ZF)
              v129 = 0;
            v81 = 2 * v127;
            v124 = *(_QWORD *)(v120 + 40);
            v123 = v128;
            v130 = 1;
          }
          *(float32x2_t *)v80.f32 = vcvt_f32_f64(v123[1]);
          v131 = v123[2].f64[0];
          v80.f32[2] = v131;
          v132 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL);
          v133 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v80, (int8x16_t)v80, 0xCuLL), (int8x16_t)v80, 8uLL);
          v134 = *(_QWORD *)(v120 + 32 + 8 * v129);
          v135 = *(float32x4_t *)(v134 + 16);
          *(float32x2_t *)v135.f32 = vcvt_f32_f64((float64x2_t)v135);
          v136 = *(double *)(v134 + 32);
          v135.f32[2] = v136;
          v137 = (int32x4_t)vsubq_f32(v135, v80);
          v138 = (int8x16_t)vmlsq_f32(vmulq_f32(v132, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v137, (int8x16_t)v137, 0xCuLL), (int8x16_t)v137, 8uLL)), v133, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v137, v137), (int8x16_t)v137, 0xCuLL));
          LODWORD(v139) = vadd_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v137.i8), v119, *(float32x2_t *)v137.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL), v118), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v106.f64[0], *(float32x2_t *)v138.i8), v117, *(float32x2_t *)v138.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v138, v138, 8uLL), *(float32x2_t *)&v107)).u32[0];
          v140 = *(float32x4_t *)(v124 + 16);
          *(float32x2_t *)v140.f32 = vcvt_f32_f64((float64x2_t)v140);
          v141 = *(double *)(v124 + 32);
          v140.f32[2] = v141;
          v142 = (int32x4_t)vsubq_f32(v140, v80);
          v143 = (int8x16_t)vmlsq_f32(vmulq_f32(v132, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v142, (int8x16_t)v142, 0xCuLL), (int8x16_t)v142, 8uLL)), v133, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v142, v142), (int8x16_t)v142, 0xCuLL));
          v144 = vadd_f32(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v142.i8), v119, *(float32x2_t *)v142.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL), v118), vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v106.f64[0], *(float32x2_t *)v143.i8), v117, *(float32x2_t *)v143.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL), *(float32x2_t *)&v107)).f32[0];
          if (v144 >= 0.0)
            v145 = 0;
          else
            v145 = -1;
          if (v144 > 0.0)
            v145 = 1;
          v146 = *(_QWORD *)(v120 + 32 + 8 * v81);
          v147 = *(float32x4_t *)(v146 + 16);
          v148 = *(double *)(v146 + 32);
          if (v139 >= 0.0)
          {
            v149 = 1;
            if (v139 <= 0.0)
            {
              if (!v145)
                goto LABEL_151;
              v149 = 0;
            }
          }
          else
          {
            if (v144 > 0.0)
              goto LABEL_151;
            v149 = 1;
          }
          *(float32x2_t *)v147.f32 = vcvt_f32_f64((float64x2_t)v147);
          v150 = v148;
          v147.f32[2] = v150;
          v151 = (int32x4_t)vsubq_f32(v147, v80);
          v152 = (int8x16_t)vmlsq_f32(vmulq_f32(v132, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v151, (int8x16_t)v151, 0xCuLL), (int8x16_t)v151, 8uLL)), v133, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v151, v151), (int8x16_t)v151, 0xCuLL));
          v153 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&v106.f64[0], *(float32x2_t *)v152.i8), v117, *(float32x2_t *)v152.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL), *(float32x2_t *)&v107);
          *(float32x2_t *)v152.i8 = vmla_lane_f32(vmul_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v151.i8), v119, *(float32x2_t *)v151.i8, 1);
          v80 = (float32x4_t)vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL);
          v80.i32[0] = vadd_f32(vmla_f32(*(float32x2_t *)v152.i8, *(float32x2_t *)v80.f32, v118), v153).u32[0];
          if (v144 >= 0.0)
          {
            if (!v145)
            {
              v81 = v129;
              if (v80.f32[0] == 0.0)
                goto LABEL_151;
            }
          }
          else
          {
            v81 = v129;
            if (v80.f32[0] > 0.0)
              goto LABEL_151;
          }
          if (v80.f32[0] < 0.0)
          {
            v81 = v130;
            if (v139 <= 0.0)
              break;
          }
          else
          {
            if (v80.f32[0] > 0.0)
              v154 = 1;
            else
              v154 = v149;
            v81 = v130;
            if ((v154 & 1) != 0)
              break;
          }
LABEL_151:
          ++v115;
          v155 = *(_QWORD *)(a1 + 88);
          v156 = *(int *)(*(_QWORD *)(v155 + 336) + 16 * v121 + 4 * v81);
          if ((int)v121 <= *(_DWORD *)(*(_QWORD *)(v120 + 8 * v81) + 68))
            v157 = 432;
          else
            v157 = 408;
          v158 = (unsigned int *)(*(_QWORD *)(v155 + v157) + 4 * v156);
          do
            v159 = __ldaxr(v158);
          while (__stlxr(v159 + 1, v158));
          v116 = v120;
        }
        while (v115 < **(_QWORD **)(a1 + 96));
      }
LABEL_68:
      if (++v38 == v37)
        goto LABEL_168;
    }
    v73 = v71[5];
LABEL_83:
    v84 = v71[4];
    if (v84 == v73)
      goto LABEL_68;
    goto LABEL_84;
  }
LABEL_168:
  **(_BYTE **)(a1 + 104) = 1;
  free(v10);
LABEL_169:
  v163 = v205;
  if (v205)
  {
    p_shared_owners = (unint64_t *)&v205->__shared_owners_;
    do
      v165 = __ldaxr(p_shared_owners);
    while (__stlxr(v165 - 1, p_shared_owners));
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
      std::__shared_weak_count::__release_weak(v163);
    }
  }
  return sub_2396FD3E8((uint64_t)v207);
}

void sub_2394D8E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  uint64_t v51;
  std::__shared_weak_count *v53;
  unint64_t *p_shared_owners;
  unint64_t v55;

  free(v50);
  v53 = *(std::__shared_weak_count **)(v51 - 160);
  if (v53)
  {
    p_shared_owners = (unint64_t *)&v53->__shared_owners_;
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  sub_2396FD3E8(v51 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D8F38(uint64_t a1, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 256) = xmmword_239EC6860;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 1;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 1;
  if ((sub_2394D915C((uint64_t *)a1, a2, a3) & 1) == 0)
    *(_BYTE *)(a1 + 352) = 0;
  v6 = (_QWORD *)a4[3];
  if (!v6)
  {
    v14 = 0;
    v7 = (_QWORD *)(a1 + 176);
    goto LABEL_11;
  }
  if (v6 == a4)
  {
    v14 = v13;
    (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v13);
    v6 = v14;
    v7 = (_QWORD *)(a1 + 176);
    if (v14)
      goto LABEL_9;
LABEL_11:
    v16 = v6;
    goto LABEL_12;
  }
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
  v14 = v6;
  v7 = (_QWORD *)(a1 + 176);
  if (!v6)
    goto LABEL_11;
LABEL_9:
  if (v6 != v13)
  {
    v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    goto LABEL_11;
  }
  v16 = v15;
  (*(void (**)(_QWORD *, _QWORD *))(v13[0] + 24))(v13, v15);
LABEL_12:
  sub_2394D9710(v15, v7);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
  v10 = v14;
  if (v14 == v13)
  {
    v11 = 4;
    v10 = v13;
    goto LABEL_21;
  }
  if (v14)
  {
    v11 = 5;
LABEL_21:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

void sub_2394D9104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == &a10)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
    {
      sub_2394B6980(v13);
      _Unwind_Resume(a1);
    }
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
  sub_2394B6980(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_2394D915C(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;

  if (!a2)
    sub_239EBFFB0();
  v6 = 32 * (a2 + 1);
  v7 = (char *)operator new[]();
  *a1 = (uint64_t)v7;
  bzero(v7, v6);
  v8 = a2;
  v9 = &v7[32 * a2];
  a1[1] = (uint64_t)v9;
  a1[2] = (uint64_t)v9;
  v10 = 40 * a3;
  *((_DWORD *)a1 + 14) = a2;
  *((_DWORD *)a1 + 15) = a3;
  a1[8] = v10;
  v11 = (void *)operator new[]();
  v12 = (void *)operator new[]();
  bzero(v11, v10);
  bzero(v12, 16 * a3);
  a1[20] = (uint64_t)v12;
  a1[21] = (uint64_t)v12;
  a1[3] = (uint64_t)v11;
  a1[4] = (uint64_t)v11;
  v13 = a1[11];
  if (v13)
  {
    MEMORY[0x23B83E2F8](v13, 0x20C8093837F09);
    a1[11] = 0;
  }
  v14 = operator new[]();
  v15 = 0;
  a1[11] = v14;
  do
  {
    *(_QWORD *)(a1[11] + v15) = 0;
    v15 += 8;
  }
  while (v15 != 0x8000);
  *((_OWORD *)a1 + 6) = xmmword_239EC6CF0;
  v16 = a1[14];
  if (v16)
  {
    MEMORY[0x23B83E2F8](v16, 0x20C8093837F09);
    a1[14] = 0;
  }
  v17 = operator new[]();
  v18 = 0;
  a1[14] = v17;
  do
  {
    *(_QWORD *)(a1[14] + v18) = 0;
    v18 += 8;
  }
  while (v18 != 0x8000);
  *(_OWORD *)(a1 + 15) = xmmword_239EC6CF0;
  v19 = a1[17];
  if (v19)
  {
    MEMORY[0x23B83E2F8](v19, 0x20C8093837F09);
    a1[17] = 0;
  }
  v20 = operator new[]();
  v21 = 0;
  a1[17] = v20;
  do
  {
    *(_QWORD *)(a1[17] + v21) = 0;
    v21 += 8;
  }
  while (v21 != 0x8000);
  *((_OWORD *)a1 + 9) = xmmword_239EC6CF0;
  v22 = *a1;
  v23 = 4096;
  if (a2 < 0x1000uLL)
    v23 = a2;
  if (a2 >= 0x8000)
    v24 = (unint64_t)a2 >> 3;
  else
    v24 = v23;
  a1[29] = v24;
  v25 = a1[26];
  if (v25)
  {
    MEMORY[0x23B83E2F8](v25, 0x20C8093837F09);
    a1[26] = 0;
  }
  v26 = (void *)operator new[]();
  a1[26] = (uint64_t)v26;
  bzero(v26, 8 * a1[29] + 8);
  a1[27] = v22;
  a1[28] = 0;
  v27 = *a1;
  a1[33] = v24;
  v28 = a1[30];
  if (v28)
  {
    MEMORY[0x23B83E2F8](v28, 0x20C8093837F09);
    a1[30] = 0;
  }
  v29 = (void *)operator new[]();
  a1[30] = (uint64_t)v29;
  bzero(v29, 8 * a1[33] + 8);
  a1[31] = v27;
  a1[32] = 0;
  v30 = *a1;
  a1[40] = v24;
  a1[41] = v8;
  a1[39] = v30;
  v31 = v24 + 1;
  v33 = a1[34];
  v32 = a1[35];
  v34 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v33) >> 3);
  if (v34 <= v24)
  {
    sub_2394D951C((uint64_t)(a1 + 34), v31 - v34);
  }
  else if (v31 < v34)
  {
    v35 = v33 + 24 * v31;
    if (v32 != v35)
    {
      v36 = a1[35];
      do
      {
        v38 = *(void **)(v36 - 24);
        v36 -= 24;
        v37 = v38;
        if (v38)
        {
          *(_QWORD *)(v32 - 16) = v37;
          operator delete(v37);
        }
        v32 = v36;
      }
      while (v36 != v35);
    }
    a1[35] = v35;
  }
  a1[37] = 0;
  a1[38] = -1;
  *((_DWORD *)a1 + 18) = 0;
  return 1;
}

void sub_2394D951C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

_QWORD *sub_2394D9710(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2394D98A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

uint64_t sub_2394D98B0(uint64_t *a1)
{
  uint64_t result;
  uint64_t *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int32 v18;
  int32x2_t *v19;
  uint64_t v20;
  unsigned __int32 v21;
  const float *v22;
  int32x2_t v23;
  BOOL v24;
  float v25;
  int32x2_t *v26;
  float v27;
  BOOL v28;
  int v29;
  float v30;
  unint64_t v31;
  _OWORD *v32;
  unint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  __int128 *v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 v51;
  __int128 *v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 v55;
  unsigned int v56;

  v3 = a1 + 20;
  result = a1[20];
  v4 = (unsigned int *)a1[21];
  v5 = (uint64_t)v4 - result;
  v7 = *a1;
  v6 = a1[1];
  *(_DWORD *)v7 = 0;
  if (v7 != v6)
  {
    v8 = 0;
    v9 = v7;
    v10 = v7;
    do
    {
      v11 = *(_DWORD *)(v9 + 20);
      *(_DWORD *)(v9 + 20) = v8;
      v8 += v11;
      *(_DWORD *)(v10 + 32) = v8;
      v10 += 32;
      v9 = v10;
    }
    while (v10 != v6);
  }
  v12 = v5 >> 3;
  *(_DWORD *)(v6 + 20) = v5 >> 3;
  v13 = a1[3];
  a1[4] = v13 + 20 * v12;
  if ((unsigned int *)result != v4)
  {
    v14 = (unsigned int *)result;
    do
    {
      v16 = *v14;
      v15 = v14[1];
      v17 = 32 * v15;
      v18 = *(_DWORD *)(v7 + 32 * v15);
      v19 = (int32x2_t *)(v13 + 20 * v18);
      v20 = 32 * v16;
      v21 = *(_DWORD *)(v7 + 32 * v16);
      v19->i32[0] = v21;
      v19->i32[1] = v16;
      v22 = (const float *)(v14 + 2);
      v23 = (int32x2_t)vld1_dup_f32(v22);
      v19[1] = v23;
      v23.i32[0] = v14[3];
      v24 = *(float *)v23.i32 != 0.0;
      v25 = 0.0 - *(float *)v23.i32;
      if (*(float *)v23.i32 >= 0.0)
        v25 = *((float *)v14 + 3);
      if (v25 <= 1.0e-15)
        v24 = 0;
      v19[2].i8[0] = v24;
      v26 = (int32x2_t *)(v13 + 20 * v21);
      v26->i32[0] = v18;
      v26->i32[1] = v15;
      v26[1] = vdup_lane_s32(v23, 0);
      v27 = *((float *)v14 + 2);
      v28 = v27 != 0.0;
      if (v27 < 0.0)
        v27 = 0.0 - v27;
      if (v27 <= 1.0e-15)
        v28 = 0;
      *(_DWORD *)(v7 + v20) = v21 + 1;
      v29 = *(_DWORD *)(v7 + v17);
      v26[2].i8[0] = v28;
      *(_DWORD *)(v7 + v17) = v29 + 1;
      v14 += 4;
    }
    while (v14 != v4);
  }
  if (v7 != v6)
  {
    while (1)
    {
      *(_DWORD *)v7 = *(_DWORD *)(v7 + 20);
      *(_DWORD *)(v7 + 12) = -1;
      *(_QWORD *)(v7 + 4) = -1;
      v30 = *(float *)(v7 + 16);
      if (v30 > 0.0)
        break;
      if (v30 < 0.0)
      {
        *(_DWORD *)(v7 + 20) = -1;
        v33 = a1[18];
        if (v33 < a1[19])
        {
          v34 = (_OWORD *)a1[17];
          if (!v34)
            goto LABEL_17;
          goto LABEL_60;
        }
        v34 = (_OWORD *)operator new[]();
        v42 = a1[19];
        bzero(v34, 16 * v42);
        v43 = a1[17];
        v44 = a1[18];
        v45 = 2 * v42;
        if (v44)
        {
          if (v44 < 0xC)
          {
            v46 = 0;
            v47 = 0;
            goto LABEL_55;
          }
          v47 = 0;
          v46 = 0;
          if (!(_DWORD)v44)
            goto LABEL_55;
          if ((v44 - 1) >> 32)
            goto LABEL_55;
          if ((unint64_t)v34 - v43 < 0x20)
            goto LABEL_55;
          v46 = v44 & 0xFFFFFFFFFFFFFFFCLL;
          v47 = v44 & 0xFFFFFFFC;
          v52 = (__int128 *)(v43 + 16);
          v53 = v34 + 1;
          v54 = v44 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v55 = *v52;
            *(v53 - 1) = *(v52 - 1);
            *v53 = v55;
            v52 += 2;
            v53 += 2;
            v54 -= 4;
          }
          while (v54);
          if (v44 != v46)
          {
LABEL_55:
            v56 = v47 + 1;
            do
            {
              *((_QWORD *)v34 + v46) = *(_QWORD *)(v43 + 8 * v46);
              v46 = v56++;
            }
            while (v44 > v46);
          }
          a1[19] = v45;
LABEL_58:
          MEMORY[0x23B83E2F8]();
          v33 = a1[18];
        }
        else
        {
          a1[19] = v45;
          if (v43)
            goto LABEL_58;
          v33 = 0;
        }
        a1[17] = (uint64_t)v34;
LABEL_60:
        *((_QWORD *)v34 + v33) = v7;
        a1[18] = v33 + 1;
        goto LABEL_17;
      }
      *(_DWORD *)(v7 + 20) = 0;
LABEL_17:
      v7 += 32;
      if (v7 == a1[1])
      {
        result = *v3;
        goto LABEL_63;
      }
    }
    *(_DWORD *)(v7 + 20) = 1;
    v31 = a1[15];
    if (v31 < a1[16])
    {
      v32 = (_OWORD *)a1[14];
      if (!v32)
        goto LABEL_17;
      goto LABEL_39;
    }
    v32 = (_OWORD *)operator new[]();
    v35 = a1[16];
    bzero(v32, 16 * v35);
    v36 = a1[14];
    v37 = a1[15];
    v38 = 2 * v35;
    if (!v37)
    {
      a1[16] = v38;
      if (!v36)
      {
        v31 = 0;
        goto LABEL_38;
      }
LABEL_37:
      MEMORY[0x23B83E2F8]();
      v31 = a1[15];
LABEL_38:
      a1[14] = (uint64_t)v32;
LABEL_39:
      *((_QWORD *)v32 + v31) = v7;
      a1[15] = v31 + 1;
      goto LABEL_17;
    }
    if (v37 >= 0xC)
    {
      v40 = 0;
      v39 = 0;
      if ((_DWORD)v37)
      {
        if (!((v37 - 1) >> 32) && (unint64_t)v32 - v36 >= 0x20)
        {
          v39 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          v40 = v37 & 0xFFFFFFFC;
          v48 = (__int128 *)(v36 + 16);
          v49 = v32 + 1;
          v50 = v37 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *v48;
            *(v49 - 1) = *(v48 - 1);
            *v49 = v51;
            v48 += 2;
            v49 += 2;
            v50 -= 4;
          }
          while (v50);
          if (v37 == v39)
            goto LABEL_32;
        }
      }
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v41 = v40 + 1;
    do
    {
      *((_QWORD *)v32 + v39) = *(_QWORD *)(v36 + 8 * v39);
      v39 = v41++;
    }
    while (v37 > v39);
LABEL_32:
    a1[16] = v38;
    goto LABEL_37;
  }
LABEL_63:
  if (result)
    result = MEMORY[0x23B83E2F8](result, 0x1000C80451B5BE8);
  *v3 = 0;
  v3[1] = 0;
  return result;
}

float sub_2394D9CC4(uint64_t a1, int a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE __p[24];

  v5 = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x100000001;
  v6 = a1 + 136;
  v7 = a1 + 112;
  v8 = (__int128 *)(a1 + 280);
  while (1)
  {
    v14 = a2;
    v15 = *(_QWORD *)(a1 + 200);
    if (v15)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 48))(v15) & 1) != 0)
        return *(float *)(a1 + 72);
    }
    if ((v14 & 1) != 0)
    {
      v16 = *(_DWORD *)(a1 + 84);
      v17 = *(_DWORD *)(a1 + 80) + 1;
      *(_DWORD *)(a1 + 80) = v17;
      v18 = *(_QWORD *)(v5 + 16);
      v19 = *(_OWORD *)v5;
      *(_OWORD *)v5 = *(_OWORD *)v7;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v7 = v19;
      *(_QWORD *)(v7 + 16) = v18;
      if (v17 > v16)
        v16 = v17;
      v20 = v16;
      v21 = *(_QWORD *)(a1 + 232);
      if (v21 < v20)
        goto LABEL_16;
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 80);
      v23 = *(_DWORD *)(a1 + 84) + 1;
      *(_DWORD *)(a1 + 84) = v23;
      v24 = *(_QWORD *)(v5 + 16);
      v25 = *(_OWORD *)v5;
      *(_OWORD *)v5 = *(_OWORD *)v6;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 16);
      *(_OWORD *)v6 = v25;
      *(_QWORD *)(v6 + 16) = v24;
      if (v22 > v23)
        v23 = v22;
      v20 = v23;
      v21 = *(_QWORD *)(a1 + 232);
      if (v21 < v20)
      {
LABEL_16:
        *(_QWORD *)(a1 + 232) = 2 * v21;
        v26 = (void *)operator new[]();
        bzero(v26, 8 * *(_QWORD *)(a1 + 232) + 8);
        v27 = *(_QWORD *)(a1 + 208);
        if (v27)
          MEMORY[0x23B83E2F8](v27, 0x20C8093837F09);
        *(_QWORD *)(a1 + 208) = v26;
      }
    }
    v28 = *(_QWORD *)(a1 + 264);
    if (v28 < v20)
    {
      *(_QWORD *)(a1 + 264) = 2 * v28;
      v30 = (void *)operator new[]();
      bzero(v30, 8 * *(_QWORD *)(a1 + 264) + 8);
      v31 = *(_QWORD *)(a1 + 240);
      if (v31)
        MEMORY[0x23B83E2F8](v31, 0x20C8093837F09);
      *(_QWORD *)(a1 + 240) = v30;
      v29 = *(_QWORD *)(a1 + 320);
      if (v29 >= v20)
        goto LABEL_33;
LABEL_25:
      *(_QWORD *)(a1 + 320) = 2 * v29;
      sub_2394DA4C0(__p, (2 * v29) | 1);
      v33 = *(_OWORD *)__p;
      *(_QWORD *)__p = *(_QWORD *)(a1 + 272);
      v32 = *(char **)__p;
      v34 = *(_QWORD *)&__p[16];
      v35 = *v8;
      *(_OWORD *)(a1 + 272) = v33;
      *(_QWORD *)(a1 + 288) = v34;
      *(_OWORD *)&__p[8] = v35;
      if (v32)
      {
        v36 = (char *)v35;
        v37 = v32;
        if ((char *)v35 != v32)
        {
          v38 = (char *)v35;
          do
          {
            v40 = (void *)*((_QWORD *)v38 - 3);
            v38 -= 24;
            v39 = v40;
            if (v40)
            {
              *((_QWORD *)v36 - 2) = v39;
              operator delete(v39);
            }
            v36 = v38;
          }
          while (v38 != v32);
          v37 = *(char **)__p;
        }
        *(_QWORD *)&__p[8] = v32;
        operator delete(v37);
      }
      goto LABEL_33;
    }
    v29 = *(_QWORD *)(a1 + 320);
    if (v29 < v20)
      goto LABEL_25;
LABEL_33:
    if ((v14 & 1) != 0)
    {
      sub_2394D9FA8(a1);
      v41 = *(_QWORD *)(a1 + 120);
      if ((a3 & 1) != 0)
        goto LABEL_39;
LABEL_35:
      if (!v41 || !*(_QWORD *)(a1 + 144))
        return *(float *)(a1 + 72);
LABEL_2:
      v10 = *(_QWORD *)(a1 + 336);
      v9 = *(_QWORD *)(a1 + 344);
      v11 = v9 >= v10;
      v12 = v9 != v10;
      v13 = v11;
      a2 = (v12 | ~v14) & v13;
    }
    else
    {
      sub_2394DA244(a1);
      v41 = *(_QWORD *)(a1 + 120);
      if ((a3 & 1) == 0)
        goto LABEL_35;
LABEL_39:
      v42 = *(_QWORD *)(a1 + 144);
      if (v41)
      {
        a2 = 1;
        if (v42)
          goto LABEL_2;
      }
      else
      {
        a2 = 0;
        if (!v42)
          return *(float *)(a1 + 72);
      }
    }
  }
}

void sub_2394D9FA8(uint64_t a1)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  float v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  __int128 *v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;

  v2 = *(unsigned int ***)(a1 + 88);
  v3 = v2;
  while (v2)
  {
    if (v3 == &v2[*(_QWORD *)(a1 + 96)])
      goto LABEL_40;
LABEL_8:
    v4 = *v3;
    if ((*v3)[5] == *(_DWORD *)(a1 + 80) - 1)
    {
      v5 = v4[8];
      if (*v4 != v5)
      {
        v6 = *(_QWORD *)(a1 + 24);
        v7 = v6 + 20 * v5;
        v8 = v6 + 20 * *v4;
        while (1)
        {
          v10 = *(float *)(v8 + 8);
          if (v10 == 0.0)
            goto LABEL_13;
          if (v10 < 0.0)
            v10 = 0.0 - v10;
          if (v10 <= 1.0e-15)
            goto LABEL_13;
          v11 = *(_QWORD *)a1 + 32 * *(unsigned int *)(v8 + 4);
          v12 = *(_DWORD *)(v11 + 20);
          if (v12)
          {
            if (v12 < 0)
            {
              sub_2394DA588(a1, (float *)v8);
              if (v4[5] != *(_DWORD *)(a1 + 80) - 1)
              {
LABEL_2:
                v2 = *(unsigned int ***)(a1 + 88);
                break;
              }
              if (*(float *)(v8 + 8) != 0.0)
                v8 -= 20;
            }
          }
          else
          {
            *(_BYTE *)(v11 + 28) = 0;
            *(_DWORD *)(v11 + 20) = v4[5] + 1;
            *(_DWORD *)(v11 + 4) = *(_DWORD *)v8;
            *(_DWORD *)(v11 + 12) = v4[2];
            v4[2] = (unint64_t)(v11 - *(_QWORD *)a1) >> 5;
            v13 = *(_QWORD *)(a1 + 120);
            if (v13 >= *(_QWORD *)(a1 + 128))
            {
              v9 = (_OWORD *)operator new[]();
              v14 = *(_QWORD *)(a1 + 128);
              bzero(v9, 16 * v14);
              v15 = *(_QWORD *)(a1 + 112);
              v16 = *(_QWORD *)(a1 + 120);
              v17 = 2 * v14;
              if (v16)
              {
                if (v16 < 0xC)
                {
                  v18 = 0;
                  v19 = 0;
                  goto LABEL_27;
                }
                v19 = 0;
                v18 = 0;
                if (!(_DWORD)v16)
                  goto LABEL_27;
                if ((v16 - 1) >> 32)
                  goto LABEL_27;
                if ((unint64_t)v9 - v15 < 0x20)
                  goto LABEL_27;
                v18 = v16 & 0xFFFFFFFFFFFFFFFCLL;
                v19 = v16 & 0xFFFFFFFC;
                v21 = (__int128 *)(v15 + 16);
                v22 = v9 + 1;
                v23 = v16 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v24 = *v21;
                  *(v22 - 1) = *(v21 - 1);
                  *v22 = v24;
                  v21 += 2;
                  v22 += 2;
                  v23 -= 4;
                }
                while (v23);
                if (v16 != v18)
                {
LABEL_27:
                  v20 = v19 + 1;
                  do
                  {
                    *((_QWORD *)v9 + v18) = *(_QWORD *)(v15 + 8 * v18);
                    v18 = v20++;
                  }
                  while (v16 > v18);
                }
                *(_QWORD *)(a1 + 128) = v17;
LABEL_31:
                MEMORY[0x23B83E2F8]();
                v13 = *(_QWORD *)(a1 + 120);
                *(_QWORD *)(a1 + 112) = v9;
              }
              else
              {
                *(_QWORD *)(a1 + 128) = v17;
                if (v15)
                  goto LABEL_31;
                v13 = 0;
                *(_QWORD *)(a1 + 112) = v9;
              }
LABEL_12:
              *((_QWORD *)v9 + v13) = v11;
              *(_QWORD *)(a1 + 120) = v13 + 1;
              goto LABEL_13;
            }
            v9 = *(_OWORD **)(a1 + 112);
            if (v9)
              goto LABEL_12;
          }
LABEL_13:
          v8 += 20;
          if (v8 == v7)
            goto LABEL_2;
        }
      }
    }
    ++v3;
  }
  if (v3)
    goto LABEL_8;
LABEL_40:
  *(_QWORD *)(a1 + 96) = 0;
}

void sub_2394DA244(uint64_t a1)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unsigned int v22;

  v2 = *(unsigned int ***)(a1 + 88);
  v3 = v2;
  while (v2)
  {
    if (v3 == &v2[*(_QWORD *)(a1 + 96)])
      goto LABEL_35;
LABEL_8:
    v4 = *v3;
    if ((*v3)[5] == 1 - *(_DWORD *)(a1 + 84))
    {
      v5 = v4[8];
      if (*v4 != v5)
      {
        v6 = *(_QWORD *)(a1 + 24);
        v7 = (unsigned int *)(v6 + 20 * v5);
        v8 = (unsigned int *)(v6 + 20 * *v4);
        while (1)
        {
          if (!*((_BYTE *)v8 + 16))
            goto LABEL_13;
          v10 = *(_QWORD *)a1 + 32 * v8[1];
          v11 = *(_DWORD *)(v10 + 20);
          if (v11)
          {
            if (v11 >= 1)
            {
              sub_2394DA588(a1, (float *)(*(_QWORD *)(a1 + 24) + 20 * *v8));
              if (v4[5] != 1 - *(_DWORD *)(a1 + 84))
              {
LABEL_2:
                v2 = *(unsigned int ***)(a1 + 88);
                break;
              }
              v8 -= 5 * *((char *)v8 + 16);
            }
          }
          else
          {
            *(_BYTE *)(v10 + 28) = 0;
            *(_DWORD *)(v10 + 20) = v4[5] - 1;
            *(_DWORD *)(v10 + 4) = *v8;
            *(_DWORD *)(v10 + 12) = v4[2];
            v4[2] = (unint64_t)(v10 - *(_QWORD *)a1) >> 5;
            v12 = *(_QWORD *)(a1 + 144);
            if (v12 >= *(_QWORD *)(a1 + 152))
            {
              v9 = (_OWORD *)operator new[]();
              v13 = *(_QWORD *)(a1 + 152);
              bzero(v9, 16 * v13);
              v14 = *(_QWORD *)(a1 + 136);
              v15 = *(_QWORD *)(a1 + 144);
              if (v15)
              {
                if (v15 < 0xC)
                {
                  v16 = 0;
                  v17 = 0;
                  goto LABEL_31;
                }
                v17 = 0;
                v16 = 0;
                if (!(_DWORD)v15)
                  goto LABEL_31;
                if ((v15 - 1) >> 32)
                  goto LABEL_31;
                if ((unint64_t)v9 - v14 < 0x20)
                  goto LABEL_31;
                v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
                v17 = v15 & 0xFFFFFFFC;
                v18 = (__int128 *)(v14 + 16);
                v19 = v9 + 1;
                v20 = v15 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v21 = *v18;
                  *(v19 - 1) = *(v18 - 1);
                  *v19 = v21;
                  v18 += 2;
                  v19 += 2;
                  v20 -= 4;
                }
                while (v20);
                if (v15 != v16)
                {
LABEL_31:
                  v22 = v17 + 1;
                  do
                  {
                    *((_QWORD *)v9 + v16) = *(_QWORD *)(v14 + 8 * v16);
                    v16 = v22++;
                  }
                  while (v15 > v16);
                }
                *(_QWORD *)(a1 + 152) = 2 * v13;
LABEL_34:
                MEMORY[0x23B83E2F8]();
                v12 = *(_QWORD *)(a1 + 144);
                *(_QWORD *)(a1 + 136) = v9;
              }
              else
              {
                *(_QWORD *)(a1 + 152) = 2 * v13;
                if (v14)
                  goto LABEL_34;
                v12 = 0;
                *(_QWORD *)(a1 + 136) = v9;
              }
LABEL_12:
              *((_QWORD *)v9 + v12) = v10;
              *(_QWORD *)(a1 + 144) = v12 + 1;
              goto LABEL_13;
            }
            v9 = *(_OWORD **)(a1 + 136);
            if (v9)
              goto LABEL_12;
          }
LABEL_13:
          v8 += 5;
          if (v8 == v7)
            goto LABEL_2;
        }
      }
    }
    ++v3;
  }
  if (v3)
    goto LABEL_8;
LABEL_35:
  *(_QWORD *)(a1 + 96) = 0;
}

_QWORD *sub_2394DA4C0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2394DA568(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EBFED4((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void sub_2394DA588(uint64_t a1, float *a2)
{
  float v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  float v18;
  float v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  float v24;
  float v28;
  float v29;
  int v30;
  int v31;

  v3 = a2[2];
  v4 = *(_QWORD *)a1;
  v5 = *((unsigned int *)a2 + 1);
  v6 = *(float *)(*(_QWORD *)a1 + 32 * v5 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = v3;
  v9 = v5;
  if (v6 == 0.0)
  {
    v9 = *((unsigned int *)a2 + 1);
    v8 = a2[2];
    do
    {
      v10 = v7 + 20 * *(unsigned int *)(v4 + 32 * v9 + 4);
      if (*(float *)(v10 + 8) < v8)
        v8 = *(float *)(v10 + 8);
      v9 = *(unsigned int *)(v10 + 4);
      v6 = *(float *)(v4 + 32 * v9 + 16);
    }
    while (v6 == 0.0);
  }
  v11 = -v6;
  if (v8 > v11)
    v8 = v11;
  v12 = *(_DWORD *)(v4 + 32 * v9 + 20);
  v13 = *a2;
  v14 = v7 + 20 * *(unsigned int *)a2;
  v17 = *(_DWORD *)(v14 + 4);
  v16 = (unsigned int *)(v14 + 4);
  v15 = v17;
  v18 = *(float *)(v4 + 32 * v17 + 16);
  if (v18 == 0.0)
  {
    v19 = a2[2];
    do
    {
      v20 = (unsigned int *)(v7 + 20 * *(unsigned int *)(v4 + 32 * v15 + 4));
      v21 = *v20;
      v15 = v20[1];
      v22 = v7 + 20 * v21;
      if (*(float *)(v22 + 8) < v19)
        v19 = *(float *)(v22 + 8);
      v18 = *(float *)(v4 + 32 * v15 + 16);
    }
    while (v18 == 0.0);
  }
  else
  {
    v19 = a2[2];
  }
  if (v18 < v19)
    v19 = v18;
  v23 = *(_DWORD *)(v4 + 32 * v15 + 20);
  if (v3 >= v8)
    v24 = v8;
  else
    v24 = a2[2];
  if (v23 == 1 || v12 != -1)
    v24 = a2[2];
  if (v3 >= v19)
    v3 = v19;
  if (v23 != 1 || v12 == -1)
    v3 = v24;
  if (v8 >= v19)
    v8 = v19;
  if (v23 == 1 || v12 == -1)
    v28 = v3;
  else
    v28 = v8;
  *(float *)(v7 + 20 * LODWORD(v13) + 8) = v28 + *(float *)(v7 + 20 * LODWORD(v13) + 8);
  *((_BYTE *)a2 + 16) = 1;
  v29 = a2[2] - v28;
  a2[2] = v29;
  if (v29 == 0.0)
    goto LABEL_43;
  if (v29 < 0.0)
    v29 = 0.0 - v29;
  if (v29 <= 1.0e-15)
LABEL_43:
    *(_BYTE *)(v7 + 20 * LODWORD(v13) + 16) = 0;
  *(float *)(a1 + 72) = *(float *)(a1 + 72) - v28;
  v30 = sub_2394DA788((uint64_t *)a1, v4 + 32 * v5, v28);
  sub_2394DAA2C(a1, v30, 0);
  sub_2394DB52C(a1);
  v31 = sub_2394DB7AC((uint64_t *)a1, *(_QWORD *)a1 + 32 * *v16, v28);
  sub_2394DBA48(a1, v31, 0);
  sub_2394DC4CC((uint64_t *)a1);
}

unint64_t sub_2394DA788(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v4;
  unint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int *v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v4 = a2;
  v6 = (*((_DWORD *)a1 + 21) + 1);
  ++*((_DWORD *)a1 + 19);
  v7 = (float *)(a2 + 16);
  v8 = *(float *)(a2 + 16);
  while (v8 >= 0.0)
  {
    v17 = a1[3];
    v18 = *(_DWORD *)(v4 + 4);
    v19 = (int *)(v17 + 20 * v18);
    v20 = *v19;
    v21 = *((float *)v19 + 2);
    v22 = a3 + v8;
    v23 = v8 + (float)(a3 - v21);
    if (v21 < v22)
    {
      a3 = *((float *)v19 + 2);
    }
    else
    {
      v23 = 0.0;
      a3 = v22;
    }
    *v7 = v23;
    *(float *)(v17 + 20 * v20 + 8) = *(float *)(v17 + 20 * v20 + 8) + a3;
    *((_BYTE *)v19 + 16) = 1;
    v24 = *((float *)v19 + 2) - a3;
    *((float *)v19 + 2) = v24;
    if (v24 == 0.0)
      goto LABEL_27;
    if (v24 < 0.0)
      v24 = 0.0 - v24;
    if (v24 <= 1.0e-15)
    {
LABEL_27:
      *(_BYTE *)(v17 + 20 * v20 + 16) = 0;
      if (v18 != -1)
      {
        v25 = *a1;
        if (*a1)
        {
          v26 = v25 + 32 * *(unsigned int *)(v17 + 20 * v18 + 4);
          v29 = *(_DWORD *)(v26 + 8);
          v28 = (_DWORD *)(v26 + 8);
          v27 = v29;
          v30 = v25 + 32 * v29;
          if (v29 == -1)
            v30 = 0;
          if (v30 != v4)
          {
            v31 = ((unint64_t)(v4 - v25) >> 5);
            for (i = *(unsigned int *)(v30 + 12); i != v31; i = *(unsigned int *)(v25 + 32 * i + 12))
              v27 = i;
            v28 = (_DWORD *)(v25 + 32 * v27 + 12);
          }
          *v28 = *(_DWORD *)(v4 + 12);
        }
      }
      v6 = -(uint64_t)*(int *)(v4 + 20);
      v33 = a1[26];
      if (v33 && a1[29] >= v6)
      {
        v34 = *(_QWORD *)(v33 - 8 * *(int *)(v4 + 20));
        if (v34)
          v35 = (unint64_t)(v34 - a1[27]) >> 5;
        else
          v35 = -1;
        *(_DWORD *)(v4 + 12) = v35;
        *(_QWORD *)(v33 + 8 * v6) = v4;
      }
      v36 = a1[28];
      if (v36 <= v6)
        v36 = v6;
      a1[28] = v36;
      if (*v7 != 0.0)
      {
        v37 = a1[37];
        if (v37 <= v6)
          v37 = v6;
        a1[37] = v37;
      }
    }
    v38 = *(unsigned int *)(v17 + 20 * v18 + 4);
    v4 = *a1 + 32 * v38;
    v7 = (float *)(v4 + 16);
    v8 = *(float *)(v4 + 16);
    if (v8 > 0.0)
    {
      sub_2394DC5F8(a1 + 34, *a1 + 32 * v38);
      v8 = *v7;
    }
  }
  v9 = -v8;
  if (a3 <= (float)-v8)
    v9 = a3;
  *((float *)a1 + 18) = v9 + *((float *)a1 + 18);
  v10 = a3 + v8;
  *v7 = v10;
  result = v6;
  if (v10 >= 0.0)
  {
    result = -(uint64_t)*(int *)(v4 + 20);
    v12 = a1[26];
    if (v12 && a1[29] >= result)
    {
      v13 = *(_QWORD *)(v12 - 8 * *(int *)(v4 + 20));
      if (v13)
        v14 = (unint64_t)(v13 - a1[27]) >> 5;
      else
        v14 = -1;
      *(_DWORD *)(v4 + 12) = v14;
      *(_QWORD *)(v12 + 8 * result) = v4;
      v10 = *v7;
    }
    v15 = a1[28];
    if (v15 <= result)
      v15 = result;
    a1[28] = v15;
    if (v10 != 0.0)
    {
      v16 = a1[37];
      if (v16 <= result)
        v16 = result;
      a1[37] = v16;
    }
  }
  return result;
}

void sub_2394DAA2C(uint64_t a1, int a2, char a3)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t *v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  unsigned int v74;
  __int128 *v75;
  _OWORD *v76;
  unint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unsigned int v93;
  __int128 *v94;
  _OWORD *v95;
  unint64_t v96;
  __int128 v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  _BYTE *v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _OWORD *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  int v127;
  unint64_t v128;
  unint64_t v129;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 224);
  if (v5 < a2)
  {
    *(_QWORD *)(a1 + 224) = 0;
    return;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = (uint64_t *)(a1 + 272);
  do
  {
    if ((a3 & 1) == 0 && !v8 && v4 > *(_QWORD *)(a1 + 296))
      return;
    v129 = v4 + 1;
    if (*(_QWORD *)(a1 + 232) >= v4)
    {
      v128 = v4;
      while (1)
      {
        v14 = *(_QWORD *)(a1 + 208);
        v15 = *(unsigned int **)(v14 + 8 * v4);
        if (!v15)
        {
LABEL_5:
          v5 = *(_QWORD *)(a1 + 224);
          goto LABEL_6;
        }
        v16 = v15[3];
        if ((_DWORD)v16 != -1)
          break;
        *(_QWORD *)(v14 + 8 * v4) = 0;
        v17 = *(_DWORD *)(a1 + 76);
        if (v15[6] != v17)
          goto LABEL_22;
LABEL_23:
        ++v7;
        if (!v8)
          v8 = v7 >= 3 * v6;
        v18 = *(_QWORD *)(a1 + 24);
        if (*((_BYTE *)v15 + 28))
        {
          v19 = v15[1];
          v15[1] = -1;
          v20 = (int)v15[5];
          if ((_DWORD)v20 == -1)
            goto LABEL_32;
        }
        else
        {
          v19 = *v15;
          *((_BYTE *)v15 + 28) = 1;
          v15[1] = -1;
          v20 = (int)v15[5];
          if ((_DWORD)v20 == -1)
            goto LABEL_32;
        }
        v21 = v15[8];
        if (v19 != v21)
        {
          v47 = 20 * v19;
          v48 = 20 * v21;
          while (1)
          {
            v49 = *(float *)(v18 + v47 + 8);
            if (v49 != 0.0)
            {
              if (v49 < 0.0)
                v49 = 0.0 - v49;
              if (v49 > 1.0e-15)
              {
                v50 = *(_QWORD *)a1 + 32 * *(unsigned int *)(v18 + v47 + 4);
                if (*(_DWORD *)(v50 + 20) == (_DWORD)v20 + 1)
                  break;
              }
            }
            v47 += 20;
            if (v48 == v47)
              goto LABEL_32;
          }
          v51 = -858993459 * (v47 >> 2);
          v15[1] = v51;
          v15[3] = *(_DWORD *)(v50 + 8);
          *(_DWORD *)(v50 + 8) = ((unint64_t)v15 - *(_QWORD *)a1) >> 5;
          if (v51 != -1)
          {
            if (*((float *)v15 + 4) != 0.0)
            {
              v52 = -v20;
              if (*(_QWORD *)(a1 + 320) >= (unint64_t)-v20
                && ((uint64_t)v15 - *(_QWORD *)(a1 + 312)) >> 4 <= (unint64_t)(2 * *(_QWORD *)(a1 + 328)))
              {
                v125 = v6;
                v53 = (_QWORD *)(*v9 - 24 * v20);
                v55 = v53 + 1;
                v54 = (_QWORD *)v53[1];
                v56 = v53 + 2;
                v57 = v53[2];
                if ((unint64_t)v54 < v57)
                {
                  *v54 = v15;
                  v58 = v54 + 1;
                  v6 = v125;
                  *v55 = (uint64_t)v58;
                  v59 = *(_QWORD *)(a1 + 296);
                  if (v59 <= v52)
                    v59 = -v20;
                  *(_QWORD *)(a1 + 296) = v59;
                  if (!(_DWORD)v20)
                    goto LABEL_18;
                  goto LABEL_175;
                }
                v98 = (char *)*v53;
                v99 = (uint64_t)v54 - *v53;
                v100 = v99 >> 3;
                v101 = (v99 >> 3) + 1;
                if (v101 >> 61)
                  sub_2394189F8();
                v102 = v57 - (_QWORD)v98;
                if (v102 >> 2 > v101)
                  v101 = v102 >> 2;
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
                  v101 = 0x1FFFFFFFFFFFFFFFLL;
                v124 = v101;
                if (v101)
                {
                  v120 = (char *)v54 - *v53;
                  v121 = v99 >> 3;
                  v122 = v53 + 2;
                  v123 = *v9 - 24 * v20;
                  if (v101 >> 61)
                    sub_239418A80();
                  v103 = v53 + 1;
                  v104 = v8;
                  v105 = operator new(8 * v101);
                  v4 = v128;
                  v8 = v104;
                  v55 = v103;
                  v56 = v122;
                  v53 = (_QWORD *)v123;
                  v99 = (uint64_t)v120;
                  v100 = v121;
                  v106 = &v105[8 * v121];
                  *v106 = v15;
                  v107 = (uint64_t)(v106 + 1);
                  if (v54 == (_QWORD *)v98)
                  {
LABEL_170:
                    *v53 = v106;
                    *v55 = v107;
                    *v56 = &v105[8 * v124];
                    if (v54)
                    {
                      v117 = v8;
                      operator delete(v54);
                      v8 = v117;
                      v4 = v128;
                    }
                    v6 = v125;
                    *v55 = v107;
                    v118 = *(_QWORD *)(a1 + 296);
                    if (v118 <= v52)
                      v118 = -v20;
                    *(_QWORD *)(a1 + 296) = v118;
                    if (!(_DWORD)v20)
                      goto LABEL_18;
LABEL_175:
                    v119 = *(_QWORD *)(a1 + 304);
                    if (v119 >= v52)
                      v119 = -v20;
                    *(_QWORD *)(a1 + 304) = v119;
                    goto LABEL_18;
                  }
                }
                else
                {
                  v105 = 0;
                  v106 = (_QWORD *)(8 * v100);
                  *(_QWORD *)(8 * v100) = v15;
                  v107 = 8 * v100 + 8;
                  if (v54 == (_QWORD *)v98)
                    goto LABEL_170;
                }
                v108 = (char *)(v54 - 1) - v98;
                if (v108 < 0x58)
                  goto LABEL_184;
                if ((unint64_t)((char *)v54 - &v105[v99]) < 0x20)
                  goto LABEL_184;
                v109 = (v108 >> 3) + 1;
                v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
                v111 = &v54[v110 / 0xFFFFFFFFFFFFFFF8];
                v106 = (_QWORD *)((char *)v106 - v110);
                v112 = &v105[8 * v100 - 16];
                v113 = (__int128 *)(v54 - 2);
                v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v115 = *v113;
                  *(v112 - 1) = *(v113 - 1);
                  *v112 = v115;
                  v112 -= 2;
                  v113 -= 2;
                  v114 -= 4;
                }
                while (v114);
                v54 = v111;
                if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_184:
                  do
                  {
                    v116 = *--v54;
                    *--v106 = v116;
                  }
                  while (v54 != (_QWORD *)v98);
                }
                v54 = (_QWORD *)*v53;
                goto LABEL_170;
              }
            }
            goto LABEL_18;
          }
        }
LABEL_32:
        if ((_DWORD)v20 + *(_DWORD *)(a1 + 84))
        {
          v24 = v15[2];
          if ((_DWORD)v24 != -1 && *(_QWORD *)a1)
          {
            v25 = *(_QWORD *)a1 + 32 * v24;
            v127 = v7;
            do
            {
              v27 = v25;
              v28 = *(unsigned int *)(v25 + 12);
              if ((_DWORD)v28 == -1)
              {
                v25 = 0;
                if (*(float *)(v27 + 16) != 0.0)
                {
LABEL_47:
                  v29 = -(uint64_t)*(int *)(v27 + 20);
                  if (*(_QWORD *)(a1 + 320) >= v29)
                  {
                    v30 = (v27 - *(_QWORD *)(a1 + 312)) >> 4;
                    v31 = 2 * *(_QWORD *)(a1 + 328);
                    if (v30 <= v31 && v30 + 1 <= v31)
                    {
                      v33 = *v9;
                      v34 = *v9 - 24 * *(int *)(v27 + 20);
                      v37 = *(_QWORD **)(v34 + 8);
                      v36 = (_QWORD *)(v34 + 8);
                      v35 = v37;
                      v38 = v37 - 1;
                      if (*(v37 - 1) == v27)
                      {
                        *v36 = v38;
                      }
                      else
                      {
                        v39 = v35;
                        if (*(_QWORD **)(v33 - 24 * *(int *)(v27 + 20)) != v35)
                        {
                          v39 = *(_QWORD **)(v33 - 24 * *(int *)(v27 + 20));
                          while (*v39 != v27)
                          {
                            if (++v39 == v35)
                            {
                              v39 = v35;
                              break;
                            }
                          }
                        }
                        if (v39 != v35)
                        {
                          v40 = v39 + 1;
                          if (v39 + 1 != v35)
                          {
                            do
                            {
                              if (*v40 != v27)
                                *v39++ = *v40;
                              ++v40;
                            }
                            while (v40 != v35);
                            v33 = *v9;
                            v35 = *(_QWORD **)(*v9 + 24 * v29 + 8);
                          }
                        }
                        if (v39 != v35)
                        {
                          *(_QWORD *)(v33 + 24 * v29 + 8) = v39;
                          v7 = v127;
                          v9 = (uint64_t *)(a1 + 272);
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                v25 = *(_QWORD *)a1 + 32 * v28;
                if (*(float *)(v27 + 16) != 0.0)
                  goto LABEL_47;
              }
              v26 = -(uint64_t)*(int *)(v27 + 20);
              v41 = *(_QWORD *)(a1 + 208);
              if (v41 && *(_QWORD *)(a1 + 232) >= v26)
              {
                v42 = *(_QWORD *)(v41 - 8 * *(int *)(v27 + 20));
                if (v42)
                  v43 = (unint64_t)(v42 - *(_QWORD *)(a1 + 216)) >> 5;
                else
                  v43 = -1;
                *(_DWORD *)(v27 + 12) = v43;
                *(_QWORD *)(v41 + 8 * v26) = v27;
              }
              if (*(_QWORD *)(a1 + 224) > v26)
                v26 = *(_QWORD *)(a1 + 224);
              *(_QWORD *)(a1 + 224) = v26;
            }
            while (v25);
          }
          v15[2] = -1;
          if (v8)
          {
            v44 = (int)v15[5];
            v15[5] = v44 - 1;
            v13 = 1 - v44;
            if (*(_QWORD *)(a1 + 264) >= v13)
            {
              v45 = *(_QWORD *)(a1 + 240);
              v46 = *(_QWORD *)(v45 + 8 * v13);
              if (v46)
              {
                v10 = *(_QWORD *)(a1 + 248);
                v11 = v46 - v10;
                v12 = (unint64_t)(v46 - v10) >> 5;
                *(_DWORD *)(v10 + (v11 & 0x1FFFFFFFE0) + 8) = ((unint64_t)v15 - v10) >> 5;
              }
              else
              {
                LODWORD(v12) = -1;
              }
              v15[3] = v12;
              *(_QWORD *)(v45 + 8 * v13) = v15;
              if (*(_QWORD *)(a1 + 256) > v13)
                v13 = *(_QWORD *)(a1 + 256);
              *(_QWORD *)(a1 + 256) = v13;
            }
            if (v8 == 1)
              v8 = v129;
            goto LABEL_18;
          }
          v60 = *(_DWORD *)(a1 + 84);
          v61 = -v60;
          v62 = v15[5];
          v63 = -v60;
          if (v62 + v60 && (v64 = *v15, v65 = v15[8], v63 = -v60, (_DWORD)v64 != (_DWORD)v65))
          {
            v79 = *(_QWORD *)(a1 + 24);
            v80 = 20 * v65;
            v81 = 20 * v64;
            v63 = v61;
            while (1)
            {
              if (*(float *)(v79 + v81 + 8) != 0.0)
              {
                v82 = *(_DWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(v79 + v81 + 4) + 20);
                if (v82 < 0 && v82 > v63)
                {
                  v15[1] = -858993459 * (v81 >> 2);
                  v63 = v82;
                  if (v82 == v62)
                    break;
                }
              }
              v81 += 20;
              if (v80 == v81)
                goto LABEL_97;
            }
            LODWORD(v66) = -858993459 * (v81 >> 2);
            if (v66 != 0xFFFFFFFFLL)
              goto LABEL_124;
LABEL_98:
            sub_2394DC938(a1, (uint64_t)v15);
          }
          else
          {
LABEL_97:
            v66 = v15[1];
            v62 = v63;
            if (v66 == 0xFFFFFFFFLL)
              goto LABEL_98;
LABEL_124:
            v83 = v62 - 1;
            v15[5] = v83;
            if (*(_QWORD *)a1)
            {
              v84 = *(_QWORD *)a1 + 32 * *(unsigned int *)(*(_QWORD *)(a1 + 24) + 20 * v66 + 4);
              v15[3] = *(_DWORD *)(v84 + 8);
              *(_DWORD *)(v84 + 8) = ((unint64_t)v15 - *(_QWORD *)a1) >> 5;
              v61 = -*(_DWORD *)(a1 + 84);
            }
            if (v83 == v61)
            {
              v85 = *(_QWORD *)(a1 + 144);
              if (v85 < *(_QWORD *)(a1 + 152))
              {
                v86 = *(char **)(a1 + 136);
                if (!v86)
                  goto LABEL_141;
LABEL_140:
                *(_QWORD *)&v86[8 * v85] = v15;
                *(_QWORD *)(a1 + 144) = v85 + 1;
                goto LABEL_141;
              }
              v86 = (char *)operator new[]();
              v87 = *(_QWORD *)(a1 + 152);
              bzero(v86, 16 * v87);
              v88 = *(_QWORD *)(a1 + 136);
              v89 = *(_QWORD *)(a1 + 144);
              v90 = 2 * v87;
              if (v89)
              {
                if (v89 < 0xC)
                {
                  v91 = 0;
                  v92 = 0;
                  goto LABEL_133;
                }
                v92 = 0;
                v91 = 0;
                if (!(_DWORD)v89)
                  goto LABEL_133;
                if ((v89 - 1) >> 32)
                  goto LABEL_133;
                if ((unint64_t)&v86[-v88] < 0x20)
                  goto LABEL_133;
                v91 = v89 & 0xFFFFFFFFFFFFFFFCLL;
                v92 = v89 & 0xFFFFFFFC;
                v94 = (__int128 *)(v88 + 16);
                v95 = v86 + 16;
                v96 = v89 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v97 = *v94;
                  *(v95 - 1) = *(v94 - 1);
                  *v95 = v97;
                  v94 += 2;
                  v95 += 2;
                  v96 -= 4;
                }
                while (v96);
                if (v89 != v91)
                {
LABEL_133:
                  v93 = v92 + 1;
                  do
                  {
                    *(_QWORD *)&v86[8 * v91] = *(_QWORD *)(v88 + 8 * v91);
                    v91 = v93++;
                  }
                  while (v89 > v91);
                }
                *(_QWORD *)(a1 + 152) = v90;
LABEL_138:
                MEMORY[0x23B83E2F8]();
                v85 = *(_QWORD *)(a1 + 144);
              }
              else
              {
                *(_QWORD *)(a1 + 152) = v90;
                if (v88)
                  goto LABEL_138;
                v85 = 0;
              }
              v4 = v128;
              *(_QWORD *)(a1 + 136) = v86;
              goto LABEL_140;
            }
LABEL_141:
            if (*((float *)v15 + 4) == 0.0)
            {
              v8 = 0;
              v9 = (uint64_t *)(a1 + 272);
              goto LABEL_18;
            }
            v9 = (uint64_t *)(a1 + 272);
            sub_2394DC73C((_QWORD *)(a1 + 272), (uint64_t)v15);
          }
          v4 = v128;
          v8 = 0;
          goto LABEL_18;
        }
        if (*((float *)v15 + 4) != 0.0)
        {
          v15[5] = *(_DWORD *)(a1 + 80);
          v22 = *(_QWORD *)(a1 + 120);
          if (v22 < *(_QWORD *)(a1 + 128))
          {
            v23 = *(_OWORD **)(a1 + 112);
            if (!v23)
              goto LABEL_109;
            goto LABEL_108;
          }
          v67 = v8;
          v23 = (_OWORD *)operator new[]();
          v68 = *(_QWORD *)(a1 + 128);
          bzero(v23, 16 * v68);
          v69 = *(_QWORD *)(a1 + 112);
          v70 = *(_QWORD *)(a1 + 120);
          v71 = 2 * v68;
          if (v70)
          {
            if (v70 < 0xC)
            {
              v72 = 0;
              v73 = 0;
              goto LABEL_102;
            }
            v73 = 0;
            v72 = 0;
            if (!(_DWORD)v70)
              goto LABEL_102;
            if ((v70 - 1) >> 32)
              goto LABEL_102;
            if ((unint64_t)v23 - v69 < 0x20)
              goto LABEL_102;
            v72 = v70 & 0xFFFFFFFFFFFFFFFCLL;
            v73 = v70 & 0xFFFFFFFC;
            v75 = (__int128 *)(v69 + 16);
            v76 = v23 + 1;
            v77 = v70 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v78 = *v75;
              *(v76 - 1) = *(v75 - 1);
              *v76 = v78;
              v75 += 2;
              v76 += 2;
              v77 -= 4;
            }
            while (v77);
            if (v70 != v72)
            {
LABEL_102:
              v74 = v73 + 1;
              do
              {
                *((_QWORD *)v23 + v72) = *(_QWORD *)(v69 + 8 * v72);
                v72 = v74++;
              }
              while (v70 > v72);
            }
            *(_QWORD *)(a1 + 128) = v71;
LABEL_106:
            MEMORY[0x23B83E2F8]();
            v22 = *(_QWORD *)(a1 + 120);
          }
          else
          {
            *(_QWORD *)(a1 + 128) = v71;
            if (v69)
              goto LABEL_106;
            v22 = 0;
          }
          v4 = v128;
          v8 = v67;
          *(_QWORD *)(a1 + 112) = v23;
LABEL_108:
          *((_QWORD *)v23 + v22) = v15;
          *(_QWORD *)(a1 + 120) = v22 + 1;
LABEL_109:
          *((_BYTE *)v15 + 28) = 0;
          goto LABEL_18;
        }
        v15[5] = 0;
LABEL_18:
        if (*(_QWORD *)(a1 + 232) < v4)
          goto LABEL_5;
      }
      *(_QWORD *)(v14 + 8 * v4) = *(_QWORD *)(a1 + 216) + 32 * v16;
      v17 = *(_DWORD *)(a1 + 76);
      if (v15[6] == v17)
        goto LABEL_23;
LABEL_22:
      v15[6] = v17;
      ++*(_QWORD *)(a1 + 344);
      ++v6;
      goto LABEL_23;
    }
LABEL_6:
    v4 = v129;
  }
  while (v129 <= v5);
  *(_QWORD *)(a1 + 224) = 0;
  if (v8)
    sub_2394DCAA8((uint64_t *)a1, v8);
}

void sub_2394DB52C(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  __int128 *v18;
  _OWORD *v19;
  unint64_t v20;
  __int128 v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;

  v2 = (_QWORD *)(a1 + 296);
  v4 = *(_QWORD *)(a1 + 296);
  v3 = *(_QWORD *)(a1 + 304);
  v5 = v4 < v3 || v4 == v3 - 1;
  if (!v5)
  {
    v23 = *(_QWORD *)(a1 + 320);
    v24 = *(_QWORD *)(a1 + 296);
    do
    {
      if (v23 >= v24)
      {
        do
        {
          v25 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 24 * v24);
          v26 = *v25;
          v29 = v25[1];
          v27 = v25 + 1;
          v28 = v29;
          if (v26 == v29)
            break;
          v30 = *(_QWORD *)(v28 - 8);
          *v27 = v28 - 8;
          if (!v30)
            break;
          v31 = sub_2394DA788((uint64_t *)a1, v30, 0.0);
          v32 = (int)v4 >= v31 ? v31 : v4;
          sub_2394DAA2C(a1, v32, 0);
          v24 = *(_QWORD *)(a1 + 296);
          LODWORD(v4) = v24;
          v23 = *(_QWORD *)(a1 + 320);
        }
        while (v23 >= v24);
        v3 = *(_QWORD *)(a1 + 304);
      }
      *v2 = v24 - 1;
      v5 = v24-- == v3;
    }
    while (!v5);
  }
  *(_OWORD *)v2 = xmmword_239EC6D00;
  if (*(_QWORD *)(a1 + 224))
    sub_2394DAA2C(a1, v4 + 1, 1);
  v6 = *(uint64_t **)(a1 + 272);
  v7 = *v6;
  v8 = v6[1];
  if (*v6 != v8)
  {
    while (1)
    {
      while (1)
      {
        v9 = *(_QWORD *)(v8 - 8);
        v6[1] = v8 - 8;
        if (!v9)
          return;
        if (*(float *)(v9 + 16) != 0.0)
          break;
        *(_DWORD *)(v9 + 20) = 0;
        v8 = v6[1];
        if (v7 == v8)
          return;
      }
      *(_DWORD *)(v9 + 20) = *(_DWORD *)(a1 + 80);
      v10 = *(_QWORD *)(a1 + 120);
      if (v10 >= *(_QWORD *)(a1 + 128))
        break;
      v11 = *(char **)(a1 + 112);
      if (v11)
      {
LABEL_34:
        *(_QWORD *)&v11[8 * v10] = v9;
        *(_QWORD *)(a1 + 120) = v10 + 1;
        v6 = *(uint64_t **)(a1 + 272);
        v7 = *v6;
        *(_BYTE *)(v9 + 28) = 0;
        v8 = v6[1];
        if (v7 == v8)
          return;
      }
      else
      {
        *(_BYTE *)(v9 + 28) = 0;
        v8 = v6[1];
        if (v7 == v8)
          return;
      }
    }
    v11 = (char *)operator new[]();
    v12 = *(_QWORD *)(a1 + 128);
    bzero(v11, 16 * v12);
    v13 = *(_QWORD *)(a1 + 112);
    v14 = *(_QWORD *)(a1 + 120);
    v15 = 2 * v12;
    if (!v14)
    {
      *(_QWORD *)(a1 + 128) = v15;
      if (!v13)
      {
        v10 = 0;
LABEL_33:
        *(_QWORD *)(a1 + 112) = v11;
        goto LABEL_34;
      }
LABEL_32:
      MEMORY[0x23B83E2F8]();
      v10 = *(_QWORD *)(a1 + 120);
      goto LABEL_33;
    }
    if (v14 >= 0xC)
    {
      v17 = 0;
      v16 = 0;
      if ((_DWORD)v14)
      {
        if (!((v14 - 1) >> 32) && (unint64_t)&v11[-v13] >= 0x20)
        {
          v16 = v14 & 0xFFFFFFFFFFFFFFFCLL;
          v17 = v14 & 0xFFFFFFFC;
          v18 = (__int128 *)(v13 + 16);
          v19 = v11 + 16;
          v20 = v14 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v21 = *v18;
            *(v19 - 1) = *(v18 - 1);
            *v19 = v21;
            v18 += 2;
            v19 += 2;
            v20 -= 4;
          }
          while (v20);
          if (v14 == v16)
            goto LABEL_31;
        }
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v22 = v17 + 1;
    do
    {
      *(_QWORD *)&v11[8 * v16] = *(_QWORD *)(v13 + 8 * v16);
      v16 = v22++;
    }
    while (v14 > v16);
LABEL_31:
    *(_QWORD *)(a1 + 128) = v15;
    goto LABEL_32;
  }
}

uint64_t sub_2394DB7AC(uint64_t *a1, uint64_t a2, float a3)
{
  uint64_t v4;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;

  v4 = a2;
  v6 = (*((_DWORD *)a1 + 20) + 1);
  ++*((_DWORD *)a1 + 19);
  v7 = (float *)(a2 + 16);
  v8 = *(float *)(a2 + 16);
  while (v8 <= 0.0)
  {
    v17 = a1[3];
    v18 = *(_DWORD *)(v4 + 4);
    v19 = (float *)(v17 + 20 * v18);
    v20 = v17 + 20 * *(unsigned int *)v19;
    v21 = *(float *)(v20 + 8);
    v22 = a3 - v8;
    v23 = v8 + (float)(v21 - a3);
    if (v21 < v22)
    {
      a3 = *(float *)(v20 + 8);
    }
    else
    {
      v23 = 0.0;
      a3 = v22;
    }
    *v7 = v23;
    v19[2] = v19[2] + a3;
    *(_BYTE *)(v20 + 16) = 1;
    v24 = *(float *)(v20 + 8) - a3;
    *(float *)(v20 + 8) = v24;
    if (v24 == 0.0)
      goto LABEL_28;
    if (v24 < 0.0)
      v24 = 0.0 - v24;
    if (v24 <= 1.0e-15)
    {
LABEL_28:
      *(_BYTE *)(v17 + 20 * v18 + 16) = 0;
      if (v18 != -1)
      {
        v25 = *a1;
        if (*a1)
        {
          v26 = v25 + 32 * *(unsigned int *)(v17 + 20 * v18 + 4);
          v29 = *(_DWORD *)(v26 + 8);
          v28 = (_DWORD *)(v26 + 8);
          v27 = v29;
          v30 = v25 + 32 * v29;
          if (v29 == -1)
            v30 = 0;
          if (v30 != v4)
          {
            v31 = ((unint64_t)(v4 - v25) >> 5);
            for (i = *(unsigned int *)(v30 + 12); i != v31; i = *(unsigned int *)(v25 + 32 * i + 12))
              v27 = i;
            v28 = (_DWORD *)(v25 + 32 * v27 + 12);
          }
          *v28 = *(_DWORD *)(v4 + 12);
        }
      }
      v6 = *(unsigned int *)(v4 + 20);
      v33 = (int)v6;
      v34 = a1[26];
      if (v34 && a1[29] >= (unint64_t)(int)v6)
      {
        v35 = *(_QWORD *)(v34 + 8 * (int)v6);
        if (v35)
          v36 = (unint64_t)(v35 - a1[27]) >> 5;
        else
          v36 = -1;
        *(_DWORD *)(v4 + 12) = v36;
        *(_QWORD *)(v34 + 8 * (int)v6) = v4;
      }
      v37 = a1[28];
      if (v37 <= (int)v6)
        v37 = (int)v6;
      a1[28] = v37;
      if (*v7 != 0.0)
      {
        if (a1[37] > (unint64_t)(int)v6)
          v33 = a1[37];
        a1[37] = v33;
      }
    }
    v38 = *(unsigned int *)(v17 + 20 * v18 + 4);
    v4 = *a1 + 32 * v38;
    v7 = (float *)(v4 + 16);
    v8 = *(float *)(v4 + 16);
    if (v8 < 0.0)
    {
      sub_2394DD460(a1 + 34, *a1 + 32 * v38);
      v8 = *v7;
    }
  }
  if (v8 >= a3)
    v9 = a3;
  else
    v9 = v8;
  *((float *)a1 + 18) = v9 + *((float *)a1 + 18);
  v10 = v8 - a3;
  *v7 = v10;
  result = v6;
  if (v10 <= 0.0)
  {
    result = *(unsigned int *)(v4 + 20);
    v12 = (int)result;
    v13 = a1[26];
    if (v13 && a1[29] >= (unint64_t)(int)result)
    {
      v14 = *(_QWORD *)(v13 + 8 * (int)result);
      if (v14)
        v15 = (unint64_t)(v14 - a1[27]) >> 5;
      else
        v15 = -1;
      *(_DWORD *)(v4 + 12) = v15;
      *(_QWORD *)(v13 + 8 * (int)result) = v4;
      v10 = *v7;
    }
    v16 = a1[28];
    if (v16 <= (int)result)
      v16 = (int)result;
    a1[28] = v16;
    if (v10 != 0.0)
    {
      if (a1[37] > (unint64_t)(int)result)
        v12 = a1[37];
      a1[37] = v12;
    }
  }
  return result;
}

void sub_2394DBA48(uint64_t a1, int a2, char a3)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  __int128 *v68;
  _OWORD *v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  __int128 *v87;
  _OWORD *v88;
  unint64_t v89;
  __int128 v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _BYTE *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _OWORD *v104;
  __int128 *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  int v116;
  int v118;
  unint64_t v119;
  unint64_t v120;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 224);
  if (v5 < a2)
  {
    *(_QWORD *)(a1 + 224) = 0;
    return;
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = (uint64_t *)(a1 + 272);
  do
  {
    if ((a3 & 1) == 0 && !v8 && v4 > *(_QWORD *)(a1 + 296))
      return;
    v120 = v4 + 1;
    if (*(_QWORD *)(a1 + 232) >= v4)
    {
      v119 = v4;
      while (1)
      {
        v14 = *(_QWORD *)(a1 + 208);
        v15 = *(unsigned int **)(v14 + 8 * v4);
        if (!v15)
        {
LABEL_5:
          v5 = *(_QWORD *)(a1 + 224);
          goto LABEL_6;
        }
        v16 = v15[3];
        if ((_DWORD)v16 != -1)
          break;
        *(_QWORD *)(v14 + 8 * v4) = 0;
        v17 = *(_DWORD *)(a1 + 76);
        if (v15[6] != v17)
          goto LABEL_22;
LABEL_23:
        ++v7;
        if (!v8)
          v8 = v7 >= 3 * v6;
        v18 = *(_QWORD *)(a1 + 24);
        if (*((_BYTE *)v15 + 28))
        {
          v19 = v15[1];
          v15[1] = -1;
          v20 = (int)v15[5];
          if ((_DWORD)v20 == 1)
            goto LABEL_32;
        }
        else
        {
          v19 = *v15;
          *((_BYTE *)v15 + 28) = 1;
          v15[1] = -1;
          v20 = (int)v15[5];
          if ((_DWORD)v20 == 1)
            goto LABEL_32;
        }
        v21 = v15[8];
        if (v19 != v21)
        {
          v46 = 20 * v19;
          v47 = 20 * v21;
          while (1)
          {
            if (*(_BYTE *)(v18 + v46 + 16))
            {
              v48 = *(_QWORD *)a1 + 32 * *(unsigned int *)(v18 + v46 + 4);
              if (*(_DWORD *)(v48 + 20) == (_DWORD)v20 - 1)
                break;
            }
            v46 += 20;
            if (v47 == v46)
              goto LABEL_32;
          }
          v49 = -858993459 * (v46 >> 2);
          v15[1] = v49;
          v15[3] = *(_DWORD *)(v48 + 8);
          *(_DWORD *)(v48 + 8) = ((unint64_t)v15 - *(_QWORD *)a1) >> 5;
          if (v49 != -1)
          {
            if (*((float *)v15 + 4) != 0.0
              && *(_QWORD *)(a1 + 320) >= v20
              && ((uint64_t)v15 - *(_QWORD *)(a1 + 312)) >> 4 <= (unint64_t)(2 * *(_QWORD *)(a1 + 328)))
            {
              v116 = v6;
              v50 = (_QWORD *)(*v9 + 24 * (int)v20);
              v51 = (_QWORD *)v50[1];
              v52 = v50[2];
              if ((unint64_t)v51 < v52)
              {
                *v51 = v15;
                v53 = v51 + 1;
                v6 = v116;
                v50[1] = v53;
                v54 = *(_QWORD *)(a1 + 296);
                if (v54 <= v20)
                  v54 = v20;
                *(_QWORD *)(a1 + 296) = v54;
                if (!(_DWORD)v20)
                  goto LABEL_18;
                goto LABEL_175;
              }
              v115 = v50 + 1;
              v91 = (char *)*v50;
              v92 = (uint64_t)v51 - *v50;
              v93 = v92 >> 3;
              v94 = (v92 >> 3) + 1;
              if (v94 >> 61)
                sub_2394189F8();
              v95 = v52 - (_QWORD)v91;
              if (v95 >> 2 > v94)
                v94 = v95 >> 2;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              v114 = v94;
              if (v94)
              {
                v112 = (char *)v51 - *v50;
                v113 = v92 >> 3;
                if (v94 >> 61)
                  sub_239418A80();
                v96 = v8;
                v97 = operator new(8 * v94);
                v8 = v96;
                v92 = (uint64_t)v112;
                v93 = v113;
                v98 = &v97[8 * v113];
                *v98 = v15;
                v99 = (uint64_t)(v98 + 1);
                if (v51 == (_QWORD *)v91)
                {
LABEL_170:
                  *v50 = v98;
                  *v115 = v99;
                  v50[2] = &v97[8 * v114];
                  if (v51)
                  {
                    v109 = v8;
                    operator delete(v51);
                    v8 = v109;
                  }
                  v6 = v116;
                  v4 = v119;
                  *v115 = v99;
                  v110 = *(_QWORD *)(a1 + 296);
                  if (v110 <= v20)
                    v110 = v20;
                  *(_QWORD *)(a1 + 296) = v110;
                  if (!(_DWORD)v20)
                    goto LABEL_18;
LABEL_175:
                  v111 = *(_QWORD *)(a1 + 304);
                  if (v111 >= v20)
                    v111 = v20;
                  *(_QWORD *)(a1 + 304) = v111;
                  goto LABEL_18;
                }
              }
              else
              {
                v97 = 0;
                v98 = (_QWORD *)(8 * v93);
                *(_QWORD *)(8 * v93) = v15;
                v99 = 8 * v93 + 8;
                if (v51 == (_QWORD *)v91)
                  goto LABEL_170;
              }
              v100 = (char *)(v51 - 1) - v91;
              if (v100 < 0x58)
                goto LABEL_184;
              if ((unint64_t)((char *)v51 - &v97[v92]) < 0x20)
                goto LABEL_184;
              v101 = (v100 >> 3) + 1;
              v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
              v103 = &v51[v102 / 0xFFFFFFFFFFFFFFF8];
              v98 = (_QWORD *)((char *)v98 - v102);
              v104 = &v97[8 * v93 - 16];
              v105 = (__int128 *)(v51 - 2);
              v106 = v101 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v107 = *v105;
                *(v104 - 1) = *(v105 - 1);
                *v104 = v107;
                v104 -= 2;
                v105 -= 2;
                v106 -= 4;
              }
              while (v106);
              v51 = v103;
              if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_184:
                do
                {
                  v108 = *--v51;
                  *--v98 = v108;
                }
                while (v51 != (_QWORD *)v91);
              }
              v51 = (_QWORD *)*v50;
              goto LABEL_170;
            }
            goto LABEL_18;
          }
        }
LABEL_32:
        if ((_DWORD)v20 != *(_DWORD *)(a1 + 80))
        {
          v24 = v15[2];
          if ((_DWORD)v24 != -1 && *(_QWORD *)a1)
          {
            v25 = *(_QWORD *)a1 + 32 * v24;
            v118 = v7;
            do
            {
              v27 = v25;
              v28 = *(unsigned int *)(v25 + 12);
              if ((_DWORD)v28 == -1)
              {
                v25 = 0;
                if (*(float *)(v27 + 16) != 0.0)
                {
LABEL_47:
                  v29 = *(int *)(v27 + 20);
                  if (*(_QWORD *)(a1 + 320) >= v29)
                  {
                    v30 = (v27 - *(_QWORD *)(a1 + 312)) >> 4;
                    v31 = 2 * *(_QWORD *)(a1 + 328);
                    if (v30 <= v31 && v30 + 1 <= v31)
                    {
                      v33 = *v9;
                      v34 = *v9 + 24 * (int)v29;
                      v37 = *(_QWORD **)(v34 + 8);
                      v36 = (_QWORD *)(v34 + 8);
                      v35 = v37;
                      v38 = v37 - 1;
                      if (*(v37 - 1) == v27)
                      {
                        *v36 = v38;
                      }
                      else
                      {
                        v39 = v35;
                        if (*(_QWORD **)(v33 + 24 * (int)v29) != v35)
                        {
                          v39 = *(_QWORD **)(v33 + 24 * (int)v29);
                          while (*v39 != v27)
                          {
                            if (++v39 == v35)
                            {
                              v39 = v35;
                              break;
                            }
                          }
                        }
                        if (v39 != v35)
                        {
                          v40 = v39 + 1;
                          if (v39 + 1 != v35)
                          {
                            do
                            {
                              if (*v40 != v27)
                                *v39++ = *v40;
                              ++v40;
                            }
                            while (v40 != v35);
                            v33 = *v9;
                            v35 = *(_QWORD **)(*v9 + 24 * (int)v29 + 8);
                          }
                        }
                        if (v39 != v35)
                        {
                          *(_QWORD *)(v33 + 24 * (int)v29 + 8) = v39;
                          v7 = v118;
                          v9 = (uint64_t *)(a1 + 272);
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                v25 = *(_QWORD *)a1 + 32 * v28;
                if (*(float *)(v27 + 16) != 0.0)
                  goto LABEL_47;
              }
              v26 = *(int *)(v27 + 20);
              v41 = *(_QWORD *)(a1 + 208);
              if (v41 && *(_QWORD *)(a1 + 232) >= v26)
              {
                v42 = *(_QWORD *)(v41 + 8 * v26);
                if (v42)
                  v43 = (unint64_t)(v42 - *(_QWORD *)(a1 + 216)) >> 5;
                else
                  v43 = -1;
                *(_DWORD *)(v27 + 12) = v43;
                *(_QWORD *)(v41 + 8 * v26) = v27;
              }
              if (*(_QWORD *)(a1 + 224) > v26)
                v26 = *(_QWORD *)(a1 + 224);
              *(_QWORD *)(a1 + 224) = v26;
            }
            while (v25);
          }
          v15[2] = -1;
          if (v8)
          {
            v13 = (int)v15[5] + 1;
            v15[5] = v13;
            if (*(_QWORD *)(a1 + 264) >= v13)
            {
              v44 = *(_QWORD *)(a1 + 240);
              v45 = *(_QWORD *)(v44 + 8 * v13);
              if (v45)
              {
                v10 = *(_QWORD *)(a1 + 248);
                v11 = v45 - v10;
                v12 = (unint64_t)(v45 - v10) >> 5;
                *(_DWORD *)(v10 + (v11 & 0x1FFFFFFFE0) + 8) = ((unint64_t)v15 - v10) >> 5;
              }
              else
              {
                LODWORD(v12) = -1;
              }
              v15[3] = v12;
              *(_QWORD *)(v44 + 8 * v13) = v15;
              if (*(_QWORD *)(a1 + 256) > v13)
                v13 = *(_QWORD *)(a1 + 256);
              *(_QWORD *)(a1 + 256) = v13;
            }
            if (v8 == 1)
              v8 = v120;
            goto LABEL_18;
          }
          v55 = *(_DWORD *)(a1 + 80);
          v56 = v15[5];
          v57 = v55;
          if (v56 == v55 || (v58 = *v15, v59 = v15[8], v57 = *(_DWORD *)(a1 + 80), (_DWORD)v58 == (_DWORD)v59))
          {
LABEL_94:
            v60 = v15[1];
            v56 = v57;
            if (v60 == 0xFFFFFFFFLL)
              goto LABEL_95;
LABEL_124:
            v77 = v56 + 1;
            v15[5] = v77;
            if (*(_QWORD *)a1)
            {
              v78 = *(_QWORD *)a1 + 32 * *(unsigned int *)(*(_QWORD *)(a1 + 24) + 20 * v60 + 4);
              v15[3] = *(_DWORD *)(v78 + 8);
              *(_DWORD *)(v78 + 8) = ((unint64_t)v15 - *(_QWORD *)a1) >> 5;
              v55 = *(_DWORD *)(a1 + 80);
            }
            if (v77 == v55)
            {
              v79 = *(_QWORD *)(a1 + 120);
              if (v79 < *(_QWORD *)(a1 + 128))
              {
                v80 = *(char **)(a1 + 112);
                if (!v80)
                  goto LABEL_141;
LABEL_140:
                *(_QWORD *)&v80[8 * v79] = v15;
                *(_QWORD *)(a1 + 120) = v79 + 1;
                goto LABEL_141;
              }
              v80 = (char *)operator new[]();
              v81 = *(_QWORD *)(a1 + 128);
              bzero(v80, 16 * v81);
              v82 = *(_QWORD *)(a1 + 112);
              v83 = *(_QWORD *)(a1 + 120);
              if (v83)
              {
                if (v83 < 0xC)
                {
                  v84 = 0;
                  v85 = 0;
                  goto LABEL_133;
                }
                v85 = 0;
                v84 = 0;
                if (!(_DWORD)v83)
                  goto LABEL_133;
                if ((v83 - 1) >> 32)
                  goto LABEL_133;
                if ((unint64_t)&v80[-v82] < 0x20)
                  goto LABEL_133;
                v84 = v83 & 0xFFFFFFFFFFFFFFFCLL;
                v85 = v83 & 0xFFFFFFFC;
                v87 = (__int128 *)(v82 + 16);
                v88 = v80 + 16;
                v89 = v83 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  v90 = *v87;
                  *(v88 - 1) = *(v87 - 1);
                  *v88 = v90;
                  v87 += 2;
                  v88 += 2;
                  v89 -= 4;
                }
                while (v89);
                if (v83 != v84)
                {
LABEL_133:
                  v86 = v85 + 1;
                  do
                  {
                    *(_QWORD *)&v80[8 * v84] = *(_QWORD *)(v82 + 8 * v84);
                    v84 = v86++;
                  }
                  while (v83 > v84);
                }
                *(_QWORD *)(a1 + 128) = 2 * v81;
LABEL_138:
                MEMORY[0x23B83E2F8]();
                v79 = *(_QWORD *)(a1 + 120);
              }
              else
              {
                *(_QWORD *)(a1 + 128) = 2 * v81;
                if (v82)
                  goto LABEL_138;
                v79 = 0;
              }
              v4 = v119;
              *(_QWORD *)(a1 + 112) = v80;
              goto LABEL_140;
            }
LABEL_141:
            if (*((float *)v15 + 4) == 0.0)
            {
              v8 = 0;
              v9 = (uint64_t *)(a1 + 272);
              goto LABEL_18;
            }
            v9 = (uint64_t *)(a1 + 272);
            sub_2394DD5A0((_QWORD *)(a1 + 272), (uint64_t)v15);
          }
          else
          {
            v72 = *(_QWORD *)(a1 + 24);
            v73 = 20 * v59;
            v74 = 20 * v58;
            v57 = *(_DWORD *)(a1 + 80);
            while (1)
            {
              if (*(_BYTE *)(v72 + v74 + 16))
              {
                v75 = *(_DWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(v72 + v74 + 4) + 20);
                if (v75 >= 1 && v75 < v57)
                {
                  v15[1] = -858993459 * (v74 >> 2);
                  v57 = v75;
                  if (v75 == v56)
                    break;
                }
              }
              v74 += 20;
              if (v73 == v74)
                goto LABEL_94;
            }
            LODWORD(v60) = -858993459 * (v74 >> 2);
            if (v60 != 0xFFFFFFFFLL)
              goto LABEL_124;
LABEL_95:
            sub_2394DD798(a1, (uint64_t)v15);
          }
          v4 = v119;
          v8 = 0;
          goto LABEL_18;
        }
        if (*((float *)v15 + 4) != 0.0)
        {
          v15[5] = -*(_DWORD *)(a1 + 84);
          v22 = *(_QWORD *)(a1 + 144);
          if (v22 < *(_QWORD *)(a1 + 152))
          {
            v23 = *(_OWORD **)(a1 + 136);
            if (!v23)
              goto LABEL_106;
            goto LABEL_105;
          }
          v61 = v8;
          v23 = (_OWORD *)operator new[]();
          v62 = *(_QWORD *)(a1 + 152);
          bzero(v23, 16 * v62);
          v63 = *(_QWORD *)(a1 + 136);
          v64 = *(_QWORD *)(a1 + 144);
          if (v64)
          {
            if (v64 < 0xC)
            {
              v65 = 0;
              v66 = 0;
              goto LABEL_99;
            }
            v66 = 0;
            v65 = 0;
            if (!(_DWORD)v64)
              goto LABEL_99;
            if ((v64 - 1) >> 32)
              goto LABEL_99;
            if ((unint64_t)v23 - v63 < 0x20)
              goto LABEL_99;
            v65 = v64 & 0xFFFFFFFFFFFFFFFCLL;
            v66 = v64 & 0xFFFFFFFC;
            v68 = (__int128 *)(v63 + 16);
            v69 = v23 + 1;
            v70 = v64 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *(v69 - 1) = *(v68 - 1);
              *v69 = v71;
              v68 += 2;
              v69 += 2;
              v70 -= 4;
            }
            while (v70);
            if (v64 != v65)
            {
LABEL_99:
              v67 = v66 + 1;
              do
              {
                *((_QWORD *)v23 + v65) = *(_QWORD *)(v63 + 8 * v65);
                v65 = v67++;
              }
              while (v64 > v65);
            }
            *(_QWORD *)(a1 + 152) = 2 * v62;
LABEL_103:
            MEMORY[0x23B83E2F8]();
            v22 = *(_QWORD *)(a1 + 144);
          }
          else
          {
            *(_QWORD *)(a1 + 152) = 2 * v62;
            if (v63)
              goto LABEL_103;
            v22 = 0;
          }
          v4 = v119;
          v8 = v61;
          *(_QWORD *)(a1 + 136) = v23;
LABEL_105:
          *((_QWORD *)v23 + v22) = v15;
          *(_QWORD *)(a1 + 144) = v22 + 1;
LABEL_106:
          *((_BYTE *)v15 + 28) = 0;
          goto LABEL_18;
        }
        v15[5] = 0;
LABEL_18:
        if (*(_QWORD *)(a1 + 232) < v4)
          goto LABEL_5;
      }
      *(_QWORD *)(v14 + 8 * v4) = *(_QWORD *)(a1 + 216) + 32 * v16;
      v17 = *(_DWORD *)(a1 + 76);
      if (v15[6] == v17)
        goto LABEL_23;
LABEL_22:
      v15[6] = v17;
      ++*(_QWORD *)(a1 + 336);
      ++v6;
      goto LABEL_23;
    }
LABEL_6:
    v4 = v120;
  }
  while (v120 <= v5);
  *(_QWORD *)(a1 + 224) = 0;
  if (v8)
    sub_2394DD90C((uint64_t *)a1, v8);
}

void sub_2394DC4CC(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v2 = a1 + 37;
  v4 = a1[37];
  v3 = a1[38];
  v5 = v4 < v3 || v4 == v3 - 1;
  if (!v5)
  {
    v15 = a1[40];
    v16 = a1[37];
    do
    {
      if (v15 >= v16)
      {
        do
        {
          v17 = (uint64_t *)(a1[34] + 24 * v16);
          v18 = *v17;
          v21 = v17[1];
          v19 = v17 + 1;
          v20 = v21;
          if (v18 == v21)
            break;
          v22 = *(_QWORD *)(v20 - 8);
          *v19 = v20 - 8;
          if (!v22)
            break;
          v23 = sub_2394DB7AC(a1, v22, 0.0);
          v24 = (int)v4 >= v23 ? v23 : v4;
          sub_2394DBA48((uint64_t)a1, v24, 0);
          v16 = a1[37];
          LODWORD(v4) = v16;
          v15 = a1[40];
        }
        while (v15 >= v16);
        v3 = a1[38];
      }
      *v2 = v16 - 1;
      v5 = v16-- == v3;
    }
    while (!v5);
  }
  *(_OWORD *)v2 = xmmword_239EC6D00;
  if (a1[28])
    sub_2394DBA48((uint64_t)a1, v4 + 1, 1);
  v6 = (uint64_t *)a1[34];
  v7 = *v6;
  v10 = v6[1];
  v8 = v6 + 1;
  v9 = v10;
  if (v7 != v10)
  {
    do
    {
      v11 = *(_QWORD *)(v9 - 8);
      *v8 = v9 - 8;
      if (!v11)
        break;
      sub_2394DD798((uint64_t)a1, v11);
      v12 = (uint64_t *)a1[34];
      v13 = *v12;
      v14 = v12[1];
      v8 = v12 + 1;
      v9 = v14;
    }
    while (v13 != v14);
  }
}

uint64_t *sub_2394DC5F8(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a2)
  {
    v2 = -(uint64_t)*(int *)(a2 + 20);
    if (result[6] >= v2)
    {
      v3 = (a2 - result[5]) >> 4;
      v4 = 2 * result[7];
      if (v3 <= v4 && v3 + 1 <= v4)
      {
        v6 = *result;
        v7 = *result - 24 * *(int *)(a2 + 20);
        v10 = *(_QWORD **)(v7 + 8);
        v9 = (_QWORD *)(v7 + 8);
        v8 = v10;
        v11 = v10 - 1;
        if (*(v10 - 1) == a2)
        {
          *v9 = v11;
        }
        else
        {
          v12 = v8;
          if (*(_QWORD **)(v6 - 24 * *(int *)(a2 + 20)) != v8)
          {
            v12 = *(_QWORD **)(v6 - 24 * *(int *)(a2 + 20));
            while (*v12 != a2)
            {
              if (++v12 == v8)
              {
                v12 = v8;
                break;
              }
            }
          }
          if (v12 != v8)
          {
            v13 = v12 + 1;
            if (v12 + 1 != v8)
            {
              do
              {
                if (*v13 != a2)
                  *v12++ = *v13;
                ++v13;
              }
              while (v13 != v8);
              v6 = *result;
              v8 = *(_QWORD **)(*result + 24 * v2 + 8);
            }
          }
          if (v12 != v8)
            *(_QWORD *)(v6 + 24 * v2 + 8) = v12;
        }
      }
    }
  }
  return result;
}

void sub_2394DC73C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;

  if (!a2)
    return;
  v4 = *(int *)(a2 + 20);
  v5 = -v4;
  if (a1[6] < (unint64_t)-v4 || (a2 - a1[5]) >> 4 > (unint64_t)(2 * a1[7]))
    return;
  v6 = (_QWORD *)(*a1 - 24 * v4);
  v8 = v6 + 1;
  v7 = (char *)v6[1];
  v9 = v6[2];
  if ((unint64_t)v7 >= v9)
  {
    v11 = (char *)*v6;
    v12 = (uint64_t)&v7[-*v6];
    v13 = v12 >> 3;
    v14 = (v12 >> 3) + 1;
    if (v14 >> 61)
      sub_2394189F8();
    v15 = v9 - (_QWORD)v11;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v32 = &v7[-*v6];
      v33 = v12 >> 3;
      if (v16 >> 61)
        sub_239418A80();
      v17 = operator new(8 * v16);
      v12 = (uint64_t)v32;
      v13 = v33;
      v18 = &v17[8 * v33];
      v19 = &v17[8 * v16];
      *v18 = a2;
      v10 = (uint64_t)(v18 + 1);
      v20 = (char *)(v7 - v11);
      if (v7 == v11)
        goto LABEL_24;
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = a2;
      v10 = 8 * v13 + 8;
      v20 = (char *)(v7 - v11);
      if (v7 == v11)
      {
LABEL_24:
        *v6 = v18;
        *v8 = v10;
        v6[2] = v19;
        if (v7)
          operator delete(v7);
        goto LABEL_26;
      }
    }
    v21 = (unint64_t)(v20 - 8);
    if (v21 < 0x58)
      goto LABEL_37;
    if ((unint64_t)(v7 - v17 - v12) < 0x20)
      goto LABEL_37;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v24 = &v7[-v23];
    v18 = (_QWORD *)((char *)v18 - v23);
    v25 = &v17[8 * v13 - 16];
    v26 = v7 - 16;
    v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    v7 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        v29 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v18 = v29;
      }
      while (v7 != v11);
    }
    v7 = (char *)*v6;
    goto LABEL_24;
  }
  *(_QWORD *)v7 = a2;
  v10 = (uint64_t)(v7 + 8);
LABEL_26:
  *v8 = v10;
  v30 = a1[3];
  if (v30 <= v5)
    v30 = -v4;
  a1[3] = v30;
  if ((_DWORD)v4)
  {
    v31 = a1[4];
    if (v31 >= v5)
      v31 = -v4;
    a1[4] = v31;
  }
}

uint64_t sub_2394DC938(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;

  if (a2)
  {
    if (*(float *)(a2 + 16) == 0.0)
    {
      *(_DWORD *)(a2 + 20) = 0;
      return result;
    }
    v3 = (_QWORD *)result;
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 80);
    v4 = *(_QWORD *)(result + 120);
    if (v4 < *(_QWORD *)(result + 128))
    {
      v5 = *(_OWORD **)(result + 112);
      if (!v5)
        goto LABEL_24;
      goto LABEL_23;
    }
    v5 = (_OWORD *)operator new[]();
    v6 = v3[16];
    bzero(v5, 16 * v6);
    result = v3[14];
    v7 = v3[15];
    if (!v7)
    {
      v3[16] = 2 * v6;
      if (!result)
      {
        v4 = 0;
LABEL_22:
        v3[14] = v5;
LABEL_23:
        *((_QWORD *)v5 + v4) = a2;
        v3[15] = v4 + 1;
LABEL_24:
        *(_BYTE *)(a2 + 28) = 0;
        return result;
      }
LABEL_21:
      result = MEMORY[0x23B83E2F8]();
      v4 = v3[15];
      goto LABEL_22;
    }
    if (v7 >= 0xC)
    {
      v9 = 0;
      v8 = 0;
      if ((_DWORD)v7)
      {
        if (!((v7 - 1) >> 32) && (unint64_t)v5 - result >= 0x20)
        {
          v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
          v9 = v7 & 0xFFFFFFFC;
          v10 = (__int128 *)(result + 16);
          v11 = v5 + 1;
          v12 = v7 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v13 = *v10;
            *(v11 - 1) = *(v10 - 1);
            *v11 = v13;
            v10 += 2;
            v11 += 2;
            v12 -= 4;
          }
          while (v12);
          if (v7 == v8)
            goto LABEL_20;
        }
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v14 = v9 + 1;
    do
    {
      *((_QWORD *)v5 + v8) = *(_QWORD *)(result + 8 * v8);
      v8 = v14++;
    }
    while (v7 > v8);
LABEL_20:
    v3[16] = 2 * v6;
    goto LABEL_21;
  }
  return result;
}

void sub_2394DCAA8(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float ***v16;
  float **v17;
  uint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char **v39;
  unint64_t v40;
  char *v41;
  signed int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  signed int v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float **v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  float **v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float **v92;
  _OWORD *v93;
  float **v94;
  uint64_t v95;
  __int128 v96;
  float *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unsigned int v106;
  __int128 *v107;
  _OWORD *v108;
  unint64_t v109;
  __int128 v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;

  v3 = a1[32];
  if (v3 >= a2)
  {
    v4 = a2;
    v5 = a1[33];
    while (v5 < v4)
    {
LABEL_5:
      if (++v4 > v3)
        goto LABEL_2;
    }
    v122 = v4;
    v123 = v4;
    while (1)
    {
      v7 = a1[30];
      v8 = *(float **)(v7 + 8 * v4);
      if (!v8)
      {
LABEL_4:
        v3 = a1[32];
        goto LABEL_5;
      }
      v9 = *((unsigned int *)v8 + 3);
      if ((_DWORD)v9 == -1)
      {
        *(_QWORD *)(v7 + 8 * v4) = 0;
        v8[2] = NAN;
        if (*((_DWORD *)v8 + 1) != -1)
        {
LABEL_14:
          v10 = *((_DWORD *)v8 + 5);
          v11 = -*((_DWORD *)a1 + 21);
          goto LABEL_15;
        }
      }
      else
      {
        *(_QWORD *)(v7 + 8 * v4) = a1[31] + 32 * v9;
        v8[2] = NAN;
        if (*((_DWORD *)v8 + 1) != -1)
          goto LABEL_14;
      }
      v22 = *((unsigned int *)v8 + 8);
      v23 = *(unsigned int *)v8;
      if ((_DWORD)v23 == (_DWORD)v22)
        goto LABEL_40;
      v11 = -*((_DWORD *)a1 + 21);
      v24 = *((_DWORD *)v8 + 5) + 1;
      v25 = a1[3];
      v26 = *a1;
      v27 = 20 * v22;
      v28 = 20 * v23;
      v29 = -1;
      v30 = v11;
      while (1)
      {
        if (*(float *)(v25 + v28 + 8) != 0.0)
        {
          v31 = v26 + 32 * *(unsigned int *)(v25 + v28 + 4);
          if (*(float *)(v31 + 16) < 0.0 || *(_DWORD *)(v31 + 4) != -1)
          {
            v32 = *(_DWORD *)(v31 + 20);
            if (v32 < 0 && v32 > v30)
            {
              v29 = -858993459 * (v28 >> 2);
              *((_DWORD *)v8 + 1) = v29;
              v30 = v32;
              if (v32 == v24)
                break;
            }
          }
        }
        v28 += 20;
        if (v27 == v28)
          goto LABEL_35;
      }
      v30 = v24;
LABEL_35:
      if (v29 == -1)
      {
LABEL_40:
        v8[5] = 0.0;
        if (v8[4] != 0.0 && ((uint64_t)v8 - a1[39]) >> 4 <= (unint64_t)(2 * a1[41]))
        {
          v39 = (char **)a1[34];
          v41 = v39[1];
          v40 = (unint64_t)v39[2];
          if ((unint64_t)v41 >= v40)
          {
            v80 = *v39;
            v81 = v41 - *v39;
            v82 = v81 >> 3;
            v83 = (v81 >> 3) + 1;
            if (v83 >> 61)
LABEL_159:
              sub_2394189F8();
            v84 = v40 - (_QWORD)v80;
            if (v84 >> 2 > v83)
              v83 = v84 >> 2;
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
              v85 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v85 = v83;
            if (v85)
            {
              if (v85 >> 61)
LABEL_160:
                sub_239418A80();
              v86 = operator new(8 * v85);
              v4 = v123;
              v87 = &v86[8 * v82];
              *(_QWORD *)v87 = v8;
              v88 = (uint64_t)(v87 + 8);
              if (v41 == v80)
                goto LABEL_152;
LABEL_145:
              v111 = v41 - 8 - v80;
              if (v111 < 0x58)
                goto LABEL_163;
              if ((unint64_t)(v41 - &v86[v81]) < 0x20)
                goto LABEL_163;
              v112 = (v111 >> 3) + 1;
              v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
              v114 = &v41[-v113];
              v87 -= v113;
              v115 = &v86[8 * v82 - 16];
              v116 = v41 - 16;
              v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v118 = *(_OWORD *)v116;
                *(v115 - 1) = *((_OWORD *)v116 - 1);
                *v115 = v118;
                v115 -= 2;
                v116 -= 32;
                v117 -= 4;
              }
              while (v117);
              v41 = v114;
              if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_163:
                do
                {
                  v119 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  *((_QWORD *)v87 - 1) = v119;
                  v87 -= 8;
                }
                while (v41 != v80);
              }
              v41 = *v39;
            }
            else
            {
              v86 = 0;
              v87 = (char *)(8 * v82);
              *(_QWORD *)(8 * v82) = v8;
              v88 = 8 * v82 + 8;
              if (v41 != v80)
                goto LABEL_145;
            }
LABEL_152:
            *v39 = v87;
            v39[1] = (char *)v88;
            v39[2] = &v86[8 * v85];
            if (v41)
            {
              operator delete(v41);
              v4 = v123;
            }
            v39[1] = (char *)v88;
            goto LABEL_10;
          }
          *(_QWORD *)v41 = v8;
          v39[1] = v41 + 8;
        }
        goto LABEL_10;
      }
      v10 = v30 - 1;
      *((_DWORD *)v8 + 5) = v30 - 1;
      if (v122)
      {
        v33 = 1 - v30;
        if (v5 >= v33)
        {
          v34 = a1[30];
          v35 = *(_QWORD *)(v34 + 8 * v33);
          if (v35)
          {
            v36 = a1[31];
            v37 = v35 - v36;
            v38 = (unint64_t)(v35 - v36) >> 5;
            *(_DWORD *)(v36 + (v37 & 0x1FFFFFFFE0) + 8) = ((unint64_t)v8 - v36) >> 5;
          }
          else
          {
            LODWORD(v38) = -1;
          }
          *((_DWORD *)v8 + 3) = v38;
          *(_QWORD *)(v34 + 8 * v33) = v8;
          v120 = a1[32];
          if (v120 <= v33)
            v120 = 1 - v30;
          a1[32] = v120;
        }
        goto LABEL_10;
      }
LABEL_15:
      if (v10 != v11)
      {
        v12 = *((_DWORD *)v8 + 8);
        if (*(_DWORD *)v8 != v12)
        {
          v42 = v10 - 1;
          v43 = a1[3];
          v44 = v43 + 20 * v12;
          v45 = v43 + 20 * *(unsigned int *)v8;
          v46 = (int)(1 - v10);
          do
          {
            if (*(_BYTE *)(v45 + 16))
            {
              v51 = *a1;
              v52 = *(unsigned int *)(v45 + 4);
              v53 = *a1 + 32 * v52;
              v54 = *(_DWORD *)(v53 + 20);
              if (!v54 || v42 > v54)
              {
                if (v54)
                {
                  v56 = -(uint64_t)v54;
                  if (a1[33] >= v56)
                  {
                    v57 = a1[30];
                    if (*(_QWORD *)(v57 + 8 * v56) == v53
                      || (v58 = v51 + 32 * v52, v59 = *(unsigned int *)(v58 + 8), (_DWORD)v59 == -1))
                    {
                      v69 = *(unsigned int *)(v51 + 32 * v52 + 12);
                      if ((_DWORD)v69 == -1)
                        *(_QWORD *)(v57 + 8 * v56) = 0;
                      else
                        *(_QWORD *)(v57 + 8 * v56) = a1[31] + 32 * v69;
                    }
                    else
                    {
                      v60 = a1[31];
                      *(_DWORD *)(v60 + 32 * v59 + 12) = *(_DWORD *)(v58 + 12);
                      v61 = *(unsigned int *)(v58 + 12);
                      if ((_DWORD)v61 != -1)
                        *(_DWORD *)(v60 + 32 * v61 + 8) = v59;
                    }
                    *(_DWORD *)(v51 + 32 * v52 + 8) = -1;
                  }
                }
                else if (*(float *)(v51 + 32 * v52 + 16) != 0.0)
                {
                  v62 = (v53 - a1[39]) >> 4;
                  v63 = 2 * a1[41];
                  if (v62 <= v63 && v62 + 1 <= v63)
                  {
                    v65 = a1[34];
                    v66 = *(_QWORD **)(v65 + 8);
                    if (*(v66 - 1) == v53)
                    {
                      *(_QWORD *)(v65 + 8) = v66 - 1;
                    }
                    else
                    {
                      v67 = *(_QWORD **)(v65 + 8);
                      if (*(_QWORD **)v65 != v66)
                      {
                        v67 = *(_QWORD **)v65;
                        while (*v67 != v53)
                        {
                          if (++v67 == v66)
                          {
                            v67 = *(_QWORD **)(v65 + 8);
                            break;
                          }
                        }
                      }
                      if (v67 != v66)
                      {
                        v68 = v67 + 1;
                        if (v67 + 1 != v66)
                        {
                          do
                          {
                            if (*v68 != v53)
                              *v67++ = *v68;
                            ++v68;
                          }
                          while (v68 != v66);
                          v65 = a1[34];
                          v66 = *(_QWORD **)(v65 + 8);
                        }
                      }
                      if (v67 != v66)
                        *(_QWORD *)(v65 + 8) = v67;
                    }
                  }
                }
                *(_DWORD *)(v53 + 20) = v42;
                *(_DWORD *)(v51 + 32 * v52 + 4) = *(_DWORD *)v45;
                if (a1[33] >= v46)
                {
                  v70 = a1[30];
                  v71 = *(_QWORD *)(v70 + 8 * v46);
                  if (v71)
                  {
                    v47 = a1[31];
                    v48 = v71 - v47;
                    v49 = (unint64_t)(v71 - v47) >> 5;
                    *(_DWORD *)(v47 + (v48 & 0x1FFFFFFFE0) + 8) = (unint64_t)(v53 - v47) >> 5;
                  }
                  else
                  {
                    LODWORD(v49) = -1;
                  }
                  *(_DWORD *)(v51 + 32 * v52 + 12) = v49;
                  *(_QWORD *)(v70 + 8 * v46) = v53;
                  v50 = a1[32];
                  if (v50 <= v46)
                    v50 = v46;
                  a1[32] = v50;
                }
              }
            }
            v45 += 20;
          }
          while (v45 != v44);
        }
      }
      if (*a1)
      {
        v13 = *a1 + 32 * *(unsigned int *)(a1[3] + 20 * *((unsigned int *)v8 + 1) + 4);
        v8[3] = *(float *)(v13 + 8);
        *(_DWORD *)(v13 + 8) = ((unint64_t)v8 - *a1) >> 5;
      }
      *((_BYTE *)v8 + 28) = 0;
      if (v8[4] == 0.0)
        goto LABEL_125;
      v14 = *((int *)v8 + 5);
      v15 = -v14;
      if (a1[40] < (unint64_t)-v14 || ((uint64_t)v8 - a1[39]) >> 4 > (unint64_t)(2 * a1[41]))
        goto LABEL_125;
      v16 = (float ***)(a1[34] - 24 * v14);
      v18 = (uint64_t *)(v16 + 1);
      v17 = v16[1];
      v20 = v16 + 2;
      v19 = (unint64_t)v16[2];
      if ((unint64_t)v17 < v19)
      {
        *v17 = v8;
        v21 = (uint64_t)(v17 + 1);
        goto LABEL_119;
      }
      v72 = *v16;
      v73 = (char *)v17 - (char *)*v16;
      v74 = v73 >> 3;
      v75 = (v73 >> 3) + 1;
      if (v75 >> 61)
        goto LABEL_159;
      v76 = v19 - (_QWORD)v72;
      if (v76 >> 2 > v75)
        v75 = v76 >> 2;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
        v75 = 0x1FFFFFFFFFFFFFFFLL;
      v121 = v75;
      if (v75)
      {
        if (v75 >> 61)
          goto LABEL_160;
        v77 = operator new(8 * v75);
        v4 = v123;
        v20 = v16 + 2;
        v78 = (float **)&v77[8 * v74];
        *v78 = v8;
        v21 = (uint64_t)(v78 + 1);
        if (v17 == v72)
        {
LABEL_110:
          v18 = (uint64_t *)(v16 + 1);
          *v16 = v78;
          v16[1] = (float **)v21;
          *v20 = &v77[8 * v121];
          if (!v17)
            goto LABEL_119;
LABEL_118:
          operator delete(v17);
          v4 = v123;
          goto LABEL_119;
        }
      }
      else
      {
        v77 = 0;
        v78 = (float **)(8 * v74);
        *(_QWORD *)(8 * v74) = v8;
        v21 = 8 * v74 + 8;
        if (v17 == v72)
          goto LABEL_110;
      }
      v79 = (char *)(v17 - 1) - (char *)v72;
      if (v79 < 0x58)
      {
        v18 = (uint64_t *)(v16 + 1);
        do
        {
LABEL_116:
          v97 = *--v17;
          *--v78 = v97;
        }
        while (v17 != v72);
        goto LABEL_117;
      }
      v89 = (char *)v17 - &v77[v73];
      v18 = (uint64_t *)(v16 + 1);
      if (v89 < 0x20)
        goto LABEL_116;
      v90 = (v79 >> 3) + 1;
      v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
      v92 = &v17[v91 / 0xFFFFFFFFFFFFFFF8];
      v78 = (float **)((char *)v78 - v91);
      v93 = &v77[8 * v74 - 16];
      v94 = v17 - 2;
      v95 = v90 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v96 = *(_OWORD *)v94;
        *(v93 - 1) = *((_OWORD *)v94 - 1);
        *v93 = v96;
        v93 -= 2;
        v94 -= 4;
        v95 -= 4;
      }
      while (v95);
      v17 = v92;
      if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_116;
LABEL_117:
      v17 = *v16;
      *v16 = v78;
      *v18 = v21;
      *v20 = &v77[8 * v121];
      if (v17)
        goto LABEL_118;
LABEL_119:
      *v18 = v21;
      v98 = a1[37];
      if (v98 <= v15)
        v98 = -v14;
      a1[37] = v98;
      if ((_DWORD)v14)
      {
        v99 = a1[38];
        if (v99 >= v15)
          v99 = -v14;
        a1[38] = v99;
      }
LABEL_125:
      if (*((_DWORD *)v8 + 5) + *((_DWORD *)a1 + 21))
        goto LABEL_10;
      v100 = a1[18];
      if (v100 >= a1[19])
      {
        v6 = (_OWORD *)operator new[]();
        v101 = a1[19];
        bzero(v6, 16 * v101);
        v102 = a1[17];
        v103 = a1[18];
        if (v103)
        {
          if (v103 < 0xC)
          {
            v104 = 0;
            v105 = 0;
            goto LABEL_130;
          }
          v105 = 0;
          v104 = 0;
          if (!(_DWORD)v103)
            goto LABEL_130;
          if ((v103 - 1) >> 32)
            goto LABEL_130;
          if ((unint64_t)v6 - v102 < 0x20)
            goto LABEL_130;
          v104 = v103 & 0xFFFFFFFFFFFFFFFCLL;
          v105 = v103 & 0xFFFFFFFC;
          v107 = (__int128 *)(v102 + 16);
          v108 = v6 + 1;
          v109 = v103 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v110 = *v107;
            *(v108 - 1) = *(v107 - 1);
            *v108 = v110;
            v107 += 2;
            v108 += 2;
            v109 -= 4;
          }
          while (v109);
          if (v103 != v104)
          {
LABEL_130:
            v106 = v105 + 1;
            do
            {
              *((_QWORD *)v6 + v104) = *(_QWORD *)(v102 + 8 * v104);
              v104 = v106++;
            }
            while (v103 > v104);
          }
          a1[19] = 2 * v101;
LABEL_134:
          MEMORY[0x23B83E2F8]();
          v100 = a1[18];
        }
        else
        {
          a1[19] = 2 * v101;
          if (v102)
            goto LABEL_134;
          v100 = 0;
        }
        v4 = v123;
        a1[17] = (uint64_t)v6;
LABEL_9:
        *((_QWORD *)v6 + v100) = v8;
        a1[18] = v100 + 1;
        goto LABEL_10;
      }
      v6 = (_OWORD *)a1[17];
      if (v6)
        goto LABEL_9;
LABEL_10:
      v5 = a1[33];
      if (v5 < v4)
        goto LABEL_4;
    }
  }
LABEL_2:
  a1[32] = 0;
}

uint64_t *sub_2394DD460(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a2)
  {
    v2 = *(int *)(a2 + 20);
    if (result[6] >= v2)
    {
      v3 = (a2 - result[5]) >> 4;
      v4 = 2 * result[7];
      if (v3 <= v4 && v3 + 1 <= v4)
      {
        v6 = *result;
        v7 = *result + 24 * (int)v2;
        v10 = *(_QWORD **)(v7 + 8);
        v9 = (_QWORD *)(v7 + 8);
        v8 = v10;
        v11 = v10 - 1;
        if (*(v10 - 1) == a2)
        {
          *v9 = v11;
        }
        else
        {
          v12 = v8;
          if (*(_QWORD **)(v6 + 24 * (int)v2) != v8)
          {
            v12 = *(_QWORD **)(v6 + 24 * (int)v2);
            while (*v12 != a2)
            {
              if (++v12 == v8)
              {
                v12 = v8;
                break;
              }
            }
          }
          if (v12 != v8)
          {
            v13 = v12 + 1;
            if (v12 + 1 != v8)
            {
              do
              {
                if (*v13 != a2)
                  *v12++ = *v13;
                ++v13;
              }
              while (v13 != v8);
              v6 = *result;
              v8 = *(_QWORD **)(*result + 24 * (int)v2 + 8);
            }
          }
          if (v12 != v8)
            *(_QWORD *)(v6 + 24 * (int)v2 + 8) = v12;
        }
      }
    }
  }
  return result;
}

void sub_2394DD5A0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;

  if (!a2)
    return;
  v4 = *(int *)(a2 + 20);
  if (a1[6] < v4 || (a2 - a1[5]) >> 4 > (unint64_t)(2 * a1[7]))
    return;
  v5 = (_QWORD *)(*a1 + 24 * (int)v4);
  v7 = v5 + 1;
  v6 = (char *)v5[1];
  v8 = v5[2];
  if ((unint64_t)v6 >= v8)
  {
    v10 = (char *)*v5;
    v11 = (uint64_t)&v6[-*v5];
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      sub_2394189F8();
    v14 = v8 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      v31 = &v6[-*v5];
      if (v15 >> 61)
        sub_239418A80();
      v16 = operator new(8 * v15);
      v11 = (uint64_t)v31;
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = a2;
      v9 = (uint64_t)(v17 + 1);
      v19 = (char *)(v6 - v10);
      if (v6 == v10)
        goto LABEL_24;
    }
    else
    {
      v16 = 0;
      v17 = (_QWORD *)(8 * v12);
      v18 = 0;
      *(_QWORD *)(8 * v12) = a2;
      v9 = 8 * v12 + 8;
      v19 = (char *)(v6 - v10);
      if (v6 == v10)
      {
LABEL_24:
        *v5 = v17;
        *v7 = v9;
        v5[2] = v18;
        if (v6)
          operator delete(v6);
        goto LABEL_26;
      }
    }
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_37;
    if ((unint64_t)(v6 - &v16[v11]) < 0x20)
      goto LABEL_37;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v6[-v22];
    v17 = (_QWORD *)((char *)v17 - v22);
    v24 = &v16[8 * v12 - 16];
    v25 = v6 - 16;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    v6 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        v28 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v17 = v28;
      }
      while (v6 != v10);
    }
    v6 = (char *)*v5;
    goto LABEL_24;
  }
  *(_QWORD *)v6 = a2;
  v9 = (uint64_t)(v6 + 8);
LABEL_26:
  *v7 = v9;
  v29 = a1[3];
  if (v29 <= v4)
    v29 = v4;
  a1[3] = v29;
  if ((_DWORD)v4)
  {
    v30 = a1[4];
    if (v30 >= v4)
      v30 = v4;
    a1[4] = v30;
  }
}

uint64_t sub_2394DD798(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;

  if (a2)
  {
    if (*(float *)(a2 + 16) == 0.0)
    {
      *(_DWORD *)(a2 + 20) = 0;
      return result;
    }
    v3 = (_QWORD *)result;
    *(_DWORD *)(a2 + 20) = -*(_DWORD *)(result + 84);
    v4 = *(_QWORD *)(result + 144);
    if (v4 < *(_QWORD *)(result + 152))
    {
      v5 = *(_OWORD **)(result + 136);
      if (!v5)
        goto LABEL_24;
      goto LABEL_23;
    }
    v5 = (_OWORD *)operator new[]();
    v6 = v3[19];
    bzero(v5, 16 * v6);
    result = v3[17];
    v7 = v3[18];
    if (!v7)
    {
      v3[19] = 2 * v6;
      if (!result)
      {
        v4 = 0;
LABEL_22:
        v3[17] = v5;
LABEL_23:
        *((_QWORD *)v5 + v4) = a2;
        v3[18] = v4 + 1;
LABEL_24:
        *(_BYTE *)(a2 + 28) = 0;
        return result;
      }
LABEL_21:
      result = MEMORY[0x23B83E2F8]();
      v4 = v3[18];
      goto LABEL_22;
    }
    if (v7 >= 0xC)
    {
      v9 = 0;
      v8 = 0;
      if ((_DWORD)v7)
      {
        if (!((v7 - 1) >> 32) && (unint64_t)v5 - result >= 0x20)
        {
          v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
          v9 = v7 & 0xFFFFFFFC;
          v10 = (__int128 *)(result + 16);
          v11 = v5 + 1;
          v12 = v7 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v13 = *v10;
            *(v11 - 1) = *(v10 - 1);
            *v11 = v13;
            v10 += 2;
            v11 += 2;
            v12 -= 4;
          }
          while (v12);
          if (v7 == v8)
            goto LABEL_20;
        }
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v14 = v9 + 1;
    do
    {
      *((_QWORD *)v5 + v8) = *(_QWORD *)(result + 8 * v8);
      v8 = v14++;
    }
    while (v7 > v8);
LABEL_20:
    v3[19] = 2 * v6;
    goto LABEL_21;
  }
  return result;
}

void sub_2394DD90C(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  signed int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char **v39;
  unint64_t v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  float **v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  float *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  unsigned int v103;
  __int128 *v104;
  _OWORD *v105;
  unint64_t v106;
  __int128 v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;

  v3 = a1[32];
  if (v3 >= a2)
  {
    v4 = a2;
    v5 = a1[33];
    while (v5 < v4)
    {
LABEL_5:
      if (++v4 > v3)
        goto LABEL_2;
    }
    v119 = v4;
    v120 = v4;
    while (1)
    {
      v7 = a1[30];
      v8 = *(float **)(v7 + 8 * v4);
      if (!v8)
      {
LABEL_4:
        v3 = a1[32];
        goto LABEL_5;
      }
      v9 = *((unsigned int *)v8 + 3);
      if ((_DWORD)v9 == -1)
      {
        *(_QWORD *)(v7 + 8 * v4) = 0;
        v8[2] = NAN;
        if (*((_DWORD *)v8 + 1) != -1)
        {
LABEL_14:
          v10 = *((_DWORD *)v8 + 5);
          v11 = *((_DWORD *)a1 + 20);
          goto LABEL_15;
        }
      }
      else
      {
        *(_QWORD *)(v7 + 8 * v4) = a1[31] + 32 * v9;
        v8[2] = NAN;
        if (*((_DWORD *)v8 + 1) != -1)
          goto LABEL_14;
      }
      v21 = *((unsigned int *)v8 + 8);
      v22 = *(unsigned int *)v8;
      if ((_DWORD)v22 == (_DWORD)v21)
        goto LABEL_43;
      v11 = *((_DWORD *)a1 + 20);
      v23 = *((_DWORD *)v8 + 5) - 1;
      v24 = a1[3];
      v25 = *a1;
      v26 = 20 * v21;
      v27 = 20 * v22;
      v28 = -1;
      v29 = v11;
      while (1)
      {
        if (*(_BYTE *)(v24 + v27 + 16))
        {
          v30 = v25 + 32 * *(unsigned int *)(v24 + v27 + 4);
          if (*(float *)(v30 + 16) > 0.0 || *(_DWORD *)(v30 + 4) != -1)
          {
            v31 = *(_DWORD *)(v30 + 20);
            if (v31 >= 1 && v31 < v29)
            {
              v28 = -858993459 * (v27 >> 2);
              *((_DWORD *)v8 + 1) = v28;
              v29 = v31;
              if (v31 == v23)
                break;
            }
          }
        }
        v27 += 20;
        if (v26 == v27)
          goto LABEL_38;
      }
      v29 = v23;
LABEL_38:
      if (v28 == -1)
      {
LABEL_43:
        v8[5] = 0.0;
        if (v8[4] != 0.0 && ((uint64_t)v8 - a1[39]) >> 4 <= (unint64_t)(2 * a1[41]))
        {
          v39 = (char **)a1[34];
          v41 = v39[1];
          v40 = (unint64_t)v39[2];
          if ((unint64_t)v41 >= v40)
          {
            v77 = *v39;
            v78 = v41 - *v39;
            v79 = v78 >> 3;
            v80 = (v78 >> 3) + 1;
            if (v80 >> 61)
LABEL_162:
              sub_2394189F8();
            v81 = v40 - (_QWORD)v77;
            if (v81 >> 2 > v80)
              v80 = v81 >> 2;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
              v82 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (v82)
            {
              if (v82 >> 61)
LABEL_163:
                sub_239418A80();
              v83 = operator new(8 * v82);
              v4 = v120;
              v84 = &v83[8 * v79];
              *(_QWORD *)v84 = v8;
              v85 = (uint64_t)(v84 + 8);
              if (v41 == v77)
                goto LABEL_155;
LABEL_148:
              v108 = v41 - 8 - v77;
              if (v108 < 0x58)
                goto LABEL_166;
              if ((unint64_t)(v41 - &v83[v78]) < 0x20)
                goto LABEL_166;
              v109 = (v108 >> 3) + 1;
              v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
              v111 = &v41[-v110];
              v84 -= v110;
              v112 = &v83[8 * v79 - 16];
              v113 = v41 - 16;
              v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v115 = *(_OWORD *)v113;
                *(v112 - 1) = *((_OWORD *)v113 - 1);
                *v112 = v115;
                v112 -= 2;
                v113 -= 32;
                v114 -= 4;
              }
              while (v114);
              v41 = v111;
              if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_166:
                do
                {
                  v116 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  *((_QWORD *)v84 - 1) = v116;
                  v84 -= 8;
                }
                while (v41 != v77);
              }
              v41 = *v39;
            }
            else
            {
              v83 = 0;
              v84 = (char *)(8 * v79);
              *(_QWORD *)(8 * v79) = v8;
              v85 = 8 * v79 + 8;
              if (v41 != v77)
                goto LABEL_148;
            }
LABEL_155:
            *v39 = v84;
            v39[1] = (char *)v85;
            v39[2] = &v83[8 * v82];
            if (v41)
            {
              operator delete(v41);
              v4 = v120;
            }
            v39[1] = (char *)v85;
            goto LABEL_10;
          }
          *(_QWORD *)v41 = v8;
          v39[1] = v41 + 8;
        }
        goto LABEL_10;
      }
      v10 = v29 + 1;
      *((_DWORD *)v8 + 5) = v29 + 1;
      if (v119)
      {
        v33 = v10;
        if (v5 >= v10)
        {
          v34 = a1[30];
          v35 = *(_QWORD *)(v34 + 8 * v10);
          if (v35)
          {
            v36 = a1[31];
            v37 = v35 - v36;
            v38 = (unint64_t)(v35 - v36) >> 5;
            *(_DWORD *)(v36 + (v37 & 0x1FFFFFFFE0) + 8) = ((unint64_t)v8 - v36) >> 5;
          }
          else
          {
            LODWORD(v38) = -1;
          }
          *((_DWORD *)v8 + 3) = v38;
          *(_QWORD *)(v34 + 8 * v33) = v8;
          v117 = a1[32];
          if (v117 <= v33)
            v117 = v33;
          a1[32] = v117;
        }
        goto LABEL_10;
      }
LABEL_15:
      if (v10 != v11)
      {
        v12 = *((_DWORD *)v8 + 8);
        if (*(_DWORD *)v8 != v12)
        {
          v42 = v10 + 1;
          v43 = a1[3];
          v44 = v43 + 20 * v12;
          v45 = v43 + 20 * *(unsigned int *)v8;
          do
          {
            if (*(float *)(v45 + 8) != 0.0)
            {
              v50 = *a1;
              v51 = *(unsigned int *)(v45 + 4);
              v52 = *a1 + 32 * v51;
              v53 = *(_DWORD *)(v52 + 20);
              if (!v53 || v42 < v53)
              {
                if (v53)
                {
                  if (a1[33] >= (unint64_t)v53)
                  {
                    v55 = a1[30];
                    if (*(_QWORD *)(v55 + 8 * v53) == v52
                      || (v56 = v50 + 32 * v51, v57 = *(unsigned int *)(v56 + 8), (_DWORD)v57 == -1))
                    {
                      v67 = *(unsigned int *)(v50 + 32 * v51 + 12);
                      if ((_DWORD)v67 == -1)
                        *(_QWORD *)(v55 + 8 * v53) = 0;
                      else
                        *(_QWORD *)(v55 + 8 * v53) = a1[31] + 32 * v67;
                    }
                    else
                    {
                      v58 = a1[31];
                      *(_DWORD *)(v58 + 32 * v57 + 12) = *(_DWORD *)(v56 + 12);
                      v59 = *(unsigned int *)(v56 + 12);
                      if ((_DWORD)v59 != -1)
                        *(_DWORD *)(v58 + 32 * v59 + 8) = v57;
                    }
                    *(_DWORD *)(v50 + 32 * v51 + 8) = -1;
                  }
                }
                else if (*(float *)(v50 + 32 * v51 + 16) != 0.0)
                {
                  v60 = (v52 - a1[39]) >> 4;
                  v61 = 2 * a1[41];
                  if (v60 <= v61 && v60 + 1 <= v61)
                  {
                    v63 = a1[34];
                    v64 = *(_QWORD **)(v63 + 8);
                    if (*(v64 - 1) == v52)
                    {
                      *(_QWORD *)(v63 + 8) = v64 - 1;
                    }
                    else
                    {
                      v65 = *(_QWORD **)(v63 + 8);
                      if (*(_QWORD **)v63 != v64)
                      {
                        v65 = *(_QWORD **)v63;
                        while (*v65 != v52)
                        {
                          if (++v65 == v64)
                          {
                            v65 = *(_QWORD **)(v63 + 8);
                            break;
                          }
                        }
                      }
                      if (v65 != v64)
                      {
                        v66 = v65 + 1;
                        if (v65 + 1 != v64)
                        {
                          do
                          {
                            if (*v66 != v52)
                              *v65++ = *v66;
                            ++v66;
                          }
                          while (v66 != v64);
                          v63 = a1[34];
                          v64 = *(_QWORD **)(v63 + 8);
                        }
                      }
                      if (v65 != v64)
                        *(_QWORD *)(v63 + 8) = v65;
                    }
                  }
                }
                *(_DWORD *)(v52 + 20) = v42;
                *(_DWORD *)(v50 + 32 * v51 + 4) = *(_DWORD *)v45;
                if (a1[33] >= (unint64_t)v42)
                {
                  v68 = a1[30];
                  v69 = *(_QWORD *)(v68 + 8 * v42);
                  if (v69)
                  {
                    v46 = a1[31];
                    v47 = v69 - v46;
                    v48 = (unint64_t)(v69 - v46) >> 5;
                    *(_DWORD *)(v46 + (v47 & 0x1FFFFFFFE0) + 8) = (unint64_t)(v52 - v46) >> 5;
                  }
                  else
                  {
                    LODWORD(v48) = -1;
                  }
                  *(_DWORD *)(v50 + 32 * v51 + 12) = v48;
                  *(_QWORD *)(v68 + 8 * v42) = v52;
                  v49 = a1[32];
                  if (v49 <= v42)
                    v49 = v42;
                  a1[32] = v49;
                }
              }
            }
            v45 += 20;
          }
          while (v45 != v44);
        }
      }
      if (*a1)
      {
        v13 = *a1 + 32 * *(unsigned int *)(a1[3] + 20 * *((unsigned int *)v8 + 1) + 4);
        v8[3] = *(float *)(v13 + 8);
        *(_DWORD *)(v13 + 8) = ((unint64_t)v8 - *a1) >> 5;
      }
      *((_BYTE *)v8 + 28) = 0;
      if (v8[4] == 0.0)
        goto LABEL_128;
      v14 = *((int *)v8 + 5);
      if (a1[40] < v14 || ((uint64_t)v8 - a1[39]) >> 4 > (unint64_t)(2 * a1[41]))
        goto LABEL_128;
      v15 = (_QWORD *)(a1[34] + 24 * (int)v14);
      v17 = v15 + 1;
      v16 = (char *)v15[1];
      v19 = v15 + 2;
      v18 = v15[2];
      if ((unint64_t)v16 >= v18)
      {
        v70 = (char *)*v15;
        v71 = (uint64_t)&v16[-*v15];
        v72 = v71 >> 3;
        v73 = (v71 >> 3) + 1;
        if (v73 >> 61)
          goto LABEL_162;
        v74 = v18 - (_QWORD)v70;
        if (v74 >> 2 > v73)
          v73 = v74 >> 2;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
          v73 = 0x1FFFFFFFFFFFFFFFLL;
        v118 = v73;
        if (v73)
        {
          if (v73 >> 61)
            goto LABEL_163;
          v75 = operator new(8 * v73);
          v4 = v120;
          v19 = v15 + 2;
          v76 = (float **)&v75[8 * v72];
          *v76 = v8;
          v20 = (uint64_t)(v76 + 1);
          if (v16 == v70)
            goto LABEL_120;
LABEL_113:
          v86 = v16 - 8 - v70;
          if (v86 < 0x58)
            goto LABEL_167;
          if ((unint64_t)(v16 - &v75[v71]) < 0x20)
            goto LABEL_167;
          v87 = (v86 >> 3) + 1;
          v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          v89 = &v16[-v88];
          v76 = (float **)((char *)v76 - v88);
          v90 = &v75[8 * v72 - 16];
          v91 = v16 - 16;
          v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v93 = *(_OWORD *)v91;
            *(v90 - 1) = *((_OWORD *)v91 - 1);
            *v90 = v93;
            v90 -= 2;
            v91 -= 32;
            v92 -= 4;
          }
          while (v92);
          v16 = v89;
          if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_167:
            do
            {
              v94 = (float *)*((_QWORD *)v16 - 1);
              v16 -= 8;
              *--v76 = v94;
            }
            while (v16 != v70);
          }
          v16 = (char *)*v15;
        }
        else
        {
          v75 = 0;
          v76 = (float **)(8 * v72);
          *(_QWORD *)(8 * v72) = v8;
          v20 = 8 * v72 + 8;
          if (v16 != v70)
            goto LABEL_113;
        }
LABEL_120:
        *v15 = v76;
        *v17 = v20;
        *v19 = &v75[8 * v118];
        if (v16)
        {
          operator delete(v16);
          v4 = v120;
        }
        goto LABEL_122;
      }
      *(_QWORD *)v16 = v8;
      v20 = (uint64_t)(v16 + 8);
LABEL_122:
      *v17 = v20;
      v95 = a1[37];
      if (v95 <= v14)
        v95 = v14;
      a1[37] = v95;
      if ((_DWORD)v14)
      {
        v96 = a1[38];
        if (v96 >= v14)
          v96 = v14;
        a1[38] = v96;
      }
LABEL_128:
      if (*((_DWORD *)v8 + 5) != *((_DWORD *)a1 + 20))
        goto LABEL_10;
      v97 = a1[15];
      if (v97 >= a1[16])
      {
        v6 = (_OWORD *)operator new[]();
        v98 = a1[16];
        bzero(v6, 16 * v98);
        v99 = a1[14];
        v100 = a1[15];
        if (v100)
        {
          if (v100 < 0xC)
          {
            v101 = 0;
            v102 = 0;
            goto LABEL_133;
          }
          v102 = 0;
          v101 = 0;
          if (!(_DWORD)v100)
            goto LABEL_133;
          if ((v100 - 1) >> 32)
            goto LABEL_133;
          if ((unint64_t)v6 - v99 < 0x20)
            goto LABEL_133;
          v101 = v100 & 0xFFFFFFFFFFFFFFFCLL;
          v102 = v100 & 0xFFFFFFFC;
          v104 = (__int128 *)(v99 + 16);
          v105 = v6 + 1;
          v106 = v100 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v107 = *v104;
            *(v105 - 1) = *(v104 - 1);
            *v105 = v107;
            v104 += 2;
            v105 += 2;
            v106 -= 4;
          }
          while (v106);
          if (v100 != v101)
          {
LABEL_133:
            v103 = v102 + 1;
            do
            {
              *((_QWORD *)v6 + v101) = *(_QWORD *)(v99 + 8 * v101);
              v101 = v103++;
            }
            while (v100 > v101);
          }
          a1[16] = 2 * v98;
LABEL_137:
          MEMORY[0x23B83E2F8]();
          v97 = a1[15];
        }
        else
        {
          a1[16] = 2 * v98;
          if (v99)
            goto LABEL_137;
          v97 = 0;
        }
        v4 = v120;
        a1[14] = (uint64_t)v6;
LABEL_9:
        *((_QWORD *)v6 + v97) = v8;
        a1[15] = v97 + 1;
        goto LABEL_10;
      }
      v6 = (_OWORD *)a1[14];
      if (v6)
        goto LABEL_9;
LABEL_10:
      v5 = a1[33];
      if (v5 < v4)
        goto LABEL_4;
    }
  }
LABEL_2:
  a1[32] = 0;
}

void sub_2394DE27C(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (_DWORD *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 4 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (_DWORD *)(v7 + 4 * (v17 & 0x7FFFFFFFFFFFFFF8));
      v18 = vld1q_dup_f32(a3);
      v19 = (float32x4_t *)(v7 + 16);
      v20 = v17 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
      if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_43:
        do
          *v8++ = *(_DWORD *)a3;
        while (v8 != (_DWORD *)(v7 + 4 * a2));
      }
      v8 = (_DWORD *)(v7 + 4 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(_DWORD **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + a2;
    if (v12 >> 62)
      sub_2394189F8();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_239418A80();
      v15 = (char *)operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[4 * v11];
    v22 = (char *)(v21 + 4 * a2);
    v23 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v24 = (char *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = &v15[4 * v11];
      if (&v15[4 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (char *)(v21 + 4 * (v25 & 0x7FFFFFFFFFFFFFF8));
    v26 = vld1q_dup_f32(a3);
    v27 = (float32x4_t *)&v15[4 * v11 + 16];
    v28 = v25 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 8;
    }
    while (v28);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_44:
      do
      {
        *(float *)v24 = *a3;
        v24 += 4;
      }
      while (v24 != v22);
    }
    if ((_DWORD *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 4;
      if (v29 < 0x2C)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 2) + 1;
      v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
      v8 = (_DWORD *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[4 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 8;
      }
      while (v34);
      if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_DWORD *)(v21 - 4) = v36;
          v21 -= 4;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
}

float *sub_2394DE4DC(uint64_t a1, float *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  float v7;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  float **v17;
  float *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  int v23;
  float v24;
  float v25;
  uint64_t v26;
  _QWORD *v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v7 = *a2;
  v8 = a2[1];
  v9 = 2654435769;
  v10 = *(unsigned int *)a2 + 2654435769;
  if (*a2 == 0.0)
    v10 = 2654435769;
  v11 = LODWORD(v8) + 2654435769;
  if (v8 == 0.0)
    v11 = 2654435769;
  v12 = ((v10 << 6) + (v10 >> 2) + v11) ^ v10;
  v13 = a2[2];
  if (v13 != 0.0)
    v9 = LODWORD(v13) + 2654435769;
  v14 = (v9 + (v12 >> 2) + (v12 << 6)) ^ v12;
  v15 = *(_QWORD *)(a1 + 8);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v4 = (v9 + (v12 >> 2) + (v12 << 6)) ^ v12;
      if (v14 >= v15)
        v4 = v14 % v15;
    }
    else
    {
      v4 = v14 & (v15 - 1);
    }
    v17 = *(float ***)(*(_QWORD *)a1 + 8 * v4);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        if (v16.u32[0] < 2uLL)
        {
          while (1)
          {
            v20 = *((_QWORD *)v18 + 1);
            if (v20 == v14)
            {
              if (v18[4] == v7 && v18[5] == v8 && v18[6] == v13)
                return v18;
            }
            else if ((v20 & (v15 - 1)) != v4)
            {
              goto LABEL_33;
            }
            v18 = *(float **)v18;
            if (!v18)
              goto LABEL_33;
          }
        }
        do
        {
          v19 = *((_QWORD *)v18 + 1);
          if (v19 == v14)
          {
            if (v18[4] == v7 && v18[5] == v8 && v18[6] == v13)
              return v18;
          }
          else
          {
            if (v19 >= v15)
              v19 %= v15;
            if (v19 != v4)
              break;
          }
          v18 = *(float **)v18;
        }
        while (v18);
      }
    }
  }
LABEL_33:
  v22 = operator new(0x20uLL);
  *v22 = 0;
  v22[1] = v14;
  v23 = *((_DWORD *)*a4 + 2);
  v22[2] = **a4;
  *((_DWORD *)v22 + 6) = v23;
  *((_DWORD *)v22 + 7) = 0;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (v15 && (float)(v25 * (float)v15) >= v24)
  {
    v26 = *(_QWORD *)a1;
    v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v27)
    {
LABEL_36:
      *v22 = *v27;
LABEL_71:
      *v27 = v22;
      goto LABEL_72;
    }
  }
  else
  {
    v28 = 1;
    if (v15 >= 3)
      v28 = (v15 & (v15 - 1)) != 0;
    v29 = v28 | (2 * v15);
    v30 = vcvtps_u32_f32(v24 / v25);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v15 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v15)
      goto LABEL_47;
    if (prime < v15)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v15 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v15), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (prime <= v32)
        prime = v32;
      if (prime < v15)
LABEL_47:
        sub_239427FE0(a1, prime);
    }
    v15 = *(_QWORD *)(a1 + 8);
    v35 = v15 - 1;
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
      {
        v4 = v14 % v15;
        v26 = *(_QWORD *)a1;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v14 % v15));
        if (v27)
          goto LABEL_36;
      }
      else
      {
        v4 = v14;
        v26 = *(_QWORD *)a1;
        v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
        if (v27)
          goto LABEL_36;
      }
    }
    else
    {
      v4 = v35 & v14;
      v26 = *(_QWORD *)a1;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v35 & v14));
      if (v27)
        goto LABEL_36;
    }
  }
  *v22 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*v22)
  {
    v36 = *(_QWORD *)(*v22 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v36 >= v15)
        v36 %= v15;
    }
    else
    {
      v36 &= v15 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v36);
    goto LABEL_71;
  }
LABEL_72:
  ++*(_QWORD *)(a1 + 24);
  return (float *)v22;
}

void sub_2394DE87C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394DE894()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394DE8A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250ADCDD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2394DE8F0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADCDD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2394DE920(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  float32x2_t *v4;
  float64_t v5;
  float32x2_t v6;
  float64x2_t *v7;
  uint64_t v8;
  _BYTE *v9;
  int *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  _QWORD **v16;
  _QWORD ***v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD **v22;
  _QWORD *v23;
  _QWORD **v24;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD **v43;
  _QWORD *v44;
  _QWORD **v45;
  _QWORD *v46;
  unint64_t v47;
  float v48;
  uint64_t *v49;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v55;
  double v56;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  unint64_t v76;
  _QWORD **v77;
  _QWORD *v78;
  uint64_t v79;
  void *__p;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  _BYTE *v88;
  uint64_t v89;
  void *v90;
  float64_t *v91;
  char *v92;

  v3 = *a2;
  v4 = (float32x2_t *)(**(_QWORD **)(a1 + 16) + 12 * *a2);
  v5 = v4[1].f32[0];
  v6 = *v4;
  v7 = (float64x2_t *)operator new(0x18uLL);
  v91 = &v7[1].f64[1];
  v92 = (char *)&v7[1].f64[1];
  *v7 = vcvtq_f64_f32(v6);
  v7[1].f64[0] = v5;
  v89 = 0;
  v90 = v7;
  v87 = 0;
  v88 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v8 = *(_QWORD *)(a1 + 32);
  sub_2396B9AA4((uint64_t)&v83, 0, 0.0);
  sub_2396B9F60(v8, (uint64_t)&v90, (uint64_t *)&v87, &v84, 5u, v83);
  __p = 0;
  v81 = 0;
  v82 = 0;
  v78 = 0;
  v79 = 0;
  v77 = &v78;
  v10 = (int *)v87;
  v9 = v88;
  if (v88 == v87)
  {
    v42 = 0;
    v41 = &v78;
    goto LABEL_75;
  }
  v11 = 0;
  do
  {
    v12 = *(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(v12 + 112))
      sub_2394875CC();
    v13 = *(_QWORD *)(v12 + 88) + 24 * v10[v11];
    v14 = *(unsigned int **)v13;
    v15 = *(unsigned int **)(v13 + 8);
    if (*(unsigned int **)v13 != v15)
    {
      while (1)
      {
        while (1)
        {
          v19 = operator new(0x28uLL);
          v20 = *v14;
          v19[4] = v20;
          v21 = v78;
          v22 = &v78;
          if (v77 != &v78)
          {
            v23 = v78;
            v24 = &v78;
            if (v78)
            {
              do
              {
                v22 = (_QWORD **)v23;
                v23 = (_QWORD *)v23[1];
              }
              while (v23);
            }
            else
            {
              do
              {
                v22 = (_QWORD **)v24[2];
                _ZF = *v22 == v24;
                v24 = v22;
              }
              while (_ZF);
            }
            if ((unint64_t)v22[4] >= v20)
              break;
          }
          if (v78)
            v16 = v22;
          else
            v16 = &v78;
          if (v78)
            v17 = (_QWORD ***)v22;
          else
            v17 = &v77;
          if (v78)
            v18 = v22 + 1;
          else
            v18 = &v78;
          if (!v17[1])
            goto LABEL_26;
LABEL_18:
          operator delete(v19);
          if (++v14 == v15)
            goto LABEL_3;
        }
        v18 = &v78;
        v16 = &v78;
        if (v78)
        {
          while (1)
          {
            while (1)
            {
              v16 = (_QWORD **)v21;
              v38 = v21[4];
              if (v38 <= v20)
                break;
              v21 = *v16;
              v18 = v16;
              if (!*v16)
                goto LABEL_26;
            }
            if (v38 >= v20)
              goto LABEL_18;
            v21 = v16[1];
            if (!v21)
            {
              v18 = v16 + 1;
              *v19 = 0;
              v19[1] = 0;
              v19[2] = v16;
              v16[1] = v19;
              v26 = *v77;
              if (*v77)
                goto LABEL_27;
              goto LABEL_28;
            }
          }
        }
LABEL_26:
        *v19 = 0;
        v19[1] = 0;
        v19[2] = v16;
        *v18 = v19;
        v26 = *v77;
        if (*v77)
        {
LABEL_27:
          v77 = (_QWORD **)v26;
          v19 = (_QWORD *)*v18;
        }
LABEL_28:
        v27 = v78;
        _ZF = v19 == v78;
        *((_BYTE *)v19 + 24) = v19 == v78;
        if (!_ZF)
        {
          do
          {
            v28 = v19[2];
            if (*(_BYTE *)(v28 + 24))
              break;
            v29 = *(_QWORD **)(v28 + 16);
            v30 = *v29;
            if (*v29 == v28)
            {
              v33 = v29[1];
              if (!v33 || (v34 = *(unsigned __int8 *)(v33 + 24), v31 = (_BYTE *)(v33 + 24), v34))
              {
                if (*(_QWORD **)v28 == v19)
                {
                  *(_BYTE *)(v28 + 24) = 1;
                  *((_BYTE *)v29 + 24) = 0;
                  v37 = *(_QWORD *)(v28 + 8);
                  *v29 = v37;
                  if (v37)
                    goto LABEL_43;
                }
                else
                {
                  v35 = *(uint64_t **)(v28 + 8);
                  v36 = *v35;
                  *(_QWORD *)(v28 + 8) = *v35;
                  if (v36)
                  {
                    *(_QWORD *)(v36 + 16) = v28;
                    v29 = *(_QWORD **)(v28 + 16);
                  }
                  v35[2] = (uint64_t)v29;
                  *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * (**(_QWORD **)(v28 + 16) != v28)) = v35;
                  *v35 = v28;
                  *(_QWORD *)(v28 + 16) = v35;
                  v29 = (_QWORD *)v35[2];
                  v28 = *v29;
                  *((_BYTE *)v35 + 24) = 1;
                  *((_BYTE *)v29 + 24) = 0;
                  v37 = *(_QWORD *)(v28 + 8);
                  *v29 = v37;
                  if (v37)
LABEL_43:
                    *(_QWORD *)(v37 + 16) = v29;
                }
                *(_QWORD *)(v28 + 16) = v29[2];
                *(_QWORD *)(v29[2] + 8 * (*(_QWORD *)v29[2] != (_QWORD)v29)) = v28;
                *(_QWORD *)(v28 + 8) = v29;
LABEL_55:
                v29[2] = v28;
                break;
              }
            }
            else if (!v30 || (v32 = *(unsigned __int8 *)(v30 + 24), v31 = (_BYTE *)(v30 + 24), v32))
            {
              if (*(_QWORD **)v28 == v19)
              {
                v40 = v19[1];
                *(_QWORD *)v28 = v40;
                if (v40)
                {
                  *(_QWORD *)(v40 + 16) = v28;
                  v29 = *(_QWORD **)(v28 + 16);
                }
                v19[2] = v29;
                *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * (**(_QWORD **)(v28 + 16) != v28)) = v19;
                v19[1] = v28;
                *(_QWORD *)(v28 + 16) = v19;
                v29 = (_QWORD *)v19[2];
                *((_BYTE *)v19 + 24) = 1;
                *((_BYTE *)v29 + 24) = 0;
                v28 = v29[1];
                v39 = *(_QWORD **)v28;
                v29[1] = *(_QWORD *)v28;
                if (v39)
LABEL_53:
                  v39[2] = v29;
              }
              else
              {
                *(_BYTE *)(v28 + 24) = 1;
                *((_BYTE *)v29 + 24) = 0;
                v28 = v29[1];
                v39 = *(_QWORD **)v28;
                v29[1] = *(_QWORD *)v28;
                if (v39)
                  goto LABEL_53;
              }
              *(_QWORD *)(v28 + 16) = v29[2];
              *(_QWORD *)(v29[2] + 8 * (*(_QWORD *)v29[2] != (_QWORD)v29)) = v28;
              *(_QWORD *)v28 = v29;
              goto LABEL_55;
            }
            *(_BYTE *)(v28 + 24) = 1;
            v19 = v29;
            *((_BYTE *)v29 + 24) = v29 == v27;
            *v31 = 1;
          }
          while (v29 != v27);
        }
        ++v79;
        if (++v14 == v15)
        {
LABEL_3:
          v10 = (int *)v87;
          v9 = v88;
          break;
        }
      }
    }
    ++v11;
  }
  while (v11 < (v9 - (_BYTE *)v10) >> 2);
  v41 = v77;
  if (v77 == &v78)
  {
    v42 = 0;
  }
  else
  {
    v42 = 0;
    v43 = v77;
    do
    {
      v44 = v43[1];
      if (v44)
      {
        do
        {
          v45 = (_QWORD **)v44;
          v44 = (_QWORD *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (_QWORD **)v43[2];
          _ZF = *v45 == v43;
          v43 = v45;
        }
        while (!_ZF);
      }
      ++v42;
      v43 = v45;
    }
    while (v45 != &v78);
  }
LABEL_75:
  sub_2394DEFE0((unint64_t *)&__p, 0, v41, &v78, v42);
  v46 = __p;
  if (v81 == __p)
  {
    v76 = (v81 - (_BYTE *)__p) >> 3;
    v48 = 0.0;
  }
  else
  {
    v47 = 0;
    v48 = 0.0;
    do
    {
      v49 = sub_2394650AC(*(_QWORD *)(a1 + 8), v46[v47]);
      _Q0 = vcvtq_f64_f32(*v4);
      v51.f64[0] = v4[1].f32[0];
      *(_QWORD *)&v52.f64[0] = v49[10];
      _Q4 = *((float64x2_t *)v49 + 4);
      _D5 = *((double *)v49 + 14);
      v55 = *((float64x2_t *)v49 + 6);
      v56 = *((double *)v49 + 18);
      _Q7 = *((float64x2_t *)v49 + 8);
      __asm { FMLA            D17, D5, V0.D[1] }
      v62.f64[0] = _D17 + v56 * v51.f64[0];
      *(_QWORD *)&v63.f64[0] = v49[22];
      v64 = *((float64x2_t *)v49 + 10);
      v65 = v63.f64[0] + v62.f64[0];
      v66 = vaddq_f64(v63, v62);
      v67 = vaddq_f64(v64, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q4, _Q0.f64[0]), v55, _Q0, 1), _Q7, v51.f64[0]));
      v68 = v67.f64[0] / v66.f64[0];
      v67.f64[0] = v67.f64[1] / v66.f64[0];
      v66.f64[0] = v65;
      v69 = vmlad_n_f64(*((double *)v49 + 2), v68, *(double *)v49);
      *(_QWORD *)&v70.f64[0] = v49[2];
      v70.f64[1] = v67.f64[0];
      *(_QWORD *)&v67.f64[1] = v49[1];
      v67.f64[0] = 0.0500000007;
      *(_QWORD *)&v71.f64[1] = v49[3];
      v71.f64[0] = v69;
      v72 = vmlaq_n_f64(vnegq_f64(v64), vdivq_f64(vsubq_f64(vmlaq_f64(v71, v67, v70), *((float64x2_t *)v49 + 1)), *(float64x2_t *)v49), v65);
      *(_QWORD *)&v67.f64[0] = *(_OWORD *)&vsubq_f64(v66, v63);
      v52.f64[1] = _D5;
      v73 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q4, (int64x2_t)v55), v72.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)_Q4, (int64x2_t)v55), v72, 1), v52, v67.f64[0]);
      _Q3 = vmulq_f64(_Q7, v72);
      _Q4.f64[0] = v72.f64[1];
      __asm { FMLA            D3, D4, V7.D[1] }
      _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v56, v67.f64[0]);
      *(_QWORD *)&v51.f64[0] = *(_OWORD *)&vsubq_f64(_Q3, v51);
      _Q3.f64[0] = vsubq_f64(v73, _Q0).f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      v48 = sqrt(vmlad_n_f64(_D2, v51.f64[0], v51.f64[0])) + v48;
      ++v47;
      v46 = __p;
      v76 = (v81 - (_BYTE *)__p) >> 3;
    }
    while (v47 < v76);
  }
  *(float *)(**(_QWORD **)(a1 + 24) + 4 * v3) = (float)(v48 / (float)v76) * (float)(v48 / (float)v76);
  sub_239421038((uint64_t)&v77, v78);
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v90)
  {
    v91 = (float64_t *)v90;
    operator delete(v90);
  }
}

void sub_2394DEF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  void *v25;
  void *v26;
  void *v27;

  sub_239421038((uint64_t)&a9, a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
    v25 = a17;
    if (!a17)
    {
LABEL_3:
      v26 = a20;
      if (!a20)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v25 = a17;
    if (!a17)
      goto LABEL_3;
  }
  a18 = (uint64_t)v25;
  operator delete(v25);
  v26 = a20;
  if (!a20)
  {
LABEL_4:
    v27 = a23;
    if (!a23)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  a21 = (uint64_t)v26;
  operator delete(v26);
  v27 = a23;
  if (!a23)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  a24 = (uint64_t)v27;
  operator delete(v27);
  _Unwind_Resume(a1);
}

char *sub_2394DEFE0(unint64_t *a1, void *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  size_t v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return v8;
  v10 = a3;
  v12 = v7 >> 3;
  v14 = (uint64_t *)a1[1];
  v13 = a1[2];
  if (a5 <= (uint64_t)(v13 - (_QWORD)v14) >> 3)
  {
    v20 = a5;
    v21 = a3;
    do
    {
      v23 = (_QWORD *)v21[1];
      v24 = v21;
      if (v23)
      {
        do
        {
          v21 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v24[2];
          v25 = *v21 == (_QWORD)v24;
          v24 = v21;
        }
        while (!v25);
      }
      v22 = v20-- <= 1;
    }
    while (!v22);
    v26 = ((char *)v14 - v8) >> 3;
    if (v26 >= a5)
    {
      v30 = (char *)a1[1];
      goto LABEL_71;
    }
    if ((char *)v14 - v8 <= -8)
    {
      v48 = ((char *)v14 - v8) >> 3;
      v49 = a3;
      do
      {
        v51 = (_QWORD *)*v49;
        if (*v49)
        {
          do
          {
            v21 = v51;
            v51 = (_QWORD *)v51[1];
          }
          while (v51);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v49[2];
            v25 = *v21 == (_QWORD)v49;
            v49 = v21;
          }
          while (v25);
        }
        v49 = v21;
      }
      while (!__CFADD__(v48++, 1));
    }
    else if (v14 == (uint64_t *)v8)
    {
      v21 = a3;
    }
    else
    {
      v27 = ((char *)v14 - v8) >> 3;
      v28 = a3;
      do
      {
        v29 = (_QWORD *)v28[1];
        if (v29)
        {
          do
          {
            v21 = v29;
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v28[2];
            v25 = *v21 == (_QWORD)v28;
            v28 = v21;
          }
          while (!v25);
        }
        v28 = v21;
        v22 = v27-- <= 1;
      }
      while (!v22);
    }
    if (v21 == a4)
    {
      v30 = (char *)a1[1];
    }
    else
    {
      v52 = v21;
      v30 = (char *)a1[1];
      do
      {
        *(_QWORD *)v30 = v52[4];
        v53 = (_QWORD *)v52[1];
        if (v53)
        {
          do
          {
            v54 = v53;
            v53 = (_QWORD *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            v54 = (_QWORD *)v52[2];
            v25 = *v54 == (_QWORD)v52;
            v52 = v54;
          }
          while (!v25);
        }
        v30 += 8;
        v52 = v54;
      }
      while (v54 != a4);
    }
    a1[1] = (unint64_t)v30;
    if (v26 >= 1)
    {
LABEL_71:
      v55 = &v8[8 * a5];
      v56 = v30 - v55;
      v57 = (v30 - v55) >> 3;
      v58 = (uint64_t *)&v30[-8 * a5];
      v59 = v30;
      if (v58 < v14)
      {
        v60 = (v7 & 0xFFFFFFFFFFFFFFF8) + v56;
        v61 = (char *)(v60 + v6);
        v62 = v60 + v6 + 8;
        if ((unint64_t)v14 > v62)
          v62 = (unint64_t)v14;
        v63 = v62 + ~v6 - v60;
        if (v63 < 0x58)
        {
          v59 = v30;
        }
        else
        {
          v64 = v30 - v61;
          v59 = v30;
          if (v64 >= 0x20)
          {
            v65 = (v63 >> 3) + 1;
            v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
            v58 = (uint64_t *)((char *)v58 + v66);
            v59 = &v30[v66];
            v67 = v30 + 16;
            v68 = (__int128 *)(8 * v57 + 8 * v12 + v6 + 16);
            v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v70 = *v68;
              *(v67 - 1) = *(v68 - 1);
              *v67 = v70;
              v67 += 2;
              v68 += 2;
              v69 -= 4;
            }
            while (v69);
            if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_82;
          }
        }
        do
        {
          v71 = *v58++;
          *(_QWORD *)v59 = v71;
          v59 += 8;
        }
        while (v58 < v14);
      }
LABEL_82:
      a1[1] = (unint64_t)v59;
      if (v30 != v55)
      {
        v72 = v8;
        memmove(&v30[-8 * v57], v8, v56);
        v8 = v72;
      }
      if (v21 != v10)
      {
        v73 = v8;
        do
        {
          *v73 = v10[4];
          v74 = (_QWORD *)v10[1];
          if (v74)
          {
            do
            {
              v75 = v74;
              v74 = (_QWORD *)*v74;
            }
            while (v74);
          }
          else
          {
            do
            {
              v75 = (_QWORD *)v10[2];
              v25 = *v75 == (_QWORD)v10;
              v10 = v75;
            }
            while (!v25);
          }
          ++v73;
          v10 = v75;
        }
        while (v75 != v21);
      }
    }
    return v8;
  }
  v15 = a5 + ((uint64_t)((uint64_t)v14 - v6) >> 3);
  if (v15 >> 61)
    sub_2394189F8();
  v16 = v13 - v6;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      sub_239418A80();
    v18 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
    v19 = operator new(8 * v17);
    v8 = (char *)v18;
    v12 = v7 >> 3;
  }
  else
  {
    v19 = 0;
  }
  v31 = &v19[8 * v12];
  v32 = &v31[8 * a5];
  v33 = v31;
  do
  {
    *(_QWORD *)v33 = v10[4];
    v33 += 8;
    v34 = (_QWORD *)v10[1];
    if (v34)
    {
      do
      {
        v35 = v34;
        v34 = (_QWORD *)*v34;
      }
      while (v34);
    }
    else
    {
      do
      {
        v35 = (_QWORD *)v10[2];
        v25 = *v35 == (_QWORD)v10;
        v10 = v35;
      }
      while (!v25);
    }
    v10 = v35;
  }
  while (v33 != v32);
  v36 = &v19[8 * v12];
  if ((void *)v6 != a2)
  {
    v37 = v8;
    v36 = &v19[8 * v12];
    if ((unint64_t)(v7 - 8) < 0x68)
      goto LABEL_99;
    v37 = v8;
    v36 = &v19[8 * v12];
    if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v19[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
      goto LABEL_99;
    v38 = ((unint64_t)(v7 - 8) >> 3) + 1;
    v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v8[-v39];
    v36 = &v31[-v39];
    v40 = 8 * v12 - 16;
    v41 = &v19[v40];
    v42 = (__int128 *)(v6 + v40);
    v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v44 = *v42;
      *(v41 - 1) = *(v42 - 1);
      *v41 = v44;
      v41 -= 2;
      v42 -= 2;
      v43 -= 4;
    }
    while (v43);
    if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_99:
      do
      {
        v45 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *((_QWORD *)v36 - 1) = v45;
        v36 -= 8;
      }
      while (v37 != (char *)v6);
    }
  }
  v46 = &v19[8 * v17];
  v47 = (char *)v14 - v8;
  if (v14 != (uint64_t *)v8)
    memmove(v32, v8, (char *)v14 - v8);
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v32[v47];
  a1[2] = (unint64_t)v46;
  if (v6)
    operator delete((void *)v6);
  return v31;
}

void sub_2394DF4A0()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394DF4B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_250ADCE18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_2394DF4FC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_250ADCE18;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2394DF52C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float64_t v6;
  float32x2_t v7;
  float64x2_t *v8;
  uint64_t v9;
  double v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  void *v22;
  uint64_t v23;
  void *__p;
  void *v25;
  uint64_t v26;
  void *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  float64x2_t *v37;
  float64_t *v38;
  char *v39;

  v3 = *a2;
  v4 = **(_QWORD **)(a1 + 8) + 12 * *a2;
  v5 = *(float *)(**(_QWORD **)(a1 + 40) + 4 * *a2);
  v6 = *(float *)(v4 + 8);
  v7 = *(float32x2_t *)v4;
  v8 = (float64x2_t *)operator new(0x18uLL);
  v38 = &v8[1].f64[1];
  v39 = (char *)&v8[1].f64[1];
  *v8 = vcvtq_f64_f32(v7);
  v8[1].f64[0] = v6;
  v37 = v8;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v9 = *(_QWORD *)(a1 + 24);
  sub_2396B9AA4((uint64_t)&v30, 0, 0.0);
  v10 = v5;
  sub_2396BA22C(v9, (uint64_t)&v37, &v34, (uint64_t)&v31, v30, v10);
  v12 = v34;
  v11 = v35;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v25 = 0;
  v26 = 0;
  v13 = *(_QWORD *)(a1 + 32);
  sub_2396B9AA4((uint64_t)&v23, 0, 0.0);
  sub_2396BA22C(v13, (uint64_t)&v37, &v27, (uint64_t)&__p, v23, v10);
  v14 = (unint64_t)(v11 - v12) >> 2;
  v15 = v27;
  v16 = (unint64_t)(v28 - (_BYTE *)v27) >> 2;
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(float *)(v17 + 24);
  v19 = *(float *)(v17 + 28) - v18;
  if ((int)v16 < 1)
  {
    if ((_DWORD)v14)
      v19 = 0.0;
    *(float *)(**(_QWORD **)(a1 + 16) + 4 * v3) = v18 + v19;
    v22 = __p;
    if (__p)
      goto LABEL_5;
  }
  else
  {
    v20 = (float)(int)v14 / (float)(int)v16;
    v21 = v19 + (float)((float)(v19 * -0.5) * v20);
    if (v20 >= 2.0)
      v21 = 0.0;
    *(float *)(**(_QWORD **)(a1 + 16) + 4 * v3) = v18 + v21;
    v22 = __p;
    if (__p)
    {
LABEL_5:
      v25 = v22;
      operator delete(v22);
      v15 = v27;
    }
  }
  if (v15)
  {
    v28 = v15;
    operator delete(v15);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  if (v37)
  {
    v38 = (float64_t *)v37;
    operator delete(v37);
  }
}

void sub_2394DF720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  if (__p)
  {
    operator delete(__p);
    v26 = a15;
    if (!a15)
    {
LABEL_3:
      v27 = a20;
      if (!a20)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v26 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = a20;
  if (!a20)
  {
LABEL_4:
    v28 = a23;
    if (!a23)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v27);
  v28 = a23;
  if (!a23)
  {
LABEL_5:
    v29 = *(void **)(v24 - 104);
    if (!v29)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v28);
  v29 = *(void **)(v24 - 104);
  if (!v29)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  *(_QWORD *)(v24 - 96) = v29;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

void sub_2394DF7B4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _BYTE v47[8];
  void *__p;
  __int128 v49;
  _BYTE v50[265];
  void *v51;
  __int128 v52;
  _QWORD v53[66];

  v53[64] = *MEMORY[0x24BDAC8D0];
  v51 = v53;
  v52 = xmmword_239EC6CD0;
  __p = v50;
  v49 = xmmword_239EC6CD0;
  *(_QWORD *)&v45 = v53;
  *(_QWORD *)&v43 = v53;
  sub_2394BE6D4((uint64_t)&__p, (char **)&v45, (char **)&v43);
  v10 = (char *)__p + 8 * v49;
  if ((_QWORD)v49 == *((_QWORD *)&v49 + 1))
  {
    sub_2394BEA3C((uint64_t)&__p, (uint64_t)v10, 1, a3, &v45);
  }
  else
  {
    *v10 = *a3;
    *(_QWORD *)&v49 = v49 + 1;
  }
  *(_BYTE *)(*a3 + 64) = 1;
  *(_QWORD *)&v45 = a5[1];
  sub_2394C5488((void ***)&v45, a3);
  v38 = a1;
  LODWORD(v11) = *(_DWORD *)(a2 + 8);
  if ((v11 & 0x80000000) != 0)
  {
    *(_QWORD *)&v49 = 0;
    goto LABEL_31;
  }
  v12 = v49;
  while (2)
  {
    --v12;
    v13 = *((_QWORD *)__p + v12);
    *(_QWORD *)&v49 = v12;
    if ((v11 & 0x80000000) != 0)
      goto LABEL_5;
    v14 = 0;
    do
    {
      v17 = *(_QWORD *)(v13 + 8 * v14);
      v39 = v17;
      if (!*(_BYTE *)(v17 + 64))
      {
        v40 = 0;
        v18 = *a4;
        v19 = a4[1];
        v20 = *(_QWORD *)(v17 + 32);
        v21 = *(_QWORD *)(v19 + 200);
        if (v20 == v21)
        {
          v24 = 0;
        }
        else
        {
          v22 = *(_QWORD *)(v17 + 40);
          if (v22 == v21)
          {
            v24 = 1;
          }
          else
          {
            v23 = *(_QWORD *)(v17 + 48);
            if (v23 != v21)
            {
              LODWORD(v45) = 0;
              LODWORD(v43) = 0;
              if (sub_2394CE28C(v19, (__int128 *)v18, (__int128 *)(v20 + 16), (__int128 *)(v22 + 16), (__int128 *)(v23 + 16), &v40, (int *)&v45, (int *)&v43) != 1)goto LABEL_9;
LABEL_26:
              v37 = (char *)__p + 8 * v49;
              if ((_QWORD)v49 == *((_QWORD *)&v49 + 1))
              {
                sub_2394BEA3C((uint64_t)&__p, (uint64_t)v37, 1, &v39, &v45);
              }
              else
              {
                *v37 = v39;
                *(_QWORD *)&v49 = v49 + 1;
              }
              *(_BYTE *)(v39 + 64) = 1;
              *(_QWORD *)&v45 = a5[1];
              sub_2394C5488((void ***)&v45, &v39);
              goto LABEL_11;
            }
            v24 = 2;
          }
        }
        v25 = byte_239EC6C50[4 * v24 + 3];
        v26 = v17 + 32;
        v27 = *(_QWORD *)(v26 + 8 * ((v24 ^ 3) - v25));
        v28 = *(_QWORD *)(v26 + 8 * v25);
        v30 = *(_OWORD *)(v27 + 16);
        v29 = v27 + 16;
        v31 = *(_QWORD *)(v29 + 16);
        v45 = v30;
        v46 = v31;
        v33 = *(_OWORD *)(v28 + 16);
        v32 = v28 + 16;
        v34 = *(_QWORD *)(v32 + 16);
        v43 = v33;
        v44 = v34;
        v35 = *(_QWORD *)(v18 + 16);
        v41 = *(_OWORD *)v18;
        v42 = v35;
        v36 = sub_2394C2060((uint64_t)v47, (double *)&v45, (double *)&v43, (double *)&v41);
        if (v36 == 1)
          goto LABEL_9;
        if (v36 != -1)
        {
          sub_2394CCD78(v19, (double *)v29, (double *)v18, (double *)v32);
LABEL_9:
          *(_BYTE *)(v39 + 64) = 2;
LABEL_10:
          v15 = *a5;
          *(_QWORD *)v15 = v13;
          *(_DWORD *)(v15 + 8) = v14;
          goto LABEL_11;
        }
        goto LABEL_26;
      }
      if (*(_BYTE *)(v17 + 64) != 1)
        goto LABEL_10;
LABEL_11:
      v11 = *(int *)(a2 + 8);
    }
    while (v14++ < v11);
    v12 = v49;
LABEL_5:
    if (v12)
      continue;
    break;
  }
LABEL_31:
  *(_OWORD *)v38 = *(_OWORD *)a5;
  *(_QWORD *)(v38 + 16) = a5[2];
  if (*((_QWORD *)&v49 + 1) && v50 != __p)
    operator delete(__p);
  if (*((_QWORD *)&v52 + 1))
  {
    if (v53 != v51)
      operator delete(v51);
  }
}

void sub_2394DFB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29)
{
  if (a29 && (void *)a11 != __p)
    operator delete(__p);
  if (STACK[0x2B8])
  {
    if (a10 != STACK[0x2A8])
      operator delete((void *)STACK[0x2A8]);
  }
  _Unwind_Resume(a1);
}

void sub_2394DFB78(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  _QWORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  char *v22;
  void *__p;
  __int128 v24;
  _BYTE v25[265];
  void *v26;
  __int128 v27;
  _QWORD v28[66];

  v28[64] = *MEMORY[0x24BDAC8D0];
  v26 = v28;
  v27 = xmmword_239EC6CD0;
  v22 = (char *)v28;
  __p = v25;
  v24 = xmmword_239EC6CD0;
  v19 = (char *)v28;
  sub_2394BE6D4((uint64_t)&__p, &v22, &v19);
  v10 = (char *)__p + 8 * v24;
  if ((_QWORD)v24 == *((_QWORD *)&v24 + 1))
  {
    sub_2394BEA3C((uint64_t)&__p, (uint64_t)v10, 1, a3, &v22);
  }
  else
  {
    *v10 = *a3;
    *(_QWORD *)&v24 = v24 + 1;
  }
  *(_BYTE *)(*a3 + 64) = 1;
  v22 = (char *)a5[1];
  sub_2394C5488((void ***)&v22, a3);
  LODWORD(v11) = *(_DWORD *)(a2 + 8);
  if ((v11 & 0x80000000) != 0)
  {
    *(_QWORD *)&v24 = 0;
    goto LABEL_21;
  }
  v12 = v24;
  while (2)
  {
    --v12;
    v13 = *((_QWORD *)__p + v12);
    *(_QWORD *)&v24 = v12;
    if ((v11 & 0x80000000) != 0)
      goto LABEL_5;
    v14 = 0;
    do
    {
      v17 = *(char **)(v13 + 8 * v14);
      v19 = v17;
      if (v17[64])
      {
        if (v17[64] != 1)
          goto LABEL_9;
      }
      else
      {
        v21 = 0;
        v22 = v17;
        v20 = 0;
        if (sub_2394CE4C0(a4[1], *a4, (uint64_t)&v22, (_DWORD *)&v21 + 1, (int *)&v21, &v20) != 1)
        {
          v19[64] = 2;
LABEL_9:
          v15 = *a5;
          *(_QWORD *)v15 = v13;
          *(_DWORD *)(v15 + 8) = v14;
          goto LABEL_10;
        }
        v18 = (char *)__p + 8 * v24;
        if ((_QWORD)v24 == *((_QWORD *)&v24 + 1))
        {
          sub_2394BEA3C((uint64_t)&__p, (uint64_t)v18, 1, &v19, &v22);
        }
        else
        {
          *v18 = v19;
          *(_QWORD *)&v24 = v24 + 1;
        }
        v19[64] = 1;
        v22 = (char *)a5[1];
        sub_2394C5488((void ***)&v22, &v19);
      }
LABEL_10:
      v11 = *(int *)(a2 + 8);
    }
    while (v14++ < v11);
    v12 = v24;
LABEL_5:
    if (v12)
      continue;
    break;
  }
LABEL_21:
  *(_OWORD *)a1 = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 16) = a5[2];
  if (*((_QWORD *)&v24 + 1) && v25 != __p)
    operator delete(__p);
  if (*((_QWORD *)&v27 + 1))
  {
    if (v28 != v26)
      operator delete(v26);
  }
}

void sub_2394DFDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v16;

  if (a15 && v16 != __p)
    operator delete(__p);
  if (STACK[0x248])
  {
    if (v15 != STACK[0x238])
      operator delete((void *)STACK[0x238]);
  }
  _Unwind_Resume(a1);
}

void sub_2394DFE38(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 56) = __p;
  operator delete(__p);
}

void sub_2394DFE40(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = __p;
  operator delete(__p);
}

void sub_2394DFE54(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 16) = __p;
  operator delete(__p);
}

void sub_2394DFE5C()
{
  unsigned __int8 v0;

  if ((byte_2542CF7A8 & 1) == 0)
  {
    byte_2542CF7A8 = 1;
    v0 = atomic_load((unsigned __int8 *)&qword_2542CF7B8);
    if ((v0 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_2542CF7B8))
      {
        qword_2542CF7B0 = ldexp(2.22507386e-308, 54);
        __cxa_guard_release(&qword_2542CF7B8);
      }
    }
  }
}

uint64_t sub_2394DFECC(int *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  if (a1[32] <= 2)
  {
    v1 = *((_QWORD *)a1 + 1);
    if (v1 == *(_QWORD *)a1)
    {
      v2 = *((_QWORD *)a1 + 23);
      goto LABEL_15;
    }
LABEL_40:
    sub_239EBFFE0();
  }
  v1 = *(_QWORD *)a1;
  if (*((_QWORD *)a1 + 19) != (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 2)
    goto LABEL_40;
  v2 = *((_QWORD *)a1 + 22);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    v2 += 72;
    if ((v3 & 3) == 2)
    {
      do
      {
        while (1)
        {
          v5 = *(_QWORD *)(v2 + 72);
          v2 += 72;
          v4 = v5;
          v6 = v5 & 3;
          if (v6 != 1)
            break;
          v2 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v6)
          v7 = v6 == 3;
        else
          v7 = 1;
      }
      while (!v7);
    }
  }
LABEL_15:
  v8 = *((_QWORD *)a1 + 23);
  while (v2 != v8)
  {
    v9 = *((_QWORD *)a1 + 40);
    if (*(_QWORD *)(v2 + 32) != v9
      && *(_QWORD *)(v2 + 40) != v9
      && *(_QWORD *)(v2 + 48) != v9
      && *(_QWORD *)(v2 + 56) != v9)
    {
      v10 = *(int *)(v2 + 68);
      if (*(_DWORD *)(v1 + 4 * v10) == 1)
      {
        if (*(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)v2 + 68)))
          v11 = *(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)(v2 + 8) + 68)) == 0;
        else
          v11 = (*(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)(v2 + 8) + 68)) == 0) + 1;
        if (!*(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)(v2 + 16) + 68)))
          ++v11;
        if (!*(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)(v2 + 24) + 68)))
          ++v11;
        if (v11 >= 3)
          *(_DWORD *)(v1 + 4 * v10) = 0;
      }
    }
    do
    {
      while (1)
      {
        v13 = *(_QWORD *)(v2 + 72);
        v2 += 72;
        v12 = v13;
        v14 = v13 & 3;
        if (v14 != 1)
          break;
        v2 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (v14)
        v15 = v14 == 3;
      else
        v15 = 1;
    }
    while (!v15);
  }
  return 1;
}

uint64_t sub_2394E0020(int *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  int v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;

  if (a1[32] > 2)
  {
    v1 = *(_QWORD *)a1;
    if (*((_QWORD *)a1 + 19) == (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 2)
    {
      v2 = *((_QWORD *)a1 + 22);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 72);
        v2 += 72;
        if ((v3 & 3) == 2)
        {
          do
          {
            while (1)
            {
              v5 = *(_QWORD *)(v2 + 72);
              v2 += 72;
              v4 = v5;
              v6 = v5 & 3;
              if (v6 != 1)
                break;
              v2 = v4 & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v6)
              v7 = v6 == 3;
            else
              v7 = 1;
          }
          while (!v7);
        }
      }
      goto LABEL_15;
    }
LABEL_63:
    sub_239EC0010();
  }
  v1 = *((_QWORD *)a1 + 1);
  if (v1 != *(_QWORD *)a1)
    goto LABEL_63;
  v2 = *((_QWORD *)a1 + 23);
LABEL_15:
  v8 = *((_QWORD *)a1 + 23);
  while (v2 != v8)
  {
    v9 = *(int *)(v2 + 68);
    v10 = *(_DWORD *)(v1 + 4 * v9);
    if (v10 != -1)
    {
      v11 = *(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)v2 + 68));
      v12 = v11 != v10 || v11 == -1;
      v13 = v12;
      if (v12)
      {
        v14 = *(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)(v2 + 8) + 68));
        v15 = v14 != v10 || v14 == -1;
        v13 = v15;
        if (v15)
        {
          v16 = *(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)(v2 + 16) + 68));
          v17 = v16 != v10 || v16 == -1;
          v13 = v17;
          if (v17)
          {
            v18 = *(_DWORD *)(v1 + 4 * *(int *)(*(_QWORD *)(v2 + 24) + 68));
            v13 = v18 != v10 || v18 == -1;
          }
        }
      }
      if (v13)
      {
        if (v10 == 1)
        {
          v20 = 0;
          goto LABEL_53;
        }
        if (!v10)
        {
          v20 = 1;
LABEL_53:
          *(_DWORD *)(v1 + 4 * v9) = v20;
          goto LABEL_55;
        }
      }
    }
    do
    {
LABEL_55:
      while (1)
      {
        v22 = *(_QWORD *)(v2 + 72);
        v2 += 72;
        v21 = v22;
        v23 = v22 & 3;
        if (v23 != 1)
          break;
        v2 = v21 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (v23)
        v24 = v23 == 3;
      else
        v24 = 1;
    }
    while (!v24);
  }
  return 1;
}

uint64_t sub_2394E0178(uint64_t *a1)
{
  int v2;
  int v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  double *v18;
  const double *v19;
  uint64_t v20;
  const double *v21;
  double *v22;
  uint64_t v23;
  char *v24;
  int v25;
  void *__p;
  char *v28;
  char *v29;
  double *v30;
  uint64_t v31;
  double *v32;
  void *v33;
  _BYTE *v34;
  uint64_t v35;
  float64x2x2_t v36;
  float64x2x2_t v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  srand(0);
  v2 = sub_2394E0450(a1, (unint64_t **)&v33, 1);
  if (v2)
  {
    v3 = 0;
    v4 = 1;
    while (1)
    {
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v6 = v33;
      v5 = v34;
      v7 = v34 - (_BYTE *)v33;
      if (v34 == v33)
      {
        v9 = 0;
        __p = 0;
        v28 = 0;
        v29 = 0;
        v12 = (const void *)*a1;
        v11 = a1[1];
        v13 = v11 - *a1;
        if (v11 != *a1)
          goto LABEL_19;
        goto LABEL_21;
      }
      if (v7 < 0)
        sub_2394189F8();
      v8 = (double *)operator new(v34 - (_BYTE *)v33);
      v9 = v8;
      v30 = v8;
      v32 = &v8[2 * (v7 >> 4)];
      v10 = v7 - 16;
      if ((unint64_t)(v7 - 16) < 0x70)
        break;
      v14 = v8 >= (double *)((char *)v6 + (v10 & 0xFFFFFFFFFFFFFFF0) + 16)
         || v6 >= (_QWORD *)((char *)v8 + (v10 & 0xFFFFFFFFFFFFFFF0) + 16);
      v7 = (uint64_t)v8;
      if (!v14)
        goto LABEL_17;
      v15 = (v10 >> 4) + 1;
      v16 = 2 * (v15 & 0x1FFFFFFFFFFFFFFCLL);
      v17 = &v6[v16];
      v7 = (uint64_t)&v8[v16];
      v18 = v8 + 4;
      v19 = (const double *)(v6 + 4);
      v20 = v15 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v21 = v19 - 4;
        v36 = vld2q_f64(v21);
        v37 = vld2q_f64(v19);
        v22 = v18 - 4;
        vst2q_f64(v22, v36);
        vst2q_f64(v18, v37);
        v18 += 8;
        v19 += 8;
        v20 -= 4;
      }
      while (v20);
      v6 = v17;
      if (v15 != (v15 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_17;
LABEL_18:
      v31 = v7;
      __p = 0;
      v28 = 0;
      v29 = 0;
      v12 = (const void *)*a1;
      v23 = a1[1];
      v13 = v23 - *a1;
      if (v23 != *a1)
      {
LABEL_19:
        if (v13 < 0)
          sub_2394189F8();
        __p = operator new(v13);
        v28 = (char *)__p;
        v24 = (char *)__p + 4 * (v13 >> 2);
        v29 = v24;
        memcpy(__p, v12, v13);
        v28 = v24;
      }
LABEL_21:
      v25 = sub_2394E0450(a1, (unint64_t **)&v33, v4);
      v4 = v25 >= v2;
      if (v25 < v2)
      {
        v3 = 0;
        v2 = v25;
      }
      else
      {
        sub_2394E3050((char **)&v33, (unint64_t)v9, (char *)v7, (v7 - (uint64_t)v9) >> 4);
        ++v3;
        if (&__p != (void **)a1)
          sub_23942156C(a1, (char *)__p, v28, (v28 - (_BYTE *)__p) >> 2);
      }
      if (__p)
      {
        v28 = (char *)__p;
        operator delete(__p);
      }
      if (v9)
        operator delete(v9);
      if (!v2 || v3 >= 5)
        goto LABEL_31;
    }
    v7 = (uint64_t)v8;
    do
    {
LABEL_17:
      *(_QWORD *)v7 = *v6;
      *(_QWORD *)(v7 + 8) = v6[1];
      v7 += 16;
      v6 += 2;
    }
    while (v6 != v5);
    goto LABEL_18;
  }
LABEL_31:
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  return 1;
}

void sub_2394E03E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394E0450(uint64_t *a1, unint64_t **a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  const double *v51;
  double *v52;
  uint64_t v53;
  const double *v54;
  double *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int64_t v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  const double *v74;
  double *v75;
  uint64_t v76;
  const double *v77;
  double *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  const double *v97;
  double *v98;
  uint64_t v99;
  const double *v100;
  double *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int64_t v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  const double *v120;
  double *v121;
  uint64_t v122;
  const double *v123;
  double *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  int64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  int64_t v135;
  unint64_t v136;
  unint64_t v137;
  BOOL v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  const double *v143;
  double *v144;
  uint64_t v145;
  const double *v146;
  double *v147;
  uint64_t v148;
  _QWORD *v149;
  char *v150;
  int64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  int64_t v158;
  unint64_t v159;
  unint64_t v160;
  BOOL v161;
  unint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  const double *v166;
  double *v167;
  uint64_t v168;
  const double *v169;
  double *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  unint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  unint64_t v190;
  unint64_t v191;
  BOOL v192;
  BOOL v193;
  char *v195;
  unint64_t *v196;
  unint64_t v197;
  unsigned int v198;
  int v199;
  unsigned int v200;
  uint64_t v202;
  uint64_t v203;
  int v204;
  BOOL v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  BOOL v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  BOOL v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  unint64_t v229;
  unint64_t v230;
  BOOL v231;
  BOOL v232;
  BOOL v233;
  BOOL v234;
  BOOL v235;
  BOOL v236;
  BOOL v237;
  BOOL v238;
  unint64_t v240;
  uint64_t v241;
  const double *v242;
  double *v243;
  uint64_t v244;
  const double *v245;
  double *v246;
  void *v247;
  unsigned int v252;
  uint64_t v253;
  _QWORD *v254;
  void *__p;
  _BYTE *v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  _QWORD *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  void *v265;
  int v266[2];
  char *v267;
  _QWORD v268[2];
  _QWORD v269[2];
  _QWORD v270[3];
  float64x2x2_t v271;
  float64x2x2_t v272;
  float64x2x2_t v273;
  float64x2x2_t v274;
  float64x2x2_t v275;
  float64x2x2_t v276;
  float64x2x2_t v277;
  float64x2x2_t v278;
  float64x2x2_t v279;
  float64x2x2_t v280;
  float64x2x2_t v281;
  float64x2x2_t v282;
  float64x2x2_t v283;
  float64x2x2_t v284;

  v3 = a1 + 16;
  if (*((int *)a1 + 32) >= 3)
    v4 = a1[19];
  else
    v4 = 0;
  if (v4 != (a1[1] - *a1) >> 2)
    sub_239EC0040();
  v5 = a3;
  v6 = a2;
  v7 = a1;
  v265 = 0;
  *(_QWORD *)v266 = 0;
  v267 = 0;
  v8 = (char *)*a2;
  if (*a2 != a2[1])
    goto LABEL_6;
  sub_2394E15BC((uint64_t)(a1 + 15), (uint64_t)&__p);
  v174 = v260;
  v175 = v261;
  v176 = v263;
  v177 = (char *)v6[1];
LABEL_218:
  if (v174 != v3 || v175 != v7[23] || (_DWORD)v176 || (v176 & 0xFFFFFFFF00000000) != 0x100000000)
  {
    v262 = v175;
    v178 = v6[2];
    if ((unint64_t)v177 < v178)
    {
      *(_QWORD *)v177 = v175;
      *((_QWORD *)v177 + 1) = v263;
      v177 += 16;
LABEL_249:
      v6[1] = v177;
      v174 = v260;
      v198 = HIDWORD(v263);
      while (1)
      {
        v199 = *(_DWORD *)v260;
        if (*(_DWORD *)v260 == 1)
        {
          v175 = v261;
          do
          {
            while (1)
            {
              v219 = *(_QWORD *)(v175 + 72);
              v175 += 72;
              v218 = v219;
              v220 = v219 & 3;
              if (v220 != 1)
                break;
              v175 = v218 & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v220)
              v221 = v220 == 3;
            else
              v221 = 1;
          }
          while (!v221);
          v261 = v175;
LABEL_316:
          if (v260 != __p)
            goto LABEL_317;
        }
        else
        {
          if (v199 == 2)
          {
            v213 = v263;
            v175 = v261;
            while (1)
            {
              if (v213 == 2)
              {
                v263 = 0x100000000;
                do
                {
                  while (1)
                  {
                    v215 = *(_QWORD *)(v175 + 72);
                    v175 += 72;
                    v214 = v215;
                    v216 = v215 & 3;
                    if (v216 != 1)
                      break;
                    v175 = v214 & 0xFFFFFFFFFFFFFFFCLL;
                  }
                  if (v216)
                    v217 = v216 == 3;
                  else
                    v217 = 1;
                }
                while (!v217);
                v213 = 0;
                v261 = v175;
                v198 = 1;
                if (v175 == v260[7])
                  goto LABEL_316;
              }
              else
              {
                v198 = 2 * (++v213 != 2);
                v263 = __PAIR64__(v198, v213);
                if (v175 == v260[7])
                  goto LABEL_316;
              }
              if (*(_QWORD *)(v175 + 8 * (int)((v198 ^ 3) - v213)) >= v175)
                goto LABEL_316;
            }
          }
          if (v199 == 3)
          {
            v200 = v263;
            v175 = v261;
            while (1)
            {
              while (v200 == 2)
              {
                v263 = 0x100000000;
                do
                {
                  while (1)
                  {
                    v203 = *(_QWORD *)(v175 + 72);
                    v175 += 72;
                    v202 = v203;
                    v204 = v203 & 3;
                    if (v204 != 1)
                      break;
                    v175 = v202 & 0xFFFFFFFFFFFFFFFCLL;
                  }
                  if (v204)
                    v205 = v204 == 3;
                  else
                    v205 = 1;
                }
                while (!v205);
                v200 = 0;
                v261 = v175;
                v198 = 1;
                v206 = v260[7];
                if (v175 != v206)
                  goto LABEL_268;
LABEL_290:
                v200 = 0;
                v263 = 0x100000000;
                v198 = 1;
                if (v175 == v206)
                  goto LABEL_316;
              }
              if (v198 == 3)
              {
                v198 = v200 + 2;
                v263 = __PAIR64__(v198, ++v200);
                v206 = v260[7];
                if (v175 == v206)
                  goto LABEL_290;
              }
              else
              {
                HIDWORD(v263) = ++v198;
                v206 = v260[7];
                if (v175 == v206)
                  goto LABEL_290;
              }
LABEL_268:
              v262 = v175;
              v207 = *(_QWORD *)(v175 + 32 + 8 * v200);
              v208 = *(_QWORD *)(v175 + 32 + 8 * v198);
              v209 = (_QWORD *)v175;
              do
              {
                v211 = v209[4];
                if (v207 == v211)
                {
                  v212 = 0;
                  if (v208 == v211)
                    goto LABEL_269;
                }
                else if (v207 == v209[5])
                {
                  v212 = 1;
                  if (v208 == v211)
                    goto LABEL_269;
                }
                else
                {
                  if (v207 == v209[6])
                    v212 = 2;
                  else
                    v212 = 3;
                  if (v208 == v211)
                  {
LABEL_269:
                    v210 = 0;
                    goto LABEL_270;
                  }
                }
                if (v208 == v209[5])
                {
                  v210 = 1;
                }
                else if (v208 == v209[6])
                {
                  v210 = 2;
                }
                else
                {
                  v210 = 3;
                }
LABEL_270:
                v209 = (_QWORD *)v209[byte_239EC6C50[4 * v212 + v210]];
              }
              while (v175 < (unint64_t)v209);
              if (v209 == (_QWORD *)v175 || v175 == v206)
                goto LABEL_316;
            }
          }
          v175 = v261;
          if (v260 != __p)
          {
LABEL_317:
            v222 = v263;
            goto LABEL_322;
          }
        }
        v222 = v263;
        if ((_BYTE *)v175 == v256 && v263 == (unint64_t)v258 && v198 == v259)
        {
LABEL_217:
          v176 = v263;
          goto LABEL_218;
        }
LABEL_322:
        v262 = v175;
        v223 = *(_QWORD *)(v175 + 8 * v222 + 32);
        v224 = *(_QWORD *)(v264 + 200);
        if (v223 != v224 && *(_QWORD *)(v175 + 8 * v198 + 32) != v224)
          goto LABEL_217;
      }
    }
    v179 = (char *)*v6;
    v180 = (uint64_t)&v177[-*v6];
    v181 = v180 >> 4;
    v182 = (v180 >> 4) + 1;
    if (v182 >> 60)
      sub_2394189F8();
    v183 = v178 - (_QWORD)v179;
    if (v183 >> 3 > v182)
      v182 = v183 >> 3;
    if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF0)
      v184 = 0xFFFFFFFFFFFFFFFLL;
    else
      v184 = v182;
    if (v184 >> 60)
      sub_239418A80();
    v185 = (char *)operator new(16 * v184);
    v186 = (unint64_t *)&v185[16 * v181];
    *v186 = v175;
    v186[1] = v176;
    if (v177 == v179)
    {
      v6 = a2;
      v5 = a3;
      v177 = (char *)(v186 + 2);
      *a2 = v186;
      a2[1] = v186 + 2;
      a2[2] = (unint64_t *)&v185[16 * v184];
      if (!v179)
        goto LABEL_248;
      goto LABEL_247;
    }
    v187 = v177 - v179 - 16;
    if (v187 < 0x3F0)
      goto LABEL_244;
    v188 = v187 & 0xFFFFFFFFFFFFFFF0;
    v189 = &v185[v180 - 8];
    v190 = (unint64_t)(v177 - 16);
    v191 = (unint64_t)(v177 - 8);
    v192 = &v185[v180 - 16 - (v187 & 0xFFFFFFFFFFFFFFF0)] > &v185[v180 - 16]
        || &v189[-(v187 & 0xFFFFFFFFFFFFFFF0)] > v189;
    v193 = v192 || (unint64_t)&v177[-(v187 & 0xFFFFFFFFFFFFFFF0) - 16] > v190;
    if (v193 || (unint64_t)&v177[-(v187 & 0xFFFFFFFFFFFFFFF0) - 8] > v191)
      goto LABEL_244;
    v225 = v187 >> 4;
    v226 = v180 - v188;
    v227 = &v185[v226 - 16];
    v228 = &v185[v226 - 8];
    v229 = v190 - 16 * v225;
    v230 = v191 - 16 * v225;
    v231 = (unint64_t)v227 >= v191 || v229 >= (unint64_t)v189;
    v232 = !v231;
    v233 = v227 >= v177 || v230 >= (unint64_t)v189;
    v234 = !v233;
    v235 = (unint64_t)v228 >= v191 || v229 >= (unint64_t)v186;
    v236 = !v235;
    v237 = v228 >= v177 || v230 >= (unint64_t)v186;
    v238 = !v237;
    if (v228 >= v189 || v227 >= (char *)v186)
    {
      v6 = a2;
      v5 = a3;
      if (v232 || v234 || v236 || v238)
      {
        v195 = v177;
        v196 = (unint64_t *)&v185[16 * v181];
      }
      else
      {
        v240 = v225 + 1;
        v241 = (v225 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v195 = &v177[-16 * v241];
        v196 = &v186[-2 * v241];
        v242 = (const double *)(v177 - 32);
        v243 = (double *)(v186 - 4);
        v244 = v241;
        do
        {
          v277 = vld2q_f64(v242);
          v245 = v242 - 4;
          v284 = vld2q_f64(v245);
          vst2q_f64(v243, v277);
          v246 = v243 - 4;
          vst2q_f64(v246, v284);
          v243 -= 8;
          v242 -= 8;
          v244 -= 4;
        }
        while (v244);
        if (v240 == v241)
        {
LABEL_246:
          v177 = (char *)(v186 + 2);
          *v6 = v196;
          v6[1] = v186 + 2;
          v6[2] = &v185[16 * v184];
          if (!v179)
          {
LABEL_248:
            v7 = a1;
            goto LABEL_249;
          }
LABEL_247:
          operator delete(v179);
          goto LABEL_248;
        }
      }
    }
    else
    {
LABEL_244:
      v195 = v177;
      v196 = (unint64_t *)&v185[16 * v181];
      v6 = a2;
      v5 = a3;
    }
    do
    {
      v197 = *((_QWORD *)v195 - 2);
      v195 -= 16;
      *(v196 - 2) = v197;
      v196 -= 2;
      v196[1] = *((_QWORD *)v195 + 1);
    }
    while (v195 != v179);
    goto LABEL_246;
  }
  v8 = (char *)*v6;
  if (v177 != (char *)*v6)
  {
LABEL_6:
    v252 = 0;
    v9 = 0;
    while (1)
    {
      v253 = v9;
      v10 = &v8[16 * v9];
      v11 = *(_QWORD *)v10;
      v12 = *((_QWORD *)v10 + 1);
      v270[0] = *(_QWORD *)v10;
      v270[1] = v12;
      if ((int)sub_2394E1C40(v7, (unsigned int *)v270, 0) >= 3)
        break;
LABEL_8:
      v9 = v253 + 1;
      v8 = (char *)*v6;
      if (v253 + 1 >= (unint64_t)((uint64_t)(v6[1] - *v6) >> 4))
        goto LABEL_367;
    }
    while (1)
    {
      __p = 0;
      v256 = 0;
      v257 = 0;
      v269[0] = v11;
      v269[1] = v12;
      sub_2394E1C40(v7, (unsigned int *)v269, &__p);
      if ((v5 & 1) != 0)
      {
        v14 = (char *)__p + ((uint64_t)((rand() % (unint64_t)((v256 - (_BYTE *)__p) >> 5)) << 32) >> 27);
        v15 = *((_DWORD *)v14 + 6);
        if (v15 >= 1)
          break;
        goto LABEL_42;
      }
      v16 = 126 - 2 * __clz((v256 - (_BYTE *)__p) >> 5);
      v17 = v256 == __p ? 0 : v16;
      sub_2394E2204((uint64_t)__p, (unint64_t)v256, v17, 1, v13);
      v14 = (char *)__p;
      v15 = *((_DWORD *)__p + 6);
      if (v15 >= 1)
        break;
LABEL_42:
      v268[0] = v11;
      v268[1] = v12;
      v27 = sub_2394E1C40(v7, (unsigned int *)v268, 0);
      if (__p)
      {
        v256 = __p;
        operator delete(__p);
      }
      if (v27 <= 2)
      {
        ++v252;
        v28 = *v6 + 16 * v253;
        v29 = *(_QWORD **)v28;
        v30 = *(_QWORD *)v28 + 32;
        v31 = *(_QWORD *)(v30 + 8 * *(unsigned int *)(v28 + 8));
        v32 = *(_QWORD *)(v30 + 8 * *(unsigned int *)(v28 + 12));
        v254 = *(_QWORD **)v28;
        while (1)
        {
          v34 = *(char **)v266;
          if (*(_QWORD *)v266 < (unint64_t)v267)
          {
            **(_QWORD **)v266 = v29;
            *((_QWORD *)v34 + 1) = 0x100000000;
            v35 = v34 + 16;
            goto LABEL_71;
          }
          v36 = (char *)v265;
          v37 = *(_QWORD *)v266 - (_QWORD)v265;
          v38 = (uint64_t)(*(_QWORD *)v266 - (_QWORD)v265) >> 4;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 60)
            goto LABEL_373;
          v40 = v267 - (_BYTE *)v265;
          if ((v267 - (_BYTE *)v265) >> 3 > v39)
            v39 = v40 >> 3;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
            v41 = 0xFFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41 >> 60)
            goto LABEL_372;
          v42 = (char *)operator new(16 * v41);
          v43 = &v42[16 * v38];
          *(_QWORD *)v43 = v29;
          *((_QWORD *)v43 + 1) = 0x100000000;
          if (v34 == v36)
          {
            v45 = &v42[16 * v38];
            goto LABEL_69;
          }
          v44 = v34 - v36 - 16;
          if (v44 < 0xB0)
            break;
          v46 = v44 >> 4;
          v47 = &v42[v37 - (v44 & 0xFFFFFFFFFFFFFFF0) - 16] >= v34 || &v34[-16 * (v44 >> 4) - 16] >= v43;
          v45 = &v42[16 * v38];
          if (!v47)
            goto LABEL_68;
          v48 = v46 + 1;
          v49 = 16 * (v48 & 0x1FFFFFFFFFFFFFFCLL);
          v50 = &v34[-v49];
          v45 = &v43[-v49];
          v51 = (const double *)(v34 - 32);
          v52 = (double *)(v43 - 32);
          v53 = v48 & 0x1FFFFFFFFFFFFFFCLL;
          do
          {
            v271 = vld2q_f64(v51);
            v54 = v51 - 4;
            v278 = vld2q_f64(v54);
            vst2q_f64(v52, v271);
            v55 = v52 - 4;
            vst2q_f64(v55, v278);
            v52 -= 8;
            v51 -= 8;
            v53 -= 4;
          }
          while (v53);
          v34 = v50;
          if (v48 != (v48 & 0x1FFFFFFFFFFFFFFCLL))
            goto LABEL_68;
LABEL_69:
          v35 = v43 + 16;
          v265 = v45;
          *(_QWORD *)v266 = v43 + 16;
          v267 = &v42[16 * v41];
          if (v36)
            operator delete(v36);
LABEL_71:
          *(_QWORD *)v266 = v35;
          if (v35 < v267)
          {
            *(_QWORD *)v35 = v29;
            *((_QWORD *)v35 + 1) = 0x200000000;
            v57 = v35 + 16;
            goto LABEL_95;
          }
          v58 = (char *)v265;
          v59 = v35 - (_BYTE *)v265;
          v60 = (v35 - (_BYTE *)v265) >> 4;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60)
            goto LABEL_373;
          v62 = v267 - (_BYTE *)v265;
          if ((v267 - (_BYTE *)v265) >> 3 > v61)
            v61 = v62 >> 3;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
            v63 = 0xFFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63 >> 60)
            goto LABEL_372;
          v64 = (char *)operator new(16 * v63);
          v65 = &v64[16 * v60];
          *(_QWORD *)v65 = v29;
          *((_QWORD *)v65 + 1) = 0x200000000;
          v66 = v35 - v58;
          if (v35 != v58)
          {
            v67 = v66 - 16;
            if ((unint64_t)(v66 - 16) < 0xB0
              || ((v68 = v67 >> 4, &v64[v59 - (v67 & 0xFFFFFFFFFFFFFFF0) - 16] < v35)
                ? (v69 = &v35[-16 * (v67 >> 4) - 16] >= v65)
                : (v69 = 1),
                  !v69))
            {
              v72 = v35;
              v73 = &v64[16 * v60];
              goto LABEL_92;
            }
            v70 = v68 + 1;
            v71 = (v68 + 1) & 0x1FFFFFFFFFFFFFFCLL;
            v72 = &v35[-16 * v71];
            v73 = &v65[-16 * v71];
            v74 = (const double *)(v35 - 32);
            v75 = (double *)(v65 - 32);
            v76 = v71;
            do
            {
              v272 = vld2q_f64(v74);
              v77 = v74 - 4;
              v279 = vld2q_f64(v77);
              vst2q_f64(v75, v272);
              v78 = v75 - 4;
              vst2q_f64(v78, v279);
              v75 -= 8;
              v74 -= 8;
              v76 -= 4;
            }
            while (v76);
            if (v70 != v71)
            {
              do
              {
LABEL_92:
                v79 = *((_QWORD *)v72 - 2);
                v72 -= 16;
                *((_QWORD *)v73 - 2) = v79;
                v73 -= 16;
                *((_QWORD *)v73 + 1) = *((_QWORD *)v72 + 1);
              }
              while (v72 != v58);
            }
            v57 = v65 + 16;
            v265 = v73;
            *(_QWORD *)v266 = v65 + 16;
            v267 = &v64[16 * v63];
            if (!v58)
              goto LABEL_95;
LABEL_94:
            operator delete(v58);
            goto LABEL_95;
          }
          v57 = v65 + 16;
          v265 = &v64[16 * v60];
          *(_QWORD *)v266 = v65 + 16;
          v267 = &v64[16 * v63];
          if (v58)
            goto LABEL_94;
LABEL_95:
          *(_QWORD *)v266 = v57;
          if (v57 < v267)
          {
            *(_QWORD *)v57 = v29;
            *((_QWORD *)v57 + 1) = 0x300000000;
            v80 = v57 + 16;
            goto LABEL_119;
          }
          v81 = (char *)v265;
          v82 = v57 - (_BYTE *)v265;
          v83 = (v57 - (_BYTE *)v265) >> 4;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 60)
            goto LABEL_373;
          v85 = v267 - (_BYTE *)v265;
          if ((v267 - (_BYTE *)v265) >> 3 > v84)
            v84 = v85 >> 3;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
            v86 = 0xFFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86 >> 60)
            goto LABEL_372;
          v87 = (char *)operator new(16 * v86);
          v88 = &v87[16 * v83];
          *(_QWORD *)v88 = v29;
          *((_QWORD *)v88 + 1) = 0x300000000;
          v89 = v57 - v81;
          if (v57 != v81)
          {
            v90 = v89 - 16;
            if ((unint64_t)(v89 - 16) < 0xB0
              || ((v91 = v90 >> 4, &v87[v82 - (v90 & 0xFFFFFFFFFFFFFFF0) - 16] < v57)
                ? (v92 = &v57[-16 * (v90 >> 4) - 16] >= v88)
                : (v92 = 1),
                  !v92))
            {
              v95 = v57;
              v96 = &v87[16 * v83];
              goto LABEL_116;
            }
            v93 = v91 + 1;
            v94 = (v91 + 1) & 0x1FFFFFFFFFFFFFFCLL;
            v95 = &v57[-16 * v94];
            v96 = &v88[-16 * v94];
            v97 = (const double *)(v57 - 32);
            v98 = (double *)(v88 - 32);
            v99 = v94;
            do
            {
              v273 = vld2q_f64(v97);
              v100 = v97 - 4;
              v280 = vld2q_f64(v100);
              vst2q_f64(v98, v273);
              v101 = v98 - 4;
              vst2q_f64(v101, v280);
              v98 -= 8;
              v97 -= 8;
              v99 -= 4;
            }
            while (v99);
            if (v93 != v94)
            {
              do
              {
LABEL_116:
                v102 = *((_QWORD *)v95 - 2);
                v95 -= 16;
                *((_QWORD *)v96 - 2) = v102;
                v96 -= 16;
                *((_QWORD *)v96 + 1) = *((_QWORD *)v95 + 1);
              }
              while (v95 != v81);
            }
            v80 = v88 + 16;
            v265 = v96;
            *(_QWORD *)v266 = v88 + 16;
            v267 = &v87[16 * v86];
            if (!v81)
              goto LABEL_119;
LABEL_118:
            operator delete(v81);
            goto LABEL_119;
          }
          v80 = v88 + 16;
          v265 = &v87[16 * v83];
          *(_QWORD *)v266 = v88 + 16;
          v267 = &v87[16 * v86];
          if (v81)
            goto LABEL_118;
LABEL_119:
          *(_QWORD *)v266 = v80;
          if (v80 < v267)
          {
            *(_QWORD *)v80 = v29;
            *((_QWORD *)v80 + 1) = 0x200000001;
            v103 = v80 + 16;
            goto LABEL_143;
          }
          v104 = (char *)v265;
          v105 = v80 - (_BYTE *)v265;
          v106 = (v80 - (_BYTE *)v265) >> 4;
          v107 = v106 + 1;
          if ((unint64_t)(v106 + 1) >> 60)
            goto LABEL_373;
          v108 = v267 - (_BYTE *)v265;
          if ((v267 - (_BYTE *)v265) >> 3 > v107)
            v107 = v108 >> 3;
          if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
            v109 = 0xFFFFFFFFFFFFFFFLL;
          else
            v109 = v107;
          if (v109 >> 60)
            goto LABEL_372;
          v110 = (char *)operator new(16 * v109);
          v111 = &v110[16 * v106];
          *(_QWORD *)v111 = v29;
          *((_QWORD *)v111 + 1) = 0x200000001;
          v112 = v80 - v104;
          if (v80 != v104)
          {
            v113 = v112 - 16;
            if ((unint64_t)(v112 - 16) < 0xB0
              || ((v114 = v113 >> 4, &v110[v105 - (v113 & 0xFFFFFFFFFFFFFFF0) - 16] < v80)
                ? (v115 = &v80[-16 * (v113 >> 4) - 16] >= v111)
                : (v115 = 1),
                  !v115))
            {
              v118 = v80;
              v119 = &v110[16 * v106];
              goto LABEL_140;
            }
            v116 = v114 + 1;
            v117 = (v114 + 1) & 0x1FFFFFFFFFFFFFFCLL;
            v118 = &v80[-16 * v117];
            v119 = &v111[-16 * v117];
            v120 = (const double *)(v80 - 32);
            v121 = (double *)(v111 - 32);
            v122 = v117;
            do
            {
              v274 = vld2q_f64(v120);
              v123 = v120 - 4;
              v281 = vld2q_f64(v123);
              vst2q_f64(v121, v274);
              v124 = v121 - 4;
              vst2q_f64(v124, v281);
              v121 -= 8;
              v120 -= 8;
              v122 -= 4;
            }
            while (v122);
            if (v116 != v117)
            {
              do
              {
LABEL_140:
                v125 = *((_QWORD *)v118 - 2);
                v118 -= 16;
                *((_QWORD *)v119 - 2) = v125;
                v119 -= 16;
                *((_QWORD *)v119 + 1) = *((_QWORD *)v118 + 1);
              }
              while (v118 != v104);
            }
            v103 = v111 + 16;
            v265 = v119;
            *(_QWORD *)v266 = v111 + 16;
            v267 = &v110[16 * v109];
            if (!v104)
              goto LABEL_143;
LABEL_142:
            operator delete(v104);
            goto LABEL_143;
          }
          v103 = v111 + 16;
          v265 = &v110[16 * v106];
          *(_QWORD *)v266 = v111 + 16;
          v267 = &v110[16 * v109];
          if (v104)
            goto LABEL_142;
LABEL_143:
          *(_QWORD *)v266 = v103;
          if (v103 < v267)
          {
            *(_QWORD *)v103 = v29;
            *((_QWORD *)v103 + 1) = 0x300000001;
            v126 = v103 + 16;
            goto LABEL_167;
          }
          v127 = (char *)v265;
          v128 = v103 - (_BYTE *)v265;
          v129 = (v103 - (_BYTE *)v265) >> 4;
          v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 60)
            goto LABEL_373;
          v131 = v267 - (_BYTE *)v265;
          if ((v267 - (_BYTE *)v265) >> 3 > v130)
            v130 = v131 >> 3;
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0)
            v132 = 0xFFFFFFFFFFFFFFFLL;
          else
            v132 = v130;
          if (v132 >> 60)
            goto LABEL_372;
          v133 = (char *)operator new(16 * v132);
          v134 = &v133[16 * v129];
          *(_QWORD *)v134 = v29;
          *((_QWORD *)v134 + 1) = 0x300000001;
          v135 = v103 - v127;
          if (v103 != v127)
          {
            v136 = v135 - 16;
            if ((unint64_t)(v135 - 16) < 0xB0
              || ((v137 = v136 >> 4, &v133[v128 - (v136 & 0xFFFFFFFFFFFFFFF0) - 16] < v103)
                ? (v138 = &v103[-16 * (v136 >> 4) - 16] >= v134)
                : (v138 = 1),
                  !v138))
            {
              v141 = v103;
              v142 = &v133[16 * v129];
              goto LABEL_164;
            }
            v139 = v137 + 1;
            v140 = (v137 + 1) & 0x1FFFFFFFFFFFFFFCLL;
            v141 = &v103[-16 * v140];
            v142 = &v134[-16 * v140];
            v143 = (const double *)(v103 - 32);
            v144 = (double *)(v134 - 32);
            v145 = v140;
            do
            {
              v275 = vld2q_f64(v143);
              v146 = v143 - 4;
              v282 = vld2q_f64(v146);
              vst2q_f64(v144, v275);
              v147 = v144 - 4;
              vst2q_f64(v147, v282);
              v144 -= 8;
              v143 -= 8;
              v145 -= 4;
            }
            while (v145);
            if (v139 != v140)
            {
              do
              {
LABEL_164:
                v148 = *((_QWORD *)v141 - 2);
                v141 -= 16;
                *((_QWORD *)v142 - 2) = v148;
                v142 -= 16;
                *((_QWORD *)v142 + 1) = *((_QWORD *)v141 + 1);
              }
              while (v141 != v127);
            }
            v126 = v134 + 16;
            v265 = v142;
            *(_QWORD *)v266 = v134 + 16;
            v267 = &v133[16 * v132];
            if (!v127)
              goto LABEL_167;
LABEL_166:
            operator delete(v127);
            goto LABEL_167;
          }
          v126 = v134 + 16;
          v265 = &v133[16 * v129];
          *(_QWORD *)v266 = v134 + 16;
          v267 = &v133[16 * v132];
          if (v127)
            goto LABEL_166;
LABEL_167:
          *(_QWORD *)v266 = v126;
          if (v126 < v267)
          {
            *(_QWORD *)v126 = v29;
            *((_QWORD *)v126 + 1) = 0x300000002;
            v149 = v126 + 16;
            goto LABEL_191;
          }
          v150 = (char *)v265;
          v151 = v126 - (_BYTE *)v265;
          v152 = (v126 - (_BYTE *)v265) >> 4;
          v153 = v152 + 1;
          if ((unint64_t)(v152 + 1) >> 60)
LABEL_373:
            sub_2394189F8();
          v154 = v267 - (_BYTE *)v265;
          if ((v267 - (_BYTE *)v265) >> 3 > v153)
            v153 = v154 >> 3;
          if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF0)
            v155 = 0xFFFFFFFFFFFFFFFLL;
          else
            v155 = v153;
          if (v155 >> 60)
LABEL_372:
            sub_239418A80();
          v156 = (char *)operator new(16 * v155);
          v157 = &v156[16 * v152];
          *(_QWORD *)v157 = v29;
          *((_QWORD *)v157 + 1) = 0x300000002;
          v158 = v126 - v150;
          if (v126 != v150)
          {
            v159 = v158 - 16;
            if ((unint64_t)(v158 - 16) < 0xB0
              || ((v160 = v159 >> 4, &v156[v151 - (v159 & 0xFFFFFFFFFFFFFFF0) - 16] < v126)
                ? (v161 = &v126[-16 * (v159 >> 4) - 16] >= v157)
                : (v161 = 1),
                  !v161))
            {
              v164 = v126;
              v165 = &v156[16 * v152];
              goto LABEL_188;
            }
            v162 = v160 + 1;
            v163 = (v160 + 1) & 0x1FFFFFFFFFFFFFFCLL;
            v164 = &v126[-16 * v163];
            v165 = &v157[-16 * v163];
            v166 = (const double *)(v126 - 32);
            v167 = (double *)(v157 - 32);
            v168 = v163;
            do
            {
              v276 = vld2q_f64(v166);
              v169 = v166 - 4;
              v283 = vld2q_f64(v169);
              vst2q_f64(v167, v276);
              v170 = v167 - 4;
              vst2q_f64(v170, v283);
              v167 -= 8;
              v166 -= 8;
              v168 -= 4;
            }
            while (v168);
            if (v162 != v163)
            {
              do
              {
LABEL_188:
                v171 = *((_QWORD *)v164 - 2);
                v164 -= 16;
                *((_QWORD *)v165 - 2) = v171;
                v165 -= 16;
                *((_QWORD *)v165 + 1) = *((_QWORD *)v164 + 1);
              }
              while (v164 != v150);
            }
            v149 = v157 + 16;
            v265 = v165;
            *(_QWORD *)v266 = v157 + 16;
            v267 = &v156[16 * v155];
            if (!v150)
              goto LABEL_191;
LABEL_190:
            operator delete(v150);
            goto LABEL_191;
          }
          v149 = v157 + 16;
          v265 = &v156[16 * v152];
          *(_QWORD *)v266 = v157 + 16;
          v267 = &v156[16 * v155];
          if (v150)
            goto LABEL_190;
LABEL_191:
          *(_QWORD *)v266 = v149;
          v172 = v29[4];
          if (v31 == v172)
          {
            v173 = 0;
            if (v32 != v172)
              goto LABEL_201;
          }
          else if (v31 == v29[5])
          {
            v173 = 1;
            if (v32 != v172)
              goto LABEL_201;
          }
          else
          {
            if (v31 == v29[6])
              v173 = 2;
            else
              v173 = 3;
            if (v32 != v172)
            {
LABEL_201:
              if (v32 == v29[5])
              {
                v33 = 1;
              }
              else if (v32 == v29[6])
              {
                v33 = 2;
              }
              else
              {
                v33 = 3;
              }
              goto LABEL_46;
            }
          }
          v33 = 0;
LABEL_46:
          v29 = (_QWORD *)v29[byte_239EC6C50[4 * v173 + v33]];
          if (v29 == v254)
          {
            v6 = a2;
            v5 = a3;
            v7 = a1;
            goto LABEL_8;
          }
        }
        v45 = &v42[16 * v38];
        do
        {
LABEL_68:
          v56 = *((_QWORD *)v34 - 2);
          v34 -= 16;
          *((_QWORD *)v45 - 2) = v56;
          v45 -= 16;
          *((_QWORD *)v45 + 1) = *((_QWORD *)v34 + 1);
        }
        while (v34 != v36);
        goto LABEL_69;
      }
    }
    v18 = *((_QWORD *)v14 + 2);
    v19 = *v7;
    v20 = *(_DWORD *)(*v7 + 4 * *(int *)(v18 + 68));
    v21 = *(_QWORD *)v14;
    v22 = *((_QWORD *)v14 + 1);
    while (1)
    {
      if (v20 == 1)
      {
        v24 = 0;
      }
      else
      {
        if (v20)
          goto LABEL_27;
        v24 = 1;
      }
      *(_DWORD *)(v19 + 4 * *(int *)(v18 + 68)) = v24;
LABEL_27:
      v25 = *(_QWORD *)(v18 + 32);
      if (v21 == v25)
      {
        v26 = 0;
        if (v22 != v25)
          goto LABEL_37;
      }
      else if (v21 == *(_QWORD *)(v18 + 40))
      {
        v26 = 1;
        if (v22 != v25)
          goto LABEL_37;
      }
      else
      {
        if (v21 == *(_QWORD *)(v18 + 48))
          v26 = 2;
        else
          v26 = 3;
        if (v22 != v25)
        {
LABEL_37:
          if (v22 == *(_QWORD *)(v18 + 40))
          {
            v23 = 1;
          }
          else if (v22 == *(_QWORD *)(v18 + 48))
          {
            v23 = 2;
          }
          else
          {
            v23 = 3;
          }
          goto LABEL_21;
        }
      }
      v23 = 0;
LABEL_21:
      v18 = *(_QWORD *)(v18 + 8 * byte_239EC6C50[4 * v26 + v23]);
      if (!--v15)
        goto LABEL_42;
    }
  }
  v252 = 0;
LABEL_367:
  v6[1] = v8;
  v247 = v265;
  if (&v265 != v6)
  {
    sub_2394E3050((char **)v6, (unint64_t)v265, *(char **)v266, (uint64_t)(*(_QWORD *)v266 - (_QWORD)v265) >> 4);
    v247 = v265;
  }
  if (v247)
  {
    *(_QWORD *)v266 = v247;
    operator delete(v247);
  }
  return v252;
}

void sub_2394E154C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394E15BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  __int128 v19;
  uint64_t v20;

  v2 = result;
  v4 = (int *)(result + 8);
  if (*(int *)(result + 8) > 0)
  {
    v5 = *(_QWORD *)(result + 64);
    result = sub_2394E1964((uint64_t)&v18, v4);
    v6 = v18;
    v7 = v20;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 32) = v6;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0x100000000;
    v8 = v19;
    *(_OWORD *)(a2 + 40) = v19;
    v9 = v8;
    *(_QWORD *)(a2 + 56) = v7;
    *(_QWORD *)(a2 + 64) = v2;
    while (1)
    {
      if (v6 == v4)
      {
        v11 = *(unsigned int *)(a2 + 56);
        v10 = *(unsigned int *)(a2 + 60);
        if (v9 == *(_QWORD *)(a2 + 8) && v11 == *(_DWORD *)(a2 + 24) && v10 == *(_DWORD *)(a2 + 28))
          return result;
      }
      else
      {
        v11 = *(unsigned int *)(a2 + 56);
        v10 = *(unsigned int *)(a2 + 60);
      }
      v14 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 48) = v9;
      v15 = *(_QWORD *)(v9 + 8 * v11 + 32);
      v16 = *(_QWORD *)(v14 + 200);
      if (v15 != v16 && *(_QWORD *)(v9 + 8 * v10 + 32) != v16)
        return result;
      result = (uint64_t)sub_2394E16D4((int **)(a2 + 32));
      v4 = *(int **)a2;
      v6 = *(int **)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 40);
    }
  }
  v17 = *(_QWORD *)(result + 64);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0x100000000;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v17;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0x100000000;
  *(_QWORD *)(a2 + 64) = result;
  return result;
}

int **sub_2394E16D4(int **result)
{
  int *v1;
  int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v26;

  v1 = *result;
  v2 = **result;
  if (v2 == 1)
  {
    v17 = (unint64_t)result[1];
    do
    {
      while (1)
      {
        v18 = v17 + 72;
        result[1] = (int *)(v17 + 72);
        v19 = *(_QWORD *)(v17 + 72);
        if ((v19 & 3) != 1)
          break;
        v17 = v19 & 0xFFFFFFFFFFFFFFFCLL;
        result[1] = (int *)v17;
      }
      v20 = (v19 & 3) == 0 || (v19 & 3) == 3;
      v17 = v18;
    }
    while (!v20);
    return result;
  }
  if (v2 == 2)
  {
    v21 = *((_DWORD *)result + 6);
    while (1)
    {
      if (v21 == 2)
      {
        result[3] = (int *)0x100000000;
        v22 = (unint64_t)result[1];
        do
        {
          while (1)
          {
            v23 = v22;
            v22 += 72;
            result[1] = (int *)v22;
            v24 = *(_QWORD *)(v23 + 72);
            if ((v24 & 3) != 1)
              break;
            v22 = v24 & 0xFFFFFFFFFFFFFFFCLL;
            result[1] = (int *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          }
        }
        while ((v24 & 3) != 0 && (v24 & 3) != 3);
        v21 = 0;
        v26 = 1;
        if (v22 == *((_QWORD *)v1 + 7))
          return result;
      }
      else
      {
        v26 = 2 * (++v21 != 2);
        *((_DWORD *)result + 6) = v21;
        *((_DWORD *)result + 7) = v26;
        v22 = (unint64_t)result[1];
        if (v22 == *((_QWORD *)v1 + 7))
          return result;
      }
      if (*(_QWORD *)(v22 + 8 * (3 - v21 - v26)) >= v22)
        return result;
    }
  }
  if (v2 != 3)
    return result;
  v3 = *((_DWORD *)result + 6);
  do
  {
    if (v3 == 2)
    {
      result[3] = (int *)0x100000000;
      v4 = (unint64_t)result[1];
      do
      {
        while (1)
        {
          v5 = v4;
          v4 += 72;
          result[1] = (int *)v4;
          v6 = *(_QWORD *)(v5 + 72);
          if ((v6 & 3) != 1)
            break;
          v4 = v6 & 0xFFFFFFFFFFFFFFFCLL;
          result[1] = (int *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        }
      }
      while ((v6 & 3) != 0 && (v6 & 3) != 3);
      v3 = 0;
      v8 = 1;
      if (v4 == *((_QWORD *)v1 + 7))
      {
LABEL_39:
        v3 = 0;
        result[3] = (int *)0x100000000;
        v15 = 1;
        if (v4 == *((_QWORD *)v1 + 7))
          return result;
        continue;
      }
    }
    else
    {
      v16 = *((_DWORD *)result + 7);
      if (v16 == 3)
      {
        v8 = v3 + 2;
        *((_DWORD *)result + 6) = ++v3;
        *((_DWORD *)result + 7) = v8;
        v4 = (unint64_t)result[1];
        if (v4 == *((_QWORD *)v1 + 7))
          goto LABEL_39;
      }
      else
      {
        v8 = v16 + 1;
        *((_DWORD *)result + 7) = v16 + 1;
        v4 = (unint64_t)result[1];
        if (v4 == *((_QWORD *)v1 + 7))
          goto LABEL_39;
      }
    }
    result[2] = (int *)v4;
    v9 = *(_QWORD *)(v4 + 32 + 8 * v3);
    v10 = *(_QWORD *)(v4 + 32 + 8 * v8);
    v11 = (_QWORD *)v4;
    do
    {
      v13 = v11[4];
      if (v9 == v13)
      {
        v14 = 0;
        if (v10 == v13)
          goto LABEL_16;
      }
      else if (v9 == v11[5])
      {
        v14 = 1;
        if (v10 == v13)
          goto LABEL_16;
      }
      else
      {
        if (v9 == v11[6])
          v14 = 2;
        else
          v14 = 3;
        if (v10 == v13)
        {
LABEL_16:
          v12 = 0;
          goto LABEL_17;
        }
      }
      if (v10 == v11[5])
      {
        v12 = 1;
      }
      else if (v10 == v11[6])
      {
        v12 = 2;
      }
      else
      {
        v12 = 3;
      }
LABEL_17:
      v11 = (_QWORD *)v11[byte_239EC6C50[4 * v14 + v12]];
    }
    while (v4 < (unint64_t)v11);
    v15 = v11 != (_QWORD *)v4;
    if (v4 == *((_QWORD *)v1 + 7))
      return result;
  }
  while (v15);
  return result;
}

uint64_t sub_2394E1964(uint64_t result, int *a2)
{
  unint64_t *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;

  *(_QWORD *)(result + 8) = 0;
  v2 = (unint64_t *)(result + 8);
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0x100000000;
  v3 = *a2;
  if (*a2 != 3)
  {
    if (v3 == 2)
    {
      v27 = *((_QWORD *)a2 + 6);
      if (v27)
      {
        v29 = *(_QWORD *)(v27 + 72);
        v28 = v27 + 72;
        if ((v29 & 3) == 2)
        {
          do
          {
            while (1)
            {
              v31 = *(_QWORD *)(v28 + 72);
              v28 += 72;
              v30 = v31;
              v32 = v31 & 3;
              if (v32 != 1)
                break;
              v28 = v30 & 0xFFFFFFFFFFFFFFFCLL;
            }
            if (v32)
              v33 = v32 == 3;
            else
              v33 = 1;
          }
          while (!v33);
        }
        *v2 = v28;
        if (*(_QWORD *)(v28 + 16) < v28)
        {
          v34 = 0;
          do
          {
            while (v34 != 2)
            {
              if (++v34 == 2)
                v35 = 0;
              else
                v35 = -2;
              *(_DWORD *)(result + 24) = v34;
              *(_DWORD *)(result + 28) = 2 * (v34 != 2);
              if (*(_QWORD *)(v28 + 8 * (v35 - v34 + 3)) >= v28)
                return result;
            }
            *(_QWORD *)(result + 24) = 0x100000000;
            do
            {
              while (1)
              {
                v36 = v28;
                v28 += 72;
                *v2 = v28;
                v37 = *(_QWORD *)(v36 + 72);
                if ((v37 & 3) != 1)
                  break;
                v28 = v37 & 0xFFFFFFFFFFFFFFFCLL;
                *v2 = v37 & 0xFFFFFFFFFFFFFFFCLL;
              }
            }
            while ((v37 & 3) != 0 && (v37 & 3) != 3);
            v34 = 0;
          }
          while (*(_QWORD *)(v28 + 16) < v28);
        }
      }
    }
    else
    {
      if (v3 == 1)
      {
        v4 = *((_QWORD *)a2 + 6);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 72);
          v4 += 72;
          if ((v5 & 3) == 2)
          {
            do
            {
              while (1)
              {
                v7 = *(_QWORD *)(v4 + 72);
                v4 += 72;
                v6 = v7;
                v8 = v7 & 3;
                if (v8 != 1)
                  break;
                v4 = v6 & 0xFFFFFFFFFFFFFFFCLL;
              }
              if (v8)
                v9 = v8 == 3;
              else
                v9 = 1;
            }
            while (!v9);
          }
        }
      }
      else
      {
        v4 = *((_QWORD *)a2 + 7);
      }
      *v2 = v4;
    }
    return result;
  }
  v10 = *((_QWORD *)a2 + 6);
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 72);
    v10 += 72;
    if ((v11 & 3) == 2)
    {
      do
      {
        while (1)
        {
          v13 = *(_QWORD *)(v10 + 72);
          v10 += 72;
          v12 = v13;
          v14 = v13 & 3;
          if (v14 != 1)
            break;
          v10 = v12 & 0xFFFFFFFFFFFFFFFCLL;
        }
        if (v14)
          v15 = v14 == 3;
        else
          v15 = 1;
      }
      while (!v15);
    }
  }
  v16 = 0;
  *v2 = v10;
  v17 = 1;
  while (2)
  {
    *(_QWORD *)(result + 16) = v10;
    v18 = *(_QWORD *)(v10 + 32 + 8 * v16);
    v19 = *(_QWORD *)(v10 + 32 + 8 * v17);
    v20 = (_QWORD *)v10;
    do
    {
      v22 = v20[4];
      if (v18 == v22)
      {
        v23 = 0;
        if (v19 == v22)
          goto LABEL_28;
      }
      else if (v18 == v20[5])
      {
        v23 = 1;
        if (v19 == v22)
          goto LABEL_28;
      }
      else
      {
        if (v18 == v20[6])
          v23 = 2;
        else
          v23 = 3;
        if (v19 == v22)
        {
LABEL_28:
          v21 = 0;
          goto LABEL_29;
        }
      }
      if (v19 == v20[5])
      {
        v21 = 1;
      }
      else if (v19 == v20[6])
      {
        v21 = 2;
      }
      else
      {
        v21 = 3;
      }
LABEL_29:
      v20 = (_QWORD *)v20[byte_239EC6C50[4 * v23 + v21]];
    }
    while (v10 < (unint64_t)v20);
    if (v20 != (_QWORD *)v10)
    {
      if (v16 == 2)
      {
        *(_QWORD *)(result + 24) = 0x100000000;
        do
        {
          while (1)
          {
            v24 = v10;
            v10 += 72;
            *v2 = v10;
            v25 = *(_QWORD *)(v24 + 72);
            if ((v25 & 3) != 1)
              break;
            v10 = v25 & 0xFFFFFFFFFFFFFFFCLL;
            *v2 = v25 & 0xFFFFFFFFFFFFFFFCLL;
          }
        }
        while ((v25 & 3) != 0 && (v25 & 3) != 3);
        v16 = 0;
        v17 = 1;
      }
      else
      {
        if (v17 == 3)
        {
          v17 = v16 + 2;
          *(_DWORD *)(result + 24) = ++v16;
        }
        else
        {
          ++v17;
        }
        *(_DWORD *)(result + 28) = v17;
      }
      continue;
    }
    return result;
  }
}

uint64_t sub_2394E1C40(uint64_t *a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)a2 + 32;
  v7 = *(_QWORD *)(v6 + 8 * a2[2]);
  v8 = *(_QWORD *)(v6 + 8 * a2[3]);
  v9 = *a1;
  v10 = *(_DWORD *)(*a1 + 4 * *(int *)(*(_QWORD *)a2 + 68));
  if (a3)
    a3[1] = *a3;
  v11 = *(_QWORD *)(v5 + 32);
  if (v7 == v11)
  {
    v12 = 0;
    if (v8 == v11)
      goto LABEL_13;
LABEL_8:
    if (v8 == *(_QWORD *)(v5 + 40))
    {
      v13 = 1;
    }
    else
    {
      v13 = 2;
      if (v8 != *(_QWORD *)(v5 + 48))
        v13 = 3;
    }
    goto LABEL_17;
  }
  if (v7 == *(_QWORD *)(v5 + 40))
  {
    v12 = 1;
    if (v8 == v11)
      goto LABEL_13;
    goto LABEL_8;
  }
  v12 = 2;
  if (v7 != *(_QWORD *)(v5 + 48))
    v12 = 3;
  if (v8 != v11)
    goto LABEL_8;
LABEL_13:
  v13 = 0;
LABEL_17:
  v14 = *(_QWORD *)(v5 + 8 * byte_239EC6C50[4 * v12 + v13]);
  if (v14 == v5)
    return 0;
  LOBYTE(v15) = 0;
  do
  {
    if ((v15 & 1) != 0)
    {
      v5 = v14;
      goto LABEL_48;
    }
    v17 = *(_DWORD *)(v9 + 4 * *(int *)(v14 + 68));
    v18 = v17 == v10 || (v17 | v10) < 0;
    v15 = !v18;
    if (v18)
    {
      v19 = *(_QWORD *)(v14 + 32);
      if (v7 == v19)
      {
        v20 = 0;
        if (v8 != v19)
          goto LABEL_41;
      }
      else
      {
        if (v7 != *(_QWORD *)(v14 + 40))
        {
          if (v7 == *(_QWORD *)(v14 + 48))
            v20 = 2;
          else
            v20 = 3;
          if (v8 == v19)
            goto LABEL_19;
LABEL_41:
          if (v8 == *(_QWORD *)(v14 + 40))
          {
            v16 = 1;
          }
          else if (v8 == *(_QWORD *)(v14 + 48))
          {
            v16 = 2;
          }
          else
          {
            v16 = 3;
          }
          goto LABEL_20;
        }
        v20 = 1;
        if (v8 != v19)
          goto LABEL_41;
      }
LABEL_19:
      v16 = 0;
LABEL_20:
      v14 = *(_QWORD *)(v14 + 8 * byte_239EC6C50[4 * v20 + v16]);
      v10 = v17;
    }
  }
  while (v14 != v5);
  if (!v15)
    return 0;
LABEL_48:
  if (a3)
  {
    v36 = v7;
    v37 = v8;
    v38 = v5;
    v39 = 1;
    sub_2394E20C0((uint64_t)a3, (uint64_t)&v36);
    v9 = *a1;
  }
  v21 = *(_QWORD *)(v5 + 32);
  if (v7 == v21)
  {
    v22 = 0;
    if (v8 != v21)
      goto LABEL_55;
    goto LABEL_83;
  }
  if (v7 == *(_QWORD *)(v5 + 40))
  {
    v22 = 1;
    if (v8 != v21)
      goto LABEL_55;
LABEL_83:
    v24 = *(_QWORD *)(v5 + 8 * byte_239EC6C50[4 * v22]);
    if (v24 != v5)
      goto LABEL_59;
    goto LABEL_84;
  }
  v22 = 2;
  if (v7 != *(_QWORD *)(v5 + 48))
    v22 = 3;
  if (v8 == v21)
    goto LABEL_83;
LABEL_55:
  if (v8 == *(_QWORD *)(v5 + 40))
  {
    v24 = *(_QWORD *)(v5 + 8 * byte_239EC6C50[4 * v22 + 1]);
    if (v24 != v5)
      goto LABEL_59;
  }
  else
  {
    v23 = 2;
    if (v8 != *(_QWORD *)(v5 + 48))
      v23 = 3;
    v24 = *(_QWORD *)(v5 + 8 * byte_239EC6C50[4 * v22 + v23]);
    if (v24 != v5)
    {
LABEL_59:
      v25 = *(_DWORD *)(v9 + 4 * *(int *)(v5 + 68));
      if (a3)
      {
        v26 = 1;
        while (1)
        {
          v28 = *(_DWORD *)(*a1 + 4 * *(int *)(v24 + 68));
          if (v28 == v25)
          {
            ++*(_DWORD *)(a3[1] - 8);
            v29 = *(_QWORD *)(v24 + 32);
            if (v7 == v29)
              goto LABEL_73;
          }
          else
          {
            if ((v28 | v25) < 0)
              goto LABEL_113;
            v26 = (v26 + 1);
            v36 = v7;
            v37 = v8;
            v38 = v24;
            v39 = 1;
            sub_2394E20C0((uint64_t)a3, (uint64_t)&v36);
            v29 = *(_QWORD *)(v24 + 32);
            if (v7 == v29)
            {
LABEL_73:
              v30 = 0;
              if (v8 != v29)
                goto LABEL_76;
              goto LABEL_61;
            }
          }
          if (v7 == *(_QWORD *)(v24 + 40))
          {
            v30 = 1;
            if (v8 != v29)
              goto LABEL_76;
          }
          else
          {
            if (v7 == *(_QWORD *)(v24 + 48))
              v30 = 2;
            else
              v30 = 3;
            if (v8 != v29)
            {
LABEL_76:
              if (v8 == *(_QWORD *)(v24 + 40))
              {
                v27 = 1;
              }
              else if (v8 == *(_QWORD *)(v24 + 48))
              {
                v27 = 2;
              }
              else
              {
                v27 = 3;
              }
              goto LABEL_62;
            }
          }
LABEL_61:
          v27 = 0;
LABEL_62:
          v24 = *(_QWORD *)(v24 + 8 * byte_239EC6C50[4 * v30 + v27]);
          v25 = v28;
          if (v24 == v5)
            goto LABEL_85;
        }
      }
      v26 = 1;
      while (2)
      {
        v33 = *(_DWORD *)(v9 + 4 * *(int *)(v24 + 68));
        if (v33 != v25)
        {
          if ((v33 | v25) < 0)
LABEL_113:
            sub_239EC00A0();
          v26 = (v26 + 1);
        }
        v34 = *(_QWORD *)(v24 + 32);
        if (v7 == v34)
        {
          v35 = 0;
          if (v8 == v34)
            goto LABEL_93;
        }
        else if (v7 == *(_QWORD *)(v24 + 40))
        {
          v35 = 1;
          if (v8 == v34)
            goto LABEL_93;
        }
        else
        {
          if (v7 == *(_QWORD *)(v24 + 48))
            v35 = 2;
          else
            v35 = 3;
          if (v8 == v34)
          {
LABEL_93:
            v32 = 0;
            goto LABEL_94;
          }
        }
        if (v8 == *(_QWORD *)(v24 + 40))
        {
          v32 = 1;
        }
        else if (v8 == *(_QWORD *)(v24 + 48))
        {
          v32 = 2;
        }
        else
        {
          v32 = 3;
        }
LABEL_94:
        v24 = *(_QWORD *)(v24 + 8 * byte_239EC6C50[4 * v35 + v32]);
        v25 = v33;
        if (v24 == v5)
          goto LABEL_85;
        continue;
      }
    }
  }
LABEL_84:
  v26 = 1;
LABEL_85:
  if (a3 && (_DWORD)v26 != ((a3[1] - *a3) >> 5))
    sub_239EC0070();
  return v26;
}

char *sub_2394E20C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD **)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 5;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 59)
      sub_2394189F8();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 4 > v9)
      v9 = v10 >> 4;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12 >> 59)
      sub_239418A80();
    v13 = 32 * v12;
    v14 = (char *)operator new(32 * v12);
    v15 = &v14[32 * v8];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    *((_QWORD *)v15 + 2) = *(_QWORD *)(a2 + 16);
    *((_DWORD *)v15 + 6) = *(_DWORD *)(a2 + 24);
    v6 = v15 + 32;
    if (v5 != v7)
    {
      v16 = 0;
      do
      {
        v17 = &v15[v16 * 8];
        *((_QWORD *)v17 - 4) = v5[v16 - 4];
        *((_QWORD *)v17 - 3) = v5[v16 - 3];
        *((_QWORD *)v17 - 2) = v5[v16 - 2];
        *((_DWORD *)v17 - 2) = v5[v16 - 1];
        v16 -= 4;
      }
      while (&v5[v16] != v7);
      v15 += v16 * 8;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = &v14[v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = *(_QWORD *)(a2 + 8);
    v5[2] = *(_QWORD *)(a2 + 16);
    *((_DWORD *)v5 + 6) = *(_DWORD *)(a2 + 24);
    v6 = (char *)(v5 + 4);
  }
  *(_QWORD *)(a1 + 8) = v6;
  return v6 - 32;
}

double sub_2394E2204(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  int v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  int v44;
  int v45;
  uint64_t v46;
  __n128 *v47;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  __n128 *v52;
  __n128 *v53;
  signed __int32 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  BOOL v60;
  uint64_t v61;
  __n128 *v62;
  signed __int32 v63;
  signed __int32 v64;
  __n128 *v65;
  signed __int32 v66;
  unint64_t v67;
  __n128 *v68;
  uint64_t v69;
  uint64_t v70;
  signed __int32 v71;
  signed __int32 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  __n128 *v92;
  int v93;
  uint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  int v97;

__n128 sub_2394E2A70(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, uint64_t a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result.n128_u64[0] = sub_2394E2F44((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (*(_DWORD *)(a5 + 24) < (signed __int32)a4[1].n128_u32[2])
  {
    v11 = a4[1].n128_u64[0];
    result = *a4;
    a4->n128_u64[0] = *(_QWORD *)a5;
    a4->n128_u64[1] = *(_QWORD *)(a5 + 8);
    a4[1].n128_u64[0] = *(_QWORD *)(a5 + 16);
    *(__n128 *)a5 = result;
    *(_QWORD *)(a5 + 16) = v11;
    LODWORD(v11) = a4[1].n128_u32[2];
    a4[1].n128_u32[2] = *(_DWORD *)(a5 + 24);
    *(_DWORD *)(a5 + 24) = v11;
    if ((signed __int32)a4[1].n128_u32[2] < (signed __int32)a3[1].n128_u32[2])
    {
      v12 = a3[1].n128_u64[0];
      result = *a3;
      a3->n128_u64[0] = a4->n128_u64[0];
      a3->n128_u64[1] = a4->n128_u64[1];
      a3[1].n128_u64[0] = a4[1].n128_u64[0];
      *a4 = result;
      a4[1].n128_u64[0] = v12;
      LODWORD(v12) = a3[1].n128_u32[2];
      a3[1].n128_u32[2] = a4[1].n128_u32[2];
      a4[1].n128_u32[2] = v12;
      if ((signed __int32)a3[1].n128_u32[2] < (signed __int32)a2[1].n128_u32[2])
      {
        v13 = a2[1].n128_u64[0];
        result = *a2;
        a2->n128_u64[0] = a3->n128_u64[0];
        a2->n128_u64[1] = a3->n128_u64[1];
        a2[1].n128_u64[0] = a3[1].n128_u64[0];
        *a3 = result;
        a3[1].n128_u64[0] = v13;
        LODWORD(v13) = a2[1].n128_u32[2];
        a2[1].n128_u32[2] = a3[1].n128_u32[2];
        a3[1].n128_u32[2] = v13;
        if ((signed __int32)a2[1].n128_u32[2] < (signed __int32)a1[1].n128_u32[2])
        {
          v14 = a1[1].n128_u64[0];
          result = *a1;
          a1->n128_u64[0] = a2->n128_u64[0];
          a1->n128_u64[1] = a2->n128_u64[1];
          a1[1].n128_u64[0] = a2[1].n128_u64[0];
          *a2 = result;
          a2[1].n128_u64[0] = v14;
          LODWORD(v14) = a1[1].n128_u32[2];
          a1[1].n128_u32[2] = a2[1].n128_u32[2];
          a2[1].n128_u32[2] = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_2394E2BD0(uint64_t *result, __int128 *a2, uint64_t *a3)
{
  int *v3;
  int v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v3 = (int *)a2 + 6;
  v4 = *((_DWORD *)a2 + 6);
  v5 = (int *)(result + 3);
  v6 = *((_DWORD *)a3 + 6);
  if (v4 < *((_DWORD *)result + 6))
  {
    v8 = *result;
    v7 = result[1];
    v9 = result[2];
    if (v6 >= v4)
    {
      *result = *(_QWORD *)a2;
      result[1] = *((_QWORD *)a2 + 1);
      result[2] = *((_QWORD *)a2 + 2);
      *(_QWORD *)a2 = v8;
      *((_QWORD *)a2 + 1) = v7;
      *((_QWORD *)a2 + 2) = v9;
      v14 = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v14;
      if (*((_DWORD *)a3 + 6) >= v14)
        return result;
      v15 = *((_QWORD *)a2 + 2);
      v16 = *a2;
      *(_QWORD *)a2 = *a3;
      *((_QWORD *)a2 + 1) = a3[1];
      *((_QWORD *)a2 + 2) = a3[2];
      *(_OWORD *)a3 = v16;
      a3[2] = v15;
      v5 = (int *)a2 + 6;
    }
    else
    {
      *result = *a3;
      result[1] = a3[1];
      result[2] = a3[2];
      *a3 = v8;
      a3[1] = v7;
      a3[2] = v9;
    }
    v3 = (int *)(a3 + 3);
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    v10 = *((_QWORD *)a2 + 2);
    v11 = *a2;
    *(_QWORD *)a2 = *a3;
    *((_QWORD *)a2 + 1) = a3[1];
    *((_QWORD *)a2 + 2) = a3[2];
    *(_OWORD *)a3 = v11;
    a3[2] = v10;
    LODWORD(v10) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v10;
    if (*((_DWORD *)a2 + 6) < *v5)
    {
      v12 = result[2];
      v13 = *(_OWORD *)result;
      *result = *(_QWORD *)a2;
      result[1] = *((_QWORD *)a2 + 1);
      result[2] = *((_QWORD *)a2 + 2);
      *a2 = v13;
      *((_QWORD *)a2 + 2) = v12;
LABEL_10:
      v17 = *v5;
      *v5 = *v3;
      *v3 = v17;
    }
  }
  return result;
}

BOOL sub_2394E2D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 24))
      {
        v16 = *(_QWORD *)(a1 + 16);
        v17 = *(_OWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 32) = v17;
        *(_QWORD *)(a2 - 16) = v16;
        LODWORD(v16) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v16;
      }
      break;
    case 3:
      sub_2394E2BD0((uint64_t *)a1, (__int128 *)(a1 + 32), (uint64_t *)(a2 - 32));
      result = 1;
      break;
    case 4:
      sub_2394E2F44(a1, a1 + 32, a1 + 64, a2 - 32);
      result = 1;
      break;
    case 5:
      sub_2394E2A70((__n128 *)a1, (__n128 *)(a1 + 32), (__n128 *)(a1 + 64), (__n128 *)(a1 + 96), a2 - 32);
      result = 1;
      break;
    default:
      v6 = a1 + 64;
      sub_2394E2BD0((uint64_t *)a1, (__int128 *)(a1 + 32), (uint64_t *)(a1 + 64));
      v7 = a1 + 96;
      if (a1 + 96 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *(_DWORD *)(v7 + 24);
          if (v10 < *(_DWORD *)(v6 + 24))
            break;
LABEL_12:
          v6 = v7;
          v8 += 32;
          v7 += 32;
          if (v7 == a2)
            goto LABEL_13;
        }
        v11 = *(_OWORD *)v7;
        v12 = *(_QWORD *)(v7 + 16);
        v13 = v8;
        do
        {
          v14 = a1 + v13;
          *(_OWORD *)(v14 + 96) = *(_OWORD *)(a1 + v13 + 64);
          *(_QWORD *)(v14 + 112) = *(_QWORD *)(a1 + v13 + 80);
          *(_DWORD *)(v14 + 120) = *(_DWORD *)(a1 + v13 + 88);
          if (v13 == -64)
          {
            *(_OWORD *)a1 = v11;
            *(_QWORD *)(a1 + 16) = v12;
            *(_DWORD *)(a1 + 24) = v10;
            if (++v9 != 8)
              goto LABEL_12;
            goto LABEL_19;
          }
          v13 -= 32;
        }
        while (v10 < *(_DWORD *)(v14 + 56));
        v15 = a1 + v13;
        *(_OWORD *)(v15 + 96) = v11;
        v15 += 96;
        *(_QWORD *)(v15 + 16) = v12;
        *(_DWORD *)(v15 + 24) = v10;
        if (++v9 != 8)
          goto LABEL_12;
LABEL_19:
        result = v7 + 32 == a2;
      }
      break;
  }
  return result;
}

__n128 sub_2394E2F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_2394E2BD0((uint64_t *)a1, (__int128 *)a2, (uint64_t *)a3);
  if (*(_DWORD *)(a4 + 24) < *(_DWORD *)(a3 + 24))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v9;
    if (*(_DWORD *)(a3 + 24) < *(_DWORD *)(a2 + 24))
    {
      v10 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v10;
      LODWORD(v10) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v10;
      if (*(_DWORD *)(a2 + 24) < *(_DWORD *)(a1 + 24))
      {
        v11 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v11;
        LODWORD(v11) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v11;
      }
    }
  }
  return result;
}

char *sub_2394E3050(char **a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v8;
  char *v9;
  char *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  double *v21;
  const double *v22;
  uint64_t v23;
  const double *v24;
  double *v25;
  char *v26;
  char **v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  char *v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  double *v52;
  const double *v53;
  uint64_t v54;
  const double *v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  uint64_t v61;
  const double *v62;
  double *v63;
  float64x2x2_t v64;
  float64x2x2_t v65;
  float64x2x2_t v66;
  float64x2x2_t v67;
  float64x2x2_t v68;
  float64x2x2_t v69;
  float64x2x2_t v70;
  float64x2x2_t v71;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  result = v9;
  if (__sz > (v8 - (uint64_t)v9) >> 4)
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_61;
    v11 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v11 = __sz;
    v49 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v49)
      v12 = v11;
    if (v12 >> 60)
LABEL_61:
      sub_2394189F8();
    v13 = 16 * v12;
    result = (char *)operator new(16 * v12);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v14 = result;
    if ((char *)a2 == a3)
      goto LABEL_33;
    v15 = (unint64_t)&a3[-a2 - 16];
    if (v15 < 0x90
      || ((v16 = (v15 & 0xFFFFFFFFFFFFFFF0) + 16, (unint64_t)result < a2 + v16)
        ? (v17 = (unint64_t)&result[v16] > a2)
        : (v17 = 0),
          v17))
    {
      v20 = (char *)a2;
      v14 = result;
    }
    else
    {
      v18 = (v15 >> 4) + 1;
      v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      v20 = (char *)(a2 + v19);
      v14 = &result[v19];
      v21 = (double *)(result + 32);
      v22 = (const double *)(a2 + 32);
      v23 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = v22 - 4;
        v64 = vld2q_f64(v24);
        v68 = vld2q_f64(v22);
        v25 = v21 - 4;
        vst2q_f64(v25, v64);
        vst2q_f64(v21, v68);
        v21 += 8;
        v22 += 8;
        v23 -= 4;
      }
      while (v23);
      if (v18 == (v18 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_33;
    }
    do
    {
      v37 = *(_QWORD *)v20;
      v38 = *((_QWORD *)v20 + 1);
      v20 += 16;
      *(_QWORD *)v14 = v37;
      *((_QWORD *)v14 + 1) = v38;
      v14 += 16;
    }
    while (v20 != a3);
LABEL_33:
    a1[1] = v14;
    return result;
  }
  v28 = a1[1];
  v27 = a1 + 1;
  v26 = v28;
  v29 = v28 - v9;
  v30 = (v28 - v9) >> 4;
  if (v30 >= __sz)
  {
    if ((char *)a2 == a3)
    {
      *v27 = v9;
      return result;
    }
    v33 = (unint64_t)&a3[-a2 - 16];
    if (v33 >= 0x90
      && ((v34 = (v33 & 0xFFFFFFFFFFFFFFF0) + 16, (unint64_t)v9 >= a2 + v34) || (unint64_t)&v9[v34] <= a2))
    {
      v57 = (v33 >> 4) + 1;
      v58 = 16 * (v57 & 0x1FFFFFFFFFFFFFFCLL);
      v35 = &v9[v58];
      v36 = (char *)(a2 + v58);
      v59 = (const double *)(a2 + 32);
      v60 = (double *)(v9 + 32);
      v61 = v57 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = v59 - 4;
        v67 = vld2q_f64(v62);
        v71 = vld2q_f64(v59);
        v63 = v60 - 4;
        vst2q_f64(v63, v67);
        vst2q_f64(v60, v71);
        v59 += 8;
        v60 += 8;
        v61 -= 4;
      }
      while (v61);
      if (v57 == (v57 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_30;
    }
    else
    {
      v35 = v9;
      v36 = (char *)a2;
    }
    do
    {
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      v35 += 16;
      v36 += 16;
    }
    while (v36 != a3);
LABEL_30:
    *v27 = v35;
    return result;
  }
  v31 = (char *)(a2 + 16 * v30);
  if (v26 == v9)
    goto LABEL_44;
  if ((unint64_t)(v29 - 16) >= 0x90)
  {
    v39 = (unint64_t)v9 < a2 + (v29 & 0xFFFFFFFFFFFFFFF0)
       && (unint64_t)&v9[v29 & 0xFFFFFFFFFFFFFFF0] > a2;
    v32 = (char *)a2;
    if (!v39)
    {
      v40 = ((unint64_t)(v29 - 16) >> 4) + 1;
      v41 = 16 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      result = &v9[v41];
      v32 = (char *)(a2 + v41);
      v42 = (const double *)(a2 + 32);
      v43 = (double *)(v9 + 32);
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v65 = vld2q_f64(v45);
        v69 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v65);
        vst2q_f64(v43, v69);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_43;
    }
  }
  else
  {
    v32 = (char *)a2;
  }
  do
  {
    *(_QWORD *)result = *(_QWORD *)v32;
    *((_QWORD *)result + 1) = *((_QWORD *)v32 + 1);
    v32 += 16;
    result += 16;
  }
  while (v32 != v31);
LABEL_43:
  result = *v27;
LABEL_44:
  v47 = result;
  if (v31 != a3)
  {
    v48 = (unint64_t)&a3[-v29 - a2 - 16];
    if (v48 >= 0xD0)
    {
      v49 = (unint64_t)result >= v29 + (v48 & 0xFFFFFFFFFFFFFFF0) + a2 + 16
         || v31 >= &result[(v48 & 0xFFFFFFFFFFFFFFF0) + 16];
      v47 = result;
      if (v49)
      {
        v50 = (v48 >> 4) + 1;
        v51 = 16 * (v50 & 0x1FFFFFFFFFFFFFFCLL);
        v31 += v51;
        v47 = &result[v51];
        v52 = (double *)(result + 32);
        v53 = (const double *)(a2 + 16 * v30 + 32);
        v54 = v50 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = v53 - 4;
          v66 = vld2q_f64(v55);
          v70 = vld2q_f64(v53);
          v56 = v52 - 4;
          vst2q_f64(v56, v66);
          vst2q_f64(v52, v70);
          v52 += 8;
          v53 += 8;
          v54 -= 4;
        }
        while (v54);
        if (v50 == (v50 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_56;
      }
    }
    else
    {
      v47 = result;
    }
    do
    {
      *(_QWORD *)v47 = *(_QWORD *)v31;
      *((_QWORD *)v47 + 1) = *((_QWORD *)v31 + 1);
      v47 += 16;
      v31 += 16;
    }
    while (v31 != a3);
  }
LABEL_56:
  *v27 = v47;
  return result;
}

void sub_2394E3458()
{
  unsigned __int8 v0;

  if ((byte_2542CF7A8 & 1) == 0)
  {
    byte_2542CF7A8 = 1;
    v0 = atomic_load((unsigned __int8 *)&qword_2542CF7B8);
    if ((v0 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_2542CF7B8))
      {
        qword_2542CF7B0 = ldexp(2.22507386e-308, 54);
        __cxa_guard_release(&qword_2542CF7B8);
      }
    }
  }
}

uint64_t sub_2394E34C8(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  char *v86;
  unint64_t v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  void *__p;
  char *v113;
  unint64_t v114;
  void *v115;
  char *v116;
  unint64_t v117;

  v115 = 0;
  v116 = 0;
  v117 = 0;
  v5 = *(_DWORD **)a1;
  v4 = *(_DWORD **)(a1 + 8);
  v6 = (int64_t)v4 - *(_QWORD *)a1;
  if (v6)
  {
    v7 = v6 >> 2;
    if ((unint64_t)(v6 >> 2) >> 62)
      sub_2394189F8();
    v8 = (char *)operator new(v6);
    v9 = (unint64_t)&v8[4 * v7];
    v116 = v8;
    v110 = a2;
    v111 = a1;
    if (v4 != v5)
      goto LABEL_4;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v110 = a2;
    v111 = a1;
    if (v4 != v5)
    {
LABEL_4:
      v10 = v116;
      v11 = v8;
      while (1)
      {
        while ((unint64_t)v8 < v9)
        {
          *(_DWORD *)v8 = *v5;
          v10 = v8 + 4;
          if ((unint64_t)(v8 + 4) < v9)
            goto LABEL_8;
LABEL_27:
          v20 = (v10 - v11) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            goto LABEL_194;
          if ((uint64_t)(v9 - (_QWORD)v11) >> 1 > v21)
            v21 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
          if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
          {
            if (v22 >> 62)
              goto LABEL_196;
            v23 = operator new(4 * v22);
            v24 = &v23[4 * v20];
            *(_DWORD *)v24 = v5[1];
            v25 = (unint64_t)(v24 + 4);
            if (v10 == v11)
              goto LABEL_41;
          }
          else
          {
            v23 = 0;
            v24 = (char *)(4 * v20);
            *(_DWORD *)(4 * v20) = v5[1];
            v25 = 4 * v20 + 4;
            if (v10 == v11)
              goto LABEL_41;
          }
          v26 = v10 - 4 - v11;
          if (v26 < 0xBC)
          {
            v27 = v10;
            goto LABEL_40;
          }
          if (&v23[v10 - v11 - 4 - (v26 & 0xFFFFFFFFFFFFFFFCLL)] > &v23[v10 - v11 - 4])
          {
            v27 = v10;
            do
            {
LABEL_40:
              v28 = *((_DWORD *)v27 - 1);
              v27 -= 4;
              *((_DWORD *)v24 - 1) = v28;
              v24 -= 4;
            }
            while (v27 != v11);
            goto LABEL_41;
          }
          if (&v10[-(v26 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4)
          {
            v27 = v10;
            goto LABEL_40;
          }
          if ((unint64_t)(v11 - v23) < 0x20)
          {
            v27 = v10;
            goto LABEL_40;
          }
          v44 = (v26 >> 2) + 1;
          v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
          v27 = &v10[-v45];
          v24 -= v45;
          v46 = &v23[4 * v20 - 16];
          v47 = v10 - 16;
          v48 = v44 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 32;
            v48 -= 8;
          }
          while (v48);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_40;
LABEL_41:
          v9 = (unint64_t)&v23[4 * v22];
          if (v11)
            operator delete(v11);
          v11 = v24;
          v10 = (char *)v25;
          if (v25 < v9)
            goto LABEL_5;
LABEL_44:
          v29 = (v10 - v11) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
          {
LABEL_194:
            v116 = v10;
            v117 = v9;
            v115 = v11;
            sub_2394189F8();
          }
          if ((uint64_t)(v9 - (_QWORD)v11) >> 1 > v30)
            v30 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
          if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
            v31 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v31 = v30;
          if (v31)
          {
            if (v31 >> 62)
            {
LABEL_196:
              v116 = v10;
              v117 = v9;
              v115 = v11;
              sub_239418A80();
            }
            v32 = operator new(4 * v31);
            v33 = &v32[4 * v29];
            *(_DWORD *)v33 = v5[2];
            v34 = (uint64_t)(v33 + 4);
            if (v10 == v11)
              goto LABEL_58;
          }
          else
          {
            v32 = 0;
            v33 = (char *)(4 * v29);
            *(_DWORD *)(4 * v29) = v5[2];
            v34 = 4 * v29 + 4;
            if (v10 == v11)
              goto LABEL_58;
          }
          v35 = v10 - 4 - v11;
          if (v35 >= 0xBC)
          {
            if (&v32[v10 - v11 - 4 - (v35 & 0xFFFFFFFFFFFFFFFCLL)] > &v32[v10 - v11 - 4])
            {
              v36 = v10;
            }
            else if (&v10[-(v35 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v10 - 4)
            {
              v36 = v10;
            }
            else if ((unint64_t)(v11 - v32) >= 0x20)
            {
              v50 = (v35 >> 2) + 1;
              v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
              v36 = &v10[-v51];
              v33 -= v51;
              v52 = &v32[4 * v29 - 16];
              v53 = v10 - 16;
              v54 = v50 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v55 = *(_OWORD *)v53;
                *(v52 - 1) = *((_OWORD *)v53 - 1);
                *v52 = v55;
                v52 -= 2;
                v53 -= 32;
                v54 -= 8;
              }
              while (v54);
              if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_58;
            }
            else
            {
              v36 = v10;
            }
          }
          else
          {
            v36 = v10;
          }
          do
          {
            v37 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *((_DWORD *)v33 - 1) = v37;
            v33 -= 4;
          }
          while (v36 != v11);
LABEL_58:
          v9 = (unint64_t)&v32[4 * v31];
          if (v11)
            operator delete(v11);
          v11 = v33;
          v10 = (char *)v34;
          v5 += 3;
          v8 = (char *)v34;
          if (v5 == v4)
          {
LABEL_92:
            v116 = v10;
            goto LABEL_95;
          }
        }
        v12 = (v8 - v11) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          goto LABEL_194;
        if ((uint64_t)(v9 - (_QWORD)v11) >> 1 > v13)
          v13 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
        if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 >> 62)
            goto LABEL_196;
          v15 = operator new(4 * v14);
          v16 = &v15[4 * v12];
          *(_DWORD *)v16 = *v5;
          v10 = v16 + 4;
          if (v8 == v11)
            goto LABEL_24;
        }
        else
        {
          v15 = 0;
          v16 = (char *)(4 * v12);
          *(_DWORD *)(4 * v12) = *v5;
          v10 = (char *)(4 * v12 + 4);
          if (v8 == v11)
            goto LABEL_24;
        }
        v17 = v8 - 4 - v11;
        if (v17 < 0xBC)
        {
          v18 = v8;
          goto LABEL_23;
        }
        if (&v15[v8 - v11 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v8 - v11 - 4])
        {
          v18 = v8;
          do
          {
LABEL_23:
            v19 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v16 - 1) = v19;
            v16 -= 4;
          }
          while (v18 != v11);
          goto LABEL_24;
        }
        if (&v8[-(v17 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v8 - 4)
        {
          v18 = v8;
          goto LABEL_23;
        }
        if ((unint64_t)(v11 - v15) < 0x20)
        {
          v18 = v8;
          goto LABEL_23;
        }
        v38 = (v17 >> 2) + 1;
        v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
        v18 = &v8[-v39];
        v16 -= v39;
        v40 = &v15[4 * v12 - 16];
        v41 = (__int128 *)(v8 - 16);
        v42 = v38 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v43 = *v41;
          *(v40 - 1) = *(v41 - 1);
          *v40 = v43;
          v40 -= 2;
          v41 -= 2;
          v42 -= 8;
        }
        while (v42);
        if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_23;
LABEL_24:
        v9 = (unint64_t)&v15[4 * v14];
        if (v11)
          operator delete(v11);
        v11 = v16;
        if ((unint64_t)v10 >= v9)
          goto LABEL_27;
LABEL_8:
        *(_DWORD *)v10 = v5[1];
        v10 += 4;
        if ((unint64_t)v10 >= v9)
          goto LABEL_44;
LABEL_5:
        *(_DWORD *)v10 = v5[2];
        v10 += 4;
        v5 += 3;
        v8 = v10;
        if (v5 == v4)
          goto LABEL_92;
      }
    }
  }
  v11 = v8;
LABEL_95:
  v117 = v9;
  v114 = 0;
  v115 = v11;
  __p = 0;
  v113 = 0;
  v57 = *(char **)(v111 + 24);
  v56 = *(char **)(v111 + 32);
  v58 = v56 - v57;
  if (v56 == v57)
  {
    v61 = 0;
    v62 = 0;
  }
  else
  {
    v59 = v58 >> 2;
    if ((unint64_t)(v58 >> 2) >> 62)
      sub_2394189F8();
    v60 = (char *)operator new(v58);
    v61 = v60;
    v62 = (unint64_t)&v60[4 * v59];
    v113 = v60;
    if (v56 != v57)
    {
      v63 = v113;
      v64 = v60;
      while (1)
      {
        while ((unint64_t)v61 < v62)
        {
          *(_DWORD *)v61 = *(_DWORD *)v57;
          v63 = v61 + 4;
          if ((unint64_t)(v61 + 4) < v62)
            goto LABEL_102;
LABEL_121:
          v73 = (v63 - v64) >> 2;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 62)
            goto LABEL_195;
          if ((uint64_t)(v62 - (_QWORD)v64) >> 1 > v74)
            v74 = (uint64_t)(v62 - (_QWORD)v64) >> 1;
          if (v62 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
            v75 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          if (v75)
          {
            if (v75 >> 62)
              goto LABEL_197;
            v76 = operator new(4 * v75);
            v77 = &v76[4 * v73];
            *(_DWORD *)v77 = *((_DWORD *)v57 + 1);
            v78 = (unint64_t)(v77 + 4);
            if (v63 == v64)
              goto LABEL_135;
          }
          else
          {
            v76 = 0;
            v77 = (char *)(4 * v73);
            *(_DWORD *)(4 * v73) = *((_DWORD *)v57 + 1);
            v78 = 4 * v73 + 4;
            if (v63 == v64)
              goto LABEL_135;
          }
          v79 = v63 - 4 - v64;
          if (v79 < 0xBC)
          {
            v80 = v63;
            goto LABEL_134;
          }
          if (&v76[v63 - v64 - 4 - (v79 & 0xFFFFFFFFFFFFFFFCLL)] > &v76[v63 - v64 - 4])
          {
            v80 = v63;
            do
            {
LABEL_134:
              v81 = *((_DWORD *)v80 - 1);
              v80 -= 4;
              *((_DWORD *)v77 - 1) = v81;
              v77 -= 4;
            }
            while (v80 != v64);
            goto LABEL_135;
          }
          if (&v63[-(v79 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v63 - 4)
          {
            v80 = v63;
            goto LABEL_134;
          }
          if ((unint64_t)(v64 - v76) < 0x20)
          {
            v80 = v63;
            goto LABEL_134;
          }
          v96 = (v79 >> 2) + 1;
          v97 = 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
          v80 = &v63[-v97];
          v77 -= v97;
          v98 = &v76[4 * v73 - 16];
          v99 = v63 - 16;
          v100 = v96 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v101 = *(_OWORD *)v99;
            *(v98 - 1) = *((_OWORD *)v99 - 1);
            *v98 = v101;
            v98 -= 2;
            v99 -= 32;
            v100 -= 8;
          }
          while (v100);
          if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_134;
LABEL_135:
          v62 = (unint64_t)&v76[4 * v75];
          if (v64)
            operator delete(v64);
          v64 = v77;
          v63 = (char *)v78;
          if (v78 < v62)
            goto LABEL_99;
LABEL_138:
          v82 = (v63 - v64) >> 2;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
          {
LABEL_195:
            v113 = v63;
            v114 = v62;
            __p = v64;
            sub_2394189F8();
          }
          if ((uint64_t)(v62 - (_QWORD)v64) >> 1 > v83)
            v83 = (uint64_t)(v62 - (_QWORD)v64) >> 1;
          if (v62 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
            v84 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            if (v84 >> 62)
            {
LABEL_197:
              v113 = v63;
              v114 = v62;
              __p = v64;
              sub_239418A80();
            }
            v85 = operator new(4 * v84);
            v86 = &v85[4 * v82];
            *(_DWORD *)v86 = *((_DWORD *)v57 + 2);
            v61 = v86 + 4;
            if (v63 == v64)
              goto LABEL_152;
          }
          else
          {
            v85 = 0;
            v86 = (char *)(4 * v82);
            *(_DWORD *)(4 * v82) = *((_DWORD *)v57 + 2);
            v61 = (char *)(4 * v82 + 4);
            if (v63 == v64)
              goto LABEL_152;
          }
          v87 = v63 - 4 - v64;
          if (v87 >= 0xBC)
          {
            if (&v85[v63 - v64 - 4 - (v87 & 0xFFFFFFFFFFFFFFFCLL)] > &v85[v63 - v64 - 4])
            {
              v88 = v63;
            }
            else if (&v63[-(v87 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v63 - 4)
            {
              v88 = v63;
            }
            else if ((unint64_t)(v64 - v85) >= 0x20)
            {
              v102 = (v87 >> 2) + 1;
              v103 = 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
              v88 = &v63[-v103];
              v86 -= v103;
              v104 = &v85[4 * v82 - 16];
              v105 = v63 - 16;
              v106 = v102 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v107 = *(_OWORD *)v105;
                *(v104 - 1) = *((_OWORD *)v105 - 1);
                *v104 = v107;
                v104 -= 2;
                v105 -= 32;
                v106 -= 8;
              }
              while (v106);
              if (v102 == (v102 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_152;
            }
            else
            {
              v88 = v63;
            }
          }
          else
          {
            v88 = v63;
          }
          do
          {
            v89 = *((_DWORD *)v88 - 1);
            v88 -= 4;
            *((_DWORD *)v86 - 1) = v89;
            v86 -= 4;
          }
          while (v88 != v64);
LABEL_152:
          v62 = (unint64_t)&v85[4 * v84];
          if (v64)
            operator delete(v64);
          v64 = v86;
          v63 = v61;
          v57 += 12;
          if (v57 == v56)
          {
LABEL_186:
            v113 = v63;
            goto LABEL_189;
          }
        }
        v65 = (v61 - v64) >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          goto LABEL_195;
        if ((uint64_t)(v62 - (_QWORD)v64) >> 1 > v66)
          v66 = (uint64_t)(v62 - (_QWORD)v64) >> 1;
        if (v62 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
          v67 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
        {
          if (v67 >> 62)
            goto LABEL_197;
          v68 = operator new(4 * v67);
          v69 = &v68[4 * v65];
          *(_DWORD *)v69 = *(_DWORD *)v57;
          v63 = v69 + 4;
          if (v61 == v64)
            goto LABEL_118;
        }
        else
        {
          v68 = 0;
          v69 = (char *)(4 * v65);
          *(_DWORD *)(4 * v65) = *(_DWORD *)v57;
          v63 = (char *)(4 * v65 + 4);
          if (v61 == v64)
            goto LABEL_118;
        }
        v70 = v61 - 4 - v64;
        if (v70 < 0xBC)
        {
          v71 = v61;
          goto LABEL_117;
        }
        if (&v68[v61 - v64 - 4 - (v70 & 0xFFFFFFFFFFFFFFFCLL)] > &v68[v61 - v64 - 4])
        {
          v71 = v61;
          do
          {
LABEL_117:
            v72 = *((_DWORD *)v71 - 1);
            v71 -= 4;
            *((_DWORD *)v69 - 1) = v72;
            v69 -= 4;
          }
          while (v71 != v64);
          goto LABEL_118;
        }
        if (&v61[-(v70 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v61 - 4)
        {
          v71 = v61;
          goto LABEL_117;
        }
        if ((unint64_t)(v64 - v68) < 0x20)
        {
          v71 = v61;
          goto LABEL_117;
        }
        v90 = (v70 >> 2) + 1;
        v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
        v71 = &v61[-v91];
        v69 -= v91;
        v92 = &v68[4 * v65 - 16];
        v93 = v61 - 16;
        v94 = v90 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v95 = *(_OWORD *)v93;
          *(v92 - 1) = *((_OWORD *)v93 - 1);
          *v92 = v95;
          v92 -= 2;
          v93 -= 32;
          v94 -= 8;
        }
        while (v94);
        if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_117;
LABEL_118:
        v62 = (unint64_t)&v68[4 * v67];
        if (v64)
          operator delete(v64);
        v64 = v69;
        if ((unint64_t)v63 >= v62)
          goto LABEL_121;
LABEL_102:
        *(_DWORD *)v63 = *((_DWORD *)v57 + 1);
        v63 += 4;
        if ((unint64_t)v63 >= v62)
          goto LABEL_138;
LABEL_99:
        *(_DWORD *)v63 = *((_DWORD *)v57 + 2);
        v63 += 4;
        v57 += 12;
        v61 = v63;
        if (v57 == v56)
          goto LABEL_186;
      }
    }
  }
  v64 = v61;
LABEL_189:
  v114 = v62;
  __p = v64;
  v108 = sub_239962D44(v110, &v115, (uint64_t *)&__p);
  if (__p)
  {
    v113 = (char *)__p;
    operator delete(__p);
  }
  if (v115)
  {
    v116 = (char *)v115;
    operator delete(v115);
  }
  return v108;
}

void sub_2394E3F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394E3FC0(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unint64_t v5;
  unsigned int *v6;

  sub_2394E40C0(a1, a2, a2 + 24);
  v3 = *(unsigned int **)(a2 + 24);
  v4 = *(unsigned int **)(a2 + 32);
  if (v3 == v4)
  {
LABEL_7:
    if ((!*(_BYTE *)(a2 + 104)
       || 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) == 0xAAAAAAAAAAAAAAABLL
                                                                                * ((uint64_t)(*(_QWORD *)(a2 + 8)
                                                                                           - *(_QWORD *)a2) >> 2))
      && (!*(_BYTE *)(a2 + 72) || *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48) == *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
      && (!*(_BYTE *)(a2 + 136) || *(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112) == (char *)v4 - (char *)v3))
    {
      return 1;
    }
  }
  else
  {
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v6 = *(unsigned int **)(a2 + 24);
    while (v5 > *v6 && v5 > v6[1] && v5 > v6[2])
    {
      v6 += 3;
      if (v6 == v4)
        goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_2394E40C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v31;
  void *__p;
  char *v33;
  char *v34;

  v7 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v8 = (v6 - v7) >> 2;
  v9 = *(_QWORD *)(a1 + 152);
  v30 = *(_QWORD *)(a1 + 160);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v8 <= v10)
  {
    if (v8 < v10)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 12 * v8;
  }
  else
  {
    sub_2394E6878((char **)a2, v8 - v10);
  }
  v11 = (v30 - v9) >> 2;
  if (v6 != v7)
  {
    v12 = 0;
    if (v8 <= 1)
      v13 = 1;
    else
      v13 = v8;
    do
    {
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v18 = *v16;
      v17 = (std::__shared_weak_count *)v16[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v14 = *(_OWORD *)(*(_QWORD *)(v18 + 40) + 16 * v12);
      v15 = *(_QWORD *)a2 + 12 * v12;
      *(_QWORD *)v15 = v14;
      *(_DWORD *)(v15 + 8) = DWORD2(v14);
      ++v12;
    }
    while (v12 != v13);
  }
  v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  if (v11 <= v22)
  {
    if (v11 < v22)
      *(_QWORD *)(a3 + 8) = *(_QWORD *)a3 + 12 * v11;
  }
  else
  {
    sub_2394E6878((char **)a3, v11 - v22);
  }
  v23 = operator new(0xCuLL);
  v33 = (char *)(v23 + 3);
  v34 = (char *)(v23 + 3);
  *(_QWORD *)v23 = -1;
  v23[2] = -1;
  __p = v23;
  if (v30 == v9)
    goto LABEL_27;
  v24 = 0;
  v25 = 0;
  v26 = v11 <= 1 ? 1 : (v30 - v9) >> 2;
  do
  {
    v31 = v25;
    sub_23996362C(a1, &v31, (uint64_t)&__p);
    v27 = *((_DWORD *)__p + 2);
    v28 = *(_QWORD *)a3 + v24;
    *(_QWORD *)v28 = *(_QWORD *)__p;
    *(_DWORD *)(v28 + 8) = v27;
    ++v25;
    v24 += 12;
  }
  while (v26 != v25);
  v23 = __p;
  if (__p)
  {
LABEL_27:
    v33 = (char *)v23;
    operator delete(v23);
  }
  return 1;
}

void sub_2394E42C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2394E42E4(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;

  v15 = 0;
  v14 = 0;
  *a2 = sub_2394E50A0((uint64_t)(a1 + 7), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v5 = (uint64_t *)a1[7];
  v6 = (uint64_t *)a1[8];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_2394E43C4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_239EC00D0(v1);
  _Unwind_Resume(exception_object);
}

void sub_2394E43DC(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;

  v14 = 0;
  *a2 = sub_2394E60A8((uint64_t)(a1 + 7), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v5 = (uint64_t *)a1[7];
  v6 = (uint64_t *)a1[8];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_2394E44B8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_239EC00D0(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394E44D0(uint64_t a1, int a2, int a3, float a4, float a5, float a6, float a7)
{
  float v7;
  float v8;

  v7 = fabsf(a6);
  v8 = fabsf(a5);
  if (v8 < a7)
    v8 = a7;
  return sub_23993EE8C(a1, a2, a3, v7, v8, a4);
}

uint64_t sub_2394E44F4(unsigned int **a1, uint64_t a2)
{
  return sub_23993EFD0(a2, a1);
}

uint64_t sub_2394E4504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250ADCE60;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250ADCE98;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_2394E5094;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_2394E4690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394E46A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

char *sub_2394E46BC(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_2394189F8();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_239418A80();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15)
      return v12;
    goto LABEL_19;
  }
  do
  {
    v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v17 = *a1;
  v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v15 -= 16;
    }
    while (v15 != v17);
    v15 = v17;
  }
  if (v15)
LABEL_19:
    operator delete(v15);
  return v12;
}

void sub_2394E47FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADCE60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394E480C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADCE60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E483C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2394E484C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADCE98;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_2394E4888(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADCE98;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E48D8(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

void sub_2394E48E8(_QWORD *a1, unint64_t a2)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const float *v15;
  float *v16;
  uint64_t v17;
  int v18;
  float32x4x2_t v19;

  v3 = (void *)a1[5];
  if (a2 > (uint64_t)(a1[7] - (_QWORD)v3) >> 3)
  {
    if (a2 >> 61)
      sub_2394189F8();
    v4 = a1[6];
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = v4 - (_QWORD)v3;
    v8 = (unint64_t)&v6[(v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF8];
    v9 = (char *)v8;
    if ((void *)v4 == v3)
      goto LABEL_15;
    v10 = v7 - 8;
    if (v7 - 8 >= 0x78)
    {
      v11 = (unint64_t)&v6[(v7 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
         || v4 - (v10 & 0xFFFFFFFFFFFFFFF8) - 8 >= v8;
      v9 = &v6[(v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF8];
      if (v11)
      {
        v12 = (v10 >> 3) + 1;
        v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        v14 = v4 - v13;
        v9 = (char *)(v8 - v13);
        v15 = (const float *)(v4 - 32);
        v16 = (float *)(v8 - 32);
        v17 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = vld2q_f32(v15);
          v15 -= 8;
          vst2q_f32(v16, v19);
          v16 -= 8;
          v17 -= 4;
        }
        while (v17);
        v4 = v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_15;
      }
    }
    else
    {
      v9 = &v6[(v4 - (_QWORD)v3) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v18 = *(_DWORD *)(v4 - 8);
      v4 -= 8;
      *((_DWORD *)v9 - 2) = v18;
      v9 -= 8;
      *((_DWORD *)v9 + 1) = *(_DWORD *)(v4 + 4);
    }
    while ((void *)v4 != v3);
LABEL_15:
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_2394E4A14(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(_QWORD *)(a1 + 48) - v2) >> 3;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2394E4D00((char **)(a1 + 40), v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 8 * a2;
  }
}

void sub_2394E4A48(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_2394E4A64(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const float *v20;
  float *v21;
  uint64_t v22;
  int v23;
  float32x4x2_t v24;

  v3 = (char *)a1[6];
  v2 = a1[7];
  v4 = v3;
  if ((unint64_t)v3 < v2)
  {
    *(_QWORD *)v3 = 0;
    v5 = (uint64_t)(v3 + 8);
    goto LABEL_25;
  }
  v6 = (char *)a1[5];
  v7 = (v3 - v6) >> 3;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 61)
    sub_2394189F8();
  v9 = v2 - (_QWORD)v6;
  if (v9 >> 2 > v8)
    v8 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (!v10)
  {
    v11 = 0;
    v12 = (char *)(8 * v7);
    v13 = 0;
    *(_QWORD *)(8 * v7) = 0;
    v5 = 8 * v7 + 8;
    v14 = v3 - v6;
    if (v3 != v6)
      goto LABEL_12;
LABEL_27:
    a1[5] = v12;
    a1[6] = v5;
    a1[7] = v13;
    if (!v6)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (v10 >> 61)
    sub_239418A80();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v7];
  v13 = &v11[8 * v10];
  *(_QWORD *)v12 = 0;
  v5 = (uint64_t)(v12 + 8);
  v14 = v3 - v6;
  if (v3 == v6)
    goto LABEL_27;
LABEL_12:
  v15 = v14 - 8;
  if (v15 < 0x78)
    goto LABEL_21;
  if (&v11[v3 - v6 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v3 && &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v12)
    goto LABEL_21;
  v17 = (v15 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v4 = &v3[-v18];
  v19 = &v12[-v18];
  v20 = (const float *)(v3 - 32);
  v21 = (float *)(v12 - 32);
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = vld2q_f32(v20);
    v20 -= 8;
    vst2q_f32(v21, v24);
    v21 -= 8;
    v22 -= 4;
  }
  while (v22);
  v12 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_21:
    v19 = v12;
    do
    {
      v23 = *((_DWORD *)v4 - 2);
      v4 -= 8;
      *((_DWORD *)v19 - 2) = v23;
      v19 -= 8;
      *((_DWORD *)v19 + 1) = *((_DWORD *)v4 + 1);
    }
    while (v4 != v6);
  }
  a1[5] = v19;
  a1[6] = v5;
  a1[7] = v13;
  if (v6)
LABEL_24:
    operator delete(v6);
LABEL_25:
  a1[6] = v5;
}

double sub_2394E4C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(_QWORD *)(v3 + 8 * a2) = *(_QWORD *)(v3 + 8 * a3);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

double sub_2394E4C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(double *)(v3 + 8 * a2);
  *(double *)(v3 + 8 * a3) = result;
  return result;
}

_QWORD *sub_2394E4C34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_2394E4ED0(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250ADCF08;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_2394E4CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2394E4CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394E4CF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void sub_2394E4D00(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const float *v21;
  float *v22;
  uint64_t v23;
  int v24;
  float32x4x2_t v25;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = (v8 >> 3) + a2;
    if (v9 >> 61)
      sub_2394189F8();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_239418A80();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * (v8 >> 3)];
    v14 = 8 * a2;
    v15 = &v12[8 * v11];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v7)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v15;
      if (v7)
LABEL_25:
        operator delete(v7);
    }
    else
    {
      v17 = v5 - v7 - 8;
      if (v17 < 0x78
        || &v12[v8 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v5 && &v5[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] < v13)
      {
        goto LABEL_22;
      }
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v19];
      v20 = &v13[-v19];
      v21 = (const float *)(v5 - 32);
      v22 = (float *)(v13 - 32);
      v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = vld2q_f32(v21);
        v21 -= 8;
        vst2q_f32(v22, v25);
        v22 -= 8;
        v23 -= 4;
      }
      while (v23);
      v13 = v20;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        v20 = v13;
        do
        {
          v24 = *((_DWORD *)v6 - 2);
          v6 -= 8;
          *((_DWORD *)v20 - 2) = v24;
          v20 -= 8;
          *((_DWORD *)v20 + 1) = *((_DWORD *)v6 + 1);
        }
        while (v6 != v7);
      }
      *a1 = v20;
      a1[1] = v16;
      a1[2] = v15;
      if (v7)
        goto LABEL_25;
    }
  }
}

_QWORD *sub_2394E4ED0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250ADCE98;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(char **)(a2 + 40);
  v6 = *(char **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    a1[7] = &v9[8 * (v8 >> 3)];
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) < 0x58)
      goto LABEL_22;
    v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v9 < &v7[v11] && v7 < &v9[v11])
      goto LABEL_22;
    v13 = (v10 >> 3) + 1;
    v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFF8);
    v15 = &v7[v14];
    v16 = &v9[v14];
    v17 = v9 + 32;
    v18 = (__int128 *)(v7 + 32);
    v19 = v13 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v21 = *(v18 - 2);
      v20 = *(v18 - 1);
      v23 = *v18;
      v22 = v18[1];
      v18 += 4;
      *(v17 - 2) = v21;
      *(v17 - 1) = v20;
      *v17 = v23;
      v17[1] = v22;
      v17 += 4;
      v19 -= 8;
    }
    while (v19);
    v7 = v15;
    v9 = v16;
    if (v13 != (v13 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_22:
      do
      {
        *(_DWORD *)v9 = *(_DWORD *)v7;
        *((_DWORD *)v9 + 1) = *((_DWORD *)v7 + 1);
        v9 += 8;
        v7 += 8;
      }
      while (v7 != v6);
      v16 = v9;
    }
    a1[6] = v16;
  }
  return a1;
}

void sub_2394E502C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_2394E5054(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E5078(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*sub_2394E5094())()
{
  return sub_2394E5094;
}

uint64_t sub_2394E50A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250ADCF40;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250ADCF78;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_2394E5C7C;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_2394E522C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394E5240(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2394E5258(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADCF40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394E5268(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADCF40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E5298(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2394E52A8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADCF78;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_2394E52E4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADCF78;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

unint64_t sub_2394E5334(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2);
}

void sub_2394E5350(_QWORD *a1, unint64_t a2)
{
  void *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  const float *v15;
  float *v16;
  uint64_t v17;
  int v18;
  float32x4x3_t v19;

  v3 = (void *)a1[5];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[7] - (_QWORD)v3) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_2394189F8();
    v4 = a1[6];
    v5 = 12 * a2;
    v6 = (char *)operator new(12 * a2);
    v7 = v4 - (_QWORD)v3;
    v8 = (uint64_t)(v4 - (_QWORD)v3) / 12;
    v9 = (unint64_t)&v6[12 * v8];
    v10 = (char *)v9;
    if ((void *)v4 == v3)
      goto LABEL_15;
    v11 = v7 - 12;
    if (v7 - 12 >= 0xB4)
    {
      v12 = v11 / 0xC;
      v13 = (unint64_t)&v6[12 * v8 - 12 + -12 * (v11 / 0xC)] >= v4 || v4 - 12 * (v11 / 0xC) - 12 >= v9;
      v10 = &v6[12 * v8];
      if (v13)
      {
        v14 = v12 + 1;
        v10 = (char *)(v9 - 12 * (v14 & 0x3FFFFFFFFFFFFFFCLL));
        v15 = (const float *)(v4 - 48);
        v16 = (float *)(v9 - 48);
        v17 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = vld3q_f32(v15);
          vst3q_f32(v16, v19);
          v16 -= 12;
          v15 -= 12;
          v17 -= 4;
        }
        while (v17);
        v4 -= 12 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_15;
      }
    }
    else
    {
      v10 = &v6[12 * v8];
    }
    do
    {
      v18 = *(_DWORD *)(v4 - 12);
      v4 -= 12;
      *((_DWORD *)v10 - 3) = v18;
      v10 -= 12;
      *((_DWORD *)v10 + 1) = *(_DWORD *)(v4 + 4);
      *((_DWORD *)v10 + 2) = *(_DWORD *)(v4 + 8);
    }
    while ((void *)v4 != v3);
LABEL_15:
    a1[5] = v10;
    a1[6] = v9;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_2394E54D4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 48) - v2) >> 2);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2394E582C((char **)(a1 + 40), v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 12 * a2;
  }
}

void sub_2394E5518(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_2394E5534(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const float *v19;
  float *v20;
  uint64_t v21;
  int v22;
  float32x4x3_t v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = (_DWORD *)v3;
  if (v3 < v2)
  {
    *(_QWORD *)v3 = 0;
    v5 = v3 + 12;
    *(_DWORD *)(v3 + 8) = 0;
    goto LABEL_27;
  }
  v6 = (_DWORD *)a1[5];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - (_QWORD)v6) >> 2) + 1;
  if (v7 > 0x1555555555555555)
    sub_2394189F8();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v6) >> 2);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0xAAAAAAAAAAAAAAALL)
    v9 = 0x1555555555555555;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0x1555555555555555)
      sub_239418A80();
    v10 = (char *)operator new(12 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = (unint64_t)&v10[4 * ((uint64_t)(v3 - (_QWORD)v6) >> 2)];
  v12 = &v10[12 * v9];
  *(_QWORD *)v11 = 0;
  *(_DWORD *)(v11 + 8) = 0;
  v5 = v11 + 12;
  if ((_DWORD *)v3 == v6)
  {
    a1[5] = v11;
    a1[6] = v5;
    a1[7] = v12;
    if (!v6)
      goto LABEL_27;
    goto LABEL_26;
  }
  v13 = v3 - (_QWORD)v6 - 12;
  if (v13 < 0xB4)
    goto LABEL_23;
  v14 = v13 / 0xC;
  if ((unint64_t)&v10[v3 - (_QWORD)v6 - 12 * v14 - 12] < v3 && v3 - 12 * v14 - 12 < v11)
    goto LABEL_23;
  v16 = v14 + 1;
  v17 = (v14 + 1) & 0x3FFFFFFFFFFFFFFCLL;
  v4 = (_DWORD *)(v3 - 12 * v17);
  v18 = v11 - 12 * v17;
  v19 = (const float *)(v3 - 48);
  v20 = (float *)(v11 - 48);
  v21 = v17;
  do
  {
    v23 = vld3q_f32(v19);
    vst3q_f32(v20, v23);
    v20 -= 12;
    v19 -= 12;
    v21 -= 4;
  }
  while (v21);
  v11 = v18;
  if (v16 != v17)
  {
LABEL_23:
    v18 = v11;
    do
    {
      v22 = *(v4 - 3);
      v4 -= 3;
      *(_DWORD *)(v18 - 12) = v22;
      v18 -= 12;
      *(_DWORD *)(v18 + 4) = v4[1];
      *(_DWORD *)(v18 + 8) = v4[2];
    }
    while (v4 != v6);
  }
  a1[5] = v18;
  a1[6] = v5;
  a1[7] = v12;
  if (v6)
LABEL_26:
    operator delete(v6);
LABEL_27:
  a1[6] = v5;
}

double sub_2394E5704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = v3 + 12 * a2;
  v5 = *(_DWORD *)(v4 + 8);
  v6 = v3 + 12 * a3;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 + 8);
  result = *(double *)v4;
  *(_QWORD *)v4 = *(_QWORD *)v6;
  *(double *)v6 = result;
  *(_DWORD *)(v6 + 8) = v5;
  return result;
}

double sub_2394E5738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = v3 + 12 * a2;
  v5 = v3 + 12 * a3;
  result = *(double *)v4;
  *(_QWORD *)v5 = *(_QWORD *)v4;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v4 + 8);
  return result;
}

_QWORD *sub_2394E5760@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_2394E5A74(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250ADCFE8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_2394E57DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2394E57F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394E581C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

void sub_2394E582C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const float *v24;
  float *v25;
  uint64_t v26;
  int v27;
  float32x4x3_t v28;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        sub_239418A80();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[4 * (v8 >> 2)];
    v15 = &v12[12 * v11];
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
LABEL_28:
        operator delete(v7);
    }
    else
    {
      v18 = v5 - v7 - 12;
      if (v18 < 0xB4)
        goto LABEL_25;
      v19 = v18 / 0xC;
      if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14)
        goto LABEL_25;
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v6 = &v5[-12 * v22];
      v23 = &v14[-12 * v22];
      v24 = (const float *)(v5 - 48);
      v25 = (float *)(v14 - 48);
      v26 = v22;
      do
      {
        v28 = vld3q_f32(v24);
        vst3q_f32(v25, v28);
        v25 -= 12;
        v24 -= 12;
        v26 -= 4;
      }
      while (v26);
      v14 -= 12 * v22;
      if (v21 != v22)
      {
LABEL_25:
        v23 = v14;
        do
        {
          v27 = *((_DWORD *)v6 - 3);
          v6 -= 12;
          *((_DWORD *)v23 - 3) = v27;
          v23 -= 12;
          *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
        }
        while (v6 != v7);
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
        goto LABEL_28;
    }
  }
}

_QWORD *sub_2394E5A74(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250ADCF78;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(char **)(a2 + 40);
  v6 = *(char **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    a1[7] = &v9[4 * (v8 >> 2)];
    if ((unint64_t)(v8 - 12) >= 0x84
      && ((v10 = (v8 - 12) / 0xCuLL, v11 = 12 * v10 + 12, v9 < &v7[v11]) ? (v12 = v7 >= &v9[v11]) : (v12 = 1), v12))
    {
      v13 = v10 + 1;
      v14 = (v10 + 1) & 0x3FFFFFFFFFFFFFF8;
      v15 = &v7[12 * v14];
      v16 = &v9[12 * v14];
      v17 = v14;
      do
      {
        v18 = *((_OWORD *)v7 + 1);
        v20 = *((_OWORD *)v7 + 4);
        v19 = *((_OWORD *)v7 + 5);
        v21 = *((_OWORD *)v7 + 2);
        v22 = *((_OWORD *)v7 + 3);
        *(_OWORD *)v9 = *(_OWORD *)v7;
        *((_OWORD *)v9 + 1) = v18;
        *((_OWORD *)v9 + 2) = v21;
        *((_OWORD *)v9 + 3) = v22;
        *((_OWORD *)v9 + 4) = v20;
        *((_OWORD *)v9 + 5) = v19;
        v9 += 96;
        v7 += 96;
        v17 -= 8;
      }
      while (v17);
      if (v13 == v14)
        goto LABEL_18;
    }
    else
    {
      v15 = v7;
      v16 = v9;
    }
    do
    {
      *(_DWORD *)v16 = *(_DWORD *)v15;
      *((_DWORD *)v16 + 1) = *((_DWORD *)v15 + 1);
      *((_DWORD *)v16 + 2) = *((_DWORD *)v15 + 2);
      v16 += 12;
      v15 += 12;
    }
    while (v15 != v6);
LABEL_18:
    a1[6] = v16;
  }
  return a1;
}

void sub_2394E5C14(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_2394E5C3C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E5C60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*sub_2394E5C7C())()
{
  return sub_2394E5C7C;
}

uint64_t sub_2394E5C88(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_2394E5094;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2394E5DE4(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_2394E5C7C;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_2394E5F40(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_2394E609C;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*sub_2394E609C())()
{
  return sub_2394E609C;
}

uint64_t sub_2394E60A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250ADD020;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250ADD058;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_2394E686C;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_2394E6234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394E6248(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2394E6260(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394E6270(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADD020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E62A0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2394E62B0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADD058;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_2394E62EC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250ADD058;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E633C(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void sub_2394E634C(_QWORD *a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  v3 = (_BYTE *)a1[5];
  if (a2 > (uint64_t)(a1[7] - (_QWORD)v3) >> 2)
  {
    if (a2 >> 62)
      sub_2394189F8();
    v4 = (_BYTE *)a1[6];
    v5 = 4 * a2;
    v6 = (char *)operator new(4 * a2);
    v7 = v4 - v3;
    v8 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    v9 = v8;
    if (v4 == v3)
      goto LABEL_11;
    if ((unint64_t)(v7 - 4) >= 0x2C)
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v10 = v7 >> 2;
        v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
        v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
        v13 = &v4[-v12];
        v9 = &v8[-v12];
        v14 = &v6[4 * v10 - 16];
        v15 = (__int128 *)(v4 - 16);
        v16 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 8;
        }
        while (v16);
        v4 = v13;
        if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v18 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v9 - 1) = v18;
      v9 -= 4;
    }
    while (v4 != v3);
LABEL_11:
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_2394E6464(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(_QWORD *)(a1 + 48) - v2) >> 2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_23942CB44(a1 + 40, v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 4 * a2;
  }
}

void sub_2394E6498(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_2394E64B4(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _DWORD *v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  int v22;

  v3 = (char *)a1[6];
  v2 = a1[7];
  v4 = v3;
  if ((unint64_t)v3 < v2)
  {
    *(_DWORD *)v3 = 0;
    v5 = (uint64_t)(v3 + 4);
    goto LABEL_22;
  }
  v6 = (char *)a1[5];
  v7 = (v3 - v6) >> 2;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 62)
    sub_2394189F8();
  v9 = v2 - (_QWORD)v6;
  if (v9 >> 1 > v8)
    v8 = v9 >> 1;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 >> 62)
      sub_239418A80();
    v11 = operator new(4 * v10);
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *v12 = 0;
    v5 = (uint64_t)(v12 + 1);
    v14 = v3 - v6;
    if (v3 == v6)
      goto LABEL_20;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = (_DWORD *)(4 * v7);
  v13 = 0;
  *(_DWORD *)(4 * v7) = 0;
  v5 = 4 * v7 + 4;
  v14 = v3 - v6;
  if (v3 != v6)
  {
LABEL_14:
    v15 = v14 - 4;
    if (v15 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v6 - v11) < 0x20)
      goto LABEL_27;
    v16 = (v15 >> 2) + 1;
    v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    v4 = &v3[-v17];
    v12 = (_DWORD *)((char *)v12 - v17);
    v18 = &v11[4 * v7 - 16];
    v19 = v3 - 16;
    v20 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v21 = *(_OWORD *)v19;
      *(v18 - 1) = *((_OWORD *)v19 - 1);
      *v18 = v21;
      v18 -= 2;
      v19 -= 32;
      v20 -= 8;
    }
    while (v20);
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v22 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *--v12 = v22;
      }
      while (v4 != v6);
    }
  }
LABEL_20:
  a1[5] = v12;
  a1[6] = v5;
  a1[7] = v13;
  if (v6)
    operator delete(v6);
LABEL_22:
  a1[6] = v5;
}

uint64_t sub_2394E6620(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(v3 + 4 * a3) = v4;
  return result;
}

uint64_t sub_2394E6640(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2);
  return result;
}

uint64_t sub_2394E6650(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2) = (*(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3)
                                                                + *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2)) >> 1;
  return result;
}

_QWORD *sub_2394E6670@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_2394E673C(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250ADD0C8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_2394E66EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2394E6708(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1093C400FBCE358);
  _Unwind_Resume(a1);
}

uint64_t sub_2394E672C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

_QWORD *sub_2394E673C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250ADD058;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(_BYTE **)(a2 + 40);
  v6 = *(_BYTE **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    v10 = &v9[4 * (v8 >> 2)];
    a1[7] = v10;
    memcpy(v9, v7, v8);
    a1[6] = v10;
  }
  return a1;
}

void sub_2394E6804(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_2394E682C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394E6850(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (*sub_2394E686C())()
{
  return sub_2394E686C;
}

void sub_2394E6878(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    a1[1] = &v5[12 * (12 * a2 / 0xC)];
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_239418A80();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[12 * v7];
    v13 = &v12[12 * (12 * a2 / 0xC)];
    if (v5 != v6)
    {
      do
      {
        v14 = *(_QWORD *)(v5 - 12);
        v5 -= 12;
        v15 = *((_DWORD *)v5 + 2);
        *(_QWORD *)(v12 - 12) = v14;
        v12 -= 12;
        *((_DWORD *)v12 + 2) = v15;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[12 * v10];
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_2394E69DC(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x2_t *v14;
  float64_t v15;
  float64x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a3[4] - a3[3]) >> 2);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2);
  if (v6 <= v7)
  {
    if (v6 < v7)
      a2[1] = *a2 + 4 * ((a3[4] - a3[3]) >> 2);
  }
  else
  {
    sub_2394EF24C((uint64_t)a2, v6 - v7);
  }
  v8 = *a3;
  v9 = a3[1];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a3) >> 2);
  v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  if (v10 <= v11)
  {
    if (v10 < v11)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * ((v9 - *a3) >> 2);
  }
  else
  {
    sub_2394EF3DC((char **)a1, v10 - v11);
    v8 = *a3;
    v9 = a3[1];
  }
  if (v9 != v8)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = (float32x2_t *)(v8 + 12 * v13);
      v15 = v14[1].f32[0];
      v16 = (float64x2_t *)(*(_QWORD *)a1 + v12);
      *v16 = vcvtq_f64_f32(*v14);
      v16[1].f64[0] = v15;
      ++v13;
      v8 = *a3;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  }
  v17 = a3[3];
  if (a3[4] != v17)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = v17 + 12 * v19;
      v21 = *(_DWORD *)(v20 + 8);
      v22 = *a2 + v18;
      *(_QWORD *)v22 = *(_QWORD *)v20;
      *(_DWORD *)(v22 + 8) = v21;
      ++v19;
      v17 = a3[3];
      v18 += 12;
    }
    while (v19 < 0xAAAAAAAAAAAAAAABLL * ((a3[4] - v17) >> 2));
  }
  return 1;
}

uint64_t sub_2394E6B6C(void **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float64x2_t *v11;
  float32_t v12;
  float32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  void *v27[2];
  void *v28[2];
  __int128 v29;
  void *v30;
  _BYTE *v31;
  char v32;
  void *v33;
  _BYTE *v34;
  char v35;
  void *__p;
  _BYTE *v37;
  char v38;

  v32 = 0;
  LOBYTE(v33) = 0;
  v35 = 0;
  LOBYTE(__p) = 0;
  v38 = 0;
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  LOBYTE(v30) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (v7 != *a2)
  {
    sub_2394E6878((char **)v27, 0xAAAAAAAAAAAAAAABLL * ((v7 - *a2) >> 3));
    v6 = *a2;
    v7 = a2[1];
  }
  if (v7 != v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (float64x2_t *)(v6 + v9);
      v12 = v11[1].f64[0];
      v13 = (float32x2_t *)((char *)v27[0] + v8);
      *v13 = vcvt_f32_f64(*v11);
      v13[1].f32[0] = v12;
      ++v10;
      v6 = *a2;
      v9 += 24;
      v8 += 12;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  v14 = *a3;
  v15 = a3[1];
  v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a3) >> 2);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (unint64_t)v28[1]) >> 2);
  if (v16 <= v17)
  {
    if (v16 < v17)
      *(_QWORD *)&v29 = (char *)v28[1] + 4 * ((v15 - *a3) >> 2);
  }
  else
  {
    sub_2394E6878((char **)&v28[1], v16 - v17);
    v14 = *a3;
    v15 = a3[1];
  }
  if (v15 != v14)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = v14 + v18;
      v21 = *(_DWORD *)(v20 + 8);
      v22 = (char *)v28[1] + v18;
      *(_QWORD *)v22 = *(_QWORD *)v20;
      *((_DWORD *)v22 + 2) = v21;
      ++v19;
      v14 = *a3;
      v18 += 12;
    }
    while (v19 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  }
  if (v28[1] != (void *)v29)
  {
    v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27[1] - (char *)v27[0]) >> 2);
    v24 = (unsigned int *)v28[1];
    while (v23 > *v24 && v23 > v24[1] && v23 > v24[2])
    {
      v24 += 3;
      if (v24 == (unsigned int *)v29)
        goto LABEL_19;
    }
LABEL_29:
    v25 = 0;
    if (!v38)
      goto LABEL_32;
    goto LABEL_30;
  }
LABEL_19:
  if (v35
    && 0xAAAAAAAAAAAAAAABLL * (v34 - (_BYTE *)v33) != 0xAAAAAAAAAAAAAAABLL * (((char *)v27[1] - (char *)v27[0]) >> 2)
    || v32 && v31 - (_BYTE *)v30 != (char *)v27[1] - (char *)v27[0]
    || v38 && v37 - (_BYTE *)__p != (_QWORD)v29 - (unint64_t)v28[1])
  {
    goto LABEL_29;
  }
  if (v27 != a1)
  {
    sub_2394ECC58(a1, (char *)v27[0], (char *)v27[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v27[1] - (char *)v27[0]) >> 2));
    sub_2394ECE5C(a1 + 3, (char *)v28[1], (char *)v29, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (unint64_t)v28[1]) >> 2));
  }
  sub_2394ED088((uint64_t)(a1 + 6), (uint64_t)&v30);
  sub_2394ED1E4((uint64_t)(a1 + 10), (uint64_t)&v33);
  sub_2394ED088((uint64_t)(a1 + 14), (uint64_t)&__p);
  v25 = 1;
  if (v38)
  {
LABEL_30:
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
  }
LABEL_32:
  if (v35 && v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v32 && v30)
  {
    v31 = v30;
    operator delete(v30);
  }
  if (v28[1])
  {
    *(void **)&v29 = v28[1];
    operator delete(v28[1]);
  }
  if (v27[0])
  {
    v27[1] = v27[0];
    operator delete(v27[0]);
  }
  return v25;
}

void sub_2394E6EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394AEEDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2394E6EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394AEEDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2394E6ED4(uint64_t *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  void *v15;
  char v16;
  void *__p;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (*(_BYTE *)(a3 + 6))
  {
    sub_2394ED554(&v7, (uint64_t)a1);
    sub_2394E716C((char **)&v7, 1, 1, 1);
    sub_2394E69DC((uint64_t)&v23, &v20, (uint64_t *)&v7);
    if (v19 && __p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if (v16 && v14)
    {
      v15 = v14;
      operator delete(v14);
    }
    if (v13 && v11)
    {
      v12 = v11;
      operator delete(v11);
    }
    if (*((_QWORD *)&v8 + 1))
    {
      v9 = (void *)*((_QWORD *)&v8 + 1);
      operator delete(*((void **)&v8 + 1));
    }
    if ((_QWORD)v7)
    {
      *((_QWORD *)&v7 + 1) = v7;
      operator delete((void *)v7);
    }
  }
  else
  {
    sub_2394E69DC((uint64_t)&v23, &v20, a1);
  }
  BYTE4(v7) = 0;
  *(_WORD *)((char *)&v7 + 7) = 0;
  HIDWORD(v7) = 1065353216;
  v8 = xmmword_239EC6D30;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  *(float *)&v7 = 1.0 - *(float *)a3;
  *(_WORD *)((char *)&v7 + 5) = *(_WORD *)(a3 + 4);
  if (&v9 != (void **)(a3 + 16))
  {
    v5 = *(_QWORD *)(a3 + 24);
    if (v5)
    {
      if (v5 < 0)
        sub_2394189F8();
      v9 = operator new(8 * (((unint64_t)(v5 - 1) >> 6) + 1));
      v10 = 0;
      v11 = (void *)(((unint64_t)(v5 - 1) >> 6) + 1);
      memmove(v9, *(const void **)(a3 + 16), (((unint64_t)(v5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
    }
    v10 = v5;
  }
  sub_2395038BC((uint64_t *)&v23, (uint64_t *)&v20, (uint64_t)&v7);
  sub_2394E6B6C(a2, (uint64_t *)&v23, (uint64_t *)&v20);
  if (v9)
    operator delete(v9);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (*(_BYTE *)(a3 + 7))
    sub_2394E716C((char **)a2, 1, 1, 1);
  sub_2394E7E10(a2);
  return 1;
}

void sub_2394E70E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  uint64_t v13;
  void *v15;
  void *v16;

  v15 = *(void **)(v13 - 112);
  if (v15)
  {
    *(_QWORD *)(v13 - 104) = v15;
    operator delete(v15);
    v16 = *(void **)(v13 - 88);
    if (!v16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v16 = *(void **)(v13 - 88);
    if (!v16)
      goto LABEL_3;
  }
  *(_QWORD *)(v13 - 80) = v16;
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394E716C(char **a1, int a2, int a3, int a4)
{
  char **v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _DWORD *v39;
  uint64_t v40;
  __int32 v41;
  char *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  __int32 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  float32x4_t *v58;
  float32x4_t *v59;
  uint64_t v60;
  __int32 v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t *v64;
  float32x4_t *v65;
  uint64_t v66;
  __int32 *v67;
  float *v68;
  BOOL v69;
  char v70;
  char *v71;
  uint64_t v72;
  __int32 *v73;
  float *v74;
  float *v75;
  float v76;
  uint64_t v77;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  signed int v82;
  unint64_t v83;
  unint64_t v84;
  void **v85;
  uint64_t v86;
  unsigned int *v87;
  void **v88;
  unsigned int *v89;
  unsigned int *v90;
  char **v91;
  char *v92;
  unsigned int v93;
  char **v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  int v110;
  char *v111;
  char *v112;
  char *v113;
  int v114;
  unsigned int *v115;
  unsigned int *v116;
  void *v117;
  void *v118;
  char *v119;
  char *v120;
  void *v121;
  char *v122;
  void *v123;
  void *v124;
  char *v125;
  char *v126;
  void *v127;
  char *v128;
  void *v129;
  void *v130;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v138;
  unint64_t v139;
  int v140;
  void *v141;
  unsigned int *v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  void *v147;
  char *v148;
  char *v149;
  void *__p;
  _QWORD *v151;
  uint64_t v152;
  unsigned int *v153;
  char *v154;
  unint64_t v155;
  unint64_t v156;
  void **v157;
  uint64_t v158;

  v4 = a1;
  v158 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    do
    {
      __p = 0;
      v151 = 0;
      v152 = 0;
      sub_2396C2A38(v4, &__p);
      v9 = v4[3];
      v8 = v4[4];
      v155 = 0;
      v156 = 0;
      v154 = 0;
      v10 = v8 - v9;
      if (v10)
      {
        if (v10 < 0)
          sub_2394189F8();
        v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
        v154 = (char *)operator new(8 * (((v11 - 1) >> 6) + 1));
        v155 = 0;
        v156 = ((v11 - 1) >> 6) + 1;
        sub_23942D8C8(&v154, v11, 0);
      }
      v147 = 0;
      v148 = 0;
      v149 = 0;
      v12 = __p;
      v13 = v151;
      v134 = v151;
      while (v12 != v13)
      {
        v135 = v12;
        v14 = (_QWORD *)*v12;
        v136 = v12 + 1;
        if ((_QWORD *)*v12 != v12 + 1)
        {
          do
          {
            v15 = v14[5];
            v16 = v14[6] - v15;
            if (!v16)
              goto LABEL_25;
            v17 = v16 >> 2;
            if ((unint64_t)(v16 >> 2) <= 1)
              v17 = 1;
            if (v17 >= 2)
            {
              v20 = 0;
              v21 = 0;
              v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
              v22 = (_DWORD *)(v15 + 4);
              v23 = v17 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v20 += (~*(_QWORD *)&v154[((unint64_t)*(v22 - 1) >> 3) & 0x1FFFFFF8] >> *(v22 - 1)) & 1;
                v21 += (~*(_QWORD *)&v154[((unint64_t)*v22 >> 3) & 0x1FFFFFF8] >> *v22) & 1;
                v22 += 2;
                v23 -= 2;
              }
              while (v23);
              v18 = v21 + v20;
              if (v17 == v19)
                goto LABEL_24;
            }
            else
            {
              v18 = 0;
              v19 = 0;
            }
            v24 = v17 - v19;
            v25 = (unsigned int *)(v15 + 4 * v19);
            do
            {
              v26 = *v25++;
              v18 += (~*(_QWORD *)&v154[((unint64_t)v26 >> 3) & 0x1FFFFFF8] >> v26) & 1;
              --v24;
            }
            while (v24);
LABEL_24:
            if (v18 < 3)
              goto LABEL_25;
            v29 = 0;
            v30 = (char *)v147;
            v148 = (char *)v147;
            do
            {
              v31 = *(unsigned int *)(v15 + 4 * v29);
              if (((*(_QWORD *)&v154[(v31 >> 3) & 0x1FFFFFF8] >> v31) & 1) != 0)
              {
                if (v30 < v149)
                {
                  *(_DWORD *)v30 = 2139095039;
                  v30 += 4;
                  goto LABEL_33;
                }
                v32 = (char *)v147;
                v33 = v30 - (_BYTE *)v147;
                v34 = (v30 - (_BYTE *)v147) >> 2;
                v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62)
                  sub_2394189F8();
                v36 = v149 - (_BYTE *)v147;
                if ((v149 - (_BYTE *)v147) >> 1 > v35)
                  v35 = v36 >> 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                  v37 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v37 = v35;
                if (v37)
                {
                  if (v37 >> 62)
                    sub_239418A80();
                  v38 = operator new(4 * v37);
                  v39 = &v38[4 * v34];
                  *v39 = 2139095039;
                  v40 = (uint64_t)(v39 + 1);
                  if (v30 == v32)
                    goto LABEL_62;
LABEL_59:
                  v51 = v30 - 4 - v32;
                  if (v51 < 0xBC)
                  {
                    v52 = v30;
                    goto LABEL_61;
                  }
                  if (&v38[v33 - 4 - (v51 & 0xFFFFFFFFFFFFFFFCLL)] > &v38[v33 - 4])
                  {
                    v52 = v30;
                    goto LABEL_61;
                  }
                  if (&v30[-(v51 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v30 - 4)
                  {
                    v52 = v30;
                    goto LABEL_61;
                  }
                  if ((unint64_t)(v30 - v38 - v33) < 0x20)
                  {
                    v52 = v30;
                    goto LABEL_61;
                  }
                  v62 = (v51 >> 2) + 1;
                  v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
                  v52 = &v30[-v63];
                  v39 = (_DWORD *)((char *)v39 - v63);
                  v64 = (float32x4_t *)&v38[4 * v34 - 16];
                  v65 = (float32x4_t *)(v30 - 16);
                  v66 = v62 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v6 = v65[-1];
                    v5 = *v65;
                    v64[-1] = v6;
                    *v64 = v5;
                    v64 -= 2;
                    v65 -= 2;
                    v66 -= 8;
                  }
                  while (v66);
                  if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
                  {
                    do
                    {
LABEL_61:
                      v53 = *((_DWORD *)v52 - 1);
                      v52 -= 4;
                      v5.i32[0] = v53;
                      *--v39 = v53;
                    }
                    while (v52 != v32);
                  }
                }
                else
                {
                  v38 = 0;
                  v39 = (_DWORD *)(4 * v34);
                  *(_DWORD *)(4 * v34) = 2139095039;
                  v40 = 4 * v34 + 4;
                  if (v30 != v32)
                    goto LABEL_59;
                }
LABEL_62:
                v147 = v39;
                v148 = (char *)v40;
                v149 = &v38[4 * v37];
                if (v32)
                  operator delete(v32);
                v30 = (char *)v40;
                goto LABEL_33;
              }
              v5.f32[0] = sub_2396C39C8(a1, (unsigned int *)&a1[3][12 * v31], v5, v6, v7);
              v41 = v5.i32[0];
              v42 = v148;
              if (v148 < v149)
              {
                *(_DWORD *)v148 = v5.i32[0];
                v30 = v42 + 4;
                goto LABEL_33;
              }
              v43 = (char *)v147;
              v44 = v148 - (_BYTE *)v147;
              v45 = (v148 - (_BYTE *)v147) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                sub_2394189F8();
              v47 = v149 - (_BYTE *)v147;
              if ((v149 - (_BYTE *)v147) >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                if (v48 >> 62)
                  sub_239418A80();
                v49 = (char *)operator new(4 * v48);
                v50 = &v49[4 * v45];
                *(_DWORD *)v50 = v41;
                v30 = v50 + 4;
                if (v42 == v43)
                  goto LABEL_76;
LABEL_70:
                v54 = v42 - 4 - v43;
                if (v54 < 0x2C)
                  goto LABEL_188;
                if ((unint64_t)(v42 - &v49[v44]) < 0x20)
                  goto LABEL_188;
                v55 = (v54 >> 2) + 1;
                v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
                v57 = &v42[-v56];
                v50 -= v56;
                v58 = (float32x4_t *)&v49[4 * v45 - 16];
                v59 = (float32x4_t *)(v42 - 16);
                v60 = v55 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v6 = v59[-1];
                  v5 = *v59;
                  v58[-1] = v6;
                  *v58 = v5;
                  v58 -= 2;
                  v59 -= 2;
                  v60 -= 8;
                }
                while (v60);
                v42 = v57;
                if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_188:
                  do
                  {
                    v61 = *((_DWORD *)v42 - 1);
                    v42 -= 4;
                    v5.i32[0] = v61;
                    *((_DWORD *)v50 - 1) = v61;
                    v50 -= 4;
                  }
                  while (v42 != v43);
                }
                goto LABEL_76;
              }
              v49 = 0;
              v50 = (char *)(4 * v45);
              *(_DWORD *)(4 * v45) = v5.i32[0];
              v30 = (char *)(4 * v45 + 4);
              if (v42 != v43)
                goto LABEL_70;
LABEL_76:
              v147 = v50;
              v148 = v30;
              v149 = &v49[4 * v48];
              if (v43)
                operator delete(v43);
LABEL_33:
              v148 = v30;
              ++v29;
              v15 = v14[5];
            }
            while (v29 < (v14[6] - v15) >> 2);
            v67 = (__int32 *)v147;
            v68 = (float *)((char *)v147 + 4);
            v69 = v147 == v30 || v68 == (float *)v30;
            v70 = v69;
            v71 = v154;
            do
            {
              v73 = v67;
              if ((v70 & 1) == 0)
              {
                v5.i32[0] = *v67;
                v74 = v68;
                v73 = v67;
                v75 = v68;
                do
                {
                  v76 = *v75++;
                  v6.f32[0] = v76;
                  if (v76 < v5.f32[0])
                  {
                    v5.f32[0] = v6.f32[0];
                    v73 = (__int32 *)v74;
                  }
                  v74 = v75;
                }
                while (v75 != (float *)v30);
              }
              v72 = ((char *)v73 - (char *)v67) << 30 >> 30;
              *(_QWORD *)&v71[((unint64_t)*(int *)(v15 + v72) >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *(_DWORD *)(v15 + v72);
              *(__int32 *)((char *)v67 + v72) = 2139095039;
              --v18;
            }
            while (v18 > 2);
LABEL_25:
            v27 = (_QWORD *)v14[1];
            if (v27)
            {
              do
              {
                v28 = v27;
                v27 = (_QWORD *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v28 = (_QWORD *)v14[2];
                v69 = *v28 == (_QWORD)v14;
                v14 = v28;
              }
              while (!v69);
            }
            v14 = v28;
          }
          while (v28 != v136);
        }
        v13 = v134;
        v12 = v135 + 3;
      }
      LOBYTE(v138) = 1;
      v144 = v154;
      LODWORD(v145) = 0;
      v141 = &v154[8 * (v155 >> 6)];
      LODWORD(v142) = v155 & 0x3F;
      v77 = sub_239458E50((uint64_t)&v144, (uint64_t)&v141, &v138);
      v4 = a1;
      sub_2396C3B28(a1, (uint64_t)&v154, 1);
      if (v147)
      {
        v148 = (char *)v147;
        operator delete(v147);
      }
      if (v154)
        operator delete(v154);
      v78 = (char *)__p;
      if (__p)
      {
        v79 = (char *)v151;
        v80 = __p;
        if (v151 != __p)
        {
          do
          {
            v81 = v79 - 24;
            sub_2394EF618((uint64_t)(v79 - 24), *((_QWORD **)v79 - 2));
            v79 = v81;
          }
          while (v81 != v78);
          v80 = __p;
        }
        v151 = v78;
        operator delete(v80);
      }
    }
    while (v77);
  }
  if (a2)
  {
    v147 = 0;
    v148 = 0;
    v149 = 0;
    v144 = 0;
    v145 = 0;
    v146 = 0;
    sub_2396BFD08(v4, &v147);
    sub_2396C1F84(v4, &v144, 0, 0);
    v141 = 0;
    v142 = 0;
    v143 = 0;
    sub_2394E92F8((char **)&v141, 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 2));
    v82 = a4;
    if (a4 <= 0)
      v82 = std::thread::hardware_concurrency();
    sub_2397A15E0(&v140);
    sub_2397A2A50((uint64_t)&__p, v82, 0);
    v83 = 0xAAAAAAAAAAAAAAABLL * ((v148 - (_BYTE *)v147) >> 3) / v82;
    if ((int)v83 <= 1)
      v83 = 1;
    else
      v83 = v83;
    v138 = v83;
    v139 = 0xAAAAAAAAAAAAAAABLL * ((v148 - (_BYTE *)v147) >> 3);
    if (v148 != v147)
    {
      v84 = 0;
      do
      {
        v87 = v153;
        if (!v153)
        {
          sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v88 = (void **)operator new(0x48uLL);
        *v88 = &off_250ADD220;
        v88[1] = &v139;
        v88[2] = &v138;
        v88[3] = &v147;
        v88[4] = &v144;
        v88[5] = a1;
        v88[6] = &v140;
        v88[7] = &v141;
        v88[8] = (void *)v84;
        v157 = v88;
        sub_2394D0CC4(v87, (uint64_t)&v154);
        v85 = v157;
        if (v157 == (void **)&v154)
        {
          v85 = (void **)&v154;
          v86 = 4;
        }
        else
        {
          if (!v157)
            goto LABEL_116;
          v86 = 5;
        }
        (*((void (**)(void))*v85 + v86))();
LABEL_116:
        v84 += v138;
      }
      while (v84 < 0xAAAAAAAAAAAAAAABLL * ((v148 - (_BYTE *)v147) >> 3));
    }
    sub_2397A2D24((uint64_t)&__p);
    v89 = (unsigned int *)v141;
    v90 = v142;
    v91 = a1;
    if (v141 != v142)
    {
      v92 = a1[1];
      while (1)
      {
        v93 = *v89;
        v94 = v91;
        v95 = *v91;
        v96 = (v92 - *v91) / 12;
        v97 = (uint64_t)&(*v91)[12 * *v89];
        v98 = (unint64_t)v94[2];
        if ((unint64_t)v92 >= v98)
          break;
        v99 = *(_QWORD *)v97;
        *((_DWORD *)v92 + 2) = *(_DWORD *)(v97 + 8);
        *(_QWORD *)v92 = v99;
        v92 += 12;
        v91 = a1;
        a1[1] = v92;
        v100 = (unsigned int *)*((_QWORD *)v89 + 1);
        v101 = (unsigned int *)*((_QWORD *)v89 + 2);
        if (v100 != v101)
          goto LABEL_143;
LABEL_123:
        v89 += 8;
        if (v89 == v90)
          goto LABEL_153;
      }
      v102 = v96 + 1;
      if ((unint64_t)(v96 + 1) > 0x1555555555555555)
        sub_2394189F8();
      v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (_QWORD)v95) >> 2);
      if (2 * v103 > v102)
        v102 = 2 * v103;
      if (v103 >= 0xAAAAAAAAAAAAAAALL)
        v104 = 0x1555555555555555;
      else
        v104 = v102;
      if (v104)
      {
        if (v104 > 0x1555555555555555)
          sub_239418A80();
        v105 = (char *)operator new(12 * v104);
      }
      else
      {
        v105 = 0;
      }
      v106 = *(_QWORD *)v97;
      v107 = &v105[12 * v96];
      *((_DWORD *)v107 + 2) = *(_DWORD *)(v97 + 8);
      *(_QWORD *)v107 = v106;
      if (v92 == v95)
      {
        v111 = v92;
        v91 = a1;
        v92 = v107 + 12;
        *a1 = v107;
        a1[1] = v107 + 12;
        a1[2] = &v105[12 * v104];
        if (!v111)
          goto LABEL_142;
      }
      else
      {
        v108 = &v105[12 * v96];
        do
        {
          v109 = *(_QWORD *)(v92 - 12);
          v92 -= 12;
          v110 = *((_DWORD *)v92 + 2);
          *(_QWORD *)(v108 - 12) = v109;
          v108 -= 12;
          *((_DWORD *)v108 + 2) = v110;
        }
        while (v92 != v95);
        v91 = a1;
        v111 = *a1;
        v92 = v107 + 12;
        *a1 = v108;
        a1[1] = v107 + 12;
        a1[2] = &v105[12 * v104];
        if (!v111)
          goto LABEL_142;
      }
      operator delete(v111);
LABEL_142:
      v91[1] = v92;
      v100 = (unsigned int *)*((_QWORD *)v89 + 1);
      v101 = (unsigned int *)*((_QWORD *)v89 + 2);
      if (v100 == v101)
        goto LABEL_123;
LABEL_143:
      v112 = v91[3];
      while (1)
      {
        v113 = &v112[12 * *v100];
        if (v93 != *(_DWORD *)v113)
        {
          if (v93 == *((_DWORD *)v113 + 1))
          {
            v113 += 4;
          }
          else
          {
            v114 = *((_DWORD *)v113 + 2);
            v113 += 8;
            if (v93 != v114)
              goto LABEL_146;
          }
        }
        *(_DWORD *)v113 = v96;
LABEL_146:
        if (++v100 == v101)
          goto LABEL_123;
      }
    }
LABEL_153:
    sub_2397A2E14(&__p);
    nullsub_4(&v140);
    v115 = (unsigned int *)v141;
    if (v141)
    {
      v116 = v142;
      v117 = v141;
      if (v142 != v141)
      {
        do
        {
          v118 = (void *)*((_QWORD *)v116 - 3);
          if (v118)
          {
            *((_QWORD *)v116 - 2) = v118;
            operator delete(v118);
          }
          v116 -= 8;
        }
        while (v116 != v115);
        v117 = v141;
      }
      v142 = v115;
      operator delete(v117);
    }
    v119 = (char *)v144;
    if (v144)
    {
      v120 = v145;
      v121 = v144;
      if (v145 != v144)
      {
        v122 = v145;
        do
        {
          v124 = (void *)*((_QWORD *)v122 - 3);
          v122 -= 24;
          v123 = v124;
          if (v124)
          {
            *((_QWORD *)v120 - 2) = v123;
            operator delete(v123);
          }
          v120 = v122;
        }
        while (v122 != v119);
        v121 = v144;
      }
      v145 = v119;
      operator delete(v121);
    }
    v125 = (char *)v147;
    if (v147)
    {
      v126 = v148;
      v127 = v147;
      if (v148 != v147)
      {
        v128 = v148;
        do
        {
          v130 = (void *)*((_QWORD *)v128 - 3);
          v128 -= 24;
          v129 = v130;
          if (v130)
          {
            *((_QWORD *)v126 - 2) = v129;
            operator delete(v129);
          }
          v126 = v128;
        }
        while (v128 != v125);
        v127 = v147;
      }
      v148 = v125;
      operator delete(v127);
    }
  }
  return 1;
}

void sub_2394E7CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, __int16 a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  sub_2394E9400(&a20);
  sub_23942A16C(&a23);
  sub_23942A16C(&a26);
  _Unwind_Resume(a1);
}

void sub_2394E7D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  if (__p)
  {
    operator delete(__p);
    v30 = *(void **)(v28 - 144);
    if (!v30)
    {
LABEL_3:
      v31 = (uint64_t)a27;
      if (!a27)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v30 = *(void **)(v28 - 144);
    if (!v30)
      goto LABEL_3;
  }
  operator delete(v30);
  v31 = (uint64_t)a27;
  if (!a27)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  v32 = a28;
  v33 = (void *)v31;
  if (a28 != v31)
  {
    do
    {
      v34 = v32 - 24;
      sub_2394EF618(v32 - 24, *(_QWORD **)(v32 - 16));
      v32 = v34;
    }
    while (v34 != v31);
    v33 = a27;
  }
  operator delete(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_2394E7E10(_QWORD *a1)
{
  _QWORD *v1;
  char *v2;
  unint64_t v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unsigned int v31;
  _QWORD *v32;
  _QWORD **v33;
  _QWORD *v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int *v55;
  unint64_t v56;
  char *v57;
  unsigned int v58;
  char *v59;
  char *v60;
  void *v61;
  char *v62;
  void *v63;
  void *v64;
  _QWORD *v66;
  char **v67;
  char **v68;
  unint64_t v69;
  void *__p;
  _QWORD *v71;
  unint64_t v72;
  void *v73;
  int v74[2];
  uint64_t v75;
  void *v76;
  char *v77;
  uint64_t v78;

  if (a1[4] != a1[3])
  {
    v1 = a1;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    sub_2396C4880(a1, (uint64_t)&v76);
    v73 = 0;
    *(_QWORD *)v74 = 0;
    v75 = 0;
    v2 = (char *)v76;
    if (v77 != v76)
    {
      v3 = 0;
      v66 = v1;
      do
      {
        v4 = (char **)&v2[24 * v3];
        v5 = *v4;
        if (v4[1] - *v4 == 8)
        {
          v67 = v4 + 1;
          v68 = v4;
          v69 = v3;
          v6 = 0;
          v7 = 0;
          v8 = v1[3];
          v9 = (unsigned int *)(v8 + 12 * *(unsigned int *)v5);
          v10 = v8 + 12 * *((unsigned int *)v5 + 1);
          v71 = 0;
          v72 = 0;
          __p = &v71;
          v11 = *v9;
          v12 = &v71;
          v13 = &v71;
LABEL_13:
          v16 = operator new(0x20uLL);
          *((_DWORD *)v16 + 7) = v11;
          *v16 = 0;
          v16[1] = 0;
          v16[2] = v13;
          *v12 = v16;
          if (*(_QWORD *)__p)
          {
            __p = *(void **)__p;
            v16 = (_QWORD *)*v12;
          }
          v17 = v71;
          v18 = v16 == v71;
          *((_BYTE *)v16 + 24) = v16 == v71;
          if (!v18)
          {
            do
            {
              v19 = v16[2];
              if (*(_BYTE *)(v19 + 24))
                break;
              v20 = *(_QWORD **)(v19 + 16);
              v21 = *v20;
              if (*v20 == v19)
              {
                v24 = v20[1];
                if (!v24 || (v25 = *(unsigned __int8 *)(v24 + 24), v22 = (_BYTE *)(v24 + 24), v25))
                {
                  if (*(_QWORD **)v19 == v16)
                  {
                    *(_BYTE *)(v19 + 24) = 1;
                    *((_BYTE *)v20 + 24) = 0;
                    v28 = *(_QWORD *)(v19 + 8);
                    *v20 = v28;
                    if (v28)
                      goto LABEL_30;
                  }
                  else
                  {
                    v26 = *(uint64_t **)(v19 + 8);
                    v27 = *v26;
                    *(_QWORD *)(v19 + 8) = *v26;
                    if (v27)
                    {
                      *(_QWORD *)(v27 + 16) = v19;
                      v20 = *(_QWORD **)(v19 + 16);
                    }
                    v26[2] = (uint64_t)v20;
                    *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * (**(_QWORD **)(v19 + 16) != v19)) = v26;
                    *v26 = v19;
                    *(_QWORD *)(v19 + 16) = v26;
                    v20 = (_QWORD *)v26[2];
                    v19 = *v20;
                    *((_BYTE *)v26 + 24) = 1;
                    *((_BYTE *)v20 + 24) = 0;
                    v28 = *(_QWORD *)(v19 + 8);
                    *v20 = v28;
                    if (v28)
LABEL_30:
                      *(_QWORD *)(v28 + 16) = v20;
                  }
                  *(_QWORD *)(v19 + 16) = v20[2];
                  *(_QWORD *)(v20[2] + 8 * (*(_QWORD *)v20[2] != (_QWORD)v20)) = v19;
                  *(_QWORD *)(v19 + 8) = v20;
LABEL_36:
                  v20[2] = v19;
                  break;
                }
              }
              else if (!v21 || (v23 = *(unsigned __int8 *)(v21 + 24), v22 = (_BYTE *)(v21 + 24), v23))
              {
                if (*(_QWORD **)v19 == v16)
                {
                  v49 = v16[1];
                  *(_QWORD *)v19 = v49;
                  if (v49)
                  {
                    *(_QWORD *)(v49 + 16) = v19;
                    v20 = *(_QWORD **)(v19 + 16);
                  }
                  v16[2] = v20;
                  *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * (**(_QWORD **)(v19 + 16) != v19)) = v16;
                  v16[1] = v19;
                  *(_QWORD *)(v19 + 16) = v16;
                  v20 = (_QWORD *)v16[2];
                  *((_BYTE *)v16 + 24) = 1;
                  *((_BYTE *)v20 + 24) = 0;
                  v19 = v20[1];
                  v29 = *(_QWORD **)v19;
                  v20[1] = *(_QWORD *)v19;
                  if (v29)
LABEL_34:
                    v29[2] = v20;
                }
                else
                {
                  *(_BYTE *)(v19 + 24) = 1;
                  *((_BYTE *)v20 + 24) = 0;
                  v19 = v20[1];
                  v29 = *(_QWORD **)v19;
                  v20[1] = *(_QWORD *)v19;
                  if (v29)
                    goto LABEL_34;
                }
                *(_QWORD *)(v19 + 16) = v20[2];
                *(_QWORD *)(v20[2] + 8 * (*(_QWORD *)v20[2] != (_QWORD)v20)) = v19;
                *(_QWORD *)v19 = v20;
                goto LABEL_36;
              }
              *(_BYTE *)(v19 + 24) = 1;
              v16 = v20;
              *((_BYTE *)v20 + 24) = v20 == v17;
              *v22 = 1;
            }
            while (v20 != v17);
          }
          v72 = ++v7;
          v30 = v71;
          while (1)
          {
            v31 = *(_DWORD *)(v10 + 4 * v6);
            v32 = &v71;
            v33 = &v71;
            if (v30)
            {
              v34 = v30;
              while (1)
              {
                while (1)
                {
                  v33 = (_QWORD **)v34;
                  v35 = *((_DWORD *)v34 + 7);
                  if (v31 >= v35)
                    break;
                  v34 = *v33;
                  v32 = v33;
                  if (!*v33)
                    goto LABEL_45;
                }
                if (v35 >= v31)
                  break;
                v34 = v33[1];
                if (!v34)
                {
                  v32 = v33 + 1;
                  goto LABEL_45;
                }
              }
            }
            else
            {
LABEL_45:
              v36 = operator new(0x20uLL);
              *((_DWORD *)v36 + 7) = v31;
              *v36 = 0;
              v36[1] = 0;
              v36[2] = v33;
              *v32 = v36;
              if (*(_QWORD *)__p)
              {
                __p = *(void **)__p;
                v36 = (_QWORD *)*v32;
              }
              v37 = v71;
              v18 = v36 == v71;
              *((_BYTE *)v36 + 24) = v36 == v71;
              if (!v18)
              {
                do
                {
                  v38 = v36[2];
                  if (*(_BYTE *)(v38 + 24))
                    break;
                  v39 = *(_QWORD **)(v38 + 16);
                  v40 = *v39;
                  if (*v39 == v38)
                  {
                    v43 = v39[1];
                    if (!v43 || (v44 = *(unsigned __int8 *)(v43 + 24), v41 = (_BYTE *)(v43 + 24), v44))
                    {
                      if (*(_QWORD **)v38 == v36)
                      {
                        *(_BYTE *)(v38 + 24) = 1;
                        *((_BYTE *)v39 + 24) = 0;
                        v47 = *(_QWORD *)(v38 + 8);
                        *v39 = v47;
                        if (v47)
                          goto LABEL_62;
                      }
                      else
                      {
                        v45 = *(uint64_t **)(v38 + 8);
                        v46 = *v45;
                        *(_QWORD *)(v38 + 8) = *v45;
                        if (v46)
                        {
                          *(_QWORD *)(v46 + 16) = v38;
                          v39 = *(_QWORD **)(v38 + 16);
                        }
                        v45[2] = (uint64_t)v39;
                        *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v45;
                        *v45 = v38;
                        *(_QWORD *)(v38 + 16) = v45;
                        v39 = (_QWORD *)v45[2];
                        v38 = *v39;
                        *((_BYTE *)v45 + 24) = 1;
                        *((_BYTE *)v39 + 24) = 0;
                        v47 = *(_QWORD *)(v38 + 8);
                        *v39 = v47;
                        if (v47)
LABEL_62:
                          *(_QWORD *)(v47 + 16) = v39;
                      }
                      *(_QWORD *)(v38 + 16) = v39[2];
                      *(_QWORD *)(v39[2] + 8 * (*(_QWORD *)v39[2] != (_QWORD)v39)) = v38;
                      *(_QWORD *)(v38 + 8) = v39;
LABEL_68:
                      v39[2] = v38;
                      break;
                    }
                  }
                  else if (!v40 || (v42 = *(unsigned __int8 *)(v40 + 24), v41 = (_BYTE *)(v40 + 24), v42))
                  {
                    if (*(_QWORD **)v38 == v36)
                    {
                      v50 = v36[1];
                      *(_QWORD *)v38 = v50;
                      if (v50)
                      {
                        *(_QWORD *)(v50 + 16) = v38;
                        v39 = *(_QWORD **)(v38 + 16);
                      }
                      v36[2] = v39;
                      *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8 * (**(_QWORD **)(v38 + 16) != v38)) = v36;
                      v36[1] = v38;
                      *(_QWORD *)(v38 + 16) = v36;
                      v39 = (_QWORD *)v36[2];
                      *((_BYTE *)v36 + 24) = 1;
                      *((_BYTE *)v39 + 24) = 0;
                      v38 = v39[1];
                      v48 = *(_QWORD **)v38;
                      v39[1] = *(_QWORD *)v38;
                      if (v48)
LABEL_66:
                        v48[2] = v39;
                    }
                    else
                    {
                      *(_BYTE *)(v38 + 24) = 1;
                      *((_BYTE *)v39 + 24) = 0;
                      v38 = v39[1];
                      v48 = *(_QWORD **)v38;
                      v39[1] = *(_QWORD *)v38;
                      if (v48)
                        goto LABEL_66;
                    }
                    *(_QWORD *)(v38 + 16) = v39[2];
                    *(_QWORD *)(v39[2] + 8 * (*(_QWORD *)v39[2] != (_QWORD)v39)) = v38;
                    *(_QWORD *)v38 = v39;
                    goto LABEL_68;
                  }
                  *(_BYTE *)(v38 + 24) = 1;
                  v36 = v39;
                  *((_BYTE *)v39 + 24) = v39 == v37;
                  *v41 = 1;
                }
                while (v39 != v37);
              }
              v72 = ++v7;
            }
            if (++v6 == 3)
              break;
            v30 = v71;
            v11 = v9[v6];
            v12 = &v71;
            v13 = &v71;
            if (!v71)
              goto LABEL_13;
            v14 = v71;
            while (1)
            {
              while (1)
              {
                v13 = (_QWORD **)v14;
                v15 = *((_DWORD *)v14 + 7);
                if (v11 >= v15)
                  break;
                v14 = *v13;
                v12 = v13;
                if (!*v13)
                  goto LABEL_13;
              }
              if (v15 >= v11)
                break;
              v14 = v13[1];
              if (!v14)
              {
                v12 = v13 + 1;
                goto LABEL_13;
              }
            }
          }
          sub_239421038((uint64_t)&__p, v71);
          v1 = v66;
          v3 = v69;
          if (v7 == 3)
            sub_2394F33F0((unint64_t *)&v73, *(void **)v74, *v68, *v67, (*v67 - *v68) >> 2);
        }
        ++v3;
        v2 = (char *)v76;
      }
      while (v3 < 0xAAAAAAAAAAAAAAABLL * ((v77 - (_BYTE *)v76) >> 3));
    }
    v52 = v1[3];
    v51 = v1[4];
    v71 = 0;
    v72 = 0;
    __p = 0;
    v53 = v51 - v52;
    if (v53)
    {
      if (v53 < 0)
        sub_2394189F8();
      v54 = 0xAAAAAAAAAAAAAAABLL * (v53 >> 2);
      __p = operator new(8 * (((v54 - 1) >> 6) + 1));
      v71 = 0;
      v72 = ((v54 - 1) >> 6) + 1;
      sub_23942D8C8(&__p, v54, 0);
    }
    v55 = (unsigned int *)v73;
    if (*(void **)v74 != v73)
    {
      v56 = (uint64_t)(*(_QWORD *)v74 - (_QWORD)v73) >> 2;
      v57 = (char *)__p;
      if (v56 <= 1)
        v56 = 1;
      do
      {
        v58 = *v55++;
        *(_QWORD *)&v57[((unint64_t)v58 >> 3) & 0x1FFFFFF8] |= 1 << v58;
        --v56;
      }
      while (v56);
    }
    sub_2396C3B28(v1, (uint64_t)&__p, 1);
    if (__p)
      operator delete(__p);
    if (v73)
    {
      *(_QWORD *)v74 = v73;
      operator delete(v73);
    }
    v59 = (char *)v76;
    if (v76)
    {
      v60 = v77;
      v61 = v76;
      if (v77 != v76)
      {
        v62 = v77;
        do
        {
          v64 = (void *)*((_QWORD *)v62 - 3);
          v62 -= 24;
          v63 = v64;
          if (v64)
          {
            *((_QWORD *)v60 - 2) = v63;
            operator delete(v63);
          }
          v60 = v62;
        }
        while (v62 != v59);
        v61 = v76;
      }
      v77 = v59;
      operator delete(v61);
    }
  }
  return 1;
}

void sub_2394E8508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v21;

  if (__p)
  {
    operator delete(__p);
    v21 = a17;
    if (!a17)
    {
LABEL_3:
      sub_23942A16C(&a20);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v21 = a17;
    if (!a17)
      goto LABEL_3;
  }
  operator delete(v21);
  sub_23942A16C(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_2394E85A0(uint64_t *a1, char **a2, uint64_t a3)
{
  float64x2_t v5;
  int8x16_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  void *v14[3];
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20;
  void *v21;
  char v22;
  void *__p;
  void *v24;
  char v25;
  void *v26;
  void *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (*(_BYTE *)(a3 + 6))
  {
    sub_2394ED554(v14, (uint64_t)a1);
    sub_2394E716C((char **)v14, 1, 1, 1);
    sub_2394FB33C((uint64_t *)v14, (uint64_t)&v32, &v29);
    if (v25 && __p)
    {
      v24 = __p;
      operator delete(__p);
    }
    if (v22 && v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    if (v19 && v17)
    {
      v18 = v17;
      operator delete(v17);
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
    if (v14[0])
    {
      v14[1] = v14[0];
      operator delete(v14[0]);
    }
  }
  else
  {
    sub_2394FB33C(a1, (uint64_t)&v32, &v29);
  }
  v6.i32[0] = *(_DWORD *)a3;
  *(float *)v5.f64 = *(float *)a3 * (float)(0x8E38E38E38E38E39 * ((v33 - v32) >> 3));
  sub_2394F8DB8(&v32, (uint64_t *)&v29, &v26, (unint64_t)*(float *)v5.f64, v5, v6, v7, v8, v9, v10, v11, v12);
  sub_2394FAF10((uint64_t *)&v32, (uint64_t *)&v29, (uint64_t)a2);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (*(_BYTE *)(a3 + 7))
    sub_2394E716C(a2, 1, 1, 1);
  sub_2394E7E10(a2);
  sub_2394E87E0(a2, 1);
  return 1;
}

void sub_2394E8754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;
  void *v13;

  v12 = *(void **)(v10 - 80);
  if (v12)
  {
    *(_QWORD *)(v10 - 72) = v12;
    operator delete(v12);
    v13 = *(void **)(v10 - 56);
    if (!v13)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v13 = *(void **)(v10 - 56);
    if (!v13)
      goto LABEL_3;
  }
  *(_QWORD *)(v10 - 48) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394E87E0(char **a1, int a2)
{
  char **v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  int **v8;
  void *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unsigned int *v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  char *v67;
  void *v68;
  char *v69;
  void *v70;
  void *v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  char *v82;
  char *v83;
  char *v84;
  void *v85;
  void *v86;
  int **v87;
  int **v88;
  int **v89;
  int **v90;
  int *v91;
  int *v92;
  int v94;
  char **v95;
  int **v96;
  int **v97;
  _QWORD *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  char *v103;
  void *v104[3];
  void *__p;
  char *v106;
  uint64_t v107;
  __int16 v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  int **v112;
  int **v113;
  uint64_t v114;

  if (0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 2) >= 2)
  {
    v3 = a1;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    sub_2396C4880(a1, (uint64_t)&v112);
    v5 = v3[3];
    v4 = v3[4];
    v110 = 0;
    v111 = 0;
    v109 = 0;
    v6 = v4 - v5;
    if (v6)
    {
      if (v6 < 0)
        sub_2394189F8();
      v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
      v109 = (char *)operator new(8 * (((v7 - 1) >> 6) + 1));
      v110 = 0;
      v111 = ((v7 - 1) >> 6) + 1;
      sub_23942D8C8(&v109, v7, 0);
    }
    v108 = 0;
    v8 = v112;
    v96 = v113;
    if (v112 != v113)
    {
      v94 = a2;
      v95 = v3;
      do
      {
        __p = 0;
        v106 = 0;
        v107 = 0;
        memset(v104, 0, sizeof(v104));
        sub_2396C4F40(v3, v8, &__p, (_QWORD **)v104, (_BYTE *)&v108 + 1, &v108);
        if (HIBYTE(v108))
        {
          v10 = operator new(0x10uLL);
          *v10 = 0;
          v10[1] = 0;
          v99 = 0;
          v100 = 0;
          v101 = 0;
          v98 = v10;
          sub_2394F0CF4(&v102, 2uLL, (uint64_t)&v99);
          v97 = v8;
          if (v99)
          {
            v100 = v99;
            operator delete(v99);
          }
          v11 = v106;
          if (v106 != __p)
          {
            v12 = 0;
            v11 = (char *)__p;
            while (1)
            {
              v15 = v102;
              if (((*(_QWORD *)((char *)v104[0] + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
              {
                v27 = (char *)*((_QWORD *)v102 + 1);
                v26 = *((_QWORD *)v102 + 2);
                if ((unint64_t)v27 < v26)
                {
                  *(_DWORD *)v27 = v12;
                  v28 = (uint64_t)(v27 + 4);
LABEL_62:
                  v15[1] = v28;
                  v11 = (char *)__p;
                  v14 = v98;
                  goto LABEL_17;
                }
                v29 = *(char **)v102;
                v30 = (uint64_t)&v27[-*(_QWORD *)v102];
                v31 = v30 >> 2;
                v32 = (v30 >> 2) + 1;
                if (v32 >> 62)
LABEL_115:
                  sub_2394189F8();
                v33 = v26 - (_QWORD)v29;
                if (v33 >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v34 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  if (v34 >> 62)
LABEL_114:
                    sub_239418A80();
                  v35 = operator new(4 * v34);
                  v36 = &v35[4 * v31];
                  *v36 = v12;
                  v28 = (uint64_t)(v36 + 1);
                  if (v27 != v29)
                  {
LABEL_41:
                    v37 = v27 - 4 - v29;
                    if (v37 < 0x2C)
                      goto LABEL_119;
                    if ((unint64_t)(v27 - &v35[v30]) < 0x20)
                      goto LABEL_119;
                    v47 = (v37 >> 2) + 1;
                    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
                    v49 = &v27[-v48];
                    v36 = (_DWORD *)((char *)v36 - v48);
                    v50 = &v35[4 * v31 - 16];
                    v51 = v27 - 16;
                    v52 = v47 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v53 = *(_OWORD *)v51;
                      *(v50 - 1) = *((_OWORD *)v51 - 1);
                      *v50 = v53;
                      v50 -= 2;
                      v51 -= 32;
                      v52 -= 8;
                    }
                    while (v52);
                    v27 = v49;
                    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_119:
                      do
                      {
                        v54 = *((_DWORD *)v27 - 1);
                        v27 -= 4;
                        *--v36 = v54;
                      }
                      while (v27 != v29);
                    }
                  }
                }
                else
                {
                  v35 = 0;
                  v36 = (_DWORD *)(4 * v31);
                  *(_DWORD *)(4 * v31) = v12;
                  v28 = 4 * v31 + 4;
                  if (v27 != v29)
                    goto LABEL_41;
                }
                *v15 = v36;
                v15[1] = v28;
                v15[2] = &v35[4 * v34];
                if (v29)
                  operator delete(v29);
                goto LABEL_62;
              }
              v17 = (char *)*((_QWORD *)v102 + 4);
              v16 = *((_QWORD *)v102 + 5);
              if ((unint64_t)v17 >= v16)
                break;
              *(_DWORD *)v17 = v12;
              v13 = (uint64_t)(v17 + 4);
LABEL_16:
              v15[4] = v13;
              v14 = v98 + 1;
LABEL_17:
              *v14 += (uint64_t)(*(_QWORD *)&v11[24 * v12 + 8] - *(_QWORD *)&v11[24 * v12]) >> 2;
              if (++v12 >= 0xAAAAAAAAAAAAAAABLL * ((v106 - v11) >> 3))
                goto LABEL_63;
            }
            v18 = (char *)*((_QWORD *)v102 + 3);
            v19 = (v17 - v18) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              goto LABEL_115;
            v21 = v16 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              if (v22 >> 62)
                goto LABEL_114;
              v23 = v22;
              v24 = operator new(4 * v22);
              v22 = v23;
              v25 = &v24[4 * v19];
              *v25 = v12;
              v13 = (uint64_t)(v25 + 1);
              if (v17 == v18)
                goto LABEL_50;
LABEL_44:
              v38 = v17 - 4 - v18;
              if (v38 < 0x2C)
                goto LABEL_120;
              if ((unint64_t)(v18 - v24) < 0x20)
                goto LABEL_120;
              v39 = (v38 >> 2) + 1;
              v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
              v41 = &v17[-v40];
              v25 = (_DWORD *)((char *)v25 - v40);
              v42 = &v24[4 * v19 - 16];
              v43 = v17 - 16;
              v44 = v39 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v45 = *(_OWORD *)v43;
                *(v42 - 1) = *((_OWORD *)v43 - 1);
                *v42 = v45;
                v42 -= 2;
                v43 -= 32;
                v44 -= 8;
              }
              while (v44);
              v17 = v41;
              if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_120:
                do
                {
                  v46 = *((_DWORD *)v17 - 1);
                  v17 -= 4;
                  *--v25 = v46;
                }
                while (v17 != v18);
              }
            }
            else
            {
              v24 = 0;
              v25 = (_DWORD *)(4 * v19);
              *(_DWORD *)(4 * v19) = v12;
              v13 = 4 * v19 + 4;
              if (v17 != v18)
                goto LABEL_44;
            }
LABEL_50:
            v15[3] = v25;
            v15[4] = v13;
            v15[5] = &v24[4 * v22];
            if (v18)
            {
              operator delete(v18);
              v11 = (char *)__p;
            }
            goto LABEL_16;
          }
LABEL_63:
          v55 = v98;
          v56 = (char *)v102;
          v57 = *((_QWORD *)v102 + 3 * (*v98 >= v98[1]));
          v58 = *((_QWORD *)v102 + 3 * (*v98 >= v98[1]) + 1);
          v59 = v58 - v57;
          v3 = v95;
          if (v58 != v57)
          {
            v60 = 0;
            v61 = v59 >> 2;
            v62 = v95[3];
            if (v61 <= 1)
              v61 = 1;
            do
            {
              v63 = *(unsigned int **)&v11[24 * *(int *)(v57 + 4 * v60)];
              v64 = *(_QWORD *)&v11[24 * *(int *)(v57 + 4 * v60) + 8] - (_QWORD)v63;
              if (v64)
              {
                v65 = v64 >> 2;
                if (v65 <= 1)
                  v65 = 1;
                do
                {
                  v66 = *v63++;
                  *(int32x2_t *)&v62[12 * v66] = vrev64_s32(*(int32x2_t *)&v62[12 * v66]);
                  --v65;
                }
                while (v65);
              }
              ++v60;
            }
            while (v60 != v61);
          }
          v67 = v103;
          v68 = v56;
          v8 = v97;
          if (v103 != v56)
          {
            v69 = v103;
            do
            {
              v71 = (void *)*((_QWORD *)v69 - 3);
              v69 -= 24;
              v70 = v71;
              if (v71)
              {
                *((_QWORD *)v67 - 2) = v70;
                operator delete(v70);
              }
              v67 = v69;
            }
            while (v69 != v56);
            v68 = v102;
            v55 = v98;
          }
          v103 = v56;
          operator delete(v68);
          operator delete(v55);
        }
        if ((_BYTE)v108)
        {
          v72 = (char *)__p;
          v73 = (char *)v104[0];
          if (v106 != __p)
          {
            v74 = 0;
            v75 = (v106 - (_BYTE *)__p) / 24;
            v76 = v109;
            if (v75 <= 1)
              v75 = 1;
            do
            {
              v77 = &v72[24 * v74];
              v78 = *(unsigned int **)v77;
              v79 = (unsigned int *)*((_QWORD *)v77 + 1);
              if (v78 != v79)
              {
                if (((*(_QWORD *)&v73[(v74 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v74) & 1) != 0)
                {
                  do
                  {
                    v80 = *v78++;
                    *(_QWORD *)&v76[((unint64_t)v80 >> 3) & 0x1FFFFFF8] |= 1 << v80;
                  }
                  while (v78 != v79);
                }
                else
                {
                  do
                  {
                    v81 = *v78++;
                    *(_QWORD *)&v76[((unint64_t)v81 >> 3) & 0x1FFFFFF8] &= ~(1 << v81);
                  }
                  while (v78 != v79);
                }
              }
              ++v74;
            }
            while (v74 != v75);
          }
        }
        else
        {
          v73 = (char *)v104[0];
        }
        if (v73)
          operator delete(v73);
        v82 = (char *)__p;
        if (__p)
        {
          v83 = v106;
          v9 = __p;
          if (v106 != __p)
          {
            v84 = v106;
            do
            {
              v86 = (void *)*((_QWORD *)v84 - 3);
              v84 -= 24;
              v85 = v86;
              if (v86)
              {
                *((_QWORD *)v83 - 2) = v85;
                operator delete(v85);
              }
              v83 = v84;
            }
            while (v84 != v82);
            v9 = __p;
          }
          v106 = v82;
          operator delete(v9);
        }
        v8 += 3;
      }
      while (v8 != v96);
      if ((_BYTE)v108)
        sub_2394E9470(&v109, v3, v94);
    }
    if (v109)
      operator delete(v109);
    v87 = v112;
    if (v112)
    {
      v88 = v113;
      v89 = v112;
      if (v113 != v112)
      {
        v90 = v113;
        do
        {
          v92 = *(v90 - 3);
          v90 -= 3;
          v91 = v92;
          if (v92)
          {
            *(v88 - 2) = v91;
            operator delete(v91);
          }
          v88 = v90;
        }
        while (v90 != v87);
        v89 = v112;
      }
      v113 = v87;
      operator delete(v89);
    }
  }
  return 1;
}

void sub_2394E8F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 136);
  if (v26)
    operator delete(v26);
  sub_23942A16C((void **)(v24 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_2394E8FB8(uint64_t *a1, void **a2, uint64_t a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  float v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  void *__p;
  uint64_t v22;
  int v23;
  void *v24;
  void *v25[2];
  void *v26[2];
  __int128 v27;
  void *v28;
  void *v29;
  char v30;
  void *v31;
  void *v32;
  char v33;
  void *v34;
  void *v35;
  char v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v37[0] = &off_250ADD1D8;
  v38 = v37;
  v6 = (float)(0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 2));
  v7 = *(float *)(a3 + 8);
  if (v7 <= v6)
  {
    v30 = 0;
    LOBYTE(v31) = 0;
    v33 = 0;
    LOBYTE(v34) = 0;
    v36 = 0;
    *(_OWORD *)v25 = 0u;
    *(_OWORD *)v26 = 0u;
    v27 = 0u;
    LOBYTE(v28) = 0;
    v22 = *(_QWORD *)a3;
    v23 = *(_DWORD *)(a3 + 8);
    v8 = *(float *)a3;
    sub_23948C0E0(&v24, a3 + 16);
    v9 = v7 / v6;
    v10 = v8 + 0.1;
    if ((float)(v8 + 0.1) > 1.0)
      v10 = 1.0;
    if (v9 < v8)
      v9 = v10;
    *(float *)&v22 = v9;
    HIBYTE(v22) = 1;
    sub_2394E85A0(a1, (char **)v25, (uint64_t)&v22);
    v12 = a1[3];
    v11 = a1[4];
    v14 = v26[1];
    v13 = v27;
    v19 = *(_QWORD *)a3;
    v20 = *(_DWORD *)(a3 + 8);
    sub_23948C0E0(&__p, a3 + 16);
    v15 = (float)(*(float *)&v19 * (float)(0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 2)))
        / (float)(0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v14) >> 2));
    if (v15 > 1.0)
      v15 = 1.0;
    *(float *)&v19 = v15;
    sub_2394E6ED4((uint64_t *)v25, a2, (uint64_t)&v19);
    if (__p)
      operator delete(__p);
    if (v24)
      operator delete(v24);
    if (v36 && v34)
    {
      v35 = v34;
      operator delete(v34);
    }
    if (v33 && v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (v30 && v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    if (v26[1])
    {
      *(void **)&v27 = v26[1];
      operator delete(v26[1]);
    }
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
  }
  else
  {
    sub_2394E6ED4(a1, a2, a3);
  }
  if (!v38)
    sub_2394172E0();
  (*(void (**)(_QWORD *))(*v38 + 48))(v38);
  v16 = v38;
  if (v38 == v37)
  {
    v17 = 4;
    v16 = v37;
    goto LABEL_31;
  }
  if (v38)
  {
    v17 = 5;
LABEL_31:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }
  return 1;
}

void sub_2394E9280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  sub_2394AEEDC((uint64_t)&a19);
  sub_239416834((_QWORD *)(v19 - 136));
  _Unwind_Resume(a1);
}

void sub_2394E92C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416834((_QWORD *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_2394E92DC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

void sub_2394E92F8(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  v2 = *a1;
  if (a2 > (a1[2] - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *((_DWORD *)v10 - 8) = *(_DWORD *)&v4[v9 - 32];
        *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 1) = *(_QWORD *)&v4[v9 - 8];
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_QWORD *)v11 - 1) = 0;
        v9 -= 32;
      }
      while (&v4[v9] != v2);
      v12 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v12)
      {
        do
        {
          v13 = (void *)*((_QWORD *)v2 - 3);
          if (v13)
          {
            *((_QWORD *)v2 - 2) = v13;
            operator delete(v13);
          }
          v2 -= 32;
        }
        while (v2 != v12);
        v2 = v12;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

void **sub_2394E9400(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2394E9470(_QWORD *a1, char **a2, int a3)
{
  _BYTE *v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  char *v22;
  unsigned int *v23;
  unsigned int *v24;
  char *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  char *v56;
  char *v57;
  void *v58;
  char *v59;
  char **v63;
  unsigned int v64;
  void *v65[2];
  void *__p[2];
  int v67;
  void *v68[2];
  void *v69[2];
  int v70;
  void *v71;
  _BYTE *v72;
  uint64_t v73;
  unsigned int v74[4];

  v71 = 0;
  v72 = 0;
  v73 = 0;
  sub_2396C2608(a2, (char **)&v71);
  *(_OWORD *)v68 = 0u;
  *(_OWORD *)v69 = 0u;
  v70 = 1065353216;
  v5 = (char *)v71;
  v4 = v72;
  if (v72 == v71)
    goto LABEL_77;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = &v5[24 * v6];
    v11 = *(_QWORD **)v8;
    v9 = v8 + 8;
    v10 = v11;
    if (v11 != v9)
    {
      while (1)
      {
        v12 = v10 + 4;
        v13 = *((unsigned int *)v10 + 8);
        if ((_DWORD)v13 != -1)
        {
          v14 = *((unsigned int *)v10 + 9);
          if ((_DWORD)v14 != -1)
          {
            v15 = *(_QWORD *)(*a1 + ((v13 >> 3) & 0x1FFFFFF8));
            v16 = *(_QWORD *)(*a1 + ((v14 >> 3) & 0x1FFFFFF8));
            v17 = a2[3];
            *(_QWORD *)v74 = __PAIR64__(*((_DWORD *)v10 + 7), v7);
            if (sub_2396C66D0((__int32 *)&v17[12 * v13], (__int32 *)&v17[12 * v14], (__int32 *)v74))
            {
              if ((((v15 >> v13) ^ (v16 >> v14)) & 1) != 0)
                goto LABEL_14;
            }
            else if ((((v15 >> v13) ^ (v16 >> v14)) & 1) == 0)
            {
LABEL_14:
              v65[0] = v74;
              v18 = sub_2394F0F18((uint64_t)v68, v74, (uint64_t)&unk_239EC6E98, (_QWORD **)v65);
              if (v18 + 3 != v12)
                v18[3] = *v12;
            }
          }
        }
        v19 = (_QWORD *)v10[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v10[2];
            v21 = *v20 == (_QWORD)v10;
            v10 = v20;
          }
          while (!v21);
        }
        v10 = v20;
        if (v20 == v9)
        {
          v5 = (char *)v71;
          v4 = v72;
          break;
        }
      }
    }
    v6 = ++v7;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) > v7);
  if (!v69[1])
    goto LABEL_77;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)__p = 0u;
  v67 = 1065353216;
  v22 = (char *)v69[0];
  if (!v69[0])
    goto LABEL_73;
  while (2)
  {
    v23 = (unsigned int *)(v22 + 16);
    v63 = (char **)v22;
    v24 = (unsigned int *)(v22 + 24);
    do
    {
      v64 = 0;
      v26 = *v23;
      v64 = *v23;
      if (v65[1])
      {
        v27 = (uint8x8_t)vcnt_s8((int8x8_t)v65[1]);
        v27.i16[0] = vaddlv_u8(v27);
        if (v27.u32[0] > 1uLL)
        {
          v28 = v26;
          if (v65[1] <= (void *)v26)
            v28 = v26 % (unint64_t)v65[1];
        }
        else
        {
          v28 = (LODWORD(v65[1]) - 1) & v26;
        }
        v29 = (uint64_t **)*((_QWORD *)v65[0] + v28);
        if (v29)
        {
          v30 = *v29;
          if (v30)
          {
            if (v27.u32[0] < 2uLL)
            {
              while (1)
              {
                v32 = v30[1];
                if (v32 == v26)
                {
                  if (*((_DWORD *)v30 + 4) == (_DWORD)v26)
                    goto LABEL_72;
                }
                else if ((v32 & ((unint64_t)v65[1] - 1)) != v28)
                {
                  goto LABEL_50;
                }
                v30 = (uint64_t *)*v30;
                if (!v30)
                  goto LABEL_50;
              }
            }
            do
            {
              v31 = v30[1];
              if (v31 == v26)
              {
                if (*((_DWORD *)v30 + 4) == (_DWORD)v26)
                {
LABEL_72:
                  *(_QWORD *)v74 = &v64;
                  LODWORD(v35) = *((_DWORD *)sub_2394F126C((uint64_t)v65, &v64, (uint64_t)&unk_239EC6E98, (_DWORD **)v74)
                                 + 5);
                  goto LABEL_68;
                }
              }
              else
              {
                if ((void *)v31 >= v65[1])
                  v31 %= (unint64_t)v65[1];
                if (v31 != v28)
                  break;
              }
              v30 = (uint64_t *)*v30;
            }
            while (v30);
          }
        }
      }
LABEL_50:
      v34 = *a2;
      v33 = a2[1];
      v35 = (v33 - *a2) / 12;
      v36 = (uint64_t)&(*a2)[12 * v26];
      v37 = (unint64_t)a2[2];
      if ((unint64_t)v33 >= v37)
      {
        v40 = v35 + 1;
        if ((unint64_t)(v35 + 1) > 0x1555555555555555)
          sub_2394189F8();
        v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - (_QWORD)v34) >> 2);
        if (2 * v41 > v40)
          v40 = 2 * v41;
        if (v41 >= 0xAAAAAAAAAAAAAAALL)
          v42 = 0x1555555555555555;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 > 0x1555555555555555)
            sub_239418A80();
          v43 = (char *)operator new(12 * v42);
        }
        else
        {
          v43 = 0;
        }
        v44 = *(_QWORD *)v36;
        v45 = &v43[12 * v35];
        *((_DWORD *)v45 + 2) = *(_DWORD *)(v36 + 8);
        *(_QWORD *)v45 = v44;
        v46 = v45;
        if (v33 != v34)
        {
          do
          {
            v47 = *(_QWORD *)(v33 - 12);
            v33 -= 12;
            v48 = *((_DWORD *)v33 + 2);
            *(_QWORD *)(v46 - 12) = v47;
            v46 -= 12;
            *((_DWORD *)v46 + 2) = v48;
          }
          while (v33 != v34);
          v33 = *a2;
        }
        v39 = v45 + 12;
        *a2 = v46;
        a2[1] = v45 + 12;
        a2[2] = &v43[12 * v42];
        if (v33)
          operator delete(v33);
      }
      else
      {
        v38 = *(_QWORD *)v36;
        *((_DWORD *)v33 + 2) = *(_DWORD *)(v36 + 8);
        *(_QWORD *)v33 = v38;
        v39 = v33 + 12;
      }
      a2[1] = v39;
      *(_QWORD *)v74 = &v64;
      *((_DWORD *)sub_2394F126C((uint64_t)v65, &v64, (uint64_t)&unk_239EC6E98, (_DWORD **)v74) + 5) = v35;
LABEL_68:
      v25 = &a2[3][12 * *v24];
      if (v64 == *(_DWORD *)v25)
        goto LABEL_28;
      if (v64 == *((_DWORD *)v25 + 1))
      {
        v25 += 4;
LABEL_28:
        *(_DWORD *)v25 = v35;
        goto LABEL_29;
      }
      v49 = *((_DWORD *)v25 + 2);
      v25 += 8;
      if (v64 == v49)
        goto LABEL_28;
LABEL_29:
      ++v23;
    }
    while (v23 != v24);
    v22 = *v63;
    if (*v63)
      continue;
    break;
  }
LABEL_73:
  sub_2394E716C(a2, 1, 0, a3);
  v50 = __p[0];
  if (__p[0])
  {
    do
    {
      v51 = (_QWORD *)*v50;
      operator delete(v50);
      v50 = v51;
    }
    while (v51);
  }
  v52 = v65[0];
  v65[0] = 0;
  if (v52)
    operator delete(v52);
LABEL_77:
  v53 = v69[0];
  if (v69[0])
  {
    do
    {
      v54 = (_QWORD *)*v53;
      operator delete(v53);
      v53 = v54;
    }
    while (v54);
  }
  v55 = v68[0];
  v68[0] = 0;
  if (v55)
    operator delete(v55);
  v56 = (char *)v71;
  if (v71)
  {
    v57 = v72;
    v58 = v71;
    if (v72 != v71)
    {
      do
      {
        v59 = v57 - 24;
        sub_239421038((uint64_t)(v57 - 24), *((_QWORD **)v57 - 2));
        v57 = v59;
      }
      while (v59 != v56);
      v58 = v71;
    }
    v72 = v56;
    operator delete(v58);
  }
  return 1;
}

void sub_2394E99CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  sub_239420950((uint64_t)va);
  sub_239420950((uint64_t)va1);
  sub_2394E9A28((void **)va2);
  _Unwind_Resume(a1);
}

void **sub_2394E9A28(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        sub_239421038((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2394E9A90(float64x2_t *a1, uint64_t a2, int a3)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  void *__p[3];
  void *v19[3];
  _OWORD v20[8];

  v5 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[2]), a1[3]);
  v20[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]);
  v20[1] = v5;
  v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[6]), a1[7]);
  v20[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[4]), a1[5]);
  v20[3] = v6;
  v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[10]), a1[11]);
  v20[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[8]), a1[9]);
  v20[5] = v7;
  v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[14]), a1[15]);
  v20[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a1[12]), a1[13]);
  v20[7] = v8;
  memset(v19, 0, sizeof(v19));
  sub_2394E9CA8((uint64_t)v20, (const float **)a2, (uint64_t *)v19);
  memset(__p, 0, sizeof(__p));
  sub_23941C5D8((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2), 0);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = 0;
    v13 = v11 / 12;
    v14 = (char *)v19[0];
    v15 = (char *)__p[0];
    if (v13 <= 1)
      v13 = 1;
    do
    {
      v16 = (unsigned int *)(v9 + 12 * v12);
      if (((*(_QWORD *)&v14[((unint64_t)*v16 >> 3) & 0x1FFFFFF8] >> *v16) & 1) == 0
        && ((*(_QWORD *)&v14[((unint64_t)v16[1] >> 3) & 0x1FFFFFF8] >> v16[1]) & 1) == 0
        && ((*(_QWORD *)&v14[((unint64_t)v16[2] >> 3) & 0x1FFFFFF8] >> v16[2]) & 1) == 0)
      {
        *(_QWORD *)&v15[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
      }
      ++v12;
    }
    while (v13 != v12);
  }
  sub_2396C3B28((_QWORD *)a2, (uint64_t)__p, 1);
  sub_2394E716C((char **)a2, 1, 0, a3);
  if (__p[0])
    operator delete(__p[0]);
  if (v19[0])
    operator delete(v19[0]);
  return 1;
}

void sub_2394E9C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2394E9CA8(uint64_t a1, const float **a2, uint64_t *a3)
{
  unint64_t v6;
  size_t v7;
  _DWORD *v8;
  const float *v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v14;
  BOOL v15;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v23;
  const float *v24;
  float *v25;
  unint64_t v26;
  int v27;
  const float *v28;
  unint64_t i;
  uint64_t v30;
  int v31;
  float v32;
  BOOL v33;
  float v34;
  BOOL v35;
  float v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::bad_alloc *exception;
  std::bad_alloc *v46;
  std::bad_alloc *v47;
  std::bad_alloc *v48;
  void *v49[2];
  int v50;
  int v51;
  void *v52[2];
  int v53;
  int v54;
  void *memptr[3];
  int v56;
  uint64_t v57;
  float32x4x3_t v58;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2);
  v7 = (16 * (v6 & 0x3FFFFFFF) + 31) & 0x7FFFFFFE0;
  v52[1] = (void *)(v7 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x100BBD03uLL);
  v8 = memptr[0];
  v52[0] = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v46 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v46, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v53 = 4;
  v54 = v6;
  v9 = *a2;
  v10 = (char *)a2[1] - (char *)*a2;
  if (v10)
  {
    v11 = v10 / 12;
    if (v11 <= 1)
      v11 = 1;
    if (v11 < 0x14
      || ((v12 = 16 * (v11 - 1), (char *)memptr[0] + v12 >= memptr[0])
        ? (_CF = (char *)memptr[0] + v12 + 4 >= (char *)memptr[0] + 4)
        : (_CF = 0),
          _CF ? (v14 = (char *)memptr[0] + v12 + 12 >= (char *)memptr[0] + 12) : (v14 = 0),
          v14 ? (v15 = (char *)memptr[0] + v12 + 8 >= (char *)memptr[0] + 8) : (v15 = 0),
          v15 ? (_ZF = (v11 - 1) >> 32 == 0) : (_ZF = 0),
          !_ZF
       || (v9 < (const float *)((char *)memptr[0] + 16 * v11) ? (v17 = memptr[0] >= &v9[3 * v11]) : (v17 = 1), !v17)))
    {
      v19 = 0;
LABEL_30:
      v26 = v11 - v19;
      v27 = 4 * v19;
      v28 = &v9[3 * v19 + 1];
      do
      {
        v8[v27] = *((_DWORD *)v28 - 1);
        v8[v27 + 1] = *(_DWORD *)v28;
        v8[v27 + 2] = *((_DWORD *)v28 + 1);
        v8[v27 + 3] = 1065353216;
        v27 += 4;
        v28 += 3;
        --v26;
      }
      while (v26);
      goto LABEL_32;
    }
    v18 = 0;
    v19 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    __asm { FMOV            V3.4S, #1.0 }
    v23 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = *a2;
    do
    {
      v58 = vld3q_f32(v24);
      v24 += 12;
      v25 = (float *)&v8[v18 & 0xFFFFFFF0];
      vst4q_f32(v25, *(float32x4x4_t *)(&_Q3 - 3));
      v18 += 16;
      v23 -= 4;
    }
    while (v23);
    if (v11 != v19)
      goto LABEL_30;
  }
LABEL_32:
  v49[1] = (void *)(v7 >> 2);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x100BBD03uLL);
  v49[0] = memptr[0];
  if (!memptr[0])
  {
    v47 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v48 = std::bad_alloc::bad_alloc(v47);
    __cxa_throw(v48, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v50 = 4;
  v51 = v6;
  memptr[1] = (void *)(a1 + 64);
  memptr[2] = v52;
  v56 = 1065353216;
  sub_2394F1570((uint64_t)v49, (uint64_t)memptr);
  a3[1] = 0;
  sub_2394187EC((uint64_t)a3, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  if (a2[1] != *a2)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2); ++i)
    {
      v31 = v50 * i;
      v32 = *((float *)v49[0] + (v50 * i));
      v33 = v32 < -0.5 || v32 > 0.5;
      if (v33
        || ((v34 = *((float *)v49[0] + (v31 + 1)), v34 >= -0.5) ? (v35 = v34 > 0.5) : (v35 = 1),
            v35 || (v36 = *((float *)v49[0] + (v31 + 2)), v36 < -0.5)))
      {
        v37 = 0;
        v38 = a3[1];
        v39 = a3[2];
        if (v38 == v39 << 6)
          goto LABEL_47;
      }
      else
      {
        v37 = v36 <= 0.5;
        v38 = a3[1];
        v39 = a3[2];
        if (v38 == v39 << 6)
        {
LABEL_47:
          if ((uint64_t)(v38 + 1) < 0)
            sub_2394189F8();
          v40 = v39 << 7;
          if (v40 <= (v38 & 0xFFFFFFFFFFFFFFC0) + 64)
            v40 = (v38 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v38 <= 0x3FFFFFFFFFFFFFFELL)
            v41 = v40;
          else
            v41 = 0x7FFFFFFFFFFFFFFFLL;
          sub_2394187EC((uint64_t)a3, v41);
          v38 = a3[1];
        }
      }
      a3[1] = v38 + 1;
      v42 = *a3;
      v43 = v38 >> 6;
      v44 = 1 << v38;
      if (v37)
        v30 = *(_QWORD *)(v42 + 8 * v43) | v44;
      else
        v30 = *(_QWORD *)(v42 + 8 * v43) & ~v44;
      *(_QWORD *)(v42 + 8 * v43) = v30;
    }
  }
  free(v49[0]);
  free(v52[0]);
}

void sub_2394EA090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a10);
  free(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_2394EA0D0(float64x2_t *a1, _QWORD *a2)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v65;
  float64x2_t v67;
  float64x2_t v69;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v79;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v86;
  float32x4_t v87;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v93;
  float64x2_t v95;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v100;
  float64x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  char v120;
  char v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  unsigned int v134;
  _BYTE v135[184];
  float32x4_t v136;
  float v137;
  float32x4_t v138;
  float v139;
  float32x4_t v140;
  float v141;
  float32x4_t v142;
  float v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  if (a2[4] == a2[3])
    return 1;
  sub_23996301C((uint64_t)v135);
  sub_2394E34C8((uint64_t)a2, (uint64_t)v135);
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v10 = a1[6];
  v9 = a1[7];
  __asm { FMOV            V7.2D, #-0.5 }
  v16 = vmulq_f64(*a1, _Q7);
  v17 = vmlaq_f64(v16, _Q7, v6);
  v18 = vmulq_f64(v4, _Q7);
  v19 = vmlaq_f64(v18, _Q7, v5);
  v20 = vaddq_f64(v9, vmlaq_f64(v19, _Q7, v7));
  v21 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1);
  v22 = vdivq_f64(vaddq_f64(v10, vmlaq_f64(v17, _Q7, v8)), v21);
  __asm { FMOV            V21.2D, #0.5 }
  v24 = vaddq_f64(v9, vmlaq_f64(v19, _Q21, v7));
  v25 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1);
  v26 = vdivq_f64(vaddq_f64(v10, vmlaq_f64(v17, _Q21, v8)), v25);
  v27 = vmlaq_f64(v16, _Q21, v6);
  v28 = vmlaq_f64(v18, _Q21, v5);
  v29 = vaddq_f64(v9, vmlaq_f64(v28, _Q7, v7));
  v30 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1);
  v31 = vdivq_f64(vaddq_f64(v10, vmlaq_f64(v27, _Q7, v8)), v30);
  v32 = vaddq_f64(v9, vmlaq_f64(v28, _Q21, v7));
  v33 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v32, 1);
  v34 = vdivq_f64(vaddq_f64(v10, vmlaq_f64(v27, _Q21, v8)), v33);
  v35 = vmulq_f64(*a1, _Q21);
  v36 = vmlaq_f64(v35, _Q7, v6);
  v37 = vmulq_f64(v4, _Q21);
  v38 = vmlaq_f64(v37, _Q7, v5);
  _Q10 = vaddq_f64(v9, vmlaq_f64(v38, _Q7, v7));
  v40 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q10, 1);
  v41 = vdivq_f64(vaddq_f64(v10, vmlaq_f64(v36, _Q7, v8)), v40);
  v42 = vaddq_f64(v9, vmlaq_f64(v38, _Q21, v7));
  v43 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1);
  v44 = vdivq_f64(vaddq_f64(v10, vmlaq_f64(v36, _Q21, v8)), v43);
  v45 = vmlaq_f64(v35, _Q21, v6);
  v46 = vaddq_f64(v10, vmlaq_f64(v45, _Q7, v8));
  v47 = vmlaq_f64(v37, _Q21, v5);
  v48 = vaddq_f64(v9, vmlaq_f64(v47, _Q7, v7));
  v49 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v48, 1);
  v50 = vdivq_f64(v46, v49);
  v51 = vaddq_f64(v10, vmlaq_f64(v45, _Q21, v8));
  v52 = vaddq_f64(v9, vmlaq_f64(v47, _Q21, v7));
  v53 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
  v54 = vdivq_f64(v51, v53);
  v55 = vdivq_f64(v20, v21);
  v56 = vdivq_f64(v24, v25);
  _Q22 = vdivq_f64(v29, v30);
  v58 = vdivq_f64(v32, v33);
  v59 = vdivq_f64(_Q10, v40);
  v60 = vdivq_f64(v48, v49);
  v61 = vdivq_f64(v52, v53);
  _Q28 = vsubq_f64(v56, v55);
  _Q17 = vsubq_f64(v26, v22);
  _Q5 = vsubq_f64(v31, v22);
  v65 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q28, 8uLL);
  _Q28.f64[1] = _Q17.f64[0];
  _Q6 = vsubq_f64(_Q22, v55);
  v67 = (float64x2_t)vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q6, 8uLL);
  _Q6.f64[1] = _Q5.f64[0];
  _Q21 = vmlsq_f64(vmulq_f64(v65, _Q6), _Q28, v67);
  v69 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q17, _Q5, 1), _Q5, _Q17, 1);
  _Q7 = (float32x4_t)vmulq_f64(_Q21, _Q21);
  _Q22.f64[0] = _Q21.f64[1];
  __asm { FMLA            D7, D22, V21.D[1] }
  _Q22.f64[0] = 1.0 / sqrt(vmlad_n_f64(*(double *)_Q7.i64, v69.f64[0], v69.f64[0]));
  v69.f64[0] = vmulq_f64(v69, _Q22).f64[0];
  v71 = vmulq_n_f64(_Q21, _Q22.f64[0]);
  v72 = vsubq_f64(vdivq_f64(v42, v43), v61);
  _Q25 = vsubq_f64(v44, v54);
  _Q30 = vsubq_f64(v50, v54);
  v75 = vsubq_f64(v60, v61);
  v76 = (float64x2_t)vextq_s8((int8x16_t)_Q25, (int8x16_t)v72, 8uLL);
  v72.f64[1] = _Q25.f64[0];
  v77 = (float64x2_t)vextq_s8((int8x16_t)_Q30, (int8x16_t)v75, 8uLL);
  v75.f64[1] = _Q30.f64[0];
  _Q22 = vmlsq_f64(vmulq_f64(v76, v75), v72, v77);
  v79 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q25, _Q30, 1), _Q30, _Q25, 1);
  _Q9 = vmulq_f64(_Q22, _Q22);
  _Q10.f64[0] = _Q22.f64[1];
  __asm { FMLA            D9, D10, V22.D[1] }
  _Q9.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q9.f64[0], v79.f64[0], v79.f64[0]));
  v79.f64[0] = vmulq_f64(v79, _Q9).f64[0];
  v81 = vmulq_n_f64(_Q22, _Q9.f64[0]);
  v82 = vsubq_f64(v59, v55);
  v83 = vsubq_f64(v41, v22);
  v84 = (float64x2_t)vextq_s8((int8x16_t)v83, (int8x16_t)v82, 8uLL);
  v82.f64[1] = v83.f64[0];
  _Q16 = vmlsq_f64(vmulq_f64(v84, _Q28), v82, v65);
  v86 = vmlsq_laneq_f64(vmulq_laneq_f64(v83, _Q17, 1), _Q17, v83, 1);
  _Q28.f64[0] = _Q16.f64[1];
  __asm { FMLA            D17, D28, V16.D[1] }
  _Q28.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q17.f64[0], v86.f64[0], v86.f64[0]));
  v87 = (float32x4_t)vmulq_f64(v86, _Q28);
  _Q4 = vsubq_f64(v34, v54);
  v89 = vsubq_f64(v58, v61);
  v90 = (float64x2_t)vextq_s8((int8x16_t)_Q4, (int8x16_t)v89, 8uLL);
  v89.f64[1] = _Q4.f64[0];
  v91 = vmulq_n_f64(_Q16, _Q28.f64[0]);
  _Q19 = vmlsq_f64(vmulq_f64(v77, v89), v75, v90);
  v93 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q30, _Q4, 1), _Q4, _Q30, 1);
  _Q28 = vmulq_f64(_Q19, _Q19);
  _Q30.f64[0] = _Q19.f64[1];
  __asm { FMLA            D28, D30, V19.D[1] }
  _Q28.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q28.f64[0], v93.f64[0], v93.f64[0]));
  v93.f64[0] = vmulq_f64(v93, _Q28).f64[0];
  v95 = vmulq_n_f64(_Q19, _Q28.f64[0]);
  _Q24 = vmlsq_f64(vmulq_f64(v67, v82), _Q6, v84);
  v97 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q5, v83, 1), v83, _Q5, 1);
  _Q6.f64[0] = _Q24.f64[1];
  __asm { FMLA            D5, D6, V24.D[1] }
  _Q6.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v97.f64[0], v97.f64[0]));
  _Q5.f64[0] = vmulq_f64(v97, _Q6).f64[0];
  v98 = vmulq_n_f64(_Q24, _Q6.f64[0]);
  _Q24 = vmlsq_f64(vmulq_f64(v90, v72), v89, v76);
  v100 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q4, _Q25, 1), _Q25, _Q4, 1);
  _Q25.f64[0] = _Q24.f64[1];
  __asm { FMLA            D4, D25, V24.D[1] }
  _Q25.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v100.f64[0], v100.f64[0]));
  *(float32x2_t *)_Q7.f32 = vcvt_f32_f64(v22);
  *(float *)v22.f64 = v55.f64[0];
  _Q7.i32[2] = LODWORD(v22.f64[0]);
  *(float32x2_t *)&v22.f64[0] = vcvt_f32_f64(v54);
  *(float *)v54.f64 = v61.f64[0];
  LODWORD(v22.f64[1]) = LODWORD(v54.f64[0]);
  *(float32x2_t *)&v55.f64[0] = vcvt_f32_f64(v71);
  *(float *)v54.f64 = v69.f64[0];
  LODWORD(v55.f64[1]) = LODWORD(v54.f64[0]);
  v101 = vmulq_n_f64(_Q24, _Q25.f64[0]);
  v102 = vmulq_f32((float32x4_t)v55, (float32x4_t)v55);
  HIDWORD(v55.f64[1]) = 0;
  v102.i32[3] = 0;
  v102.i64[0] = vpaddq_f32(v102, v102).u64[0];
  v102.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v102.f32));
  v103 = vdivq_f32((float32x4_t)v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 0));
  v104 = vmulq_f32(_Q7, v103);
  v104.i32[3] = 0;
  v136 = v103;
  *(float32x2_t *)v103.f32 = vcvt_f32_f64(v81);
  *(float *)v69.f64 = v79.f64[0];
  v103.i32[2] = LODWORD(v69.f64[0]);
  v105 = vmulq_f32(v103, v103);
  v103.i32[3] = 0;
  v105.i32[3] = 0;
  v105.i64[0] = vpaddq_f32(v105, v105).u64[0];
  v105.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v105.f32));
  v106 = vdivq_f32(v103, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 0));
  v107 = vmulq_f32((float32x4_t)v22, v106);
  v107.i32[3] = 0;
  v138 = v106;
  v137 = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v104, v104));
  v139 = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v107, v107));
  *(float32x2_t *)v106.f32 = vcvt_f32_f64(v91);
  v104.f32[0] = *(double *)v87.i64;
  v106.i32[2] = v104.i32[0];
  v108 = vmulq_f32(v106, v106);
  v106.i32[3] = 0;
  v108.i32[3] = 0;
  v108.i64[0] = vpaddq_f32(v108, v108).u64[0];
  v108.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v108.f32));
  v109 = vdivq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0));
  v110 = vmulq_f32(_Q7, v109);
  v110.i32[3] = 0;
  *(float32x2_t *)v87.f32 = vcvt_f32_f64(v95);
  *(float *)v93.f64 = v93.f64[0];
  v87.i32[2] = LODWORD(v93.f64[0]);
  v111 = vmulq_f32(v87, v87);
  v87.i32[3] = 0;
  v140 = v109;
  v111.i32[3] = 0;
  v109.i64[0] = vpaddq_f32(v111, v111).u64[0];
  v109.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v109.f32));
  v112 = vdivq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 0));
  v113 = vmulq_f32((float32x4_t)v22, v112);
  v113.i32[3] = 0;
  v142 = v112;
  *(float32x2_t *)v112.f32 = vcvt_f32_f64(v98);
  *(float *)_Q5.f64 = _Q5.f64[0];
  v112.i32[2] = LODWORD(_Q5.f64[0]);
  v114 = vmulq_f32(v112, v112);
  v112.i32[3] = 0;
  v141 = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v110, v110));
  v143 = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v113, v113));
  v114.i32[3] = 0;
  v110.i64[0] = vpaddq_f32(v114, v114).u64[0];
  v110.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v110.f32));
  v115 = vdivq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 0));
  v116 = vmulq_f32(_Q7, v115);
  v116.i32[3] = 0;
  *(float32x2_t *)&v101.f64[0] = vcvt_f32_f64(v101);
  *(float *)_Q4.f64 = vmulq_f64(v100, _Q25).f64[0];
  LODWORD(v101.f64[1]) = LODWORD(_Q4.f64[0]);
  v117 = vmulq_f32((float32x4_t)v101, (float32x4_t)v101);
  HIDWORD(v101.f64[1]) = 0;
  v117.i32[3] = 0;
  v144 = v115;
  v115.i64[0] = vpaddq_f32(v117, v117).u64[0];
  v115.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v115.f32));
  v118 = vdivq_f32((float32x4_t)v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 0));
  v119 = vmulq_f32((float32x4_t)v22, v118);
  v119.i32[3] = 0;
  v146 = v118;
  v145 = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v116, v116));
  v147 = -vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v119, v119));
  v134 = 2;
  v120 = sub_23992BA7C((size_t)v135, &v136, 0, (int *)&v134, 1, 0.0000011920929);
  if (v134 > 1)
    v121 = 1;
  else
    v121 = v120;
  if ((v121 & 1) == 0)
    goto LABEL_27;
  v134 = 2;
  v122 = sub_23992BA7C((size_t)v135, &v138, 0, (int *)&v134, 1, 0.0000011920929);
  v123 = v134 > 1 ? 1 : v122;
  if (v123 != 1)
    goto LABEL_27;
  v134 = 2;
  v124 = sub_23992BA7C((size_t)v135, &v140, 0, (int *)&v134, 1, 0.0000011920929);
  v125 = v134 > 1 ? 1 : v124;
  if (v125 != 1)
    goto LABEL_27;
  v134 = 2;
  v126 = sub_23992BA7C((size_t)v135, &v142, 0, (int *)&v134, 1, 0.0000011920929);
  v127 = v134 > 1 ? 1 : v126;
  if (v127 == 1
    && ((v134 = 2, v128 = sub_23992BA7C((size_t)v135, &v144, 0, (int *)&v134, 1, 0.0000011920929), v134 > 1)
      ? (v129 = 1)
      : (v129 = v128),
        v129 == 1
     && ((v134 = 2, v130 = sub_23992BA7C((size_t)v135, &v146, 0, (int *)&v134, 1, 0.0000011920929), v134 > 1)
       ? (v131 = 1)
       : (v131 = v130),
         v131 == 1)))
  {
    sub_2394E3FC0((uint64_t)v135, (uint64_t)a2);
    sub_2394E7E10(a2);
    v132 = 1;
  }
  else
  {
LABEL_27:
    v132 = 0;
  }
  sub_23996303C(v135);
  return v132;
}

void sub_2394EA7BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23996303C(va);
  _Unwind_Resume(a1);
}

void sub_2394EA7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23996303C(va);
  _Unwind_Resume(a1);
}

void sub_2394EA7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23996303C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2394EA7FC(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  char *v23;
  void *v24;
  void *v25;
  void *__p;
  void *v28;
  uint64_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  _QWORD v33[3];
  _QWORD *v34;
  unint64_t v35[46];

  v35[44] = *MEMORY[0x24BDAC8D0];
  v30 = 0;
  v31 = 0;
  v32 = 0;
  sub_2396C037C(a1, (uint64_t *)&v30, 0, 0, 0);
  __p = 0;
  v28 = 0;
  v29 = 0;
  v8 = a1[1] - *a1;
  if (v8)
    sub_2394E6878((char **)&__p, 0xAAAAAAAAAAAAAAABLL * (v8 >> 2));
  if (a4 <= 0)
  {
    a4 = std::thread::hardware_concurrency();
    if (!a3)
      goto LABEL_18;
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    v9 = 0;
    while (1)
    {
      v28 = __p;
      sub_2397A2A50((uint64_t)v35, a4, 0);
      v11 = v30;
      v10 = v31;
      v34 = 0;
      v12 = operator new(0x28uLL);
      *v12 = &off_250ADD268;
      v12[1] = a1;
      v12[2] = &v30;
      v12[3] = &__p;
      v12[4] = a2;
      v34 = v12;
      sub_2397A376C(v35, 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3), v33, 0);
      v13 = v34;
      if (v34 == v33)
        break;
      if (v34)
      {
        v14 = 5;
LABEL_13:
        (*(void (**)(void))(*v13 + 8 * v14))();
      }
      v15 = *a1;
      if (a1[1] != *a1)
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = v15 + 12 * v17;
          v19 = *(_QWORD *)((char *)__p + v16);
          *(_DWORD *)(v18 + 8) = *(_DWORD *)((char *)__p + v16 + 8);
          *(_QWORD *)v18 = v19;
          ++v17;
          v15 = *a1;
          v16 += 12;
        }
        while (v17 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2));
      }
      sub_2397A2E14(v35);
      if (++v9 == a3)
        goto LABEL_18;
    }
    v13 = v33;
    v14 = 4;
    goto LABEL_13;
  }
LABEL_18:
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  v20 = (char *)v30;
  if (v30)
  {
    v21 = v31;
    v22 = v30;
    if (v31 != v30)
    {
      v23 = v31;
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 3);
        v23 -= 24;
        v24 = v25;
        if (v25)
        {
          *((_QWORD *)v21 - 2) = v24;
          operator delete(v24);
        }
        v21 = v23;
      }
      while (v23 != v20);
      v22 = v30;
    }
    v31 = v20;
    operator delete(v22);
  }
  return 1;
}

void sub_2394EAA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_23942A16C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_2394EAADC(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float *v15;
  unint64_t v16;
  float *v17;
  float v18;
  float *v19;
  float v20;
  float *v21;
  float v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float *v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  BOOL v35;
  float v36;
  BOOL v37;
  unint64_t v38;
  float v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  unsigned int v64;
  int v65;
  void *__p;
  float *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[32];
  uint64_t v73;
  _BYTE v74[24];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  _QWORD v80[3];
  _QWORD *v81;
  uint64_t v82[7];
  unsigned int v83;
  float v84;
  _DWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  unint64_t v88[45];

  v88[44] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
    return 1;
  sub_23996301C((uint64_t)v72);
  sub_2394E34C8(a1, (uint64_t)v72);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  __p = 0;
  v67 = 0;
  v68 = 0;
  if (v78 != v77)
    sub_2394807B4((uint64_t)&v69, (v78 - v77) >> 2);
  if (a2 <= 0)
    a2 = std::thread::hardware_concurrency();
  sub_2397A15E0(&v65);
  sub_2397A2A50((uint64_t)v88, a2, 0);
  v9 = v77;
  v8 = v78;
  v87 = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_250ADD2B0;
  v10[1] = &v65;
  v10[2] = v72;
  v10[3] = &__p;
  v10[4] = &v69;
  v87 = v10;
  sub_2397A376C(v88, (v8 - v9) >> 2, v86, 0);
  v11 = v87;
  if (v87 == v86)
  {
    v12 = 4;
    v11 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_12;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_12:
  sub_2397A2D24((uint64_t)v88);
  v14 = (float *)__p;
  v15 = v67;
  v16 = ((char *)v67 - (_BYTE *)__p) >> 2;
  v17 = (float *)((char *)__p + 4 * (v16 >> 2));
  if (v17 != v67)
  {
    sub_2394F1C6C((float *)__p, v17, v67);
    v14 = (float *)__p;
    v15 = v67;
  }
  v18 = v14[(v16 >> 2)];
  v19 = &v14[(v16 >> 1)];
  if (v19 != v15)
  {
    sub_2394F1C6C(v14, v19, v15);
    v14 = (float *)__p;
    v15 = v67;
  }
  v20 = v14[(v16 >> 1)];
  v21 = &v14[(v16 >> 2) + (v16 >> 1)];
  if (v21 != v15)
  {
    sub_2394F1C6C(v14, v21, v15);
    v14 = (float *)__p;
  }
  v22 = v14[(v16 >> 2) + (v16 >> 1)];
  v81 = 0;
  sub_2394D8F38((uint64_t)v82, (v78 - v77) >> 2, -858993459 * ((v76 - v75) >> 2), v80);
  v23 = v81;
  if (v81 == v80)
  {
    v24 = 4;
    v23 = v80;
    goto LABEL_22;
  }
  if (v81)
  {
    v24 = 5;
LABEL_22:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  if (v78 != v77)
  {
    v25 = 0;
    v26 = (v78 - v77) >> 2;
    v27 = (float *)v69;
    v28 = v83;
    v29 = v82[0];
    v30 = v84;
    if (v26 <= 1)
      v26 = 1;
    do
    {
      if (a3 * a3 * ((v18 + 0.0 + v20 + v22) / 3.0) >= v27[v25])
      {
        if (v28 <= v25)
        {
LABEL_78:
          sub_239A444D4((uint64_t)"unknown file", 11, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v32 = v29 + 32 * v25;
        v36 = *(float *)(v32 + 16);
        v34 = v36 + 0.0;
        v37 = v36 <= 0.0;
        if (v36 <= 0.0)
          v34 = 0.0;
        v31 = 1.0 - v36;
        if (!v37)
          v31 = 1.0;
      }
      else
      {
        if (v28 <= v25)
          goto LABEL_78;
        v32 = v29 + 32 * v25;
        v33 = *(float *)(v32 + 16);
        v34 = 100.0;
        v35 = v33 <= 0.0;
        if (v33 > 0.0)
          v34 = v33 + 100.0;
        v31 = 0.0 - v33;
        if (!v35)
          v31 = 0.0;
      }
      *(float *)(v32 + 16) = v34 - v31;
      if (v34 < v31)
        v31 = v34;
      v30 = v30 + v31;
      v84 = v30;
      ++v25;
    }
    while (v26 != v25);
  }
  if (v76 != v75)
  {
    v38 = 0;
    v39 = a4;
    do
    {
      v64 = v38;
      v40 = (uint64_t *)(v73 + 16 * v79);
      v42 = *v40;
      v41 = (std::__shared_weak_count *)v40[1];
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (((*(_QWORD *)(*(_QWORD *)(v42 + 40) + 8 * (v38 >> 6)) >> v38) & 1) != 0)
        goto LABEL_46;
      v46 = *(unsigned int *)sub_239962518((uint64_t)v74, &v64);
      v47 = (uint64_t *)(v73 + 16 * v79);
      v49 = *v47;
      v48 = (std::__shared_weak_count *)v47[1];
      if (!v48)
        goto LABEL_58;
      v50 = (unint64_t *)&v48->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      do
        v52 = __ldaxr(v50);
      while (__stlxr(v52 - 1, v50));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
        if (((*(_QWORD *)(*(_QWORD *)(v49 + 40) + ((v46 >> 3) & 0x1FFFFFF8)) >> v46) & 1) != 0)
          goto LABEL_46;
      }
      else
      {
LABEL_58:
        if (((*(_QWORD *)(*(_QWORD *)(v49 + 40) + ((v46 >> 3) & 0x1FFFFFF8)) >> v46) & 1) != 0)
          goto LABEL_46;
      }
      v53 = *(unsigned int *)(sub_239962518((uint64_t)v74, &v64) + 16);
      v54 = (unsigned int *)sub_239962518((uint64_t)v74, &v64);
      v55 = sub_239962518((uint64_t)v74, v54);
      if (v83 <= v53)
      {
        v63 = 31;
        goto LABEL_81;
      }
      v56 = *(unsigned int *)(v55 + 16);
      if (v83 <= v56)
      {
        v63 = 33;
LABEL_81:
        sub_239A444D4((uint64_t)"unknown file", v63, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v57 = v85;
      *v85 = v56;
      v57[1] = v53;
      *((float *)v57 + 2) = v39;
      *((float *)v57 + 3) = v39;
      v85 = v57 + 4;
      v58 = v82[0];
      ++*(_DWORD *)(v82[0] + 32 * v53 + 20);
      ++*(_DWORD *)(v58 + 32 * v56 + 20);
LABEL_46:
      ++v38;
    }
    while (v38 < 0xCCCCCCCCCCCCCCCDLL * ((v76 - v75) >> 2));
  }
  sub_2394D98B0(v82);
  sub_2394D9CC4((uint64_t)v82, 1, 0);
  v60 = v77;
  v59 = v78;
  if (v78 != v77)
  {
    v61 = 0;
    do
    {
      if (*(int *)(v82[0] + 32 * v61 + 20) >= 1)
      {
        v64 = v61;
        sub_239968C38((uint64_t)v72, &v64);
        v60 = v77;
        v59 = v78;
      }
      ++v61;
    }
    while (v61 < (v59 - v60) >> 2);
  }
  if (sub_2394ED744((uint64_t)v72) && sub_2394ED928((uint64_t)v72))
    sub_2394EDB0C((uint64_t)v72);
  v13 = sub_2394E3FC0((uint64_t)v72, a1);
  sub_2394B6980((uint64_t)v82);
  sub_2397A2E14(v88);
  nullsub_4(&v65);
  if (__p)
  {
    v67 = (float *)__p;
    operator delete(__p);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  sub_23996303C(v72);
  return v13;
}

void sub_2394EB144(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, ...)
{
  void *v9;
  va_list va;

  va_start(va, a8);
  if (__p)
  {
    operator delete(__p);
    v9 = a6;
    if (!a6)
    {
LABEL_3:
      sub_23996303C(va);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v9 = a6;
    if (!a6)
      goto LABEL_3;
  }
  operator delete(v9);
  sub_23996303C(va);
  _Unwind_Resume(a1);
}

uint64_t sub_2394EB268(_QWORD *a1, unint64_t a2, double a3, double a4)
{
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  double v30;
  unint64_t v31;
  char *v32;
  double v33;
  double v34;
  double v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  _BYTE *v45;
  void *v46;
  _BYTE *v47;
  void *v48;
  void *v49;
  unint64_t v51;
  _QWORD *v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  int v57[2];
  uint64_t v58;
  void *__p;
  _BYTE *v60;
  char *v61;
  void *v62;
  _BYTE *v63;
  uint64_t v64;

  if (a1[1] - *a1 == 12)
    return 1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  sub_2396C4880(a1, (uint64_t)&v62);
  v8 = v62;
  if (v62 == v63)
    goto LABEL_52;
  __p = 0;
  v60 = 0;
  v61 = 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (_BYTE *)v62) >> 3);
  if (v9 >> 60)
    sub_2394189F8();
  v51 = a2;
  v52 = a1;
  v10 = operator new(0xAAAAAAAAAAAAAAB0 * ((v63 - (_BYTE *)v62) >> 3));
  v11 = 0;
  __p = v10;
  v60 = v10;
  v61 = (char *)&v10[2 * v9];
  do
  {
    v12 = (uint64_t)(v8[3 * v11 + 1] - v8[3 * v11]) >> 2;
    if (v10 < (_QWORD *)v61)
    {
      *v10 = v12;
      v10[1] = v11;
      v10 += 2;
      goto LABEL_6;
    }
    v13 = __p;
    v14 = ((char *)v10 - (_BYTE *)__p) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      sub_2394189F8();
    v16 = v61 - (_BYTE *)__p;
    if ((v61 - (_BYTE *)__p) >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 60)
        sub_239418A80();
      v18 = (char *)operator new(16 * v17);
      v19 = (uint64_t *)&v18[16 * v14];
      v20 = &v18[16 * v17];
      *v19 = v12;
      v19[1] = v11;
      v21 = (uint64_t)(v19 + 2);
      if (v10 != v13)
      {
        do
        {
LABEL_19:
          *((_OWORD *)v19 - 1) = *((_OWORD *)v10 - 1);
          v19 -= 2;
          v10 -= 2;
        }
        while (v10 != v13);
        v10 = __p;
        __p = v19;
        v60 = (_BYTE *)v21;
        v61 = v20;
        if (!v10)
          goto LABEL_24;
        goto LABEL_23;
      }
    }
    else
    {
      v19 = (uint64_t *)(16 * v14);
      v20 = 0;
      *v19 = v12;
      v19[1] = v11;
      v21 = 16 * v14 + 16;
      if (v10 != v13)
        goto LABEL_19;
    }
    __p = v19;
    v60 = (_BYTE *)v21;
    v61 = v20;
LABEL_23:
    operator delete(v10);
LABEL_24:
    v10 = (_QWORD *)v21;
LABEL_6:
    v60 = v10;
    ++v11;
    v8 = v62;
  }
  while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v63 - (_BYTE *)v62) >> 3));
  v22 = 126 - 2 * __clz(((char *)v10 - (_BYTE *)__p) >> 4);
  if (v10 == __p)
    v23 = 0;
  else
    v23 = v22;
  sub_2394F2014((unint64_t)__p, (char *)v10, v23, 1);
  *(_QWORD *)v57 = 0;
  v58 = 0;
  v56 = 0;
  sub_2394F2FD4((unint64_t *)&v56, 0, *((char **)v62 + 3 * *((_QWORD *)__p + 1)), *((char **)v62 + 3 * *((_QWORD *)__p + 1) + 1), (uint64_t)(*((_QWORD *)v62 + 3 * *((_QWORD *)__p + 1) + 1) - *((_QWORD *)v62 + 3 * *((_QWORD *)__p + 1))) >> 2);
  v25 = (char *)__p;
  v24 = v60;
  if ((unint64_t)(v60 - (_BYTE *)__p) >= 0x11)
  {
    v26 = 0;
    v27 = *(_QWORD *)__p;
    v28 = (double)v51;
    v29 = 1;
    v30 = a3;
    v31 = *(_QWORD *)__p;
    do
    {
      v32 = &v25[v26];
      v33 = (double)v31 * a3;
      v34 = (double)*(unint64_t *)&v25[v26 + 16];
      if (v33 >= v28)
        v33 = (double)v51;
      if (v33 < v34)
      {
        v35 = v30 * (double)v27;
        if (v35 >= v28)
          v35 = (double)v51;
        if (v35 < v34)
        {
          v36 = (char **)((char *)v62 + 24 * *(_QWORD *)&v25[v26 + 24]);
          sub_2394F2FD4((unint64_t *)&v56, *(void **)v57, *v36, v36[1], (v36[1] - *v36) >> 2);
          v31 = *((_QWORD *)v32 + 2);
          v27 += v31;
          v30 = v30 * a4;
          v25 = (char *)__p;
          v24 = v60;
        }
      }
      ++v29;
      v26 += 16;
    }
    while (v29 < (v24 - v25) >> 4);
  }
  v38 = v52[3];
  v37 = v52[4];
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v39 = v37 - v38;
  if (v39)
  {
    if (v39 < 0)
      sub_2394189F8();
    v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 2);
    v53 = operator new(8 * (((v40 - 1) >> 6) + 1));
    v54 = 0;
    v55 = ((v40 - 1) >> 6) + 1;
    sub_23942D8C8(&v53, v40, 1);
  }
  v41 = (int *)v56;
  if (*(void **)v57 != v56)
  {
    v42 = (uint64_t)(*(_QWORD *)v57 - (_QWORD)v56) >> 2;
    v43 = (char *)v53;
    if (v42 <= 1)
      v42 = 1;
    do
    {
      v44 = *v41++;
      *(_QWORD *)&v43[(v44 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v44);
      --v42;
    }
    while (v42);
  }
  sub_2396C3B28(v52, (uint64_t)&v53, 1);
  if (v53)
    operator delete(v53);
  if (v56)
  {
    *(_QWORD *)v57 = v56;
    operator delete(v56);
  }
  if (__p)
  {
    v60 = __p;
    operator delete(__p);
  }
  v8 = v62;
LABEL_52:
  if (v8)
  {
    v45 = v63;
    v46 = v8;
    if (v63 != (_BYTE *)v8)
    {
      v47 = v63;
      do
      {
        v49 = (void *)*((_QWORD *)v47 - 3);
        v47 -= 24;
        v48 = v49;
        if (v49)
        {
          *((_QWORD *)v45 - 2) = v48;
          operator delete(v48);
        }
        v45 = v47;
      }
      while (v47 != (_BYTE *)v8);
      v46 = v62;
    }
    v63 = v8;
    operator delete(v46);
  }
  return 1;
}

void sub_2394EB6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v21;
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v21 = a14;
    if (!a14)
    {
LABEL_3:
      v22 = a17;
      if (!a17)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v21 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v21);
  v22 = a17;
  if (!a17)
  {
LABEL_4:
    sub_23942A16C(&a20);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_23942A16C(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_2394EB79C(float **a1, char **a2)
{
  float *v4;
  float *v5;
  unint64_t v6;
  float *v7;
  _BYTE *v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  char *v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  char *v18;
  void *v19;
  char *v20;
  void *v21;
  void *v22;
  void *__p[3];
  void *v25[2];
  void *v26[2];
  int i;
  void *v28;
  char *v29;
  uint64_t v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  sub_2396BFD08(a2, &v28);
  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)v26 = 0u;
  for (i = 1065353216; v4 != v5; v4 += 3)
    sub_2394F3798((uint64_t)v25, v4, (uint64_t)v4);
  memset(__p, 0, sizeof(__p));
  sub_23941C5D8((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 2), 0);
  if (v29 != v28)
  {
    v6 = 0;
    do
    {
      v7 = sub_2394F3B48(v25, (float *)&(*a2)[12 * v6]);
      v8 = v28;
      if (v7)
      {
        v9 = (unsigned int **)((char *)v28 + 24 * v6);
        v10 = *v9;
        v11 = v9[1];
        if (v10 != v11)
        {
          v12 = (char *)__p[0];
          do
          {
            v13 = *v10++;
            *(_QWORD *)&v12[((unint64_t)v13 >> 3) & 0x1FFFFFF8] |= 1 << v13;
          }
          while (v10 != v11);
        }
      }
      ++v6;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v29 - v8) >> 3));
  }
  sub_2396C3B28(a2, (uint64_t)__p, 1);
  sub_2394E716C(a2, 1, 0, 1);
  if (__p[0])
    operator delete(__p[0]);
  v14 = v26[0];
  if (v26[0])
  {
    do
    {
      v15 = (_QWORD *)*v14;
      operator delete(v14);
      v14 = v15;
    }
    while (v15);
  }
  v16 = v25[0];
  v25[0] = 0;
  if (v16)
    operator delete(v16);
  v17 = (char *)v28;
  if (v28)
  {
    v18 = v29;
    v19 = v28;
    if (v29 != v28)
    {
      v20 = v29;
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 3);
        v20 -= 24;
        v21 = v22;
        if (v22)
        {
          *((_QWORD *)v18 - 2) = v21;
          operator delete(v21);
        }
        v18 = v20;
      }
      while (v20 != v17);
      v19 = v28;
    }
    v29 = v17;
    operator delete(v19);
  }
  return 1;
}

void sub_2394EB990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_23942A16C((void **)va);
  _Unwind_Resume(a1);
}

void sub_2394EB9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
    operator delete(__p);
  sub_239420950((uint64_t)&a13);
  sub_23942A16C(&a18);
  _Unwind_Resume(a1);
}

void sub_2394EB9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, _QWORD *__p, uint64_t a16, uint64_t a17, void *a18)
{
  _QWORD *v19;
  _QWORD *v20;

  v19 = __p;
  if (__p)
  {
    do
    {
      v20 = (_QWORD *)*v19;
      operator delete(v19);
      v19 = v20;
    }
    while (v20);
  }
  if (a13)
    operator delete(a13);
  sub_23942A16C(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_2394EBA0C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, void *a5, uint64_t a6)
{
  char v10;
  uint64_t *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  BOOL v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BYTE *v65;
  char *v66;
  void *v67;
  char *v68;
  void *v69;
  void *v70;
  char *v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *__p;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  char v85;
  void *v86;
  void *v87;
  char *v88;
  void *v89;
  void *v90;
  char *v91;
  void *v92;
  _BYTE *v93;
  uint64_t v94;
  void *v95;
  char *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _QWORD v100[3];
  _QWORD *v101;
  void *v102;
  char *v103;
  uint64_t v104;
  _QWORD v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[25];
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v98 = a5;
  v99 = a6;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v10 = sub_2396C4880(a1, (uint64_t)&v95);
  v11 = (uint64_t *)v95;
  if ((v10 & 1) != 0 && 0xAAAAAAAAAAAAAAABLL * ((v96 - (_BYTE *)v95) >> 3) >= 2)
  {
    v92 = 0;
    v93 = 0;
    v94 = 0;
    sub_2394B5624(a2, (uint64_t)&v92, 1);
    if (!(_BYTE)v99)
    {
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v20 = sub_2397A59B4((uint64_t)&v102);
      v21 = (char *)v102;
      if (!v20)
      {
        if (v102)
        {
          v72 = v103;
          v73 = v102;
          if (v103 != v102)
          {
            do
            {
              v74 = (std::__shared_weak_count *)*((_QWORD *)v72 - 1);
              if (v74)
              {
                p_shared_owners = (unint64_t *)&v74->__shared_owners_;
                do
                  v76 = __ldaxr(p_shared_owners);
                while (__stlxr(v76 - 1, p_shared_owners));
                if (!v76)
                {
                  ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                  std::__shared_weak_count::__release_weak(v74);
                }
              }
              v77 = (std::__shared_weak_count *)*((_QWORD *)v72 - 3);
              if (v77)
              {
                v78 = (unint64_t *)&v77->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              v72 -= 32;
            }
            while (v72 != v21);
            v73 = v102;
          }
          v103 = v21;
          operator delete(v73);
        }
        v12 = 0;
        v65 = v92;
        if (v92)
        {
LABEL_58:
          v93 = v65;
          operator delete(v65);
        }
LABEL_59:
        v11 = (uint64_t *)v95;
        if (!v95)
          return v12;
        goto LABEL_60;
      }
      v98 = v102;
      LOBYTE(v99) = 1;
      if (v102)
      {
        v22 = v103;
        if (v103 == v102)
        {
          v103 = (char *)v102;
          v23 = v102;
        }
        else
        {
          do
          {
            v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
            if (v24)
            {
              v25 = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
                std::__shared_weak_count::__release_weak(v24);
              }
            }
            v27 = (std::__shared_weak_count *)*((_QWORD *)v22 - 3);
            if (v27)
            {
              v28 = (unint64_t *)&v27->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }
            v22 -= 32;
          }
          while (v22 != v21);
          v23 = v102;
          v103 = v21;
        }
        operator delete(v23);
      }
    }
    v13 = nullsub_4(v98);
    sub_23946D5E0(v105, v13);
    v107 = 0u;
    v108 = 0u;
    v106 = 0u;
    v109 = 850045863;
    v110 = 0u;
    v111 = 0u;
    memset(v112, 0, sizeof(v112));
    v15 = a1[3];
    v14 = a1[4];
    v90 = 0;
    v91 = 0;
    v89 = 0;
    v16 = v14 - v15;
    if (v16)
    {
      v17 = v16 / 12;
      if ((unint64_t)(v16 / 12) >> 62)
        sub_2394189F8();
      v18 = (char *)operator new(4 * v17);
      v19 = &v18[4 * v17];
      v89 = v18;
      v91 = v19;
      bzero(v18, 4 * v17);
      v90 = v19;
      v86 = operator new(4 * v17);
      v88 = (char *)v86 + 4 * v17;
      bzero(v86, 4 * v17);
      v87 = v88;
      v85 = 0;
      if (a4 > 0)
      {
LABEL_27:
        sub_2397A15E0(&v84);
        sub_2397A15E0(&v83);
        sub_2397A2A50((uint64_t)&v102, a4, 0);
        v31 = v92;
        v30 = v93;
        v101 = 0;
        v32 = operator new(0x68uLL);
        *v32 = &off_250ADD2F8;
        v32[1] = &v92;
        v32[2] = a3;
        v32[3] = a2 + 856;
        v32[4] = a2;
        v32[5] = a1;
        v32[6] = &v98;
        v32[7] = v105;
        v32[8] = &v83;
        v32[9] = &v86;
        v32[10] = &v84;
        v32[11] = &v89;
        v32[12] = &v85;
        v101 = v32;
        sub_2397A3340((unint64_t *)&v102, (v30 - v31) >> 3, v100, 0);
        v33 = v101;
        if (v101 == v100)
        {
          v34 = 4;
          v33 = v100;
        }
        else
        {
          if (!v101)
            goto LABEL_32;
          v34 = 5;
        }
        (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_32:
        sub_2397A2D24((uint64_t)&v102);
        v35 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v96 - (_BYTE *)v95) >> 3));
        if (v96 == v95)
          v36 = 0;
        else
          v36 = v35;
        sub_2394F46B8((uint64_t *)v95, (uint64_t *)v96, v36, 1);
        v38 = a1[3];
        v37 = a1[4];
        v81 = 0;
        v82 = 0;
        __p = 0;
        v39 = v37 - v38;
        if (v39)
        {
          if (v39 < 0)
            sub_2394189F8();
          v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 2);
          __p = operator new(8 * (((v40 - 1) >> 6) + 1));
          v81 = 0;
          v82 = ((v40 - 1) >> 6) + 1;
          sub_23942D8C8(&__p, v40, 0);
          v39 = (uint64_t)__p;
        }
        v41 = (char *)v95;
        v42 = 0xAAAAAAAAAAAAAAABLL * ((v96 - (_BYTE *)v95) >> 3);
        if (v42 >= 2)
        {
          v43 = (char *)v89;
          v44 = (char *)v86;
          v45 = 1;
          while (1)
          {
            v46 = &v41[24 * v45];
            v47 = *(char **)v46;
            v48 = (char *)*((_QWORD *)v46 + 1);
            if (v47 != v48)
              break;
LABEL_40:
            if (++v45 == v42)
              goto LABEL_51;
          }
          v49 = v48 - v47 - 4;
          if (v49 >= 4)
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
            v56 = 0;
            v57 = (v49 >> 2) + 1;
            v52 = &v47[4 * (v57 & 0x7FFFFFFFFFFFFFFELL)];
            v58 = (unsigned int *)(v47 + 4);
            v59 = v57 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              v60 = 4 * *(v58 - 1);
              v61 = 4 * *v58;
              v55 += *(_DWORD *)&v43[v60];
              v56 += *(_DWORD *)&v43[v61];
              v53 += *(_DWORD *)&v44[v60];
              v54 += *(_DWORD *)&v44[v61];
              v58 += 2;
              v59 -= 2;
            }
            while (v59);
            v51 = v56 + v55;
            v50 = v54 + v53;
            if (v57 == (v57 & 0x7FFFFFFFFFFFFFFELL))
            {
LABEL_48:
              if (v51 < v50)
              {
                do
                {
                  v64 = *(_DWORD *)v47;
                  v47 += 4;
                  *(_QWORD *)(v39 + (((unint64_t)v64 >> 3) & 0x1FFFFFF8)) |= 1 << v64;
                }
                while (v47 != v48);
              }
              goto LABEL_40;
            }
          }
          else
          {
            v50 = 0;
            v51 = 0;
            v52 = v47;
          }
          do
          {
            v62 = *(_DWORD *)v52;
            v52 += 4;
            v63 = 4 * v62;
            v51 += *(_DWORD *)&v43[v63];
            v50 += *(_DWORD *)&v44[v63];
          }
          while (v52 != v48);
          goto LABEL_48;
        }
LABEL_51:
        sub_2396C3B28(a1, (uint64_t)&__p, 1);
        if (__p)
          operator delete(__p);
        v12 = v85 != 0;
        sub_2397A2E14(&v102);
        nullsub_4(&v83);
        nullsub_4(&v84);
        if (v86)
        {
          v87 = v86;
          operator delete(v86);
        }
        if (v89)
        {
          v90 = v89;
          operator delete(v89);
        }
        sub_239420D98((uint64_t)v105);
        v65 = v92;
        if (v92)
          goto LABEL_58;
        goto LABEL_59;
      }
    }
    else
    {
      v86 = 0;
      v87 = 0;
      v88 = 0;
      v85 = 0;
      if (a4 > 0)
        goto LABEL_27;
    }
    a4 = std::thread::hardware_concurrency();
    goto LABEL_27;
  }
  v12 = 0;
  if (!v95)
    return v12;
LABEL_60:
  v66 = v96;
  v67 = v11;
  if (v96 != (char *)v11)
  {
    v68 = v96;
    do
    {
      v70 = (void *)*((_QWORD *)v68 - 3);
      v68 -= 24;
      v69 = v70;
      if (v70)
      {
        *((_QWORD *)v66 - 2) = v69;
        operator delete(v69);
      }
      v66 = v68;
    }
    while (v68 != (char *)v11);
    v67 = v95;
  }
  v96 = (char *)v11;
  operator delete(v67);
  return v12;
}

void sub_2394EC0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, int a13, char a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  sub_239420D98(v36 - 208);
  if (a24)
  {
    operator delete(a24);
    sub_23942A16C(&a27);
    _Unwind_Resume(a1);
  }
  sub_23942A16C(&a27);
  _Unwind_Resume(a1);
}

void **sub_2394EC1C8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

uint64_t sub_2394EC2A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5, double a6, float32x4_t a7, float32x4_t a8, float32x4_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float32x4_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  unsigned int *v26;
  float32x4_t v27;
  unsigned int *v28;
  float *v29;
  float *v30;
  char *v31;
  float32x2_t v32;
  float v33;
  float *v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  float *v41;
  unint64_t v42;
  float *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  uint64_t v49;
  float *v50;
  unint64_t v51;
  float *v52;
  char *v53;
  char *v54;
  void *v55;
  char *v56;
  void *v57;
  void *v58;
  char *v59;
  char *v60;
  void *v61;
  char *v62;
  void *v63;
  void *v64;
  unint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  double v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  double v88;
  double v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  void *v93;
  float *v94;
  float *v95;
  void *v96;
  float *v97;
  void *v98;
  void *v99;
  int v100;
  unint64_t v103;
  uint64_t v104;
  unsigned int *__p;
  unint64_t v106;
  unsigned int v107;
  float32x4_t v108;
  void *v109;
  char *v110;
  uint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  double *v115;
  int *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  void *v120;
  float *v121;
  float *v122;
  int v123;
  double v124;
  _QWORD v125[3];
  _QWORD *v126;
  void *v127;
  char *v128;
  uint64_t v129;
  _QWORD v130[3];
  _QWORD *v131;
  void *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v124 = a5;
  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v100 = *(unsigned __int8 *)(a1 + 136);
  v107 = a4;
  if (a4 <= 0)
    v107 = std::thread::hardware_concurrency();
  v123 = 1000593162;
  v133 = 0;
  v132 = 0;
  v134 = 0;
  sub_2396C3770((_QWORD *)a1, (uint64_t)&v132, a5, a6, a7, a8, a9);
  v127 = 0;
  v128 = 0;
  v129 = 0;
  sub_2396C1F84((_QWORD *)a1, &v127, 0, 0);
  v14 = (v10 - v11) / 12;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v103 = v14;
  if (v10 == v11)
  {
    v16 = 0;
    goto LABEL_52;
  }
  v15 = 3 * v14;
  if ((unint64_t)(3 * v14) >> 62)
    sub_2394189F8();
  v16 = (float *)operator new(v10 - v11);
  v120 = v16;
  v121 = v16;
  v122 = &v16[v15];
  if (v10 == v11)
    goto LABEL_52;
  v18 = 0;
  v106 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v13) >> 2);
  v19 = (v10 - v11) / 12;
  do
  {
    v20 = (char *)v132 + 12 * v18;
    v17.i64[0] = *(_QWORD *)v20;
    v17.i32[2] = *((_DWORD *)v20 + 2);
    v108 = v17;
    v21 = (char *)v127 + 24 * v18;
    v118 = 0;
    v119 = 0;
    v117 = 0;
    v23 = *(_BYTE **)v21;
    v22 = (_BYTE *)*((_QWORD *)v21 + 1);
    v24 = v22 - v23;
    if (v22 != v23)
    {
      if (v24 < 0)
        sub_2394189F8();
      v104 = v18;
      v25 = (char *)operator new(v22 - v23);
      v26 = (unsigned int *)&v25[4 * (v24 >> 2)];
      memcpy(v25, v23, v24);
      v28 = (unsigned int *)v25;
      v29 = v121;
      __p = v28;
      while (1)
      {
        v31 = (char *)v132 + 12 * *v28;
        v27.i64[0] = *(_QWORD *)v31;
        v27.i32[2] = *((_DWORD *)v31 + 2);
        v27 = vsubq_f32(v108, v27);
        v32 = (float32x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
        v33 = sqrtf(vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1), *(float32x2_t *)v27.f32, 1), v32, v32).f32[0]);
        if (v29 >= v122)
          break;
        *v29 = v33;
        v30 = v29 + 1;
LABEL_15:
        v121 = v30;
        ++v28;
        v29 = v30;
        if (v28 == v26)
        {
          operator delete(__p);
          v19 = v103;
          v18 = v104;
          goto LABEL_10;
        }
      }
      v34 = (float *)v120;
      v35 = (char *)v29 - (_BYTE *)v120;
      v36 = ((char *)v29 - (_BYTE *)v120) >> 2;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62)
        sub_2394189F8();
      v38 = (char *)v122 - (_BYTE *)v120;
      if (((char *)v122 - (_BYTE *)v120) >> 1 > v37)
        v37 = v38 >> 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        if (v39 >> 62)
          sub_239418A80();
        v40 = operator new(4 * v39);
        v41 = (float *)&v40[4 * v36];
        *v41 = v33;
        v30 = v41 + 1;
        if (v29 == v34)
          goto LABEL_31;
      }
      else
      {
        v40 = 0;
        v41 = (float *)(4 * v36);
        *(float *)(4 * v36) = v33;
        v30 = (float *)(4 * v36 + 4);
        if (v29 == v34)
          goto LABEL_31;
      }
      v42 = (char *)(v29 - 1) - (char *)v34;
      if (v42 >= 0xBC)
      {
        if (&v40[v35 - 4 - (v42 & 0xFFFFFFFFFFFFFFFCLL)] > &v40[v35 - 4])
        {
          v43 = v29;
        }
        else if ((float *)((char *)v29 - (v42 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v29 - 1)
        {
          v43 = v29;
        }
        else if ((unint64_t)((char *)v29 - v40 - v35) >= 0x20)
        {
          v45 = (v42 >> 2) + 1;
          v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
          v43 = &v29[v46 / 0xFFFFFFFFFFFFFFFCLL];
          v41 = (float *)((char *)v41 - v46);
          v47 = (float32x4_t *)&v40[4 * v36 - 16];
          v48 = (float32x4_t *)(v29 - 4);
          v49 = v45 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v27 = *v48;
            v47[-1] = v48[-1];
            *v47 = v27;
            v47 -= 2;
            v48 -= 2;
            v49 -= 8;
          }
          while (v49);
          if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_31:
            v120 = v41;
            v121 = v30;
            v122 = (float *)&v40[4 * v39];
            if (v34)
              operator delete(v34);
            goto LABEL_15;
          }
        }
        else
        {
          v43 = v29;
        }
      }
      else
      {
        v43 = v29;
      }
      do
      {
        v44 = *((_DWORD *)v43-- - 1);
        *((_DWORD *)v41-- - 1) = v44;
      }
      while (v43 != v34);
      goto LABEL_31;
    }
LABEL_10:
    ++v18;
  }
  while (v18 != v19);
  v50 = (float *)v120;
  v16 = v121;
  if (v120 == v121)
  {
LABEL_52:
    if (v16)
    {
      v121 = v16;
      operator delete(v16);
    }
    v59 = (char *)v127;
    if (v127)
    {
      v60 = v128;
      v61 = v127;
      if (v128 != v127)
      {
        v62 = v128;
        do
        {
          v64 = (void *)*((_QWORD *)v62 - 3);
          v62 -= 24;
          v63 = v64;
          if (v64)
          {
            *((_QWORD *)v60 - 2) = v63;
            operator delete(v63);
          }
          v60 = v62;
        }
        while (v62 != v59);
        v61 = v127;
      }
      v128 = v59;
      operator delete(v61);
    }
    if (v132)
    {
      v133 = v132;
      operator delete(v132);
    }
    return 0;
  }
  v51 = (unint64_t)(((char *)v121 - (_BYTE *)v120) >> 2) >> 1;
  v52 = (float *)((char *)v120 + 4 * v51);
  if (v52 != v121)
  {
    sub_2394F1C6C((float *)v120, v52, v121);
    v50 = (float *)v120;
  }
  v123 = LODWORD(v50[v51]);
  v121 = v50;
  operator delete(v50);
  v53 = (char *)v127;
  if (v127)
  {
    v54 = v128;
    v55 = v127;
    if (v128 != v127)
    {
      v56 = v128;
      do
      {
        v58 = (void *)*((_QWORD *)v56 - 3);
        v56 -= 24;
        v57 = v58;
        if (v58)
        {
          *((_QWORD *)v54 - 2) = v57;
          operator delete(v57);
        }
        v54 = v56;
      }
      while (v56 != v53);
      v55 = v127;
    }
    v128 = v53;
    operator delete(v55);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  v116 = &v123;
  v115 = &v124;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_2396BFD08((_QWORD *)a1, &v120);
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  sub_2394E6878((char **)&v117, v19);
  if (v19)
    sub_2394807B4((uint64_t)&v112, v19);
  v66 = 0xAAAAAAAAAAAAAAABLL * ((v110 - (_BYTE *)v109) >> 2);
  if (v19 <= v66)
  {
    if (v19 < v66)
      v110 = (char *)v109 + 12 * v19;
  }
  else
  {
    sub_2394E6878((char **)&v109, v19 - v66);
  }
  if (a2)
  {
    v67 = 0;
    while (1)
    {
      sub_2396C342C(a1, 1);
      sub_2396C3770((_QWORD *)a1, (uint64_t)&v117, v68, v69, v70, v71, v72);
      sub_2396C3894((uint64_t *)a1, (uint64_t *)&v112, v73, v74, v75, v76);
      sub_2397A2A50((uint64_t)&v132, v107, 0);
      v131 = 0;
      v77 = operator new(0x40uLL);
      *v77 = &off_250ADD340;
      v77[1] = a1;
      v77[2] = &v117;
      v77[3] = &v120;
      v77[4] = &v112;
      v77[5] = &v116;
      v77[6] = &v115;
      v77[7] = &v109;
      v131 = v77;
      sub_2397A3340((unint64_t *)&v132, v103, v130, 0);
      v78 = v131;
      if (v131 == v130)
        break;
      if (v131)
      {
        v79 = 5;
LABEL_82:
        (*(void (**)(void))(*v78 + 8 * v79))();
      }
      sub_2397A2D24((uint64_t)&v132);
      v80 = 0;
      v81 = 0;
      do
      {
        if (!*(_BYTE *)(a1 + 136))
          sub_2394875CC();
        v82 = *(_QWORD *)(a1 + 112) + 12 * v81;
        v83 = *(_QWORD *)((char *)v109 + v80);
        *(_DWORD *)(v82 + 8) = *(_DWORD *)((char *)v109 + v80 + 8);
        *(_QWORD *)v82 = v83;
        ++v81;
        v80 += 12;
      }
      while (v103 != v81);
      v84 = a3;
      if (a3)
      {
        while (1)
        {
          sub_2397A2A50((uint64_t)&v127, v107, 0);
          v126 = 0;
          v85 = operator new(0x20uLL);
          *v85 = &off_250ADD388;
          v85[1] = &v120;
          v85[2] = a1;
          v85[3] = &v117;
          v126 = v85;
          sub_2397A3340((unint64_t *)&v127, v106, v125, 0);
          v86 = v126;
          if (v126 == v125)
            break;
          if (v126)
          {
            v87 = 5;
LABEL_91:
            (*(void (**)(void))(*v86 + 8 * v87))();
          }
          sub_2397A2D24((uint64_t)&v127);
          sub_2396C3770((_QWORD *)a1, (uint64_t)&v117, v88, v89, v90, v91, v92);
          sub_2397A2E14(&v127);
          if (!--v84)
            goto LABEL_77;
        }
        v86 = v125;
        v87 = 4;
        goto LABEL_91;
      }
LABEL_77:
      sub_2397A2E14(&v132);
      if (++v67 == a2)
        goto LABEL_94;
    }
    v78 = v130;
    v79 = 4;
    goto LABEL_82;
  }
LABEL_94:
  if (!v100 && *(_BYTE *)(a1 + 136))
  {
    v93 = *(void **)(a1 + 112);
    *(_QWORD *)(a1 + 120) = v93;
    if (v93)
      operator delete(v93);
    *(_BYTE *)(a1 + 136) = 0;
  }
  if (v109)
  {
    v110 = (char *)v109;
    operator delete(v109);
  }
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  v94 = (float *)v120;
  if (v120)
  {
    v95 = v121;
    v96 = v120;
    if (v121 != v120)
    {
      v97 = v121;
      do
      {
        v99 = (void *)*((_QWORD *)v97 - 3);
        v97 -= 6;
        v98 = v99;
        if (v99)
        {
          *((_QWORD *)v95 - 2) = v98;
          operator delete(v98);
        }
        v95 = v97;
      }
      while (v97 != v94);
      v96 = v120;
    }
    v121 = v94;
    operator delete(v96);
  }
  return 1;
}

void sub_2394ECADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v40;

  if (__p)
    operator delete(__p);
  sub_23942A16C(&a39);
  v40 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v40;
    operator delete(v40);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_2394ECC58(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 2) >= __sz)
    {
      v24 = *result;
      if (a2 != a3)
      {
        v25 = *result;
        do
        {
          v26 = *(_QWORD *)v6;
          *(_DWORD *)(v25 + 8) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v25 = v26;
          v25 += 12;
          v6 += 12;
          v24 += 12;
        }
        while (v6 != a3);
      }
      v15 = v24 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[4 * ((v17 - v9) >> 2)];
      if (v17 != v9)
      {
        v19 = 4 * ((v17 - v9) >> 2);
        do
        {
          v20 = *(_QWORD *)v6;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
          *(_QWORD *)v9 = v20;
          v9 += 12;
          v6 += 12;
          v19 -= 12;
        }
        while (v19);
        v9 = *v16;
      }
      v21 = v9;
      if (v18 != a3)
      {
        v21 = v9;
        v22 = v9;
        do
        {
          v23 = *(_QWORD *)v18;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v18 + 2);
          *v22 = v23;
          v22 = (_QWORD *)((char *)v22 + 12);
          v18 += 12;
          v21 = (_QWORD *)((char *)v21 + 12);
        }
        while (v18 != a3);
      }
      v15 = (char *)v21 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_28;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_28:
      sub_2394189F8();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      v14 = &v9[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

_QWORD *sub_2394ECE5C(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) >= __sz)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v17 - v9) >> 2) >= __sz)
    {
      v21 = *result;
      if (a2 != a3)
      {
        v22 = (char *)*result;
        do
        {
          if (v6 != v22)
          {
            v23 = *(_QWORD *)v6;
            *((_DWORD *)v22 + 2) = *((_DWORD *)v6 + 2);
            *(_QWORD *)v22 = v23;
          }
          v6 += 12;
          v22 += 12;
          v21 += 12;
        }
        while (v6 != a3);
      }
      v15 = v21 - (_QWORD)v9;
    }
    else
    {
      v18 = &a2[4 * ((v17 - v9) >> 2)];
      if (v17 != v9)
      {
        v19 = 4 * ((v17 - v9) >> 2);
        do
        {
          if (v6 != v9)
          {
            v20 = *(_QWORD *)v6;
            *((_DWORD *)v9 + 2) = *((_DWORD *)v6 + 2);
            *(_QWORD *)v9 = v20;
          }
          v6 += 12;
          v9 += 12;
          v19 -= 12;
        }
        while (v19);
        v9 = *v16;
      }
      v24 = v9;
      if (v18 != a3)
      {
        v24 = v9;
        v25 = v9;
        do
        {
          v26 = *(_QWORD *)v18;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v18 + 2);
          *v25 = v26;
          v25 = (_QWORD *)((char *)v25 + 12);
          v18 += 12;
          v24 = (_QWORD *)((char *)v24 + 12);
        }
        while (v18 != a3);
      }
      v15 = (char *)v24 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555)
      goto LABEL_32;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_32:
      sub_2394189F8();
    v13 = 12 * v12;
    result = operator new(12 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 12 * ((a3 - v6 - 12) / 0xCuLL) + 12);
      v14 = &v9[12 * ((a3 - v6 - 12) / 0xCuLL) + 12];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void sub_2394ED088(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  size_t v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_2394ECC58((_QWORD *)a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(char **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556)
        sub_2394189F8();
      v7 = (char *)operator new(v6);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[4 * (v6 >> 2)];
      v8 = 12 * ((v6 - 12) / 0xCuLL) + 12;
      memcpy(v7, v5, v8);
      *(_QWORD *)(a1 + 8) = &v7[v8];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2394ED1C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2394ED1E4(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  char *v7;
  size_t v8;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        sub_2394ED334((_QWORD *)a1, *(_BYTE **)a2, *(_BYTE **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(const void **)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v6 = v4 - *(_QWORD *)a2;
    if (v4 != *(_QWORD *)a2)
    {
      if (0xAAAAAAAAAAAAAAABLL * v6 >= 0x5555555555555556)
        sub_2394189F8();
      v7 = (char *)operator new(v6);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[v6];
      v8 = 3 * ((v6 - 3) / 3) + 3;
      memcpy(v7, v5, v8);
      *(_QWORD *)(a1 + 8) = &v7[v8];
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_2394ED318(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394ED334(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE **v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  __int16 v22;
  uint64_t v23;
  _BYTE *v24;
  __int16 v25;
  _BYTE *v26;
  __int16 v27;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (_BYTE *)*result;
  if (0xAAAAAAAAAAAAAAABLL * (v8 - *result) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >= 0x5555555555555556)
      goto LABEL_31;
    v10 = 0xAAAAAAAAAAAAAAABLL * v8;
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x2AAAAAAAAAAAAAAALL;
    v13 = 0x5555555555555555;
    if (!v12)
      v13 = v11;
    if (v13 >= 0x5555555555555556)
LABEL_31:
      sub_2394189F8();
    v14 = 3 * v13;
    result = operator new(3 * v13);
    v9 = result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v14;
    v15 = result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, 3 * ((a3 - v6 - 3) / 3uLL) + 3);
      v15 = &v9[3 * ((a3 - v6 - 3) / 3uLL) + 3];
    }
    v16 = v15 - v9;
    v17 = (_BYTE **)(v7 + 1);
    goto LABEL_30;
  }
  v17 = (_BYTE **)(result + 1);
  v18 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * (v18 - v9) < a4)
  {
    v19 = v18 - v9;
    v20 = &a2[v18 - v9];
    if (v18 == v9)
    {
      v21 = (_BYTE *)*result;
      if (v20 == a3)
      {
LABEL_29:
        v16 = v21 - v9;
        goto LABEL_30;
      }
    }
    else
    {
      do
      {
        if (v6 != v9)
        {
          v22 = *(_WORD *)v6;
          v9[2] = v6[2];
          *(_WORD *)v9 = v22;
        }
        v6 += 3;
        v9 += 3;
        v19 -= 3;
      }
      while (v19);
      v9 = *v17;
      v21 = *v17;
      if (v20 == a3)
        goto LABEL_29;
    }
    v21 = v9;
    v26 = v9;
    do
    {
      v27 = *(_WORD *)v20;
      v26[2] = v20[2];
      *(_WORD *)v26 = v27;
      v26 += 3;
      v20 += 3;
      v21 += 3;
    }
    while (v20 != a3);
    goto LABEL_29;
  }
  v23 = *result;
  if (a2 != a3)
  {
    v24 = (_BYTE *)*result;
    do
    {
      if (v6 != v24)
      {
        v25 = *(_WORD *)v6;
        v24[2] = v6[2];
        *(_WORD *)v24 = v25;
      }
      v6 += 3;
      v24 += 3;
      v23 += 3;
    }
    while (v6 != a3);
  }
  v16 = v23 - (_QWORD)v9;
LABEL_30:
  *v17 = &v9[v16];
  return result;
}

_QWORD *sub_2394ED554(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  size_t v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * (v6 >> 2)];
    v8 = 12 * ((v6 - 12) / 0xCuLL) + 12;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) > 0x1555555555555555)
      sub_2394189F8();
    v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[4 * (v11 >> 2)];
    v13 = 12 * ((v11 - 12) / 0xCuLL) + 12;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  sub_2394B7078((uint64_t)(a1 + 6), a2 + 48);
  sub_2394B6F74((uint64_t)(a1 + 10), a2 + 80);
  sub_2394B7078((uint64_t)(a1 + 14), a2 + 112);
  return a1;
}

void sub_2394ED6CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(_BYTE *)(v1 + 104))
  {
    v6 = *v4;
    if (*v4)
    {
      *(_QWORD *)(v1 + 88) = v6;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(v1 + 72))
  {
    v7 = *v3;
    if (*v3)
    {
      *(_QWORD *)(v1 + 56) = v7;
      operator delete(v7);
    }
  }
  v8 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2394ED744(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16[0] = &off_250ADD100;
  v16[1] = a1;
  v17 = v16;
  v2 = sub_2394EDCF0(a1, (char **)(a1 + 128), (uint64_t)v16);
  v3 = v17;
  if (v17 == v16)
  {
    v4 = 4;
    v3 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  if (v2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v6 = *(uint64_t **)(a1 + 32);
    v7 = *(uint64_t **)(a1 + 40);
    if (v6 != v7)
    {
      v8 = v5;
      do
      {
        v9 = *v6;
        v10 = (std::__shared_weak_count *)v6[1];
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (v9)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, v8);
        if (v10)
        {
          v13 = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v6 += 2;
      }
      while (v6 != v7);
    }
  }
  return v2;
}

void sub_2394ED8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2394ED928(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16[0] = &off_250ADD148;
  v16[1] = a1;
  v17 = v16;
  v2 = sub_2394EE4AC(a1, (void **)(a1 + 104), (uint64_t)v16);
  v3 = v17;
  if (v17 == v16)
  {
    v4 = 4;
    v3 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  if (v2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(uint64_t **)(a1 + 16);
    if (v6 != v7)
    {
      v8 = v5;
      do
      {
        v9 = *v6;
        v10 = (std::__shared_weak_count *)v6[1];
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (v9)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, v8);
        if (v10)
        {
          v13 = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v6 += 2;
      }
      while (v6 != v7);
    }
  }
  return v2;
}

void sub_2394EDA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2394EDB0C(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16[0] = &off_250ADD190;
  v16[1] = a1;
  v17 = v16;
  v2 = sub_2394EEB04(a1, (void **)(a1 + 152), (uint64_t)v16);
  v3 = v17;
  if (v17 == v16)
  {
    v4 = 4;
    v3 = v16;
    goto LABEL_5;
  }
  if (v17)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  if (v2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v6 = *(uint64_t **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    if (v6 != v7)
    {
      v8 = v5;
      do
      {
        v9 = *v6;
        v10 = (std::__shared_weak_count *)v6[1];
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        if (v9)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, v8);
        if (v10)
        {
          v13 = (unint64_t *)&v10->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v6 += 2;
      }
      while (v6 != v7);
    }
  }
  return v2;
}

void sub_2394EDC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2394EDCF0(uint64_t a1, char **a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v3 = a2[1] - *a2;
  if (!v3)
    return 1;
  v4 = a3;
  v7 = 0;
  v8 = 0;
  v32 = v3 / 20;
  v9 = v3 / 20 - 1;
  v10 = a1 + 104;
  while (1)
  {
    if (v9 > v8)
    {
      v11 = 20 * v9;
      while (1)
      {
        LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[v11 - *(_QWORD *)(a1 + 128)] >> 2);
        if (*(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) != -1)
          break;
        --v9;
        v11 -= 20;
        if (v9 <= v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      v12 = 20 * v8;
      v13 = v7;
      v14 = v8;
      while (1)
      {
        LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[v12 - *(_QWORD *)(a1 + 128)] >> 2);
        if (*(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) == -1)
          break;
        ++v14;
        ++v13;
        v12 += 20;
        if (v9 == v14)
        {
          v7 = v9 + v7 - v8;
          goto LABEL_21;
        }
      }
      v8 = v14;
      v7 = v13;
      v4 = a3;
    }
    if (v8 == v9)
      break;
    LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[20 * v8 - *(_QWORD *)(a1 + 128)] >> 2);
    if (*(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) != -1)
      return 0;
    LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[20 * v9 - *(_QWORD *)(a1 + 128)] >> 2);
    if (*(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) == -1)
      return 0;
    v33 = v8;
    v34 = v9;
    v15 = *(_QWORD *)(v4 + 24);
    if (!v15)
      sub_2394172E0();
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v15 + 48))(v15, &v34, &v33);
    v16 = (uint64_t)&(*a2)[20 * v8];
    v17 = *(_DWORD *)(v16 + 16);
    v18 = *(_OWORD *)v16;
    v19 = (uint64_t)&(*a2)[20 * v9];
    v20 = *(_DWORD *)(v19 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v19;
    *(_DWORD *)(v16 + 16) = v20;
    v21 = (uint64_t)&(*a2)[20 * v9];
    *(_OWORD *)v21 = v18;
    *(_DWORD *)(v21 + 16) = v17;
    ++v8;
    ++v7;
    if (v8 > v9)
    {
      if (!v7)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
LABEL_21:
  LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[20 * v9 - *(_QWORD *)(a1 + 128)] >> 2);
  if (*(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) != -1)
    ++v7;
  if (!v7)
    goto LABEL_25;
LABEL_24:
  LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[20 * v7 - *(_QWORD *)(a1 + 128) - 20] >> 2);
  if (*(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) == -1)
  {
    v23 = 0;
    v22 = v32;
    goto LABEL_30;
  }
LABEL_25:
  v22 = v32;
  if (v7 == v32)
  {
    v23 = 1;
  }
  else
  {
    LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[20 * v7 - *(_QWORD *)(a1 + 128)] >> 2);
    v23 = *(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) == -1;
  }
LABEL_30:
  v25 = 0;
  v26 = 0;
  if (v22 <= 1)
    v27 = 1;
  else
    v27 = v22;
  do
  {
    if (v26 >= v7)
    {
      if (!v23)
      {
LABEL_33:
        v23 = 0;
        goto LABEL_34;
      }
      LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[v25 - *(_QWORD *)(a1 + 128)] >> 2);
      v23 = *(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) == -1;
    }
    else
    {
      if (!v23)
        goto LABEL_33;
      LODWORD(v34) = -858993459 * ((unint64_t)&(*a2)[v25 - *(_QWORD *)(a1 + 128)] >> 2);
      v23 = *(_DWORD *)(sub_239962518(v10, (unsigned int *)&v34) + 12) != -1;
    }
LABEL_34:
    ++v26;
    v25 += 20;
  }
  while (v27 != v26);
  if (!v23)
    return 0;
  v28 = *a2;
  v29 = a2[1];
  v30 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - *a2) >> 2);
  if (v7 <= v30)
  {
    if (v7 < v30)
    {
      v29 = &v28[20 * v7];
      a2[1] = v29;
    }
  }
  else
  {
    sub_2394EE140(a2, v7 - v30);
    v28 = *a2;
    v29 = a2[1];
  }
  return 0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 2) == v7;
}

void sub_2394EE140(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      memset(a1[1], 255, v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL)
      sub_2394189F8();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x666666666666666)
      v10 = 0xCCCCCCCCCCCCCCCLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL)
        sub_239418A80();
      v11 = (char *)operator new(20 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[20 * v7];
    v14 = &v11[20 * v10];
    v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    memset(v13, 255, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v17;
        v13 -= 20;
        v5 -= 20;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2394EE2E8()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2394EE2FC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADD100;
  result[1] = v3;
  return result;
}

uint64_t sub_2394EE330(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADD100;
  a2[1] = v2;
  return result;
}

_DWORD *sub_2394EE34C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_2394EE35C((_QWORD *)(a1 + 8), *a2, *a3);
}

_DWORD *sub_2394EE35C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *result;
  _DWORD **v14;
  _DWORD **v15;
  unsigned int v16;
  unsigned int v17;

  v5 = (_QWORD *)*a1;
  v17 = a2;
  v6 = sub_239962518((uint64_t)(v5 + 13), &v17);
  v7 = (_DWORD *)sub_239962508(v5 + 13, (unsigned int *)(v6 + 12));
  if (*v7 == v17)
  {
    v8 = sub_239962518((uint64_t)(v5 + 13), &v17);
    *(_DWORD *)sub_239962508(v5 + 13, (unsigned int *)(v8 + 12)) = a3;
  }
  v16 = *(_DWORD *)(sub_239962518((uint64_t)(v5 + 13), &v17) + 16);
  if (v16 != -1)
  {
    v9 = (_DWORD *)sub_23996252C((uint64_t)(v5 + 13), &v16);
    if (*v9 == v17)
      *(_DWORD *)sub_23996252C((uint64_t)(v5 + 13), &v16) = a3;
  }
  v10 = (unsigned int *)sub_239962518((uint64_t)(v5 + 13), &v17);
  *(_DWORD *)sub_239962518((uint64_t)(v5 + 13), v10) = a3;
  v11 = sub_239962518((uint64_t)(v5 + 13), &v17);
  *(_DWORD *)(sub_239962518((uint64_t)(v5 + 13), (unsigned int *)(v11 + 8)) + 4) = a3;
  v12 = sub_239962518((uint64_t)(v5 + 13), &v17);
  result = (_DWORD *)sub_239962518((uint64_t)(v5 + 13), (unsigned int *)(v12 + 4));
  result[2] = a3;
  v14 = (_DWORD **)v5[4];
  v15 = (_DWORD **)v5[5];
  while (v14 != v15)
  {
    result = *v14;
    if (*v14)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, a2, a3);
    v14 += 2;
  }
  return result;
}

BOOL sub_2394EE4AC(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v3 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (!v3)
    return 1;
  v6 = 0;
  v7 = 0;
  v8 = v3 >> 2;
  v9 = (v3 >> 2) - 1;
  v10 = (_QWORD *)(a1 + 104);
  while (1)
  {
    if (v9 > v7)
    {
      v11 = 4 * v9;
      while (1)
      {
        LODWORD(v25) = ((unint64_t)*a2 + v11 - *v10) >> 2;
        if (*(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) != -1)
          break;
        --v9;
        v11 -= 4;
        if (v9 <= v7)
        {
          v9 = v7;
          break;
        }
      }
    }
    if (v7 < v9)
    {
      v12 = 4 * v7;
      v13 = v6;
      v14 = v7;
      while (1)
      {
        LODWORD(v25) = ((unint64_t)*a2 + v12 - *v10) >> 2;
        if (*(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) == -1)
          break;
        ++v14;
        ++v13;
        v12 += 4;
        if (v9 == v14)
        {
          v6 = v9 + v6 - v7;
          goto LABEL_21;
        }
      }
      v7 = v14;
      v6 = v13;
    }
    if (v7 == v9)
      break;
    LODWORD(v25) = ((unint64_t)*a2 + 4 * v7 - *v10) >> 2;
    if (*(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) != -1)
      return 0;
    LODWORD(v25) = ((unint64_t)*a2 + 4 * v9 - *v10) >> 2;
    if (*(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) == -1)
      return 0;
    v24 = v7;
    v25 = v9;
    v15 = *(_QWORD *)(a3 + 24);
    if (!v15)
      sub_2394172E0();
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v15 + 48))(v15, &v25, &v24);
    v16 = *((_DWORD *)*a2 + v7);
    *((_DWORD *)*a2 + v7) = *((_DWORD *)*a2 + v9);
    *((_DWORD *)*a2 + v9) = v16;
    ++v7;
    ++v6;
    if (v7 > v9)
    {
      if (!v6)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
LABEL_21:
  LODWORD(v25) = ((unint64_t)*a2 + 4 * v9 - *v10) >> 2;
  if (*(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) != -1)
    ++v6;
  if (!v6)
    goto LABEL_25;
LABEL_24:
  LODWORD(v25) = ((unint64_t)*a2 + 4 * (v6 - 1) - *v10) >> 2;
  if (*(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) == -1)
  {
    v17 = 0;
    goto LABEL_30;
  }
LABEL_25:
  if (v6 == v8)
  {
    v17 = 1;
  }
  else
  {
    LODWORD(v25) = ((unint64_t)*a2 + 4 * v6 - *v10) >> 2;
    v17 = *(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) == -1;
  }
LABEL_30:
  v19 = 0;
  v20 = 0;
  if (v8 <= 1)
    v8 = 1;
  do
  {
    if (v20 >= v6)
    {
      if (!v17)
      {
LABEL_33:
        v17 = 0;
        goto LABEL_34;
      }
      LODWORD(v25) = ((unint64_t)*a2 + v19 - *v10) >> 2;
      v17 = *(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) == -1;
    }
    else
    {
      if (!v17)
        goto LABEL_33;
      LODWORD(v25) = ((unint64_t)*a2 + v19 - *v10) >> 2;
      v17 = *(_DWORD *)sub_239962508(v10, (unsigned int *)&v25) != -1;
    }
LABEL_34:
    ++v20;
    v19 += 4;
  }
  while (v8 != v20);
  if (!v17)
    return 0;
  v22 = (char *)*a2;
  v21 = (char *)a2[1];
  v23 = (v21 - (_BYTE *)*a2) >> 2;
  if (v6 <= v23)
  {
    if (v6 < v23)
    {
      v21 = &v22[4 * v6];
      a2[1] = v21;
    }
  }
  else
  {
    sub_2394EE834(a2, v6 - v23);
    v22 = (char *)*a2;
    v21 = (char *)a2[1];
  }
  return v6 == (v21 - v22) >> 2;
}

void sub_2394EE834(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      memset(v5, 255, 4 * a2);
      v6 = &v5[4 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_2394189F8();
    v11 = v4 - v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_239418A80();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    memset(v14, 255, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_30:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_2394EE9E0()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2394EE9F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADD148;
  result[1] = v3;
  return result;
}

uint64_t sub_2394EEA28(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADD148;
  a2[1] = v2;
  return result;
}

uint64_t sub_2394EEA44(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return sub_2394EEA4C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_2394EEA4C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int i;
  _DWORD v11[4];

  v3 = *a2;
  v4 = *a3;
  v5 = *a1;
  v6 = (_QWORD *)(*a1 + 104);
  i = *a2;
  sub_239962B1C((uint64_t)v11, v6, &i);
  result = sub_239962B44(v11);
  for (i = result; (_DWORD)result != -1; i = result)
  {
    *(_DWORD *)(sub_239962518((uint64_t)v6, &i) + 12) = v4;
    result = sub_239962B44(v11);
  }
  v8 = *(uint64_t **)(v5 + 8);
  v9 = *(uint64_t **)(v5 + 16);
  while (v8 != v9)
  {
    result = *v8;
    if (*v8)
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, v3, v4);
    v8 += 2;
  }
  return result;
}

BOOL sub_2394EEB04(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v3 = (_BYTE *)a2[1] - (_BYTE *)*a2;
  if (!v3)
    return 1;
  v7 = 0;
  v8 = 0;
  v25 = v3 >> 2;
  v9 = (v3 >> 2) - 1;
  v10 = a1 + 104;
  while (1)
  {
    if (v9 > v8)
    {
      v11 = 4 * v9;
      while (1)
      {
        LODWORD(v27) = ((unint64_t)*a2 + v11 - *(_QWORD *)(a1 + 152)) >> 2;
        if (*(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) != -1)
          break;
        --v9;
        v11 -= 4;
        if (v9 <= v8)
        {
          v9 = v8;
          break;
        }
      }
    }
    if (v8 < v9)
    {
      v12 = 4 * v8;
      v13 = v7;
      v14 = v8;
      while (1)
      {
        LODWORD(v27) = ((unint64_t)*a2 + v12 - *(_QWORD *)(a1 + 152)) >> 2;
        if (*(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) == -1)
          break;
        ++v14;
        ++v13;
        v12 += 4;
        if (v9 == v14)
        {
          v7 = v9 + v7 - v8;
          goto LABEL_21;
        }
      }
      v8 = v14;
      v7 = v13;
    }
    if (v8 == v9)
      break;
    LODWORD(v27) = ((unint64_t)*a2 + 4 * v8 - *(_QWORD *)(a1 + 152)) >> 2;
    if (*(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) != -1)
      return 0;
    LODWORD(v27) = ((unint64_t)*a2 + 4 * v9 - *(_QWORD *)(a1 + 152)) >> 2;
    if (*(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) == -1)
      return 0;
    v26 = v8;
    v27 = v9;
    v15 = *(_QWORD *)(a3 + 24);
    if (!v15)
      sub_2394172E0();
    (*(void (**)(uint64_t, unint64_t *, unint64_t *))(*(_QWORD *)v15 + 48))(v15, &v27, &v26);
    v16 = *((_DWORD *)*a2 + v8);
    *((_DWORD *)*a2 + v8) = *((_DWORD *)*a2 + v9);
    *((_DWORD *)*a2 + v9) = v16;
    ++v8;
    ++v7;
    if (v8 > v9)
    {
      if (!v7)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
LABEL_21:
  LODWORD(v27) = ((unint64_t)*a2 + 4 * v9 - *(_QWORD *)(a1 + 152)) >> 2;
  if (*(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) != -1)
    ++v7;
  if (!v7)
    goto LABEL_25;
LABEL_24:
  LODWORD(v27) = ((unint64_t)*a2 + 4 * (v7 - 1) - *(_QWORD *)(a1 + 152)) >> 2;
  if (*(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) == -1)
  {
    v18 = 0;
    v17 = v25;
    goto LABEL_30;
  }
LABEL_25:
  v17 = v25;
  if (v7 == v25)
  {
    v18 = 1;
  }
  else
  {
    LODWORD(v27) = ((unint64_t)*a2 + 4 * v7 - *(_QWORD *)(a1 + 152)) >> 2;
    v18 = *(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) == -1;
  }
LABEL_30:
  v20 = 0;
  v21 = 0;
  if (v17 <= 1)
    v17 = 1;
  do
  {
    if (v21 >= v7)
    {
      if (!v18)
      {
LABEL_33:
        v18 = 0;
        goto LABEL_34;
      }
      LODWORD(v27) = ((unint64_t)*a2 + v20 - *(_QWORD *)(a1 + 152)) >> 2;
      v18 = *(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) == -1;
    }
    else
    {
      if (!v18)
        goto LABEL_33;
      LODWORD(v27) = ((unint64_t)*a2 + v20 - *(_QWORD *)(a1 + 152)) >> 2;
      v18 = *(_DWORD *)sub_23996252C(v10, (unsigned int *)&v27) != -1;
    }
LABEL_34:
    ++v21;
    v20 += 4;
  }
  while (v17 != v21);
  if (!v18)
    return 0;
  v23 = (char *)*a2;
  v22 = (char *)a2[1];
  v24 = (v22 - (_BYTE *)*a2) >> 2;
  if (v7 <= v24)
  {
    if (v7 < v24)
    {
      v22 = &v23[4 * v7];
      a2[1] = v22;
    }
  }
  else
  {
    sub_2394EE834(a2, v7 - v24);
    v23 = (char *)*a2;
    v22 = (char *)a2[1];
  }
  return v7 == (v22 - v23) >> 2;
}

void sub_2394EEEA0()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2394EEEB4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250ADD190;
  result[1] = v3;
  return result;
}

uint64_t sub_2394EEEE8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250ADD190;
  a2[1] = v2;
  return result;
}

_DWORD *sub_2394EEF04(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *result;
  unsigned int v8;
  _DWORD **v10;
  _DWORD **v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *a2;
  v4 = *a3;
  v5 = *(_QWORD *)(a1 + 8);
  v13 = *a2;
  v6 = *(_DWORD *)sub_23996252C(v5 + 104, &v13);
  v12 = v6;
  do
  {
    *(_DWORD *)(sub_239962518(v5 + 104, &v12) + 16) = v4;
    result = (_DWORD *)sub_239962518(v5 + 104, &v12);
    v8 = result[2];
    v12 = v8;
  }
  while (v8 != -1 && v8 != v6);
  v10 = *(_DWORD ***)(v5 + 56);
  v11 = *(_DWORD ***)(v5 + 64);
  while (v10 != v11)
  {
    result = *v10;
    if (*v10)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, v3, v4);
    v10 += 2;
  }
  return result;
}

uint64_t sub_2394EEFC0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  if (*(_BYTE *)(a1 + 264))
  {
    v2 = *(void **)(a1 + 240);
    if (v2)
    {
      *(_QWORD *)(a1 + 248) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 232))
  {
    v3 = *(_QWORD *)(a1 + 208);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 216);
      v5 = *(void **)(a1 + 208);
      if (v4 != v3)
      {
        do
          v4 = sub_2394EF0D0(v4 - 912);
        while (v4 != v3);
        v5 = *(void **)(a1 + 208);
      }
      *(_QWORD *)(a1 + 216) = v3;
      operator delete(v5);
    }
  }
  if (*(_BYTE *)(a1 + 200))
  {
    v6 = *(void **)(a1 + 176);
    if (v6)
    {
      *(_QWORD *)(a1 + 184) = v6;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(a1 + 168))
  {
    v7 = *(void **)(a1 + 144);
    if (v7)
    {
      *(_QWORD *)(a1 + 152) = v7;
      operator delete(v7);
    }
  }
  if (*(_BYTE *)(a1 + 136))
  {
    v8 = *(void **)(a1 + 112);
    if (v8)
    {
      *(_QWORD *)(a1 + 120) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(a1 + 104))
  {
    v9 = *(void **)(a1 + 80);
    if (v9)
    {
      *(_QWORD *)(a1 + 88) = v9;
      operator delete(v9);
    }
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v10 = *(void **)(a1 + 48);
    if (v10)
    {
      *(_QWORD *)(a1 + 56) = v10;
      operator delete(v10);
    }
  }
  v11 = *(void **)(a1 + 24);
  if (v11)
  {
    *(_QWORD *)(a1 + 32) = v11;
    operator delete(v11);
  }
  v12 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v12;
    operator delete(v12);
  }
  return a1;
}

uint64_t sub_2394EF0D0(uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 904) && (sub_239416DA0(a1 + 776), nullsub_4(a1 + 768), *(char *)(a1 + 767) < 0))
  {
    operator delete(*(void **)(a1 + 744));
    if (!*(_BYTE *)(a1 + 736))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 736))
  {
    goto LABEL_7;
  }
  sub_239416DA0(a1 + 656);
  nullsub_4(a1 + 648);
  if (*(char *)(a1 + 647) < 0)
    operator delete(*(void **)(a1 + 624));
LABEL_7:
  if (*(_BYTE *)(a1 + 616) && (sub_239416DA0(a1 + 536), nullsub_4(a1 + 528), *(char *)(a1 + 527) < 0))
  {
    operator delete(*(void **)(a1 + 504));
    if (!*(_BYTE *)(a1 + 496))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(a1 + 496))
  {
    goto LABEL_13;
  }
  sub_239416DA0(a1 + 416);
  nullsub_4(a1 + 408);
  if (*(char *)(a1 + 407) < 0)
    operator delete(*(void **)(a1 + 384));
LABEL_13:
  if (*(_BYTE *)(a1 + 376) && (sub_239416DA0(a1 + 248), nullsub_4(a1 + 240), *(char *)(a1 + 239) < 0))
  {
    operator delete(*(void **)(a1 + 216));
    if (!*(_BYTE *)(a1 + 208))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(a1 + 208))
  {
    goto LABEL_19;
  }
  sub_239416DA0(a1 + 80);
  nullsub_4(a1 + 72);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
LABEL_19:
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2394EF24C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        sub_239418A80();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[12 * v7];
    v14 = &v11[12 * v10];
    v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v18 = v5[2];
        *(_QWORD *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2394EF3DC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2394EF57C()
{
  JUMPOUT(0x23B83E31CLL);
}

_WORD *sub_2394EF590(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_250ADD1D8;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_2394EF5C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_250ADD1D8;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_2394EF5E8()
{
  return kdebug_trace();
}

void sub_2394EF618(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_2394EF618(a1, *a2);
    sub_2394EF618(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void sub_2394EF66C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394EF680(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_250ADD220;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_2394EF6D0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADD220;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2394EF708(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unsigned int *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int **v8;
  void **v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  void **v30;
  int64_t v31;
  void *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *i8;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int *v48;
  uint64_t *v49;
  BOOL v50;
  unsigned int v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t **v54;
  unsigned int v55;
  uint64_t **v56;
  uint64_t *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t **v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t **v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  int64x2_t *v85;
  char *v86;
  char *v87;
  char *v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  void *v93;
  void **v94;
  void **v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  void *__p;
  char *v107;
  char *v108;
  void *v109[2];
  __int128 v110;
  __int128 v111;

  v1 = *(_QWORD *)(a1 + 64);
  v2 = **(_QWORD **)(a1 + 8);
  if (**(_QWORD **)(a1 + 16) + v1 < v2)
    v2 = **(_QWORD **)(a1 + 16) + v1;
  v110 = 0u;
  v111 = 0u;
  *(_OWORD *)v109 = 0u;
  __p = 0;
  v107 = 0;
  v108 = 0;
  v100 = v2;
  if (v2 > v1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
LABEL_7:
    v8 = (unsigned int **)(**(_QWORD **)(a1 + 24) + 24 * v1);
    sub_2394F00D0(&v103, *v8, v8[1]);
    if (!v105)
      goto LABEL_6;
    v102 = v1;
    while (1)
    {
      v9 = (void **)v109[1];
      v10 = (void **)v110;
      *((_QWORD *)&v111 + 1) = 0;
      v11 = v110 - (unint64_t)v109[1];
      if ((unint64_t)v110 - (unint64_t)v109[1] >= 0x11)
      {
        do
        {
          operator delete(*v9);
          v10 = (void **)v110;
          v9 = (void **)((char *)v109[1] + 8);
          v109[1] = v9;
          v11 = v110 - (_QWORD)v9;
        }
        while ((_QWORD)v110 - (_QWORD)v9 > 0x10uLL);
      }
      v12 = v11 >> 3;
      if (v12 == 1)
        break;
      if (v12 == 2)
      {
        v13 = 1024;
LABEL_15:
        *(_QWORD *)&v111 = v13;
        goto LABEL_17;
      }
      v13 = v111;
LABEL_17:
      v107 = v7;
      v14 = v103;
      if (v10 == v9)
        v15 = 0;
      else
        v15 = (((char *)v10 - (char *)v9) << 7) - 1;
      v16 = *((_QWORD *)&v111 + 1);
      v17 = *((_QWORD *)&v111 + 1) + v13;
      if (v15 == *((_QWORD *)&v111 + 1) + v13)
      {
        sub_2394F0374((uint64_t)v109);
        v16 = *((_QWORD *)&v111 + 1);
        v13 = v111;
        v9 = (void **)v109[1];
        v17 = v111 + *((_QWORD *)&v111 + 1);
      }
      (*(_DWORD **)((char *)v9 + ((v17 >> 7) & 0x1FFFFFFFFFFFFF8)))[v17 & 0x3FF] = *((_DWORD *)v14 + 7);
      v18 = v16 + 1;
      *((_QWORD *)&v111 + 1) = v18;
      if (v104)
      {
        v19 = (*(_DWORD **)((char *)v9 + ((v13 >> 7) & 0x1FFFFFFFFFFFFF8)))[v13 & 0x3FF];
        v20 = &v104;
        v21 = v104;
        v1 = v102;
        do
        {
          v22 = v21;
          v23 = v20;
          v24 = *((_DWORD *)v21 + 7);
          v25 = v21 + 1;
          if (v24 >= v19)
            v20 = (uint64_t **)v21;
          else
            ++v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
        if (v20 != &v104)
        {
          if (v24 < v19)
            v22 = (uint64_t *)v23;
          if (v19 >= *((_DWORD *)v22 + 7))
          {
            if (v24 >= v19)
              v26 = v25;
            else
              v26 = (uint64_t *)(v23 + 1);
            v27 = (uint64_t *)*v26;
            v28 = v20;
            if (*v26)
            {
              do
              {
                v29 = (uint64_t **)v27;
                v27 = (uint64_t *)*v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v29 = (uint64_t **)v28[2];
                v50 = *v29 == (uint64_t *)v28;
                v28 = v29;
              }
              while (!v50);
            }
            if (v103 == v20)
              v103 = v29;
            --v105;
            sub_2394F0930(v104, (uint64_t *)v20);
            operator delete(v20);
            v18 = *((_QWORD *)&v111 + 1);
          }
        }
        v101 = v7;
        if (!v18)
          goto LABEL_46;
LABEL_52:
        while (2)
        {
          v37 = *(_DWORD *)(*(_QWORD *)((char *)v109[1] + (((unint64_t)v111 >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * (v111 & 0x3FF));
          *(_QWORD *)&v111 = v111 + 1;
          *((_QWORD *)&v111 + 1) = v18 - 1;
          if ((unint64_t)v111 >= 0x800)
          {
            operator delete(*(void **)v109[1]);
            v109[1] = (char *)v109[1] + 8;
            *(_QWORD *)&v111 = v111 - 1024;
          }
          if (v7 < v6)
          {
            *(_DWORD *)v7 = v37;
            v7 += 4;
            goto LABEL_71;
          }
          v38 = (v7 - v5) >> 2;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62)
            sub_2394189F8();
          if ((v6 - v5) >> 1 > v39)
            v39 = (v6 - v5) >> 1;
          if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
          {
            if (v40 >> 62)
              sub_239418A80();
            v41 = operator new(4 * v40);
            v4 = (unsigned int *)&v41[4 * v38];
            *v4 = v37;
            v42 = (uint64_t)(v4 + 1);
            if (v7 != v5)
            {
LABEL_65:
              v43 = v7 - 4 - v5;
              if (v43 < 0xBC
                || &v41[v7 - v5 - 4 - (v43 & 0xFFFFFFFFFFFFFFFCLL)] > &v41[v7 - v5 - 4]
                || &v7[-(v43 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4
                || (unint64_t)(v5 - v41) < 0x20)
              {
                v44 = v7;
                v1 = v102;
              }
              else
              {
                v74 = (v43 >> 2) + 1;
                v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
                v44 = &v7[-v75];
                v4 = (unsigned int *)((char *)v4 - v75);
                v76 = &v41[4 * v38 - 16];
                v77 = v7 - 16;
                v78 = v74 & 0x7FFFFFFFFFFFFFF8;
                v1 = v102;
                do
                {
                  v79 = *(_OWORD *)v77;
                  *(v76 - 1) = *((_OWORD *)v77 - 1);
                  *v76 = v79;
                  v76 -= 2;
                  v77 -= 32;
                  v78 -= 8;
                }
                while (v78);
                if (v74 == (v74 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_68:
                  v6 = &v41[4 * v40];
                  __p = v4;
                  v108 = v6;
                  if (v5)
                    goto LABEL_69;
                  goto LABEL_70;
                }
              }
              do
              {
                v45 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *--v4 = v45;
              }
              while (v44 != v5);
              goto LABEL_68;
            }
          }
          else
          {
            v41 = 0;
            v4 = (unsigned int *)(4 * v38);
            *(_DWORD *)(4 * v38) = v37;
            v42 = 4 * v38 + 4;
            if (v7 != v5)
              goto LABEL_65;
          }
          v1 = v102;
          v6 = &v41[4 * v40];
          __p = v4;
          v108 = v6;
          if (v5)
LABEL_69:
            operator delete(v5);
LABEL_70:
          v5 = (char *)v4;
          v101 = (char *)v4;
          v7 = (char *)v42;
LABEL_71:
          v107 = v7;
          v46 = (unsigned int **)(**(_QWORD **)(a1 + 32) + 24 * v37);
          v47 = *v46;
          v48 = v46[1];
          v49 = v104;
          v50 = *v46 == v48 || v104 == 0;
          if (!v50)
          {
            if (!v104)
              goto LABEL_112;
LABEL_76:
            v51 = *v47;
            v52 = &v104;
            do
            {
              v53 = v49;
              v54 = v52;
              v55 = *((_DWORD *)v49 + 7);
              v56 = (uint64_t **)(v49 + 1);
              if (v55 >= v51)
              {
                v56 = (uint64_t **)v53;
                v52 = (uint64_t **)v53;
              }
              v49 = *v56;
            }
            while (v49);
            if (v52 != &v104)
            {
              v57 = v55 >= v51 ? v53 : (uint64_t *)v54;
              if (v51 >= *((_DWORD *)v57 + 7)
                && sub_2396C25E0(v1, (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 12 * v51)))
              {
                v58 = (char *)v109[1];
                if ((void *)v110 == v109[1])
                  v59 = 0;
                else
                  v59 = (((_QWORD)v110 - (unint64_t)v109[1]) << 7) - 1;
                v60 = *((_QWORD *)&v111 + 1);
                v61 = *((_QWORD *)&v111 + 1) + v111;
                if (v59 == *((_QWORD *)&v111 + 1) + (_QWORD)v111)
                {
                  sub_2394F0374((uint64_t)v109);
                  v60 = *((_QWORD *)&v111 + 1);
                  v58 = (char *)v109[1];
                  v61 = v111 + *((_QWORD *)&v111 + 1);
                }
                *(_DWORD *)(*(_QWORD *)&v58[(v61 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v61 & 0x3FF)) = *v47;
                *((_QWORD *)&v111 + 1) = v60 + 1;
                if (v104)
                {
                  v62 = *v47;
                  v63 = &v104;
                  v64 = v104;
                  do
                  {
                    v65 = v64;
                    v66 = v63;
                    v67 = *((_DWORD *)v64 + 7);
                    v68 = v64 + 1;
                    if (v67 >= v62)
                      v63 = (uint64_t **)v64;
                    else
                      ++v64;
                    v64 = (uint64_t *)*v64;
                  }
                  while (v64);
                  if (v63 != &v104)
                  {
                    if (v67 < v62)
                      v65 = (uint64_t *)v66;
                    if (v62 >= *((_DWORD *)v65 + 7))
                    {
                      v69 = (uint64_t *)(v66 + 1);
                      if (v67 >= v62)
                        v70 = v68;
                      else
                        v70 = v69;
                      v71 = (uint64_t *)*v70;
                      v72 = v63;
                      if (*v70)
                      {
                        do
                        {
                          v73 = (uint64_t **)v71;
                          v71 = (uint64_t *)*v71;
                        }
                        while (v71);
                      }
                      else
                      {
                        do
                        {
                          v73 = (uint64_t **)v72[2];
                          v50 = *v73 == (uint64_t *)v72;
                          v72 = v73;
                        }
                        while (!v50);
                      }
                      if (v103 == v63)
                        v103 = v73;
                      --v105;
                      sub_2394F0930(v104, (uint64_t *)v63);
                      operator delete(v63);
                    }
                  }
                }
              }
            }
LABEL_112:
            while (++v47 != v48)
            {
              v49 = v104;
              if (v104)
                goto LABEL_76;
            }
          }
          v18 = *((_QWORD *)&v111 + 1);
          if (!*((_QWORD *)&v111 + 1))
            goto LABEL_46;
          continue;
        }
      }
      v1 = v102;
      v101 = v7;
      if (v18)
        goto LABEL_52;
LABEL_46:
      if (!v105)
      {
        v7 = v101;
LABEL_6:
        sub_239421038((uint64_t)&v103, v104);
        if (++v1 == v100)
        {
          if (__p)
            operator delete(__p);
          goto LABEL_149;
        }
        goto LABEL_7;
      }
      sub_2397A15E8(*(os_unfair_lock_s **)(a1 + 48));
      v30 = *(void ***)(a1 + 56);
      v31 = v7 - (char *)v4;
      if (v31)
      {
        if (v31 < 0)
          sub_2394189F8();
        v32 = operator new(v31);
        v33 = (unint64_t)v32 + 4 * (v31 >> 2);
        memcpy(v32, v4, v31);
        v34 = (char *)v30[1];
        v35 = (char *)v30[2];
        if (v34 < v35)
        {
LABEL_50:
          *(_DWORD *)v34 = v1;
          *((_QWORD *)v34 + 1) = v32;
          *((_QWORD *)v34 + 2) = v33;
          i8 = v34 + 32;
          *((_QWORD *)v34 + 3) = v33;
          goto LABEL_143;
        }
      }
      else
      {
        v33 = 0;
        v32 = 0;
        v34 = (char *)v30[1];
        v35 = (char *)v30[2];
        if (v34 < v35)
          goto LABEL_50;
      }
      v80 = (v34 - (_BYTE *)*v30) >> 5;
      v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 59)
        sub_2394189F8();
      v82 = v35 - (_BYTE *)*v30;
      if (v82 >> 4 > v81)
        v81 = v82 >> 4;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFE0)
        v83 = 0x7FFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (v83 >> 59)
        sub_239418A80();
      v84 = (char *)operator new(32 * v83);
      v85 = (int64x2_t *)&v84[32 * v80];
      v86 = &v84[32 * v83];
      v1 = v102;
      v85->i32[0] = v102;
      v85[1].i64[0] = 0;
      v85[1].i64[1] = 0;
      v85->i64[1] = (uint64_t)v32;
      v85[1] = vdupq_n_s64(v33);
      i8 = v85[2].i8;
      v87 = (char *)*v30;
      v88 = (char *)v30[1];
      if (v88 == *v30)
      {
        *v30 = v85;
        v30[1] = i8;
        v30[2] = v86;
        if (!v88)
          goto LABEL_143;
      }
      else
      {
        v89 = 0;
        do
        {
          v90 = v85[v89 / 0x10].i8;
          v91 = &v88[v89];
          *((_DWORD *)v90 - 8) = *(_DWORD *)&v88[v89 - 32];
          *(_OWORD *)(v90 - 24) = *(_OWORD *)&v88[v89 - 24];
          *((_QWORD *)v90 - 1) = *(_QWORD *)&v88[v89 - 8];
          *((_QWORD *)v91 - 3) = 0;
          *((_QWORD *)v91 - 2) = 0;
          *((_QWORD *)v91 - 1) = 0;
          v89 -= 32;
        }
        while (&v88[v89] != v87);
        v88 = (char *)*v30;
        v92 = (char *)v30[1];
        *v30 = &v85[v89 / 0x10];
        v30[1] = i8;
        v30[2] = v86;
        while (v92 != v88)
        {
          v93 = (void *)*((_QWORD *)v92 - 3);
          if (v93)
          {
            *((_QWORD *)v92 - 2) = v93;
            operator delete(v93);
          }
          v92 -= 32;
        }
        v1 = v102;
        if (!v88)
          goto LABEL_143;
      }
      operator delete(v88);
LABEL_143:
      v30[1] = i8;
      sub_2397A1600(*(os_unfair_lock_s **)(a1 + 48));
      v5 = (char *)v4;
      v7 = (char *)v4;
      if (!v105)
        goto LABEL_6;
    }
    v13 = 512;
    goto LABEL_15;
  }
LABEL_149:
  v94 = (void **)v109[1];
  v95 = (void **)v110;
  *((_QWORD *)&v111 + 1) = 0;
  v96 = v110 - (unint64_t)v109[1];
  if ((unint64_t)v110 - (unint64_t)v109[1] >= 0x11)
  {
    do
    {
      operator delete(*v94);
      v95 = (void **)v110;
      v94 = (void **)((char *)v109[1] + 8);
      v109[1] = v94;
      v96 = v110 - (_QWORD)v94;
    }
    while ((_QWORD)v110 - (_QWORD)v94 > 0x10uLL);
  }
  v97 = v96 >> 3;
  if (v97 == 1)
  {
    v98 = 512;
    goto LABEL_155;
  }
  if (v97 == 2)
  {
    v98 = 1024;
LABEL_155:
    *(_QWORD *)&v111 = v98;
  }
  if (v94 != v95)
  {
    do
    {
      v99 = *v94++;
      operator delete(v99);
    }
    while (v94 != v95);
    if ((void *)v110 != v109[1])
      *(_QWORD *)&v110 = v110 + (((unint64_t)v109[1] - v110 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v109[0])
    operator delete(v109[0]);
}

void sub_2394EFFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void **v29;
  uint64_t v30;
  void *v31;

  if (__p)
    operator delete(__p);
  v29 = a24;
  v30 = a25;
  if ((unint64_t)(a25 - (_QWORD)a24) >= 0x11)
  {
    do
    {
      operator delete(*v29);
      v30 = a25;
      v29 = a24 + 1;
      a24 = v29;
    }
    while ((unint64_t)(a25 - (_QWORD)v29) > 0x10);
  }
  while (v29 != (void **)v30)
  {
    v31 = *v29++;
    operator delete(v31);
  }
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD **sub_2394F00D0(_QWORD **a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  uint64_t *v13;

  a1[1] = 0;
  v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = sub_2394F01C4(a1, v4, &v13, &v12, v6);
      if (!*v7)
      {
        v8 = operator new(0x20uLL);
        v8[7] = *v6;
        v9 = v13;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = v9;
        *v7 = (uint64_t)v8;
        v10 = (_QWORD *)**a1;
        if (v10)
        {
          *a1 = v10;
          v8 = (_DWORD *)*v7;
        }
        sub_2394213B8(a1[1], (uint64_t *)v8);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2394F01AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239421038(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2394F01C4(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_2394F0374(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2394F08D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2394F08EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394F0900(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394F0918(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2394F0930(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

_QWORD *sub_2394F0CF4(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v6 = operator new(24 * a2);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = &v6[3 * a2];
    a1[2] = v8;
    v9 = *(const void **)a3;
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_2394189F8();
      }
      v11 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        v12 = (char *)operator new(v10);
        *v7 = v12;
        v7[1] = v12;
        v13 = &v12[4 * (v10 >> 2)];
        v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_2394F0E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_2394F0E80(&a9);
  _Unwind_Resume(a1);
}

void sub_2394F0E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_2394F0E80(&a9);
  _Unwind_Resume(a1);
}

void sub_2394F0E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_2394F0E80(&a9);
  _Unwind_Resume(a1);
}

void ***sub_2394F0E80(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = (char *)v2[1];
        do
        {
          v8 = (void *)*((_QWORD *)v6 - 3);
          v6 -= 24;
          v7 = v8;
          if (v8)
          {
            *((_QWORD *)v4 - 2) = v7;
            operator delete(v7);
          }
          v4 = v6;
        }
        while (v6 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_2394F0F18(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = a2[1];
  v9 = (v8 + ((unint64_t)(v7 + 2654435769) >> 2) + ((v7 + 2654435769) << 6) + 2654435769u) ^ (v7 + 2654435769);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = (v8 + ((unint64_t)(v7 + 2654435769) >> 2) + ((v7 + 2654435769) << 6) + 2654435769u) ^ (v7 + 2654435769);
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 + 0x7FFFFFFFFFFFFFFFLL);
    }
    v12 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == (_DWORD)v7 && *((_DWORD *)v13 + 5) == (_DWORD)v8)
                return v13;
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_31;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)v7 && *((_DWORD *)v13 + 5) == (_DWORD)v8)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v4)
              break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  v19 = operator new(0x20uLL);
  *v19 = 0;
  v19[1] = v9;
  v19[2] = **a4;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_34:
      *v19 = *v23;
LABEL_69:
      *v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v10)
      goto LABEL_45;
    if (prime < v10)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v10)
LABEL_45:
        sub_239427FE0(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        v4 = v9 % v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v23)
          goto LABEL_34;
      }
      else
      {
        v4 = v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v23)
          goto LABEL_34;
      }
    }
    else
    {
      v4 = (v10 + 0x7FFFFFFFFFFFFFFFLL) & v9;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      if (v23)
        goto LABEL_34;
    }
  }
  *v19 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    v31 = *(_QWORD *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10)
        v31 %= v10;
    }
    else
    {
      v31 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_69;
  }
LABEL_70:
  ++*(_QWORD *)(a1 + 24);
  return v19;
}

void sub_2394F1258(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2394F126C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2394F155C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2394F1570(uint64_t a1, uint64_t a2)
{
  float *v4;
  const float *v5;
  uint64_t v6;
  int v7;
  int v8;
  size_t v9;
  int v10;
  float *v11;
  size_t v12;
  size_t v13;
  int v14;
  std::bad_alloc *exception;
  std::bad_alloc *v16;
  void *v17;
  size_t v18;
  uint64_t v19;
  void *memptr;

  v4 = *(float **)a1;
  v5 = *(const float **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v4 || *(float **)v6 == v4)
  {
    v9 = (4 * (4 * *(_DWORD *)(v6 + 20)) + 31) & 0x7FFFFFFE0;
    v18 = v9 >> 2;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x100BBD03uLL);
    v17 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v16 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v16, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v10 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v19) = 4;
    HIDWORD(v19) = v10;
    sub_2394F1570(&v17, a2);
    v11 = *(float **)a1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v18;
    *(_QWORD *)a1 = v17;
    *(_QWORD *)(a1 + 8) = v13;
    v17 = v11;
    v18 = v12;
    *(_QWORD *)(a1 + 16) = v19;
    v19 = 0;
    free(v11);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 16);
    v7 = *(_DWORD *)(v6 + 20);
    if (v7 * v8)
    {
      sub_239A22D48(0, 0, 4, v7, 4, v5, 4, *(float **)v6, *(float *)(a2 + 24), 0.0, v8, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 20);
      if (v14 * *(_DWORD *)(a1 + 16))
        bzero(v4, 4 * (v14 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_2394F16BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void sub_2394F16D4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394F16E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADD268;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2394F1728(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD268;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t sub_2394F1750(_QWORD **a1, uint64_t *a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t result;
  uint64_t v16;

  v4 = *a2;
  v5 = *a1[1];
  v6 = v5 + 12 * *a2;
  v7 = (unsigned int **)(*a1[2] + 24 * *a2);
  v8 = *v7;
  v9 = v7[1];
  if (v8 == v9)
  {
    a3.i64[0] = *(_QWORD *)v6;
    a3.i32[2] = *(_DWORD *)(v6 + 8);
    v13 = a3;
  }
  else
  {
    a3 = 0uLL;
    v10 = v8;
    do
    {
      v11 = *v10++;
      v12 = v5 + 12 * v11;
      a4.i64[0] = *(_QWORD *)v12;
      a4.i32[2] = *(_DWORD *)(v12 + 8);
      a3 = vaddq_f32(a3, a4);
    }
    while (v10 != v9);
    a4.f32[0] = (float)(unint64_t)(v9 - v8);
    v13 = vdivq_f32(a3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0));
    a3.i64[0] = *(_QWORD *)v6;
    a3.i32[2] = *(_DWORD *)(v6 + 8);
  }
  v14 = *(float *)(*a1[4] + 4 * v4);
  result = vaddq_f32(vmulq_n_f32(v13, v14), vmulq_n_f32(a3, 1.0 - v14));
  v16 = *a1[3] + 12 * v4;
  *(_DWORD *)(v16 + 8) = result.i32[2];
  *(_QWORD *)v16 = result.i64[0];
  return result;
}

void sub_2394F1814()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394F1828(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADD2B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2394F1868(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD2B0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2394F1890(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t i;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  float *v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  float *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  _OWORD *v43;
  float *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  float v48;
  uint64_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  float v53;
  void *__p;
  void *v55;
  char *v56;
  void *v57;
  void *v58;
  char *v59;
  unsigned int v60;

  v3 = *a2;
  v60 = *a2;
  v4 = operator new(0xCuLL);
  v58 = v4 + 3;
  v59 = (char *)(v4 + 3);
  *(_QWORD *)v4 = -1;
  v4[2] = -1;
  v57 = v4;
  v5 = operator new(0xCuLL);
  v49 = v3;
  v55 = v5 + 3;
  v56 = (char *)(v5 + 3);
  *(_QWORD *)v5 = -1;
  v5[2] = -1;
  __p = v5;
  sub_23996362C(*(_QWORD *)(a1 + 16), &v60, (uint64_t)&v57);
  sub_23996389C(*(_QWORD *)(a1 + 16), &v60, (uint64_t)&__p);
  for (i = 0; i != 3; ++i)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = (unsigned int *)sub_239962518(v7 + 104, (unsigned int *)__p + i);
    v9 = *(unsigned int *)(sub_239962518(v7 + 104, v8) + 12);
    v10 = (uint64_t *)(*(_QWORD *)(v7 + 8) + 16 * *(unsigned int *)(v7 + 176));
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v50 = *(float32x4_t *)(*(_QWORD *)(v12 + 40) + 16 * v9);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(unsigned int *)(sub_239962518(v16 + 104, (unsigned int *)__p + i) + 12);
    v18 = (uint64_t *)(*(_QWORD *)(v16 + 8) + 16 * *(unsigned int *)(v16 + 176));
    v20 = *v18;
    v19 = (std::__shared_weak_count *)v18[1];
    if (v19)
    {
      v21 = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 - 1, v21));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v24 = vsubq_f32(v50, *(float32x4_t *)(*(_QWORD *)(v20 + 40) + 16 * v17));
    v25 = vmulq_f32(v24, v24);
    v25.i32[3] = 0;
    v26 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v25, v25));
    *(&v51 + i) = v26;
    sub_2397A15E8(*(os_unfair_lock_s **)(a1 + 8));
    v27 = *(_QWORD *)(a1 + 24);
    v29 = *(float **)(v27 + 8);
    v28 = *(_QWORD *)(v27 + 16);
    if ((unint64_t)v29 < v28)
    {
      *v29 = v26;
      v30 = (uint64_t)(v29 + 1);
      goto LABEL_35;
    }
    v31 = *(float **)v27;
    v32 = (uint64_t)v29 - *(_QWORD *)v27;
    v33 = v32 >> 2;
    v34 = (v32 >> 2) + 1;
    if (v34 >> 62)
      sub_2394189F8();
    v35 = v28 - (_QWORD)v31;
    if (v35 >> 1 > v34)
      v34 = v35 >> 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
      v36 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 62)
        sub_239418A80();
      v37 = operator new(4 * v36);
      v38 = (float *)&v37[4 * v33];
      *v38 = v26;
      v30 = (uint64_t)(v38 + 1);
      if (v29 == v31)
        goto LABEL_33;
LABEL_27:
      v39 = (char *)(v29 - 1) - (char *)v31;
      if (v39 < 0x2C)
        goto LABEL_49;
      if ((unint64_t)((char *)v29 - &v37[v32]) < 0x20)
        goto LABEL_49;
      v40 = (v39 >> 2) + 1;
      v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
      v42 = &v29[v41 / 0xFFFFFFFFFFFFFFFCLL];
      v38 = (float *)((char *)v38 - v41);
      v43 = &v37[4 * v33 - 16];
      v44 = v29 - 4;
      v45 = v40 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v46 = *(_OWORD *)v44;
        *(v43 - 1) = *((_OWORD *)v44 - 1);
        *v43 = v46;
        v43 -= 2;
        v44 -= 8;
        v45 -= 8;
      }
      while (v45);
      v29 = v42;
      if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_49:
        do
        {
          v47 = *((_DWORD *)v29-- - 1);
          *((_DWORD *)v38-- - 1) = v47;
        }
        while (v29 != v31);
      }
      goto LABEL_33;
    }
    v37 = 0;
    v38 = (float *)(4 * v33);
    *(float *)(4 * v33) = v26;
    v30 = 4 * v33 + 4;
    if (v29 != v31)
      goto LABEL_27;
LABEL_33:
    *(_QWORD *)v27 = v38;
    *(_QWORD *)(v27 + 8) = v30;
    *(_QWORD *)(v27 + 16) = &v37[4 * v36];
    if (v31)
      operator delete(v31);
LABEL_35:
    *(_QWORD *)(v27 + 8) = v30;
    sub_2397A1600(*(os_unfair_lock_s **)(a1 + 8));
  }
  v48 = v53;
  if (v52 >= v53)
    v48 = v52;
  if (v51 >= v48)
    v48 = v51;
  *(float *)(**(_QWORD **)(a1 + 32) + 4 * v49) = v48;
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
}

void sub_2394F1C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

float *sub_2394F1C6C(float *result, float *a2, float *a3)
{
  unint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float *v41;
  float v42;
  float v43;
  float *v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 31)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2)
        result = v18 + 1;
      else
        a3 = v18;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

unint64_t sub_2394F2014(unint64_t result, char *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  char *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  BOOL v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  BOOL v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t *v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  int64_t v133;
  int64_t v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  BOOL v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t *v162;
  char *v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;

  v7 = (unint64_t *)result;
LABEL_2:
  v8 = a2 - 8;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - (char *)v9;
    v11 = (a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v102 = *((_QWORD *)a2 - 2);
        v103 = *v9;
        if (v102 > *v9)
        {
          *v9 = v102;
          *((_QWORD *)a2 - 2) = v103;
          v104 = v9[1];
          v9[1] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v104;
        }
        return result;
      case 3:
        v105 = v9[2];
        v106 = *v9;
        v107 = *((_QWORD *)a2 - 2);
        if (v105 <= *v9)
        {
          if (v107 <= v105)
            return result;
          v9[2] = v107;
          *((_QWORD *)a2 - 2) = v105;
          v8 = (char *)(v9 + 3);
          v159 = v9[3];
          v9[3] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v159;
          v160 = v9[2];
          v161 = *v9;
          if (v160 <= *v9)
            return result;
          *v9 = v160;
          v9[2] = v161;
          v108 = (uint64_t *)(v9 + 1);
        }
        else
        {
          if (v107 <= v105)
          {
            v108 = (uint64_t *)(v9 + 3);
            v170 = v9[3];
            v171 = v9[1];
            *v9 = v105;
            v9[1] = v170;
            v9[2] = v106;
            v9[3] = v171;
            v172 = *((_QWORD *)a2 - 2);
            if (v172 <= v106)
              return result;
            v9[2] = v172;
          }
          else
          {
            v108 = (uint64_t *)(v9 + 1);
            *v9 = v107;
          }
          *((_QWORD *)a2 - 2) = v106;
        }
        v173 = *v108;
        *v108 = *(_QWORD *)v8;
        *(_QWORD *)v8 = v173;
        return result;
      case 4:
        return (unint64_t)sub_2394F2EA4((uint64_t *)v9, v9 + 2, v9 + 4, (unint64_t *)a2 - 2);
      case 5:
        result = (unint64_t)sub_2394F2EA4((uint64_t *)v9, v9 + 2, v9 + 4, v9 + 6);
        v109 = *((_QWORD *)a2 - 2);
        v110 = v9[6];
        if (v109 > v110)
        {
          v9[6] = v109;
          *((_QWORD *)a2 - 2) = v110;
          v111 = v9[7];
          v9[7] = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v111;
          v112 = v9[6];
          v113 = v9[4];
          if (v112 > v113)
          {
            v114 = v9[5];
            v115 = v9[7];
            v9[4] = v112;
            v9[5] = v115;
            v9[6] = v113;
            v9[7] = v114;
            v116 = v9[2];
            if (v112 > v116)
            {
              v117 = v9[3];
              v9[2] = v112;
              v9[3] = v115;
              v9[4] = v116;
              v9[5] = v117;
              v118 = *v9;
              if (v112 > *v9)
              {
                v119 = v9[1];
                *v9 = v112;
                v9[1] = v115;
                v9[2] = v118;
                v9[3] = v119;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 383)
        {
          v120 = (char *)(v9 + 2);
          v122 = v9 == (unint64_t *)a2 || v120 == a2;
          if ((a4 & 1) == 0)
          {
            if (!v122)
            {
              v162 = v9 + 3;
              do
              {
                v163 = v120;
                v164 = v7[2];
                v165 = *v7;
                if (v164 > *v7)
                {
                  v166 = v7[3];
                  v167 = v162;
                  do
                  {
                    v168 = v167;
                    *(v167 - 1) = v165;
                    v169 = *(v167 - 2);
                    v167 -= 2;
                    *v168 = v169;
                    v165 = *(v168 - 5);
                  }
                  while (v164 > v165);
                  *(v167 - 1) = v164;
                  *v167 = v166;
                }
                v120 = v163 + 16;
                v162 += 2;
                v7 = (unint64_t *)v163;
              }
              while (v163 + 16 != a2);
            }
            return result;
          }
          if (v122)
            return result;
          v123 = 0;
          v124 = v9;
          while (1)
          {
            v126 = v120;
            v127 = v124[2];
            v128 = *v124;
            if (v127 > *v124)
            {
              v129 = v124[3];
              v130 = v123;
              do
              {
                v131 = (char *)v9 + v130;
                v132 = *(unint64_t *)((char *)v9 + v130 + 8);
                *((_QWORD *)v131 + 2) = v128;
                *((_QWORD *)v131 + 3) = v132;
                if (!v130)
                {
                  v125 = v9;
                  goto LABEL_126;
                }
                v128 = *((_QWORD *)v131 - 2);
                v130 -= 16;
              }
              while (v127 > v128);
              v125 = (unint64_t *)((char *)v9 + v130 + 16);
LABEL_126:
              *v125 = v127;
              v125[1] = v129;
            }
            v120 = v126 + 16;
            v123 += 16;
            v124 = (unint64_t *)v126;
            if (v126 + 16 == a2)
              return result;
          }
        }
        if (a3)
        {
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[2 * ((unint64_t)v11 >> 1)];
          v14 = *((_QWORD *)a2 - 2);
          if ((unint64_t)v10 >= 0x801)
          {
            v15 = *v13;
            v16 = *v9;
            if (*v13 <= *v9)
            {
              if (v14 <= v15)
                goto LABEL_23;
              *v13 = v14;
              *((_QWORD *)a2 - 2) = v15;
              v21 = &v9[2 * v12];
              v23 = v21[1];
              v22 = (char *)(v21 + 1);
              *(_QWORD *)v22 = *((_QWORD *)a2 - 1);
              *((_QWORD *)a2 - 1) = v23;
              v24 = *v9;
              if (*v13 <= *v9)
              {
LABEL_23:
                v31 = v12 - 1;
                v32 = &v9[2 * v12 - 2];
                v33 = *v32;
                v34 = v9[2];
                v35 = *((_QWORD *)a2 - 4);
                if (*v32 <= v34)
                {
                  if (v35 <= v33)
                    goto LABEL_36;
                  *v32 = v35;
                  *((_QWORD *)a2 - 4) = v33;
                  v37 = &v9[2 * v31];
                  v39 = v37[1];
                  v38 = (char *)(v37 + 1);
                  *(_QWORD *)v38 = *((_QWORD *)a2 - 3);
                  *((_QWORD *)a2 - 3) = v39;
                  v40 = v9[2];
                  if (*v32 <= v40)
                  {
LABEL_36:
                    v49 = v12 + 1;
                    v50 = &v9[2 * v12 + 2];
                    v51 = *v50;
                    v52 = v9[4];
                    v53 = *((_QWORD *)a2 - 6);
                    if (*v50 <= v52)
                    {
                      if (v53 <= v51)
                        goto LABEL_46;
                      *v50 = v53;
                      *((_QWORD *)a2 - 6) = v51;
                      v55 = &v9[2 * v49];
                      v57 = v55[1];
                      v56 = (char *)(v55 + 1);
                      *(_QWORD *)v56 = *((_QWORD *)a2 - 5);
                      *((_QWORD *)a2 - 5) = v57;
                      v51 = *v50;
                      v58 = v9[4];
                      if (*v50 <= v58)
                      {
LABEL_46:
                        v63 = *v13;
                        v64 = *v32;
                        if (*v13 > *v32)
                          goto LABEL_47;
                        goto LABEL_52;
                      }
                      v9[4] = v51;
                      *v50 = v58;
                      v54 = v9 + 5;
                    }
                    else
                    {
                      if (v53 <= v51)
                      {
                        v59 = &v9[2 * v49];
                        v60 = v59[1];
                        v54 = v59 + 1;
                        result = v9[5];
                        v9[4] = v51;
                        v9[5] = v60;
                        *v50 = v52;
                        *v54 = result;
                        v61 = *((_QWORD *)a2 - 6);
                        if (v61 <= v52)
                        {
                          v51 = v52;
                          v63 = *v13;
                          v64 = *v32;
                          if (*v13 > *v32)
                          {
LABEL_47:
                            v65 = &v9[2 * v31 + 1];
                            if (v51 <= v63)
                            {
                              *v32 = v63;
                              *v13 = v64;
                              v67 = &v9[2 * v12];
                              v69 = v67[1];
                              v68 = v67 + 1;
                              v70 = *v65;
                              *v65 = v69;
                              *v68 = v70;
                              if (v51 <= v64)
                              {
                                v63 = v64;
                                goto LABEL_56;
                              }
                              *v13 = v51;
                              *v50 = v64;
                              v66 = &v9[2 * v49 + 1];
                              v65 = v68;
                            }
                            else
                            {
                              *v32 = v51;
                              *v50 = v64;
                              v66 = &v9[2 * v49 + 1];
                            }
                            goto LABEL_55;
                          }
LABEL_52:
                          if (v51 <= v63)
                          {
LABEL_56:
                            v75 = *v9;
                            *v9 = v63;
                            v20 = v9 + 1;
                            *v13 = v75;
                            v26 = (char *)&v9[2 * v12 + 1];
                            goto LABEL_57;
                          }
                          *v13 = v51;
                          v71 = &v9[2 * v12];
                          v72 = v71[1];
                          v66 = v71 + 1;
                          result = v72;
                          *v50 = v63;
                          v73 = &v9[2 * v49];
                          *v66 = v73[1];
                          v73[1] = v72;
                          if (v51 <= v64)
                          {
                            v63 = v51;
                            goto LABEL_56;
                          }
                          *v32 = v51;
                          *v13 = v64;
                          v65 = &v9[2 * v31 + 1];
LABEL_55:
                          v74 = *v65;
                          *v65 = *v66;
                          *v66 = v74;
                          v63 = *v13;
                          goto LABEL_56;
                        }
                        *v50 = v61;
                      }
                      else
                      {
                        v54 = v9 + 5;
                        v9[4] = v53;
                      }
                      *((_QWORD *)a2 - 6) = v52;
                      v56 = a2 - 40;
                    }
                    v62 = *v54;
                    *v54 = *(_QWORD *)v56;
                    *(_QWORD *)v56 = v62;
                    v51 = *v50;
                    goto LABEL_46;
                  }
                  v9[2] = *v32;
                  *v32 = v40;
                  v36 = v9 + 3;
                }
                else
                {
                  if (v35 <= v33)
                  {
                    v44 = &v9[2 * v31];
                    v45 = v44[1];
                    v36 = v44 + 1;
                    v46 = v9[3];
                    v9[2] = v33;
                    v9[3] = v45;
                    *v32 = v34;
                    *v36 = v46;
                    v47 = *((_QWORD *)a2 - 4);
                    if (v47 <= v34)
                      goto LABEL_36;
                    *v32 = v47;
                  }
                  else
                  {
                    v36 = v9 + 3;
                    v9[2] = v35;
                  }
                  *((_QWORD *)a2 - 4) = v34;
                  v38 = a2 - 24;
                }
                v48 = *v36;
                *v36 = *(_QWORD *)v38;
                *(_QWORD *)v38 = v48;
                goto LABEL_36;
              }
              *v9 = *v13;
              v17 = v9 + 1;
              *v13 = v24;
            }
            else
            {
              if (v14 <= v15)
              {
                *v9 = v15;
                *v13 = v16;
                v28 = v9[1];
                v17 = &v9[2 * v12 + 1];
                v9[1] = *v17;
                *v17 = v28;
                v29 = *((_QWORD *)a2 - 2);
                if (v29 <= v16)
                  goto LABEL_23;
                *v13 = v29;
              }
              else
              {
                v17 = v9 + 1;
                *v9 = v14;
              }
              *((_QWORD *)a2 - 2) = v16;
              v22 = a2 - 8;
            }
            v30 = *v17;
            *v17 = *(_QWORD *)v22;
            *(_QWORD *)v22 = v30;
            goto LABEL_23;
          }
          v18 = *v9;
          v19 = *v13;
          if (*v9 <= *v13)
          {
            if (v14 > v18)
            {
              *v9 = v14;
              *((_QWORD *)a2 - 2) = v18;
              v26 = (char *)(v9 + 1);
              v25 = v9[1];
              v9[1] = *((_QWORD *)a2 - 1);
              *((_QWORD *)a2 - 1) = v25;
              v27 = *v13;
              if (*v9 > *v13)
              {
                *v13 = *v9;
                *v9 = v27;
                v20 = &v9[2 * v12 + 1];
LABEL_57:
                v76 = *v20;
                *v20 = *(_QWORD *)v26;
                *(_QWORD *)v26 = v76;
              }
            }
          }
          else
          {
            v20 = &v9[2 * v12 + 1];
            if (v14 > v18)
            {
              *v13 = v14;
              *((_QWORD *)a2 - 2) = v19;
LABEL_31:
              v26 = a2 - 8;
              goto LABEL_57;
            }
            *v13 = v18;
            v41 = v9[1];
            *v9 = v19;
            v42 = *v20;
            *v20 = v41;
            v9[1] = v42;
            v43 = *((_QWORD *)a2 - 2);
            if (v43 > v19)
            {
              *v9 = v43;
              *((_QWORD *)a2 - 2) = v19;
              v20 = v9 + 1;
              goto LABEL_31;
            }
          }
          --a3;
          v77 = *v9;
          if ((a4 & 1) == 0 && *(v9 - 2) <= v77)
          {
            if (v77 <= *((_QWORD *)a2 - 2))
            {
              v93 = v9 + 2;
              do
              {
                v9 = v93;
                if (v93 >= (unint64_t *)a2)
                  break;
                v93 += 2;
              }
              while (v77 <= *v9);
            }
            else
            {
              do
              {
                v92 = v9[2];
                v9 += 2;
              }
              while (v77 <= v92);
            }
            v94 = (unint64_t *)a2;
            if (v9 < (unint64_t *)a2)
            {
              v94 = (unint64_t *)a2;
              do
              {
                v95 = *(v94 - 2);
                v94 -= 2;
              }
              while (v77 > v95);
            }
            v96 = v7[1];
            if (v9 < v94)
            {
              v97 = *v9;
              v98 = *v94;
              do
              {
                *v9 = v98;
                *v94 = v97;
                v99 = v9[1];
                v9[1] = v94[1];
                v94[1] = v99;
                do
                {
                  v100 = v9[2];
                  v9 += 2;
                  v97 = v100;
                }
                while (v77 <= v100);
                do
                {
                  v101 = *(v94 - 2);
                  v94 -= 2;
                  v98 = v101;
                }
                while (v77 > v101);
              }
              while (v9 < v94);
            }
            if (v9 - 2 != v7)
            {
              *v7 = *(v9 - 2);
              v7[1] = *(v9 - 1);
            }
            a4 = 0;
            *(v9 - 2) = v77;
            *(v9 - 1) = v96;
            continue;
          }
          v78 = 0;
          v79 = v9[1];
          do
          {
            v80 = v9[v78 + 2];
            v78 += 2;
          }
          while (v80 > v77);
          v81 = (char *)&v9[v78];
          v82 = a2;
          if (v78 == 2)
          {
            v82 = a2;
            do
            {
              if (v81 >= v82)
                break;
              v84 = *((_QWORD *)v82 - 2);
              v82 -= 16;
            }
            while (v84 <= v77);
          }
          else
          {
            do
            {
              v83 = *((_QWORD *)v82 - 2);
              v82 -= 16;
            }
            while (v83 <= v77);
          }
          if (v81 >= v82)
          {
            v9 = (unint64_t *)((char *)v9 + v78 * 8);
            v90 = v81 - 16;
            if (v81 - 16 != (char *)v7)
              goto LABEL_75;
          }
          else
          {
            v85 = *(_QWORD *)v82;
            v9 = (unint64_t *)((char *)v9 + v78 * 8);
            v86 = (unint64_t *)v82;
            do
            {
              *v9 = v85;
              *v86 = v80;
              v87 = v9[1];
              v9[1] = v86[1];
              v86[1] = v87;
              do
              {
                v88 = v9[2];
                v9 += 2;
                v80 = v88;
              }
              while (v88 > v77);
              do
              {
                v89 = *(v86 - 2);
                v86 -= 2;
                v85 = v89;
              }
              while (v89 <= v77);
            }
            while (v9 < v86);
            v90 = (char *)(v9 - 2);
            if (v9 - 2 != v7)
            {
LABEL_75:
              *v7 = *(v9 - 2);
              v7[1] = *(v9 - 1);
            }
          }
          *(v9 - 2) = v77;
          *(v9 - 1) = v79;
          if (v81 < v82)
            goto LABEL_79;
          v91 = sub_2394F2B5C(v7, v90);
          result = sub_2394F2B5C(v9, a2);
          if (!(_DWORD)result)
          {
            if (v91)
              continue;
LABEL_79:
            result = sub_2394F2014(v7, v90, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v90;
          if (v91)
            return result;
          goto LABEL_2;
        }
        if (v9 == (unint64_t *)a2)
          return result;
        v133 = (unint64_t)(v11 - 2) >> 1;
        v134 = v133;
        while (2)
        {
          if (v133 >= v134)
          {
            v135 = (2 * v134) | 1;
            v136 = &v9[2 * v135];
            if (2 * v134 + 2 >= v11)
            {
              v137 = *v136;
              v139 = &v9[2 * v134];
              v140 = *v139;
              if (*v136 <= *v139)
              {
LABEL_146:
                v141 = v139[1];
                while (1)
                {
                  result = (unint64_t)v139;
                  v139 = v136;
                  *(_QWORD *)result = v137;
                  *(_QWORD *)(result + 8) = v136[1];
                  if (v133 < v135)
                    break;
                  result = (2 * v135) | 1;
                  v136 = &v9[2 * result];
                  v135 = 2 * v135 + 2;
                  if (v135 < v11)
                  {
                    v137 = *v136;
                    v142 = v136[2];
                    if (*v136 >= v142)
                      v137 = v136[2];
                    if (*v136 <= v142)
                      v135 = result;
                    else
                      v136 += 2;
                    if (v137 > v140)
                      break;
                  }
                  else
                  {
                    v137 = *v136;
                    v135 = result;
                    if (*v136 > v140)
                      break;
                  }
                }
                *v139 = v140;
                v139[1] = v141;
              }
            }
            else
            {
              v137 = v136[2];
              v138 = *v136 > v137;
              if (*v136 < v137)
                v137 = *v136;
              if (v138)
              {
                v136 += 2;
                v135 = 2 * v134 + 2;
              }
              v139 = &v9[2 * v134];
              v140 = *v139;
              if (v137 <= *v139)
                goto LABEL_146;
            }
          }
          v138 = v134-- <= 0;
          if (!v138)
            continue;
          break;
        }
        v143 = (unint64_t)v10 >> 4;
        do
        {
          v144 = 0;
          v145 = *v9;
          v146 = v9[1];
          v147 = (unint64_t)(v143 - 2) >> 1;
          v148 = v9;
          do
          {
            while (1)
            {
              v150 = &v148[2 * v144 + 2];
              v151 = (2 * v144) | 1;
              v144 = 2 * v144 + 2;
              if (v144 < v143)
                break;
              v144 = v151;
              *v148 = *v150;
              v148[1] = v150[1];
              v148 = v150;
              if (v151 > v147)
                goto LABEL_169;
            }
            v149 = *v150;
            result = v150[2];
            if (*v150 >= result)
              v149 = v150[2];
            if (*v150 <= result)
              v144 = v151;
            else
              v150 += 2;
            *v148 = v149;
            v148[1] = v150[1];
            v148 = v150;
          }
          while (v144 <= v147);
LABEL_169:
          if (v150 == (uint64_t *)(a2 - 16))
          {
            *v150 = v145;
            v150[1] = v146;
          }
          else
          {
            *v150 = *((_QWORD *)a2 - 2);
            v150[1] = *((_QWORD *)a2 - 1);
            *((_QWORD *)a2 - 2) = v145;
            *((_QWORD *)a2 - 1) = v146;
            v152 = (char *)v150 - (char *)v9 + 16;
            if (v152 >= 17)
            {
              v153 = (((unint64_t)v152 >> 4) - 2) >> 1;
              v154 = (uint64_t *)&v9[2 * v153];
              v155 = *v154;
              v156 = *v150;
              if (*v154 > (unint64_t)*v150)
              {
                v157 = v150[1];
                do
                {
                  v158 = v150;
                  v150 = v154;
                  *v158 = v155;
                  v158[1] = v154[1];
                  if (!v153)
                    break;
                  v153 = (v153 - 1) >> 1;
                  v154 = (uint64_t *)&v9[2 * v153];
                  v155 = *v154;
                }
                while (*v154 > v156);
                *v150 = v156;
                v150[1] = v157;
              }
            }
          }
          a2 -= 16;
          v138 = v143-- <= 2;
        }
        while (!v138);
        return result;
    }
  }
}

BOOL sub_2394F2B5C(unint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 2);
      v7 = *a1;
      if (v6 > *a1)
      {
        *a1 = v6;
        *((_QWORD *)a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = *a1;
      v11 = *((_QWORD *)a2 - 2);
      if (v9 > *a1)
      {
        if (v11 <= v9)
        {
          v12 = (uint64_t *)(a1 + 3);
          v36 = a1[3];
          v37 = a1[1];
          *a1 = v9;
          a1[1] = v36;
          a1[2] = v10;
          a1[3] = v37;
          v38 = *((_QWORD *)a2 - 2);
          if (v38 <= v10)
            return result;
          a1[2] = v38;
        }
        else
        {
          v12 = (uint64_t *)(a1 + 1);
          *a1 = v11;
        }
        *((_QWORD *)a2 - 2) = v10;
        v30 = a2 - 8;
        goto LABEL_27;
      }
      if (v11 > v9)
      {
        a1[2] = v11;
        *((_QWORD *)a2 - 2) = v9;
        v30 = (char *)(a1 + 3);
        v29 = a1[3];
        a1[3] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v29;
        v31 = a1[2];
        v32 = *a1;
        if (v31 > *a1)
        {
          *a1 = v31;
          a1[2] = v32;
          v12 = (uint64_t *)(a1 + 1);
LABEL_27:
          v39 = *v12;
          *v12 = *(_QWORD *)v30;
          *(_QWORD *)v30 = v39;
          return result;
        }
      }
      return result;
    case 4:
      sub_2394F2EA4((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
      return 1;
    case 5:
      sub_2394F2EA4((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *((_QWORD *)a2 - 2);
      v19 = a1[6];
      if (v18 <= v19)
        return 1;
      a1[6] = v18;
      *((_QWORD *)a2 - 2) = v19;
      v20 = a1[7];
      a1[7] = *((_QWORD *)a2 - 1);
      *((_QWORD *)a2 - 1) = v20;
      v21 = a1[6];
      v22 = a1[4];
      if (v21 <= v22)
        return 1;
      v23 = a1[5];
      v24 = a1[7];
      a1[4] = v21;
      a1[5] = v24;
      a1[6] = v22;
      a1[7] = v23;
      v25 = a1[2];
      if (v21 <= v25)
        return 1;
      v26 = a1[3];
      a1[2] = v21;
      a1[3] = v24;
      a1[4] = v25;
      a1[5] = v26;
      v27 = *a1;
      if (v21 <= *a1)
        return 1;
      v28 = a1[1];
      *a1 = v21;
      a1[1] = v24;
      a1[2] = v27;
      a1[3] = v28;
      return 1;
    default:
      v13 = (char *)(a1 + 4);
      v14 = a1[4];
      v15 = a1[2];
      v16 = *a1;
      if (v15 > *a1)
      {
        if (v14 <= v15)
        {
          v17 = (uint64_t *)(a1 + 3);
          v40 = a1[3];
          v41 = a1[1];
          *a1 = v15;
          a1[1] = v40;
          a1[2] = v16;
          a1[3] = v41;
          if (v14 <= v16)
            goto LABEL_32;
          a1[2] = v14;
        }
        else
        {
          v17 = (uint64_t *)(a1 + 1);
          *a1 = v14;
        }
        a1[4] = v16;
        v34 = (uint64_t *)(a1 + 5);
        goto LABEL_31;
      }
      if (v14 > v15)
      {
        v34 = (uint64_t *)(a1 + 3);
        v33 = a1[3];
        v35 = a1[5];
        a1[4] = v15;
        a1[5] = v33;
        a1[2] = v14;
        a1[3] = v35;
        if (v14 > v16)
        {
          *a1 = v14;
          a1[2] = v16;
          v17 = (uint64_t *)(a1 + 1);
LABEL_31:
          v42 = *v17;
          *v17 = *v34;
          *v34 = v42;
        }
      }
LABEL_32:
      v43 = (char *)(a1 + 6);
      if (a1 + 6 == (unint64_t *)a2)
        return 1;
      v44 = 0;
      v45 = 0;
      while (1)
      {
        v46 = *(_QWORD *)v43;
        v47 = *(_QWORD *)v13;
        if (*(_QWORD *)v43 > *(_QWORD *)v13)
          break;
LABEL_41:
        v13 = v43;
        v44 += 16;
        v43 += 16;
        if (v43 == a2)
          return 1;
      }
      v48 = *((_QWORD *)v43 + 1);
      v49 = v44;
      do
      {
        v50 = (unint64_t *)((char *)a1 + v49);
        v51 = *(unint64_t *)((char *)a1 + v49 + 40);
        v50[6] = v47;
        v50[7] = v51;
        if (v49 == -32)
        {
          *a1 = v46;
          a1[1] = v48;
          if (++v45 != 8)
            goto LABEL_41;
          return v43 + 16 == a2;
        }
        v47 = v50[2];
        v49 -= 16;
      }
      while (v46 > v47);
      v52 = (char *)a1 + v49;
      *((_QWORD *)v52 + 6) = v46;
      *((_QWORD *)v52 + 7) = v48;
      if (++v45 != 8)
        goto LABEL_41;
      return v43 + 16 == a2;
  }
}

uint64_t *sub_2394F2EA4(uint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (*a2 <= *result)
  {
    if (v6 > v4)
    {
      *a2 = v6;
      *a3 = v4;
      v9 = (uint64_t *)(a2 + 1);
      v8 = a2[1];
      a2[1] = a3[1];
      a3[1] = v8;
      v10 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        v7 = result + 1;
        *a2 = v10;
LABEL_10:
        v12 = *v7;
        *v7 = *v9;
        *v9 = v12;
      }
    }
  }
  else
  {
    if (v6 > v4)
    {
      v7 = result + 1;
      *result = v6;
LABEL_9:
      *a3 = v5;
      v9 = (uint64_t *)(a3 + 1);
      goto LABEL_10;
    }
    *result = v4;
    *a2 = v5;
    v7 = (uint64_t *)(a2 + 1);
    v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    v5 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  v13 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v13;
    v14 = a3[1];
    a3[1] = a4[1];
    a4[1] = v14;
    v15 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v17;
        v18 = result[1];
        result[1] = a2[1];
        a2[1] = v18;
      }
    }
  }
  return result;
}

char *sub_2394F2FD4(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  int v55;
  char *v56;
  int v57;
  char *v58;
  size_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  int v74;

  v5 = *a1;
  v6 = (uint64_t)a2 - *a1;
  v7 = (char *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFFCLL));
  v8 = a5 - 1;
  if (a5 < 1)
    return v7;
  v10 = __src;
  v11 = a1;
  v12 = v6 >> 2;
  v14 = (char *)a1[1];
  v13 = a1[2];
  if (a5 > (uint64_t)(v13 - (_QWORD)v14) >> 2)
  {
    v15 = a5 + ((uint64_t)&v14[-v5] >> 2);
    if (v15 >> 62)
      sub_2394189F8();
    v17 = v13 - v5;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    if (v18)
    {
      if (v18 >> 62)
        sub_239418A80();
      v19 = *a1 + (v6 & 0xFFFFFFFFFFFFFFFCLL);
      v21 = v18;
      v22 = operator new(4 * v18);
      v18 = v21;
      v12 = v6 >> 2;
      v10 = __src;
      v7 = (char *)v19;
      v11 = a1;
    }
    else
    {
      v22 = 0;
    }
    v35 = &v22[4 * v12];
    v36 = &v35[4 * a5];
    v37 = v35;
    v38 = v10;
    if ((v8 & 0x3FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_64;
    v37 = &v22[4 * v12];
    v38 = v10;
    if ((unint64_t)(&v22[v6 & 0xFFFFFFFFFFFFFFFCLL] - v10) < 0x20)
      goto LABEL_64;
    v39 = (v8 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
    v37 = &v35[v40];
    v38 = &v10[v40];
    v41 = (__int128 *)(v10 + 16);
    v42 = &v22[4 * v12 + 16];
    v43 = v39 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v44 = *v41;
      *(v42 - 1) = *(v41 - 1);
      *v42 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 8;
    }
    while (v43);
    if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_64:
      do
      {
        v45 = *(_DWORD *)v38;
        v38 += 4;
        *(_DWORD *)v37 = v45;
        v37 += 4;
      }
      while (v37 != v36);
    }
    v46 = &v22[4 * v12];
    if ((void *)v5 != a2)
    {
      v47 = v7;
      v46 = &v22[4 * v12];
      if ((unint64_t)(v6 - 4) < 0x3C)
        goto LABEL_65;
      v47 = v7;
      v46 = &v22[4 * v12];
      if ((v6 & 0xFFFFFFFFFFFFFFFCLL) + v5 - (unint64_t)&v22[v6 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_65;
      v48 = ((unint64_t)(v6 - 4) >> 2) + 1;
      v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
      v47 = &v7[-v49];
      v46 = &v35[-v49];
      v50 = 4 * v12 - 16;
      v51 = &v22[v50];
      v52 = (__int128 *)(v5 + v50);
      v53 = v48 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 8;
      }
      while (v53);
      if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_65:
        do
        {
          v55 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *((_DWORD *)v46 - 1) = v55;
          v46 -= 4;
        }
        while (v47 != (char *)v5);
      }
    }
    v56 = &v22[4 * v18];
    if (v14 != v7)
      memmove(v36, v7, v14 - v7);
    *v11 = (unint64_t)v46;
    v11[1] = (unint64_t)&v36[v14 - v7];
    v11[2] = (unint64_t)v56;
    if (v5)
      operator delete((void *)v5);
    return v35;
  }
  v23 = v14 - v7;
  v24 = (v14 - v7) >> 2;
  if (v24 >= a5)
  {
    v25 = &__src[4 * a5];
    v28 = (char *)a1[1];
    goto LABEL_44;
  }
  v25 = &__src[4 * v24];
  if (v25 == a4)
  {
    v28 = (char *)a1[1];
    goto LABEL_43;
  }
  v26 = a4 - &__src[v23] - 4;
  if (v26 < 0x1C)
  {
    v27 = &__src[4 * v24];
    v28 = (char *)a1[1];
    do
    {
LABEL_42:
      v57 = *(_DWORD *)v27;
      v27 += 4;
      *(_DWORD *)v28 = v57;
      v28 += 4;
    }
    while (v27 != a4);
    goto LABEL_43;
  }
  v27 = &__src[4 * v24];
  v28 = (char *)a1[1];
  if ((unint64_t)(v7 - __src) < 0x20)
    goto LABEL_42;
  v29 = (v26 >> 2) + 1;
  v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
  v27 = &v25[v30];
  v28 = &v14[v30];
  v31 = v14 + 16;
  v32 = &__src[4 * v24 + 16];
  v33 = v29 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v34 = *(_OWORD *)v32;
    *(v31 - 1) = *((_OWORD *)v32 - 1);
    *v31 = v34;
    v31 += 2;
    v32 += 32;
    v33 -= 8;
  }
  while (v33);
  if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_42;
LABEL_43:
  a1[1] = (unint64_t)v28;
  if (v23 < 1)
    return v7;
LABEL_44:
  v58 = &v7[4 * a5];
  v59 = v28 - v58;
  v60 = (v28 - v58) >> 2;
  v61 = &v28[-4 * a5];
  v62 = v28;
  if (v61 < v14)
  {
    v63 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + v59;
    v64 = (char *)(v63 + v5);
    v65 = v63 + v5 + 4;
    if ((unint64_t)v14 > v65)
      v65 = (unint64_t)v14;
    v66 = v65 + ~v5 - v63;
    if (v66 < 0x2C)
    {
      v62 = v28;
    }
    else
    {
      v67 = v28 - v64;
      v62 = v28;
      if (v67 >= 0x20)
      {
        v68 = (v66 >> 2) + 1;
        v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
        v61 += v69;
        v62 = &v28[v69];
        v70 = v28 + 16;
        v71 = (__int128 *)(4 * v60 + 4 * v12 + v5 + 16);
        v72 = v68 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v73 = *v71;
          *(v70 - 1) = *(v71 - 1);
          *v70 = v73;
          v70 += 2;
          v71 += 2;
          v72 -= 8;
        }
        while (v72);
        if (v68 == (v68 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_55;
      }
    }
    do
    {
      v74 = *(_DWORD *)v61;
      v61 += 4;
      *(_DWORD *)v62 = v74;
      v62 += 4;
    }
    while (v61 < v14);
  }
LABEL_55:
  a1[1] = (unint64_t)v62;
  if (v28 != v58)
    memmove(&v28[-4 * v60], v7, v59);
  if (v25 != v10)
    memmove(v7, v10, v25 - v10);
  return v7;
}

char *sub_2394F33F0(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  int *v30;
  _DWORD *v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 *v40;
  uint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  char *v64;
  size_t v65;
  int v66;
  char *v67;
  unint64_t v70;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 2;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 2)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 2);
    if (v16 >> 62)
      sub_2394189F8();
    v17 = v14 - v6;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_239418A80();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      v20 = v18;
      v21 = operator new(4 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 2;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v43 = &v21[4 * v13];
    v44 = &v43[4 * a5];
    v45 = v43;
    v46 = v11;
    if ((v9 & 0x3FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_57;
    v45 = &v21[4 * v13];
    v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] - v11) < 0x20)
      goto LABEL_57;
    v47 = (v9 & 0x3FFFFFFFFFFFFFFFLL) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v45 = &v43[v48];
    v46 = &v11[v48];
    v49 = (__int128 *)(v11 + 16);
    v50 = &v21[4 * v13 + 16];
    v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_57:
      do
      {
        v53 = *(_DWORD *)v46;
        v46 += 4;
        *(_DWORD *)v45 = v53;
        v45 += 4;
      }
      while (v45 != v44);
    }
    v54 = &v21[4 * v13];
    if ((void *)v6 != a2)
    {
      v55 = v8;
      v54 = &v21[4 * v13];
      if ((unint64_t)(v7 - 4) < 0x3C)
        goto LABEL_58;
      v55 = v8;
      v54 = &v21[4 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_58;
      v56 = ((unint64_t)(v7 - 4) >> 2) + 1;
      v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
      v55 = &v8[-v57];
      v54 = &v43[-v57];
      v58 = 4 * v13 - 16;
      v59 = &v21[v58];
      v60 = (__int128 *)(v6 + v58);
      v61 = v56 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 8;
      }
      while (v61);
      if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_58:
        do
        {
          v63 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v54 - 1) = v63;
          v54 -= 4;
        }
        while (v55 != (char *)v6);
      }
    }
    v64 = &v21[4 * v18];
    v65 = v15 - (_QWORD)v8;
    if (v65)
      memmove(&v43[4 * a5], v8, v65);
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6)
      operator delete((void *)v6);
    return v43;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 2;
  if (v23 >= a5)
  {
    v24 = &__src[4 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[4 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v23], a4 - v24);
      v13 = v7 >> 2;
      v8 = (char *)v70;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[4 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 2;
  v30 = (int *)(v26 - 4 * a5);
  v31 = (_DWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v28;
    v33 = (char *)(v32 + v6);
    v34 = v32 + v6 + 4;
    if (v15 > v34)
      v34 = v15;
    v35 = v34 + ~v6 - v32;
    if (v35 < 0x2C)
    {
      v31 = (_DWORD *)v26;
    }
    else
    {
      v36 = v26 - (_QWORD)v33;
      v31 = (_DWORD *)v26;
      if (v36 >= 0x20)
      {
        v37 = (v35 >> 2) + 1;
        v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        v30 = (int *)((char *)v30 + v38);
        v31 = (_DWORD *)(v26 + v38);
        v39 = (_OWORD *)(v26 + 16);
        v40 = (__int128 *)(4 * v29 + 4 * v13 + v6 + 16);
        v41 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 8;
        }
        while (v41);
        if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_47;
      }
    }
    do
    {
      v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v67 = v8;
    memmove((void *)(v26 - 4 * v29), v8, v28);
    v8 = v67;
  }
  if (v24 != v11)
  {
    v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

float *sub_2394F3798(uint64_t a1, float *a2, uint64_t a3)
{
  unint64_t v3;
  float v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  float **v16;
  float *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  float v22;
  float v23;
  uint64_t v24;
  _QWORD *v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v6 = *a2;
  v7 = a2[1];
  v8 = 2654435769;
  v9 = *(unsigned int *)a2 + 2654435769;
  if (*a2 == 0.0)
    v9 = 2654435769;
  v10 = LODWORD(v7) + 2654435769;
  if (v7 == 0.0)
    v10 = 2654435769;
  v11 = ((v9 << 6) + (v9 >> 2) + v10) ^ v9;
  v12 = a2[2];
  if (v12 != 0.0)
    v8 = LODWORD(v12) + 2654435769;
  v13 = (v8 + (v11 >> 2) + (v11 << 6)) ^ v11;
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v3 = (v8 + (v11 >> 2) + (v11 << 6)) ^ v11;
      if (v13 >= v14)
        v3 = v13 % v14;
    }
    else
    {
      v3 = v13 & (v14 - 1);
    }
    v16 = *(float ***)(*(_QWORD *)a1 + 8 * v3);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        if (v15.u32[0] < 2uLL)
        {
          while (1)
          {
            v19 = *((_QWORD *)v17 + 1);
            if (v19 == v13)
            {
              if (v17[4] == v6 && v17[5] == v7 && v17[6] == v12)
                return v17;
            }
            else if ((v19 & (v14 - 1)) != v3)
            {
              goto LABEL_33;
            }
            v17 = *(float **)v17;
            if (!v17)
              goto LABEL_33;
          }
        }
        do
        {
          v18 = *((_QWORD *)v17 + 1);
          if (v18 == v13)
          {
            if (v17[4] == v6 && v17[5] == v7 && v17[6] == v12)
              return v17;
          }
          else
          {
            if (v18 >= v14)
              v18 %= v14;
            if (v18 != v3)
              break;
          }
          v17 = *(float **)v17;
        }
        while (v17);
      }
    }
  }
LABEL_33:
  v21 = operator new(0x20uLL);
  *v21 = 0;
  v21[1] = v13;
  v21[2] = *(_QWORD *)a3;
  *((_DWORD *)v21 + 6) = *(_DWORD *)(a3 + 8);
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (v14 && (float)(v23 * (float)v14) >= v22)
  {
    v24 = *(_QWORD *)a1;
    v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v25)
    {
LABEL_36:
      *v21 = *v25;
LABEL_71:
      *v25 = v21;
      goto LABEL_72;
    }
  }
  else
  {
    v26 = 1;
    if (v14 >= 3)
      v26 = (v14 & (v14 - 1)) != 0;
    v27 = v26 | (2 * v14);
    v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v14 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v14)
      goto LABEL_47;
    if (prime < v14)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v14 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < v14)
LABEL_47:
        sub_239427FE0(a1, prime);
    }
    v14 = *(_QWORD *)(a1 + 8);
    v33 = v14 - 1;
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
      {
        v3 = v13 % v14;
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v13 % v14));
        if (v25)
          goto LABEL_36;
      }
      else
      {
        v3 = v13;
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
        if (v25)
          goto LABEL_36;
      }
    }
    else
    {
      v3 = v33 & v13;
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v33 & v13));
      if (v25)
        goto LABEL_36;
    }
  }
  *v21 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v21;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v21)
  {
    v34 = *(_QWORD *)(*v21 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v34 >= v14)
        v34 %= v14;
    }
    else
    {
      v34 &= v14 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_71;
  }
LABEL_72:
  ++*(_QWORD *)(a1 + 24);
  return (float *)v21;
}

void sub_2394F3B34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float *sub_2394F3B48(_QWORD *a1, float *a2)
{
  float v2;
  float v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  float **v13;
  float *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = *a2;
  v3 = a2[1];
  v4 = *(unsigned int *)a2 + 2654435769;
  if (*a2 == 0.0)
    v4 = 2654435769;
  v5 = LODWORD(v3) + 2654435769;
  if (v3 == 0.0)
    v5 = 2654435769;
  v6 = a2[2];
  v7 = LODWORD(v6) + 2654435769;
  if (v6 == 0.0)
    v7 = 2654435769;
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = ((v4 << 6) + (v4 >> 2) + v5) ^ v4;
  v10 = (v7 + (v9 >> 2) + (v9 << 6)) ^ v9;
  v11 = (uint8x8_t)vcnt_s8(v8);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    v12 = v10;
    if (v10 >= *(_QWORD *)&v8)
      v12 = v10 % *(_QWORD *)&v8;
  }
  else
  {
    v12 = v10 & (*(_QWORD *)&v8 - 1);
  }
  v13 = *(float ***)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  result = *v13;
  if (*v13)
  {
    if (v11.u32[0] < 2uLL)
    {
      v15 = *(_QWORD *)&v8 - 1;
      while (1)
      {
        v17 = *((_QWORD *)result + 1);
        if (v17 == v10)
        {
          if (result[4] == v2 && result[5] == v3 && result[6] == v6)
            return result;
        }
        else if ((v17 & v15) != v12)
        {
          return 0;
        }
        result = *(float **)result;
        if (!result)
          return result;
      }
    }
    do
    {
      v16 = *((_QWORD *)result + 1);
      if (v16 == v10)
      {
        if (result[4] == v2 && result[5] == v3 && result[6] == v6)
          return result;
      }
      else
      {
        if (v16 >= *(_QWORD *)&v8)
          v16 %= *(_QWORD *)&v8;
        if (v16 != v12)
          return 0;
      }
      result = *(float **)result;
    }
    while (result);
  }
  return result;
}

void sub_2394F3CB4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394F3CC8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_250ADD2F8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2394F3D28(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250ADD2F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_2394F3D70(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint32x2_t v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  _OWORD *v33;
  uint64_t *v34;
  float64x2_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64x2_t v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  os_unfair_lock_s **v50;
  _QWORD **v51;
  os_unfair_lock_s **v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::bad_alloc *exception;
  std::bad_alloc *v62;
  uint32x2_t v63;
  float v64;
  void *memptr;
  _WORD v66[12];
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  void *__p;
  _BYTE *v72;
  uint64_t v73;
  __int128 v74;
  float64x2_t v75;
  float64x2_t v76;
  char v77;
  void *v78[2];
  int v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  __int16 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8 * *a2);
  *(_QWORD *)&v74 = v4;
  v5 = *(_QWORD *)(v3 + 24);
  if (!v5)
    sub_2394172E0();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v5 + 48))(&v90, v5, &v74);
  if (!v90)
    goto LABEL_97;
  v6 = *(uint64_t **)(a1 + 24);
  if (!*((_BYTE *)v6 + 40))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_57;
  }
  v7 = v6[1];
  if (!v7)
    goto LABEL_103;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v7 <= v4)
      v9 = v4 % v7;
  }
  else
  {
    v9 = ((_DWORD)v7 - 1) & v4;
  }
  v13 = *v6;
  v14 = *(uint64_t ***)(*v6 + 8 * v9);
  if (!v14 || (v15 = *v14) == 0)
LABEL_103:
    sub_23941D898("unordered_map::at: key not found");
  v16 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == v4)
      {
        if (*((_DWORD *)v15 + 4) == (_DWORD)v4)
          goto LABEL_18;
      }
      else if ((v17 & v16) != v9)
      {
        goto LABEL_103;
      }
      v15 = (uint64_t *)*v15;
      if (!v15)
        goto LABEL_103;
    }
  }
  while (1)
  {
    v19 = v15[1];
    if (v19 == v4)
      break;
    if (v19 >= v7)
      v19 %= v7;
    if (v19 != v9)
      goto LABEL_103;
LABEL_21:
    v15 = (uint64_t *)*v15;
    if (!v15)
      goto LABEL_103;
  }
  if (*((_DWORD *)v15 + 4) != (_DWORD)v4)
    goto LABEL_21;
LABEL_18:
  if (v8.u32[0] > 1uLL)
  {
    v18 = v4;
    if (v7 <= v4)
      v18 = v4 % v7;
  }
  else
  {
    v18 = ((_DWORD)v7 - 1) & v4;
  }
  v20 = *(uint64_t ***)(v13 + 8 * v18);
  if (!v20 || (v21 = *v20) == 0)
LABEL_104:
    sub_23941D898("unordered_map::at: key not found");
  v10 = *((_DWORD *)v15 + 5);
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v22 = v21[1];
      if (v22 == v4)
      {
        if (*((_DWORD *)v21 + 4) == (_DWORD)v4)
          goto LABEL_37;
      }
      else if ((v22 & v16) != v18)
      {
        goto LABEL_104;
      }
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_104;
    }
  }
  while (2)
  {
    v24 = v21[1];
    if (v24 != v4)
    {
      if (v24 >= v7)
        v24 %= v7;
      if (v24 != v18)
        goto LABEL_104;
      goto LABEL_40;
    }
    if (*((_DWORD *)v21 + 4) != (_DWORD)v4)
    {
LABEL_40:
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_104;
      continue;
    }
    break;
  }
LABEL_37:
  if (v8.u32[0] > 1uLL)
  {
    v23 = v4;
    if (v7 <= v4)
      v23 = v4 % v7;
  }
  else
  {
    v23 = ((_DWORD)v7 - 1) & v4;
  }
  v25 = *(uint64_t ***)(v13 + 8 * v23);
  if (!v25 || (v26 = *v25) == 0)
LABEL_105:
    sub_23941D898("unordered_map::at: key not found");
  v11 = *((_DWORD *)v21 + 6);
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v27 = v26[1];
      if (v27 == v4)
      {
        if (*((_DWORD *)v26 + 4) == (_DWORD)v4)
          goto LABEL_56;
      }
      else if ((v27 & v16) != v23)
      {
        goto LABEL_105;
      }
      v26 = (uint64_t *)*v26;
      if (!v26)
        goto LABEL_105;
    }
  }
  while (2)
  {
    v47 = v26[1];
    if (v47 != v4)
    {
      if (v47 >= v7)
        v47 %= v7;
      if (v47 != v23)
        goto LABEL_105;
      goto LABEL_65;
    }
    if (*((_DWORD *)v26 + 4) != (_DWORD)v4)
    {
LABEL_65:
      v26 = (uint64_t *)*v26;
      if (!v26)
        goto LABEL_105;
      continue;
    }
    break;
  }
LABEL_56:
  v12 = vcvt_u32_f32(vmul_f32(vcvt_f32_u32(vcvt_u32_f32(vmul_f32(*(float32x2_t *)((char *)v26 + 28), vcvt_f32_u32(*(uint32x2_t *)((char *)v26 + 20))))), (float32x2_t)0x3E0000003E000000));
LABEL_57:
  v63 = v12;
  v74 = xmmword_239EC6D40;
  __asm { FMOV            V0.2D, #-1.0 }
  v75 = _Q0;
  v76 = _Q0;
  v77 = 1;
  v78[0] = 0;
  v78[1] = (void *)8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v33 = memptr;
  v78[0] = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v62 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v62, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v79 = 5;
  *((_QWORD *)memptr + 4) = 0;
  *v33 = 0u;
  v33[1] = 0u;
  v84 = xmmword_239EC6DD0;
  v85 = unk_239EC6DE0;
  v86 = xmmword_239EC6DF0;
  v87 = unk_239EC6E00;
  v80 = xmmword_239EC6D90;
  v81 = unk_239EC6DA0;
  v82 = xmmword_239EC6DB0;
  v83 = unk_239EC6DC0;
  v89 = 256;
  v34 = sub_2394650AC(*(_QWORD *)(a1 + 32), v4);
  v35 = *((float64x2_t *)v34 + 1);
  v75 = *(float64x2_t *)v34;
  v76 = v35;
  v77 = *((_BYTE *)v34 + 32);
  if (&v75 != (float64x2_t *)v34)
  {
    v36 = *((unsigned int *)v34 + 14);
    sub_23945215C((uint64_t)v78, v36);
    if ((_DWORD)v36)
      memcpy(v78[0], (const void *)v34[5], 8 * v36);
    v79 = *((_DWORD *)v34 + 14);
  }
  v37 = *((_OWORD *)v34 + 4);
  v38 = *((_OWORD *)v34 + 5);
  v39 = *((_OWORD *)v34 + 7);
  v82 = *((_OWORD *)v34 + 6);
  v83 = v39;
  v80 = v37;
  v81 = v38;
  v40 = *((_OWORD *)v34 + 8);
  v41 = *((_OWORD *)v34 + 9);
  v42 = *((_OWORD *)v34 + 11);
  v86 = *((_OWORD *)v34 + 10);
  v87 = v42;
  v84 = v40;
  v85 = v41;
  v75.f64[0] = v75.f64[0] * 0.125;
  v75.f64[1] = v75.f64[0];
  v43.i64[0] = v63.u32[0];
  v43.i64[1] = v63.u32[1];
  __asm { FMOV            V2.2D, #0.125 }
  v76 = vmlaq_f64(vcvtq_f64_u64(v43), _Q2, v76);
  v45 = (unint64_t)(sub_239470FCC(*(_QWORD *)(a1 + 32), v4) + 25);
  if (&v88 == (unint64_t *)v45)
  {
    LODWORD(v45) = *(_DWORD *)v45;
    LODWORD(v46) = HIDWORD(v88);
  }
  else
  {
    v45 = *(_QWORD *)v45;
    v88 = v45;
    v46 = HIDWORD(v45);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 40))
  {
    LODWORD(v45) = v10;
    LODWORD(v46) = v11;
  }
  LODWORD(v88) = (float)((float)v45 * 0.125);
  HIDWORD(v88) = (float)((float)v46 * 0.125);
  __p = 0;
  v72 = 0;
  v73 = 0;
  memptr = &off_250ADB628;
  sub_239422F30(v66);
  if (sub_2396BDC5C(*(uint64_t **)(a1 + 40), (uint32x2_t *)&v74, 0, 0, (uint64_t *)&__p, 1u, (uint64_t)&memptr, 1u, **(_QWORD **)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *(std::mutex **)(a1 + 56), 1))
  {
    v48 = (unsigned int *)__p;
    if (v72 != __p)
    {
      v49 = 0;
      v50 = (os_unfair_lock_s **)(a1 + 64);
      do
      {
        v53 = v49 / v68;
        v54 = v49 % v68;
        if (*(_BYTE *)(v67 + (v69 * v54 + v70 * v53)))
        {
          v55 = v48[v49];
          if (v54 >= (int)(float)((float)v63.u32[0] + (float)((float)*(unsigned int *)(v90 + 64) * 0.125))
            || ((int)v53 < (int)(float)((float)v63.u32[1] + (float)((float)*(unsigned int *)(v90 + 68) * 0.125))
              ? (v56 = v54 < v63.i32[0])
              : (v56 = 1),
                !v56 ? (v57 = (int)v53 < v63.i32[1]) : (v57 = 1),
                v57))
          {
            sub_2397A15E8(*v50);
            ++*(_DWORD *)(**(_QWORD **)(a1 + 72) + 4 * v55);
            sub_2397A1600(*v50);
          }
          else
          {
            sub_2394F4550(v90, &v64, (float)(v54 - v63.i32[0]) * 8.0, (float)((int)v53 - v63.i32[1]) * 8.0);
            if (v64 <= 128.0)
            {
              sub_2397A15E8(*v50);
              v51 = (_QWORD **)(a1 + 72);
              v52 = (os_unfair_lock_s **)(a1 + 64);
            }
            else
            {
              sub_2397A15E8(*(os_unfair_lock_s **)(a1 + 80));
              v51 = (_QWORD **)(a1 + 88);
              v52 = (os_unfair_lock_s **)(a1 + 80);
            }
            ++*(_DWORD *)(**v51 + 4 * v55);
            sub_2397A1600(*v52);
          }
        }
        ++v49;
        v48 = (unsigned int *)__p;
      }
      while (v49 < (v72 - (_BYTE *)__p) >> 2);
    }
    **(_BYTE **)(a1 + 96) = 1;
  }
  sub_239416DA0((uint64_t)v66);
  nullsub_4(&memptr);
  if (__p)
  {
    v72 = __p;
    operator delete(__p);
  }
  free(v78[0]);
LABEL_97:
  v58 = v91;
  if (v91)
  {
    p_shared_owners = (unint64_t *)&v91->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_2394F44B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  sub_239416DA0(v29);
  nullsub_4(&a17);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  free(*(void **)(v30 + 56));
  v32 = *(std::__shared_weak_count **)(v30 + 232);
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2394F4550@<X0>(uint64_t result@<X0>, float *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  signed int v12;
  int v13;
  int v14;
  uint64_t v15;
  signed int v16;
  int v17;
  float v18;
  BOOL v19;
  float v20;
  float v21;
  int v22;
  int v23;
  float v24;
  int v25;
  float v26;
  float v27;

  v4 = floorf(a3);
  v5 = floorf(a4);
  v6 = v5 + 1.0;
  v7 = v4 + 1.0;
  v8 = a3 - v4;
  v9 = a4 - v5;
  v10 = 1.0 - v9;
  v12 = *(_DWORD *)(result + 64);
  v11 = *(_DWORD *)(result + 68);
  v13 = *(_DWORD *)(result + 72);
  v14 = *(_DWORD *)(result + 76);
  v15 = *(_QWORD *)(result + 56);
  v16 = vcvtms_s32_f32(a3);
  v17 = vcvtms_s32_f32(a4);
  if (v16 < 0 || v12 <= v16)
  {
    v22 = (int)v6;
    v23 = 1;
    v20 = 0.0;
    v21 = 0.0;
  }
  else
  {
    v18 = 1.0 - v8;
    v19 = v17 < 0 || v11 <= v17;
    result = v19;
    v20 = 0.0;
    v21 = 0.0;
    if (!v19)
    {
      LOBYTE(v20) = *(_BYTE *)(v15 + (v13 * v16 + v14 * v17));
      v20 = (float)((float)LODWORD(v20) * (float)(v18 * v10)) + 0.0;
      v21 = (float)(v18 * v10) + 0.0;
    }
    v22 = (int)v6;
    v23 = 1;
    if (((int)v6 & 0x80000000) == 0 && v11 > v22)
    {
      v24 = v18 * v9;
      LOBYTE(v18) = *(_BYTE *)(v15 + (v13 * v16 + v14 * v22));
      v20 = v20 + (float)((float)LODWORD(v18) * v24);
      v21 = v21 + v24;
      v23 = result;
    }
  }
  v25 = (int)v7;
  if (((int)v7 & 0x80000000) == 0 && v12 > v25)
  {
    if (v17 < 0 || v11 <= v17)
    {
      v23 = 1;
      if (v22 < 0)
        goto LABEL_24;
    }
    else
    {
      v26 = v8 * v10;
      LOBYTE(v7) = *(_BYTE *)(v15 + (v13 * v25 + v14 * v17));
      v20 = v20 + (float)((float)LODWORD(v7) * v26);
      v21 = v21 + v26;
      if (v22 < 0)
        goto LABEL_24;
    }
    if (v11 > v22)
    {
      v27 = v8 * v9;
      LOBYTE(v9) = *(_BYTE *)(v15 + (v13 * v25 + v14 * v22));
      v20 = v20 + (float)((float)LODWORD(v9) * v27);
      v21 = v21 + v27;
      if (!v23)
        goto LABEL_26;
    }
  }
LABEL_24:
  if (v21 > 0.00000011921)
  {
    *a2 = v20 * (float)(1.0 / v21);
    return result;
  }
LABEL_26:
  *a2 = v20;
  return result;
}

void sub_2394F46B8(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  size_t v26;
  BOOL v27;
  _BYTE *v28;
  _BYTE *v29;
  int64_t v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *j;
  BOOL v36;
  _BYTE *v37;
  uint64_t *v38;
  _BYTE *v39;
  int64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  const void *v45;
  uint64_t *v46;
  int64_t v47;
  char *v48;
  char *v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  _BYTE *v56;
  _BYTE *v57;
  int64_t v58;
  char *v59;
  char *v60;
  _BOOL4 v61;
  _BYTE *v62;
  _BYTE *v63;
  int64_t v64;
  char *v65;
  char *v66;
  void *v67;
  uint64_t *v68;
  uint64_t *v69;
  BOOL v70;
  uint64_t v71;
  const void *v72;
  __int128 v73;
  const void *v74;
  size_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  size_t v81;
  BOOL v82;
  BOOL v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  size_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t *v97;
  BOOL v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  size_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL4 v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  int64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  size_t v134;
  _BOOL4 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  int64_t v142;
  int64_t v143;
  uint64_t v144;
  uint64_t *v145;
  const void *v146;
  uint64_t v147;
  int64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  size_t v154;
  _BOOL4 v155;
  uint64_t v156;
  const void *v157;
  int64_t v158;
  char *v159;
  char *v160;
  uint64_t *v161;
  uint64_t v162;
  unint64_t v163;
  BOOL v164;
  void *v165;
  uint64_t v166;
  __int128 v167;
  _BOOL4 v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  const void *v173;
  uint64_t v174;
  int64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  size_t v181;
  _BOOL4 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const void *v186;
  int64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  const void *v204;
  uint64_t v205;
  int64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  size_t v212;
  _BOOL4 v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  const void *v223;
  int64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  unint64_t v228;
  _BOOL4 v229;
  void *v230;
  const void *v231;
  __int128 v232;
  size_t v233;
  BOOL v234;
  uint64_t *v235;
  uint64_t v236;
  const void *v237;
  int64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t *v243;
  _BYTE *v244;
  _BYTE *v245;
  int64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  size_t v250;
  _BOOL4 v251;
  _BYTE *v252;
  _BYTE *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  uint64_t v259;
  void *v260;
  uint64_t i;
  char *v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  _BYTE *v269;
  _BYTE *v270;
  int64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  size_t v275;
  _BOOL4 v276;
  const void *v277;
  __int128 v278;
  size_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void *v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  size_t v287;
  void *v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t *v291;
  unint64_t v292;
  __int128 v294;
  uint64_t *v295;
  int64_t v296;
  uint64_t *v297;
  unint64_t v298;
  uint64_t *__sz;
  size_t __sza;
  uint64_t __szb;
  size_t __szc[2];
  __int128 v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  const void *v308;
  __int128 v309;
  int64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  __int128 v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  void *v326;
  void *v327;
  void *v328;
  void *v329;
  void *v330;
  void *v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;

void sub_2394F6614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  void *v45;
  void *v46;
  uint64_t v47;
  void *v49;

  v49 = *(void **)(v47 - 136);
  if (v49)
  {
    *(_QWORD *)(v47 - 128) = v49;
    operator delete(v49);
  }
  if (v46)
  {
    *(_QWORD *)(v47 - 104) = v46;
    operator delete(v46);
    if (!v45)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  operator delete(v45);
  goto LABEL_8;
}

void sub_2394F6BF8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  const void *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  int64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  int64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;

  sub_2394F7BA4(a1, a2, a3, a4);
  v11 = (const void *)*a5;
  v10 = a5[1];
  v12 = v10 - *a5;
  if (v10 == *a5)
  {
    v14 = 0;
    v13 = 0;
    v54 = a4[1];
    v16 = v54 - *a4;
    if (v54 != *a4)
      goto LABEL_4;
  }
  else
  {
    if (v12 < 0)
      sub_2394189F8();
    v13 = (char *)operator new(v10 - *a5);
    v14 = &v13[4 * (v12 >> 2)];
    memcpy(v13, v11, v12);
    v15 = a4[1];
    v16 = v15 - *a4;
    if (v15 != *a4)
    {
LABEL_4:
      if ((v16 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v58 = operator new(v16);
      v17 = v14 - v13 > v16;
      operator delete(v58);
      if (v13)
        goto LABEL_6;
      goto LABEL_7;
    }
  }
  v17 = v14 != v13;
  if (v13)
LABEL_6:
    operator delete(v13);
LABEL_7:
  if (!v17)
    return;
  v18 = *a4;
  *a4 = *a5;
  *a5 = v18;
  v19 = a4[1];
  a4[1] = a5[1];
  a5[1] = v19;
  v20 = a4[2];
  a4[2] = a5[2];
  a5[2] = v20;
  v22 = (const void *)*a4;
  v21 = a4[1];
  v23 = v21 - *a4;
  if (v21 == *a4)
  {
    v25 = 0;
    v24 = 0;
    v55 = a3[1];
    v27 = v55 - *a3;
    if (v55 != *a3)
      goto LABEL_11;
  }
  else
  {
    if (v23 < 0)
      sub_2394189F8();
    v24 = (char *)operator new(v21 - *a4);
    v25 = &v24[4 * (v23 >> 2)];
    memcpy(v24, v22, v23);
    v26 = a3[1];
    v27 = v26 - *a3;
    if (v26 != *a3)
    {
LABEL_11:
      if ((v27 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v28 = v25 - v24 > v27;
      if (v24)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  v28 = v25 != v24;
  if (v24)
LABEL_13:
    operator delete(v24);
LABEL_14:
  if (!v28)
    return;
  v29 = *a3;
  *a3 = *a4;
  *a4 = v29;
  v30 = a3[1];
  a3[1] = a4[1];
  a4[1] = v30;
  v31 = a3[2];
  a3[2] = a4[2];
  a4[2] = v31;
  v33 = (const void *)*a3;
  v32 = a3[1];
  v34 = v32 - *a3;
  if (v32 == *a3)
  {
    v36 = 0;
    v35 = 0;
    v56 = a2[1];
    v38 = v56 - *a2;
    if (v56 != *a2)
      goto LABEL_18;
  }
  else
  {
    if (v34 < 0)
      sub_2394189F8();
    v35 = (char *)operator new(v32 - *a3);
    v36 = &v35[4 * (v34 >> 2)];
    memcpy(v35, v33, v34);
    v37 = a2[1];
    v38 = v37 - *a2;
    if (v37 != *a2)
    {
LABEL_18:
      if ((v38 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v39 = v36 - v35 > v38;
      if (v35)
        goto LABEL_20;
      goto LABEL_21;
    }
  }
  v39 = v36 != v35;
  if (v35)
LABEL_20:
    operator delete(v35);
LABEL_21:
  if (!v39)
    return;
  v40 = *a2;
  *a2 = *a3;
  *a3 = v40;
  v41 = a2[1];
  a2[1] = a3[1];
  a3[1] = v41;
  v42 = a2[2];
  a2[2] = a3[2];
  a3[2] = v42;
  v44 = (const void *)*a2;
  v43 = a2[1];
  v45 = v43 - *a2;
  if (v43 == *a2)
  {
    v47 = 0;
    v46 = 0;
    v57 = a1[1];
    v49 = v57 - *a1;
    if (v57 != *a1)
      goto LABEL_25;
  }
  else
  {
    if (v45 < 0)
      sub_2394189F8();
    v46 = (char *)operator new(v43 - *a2);
    v47 = &v46[4 * (v45 >> 2)];
    memcpy(v46, v44, v45);
    v48 = a1[1];
    v49 = v48 - *a1;
    if (v48 != *a1)
    {
LABEL_25:
      if ((v49 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v50 = v47 - v46 > v49;
      if (!v46)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  v50 = v47 != v46;
  if (v46)
LABEL_27:
    operator delete(v46);
LABEL_28:
  if (v50)
  {
    v51 = *a1;
    *a1 = *a2;
    *a2 = v51;
    v52 = a1[1];
    a1[1] = a2[1];
    a2[1] = v52;
    v53 = a1[2];
    a1[2] = a2[2];
    a2[2] = v53;
  }
}

void sub_2394F6FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  if (__p)
    operator delete(__p);
  if (v25)
    operator delete(v25);
  _Unwind_Resume(exception_object);
}

void sub_2394F70B0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  const void *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  uint64_t v14;
  const void *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  const void *v38;
  int64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  int64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;

  v7 = (const void *)*a2;
  v6 = a2[1];
  v8 = v6 - *a2;
  if (v6 == *a2)
  {
    v10 = 0;
    v9 = 0;
    v47 = a1[1];
    v12 = v47 - *a1;
    if (v47 != *a1)
      goto LABEL_4;
  }
  else
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - *a2);
    v10 = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, v8);
    v11 = a1[1];
    v12 = v11 - *a1;
    if (v11 != *a1)
    {
LABEL_4:
      if ((v12 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v64 = operator new(v12);
      v13 = v10 - v9 > v12;
      operator delete(v64);
      if (v9)
        goto LABEL_6;
      goto LABEL_7;
    }
  }
  v13 = v10 != v9;
  if (v9)
LABEL_6:
    operator delete(v9);
LABEL_7:
  if (!v13)
  {
    v26 = (const void *)*a3;
    v25 = a3[1];
    v27 = v25 - *a3;
    if (v25 == *a3)
    {
      v29 = 0;
      v28 = 0;
      v61 = a2[1];
      v31 = v61 - *a2;
      if (v61 != *a2)
        goto LABEL_19;
    }
    else
    {
      if (v27 < 0)
        sub_2394189F8();
      v28 = (char *)operator new(v25 - *a3);
      v29 = &v28[4 * (v27 >> 2)];
      memcpy(v28, v26, v27);
      v30 = a2[1];
      v31 = v30 - *a2;
      if (v30 != *a2)
      {
LABEL_19:
        if ((v31 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v32 = v29 - v28 > v31;
        if (v28)
          goto LABEL_21;
        goto LABEL_22;
      }
    }
    v32 = v29 != v28;
    if (v28)
LABEL_21:
      operator delete(v28);
LABEL_22:
    if (!v32)
      return;
    v33 = *a2;
    *a2 = *a3;
    *a3 = v33;
    v34 = a2[1];
    a2[1] = a3[1];
    a3[1] = v34;
    v36 = a2 + 2;
    v35 = a2[2];
    a2[2] = a3[2];
    a3[2] = v35;
    v38 = (const void *)*a2;
    v37 = a2[1];
    v39 = v37 - *a2;
    if (v37 == *a2)
    {
      v41 = 0;
      v40 = 0;
      v62 = a1[1];
      v43 = v62 - *a1;
      if (v62 != *a1)
        goto LABEL_26;
    }
    else
    {
      if (v39 < 0)
        sub_2394189F8();
      v40 = (char *)operator new(v37 - *a2);
      v41 = &v40[4 * (v39 >> 2)];
      memcpy(v40, v38, v39);
      v42 = a1[1];
      v43 = v42 - *a1;
      if (v42 != *a1)
      {
LABEL_26:
        if ((v43 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v44 = v41 - v40 > v43;
        if (!v40)
          goto LABEL_29;
LABEL_28:
        operator delete(v40);
LABEL_29:
        if (!v44)
          return;
        v45 = *a1;
        *a1 = *a2;
        *a2 = v45;
        v46 = a1[1];
        a1[1] = a2[1];
        a2[1] = v46;
        v23 = a1 + 2;
        goto LABEL_43;
      }
    }
    v44 = v41 != v40;
    if (!v40)
      goto LABEL_29;
    goto LABEL_28;
  }
  v15 = (const void *)*a3;
  v14 = a3[1];
  v16 = v14 - *a3;
  if (v14 == *a3)
  {
    v18 = 0;
    v17 = 0;
    v60 = a2[1];
    v20 = v60 - *a2;
    if (v60 != *a2)
      goto LABEL_11;
  }
  else
  {
    if (v16 < 0)
      sub_2394189F8();
    v17 = (char *)operator new(v14 - *a3);
    v18 = &v17[4 * (v16 >> 2)];
    memcpy(v17, v15, v16);
    v19 = a2[1];
    v20 = v19 - *a2;
    if (v19 != *a2)
    {
LABEL_11:
      if ((v20 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v21 = v18 - v17 > v20;
      if (v17)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  v21 = v18 != v17;
  if (v17)
LABEL_13:
    operator delete(v17);
LABEL_14:
  v23 = a1 + 2;
  v22 = *a1;
  if (!v21)
  {
    *a1 = *a2;
    *a2 = v22;
    v48 = a1[1];
    a1[1] = a2[1];
    a2[1] = v48;
    v23 = a2 + 2;
    v49 = a1[2];
    a1[2] = a2[2];
    a2[2] = v49;
    v51 = (const void *)*a3;
    v50 = a3[1];
    v52 = v50 - *a3;
    if (v50 == *a3)
    {
      v54 = 0;
      v53 = 0;
      v63 = a2[1];
      v56 = v63 - *a2;
      if (v63 != *a2)
        goto LABEL_37;
    }
    else
    {
      if (v52 < 0)
        sub_2394189F8();
      v53 = (char *)operator new(v50 - *a3);
      v54 = &v53[4 * (v52 >> 2)];
      memcpy(v53, v51, v52);
      v55 = a2[1];
      v56 = v55 - *a2;
      if (v55 != *a2)
      {
LABEL_37:
        if ((v56 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v57 = v54 - v53 > v56;
        if (!v53)
          goto LABEL_40;
LABEL_39:
        operator delete(v53);
LABEL_40:
        if (!v57)
          return;
        v58 = *a2;
        *a2 = *a3;
        *a3 = v58;
        v24 = a2[1];
        a2[1] = a3[1];
        goto LABEL_42;
      }
    }
    v57 = v54 != v53;
    if (!v53)
      goto LABEL_40;
    goto LABEL_39;
  }
  *a1 = *a3;
  *a3 = v22;
  v24 = a1[1];
  a1[1] = a3[1];
LABEL_42:
  a3[1] = v24;
  v36 = a3 + 2;
LABEL_43:
  v59 = *v23;
  *v23 = *v36;
  *v36 = v59;
}

void sub_2394F7574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  if (__p)
    operator delete(__p);
  if (v28)
    operator delete(v28);
  _Unwind_Resume(exception_object);
}

BOOL sub_2394F7650(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  size_t v28;
  _BOOL4 v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  void **v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  BOOL v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  void *v53;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (_BYTE *)*(a2 - 3);
      v6 = (_BYTE *)*(a2 - 2);
      v8 = v6 - v7;
      if (v6 == v7)
      {
        v10 = 0;
        v9 = 0;
        v46 = a1[1];
        v12 = v46 - *a1;
        if (v46 != *a1)
          goto LABEL_5;
      }
      else
      {
        if (v8 < 0)
          sub_2394189F8();
        v9 = (char *)operator new(v6 - v7);
        v10 = &v9[4 * (v8 >> 2)];
        memcpy(v9, v7, v8);
        v11 = a1[1];
        v12 = v11 - *a1;
        if (v11 != *a1)
        {
LABEL_5:
          if ((v12 & 0x8000000000000000) != 0)
            sub_2394189F8();
          v13 = v10 - v9 > v12;
          if (!v9)
            goto LABEL_8;
          goto LABEL_7;
        }
      }
      v13 = v10 != v9;
      if (!v9)
      {
LABEL_8:
        if (v13)
        {
          v14 = *a1;
          *a1 = *(v2 - 3);
          *(v2 - 3) = v14;
          v15 = a1[1];
          a1[1] = *(v2 - 2);
          *(v2 - 2) = v15;
          v16 = a1[2];
          a1[2] = *(v2 - 1);
          *(v2 - 1) = v16;
        }
        return 1;
      }
LABEL_7:
      operator delete(v9);
      goto LABEL_8;
    case 3uLL:
      sub_2394F70B0(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_2394F7BA4(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_2394F6BF8(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v17 = a1 + 6;
      sub_2394F70B0(a1, a1 + 3, a1 + 6);
      v18 = a1 + 9;
      if (a1 + 9 == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v47 = v2;
LABEL_17:
      v24 = (const void *)*v18;
      v23 = v18[1];
      v25 = v23 - *v18;
      if (v23 == *v18)
      {
        v27 = 0;
        v26 = 0;
        v28 = v17[1] - *v17;
        if (v28)
          goto LABEL_20;
      }
      else
      {
        if (v25 < 0)
          sub_2394189F8();
        v26 = (char *)operator new(v23 - *v18);
        v27 = &v26[4 * (v25 >> 2)];
        memcpy(v26, v24, v25);
        v28 = v17[1] - *v17;
        if (v28)
        {
LABEL_20:
          if ((v28 & 0x8000000000000000) != 0)
            sub_2394189F8();
          v53 = operator new(v28);
          v29 = v27 - v26 > v28;
          operator delete(v53);
          if (v26)
            goto LABEL_22;
          goto LABEL_23;
        }
      }
      v29 = v27 != v26;
      if (v26)
LABEL_22:
        operator delete(v26);
LABEL_23:
      if (!v29)
        goto LABEL_16;
      v49 = v20;
      v30 = (_BYTE *)*v18;
      v31 = (_BYTE *)v18[1];
      v48 = v18[2];
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      v50 = v19;
      v51 = v18;
      v32 = v19;
      v33 = (char *)a1 + v19;
      v34 = (_OWORD *)((char *)a1 + v19 + 72);
      break;
  }
  while (1)
  {
    v35 = (void **)(v33 + 48);
    *v34 = *((_OWORD *)v33 + 3);
    *((_QWORD *)v33 + 11) = *((_QWORD *)v33 + 8);
    *((_QWORD *)v33 + 6) = 0;
    *((_QWORD *)v33 + 7) = 0;
    *((_QWORD *)v33 + 8) = 0;
    if (v32 == -48)
    {
      v21 = a1 + 1;
      v22 = (uint64_t)a1;
      goto LABEL_15;
    }
    if (v31 == v30)
    {
      v37 = 0;
      v36 = 0;
      v44 = *(uint64_t *)((char *)a1 + v32 + 24);
      v43 = *(uint64_t *)((char *)a1 + v32 + 32);
      v40 = v43 - v44;
      if (v43 == v44)
        goto LABEL_37;
    }
    else
    {
      if (v31 - v30 < 0)
        sub_2394189F8();
      v36 = (char *)operator new(v31 - v30);
      v37 = &v36[4 * ((v31 - v30) >> 2)];
      memcpy(v36, v30, v31 - v30);
      v39 = *(uint64_t *)((char *)a1 + v32 + 24);
      v38 = *(uint64_t *)((char *)a1 + v32 + 32);
      v40 = v38 - v39;
      if (v38 == v39)
      {
LABEL_37:
        v41 = v37 != v36;
        if (v36)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    if ((v40 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v52 = operator new(v40);
    v41 = v37 - v36 > v40;
    operator delete(v52);
    if (v36)
LABEL_32:
      operator delete(v36);
LABEL_33:
    if (!v41)
      break;
    v42 = *v35;
    v32 -= 24;
    v33 = (char *)a1 + v32;
    v34 = (_OWORD *)((char *)a1 + v32 + 72);
    if (*v35)
    {
      *((_QWORD *)v33 + 10) = v42;
      operator delete(v42);
      *(_QWORD *)v34 = 0;
      *(uint64_t *)((char *)a1 + v32 + 80) = 0;
      *(uint64_t *)((char *)a1 + v32 + 88) = 0;
    }
  }
  v22 = (uint64_t)a1 + v32 + 48;
  v45 = *(void **)v22;
  v21 = (uint64_t *)((char *)a1 + v32 + 56);
  if (*(_QWORD *)v22)
  {
    *v21 = v45;
    operator delete(v45);
    *(_QWORD *)v22 = 0;
    *(uint64_t *)((char *)a1 + v32 + 56) = 0;
    *(uint64_t *)((char *)a1 + v32 + 64) = 0;
  }
LABEL_15:
  v2 = v47;
  v19 = v50;
  v18 = v51;
  *(_QWORD *)v22 = v30;
  *v21 = v31;
  *(_QWORD *)(v22 + 16) = v48;
  v20 = v49 + 1;
  if (v49 == 7)
    return v51 + 3 == v47;
LABEL_16:
  v17 = v18;
  v19 += 24;
  v18 += 3;
  if (v18 != v2)
    goto LABEL_17;
  return 1;
}

void sub_2394F7AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 136);
  if (v29)
  {
    *(_QWORD *)(v27 - 128) = v29;
    operator delete(v29);
  }
  if (v26)
    operator delete(v26);
  _Unwind_Resume(exception_object);
}

void sub_2394F7BA4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  sub_2394F70B0(a1, a2, a3);
  v9 = (const void *)*a4;
  v8 = a4[1];
  v10 = v8 - *a4;
  if (v8 == *a4)
  {
    v12 = 0;
    v11 = 0;
    v41 = a3[1];
    v14 = v41 - *a3;
    if (v41 != *a3)
      goto LABEL_4;
  }
  else
  {
    if (v10 < 0)
      sub_2394189F8();
    v11 = (char *)operator new(v8 - *a4);
    v12 = &v11[4 * (v10 >> 2)];
    memcpy(v11, v9, v10);
    v13 = a3[1];
    v14 = v13 - *a3;
    if (v13 != *a3)
    {
LABEL_4:
      if ((v14 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v15 = v12 - v11 > v14;
      if (v11)
        goto LABEL_6;
      goto LABEL_7;
    }
  }
  v15 = v12 != v11;
  if (v11)
LABEL_6:
    operator delete(v11);
LABEL_7:
  if (!v15)
    return;
  v16 = *a3;
  *a3 = *a4;
  *a4 = v16;
  v17 = a3[1];
  a3[1] = a4[1];
  a4[1] = v17;
  v18 = a3[2];
  a3[2] = a4[2];
  a4[2] = v18;
  v20 = (const void *)*a3;
  v19 = a3[1];
  v21 = v19 - *a3;
  if (v19 == *a3)
  {
    v23 = 0;
    v22 = 0;
    v42 = a2[1];
    v25 = v42 - *a2;
    if (v42 != *a2)
      goto LABEL_11;
  }
  else
  {
    if (v21 < 0)
      sub_2394189F8();
    v22 = (char *)operator new(v19 - *a3);
    v23 = &v22[4 * (v21 >> 2)];
    memcpy(v22, v20, v21);
    v24 = a2[1];
    v25 = v24 - *a2;
    if (v24 != *a2)
    {
LABEL_11:
      if ((v25 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v26 = v23 - v22 > v25;
      if (v22)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  v26 = v23 != v22;
  if (v22)
LABEL_13:
    operator delete(v22);
LABEL_14:
  if (!v26)
    return;
  v27 = *a2;
  *a2 = *a3;
  *a3 = v27;
  v28 = a2[1];
  a2[1] = a3[1];
  a3[1] = v28;
  v29 = a2[2];
  a2[2] = a3[2];
  a3[2] = v29;
  v31 = (const void *)*a2;
  v30 = a2[1];
  v32 = v30 - *a2;
  if (v30 == *a2)
  {
    v34 = 0;
    v33 = 0;
    v43 = a1[1];
    v36 = v43 - *a1;
    if (v43 != *a1)
      goto LABEL_18;
  }
  else
  {
    if (v32 < 0)
      sub_2394189F8();
    v33 = (char *)operator new(v30 - *a2);
    v34 = &v33[4 * (v32 >> 2)];
    memcpy(v33, v31, v32);
    v35 = a1[1];
    v36 = v35 - *a1;
    if (v35 != *a1)
    {
LABEL_18:
      if ((v36 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v37 = v34 - v33 > v36;
      if (!v33)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  v37 = v34 != v33;
  if (v33)
LABEL_20:
    operator delete(v33);
LABEL_21:
  if (v37)
  {
    v38 = *a1;
    *a1 = *a2;
    *a2 = v38;
    v39 = a1[1];
    a1[1] = a2[1];
    a2[1] = v39;
    v40 = a1[2];
    a1[2] = a2[2];
    a2[2] = v40;
  }
}

void sub_2394F7E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  if (__p)
    operator delete(__p);
  if (v22)
    operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_2394F7F20()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394F7F34(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250ADD340;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_2394F7F84(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADD340;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2394F7FBC(uint64_t a1, uint64_t *a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8x8_t v23;
  _QWORD *v24;
  uint64_t *v25;
  unint64_t v26;
  unsigned int **v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  _QWORD *v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int **v36;
  unsigned int *v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  _QWORD *v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  double v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  int8x16_t v57;
  float32x2_t v58;
  double v59;
  double v60;
  int8x16_t v61;
  float32x2_t v62;
  double v63;
  double *v64;
  char *v65;
  double *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  double *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double *v77;
  _OWORD *v78;
  double *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  int v90;
  double v91;
  double *v92;
  unint64_t v93;
  float *v94;
  float32x2_t v95;
  float v96;
  double v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _QWORD *v103;
  _QWORD *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  char *__p;
  char *v112;
  double *v113;
  double *v114;
  double *v115;
  void *v116[2];
  void *v117[2];
  int v118;

  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 136))
    sub_2394875CC();
  v5 = *a2;
  v6 = *(_QWORD *)(v3 + 24);
  v7 = *(_QWORD *)(v3 + 112) + 12 * v5;
  a3.i64[0] = *(_QWORD *)v7;
  a3.i32[2] = *(_DWORD *)(v7 + 8);
  v109 = a3;
  v8 = (unsigned int *)(v6 + 12 * v5);
  v9 = *(uint64_t **)(a1 + 24);
  v107 = *a2;
  v10 = **(_QWORD **)(a1 + 16) + 12 * *a2;
  a3.i64[0] = *(_QWORD *)v10;
  a3.i32[2] = *(_DWORD *)(v10 + 8);
  v108 = a3;
  v11.i32[3] = 0;
  *(_OWORD *)v116 = 0u;
  *(_OWORD *)v117 = 0u;
  v118 = 1065353216;
  v12 = *v9;
  v13 = *v9 + 24 * *v8;
  v14 = *(unsigned int **)v13;
  v15 = *(unsigned int **)(v13 + 8);
  if (*(unsigned int **)v13 != v15)
  {
    while (1)
    {
      while (1)
      {
        v19 = (uint64_t *)operator new(0x18uLL);
        *v19 = 0;
        v20 = *v14;
        v19[2] = v20;
        v19[1] = v20;
        if (!sub_2394F8998((uint64_t)v116, v20, v19 + 2))
          break;
        operator delete(v19);
        if (++v14 == v15)
          goto LABEL_21;
      }
      v21 = (unint64_t)v116[1];
      v22 = v19[1];
      v23 = (uint8x8_t)vcnt_s8((int8x8_t)v116[1]);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        if ((void *)v22 >= v116[1])
          v22 %= (unint64_t)v116[1];
      }
      else
      {
        v22 &= (unint64_t)v116[1] - 1;
      }
      v24 = v116[0];
      v25 = (uint64_t *)*((_QWORD *)v116[0] + v22);
      if (v25)
        break;
      *v19 = (uint64_t)v117[0];
      v117[0] = v19;
      v24[v22] = v117;
      if (*v19)
      {
        v26 = *(_QWORD *)(*v19 + 8);
        if (v23.u32[0] > 1uLL)
        {
          if (v26 >= v21)
            v26 %= v21;
        }
        else
        {
          v26 &= v21 - 1;
        }
        v25 = (uint64_t *)((char *)v116[0] + 8 * v26);
        goto LABEL_19;
      }
LABEL_20:
      ++v117[1];
      if (++v14 == v15)
      {
LABEL_21:
        v12 = **(_QWORD **)(a1 + 24);
        v27 = (unsigned int **)(v12 + 24 * v8[1]);
        v17 = *v27;
        v18 = v27[1];
        if (*v27 == v18)
          goto LABEL_40;
LABEL_24:
        while (2)
        {
          while (1)
          {
            v28 = (uint64_t *)operator new(0x18uLL);
            *v28 = 0;
            v29 = *v17;
            v28[2] = v29;
            v28[1] = v29;
            if (!sub_2394F8998((uint64_t)v116, v29, v28 + 2))
              break;
            operator delete(v28);
            if (++v17 == v18)
              goto LABEL_39;
          }
          v30 = (unint64_t)v116[1];
          v31 = v28[1];
          v32 = (uint8x8_t)vcnt_s8((int8x8_t)v116[1]);
          v32.i16[0] = vaddlv_u8(v32);
          if (v32.u32[0] >= 2uLL)
          {
            if ((void *)v31 >= v116[1])
              v31 %= (unint64_t)v116[1];
          }
          else
          {
            v31 &= (unint64_t)v116[1] - 1;
          }
          v33 = v116[0];
          v34 = (uint64_t *)*((_QWORD *)v116[0] + v31);
          if (v34)
          {
            *v28 = *v34;
            goto LABEL_37;
          }
          *v28 = (uint64_t)v117[0];
          v117[0] = v28;
          v33[v31] = v117;
          if (*v28)
          {
            v35 = *(_QWORD *)(*v28 + 8);
            if (v32.u32[0] >= 2uLL)
            {
              if (v35 >= v30)
                v35 %= v30;
            }
            else
            {
              v35 &= v30 - 1;
            }
            v34 = (uint64_t *)((char *)v116[0] + 8 * v35);
LABEL_37:
            *v34 = (uint64_t)v28;
          }
          ++v117[1];
          if (++v17 == v18)
          {
LABEL_39:
            v12 = **(_QWORD **)(a1 + 24);
            goto LABEL_40;
          }
          continue;
        }
      }
    }
    *v19 = *v25;
LABEL_19:
    *v25 = (uint64_t)v19;
    goto LABEL_20;
  }
  v16 = (unsigned int **)(v12 + 24 * v8[1]);
  v17 = *v16;
  v18 = v16[1];
  if (*v16 != v18)
    goto LABEL_24;
LABEL_40:
  v36 = (unsigned int **)(v12 + 24 * v8[2]);
  v37 = *v36;
  v38 = v36[1];
  v39 = v107;
  if (*v36 != v38)
  {
    while (1)
    {
      while (1)
      {
        v40 = (uint64_t *)operator new(0x18uLL);
        *v40 = 0;
        v41 = *v37;
        v40[2] = v41;
        v40[1] = v41;
        if (!sub_2394F8998((uint64_t)v116, v41, v40 + 2))
          break;
        operator delete(v40);
        if (++v37 == v38)
          goto LABEL_58;
      }
      v42 = (unint64_t)v116[1];
      v43 = v40[1];
      v44 = (uint8x8_t)vcnt_s8((int8x8_t)v116[1]);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] >= 2uLL)
      {
        if ((void *)v43 >= v116[1])
          v43 %= (unint64_t)v116[1];
      }
      else
      {
        v43 &= (unint64_t)v116[1] - 1;
      }
      v45 = v116[0];
      v46 = (uint64_t *)*((_QWORD *)v116[0] + v43);
      if (v46)
        break;
      *v40 = (uint64_t)v117[0];
      v117[0] = v40;
      v45[v43] = v117;
      if (*v40)
      {
        v47 = *(_QWORD *)(*v40 + 8);
        if (v44.u32[0] >= 2uLL)
        {
          if (v47 >= v42)
            v47 %= v42;
        }
        else
        {
          v47 &= v42 - 1;
        }
        v46 = (uint64_t *)((char *)v116[0] + 8 * v47);
        goto LABEL_56;
      }
LABEL_57:
      ++v117[1];
      if (++v37 == v38)
        goto LABEL_58;
    }
    *v40 = *v46;
LABEL_56:
    *v46 = (uint64_t)v40;
    goto LABEL_57;
  }
LABEL_58:
  v113 = 0;
  v114 = 0;
  v115 = 0;
  __p = 0;
  v112 = 0;
  v48 = v117[0];
  if (!v117[0])
    goto LABEL_114;
  v49 = 0;
  v50 = 0.0;
  do
  {
    v52 = v48[2];
    if (v52 != v39)
    {
      v53 = *(_QWORD *)(a1 + 8);
      if (!*(_BYTE *)(v53 + 136))
        sub_2394875CC();
      v54 = *(_QWORD *)(v53 + 112) + 12 * v52;
      v11.i64[0] = *(_QWORD *)v54;
      v11.i32[2] = *(_DWORD *)(v54 + 8);
      v110 = v11;
      v55 = **(_QWORD **)(a1 + 16) + 12 * v52;
      v11.i64[0] = *(_QWORD *)v55;
      v11.i32[2] = *(_DWORD *)(v55 + 8);
      v56 = *(float *)(**(_QWORD **)(a1 + 32) + 4 * v52);
      v57 = (int8x16_t)vsubq_f32(v108, v11);
      v58 = (float32x2_t)vextq_s8(v57, v57, 8uLL).u64[0];
      v59 = ***(float ***)(a1 + 40);
      v60 = exp((float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v57.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1), *(float32x2_t *)v57.i8, 1), v58, v58).f32[0]/ ((v59 + v59)* v59));
      v61 = (int8x16_t)vsubq_f32(v109, v110);
      v62 = (float32x2_t)vextq_s8(v61, v61, 8uLL).u64[0];
      v63 = v60
          * v56
          * exp((float)-vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), *(float32x2_t *)v61.i8, 1), v62, v62).f32[0]/ (***(double ***)(a1 + 48)* (***(double ***)(a1 + 48) + ***(double ***)(a1 + 48))));
      v64 = v114;
      if (v114 < v115)
      {
        *v114++ = v63;
        v65 = v112;
        if (v49 >= v112)
        {
LABEL_88:
          v83 = 0xAAAAAAAAAAAAAAABLL * ((v49 - __p) >> 2) + 1;
          if (v83 > 0x1555555555555555)
            sub_2394189F8();
          v84 = 0xAAAAAAAAAAAAAAABLL * ((v65 - __p) >> 2);
          if (2 * v84 > v83)
            v83 = 2 * v84;
          if (v84 >= 0xAAAAAAAAAAAAAAALL)
            v85 = 0x1555555555555555;
          else
            v85 = v83;
          if (v85)
          {
            if (v85 > 0x1555555555555555)
LABEL_128:
              sub_239418A80();
            v86 = (char *)operator new(12 * v85);
            v39 = v107;
          }
          else
          {
            v86 = 0;
          }
          v87 = &v86[4 * ((v49 - __p) >> 2)];
          v11.i32[3] = v110.i32[3];
          *(_QWORD *)v87 = v110.i64[0];
          *((_DWORD *)v87 + 2) = v110.i32[2];
          v88 = v87;
          if (v49 != __p)
          {
            do
            {
              v89 = *(_QWORD *)(v49 - 12);
              v49 -= 12;
              v90 = *((_DWORD *)v49 + 2);
              *(_QWORD *)(v88 - 12) = v89;
              v88 -= 12;
              *((_DWORD *)v88 + 2) = v90;
            }
            while (v49 != __p);
            v49 = __p;
          }
          v51 = v87 + 12;
          __p = v88;
          v112 = &v86[12 * v85];
          if (v49)
            operator delete(v49);
          goto LABEL_61;
        }
LABEL_60:
        v11.i32[3] = v110.i32[3];
        *((_DWORD *)v49 + 2) = v110.i32[2];
        *(_QWORD *)v49 = v110.i64[0];
        v51 = v49 + 12;
LABEL_61:
        v50 = v50 + v63;
        v49 = v51;
        goto LABEL_62;
      }
      v66 = v113;
      v67 = v114 - v113;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 61)
        sub_2394189F8();
      v69 = (char *)v115 - (char *)v113;
      if (((char *)v115 - (char *)v113) >> 2 > v68)
        v68 = v69 >> 2;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
        v70 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        if (v70 >> 61)
          goto LABEL_128;
        v71 = operator new(8 * v70);
        v72 = (double *)&v71[8 * v67];
        *v72 = v63;
        v73 = (uint64_t)(v72 + 1);
        if (v114 == v113)
        {
LABEL_85:
          v113 = v72;
          v115 = (double *)&v71[8 * v70];
          if (v66)
            operator delete(v66);
          v39 = v107;
          v114 = (double *)v73;
          v65 = v112;
          if (v49 >= v112)
            goto LABEL_88;
          goto LABEL_60;
        }
      }
      else
      {
        v71 = 0;
        v72 = (double *)(8 * v67);
        *(double *)(8 * v67) = v63;
        v73 = 8 * v67 + 8;
        if (v114 == v113)
          goto LABEL_85;
      }
      v74 = (char *)(v114 - 1) - (char *)v113;
      if (v74 < 0x58)
        goto LABEL_135;
      if ((unint64_t)((char *)v113 - v71) < 0x20)
        goto LABEL_135;
      v75 = (v74 >> 3) + 1;
      v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
      v77 = &v114[v76 / 0xFFFFFFFFFFFFFFF8];
      v72 = (double *)((char *)v72 - v76);
      v78 = &v71[8 * v67 - 16];
      v79 = v114 - 2;
      v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v81 = *(_OWORD *)v79;
        *(v78 - 1) = *((_OWORD *)v79 - 1);
        *v78 = v81;
        v78 -= 2;
        v79 -= 4;
        v80 -= 4;
      }
      while (v80);
      v64 = v77;
      if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_135:
        do
        {
          v82 = *((_QWORD *)v64-- - 1);
          *((_QWORD *)v72-- - 1) = v82;
        }
        while (v64 != v113);
      }
      goto LABEL_85;
    }
LABEL_62:
    v48 = (_QWORD *)*v48;
  }
  while (v48);
  if (v50 != 0.0)
  {
    v91 = 0.0 - v50;
    if (v50 >= 0.0)
      v91 = v50;
    if (v91 > 1.0e-12)
    {
      v92 = v113;
      if (v114 == v113)
      {
        v95 = 0;
        v96 = 0.0;
      }
      else
      {
        v93 = v114 - v113;
        if (v93 <= 1)
          v93 = 1;
        v94 = (float *)(__p + 8);
        v95 = 0;
        v96 = 0.0;
        do
        {
          v97 = *v92 / v50;
          v95 = vcvt_f32_f64(vmlaq_n_f64(vcvtq_f64_f32(v95), vcvtq_f64_f32(*(float32x2_t *)(v94 - 2)), v97));
          v96 = v96 + v97 * *v94;
          ++v92;
          v94 += 3;
          --v93;
        }
        while (v93);
      }
      v106 = **(_QWORD **)(a1 + 56) + 12 * v39;
      *(float32x2_t *)v106 = v95;
      *(float *)(v106 + 8) = v96;
      v102 = __p;
      if (!__p)
        goto LABEL_117;
LABEL_116:
      operator delete(v102);
      goto LABEL_117;
    }
  }
LABEL_114:
  v98 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v98 + 136))
    sub_2394875CC();
  v99 = *(_QWORD *)(v98 + 112) + 12 * v5;
  v100 = **(_QWORD **)(a1 + 56) + 12 * v39;
  v101 = *(_QWORD *)v99;
  *(_DWORD *)(v100 + 8) = *(_DWORD *)(v99 + 8);
  *(_QWORD *)v100 = v101;
  v102 = __p;
  if (__p)
    goto LABEL_116;
LABEL_117:
  if (v113)
    operator delete(v113);
  v103 = v117[0];
  if (v117[0])
  {
    do
    {
      v104 = (_QWORD *)*v103;
      operator delete(v103);
      v103 = v104;
    }
    while (v104);
  }
  v105 = v116[0];
  v116[0] = 0;
  if (v105)
    operator delete(v105);
}

void sub_2394F88E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,_QWORD *__p)
{
  void *v26;
  _QWORD *v27;
  _QWORD *v28;

  if (a17)
  {
    operator delete(a17);
    v26 = a20;
    if (!a20)
    {
LABEL_3:
      v27 = __p;
      if (__p)
        goto LABEL_4;
      goto LABEL_5;
    }
  }
  else
  {
    v26 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v26);
  v27 = __p;
  if (__p)
  {
    do
    {
LABEL_4:
      v28 = (_QWORD *)*v27;
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
LABEL_5:
  if (a23)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394F8998(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t prime;
  size_t v18;
  uint8x8_t v19;
  uint64_t v20;
  size_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_22;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2 % v4;
    if (v4 > a2)
      v6 = a2;
    v7 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_22;
  }
  else
  {
    v6 = (v4 - 1) & a2;
    v7 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
    if (!v7)
      goto LABEL_22;
  }
  result = (_QWORD *)*v7;
  if (*v7)
  {
    v9 = *a3;
    if (v5.u32[0] < 2uLL)
    {
      while (1)
      {
        v11 = result[1];
        if (v11 == a2)
        {
          if (result[2] == v9)
            return result;
        }
        else if ((v11 & (v4 - 1)) != v6)
        {
          goto LABEL_22;
        }
        result = (_QWORD *)*result;
        if (!result)
          goto LABEL_22;
      }
    }
    do
    {
      v10 = result[1];
      if (v10 == a2)
      {
        if (result[2] == v9)
          return result;
      }
      else
      {
        if (v10 >= v4)
          v10 %= v4;
        if (v10 != v6)
          break;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
LABEL_22:
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (v4 && (float)(v13 * (float)v4) >= v12)
    return 0;
  v14 = 1;
  if (v4 >= 3)
    v14 = (v4 & (v4 - 1)) != 0;
  v15 = v14 | (2 * v4);
  v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16)
    prime = v16;
  else
    prime = v15;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_46;
  if (prime < v4)
  {
    v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v19 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      v21 = std::__next_prime(v18);
      if (prime <= v21)
        prime = v21;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
      if (prime <= v18)
        prime = v18;
      if (prime >= v4)
        return 0;
    }
LABEL_46:
    sub_239427FE0(a1, prime);
  }
  return 0;
}

void sub_2394F8BA8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394F8BBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADD388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_2394F8BFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD388;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t sub_2394F8C24(uint64_t a1, _QWORD *a2, float32x4_t a3, double a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x2_t v15;
  int8x8_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x2_t v19;
  float32x4_t result;

  v6 = **(_QWORD **)(a1 + 8) + 24 * *a2;
  v8 = *(unsigned int **)v6;
  v7 = *(unsigned int **)(v6 + 8);
  v9 = (uint64_t)v7 - *(_QWORD *)v6;
  if (!v9)
    sub_239EC0110();
  v10 = *(_QWORD *)(a1 + 16);
  if (!*(_BYTE *)(v10 + 136))
    sub_2394875CC();
  v11 = *(_QWORD *)v10 + 12 * *a2;
  a3.i64[0] = *(_QWORD *)v11;
  a3.i32[2] = *(_DWORD *)(v11 + 8);
  v12 = *(_QWORD *)(v10 + 112);
  v13 = 0uLL;
  do
  {
    v14 = v12 + 12 * *v8;
    a5.i64[0] = *(_QWORD *)v14;
    v15.i32[0] = *(_DWORD *)(v14 + 8);
    v15.i32[1] = HIDWORD(*(_QWORD *)v14);
    v16 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v15), (int8x8_t)vcgez_f32(v15)));
    if ((v16.i8[4] & 1) == 0 && (v16.i8[0] & 1) == 0)
    {
      a5.i32[2] = *(_DWORD *)(v14 + 8);
      v17 = **(_QWORD **)(a1 + 24) + 12 * *v8;
      a6.i64[0] = *(_QWORD *)v17;
      a6.i32[2] = *(_DWORD *)(v17 + 8);
      v18 = (int8x16_t)vsubq_f32(a6, a3);
      v19 = vmla_lane_f32(vmul_f32(*(float32x2_t *)a5.f32, *(float32x2_t *)v18.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1), *(float32x2_t *)a5.f32, 1);
      a6 = (float32x4_t)vextq_s8(v18, v18, 8uLL);
      v13 = vmlaq_n_f32(v13, a5, vmla_f32(v19, *(float32x2_t *)a6.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL)).f32[0]);
    }
    ++v8;
  }
  while (v8 != v7);
  a5.f32[0] = (float)(unint64_t)(v9 >> 2);
  *(float32x2_t *)a6.f32 = vdiv_f32(*(float32x2_t *)v13.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)a5.f32, 0));
  a6.f32[2] = v13.f32[2] / a5.f32[0];
  result = vaddq_f32(a3, a6);
  *(_DWORD *)(v11 + 8) = result.i32[2];
  *(_QWORD *)v11 = result.i64[0];
  return result;
}

void sub_2394F8D48()
{
  unsigned __int8 v0;

  if ((byte_2542CF7A8 & 1) == 0)
  {
    byte_2542CF7A8 = 1;
    v0 = atomic_load((unsigned __int8 *)&qword_2542CF7B8);
    if ((v0 & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_2542CF7B8))
      {
        qword_2542CF7B0 = ldexp(2.22507386e-308, 54);
        __cxa_guard_release(&qword_2542CF7B8);
      }
    }
  }
}

void sub_2394F8DB8(char **a1, uint64_t *a2, void **a3, int a4, float64x2_t a5, int8x16_t a6, float64x2_t a7, float64x2_t a8, float64x2_t _Q4, float64x2_t _Q5, float64x2_t a11, float64x2_t _Q7)
{
  char **v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  long double v26;
  uint64_t v27;
  double v28;
  char *v29;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  __n128 *v47;
  uint64_t v48;
  _DWORD *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  unint64_t v56;
  int v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  BOOL v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  float64x2_t *v69;
  float64x2_t v70;
  float64x2_t v72;
  float64x2_t *v77;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v83;
  BOOL v85;
  __n128 *v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  _DWORD *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  BOOL v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  float64x2_t *v102;
  float64x2_t v103;
  float64x2_t v105;
  float64x2_t *v107;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v113;
  BOOL v115;
  __n128 *v117;
  float64x2_t *v118;
  uint64_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  __n128 v123;
  char *v124;
  _BYTE *v125;
  char *v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  int v135;
  uint64_t v136;
  unsigned __int8 *v137;
  _BYTE *v138;
  uint64_t *v140;
  __n128 v141;
  unint64_t v142;
  void *__p[3];
  void *v144[3];
  _DWORD v145[3];

  v13 = a1;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v145[0] = 0;
  memset(v144, 0, sizeof(v144));
  memset(__p, 0, sizeof(__p));
  v133 = 954437177 * ((unint64_t)(a1[1] - *a1) >> 3);
  v140 = a2;
  do
  {
    if (v133 - v15 <= a4 || v16 == v133 - v15)
      break;
    v131 = v133 - v15;
    if (-858993459 * (unsigned __int16)v17 <= 0x33333333)
    {
      sub_2394F97C4(v13, a2, a3, v17, a5.f64[0], *(double *)a6.i64, a7, a8.f64[0], _Q4.f64[0], _Q5, a11.f64[0], _Q7);
      v13 = a1;
      a2 = v140;
    }
    v132 = v17;
    v19 = *v13;
    v20 = v13[1];
    if (*v13 == v20)
      goto LABEL_3;
    v21 = v20 - v19 - 72;
    v22 = *v13;
    if (v21 < 0x48)
      goto LABEL_100;
    v23 = v21 / 0x48 + 1;
    v22 = &v19[72 * (v23 & 0x7FFFFFFFFFFFFFELL)];
    v24 = v19 + 141;
    v25 = v23 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v24 - 72) = 0;
      *v24 = 0;
      v24 += 144;
      v25 -= 2;
    }
    while (v25);
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_100:
      do
      {
        v22[69] = 0;
        v22 += 72;
      }
      while (v22 != v20);
    }
    v26 = pow((double)(v132 + 3), 3.0);
    v13 = a1;
    a2 = v140;
    v27 = 0;
    v28 = v26 * 0.000000001;
    while (2)
    {
      v29 = &v19[72 * v27];
      a5.f64[0] = *((float64_t *)v29 + 3);
      if (a5.f64[0] > v28 || v29[68] != 0 || v29[69] != 0)
        goto LABEL_17;
      v135 = v14;
      v32 = 0;
      v136 = v27;
      v33 = (uint64_t)&v19[72 * v27 + 56];
      while (1)
      {
        a5.f64[0] = *(float64_t *)&v29[8 * v32];
        if (a5.f64[0] >= v28)
        {
          ++v32;
          goto LABEL_28;
        }
        v34 = *(_DWORD *)(v33 + 4 * v32);
        v35 = *a2;
        v36 = ++v32;
        if (v32 == 3)
          v36 = 0;
        v37 = *(_DWORD *)(v33 + 4 * v36);
        v38 = v35 + 120 * v34;
        v41 = *(unsigned __int8 *)(v38 + 112);
        v40 = (_BYTE *)(v38 + 112);
        v39 = v41;
        v42 = v35 + 120 * v37;
        v45 = *(unsigned __int8 *)(v42 + 112);
        v44 = (unsigned __int8 *)(v42 + 112);
        v43 = v45;
        if (!v39 || v43 == 0)
          break;
LABEL_28:
        if (v32 == 3)
        {
          v14 = v135;
          v27 = v136;
          if (v133 - v135 <= a4)
            goto LABEL_2;
          goto LABEL_93;
        }
      }
      v137 = v44;
      v138 = v40;
      if (v39)
      {
        v47 = (__n128 *)(v35 + 120 * v34);
      }
      else
      {
        if (!v43)
        {
          sub_2394FA5D8(a2, v34, v37, (float64x2_t *)&v141);
          goto LABEL_42;
        }
        v47 = (__n128 *)(v35 + 120 * v37);
      }
      v141 = v47[5];
      v142 = v47[6].n128_u64[0];
LABEL_42:
      v48 = v35 + 120 * v34;
      v50 = *(_DWORD *)(v48 + 108);
      v49 = (_DWORD *)(v48 + 108);
      sub_23941C5D8((uint64_t)v144, v50, 0);
      v51 = v35 + 120 * v37;
      v53 = *(_DWORD *)(v51 + 108);
      v52 = (unsigned int *)(v51 + 108);
      sub_23941C5D8((uint64_t)__p, v53, 0);
      v55 = *v49;
      v13 = a1;
      a2 = v140;
      if (!(_DWORD)v55)
        goto LABEL_62;
      v56 = 0;
      v57 = *(_DWORD *)(v35 + 120 * v34 + 104);
      v58 = *a3;
      v59 = *a1;
      v60 = *v140;
      v61 = (char *)v144[0];
      *(_QWORD *)&a5.f64[0] = v142;
      a6 = (int8x16_t)v141;
      a7 = (float64x2_t)vextq_s8(a6, a6, 8uLL);
      v62 = 1;
      while (1)
      {
        v63 = v58[2 * (v57 + v56)];
        if (v59[72 * v63 + 68])
          goto LABEL_45;
        v64 = v58[2 * (v57 + v56) + 1];
        v65 = (uint64_t)&v59[72 * v63 + 56];
        v66 = *(_DWORD *)(v65 + 4 * ((v64 + 1) % 3u));
        v67 = *(_DWORD *)(v65 + 4 * ((v64 + 2) % 3u));
        if (v66 != v37 && v67 != v37)
          break;
        *(_QWORD *)&v61[(v56 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v56;
LABEL_45:
        v62 = ++v56 < v55;
        if (v55 == v56)
          goto LABEL_62;
      }
      v69 = (float64x2_t *)(v60 + 120 * v66);
      a8.f64[0] = v69[6].f64[0];
      *(_QWORD *)&v70.f64[0] = a6.i64[0];
      v70.f64[1] = a7.f64[0];
      _Q4 = vsubq_f64(v69[5], v70);
      v72 = vsubq_f64(a8, a5);
      _Q7.f64[0] = _Q4.f64[1];
      __asm { FMLA            D3, D7, V4.D[1] }
      _Q17.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D3, v72.f64[0], v72.f64[0]));
      a8 = vmulq_n_f64(_Q4, _Q17.f64[0]);
      v77 = (float64x2_t *)(v60 + 120 * v67);
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL);
      _Q5 = vmulq_f64(v72, _Q17);
      _Q6 = vsubq_f64(v77[5], v70);
      _Q7.f64[0] = v77[6].f64[0];
      v80 = vsubq_f64(_Q7, a5);
      _Q17.f64[0] = _Q6.f64[1];
      __asm { FMLA            D7, D17, V6.D[1] }
      _Q17.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D7, v80.f64[0], v80.f64[0]));
      a11 = vmulq_n_f64(_Q6, _Q17.f64[0]);
      _Q7 = (float64x2_t)vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL);
      v80.f64[0] = vmulq_f64(v80, _Q17).f64[0];
      _Q17 = vmulq_f64(a8, a11);
      if (fabs(_Q17.f64[0] + _Q4.f64[0] * _Q7.f64[0] + _Q5.f64[0] * v80.f64[0]) <= 0.999)
      {
        _Q17.f64[0] = _Q4.f64[0];
        _Q17.f64[1] = _Q5.f64[0];
        _Q5.f64[1] = a8.f64[0];
        v81.f64[0] = _Q7.f64[0];
        v81.f64[1] = v80.f64[0];
        v80.f64[1] = a11.f64[0];
        _Q16 = vmlsq_f64(vmulq_f64(_Q17, v80), _Q5, v81);
        v83 = vmlsq_f64(vmulq_f64(a8, _Q7), _Q4, a11);
        _Q4 = vmulq_f64(_Q16, _Q16);
        _D5 = _Q16.f64[1];
        __asm { FMLA            D4, D5, V16.D[1] }
        _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v83.f64[0], v83.f64[0]));
        a8 = vmulq_f64(v83, _Q4);
        _Q5 = vmulq_n_f64(_Q16, _Q4.f64[0]);
        *(_QWORD *)&_Q4.f64[0] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        *(_QWORD *)&v61[(v56 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v56);
        v85 = (*(_QWORD *)&_Q5.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (*(_QWORD *)&_Q4.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
        if (v85 && (*(_QWORD *)&a8.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v87 = (__n128 *)&v59[72 * v63];
          *(_QWORD *)&a11.f64[0] = v87[3].n128_u64[0];
          _Q7 = (float64x2_t)v87[2];
          _Q5 = vmulq_f64(_Q5, _Q7);
          __asm { FMLA            D5, D4, V7.D[1] }
          a8.f64[0] = _Q5.f64[0] + a8.f64[0] * a11.f64[0];
          if (a8.f64[0] >= 0.2)
            goto LABEL_45;
        }
      }
      if (v62)
        goto LABEL_28;
LABEL_62:
      v88 = *v52;
      if (!(_DWORD)v88)
        goto LABEL_84;
      v89 = 0;
      v90 = *(_DWORD *)(v35 + 120 * v37 + 104);
      v91 = *a3;
      v92 = *a1;
      v93 = *v140;
      v94 = (char *)__p[0];
      *(_QWORD *)&a5.f64[0] = v142;
      a6 = (int8x16_t)v141;
      a7 = (float64x2_t)vextq_s8(a6, a6, 8uLL);
      v95 = 1;
      while (2)
      {
        v96 = v91[2 * (v90 + v89)];
        if (v92[72 * v96 + 68])
          goto LABEL_65;
        v97 = v91[2 * (v90 + v89) + 1];
        v98 = (uint64_t)&v92[72 * v96 + 56];
        v99 = *(_DWORD *)(v98 + 4 * ((v97 + 1) % 3u));
        v100 = *(_DWORD *)(v98 + 4 * ((v97 + 2) % 3u));
        if (v99 == v34 || v100 == v34)
        {
          *(_QWORD *)&v94[(v89 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v89;
LABEL_65:
          v95 = ++v89 < v88;
          if (v88 == v89)
            goto LABEL_84;
          continue;
        }
        break;
      }
      v102 = (float64x2_t *)(v93 + 120 * v99);
      a8.f64[0] = v102[6].f64[0];
      *(_QWORD *)&v103.f64[0] = a6.i64[0];
      v103.f64[1] = a7.f64[0];
      _Q4 = vsubq_f64(v102[5], v103);
      v105 = vsubq_f64(a8, a5);
      _Q7.f64[0] = _Q4.f64[1];
      __asm { FMLA            D3, D7, V4.D[1] }
      _Q17.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D3, v105.f64[0], v105.f64[0]));
      a8 = vmulq_n_f64(_Q4, _Q17.f64[0]);
      v107 = (float64x2_t *)(v93 + 120 * v100);
      _Q4 = (float64x2_t)vextq_s8((int8x16_t)a8, (int8x16_t)a8, 8uLL);
      _Q5 = vmulq_f64(v105, _Q17);
      _Q6 = vsubq_f64(v107[5], v103);
      _Q7.f64[0] = v107[6].f64[0];
      v110 = vsubq_f64(_Q7, a5);
      _Q17.f64[0] = _Q6.f64[1];
      __asm { FMLA            D7, D17, V6.D[1] }
      _Q17.f64[0] = 1.0 / sqrt(vmlad_n_f64(_D7, v110.f64[0], v110.f64[0]));
      a11 = vmulq_n_f64(_Q6, _Q17.f64[0]);
      _Q7 = (float64x2_t)vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL);
      v110.f64[0] = vmulq_f64(v110, _Q17).f64[0];
      if (fabs(vmulq_f64(a8, a11).f64[0] + _Q4.f64[0] * _Q7.f64[0] + _Q5.f64[0] * v110.f64[0]) <= 0.999)
      {
        _Q17.f64[0] = _Q4.f64[0];
        _Q17.f64[1] = _Q5.f64[0];
        _Q5.f64[1] = a8.f64[0];
        v111.f64[0] = _Q7.f64[0];
        v111.f64[1] = v110.f64[0];
        v110.f64[1] = a11.f64[0];
        _Q16 = vmlsq_f64(vmulq_f64(_Q17, v110), _Q5, v111);
        v113 = vmlsq_f64(vmulq_f64(a8, _Q7), _Q4, a11);
        _Q4 = vmulq_f64(_Q16, _Q16);
        _D5 = _Q16.f64[1];
        __asm { FMLA            D4, D5, V16.D[1] }
        _Q4.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q4.f64[0], v113.f64[0], v113.f64[0]));
        a8 = vmulq_f64(v113, _Q4);
        _Q5 = vmulq_n_f64(_Q16, _Q4.f64[0]);
        *(_QWORD *)&_Q4.f64[0] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
        *(_QWORD *)&v94[(v89 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v89);
        v115 = (*(_QWORD *)&_Q5.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)&_Q4.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
        if (v115 && (*(_QWORD *)&a8.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          v117 = (__n128 *)&v92[72 * v96];
          *(_QWORD *)&a11.f64[0] = v117[3].n128_u64[0];
          _Q7 = (float64x2_t)v117[2];
          _Q5 = vmulq_f64(_Q5, _Q7);
          __asm { FMLA            D5, D4, V7.D[1] }
          a8.f64[0] = _Q5.f64[0] + a8.f64[0] * a11.f64[0];
          if (a8.f64[0] >= 0.2)
            goto LABEL_65;
        }
      }
      if (v95)
        goto LABEL_28;
LABEL_84:
      v118 = (float64x2_t *)(v35 + 120 * v37);
      v119 = v35 + 120 * v34;
      v120 = vaddq_f64(v118[1], *(float64x2_t *)(v119 + 16));
      *(float64x2_t *)v119 = vaddq_f64(*v118, *(float64x2_t *)v119);
      *(float64x2_t *)(v119 + 16) = v120;
      v121 = vaddq_f64(v118[3], *(float64x2_t *)(v119 + 48));
      *(float64x2_t *)(v119 + 32) = vaddq_f64(v118[2], *(float64x2_t *)(v119 + 32));
      *(float64x2_t *)(v119 + 48) = v121;
      v122 = vaddq_f64(v118[4], *(float64x2_t *)(v119 + 64));
      v123 = v141;
      *(_QWORD *)(v119 + 96) = v142;
      *(float64x2_t *)(v119 + 64) = v122;
      *(__n128 *)(v119 + 80) = v123;
      v125 = *a3;
      v124 = (char *)a3[1];
      sub_2394FA974(a1, v140, (char **)a3, v34, v119, v144, v145);
      sub_2394FA974(a1, v140, (char **)a3, v34, (uint64_t)v118, __p, v145);
      v126 = (char *)*a3;
      v127 = (char *)a3[1];
      if (*v138 | *v137)
        *v138 = 1;
      v128 = v124 - v125;
      v129 = (v124 - v125) >> 3;
      v130 = ((v127 - v126) >> 3) - v129;
      v13 = a1;
      a2 = v140;
      if (*v49 >= v130)
      {
        if ((_DWORD)v130)
        {
          memcpy(&v126[8 * *(unsigned int *)(v35 + 120 * v34 + 104)], &v126[8 * (v128 >> 3)], 8 * (((v127 - v126) >> 3) - v129));
          v13 = a1;
          a2 = v140;
        }
      }
      else
      {
        *(_DWORD *)(v35 + 120 * v34 + 104) = v129;
      }
      *v49 = v130;
      v14 = v145[0];
      v27 = v136;
      if (v133 - v145[0] <= a4)
      {
LABEL_2:
        v15 = v14;
        break;
      }
LABEL_93:
      v19 = *v13;
      v20 = v13[1];
      v15 = v14;
LABEL_17:
      if (++v27 < 0x8E38E38E38E38E39 * ((v20 - v19) >> 3))
        continue;
      break;
    }
LABEL_3:
    v16 = v131;
    v17 = v132 + 1;
  }
  while (v132 != 9998);
  sub_2394FAC3C(v13, (char **)a2);
  if (__p[0])
    operator delete(__p[0]);
  if (v144[0])
    operator delete(v144[0]);
}

void sub_2394F9784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24)
{
  void *v25;

  if (__p)
  {
    operator delete(__p);
    v25 = a24;
    if (!a24)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v25 = a24;
    if (!a24)
      goto LABEL_3;
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void sub_2394F97C4(char **a1, uint64_t *a2, void **a3, int a4, double a5, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10, double a11, float64x2_t a12)
{
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unsigned int *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  int v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  _DWORD *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint8x8_t v84;
  unint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  int v103;
  char *v104;
  int64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  unint64_t v110;
  char *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  float64x2_t v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v148;
  double v153;
  BOOL v155;
  double v156;
  double v157;
  double v158;
  float64x2_t v159;
  float64_t v160;
  double v161;
  double v162;
  double v163;
  float64_t v164;
  uint64_t v165;
  double v166;
  double v167;
  double v168;
  float64x2_t *v169;
  float64_t v170;
  double v171;
  double v172;
  float64_t v173;
  float64x2_t *v174;
  float64_t v175;
  double v176;
  double v177;
  float64_t v178;
  float64x2_t *v179;
  float64x2_t v180;
  double v181;
  double v182;
  float64_t v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  double v191;
  _QWORD *v192;
  _QWORD *v193;
  void *v194;
  uint64_t *v195;
  uint64_t v196;
  char **v197;
  void **v198;
  _DWORD *v199;
  _DWORD *v200;
  int v201;
  int v202;
  uint64_t v203;
  char *v204;
  char *v205;
  unsigned int v206;
  void *v207[2];
  void *__p[2];
  int v209;
  void *v210;
  _DWORD *v211;
  char *v212;
  char *v213;
  _DWORD *v214;
  char *v215;
  _DWORD *v216[2];

  if (a4 < 1)
    goto LABEL_14;
  v16 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    v19 = 0;
    _CF = 0x8E38E38E38E38E39 * ((v17 - *a1) >> 3) == 0;
LABEL_12:
    if (!_CF)
      a1[1] = &v17[72 * v19];
    goto LABEL_14;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  do
  {
    v22 = &v16[v18];
    if (!v16[v18 + 68])
    {
      v23 = v19;
      v24 = &v16[72 * v19];
      v25 = *((_OWORD *)v22 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v22;
      *((_OWORD *)v24 + 1) = v25;
      v26 = *((_OWORD *)v22 + 2);
      *((_QWORD *)v24 + 6) = *((_QWORD *)v22 + 6);
      *((_OWORD *)v24 + 2) = v26;
      if (v20 != v19)
      {
        v27 = *(_QWORD *)&v16[v18 + 56];
        v28 = &v16[72 * v19];
        *((_DWORD *)v28 + 16) = *(_DWORD *)&v16[v18 + 64];
        *((_QWORD *)v28 + 7) = v27;
      }
      ++v19;
      *(_WORD *)&v16[72 * v23 + 68] = *((_WORD *)v22 + 34);
      v16 = *a1;
      v17 = a1[1];
    }
    ++v20;
    v21 = 0x8E38E38E38E38E39 * ((v17 - v16) >> 3);
    v18 += 72;
  }
  while (v20 < v21);
  v17 = v16;
  _CF = v19 >= v21;
  if (v19 <= v21)
    goto LABEL_12;
  sub_2394FB964(a1, v19 - v21);
LABEL_14:
  if (!a4)
  {
    v128 = (_OWORD *)*a2;
    v129 = (_OWORD *)a2[1];
    if ((_OWORD *)*a2 != v129)
    {
      do
      {
        v128[3] = 0uLL;
        v128[4] = 0uLL;
        v128[1] = 0uLL;
        v128[2] = 0uLL;
        *v128 = 0uLL;
        v128 = (_OWORD *)((char *)v128 + 120);
      }
      while (v128 != v129);
    }
    v130 = *a1;
    if (a1[1] != *a1)
    {
      v131 = 0;
      v132 = 0;
      do
      {
        v133 = &v130[v131];
        v135 = *((_DWORD *)v133 + 14);
        v134 = *((_DWORD *)v133 + 15);
        v136 = *a2 + 120 * v135;
        v137 = *(float64x2_t *)(v136 + 80);
        a7.f64[0] = *(float64_t *)(v136 + 96);
        *(_QWORD *)&v138 = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
        v139 = *a2 + 120 * v134;
        a10.f64[0] = *(float64_t *)(v139 + 96);
        v140 = *a2 + 120 * *((unsigned int *)v133 + 16);
        a12.f64[0] = *(float64_t *)(v140 + 96);
        _Q6 = vsubq_f64(*(float64x2_t *)(v139 + 80), v137);
        v142 = vsubq_f64(a10, a7);
        v143 = vsubq_f64(*(float64x2_t *)(v140 + 80), v137);
        v144 = vsubq_f64(a12, a7);
        v145 = (float64x2_t)vextq_s8((int8x16_t)_Q6, (int8x16_t)v142, 8uLL);
        v142.f64[1] = _Q6.f64[0];
        v146 = (float64x2_t)vextq_s8((int8x16_t)v143, (int8x16_t)v144, 8uLL);
        v144.f64[1] = v143.f64[0];
        _Q7 = vmlsq_f64(vmulq_f64(v145, v144), v142, v146);
        v148 = vmlsq_laneq_f64(vmulq_laneq_f64(_Q6, v143, 1), v143, _Q6, 1);
        _Q5 = vmulq_f64(_Q7, _Q7);
        _Q6.f64[0] = _Q7.f64[1];
        __asm { FMLA            D5, D6, V7.D[1] }
        _Q5.f64[0] = 1.0 / sqrt(vmlad_n_f64(_Q5.f64[0], v148.f64[0], v148.f64[0]));
        *(_QWORD *)&v153 = *(_OWORD *)&vmulq_f64(v148, _Q5);
        a10 = vmulq_n_f64(_Q7, _Q5.f64[0]);
        a12 = (float64x2_t)vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL);
        v155 = (*(_QWORD *)&a10.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)&a12.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(_QWORD *)&v153 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        if (v155)
          v156 = a10.f64[0];
        else
          v156 = 1.0;
        if (v155)
          v157 = a12.f64[0];
        else
          v157 = 0.0;
        if (v155)
          v158 = v153;
        else
          v158 = 0.0;
        v159.f64[0] = v156;
        v159.f64[1] = v157;
        *((double *)v133 + 6) = v158;
        *((float64x2_t *)v133 + 2) = v159;
        v160 = vmulq_f64(v159, v137).f64[0] + v157 * v138 + v158 * a7.f64[0];
        v161 = v156 * v158;
        v162 = v157 * v158;
        v163 = v158 * v158;
        v164 = v160 * v160;
        v165 = *a2;
        v166 = v156 * v160;
        v167 = v157 * v160;
        v168 = v158 * v160;
        v169 = (float64x2_t *)(*a2 + 120 * v135);
        v170 = v169[1].f64[1] - v166;
        v169[1].f64[0] = v161 + v169[1].f64[0];
        v169[1].f64[1] = v170;
        v171 = v162 + v169[2].f64[1];
        v169[2].f64[0] = v157 * v157 + v169[2].f64[0];
        v169[2].f64[1] = v171;
        v172 = v163 + v169[3].f64[1];
        v169[3].f64[0] = v169[3].f64[0] - v167;
        v169[3].f64[1] = v172;
        v173 = v164 + v169[4].f64[1];
        v169[4].f64[0] = v169[4].f64[0] - v168;
        v169[4].f64[1] = v173;
        v174 = (float64x2_t *)(v165 + 120 * v134);
        v175 = v174[1].f64[1] - v166;
        v174[1].f64[0] = v161 + v174[1].f64[0];
        v174[1].f64[1] = v175;
        v176 = v162 + v174[2].f64[1];
        v174[2].f64[0] = v157 * v157 + v174[2].f64[0];
        v174[2].f64[1] = v176;
        v177 = v163 + v174[3].f64[1];
        v174[3].f64[0] = v174[3].f64[0] - v167;
        v174[3].f64[1] = v177;
        v178 = v164 + v174[4].f64[1];
        v174[4].f64[0] = v174[4].f64[0] - v168;
        v174[4].f64[1] = v178;
        v179 = (float64x2_t *)(v165 + 120 * *((unsigned int *)v133 + 16));
        v180 = vmulq_n_f64(v159, v156);
        *v169 = vaddq_f64(v180, *v169);
        *v174 = vaddq_f64(v180, *v174);
        *v179 = vaddq_f64(v180, *v179);
        v159.f64[0] = v179[1].f64[1];
        v179[1].f64[0] = v161 + v179[1].f64[0];
        v179[1].f64[1] = v159.f64[0] - v166;
        v181 = v179[2].f64[1];
        v179[2].f64[0] = v157 * v157 + v179[2].f64[0];
        v179[2].f64[1] = v162 + v181;
        v182 = v179[3].f64[1];
        v179[3].f64[0] = v179[3].f64[0] - v167;
        v179[3].f64[1] = v163 + v182;
        v183 = v164 + v179[4].f64[1];
        v179[4].f64[0] = v179[4].f64[0] - v168;
        v179[4].f64[1] = v183;
        ++v132;
        v130 = *a1;
        v184 = a1[1];
        v131 += 72;
      }
      while (v132 < 0x8E38E38E38E38E39 * ((v184 - *a1) >> 3));
      if (v184 != v130)
      {
        v185 = 0;
        v186 = 0;
        do
        {
          v187 = &v130[v185];
          sub_2394FA5D8(a2, *(_DWORD *)&v130[v185 + 56], *(_DWORD *)&v130[v185 + 60], (float64x2_t *)v207);
          *(_QWORD *)v187 = v188;
          sub_2394FA5D8(a2, *((_DWORD *)v187 + 15), *((_DWORD *)v187 + 16), (float64x2_t *)v207);
          *((_QWORD *)v187 + 1) = v189;
          sub_2394FA5D8(a2, *((_DWORD *)v187 + 16), *((_DWORD *)v187 + 14), (float64x2_t *)v207);
          v191 = *((double *)v187 + 1);
          if (v190 < v191)
            v191 = v190;
          if (v191 >= *(double *)v187)
            v191 = *(double *)v187;
          *((double *)v187 + 2) = v190;
          *((double *)v187 + 3) = v191;
          ++v186;
          v130 = *a1;
          v185 += 72;
        }
        while (v186 < 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3));
      }
    }
  }
  v30 = *a2;
  v31 = a2[1];
  if (*a2 != v31)
  {
    v32 = v31 - v30 - 120;
    v33 = *a2;
    if (v32 < 0x78)
      goto LABEL_191;
    v34 = v32 / 0x78 + 1;
    v33 = v30 + 120 * (v34 & 0x7FFFFFFFFFFFFFELL);
    v35 = (_QWORD *)(v30 + 224);
    v36 = v34 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v35 - 15) = 0;
      *v35 = 0;
      v35 += 30;
      v36 -= 2;
    }
    while (v36);
    if (v34 != (v34 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_191:
      do
      {
        *(_QWORD *)(v33 + 104) = 0;
        v33 += 120;
      }
      while (v33 != v31);
    }
  }
  v37 = *a1;
  v38 = a1[1];
  v39 = (v38 - *a1) / 72;
  if (v38 != *a1)
  {
    if (v39 <= 1)
      v40 = 1;
    else
      v40 = (v38 - *a1) / 72;
    v41 = (unsigned int *)(v37 + 64);
    do
    {
      v42 = v30 + 120 * *(v41 - 2);
      ++*(_DWORD *)(v42 + 108);
      v43 = v30 + 120 * *(v41 - 1);
      ++*(_DWORD *)(v43 + 108);
      v44 = *v41;
      v41 += 18;
      ++*(_DWORD *)(v30 + 120 * v44 + 108);
      --v40;
    }
    while (v40);
  }
  if (v30 != v31)
  {
    v45 = 0;
    do
    {
      v46 = *(_DWORD *)(v30 + 108);
      *(_DWORD *)(v30 + 104) = v45;
      *(_DWORD *)(v30 + 108) = 0;
      v45 += v46;
      v30 += 120;
    }
    while (v30 != v31);
  }
  v47 = ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3;
  if (3 * v39 <= v47)
  {
    if (3 * v39 < v47)
      a3[1] = (char *)*a3 + 24 * v39;
  }
  else
  {
    sub_2394FBB68(a3, 3 * v39 - v47);
    v37 = *a1;
    v38 = a1[1];
    v39 = (v38 - *a1) / 72;
  }
  if (v38 != v37)
  {
    v48 = 0;
    v49 = *a2;
    if (v39 <= 1)
      v50 = 1;
    else
      v50 = v39;
    v51 = (char *)*a3;
    v52 = (unsigned int *)(v37 + 64);
    do
    {
      v53 = v49 + 120 * *(v52 - 2);
      v54 = *(_DWORD *)(v53 + 108);
      v55 = &v51[8 * (v54 + *(_DWORD *)(v53 + 104))];
      *(_DWORD *)v55 = v48;
      *((_DWORD *)v55 + 1) = 0;
      *(_DWORD *)(v53 + 108) = v54 + 1;
      v56 = v49 + 120 * *(v52 - 1);
      v57 = *(_DWORD *)(v56 + 108);
      v58 = &v51[8 * (v57 + *(_DWORD *)(v56 + 104))];
      *(_DWORD *)v58 = v48;
      *((_DWORD *)v58 + 1) = 1;
      *(_DWORD *)(v56 + 108) = v57 + 1;
      v59 = *v52;
      v52 += 18;
      v60 = v49 + 120 * v59;
      v61 = *(_DWORD *)(v60 + 108);
      v62 = &v51[8 * (v61 + *(_DWORD *)(v60 + 104))];
      *(_DWORD *)v62 = v48;
      *((_DWORD *)v62 + 1) = 2;
      *(_DWORD *)(v60 + 108) = v61 + 1;
      ++v48;
    }
    while (v50 != v48);
  }
  if (a4)
    return;
  v213 = 0;
  v214 = 0;
  v215 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  *(_OWORD *)v207 = 0u;
  *(_OWORD *)__p = 0u;
  v209 = 1065353216;
  v64 = *a2;
  v63 = a2[1];
  if (*a2 == v63)
  {
    v207[0] = 0;
    goto LABEL_179;
  }
  v65 = v63 - v64 - 120;
  v66 = *a2;
  if (v65 < 0x78)
    goto LABEL_192;
  v67 = v65 / 0x78 + 1;
  v66 = v64 + 120 * (v67 & 0x7FFFFFFFFFFFFFELL);
  v68 = (_BYTE *)(v64 + 232);
  v69 = v67 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    *(v68 - 120) = 0;
    *v68 = 0;
    v68 += 240;
    v69 -= 2;
  }
  while (v69);
  if (v67 != (v67 & 0x7FFFFFFFFFFFFFELL))
  {
LABEL_192:
    do
    {
      *(_BYTE *)(v66 + 112) = 0;
      v66 += 120;
    }
    while (v66 != v63);
  }
  v197 = a1;
  v198 = a3;
  v70 = 0;
  v71 = 0;
  v204 = 0;
  v72 = 0;
  v73 = 0;
  v195 = a2;
  while (2)
  {
    v214 = v70;
    v211 = v72;
    if (__p[1])
    {
      v74 = __p[0];
      if (__p[0])
      {
        do
        {
          v75 = (_QWORD *)*v74;
          operator delete(v74);
          v74 = v75;
        }
        while (v75);
      }
      __p[0] = 0;
      v76 = (char *)v207[1];
      if (v207[1])
      {
        v77 = 0;
        do
          *((_QWORD *)v207[0] + (_QWORD)v77++) = 0;
        while (v76 != v77);
      }
      __p[1] = 0;
    }
    v200 = (_DWORD *)(v64 + 120 * v73 + 108);
    if (!*v200)
    {
LABEL_48:
      v64 = *a2;
      goto LABEL_49;
    }
    v78 = 0;
    v79 = 0;
    v196 = v73;
    v199 = (_DWORD *)(v64 + 120 * v73 + 104);
    v205 = v70;
    v80 = v72;
    v81 = v71;
    while (2)
    {
      v82 = 0;
      v201 = v78;
      v203 = (uint64_t)&(*v197)[72 * *((unsigned int *)*v198 + 2 * (*v199 + v78)) + 56];
      do
      {
        while (1)
        {
          v206 = 0;
          v83 = *(unsigned int *)(v203 + 4 * v82);
          v206 = *(_DWORD *)(v203 + 4 * v82);
          if (v207[1])
          {
            v84 = (uint8x8_t)vcnt_s8((int8x8_t)v207[1]);
            v84.i16[0] = vaddlv_u8(v84);
            if (v84.u32[0] > 1uLL)
            {
              v85 = v83;
              if (v207[1] <= (void *)v83)
                v85 = v83 % (unint64_t)v207[1];
            }
            else
            {
              v85 = (LODWORD(v207[1]) - 1) & v83;
            }
            v86 = (uint64_t **)*((_QWORD *)v207[0] + v85);
            if (v86)
            {
              v87 = *v86;
              if (v87)
                break;
            }
          }
LABEL_81:
          v216[0] = &v206;
          *((_DWORD *)sub_2394F126C((uint64_t)v207, &v206, (uint64_t)&unk_239EC6E98, v216) + 5) = v79;
          v90 = v205;
          if (v205 >= v204)
          {
            v202 = v79;
            v92 = v72;
            v93 = v81;
            v94 = v213;
            v95 = v205 - v213;
            v96 = (v205 - v213) >> 2;
            v97 = v96 + 1;
            if ((unint64_t)(v96 + 1) >> 62)
              sub_2394189F8();
            if ((v204 - v213) >> 1 > v97)
              v97 = (v204 - v213) >> 1;
            if ((unint64_t)(v204 - v213) >= 0x7FFFFFFFFFFFFFFCLL)
              v98 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v98 = v97;
            if (v98)
            {
              if (v98 >> 62)
                sub_239418A80();
              v99 = (char *)operator new(4 * v98);
              v90 = v205;
              v70 = &v99[4 * v96];
              *(_DWORD *)v70 = 1;
              v100 = (uint64_t)(v70 + 4);
              if (v205 != v94)
              {
LABEL_93:
                v101 = v90 - 4 - v94;
                if (v101 < 0xBC
                  || &v99[v95 - 4 - (v101 & 0xFFFFFFFFFFFFFFFCLL)] > &v99[v95 - 4]
                  || &v90[-(v101 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v90 - 4
                  || (unint64_t)(v90 - v99 - v95) < 0x20)
                {
                  v102 = v90;
                  v81 = v93;
                }
                else
                {
                  v113 = (v101 >> 2) + 1;
                  v114 = 4 * (v113 & 0x7FFFFFFFFFFFFFF8);
                  v102 = &v90[-v114];
                  v70 -= v114;
                  v115 = &v99[4 * v96 - 16];
                  v116 = v90 - 16;
                  v117 = v113 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v118 = *(_OWORD *)v116;
                    *((_OWORD *)v115 - 1) = *((_OWORD *)v116 - 1);
                    *(_OWORD *)v115 = v118;
                    v115 -= 32;
                    v116 -= 32;
                    v117 -= 8;
                  }
                  while (v117);
                  v81 = v93;
                  if (v113 == (v113 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_96:
                    v213 = v70;
                    v204 = &v99[4 * v98];
                    v215 = v204;
                    v72 = v92;
                    if (!v94)
                      goto LABEL_98;
                    goto LABEL_97;
                  }
                }
                do
                {
                  v103 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v70 - 1) = v103;
                  v70 -= 4;
                }
                while (v102 != v94);
                goto LABEL_96;
              }
            }
            else
            {
              v99 = 0;
              v70 = (char *)(4 * v96);
              *(_DWORD *)(4 * v96) = 1;
              v100 = 4 * v96 + 4;
              if (v205 != v94)
                goto LABEL_93;
            }
            v81 = v93;
            v213 = v70;
            v204 = &v99[4 * v98];
            v215 = v204;
            v72 = v92;
            if (!v94)
            {
LABEL_98:
              v79 = v202;
              v214 = (_DWORD *)v100;
              v205 = (char *)v100;
              if (v72 < v81)
                goto LABEL_83;
LABEL_99:
              v104 = (char *)v210;
              v105 = v72 - (_BYTE *)v210;
              v106 = (v72 - (_BYTE *)v210) >> 2;
              v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62)
                sub_2394189F8();
              if ((v81 - (_BYTE *)v210) >> 1 > v107)
                v107 = (v81 - (_BYTE *)v210) >> 1;
              if ((unint64_t)(v81 - (_BYTE *)v210) >= 0x7FFFFFFFFFFFFFFCLL)
                v108 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v108 = v107;
              if (v108)
              {
                if (v108 >> 62)
                  sub_239418A80();
                v109 = operator new(4 * v108);
                v80 = &v109[4 * v106];
                *v80 = v206;
                v91 = (uint64_t)(v80 + 1);
                if (v72 == v104)
                  goto LABEL_116;
              }
              else
              {
                v109 = 0;
                v80 = (_DWORD *)(4 * v106);
                *(_DWORD *)(4 * v106) = v206;
                v91 = 4 * v106 + 4;
                if (v72 == v104)
                  goto LABEL_116;
              }
              v110 = v72 - 4 - v104;
              if (v110 >= 0xBC)
              {
                if (&v109[v105 - 4 - (v110 & 0xFFFFFFFFFFFFFFFCLL)] > &v109[v105 - 4])
                {
                  v111 = v72;
                }
                else if (&v72[-(v110 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v72 - 4)
                {
                  v111 = v72;
                }
                else if ((unint64_t)(v72 - v109 - v105) >= 0x20)
                {
                  v120 = (v110 >> 2) + 1;
                  v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
                  v111 = &v72[-v121];
                  v80 = (_DWORD *)((char *)v80 - v121);
                  v122 = &v109[4 * v106 - 16];
                  v123 = (__int128 *)(v72 - 16);
                  v124 = v120 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v125 = *v123;
                    *(v122 - 1) = *(v123 - 1);
                    *v122 = v125;
                    v122 -= 2;
                    v123 -= 2;
                    v124 -= 8;
                  }
                  while (v124);
                  if (v120 == (v120 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_116:
                    v81 = &v109[4 * v108];
                    v210 = v80;
                    v212 = v81;
                    if (v104)
                      operator delete(v104);
                    goto LABEL_118;
                  }
                }
                else
                {
                  v111 = v72;
                }
              }
              else
              {
                v111 = v72;
              }
              do
              {
                v112 = *((_DWORD *)v111 - 1);
                v111 -= 4;
                *--v80 = v112;
              }
              while (v111 != v104);
              goto LABEL_116;
            }
LABEL_97:
            operator delete(v94);
            goto LABEL_98;
          }
          *(_DWORD *)v205 = 1;
          v214 = v205 + 4;
          v205 += 4;
          if (v72 >= v81)
            goto LABEL_99;
LABEL_83:
          *(_DWORD *)v72 = v206;
          v91 = (uint64_t)(v72 + 4);
LABEL_118:
          v211 = (_DWORD *)v91;
          ++v79;
          v72 = (char *)v91;
          if (++v82 == 3)
            goto LABEL_59;
        }
        if (v84.u32[0] < 2uLL)
        {
          while (1)
          {
            v89 = v87[1];
            if (v89 == v83)
            {
              if (*((_DWORD *)v87 + 4) == (_DWORD)v83)
                goto LABEL_131;
            }
            else if ((v89 & ((unint64_t)v207[1] - 1)) != v85)
            {
              goto LABEL_81;
            }
            v87 = (uint64_t *)*v87;
            if (!v87)
              goto LABEL_81;
          }
        }
        while (1)
        {
          v88 = v87[1];
          if (v88 == v83)
            break;
          if ((void *)v88 >= v207[1])
            v88 %= (unint64_t)v207[1];
          if (v88 != v85)
            goto LABEL_81;
LABEL_71:
          v87 = (uint64_t *)*v87;
          if (!v87)
            goto LABEL_81;
        }
        if (*((_DWORD *)v87 + 4) != (_DWORD)v83)
          goto LABEL_71;
LABEL_131:
        v216[0] = &v206;
        v119 = sub_2394F126C((uint64_t)v207, &v206, (uint64_t)&unk_239EC6E98, v216);
        ++*(_DWORD *)&v70[4 * *((unsigned int *)v119 + 5)];
        ++v82;
      }
      while (v82 != 3);
LABEL_59:
      v78 = v201 + 1;
      if ((v201 + 1) < *v200)
        continue;
      break;
    }
    v71 = v81;
    v70 = v213;
    a2 = v195;
    v64 = *v195;
    if (v205 != v213)
    {
      v126 = 0;
      v127 = (v205 - v213) >> 2;
      v72 = (char *)v210;
      if (v127 <= 1)
        v127 = 1;
      v73 = v196;
      do
      {
        if (*(_DWORD *)&v70[4 * v126] == 1)
          *(_BYTE *)(v64 + 120 * *(unsigned int *)&v72[4 * v126] + 112) = 1;
        ++v126;
      }
      while (v127 != v126);
      goto LABEL_48;
    }
    v72 = (char *)v80;
    v73 = v196;
LABEL_49:
    if (++v73 < 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - v64) >> 3))
      continue;
    break;
  }
  v192 = __p[0];
  if (__p[0])
  {
    do
    {
      v193 = (_QWORD *)*v192;
      operator delete(v192);
      v192 = v193;
    }
    while (v193);
  }
  v194 = v207[0];
  v207[0] = 0;
  if (v194)
    operator delete(v194);
LABEL_179:
  if (v210)
    operator delete(v210);
  if (v213)
    operator delete(v213);
}

void sub_2394FA560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,_QWORD *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;

  v29 = __p;
  if (__p)
  {
    do
    {
      v30 = (_QWORD *)*v29;
      operator delete(v29);
      v29 = v30;
    }
    while (v30);
  }
  if (a21)
  {
    operator delete(a21);
    v31 = a26;
    if (!a26)
    {
LABEL_5:
      v32 = *(void **)(v27 - 128);
      if (!v32)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    v31 = a26;
    if (!a26)
      goto LABEL_5;
  }
  operator delete(v31);
  v32 = *(void **)(v27 - 128);
  if (!v32)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v27 - 120) = v32;
  operator delete(v32);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2394FA5D8(uint64_t *result, unsigned int a2, unsigned int a3, float64x2_t *a4)
{
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char v28;
  double v29;
  double v30;
  float64x2_t *v31;
  float64x2_t *v32;
  float64x2_t v33;
  float64x2_t *v35;
  float64x2_t *v36;
  float64x2_t v37;
  double v44;
  double v49;
  double v50;
  double v53;
  double v57;
  double v58;
  double v59;
  double v60;
  float64x2_t v61;
  double v62;
  float64x2_t v63;
  double v65;
  double v66;

  v6 = *result;
  v7 = *result + 120 * a2;
  v8 = (double *)(*result + 120 * a3);
  v9 = *(double *)v7 + *v8;
  v10 = *(double *)(v7 + 8) + v8[1];
  v11 = v8[3];
  v12 = *(double *)(v7 + 16) + v8[2];
  v13 = *(double *)(v7 + 32) + v8[4];
  v14 = *(double *)(v7 + 40) + v8[5];
  v15 = v8[6];
  v16 = *(double *)(v7 + 56) + v8[7];
  v18 = v8[8];
  v17 = v8[9];
  if (*(_BYTE *)(v7 + 112))
    v19 = *(_BYTE *)(v6 + 120 * a3 + 112) == 0;
  else
    v19 = 1;
  v20 = *(double *)(v7 + 24) + v11;
  v21 = *(double *)(v7 + 48) + v15;
  v22 = *(double *)(v7 + 64) + v18;
  v23 = *(double *)(v7 + 72) + v17;
  v24 = -(v12 * v13);
  v25 = -(v10 * v10);
  v26 = v10 * v12 * v14 + v9 * v13 * v16 + v10 * v14 * v12 + v24 * v12 + -(v9 * v14) * v14 + v25 * v16;
  if (v26 == 0.0)
    goto LABEL_11;
  v27 = 0.0 - v26;
  if (v26 >= 0.0)
    v27 = v10 * v12 * v14 + v9 * v13 * v16 + v10 * v14 * v12 + v24 * v12 + -(v9 * v14) * v14 + v25 * v16;
  v28 = !v19;
  if (v27 <= 1.0e-12)
    v28 = 1;
  if ((v28 & 1) != 0)
  {
LABEL_11:
    v31 = (float64x2_t *)(v6 + 120 * a2);
    v33 = v31[5];
    v32 = v31 + 5;
    _Q20 = v33;
    v35 = (float64x2_t *)(v6 + 120 * a3);
    v37 = v35[5];
    v36 = v35 + 5;
    _V21.D[1] = v37.f64[1];
    v4.f64[0] = v32[1].f64[0];
    v5.f64[0] = v36[1].f64[0];
    __asm { FMOV            V24.2D, #0.5 }
    _Q5 = vmulq_f64(vaddq_f64(_Q20, v37), _Q24);
    v44 = vmulq_f64(vaddq_f64(v4, v5), _Q24).f64[0];
    _D25 = vmuld_lane_f64(v13, _Q20, 1);
    __asm { FMLA            D6, D25, V20.D[1] }
    _D18 = v21 + v21;
    __asm { FMLA            D4, D18, V20.D[1] }
    v49 = v22 + v22;
    v50 = v23 + _D4 + v16 * v4.f64[0] * v4.f64[0] + v49 * v4.f64[0];
    _Q20.f64[0] = vmuld_lane_f64(v13, v37, 1);
    __asm
    {
      FMLA            D6, D20, V21.D[1]
      FMLA            D6, D18, V21.D[1]
    }
    v53 = v23 + _D6 + v16 * v5.f64[0] * v5.f64[0] + v49 * v5.f64[0];
    _D1 = vmuld_lane_f64(v13, _Q5, 1);
    __asm
    {
      FMLA            D7, D1, V5.D[1]
      FMLA            D7, D18, V5.D[1]
    }
    v57 = vmlad_n_f64(vmlad_n_f64(_D7, v16 * v44, v44), v49, v44);
    v58 = v23 + v57;
    if (v23 + v57 >= v53)
      v59 = v53;
    else
      v59 = v23 + v57;
    if (v59 >= v50)
      v59 = v50;
    if (v50 == v59)
      goto LABEL_20;
    v60 = v50 - v59;
    if (v50 < v59)
      v60 = v59 - v50;
    if (v60 <= 1.0e-12)
    {
LABEL_20:
      v61 = *v32;
      a4[1].f64[0] = v32[1].f64[0];
      *a4 = v61;
    }
    if (v53 == v59)
      goto LABEL_25;
    v62 = v53 - v59;
    if (v53 < v59)
      v62 = v59 - v53;
    if (v62 <= 1.0e-12)
    {
LABEL_25:
      v63 = *v36;
      a4[1].f64[0] = v36[1].f64[0];
      *a4 = v63;
    }
    _NF = v58 < v59;
    if (v58 == v59)
      goto LABEL_30;
    v65 = v58 - v59;
    v66 = v59 - v58;
    if (!_NF)
      v66 = v65;
    if (v66 <= 1.0e-12)
    {
LABEL_30:
      a4[1].f64[0] = v44;
      *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
      *a4 = _Q5;
    }
  }
  else
  {
    v29 = -(v20 * v14);
    v30 = v21 * -v9;
    a4->f64[0] = -1.0
               / v26
               * (v20 * v13 * v16 + v10 * v14 * v22 + v12 * v21 * v14 + v29 * v14 + v21 * -v10 * v16 + v24 * v22);
    a4->f64[1] = 1.0
               / v26
               * (v10 * v20 * v16 + v9 * v14 * v22 + v12 * v21 * v12 + v29 * v12 + v30 * v16 + v10 * -v12 * v22);
    a4[1].f64[0] = -1.0
                 / v26
                 * (v10 * v20 * v14 + v9 * v13 * v22 + v10 * v21 * v12 + -(v20 * v13) * v12 + v30 * v14 + v25 * v22);
  }
  return result;
}

void sub_2394FA974(_QWORD *a1, uint64_t *a2, char **a3, int a4, uint64_t a5, _QWORD *a6, _DWORD *a7)
{
  _DWORD *v7;
  _QWORD *v8;
  unint64_t i;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  float64x2_t v46;

  if (*(_DWORD *)(a5 + 108))
  {
    v7 = a7;
    v8 = a6;
    for (i = 0; i < *(unsigned int *)(a5 + 108); ++i)
    {
      v13 = (*(_DWORD *)(a5 + 104) + i);
      v14 = &(*a3)[8 * v13];
      v15 = *a1 + 72 * *(unsigned int *)v14;
      if (!*(_BYTE *)(v15 + 68))
      {
        if (((*(_QWORD *)(*v8 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
        {
          v16 = *a1 + 72 * *(unsigned int *)v14;
          *(_DWORD *)(v16 + 56 + 4 * *(unsigned int *)&(*a3)[8 * v13 + 4]) = a4;
          *(_BYTE *)(v16 + 69) = 1;
          sub_2394FA5D8(a2, *(_DWORD *)(v16 + 56), *(_DWORD *)(v16 + 60), &v46);
          *(_QWORD *)v15 = v17;
          sub_2394FA5D8(a2, *(_DWORD *)(v16 + 60), *(_DWORD *)(v16 + 64), &v46);
          *(_QWORD *)(v15 + 8) = v18;
          sub_2394FA5D8(a2, *(_DWORD *)(v16 + 64), *(_DWORD *)(v16 + 56), &v46);
          v20 = *(double *)(v15 + 8);
          if (v19 < v20)
            v20 = v19;
          if (v20 >= *(double *)v15)
            v20 = *(double *)v15;
          *(double *)(v15 + 16) = v19;
          *(double *)(v15 + 24) = v20;
          v22 = a3[1];
          v21 = (unint64_t)a3[2];
          if ((unint64_t)v22 < v21)
          {
            *(_QWORD *)v22 = *(_QWORD *)v14;
            v23 = (uint64_t)(v22 + 8);
LABEL_35:
            a3[1] = (char *)v23;
            continue;
          }
          v24 = *a3;
          v25 = v22 - *a3;
          v26 = v25 >> 3;
          v27 = (v25 >> 3) + 1;
          if (v27 >> 61)
            sub_2394189F8();
          v28 = v21 - (_QWORD)v24;
          if (v28 >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            if (v29 >> 61)
              sub_239418A80();
            v30 = operator new(8 * v29);
            v31 = &v30[8 * v26];
            *(_QWORD *)v31 = *(_QWORD *)v14;
            v23 = (uint64_t)(v31 + 8);
            if (v22 != v24)
            {
LABEL_22:
              v32 = v22 - 8 - v24;
              if (v32 < 0x58)
              {
                v8 = a6;
                goto LABEL_31;
              }
              v33 = v22 - &v30[v25];
              v8 = a6;
              if (v33 < 0x20)
                goto LABEL_41;
              v34 = (v32 >> 3) + 1;
              v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
              v36 = &v22[-v35];
              v31 -= v35;
              v37 = &v30[8 * v26 - 16];
              v38 = v22 - 16;
              v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v40 = *(_OWORD *)v38;
                *(v37 - 1) = *((_OWORD *)v38 - 1);
                *v37 = v40;
                v37 -= 2;
                v38 -= 32;
                v39 -= 4;
              }
              while (v39);
              v22 = v36;
              if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_41:
                do
                {
LABEL_31:
                  v41 = *((_QWORD *)v22 - 1);
                  v22 -= 8;
                  *((_QWORD *)v31 - 1) = v41;
                  v31 -= 8;
                }
                while (v22 != v24);
              }
              v22 = *a3;
              *a3 = v31;
              a3[1] = (char *)v23;
              a3[2] = &v30[8 * v29];
              if (v22)
LABEL_33:
                operator delete(v22);
LABEL_34:
              v7 = a7;
              goto LABEL_35;
            }
          }
          else
          {
            v30 = 0;
            v31 = (char *)(8 * v26);
            *(_QWORD *)(8 * v26) = *(_QWORD *)v14;
            v23 = 8 * v26 + 8;
            if (v22 != v24)
              goto LABEL_22;
          }
          v8 = a6;
          *a3 = v31;
          a3[1] = (char *)v23;
          a3[2] = &v30[8 * v29];
          if (v22)
            goto LABEL_33;
          goto LABEL_34;
        }
        *(_BYTE *)(v15 + 68) = 1;
        ++*v7;
      }
    }
  }
}

void sub_2394FAC3C(char **a1, char **a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  char *v18;
  int v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  BOOL v25;
  char *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  int64_t v34;
  unint64_t v35;
  _DWORD *v36;
  int v37;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = v5 - v4 - 120;
    v7 = *a2;
    if (v6 < 0x78)
      goto LABEL_36;
    v8 = v6 / 0x78 + 1;
    v7 = &v4[120 * (v8 & 0x7FFFFFFFFFFFFFELL)];
    v9 = v4 + 228;
    v10 = v8 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      *(v9 - 30) = 0;
      *v9 = 0;
      v9 += 60;
      v10 -= 2;
    }
    while (v10);
    if (v8 != (v8 & 0x7FFFFFFFFFFFFFELL))
    {
LABEL_36:
      do
      {
        *((_DWORD *)v7 + 27) = 0;
        v7 += 120;
      }
      while (v7 != v5);
    }
  }
  v11 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    v14 = 0;
    v25 = 0x8E38E38E38E38E39 * ((v12 - *a1) >> 3) == 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      v18 = &v11[v13];
      if (!v11[v13 + 68])
      {
        v19 = v14;
        v20 = &v11[72 * v14];
        v21 = *((_OWORD *)v18 + 1);
        *(_OWORD *)v20 = *(_OWORD *)v18;
        *((_OWORD *)v20 + 1) = v21;
        v22 = *((_OWORD *)v18 + 2);
        *((_QWORD *)v20 + 6) = *((_QWORD *)v18 + 6);
        *((_OWORD *)v20 + 2) = v22;
        if (v15 != v14)
        {
          v23 = *(_QWORD *)&v11[v13 + 56];
          v24 = &v11[72 * v14];
          *((_DWORD *)v24 + 16) = *(_DWORD *)&v11[v13 + 64];
          *((_QWORD *)v24 + 7) = v23;
        }
        ++v14;
        *(_WORD *)&v11[72 * v19 + 68] = *((_WORD *)v18 + 34);
        v16 = (unsigned int *)&v11[v13];
        v4 = *a2;
        *(_DWORD *)&(*a2)[120 * v16[14] + 108] = 1;
        *(_DWORD *)&v4[120 * v16[15] + 108] = 1;
        *(_DWORD *)&v4[120 * v16[16] + 108] = 1;
        v11 = *a1;
        v12 = a1[1];
      }
      ++v15;
      v17 = 0x8E38E38E38E38E39 * ((v12 - v11) >> 3);
      v13 += 72;
    }
    while (v15 < v17);
    v12 = v11;
    v25 = v14 >= v17;
    if (v14 > v17)
    {
      sub_2394FB964(a1, v14 - v17);
      v4 = *a2;
      goto LABEL_19;
    }
  }
  if (!v25)
    a1[1] = &v12[72 * v14];
LABEL_19:
  v26 = a2[1];
  if (v26 == v4)
  {
    v28 = 0;
    v30 = 0xEEEEEEEEEEEEEEEFLL * ((v26 - v4) >> 3);
  }
  else
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    do
    {
      v31 = &v4[v27];
      if (*(_DWORD *)&v4[v27 + 108])
      {
        *((_DWORD *)v31 + 26) = v28;
        v32 = &v4[120 * v28];
        v33 = *((_OWORD *)v31 + 5);
        *((_QWORD *)v32 + 12) = *((_QWORD *)v31 + 12);
        *((_OWORD *)v32 + 5) = v33;
        ++v28;
        v4 = *a2;
        v26 = a2[1];
      }
      ++v29;
      v30 = 0xEEEEEEEEEEEEEEEFLL * ((v26 - v4) >> 3);
      v27 += 120;
    }
    while (v29 < v30);
  }
  v34 = a1[1] - *a1;
  if (v34)
  {
    v35 = v34 / 72;
    if (v35 <= 1)
      v35 = 1;
    v36 = *a1 + 64;
    do
    {
      v37 = *(v36 - 1);
      *(v36 - 2) = *(_DWORD *)&v4[120 * *(v36 - 2) + 104];
      *(v36 - 1) = *(_DWORD *)&v4[120 * v37 + 104];
      *v36 = *(_DWORD *)&v4[120 * *v36 + 104];
      v36 += 18;
      --v35;
    }
    while (v35);
  }
  if (v28 <= v30)
  {
    if (v28 < v30)
      a2[1] = &v4[120 * v28];
  }
  else
  {
    sub_2394FBD08(a2, v28 - v30);
  }
}

void sub_2394FAF10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float32x2_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;

  v7 = *a2;
  v6 = a2[1];
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((v6 - *a2) >> 3);
  v9 = *(float32x2_t **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v9) >> 2) < v8)
  {
    if (v8 > 0x1555555555555555)
      sub_2394189F8();
    v10 = (char *)operator new(12 * v8);
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = &v10[12 * v8];
    if (v9)
      operator delete(v9);
  }
  if (v6 != v7)
  {
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    v12 = 80;
    do
    {
      sub_2394FB1F8((float32x2_t **)a3, (float64x2_t *)(*a2 + v12));
      v12 += 120;
      --v11;
    }
    while (v11);
  }
  v14 = *a1;
  v13 = a1[1];
  v15 = 0x8E38E38E38E38E39 * ((v13 - *a1) >> 3);
  v16 = (_QWORD *)(a3 + 24);
  v17 = *(void **)(a3 + 24);
  *(_QWORD *)(a3 + 32) = v17;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - (_QWORD)v17) >> 2) < v15)
  {
    if (v15 > 0x1555555555555555)
      goto LABEL_38;
    v18 = (char *)operator new(12 * v15);
    *(_QWORD *)(a3 + 24) = v18;
    *(_QWORD *)(a3 + 32) = v18;
    *(_QWORD *)(a3 + 40) = &v18[12 * v15];
    if (v17)
      operator delete(v17);
  }
  if (v13 != v14)
  {
    v19 = 0;
    if (v15 <= 1)
      v15 = 1;
    v20 = *(_DWORD **)(a3 + 32);
    while (1)
    {
      while (1)
      {
        v21 = (_DWORD *)(*a1 + 72 * v19 + 56);
        v22 = *(_QWORD *)(a3 + 40);
        if ((unint64_t)v20 >= v22)
          break;
        *v20 = *v21;
        v20[1] = v21[1];
        v20[2] = v21[2];
        *(_QWORD *)(a3 + 32) = v20 + 3;
        ++v19;
        v20 += 3;
        if (v19 == v15)
          return;
      }
      v23 = (_DWORD *)*v16;
      v24 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v20 - *v16) >> 2);
      v25 = v24 + 1;
      if (v24 + 1 > 0x1555555555555555)
        break;
      v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (_QWORD)v23) >> 2);
      if (2 * v26 > v25)
        v25 = 2 * v26;
      if (v26 >= 0xAAAAAAAAAAAAAAALL)
        v27 = 0x1555555555555555;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 > 0x1555555555555555)
          sub_239418A80();
        v28 = (char *)operator new(12 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[12 * v24];
      *(_DWORD *)v29 = *v21;
      *((_DWORD *)v29 + 1) = v21[1];
      *((_DWORD *)v29 + 2) = v21[2];
      v30 = v29;
      if (v20 != v23)
      {
        do
        {
          v31 = *(_QWORD *)(v20 - 3);
          v20 -= 3;
          v32 = v20[2];
          *(_QWORD *)(v30 - 12) = v31;
          v30 -= 12;
          *((_DWORD *)v30 + 2) = v32;
        }
        while (v20 != v23);
        v20 = (_DWORD *)*v16;
      }
      v33 = v29 + 12;
      *(_QWORD *)(a3 + 24) = v30;
      *(_QWORD *)(a3 + 32) = v29 + 12;
      *(_QWORD *)(a3 + 40) = &v28[12 * v27];
      if (v20)
        operator delete(v20);
      *(_QWORD *)(a3 + 32) = v33;
      ++v19;
      v20 = v33;
      if (v19 == v15)
        return;
    }
LABEL_38:
    sub_2394189F8();
  }
}

char *sub_2394FB1F8(float32x2_t **a1, float64x2_t *a2)
{
  unint64_t v4;
  float32x2_t *v5;
  float32_t v6;
  float32x2_t *v7;
  float32x2_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  float32x2_t *v14;
  float32_t v15;
  float32x2_t v16;
  __int32 v17;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)*a1) >> 2);
    v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x1555555555555555)
        sub_239418A80();
      v13 = (char *)operator new(12 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = (float32x2_t *)&v13[12 * v9];
    *v14 = vcvt_f32_f64(*a2);
    v15 = a2[1].f64[0];
    v14[1].f32[0] = v15;
    v7 = (float32x2_t *)((char *)v14 + 12);
    if (v5 != v8)
    {
      do
      {
        v16 = *(float32x2_t *)((char *)v5 - 12);
        v5 = (float32x2_t *)((char *)v5 - 12);
        v17 = v5[1].i32[0];
        *(float32x2_t *)((char *)v14 - 12) = v16;
        v14 = (float32x2_t *)((char *)v14 - 12);
        v14[1].i32[0] = v17;
      }
      while (v5 != v8);
      v5 = *a1;
    }
    *a1 = v14;
    a1[1] = v7;
    a1[2] = (float32x2_t *)&v13[12 * v12];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = vcvt_f32_f64(*a2);
    v6 = a2[1].f64[0];
    v5[1].f32[0] = v6;
    v7 = (float32x2_t *)((char *)v5 + 12);
  }
  a1[1] = v7;
  return (char *)&v7[-2] + 4;
}

void sub_2394FB33C(uint64_t *a1, uint64_t a2, char **a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  float *v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  char v61[56];
  int v62;
  int v63;
  int v64;
  char v65;

  v7 = *a1;
  v6 = a1[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 2);
  v9 = a1[4];
  v60 = a1[3];
  v10 = *a3;
  if (0xEEEEEEEEEEEEEEEFLL * ((a3[2] - *a3) >> 3) < v8)
  {
    if (v8 > 0x222222222222222)
      goto LABEL_42;
    v11 = a3[1];
    v12 = (char *)operator new(40 * ((v6 - *a1) >> 2));
    v13 = &v12[v11 - v10];
    v14 = v13;
    if (v11 != v10)
    {
      v15 = &v12[v11 - v10];
      do
      {
        v14 = v15 - 120;
        *(_OWORD *)(v15 - 120) = *(_OWORD *)(v11 - 120);
        v16 = *(_OWORD *)(v11 - 104);
        v17 = *(_OWORD *)(v11 - 88);
        v18 = *(_OWORD *)(v11 - 72);
        *(_OWORD *)(v15 - 56) = *(_OWORD *)(v11 - 56);
        *(_OWORD *)(v15 - 72) = v18;
        *(_OWORD *)(v15 - 88) = v17;
        *(_OWORD *)(v15 - 104) = v16;
        v19 = *(_OWORD *)(v11 - 40);
        *((_QWORD *)v15 - 3) = *((_QWORD *)v11 - 3);
        *(_OWORD *)(v15 - 40) = v19;
        v20 = *((_QWORD *)v11 - 2);
        *(v15 - 8) = *(v11 - 8);
        *((_QWORD *)v15 - 2) = v20;
        v11 -= 120;
        v15 -= 120;
      }
      while (v11 != v10);
    }
    *a3 = v14;
    a3[1] = v13;
    a3[2] = &v12[120 * v8];
    if (v10)
      operator delete(v10);
  }
  v59 = v9;
  if (v6 != v7)
  {
    v21 = 0;
    if (v8 <= 1)
      v22 = 1;
    else
      v22 = v8;
    v23 = a3[1];
    while (1)
    {
      while (1)
      {
        v24 = (float *)(*a1 + 12 * v21);
        v25 = *v24;
        v26 = v24[1];
        v27 = v24[2];
        v28 = (unint64_t)a3[2];
        if ((unint64_t)v23 >= v28)
          break;
        *((_OWORD *)v23 + 3) = 0u;
        *((_OWORD *)v23 + 4) = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        *((_OWORD *)v23 + 2) = 0u;
        *(_OWORD *)v23 = 0u;
        *((double *)v23 + 10) = v25;
        *((double *)v23 + 11) = v26;
        *((double *)v23 + 12) = v27;
        a3[1] = v23 + 120;
        ++v21;
        v23 += 120;
        if (v21 == v22)
          goto LABEL_28;
      }
      v29 = *a3;
      v30 = 0xEEEEEEEEEEEEEEEFLL * ((v23 - *a3) >> 3);
      v31 = v30 + 1;
      if (v30 + 1 > 0x222222222222222)
        break;
      v32 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v28 - (_QWORD)v29) >> 3);
      if (2 * v32 > v31)
        v31 = 2 * v32;
      if (v32 >= 0x111111111111111)
        v33 = 0x222222222222222;
      else
        v33 = v31;
      if (v33 > 0x222222222222222)
        sub_239418A80();
      v34 = 120 * v33;
      v35 = (char *)operator new(120 * v33);
      v36 = &v35[120 * v30];
      *(_OWORD *)v36 = 0u;
      *((_OWORD *)v36 + 1) = 0u;
      *((_OWORD *)v36 + 2) = 0u;
      *((_OWORD *)v36 + 3) = 0u;
      *((_OWORD *)v36 + 4) = 0u;
      *((double *)v36 + 10) = v25;
      *((double *)v36 + 11) = v26;
      *((double *)v36 + 12) = v27;
      v37 = v36;
      if (v23 != v29)
      {
        do
        {
          *(_OWORD *)(v37 - 120) = *(_OWORD *)(v23 - 120);
          v38 = *(_OWORD *)(v23 - 104);
          v39 = *(_OWORD *)(v23 - 88);
          v40 = *(_OWORD *)(v23 - 72);
          *(_OWORD *)(v37 - 56) = *(_OWORD *)(v23 - 56);
          *(_OWORD *)(v37 - 72) = v40;
          *(_OWORD *)(v37 - 88) = v39;
          *(_OWORD *)(v37 - 104) = v38;
          v41 = *(_OWORD *)(v23 - 40);
          *((_QWORD *)v37 - 3) = *((_QWORD *)v23 - 3);
          *(_OWORD *)(v37 - 40) = v41;
          v42 = *((_QWORD *)v23 - 2);
          *(v37 - 8) = *(v23 - 8);
          *((_QWORD *)v37 - 2) = v42;
          v37 -= 120;
          v23 -= 120;
        }
        while (v23 != v29);
        v23 = *a3;
      }
      v43 = &v35[v34];
      v44 = v36 + 120;
      *a3 = v37;
      a3[1] = v36 + 120;
      a3[2] = v43;
      if (v23)
        operator delete(v23);
      a3[1] = v44;
      ++v21;
      v23 = v44;
      if (v21 == v22)
        goto LABEL_28;
    }
LABEL_42:
    sub_2394189F8();
  }
LABEL_28:
  v45 = (v59 - v60) / 12;
  v46 = *(char **)a2;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3) < v45)
  {
    if (v45 >= 0x38E38E38E38E38FLL)
      sub_2394189F8();
    v47 = *(char **)(a2 + 8);
    v48 = (char *)operator new(72 * v45);
    v49 = &v48[v47 - v46];
    v50 = v49;
    if (v47 != v46)
    {
      v51 = 0;
      do
      {
        v52 = &v49[v51];
        v53 = *(_OWORD *)&v47[v51 - 72];
        *(_OWORD *)(v52 - 56) = *(_OWORD *)&v47[v51 - 56];
        *(_OWORD *)(v52 - 72) = v53;
        v54 = *(_OWORD *)&v47[v51 - 40];
        *((_QWORD *)v52 - 3) = *(_QWORD *)&v47[v51 - 24];
        *(_OWORD *)(v52 - 40) = v54;
        v55 = *(_QWORD *)&v47[v51 - 16];
        *((_DWORD *)v52 - 2) = *(_DWORD *)&v47[v51 - 8];
        *((_QWORD *)v52 - 2) = v55;
        *((_WORD *)v52 - 2) = *(_WORD *)&v47[v51 - 4];
        v51 -= 72;
      }
      while (&v47[v51] != v46);
      v50 = &v49[v51];
    }
    *(_QWORD *)a2 = v50;
    *(_QWORD *)(a2 + 8) = v49;
    *(_QWORD *)(a2 + 16) = &v48[72 * v45];
    if (v46)
      operator delete(v46);
  }
  if (v59 != v60)
  {
    v56 = 0;
    if (v45 <= 1)
      v57 = 1;
    else
      v57 = (v59 - v60) / 12;
    do
    {
      v58 = (int *)(a1[3] + 12 * v56);
      v62 = *v58;
      v63 = v58[1];
      v64 = v58[2];
      v65 = 0;
      sub_2394FB7AC((char **)a2, (uint64_t)v61);
      ++v56;
    }
    while (v57 != v56);
  }
}

char *sub_2394FB7AC(char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x38E38E38E38E38ELL)
      sub_2394189F8();
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (_QWORD)v10) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x1C71C71C71C71C7)
      v14 = 0x38E38E38E38E38ELL;
    else
      v14 = v12;
    if (v14 > 0x38E38E38E38E38ELL)
      sub_239418A80();
    v15 = 72 * v14;
    v16 = (char *)operator new(72 * v14);
    v17 = *(_OWORD *)(a2 + 16);
    v18 = &v16[72 * v11];
    *(_OWORD *)v18 = *(_OWORD *)a2;
    *((_OWORD *)v18 + 1) = v17;
    *((_OWORD *)v18 + 2) = *(_OWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a2 + 56);
    *((_QWORD *)v18 + 6) = *(_QWORD *)(a2 + 48);
    *((_QWORD *)v18 + 7) = v19;
    *((_DWORD *)v18 + 16) = *(_DWORD *)(a2 + 64);
    *((_WORD *)v18 + 34) = *(_WORD *)(a2 + 68);
    v9 = v18 + 72;
    if (v5 != v10)
    {
      v20 = 0;
      do
      {
        v21 = &v18[v20];
        v22 = *(_OWORD *)&v5[v20 - 72];
        *(_OWORD *)(v21 - 56) = *(_OWORD *)&v5[v20 - 56];
        *(_OWORD *)(v21 - 72) = v22;
        v23 = *(_OWORD *)&v5[v20 - 40];
        *((_QWORD *)v21 - 3) = *(_QWORD *)&v5[v20 - 24];
        *(_OWORD *)(v21 - 40) = v23;
        v24 = *(_QWORD *)&v5[v20 - 16];
        *((_DWORD *)v21 - 2) = *(_DWORD *)&v5[v20 - 8];
        *((_QWORD *)v21 - 2) = v24;
        *((_WORD *)v21 - 2) = *(_WORD *)&v5[v20 - 4];
        v20 -= 72;
      }
      while (&v5[v20] != v10);
      v18 += v20;
    }
    *a1 = v18;
    a1[1] = v9;
    a1[2] = &v16[v15];
    if (v10)
      operator delete(v10);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *((_OWORD *)v5 + 1) = v6;
    v7 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v5 + 2) = v7;
    v8 = *(_QWORD *)(a2 + 56);
    *((_DWORD *)v5 + 16) = *(_DWORD *)(a2 + 64);
    *((_QWORD *)v5 + 7) = v8;
    *((_WORD *)v5 + 34) = *(_WORD *)(a2 + 68);
    v9 = v5 + 72;
  }
  a1[1] = v9;
  return v9 - 72;
}

void sub_2394FB964(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = a1[1];
  v4 = a1[2];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0x8E38E38E38E38E39 * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL)
      sub_2394189F8();
    v9 = 0x8E38E38E38E38E39 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL)
        sub_239418A80();
      v11 = (char *)operator new(72 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[72 * v7];
    v14 = &v11[72 * v10];
    v15 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = *(_OWORD *)&v5[v17 - 72];
        *(_OWORD *)(v18 - 56) = *(_OWORD *)&v5[v17 - 56];
        *(_OWORD *)(v18 - 72) = v19;
        v20 = *(_OWORD *)&v5[v17 - 40];
        *((_QWORD *)v18 - 3) = *(_QWORD *)&v5[v17 - 24];
        *(_OWORD *)(v18 - 40) = v20;
        v21 = *(_QWORD *)&v5[v17 - 16];
        *((_DWORD *)v18 - 2) = *(_DWORD *)&v5[v17 - 8];
        *((_QWORD *)v18 - 2) = v21;
        *((_WORD *)v18 - 2) = *(_WORD *)&v5[v17 - 4];
        v17 -= 72;
      }
      while (&v5[v17] != v6);
      v5 = *a1;
      v13 += v17;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void sub_2394FBB68(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_2394189F8();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_239418A80();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_2394FBD08(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = a1[1];
  v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 120 * ((120 * a2 - 120) / 0x78) + 120;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x222222222222222)
      sub_2394189F8();
    v9 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x111111111111111)
      v10 = 0x222222222222222;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x222222222222222)
        sub_239418A80();
      v11 = (char *)operator new(120 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[120 * v7];
    v14 = &v11[120 * v10];
    v15 = 120 * ((120 * a2 - 120) / 0x78) + 120;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        *(_OWORD *)(v13 - 120) = *(_OWORD *)(v5 - 120);
        v17 = *(_OWORD *)(v5 - 104);
        v18 = *(_OWORD *)(v5 - 88);
        v19 = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v13 - 56) = *(_OWORD *)(v5 - 56);
        *(_OWORD *)(v13 - 72) = v19;
        *(_OWORD *)(v13 - 88) = v18;
        *(_OWORD *)(v13 - 104) = v17;
        v20 = *(_OWORD *)(v5 - 40);
        *((_QWORD *)v13 - 3) = *((_QWORD *)v5 - 3);
        *(_OWORD *)(v13 - 40) = v20;
        v21 = *((_QWORD *)v5 - 2);
        *(v13 - 8) = *(v5 - 8);
        *((_QWORD *)v13 - 2) = v21;
        v13 -= 120;
        v5 -= 120;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_2394FBEE0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  void **v15;
  void **v16;
  char **v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  char v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  char v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  int v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char v76;
  unsigned int v77;
  char v78;
  char v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  _QWORD *v84;
  int v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  char v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  int v107;
  int v108;
  void **v109;
  _QWORD *v110;
  BOOL v111;
  BOOL v112;
  BOOL v113;
  _QWORD v114[2];

  v1 = 0;
  v114[1] = *MEMORY[0x24BDAC8D0];
  v114[0] = 0x100000000;
  v101 = result + 5;
  v2 = result[3];
  v105 = result;
  do
  {
    v3 = *((_DWORD *)v114 + v1);
    v4 = (char)v3;
    v5 = *(unsigned int *)(v2 + 4 * (char)v3 + 128);
    if (((*(_QWORD *)(*(_QWORD *)(*result + 72) + ((v5 >> 3) & 0x1FFFFFF8)) >> v5) & 1) == 0)
    {
      v10 = result[1];
      v11 = *(_DWORD *)(v2 + 4 * (char)v3 + 136);
      v12 = *(_QWORD *)(v10 + 24);
      v13 = (_DWORD *)(v12 + 12 * v11);
      if (*v13 == (_DWORD)v5)
        v14 = 1;
      else
        v14 = 2 * (v13[1] == (_DWORD)v5);
      v67 = *(char *)(v2 + (char)v3 + 144);
      if (v67 == v14)
        v68 = 1;
      else
        v68 = 2;
      v69 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 24 * v11 + 8 * ((__int16)(v68 + v67) % 3));
      v113 = v67 != v14;
      v70 = *(_DWORD *)(v69 + 136) == v11;
      v71 = *(unsigned int *)(v69 + 136 + 4 * v70);
      v72 = 1 - v3;
      if (v71 == *(_DWORD *)(v2 + 4 * v72 + 136))
        goto LABEL_4;
      v102 = v1;
      v73 = v72;
      v74 = v12 + 12 * v71;
      v75 = *(char *)(v69 + v70 + 144);
      v76 = *(_BYTE *)(v69 + v70 + 144);
      v77 = v68
          + v75
          - 3
          * (((21846 * (__int16)(v68 + v75)) >> 16) + ((21846 * (__int16)(v68 + v75)) >> 31));
      v78 = 3 - v75 - v77;
      if (*(_DWORD *)(v74 + 4 * v78) == v13[(char)(3
                                                    - v67
                                                    - (v68
                                                     + v67
                                                     - 3
                                                     * (((21846 * (v68 + v67)) >> 16)
                                                      + (21846 * (v68 + v67) < 0))))])
        v79 = v77;
      else
        v79 = v78;
      v80 = &v101[3 * v4];
      v81 = v80 + 2;
      v82 = v80 + 1;
      v83 = (char *)v80[1];
      v84 = v105;
      v85 = v68;
      v108 = v68;
      v104 = v73;
      v110 = v80;
      while ((unint64_t)v83 < *v81)
      {
        *(_QWORD *)v83 = v10;
        *((_DWORD *)v83 + 2) = v71;
        v83[12] = v113;
        v83[13] = v76;
        v86 = v83 + 16;
        v83[14] = v79;
LABEL_88:
        *v82 = v86;
        v87 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 24 * v71 + 8 * v79);
        v88 = *(_QWORD *)(v10 + 24);
        v89 = *(_DWORD *)(v88 + 12 * v71 + 4 * (char)(3 - (v76 + v79)));
        v27 = *(unsigned int *)(v87 + 136) == v71;
        v71 = *(unsigned int *)(v87 + 136 + 4 * v27);
        if (v27)
          ++v87;
        v90 = *(char *)(v87 + 144);
        v76 = v90;
        v91 = v85
            + v90
            - 3
            * (((21846 * (__int16)(v85 + v90)) >> 16)
             + ((21846 * (__int16)(v85 + v90)) >> 31));
        v92 = 3 - v90 - v91;
        if (*(_DWORD *)(v88 + 12 * v71 + 4 * v92) == v89)
          v79 = v91;
        else
          v79 = v92;
        v2 = v84[3];
        v83 = v86;
        if (v71 == *(_DWORD *)(v2 + 4 * v73 + 136))
          goto LABEL_3;
      }
      v93 = (char *)*v80;
      v94 = (uint64_t)&v83[-*v80] >> 4;
      v95 = v94 + 1;
      if ((unint64_t)(v94 + 1) >> 60)
        sub_2394189F8();
      v96 = *v81 - (_QWORD)v93;
      if (v96 >> 3 > v95)
        v95 = v96 >> 3;
      if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0)
        v97 = 0xFFFFFFFFFFFFFFFLL;
      else
        v97 = v95;
      if (v97)
      {
        if (v97 >> 60)
LABEL_115:
          sub_239418A80();
        v98 = (char *)operator new(16 * v97);
        v80 = v110;
      }
      else
      {
        v98 = 0;
      }
      v99 = &v98[16 * v94];
      *(_QWORD *)v99 = v10;
      *((_DWORD *)v99 + 2) = v71;
      v99[12] = v113;
      v99[13] = v76;
      v99[14] = v79;
      v100 = v99;
      if (v83 == v93)
      {
        v84 = v105;
        *v80 = v99;
        v86 = v99 + 16;
        *v82 = v99 + 16;
        *v81 = &v98[16 * v97];
        if (!v83)
          goto LABEL_110;
      }
      else
      {
        v84 = v105;
        do
        {
          *((_OWORD *)v100 - 1) = *((_OWORD *)v83 - 1);
          v100 -= 16;
          v83 -= 16;
        }
        while (v83 != v93);
        v83 = (char *)*v80;
        *v80 = v100;
        v86 = v99 + 16;
        *v82 = v99 + 16;
        *v81 = &v98[16 * v97];
        if (!v83)
          goto LABEL_110;
      }
      operator delete(v83);
      v80 = v110;
LABEL_110:
      v85 = v108;
      v73 = v104;
      goto LABEL_88;
    }
    v6 = result[1];
    v7 = *(unsigned int *)(v2 + 136);
    v8 = (_DWORD *)(*(_QWORD *)(v6 + 24) + 12 * v7);
    if (*v8 == (_DWORD)v5)
      v9 = 1;
    else
      v9 = 2 * (v8[1] == (_DWORD)v5);
    v15 = (void **)&v101[3 * (char)v3];
    v16 = v15 + 1;
    v17 = (char **)(v15 + 2);
    v18 = *(unsigned __int8 *)(v2 + 144);
    v111 = v18 != v9;
    if (v18 == v9)
      v19 = 1;
    else
      v19 = 2;
    v20 = v19 + *(char *)(v2 + 144);
    v21 = v20 - 3 * (((21846 * v20) >> 16) + ((21846 * v20) >> 31));
    v22 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 24 * v7 + 8 * ((__int16)v20 % 3));
    v109 = (void **)&v101[3 * (char)v3];
    v102 = v1;
    if (*(unsigned __int8 *)(v22 + 145) != 255)
    {
      v103 = *(_DWORD *)(v2 + 4 * (char)v3 + 128);
      v23 = (char *)*v16;
      v106 = v19;
      do
      {
        v25 = *(_QWORD *)(v6 + 24);
        v26 = *(_DWORD *)(v25 + 12 * v7 + 4 * (char)(3 - (v21 + v18)));
        v27 = *(_DWORD *)(v22 + 136) == (_DWORD)v7;
        v7 = *(unsigned int *)(v22 + 136 + 4 * v27);
        if (v27)
          ++v22;
        v28 = *(char *)(v22 + 144);
        LOBYTE(v18) = v28;
        v29 = v19
            + v28
            - 3
            * (((21846 * (__int16)(v19 + v28)) >> 16)
             + ((21846 * (__int16)(v19 + v28)) >> 31));
        v30 = 3 - v28 - v29;
        if (*(_DWORD *)(v25 + 12 * v7 + 4 * v30) == v26)
          LOBYTE(v21) = v29;
        else
          LOBYTE(v21) = v30;
        if (v23 < *v17)
        {
          *(_QWORD *)v23 = v6;
          *((_DWORD *)v23 + 2) = v7;
          v23[12] = v111;
          v23[13] = v18;
          v24 = v23 + 16;
          v23[14] = v21;
        }
        else
        {
          v31 = (char *)*v15;
          v32 = (v23 - (_BYTE *)*v15) >> 4;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 60)
LABEL_114:
            sub_2394189F8();
          v34 = *v17 - v31;
          if (v34 >> 3 > v33)
            v33 = v34 >> 3;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
            v35 = 0xFFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 60)
              goto LABEL_115;
            v36 = (char *)operator new(16 * v35);
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[16 * v32];
          *(_QWORD *)v37 = v6;
          *((_DWORD *)v37 + 2) = v7;
          v37[12] = v111;
          v37[13] = v18;
          v37[14] = v21;
          v38 = v37;
          if (v23 == v31)
          {
            v15 = v109;
          }
          else
          {
            v15 = v109;
            do
            {
              *((_OWORD *)v38 - 1) = *((_OWORD *)v23 - 1);
              v38 -= 16;
              v23 -= 16;
            }
            while (v23 != v31);
            v23 = (char *)*v109;
          }
          v39 = &v36[16 * v35];
          *v15 = v38;
          v24 = v37 + 16;
          *v16 = v37 + 16;
          *v17 = v39;
          if (v23)
            operator delete(v23);
          v19 = v106;
        }
        *v16 = v24;
        v22 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 24 * v7 + 8 * (char)v21);
        v23 = v24;
      }
      while (*(unsigned __int8 *)(v22 + 145) != 255);
      LODWORD(v5) = v103;
      v2 = v105[3];
      v1 = v102;
    }
    if (*(unsigned __int8 *)(v2 + 145) != 255)
    {
      v40 = v105[1];
      v41 = *(unsigned int *)(v2 + 140);
      v42 = (_DWORD *)(*(_QWORD *)(v40 + 24) + 12 * v41);
      v43 = *v42 == (_DWORD)v5 ? 1 : 2 * (v42[1] == (_DWORD)v5);
      v44 = *(char *)(v2 + 145);
      v45 = *(unsigned __int8 *)(v2 + 145);
      v112 = v45 != v43;
      v46 = v45 == v43 ? 1 : 2;
      v47 = v46 + v44;
      v48 = 21846 * (v46 + v44);
      v49 = v47 - 3 * (HIWORD(v48) + (v48 >> 31));
      v50 = *(_QWORD *)(*(_QWORD *)(v40 + 48)
                      + 24 * v41
                      + 8 * (__int16)(v47 - 3 * (HIWORD(v48) + (v48 >> 31))));
      if (*(unsigned __int8 *)(v50 + 145) != 255)
      {
        v51 = (char *)*v16;
        v107 = v46;
        do
        {
          v53 = *(_QWORD *)(v40 + 24);
          v54 = *(_DWORD *)(v53 + 12 * v41 + 4 * (char)(3 - (v49 + v45)));
          v27 = *(_DWORD *)(v50 + 136) == (_DWORD)v41;
          v41 = *(unsigned int *)(v50 + 136 + 4 * v27);
          if (v27)
            ++v50;
          v55 = *(char *)(v50 + 144);
          LOBYTE(v45) = v55;
          v56 = v46
              + v55
              - 3
              * (((21846 * (__int16)(v46 + v55)) >> 16)
               + ((21846 * (__int16)(v46 + v55)) >> 31));
          v57 = 3 - v55 - v56;
          if (*(_DWORD *)(v53 + 12 * v41 + 4 * v57) == v54)
            LOBYTE(v49) = v56;
          else
            LOBYTE(v49) = v57;
          if (v51 < *v17)
          {
            *(_QWORD *)v51 = v40;
            *((_DWORD *)v51 + 2) = v41;
            v51[12] = v112;
            v51[13] = v45;
            v52 = v51 + 16;
            v51[14] = v49;
          }
          else
          {
            v58 = (char *)*v15;
            v59 = (v51 - (_BYTE *)*v15) >> 4;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 60)
              goto LABEL_114;
            v61 = *v17 - v58;
            if (v61 >> 3 > v60)
              v60 = v61 >> 3;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
              v62 = 0xFFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              if (v62 >> 60)
                goto LABEL_115;
              v63 = (char *)operator new(16 * v62);
            }
            else
            {
              v63 = 0;
            }
            v64 = &v63[16 * v59];
            *(_QWORD *)v64 = v40;
            *((_DWORD *)v64 + 2) = v41;
            v64[12] = v112;
            v64[13] = v45;
            v64[14] = v49;
            v65 = v64;
            if (v51 == v58)
            {
              v15 = v109;
            }
            else
            {
              v15 = v109;
              do
              {
                *((_OWORD *)v65 - 1) = *((_OWORD *)v51 - 1);
                v65 -= 16;
                v51 -= 16;
              }
              while (v51 != v58);
              v51 = (char *)*v109;
            }
            v66 = &v63[16 * v62];
            *v15 = v65;
            v52 = v64 + 16;
            *v16 = v64 + 16;
            *v17 = v66;
            if (v51)
              operator delete(v51);
            v46 = v107;
          }
          *v16 = v52;
          v50 = *(_QWORD *)(*(_QWORD *)(v40 + 48) + 24 * v41 + 8 * (char)v49);
          v51 = v52;
        }
        while (*(unsigned __int8 *)(v50 + 145) != 255);
        v2 = v105[3];
LABEL_3:
        v1 = v102;
      }
    }
LABEL_4:
    ++v1;
    result = v105;
  }
  while (v1 != 2);
  return result;
}

void sub_2394FC77C(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t **v50;
  uint64_t **v51;
  uint64_t **v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  char *v73;
  void **v74;
  uint64_t **v75;
  __int128 v78;
  void *__p[2];
  char *__pa;
  __int128 v81;

  *(_OWORD *)__p = 0u;
  v81 = 0u;
  v78 = 0u;
  v3 = a1[5];
  v2 = a1[6];
  v4 = v2 - v3;
  if (v2 == v3)
  {
    v5 = 0;
  }
  else
  {
    if (v4 < 0)
      goto LABEL_120;
    v5 = operator new((unint64_t)v4 >> 1);
    *(_QWORD *)&v78 = v5;
    *((_QWORD *)&v78 + 1) = v5;
    __pa = (char *)&v5[v4 >> 4];
    if (v2 != v3)
    {
      while (1)
      {
        while (v5 < (_QWORD *)__pa)
        {
          *v5++ = v3;
          *((_QWORD *)&v78 + 1) = v5;
          v3 += 16;
          if (v3 == v2)
            goto LABEL_36;
        }
        v6 = (uint64_t)((uint64_t)v5 - v78) >> 3;
        v7 = v6 + 1;
        if ((unint64_t)(v6 + 1) >> 61)
LABEL_117:
          sub_2394189F8();
        v8 = (uint64_t)&__pa[-v78];
        if ((uint64_t)&__pa[-v78] >> 2 > v7)
          v7 = v8 >> 2;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v7;
        if (v9)
        {
          if (v9 >> 61)
LABEL_116:
            sub_239418A80();
          v10 = (char *)operator new(8 * v9);
          v11 = &v10[8 * v6];
          *(_QWORD *)v11 = v3;
          v12 = (uint64_t)(v11 + 8);
          if (v5 != (_QWORD *)v78)
          {
LABEL_21:
            v13 = (unint64_t)v5 - v78 - 8;
            if (v13 < 0x168)
            {
              v14 = v5;
              goto LABEL_23;
            }
            if ((char *)v5 + (unint64_t)v10 - v78 - (v13 & 0xFFFFFFFFFFFFFFF8) - 8 > (char *)v5
                                                                                             + (unint64_t)v10
                                                                                             - v78
                                                                                             - 8)
            {
              v14 = v5;
              goto LABEL_23;
            }
            if ((_QWORD *)((char *)v5 - (v13 & 0xFFFFFFFFFFFFFFF8) - 8) > v5 - 1)
            {
              v14 = v5;
              goto LABEL_23;
            }
            if ((_QWORD)v78 - (_QWORD)v10 < 0x20uLL)
            {
              v14 = v5;
              goto LABEL_23;
            }
            v16 = (v13 >> 3) + 1;
            v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
            v14 = &v5[v17 / 0xFFFFFFFFFFFFFFF8];
            v11 -= v17;
            v18 = &v10[8 * v6 - 16];
            v19 = (__int128 *)(v5 - 2);
            v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v21 = *v19;
              *((_OWORD *)v18 - 1) = *(v19 - 1);
              *(_OWORD *)v18 = v21;
              v18 -= 32;
              v19 -= 2;
              v20 -= 4;
            }
            while (v20);
            if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_23:
                v15 = *--v14;
                *((_QWORD *)v11 - 1) = v15;
                v11 -= 8;
              }
              while (v14 != (_QWORD *)v78);
            }
            v5 = (_QWORD *)v78;
            *(_QWORD *)&v78 = v11;
            __pa = &v10[8 * v9];
            if (!v5)
              goto LABEL_18;
LABEL_17:
            operator delete(v5);
            goto LABEL_18;
          }
        }
        else
        {
          v10 = 0;
          v11 = (char *)(8 * v6);
          *(_QWORD *)(8 * v6) = v3;
          v12 = 8 * v6 + 8;
          if (v5 != (_QWORD *)v78)
            goto LABEL_21;
        }
        *(_QWORD *)&v78 = v11;
        __pa = &v10[8 * v9];
        if (v5)
          goto LABEL_17;
LABEL_18:
        v5 = (_QWORD *)v12;
        *((_QWORD *)&v78 + 1) = v12;
        v3 += 16;
        if (v3 == v2)
        {
LABEL_36:
          v22 = v78;
          goto LABEL_39;
        }
      }
    }
  }
  v22 = (unint64_t)v5;
LABEL_39:
  v23 = 126 - 2 * __clz((uint64_t)((uint64_t)v5 - v22) >> 3);
  if (v5 == (_QWORD *)v22)
    v24 = 0;
  else
    v24 = v23;
  sub_239500710(v22, v5, v24, 1);
  v26 = a1[8];
  v25 = a1[9];
  v27 = v25 - v26;
  v28 = (v25 - v26) >> 4;
  if (v28)
  {
    if ((v27 & 0x8000000000000000) == 0)
    {
      v29 = (char *)operator new(v27 >> 1);
      __p[1] = v29;
      *(_QWORD *)&v81 = v29;
      *((_QWORD *)&v81 + 1) = &v29[8 * v28];
      goto LABEL_46;
    }
LABEL_120:
    sub_2394189F8();
  }
  v29 = 0;
LABEL_46:
  v30 = (char *)v81;
  if (v26 == v25)
    goto LABEL_79;
  do
  {
    if ((unint64_t)v30 < *((_QWORD *)&v81 + 1))
    {
      *(_QWORD *)v30 = v26;
      v30 += 8;
      goto LABEL_49;
    }
    v31 = (v30 - (char *)__p[1]) >> 3;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 61)
      goto LABEL_117;
    v33 = *((_QWORD *)&v81 + 1) - (unint64_t)__p[1];
    if ((uint64_t)(*((_QWORD *)&v81 + 1) - (unint64_t)__p[1]) >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        goto LABEL_116;
      v35 = (char *)operator new(8 * v34);
      v36 = &v35[8 * v31];
      *(_QWORD *)v36 = v26;
      v37 = (uint64_t)(v36 + 8);
      if (v30 == __p[1])
      {
LABEL_60:
        __p[1] = v36;
        *((_QWORD *)&v81 + 1) = &v35[8 * v34];
        if (v30)
          goto LABEL_61;
        goto LABEL_67;
      }
    }
    else
    {
      v35 = 0;
      v36 = (char *)(8 * v31);
      *(_QWORD *)(8 * v31) = v26;
      v37 = 8 * v31 + 8;
      if (v30 == __p[1])
        goto LABEL_60;
    }
    v38 = v30 - 8 - (char *)__p[1];
    if (v38 < 0x168)
    {
      v39 = v30;
      goto LABEL_65;
    }
    if (&v35[v30 - (char *)__p[1] - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v35[v30 - (char *)__p[1] - 8])
    {
      v39 = v30;
      do
      {
LABEL_65:
        v40 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *((_QWORD *)v36 - 1) = v40;
        v36 -= 8;
      }
      while (v39 != __p[1]);
      goto LABEL_66;
    }
    if (&v30[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v30 - 8)
    {
      v39 = v30;
      goto LABEL_65;
    }
    if ((void *)((char *)__p[1] - (char *)v35) < (void *)0x20)
    {
      v39 = v30;
      goto LABEL_65;
    }
    v41 = (v38 >> 3) + 1;
    v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v30[-v42];
    v36 -= v42;
    v43 = &v35[8 * v31 - 16];
    v44 = v30 - 16;
    v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
      *(_OWORD *)v43 = v46;
      v43 -= 32;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_65;
LABEL_66:
    v30 = (char *)__p[1];
    __p[1] = v36;
    *((_QWORD *)&v81 + 1) = &v35[8 * v34];
    if (v30)
    {
LABEL_61:
      operator delete(v30);
      v30 = (char *)v37;
      goto LABEL_49;
    }
LABEL_67:
    v30 = (char *)v37;
LABEL_49:
    *(_QWORD *)&v81 = v30;
    v26 += 16;
  }
  while (v26 != v25);
  v29 = (char *)__p[1];
LABEL_79:
  v47 = 126 - 2 * __clz((v30 - v29) >> 3);
  if (v30 == v29)
    v48 = 0;
  else
    v48 = v47;
  sub_239500710((unint64_t)v29, (uint64_t *)v30, v48, 1);
  v49 = (uint64_t **)__p[1];
  v50 = (uint64_t **)*((_QWORD *)&v78 + 1);
  v51 = (uint64_t **)v78;
  if ((_QWORD)v78 != *((_QWORD *)&v78 + 1))
  {
    v52 = (uint64_t **)v81;
    if (__p[1] != (void *)v81)
    {
      v74 = (void **)(a1 + 15);
      while (1)
      {
        v53 = **v51;
        v54 = *((_DWORD *)*v51 + 2);
        v55 = *(_DWORD *)(*(_QWORD *)(v53 + 24) + 12 * v54 + 4 * *((char *)*v51 + 13));
        v56 = **v49;
        v57 = *((_DWORD *)*v49 + 2);
        v58 = *(_DWORD *)(*(_QWORD *)(v56 + 24) + 12 * v57 + 4 * *((char *)*v49 + 13));
        if (v55 >= v58)
          break;
        if (++v51 == v50)
          goto LABEL_110;
LABEL_106:
        if (v49 == v52)
        {
LABEL_110:
          v49 = (uint64_t **)__p[1];
          v51 = (uint64_t **)v78;
          goto LABEL_111;
        }
      }
      if (v58 >= v55)
      {
        v59 = *(_QWORD *)(*(_QWORD *)(v53 + 48) + 24 * v54 + 8 * *((char *)*v51 + 14));
        v60 = *(_QWORD *)(*(_QWORD *)(v56 + 48) + 24 * v57 + 8 * *((char *)*v49 + 14));
        v62 = (char *)a1[16];
        v61 = a1[17];
        if ((unint64_t)v62 < v61)
        {
          *(_DWORD *)v62 = a2;
          *((_DWORD *)v62 + 1) = v55;
          *((_QWORD *)v62 + 1) = v59;
          *((_QWORD *)v62 + 2) = v60;
          *((_DWORD *)v62 + 6) = 0;
          v63 = v62 + 32;
          v50 = (uint64_t **)*((_QWORD *)&v78 + 1);
          v52 = (uint64_t **)v81;
          goto LABEL_104;
        }
        v64 = (char *)*v74;
        v65 = (v62 - (_BYTE *)*v74) >> 5;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 59)
          sub_2394189F8();
        v75 = v50;
        v67 = v61 - (_QWORD)v64;
        if (v67 >> 4 > v66)
          v66 = v67 >> 4;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0)
          v68 = 0x7FFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68 >> 59)
          sub_239418A80();
        v69 = (char *)operator new(32 * v68);
        v70 = &v69[32 * v65];
        *(_DWORD *)v70 = a2;
        *((_DWORD *)v70 + 1) = v55;
        *((_QWORD *)v70 + 1) = v59;
        *((_QWORD *)v70 + 2) = v60;
        *((_DWORD *)v70 + 6) = 0;
        if (v62 == v64)
        {
          v63 = v70 + 32;
          a1[15] = &v69[32 * v65];
          a1[16] = v70 + 32;
          a1[17] = &v69[32 * v68];
          if (v64)
            goto LABEL_102;
        }
        else
        {
          v71 = &v69[32 * v65];
          do
          {
            v72 = *((_OWORD *)v62 - 2);
            v73 = v71 - 32;
            *(_OWORD *)(v71 - 20) = *(_OWORD *)(v62 - 20);
            *((_OWORD *)v71 - 2) = v72;
            v62 -= 32;
            v71 -= 32;
          }
          while (v62 != v64);
          v63 = v70 + 32;
          a1[15] = v73;
          a1[16] = v70 + 32;
          a1[17] = &v69[32 * v68];
          if (v64)
LABEL_102:
            operator delete(v64);
        }
        v50 = v75;
LABEL_104:
        a1[16] = v63;
        ++v51;
      }
      ++v49;
      if (v51 == v50)
        goto LABEL_110;
      goto LABEL_106;
    }
  }
LABEL_111:
  if (v49)
    operator delete(v49);
  if (v51)
    operator delete(v51);
}

void sub_2394FCF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394FCF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394FCF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394FCF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394FCF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394FCF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394FCF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2394FCFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2394FCFA8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

BOOL sub_2394FCFE8(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  float64x2_t *v6;
  float64x2_t v11;
  float64x2_t v12;
  unint64_t v13;
  _QWORD *v14;
  float64x2_t *v15;
  float64x2_t v16;
  float64x2_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  int v22;
  BOOL v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  char *i;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  char v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  int v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  int v70;
  BOOL v71;
  int v72;
  unsigned int v73;
  int v74;
  unsigned int *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  char *v87;
  char *v88;
  char v89;
  void *v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  char *v102;
  _DWORD *v103;
  int v104;
  int v105;
  int v106;
  int32x2_t *v107;
  int32x2_t *v108;
  uint64_t v109;
  __int16 v110;
  __int8 v111;
  _DWORD *v112;
  int v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  uint64_t **v120;
  uint64_t **v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int32x2_t *v125;
  uint64_t v126;
  int v127;
  int32x2_t *v128;
  unsigned int v129;
  uint64_t **v130;
  uint64_t *v131;
  uint64_t **v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t **v138;
  int32x2_t *v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  _DWORD *v146;
  int v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t **v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t **v165;
  uint64_t *v166;
  uint64_t **v167;
  unint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _BOOL8 v177;
  unsigned int v178;
  unsigned int v179;
  __int8 v180;
  __int8 v181;
  char *v182;
  char *v183;
  __int8 v184;
  unsigned int *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  int v190;
  int64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  unsigned int *v201;
  unsigned int *v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  char v206;
  int32x2_t *v207;
  int32x2_t *v208;
  int32x2_t *v209;
  unsigned __int8 v210;
  char *v211;
  int v212;
  int v213;
  int v214;
  int v215;
  uint64_t **v216;
  unsigned int v217;
  unint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  float64x2_t v222;
  uint64_t v223;
  char *v224;
  unsigned int *v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;

  v1 = *(unsigned int **)(a1 + 120);
  v2 = *(unsigned int **)(a1 + 128);
  if (v1 == v2)
    return v1 != v2;
  v3 = a1;
  v227 = 0;
  v229 = 0;
  v226 = 0;
  v224 = 0;
  v209 = (int32x2_t *)*((_QWORD *)v1 + 1);
  v220 = *((_QWORD *)v1 + 2);
  v4 = *v1;
  v5 = *(_QWORD **)a1;
  v6 = (float64x2_t *)(v5[6] + 80 * *v1);
  __asm { FMOV            V2.2D, #0.5 }
  v11 = vmulq_f64(v6[1], _Q2);
  *v6 = vmulq_f64(*v6, _Q2);
  v6[1] = v11;
  v12 = vmulq_f64(v6[3], _Q2);
  v6[2] = vmulq_f64(v6[2], _Q2);
  v6[3] = v12;
  v222 = _Q2;
  v6[4] = vmulq_f64(v6[4], _Q2);
  v205 = v4;
  v217 = sub_2394FE330(v5, v4);
  v13 = v1[1];
  v14 = *(_QWORD **)v3;
  v15 = (float64x2_t *)(*(_QWORD *)(*(_QWORD *)v3 + 48) + 80 * v13);
  v16 = vmulq_f64(v15[1], v222);
  *v15 = vmulq_f64(*v15, v222);
  v15[1] = v16;
  v17 = vmulq_f64(v15[3], v222);
  v15[2] = vmulq_f64(v15[2], v222);
  v15[3] = v17;
  v15[4] = vmulq_f64(v15[4], v222);
  v218 = v13;
  v219 = sub_2394FE330(v14, v13);
  v201 = v2;
  v202 = v1;
  v18 = v217;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 72) + (((unint64_t)v217 >> 3) & 0x1FFFFFF8)) &= ~(1 << v217);
  v208 = v209 + 18;
  v19 = v209[17].u32[0];
  v207 = v209 + 17;
  v20 = v209[18].u8[0];
  v223 = *(_QWORD *)(v3 + 8);
  v21 = (_DWORD *)(*(_QWORD *)(v223 + 24) + 12 * v19);
  v22 = 1;
  if (*v21 != v205)
    v22 = 2 * (v21[1] == v205);
  v210 = 0;
  v23 = v20 != v22;
  if (v20 == v22)
    v24 = 1;
  else
    v24 = 2;
  v25 = v24
      + v209[18].i8[0]
      - 3
      * (((21846 * (v24 + v209[18].i8[0])) >> 16) + ((21846 * (v24 + v209[18].i8[0])) >> 31));
  v26 = *(_QWORD *)(v223 + 48);
  v27 = 0;
  i = 0;
LABEL_8:
  if (v23)
    v29 = 2;
  else
    v29 = 1;
  v214 = v29;
  while (1)
  {
    v30 = (char)v25;
    v31 = *(_QWORD *)(v26 + 24 * v19 + 8 * (char)v25);
    v221 = v19;
    if (v27 < v229)
    {
      *(_QWORD *)v27 = v31;
      *((_DWORD *)v27 + 2) = v205;
      *((_DWORD *)v27 + 3) = v18;
      v27 += 16;
      goto LABEL_28;
    }
    v32 = v227;
    v33 = (v27 - v227) >> 4;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 60)
      sub_2394189F8();
    v35 = v229 - v227;
    if ((v229 - v227) >> 3 > v34)
      v34 = v35 >> 3;
    v36 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v34;
    if (v36)
    {
      if (v36 >> 60)
        sub_239418A80();
      v37 = (char *)operator new(16 * v36);
      v38 = (uint64_t)&v37[16 * v33];
      *(_QWORD *)v38 = v31;
      v18 = v217;
      *(_DWORD *)(v38 + 8) = v205;
      *(_DWORD *)(v38 + 12) = v217;
      if (v27 == v227)
      {
LABEL_40:
        v32 = v27;
        v27 = (char *)(v38 + 16);
        v227 = (char *)v38;
        v229 = &v37[16 * v36];
        if (!v32)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      v37 = 0;
      v38 = 16 * v33;
      *(_QWORD *)v38 = v31;
      v18 = v217;
      *(_DWORD *)(v38 + 8) = v205;
      *(_DWORD *)(v38 + 12) = v217;
      if (v27 == v227)
        goto LABEL_40;
    }
    v39 = (char *)v38;
    do
    {
      *((_OWORD *)v39 - 1) = *((_OWORD *)v27 - 1);
      v39 -= 16;
      v27 -= 16;
    }
    while (v27 != v227);
    v27 = (char *)(v38 + 16);
    v227 = v39;
    v229 = &v37[16 * v36];
    if (!v32)
      goto LABEL_27;
LABEL_26:
    operator delete(v32);
LABEL_27:
    v19 = v221;
LABEL_28:
    v40 = 3 - (v20 + v30);
    v41 = v226;
    if (i < v226)
    {
      *(_DWORD *)i = v19;
      i[4] = v40;
      *((_DWORD *)i + 2) = v18;
      i += 12;
      goto LABEL_49;
    }
    v42 = v224;
    v43 = 0xAAAAAAAAAAAAAAABLL * ((i - v224) >> 2) + 1;
    if (v43 > 0x1555555555555555)
      sub_2394189F8();
    if (0x5555555555555556 * ((v226 - v224) >> 2) > v43)
      v43 = 0x5555555555555556 * ((v226 - v224) >> 2);
    v44 = 0xAAAAAAAAAAAAAAABLL * ((v226 - v224) >> 2) >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v43;
    if (v44)
    {
      if (v44 > 0x1555555555555555)
        sub_239418A80();
      v45 = (char *)operator new(12 * v44);
    }
    else
    {
      v45 = 0;
    }
    v46 = &v45[4 * ((i - v224) >> 2)];
    *(_DWORD *)v46 = v221;
    v46[4] = v40;
    v18 = v217;
    *((_DWORD *)v46 + 2) = v217;
    if (i == v224)
    {
      v42 = i;
      v41 = &v45[12 * v44];
      i = v46 + 12;
      v224 = v46;
      v226 = v41;
      if (!v42)
        goto LABEL_48;
    }
    else
    {
      v47 = &v45[4 * ((i - v224) >> 2)];
      do
      {
        v48 = *(_QWORD *)(i - 12);
        i -= 12;
        v49 = *((_DWORD *)i + 2);
        *(_QWORD *)(v47 - 12) = v48;
        v47 -= 12;
        *((_DWORD *)v47 + 2) = v49;
      }
      while (i != v224);
      v41 = &v45[12 * v44];
      i = v46 + 12;
      v224 = v47;
      v226 = v41;
      if (!v42)
        goto LABEL_48;
    }
    operator delete(v42);
LABEL_48:
    v19 = v221;
LABEL_49:
    v50 = *(_QWORD *)(v223 + 24);
    v51 = v50 + 12 * v19;
    v52 = *(_DWORD **)(v3 + 120);
    v53 = *(_DWORD **)(v3 + 128);
    if (v52 != v53)
    {
      v54 = v52 + 6;
      while (1)
      {
        v55 = v54 - 6;
        _ZF = *(v54 - 6) == v205 && *(v54 - 5) == *(_DWORD *)(v51 + 4 * (char)v20);
        if (_ZF)
          break;
        v54 += 8;
        if (v55 + 8 == v53)
          goto LABEL_58;
      }
      ++*v54;
    }
LABEL_58:
    v26 = *(_QWORD *)(v223 + 48);
    v57 = *(_QWORD *)(v26 + 24 * v19 + 8 * v30);
    if (v57 == v220)
      break;
    if (*(unsigned __int8 *)(v57 + 145) == 255)
    {
      v27 = v227;
      for (i = v224; v52 != v53; v52 += 8)
      {
        if (*v52 == v205)
          v52[6] = 0;
      }
      v63 = 1;
      v64 = 1 - v210;
      v19 = v207->u32[v64];
      v65 = (_DWORD *)(v50 + 12 * v19);
      if (*v65 != v205)
        v63 = 2 * (v65[1] == v205);
      LOBYTE(v20) = v208->i8[v64];
      _ZF = v20 == v63;
      v23 = v20 != v63;
      if (_ZF)
        v66 = 1;
      else
        v66 = 2;
      v25 = v66
          + v208->i8[v64]
          - 3
          * (((21846 * (v66 + v208->i8[v64])) >> 16)
           + ((21846 * (v66 + v208->i8[v64])) >> 31));
      v210 = 1 - v210;
      goto LABEL_8;
    }
    v58 = *(_DWORD *)(v51 + 4 * v40);
    _ZF = *(unsigned int *)(v57 + 136) == v19;
    v19 = *(unsigned int *)(v57 + 136 + 4 * _ZF);
    if (_ZF)
      v59 = v57 + 1;
    else
      v59 = v57;
    v60 = *(char *)(v59 + 144);
    LOBYTE(v20) = v60;
    v61 = v214
        + v60
        - 3
        * (((21846 * (__int16)(v214 + v60)) >> 16) + ((21846 * (__int16)(v214 + v60)) >> 31));
    v62 = 3 - v60 - v61;
    if (*(_DWORD *)(v50 + 12 * v19 + 4 * v62) == v58)
      LOBYTE(v25) = v61;
    else
      LOBYTE(v25) = v62;
  }
  v67 = v207->u32[v210];
  v200 = v210;
  v68 = v208->u8[v210];
  v69 = (_DWORD *)(v50 + 12 * v67);
  v70 = 1;
  if (*v69 != (_DWORD)v218)
    v70 = 2 * (v69[1] == (_DWORD)v218);
  v206 = 0;
  _ZF = v68 == v70;
  v71 = v68 != v70;
  if (_ZF)
    v72 = 1;
  else
    v72 = 2;
  v73 = v72
      + v208->i8[v210]
      - 3
      * (((21846 * (v72 + v208->i8[v210])) >> 16) + ((21846 * (v72 + v208->i8[v210])) >> 31));
  v203 = v220 + 144;
  v204 = (unsigned int *)(v220 + 136);
  while (2)
  {
    if (v71)
      v74 = 2;
    else
      v74 = 1;
    v215 = v74;
    while (2)
    {
      v75 = (unsigned int *)i;
      v76 = v27;
      v77 = (char)v73;
      v78 = *(_QWORD *)(v26 + 24 * v67 + 8 * (char)v73);
      if (v76 < v229)
      {
        *(_QWORD *)v76 = v78;
        *((_DWORD *)v76 + 2) = v218;
        *((_DWORD *)v76 + 3) = v219;
        v27 = v76 + 16;
        v41 = v226;
        v228 = v76 + 16;
        v79 = 3 - (v68 + v73);
        if (v75 < (unsigned int *)v226)
          goto LABEL_90;
LABEL_109:
        v90 = v224;
        v91 = 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - v224) >> 2) + 1;
        if (v91 > 0x1555555555555555)
          sub_2394189F8();
        if (0x5555555555555556 * ((v41 - v224) >> 2) > v91)
          v91 = 0x5555555555555556 * ((v41 - v224) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v41 - v224) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v92 = 0x1555555555555555;
        else
          v92 = v91;
        if (v92)
        {
          if (v92 > 0x1555555555555555)
            sub_239418A80();
          v93 = (char *)operator new(12 * v92);
        }
        else
        {
          v93 = 0;
        }
        v94 = &v93[4 * (((char *)v75 - v224) >> 2)];
        *(_DWORD *)v94 = v67;
        v41 = &v93[12 * v92];
        v94[4] = v79;
        *((_DWORD *)v94 + 2) = v219;
        i = v94 + 12;
        if (v75 == (unsigned int *)v224)
        {
          v224 = &v93[4 * (((char *)v75 - v224) >> 2)];
          v226 = v41;
          v90 = v75;
        }
        else
        {
          do
          {
            v95 = *(_QWORD *)(v75 - 3);
            v75 -= 3;
            v96 = v75[2];
            *(_QWORD *)(v94 - 12) = v95;
            v94 -= 12;
            *((_DWORD *)v94 + 2) = v96;
          }
          while (v75 != (unsigned int *)v224);
          v224 = v94;
          v226 = v41;
          if (!v90)
          {
LABEL_125:
            v19 = v221;
            goto LABEL_126;
          }
        }
        operator delete(v90);
        goto LABEL_125;
      }
      v80 = v3;
      v81 = v227;
      v82 = (v76 - v227) >> 4;
      v83 = v82 + 1;
      if ((unint64_t)(v82 + 1) >> 60)
        sub_2394189F8();
      v211 = v41;
      v84 = v229 - v227;
      if ((v229 - v227) >> 3 > v83)
        v83 = v84 >> 3;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0)
        v85 = 0xFFFFFFFFFFFFFFFLL;
      else
        v85 = v83;
      if (v85)
      {
        if (v85 >> 60)
          sub_239418A80();
        v86 = v68;
        v87 = (char *)operator new(16 * v85);
      }
      else
      {
        v86 = v68;
        v87 = 0;
      }
      v88 = &v87[16 * v82];
      *(_QWORD *)v88 = v78;
      *((_DWORD *)v88 + 2) = v218;
      *((_DWORD *)v88 + 3) = v219;
      v27 = v88 + 16;
      if (v76 == v227)
      {
        v227 = &v87[16 * v82];
        v229 = &v87[16 * v85];
        v81 = v76;
        v3 = v80;
      }
      else
      {
        v3 = v80;
        do
        {
          *((_OWORD *)v88 - 1) = *((_OWORD *)v76 - 1);
          v88 -= 16;
          v76 -= 16;
        }
        while (v76 != v227);
        v227 = v88;
        v229 = &v87[16 * v85];
        if (!v81)
          goto LABEL_108;
      }
      operator delete(v81);
LABEL_108:
      v19 = v221;
      v89 = v86;
      v41 = v211;
      v228 = v27;
      v79 = 3 - (v89 + v77);
      if (v75 >= (unsigned int *)v211)
        goto LABEL_109;
LABEL_90:
      *v75 = v67;
      *((_BYTE *)v75 + 4) = v79;
      i = (char *)(v75 + 3);
      v75[2] = v219;
LABEL_126:
      v225 = (unsigned int *)i;
      v26 = *(_QWORD *)(v223 + 48);
      v97 = *(_QWORD *)(v26 + 24 * v67 + 8 * v77);
      if (v97 == v220)
      {
        v108 = v209 + 17;
        v107 = v209 + 18;
        goto LABEL_143;
      }
      if (*(unsigned __int8 *)(v97 + 145) != 255)
      {
        v98 = *(_QWORD *)(v223 + 24);
        v99 = *(_DWORD *)(v98 + 12 * v67 + 4 * v79);
        _ZF = *(unsigned int *)(v97 + 136) == v67;
        v67 = *(unsigned int *)(v97 + 136 + 4 * _ZF);
        if (_ZF)
          ++v97;
        v73 = *(char *)(v97 + 144);
        LOBYTE(v68) = v73;
        v100 = v215
             + v73
             - 3
             * (((21846 * (__int16)(v215 + v73)) >> 16)
              + ((21846 * (__int16)(v215 + v73)) >> 31));
        LOBYTE(v73) = 3 - v73 - v100;
        if (*(_DWORD *)(v98 + 12 * v67 + 4 * (char)v73) == v99)
          LOBYTE(v73) = v100;
        continue;
      }
      break;
    }
    if ((v206 & 1) == 0)
    {
      v101 = *v204;
      _ZF = v101 == v19;
      v67 = v204[v101 != v19];
      v102 = (char *)(v220 + 144);
      if (!_ZF)
        v102 = (char *)(v220 + 145);
      v103 = (_DWORD *)(*(_QWORD *)(v223 + 24) + 12 * v67);
      v104 = 1;
      if (*v103 != (_DWORD)v218)
        v104 = 2 * (v103[1] == (_DWORD)v218);
      v105 = *v102;
      LOBYTE(v68) = v105;
      _ZF = v105 == v104;
      v71 = v105 != v104;
      v206 = 1;
      if (_ZF)
        v106 = 1;
      else
        v106 = 2;
      v73 = v106
          + v105
          - 3 * (((21846 * (v106 + v105)) >> 16) + ((21846 * (v106 + v105)) >> 31));
      continue;
    }
    break;
  }
  if (v27 >= v229)
  {
    v193 = v227;
    v194 = (v27 - v227) >> 4;
    v195 = v194 + 1;
    if ((unint64_t)(v194 + 1) >> 60)
      sub_2394189F8();
    v196 = v229 - v227;
    if ((v229 - v227) >> 3 > v195)
      v195 = v196 >> 3;
    if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFF0)
      v197 = 0xFFFFFFFFFFFFFFFLL;
    else
      v197 = v195;
    if (v197)
    {
      if (v197 >> 60)
        sub_239418A80();
      v198 = (char *)operator new(16 * v197);
    }
    else
    {
      v198 = 0;
    }
    v199 = &v198[16 * v194];
    *(_QWORD *)v199 = v220;
    *((_DWORD *)v199 + 2) = v218;
    *((_DWORD *)v199 + 3) = v219;
    v192 = v199 + 16;
    if (v27 == v227)
    {
      v227 = v199;
      v193 = v27;
    }
    else
    {
      do
      {
        *((_OWORD *)v199 - 1) = *((_OWORD *)v27 - 1);
        v199 -= 16;
        v27 -= 16;
      }
      while (v27 != v227);
      v227 = v199;
      if (!v193)
        goto LABEL_269;
    }
    operator delete(v193);
  }
  else
  {
    *(_QWORD *)v27 = v220;
    v192 = v27 + 16;
    *((_DWORD *)v27 + 2) = v218;
    *((_DWORD *)v27 + 3) = v219;
  }
LABEL_269:
  v108 = v209 + 17;
  v107 = v209 + 18;
  v228 = v192;
  v206 = 1;
LABEL_143:
  v109 = v108->u32[0];
  v110 = v107->i8[0];
  v111 = v110;
  v112 = (_DWORD *)(*(_QWORD *)(v223 + 24) + 12 * v109);
  v113 = 1;
  if (*v112 != (_DWORD)v218)
    v113 = 2 * (v112[1] == (_DWORD)v218);
  if (v110 == v113)
    v114 = 1;
  else
    v114 = 2;
  v212 = v114;
  v115 = (__int16)(v114 + v110) % 3;
  v116 = *(_QWORD *)(v223 + 48);
  v117 = v115;
  v118 = *(_QWORD *)(v116 + 24 * v109 + 8 * v115);
  v120 = (uint64_t **)(v3 + 104);
  v119 = *(uint64_t **)(v3 + 104);
  v121 = (uint64_t **)(v3 + 104);
  v216 = (uint64_t **)(v3 + 104);
  if (v119)
  {
    while (1)
    {
      while (1)
      {
        v120 = (uint64_t **)v119;
        v122 = v119[4];
        if (v118 >= v122)
          break;
        v119 = *v120;
        v121 = v120;
        if (!*v120)
          goto LABEL_155;
      }
      if (v122 >= v118)
        break;
      v119 = v120[1];
      if (!v119)
      {
        v121 = v120 + 1;
        goto LABEL_155;
      }
    }
  }
  else
  {
LABEL_155:
    v123 = (uint64_t *)operator new(0x28uLL);
    v123[4] = v118;
    *v123 = 0;
    v123[1] = 0;
    v123[2] = (uint64_t)v120;
    *v121 = v123;
    v124 = **(_QWORD **)(v3 + 96);
    if (v124)
    {
      *(_QWORD *)(v3 + 96) = v124;
      v123 = *v121;
    }
    sub_2394213B8(*(uint64_t **)(v3 + 104), v123);
    ++*(_QWORD *)(v3 + 112);
    v116 = *(_QWORD *)(v223 + 48);
  }
  v125 = *(int32x2_t **)(v116 + 24 * v109 + 8 * v117);
  while (v125[18].u8[1] != 255)
  {
    v126 = *(_QWORD *)(v223 + 24);
    v127 = *(_DWORD *)(v126 + 12 * v109 + 4 * (char)(3 - (v111 + v117)));
    _ZF = v125[17].u32[0] == v109;
    v109 = v125[17].u32[_ZF];
    if (_ZF)
      v128 = (int32x2_t *)((char *)v125 + 1);
    else
      v128 = v125;
    v111 = v128[18].i8[0];
    v129 = v212
         + v111
         - 3
         * (((21846 * (__int16)(v212 + v111)) >> 16)
          + ((21846 * (__int16)(v212 + v111)) >> 31));
    if (*(_DWORD *)(v126 + 12 * v109 + 4 * (char)(3 - v111 - v129)) == v127)
      LOBYTE(v117) = v212
                   + v111
                   - 3 * (((21846 * (__int16)(v212 + v111)) >> 16) + (21846 * (__int16)(v212 + v111) < 0));
    else
      LOBYTE(v117) = 3 - v111 - v129;
    v125 = *(int32x2_t **)(v116 + 24 * v109 + 8 * (char)v117);
    v130 = (uint64_t **)(v3 + 104);
    while (1)
    {
      v131 = *v130;
      v132 = v130;
      if (!*v130)
        break;
      while (1)
      {
        v130 = (uint64_t **)v131;
        v133 = v131[4];
        if ((unint64_t)v125 < v133)
          break;
        if (v133 >= (unint64_t)v125)
          goto LABEL_160;
        v131 = v130[1];
        if (!v131)
        {
          v132 = v130 + 1;
          goto LABEL_174;
        }
      }
    }
LABEL_174:
    v134 = (uint64_t *)operator new(0x28uLL);
    v134[4] = (uint64_t)v125;
    *v134 = 0;
    v134[1] = 0;
    v134[2] = (uint64_t)v130;
    *v132 = v134;
    v135 = **(_QWORD **)(v3 + 96);
    if (v135)
    {
      *(_QWORD *)(v3 + 96) = v135;
      v134 = *v132;
    }
    sub_2394213B8(*(uint64_t **)(v3 + 104), v134);
    ++*(_QWORD *)(v3 + 112);
    v116 = *(_QWORD *)(v223 + 48);
    v125 = *(int32x2_t **)(v116 + 24 * v109 + 8 * (char)v117);
LABEL_160:
    if (v125 == v209)
    {
      if (v209[18].u8[1] != 255)
        goto LABEL_220;
      break;
    }
  }
  v136 = (uint64_t **)(v3 + 104);
  v137 = *v216;
  v138 = (uint64_t **)(v3 + 104);
  v139 = v209;
  if (*v216)
  {
    while (1)
    {
      while (1)
      {
        v136 = (uint64_t **)v137;
        v140 = v137[4];
        if ((unint64_t)v209 >= v140)
          break;
        v137 = *v136;
        v138 = v136;
        if (!*v136)
          goto LABEL_184;
      }
      if (v140 >= (unint64_t)v209)
        break;
      v137 = v136[1];
      if (!v137)
      {
        v138 = v136 + 1;
        goto LABEL_184;
      }
    }
  }
  else
  {
LABEL_184:
    v141 = (uint64_t *)operator new(0x28uLL);
    v139 = v209;
    v141[4] = (uint64_t)v209;
    *v141 = 0;
    v141[1] = 0;
    v141[2] = (uint64_t)v136;
    *v138 = v141;
    v142 = **(_QWORD **)(v3 + 96);
    if (v142)
    {
      *(_QWORD *)(v3 + 96) = v142;
      v141 = *v138;
    }
    sub_2394213B8(*(uint64_t **)(v3 + 104), v141);
    ++*(_QWORD *)(v3 + 112);
  }
  v143 = v139[18].i8[1];
  if (v143 != -1)
  {
    v144 = v139[18].u8[1];
    v145 = v209[17].u32[1];
    v146 = (_DWORD *)(*(_QWORD *)(v223 + 24) + 12 * v145);
    v147 = 1;
    if (*v146 != (_DWORD)v218)
      v147 = 2 * (v146[1] == (_DWORD)v218);
    if (v144 == v147)
      v148 = 1;
    else
      v148 = 2;
    v213 = v148;
    v149 = v148
         + v143
         - 3 * (((21846 * (v148 + v143)) >> 16) + ((21846 * (v148 + v143)) >> 31));
    v150 = *(_QWORD *)(v223 + 48);
    v151 = (__int16)v149;
    v152 = *(_QWORD *)(v150 + 24 * v145 + 8 * (__int16)v149);
    v153 = (uint64_t **)(v3 + 104);
    while (1)
    {
      v154 = *v153;
      v155 = v153;
      if (!*v153)
        break;
      while (1)
      {
        v153 = (uint64_t **)v154;
        v156 = v154[4];
        if (v152 < v156)
          break;
        if (v156 >= v152)
          goto LABEL_202;
        v154 = v153[1];
        if (!v154)
        {
          v155 = v153 + 1;
          goto LABEL_199;
        }
      }
    }
LABEL_199:
    v157 = (uint64_t *)operator new(0x28uLL);
    v157[4] = v152;
    *v157 = 0;
    v157[1] = 0;
    v157[2] = (uint64_t)v153;
    *v155 = v157;
    v158 = **(_QWORD **)(v3 + 96);
    if (v158)
    {
      *(_QWORD *)(v3 + 96) = v158;
      v157 = *v155;
    }
    sub_2394213B8(*(uint64_t **)(v3 + 104), v157);
    ++*(_QWORD *)(v3 + 112);
    v150 = *(_QWORD *)(v223 + 48);
LABEL_202:
    v159 = *(_QWORD *)(v150 + 24 * v145 + 8 * v151);
    v160 = *(unsigned __int8 *)(v159 + 145);
    do
    {
      if (v160 == 255)
        break;
      v161 = *(_QWORD *)(v223 + 24);
      v162 = *(_DWORD *)(v161 + 12 * v145 + 4 * (char)(3 - (v144 + v151)));
      _ZF = *(unsigned int *)(v159 + 136) == v145;
      v145 = *(unsigned int *)(v159 + 136 + 4 * _ZF);
      v163 = _ZF ? v159 + 1 : v159;
      LOBYTE(v144) = *(_BYTE *)(v163 + 144);
      v164 = v213
           + (char)v144
           - 3
           * (((21846 * (__int16)(v213 + (char)v144)) >> 16)
            + ((21846 * (__int16)(v213 + (char)v144)) >> 31));
      LOBYTE(v151) = *(_DWORD *)(v161 + 12 * v145 + 4 * (char)(3 - v144 - v164)) == v162
                   ? v213
                   + v144
                   - 3
                   * (((21846 * (__int16)(v213 + (char)v144)) >> 16)
                    + (21846 * (__int16)(v213 + (char)v144) < 0))
                   : 3 - v144 - v164;
      v159 = *(_QWORD *)(v150 + 24 * v145 + 8 * (char)v151);
      v165 = (uint64_t **)(v3 + 104);
      while (1)
      {
        v166 = *v165;
        v167 = v165;
        if (!*v165)
          break;
        while (1)
        {
          v165 = (uint64_t **)v166;
          v168 = v166[4];
          if (v159 < v168)
            break;
          if (v168 >= v159)
            goto LABEL_204;
          v166 = v165[1];
          if (!v166)
          {
            v167 = v165 + 1;
            goto LABEL_218;
          }
        }
      }
LABEL_218:
      v169 = (uint64_t *)operator new(0x28uLL);
      v169[4] = v159;
      *v169 = 0;
      v169[1] = 0;
      v169[2] = (uint64_t)v165;
      *v167 = v169;
      v170 = **(_QWORD **)(v3 + 96);
      if (v170)
      {
        *(_QWORD *)(v3 + 96) = v170;
        v169 = *v167;
      }
      sub_2394213B8(*(uint64_t **)(v3 + 104), v169);
      ++*(_QWORD *)(v3 + 112);
      v150 = *(_QWORD *)(v223 + 48);
      v159 = *(_QWORD *)(v150 + 24 * v145 + 8 * (char)v151);
LABEL_204:
      v160 = *(unsigned __int8 *)(v159 + 145);
    }
    while (v160 != 255);
  }
LABEL_220:
  v171 = *(_QWORD *)(*(_QWORD *)v3 + 72);
  v172 = v218 >> 6;
  v173 = 1 << v218;
  if ((*(_QWORD *)(v171 + 8 * (v218 >> 6)) & (1 << v218)) != 0)
  {
    v174 = 1 << v219;
    v175 = 8 * ((unint64_t)v219 >> 6);
    if ((v206 & 1) != 0)
    {
      *(_QWORD *)(v171 + v175) |= v174;
      v176 = *(_QWORD *)(v171 + 8 * v172) & ~v173;
    }
    else
    {
      *(_QWORD *)(v171 + v175) &= ~v174;
      v176 = *(_QWORD *)(v171 + 8 * v172) | v173;
    }
    *(_QWORD *)(v171 + 8 * v172) = v176;
  }
  v177 = *(unsigned int *)(v220 + 136) == v221;
  v178 = v207->u32[v200];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 48) + 24 * v178 + 8 * v208->i8[v200]) = v220;
  if (*(unsigned __int8 *)(v220 + 145) == 255)
  {
    v184 = v208->i8[v200];
    v204[v177] = v178;
    *(_BYTE *)(v203 + v177) = v184;
    if (!sub_239501BE4(v209, v207->i32[v200]))
      v209->i8[0] = 1;
    v182 = v227;
    v183 = v228;
    if (v227 != v228)
      goto LABEL_231;
  }
  else
  {
    v179 = v204[v177];
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 48) + 24 * v179 + 8 * *(char *)(v203 + v177)) = v209;
    v180 = *(_BYTE *)(v203 + v177);
    v181 = v208->i8[v200];
    v204[v177] = v178;
    *(_BYTE *)(v203 + v177) = v181;
    v207->i32[v200] = v179;
    v208->i8[v200] = v180;
    v182 = v227;
    v183 = v228;
    if (v227 == v228)
      goto LABEL_232;
    do
    {
LABEL_231:
      sub_239501BBC(*(_QWORD *)v182, *((_DWORD *)v182 + 2), *((_DWORD *)v182 + 3));
      v182 += 16;
    }
    while (v182 != v183);
  }
LABEL_232:
  v185 = (unsigned int *)v224;
  if (v224 != (char *)v225)
  {
    v186 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 24);
    do
    {
      *(_DWORD *)(v186 + 12 * *v185 + 4 * *((char *)v185 + 4)) = v185[2];
      v185 += 3;
    }
    while (v185 != v225);
  }
  v188 = *(char **)(v3 + 120);
  v187 = *(char **)(v3 + 128);
  while (v188 != v187)
  {
    if (*(_DWORD *)v188 == v205)
    {
      v190 = *((_DWORD *)v188 + 6);
      if (v190)
      {
        if (v190 != 2)
        {
          if (v190 == 1)
          {
            v191 = v187 - (v188 + 32);
            if (v187 != v188 + 32)
              memmove(v188, v188 + 32, v191 - 4);
            v187 = &v188[v191];
            *(_QWORD *)(v3 + 128) = &v188[v191];
          }
          continue;
        }
        *((_DWORD *)v188 + 6) = 0;
        *(_DWORD *)v188 = v217;
      }
    }
    v188 += 32;
  }
  if (v224)
    operator delete(v224);
  v2 = v201;
  v1 = v202;
  if (v227)
    operator delete(v227);
  return v1 != v2;
}

void sub_2394FE2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(_QWORD *)(v1 - 128) = v3;
    operator delete(v3);
    v4 = *(void **)(v1 - 112);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(void **)(v1 - 112);
    if (!v4)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 - 104) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2394FE330(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (v5 == v4 << 6)
  {
    if ((uint64_t)(v5 + 1) < 0)
      sub_2394189F8();
    v7 = v4 << 7;
    if (v7 <= (v5 & 0xFFFFFFFFFFFFFFC0) + 64)
      v7 = (v5 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v5 <= 0x3FFFFFFFFFFFFFFELL)
      v8 = v7;
    else
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    sub_2394187EC((uint64_t)a1, v8);
    v6 = a1[1];
  }
  a1[1] = v6 + 1;
  *(_QWORD *)(*a1 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v6);
  v9 = (char *)a1[3];
  v10 = &v9[24 * a2];
  v12 = (char *)a1[4];
  v11 = a1[5];
  if ((unint64_t)v12 < v11)
  {
    v13 = *(_OWORD *)v10;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v10 + 2);
    *(_OWORD *)v12 = v13;
    v14 = v12 + 24;
    goto LABEL_27;
  }
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 3) + 1;
  if (v15 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v9) >> 3);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_69;
    v18 = (char *)operator new(24 * v17);
  }
  else
  {
    v18 = 0;
  }
  v19 = &v18[8 * ((v12 - v9) >> 3)];
  v20 = *(_OWORD *)v10;
  v21 = &v18[24 * v17];
  *((_QWORD *)v19 + 2) = *((_QWORD *)v10 + 2);
  *(_OWORD *)v19 = v20;
  v14 = v19 + 24;
  if (v12 == v9)
  {
    a1[3] = v19;
    a1[4] = v14;
    a1[5] = v21;
LABEL_26:
    operator delete(v9);
    goto LABEL_27;
  }
  do
  {
    v22 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v19 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v19 - 24) = v22;
    v19 -= 24;
    v12 -= 24;
  }
  while (v12 != v9);
  v9 = (char *)a1[3];
  a1[3] = v19;
  a1[4] = v14;
  a1[5] = v21;
  if (v9)
    goto LABEL_26;
LABEL_27:
  v23 = a2;
  v24 = (char *)a1[6];
  a1[4] = v14;
  v25 = &v24[80 * v23];
  v27 = (char *)a1[7];
  v26 = a1[8];
  if ((unint64_t)v27 < v26)
  {
    *(_OWORD *)v27 = *(_OWORD *)v25;
    v28 = *((_OWORD *)v25 + 1);
    v29 = *((_OWORD *)v25 + 2);
    v30 = *((_OWORD *)v25 + 4);
    *((_OWORD *)v27 + 3) = *((_OWORD *)v25 + 3);
    *((_OWORD *)v27 + 4) = v30;
    *((_OWORD *)v27 + 1) = v28;
    *((_OWORD *)v27 + 2) = v29;
    v31 = v27 + 80;
    goto LABEL_45;
  }
  v32 = 0xCCCCCCCCCCCCCCCDLL * ((v27 - v24) >> 4) + 1;
  if (v32 > 0x333333333333333)
    sub_2394189F8();
  v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - (_QWORD)v24) >> 4);
  if (2 * v33 > v32)
    v32 = 2 * v33;
  if (v33 >= 0x199999999999999)
    v34 = 0x333333333333333;
  else
    v34 = v32;
  if (v34)
  {
    if (v34 <= 0x333333333333333)
    {
      v35 = (char *)operator new(80 * v34);
      goto LABEL_39;
    }
LABEL_69:
    sub_239418A80();
  }
  v35 = 0;
LABEL_39:
  v36 = &v35[16 * ((v27 - v24) >> 4)];
  v37 = &v35[80 * v34];
  *(_OWORD *)v36 = *(_OWORD *)v25;
  v38 = *((_OWORD *)v25 + 1);
  v39 = *((_OWORD *)v25 + 2);
  v40 = *((_OWORD *)v25 + 4);
  *((_OWORD *)v36 + 3) = *((_OWORD *)v25 + 3);
  *((_OWORD *)v36 + 4) = v40;
  *((_OWORD *)v36 + 1) = v38;
  *((_OWORD *)v36 + 2) = v39;
  v31 = v36 + 80;
  if (v27 == v24)
  {
    a1[6] = v36;
    a1[7] = v31;
    a1[8] = v37;
LABEL_44:
    operator delete(v24);
    goto LABEL_45;
  }
  do
  {
    *((_OWORD *)v36 - 5) = *((_OWORD *)v27 - 5);
    v41 = *((_OWORD *)v27 - 4);
    v42 = *((_OWORD *)v27 - 3);
    v43 = *((_OWORD *)v27 - 1);
    *((_OWORD *)v36 - 2) = *((_OWORD *)v27 - 2);
    *((_OWORD *)v36 - 1) = v43;
    *((_OWORD *)v36 - 4) = v41;
    *((_OWORD *)v36 - 3) = v42;
    v36 -= 80;
    v27 -= 80;
  }
  while (v27 != v24);
  v24 = (char *)a1[6];
  a1[6] = v36;
  a1[7] = v31;
  a1[8] = v37;
  if (v24)
    goto LABEL_44;
LABEL_45:
  v44 = a1[9];
  a1[7] = v31;
  v45 = *(_QWORD *)(v44 + 8 * (v23 >> 6));
  v46 = a1[10];
  v47 = a1[11];
  if (v46 == v47 << 6)
  {
    if ((uint64_t)(v46 + 1) < 0)
      goto LABEL_68;
    v48 = v47 << 7;
    if (v48 <= (v46 & 0xFFFFFFFFFFFFFFC0) + 64)
      v48 = (v46 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v46 <= 0x3FFFFFFFFFFFFFFELL)
      v49 = v48;
    else
      v49 = 0x7FFFFFFFFFFFFFFFLL;
    sub_2394187EC((uint64_t)(a1 + 9), v49);
    v44 = a1[9];
    v46 = a1[10];
  }
  v50 = 1 << v23;
  a1[10] = v46 + 1;
  v51 = v46 >> 6;
  v52 = 1 << v46;
  if ((v45 & (1 << v23)) != 0)
    v53 = *(_QWORD *)(v44 + 8 * v51) | v52;
  else
    v53 = *(_QWORD *)(v44 + 8 * v51) & ~v52;
  *(_QWORD *)(v44 + 8 * v51) = v53;
  v54 = a1[12];
  v55 = a1[13];
  v56 = *(_QWORD *)(v54 + 8 * (v23 >> 6));
  v57 = a1[14];
  if (v55 != v57 << 6)
    goto LABEL_64;
  if ((uint64_t)(v55 + 1) < 0)
LABEL_68:
    sub_2394189F8();
  v58 = v57 << 7;
  if (v58 <= (v55 & 0xFFFFFFFFFFFFFFC0) + 64)
    v58 = (v55 & 0xFFFFFFFFFFFFFFC0) + 64;
  if (v55 <= 0x3FFFFFFFFFFFFFFELL)
    v59 = v58;
  else
    v59 = 0x7FFFFFFFFFFFFFFFLL;
  sub_2394187EC((uint64_t)(a1 + 12), v59);
  v54 = a1[12];
  v55 = a1[13];
LABEL_64:
  a1[13] = v55 + 1;
  v60 = v55 >> 6;
  v61 = 1 << v55;
  if ((v56 & v50) != 0)
    v62 = *(_QWORD *)(v54 + 8 * v60) | v61;
  else
    v62 = *(_QWORD *)(v54 + 8 * v60) & ~v61;
  *(_QWORD *)(v54 + 8 * v60) = v62;
  return v5;
}

uint64_t sub_2394FE74C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _OWORD *v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  char *v68;
  void **v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  _OWORD *v114;
  char *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  _QWORD *v131;
  char *v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  __int128 *v139;
  uint64_t v140;
  __int128 v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _OWORD *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _BYTE *v163;
  _QWORD *v164;
  char *v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  char *v172;
  uint64_t v173;
  __int128 v174;
  _QWORD *v175;
  uint64_t v176;
  void **v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  _QWORD **v181;
  _QWORD *v182;
  void **v183;
  unint64_t *v184;
  unint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  _BYTE *v197;
  int v198;
  uint64_t v199;
  int v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  int *v208;
  int v209;
  unsigned int v210;
  int32x2_t **v211;
  int32x2_t *v212;
  int32x2_t *v213;
  unsigned __int32 v214;
  int32x2_t *v215;
  uint64_t v216;
  __int32 v217;
  int32x2_t *v218;
  uint64_t *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  BOOL v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  int *v227;
  int v228;
  int32x2_t **v229;
  int32x2_t *v230;
  int32x2_t *v231;
  unsigned __int32 v232;
  int32x2_t *v233;
  uint64_t v234;
  __int32 v235;
  int32x2_t *v236;
  uint64_t *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t *v243;
  _BYTE **v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  BOOL v250;
  _QWORD *v251;
  float64x2_t *v252;
  float64x2_t v257;
  float64x2_t v258;
  uint64_t v259;
  int32x2_t *v260;
  uint64_t v261;
  int v262;
  int v263;
  _DWORD *v264;
  int v265;
  char *v266;
  char *v267;
  int v268;
  unsigned int v269;
  int v270;
  uint64_t v271;
  int v272;
  unsigned int v273;
  char v274;
  char *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  int v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  _DWORD *v287;
  _DWORD *v288;
  _DWORD *v289;
  _DWORD *v290;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  _DWORD *v297;
  int v298;
  int v299;
  unsigned int v300;
  char *v301;
  int v302;
  uint64_t v303;
  int v304;
  unsigned int v305;
  char v306;
  char *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  uint64_t v316;
  uint64_t v317;
  _DWORD *v318;
  _DWORD *v319;
  _DWORD *v320;
  _DWORD *v321;
  void *v323;
  char *v324;
  uint64_t v325;
  int *v326;
  int *v327;
  int v328;
  int64_t v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  unint64_t v336;
  _QWORD *v337;
  _QWORD *v338;
  _QWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  double v342;
  _BOOL4 v343;
  uint64_t *v344;
  uint64_t v345;
  _QWORD *v346;
  _QWORD *v347;
  _BOOL4 v348;
  unsigned int v349;
  int v350;
  int v351;
  _QWORD *v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  int v357;
  BOOL v358;
  BOOL v359;
  uint64_t *v360;
  void *v361[2];
  void *v362[2];
  __int128 v363;
  void *__p;
  char *v365;
  char *v366;
  uint64_t v367;

  v2 = a1;
  v367 = *MEMORY[0x24BDAC8D0];
  a1[3] = a2;
  sub_2394FBEE0(a1);
  v3 = v2[3];
  v5 = *(_DWORD *)(v3 + 128);
  v4 = v3 + 128;
  v6 = ((unint64_t)v5 >> 3) & 0x1FFFFFF8;
  v7 = (1 << v5) & *(_QWORD *)(*(_QWORD *)(*v2 + 72) + v6);
  v8 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 72);
  v9 = (*(_QWORD *)(v8 + v6) & (1 << v5)) != 0
    && ((*(_QWORD *)(v8 + (((unint64_t)*(unsigned int *)(v3 + 132) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v3 + 132)) & 1) != 0
    && *(unsigned __int8 *)(v3 + 145) != 255;
  _ZF = v7 == 0;
  v10 = v7 == 0;
  v11 = !_ZF;
  v12 = *(unsigned int *)(v4 + 4 * v11);
  v13 = *(_DWORD *)(v4 + 4 * v10);
  sub_2394FC77C(v2, v13);
  v14 = v2[15];
  v15 = v2[16];
  if (*(_BYTE *)(v2[4] + 6))
  {
    if (v14 != v15)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (v14 != v15)
    goto LABEL_192;
  v16 = v2[3];
  if (v9)
  {
    v17 = *(_QWORD *)(v2[1] + 48);
    v18 = v17 + 24 * *(unsigned int *)(v16 + 136);
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v18
                                         + 8
                                         * (char)(*(_BYTE *)(v16 + 144)
                                                + 1
                                                - 3
                                                * (((21846 * (*(char *)(v16 + 144) + 1)) >> 16)
                                                 + (21846 * (*(char *)(v16 + 144) + 1) < 0))))
                             + 145) == 255
       && *(unsigned __int8 *)(*(_QWORD *)(v18
                                         + ((uint64_t)((unint64_t)(*(char *)(v16 + 144)
                                                                       + 2
                                                                       - 3
                                                                       * (((21846
                                                                                        * (*(char *)(v16 + 144) + 2)) >> 16)
                                                                        + ((21846
                                                                                        * (*(char *)(v16 + 144) + 2)) >> 31))) << 56) >> 53))
                             + 145) == 255;
    v20 = *(char *)(v16 + 145);
    v21 = v17 + 24 * *(unsigned int *)(v16 + 140);
    if (*(unsigned __int8 *)(*(_QWORD *)(v21
                                        + ((uint64_t)((unint64_t)(v20
                                                                      + 1
                                                                      - 3
                                                                      * (((21846 * (v20 + 1)) >> 16)
                                                                       + ((21846 * (v20 + 1)) >> 31))) << 56) >> 53))
                            + 145) == 255)
    {
      if (((v19 ^ (*(unsigned __int8 *)(*(_QWORD *)(v21
                                                   + ((uint64_t)((unint64_t)(v20
                                                                                 + 2
                                                                                 - 3
                                                                                 * (((21846 * (v20 + 2)) >> 16)
                                                                                  + ((21846 * (v20 + 2)) >> 31))) << 56) >> 53))
                                       + 145) == 255)) & 1) == 0)
        goto LABEL_408;
    }
    else if (!v19)
    {
      goto LABEL_408;
    }
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 72);
  if (((*(_QWORD *)(v22 + (((unint64_t)*(unsigned int *)(v16 + 128) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v16 + 128)) & 1) == 0
    && ((*(_QWORD *)(v22 + (((unint64_t)*(unsigned int *)(v16 + 132) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v16 + 132)) & 1) == 0
    && v2[6] - v2[5] == 16
    && v2[9] - v2[8] == 16)
  {
    return sub_2395005BC((uint64_t)v2);
  }
  if (((*(_QWORD *)(*(_QWORD *)(*v2 + 72) + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0
    && v2[3 * v11 + 5] == v2[3 * v11 + 6])
  {
LABEL_408:
    sub_239503560((uint64_t *)v2[2], v16);
    v340 = (_QWORD *)v2[13];
    v339 = v2 + 13;
    *((_DWORD *)v339 - 4) = 0;
    *(v339 - 10) = 0;
    *(v339 - 7) = *(v339 - 8);
    *(v339 - 4) = *(v339 - 5);
    sub_239421038((uint64_t)(v339 - 1), v340);
    *(v339 - 1) = v339;
    *v339 = 0;
    v339[1] = 0;
    v339[3] = v339[2];
    return *((unsigned int *)v339 - 4);
  }
LABEL_27:
  if ((sub_239500620(v2) & 1) == 0)
    goto LABEL_192;
LABEL_28:
  if (((*(_QWORD *)(*(_QWORD *)(*v2 + 72) + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0
    && v2[3 * v11 + 5] == v2[3 * v11 + 6])
  {
    v240 = v2[3];
    v242 = *(unsigned int *)(v240 + 136);
    v241 = *(unsigned int *)(v240 + 140);
    v243 = (uint64_t *)v2[1];
    v244 = (_BYTE **)(v243[6] + 24 * v242);
    **v244 = 1;
    *v244[1] = 1;
    *v244[2] = 1;
    v245 = *v243;
    *(_QWORD *)(v245 + ((v242 >> 3) & 0x1FFFFFF8)) |= 1 << v242;
    LODWORD(v242) = *((_DWORD *)v2 + 22);
    *(_QWORD *)(v245 + ((v241 >> 3) & 0x1FFFFFF8)) |= 1 << v241;
    v176 = (v242 + 2);
    *((_DWORD *)v2 + 22) = 0;
    v2[3] = 0;
    v2[6] = v2[5];
    v2[9] = v2[8];
    v247 = (_QWORD *)v2[13];
    v246 = v2 + 13;
    sub_239421038((uint64_t)(v246 - 1), v247);
    *(v246 - 1) = v246;
    *v246 = 0;
    v246[1] = 0;
    v246[3] = v246[2];
    return v176;
  }
  v349 = v11;
  v350 = v12;
  v348 = v9;
  if (*(double *)(v2[4] + 24) > 0.0)
  {
    v24 = v2[5];
    v25 = v2[6];
    if (v24 != v25)
    {
      while (1)
      {
        v26 = *(_QWORD *)(*(_QWORD *)v24 + 24) + 12 * *(unsigned int *)(v24 + 8);
        if (sub_239502EE8((double *)(v2[3] + 96), (double *)(*(_QWORD *)(*v2 + 24) + 24 * *(unsigned int *)(v26 + 4 * *(char *)(v24 + 14))), (double *)(*(_QWORD *)(*v2 + 24) + 24 * *(unsigned int *)(v26 + 4 * *(char *)(v24 + 13))), *(double *)(v2[4] + 24)))
        {
          break;
        }
        v24 += 16;
        if (v24 == v25)
          goto LABEL_34;
      }
LABEL_192:
      sub_239503560((uint64_t *)v2[2], v2[3]);
      v175 = (_QWORD *)v2[13];
      *((_DWORD *)v2 + 22) = 0;
      v2[3] = 0;
      v2[6] = v2[5];
      v2[9] = v2[8];
      sub_239421038((uint64_t)(v2 + 12), v175);
      v2[12] = (uint64_t)(v2 + 13);
      v2[13] = 0;
      v2[14] = 0;
      v2[16] = v2[15];
      return *((unsigned int *)v2 + 22);
    }
LABEL_34:
    v27 = v2[8];
    for (i = v2[9]; v27 != i; v27 += 16)
    {
      v29 = *(_QWORD *)(*(_QWORD *)v27 + 24) + 12 * *(unsigned int *)(v27 + 8);
      if (sub_239502EE8((double *)(v2[3] + 96), (double *)(*(_QWORD *)(*v2 + 24) + 24 * *(unsigned int *)(v29 + 4 * *(char *)(v27 + 14))), (double *)(*(_QWORD *)(*v2 + 24) + 24 * *(unsigned int *)(v29 + 4 * *(char *)(v27 + 13))), *(double *)(v2[4] + 24)))
      {
        goto LABEL_192;
      }
    }
  }
  v30 = v2[3];
  v31 = *(_QWORD *)(*v2 + 24) + 24 * v13;
  v32 = *(_OWORD *)(v30 + 96);
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v30 + 112);
  *(_OWORD *)v31 = v32;
  v33 = (_OWORD *)v2[3];
  v34 = (_OWORD *)(*(_QWORD *)(*v2 + 48) + 80 * v13);
  v35 = v33[5];
  v37 = v33[2];
  v36 = v33[3];
  v34[3] = v33[4];
  v34[4] = v35;
  v34[1] = v37;
  v34[2] = v36;
  *v34 = v33[1];
  v352 = v2 + 5;
  v38 = &v2[3 * v11 + 5];
  v39 = *v38;
  v40 = v38[1];
  if (v39 != v40)
  {
    v41 = *(_QWORD *)(v2[1] + 24);
    do
    {
      *(_DWORD *)(v41
                + 12 * *(unsigned int *)(v39 + 8)
                + 4 * (char)(3 - (*(_BYTE *)(v39 + 14) + *(_BYTE *)(v39 + 13)))) = v13;
      v39 += 16;
    }
    while (v39 != v40);
  }
  v42 = 0;
  *(_OWORD *)v362 = 0u;
  v363 = 0u;
  *(_OWORD *)v361 = 0u;
  __p = (void *)0x100000000;
  v360 = v2;
  v354 = v13;
  while (2)
  {
    v43 = *((int *)&__p + v42);
    v44 = v2[3];
    v45 = *(unsigned int *)(v44 + 4 * (char)v43 + 128);
    v355 = v42;
    if (((*(_QWORD *)(*(_QWORD *)(*v2 + 72) + ((v45 >> 3) & 0x1FFFFFF8)) >> v45) & 1) != 0)
    {
      v46 = 1 - v43;
      v47 = v2[1];
      v48 = *(_DWORD *)(v44 + 136);
      v49 = *(_DWORD *)(v44 + 4 * (char)(1 - v43) + 128);
      v50 = (_DWORD *)(*(_QWORD *)(v47 + 24) + 12 * v48);
      if (*v50 == v49)
      {
        v51 = 0;
      }
      else if (v50[1] == v49)
      {
        v51 = 1;
      }
      else
      {
        _ZF = v50[2] == v49;
        v51 = 2;
        if (!_ZF)
          v51 = -1;
      }
      v69 = &v361[3 * (int)v43];
      v70 = (uint64_t *)(v69 + 1);
      v71 = v69 + 2;
      v72 = *(_QWORD *)(*(_QWORD *)(v47 + 48) + 24 * v48 + 8 * v51);
      v73 = v69[1];
      v74 = v69[2];
      if (v73 < (_QWORD *)v74)
      {
        *v73 = v72;
        v75 = v73 + 1;
        *v70 = (uint64_t)(v73 + 1);
        v76 = v360;
        v77 = v360[3];
        if (*(unsigned __int8 *)(v77 + 145) == 255)
          goto LABEL_115;
        goto LABEL_85;
      }
      v78 = *v69;
      v79 = (char *)v73 - (_BYTE *)*v69;
      v80 = v79 >> 3;
      v81 = (v79 >> 3) + 1;
      if (v81 >> 61)
        goto LABEL_430;
      v82 = v74 - (_BYTE *)v78;
      if (v82 >> 2 > v81)
        v81 = v82 >> 2;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v83 = v81;
      if (v83)
      {
        if (v83 >> 61)
          goto LABEL_432;
        v84 = operator new(8 * v83);
        v85 = &v84[8 * v80];
        *v85 = v72;
        v75 = v85 + 1;
        if (v73 != v78)
        {
LABEL_73:
          v86 = (char *)(v73 - 1) - (char *)v78;
          if (v86 < 0x58)
            goto LABEL_438;
          if ((unint64_t)((char *)v73 - &v84[v79]) < 0x20)
            goto LABEL_438;
          v87 = (v86 >> 3) + 1;
          v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
          v89 = &v73[v88 / 0xFFFFFFFFFFFFFFF8];
          v85 = (_QWORD *)((char *)v85 - v88);
          v90 = &v84[8 * v80 - 16];
          v91 = (__int128 *)(v73 - 2);
          v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v93 = *v91;
            *(v90 - 1) = *(v91 - 1);
            *v90 = v93;
            v90 -= 2;
            v91 -= 2;
            v92 -= 4;
          }
          while (v92);
          v73 = v89;
          if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_438:
            do
            {
              v94 = *--v73;
              *--v85 = v94;
            }
            while (v73 != v78);
          }
          v73 = *v69;
          *v69 = v85;
          *v71 = &v84[8 * v83];
          if (!v73)
          {
LABEL_84:
            v70 = (uint64_t *)(v69 + 1);
            v76 = v360;
            v46 = 1 - v43;
            v69[1] = v75;
            v77 = v360[3];
            if (*(unsigned __int8 *)(v77 + 145) == 255)
            {
LABEL_115:
              v119 = &v352[3 * (int)v43];
              v120 = *v119;
              v121 = v119[1];
              while (1)
              {
                if (v120 == v121)
                  goto LABEL_41;
                v123 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v120 + 48)
                                 + 24 * *(unsigned int *)(v120 + 8)
                                 + 8 * *(char *)(v120 + 14));
                if ((unint64_t)v75 < *v71)
                {
                  *v75 = v123;
                  v122 = (uint64_t)(v75 + 1);
                  goto LABEL_117;
                }
                v124 = (char *)*v69;
                v125 = (char *)v75 - (_BYTE *)*v69;
                v126 = v125 >> 3;
                v127 = (v125 >> 3) + 1;
                if (v127 >> 61)
                  sub_2394189F8();
                v128 = *v71 - (_QWORD)v124;
                if (v128 >> 2 > v127)
                  v127 = v128 >> 2;
                if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8)
                  v129 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v129 = v127;
                if (v129)
                {
                  if (v129 >> 61)
                    sub_239418A80();
                  v130 = operator new(8 * v129);
                  v131 = &v130[8 * v126];
                  v132 = &v130[8 * v129];
                  *v131 = v123;
                  v122 = (uint64_t)(v131 + 1);
                  if (v75 != (_QWORD *)v124)
                  {
LABEL_129:
                    v133 = (char *)(v75 - 1) - v124;
                    if (v133 < 0x168)
                    {
                      v134 = (char *)v75;
                      goto LABEL_131;
                    }
                    if (&v130[v125 - 8 - (v133 & 0xFFFFFFFFFFFFFFF8)] > &v130[v125 - 8])
                    {
                      v134 = (char *)v75;
                      goto LABEL_131;
                    }
                    if ((_QWORD *)((char *)v75 - (v133 & 0xFFFFFFFFFFFFFFF8) - 8) > v75 - 1)
                    {
                      v134 = (char *)v75;
                      goto LABEL_131;
                    }
                    if ((unint64_t)((char *)v75 - v130 - v125) < 0x20)
                    {
                      v134 = (char *)v75;
                      goto LABEL_131;
                    }
                    v136 = (v133 >> 3) + 1;
                    v137 = 8 * (v136 & 0x3FFFFFFFFFFFFFFCLL);
                    v134 = (char *)&v75[v137 / 0xFFFFFFFFFFFFFFF8];
                    v131 = (_QWORD *)((char *)v131 - v137);
                    v138 = &v130[8 * v126 - 16];
                    v139 = (__int128 *)(v75 - 2);
                    v140 = v136 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v141 = *v139;
                      *(v138 - 1) = *(v139 - 1);
                      *v138 = v141;
                      v138 -= 2;
                      v139 -= 2;
                      v140 -= 4;
                    }
                    while (v140);
                    if (v136 != (v136 & 0x3FFFFFFFFFFFFFFCLL))
                    {
                      do
                      {
LABEL_131:
                        v135 = *((_QWORD *)v134 - 1);
                        v134 -= 8;
                        *--v131 = v135;
                      }
                      while (v134 != v124);
                    }
                    v75 = *v69;
                    *v69 = v131;
                    *v71 = v132;
                    if (!v75)
                      goto LABEL_137;
                    goto LABEL_136;
                  }
                }
                else
                {
                  v130 = 0;
                  v131 = (_QWORD *)(8 * v126);
                  v132 = 0;
                  *(_QWORD *)(8 * v126) = v123;
                  v122 = 8 * v126 + 8;
                  if (v75 != (_QWORD *)v124)
                    goto LABEL_129;
                }
                *v69 = v131;
                *v71 = v132;
LABEL_136:
                operator delete(v75);
LABEL_137:
                v70 = (uint64_t *)(v69 + 1);
LABEL_117:
                *v70 = v122;
                v120 += 16;
                v75 = (_QWORD *)v122;
              }
            }
LABEL_85:
            v95 = v76[1];
            v96 = *(_DWORD *)(v77 + 140);
            v97 = *(_DWORD *)(v77 + 4 * v46 + 128);
            v98 = (_DWORD *)(*(_QWORD *)(v95 + 24) + 12 * v96);
            if (*v98 == v97)
            {
              v99 = 0;
            }
            else if (v98[1] == v97)
            {
              v99 = 1;
            }
            else
            {
              _ZF = v98[2] == v97;
              v99 = 2;
              if (!_ZF)
                v99 = -1;
            }
            v100 = *(_QWORD *)(*(_QWORD *)(v95 + 48) + 24 * v96 + 8 * v99);
            v101 = (char *)*v70;
            if ((unint64_t)*v70 < *v71)
            {
              *(_QWORD *)v101 = v100;
              v75 = v101 + 8;
LABEL_114:
              *v70 = (uint64_t)v75;
              goto LABEL_115;
            }
            v102 = (char *)*v69;
            v103 = v101 - (_BYTE *)*v69;
            v104 = v103 >> 3;
            v105 = (v103 >> 3) + 1;
            if (!(v105 >> 61))
            {
              v106 = *v71 - (_QWORD)v102;
              if (v106 >> 2 > v105)
                v105 = v106 >> 2;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
                v107 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (!v107)
              {
                v108 = 0;
                v109 = (_QWORD *)(8 * v104);
                *(_QWORD *)(8 * v104) = v100;
                v75 = (_QWORD *)(8 * v104 + 8);
                if (v101 != v102)
                  goto LABEL_102;
                goto LABEL_111;
              }
              if (!(v107 >> 61))
              {
                v108 = operator new(8 * v107);
                v109 = &v108[8 * v104];
                *v109 = v100;
                v75 = v109 + 1;
                if (v101 != v102)
                {
LABEL_102:
                  v110 = v101 - 8 - v102;
                  if (v110 < 0x58)
                    goto LABEL_439;
                  if ((unint64_t)(v101 - &v108[v103]) < 0x20)
                    goto LABEL_439;
                  v111 = (v110 >> 3) + 1;
                  v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
                  v113 = &v101[-v112];
                  v109 = (_QWORD *)((char *)v109 - v112);
                  v114 = &v108[8 * v104 - 16];
                  v115 = v101 - 16;
                  v116 = v111 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v117 = *(_OWORD *)v115;
                    *(v114 - 1) = *((_OWORD *)v115 - 1);
                    *v114 = v117;
                    v114 -= 2;
                    v115 -= 32;
                    v116 -= 4;
                  }
                  while (v116);
                  v101 = v113;
                  if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_439:
                    do
                    {
                      v118 = *((_QWORD *)v101 - 1);
                      v101 -= 8;
                      *--v109 = v118;
                    }
                    while (v101 != v102);
                  }
                  v101 = (char *)*v69;
                  *v69 = v109;
                  *v71 = &v108[8 * v107];
                  if (!v101)
                    goto LABEL_113;
                  goto LABEL_112;
                }
LABEL_111:
                *v69 = v109;
                *v71 = &v108[8 * v107];
                if (!v101)
                {
LABEL_113:
                  v70 = (uint64_t *)(v69 + 1);
                  goto LABEL_114;
                }
LABEL_112:
                operator delete(v101);
                goto LABEL_113;
              }
LABEL_432:
              sub_239418A80();
            }
LABEL_430:
            sub_2394189F8();
          }
LABEL_83:
          operator delete(v73);
          goto LABEL_84;
        }
      }
      else
      {
        v84 = 0;
        v85 = (_QWORD *)(8 * v80);
        *(_QWORD *)(8 * v80) = v72;
        v75 = (_QWORD *)(8 * v80 + 8);
        if (v73 != v78)
          goto LABEL_73;
      }
      *v69 = v85;
      *v71 = &v84[8 * v83];
      if (!v73)
        goto LABEL_84;
      goto LABEL_83;
    }
    v52 = v352[3 * v43];
    v53 = &v361[3 * v43];
    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 48) + 24 * *(unsigned int *)(v52 + 8) + 8 * *(char *)(v52 + 13));
    v55 = (uint64_t *)(v53 + 1);
    v56 = (char *)v53[1];
    v58 = v53 + 2;
    v57 = (char *)v53[2];
    if (v56 >= v57)
    {
      v60 = (char *)*v53;
      v61 = v56 - (_BYTE *)*v53;
      v62 = v61 >> 3;
      v63 = (v61 >> 3) + 1;
      if (v63 >> 61)
        sub_2394189F8();
      v64 = v57 - v60;
      if (v64 >> 2 > v63)
        v63 = v64 >> 2;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
        v65 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        if (v65 >> 61)
          sub_239418A80();
        v66 = v65;
        v67 = operator new(8 * v65);
        v65 = v66;
        v68 = &v67[8 * v62];
        *(_QWORD *)v68 = v54;
        v59 = v68 + 8;
        if (v56 == v60)
          goto LABEL_156;
      }
      else
      {
        v67 = 0;
        v68 = (char *)(8 * v62);
        *(_QWORD *)(8 * v62) = v54;
        v59 = (char *)(8 * v62 + 8);
        if (v56 == v60)
        {
LABEL_156:
          *v53 = v68;
          *v58 = &v67[8 * v65];
          if (v56)
            operator delete(v56);
          v55 = (uint64_t *)(v53 + 1);
          goto LABEL_159;
        }
      }
      v142 = v56 - 8 - v60;
      if (v142 < 0x58)
        goto LABEL_440;
      if ((unint64_t)(v56 - &v67[v61]) < 0x20)
        goto LABEL_440;
      v143 = (v142 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v145 = &v56[-v144];
      v68 -= v144;
      v146 = &v67[8 * v62 - 16];
      v147 = v56 - 16;
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v149 = *(_OWORD *)v147;
        *(v146 - 1) = *((_OWORD *)v147 - 1);
        *v146 = v149;
        v146 -= 2;
        v147 -= 32;
        v148 -= 4;
      }
      while (v148);
      v56 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_440:
        do
        {
          v150 = *((_QWORD *)v56 - 1);
          v56 -= 8;
          *((_QWORD *)v68 - 1) = v150;
          v68 -= 8;
        }
        while (v56 != v60);
      }
      v56 = (char *)*v53;
      goto LABEL_156;
    }
    *(_QWORD *)v56 = v54;
    v59 = v56 + 8;
LABEL_159:
    *v55 = (uint64_t)v59;
    v151 = &v352[3 * (int)v43];
    v154 = v151[1];
    v153 = v151 + 1;
    v152 = v154;
    while (v52 != v152)
    {
      v156 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v52 + 48)
                       + 24 * *(unsigned int *)(v52 + 8)
                       + 8 * *(char *)(v52 + 14));
      if ((unint64_t)v59 < *v58)
      {
        *(_QWORD *)v59 = v156;
        v155 = (uint64_t)(v59 + 8);
        goto LABEL_161;
      }
      v157 = (char *)*v53;
      v158 = v59 - (_BYTE *)*v53;
      v159 = v158 >> 3;
      v160 = (v158 >> 3) + 1;
      if (v160 >> 61)
        sub_2394189F8();
      v161 = *v58 - (_QWORD)v157;
      if (v161 >> 2 > v160)
        v160 = v161 >> 2;
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8)
        v162 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v162 = v160;
      if (v162)
      {
        if (v162 >> 61)
          sub_239418A80();
        v163 = operator new(8 * v162);
        v164 = &v163[8 * v159];
        v165 = &v163[8 * v162];
        *v164 = v156;
        v155 = (uint64_t)(v164 + 1);
        if (v59 != v157)
        {
LABEL_173:
          v166 = v59 - 8 - v157;
          if (v166 < 0x168)
          {
            v167 = v59;
            goto LABEL_175;
          }
          if (&v163[v158 - 8 - (v166 & 0xFFFFFFFFFFFFFFF8)] > &v163[v158 - 8])
          {
            v167 = v59;
            goto LABEL_175;
          }
          if (&v59[-(v166 & 0xFFFFFFFFFFFFFFF8) - 8] > v59 - 8)
          {
            v167 = v59;
            goto LABEL_175;
          }
          if ((unint64_t)(v59 - v163 - v158) < 0x20)
          {
            v167 = v59;
            goto LABEL_175;
          }
          v169 = (v166 >> 3) + 1;
          v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
          v167 = &v59[-v170];
          v164 = (_QWORD *)((char *)v164 - v170);
          v171 = &v163[8 * v159 - 16];
          v172 = v59 - 16;
          v173 = v169 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v174 = *(_OWORD *)v172;
            *(v171 - 1) = *((_OWORD *)v172 - 1);
            *v171 = v174;
            v171 -= 2;
            v172 -= 32;
            v173 -= 4;
          }
          while (v173);
          if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_175:
              v168 = *((_QWORD *)v167 - 1);
              v167 -= 8;
              *--v164 = v168;
            }
            while (v167 != v157);
          }
          v59 = (char *)*v53;
          *v53 = v164;
          *v58 = v165;
          if (!v59)
            goto LABEL_181;
          goto LABEL_180;
        }
      }
      else
      {
        v163 = 0;
        v164 = (_QWORD *)(8 * v159);
        v165 = 0;
        *(_QWORD *)(8 * v159) = v156;
        v155 = 8 * v159 + 8;
        if (v59 != v157)
          goto LABEL_173;
      }
      *v53 = v164;
      *v58 = v165;
LABEL_180:
      operator delete(v59);
LABEL_181:
      v55 = (uint64_t *)(v53 + 1);
LABEL_161:
      *v55 = v155;
      v52 += 16;
      v152 = *v153;
      v59 = (char *)v155;
    }
LABEL_41:
    v42 = v355 + 1;
    v2 = v360;
    if (v355 != 1)
      continue;
    break;
  }
  v177 = &v361[3 * v349];
  v178 = (uint64_t *)*v177;
  v179 = (uint64_t *)v177[1];
  if (*v177 != v179)
  {
    do
      sub_239501BBC(*v178++, v350, v354);
    while (v178 != v179);
  }
  v180 = 0;
  v181 = (_QWORD **)(v360 + 12);
  v182 = v360 + 13;
  do
  {
    v183 = &v361[3 * v180];
    v184 = (unint64_t *)*v183;
    v185 = (unint64_t *)v183[1];
    while (v184 != v185)
    {
      v186 = *v184;
      v187 = (_QWORD *)*v182;
      v188 = v360 + 13;
      v189 = v360 + 13;
      if (*v182)
      {
        while (1)
        {
          while (1)
          {
            v189 = v187;
            v190 = v187[4];
            if (v186 >= v190)
              break;
            v187 = (_QWORD *)*v189;
            v188 = v189;
            if (!*v189)
              goto LABEL_211;
          }
          if (v190 >= v186)
            break;
          v187 = (_QWORD *)v189[1];
          if (!v187)
          {
            v188 = v189 + 1;
            goto LABEL_211;
          }
        }
      }
      else
      {
LABEL_211:
        v191 = operator new(0x28uLL);
        v191[4] = v186;
        *v191 = 0;
        v191[1] = 0;
        v191[2] = v189;
        *v188 = v191;
        v192 = (_QWORD *)**v181;
        if (v192)
        {
          *v181 = v192;
          v191 = (_QWORD *)*v188;
        }
        v193 = (_QWORD *)*v182;
        _ZF = v191 == (_QWORD *)*v182;
        *((_BYTE *)v191 + 24) = _ZF;
        if (!_ZF)
        {
          do
          {
            v194 = v191[2];
            if (*(_BYTE *)(v194 + 24))
              break;
            v195 = *(_BYTE **)(v194 + 16);
            v196 = *(_QWORD *)v195;
            if (*(_QWORD *)v195 == v194)
            {
              v199 = *((_QWORD *)v195 + 1);
              if (!v199 || (v200 = *(unsigned __int8 *)(v199 + 24), v197 = (_BYTE *)(v199 + 24), v200))
              {
                if (*(_QWORD **)v194 == v191)
                {
                  *(_BYTE *)(v194 + 24) = 1;
                  v195[24] = 0;
                  v203 = *(_QWORD *)(v194 + 8);
                  *(_QWORD *)v195 = v203;
                  if (v203)
                    goto LABEL_228;
                }
                else
                {
                  v201 = *(uint64_t **)(v194 + 8);
                  v202 = *v201;
                  *(_QWORD *)(v194 + 8) = *v201;
                  if (v202)
                  {
                    *(_QWORD *)(v202 + 16) = v194;
                    v195 = *(_BYTE **)(v194 + 16);
                  }
                  v201[2] = (uint64_t)v195;
                  *(_QWORD *)(*(_QWORD *)(v194 + 16) + 8 * (**(_QWORD **)(v194 + 16) != v194)) = v201;
                  *v201 = v194;
                  *(_QWORD *)(v194 + 16) = v201;
                  v195 = (_BYTE *)v201[2];
                  v194 = *(_QWORD *)v195;
                  *((_BYTE *)v201 + 24) = 1;
                  v195[24] = 0;
                  v203 = *(_QWORD *)(v194 + 8);
                  *(_QWORD *)v195 = v203;
                  if (v203)
LABEL_228:
                    *(_QWORD *)(v203 + 16) = v195;
                }
                *(_QWORD *)(v194 + 16) = *((_QWORD *)v195 + 2);
                *(_QWORD *)(*((_QWORD *)v195 + 2) + 8 * (**((_QWORD **)v195 + 2) != (_QWORD)v195)) = v194;
                *(_QWORD *)(v194 + 8) = v195;
LABEL_200:
                *((_QWORD *)v195 + 2) = v194;
                break;
              }
            }
            else if (!v196 || (v198 = *(unsigned __int8 *)(v196 + 24), v197 = (_BYTE *)(v196 + 24), v198))
            {
              if (*(_QWORD **)v194 == v191)
              {
                v205 = v191[1];
                *(_QWORD *)v194 = v205;
                if (v205)
                {
                  *(_QWORD *)(v205 + 16) = v194;
                  v195 = *(_BYTE **)(v194 + 16);
                }
                v191[2] = v195;
                *(_QWORD *)(*(_QWORD *)(v194 + 16) + 8 * (**(_QWORD **)(v194 + 16) != v194)) = v191;
                v191[1] = v194;
                *(_QWORD *)(v194 + 16) = v191;
                v195 = (_BYTE *)v191[2];
                *((_BYTE *)v191 + 24) = 1;
                v195[24] = 0;
                v194 = *((_QWORD *)v195 + 1);
                v204 = *(_QWORD **)v194;
                *((_QWORD *)v195 + 1) = *(_QWORD *)v194;
                if (!v204)
                  goto LABEL_199;
              }
              else
              {
                *(_BYTE *)(v194 + 24) = 1;
                v195[24] = 0;
                v194 = *((_QWORD *)v195 + 1);
                v204 = *(_QWORD **)v194;
                *((_QWORD *)v195 + 1) = *(_QWORD *)v194;
                if (!v204)
                  goto LABEL_199;
              }
              v204[2] = v195;
LABEL_199:
              *(_QWORD *)(v194 + 16) = *((_QWORD *)v195 + 2);
              *(_QWORD *)(*((_QWORD *)v195 + 2) + 8 * (**((_QWORD **)v195 + 2) != (_QWORD)v195)) = v194;
              *(_QWORD *)v194 = v195;
              goto LABEL_200;
            }
            *(_BYTE *)(v194 + 24) = 1;
            v191 = v195;
            v195[24] = v195 == (_BYTE *)v193;
            *v197 = 1;
          }
          while (v195 != (_BYTE *)v193);
        }
        ++v360[14];
      }
      ++v184;
    }
    ++v180;
  }
  while (v180 != 2);
  v206 = *(unsigned int *)(v360[3] + 136);
  v207 = v360[1];
  v208 = (int *)(*(_QWORD *)(v207 + 24) + 12 * v206);
  v209 = *v208;
  if (*v208 != v350)
  {
    v210 = v354;
    if (v208[1] == v350)
    {
      v211 = (int32x2_t **)(*(_QWORD *)(v207 + 48) + 24 * v206);
      v212 = v211[1];
      if (v209 != v354)
        goto LABEL_255;
    }
    else
    {
      v221 = 2;
      if (v208[2] != v350)
        v221 = -1;
      v211 = (int32x2_t **)(*(_QWORD *)(v207 + 48) + 24 * v206);
      v212 = v211[v221];
      if (v209 != v354)
        goto LABEL_255;
    }
LABEL_241:
    v213 = *v211;
    if ((*v211)[18].u8[1] != 255)
      goto LABEL_242;
    goto LABEL_261;
  }
  v210 = v354;
  v211 = (int32x2_t **)(*(_QWORD *)(v207 + 48) + 24 * v206);
  v212 = *v211;
  if (v209 == v354)
    goto LABEL_241;
LABEL_255:
  if (v208[1] != v210)
  {
    _ZF = v208[2] == v210;
    v222 = 2;
    if (!_ZF)
      v222 = -1;
    v213 = v211[v222];
    if (v213[18].u8[1] != 255)
      goto LABEL_242;
LABEL_261:
    v223 = sub_239501BE4(v212, *(_DWORD *)(v360[3] + 136));
    v220 = 1;
    v219 = v360;
    if (!v223)
    {
      v212->i8[0] = 1;
      v220 = 0;
    }
    goto LABEL_263;
  }
  v213 = v211[1];
  if (v213[18].u8[1] == 255)
    goto LABEL_261;
LABEL_242:
  v214 = v213[17].u32[v213[17].i32[0] == (_DWORD)v206];
  if (v213[17].i32[0] == (_DWORD)v206)
    v215 = (int32x2_t *)((char *)v213 + 1);
  else
    v215 = v213;
  v216 = v215[18].i8[0];
  v217 = v212[17].i32[0];
  v212[17].i32[v217 != (_DWORD)v206] = v214;
  if (v217 == (_DWORD)v206)
    v218 = v212;
  else
    v218 = (int32x2_t *)((char *)v212 + 1);
  v218[18].i8[0] = v216;
  v219 = v360;
  *(_QWORD *)(*(_QWORD *)(v360[1] + 48) + 24 * v214 + 8 * v216) = v212;
  v220 = 1;
LABEL_263:
  v213->i8[0] = 1;
  v224 = (_QWORD *)v219[1];
  *(_QWORD *)(*v224 + ((v206 >> 3) & 0x1FFFFFF8)) |= 1 << v206;
  ++*((_DWORD *)v219 + 22);
  v225 = v219[3];
  if (*(unsigned __int8 *)(v225 + 145) == 255)
  {
    v239 = (uint64_t)v219;
    v230 = 0;
    *(_BYTE *)v225 = 1;
    if ((v220 & v348) == 0)
      goto LABEL_396;
    goto LABEL_292;
  }
  v226 = *(unsigned int *)(v225 + 140);
  v227 = (int *)(v224[3] + 12 * v226);
  v228 = *v227;
  if (*v227 != v350)
  {
    if (v227[1] == v350)
    {
      v229 = (int32x2_t **)(v224[6] + 24 * v226);
      v230 = v229[1];
      if (v228 != v210)
        goto LABEL_283;
    }
    else
    {
      v248 = 2;
      if (v227[2] != v350)
        v248 = -1;
      v229 = (int32x2_t **)(v224[6] + 24 * v226);
      v230 = v229[v248];
      if (v228 != v210)
        goto LABEL_283;
    }
LABEL_266:
    v231 = *v229;
    if ((*v229)[18].u8[1] != 255)
      goto LABEL_267;
    goto LABEL_289;
  }
  v229 = (int32x2_t **)(v224[6] + 24 * v226);
  v230 = *v229;
  if (v228 == v210)
    goto LABEL_266;
LABEL_283:
  if (v227[1] != v210)
  {
    _ZF = v227[2] == v210;
    v249 = 2;
    if (!_ZF)
      v249 = -1;
    v231 = v229[v249];
    if (v231[18].u8[1] != 255)
      goto LABEL_267;
LABEL_289:
    v250 = sub_239501BE4(v230, v226);
    v238 = 1;
    v237 = v360;
    if (!v250)
    {
      v230->i8[0] = 1;
      v238 = 0;
    }
    goto LABEL_291;
  }
  v231 = v229[1];
  if (v231[18].u8[1] == 255)
    goto LABEL_289;
LABEL_267:
  v232 = v231[17].u32[v231[17].i32[0] == (_DWORD)v226];
  if (v231[17].i32[0] == (_DWORD)v226)
    v233 = (int32x2_t *)((char *)v231 + 1);
  else
    v233 = v231;
  v234 = v233[18].i8[0];
  v235 = v230[17].i32[0];
  v230[17].i32[v235 != (_DWORD)v226] = v232;
  if (v235 == (_DWORD)v226)
    v236 = v230;
  else
    v236 = (int32x2_t *)((char *)v230 + 1);
  v236[18].i8[0] = v234;
  v237 = v360;
  *(_QWORD *)(*(_QWORD *)(v360[1] + 48) + 24 * v232 + 8 * v234) = v230;
  v238 = 1;
LABEL_291:
  v231->i8[0] = 1;
  *(_QWORD *)(*(_QWORD *)v237[1] + ((v226 >> 3) & 0x1FFFFFF8)) |= 1 << v226;
  ++*((_DWORD *)v237 + 22);
  v239 = (uint64_t)v237;
  *(_BYTE *)v237[3] = 1;
  if ((v220 & v238 & v348 & 1) == 0)
    goto LABEL_396;
LABEL_292:
  v251 = *(_QWORD **)v239;
  v252 = (float64x2_t *)(*(_QWORD *)(*(_QWORD *)v239 + 48) + 80 * v210);
  __asm { FMOV            V0.2D, #0.5 }
  v257 = vmulq_f64(v252[1], _Q0);
  *v252 = vmulq_f64(*v252, _Q0);
  v252[1] = v257;
  v258 = vmulq_f64(v252[3], _Q0);
  v252[2] = vmulq_f64(v252[2], _Q0);
  v252[3] = v258;
  v252[4] = vmulq_f64(v252[4], _Q0);
  v351 = sub_2394FE330(v251, v210);
  __p = 0;
  v365 = 0;
  v366 = 0;
  v259 = *(_QWORD *)(v239 + 8);
  v260 = v230;
  v261 = v230[17].u32[0];
  v353 = (uint64_t)v260;
  v262 = v260[18].i8[0];
  v263 = v260[18].u8[0];
  v264 = (_DWORD *)(*(_QWORD *)(v259 + 24) + 12 * v261);
  v265 = 1;
  if (*v264 != v210)
    v265 = 2 * (v264[1] == v210);
  v266 = 0;
  v267 = 0;
  v358 = v263 != v265;
  if (v263 == v265)
    v268 = 1;
  else
    v268 = 2;
  v269 = v268
       + v262
       - 3 * (((21846 * (v268 + v262)) >> 16) + ((21846 * (v268 + v262)) >> 31));
  v356 = v268;
LABEL_304:
  v275 = (char *)__p;
  v276 = (v267 - (_BYTE *)__p) >> 4;
  v277 = v276 + 1;
  if ((unint64_t)(v276 + 1) >> 60)
LABEL_431:
    sub_2394189F8();
  v278 = v266 - (_BYTE *)__p;
  if (v278 >> 3 > v277)
    v277 = v278 >> 3;
  if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF0)
    v279 = 0xFFFFFFFFFFFFFFFLL;
  else
    v279 = v277;
  if (v279)
  {
    if (v279 >> 60)
LABEL_433:
      sub_239418A80();
    v280 = (char *)operator new(16 * v279);
  }
  else
  {
    v280 = 0;
  }
  v281 = &v280[16 * v276];
  *(_QWORD *)v281 = v259;
  *((_DWORD *)v281 + 2) = v261;
  v281[12] = v358;
  v281[13] = v263;
  v281[14] = v269;
  if (v267 == v275)
  {
    v275 = v267;
    v283 = v354;
    v267 = v281 + 16;
    __p = v281;
    v366 = &v280[16 * v279];
    if (v275)
      goto LABEL_318;
  }
  else
  {
    v282 = &v280[16 * v276];
    v283 = v354;
    do
    {
      *((_OWORD *)v282 - 1) = *((_OWORD *)v267 - 1);
      v282 -= 16;
      v267 -= 16;
    }
    while (v267 != v275);
    v267 = v281 + 16;
    __p = v282;
    v366 = &v280[16 * v279];
    if (v275)
LABEL_318:
      operator delete(v275);
  }
  v284 = v360;
  v365 = v267;
  v285 = *(_QWORD *)(v259 + 24);
  v286 = v285 + 12 * v261;
  v288 = (_DWORD *)v360[15];
  v287 = (_DWORD *)v360[16];
  if (v288 != v287)
    goto LABEL_324;
LABEL_332:
  while (1)
  {
    v271 = *(_QWORD *)(*(_QWORD *)(v259 + 48) + 24 * v261 + 8 * (char)v269);
    if (*(unsigned __int8 *)(v271 + 145) == 255)
      break;
    v270 = *(_DWORD *)(v286 + 4 * (char)(3 - (v269 + v263)));
    _ZF = *(unsigned int *)(v271 + 136) == v261;
    v261 = *(unsigned int *)(v271 + 136 + 4 * _ZF);
    if (_ZF)
      ++v271;
    v272 = *(char *)(v271 + 144);
    LOBYTE(v263) = v272;
    v273 = v356
         + v272
         - 3
         * (((21846 * (__int16)(v356 + v272)) >> 16)
          + ((21846 * (__int16)(v356 + v272)) >> 31));
    v274 = 3 - v272 - v273;
    if (*(_DWORD *)(v285 + 12 * v261 + 4 * v274) == v270)
      LOBYTE(v269) = v273;
    else
      LOBYTE(v269) = v274;
    v266 = v366;
    if (v267 >= v366)
      goto LABEL_304;
    *(_QWORD *)v267 = v259;
    *((_DWORD *)v267 + 2) = v261;
    v267[12] = v358;
    v267[13] = v263;
    v267[14] = v269;
    v267 += 16;
    v365 = v267;
    v285 = *(_QWORD *)(v259 + 24);
    v286 = v285 + 12 * v261;
    v288 = (_DWORD *)v360[15];
    v287 = (_DWORD *)v360[16];
    if (v288 != v287)
    {
LABEL_324:
      v289 = v288 + 6;
      while (1)
      {
        v290 = v289 - 6;
        _ZF = *(v289 - 6) == v283 && *(v289 - 5) == *(_DWORD *)(v286 + 4 * (char)v263);
        if (_ZF)
          break;
        v289 += 8;
        if (v290 + 8 == v287)
          goto LABEL_332;
      }
      ++*v289;
    }
  }
  v292 = v353;
  v293 = *(char *)(v353 + 145);
  if (v293 == -1)
    goto LABEL_377;
  v294 = *(unsigned __int8 *)(v353 + 145);
  v295 = v360[1];
  v296 = *(unsigned int *)(v353 + 140);
  v297 = (_DWORD *)(*(_QWORD *)(v295 + 24) + 12 * v296);
  v298 = 1;
  if (*v297 != v283)
    v298 = 2 * (v297[1] == v283);
  v359 = v294 != v298;
  if (v294 == v298)
    v299 = 1;
  else
    v299 = 2;
  v300 = v299
       + v293
       - 3 * (((21846 * (v299 + v293)) >> 16) + ((21846 * (v299 + v293)) >> 31));
  v357 = v299;
  v301 = v366;
  if (v267 >= v366)
    goto LABEL_347;
  while (2)
  {
    *(_QWORD *)v267 = v295;
    *((_DWORD *)v267 + 2) = v296;
    v267[12] = v359;
    v267[13] = v294;
    v315 = v267 + 16;
    v267[14] = v300;
    v365 = v267 + 16;
    v316 = *(_QWORD *)(v295 + 24);
    v317 = v316 + 12 * v296;
    v319 = (_DWORD *)v284[15];
    v318 = (_DWORD *)v284[16];
    if (v319 == v318)
      goto LABEL_375;
LABEL_367:
    v320 = v319 + 6;
    do
    {
      v321 = v320 - 6;
      if (*(v320 - 6) == v283 && *(v320 - 5) == *(_DWORD *)(v317 + 4 * (char)v294))
      {
        ++*v320;
        break;
      }
      v320 += 8;
    }
    while (v321 + 8 != v318);
LABEL_375:
    v303 = *(_QWORD *)(*(_QWORD *)(v295 + 48) + 24 * v296 + 8 * (char)v300);
    if (*(unsigned __int8 *)(v303 + 145) != 255)
    {
      v302 = *(_DWORD *)(v317 + 4 * (char)(3 - (v300 + v294)));
      _ZF = *(unsigned int *)(v303 + 136) == v296;
      v296 = *(unsigned int *)(v303 + 136 + 4 * _ZF);
      if (_ZF)
        ++v303;
      v304 = *(char *)(v303 + 144);
      LOBYTE(v294) = v304;
      v305 = v299
           + v304
           - 3
           * (((21846 * (__int16)(v299 + v304)) >> 16)
            + ((21846 * (__int16)(v299 + v304)) >> 31));
      v306 = 3 - v304 - v305;
      if (*(_DWORD *)(v316 + 12 * v296 + 4 * v306) == v302)
        LOBYTE(v300) = v305;
      else
        LOBYTE(v300) = v306;
      v267 = v315;
      v301 = v366;
      if (v315 < v366)
        continue;
LABEL_347:
      v307 = (char *)__p;
      v308 = (v267 - (_BYTE *)__p) >> 4;
      v309 = v308 + 1;
      if ((unint64_t)(v308 + 1) >> 60)
        goto LABEL_431;
      v310 = v301 - (_BYTE *)__p;
      if (v310 >> 3 > v309)
        v309 = v310 >> 3;
      if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFF0)
        v311 = 0xFFFFFFFFFFFFFFFLL;
      else
        v311 = v309;
      if (v311)
      {
        if (v311 >> 60)
          goto LABEL_433;
        v312 = (char *)operator new(16 * v311);
      }
      else
      {
        v312 = 0;
      }
      v313 = &v312[16 * v308];
      *(_QWORD *)v313 = v295;
      *((_DWORD *)v313 + 2) = v296;
      v313[12] = v359;
      v314 = &v312[16 * v311];
      v313[13] = v294;
      v313[14] = v300;
      v315 = v313 + 16;
      if (v267 == v307)
      {
        __p = v313;
        v366 = &v312[16 * v311];
        v307 = v267;
        v283 = v354;
      }
      else
      {
        v283 = v354;
        do
        {
          *((_OWORD *)v313 - 1) = *((_OWORD *)v267 - 1);
          v313 -= 16;
          v267 -= 16;
        }
        while (v267 != v307);
        __p = v313;
        v366 = v314;
        if (!v307)
        {
LABEL_364:
          v284 = v360;
          v299 = v357;
          v365 = v315;
          v316 = *(_QWORD *)(v295 + 24);
          v317 = v316 + 12 * v296;
          v319 = (_DWORD *)v360[15];
          v318 = (_DWORD *)v360[16];
          if (v319 != v318)
            goto LABEL_367;
          goto LABEL_375;
        }
      }
      operator delete(v307);
      goto LABEL_364;
    }
    break;
  }
  v267 = v315;
  v292 = v353;
LABEL_377:
  sub_239501BBC(v292, v283, v351);
  v323 = __p;
  if (__p != v267)
  {
    v324 = (char *)__p;
    do
    {
      v325 = v324[14];
      *(_DWORD *)(*(_QWORD *)(v360[1] + 24) + 12 * *((unsigned int *)v324 + 2) + 4 * (char)(3 - (v325 + v324[13]))) = v351;
      sub_239501BBC(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v324 + 48) + 24 * *((unsigned int *)v324 + 2) + 8 * v325), v354, v351);
      v324 += 16;
    }
    while (v324 != v267);
  }
  v327 = (int *)v360[15];
  v326 = (int *)v360[16];
  if (v327 != v326)
  {
    while (2)
    {
      if (*v327 == v354)
      {
        v328 = v327[6];
        if (v328)
        {
          if (v328 != 2)
          {
            if (v328 == 1)
            {
              v329 = (char *)v326 - (char *)(v327 + 8);
              if (v326 != v327 + 8)
                memmove(v327, v327 + 8, v329 - 4);
              v326 = (int *)((char *)v327 + v329);
              v360[16] = (uint64_t)v327 + v329;
            }
LABEL_384:
            if (v327 == v326)
            {
              v323 = __p;
              goto LABEL_393;
            }
            continue;
          }
          v327[6] = 0;
          *v327 = v351;
        }
      }
      break;
    }
    v327 += 8;
    goto LABEL_384;
  }
LABEL_393:
  if (v323)
    operator delete(v323);
  v239 = (uint64_t)v360;
LABEL_396:
  while (sub_2394FCFE8(v239))
    ;
  v330 = *(_QWORD *)(v239 + 32);
  if (*(_QWORD *)(v330 + 40) || *(_BYTE *)(v330 + 5))
  {
    v331 = *v181;
    if (*v181 != v182)
    {
      v332 = *(_QWORD *)(v239 + 16);
      v333 = **(_QWORD **)(v332 + 24);
      v334 = *(_QWORD *)(v332 + 64);
      v335 = *v181;
      do
      {
        v336 = 0x86BCA1AF286BCA1BLL * ((v335[4] - v333) >> 3);
        *(_QWORD *)(v334 + 8 * (v336 >> 6)) &= ~(1 << v336);
        v337 = (_QWORD *)v335[1];
        if (v337)
        {
          do
          {
            v338 = v337;
            v337 = (_QWORD *)*v337;
          }
          while (v337);
        }
        else
        {
          do
          {
            v338 = (_QWORD *)v335[2];
            _ZF = *v338 == (_QWORD)v335;
            v335 = v338;
          }
          while (!_ZF);
        }
        v335 = v338;
      }
      while (v338 != v182);
      goto LABEL_410;
    }
  }
  else
  {
    v331 = *v181;
LABEL_410:
    if (v331 != v182)
    {
      do
      {
        v341 = v331[4];
        v342 = *(double *)(v341 + 120);
        v343 = sub_23950171C(v341);
        v344 = *(uint64_t **)(v239 + 16);
        v345 = v331[4];
        if (v343)
          sub_23950342C(v344, v345, v342);
        else
          sub_23950366C((uint64_t)v344, v345);
        v346 = (_QWORD *)v331[1];
        if (v346)
        {
          do
          {
            v347 = v346;
            v346 = (_QWORD *)*v346;
          }
          while (v346);
        }
        else
        {
          do
          {
            v347 = (_QWORD *)v331[2];
            _ZF = *v347 == (_QWORD)v331;
            v331 = v347;
          }
          while (!_ZF);
        }
        v331 = v347;
      }
      while (v347 != v182);
    }
  }
  v176 = *(unsigned int *)(v239 + 88);
  *(_DWORD *)(v239 + 88) = 0;
  *(_QWORD *)(v239 + 24) = 0;
  *(_QWORD *)(v239 + 48) = *(_QWORD *)(v239 + 40);
  *(_QWORD *)(v239 + 72) = *(_QWORD *)(v239 + 64);
  sub_239421038((uint64_t)v181, *(_QWORD **)(v239 + 104));
  *(_QWORD *)(v239 + 104) = 0;
  *(_QWORD *)(v239 + 112) = 0;
  *(_QWORD *)(v239 + 96) = v182;
  *(_QWORD *)(v239 + 128) = *(_QWORD *)(v239 + 120);
  if (v362[1])
    operator delete(v362[1]);
  if (v361[0])
    operator delete(v361[0]);
  return v176;
}

void sub_239500540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
    sub_2394FCFA8((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  sub_2394FCFA8((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_2395005BC(uint64_t a1)
{
  _QWORD *v2;

  sub_239503560(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 24));
  v2 = *(_QWORD **)(a1 + 104);
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  sub_239421038(a1 + 96, v2);
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_239500620(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  BOOL v8;

  v2 = a1[5];
  v3 = a1[6];
  if (v2 == v3)
  {
LABEL_4:
    v4 = a1[8];
    v5 = a1[9];
    if (v4 == v5)
    {
      return 1;
    }
    else
    {
      v6 = v4 + 16;
      do
      {
        v7 = sub_239502CD4(*a1, a1[1], *(_DWORD *)(v6 - 8), (char)(3 - (*(_BYTE *)(v6 - 2) + *(_BYTE *)(v6 - 3))), (double *)(a1[3] + 96), *(float64_t *)(a1[4] + 16));
        if (v7)
          break;
        v8 = v6 == v5;
        v6 += 16;
      }
      while (!v8);
      return !v7;
    }
  }
  else
  {
    while (!sub_239502CD4(*a1, a1[1], *(_DWORD *)(v2 + 8), (char)(3 - (*(_BYTE *)(v2 + 14) + *(_BYTE *)(v2 + 13))), (double *)(a1[3] + 96), *(float64_t *)(a1[4] + 16)))
    {
      v2 += 16;
      if (v2 == v3)
        goto LABEL_4;
    }
    return 0;
  }
}

unint64_t sub_239500710(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v47 = *(a2 - 1);
        v48 = *v9;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 24)
                       + 12 * *(unsigned int *)(v47 + 8)
                       + 4 * *(char *)(v47 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*v9 + 24)
                                                                + 12 * *(unsigned int *)(*v9 + 8)
                                                                + 4 * *(char *)(*v9 + 13)))
        {
          *v9 = v47;
          *(a2 - 1) = v48;
        }
        return result;
      case 3uLL:
        return (unint64_t)sub_239501290(v9, v9 + 1, v8);
      case 4uLL:
        return (unint64_t)sub_239501604(v9, v9 + 1, v9 + 2, v8);
      case 5uLL:
        return (unint64_t)sub_239501120(v9, v9 + 1, v9 + 2, v9 + 3, v8);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v60 = (v11 - 2) >> 1;
              v61 = v60;
              do
              {
                v62 = v61;
                if (v60 >= v61)
                {
                  v63 = (2 * v61) | 1;
                  v64 = &v9[v63];
                  v65 = *v64;
                  if (2 * v62 + 2 >= (uint64_t)v11)
                  {
                    v67 = *(_QWORD *)v65;
                  }
                  else
                  {
                    v66 = v64[1];
                    v67 = *(_QWORD *)v65;
                    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v65 + 24)
                                   + 12 * *(unsigned int *)(v65 + 8)
                                   + 4 * *(char *)(v65 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v66 + 24)
                                                                            + 12 * *(unsigned int *)(v66 + 8)
                                                                            + 4 * *(char *)(v66 + 13)))
                    {
                      v67 = *(_QWORD *)v66;
                      v65 = v64[1];
                      ++v64;
                      v63 = 2 * v62 + 2;
                    }
                  }
                  v68 = &v9[v62];
                  v69 = *v68;
                  v70 = *(_DWORD *)(*(_QWORD *)(v67 + 24) + 12 * *(unsigned int *)(v65 + 8) + 4
                                                                                              * *(char *)(v65 + 13));
                  v71 = *(_DWORD *)(*v68 + 8);
                  result = *(char *)(*v68 + 13);
                  if (v70 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*v68 + 24) + 12 * v71 + 4 * result))
                  {
                    do
                    {
                      v74 = v64;
                      *v68 = v65;
                      if (v60 < v63)
                        break;
                      v75 = (2 * v63) | 1;
                      v64 = &v9[v75];
                      v63 = 2 * v63 + 2;
                      v65 = *v64;
                      if (v63 < (uint64_t)v11)
                      {
                        v72 = v64[1];
                        v73 = *(_QWORD *)v65;
                        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v65 + 24)
                                       + 12 * *(unsigned int *)(v65 + 8)
                                       + 4 * *(char *)(v65 + 13)) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v72 + 24)
                                                                                 + 12 * *(unsigned int *)(v72 + 8)
                                                                                 + 4 * *(char *)(v72 + 13)))
                        {
                          v63 = v75;
                        }
                        else
                        {
                          v73 = *(_QWORD *)v72;
                          v65 = v64[1];
                          ++v64;
                        }
                      }
                      else
                      {
                        v73 = *(_QWORD *)v65;
                        v63 = v75;
                      }
                      v68 = v74;
                    }
                    while (*(_DWORD *)(*(_QWORD *)(v73 + 24)
                                      + 12 * *(unsigned int *)(v65 + 8)
                                      + 4 * *(char *)(v65 + 13)) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v69 + 24)
                                                                                + 12 * v71
                                                                                + 4 * result));
                    *v74 = v69;
                  }
                }
                v61 = v62 - 1;
              }
              while (v62);
              v76 = (unint64_t)v10 >> 3;
              do
              {
                v78 = 0;
                v79 = *v9;
                v80 = v9;
                do
                {
                  v81 = &v80[v78];
                  v84 = v81[1];
                  v82 = v81 + 1;
                  v83 = v84;
                  v85 = (2 * v78) | 1;
                  v86 = 2 * v78 + 2;
                  if (v86 < v76)
                  {
                    result = v82[1];
                    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v83 + 24)
                                   + 12 * *(unsigned int *)(v83 + 8)
                                   + 4 * *(char *)(v83 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 24)
                                                                            + 12 * *(unsigned int *)(result + 8)
                                                                            + 4 * *(char *)(result + 13)))
                    {
                      v83 = v82[1];
                      ++v82;
                      v85 = v86;
                    }
                  }
                  *v80 = v83;
                  v80 = v82;
                  v78 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v76 - 2) >> 1));
                if (v82 == --a2)
                {
                  *v82 = v79;
                }
                else
                {
                  *v82 = *a2;
                  *a2 = v79;
                  v87 = (char *)v82 - (char *)v9 + 8;
                  if (v87 >= 9)
                  {
                    v88 = (((unint64_t)v87 >> 3) - 2) >> 1;
                    v89 = &v9[v88];
                    v90 = *v89;
                    v91 = *v82;
                    v92 = *(_DWORD *)(*v82 + 8);
                    v93 = *(char *)(*v82 + 13);
                    result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)*v82 + 24) + 12 * v92 + 4 * v93);
                    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*v89 + 24)
                                   + 12 * *(unsigned int *)(*v89 + 8)
                                   + 4 * *(char *)(*v89 + 13)) < result)
                    {
                      do
                      {
                        v94 = v89;
                        *v82 = v90;
                        if (!v88)
                          break;
                        v88 = (v88 - 1) >> 1;
                        v89 = &v9[v88];
                        v90 = *v89;
                        result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)*v89 + 24)
                                                 + 12 * *(unsigned int *)(*v89 + 8)
                                                 + 4 * *(char *)(*v89 + 13));
                        v82 = v94;
                      }
                      while (result < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v91 + 24)
                                                               + 12 * v92
                                                               + 4 * v93));
                      *v94 = v91;
                    }
                  }
                }
              }
              while (v76-- > 2);
            }
            return result;
          }
          v12 = v11 >> 1;
          v13 = &v9[v11 >> 1];
          if ((unint64_t)v10 >= 0x401)
          {
            sub_239501290(v7, &v7[v11 >> 1], v8);
            v14 = &v7[v12];
            sub_239501290(v7 + 1, v14 - 1, a2 - 2);
            sub_239501290(v7 + 2, &v7[v12 + 1], a2 - 3);
            result = (unint64_t)sub_239501290(v14 - 1, v13, &v7[v12 + 1]);
            v15 = *v7;
            *v7 = *v14;
            *v14 = v15;
            v8 = a2 - 1;
            --a3;
            v16 = *v7;
            v17 = *(_QWORD *)*v7;
            if ((a4 & 1) != 0)
              goto LABEL_14;
LABEL_8:
            v18 = *(_DWORD *)(v16 + 8);
            v19 = *(_QWORD *)(v17 + 24) + 12 * v18;
            v20 = *(char *)(v16 + 13);
            v21 = *(_DWORD *)(v19 + 4 * v20);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*(v7 - 1) + 24)
                           + 12 * *(unsigned int *)(*(v7 - 1) + 8)
                           + 4 * *(char *)(*(v7 - 1) + 13)) < v21)
              goto LABEL_15;
            if (v21 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*v8 + 24)
                                  + 12 * *(unsigned int *)(*v8 + 8)
                                  + 4 * *(char *)(*v8 + 13)))
            {
              v38 = v7 + 1;
              do
              {
                v9 = v38;
                if (v38 >= a2)
                  break;
                ++v38;
              }
              while (v21 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*v9 + 24)
                                       + 12 * *(unsigned int *)(*v9 + 8)
                                       + 4 * *(char *)(*v9 + 13)));
            }
            else
            {
              v9 = v7;
              do
              {
                v22 = v9[1];
                ++v9;
              }
              while (v21 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 24)
                                       + 12 * *(unsigned int *)(v22 + 8)
                                       + 4 * *(char *)(v22 + 13)));
            }
            v39 = a2;
            if (v9 < a2)
            {
              v39 = a2;
              do
                v40 = *--v39;
              while (v21 < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v40 + 24)
                                      + 12 * *(unsigned int *)(v40 + 8)
                                      + 4 * *(char *)(v40 + 13)));
            }
            if (v9 < v39)
            {
              v41 = *v9;
              v42 = *v39;
              do
              {
                *v9 = v42;
                *v39 = v41;
                v43 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 24) + 12 * v18 + 4 * v20);
                do
                {
                  v44 = v9[1];
                  ++v9;
                  v41 = v44;
                }
                while (v43 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v44 + 24)
                                         + 12 * *(unsigned int *)(v44 + 8)
                                         + 4 * *(char *)(v44 + 13)));
                do
                {
                  v45 = *--v39;
                  v42 = v45;
                }
                while (v43 < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 24)
                                        + 12 * *(unsigned int *)(v45 + 8)
                                        + 4 * *(char *)(v45 + 13)));
              }
              while (v9 < v39);
            }
            v46 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v46;
            a4 = 0;
            *v46 = v16;
            continue;
          }
          result = (unint64_t)sub_239501290(&v7[v11 >> 1], v7, v8);
          --a3;
          v16 = *v7;
          v17 = *(_QWORD *)*v7;
          if ((a4 & 1) == 0)
            goto LABEL_8;
LABEL_14:
          v18 = *(_DWORD *)(v16 + 8);
          v23 = *(_QWORD *)(v17 + 24);
          v20 = *(char *)(v16 + 13);
          v21 = *(_DWORD *)(v23 + 12 * v18 + 4 * v20);
LABEL_15:
          v24 = 0;
          do
            v25 = v7[++v24];
          while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v25 + 24)
                            + 12 * *(unsigned int *)(v25 + 8)
                            + 4 * *(char *)(v25 + 13)) < v21);
          v26 = &v7[v24];
          v27 = a2;
          if (v24 == 1)
          {
            v27 = a2;
            do
            {
              if (v26 >= v27)
                break;
              v29 = *--v27;
            }
            while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 24)
                              + 12 * *(unsigned int *)(v29 + 8)
                              + 4 * *(char *)(v29 + 13)) >= v21);
          }
          else
          {
            do
              v28 = *--v27;
            while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v28 + 24)
                              + 12 * *(unsigned int *)(v28 + 8)
                              + 4 * *(char *)(v28 + 13)) >= v21);
          }
          if (v26 < v27)
          {
            v30 = *v27;
            v31 = &v7[v24];
            v32 = v27;
            do
            {
              *v31 = v30;
              *v32 = v25;
              v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 24) + 12 * v18 + 4 * v20);
              do
              {
                v34 = v31[1];
                ++v31;
                v25 = v34;
              }
              while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v34 + 24)
                                + 12 * *(unsigned int *)(v34 + 8)
                                + 4 * *(char *)(v34 + 13)) < v33);
              do
              {
                v35 = *--v32;
                v30 = v35;
              }
              while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v35 + 24)
                                + 12 * *(unsigned int *)(v35 + 8)
                                + 4 * *(char *)(v35 + 13)) >= v33);
            }
            while (v31 < v32);
            v36 = v31 - 1;
            if (v31 - 1 == v7)
              goto LABEL_33;
LABEL_32:
            *v7 = *v36;
            goto LABEL_33;
          }
          v36 = v26 - 1;
          if (v26 - 1 != v7)
            goto LABEL_32;
LABEL_33:
          *v36 = v16;
          if (v26 < v27)
            goto LABEL_36;
          v37 = sub_2395013AC(v7, v36);
          v9 = v36 + 1;
          result = sub_2395013AC(v36 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v37)
              continue;
LABEL_36:
            result = sub_239500710(v7, v36, a3, a4 & 1);
            a4 = 0;
            v9 = v36 + 1;
            continue;
          }
          a2 = v36;
          if (v37)
            return result;
          goto LABEL_2;
        }
        v49 = v9 + 1;
        v51 = v9 == a2 || v49 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v51)
          {
            v52 = 0;
            v53 = v9;
            do
            {
              v56 = *v53;
              v55 = v53[1];
              v53 = v49;
              v57 = *(_DWORD *)(v55 + 8);
              v58 = *(char *)(v55 + 13);
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 12 * v57 + 4 * v58) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 12 * *(unsigned int *)(v56 + 8) + 4 * *(char *)(v56 + 13)))
              {
                v59 = v52;
                do
                {
                  *(uint64_t *)((char *)v9 + v59 + 8) = v56;
                  if (!v59)
                  {
                    v54 = v9;
                    goto LABEL_71;
                  }
                  v56 = *(uint64_t *)((char *)v9 + v59 - 8);
                  result = *(char *)(v56 + 13);
                  v59 -= 8;
                }
                while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 24) + 12 * v57 + 4 * v58) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v56 + 24) + 12 * *(unsigned int *)(v56 + 8) + 4 * result));
                v54 = (uint64_t *)((char *)v9 + v59 + 8);
LABEL_71:
                *v54 = v55;
              }
              v49 = v53 + 1;
              v52 += 8;
            }
            while (v53 + 1 != a2);
          }
        }
        else if (!v51)
        {
          do
          {
            v96 = *v7;
            v95 = v7[1];
            v7 = v49;
            v97 = *(_DWORD *)(v95 + 8);
            v98 = *(char *)(v95 + 13);
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v95 + 24) + 12 * v97 + 4 * v98) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v96 + 24) + 12 * *(unsigned int *)(v96 + 8) + 4 * *(char *)(v96 + 13)))
            {
              v99 = v7;
              do
              {
                *v99 = v96;
                v96 = *(v99 - 2);
                --v99;
              }
              while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v95 + 24) + 12 * v97 + 4 * v98) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v96 + 24) + 12 * *(unsigned int *)(v96 + 8) + 4 * *(char *)(v96 + 13)));
              *v99 = v95;
            }
            v49 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t *sub_239501120(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_239501604(a1, a2, a3, a4);
  v11 = *a4;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a5 + 24) + 12 * *(unsigned int *)(*a5 + 8) + 4 * *(char *)(*a5 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a4 + 24) + 12 * *(unsigned int *)(*a4 + 8) + 4 * *(char *)(*a4 + 13)))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a4 + 24) + 12 * *(unsigned int *)(*a4 + 8) + 4 * *(char *)(*a4 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a3 + 24) + 12 * *(unsigned int *)(*a3 + 8) + 4 * *(char *)(*a3 + 13)))
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a3 + 24) + 12 * *(unsigned int *)(*a3 + 8) + 4
                                                                                              * *(char *)(*a3 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 24) + 12 * *(unsigned int *)(*a2 + 8) + 4 * *(char *)(*a2 + 13)))
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 24)
                       + 12 * *(unsigned int *)(*a2 + 8)
                       + 4 * *(char *)(*a2 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a1 + 24)
                                                                + 12 * *(unsigned int *)(*a1 + 8)
                                                                + 4 * *(char *)(*a1 + 13)))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_239501290(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 24) + 12 * *(unsigned int *)(*a2 + 8) + 4 * *(char *)(*a2 + 13));
  v6 = *(_DWORD *)(*result + 8);
  v7 = *(char *)(*result + 13);
  v8 = *a3;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a3 + 24) + 12 * *(unsigned int *)(*a3 + 8) + 4 * *(char *)(*a3 + 13));
  if (v5 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*result + 24) + 12 * v6 + 4 * v7))
  {
    if (v9 < v5)
    {
      *a2 = v8;
      *a3 = v3;
      v10 = *result;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 24) + 12 * *(unsigned int *)(*a2 + 8) + 4
                                                                                              * *(char *)(*a2 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*result + 24) + 12 * *(unsigned int *)(*result + 8) + 4 * *(char *)(*result + 13)))
      {
        *result = *a2;
        *a2 = v10;
      }
    }
  }
  else
  {
    if (v9 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a3 + 24) + 12 * *(unsigned int *)(*a3 + 8) + 4
                                                                                              * *(char *)(*a3 + 13)) >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 24) + 12 * v6 + 4 * v7))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v8;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_2395013AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v16 = *(a2 - 1);
      v17 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 24) + 12 * *(unsigned int *)(v16 + 8) + 4
                                                                                              * *(char *)(v16 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a1 + 24) + 12 * *(unsigned int *)(*a1 + 8) + 4 * *(char *)(*a1 + 13)))
      {
        *a1 = v16;
        *(a2 - 1) = v17;
      }
      break;
    case 3:
      sub_239501290(a1, a1 + 1, a2 - 1);
      result = 1;
      break;
    case 4:
      sub_239501604(a1, a1 + 1, a1 + 2, a2 - 1);
      result = 1;
      break;
    case 5:
      sub_239501120(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      result = 1;
      break;
    default:
      v6 = a1 + 2;
      sub_239501290(a1, a1 + 1, a1 + 2);
      v7 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_13:
        result = 1;
      }
      else
      {
        v8 = 0;
        v9 = 24;
        while (1)
        {
          v10 = *v7;
          v11 = *v6;
          v12 = *(_DWORD *)(*v7 + 8);
          v13 = *(char *)(*v7 + 13);
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*v7 + 24) + 12 * v12 + 4 * v13) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*v6 + 24)
                                                                                                  + 12 * *(unsigned int *)(*v6 + 8)
                                                                                                  + 4 * *(char *)(*v6 + 13)))
            break;
LABEL_12:
          v6 = v7;
          v9 += 8;
          if (++v7 == a2)
            goto LABEL_13;
        }
        v14 = v9;
        do
        {
          *(uint64_t *)((char *)a1 + v14) = v11;
          v15 = v14 - 8;
          if (v14 == 8)
          {
            *a1 = v10;
            if (++v8 != 8)
              goto LABEL_12;
            goto LABEL_19;
          }
          v11 = *(uint64_t *)((char *)a1 + v14 - 16);
          v14 -= 8;
        }
        while (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 24) + 12 * v12 + 4 * v13) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 24) + 12 * *(unsigned int *)(v11 + 8) + 4 * *(char *)(v11 + 13)));
        *(uint64_t *)((char *)a1 + v15) = v10;
        if (++v8 != 8)
          goto LABEL_12;
LABEL_19:
        result = v7 + 1 == a2;
      }
      break;
  }
  return result;
}

uint64_t *sub_239501604(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_239501290(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a4 + 24) + 12 * *(unsigned int *)(*a4 + 8) + 4 * *(char *)(*a4 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a3 + 24) + 12 * *(unsigned int *)(*a3 + 8) + 4 * *(char *)(*a3 + 13)))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a3 + 24) + 12 * *(unsigned int *)(*a3 + 8) + 4 * *(char *)(*a3 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 24) + 12 * *(unsigned int *)(*a2 + 8) + 4 * *(char *)(*a2 + 13)))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a2 + 24) + 12 * *(unsigned int *)(*a2 + 8) + 4
                                                                                              * *(char *)(*a2 + 13)) < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)*a1 + 24) + 12 * *(unsigned int *)(*a1 + 8) + 4 * *(char *)(*a1 + 13)))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL sub_23950171C(uint64_t a1)
{
  unint64_t v1;
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;
  float64x2_t *v5;
  unint64_t v6;
  float64x2_t *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v18;
  uint64_t v19;
  double v21;
  double v23;
  double v30;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v45;
  double v46;
  double v47;
  _OWORD *v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  float64x2_t *v63;
  float64x2_t *v64;
  double v65;
  float64x2_t v67;
  _OWORD *v68;
  double v69;
  uint64_t v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  __int128 v77;
  double *v78;
  double v79;
  double v80;
  __int128 v81;
  uint64_t v83;
  uint64_t v84;

  v2 = (unsigned int *)(a1 + 128);
  v1 = *(unsigned int *)(a1 + 128);
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3[6];
  v5 = (float64x2_t *)(v4 + 80 * v1);
  v6 = *(unsigned int *)(a1 + 132);
  v7 = (float64x2_t *)(v4 + 80 * v6);
  _Q4 = vaddq_f64(*v5, *v7);
  _Q2 = vaddq_f64(v5[1], v7[1]);
  _Q3 = vaddq_f64(v5[2], v7[2]);
  _Q1 = vaddq_f64(v5[3], v7[3]);
  _Q0 = vaddq_f64(v5[4], v7[4]);
  *(float64x2_t *)(a1 + 16) = _Q4;
  *(float64x2_t *)(a1 + 32) = _Q2;
  *(float64x2_t *)(a1 + 48) = _Q3;
  *(float64x2_t *)(a1 + 64) = _Q1;
  *(float64x2_t *)(a1 + 80) = _Q0;
  v13 = v3[12];
  v14 = *(_QWORD *)(v13 + ((v1 >> 3) & 0x1FFFFFF8)) & (1 << v1);
  v15 = *(_QWORD *)(v13 + ((v6 >> 3) & 0x1FFFFFF8)) & (1 << v6);
  if (v15)
    v16 = v14 != 0;
  else
    v16 = 0;
  if (!v16)
  {
    if ((v14 != 0) != (v15 != 0))
    {
      v18 = v3[3] + 24 * v2[v14 == 0];
      v19 = *(_QWORD *)(v18 + 16);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)v18;
      *(_QWORD *)(a1 + 112) = v19;
      _D5 = *(double *)(a1 + 96);
      v21 = *(double *)(a1 + 104);
      _D16 = *(double *)(a1 + 112);
      v23 = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v21, _Q4, 1), _D5, _Q4.f64[0]), _D16, _Q2.f64[0]);
      __asm
      {
        FMLA            D17, D5, V4.D[1]
        FMLA            D4, D16, V3.D[1]
      }
      v30 = _Q0.f64[1]
          + v21 * vmlad_n_f64(_D17, _D16, _Q3.f64[0])
          + v23 * _D5
          + _D4 * _D16
          + vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v21, _Q1, 1), _D5, _Q1.f64[0]), _D16, _Q0.f64[0]) * 2.0;
LABEL_20:
      *(double *)(a1 + 120) = v30;
      return !v16;
    }
    _D6 = _Q3.f64[1];
    __asm
    {
      FMLA            D16, D6, V2.D[1]
      FMLA            D17, D6, V4.D[1]
      FMLA            D18, D3, V4.D[1]
    }
    v35 = vmlad_n_f64(vmlad_n_f64(-(_Q4.f64[1] * _D17), _D16, _Q4.f64[0]), _D18, _Q2.f64[0]);
    if (v35 == 0.0)
      goto LABEL_16;
    v36 = 0.0 - v35;
    if (v35 >= 0.0)
      v36 = v35;
    if (v36 <= 1.0e-12)
    {
LABEL_16:
      v61 = v3[3];
      v62 = 24 * v1;
      v63 = (float64x2_t *)(v61 + 24 * v1);
      v64 = (float64x2_t *)(v61 + 24 * v6);
      v65 = (v63[1].f64[0] + v64[1].f64[0]) * 0.5;
      __asm { FMOV            V17.2D, #0.5 }
      v67 = vmulq_f64(vaddq_f64(*v63, *v64), _Q17);
      *(float64x2_t *)(a1 + 96) = v67;
      v68 = (_OWORD *)(a1 + 96);
      v69 = _Q0.f64[1]
          + vmlad_n_f64(vmuld_lane_f64(vmlad_n_f64(vmuld_lane_f64(_Q2.f64[1], v67, 1), _Q4.f64[1], v67.f64[0]) + _Q3.f64[0] * v65, v67, 1), vmlad_n_f64(vmuld_lane_f64(_Q4.f64[1], v67, 1), _Q4.f64[0], v67.f64[0]) + _Q2.f64[0] * v65, v67.f64[0])+ (vmlad_n_f64(vmuld_lane_f64(_Q3.f64[0], v67, 1), _Q2.f64[0], v67.f64[0]) + _Q3.f64[1] * v65) * v65+ vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v67.f64[1], _Q1, 1), v67.f64[0], _Q1.f64[0]), v65, _Q0.f64[0]) * 2.0;
      *(double *)(a1 + 112) = v65;
      *(double *)(a1 + 120) = v69;
      v70 = v3[3];
      v71 = (double *)(v70 + v62);
      v72 = v71[1];
      v73 = v71[2];
      v74 = v72 * (v72 * _Q2.f64[1] + _Q4.f64[1] * *v71 + _Q3.f64[0] * v73)
          + (_Q4.f64[1] * v72 + _Q4.f64[0] * *v71 + _Q2.f64[0] * v73) * *v71
          + (v72 * _Q3.f64[0] + _Q2.f64[0] * *v71 + _Q3.f64[1] * v73) * v73;
      v75 = vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(v72, _Q1, 1), *v71, _Q1.f64[0]), v73, _Q0.f64[0]);
      v76 = _Q0.f64[1] + v74 + v75 * 2.0;
      if (v76 < v69)
      {
        v77 = *(_OWORD *)v71;
        *(double *)(a1 + 112) = v71[2];
        *v68 = v77;
        *(double *)(a1 + 120) = v76;
        v70 = v3[3];
        v69 = _Q0.f64[1] + v74 + v75 * 2.0;
      }
      v78 = (double *)(v70 + 24 * v6);
      v79 = v78[1];
      v80 = v78[2];
      v30 = _Q0.f64[1]
          + v79 * (v79 * _Q2.f64[1] + _Q4.f64[1] * *v78 + _Q3.f64[0] * v80)
          + (_Q4.f64[1] * v79 + _Q4.f64[0] * *v78 + _Q2.f64[0] * v80) * *v78
          + (v79 * _Q3.f64[0] + _Q2.f64[0] * *v78 + _Q3.f64[1] * v80) * v80
          + (v79 * _Q1.f64[1] + _Q1.f64[0] * *v78 + _Q0.f64[0] * v80) * 2.0;
      if (v30 < v69)
      {
        v81 = *(_OWORD *)v78;
        *(double *)(a1 + 112) = v78[2];
        *v68 = v81;
        goto LABEL_20;
      }
    }
    else
    {
      v37 = 1.0 / v35;
      v38 = (_Q3.f64[1] * -_Q4.f64[1] + _Q2.f64[0] * _Q3.f64[0]) * v37;
      v39 = (_Q4.f64[1] * _Q3.f64[0] - _Q2.f64[0] * _Q2.f64[1]) * v37;
      v40 = (_Q4.f64[0] * _Q3.f64[1] - _Q2.f64[0] * _Q2.f64[0]) * v37;
      _Q2.f64[0] = (_Q4.f64[1] * _Q2.f64[0] - _Q4.f64[0] * _Q3.f64[0]) * v37;
      v41 = (_Q4.f64[1] * -_Q4.f64[1] + _Q4.f64[0] * _Q2.f64[1]) * v37;
      v42 = vmlad_n_f64(vmuld_lane_f64(v38, _Q1, 1), _D16 * v37, _Q1.f64[0]);
      v43 = -(v42 + v39 * _Q0.f64[0]);
      _D4 = vmlad_n_f64(v42, v39, _Q0.f64[0]);
      v45 = -(vmlad_n_f64(vmuld_lane_f64(v40, _Q1, 1), v38, _Q1.f64[0]) + _Q2.f64[0] * _Q0.f64[0]);
      v46 = vmlad_n_f64(vmuld_lane_f64(_Q2.f64[0], _Q1, 1), v39, _Q1.f64[0]);
      v47 = -(v46 + v41 * _Q0.f64[0]);
      _D2 = vmlad_n_f64(v46, v41, _Q0.f64[0]);
      __asm
      {
        FMLS            D3, D4, V1.D[0]
        FMLS            D3, D2, V0.D[0]
      }
      *(double *)(a1 + 96) = v43;
      *(double *)(a1 + 104) = v45;
      v51 = (_OWORD *)(a1 + 96);
      *(double *)(a1 + 112) = v47;
      *(double *)(a1 + 120) = _Q0.f64[1] + _D3;
      v52 = sub_239504488((double *)(v3[3] + 24 * v6), (double *)(v3[3] + 24 * v1));
      v54 = v53;
      v56 = v55;
      v57 = sub_239504488((double *)(a1 + 96), (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 24 * *(unsigned int *)(a1 + 128)))/ v52+ -0.5;
      if (fabs(v57) > 20.0 || (v57 = v58 / v54 + -0.5, fabs(v57) > 20.0) || (v57 = v59 / v56 + -0.5, fabs(v57) > 20.0))
      {
        if (v57 <= 0.0)
          v60 = *v2;
        else
          v60 = *(_DWORD *)(a1 + 132);
        v83 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 24 * v60;
        v84 = *(_QWORD *)(v83 + 16);
        *v51 = *(_OWORD *)v83;
        *(_QWORD *)(a1 + 112) = v84;
      }
    }
  }
  return !v16;
}

uint64_t sub_239501BBC(uint64_t result, int a2, int a3)
{
  unsigned int v3;
  unsigned int v4;

  *(_DWORD *)(result + 128 + 4 * (*(_DWORD *)(result + 128) != a2)) = a3;
  v3 = *(_DWORD *)(result + 128);
  v4 = *(_DWORD *)(result + 132);
  if (v3 > v4)
  {
    *(_DWORD *)(result + 128) = v4;
    *(_DWORD *)(result + 132) = v3;
  }
  return result;
}

BOOL sub_239501BE4(int32x2_t *a1, int a2)
{
  __int32 v2;
  BOOL v3;
  int32x2_t *v4;
  int v5;
  int v6;

  v2 = a1[17].i32[0];
  v3 = v2 == a2;
  a1[17].i32[v2 != a2] = 0;
  v4 = a1 + 18;
  if (!v3)
    v4 = (int32x2_t *)((char *)a1 + 145);
  v4->i8[0] = -1;
  v5 = a1[18].u8[0];
  if (v3)
  {
    a1[17] = vrev64_s32(a1[17]);
    v6 = a1[18].u8[1];
    a1[18].i8[0] = v6;
    a1[18].i8[1] = v5;
    v5 = v6;
  }
  return v5 != 255;
}

BOOL sub_239501C3C(uint64_t a1, unsigned int a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 24 * a2);
  return *(unsigned __int8 *)(*v2 + 145) == 255
      || *(unsigned __int8 *)(v2[1] + 145) == 255
      || *(unsigned __int8 *)(v2[2] + 145) == 255;
}

double sub_239501C84(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  return *(double *)(*(_QWORD *)(a4 + 24) + 24 * *(unsigned int *)(*(_QWORD *)(a1 + 24) + 12 * a2 + 4 * a3));
}

double sub_239501CAC(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24) + 12 * a2;
  return sub_239504488((double *)(*(_QWORD *)(a4 + 24)+ 24* *(unsigned int *)(v4+ ((uint64_t)((unint64_t)(a3- 3* (((21846 * a3 + 21846) >> 16)+ ((21846 * a3 + 21846) >> 31))+ 1) << 56) >> 54))), (double *)(*(_QWORD *)(a4 + 24)+ 24* *(unsigned int *)(v4+ ((uint64_t)((unint64_t)(a3- 3* (((21846 * a3 + 43692) >> 16)+ ((21846 * a3 + 43692) >> 31))+ 2) << 56) >> 54))));
}

__n128 sub_239501D18(uint64_t a1, uint64_t a2)
{
  signed int v4;
  unsigned int v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  __n128 result;

  v4 = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = (_QWORD *)(a1 + 24);
  v7 = v5 - 1;
  if ((int)(v5 - 1) < 0)
    goto LABEL_5;
  do
  {
LABEL_2:
    if (((*(_QWORD *)(*(_QWORD *)a1 + (((unint64_t)v4 >> 3) & 0x1FFFFFF8)) >> v4) & 1) != 0)
      goto LABEL_5;
    ++v4;
  }
  while (v5 != v4);
  v4 = v5;
LABEL_5:
  while (v4 < v7)
  {
    v8 = 12 * v7;
    v5 = v7;
    while (((*(_QWORD *)(*(_QWORD *)a1 + (((unint64_t)v5 >> 3) & 0x1FFFFFF8)) >> v5) & 1) != 0)
    {
      --v5;
      v8 -= 12;
      if (v4 >= (int)v5)
        goto LABEL_12;
    }
    v9 = *v6 + 12 * v4;
    v10 = *v6 + v8;
    v11 = *(_QWORD *)v9;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)v10 = v11;
    v12 = *(_DWORD *)(v9 + 8);
    *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 + 8);
    *(_DWORD *)(v10 + 8) = v12;
    ++v4;
    v7 = v5 - 1;
    if (v4 <= (int)(v5 - 1))
      goto LABEL_2;
  }
LABEL_12:
  v13 = *(_QWORD *)(a1 + 24);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 32) - v13) >> 2);
  if (v4 <= v14)
  {
    if (v4 < v14)
      *(_QWORD *)(a1 + 32) = v13 + 12 * v4;
  }
  else
  {
    sub_2394EF24C(a1 + 24, v4 - v14);
  }
  v15 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v15;
    operator delete(v15);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 40);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  return result;
}

void sub_239501E78(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  BOOL v62;
  uint64_t v63;
  unsigned int v64;
  double v65;
  float64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  float64x2_t v84;
  float64x2_t *v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  int v90;
  double *v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  float64x2_t v99;
  double v100;
  double v101;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  double v107;
  float64x2_t v108;
  float64x2_t v109;
  double v110;
  float64x2_t v111;
  float64x2_t v112;
  double v113;
  float64x2_t v114;
  double v115;
  float64x2_t v116;
  double v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  if (a2[1])
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v39 = sub_239501CAC((uint64_t)a2, v7, 2, a1);
      v41 = v40;
      v43 = v42;
      v44 = sub_239501CAC((uint64_t)a2, v7, 1, a1);
      v120.f64[0] = v41 * v46 - v43 * v45;
      v120.f64[1] = v43 * v44 - v39 * v46;
      v121 = v39 * v45 - v41 * v44;
      v47 = sqrt(v120.f64[1] * v120.f64[1] + v120.f64[0] * v120.f64[0] + v121 * v121);
      if (v47 != 0.0 && v47 > 1.0e-12)
      {
        sub_239504468(&v120, v47);
        v48 = sub_239501C84((uint64_t)a2, v7, 0, a1);
        v51 = v120.f64[1] * v49 + v120.f64[0] * v48 + v121 * v50;
        v52 = v120.f64[0] * v120.f64[0];
        v53 = v120.f64[0] * v120.f64[1];
        v54 = v120.f64[0] * v121;
        v55 = v120.f64[1] * v120.f64[1];
        v56 = v120.f64[1] * v121;
        v57 = v121 * v121;
        v58 = -(v51 * v120.f64[0]);
        v59 = -(v51 * v120.f64[1]);
        v60 = -(v51 * v121);
        v61 = v51 * v51;
        if (*(_BYTE *)(a3 + 4))
        {
          v52 = v47 * v52;
          v53 = v47 * v53;
          v54 = v47 * v54;
          v55 = v47 * v55;
          v56 = v47 * v56;
          v57 = v47 * v57;
          v58 = v47 * v58;
          v59 = v47 * v59;
          v60 = v47 * v60;
          v61 = v47 * v61;
        }
        v8 = (double *)(*(_QWORD *)(a1 + 48) + 80 * *(unsigned int *)(a2[3] + 12 * v6));
        v9 = v53 + v8[1];
        v10 = v54 + v8[2];
        v11 = v55 + v8[3];
        v12 = v56 + v8[4];
        v13 = v57 + v8[5];
        v14 = v58 + v8[6];
        v15 = v59 + v8[7];
        v16 = v60 + v8[8];
        v17 = v61 + v8[9];
        *v8 = v52 + *v8;
        v8[1] = v9;
        v8[2] = v10;
        v8[3] = v11;
        v8[4] = v12;
        v8[5] = v13;
        v8[6] = v14;
        v8[7] = v15;
        v8[8] = v16;
        v8[9] = v17;
        v18 = (double *)(*(_QWORD *)(a1 + 48) + 80 * *(unsigned int *)(a2[3] + 12 * v6 + 4));
        v19 = v53 + v18[1];
        v20 = v54 + v18[2];
        v21 = v55 + v18[3];
        v22 = v56 + v18[4];
        v23 = v57 + v18[5];
        v24 = v58 + v18[6];
        v25 = v59 + v18[7];
        v26 = v60 + v18[8];
        v27 = v61 + v18[9];
        *v18 = v52 + *v18;
        v18[1] = v19;
        v18[2] = v20;
        v18[3] = v21;
        v18[4] = v22;
        v18[5] = v23;
        v18[6] = v24;
        v18[7] = v25;
        v18[8] = v26;
        v18[9] = v27;
        v28 = (double *)(*(_QWORD *)(a1 + 48) + 80 * *(unsigned int *)(a2[3] + 12 * v6 + 8));
        v29 = v53 + v28[1];
        v30 = v54 + v28[2];
        v31 = v55 + v28[3];
        v32 = v56 + v28[4];
        v33 = v57 + v28[5];
        v34 = v58 + v28[6];
        v35 = v59 + v28[7];
        v36 = v60 + v28[8];
        v37 = v61 + v28[9];
        *v28 = v52 + *v28;
        v28[1] = v29;
        v28[2] = v30;
        v28[3] = v31;
        v28[4] = v32;
        v28[5] = v33;
        v28[6] = v34;
        v28[7] = v35;
        v28[8] = v36;
        v28[9] = v37;
      }
      v38 = a2[1];
      v6 = ++v7;
    }
    while (v38 > v7);
    if (*(_BYTE *)(a3 + 5))
      v62 = *(_QWORD *)(a3 + 40) == 0;
    else
      v62 = 0;
    if (!v62 && v38)
    {
      v63 = 0;
      v64 = 0;
      do
      {
        if (sub_239501C3C((uint64_t)a2, v64))
        {
          v65 = sub_239501CAC((uint64_t)a2, v64, 0, a1);
          v67 = v66;
          v69 = v68;
          v120.f64[0] = v65;
          v120.f64[1] = v66;
          v121 = v68;
          v70 = sub_239501CAC((uint64_t)a2, v64, 1, a1);
          v72 = v71;
          v74 = v73;
          v122 = v70;
          v123 = v71;
          v124 = v73;
          v75 = 0;
          v125 = sub_239501CAC((uint64_t)a2, v64, 2, a1);
          v126 = v76;
          v127 = v77;
          v78 = v69 * v70 - v65 * v74;
          v79 = v65 * v72 - v67 * v70;
          v128 = 0x100000000;
          v129 = 2;
          v80 = v67 * v74 - v69 * v72;
          v117 = sqrt(v78 * v78 + v80 * v80 + v79 * v79);
          do
          {
            v90 = *(_DWORD *)((char *)&v128 + v75);
            if (*(unsigned __int8 *)(*(_QWORD *)(a2[6] + 24 * v63 + 8 * (char)v90) + 145) == 255)
            {
              v91 = &v120.f64[3 * (char)v90];
              v93 = v91[1];
              v92 = v91[2];
              v94 = v93 * -v79 + v78 * v92;
              v95 = v92 * -v80 + v79 * *v91;
              v96 = *v91 * -v78 + v80 * v93;
              v118.f64[0] = v94;
              v118.f64[1] = v95;
              v119 = v96;
              v97 = sqrt(v95 * v95 + v94 * v94 + v96 * v96);
              if (v97 != 0.0 && v97 > 1.0e-12)
              {
                sub_239504468(&v118, v97);
                v98 = sub_239501C84((uint64_t)a2, v64, (char)(v90+ 1- 3 * (((21846 * ((char)v90 + 1)) >> 16) + (21846 * ((char)v90 + 1) < 0))), a1);
                v99.f64[0] = v119;
                v102 = vmlad_n_f64(vmuld_lane_f64(v100, v118, 1), v98, v118.f64[0]) + v119 * v101;
                v103 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v118.f64[0], 0);
                v104.f64[1] = v118.f64[1];
                v104.f64[0] = v119;
                v103.f64[0] = v119;
                v105.f64[0] = v119;
                v105.f64[1] = -v102;
                v106 = vmulq_f64(v103, v105);
                v107 = vmuld_lane_f64(-v102, v118, 1);
                v99.f64[1] = v102;
                v108.f64[1] = v102;
                v108.f64[0] = -v102;
                v109 = vmulq_f64(v99, v108);
                v110 = *(float *)(a3 + 12);
                v111 = vmulq_n_f64(vmulq_n_f64(v118, v118.f64[0]), v110);
                v112 = vmulq_n_f64(vmulq_f64(v118, v104), v110);
                v113 = vmuld_lane_f64(v119, v118, 1) * v110;
                v114 = vmulq_n_f64(v106, v110);
                v115 = v107 * v110;
                v116 = vmulq_n_f64(v109, v110);
                if (*(_BYTE *)(a3 + 4))
                {
                  v111 = vmulq_n_f64(v111, v117);
                  v112 = vmulq_n_f64(v112, v117);
                  v113 = v117 * v113;
                  v114 = vmulq_n_f64(v114, v117);
                  v115 = v117 * v115;
                  v116 = vmulq_n_f64(v116, v117);
                }
                v81 = *(_QWORD *)(a1 + 48)
                    + 80 * *(unsigned int *)(a2[3] + 12 * v63 + 4 * ((__int16)((char)v90 + 1) % 3));
                v82 = v113 + *(double *)(v81 + 32);
                v83 = v115 + *(double *)(v81 + 56);
                v84 = vaddq_f64(v112, *(float64x2_t *)(v81 + 16));
                *(float64x2_t *)v81 = vaddq_f64(v111, *(float64x2_t *)v81);
                *(float64x2_t *)(v81 + 16) = v84;
                *(double *)(v81 + 32) = v82;
                *(float64x2_t *)(v81 + 40) = vaddq_f64(v114, *(float64x2_t *)(v81 + 40));
                *(double *)(v81 + 56) = v83;
                *(float64x2_t *)(v81 + 64) = vaddq_f64(v116, *(float64x2_t *)(v81 + 64));
                v85 = (float64x2_t *)(*(_QWORD *)(a1 + 48)
                                    + 80
                                    * *(unsigned int *)(a2[3]
                                                      + 12 * v63
                                                      + 4
                                                      * (char)(v90
                                                             + 2
                                                             - 3
                                                             * (((21846 * ((char)v90 + 2)) >> 16)
                                                              + (21846 * ((char)v90 + 2) < 0)))));
                v86 = vaddq_f64(v112, v85[1]);
                v87 = (float64x2_t)vextq_s8((int8x16_t)v114, (int8x16_t)v114, 8uLL);
                v88.f64[1] = v87.f64[1];
                v88.f64[0] = v113;
                *v85 = vaddq_f64(v111, *v85);
                v85[1] = v86;
                v87.f64[1] = v115;
                v89 = vaddq_f64(v87, v85[3]);
                v85[2] = vaddq_f64(v88, v85[2]);
                v85[3] = v89;
                v85[4] = vaddq_f64(v116, v85[4]);
              }
            }
            v75 += 4;
          }
          while (v75 != 12);
        }
        v63 = ++v64;
      }
      while (a2[1] > (unint64_t)v64);
    }
  }
}

void sub_2395024C4(uint64_t a1, uint64_t a2, void **a3)
{
  void **v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD **v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD **v51;
  _OWORD *v52;
  unint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char *v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD **v88;
  uint64_t v90;
  _QWORD **v92;
  _QWORD *v93;
  unint64_t v94;

  v3 = a3;
  v93 = 0;
  v94 = 0;
  v92 = &v93;
  v90 = a2;
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 24) + 12 * v5;
      do
      {
        while (1)
        {
          if ((v7 + 1) == 3)
            v10 = 0;
          else
            v10 = v7 + 1;
          v11 = v7 + 2;
          if ((v7 + 2) >= 3u)
            v11 = v7 - 1;
          v12 = *(_DWORD *)(v8 + 4 * v10);
          v13 = *(_DWORD *)(v8 + 4 * v11);
          v14 = v12 <= v13 ? v13 : v12;
          v15 = v12 >= v13 ? v13 : v12;
          v16 = v93;
          v17 = &v93;
LABEL_22:
          v18 = v17;
          if (v16)
            break;
LABEL_29:
          v21 = (char *)operator new(0xC8uLL);
          *((_QWORD *)v21 + 4) = (v14 << 32) | v15;
          v21[40] = 0;
          *((_QWORD *)v21 + 6) = a1;
          *(_OWORD *)(v21 + 56) = 0u;
          *(_OWORD *)(v21 + 72) = 0u;
          *(_OWORD *)(v21 + 88) = 0u;
          *(_OWORD *)(v21 + 104) = 0u;
          *(_OWORD *)(v21 + 120) = 0u;
          *(_OWORD *)(v21 + 136) = 0u;
          *(_OWORD *)(v21 + 152) = 0u;
          *((_DWORD *)v21 + 42) = v15;
          *((_DWORD *)v21 + 43) = v14;
          *((_QWORD *)v21 + 22) = 0;
          *((_WORD *)v21 + 92) = -1;
          v21[192] = 0;
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = v17;
          *v18 = v21;
          v22 = v21;
          if (*v92)
          {
            v92 = (_QWORD **)*v92;
            v22 = (_QWORD *)*v18;
          }
          v23 = v93;
          v24 = v22 == v93;
          *((_BYTE *)v22 + 24) = v22 == v93;
          if (!v24)
          {
            do
            {
              v25 = v22[2];
              if (*(_BYTE *)(v25 + 24))
                break;
              v26 = *(_QWORD **)(v25 + 16);
              v27 = *v26;
              if (*v26 == v25)
              {
                v30 = v26[1];
                if (!v30 || (v31 = *(unsigned __int8 *)(v30 + 24), v28 = (_BYTE *)(v30 + 24), v31))
                {
                  if (*(_QWORD **)v25 == v22)
                  {
                    *(_BYTE *)(v25 + 24) = 1;
                    *((_BYTE *)v26 + 24) = 0;
                    v34 = *(_QWORD *)(v25 + 8);
                    *v26 = v34;
                    if (v34)
                      goto LABEL_46;
                  }
                  else
                  {
                    v32 = *(uint64_t **)(v25 + 8);
                    v33 = *v32;
                    *(_QWORD *)(v25 + 8) = *v32;
                    if (v33)
                    {
                      *(_QWORD *)(v33 + 16) = v25;
                      v26 = *(_QWORD **)(v25 + 16);
                    }
                    v32[2] = (uint64_t)v26;
                    *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v32;
                    *v32 = v25;
                    *(_QWORD *)(v25 + 16) = v32;
                    v26 = (_QWORD *)v32[2];
                    v25 = *v26;
                    *((_BYTE *)v32 + 24) = 1;
                    *((_BYTE *)v26 + 24) = 0;
                    v34 = *(_QWORD *)(v25 + 8);
                    *v26 = v34;
                    if (v34)
LABEL_46:
                      *(_QWORD *)(v34 + 16) = v26;
                  }
                  *(_QWORD *)(v25 + 16) = v26[2];
                  *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
                  *(_QWORD *)(v25 + 8) = v26;
LABEL_7:
                  v26[2] = v25;
                  break;
                }
              }
              else if (!v27 || (v29 = *(unsigned __int8 *)(v27 + 24), v28 = (_BYTE *)(v27 + 24), v29))
              {
                if (*(_QWORD **)v25 == v22)
                {
                  v37 = v22[1];
                  *(_QWORD *)v25 = v37;
                  if (v37)
                  {
                    *(_QWORD *)(v37 + 16) = v25;
                    v26 = *(_QWORD **)(v25 + 16);
                  }
                  v22[2] = v26;
                  *(_QWORD *)(*(_QWORD *)(v25 + 16) + 8 * (**(_QWORD **)(v25 + 16) != v25)) = v22;
                  v22[1] = v25;
                  *(_QWORD *)(v25 + 16) = v22;
                  v26 = (_QWORD *)v22[2];
                  *((_BYTE *)v22 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v25 = v26[1];
                  v35 = *(_QWORD **)v25;
                  v26[1] = *(_QWORD *)v25;
                  if (!v35)
                    goto LABEL_6;
                }
                else
                {
                  *(_BYTE *)(v25 + 24) = 1;
                  *((_BYTE *)v26 + 24) = 0;
                  v25 = v26[1];
                  v35 = *(_QWORD **)v25;
                  v26[1] = *(_QWORD *)v25;
                  if (!v35)
                    goto LABEL_6;
                }
                v35[2] = v26;
LABEL_6:
                *(_QWORD *)(v25 + 16) = v26[2];
                *(_QWORD *)(v26[2] + 8 * (*(_QWORD *)v26[2] != (_QWORD)v26)) = v25;
                *(_QWORD *)v25 = v26;
                goto LABEL_7;
              }
              *(_BYTE *)(v25 + 24) = 1;
              v22 = v26;
              *((_BYTE *)v26 + 24) = v26 == v23;
              *v28 = 1;
            }
            while (v26 != v23);
          }
          v94 = ++v4;
          *((_DWORD *)v21 + 44) = v6;
          v21[184] = v7;
          v9 = v7++;
          if (v9 >= 2)
            goto LABEL_3;
        }
        while (1)
        {
          v17 = (_QWORD **)v16;
          v19 = *((_DWORD *)v16 + 8);
          if (v15 < v19)
          {
LABEL_21:
            v16 = *v17;
            goto LABEL_22;
          }
          if (v19 >= v15)
          {
            v20 = *((_DWORD *)v17 + 9);
            if (v14 < v20)
              goto LABEL_21;
            if (v20 >= v14)
              break;
          }
          v16 = v17[1];
          if (!v16)
          {
            v18 = v17 + 1;
            goto LABEL_29;
          }
        }
        *((_DWORD *)v17 + 45) = v6;
        *((_BYTE *)v17 + 185) = v7;
        *((_BYTE *)v17 + 192) = 1;
        v36 = v7++;
      }
      while (v36 < 2);
LABEL_3:
      a2 = v90;
      v5 = ++v6;
    }
    while (*(_QWORD *)(v90 + 8) > (unint64_t)v6);
    v3 = a3;
    v38 = *a3;
    if (0x86BCA1AF286BCA1BLL * (((_BYTE *)a3[2] - (_BYTE *)*a3) >> 3) < v4)
    {
      if (v4 > 0x1AF286BCA1AF286)
        sub_2394189F8();
      v39 = a3[1];
      v40 = (char *)operator new(152 * v4);
      v41 = &v40[152 * ((v39 - v38) / 152)];
      v42 = v41;
      if (v39 != v38)
      {
        v43 = &v40[152 * ((v39 - v38) / 152)];
        do
        {
          v42 = v43 - 152;
          v44 = *(_OWORD *)(v39 - 152);
          *(_OWORD *)(v43 - 136) = *(_OWORD *)(v39 - 136);
          *(_OWORD *)(v43 - 152) = v44;
          v45 = *(_OWORD *)(v39 - 120);
          v46 = *(_OWORD *)(v39 - 104);
          v47 = *(_OWORD *)(v39 - 88);
          *(_OWORD *)(v43 - 72) = *(_OWORD *)(v39 - 72);
          *(_OWORD *)(v43 - 88) = v47;
          *(_OWORD *)(v43 - 104) = v46;
          *(_OWORD *)(v43 - 120) = v45;
          v48 = *(_OWORD *)(v39 - 56);
          v49 = *(_OWORD *)(v39 - 40);
          v50 = *(_OWORD *)(v39 - 24);
          *((_QWORD *)v43 - 1) = *((_QWORD *)v39 - 1);
          *(_OWORD *)(v43 - 24) = v50;
          *(_OWORD *)(v43 - 40) = v49;
          *(_OWORD *)(v43 - 56) = v48;
          v39 -= 152;
          v43 -= 152;
        }
        while (v39 != v38);
      }
      *a3 = v42;
      a3[1] = v41;
      a3[2] = &v40[152 * v4];
      if (v38)
        operator delete(v38);
    }
  }
  v51 = v92;
  if (v92 != &v93)
  {
    do
    {
      v52 = v51 + 5;
      v54 = (char *)v3[1];
      v53 = (unint64_t)v3[2];
      if ((unint64_t)v54 < v53)
      {
        v55 = *(_OWORD *)(v51 + 7);
        *(_OWORD *)v54 = *v52;
        *((_OWORD *)v54 + 1) = v55;
        v56 = *(_OWORD *)(v51 + 9);
        v57 = *(_OWORD *)(v51 + 11);
        v58 = *(_OWORD *)(v51 + 15);
        *((_OWORD *)v54 + 4) = *(_OWORD *)(v51 + 13);
        *((_OWORD *)v54 + 5) = v58;
        *((_OWORD *)v54 + 2) = v56;
        *((_OWORD *)v54 + 3) = v57;
        v59 = *(_OWORD *)(v51 + 17);
        v60 = *(_OWORD *)(v51 + 19);
        v61 = *(_OWORD *)(v51 + 21);
        *((_QWORD *)v54 + 18) = v51[23];
        *((_OWORD *)v54 + 7) = v60;
        *((_OWORD *)v54 + 8) = v61;
        *((_OWORD *)v54 + 6) = v59;
        v62 = v54 + 152;
        v63 = v90;
        goto LABEL_86;
      }
      v64 = (char *)*v3;
      v65 = 0x86BCA1AF286BCA1BLL * ((v54 - (_BYTE *)*v3) >> 3);
      v66 = v65 + 1;
      if (v65 + 1 > 0x1AF286BCA1AF286)
        sub_2394189F8();
      v67 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v53 - (_QWORD)v64) >> 3);
      if (2 * v67 > v66)
        v66 = 2 * v67;
      if (v67 >= 0xD79435E50D7943)
        v68 = 0x1AF286BCA1AF286;
      else
        v68 = v66;
      if (v68)
      {
        if (v68 > 0x1AF286BCA1AF286)
          sub_239418A80();
        v69 = (char *)operator new(152 * v68);
      }
      else
      {
        v69 = 0;
      }
      v70 = &v69[152 * v65];
      v71 = *(_OWORD *)(v51 + 7);
      *(_OWORD *)v70 = *v52;
      *((_OWORD *)v70 + 1) = v71;
      v72 = *(_OWORD *)(v51 + 9);
      v73 = *(_OWORD *)(v51 + 11);
      v74 = *(_OWORD *)(v51 + 15);
      *((_OWORD *)v70 + 4) = *(_OWORD *)(v51 + 13);
      *((_OWORD *)v70 + 5) = v74;
      *((_OWORD *)v70 + 2) = v72;
      *((_OWORD *)v70 + 3) = v73;
      v75 = *(_OWORD *)(v51 + 17);
      v76 = *(_OWORD *)(v51 + 19);
      v77 = *(_OWORD *)(v51 + 21);
      *((_QWORD *)v70 + 18) = v51[23];
      *((_OWORD *)v70 + 7) = v76;
      *((_OWORD *)v70 + 8) = v77;
      *((_OWORD *)v70 + 6) = v75;
      v78 = v70;
      if (v54 == v64)
      {
        v63 = v90;
        v62 = v70 + 152;
        *v3 = v70;
        v3[1] = v70 + 152;
        v3[2] = &v69[152 * v68];
        if (v54)
          goto LABEL_85;
      }
      else
      {
        v63 = v90;
        do
        {
          v79 = *(_OWORD *)(v54 - 152);
          *(_OWORD *)(v78 - 136) = *(_OWORD *)(v54 - 136);
          *(_OWORD *)(v78 - 152) = v79;
          v80 = *(_OWORD *)(v54 - 120);
          v81 = *(_OWORD *)(v54 - 104);
          v82 = *(_OWORD *)(v54 - 88);
          *(_OWORD *)(v78 - 72) = *(_OWORD *)(v54 - 72);
          *(_OWORD *)(v78 - 88) = v82;
          *(_OWORD *)(v78 - 104) = v81;
          *(_OWORD *)(v78 - 120) = v80;
          v83 = *(_OWORD *)(v54 - 56);
          v84 = *(_OWORD *)(v54 - 40);
          v85 = *(_OWORD *)(v54 - 24);
          *((_QWORD *)v78 - 1) = *((_QWORD *)v54 - 1);
          *(_OWORD *)(v78 - 24) = v85;
          *(_OWORD *)(v78 - 40) = v84;
          *(_OWORD *)(v78 - 56) = v83;
          v78 -= 152;
          v54 -= 152;
        }
        while (v54 != v64);
        v54 = (char *)*v3;
        v62 = v70 + 152;
        *v3 = v78;
        v3[1] = v70 + 152;
        v3[2] = &v69[152 * v68];
        if (v54)
LABEL_85:
          operator delete(v54);
      }
LABEL_86:
      v3[1] = v62;
      *(_QWORD *)(*(_QWORD *)(v63 + 48) + 24 * *((unsigned int *)v51 + 44) + 8 * *((char *)v51 + 184)) = v62 - 152;
      if (*((_BYTE *)v51 + 192))
      {
        *(_QWORD *)(*(_QWORD *)(v63 + 48) + 24 * *((unsigned int *)v51 + 45) + 8 * *((char *)v51 + 185)) = (char *)v3[1] - 152;
        v86 = v51[1];
        if (v86)
          goto LABEL_90;
      }
      else
      {
        v87 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(v87 + (((unint64_t)*((unsigned int *)v51 + 42) >> 3) & 0x1FFFFFF8)) |= 1 << *((_DWORD *)v51 + 42);
        *(_QWORD *)(v87 + (((unint64_t)*((unsigned int *)v51 + 43) >> 3) & 0x1FFFFFF8)) |= 1 << *((_DWORD *)v51 + 43);
        v86 = v51[1];
        if (v86)
        {
          do
          {
LABEL_90:
            v88 = (_QWORD **)v86;
            v86 = (_QWORD *)*v86;
          }
          while (v86);
          goto LABEL_68;
        }
      }
      do
      {
        v88 = (_QWORD **)v51[2];
        v24 = *v88 == v51;
        v51 = v88;
      }
      while (!v24);
LABEL_68:
      v51 = v88;
    }
    while (v88 != &v93);
  }
  sub_239421038((uint64_t)&v92, v93);
}

void sub_239502C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_239421038((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_239502C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_239421038((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_239502CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_239421038((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_239502CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_239421038((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL sub_239502CD4(uint64_t a1, uint64_t a2, unsigned int a3, int a4, double *a5, float64_t a6)
{
  double v12;
  double v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  _BOOL8 result;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  float64x2_t v37;
  double v38;
  double v39[3];
  double v40[3];
  double v41[3];

  v41[0] = sub_239501C84(a2, a3, a4, a1);
  v41[1] = v12;
  v41[2] = v13;
  v14 = 21846 * a4;
  v40[0] = sub_239501C84(a2, a3, (char)(a4 - 3 * (((v14 + 21846) >> 16) + (v14 + 21846 < 0)) + 1), a1);
  v40[1] = v15;
  v40[2] = v16;
  v39[0] = sub_239501C84(a2, a3, (char)(a4 - 3 * (((v14 + 43692) >> 16) + (v14 + 43692 < 0)) + 2), a1);
  v39[1] = v17;
  v39[2] = v18;
  v19 = sub_239504488(v39, v40);
  v21 = v20;
  v23 = v22;
  v24 = sub_239504488(v41, v39);
  v26 = v25;
  v28 = v27;
  v31 = sub_239504488(a5, v39);
  result = 0;
  v37.f64[0] = v21 * v28 - v23 * v26;
  v37.f64[1] = v23 * v24 - v19 * v28;
  v38 = v19 * v26 - v21 * v24;
  v33 = sqrt(v37.f64[1] * v37.f64[1] + v37.f64[0] * v37.f64[0] + v38 * v38);
  if (v33 != 0.0 && v33 > 1.0e-12)
  {
    v35.f64[0] = v29 * -v23 + v21 * v30;
    v35.f64[1] = v30 * -v19 + v23 * v31;
    v36 = v31 * -v21 + v19 * v29;
    v34 = sqrt(v35.f64[1] * v35.f64[1] + v35.f64[0] * v35.f64[0] + v36 * v36);
    result = 1;
    if (v34 != 0.0 && v34 > 1.0e-12)
    {
      sub_239504468(&v37, v33);
      sub_239504468(&v35, v34);
      return v37.f64[1] * v35.f64[1] + v37.f64[0] * v35.f64[0] + v38 * v36 < a6;
    }
  }
  return result;
}

BOOL sub_239502EE8(double *a1, double *a2, double *a3, double a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v8 = sub_239504488(a2, a1);
  v10 = v9;
  v12 = v11;
  v13 = sub_239504488(a3, a1);
  v15 = v14;
  v17 = v16;
  v18 = sub_239504488(a3, a2);
  v19 = sqrt(v10 * v10 + v8 * v8 + v12 * v12);
  v22 = sqrt(v20 * v20 + v18 * v18 + v21 * v21);
  v23 = sqrt(v15 * v15 + v13 * v13 + v17 * v17);
  return ((v23 + v19 + v22) * 0.5 - v23)
       * (((v23 + v19 + v22) * 0.5 - v22)
        * (((v23 + v19 + v22) * 0.5 - v19)
         * 8.0))
       / (v23
        * (v19
         * v22)) < a4;
}

char **sub_239502FE4(char **a1, char *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = 0;
  v5 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = v5 + 1;
  if (v5 != -1)
  {
    if (v6 >> 62)
      sub_2394189F8();
    v4 = (char *)operator new(4 * v6);
    *a1 = v4;
    a1[2] = &v4[4 * v6];
    bzero(v4, 4 * v6);
    a1[1] = &v4[4 * v6];
  }
  a1[3] = a2;
  v8 = *(_QWORD *)a2;
  v7 = *((_QWORD *)a2 + 1);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  v9 = v7 - v8;
  if (v9)
  {
    v10 = v9 / 152;
    if ((unint64_t)(v9 / 152) >> 61)
      sub_2394189F8();
    v11 = 8 * v10;
    v12 = (char *)operator new(8 * v10);
    a1[4] = v12;
    v13 = &v12[8 * v10];
    a1[6] = v13;
    bzero(v12, v11);
    a1[5] = v13;
  }
  v15 = *(_QWORD *)a2;
  v14 = *((_QWORD *)a2 + 1);
  a1[8] = 0;
  a1[7] = 0;
  a1[9] = 0;
  a1[10] = 0;
  v16 = v14 - v15;
  if (v16)
  {
    if (v16 < 0)
      sub_2394189F8();
    v17 = 0x86BCA1AF286BCA1BLL * (v16 >> 3);
    v18 = ((v17 - 1) >> 6) + 1;
    a1[8] = (char *)operator new(8 * v18);
    a1[9] = 0;
    a1[10] = (char *)v18;
    sub_23942D8C8(a1 + 8, v17, 0);
    v4 = *a1;
  }
  v19 = *((_QWORD *)a2 + 1);
  v20 = v19 - *(_QWORD *)a2;
  if (v19 != *(_QWORD *)a2)
  {
    v21 = 0;
    v22 = 0x86BCA1AF286BCA1BLL * (v20 >> 3);
    v23 = a1[4];
    do
    {
      v24 = (uint64_t)(a1[7] + 1);
      a1[7] = (char *)v24;
      *(_QWORD *)&v23[8 * v21] = v24;
      *(_DWORD *)&v4[4 * v24] = v21++;
    }
    while (v22 > v21);
  }
  v25 = (unint64_t)(a1[7] + 1);
  v26 = (a1[1] - v4) >> 2;
  if (v25 <= v26)
  {
    if (v25 < v26)
      a1[1] = &v4[4 * v25];
  }
  else
  {
    sub_23942CB44((uint64_t)a1, v25 - v26);
  }
  return a1;
}

void sub_2395031E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  if (*v3)
  {
    operator delete(*v3);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      v6 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 40) = v5;
  operator delete(v5);
  v6 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v1 + 8) = v6;
  operator delete(v6);
  goto LABEL_5;
}

void sub_239503268(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v1 - 1;
  v2 = *(_QWORD *)a1;
  v3 = *(unsigned int *)(*(_QWORD *)a1 + 4);
  v4 = *(_QWORD *)(a1 + 32);
  v1 *= 4;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + v1);
  v6 = *(_QWORD *)(v4 + 8 * v3);
  *(_QWORD *)(v4 + 8 * v3) = *(_QWORD *)(v4 + 8 * v5);
  *(_QWORD *)(v4 + 8 * v5) = v6;
  *(_DWORD *)(v2 + 4) = v5;
  *(_DWORD *)(v2 + v1) = v3;
  v7 = *(_QWORD *)(a1 + 56);
  if (v7 >= 2)
  {
    v8 = **(_QWORD **)(a1 + 24);
    v9 = 1;
    v10 = 2;
    do
    {
      if (v10 >= v7)
      {
        v11 = v10;
      }
      else
      {
        v11 = v10 | 1;
        if (*(double *)(v8 + 152 * *(unsigned int *)(v2 + 4 * v10) + 120) <= *(double *)(v8
                                                                                          + 152
                                                                                          * *(unsigned int *)(v2 + 4 * (v10 | 1))
                                                                                          + 120))
          v11 = v10;
      }
      v12 = *(unsigned int *)(v2 + 4 * v9);
      v13 = *(unsigned int *)(v2 + 4 * v11);
      if (*(double *)(v8 + 152 * v12 + 120) <= *(double *)(v8 + 152 * v13 + 120))
        break;
      v14 = *(_QWORD *)(v4 + 8 * v12);
      *(_QWORD *)(v4 + 8 * v12) = *(_QWORD *)(v4 + 8 * v13);
      *(_QWORD *)(v4 + 8 * v13) = v14;
      *(_DWORD *)(v2 + 4 * v9) = v13;
      *(_DWORD *)(v2 + 4 * v11) = v12;
      v10 = 2 * v11;
      v7 = *(_QWORD *)(a1 + 56);
      v9 = v11;
    }
    while (2 * v11 <= v7);
  }
  v15 = (*(_QWORD *)(a1 + 8) - v2) >> 2;
  if (v7 + 1 <= v15)
  {
    if (v7 + 1 < v15)
      *(_QWORD *)(a1 + 8) = v2 + 4 * (v7 + 1);
  }
  else
  {
    sub_23942CB44(a1, v7 + 1 - v15);
  }
}

uint64_t *sub_23950337C(uint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = 2 * a2;
  v3 = result[7];
  if (2 * a2 <= v3)
  {
    v4 = *result;
    v5 = *(_QWORD *)result[3];
    do
    {
      if (v2 >= v3)
      {
        v6 = v2;
      }
      else
      {
        v6 = v2 | 1;
        if (*(double *)(v5 + 152 * *(unsigned int *)(v4 + 4 * v2) + 120) <= *(double *)(v5
                                                                                         + 152
                                                                                         * *(unsigned int *)(v4 + 4 * (v2 | 1))
                                                                                         + 120))
          v6 = v2;
      }
      v7 = *(unsigned int *)(v4 + 4 * a2);
      v8 = *(unsigned int *)(v4 + 4 * v6);
      if (*(double *)(v5 + 152 * v7 + 120) <= *(double *)(v5 + 152 * v8 + 120))
        break;
      v9 = result[4];
      v10 = *(_QWORD *)(v9 + 8 * v7);
      *(_QWORD *)(v9 + 8 * v7) = *(_QWORD *)(v9 + 8 * v8);
      *(_QWORD *)(v9 + 8 * v8) = v10;
      *(_DWORD *)(v4 + 4 * a2) = v8;
      *(_DWORD *)(v4 + 4 * v6) = v7;
      v2 = 2 * v6;
      v3 = result[7];
      a2 = v6;
    }
    while (2 * v6 <= v3);
  }
  return result;
}

uint64_t *sub_23950342C(uint64_t *result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  BOOL v17;

  v3 = result[4];
  v4 = *(_QWORD *)result[3];
  v5 = *(_QWORD *)(v3 + 5425221848 * ((unint64_t)(a2 - v4) >> 3));
  if (*(double *)(a2 + 120) <= a3)
  {
    if (v5 >= 2)
    {
      v13 = *result;
      v14 = *(unsigned int *)(*result + 4 * v5);
      v15 = *(double *)(v4 + 152 * v14 + 120);
      do
      {
        v16 = *(unsigned int *)(v13 + 4 * (v5 >> 1));
        if (*(double *)(v4 + 152 * v16 + 120) <= v15)
          break;
        result = *(uint64_t **)(v3 + 8 * v14);
        *(_QWORD *)(v3 + 8 * v14) = *(_QWORD *)(v3 + 8 * v16);
        *(_QWORD *)(v3 + 8 * v16) = result;
        *(_DWORD *)(v13 + 4 * v5) = v16;
        *(_DWORD *)(v13 + 4 * (v5 >> 1)) = v14;
        v17 = v5 > 3;
        v5 >>= 1;
      }
      while (v17);
    }
  }
  else
  {
    v6 = 2 * v5;
    v7 = result[7];
    if (2 * v5 <= v7)
    {
      v8 = *result;
      do
      {
        if (v6 >= v7)
        {
          v9 = v6;
        }
        else
        {
          v9 = v6 | 1;
          if (*(double *)(v4 + 152 * *(unsigned int *)(v8 + 4 * v6) + 120) <= *(double *)(v4
                                                                                           + 152
                                                                                           * *(unsigned int *)(v8 + 4 * (v6 | 1))
                                                                                           + 120))
            v9 = v6;
        }
        v10 = *(unsigned int *)(v8 + 4 * v5);
        v11 = *(unsigned int *)(v8 + 4 * v9);
        if (*(double *)(v4 + 152 * v10 + 120) <= *(double *)(v4 + 152 * v11 + 120))
          break;
        v12 = *(_QWORD *)(v3 + 8 * v10);
        *(_QWORD *)(v3 + 8 * v10) = *(_QWORD *)(v3 + 8 * v11);
        *(_QWORD *)(v3 + 8 * v11) = v12;
        *(_DWORD *)(v8 + 4 * v5) = v11;
        *(_DWORD *)(v8 + 4 * v9) = v10;
        v6 = 2 * v9;
        v7 = result[7];
        v5 = v9;
      }
      while (2 * v9 <= v7);
    }
  }
  return result;
}

uint64_t *sub_239503560(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a2 + 120) = 0x7FEFFFFFFFFFFFFFLL;
  v2 = result[4];
  v3 = *(_QWORD *)result[3];
  v4 = *(_QWORD *)(v2 + 5425221848 * ((unint64_t)(a2 - v3) >> 3));
  v5 = 2 * v4;
  v6 = result[7];
  if (2 * v4 <= v6)
  {
    v7 = *result;
    do
    {
      if (v5 >= v6)
      {
        v8 = v5;
      }
      else
      {
        v8 = v5 | 1;
        if (*(double *)(v3 + 152 * *(unsigned int *)(v7 + 4 * v5) + 120) <= *(double *)(v3
                                                                                         + 152
                                                                                         * *(unsigned int *)(v7 + 4 * (v5 | 1))
                                                                                         + 120))
          v8 = v5;
      }
      v9 = *(unsigned int *)(v7 + 4 * v4);
      v10 = *(unsigned int *)(v7 + 4 * v8);
      if (*(double *)(v3 + 152 * v9 + 120) <= *(double *)(v3 + 152 * v10 + 120))
        break;
      v11 = *(_QWORD *)(v2 + 8 * v9);
      *(_QWORD *)(v2 + 8 * v9) = *(_QWORD *)(v2 + 8 * v10);
      *(_QWORD *)(v2 + 8 * v10) = v11;
      *(_DWORD *)(v7 + 4 * v4) = v10;
      *(_DWORD *)(v7 + 4 * v8) = v9;
      v5 = 2 * v8;
      v6 = result[7];
      v4 = v8;
    }
    while (2 * v8 <= v6);
  }
  return result;
}

BOOL sub_23950362C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0x86BCA1AF286BCA1BLL * ((a2 - **(_QWORD **)(a1 + 24)) >> 3);
  return ((*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (v2 >> 6)) >> v2) & 1) == 0;
}

uint64_t sub_23950366C(uint64_t result, uint64_t a2)
{
  unint64_t v2;

  v2 = 0x86BCA1AF286BCA1BLL * ((a2 - **(_QWORD **)(result + 24)) >> 3);
  *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * (v2 >> 6)) |= 1 << v2;
  return result;
}

uint64_t sub_2395036B4(uint64_t result, unsigned int a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 64) + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) |= 1 << a2;
  return result;
}

uint64_t sub_2395036DC(uint64_t result, _QWORD *a2)
{
  double v2;
  uint64_t v4;
  std::logic_error *exception;

  if (*(float *)result > 1.0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239503898(exception, "ERROR::INVALID_OPTION: strength > 1");
    goto LABEL_18;
  }
  if (*(float *)result < 0.0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239503898(exception, "ERROR::INVALID_OPTION: strength < 0");
    goto LABEL_18;
  }
  if (*(float *)(result + 12) < 0.0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239503898(exception, "ERROR::INVALID_OPTION: border constraint < 0");
    goto LABEL_18;
  }
  v2 = *(double *)(result + 16);
  if (v2 > 1.0 || v2 < -1.0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239503898(exception, "ERROR::INVALID_OPTION: fold-over angle not between -1 and 1");
    goto LABEL_18;
  }
  if (*(double *)(result + 24) > 1.0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239503898(exception, "ERROR::INVALID_OPTION: aspect-ratio-threshold cannot exceed 1");
    goto LABEL_18;
  }
  v4 = *(_QWORD *)(result + 40);
  if (v4 && v4 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239503898(exception, "ERROR::INVALID_OPTION: fixedVertices is neither empty nor equal with 'positions' in size");
LABEL_18:
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_239503820(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239503834(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239503848(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_23950385C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239503870(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_239503884(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_239503898(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

void sub_2395038BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27[5];
  void *v28[2];
  void *v29[2];
  __int128 v30;
  int v31;
  _QWORD **v32;
  _QWORD *v33[2];
  void *__p;
  void *v35;
  uint64_t v36;
  void *v37[3];
  uint64_t *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  void *v42;
  void *v43;
  _BYTE *v44;
  uint64_t v45;
  void *v46[3];
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;

  sub_2395036DC(a3, a1);
  v6 = llroundf(*(float *)a3 * (float)(0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2)));
  if (v6)
  {
    sub_239504030(&v51, a1);
    sub_2395042CC(v46, a2);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_2395024C4((uint64_t)&v51, (uint64_t)v46, &v43);
    if (*(_QWORD *)(a3 + 40))
    {
      if (v52)
      {
        v7 = 0;
        v8 = *(_QWORD *)(a3 + 32);
        v9 = v58;
        v10 = 1;
        do
        {
          while (1)
          {
            v11 = v7 >> 6;
            v12 = 1 << v7;
            if ((*(_QWORD *)(v8 + 8 * v11) & v12) != 0)
              break;
            v9[v11] &= ~v12;
            v7 = v10++;
            if (v52 <= v7)
              goto LABEL_15;
          }
          v9[v11] |= v12;
          v7 = v10++;
        }
        while (v52 > v7);
      }
    }
    else if (*(_BYTE *)(a3 + 5) && v52)
    {
      v13 = 0;
      v14 = v57;
      v15 = v58;
      v16 = 1;
      do
      {
        while (1)
        {
          v17 = v13 >> 6;
          v18 = 1 << v13;
          if ((v14[v17] & v18) != 0)
            break;
          v15[v17] &= ~v18;
          v13 = v16++;
          if (v52 <= v13)
            goto LABEL_15;
        }
        v15[v17] |= v18;
        v13 = v16++;
      }
      while (v52 > v13);
    }
LABEL_15:
    sub_239501E78((uint64_t)&v51, v46, a3);
    sub_239503264((char **)v37, (char *)&v43);
    v19 = v43;
    if (v44 != v43)
    {
      v20 = 0;
      v21 = 0;
      do
      {
        if (!sub_23950171C((uint64_t)v19 + v20))
          sub_2395036B4((uint64_t)v37, v21);
        ++v21;
        v19 = v43;
        v20 += 152;
      }
      while (v21 < 0x86BCA1AF286BCA1BLL * ((v44 - (_BYTE *)v43) >> 3));
    }
    v22 = v41;
    if (v41 >= 2)
    {
      v23 = v41 >> 1;
      do
        sub_23950337C((uint64_t *)v37, v23--);
      while (v23);
      v22 = v41;
    }
    v27[0] = (uint64_t)&v51;
    v27[1] = (uint64_t)v46;
    v27[2] = (uint64_t)v37;
    v27[3] = 0;
    v27[4] = a3;
    v33[1] = 0;
    __p = 0;
    *(_OWORD *)v28 = 0u;
    *(_OWORD *)v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = v33;
    v33[0] = 0;
    v35 = 0;
    v36 = 0;
    if (v22 && (int)v6 >= 1)
    {
      do
      {
        v24 = *((_DWORD *)v37[0] + 1);
        v25 = *v38;
        v26 = (_BYTE *)(*v38 + 152 * v24);
        if (*v26 || !sub_23950362C((uint64_t)v37, *v38 + 152 * v24))
        {
          sub_239503268((uint64_t)v37);
        }
        else
        {
          if (*(double *)(v25 + 152 * v24 + 120) >= 1.79769313e308)
            break;
          LODWORD(v6) = v6 - sub_2394FE74C(v27, (uint64_t)v26);
        }
      }
      while (v41 && (int)v6 >= 1);
    }
    sub_239503D5C((uint64_t)&v51, (uint64_t *)v46);
    sub_239501D18((uint64_t)v46, (uint64_t)a2);
    sub_2395044A8(&v51, (uint64_t)a1, a2);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
    sub_239421038((uint64_t)&v32, v33[0]);
    if (v29[1])
    {
      *(void **)&v30 = v29[1];
      operator delete(v29[1]);
    }
    if (v28[0])
    {
      v28[1] = v28[0];
      operator delete(v28[0]);
    }
    if (v42)
      operator delete(v42);
    if (v39)
    {
      v40 = v39;
      operator delete(v39);
    }
    if (v37[0])
    {
      v37[1] = v37[0];
      operator delete(v37[0]);
    }
    if (v43)
    {
      v44 = v43;
      operator delete(v43);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v46[0])
      operator delete(v46[0]);
    if (v58)
      operator delete(v58);
    if (v57)
      operator delete(v57);
    if (v55)
    {
      v56 = v55;
      operator delete(v55);
    }
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (v51)
      operator delete(v51);
  }
}

void sub_239503CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  if (__p)
    operator delete(__p);
  sub_239503F80((uint64_t)&a41);
  sub_239503FCC(v41 - 200);
  _Unwind_Resume(a1);
}

void sub_239503D5C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v5 = ((v4 - 1) >> 6) + 1;
    v6 = operator new(8 * v5);
    v7 = v6;
    if (v4 >= 0x41)
      v8 = (v4 - 1) >> 6;
    else
      v8 = 0;
    v6[v8] = 0;
    if (v4 >= 0x40)
      memset(v6, 255, 8 * (v4 >> 6));
    if ((v4 & 0x3F) != 0)
      v7[v4 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(v4 & 0x3F);
    v9 = *(void **)a1;
    if (*(_QWORD *)a1)
      goto LABEL_11;
  }
  else
  {
    v5 = 0;
    v7 = 0;
    v9 = *(void **)a1;
    if (*(_QWORD *)a1)
LABEL_11:
      operator delete(v9);
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = a2[1];
  if (v10)
  {
    v11 = 0;
    v12 = *a2;
    v13 = (_DWORD *)(a2[3] + 8);
    do
    {
      if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        *(_QWORD *)((char *)v7 + (((unint64_t)*(v13 - 2) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(v13 - 2));
        *(_QWORD *)((char *)v7 + (((unint64_t)*(v13 - 1) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(v13 - 1));
        *(_QWORD *)((char *)v7 + (((unint64_t)*v13 >> 3) & 0x1FFFFFF8)) &= ~(1 << *v13);
      }
      ++v11;
      v13 += 3;
    }
    while (v10 > v11);
  }
}

uint64_t sub_239503ED8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v2);
  }
  sub_239421038(a1 + 96, *(_QWORD **)(a1 + 104));
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239503F34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 64);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239503F80(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239503FCC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 96);
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 72);
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_239504030(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = *a2;
  v4 = a2[1];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = v4 - v5;
  if (v6)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v8 = (v7 - 1) >> 6;
    v9 = operator new(8 * (v8 + 1));
    v10 = v9;
    a1[1] = v7;
    a1[2] = v8 + 1;
    *a1 = v9;
    if (v7 >= 0x41)
      v11 = (v7 - 1) >> 6;
    else
      v11 = 0;
    v9[v11] = 0;
    if (v7 >= 0x40)
      bzero(v9, 8 * (v7 >> 6));
    if ((v7 & 0x3F) != 0)
      v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a2;
  a1[5] = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a1[6] = 0;
  v12 = a1[1];
  a1[7] = 0;
  a1[8] = 0;
  if (v12)
  {
    if (v12 >= 0x333333333333334)
      sub_2394189F8();
    v13 = (char *)operator new(80 * v12);
    a1[6] = v13;
    a1[8] = &v13[80 * v12];
    bzero(v13, 80 * ((80 * v12 - 80) / 0x50) + 80);
    a1[9] = 0;
    a1[7] = &v13[80 * ((80 * v12 - 80) / 0x50) + 80];
    a1[10] = 0;
    a1[11] = 0;
    v14 = ((v12 - 1) >> 6) + 1;
    a1[9] = operator new(8 * v14);
    a1[10] = 0;
    a1[11] = v14;
    sub_23942D8C8(a1 + 9, v12, 0);
    a1[12] = 0;
    v15 = a1[1];
    a1[13] = 0;
    a1[14] = 0;
    if (v15)
    {
      if ((v15 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v16 = ((v15 - 1) >> 6) + 1;
      a1[12] = operator new(8 * v16);
      a1[13] = 0;
      a1[14] = v16;
      sub_23942D8C8(a1 + 12, v15, 0);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 13) = 0u;
    *(_OWORD *)(a1 + 11) = 0u;
    *(_OWORD *)(a1 + 9) = 0u;
  }
  return a1;
}

void sub_239504248(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  if (*v3)
  {
    operator delete(*v3);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *v4;
      if (!*v4)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 56) = v6;
  operator delete(v6);
  v7 = *v4;
  if (!*v4)
  {
LABEL_4:
    v8 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  *(_QWORD *)(v1 + 32) = v7;
  operator delete(v7);
  v8 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395042CC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;

  v5 = *a2;
  v4 = a2[1];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = v4 - v5;
  if (v6)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
    v8 = (v7 - 1) >> 6;
    v9 = operator new(8 * (v8 + 1));
    v10 = v9;
    a1[1] = v7;
    a1[2] = v8 + 1;
    *a1 = v9;
    if (v7 >= 0x41)
      v11 = (v7 - 1) >> 6;
    else
      v11 = 0;
    v9[v11] = 0;
    if (v7 >= 0x40)
      bzero(v9, 8 * (v7 >> 6));
    if ((v7 & 0x3F) != 0)
      v10[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a2;
  a1[5] = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a1[6] = 0;
  v12 = a1[1];
  a1[7] = 0;
  a1[8] = 0;
  if (v12)
  {
    if (v12 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v13 = (char *)operator new(24 * v12);
    a1[6] = v13;
    a1[8] = &v13[24 * v12];
    bzero(v13, 24 * ((24 * v12 - 24) / 0x18) + 24);
    a1[7] = &v13[24 * ((24 * v12 - 24) / 0x18) + 24];
  }
  return a1;
}

void sub_23950443C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  sub_239EC0140((void **)(v1 + 24), (void **)v1, (_QWORD *)(v1 + 32));
  _Unwind_Resume(a1);
}

float64_t sub_239504468(float64x2_t *a1, double a2)
{
  float64_t result;

  *a1 = vdivq_f64(*a1, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0));
  result = a1[1].f64[0] / a2;
  a1[1].f64[0] = result;
  return result;
}

double sub_239504488(double *a1, double *a2)
{
  return *a1 - *a2;
}

void sub_2395044A8(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  unsigned int v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  unsigned int v67;
  signed int v68;
  unsigned int v69;
  char **v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int *v103;
  unsigned int *i;
  unsigned int v105;
  unsigned int *v106;
  unsigned int *v107;
  uint64_t v108;
  unsigned int v109;
  void *v110;
  void *v111;
  void *v112;
  void *__p;
  char *v116;

  sub_239504CE0(&__p, a1[1]);
  v4 = *a3;
  if (a3[1] != *a3)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v8 = (char *)__p + 72 * *(unsigned int *)(v4 + 12 * v5);
      v10 = (char *)*((_QWORD *)v8 + 1);
      v9 = *((_QWORD *)v8 + 2);
      if ((unint64_t)v10 < v9)
      {
        *(_DWORD *)v10 = v6;
        v11 = (uint64_t)(v10 + 4);
        goto LABEL_26;
      }
      v12 = *(char **)v8;
      v13 = (uint64_t)&v10[-*(_QWORD *)v8];
      v14 = v13 >> 2;
      v15 = (v13 >> 2) + 1;
      if (v15 >> 62)
        goto LABEL_123;
      v16 = v9 - (_QWORD)v12;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v15;
      if (v17)
        break;
      v18 = 0;
      v19 = (unsigned int *)(4 * v14);
      *(_DWORD *)(4 * v14) = v6;
      v11 = 4 * v14 + 4;
      if (v10 != v12)
        goto LABEL_18;
LABEL_24:
      *(_QWORD *)v8 = v19;
      *((_QWORD *)v8 + 1) = v11;
      *((_QWORD *)v8 + 2) = &v18[4 * v17];
      if (v12)
        operator delete(v12);
LABEL_26:
      *((_QWORD *)v8 + 1) = v11;
      v29 = (char *)__p + 72 * *(unsigned int *)(*a3 + 12 * v5 + 4);
      v31 = (char *)v29[4];
      v30 = v29[5];
      if ((unint64_t)v31 < v30)
      {
        *(_DWORD *)v31 = v6;
        v32 = (uint64_t)(v31 + 4);
        goto LABEL_47;
      }
      v33 = (char *)v29[3];
      v34 = (v31 - v33) >> 2;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62)
        goto LABEL_123;
      v36 = v30 - (_QWORD)v33;
      if (v36 >> 1 > v35)
        v35 = v36 >> 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 62)
          goto LABEL_124;
        v38 = operator new(4 * v37);
        v39 = (unsigned int *)&v38[4 * v34];
        *v39 = v6;
        v32 = (uint64_t)(v39 + 1);
        if (v31 == v33)
          goto LABEL_45;
LABEL_39:
        v40 = v31 - 4 - v33;
        if (v40 < 0x2C)
          goto LABEL_127;
        if ((unint64_t)(v33 - v38) < 0x20)
          goto LABEL_127;
        v41 = (v40 >> 2) + 1;
        v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
        v43 = &v31[-v42];
        v39 = (unsigned int *)((char *)v39 - v42);
        v44 = &v38[4 * v34 - 16];
        v45 = v31 - 16;
        v46 = v41 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v47 = *(_OWORD *)v45;
          *(v44 - 1) = *((_OWORD *)v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 32;
          v46 -= 8;
        }
        while (v46);
        v31 = v43;
        if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_127:
          do
          {
            v48 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *--v39 = v48;
          }
          while (v31 != v33);
        }
        goto LABEL_45;
      }
      v38 = 0;
      v39 = (unsigned int *)(4 * v34);
      *(_DWORD *)(4 * v34) = v6;
      v32 = 4 * v34 + 4;
      if (v31 != v33)
        goto LABEL_39;
LABEL_45:
      v29[3] = v39;
      v29[4] = v32;
      v29[5] = &v38[4 * v37];
      if (v33)
        operator delete(v33);
LABEL_47:
      v29[4] = v32;
      v49 = (char *)__p + 72 * *(unsigned int *)(*a3 + 12 * v5 + 8);
      v51 = (char *)v49[7];
      v50 = v49[8];
      if ((unint64_t)v51 >= v50)
      {
        v52 = (char *)v49[6];
        v53 = (v51 - v52) >> 2;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62)
LABEL_123:
          sub_2394189F8();
        v55 = v50 - (_QWORD)v52;
        if (v55 >> 1 > v54)
          v54 = v55 >> 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (v56 >> 62)
LABEL_124:
            sub_239418A80();
          v57 = operator new(4 * v56);
          v58 = (unsigned int *)&v57[4 * v53];
          *v58 = v6;
          v7 = (uint64_t)(v58 + 1);
          if (v51 == v52)
            goto LABEL_65;
LABEL_59:
          v59 = v51 - 4 - v52;
          if (v59 < 0x2C)
            goto LABEL_128;
          if ((unint64_t)(v52 - v57) < 0x20)
            goto LABEL_128;
          v60 = (v59 >> 2) + 1;
          v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
          v62 = &v51[-v61];
          v58 = (unsigned int *)((char *)v58 - v61);
          v63 = &v57[4 * v53 - 16];
          v64 = v51 - 16;
          v65 = v60 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v66 = *(_OWORD *)v64;
            *(v63 - 1) = *((_OWORD *)v64 - 1);
            *v63 = v66;
            v63 -= 2;
            v64 -= 32;
            v65 -= 8;
          }
          while (v65);
          v51 = v62;
          if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_128:
            do
            {
              v67 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *--v58 = v67;
            }
            while (v51 != v52);
          }
        }
        else
        {
          v57 = 0;
          v58 = (unsigned int *)(4 * v53);
          *(_DWORD *)(4 * v53) = v6;
          v7 = 4 * v53 + 4;
          if (v51 != v52)
            goto LABEL_59;
        }
LABEL_65:
        v49[6] = v58;
        v49[7] = v7;
        v49[8] = &v57[4 * v56];
        if (v52)
          operator delete(v52);
        goto LABEL_4;
      }
      *(_DWORD *)v51 = v6;
      v7 = (uint64_t)(v51 + 4);
LABEL_4:
      v49[7] = v7;
      v4 = *a3;
      v5 = ++v6;
      if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2) <= v6)
        goto LABEL_68;
    }
    if (v17 >> 62)
      goto LABEL_124;
    v18 = operator new(4 * v17);
    v19 = (unsigned int *)&v18[4 * v14];
    *v19 = v6;
    v11 = (uint64_t)(v19 + 1);
    if (v10 == v12)
      goto LABEL_24;
LABEL_18:
    v20 = v10 - 4 - v12;
    if (v20 < 0x2C)
      goto LABEL_129;
    if ((unint64_t)(v10 - &v18[v13]) < 0x20)
      goto LABEL_129;
    v21 = (v20 >> 2) + 1;
    v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v23 = &v10[-v22];
    v19 = (unsigned int *)((char *)v19 - v22);
    v24 = &v18[4 * v14 - 16];
    v25 = v10 - 16;
    v26 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 8;
    }
    while (v26);
    v10 = v23;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_129:
      do
      {
        v28 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *--v19 = v28;
      }
      while (v10 != v12);
    }
    goto LABEL_24;
  }
LABEL_68:
  v68 = 0;
  v69 = *((_DWORD *)a1 + 2);
  v70 = (char **)(a1 + 3);
  v71 = v69 - 1;
  if ((int)(v69 - 1) < 0)
    goto LABEL_72;
  do
  {
LABEL_69:
    if (((*(_QWORD *)(*a1 + (((unint64_t)v68 >> 3) & 0x1FFFFFF8)) >> v68) & 1) != 0)
      goto LABEL_72;
    ++v68;
  }
  while (v69 != v68);
  v68 = v69;
LABEL_72:
  while (v68 < v71)
  {
    v72 = 24 * v71;
    v73 = 72 * v71;
    v69 = v71;
    while (((*(_QWORD *)(*a1 + (((unint64_t)v69 >> 3) & 0x1FFFFFF8)) >> v69) & 1) != 0)
    {
      --v69;
      v72 -= 24;
      v73 -= 72;
      if (v68 >= (int)v69)
        goto LABEL_79;
    }
    v74 = (char *)__p + 72 * v68;
    v75 = (char *)__p + v73;
    v76 = *(_OWORD *)v74;
    *(_OWORD *)v74 = *(_OWORD *)((char *)__p + v73);
    *(_OWORD *)v75 = v76;
    v77 = *((_OWORD *)v74 + 1);
    *((_OWORD *)v74 + 1) = *((_OWORD *)v75 + 1);
    *((_OWORD *)v75 + 1) = v77;
    v78 = *((_OWORD *)v74 + 2);
    *((_OWORD *)v74 + 2) = *((_OWORD *)v75 + 2);
    *((_OWORD *)v75 + 2) = v78;
    v79 = *((_OWORD *)v74 + 3);
    *((_OWORD *)v74 + 3) = *((_OWORD *)v75 + 3);
    *((_OWORD *)v75 + 3) = v79;
    v80 = *((_QWORD *)v74 + 8);
    *((_QWORD *)v74 + 8) = *((_QWORD *)v75 + 8);
    *((_QWORD *)v75 + 8) = v80;
    v81 = (uint64_t)&(*v70)[24 * v68];
    v82 = &(*v70)[v72];
    v83 = *(_OWORD *)v81;
    *(_OWORD *)v81 = *(_OWORD *)v82;
    *(_OWORD *)v82 = v83;
    *(_QWORD *)&v83 = *(_QWORD *)(v81 + 16);
    *(_QWORD *)(v81 + 16) = *((_QWORD *)v82 + 2);
    *((_QWORD *)v82 + 2) = v83;
    ++v68;
    v71 = v69 - 1;
    if (v68 <= (int)(v69 - 1))
      goto LABEL_69;
  }
LABEL_79:
  v84 = v68;
  v85 = a1[3];
  v86 = 0xAAAAAAAAAAAAAAABLL * ((a1[4] - v85) >> 3);
  if (v84 <= v86)
  {
    if (v84 < v86)
      a1[4] = v85 + 24 * (int)v84;
  }
  else
  {
    sub_2394EF3DC(v70, v84 - v86);
  }
  v87 = v116;
  v88 = 0x8E38E38E38E38E39 * ((v116 - (_BYTE *)__p) >> 3);
  if (v84 <= v88)
  {
    if (v84 < v88)
    {
      v89 = (char *)__p + 72 * (int)v84;
      while (v87 != v89)
      {
        v90 = (void *)*((_QWORD *)v87 - 3);
        if (v90)
        {
          *((_QWORD *)v87 - 2) = v90;
          operator delete(v90);
        }
        v91 = (void *)*((_QWORD *)v87 - 6);
        if (v91)
        {
          *((_QWORD *)v87 - 5) = v91;
          operator delete(v91);
        }
        v92 = (void *)*((_QWORD *)v87 - 9);
        if (v92)
        {
          *((_QWORD *)v87 - 8) = v92;
          operator delete(v92);
        }
        v87 -= 72;
      }
      v116 = v89;
    }
  }
  else
  {
    sub_239504E44((uint64_t)&__p, v84 - v88);
  }
  v93 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v93;
    operator delete(v93);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 3);
  *(_QWORD *)(a2 + 16) = a1[5];
  *v70 = 0;
  a1[4] = 0;
  a1[5] = 0;
  v95 = (char *)__p;
  v94 = v116;
  if (v116 == __p)
  {
    if (!__p)
      return;
    goto LABEL_121;
  }
  LODWORD(v96) = 0;
  v97 = 0x8E38E38E38E38E39 * ((v116 - (_BYTE *)__p) >> 3);
  v98 = (char *)__p;
  v99 = *a3;
  v100 = *(unsigned int **)__p;
  v101 = (unsigned int *)*((_QWORD *)__p + 1);
  if (*(unsigned int **)__p != v101)
    goto LABEL_103;
  while (1)
  {
    v103 = (unsigned int *)*((_QWORD *)v98 + 3);
    for (i = (unsigned int *)*((_QWORD *)v98 + 4); v103 != i; *(_DWORD *)(v99 + 4 + 12 * v105) = v96)
      v105 = *v103++;
    v107 = (unsigned int *)*((_QWORD *)v98 + 6);
    v106 = (unsigned int *)*((_QWORD *)v98 + 7);
    if (v107 != v106)
    {
      v108 = v99 + 8;
      do
      {
        v109 = *v107++;
        *(_DWORD *)(v108 + 12 * v109) = v96;
      }
      while (v107 != v106);
    }
    v96 = (v96 + 1);
    if (v97 <= v96)
      break;
    v98 = &v95[72 * v96];
    v99 = *a3;
    v100 = *(unsigned int **)v98;
    v101 = (unsigned int *)*((_QWORD *)v98 + 1);
    if (*(unsigned int **)v98 != v101)
    {
      do
      {
LABEL_103:
        v102 = *v100++;
        *(_DWORD *)(v99 + 12 * v102) = v96;
      }
      while (v100 != v101);
    }
  }
  if (v95)
  {
    do
    {
      v110 = (void *)*((_QWORD *)v94 - 3);
      if (v110)
      {
        *((_QWORD *)v94 - 2) = v110;
        operator delete(v110);
      }
      v111 = (void *)*((_QWORD *)v94 - 6);
      if (v111)
      {
        *((_QWORD *)v94 - 5) = v111;
        operator delete(v111);
      }
      v112 = (void *)*((_QWORD *)v94 - 9);
      if (v112)
      {
        *((_QWORD *)v94 - 8) = v112;
        operator delete(v112);
      }
      v94 -= 72;
    }
    while (v94 != v95);
    v94 = (char *)__p;
LABEL_121:
    v116 = v95;
    operator delete(v94);
  }
}

void sub_239504CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_239504DB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_239504CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_239504DB4((void **)va);
  _Unwind_Resume(a1);
}

void sub_239504CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_239504DB4((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239504CE0(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_2394189F8();
    v4 = (char *)operator new(72 * a2);
    *a1 = v4;
    a1[2] = &v4[72 * a2];
    v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_239504D94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_239EC0180((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void **sub_239504DB4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 6);
        if (v6)
        {
          *((_QWORD *)v3 - 5) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v3 - 9);
        if (v7)
        {
          *((_QWORD *)v3 - 8) = v7;
          operator delete(v7);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_239504E44(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x8E38E38E38E38E39 * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0x8E38E38E38E38E39 * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL)
      sub_2394189F8();
    v9 = 0x8E38E38E38E38E39 * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL)
        sub_239418A80();
      v11 = (char *)operator new(72 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[72 * v7];
    v14 = &v11[72 * v10];
    v15 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_28:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 8) = 0;
        *((_QWORD *)v13 - 7) = 0;
        v18 = *(_OWORD *)(v5 - 9);
        v5 -= 9;
        *(_OWORD *)(v13 - 72) = v18;
        v13 -= 72;
        *((_QWORD *)v17 - 7) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
        *((_QWORD *)v13 + 4) = 0;
        *((_QWORD *)v13 + 5) = 0;
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(v5 + 3);
        *((_QWORD *)v13 + 5) = v5[5];
        v5[3] = 0;
        v5[4] = 0;
        v5[5] = 0;
        *((_QWORD *)v13 + 7) = 0;
        *((_QWORD *)v13 + 8) = 0;
        *((_OWORD *)v13 + 3) = *((_OWORD *)v5 + 3);
        *((_QWORD *)v13 + 8) = v5[8];
        v5[6] = 0;
        v5[7] = 0;
        v5[8] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        do
        {
          v20 = (void *)*(v5 - 3);
          if (v20)
          {
            *(v5 - 2) = v20;
            operator delete(v20);
          }
          v21 = (void *)*(v5 - 6);
          if (v21)
          {
            *(v5 - 5) = v21;
            operator delete(v21);
          }
          v22 = (void *)*(v5 - 9);
          if (v22)
          {
            *(v5 - 8) = v22;
            operator delete(v22);
          }
          v5 -= 9;
        }
        while (v5 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_28;
    }
  }
}

uint64_t sub_2395050BC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, char **a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::chrono::system_clock::time_point v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  int64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  std::chrono::system_clock::time_point v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  int v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  double v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  __int128 *v51;
  std::chrono::steady_clock::time_point v52;
  std::chrono::system_clock::time_point v53;
  uint64_t v54;
  std::chrono::steady_clock::time_point v55;
  _QWORD v56[7];
  int v57;
  __int128 v58;
  char **v59;
  uint64_t *v60;
  void **p_p;
  pthread_rwlock_t *v62;
  _QWORD v63[18];
  _OWORD v64[2];
  int v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  _OWORD v81[12];
  __int128 *v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[8];
  _BYTE v88[24];
  _BYTE *v89;
  _BYTE v90[24];
  _BYTE *v91;
  _QWORD v92[44];
  pthread_rwlock_t __p;
  _BYTE v94[24];
  _BYTE *v95;
  _BYTE v96[24];
  _BYTE *v97;
  _BYTE v98[568];
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v85 = a9;
  v86 = a10;
  v17.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  sub_2396FD800(a6, (uint64_t)v96);
  v92[0] = 0x42C8000000000000;
  sub_2396FCC68(v98, 100, v96, v92, 1.0);
  v18 = v97;
  if (v97 == v96)
  {
    v19 = 4;
    v18 = v96;
  }
  else
  {
    if (!v97)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_6:
  v20 = operator new(0x28uLL);
  *v20 = &off_250ADD3D0;
  v20[1] = v98;
  v20[2] = &v85;
  v20[3] = a6;
  v95 = v20;
  if (!*(_DWORD *)a2)
  {
    if (a7 != (char **)a5)
    {
      sub_2394ECC58(a7, *(char **)a5, *(char **)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2));
      sub_2394ECE5C(a7 + 3, *(char **)(a5 + 24), *(char **)(a5 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a5 + 32) - *(_QWORD *)(a5 + 24)) >> 2));
    }
    sub_2394ED088((uint64_t)(a7 + 6), a5 + 48);
    sub_2394ED1E4((uint64_t)(a7 + 10), a5 + 80);
    sub_2394ED088((uint64_t)(a7 + 14), a5 + 112);
    v30.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if ((_BYTE)v86)
    {
      v31 = v85;
      *(_QWORD *)(v85 + 48) = 0;
      *(_QWORD *)(v31 + 32) = 0xAAAAAAAAAAAAAAABLL * ((a7[4] - a7[3]) >> 2);
      *(_QWORD *)(v31 + 40) = 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 2);
      *(double *)(v31 + 88) = (double)(v30.__d_.__rep_ - v17.__d_.__rep_) / 1000000.0;
    }
    v28 = 1;
    v29 = v95;
    if (v95)
      goto LABEL_37;
    goto LABEL_92;
  }
  v21 = *(_QWORD *)(a5 + 8);
  v22 = v21 - *(_QWORD *)a5;
  if (v21 == *(_QWORD *)a5)
    goto LABEL_27;
  v24 = *(unsigned int **)(a5 + 24);
  v23 = *(unsigned int **)(a5 + 32);
  v25 = (char *)v23 - (char *)v24;
  if (v23 == v24)
    goto LABEL_27;
  v26 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 2);
  do
  {
    if (v26 <= *v24 || v26 <= v24[1] || v26 <= v24[2])
      goto LABEL_27;
    v24 += 3;
  }
  while (v24 != v23);
  if (*(_BYTE *)(a5 + 104) && 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a5 + 88) - *(_QWORD *)(a5 + 80)) != v26
    || *(_BYTE *)(a5 + 72) && *(_QWORD *)(a5 + 56) - *(_QWORD *)(a5 + 48) != v22
    || *(_BYTE *)(a5 + 136) && *(_QWORD *)(a5 + 120) - *(_QWORD *)(a5 + 112) != v25)
  {
LABEL_27:
    if (!(_BYTE)v86)
      goto LABEL_30;
    v27 = 6005;
    goto LABEL_29;
  }
  if (!a1[12] || a1[104] == a1[105])
  {
    if ((_BYTE)v86)
    {
      v27 = 6006;
LABEL_29:
      sub_2394202DC((_QWORD *)(v85 + 120), v27);
    }
  }
  else
  {
    if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40))
    {
      std::__fs::filesystem::__status((const std::__fs::filesystem::path *)(a2 + 56), 0);
      if (LOBYTE(v92[0]) == 255 || !LOBYTE(v92[0]))
      {
        if (!(_BYTE)v86)
          goto LABEL_30;
        v27 = 6002;
        goto LABEL_29;
      }
      v83 = 0;
      v82 = 0;
      v84 = 0;
      if ((sub_2396FD7B0((uint64_t)a6) & 1) == 0
        && sub_239509070((uint64_t *)&v82, a2 + 32, a2 + 56, v85, v86))
      {
        v35 = sub_239505E6C((uint64_t)v82, v83);
        sub_239505DD0((uint64_t)&v82, v35, v83);
        if (v82 != v83)
        {
          memset(v81, 0, sizeof(v81));
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          v72 = 0;
          v73 = 0;
          v74 = 0;
          sub_239505C68(a7, (char **)a5);
          v69 = 0;
          v70 = 0;
          v71 = 0;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          memset(v64, 0, sizeof(v64));
          v65 = 1065353216;
          v36 = *(_DWORD *)(a2 + 88);
          if (v36 <= 0)
            v36 = std::thread::hardware_concurrency();
          sub_2397A1588(&__p);
          sub_2397A2A50((uint64_t)v92, v36, 0);
          v37 = 1;
          if ((sub_2396FD7B0((uint64_t)a6) & 1) == 0)
          {
            LOBYTE(v57) = 1;
            *(_QWORD *)&v58 = a1;
            *((_QWORD *)&v58 + 1) = a2;
            v59 = a7;
            v60 = &v85;
            p_p = (void **)&__p;
            v62 = (pthread_rwlock_t *)v98;
            v63[0] = a4;
            v63[1] = &v82;
            v63[2] = 0;
            v63[3] = &v57;
            sub_239505F00((unsigned int *)v92[34], &v58);
            *(_QWORD *)&v58 = a1 + 104;
            *((_QWORD *)&v58 + 1) = &v66;
            v59 = (char **)v64;
            v60 = (uint64_t *)&v57;
            p_p = &v69;
            v62 = &__p;
            sub_2395064A8((uint64_t)v63, (__int128 *)a2);
            v63[15] = a1;
            v63[16] = v81;
            v63[17] = &v85;
            sub_239506060((uint64_t)v92, &v58);
            sub_239506590((uint64_t)&v58);
            sub_2397A2D24((uint64_t)v92);
            v37 = (_BYTE)v57 == 0;
          }
          sub_2397A2E14(v92);
          sub_2397A15B0(&__p);
          if (v37)
          {
            v38 = 1;
LABEL_80:
            sub_239420950((uint64_t)v64);
            if (v66)
            {
              v67 = v66;
              operator delete(v66);
            }
            if (v69)
            {
              v70 = v69;
              operator delete(v69);
            }
            if (v72)
            {
              v73 = v72;
              operator delete(v72);
            }
            if (v75)
            {
              v76 = v75;
              operator delete(v75);
            }
            if (v78)
            {
              v79 = v78;
              operator delete(v78);
            }
            sub_239506798((void **)v81);
            if (v38)
              goto LABEL_91;
            if ((sub_239505CF8((uint64_t)a7) & 1) == 0)
            {
              if ((_BYTE)v86)
                sub_2394202DC((_QWORD *)(v85 + 120), 6005);
              goto LABEL_91;
            }
            v53.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
            if ((_BYTE)v86)
            {
              v54 = v85;
              *(_QWORD *)(v85 + 48) = (uint64_t)(a1[105] - a1[104]) >> 3;
              *(_QWORD *)(v54 + 32) = 0xAAAAAAAAAAAAAAABLL * ((a7[4] - a7[3]) >> 2);
              *(_QWORD *)(v54 + 40) = 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 2);
              *(double *)(v54 + 88) = (double)(v53.__d_.__rep_ - v17.__d_.__rep_) / 1000000.0;
            }
            v28 = sub_2396FD7B0((uint64_t)a6) ^ 1;
            sub_239506740((void **)&v82);
            v29 = v95;
            if (v95)
              goto LABEL_37;
LABEL_92:
            sub_2394172E0();
          }
          v39 = *(int *)(a2 + 4);
          v57 = *(_DWORD *)a2 / (int)v39;
          sub_2395065DC((int32x4_t **)&__p, v39, (unsigned int *)&v57);
          *(_DWORD *)__p.__sig = *(_DWORD *)a2 - (*(_DWORD *)(a2 + 4) - 1) * v57;
          v40 = *(_DWORD *)(a2 + 4);
          sub_2396FDAA8(a6, (uint64_t)v90);
          sub_2396FD534(v56, v98, 90 / v40);
          sub_2394B11D4((uint64_t)v88, (uint64_t)v56);
          sub_2396FD600((uint64_t)v92, (uint64_t)v90, (uint64_t)v88);
          v41 = v89;
          if (v89 == v88)
          {
            v42 = 4;
            v41 = v88;
          }
          else
          {
            if (!v89)
              goto LABEL_63;
            v42 = 5;
          }
          (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_63:
          sub_23942FEFC(v56);
          v43 = v91;
          if (v91 == v90)
          {
            v44 = 4;
            v43 = v90;
          }
          else
          {
            if (!v91)
              goto LABEL_68;
            v44 = 5;
          }
          (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_68:
          v58 = 0uLL;
          v59 = 0;
          v55.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v45 = *(_DWORD *)(a2 + 4);
          while (1)
          {
            v46 = __OFSUB__(v45--, 1);
            if (v45 < 0 != v46)
              break;
            if ((sub_2396FD7B0((uint64_t)a6) & 1) != 0)
              goto LABEL_75;
            sub_2394EC2A4((uint64_t)a7, *(int *)(a2 + 96), 10, 0, 0.4, v47, v48, v49, v50);
            v51 = v82;
            sub_2394B2548((uint64_t)v87, (uint64_t)v92);
            LOBYTE(v51) = sub_2395093D0(v45, a2, a3, v51, &__p, (uint64_t *)&v69, (uint64_t *)&v66, (uint64_t)v64, (uint64_t *)v81, (uint64_t *)&v78, (uint64_t *)&v75, (uint64_t *)&v72, v87, (unint64_t *)a7, (uint64_t)&v58, v85, v86);
            sub_23942FE80(v87);
            if ((v51 & 1) == 0)
            {
              if ((_BYTE)v86 && (sub_2396F20BC((int **)(v85 + 160)) & 1) == 0)
                sub_2394202DC((_QWORD *)(v85 + 120), 6006);
LABEL_75:
              v38 = 1;
              goto LABEL_78;
            }
          }
          v52.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v38 = 0;
          if ((_BYTE)v86)
            *(double *)(v85 + 96) = (double)(v52.__d_.__rep_ - v55.__d_.__rep_) / 1000000000.0;
LABEL_78:
          sub_2395066B4(&v58);
          sub_23942FE80(v92);
          if (__p.__sig)
          {
            *(_QWORD *)__p.__opaque = __p.__sig;
            operator delete((void *)__p.__sig);
          }
          goto LABEL_80;
        }
        if ((_BYTE)v86)
          sub_2394202DC((_QWORD *)(v85 + 120), 6001);
      }
LABEL_91:
      v28 = 0;
      sub_239506740((void **)&v82);
      v29 = v95;
      if (!v95)
        goto LABEL_92;
      goto LABEL_37;
    }
    if ((_BYTE)v86)
    {
      v27 = 6001;
      goto LABEL_29;
    }
  }
LABEL_30:
  v28 = 0;
  v29 = v95;
  if (!v95)
    goto LABEL_92;
LABEL_37:
  (*(void (**)(_BYTE *))(*(_QWORD *)v29 + 48))(v29);
  v32 = v95;
  if (v95 == v94)
  {
    v33 = 4;
    v32 = v94;
    goto LABEL_41;
  }
  if (v95)
  {
    v33 = 5;
LABEL_41:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  sub_2396FCD14((uint64_t)v98);
  return v28;
}

void sub_23950598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  void *__p;
  uint64_t a69;
  void *a71;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v77;

  sub_2395066B4(&a27);
  sub_23942FE80(&STACK[0x360]);
  v77 = (void *)STACK[0x4C0];
  if (STACK[0x4C0])
  {
    STACK[0x4C8] = (unint64_t)v77;
    operator delete(v77);
    sub_239420950((uint64_t)&a51);
    v71 = a56;
    if (a56)
    {
LABEL_11:
      a57 = (uint64_t)v71;
      operator delete(v71);
      v72 = a59;
      if (a59)
      {
LABEL_12:
        a60 = (uint64_t)v72;
        operator delete(v72);
        v73 = a62;
        if (a62)
        {
LABEL_13:
          a63 = (uint64_t)v73;
          operator delete(v73);
          v74 = a65;
          if (a65)
          {
LABEL_14:
            a66 = (uint64_t)v74;
            operator delete(v74);
            v75 = __p;
            if (!__p)
            {
LABEL_8:
              sub_239506798(&a71);
              sub_239506740((void **)&STACK[0x2B8]);
              sub_239416834(&STACK[0x588]);
              sub_2396FCD14((uint64_t)&STACK[0x5C8]);
              _Unwind_Resume(a1);
            }
LABEL_7:
            a69 = (uint64_t)v75;
            operator delete(v75);
            goto LABEL_8;
          }
LABEL_6:
          v75 = __p;
          if (!__p)
            goto LABEL_8;
          goto LABEL_7;
        }
LABEL_5:
        v74 = a65;
        if (a65)
          goto LABEL_14;
        goto LABEL_6;
      }
LABEL_4:
      v73 = a62;
      if (a62)
        goto LABEL_13;
      goto LABEL_5;
    }
  }
  else
  {
    sub_239420950((uint64_t)&a51);
    v71 = a56;
    if (a56)
      goto LABEL_11;
  }
  v72 = a59;
  if (a59)
    goto LABEL_12;
  goto LABEL_4;
}

void sub_239505BD0(_Unwind_Exception *a1)
{
  sub_239416834(&STACK[0x588]);
  sub_2396FCD14((uint64_t)&STACK[0x5C8]);
  _Unwind_Resume(a1);
}

void sub_239505C50(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x239505C58);
  sub_239416A48(a1);
}

char **sub_239505C68(char **a1, char **a2)
{
  if (a1 != a2)
  {
    sub_2394ECC58(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
    sub_2394ECE5C(a1 + 3, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 2));
  }
  sub_2394ED088((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  sub_2394ED1E4((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  sub_2394ED088((uint64_t)(a1 + 14), (uint64_t)(a2 + 14));
  return a1;
}

uint64_t sub_239505CF8(uint64_t a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unint64_t v3;
  unsigned int *v4;

  v1 = *(unsigned int **)(a1 + 24);
  v2 = *(unsigned int **)(a1 + 32);
  if (v1 == v2)
  {
LABEL_7:
    if ((!*(_BYTE *)(a1 + 104)
       || 0xAAAAAAAAAAAAAAABLL * (*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) == 0xAAAAAAAAAAAAAAABLL
                                                                                * ((uint64_t)(*(_QWORD *)(a1 + 8)
                                                                                           - *(_QWORD *)a1) >> 2))
      && (!*(_BYTE *)(a1 + 72) || *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 8) - *(_QWORD *)a1)
      && (!*(_BYTE *)(a1 + 136) || *(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112) == (char *)v2 - (char *)v1))
    {
      return 1;
    }
  }
  else
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
    v4 = *(unsigned int **)(a1 + 24);
    while (v3 > *v4 && v3 > v4[1] && v3 > v4[2])
    {
      v4 += 3;
      if (v4 == v2)
        goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_239505DD0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if ((_QWORD *)a2 != a3)
  {
    v5 = a3;
    v6 = *(_QWORD **)(a1 + 8);
    if (a3 == v6)
    {
      v8 = a2;
    }
    else
    {
      v7 = ((uint64_t)a3 - a2) >> 7 << 7;
      v8 = a2;
      do
      {
        sub_239506D34(v8, (__int128 *)(v8 + v7));
        v8 += 128;
      }
      while ((_QWORD *)(v8 + v7) != v6);
      v5 = *(_QWORD **)(a1 + 8);
    }
    while (v5 != (_QWORD *)v8)
      v5 = sub_239506B74(v5 - 16);
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a2;
}

uint64_t sub_239505E6C(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *i;
  uint64_t v7;

  if ((__int128 *)a1 == a2)
    return (uint64_t)a2;
  v3 = a1;
  while (1)
  {
    nullsub_4(v3);
    if (!sub_2397A9524(v4))
      break;
    v3 += 128;
    if ((__int128 *)v3 == a2)
      return (uint64_t)a2;
  }
  if ((__int128 *)v3 != a2)
  {
    for (i = (__int128 *)(v3 + 128); i != a2; i += 8)
    {
      nullsub_4(i);
      if (sub_2397A9524(v7))
      {
        sub_239506D34(v3, i);
        v3 += 128;
      }
    }
  }
  return v3;
}

_QWORD *sub_239505F00(unsigned int *a1, __int128 *a2)
{
  char *v3;
  _QWORD *result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    sub_239EC0200();
  v9 = a2[3];
  v10 = a2[4];
  v7 = a2[1];
  v8 = a2[2];
  LOBYTE(v11) = v12;
  v6 = *a2;
  v3 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v3 + 40) = v8;
  *(_OWORD *)(v3 + 56) = v9;
  *(_OWORD *)(v3 + 72) = v10;
  *(_OWORD *)(v3 + 8) = v6;
  *(_QWORD *)v3 = &off_250ADD418;
  *((_QWORD *)v3 + 11) = v11;
  *(_OWORD *)(v3 + 24) = v7;
  v14 = v3;
  sub_2394D0CC4(a1, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v5 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_23950600C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 - 48);
  if (v4 == v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 72) + 32))(v2 - 72);
    _Unwind_Resume(exception_object);
  }
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239506060(uint64_t a1, __int128 *a2)
{
  unsigned int *v2;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 __p;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  char *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned int **)(a1 + 272);
  if (!v2)
    sub_239EC0200();
  v5 = a2[1];
  v36 = *a2;
  v37 = v5;
  v6 = a2[3];
  v38 = a2[2];
  v39 = v6;
  v40 = a2[4];
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 10);
  v7 = (_BYTE *)*((_QWORD *)a2 + 11);
  v9 = v7 - v8;
  if (v7 == v8)
  {
    v11 = 0;
    v10 = 0;
    if ((*((char *)a2 + 127) & 0x80000000) == 0)
    {
LABEL_5:
      v44 = *(__int128 *)((char *)a2 + 104);
      v45 = *((_QWORD *)a2 + 15);
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 < 0)
      sub_2394189F8();
    v10 = (char *)operator new(v7 - v8);
    v11 = &v10[8 * (v9 >> 3)];
    v41 = v10;
    v43 = v11;
    memcpy(v10, v8, v9);
    v42 = v11;
    if ((*((char *)a2 + 127) & 0x80000000) == 0)
      goto LABEL_5;
  }
  sub_23941A7F8(&v44, *((void **)a2 + 13), *((_QWORD *)a2 + 14));
  v2 = *(unsigned int **)(a1 + 272);
  v10 = (char *)v41;
  v11 = v42;
LABEL_8:
  v12 = a2[9];
  v46 = a2[8];
  v47 = v12;
  v48 = *((_QWORD *)a2 + 20);
  v49 = *(__int128 *)((char *)a2 + 168);
  v50 = *((_QWORD *)a2 + 23);
  v22 = v36;
  v23 = v37;
  v25 = v39;
  v26 = v40;
  v24 = v38;
  v27 = 0;
  v28 = 0;
  v13 = v11 - v10;
  if (v11 != v10)
  {
    if (v13 < 0)
      sub_2394189F8();
    v27 = (char *)operator new(v11 - v10);
    memcpy(v27, v10, v11 - v10);
    v28 = &v27[8 * (v13 >> 3)];
  }
  if (SHIBYTE(v45) < 0)
  {
    sub_23941A7F8(&__p, (void *)v44, *((unint64_t *)&v44 + 1));
  }
  else
  {
    __p = v44;
    v30 = v45;
  }
  v31 = v46;
  v32 = v47;
  v33 = v48;
  v34 = v49;
  v35 = v50;
  v52 = 0;
  v14 = (char *)operator new(0xD0uLL);
  *(_OWORD *)(v14 + 8) = v22;
  *(_OWORD *)(v14 + 24) = v23;
  *(_OWORD *)(v14 + 40) = v24;
  *(_OWORD *)(v14 + 56) = v25;
  *(_QWORD *)v14 = off_250ADD460;
  *((_QWORD *)v14 + 11) = 0;
  *(_OWORD *)(v14 + 72) = v26;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  v15 = v28 - v27;
  if (v28 != v27)
  {
    if (v15 < 0)
      sub_2394189F8();
    v16 = (char *)operator new(v28 - v27);
    *((_QWORD *)v14 + 11) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *((_QWORD *)v14 + 13) = v17;
    memcpy(v16, v27, v15);
    *((_QWORD *)v14 + 12) = v17;
  }
  v18 = v14 + 112;
  if (SHIBYTE(v30) < 0)
  {
    sub_23941A7F8(v18, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    *(_OWORD *)v18 = __p;
    *((_QWORD *)v14 + 16) = v30;
  }
  v19 = v32;
  *(_OWORD *)(v14 + 136) = v31;
  *(_OWORD *)(v14 + 152) = v19;
  *((_QWORD *)v14 + 21) = v33;
  *((_OWORD *)v14 + 11) = v34;
  *((_QWORD *)v14 + 24) = v35;
  v52 = v14;
  sub_2394D0CC4(v2, (uint64_t)v51);
  v20 = v52;
  if (v52 == v51)
  {
    v21 = 4;
    v20 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_25;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_25:
  if (SHIBYTE(v30) < 0)
    operator delete((void *)__p);
  if (v27)
    operator delete(v27);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v41)
  {
    v42 = (char *)v41;
    operator delete(v41);
  }
}

void sub_2395063E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  _QWORD *v46;
  void **v47;
  void *v49;

  v49 = *v47;
  if (*v47)
  {
    v46[12] = v49;
    operator delete(v49);
  }
  operator delete(v46);
  sub_239506590((uint64_t)&a9);
  sub_239506590((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_2395064A8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 48) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 40) = v10;
  }
  v11 = (_BYTE *)(a1 + 56);
  if (*((char *)a2 + 79) < 0)
  {
    sub_23941A7F8(v11, *((void **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v12 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)v11 = v12;
  }
  v13 = a2[5];
  v14 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v13;
  *(_OWORD *)(a1 + 96) = v14;
  return a1;
}

void sub_239506570(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239506590(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 127) < 0)
  {
    operator delete(*(void **)(a1 + 104));
    v2 = *(void **)(a1 + 80);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  return a1;
}

int32x4_t **sub_2395065DC(int32x4_t **a1, unint64_t a2, unsigned int *a3)
{
  int32x4_t *v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  int32x4_t v12;
  int32x4_t *v13;
  uint64_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 62)
      sub_2394189F8();
    v6 = (int32x4_t *)operator new(4 * a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = (unsigned int *)v6 + a2;
    a1[2] = (int32x4_t *)v7;
    v8 = *a3;
    v9 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v10 = (unsigned int *)v6;
    if (v9 < 7)
      goto LABEL_13;
    v11 = v9 + 1;
    v10 = (unsigned int *)v6 + (v11 & 0x7FFFFFFFFFFFFFF8);
    v12 = vdupq_n_s32(v8);
    v13 = v6 + 1;
    v14 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v13[-1] = v12;
      *v13 = v12;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_13:
      do
        *v10++ = v8;
      while (v10 != v7);
    }
    a1[1] = (int32x4_t *)v7;
  }
  return a1;
}

void sub_239506698(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395066B4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          sub_239416DA0(v5 + 8);
          v7 = nullsub_4(v5);
          MEMORY[0x23B83E31C](v7, 0x10F1C405026F4E9);
        }
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_239506740(void **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_239506B74(v3 - 16);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_239506798(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  char *v20;
  char *v21;
  void *v22;
  char *v23;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  void *v30;
  void *v31;
  void *v32;
  void **v33;
  void **v34;
  void *v35;
  void **v36;
  void **v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  void **v43;
  void *v44;
  void **v45;

  v2 = (char *)a1[21];
  if (v2)
  {
    v3 = (char *)a1[22];
    v4 = a1[21];
    if (v3 != v2)
    {
      v5 = (char *)a1[22];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = a1[21];
    }
    a1[22] = v2;
    operator delete(v4);
  }
  v8 = a1[18];
  if (v8)
  {
    a1[19] = v8;
    operator delete(v8);
  }
  v9 = (void **)a1[15];
  if (v9)
  {
    v10 = (void **)a1[16];
    v11 = a1[15];
    if (v10 != v9)
    {
      v12 = (void **)a1[16];
      do
      {
        v15 = (char *)*(v12 - 3);
        v12 -= 3;
        v14 = v15;
        if (v15)
        {
          v16 = (char *)*(v10 - 2);
          v13 = v14;
          if (v16 != v14)
          {
            v17 = (char *)*(v10 - 2);
            do
            {
              v19 = (void *)*((_QWORD *)v17 - 3);
              v17 -= 24;
              v18 = v19;
              if (v19)
              {
                *((_QWORD *)v16 - 2) = v18;
                operator delete(v18);
              }
              v16 = v17;
            }
            while (v17 != v14);
            v13 = *v12;
          }
          *(v10 - 2) = v14;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = a1[15];
    }
    a1[16] = v9;
    operator delete(v11);
  }
  v20 = (char *)a1[12];
  if (v20)
  {
    v21 = (char *)a1[13];
    v22 = a1[12];
    if (v21 != v20)
    {
      v23 = (char *)a1[13];
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 3);
        v23 -= 24;
        v24 = v25;
        if (v25)
        {
          *((_QWORD *)v21 - 2) = v24;
          operator delete(v24);
        }
        v21 = v23;
      }
      while (v23 != v20);
      v22 = a1[12];
    }
    a1[13] = v20;
    operator delete(v22);
  }
  v26 = (char *)a1[9];
  if (v26)
  {
    v27 = (char *)a1[10];
    v28 = a1[9];
    if (v27 != v26)
    {
      v29 = (char *)a1[10];
      do
      {
        v31 = (void *)*((_QWORD *)v29 - 3);
        v29 -= 24;
        v30 = v31;
        if (v31)
        {
          *((_QWORD *)v27 - 2) = v30;
          operator delete(v30);
        }
        v27 = v29;
      }
      while (v29 != v26);
      v28 = a1[9];
    }
    a1[10] = v26;
    operator delete(v28);
  }
  v32 = a1[6];
  if (v32)
  {
    a1[7] = v32;
    operator delete(v32);
  }
  v33 = (void **)a1[3];
  if (v33)
  {
    v34 = (void **)a1[4];
    v35 = a1[3];
    if (v34 != v33)
    {
      v36 = (void **)a1[4];
      do
      {
        v38 = (void **)*(v36 - 3);
        v36 -= 3;
        v37 = v38;
        if (v38)
        {
          v39 = (void **)*(v34 - 2);
          v40 = v37;
          if (v39 != v37)
          {
            do
            {
              v41 = v39 - 24;
              free(*(v39 - 19));
              v39 = v41;
            }
            while (v41 != v37);
            v40 = *v36;
          }
          *(v34 - 2) = v37;
          operator delete(v40);
        }
        v34 = v36;
      }
      while (v36 != v33);
      v35 = a1[3];
    }
    a1[4] = v33;
    operator delete(v35);
  }
  v42 = (void **)*a1;
  if (*a1)
  {
    v43 = (void **)a1[1];
    v44 = *a1;
    if (v43 != v42)
    {
      do
      {
        v45 = v43 - 24;
        free(*(v43 - 19));
        v43 = v45;
      }
      while (v45 != v42);
      v44 = *a1;
    }
    a1[1] = v42;
    operator delete(v44);
  }
  return a1;
}

void sub_239506A08()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239506A1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_250ADD3D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239506A5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADD3D0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239506A84(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  void *__p;
  char v6;

  if (sub_2396FD7B0(a1[3]))
  {
    v2 = (_BYTE *)a1[2];
    if (v2[8])
      sub_2394202DC((_QWORD *)(*(_QWORD *)v2 + 120), 2);
  }
  v3 = (_BYTE *)a1[2];
  if (v3[8])
    sub_2396F20BC((int **)(*(_QWORD *)v3 + 160));
  v4 = a1[1];
  v6 = 0;
  LOBYTE(__p) = 0;
  sub_2396FCC6C(v4, (uint64_t)&__p);
  if (v6 < 0)
    operator delete(__p);
}

void sub_239506B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239506B74(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = (_QWORD *)a1[13];
  while (v2)
  {
    v12 = v2;
    v2 = (_QWORD *)*v2;
    v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    operator delete(v12);
  }
  v3 = (void *)a1[11];
  a1[11] = 0;
  if (v3)
    operator delete(v3);
  v4 = (_QWORD *)a1[8];
  while (v4)
  {
    v16 = v4;
    v4 = (_QWORD *)*v4;
    v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    operator delete(v16);
  }
  v5 = (void *)a1[6];
  a1[6] = 0;
  if (v5)
    operator delete(v5);
  v6 = (std::__shared_weak_count *)a1[5];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    v9 = (std::__shared_weak_count *)a1[3];
    if (!v9)
      goto LABEL_29;
  }
  else
  {
LABEL_11:
    v9 = (std::__shared_weak_count *)a1[3];
    if (!v9)
      goto LABEL_29;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_29:
  v20 = (std::__shared_weak_count *)a1[1];
  if (!v20)
    return a1;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

uint64_t sub_239506D34(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  v4 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (!v5)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v12 = a2[1];
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v9 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v12;
    if (!v9)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v8 = a2[1];
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v9 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v8;
    if (!v9)
      goto LABEL_11;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_11:
  v13 = a2[2];
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_239506E5C(a1 + 48, (uint64_t *)a2 + 6);
  sub_239506E5C(a1 + 88, (uint64_t *)a2 + 11);
  return a1;
}

void sub_239506E5C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    while (v4)
    {
      v16 = v4;
      v4 = (_QWORD *)*v4;
      v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      operator delete(v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void sub_239506F94()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239506FA8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_250ADD418;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_239507008(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250ADD418;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_239507050(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  void *__p[2];
  char v22;
  std::__shared_weak_count *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + 8) || !*(_QWORD *)(*(_QWORD *)(a1 + 56) + 24))
    goto LABEL_27;
  v2 = nullsub_4(**(_QWORD **)(a1 + 64) + (*(_QWORD *)(a1 + 72) << 7));
  sub_2397A9E70(__p, v2);
  v3 = *(_QWORD **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    goto LABEL_6;
  if (v6 != v5)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_6:
    v25 = (_BYTE *)v6;
    goto LABEL_8;
  }
  v25 = v24;
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), v24);
LABEL_8:
  v7 = sub_2394EBA0C(v3, v4, (uint64_t)v24, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 88), __p, 1);
  v8 = v25;
  if (v25 == v24)
  {
    v9 = 4;
    v8 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_13;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_13:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
  {
    j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(a1 + 40));
    v10 = **(_QWORD **)(a1 + 32);
    if (*(_BYTE *)(v10 + 24))
      v11 = 1;
    else
      v11 = v7;
    *(_BYTE *)(v10 + 24) = v11;
    j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 40));
  }
  v12 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_27;
  v16 = (unint64_t *)((char *)__p[1] + 8);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_27:
    result = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(result + 8) == *(_QWORD *)result)
      goto LABEL_36;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  result = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(result + 8) == *(_QWORD *)result)
  {
LABEL_36:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v20 = 6005;
      goto LABEL_38;
    }
LABEL_39:
    **(_BYTE **)(a1 + 80) = 0;
    return result;
  }
LABEL_28:
  if (*(_QWORD *)(result + 32) == *(_QWORD *)(result + 24))
    goto LABEL_36;
  result = sub_2395169D0((uint64_t *)result, *(float *)(*(_QWORD *)(a1 + 16) + 12));
  if ((result & 1) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v20 = 6006;
LABEL_38:
      j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(a1 + 40));
      sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 32) + 120), v20);
      result = j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 40));
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  v19 = *(_QWORD *)(a1 + 48);
  v22 = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FCDAC(v19, (__int128 *)__p, 10);
  if (v22 < 0)
    operator delete(__p[0]);
  return kdebug_trace();
}

void sub_23950735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239507448(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_250ADD460;
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    v2 = *(void **)(a1 + 88);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2395074A0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_250ADD460;
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    v2 = *(void **)(a1 + 88);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(void **)(a1 + 88);
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(a1 + 96) = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239507508(uint64_t a1)
{
  __int128 *v1;
  _QWORD *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = operator new(0xD0uLL);
  *v2 = off_250ADD460;
  sub_2395076F4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_239507548(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23950755C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_250ADD460;
  return sub_2395076F4((uint64_t)(a2 + 1), (__int128 *)(a1 + 8));
}

void sub_239507578(uint64_t a1)
{
  void *v2;

  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 88);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
}

void sub_2395075C4(void **__p)
{
  void *v2;

  if (*((char *)__p + 135) < 0)
  {
    operator delete(__p[14]);
    v2 = __p[11];
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = __p[11];
  if (v2)
  {
LABEL_3:
    __p[12] = v2;
    operator delete(v2);
  }
LABEL_4:
  operator delete(__p);
}

uint64_t sub_239507610(uint64_t a1)
{
  uint64_t result;

  result = sub_239516B4C(*(unsigned int ***)(a1 + 8), *(_QWORD *)(a1 + 24), *(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 40));
  if ((result & 1) != 0)
  {
    kdebug_trace();
    result = sub_239516F68(*(_QWORD *)(a1 + 176), *(_DWORD *)(a1 + 60), *(uint64_t ***)(a1 + 16), *(_QWORD **)(a1 + 24), *(uint64_t **)(a1 + 40), *(_DWORD *)(a1 + 136), *(_QWORD **)(a1 + 184), *(float *)(a1 + 148));
    if ((result & 1) != 0)
      return kdebug_trace();
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 192) + 8))
  {
    j__pthread_rwlock_wrlock(*(pthread_rwlock_t **)(a1 + 48));
    sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 192) + 120), 6006);
    result = j__pthread_rwlock_unlock(*(pthread_rwlock_t **)(a1 + 48));
  }
  **(_BYTE **)(a1 + 32) = 0;
  return result;
}

uint64_t sub_2395076F4(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 10);
  v8 = (_BYTE *)*((_QWORD *)a2 + 11);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      sub_2394189F8();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(a1 + 96) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 88) = v12;
  }
  v13 = (_BYTE *)(a1 + 104);
  if (*((char *)a2 + 127) < 0)
  {
    sub_23941A7F8(v13, *((void **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 104);
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
    *(_OWORD *)v13 = v14;
  }
  v15 = a2[8];
  v16 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v15;
  *(_OWORD *)(a1 + 144) = v16;
  v17 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v17;
  return a1;
}

void sub_2395077DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395077FC()
{
  _OWORD *v0;

  v0 = operator new(0x1CuLL);
  *v0 = xmmword_239EC6E7C;
  *(_OWORD *)((char *)v0 + 12) = *(__int128 *)((char *)&xmmword_239EC6E7C + 12);
  *(_OWORD *)operator new(0x10uLL) = xmmword_239EC6870;
  __asm { BR              X9 }
}

void sub_2395078D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, int a14, __int16 a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  char v20;

  HIBYTE(a14) = v20;
  strcpy((char *)&__p, "FoecqQ5kw8TqLPkP");
  sub_2395138D4((uint64_t)&a19, (uint64_t)&__p, (uint64_t)&__p);
  if (SHIBYTE(a14) < 0)
    operator delete(__p);
  JUMPOUT(0x2395078B0);
}

uint64_t sub_23950797C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  *(_QWORD *)(v25 - 96) = "fe6ctaMridzSwEp5";
  *(_QWORD *)(v25 - 88) = "sqlEilu38HYSYUbR";
  sub_239513778((uint64_t)&a11, (const char **)(v25 - 96));
  sub_239513CF4((uint64_t)&a23, (uint64_t)&a11, (uint64_t)&a11);
  v26 = sub_239513CF4((uint64_t)&a23, v24, v24);
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
      return ((uint64_t (*)(uint64_t *))((char *)&loc_239507A54 + 4
                                                                         * byte_239EC6E5E[*(unsigned int *)(v23 + 4)]))(v26);
LABEL_5:
    operator delete(a11);
    return ((uint64_t (*)(uint64_t *))((char *)&loc_239507A54 + 4 * byte_239EC6E5E[*(unsigned int *)(v23 + 4)]))(v26);
  }
  if (a16 < 0)
    goto LABEL_5;
  return ((uint64_t (*)(_QWORD))((char *)&loc_239507A54 + 4 * byte_239EC6E5E[*(unsigned int *)(v23 + 4)]))(v26);
}

uint64_t sub_239507A94(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  *(_QWORD *)(v4 - 96) = "PHZR1OeiD6epHFAv";
  *(_QWORD *)(v4 - 88) = "UizD8lhV6py1NKj3";
  sub_239513778((uint64_t)va, (const char **)(v4 - 96));
  sub_239513CF4(va1, (uint64_t *)va, (uint64_t *)va);
  v5 = sub_239513CF4(va1, v3, v3);
  if (SHIBYTE(v13) < 0)
    JUMPOUT(0x239507B6CLL);
  if (SHIBYTE(v10) < 0)
    JUMPOUT(0x239507B7CLL);
  return ((uint64_t (*)(uint64_t))((char *)sub_239507B48 + 4 * byte_239EC6E62[*(unsigned int *)(v2 + 8)]))(v5);
}

uint64_t sub_239507AB8(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  *(_QWORD *)(v4 - 96) = "axWg7XaSO4Eoqz8x";
  *(_QWORD *)(v4 - 88) = "lLzCaoN0jOxoeDOT";
  sub_239513778((uint64_t)va, (const char **)(v4 - 96));
  sub_239513CF4(va1, (uint64_t *)va, (uint64_t *)va);
  v5 = sub_239513CF4(va1, v3, v3);
  if (SHIBYTE(v13) < 0)
    JUMPOUT(0x239507B6CLL);
  if (SHIBYTE(v10) < 0)
    JUMPOUT(0x239507B7CLL);
  return ((uint64_t (*)(uint64_t))((char *)sub_239507B48 + 4 * byte_239EC6E62[*(unsigned int *)(v2 + 8)]))(v5);
}

void sub_239507ADC(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 - 96) = "AvVGtwRUXMeOokSR";
  *(_QWORD *)(v2 - 88) = "sHpyBtD6WceTt88B";
  sub_239513778((uint64_t)va, (const char **)(v2 - 96));
  JUMPOUT(0x239507AFCLL);
}

uint64_t sub_239507B48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  *(_QWORD *)(v25 - 96) = "fe6ctaMridzSwEp5";
  *(_QWORD *)(v25 - 88) = "sqlEilu38HYSYUbR";
  sub_239513778((uint64_t)&a11, (const char **)(v25 - 96));
  sub_239513CF4((uint64_t)&a23, (uint64_t)&a11, (uint64_t)&a11);
  v26 = sub_239513CF4((uint64_t)&a23, v24, v24);
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
      return ((uint64_t (*)(uint64_t *))((char *)sub_239507C3C + 4
                                                                        * byte_239EC6E66[*(unsigned int *)(v23 + 12)]))(v26);
LABEL_5:
    operator delete(a11);
    return ((uint64_t (*)(uint64_t *))((char *)sub_239507C3C + 4 * byte_239EC6E66[*(unsigned int *)(v23 + 12)]))(v26);
  }
  if (a16 < 0)
    goto LABEL_5;
  return ((uint64_t (*)(_QWORD))((char *)sub_239507C3C + 4 * byte_239EC6E66[*(unsigned int *)(v23 + 12)]))(v26);
}

uint64_t sub_239507B88(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  *(_QWORD *)(v4 - 96) = "PHZR1OeiD6epHFAv";
  *(_QWORD *)(v4 - 88) = "UizD8lhV6py1NKj3";
  sub_239513778((uint64_t)va, (const char **)(v4 - 96));
  sub_239513CF4(va1, (uint64_t *)va, (uint64_t *)va);
  v5 = sub_239513CF4(va1, v3, v3);
  if (SHIBYTE(v13) < 0)
    JUMPOUT(0x239507C60);
  if (SHIBYTE(v10) < 0)
    JUMPOUT(0x239507C70);
  return ((uint64_t (*)(uint64_t))((char *)sub_239507C3C + 4 * byte_239EC6E66[*(unsigned int *)(v2 + 12)]))(v5);
}

uint64_t sub_239507BAC(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  *(_QWORD *)(v4 - 96) = "axWg7XaSO4Eoqz8x";
  *(_QWORD *)(v4 - 88) = "lLzCaoN0jOxoeDOT";
  sub_239513778((uint64_t)va, (const char **)(v4 - 96));
  sub_239513CF4(va1, (uint64_t *)va, (uint64_t *)va);
  v5 = sub_239513CF4(va1, v3, v3);
  if (SHIBYTE(v13) < 0)
    JUMPOUT(0x239507C60);
  if (SHIBYTE(v10) < 0)
    JUMPOUT(0x239507C70);
  return ((uint64_t (*)(uint64_t))((char *)sub_239507C3C + 4 * byte_239EC6E66[*(unsigned int *)(v2 + 12)]))(v5);
}

void sub_239507BD0(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 - 96) = "AvVGtwRUXMeOokSR";
  *(_QWORD *)(v2 - 88) = "sHpyBtD6WceTt88B";
  sub_239513778((uint64_t)va, (const char **)(v2 - 96));
  JUMPOUT(0x239507BF0);
}

BOOL sub_239507C3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t __dst, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  unint64_t i;
  id v48;
  const char *v49;
  size_t v50;
  void *v51;
  void **v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int8x8_t v57;
  unint64_t v58;
  uint8x8_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void **v67;
  void *v68;
  void **v70;
  uint64_t v71;
  void *v72;
  void *v73[2];
  unint64_t v74;
  void *v75;
  char v76;
  _QWORD *v77;
  int8x8_t v78;
  void **v79;
  uint64_t v80;

  *(_QWORD *)(v44 - 96) = "fe6ctaMridzSwEp5";
  *(_QWORD *)(v44 - 88) = "sqlEilu38HYSYUbR";
  sub_239513778((uint64_t)v73, (const char **)(v44 - 96));
  sub_239513CF4((uint64_t)&v77, (uint64_t)v73, (uint64_t)v73);
  sub_239513CF4((uint64_t)&v77, v43, v43);
  if (v76 < 0)
  {
    operator delete(v75);
    if ((SHIBYTE(v74) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_55:
    operator delete(v73[0]);
    goto LABEL_3;
  }
  if (SHIBYTE(v74) < 0)
    goto LABEL_55;
LABEL_3:
  sub_2397A9494(v71);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "functionNames");
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  for (i = 0; i < objc_msgSend(v46, "count"); ++i)
  {
    objc_msgSend(v46, "objectAtIndexedSubscript:", i);
    v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v49 = (const char *)objc_msgSend(v48, "UTF8String");
    v50 = strlen(v49);
    if (v50 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v51 = (void *)v50;
    if (v50 >= 0x17)
    {
      v54 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v54 = v50 | 7;
      v55 = v54 + 1;
      v52 = (void **)operator new(v54 + 1);
      v73[1] = v51;
      v74 = v55 | 0x8000000000000000;
      v73[0] = v52;
    }
    else
    {
      HIBYTE(v74) = v50;
      v52 = v73;
      if (!v50)
      {
        LOBYTE(v73[0]) = 0;
        v53 = (char *)sub_239514158(&v77, (uint64_t)v73);
        if (!v53)
          goto LABEL_10;
        goto LABEL_16;
      }
    }
    memmove(v52, v49, (size_t)v51);
    *((_BYTE *)v51 + (_QWORD)v52) = 0;
    v53 = (char *)sub_239514158(&v77, (uint64_t)v73);
    if (!v53)
    {
LABEL_10:
      if ((SHIBYTE(v74) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
LABEL_16:
    v56 = v53;
    v57 = v78;
    v58 = *((_QWORD *)v53 + 1);
    v59 = (uint8x8_t)vcnt_s8(v78);
    v59.i16[0] = vaddlv_u8(v59);
    if (v59.u32[0] > 1uLL)
    {
      if (v58 >= *(_QWORD *)&v78)
        v58 %= *(_QWORD *)&v78;
    }
    else
    {
      v58 &= *(_QWORD *)&v78 - 1;
    }
    v60 = (char *)v77[v58];
    do
    {
      v61 = v60;
      v60 = *(char **)v60;
    }
    while (v60 != v53);
    if (v61 == (char *)&v79)
      goto LABEL_33;
    v62 = *((_QWORD *)v61 + 1);
    if (v59.u32[0] > 1uLL)
    {
      if (v62 >= *(_QWORD *)&v78)
        v62 %= *(_QWORD *)&v78;
    }
    else
    {
      v62 &= *(_QWORD *)&v78 - 1;
    }
    if (v62 != v58)
    {
LABEL_33:
      if (!*(_QWORD *)v53)
        goto LABEL_34;
      v63 = *(_QWORD *)(*(_QWORD *)v53 + 8);
      if (v59.u32[0] > 1uLL)
      {
        if (v63 >= *(_QWORD *)&v78)
          v63 %= *(_QWORD *)&v78;
      }
      else
      {
        v63 &= *(_QWORD *)&v78 - 1;
      }
      if (v63 != v58)
LABEL_34:
        v77[v58] = 0;
    }
    v64 = *(_QWORD *)v53;
    if (*(_QWORD *)v53)
    {
      v65 = *(_QWORD *)(v64 + 8);
      if (v59.u32[0] > 1uLL)
      {
        if (v65 >= *(_QWORD *)&v57)
          v65 %= *(_QWORD *)&v57;
      }
      else
      {
        v65 &= *(_QWORD *)&v57 - 1;
      }
      if (v65 != v58)
      {
        v77[v65] = v61;
        v64 = *(_QWORD *)v53;
      }
    }
    *(_QWORD *)v61 = v64;
    *(_QWORD *)v53 = 0;
    --v80;
    if (v53[39] < 0)
    {
      operator delete(*((void **)v53 + 2));
      operator delete(v56);
      if ((SHIBYTE(v74) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else
    {
      operator delete(v53);
      if ((SHIBYTE(v74) & 0x80000000) == 0)
        goto LABEL_4;
    }
LABEL_46:
    operator delete(v73[0]);
LABEL_4:

  }
  v66 = v80;

  v67 = v79;
  if (v79)
  {
    do
    {
      v70 = (void **)*v67;
      if (*((char *)v67 + 39) < 0)
        operator delete(v67[2]);
      operator delete(v67);
      v67 = v70;
    }
    while (v70);
  }
  v68 = v77;
  v77 = 0;
  if (v68)
    operator delete(v68);
  operator delete(v72);
  operator delete(v42);
  return v66 == 0;
}

BOOL sub_239507C7C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t i;
  id v6;
  const char *v7;
  size_t v8;
  void *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void **v28;
  uint64_t v29;
  void *v30;
  void *v31[2];
  unint64_t v32;
  void *v33;
  char v34;
  _QWORD *v35;
  int8x8_t v36;
  void **v37;
  uint64_t v38;

  *(_QWORD *)(v2 - 96) = "PHZR1OeiD6epHFAv";
  *(_QWORD *)(v2 - 88) = "UizD8lhV6py1NKj3";
  sub_239513778((uint64_t)v31, (const char **)(v2 - 96));
  sub_239513CF4(&v35, v31, v31);
  sub_239513CF4(&v35, v1, v1);
  if (v34 < 0)
  {
    operator delete(v33);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_55:
    operator delete(v31[0]);
    goto LABEL_3;
  }
  if (SHIBYTE(v32) < 0)
    goto LABEL_55;
LABEL_3:
  sub_2397A9494(v29);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "functionNames");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  for (i = 0; i < objc_msgSend(v4, "count"); ++i)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", i);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v7 = (const char *)objc_msgSend(v6, "UTF8String");
    v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      v10 = (void **)operator new(v12 + 1);
      v31[1] = v9;
      v32 = v13 | 0x8000000000000000;
      v31[0] = v10;
    }
    else
    {
      HIBYTE(v32) = v8;
      v10 = v31;
      if (!v8)
      {
        LOBYTE(v31[0]) = 0;
        v11 = (char *)((uint64_t (*)(_QWORD **, void **))sub_239514158)(&v35, v31);
        if (!v11)
          goto LABEL_10;
        goto LABEL_16;
      }
    }
    memmove(v10, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    v11 = (char *)((uint64_t (*)(_QWORD **, void **))sub_239514158)(&v35, v31);
    if (!v11)
    {
LABEL_10:
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
LABEL_16:
    v14 = v11;
    v15 = v36;
    v16 = *((_QWORD *)v11 + 1);
    v17 = (uint8x8_t)vcnt_s8(v36);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v36)
        v16 %= *(_QWORD *)&v36;
    }
    else
    {
      v16 &= *(_QWORD *)&v36 - 1;
    }
    v18 = (char *)v35[v16];
    do
    {
      v19 = v18;
      v18 = *(char **)v18;
    }
    while (v18 != v11);
    if (v19 == (char *)&v37)
      goto LABEL_33;
    v20 = *((_QWORD *)v19 + 1);
    if (v17.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&v36)
        v20 %= *(_QWORD *)&v36;
    }
    else
    {
      v20 &= *(_QWORD *)&v36 - 1;
    }
    if (v20 != v16)
    {
LABEL_33:
      if (!*(_QWORD *)v11)
        goto LABEL_34;
      v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (v17.u32[0] > 1uLL)
      {
        if (v21 >= *(_QWORD *)&v36)
          v21 %= *(_QWORD *)&v36;
      }
      else
      {
        v21 &= *(_QWORD *)&v36 - 1;
      }
      if (v21 != v16)
LABEL_34:
        v35[v16] = 0;
    }
    v22 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v17.u32[0] > 1uLL)
      {
        if (v23 >= *(_QWORD *)&v15)
          v23 %= *(_QWORD *)&v15;
      }
      else
      {
        v23 &= *(_QWORD *)&v15 - 1;
      }
      if (v23 != v16)
      {
        v35[v23] = v19;
        v22 = *(_QWORD *)v11;
      }
    }
    *(_QWORD *)v19 = v22;
    *(_QWORD *)v11 = 0;
    --v38;
    if (v11[39] < 0)
    {
      operator delete(*((void **)v11 + 2));
      operator delete(v14);
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else
    {
      operator delete(v11);
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_4;
    }
LABEL_46:
    operator delete(v31[0]);
LABEL_4:

  }
  v24 = v38;

  v25 = v37;
  if (v37)
  {
    do
    {
      v28 = (void **)*v25;
      if (*((char *)v25 + 39) < 0)
        operator delete(v25[2]);
      operator delete(v25);
      v25 = v28;
    }
    while (v28);
  }
  v26 = v35;
  v35 = 0;
  if (v26)
    operator delete(v26);
  operator delete(v30);
  operator delete(v0);
  return v24 == 0;
}

BOOL sub_239507CA0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t i;
  id v6;
  const char *v7;
  size_t v8;
  void *v9;
  void **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  void **v28;
  uint64_t v29;
  void *v30;
  void *v31[2];
  unint64_t v32;
  void *v33;
  char v34;
  _QWORD *v35;
  int8x8_t v36;
  void **v37;
  uint64_t v38;

  *(_QWORD *)(v2 - 96) = "axWg7XaSO4Eoqz8x";
  *(_QWORD *)(v2 - 88) = "lLzCaoN0jOxoeDOT";
  sub_239513778((uint64_t)v31, (const char **)(v2 - 96));
  sub_239513CF4(&v35, v31, v31);
  sub_239513CF4(&v35, v1, v1);
  if (v34 < 0)
  {
    operator delete(v33);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_55:
    operator delete(v31[0]);
    goto LABEL_3;
  }
  if (SHIBYTE(v32) < 0)
    goto LABEL_55;
LABEL_3:
  sub_2397A9494(v29);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "functionNames");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  for (i = 0; i < objc_msgSend(v4, "count"); ++i)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", i);
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v7 = (const char *)objc_msgSend(v6, "UTF8String");
    v8 = strlen(v7);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v12 = v8 | 7;
      v13 = v12 + 1;
      v10 = (void **)operator new(v12 + 1);
      v31[1] = v9;
      v32 = v13 | 0x8000000000000000;
      v31[0] = v10;
    }
    else
    {
      HIBYTE(v32) = v8;
      v10 = v31;
      if (!v8)
      {
        LOBYTE(v31[0]) = 0;
        v11 = (char *)((uint64_t (*)(_QWORD **, void **))sub_239514158)(&v35, v31);
        if (!v11)
          goto LABEL_10;
        goto LABEL_16;
      }
    }
    memmove(v10, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    v11 = (char *)((uint64_t (*)(_QWORD **, void **))sub_239514158)(&v35, v31);
    if (!v11)
    {
LABEL_10:
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
LABEL_16:
    v14 = v11;
    v15 = v36;
    v16 = *((_QWORD *)v11 + 1);
    v17 = (uint8x8_t)vcnt_s8(v36);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      if (v16 >= *(_QWORD *)&v36)
        v16 %= *(_QWORD *)&v36;
    }
    else
    {
      v16 &= *(_QWORD *)&v36 - 1;
    }
    v18 = (char *)v35[v16];
    do
    {
      v19 = v18;
      v18 = *(char **)v18;
    }
    while (v18 != v11);
    if (v19 == (char *)&v37)
      goto LABEL_33;
    v20 = *((_QWORD *)v19 + 1);
    if (v17.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&v36)
        v20 %= *(_QWORD *)&v36;
    }
    else
    {
      v20 &= *(_QWORD *)&v36 - 1;
    }
    if (v20 != v16)
    {
LABEL_33:
      if (!*(_QWORD *)v11)
        goto LABEL_34;
      v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (v17.u32[0] > 1uLL)
      {
        if (v21 >= *(_QWORD *)&v36)
          v21 %= *(_QWORD *)&v36;
      }
      else
      {
        v21 &= *(_QWORD *)&v36 - 1;
      }
      if (v21 != v16)
LABEL_34:
        v35[v16] = 0;
    }
    v22 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      v23 = *(_QWORD *)(v22 + 8);
      if (v17.u32[0] > 1uLL)
      {
        if (v23 >= *(_QWORD *)&v15)
          v23 %= *(_QWORD *)&v15;
      }
      else
      {
        v23 &= *(_QWORD *)&v15 - 1;
      }
      if (v23 != v16)
      {
        v35[v23] = v19;
        v22 = *(_QWORD *)v11;
      }
    }
    *(_QWORD *)v19 = v22;
    *(_QWORD *)v11 = 0;
    --v38;
    if (v11[39] < 0)
    {
      operator delete(*((void **)v11 + 2));
      operator delete(v14);
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else
    {
      operator delete(v11);
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        goto LABEL_4;
    }
LABEL_46:
    operator delete(v31[0]);
LABEL_4:

  }
  v24 = v38;

  v25 = v37;
  if (v37)
  {
    do
    {
      v28 = (void **)*v25;
      if (*((char *)v25 + 39) < 0)
        operator delete(v25[2]);
      operator delete(v25);
      v25 = v28;
    }
    while (v28);
  }
  v26 = v35;
  v35 = 0;
  if (v26)
    operator delete(v26);
  operator delete(v30);
  operator delete(v0);
  return v24 == 0;
}

void sub_239507CC4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 - 96) = "AvVGtwRUXMeOokSR";
  *(_QWORD *)(v2 - 88) = "sHpyBtD6WceTt88B";
  sub_239513778((uint64_t)va, (const char **)(v2 - 96));
  JUMPOUT(0x239507CE4);
}

void sub_239508028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  sub_23942823C((uint64_t)&a20);
  operator delete(a10);
  operator delete(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_2395080CC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_239508124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _OWORD *v8;

  v7 = sub_23946D5E0((_QWORD *)a1, a2) + 2;
  sub_23946D5E0(v7, a3);
  sub_23946D5E0((_QWORD *)(a1 + 32), a4);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  sub_2397A9494(a4);
  objc_claimAutoreleasedReturnValue();
  v8 = operator new(0x1CuLL);
  *v8 = xmmword_239EC6E7C;
  *(_OWORD *)((char *)v8 + 12) = *(__int128 *)((char *)&xmmword_239EC6E7C + 12);
  __asm { BR              X9 }
}

void sub_23950823C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 __p, char a20,int a21,__int16 a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  int *v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  HIBYTE(a21) = v30;
  strcpy((char *)&__p, "FoecqQ5kw8TqLPkP");
  objc_msgSend(a1, "stringWithUTF8String:", &__p);
  v31 = objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(a21) < 0)
    operator delete((void *)__p);
  v32 = objc_msgSend(v29, "newFunctionWithName:", v31);
  sub_2397A9494(a18);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = (void *)objc_msgSend(v33, "newComputePipelineStateWithFunction:error:", v32, 0);

  sub_2397A9468((std::__shared_weak_count_vtbl **)&__p, v34);
  v35 = sub_239514384(a16, v28, v27, (_DWORD **)&a26);
  v36 = __p;
  __p = 0uLL;
  v37 = (std::__shared_weak_count *)v35[4];
  *(_OWORD *)(v35 + 3) = v36;
  if (!v37)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v37->__shared_owners_;
  do
    v39 = __ldaxr(p_shared_owners);
  while (__stlxr(v39 - 1, p_shared_owners));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v40 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (!*((_QWORD *)&__p + 1))
      goto LABEL_13;
  }
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_13:
  JUMPOUT(0x239508200);
}

void sub_239508BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  operator delete(__p);

  sub_23946314C(a15);
  sub_23946314C(a16);
  sub_239416DA0(a10);
  sub_239416DA0(a11);
  sub_239416DA0(a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_239508E98(uint64_t a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 56);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 48) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EC0230();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

uint64_t *sub_239508F84(uint64_t a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 96);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EC0260();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

uint64_t sub_239509070(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *__p[2];
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *v44;
  char *v45;

  v10 = (void *)MEMORY[0x23B83EC40]();
  sub_2397A98A4(&v44);
  v11 = *(_QWORD **)a2;
  v12 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v12)
  {
    v17 = 1;
    v29 = (char *)v44;
    if (v44)
    {
LABEL_40:
      v30 = v45;
      v31 = v29;
      if (v45 != v29)
      {
        do
        {
          v32 = (std::__shared_weak_count *)*((_QWORD *)v30 - 1);
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v30 -= 16;
        }
        while (v30 != v29);
        v31 = v44;
      }
      v45 = v29;
      operator delete(v31);
    }
    goto LABEL_50;
  }
  v13 = a5;
  v14 = (_QWORD *)(a4 + 120);
  while (*v11 < (unint64_t)((v45 - (_BYTE *)v44) >> 4))
  {
    sub_23946D5E0(&v42, (uint64_t)v44 + 16 * *v11);
    sub_2397A9CD8((uint64_t)&v42, &v40);
    if (*(char *)(a3 + 23) < 0)
    {
      sub_23941A7F8(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v37 = *(_QWORD *)(a3 + 16);
    }
    sub_2397A9AC8((uint64_t)&v42, (uint64_t *)__p, 0, &v38);
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    sub_2395077FC();
    v17 = v16;
    if ((v16 & 1) != 0)
    {
      v18 = a1[1];
      if (v18 >= a1[2])
      {
        v19 = sub_2395149E4(a1, (uint64_t)&v42, (uint64_t)&v40, (uint64_t)&v38);
      }
      else
      {
        sub_239508124(a1[1], (uint64_t)&v42, (uint64_t)&v40, (uint64_t)&v38);
        v19 = v18 + 128;
        a1[1] = v18 + 128;
      }
      a1[1] = v19;
    }
    else if (v13)
    {
      sub_2394202DC(v14, 6011);
    }
    v20 = v39;
    if (!v39)
      goto LABEL_24;
    v21 = (unint64_t *)&v39->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = v41;
      if (v41)
      {
LABEL_25:
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
    else
    {
LABEL_24:
      v23 = v41;
      if (v41)
        goto LABEL_25;
    }
    v26 = v43;
    if (v43)
    {
      v27 = (unint64_t *)&v43->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (++v11 == v12)
      v15 = 0;
    else
      v15 = v17;
    if ((v15 & 1) == 0)
      goto LABEL_39;
  }
  if (v13)
  {
    sub_2394202DC(v14, 6010);
    v17 = 0;
LABEL_39:
    v29 = (char *)v44;
    if (!v44)
      goto LABEL_50;
    goto LABEL_40;
  }
  v17 = 0;
  v29 = (char *)v44;
  if (v44)
    goto LABEL_40;
LABEL_50:
  objc_autoreleasePoolPop(v10);
  return v17;
}

void sub_239509344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21)
{
  sub_2394631DC(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_2395093D0(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, _QWORD *a13, unint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  double v28;
  double v29;
  float64x2_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int *v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int *v86;
  int64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  unsigned int *v93;
  unint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  unsigned int *v100;
  uint64_t v101;
  __int128 v102;
  unsigned int *v103;
  char *v104;
  int v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int64x2_t *v125;
  int64x2_t v126;
  unint64_t v127;
  int64x2_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  std::chrono::steady_clock::time_point v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  float v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char v145;
  std::chrono::steady_clock::time_point v146;
  unsigned int *v147;
  _QWORD *v148;
  _QWORD *v149;
  uint64_t v150;
  unsigned int *v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  id v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _DWORD *v159;
  int v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  _QWORD *v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  __n128 v177;
  _QWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  int v188;
  __int128 v189;
  std::__shared_weak_count *v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  std::__shared_weak_count *v195;
  void *__p[2];
  uint64_t v197;
  void *v198;
  uint64_t v199;
  unint64_t v200;
  unsigned int *v201;
  unsigned int *v202;
  unsigned int *v203;
  uint64_t v204;
  int v205;
  int64x2_t *v206;
  int64x2_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  __int128 v215;
  __int128 v216;
  std::__shared_weak_count *v217;
  __int128 v218;
  __int128 v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD v223[3];
  _QWORD *v224;
  _BYTE v225[24];
  _BYTE *v226;
  unsigned int *v227;
  pthread_rwlock_t v228;
  _QWORD v229[3];
  _QWORD *v230;
  _BYTE v231[24];
  _BYTE *v232;
  _BYTE v233[24];
  _BYTE *v234;
  _BYTE v235[24];
  _BYTE *v236;
  _QWORD v237[3];
  _QWORD *v238;
  _QWORD v239[3];
  _QWORD *v240;
  _QWORD v241[3];
  _QWORD *v242;
  _BYTE v243[24];
  _BYTE *v244;
  _BYTE v245[24];
  _BYTE *v246;
  _BYTE v247[24];
  _BYTE *v248;
  _BYTE v249[24];
  _BYTE *v250;
  _BYTE v251[24];
  _BYTE *v252;
  _BYTE v253[568];
  _BYTE v254[24];
  _BYTE *v255;
  uint64_t v256;

  v256 = *MEMORY[0x24BDAC8D0];
  v221 = a16;
  v222 = a17;
  v220 = a1;
  v24 = (void *)MEMORY[0x23B83EC40]();
  sub_2396FD800(a13, (uint64_t)v251);
  v223[0] = 0x42C8000000000000;
  sub_2396FCC68(v253, 100, v251, v223, 1.0);
  v25 = v252;
  if (v252 == v251)
  {
    v26 = 4;
    v25 = v251;
    goto LABEL_5;
  }
  if (v252)
  {
    v26 = 5;
LABEL_5:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  v27 = operator new(0x28uLL);
  *v27 = &off_250ADD4A8;
  v27[1] = v253;
  v27[2] = a13;
  v27[3] = &v221;
  v250 = v27;
  sub_2395184B8(v220, a9);
  if ((sub_2396FD7B0((uint64_t)a13) & 1) != 0)
    goto LABEL_70;
  sub_2395185A4(a9 + 6, a9, a6, a14, (a7[1] - *a7) >> 3, a10, a11, a12, v28, v29, v30);
  if ((sub_2396FD7B0((uint64_t)a13) & 1) != 0)
    goto LABEL_70;
  sub_2396FDAA8(a13, (uint64_t)v247);
  sub_2396FD534(&v216, v253, 45);
  v246 = 0;
  v31 = (char *)operator new(0x40uLL);
  *(_QWORD *)v31 = &off_250ADB9D8;
  *(_OWORD *)(v31 + 8) = v216;
  *((_QWORD *)v31 + 3) = v217;
  *((_QWORD *)&v216 + 1) = 0;
  v217 = 0;
  v32 = v218;
  v33 = v219;
  v218 = 0uLL;
  *((_OWORD *)v31 + 2) = v32;
  *((_OWORD *)v31 + 3) = v33;
  v219 = 0uLL;
  v246 = v31;
  sub_2396FD600((uint64_t)v223, (uint64_t)v247, (uint64_t)v245);
  v34 = v246;
  if (v246 == v245)
  {
    v35 = 4;
    v34 = v245;
    goto LABEL_12;
  }
  if (v246)
  {
    v35 = 5;
LABEL_12:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v219 + 1);
  if (*((_QWORD *)&v219 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v219 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
  if (!*((_QWORD *)&v218 + 1))
    goto LABEL_22;
  v40 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    v42 = v217;
    if (!v217)
      goto LABEL_26;
  }
  else
  {
LABEL_22:
    v42 = v217;
    if (!v217)
      goto LABEL_26;
  }
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(p_shared_owners);
  while (__stlxr(v44 - 1, p_shared_owners));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = v248;
    if (v248 != v247)
      goto LABEL_27;
LABEL_32:
    v46 = 4;
    v45 = v247;
    goto LABEL_33;
  }
LABEL_26:
  v45 = v248;
  if (v248 == v247)
    goto LABEL_32;
LABEL_27:
  if (!v45)
    goto LABEL_34;
  v46 = 5;
LABEL_33:
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_34:
  v184 = a3;
  LODWORD(v228.__sig) = 0;
  v47 = *(_DWORD *)(a2 + 16);
  v186 = a2;
  v48 = *(_QWORD *)(a2 + 24);
  v49 = (uint64_t)v224;
  if (!v224)
  {
LABEL_37:
    v242 = (_QWORD *)v49;
    goto LABEL_39;
  }
  if (v224 != v223)
  {
    v49 = (*(uint64_t (**)(_QWORD *))(*v224 + 16))(v224);
    goto LABEL_37;
  }
  v242 = v241;
  (*(void (**)(_QWORD *, _QWORD *))(v223[0] + 24))(v223, v241);
LABEL_39:
  v50 = v243;
  v51 = (uint64_t)v226;
  if (!v226)
  {
LABEL_42:
    v244 = (_BYTE *)v51;
    goto LABEL_44;
  }
  if (v226 != v225)
  {
    v51 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v226 + 16))(v226);
    goto LABEL_42;
  }
  v244 = v243;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v226 + 24))(v226, v243);
LABEL_44:
  sub_23950AB34(a4, v48, 0, a10, a11, a9, a6, v241, (float)v47, (uint64_t)a14, &v228, *(_DWORD *)(v186 + 88));
  if (v244 == v243)
  {
    v52 = 4;
  }
  else
  {
    if (!v244)
      goto LABEL_49;
    v52 = 5;
    v50 = v244;
  }
  (*(void (**)(_QWORD *))(*v50 + 8 * v52))(v50);
LABEL_49:
  v53 = v242;
  if (v242 == v241)
  {
    v54 = 4;
    v53 = v241;
  }
  else
  {
    if (!v242)
      goto LABEL_54;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_54:
  if (LODWORD(v228.__sig))
  {
    if ((_BYTE)v222)
      sub_2394202DC((_QWORD *)(v221 + 120), v228.__sig);
    v55 = v226;
    if (v226 == v225)
    {
      v56 = 4;
      v55 = v225;
    }
    else
    {
      if (!v226)
        goto LABEL_65;
      v56 = 5;
    }
    (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_65:
    v59 = v224;
    if (v224 == v223)
    {
      v60 = 4;
      v59 = v223;
    }
    else
    {
      if (!v224)
      {
LABEL_70:
        v61 = 0;
        goto LABEL_71;
      }
      v60 = 5;
    }
    (*(void (**)(void))(*v59 + 8 * v60))();
    goto LABEL_70;
  }
  v57 = v226;
  if (v226 == v225)
  {
    v58 = 4;
    v57 = v225;
  }
  else
  {
    if (!v226)
      goto LABEL_80;
    v58 = 5;
  }
  (*(void (**)(void))(*v57 + 8 * v58))();
LABEL_80:
  v65 = v224;
  if (v224 == v223)
  {
    v66 = 4;
    v65 = v223;
    goto LABEL_84;
  }
  if (v224)
  {
    v66 = 5;
LABEL_84:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
  v215 = 0u;
  v214 = 0u;
  v213 = 0u;
  v212 = 0u;
  v211 = 0u;
  v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a14[1] - *a14) >> 2);
  v209 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a14[4] - a14[3]) >> 2);
  v210 = v67;
  kdebug_trace();
  if ((sub_2396FD7B0((uint64_t)a13) & 1) != 0)
  {
    v61 = 0;
    goto LABEL_256;
  }
  v206 = 0;
  v207 = 0;
  v208 = 0;
  sub_23950B5D4((uint64_t)a4, a14, &v206, (uint64_t)&v211);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v211), (int32x4_t)vceqzq_s64(v212)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v213), (int32x4_t)vceqzq_s64(v214))))) & 1) != 0|| !(_QWORD)v215|| !*((_QWORD *)&v215 + 1))
  {
    if ((_BYTE)v222)
      sub_2394202DC((_QWORD *)(v221 + 120), 6012);
    goto LABEL_253;
  }
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  v69 = a9[12];
  v68 = a9[13];
  v183 = 0xAAAAAAAAAAAAAAABLL * ((v68 - v69) >> 3);
  v205 = 0x2D / v183;
  v70 = *(_DWORD *)(*a5 + 4 * v220);
  if (v70 <= 1)
    v70 = 1;
  v205 = 0x2D / v183 / v70;
  if (v68 == v69)
  {
LABEL_250:
    v61 = sub_2396FD7B0((uint64_t)a13) ^ 1;
    goto LABEL_254;
  }
  v71 = 0;
  v178 = a5;
  v179 = v24;
  v180 = (uint64_t)a4;
  v181 = a7;
  v182 = a8;
  while (2)
  {
    v201 = 0;
    v202 = 0;
    v203 = 0;
    v204 = v71;
    v73 = *a7;
    v72 = a7[1];
    v198 = 0;
    v199 = 0;
    v200 = 0;
    v74 = v72 - v73;
    v185 = v71;
    if (v74)
    {
      if (v74 < 0)
        sub_2394189F8();
      v75 = v74 >> 3;
      v76 = ((unint64_t)((v74 >> 3) - 1) >> 6) + 1;
      v198 = operator new(8 * v76);
      v199 = 0;
      v200 = v76;
      sub_23942D8C8(&v198, v75, 0);
      v77 = v204;
      v78 = v202;
    }
    else
    {
      v78 = 0;
      v77 = v71;
    }
    v79 = a9[12] + 24 * v77;
    v81 = *(unsigned int **)v79;
    v80 = *(unsigned int **)(v79 + 8);
    while (v81 != v80)
    {
      v83 = *v81;
      v84 = *a6;
      if (v78 < v203)
      {
        *(_QWORD *)v78 = *(_QWORD *)(v84 + 8 * v83);
        v82 = (uint64_t)(v78 + 2);
        goto LABEL_100;
      }
      v85 = a6;
      v86 = v201;
      v87 = (char *)v78 - (char *)v201;
      v88 = ((char *)v78 - (char *)v201) >> 3;
      v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 61)
        sub_2394189F8();
      v90 = (char *)v203 - (char *)v201;
      if (v203 - v201 > v89)
        v89 = v90 >> 2;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
        v91 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
      {
        if (v91 >> 61)
          sub_239418A80();
        v92 = operator new(8 * v91);
        v93 = (unsigned int *)&v92[8 * v88];
        *(_QWORD *)v93 = *(_QWORD *)(v84 + 8 * v83);
        v82 = (uint64_t)(v93 + 2);
        if (v78 == v86)
        {
LABEL_118:
          a6 = v85;
          v201 = v93;
          v202 = (unsigned int *)v82;
          v203 = (unsigned int *)&v92[8 * v91];
          if (!v78)
            goto LABEL_100;
LABEL_119:
          operator delete(v78);
          goto LABEL_100;
        }
      }
      else
      {
        v92 = 0;
        v93 = (unsigned int *)(8 * v88);
        *(_QWORD *)(8 * v88) = *(_QWORD *)(v84 + 8 * v83);
        v82 = 8 * v88 + 8;
        if (v78 == v86)
          goto LABEL_118;
      }
      v94 = (char *)(v78 - 2) - (char *)v86;
      if (v94 < 0x168
        || &v92[v87 - 8 - (v94 & 0xFFFFFFFFFFFFFFF8)] > &v92[v87 - 8]
        || (unsigned int *)((char *)v78 - (v94 & 0xFFFFFFFFFFFFFFF8) - 8) > v78 - 2
        || (unint64_t)((char *)v78 - &v92[v87]) < 0x20)
      {
        v95 = v78;
        a6 = v85;
        do
        {
LABEL_114:
          v96 = *((_QWORD *)v95 - 1);
          v95 -= 2;
          *((_QWORD *)v93 - 1) = v96;
          v93 -= 2;
        }
        while (v95 != v86);
        goto LABEL_115;
      }
      v97 = (v94 >> 3) + 1;
      v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
      v95 = &v78[v98 / 0xFFFFFFFFFFFFFFFCLL];
      v93 = (unsigned int *)((char *)v93 - v98);
      v99 = &v92[8 * v88 - 16];
      v100 = v78 - 4;
      v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v102 = *(_OWORD *)v100;
        *(v99 - 1) = *((_OWORD *)v100 - 1);
        *v99 = v102;
        v99 -= 2;
        v100 -= 8;
        v101 -= 4;
      }
      while (v101);
      a6 = v85;
      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_114;
LABEL_115:
      v78 = v201;
      v201 = v93;
      v202 = (unsigned int *)v82;
      v203 = (unsigned int *)&v92[8 * v91];
      if (v78)
        goto LABEL_119;
LABEL_100:
      v202 = (unsigned int *)v82;
      ++v81;
      v78 = (unsigned int *)v82;
    }
    v103 = v201;
    if (v201 != v78)
    {
      v104 = (char *)v198;
      do
      {
        *(_QWORD *)&v104[((unint64_t)*v103 >> 3) & 0x1FFFFFF8] |= 1 << *v103;
        *(_QWORD *)&v104[((unint64_t)v103[1] >> 3) & 0x1FFFFFF8] |= 1 << v103[1];
        v103 += 2;
      }
      while (v103 != v78);
    }
    a7 = v181;
    kdebug_trace();
    v24 = v179;
    if ((sub_2396FD7B0((uint64_t)a13) & 1) != 0)
    {
      v105 = 1;
      goto LABEL_244;
    }
    __p[0] = 0;
    __p[1] = 0;
    v197 = 0;
    sub_2397A9E70(&v193, v180);
    sub_2396FDAA8(a13, (uint64_t)v235);
    sub_2396FD534(&v189, v253, 3);
    v234 = 0;
    v106 = (char *)operator new(0x40uLL);
    *(_QWORD *)v106 = &off_250ADB9D8;
    *(_OWORD *)(v106 + 8) = v189;
    *((_QWORD *)v106 + 3) = v190;
    *((_QWORD *)&v189 + 1) = 0;
    v190 = 0;
    v107 = v191;
    v191 = 0uLL;
    v108 = v192;
    *((_OWORD *)v106 + 2) = v107;
    *((_OWORD *)v106 + 3) = v108;
    v192 = 0uLL;
    v234 = v106;
    sub_2396FD600((uint64_t)v237, (uint64_t)v235, (uint64_t)v233);
    v109 = v234;
    if (v234 == v233)
    {
      v109 = v233;
      v110 = 4;
LABEL_136:
      (*(void (**)(void))(*v109 + 8 * v110))();
    }
    else if (v234)
    {
      v110 = 5;
      goto LABEL_136;
    }
    v111 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
    if (*((_QWORD *)&v192 + 1))
    {
      v112 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v114 = (std::__shared_weak_count *)*((_QWORD *)&v191 + 1);
    if (*((_QWORD *)&v191 + 1))
    {
      v115 = (unint64_t *)(*((_QWORD *)&v191 + 1) + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    v117 = v190;
    if (v190)
    {
      v118 = (unint64_t *)&v190->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    v120 = v236;
    if (v236 == v235)
    {
      v120 = v235;
      v121 = 4;
LABEL_156:
      (*(void (**)(void))(*v120 + 8 * v121))();
    }
    else if (v236)
    {
      v121 = 5;
      goto LABEL_156;
    }
    if (v207 == v206)
    {
      v124 = 0;
    }
    else
    {
      v122 = ((char *)v207 - (char *)v206) >> 3;
      if (v122 <= 1)
        v122 = 1;
      if (v122 < 4)
      {
        v123 = 0;
        v124 = 0;
        goto LABEL_166;
      }
      v123 = v122 & 0xFFFFFFFFFFFFFFFCLL;
      v125 = v206 + 1;
      v126 = 0uLL;
      v127 = v122 & 0xFFFFFFFFFFFFFFFCLL;
      v128 = 0uLL;
      do
      {
        v126 = vaddq_s64(v125[-1], v126);
        v128 = vaddq_s64(*v125, v128);
        v125 += 2;
        v127 -= 4;
      }
      while (v127);
      v124 = vaddvq_s64(vaddq_s64(v128, v126));
      if (v122 != v123)
      {
LABEL_166:
        v129 = v122 - v123;
        v130 = &v206->i8[8 * v123];
        do
        {
          v131 = *(_QWORD *)v130;
          v130 += 8;
          v124 += v131;
          --v129;
        }
        while (v129);
      }
    }
    v188 = 0;
    v188 = sub_239519254(a9 + 6, &v201, v220, v124, v186);
    v132.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v133 = *(void **)(a15 + 8);
    if (*(void **)a15 != v133)
    {
      v134 = *(_OWORD *)__p;
      __p[0] = *(void **)a15;
      __p[1] = v133;
      *(_OWORD *)a15 = v134;
      v135 = v197;
      v197 = *(_QWORD *)(a15 + 16);
      *(_QWORD *)(a15 + 16) = v135;
      goto LABEL_194;
    }
    v136 = *(float *)(v186 + 92);
    v137 = v220;
    v138 = (uint64_t)v238;
    if (v238)
    {
      if (v238 != v237)
      {
        v138 = (*(uint64_t (**)(_QWORD *))(*v238 + 16))(v238);
        goto LABEL_173;
      }
      v230 = v229;
      (*(void (**)(_QWORD *, _QWORD *))(v237[0] + 24))(v237, v229);
    }
    else
    {
LABEL_173:
      v230 = (_QWORD *)v138;
    }
    v139 = (uint64_t)v240;
    if (v240)
    {
      if (v240 != v239)
      {
        v139 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*v240 + 16))(v240, v231);
        goto LABEL_178;
      }
      v232 = v231;
      (*(void (**)(_QWORD *))(v239[0] + 24))(v239);
    }
    else
    {
LABEL_178:
      v232 = (_BYTE *)v139;
    }
    v140 = sub_239518E70(v184, (uint64_t)&v198, v181, v182, v137, (uint64_t)&v193, v229, __p, v136, v188);
    v141 = v232;
    if (v232 == v231)
    {
      v141 = v231;
      v142 = 4;
LABEL_184:
      (*(void (**)(void))(*v141 + 8 * v142))();
    }
    else if (v232)
    {
      v142 = 5;
      goto LABEL_184;
    }
    v143 = v230;
    if (v230 == v229)
    {
      v143 = v229;
      v144 = 4;
LABEL_189:
      (*(void (**)(void))(*v143 + 8 * v144))();
    }
    else if (v230)
    {
      v144 = 5;
      goto LABEL_189;
    }
    if ((_BYTE)v222)
      v145 = v140;
    else
      v145 = 1;
    if ((v145 & 1) != 0)
    {
LABEL_194:
      v146.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if ((_BYTE)v222)
        *(double *)(v221 + 112) = *(double *)(v221 + 112) + (double)((v146.__d_.__rep_ - v132.__d_.__rep_) / 1000000000);
      kdebug_trace();
      sub_2397A1588(&v228);
      sub_2397A2A50((uint64_t)v223, 2u, 0);
      v187 = 1;
      v147 = v227;
      if (!v227)
      {
        sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v148 = operator new(0x88uLL);
      *v148 = &off_250ADD4F0;
      v148[1] = a9;
      v148[2] = &v204;
      v148[3] = &v220;
      v148[4] = v186;
      v148[5] = a6;
      v148[6] = v184;
      v148[7] = v181;
      v148[8] = v182;
      v148[9] = a15;
      v148[10] = &v193;
      v148[11] = v237;
      v148[12] = &v221;
      v148[13] = &v187;
      v148[14] = &v228;
      v148[15] = &v188;
      v255 = v148;
      sub_2394D0CC4(v147, (uint64_t)v254);
      v149 = v255;
      if (v255 == v254)
      {
        v149 = v254;
        v150 = 4;
LABEL_201:
        (*(void (**)(void))(*v149 + 8 * v150))();
      }
      else if (v255)
      {
        v150 = 5;
        goto LABEL_201;
      }
      v151 = v227;
      if (!v227)
      {
        sub_239A444D4((uint64_t)"unknown file", 546, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v152 = operator new(0xB0uLL);
      *v152 = &off_250ADD538;
      v152[1] = a9;
      v152[2] = v178;
      v152[3] = &v220;
      v152[4] = a13;
      v152[5] = &v211;
      v152[6] = v180;
      v152[7] = &v210;
      v152[8] = &v209;
      v152[9] = &v204;
      v152[10] = &v187;
      v152[11] = &v221;
      v152[12] = v253;
      v152[13] = &v205;
      v152[14] = __p;
      v152[15] = &v201;
      v152[16] = v186;
      v152[17] = &v228;
      v152[18] = a10;
      v152[19] = a11;
      v152[20] = a12;
      v255 = v152;
      sub_2394D0CC4(v151, (uint64_t)v254);
      v153 = v255;
      if (v255 == v254)
      {
        v153 = v254;
        v154 = 4;
LABEL_207:
        (*(void (**)(void))(*v153 + 8 * v154))();
      }
      else if (v255)
      {
        v154 = 5;
        goto LABEL_207;
      }
      sub_2397A2D24((uint64_t)v223);
      if (v187 && (sub_2396FD7B0((uint64_t)a13) & 1) == 0)
      {
        v155 = objc_retainAutorelease((id)v212.i64[1]);
        v156 = objc_msgSend(v155, "contents");
        v157 = *a14;
        if (a14[1] != *a14)
        {
          v158 = 0;
          v159 = (_DWORD *)(v156 + 8);
          do
          {
            v160 = *v159;
            v161 = v157 + 12 * v158;
            *(_QWORD *)v161 = *((_QWORD *)v159 - 1);
            *(_DWORD *)(v161 + 8) = v160;
            ++v158;
            v157 = *a14;
            v159 += 3;
          }
          while (v158 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a14[1] - *a14) >> 2));
        }

        v105 = 0;
      }
      else
      {
        v105 = 1;
      }
      sub_2397A2E14(v223);
      sub_2397A15B0(&v228);
      v162 = v240;
      if (v240 != v239)
      {
LABEL_216:
        if (v162)
        {
          v163 = 5;
          goto LABEL_220;
        }
        goto LABEL_221;
      }
    }
    else
    {
      sub_2394202DC((_QWORD *)(v221 + 120), 6009);
      v105 = 1;
      v162 = v240;
      if (v240 != v239)
        goto LABEL_216;
    }
    v162 = v239;
    v163 = 4;
LABEL_220:
    (*(void (**)(void))(*v162 + 8 * v163))();
LABEL_221:
    v164 = v238;
    if (v238 == v237)
    {
      v164 = v237;
      v165 = 4;
LABEL_225:
      (*(void (**)(void))(*v164 + 8 * v165))();
    }
    else if (v238)
    {
      v165 = 5;
      goto LABEL_225;
    }
    v166 = v195;
    if (v195)
    {
      v167 = (unint64_t *)&v195->__shared_owners_;
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v169 = v194;
    if (v194)
    {
      v170 = (unint64_t *)&v194->__shared_owners_;
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v172 = __p[0];
    if (__p[0])
    {
      v173 = __p[1];
      v174 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v176 = *--v173;
          v175 = v176;
          *v173 = 0;
          if (v176)
          {
            sub_239416DA0(v175 + 8);
            v177 = nullsub_4(v175);
            MEMORY[0x23B83E31C](v177);
          }
        }
        while (v173 != v172);
        v174 = __p[0];
      }
      __p[1] = v172;
      operator delete(v174);
    }
LABEL_244:
    if (v198)
      operator delete(v198);
    if (v201)
    {
      v202 = v201;
      operator delete(v201);
    }
    if (!v105)
    {
      v71 = v185 + 1;
      if (v185 + 1 == v183)
        goto LABEL_250;
      continue;
    }
    break;
  }
LABEL_253:
  v61 = 0;
LABEL_254:
  if (v206)
  {
    v207 = v206;
    operator delete(v206);
  }
LABEL_256:

LABEL_71:
  if (!v250)
    sub_2394172E0();
  (*(void (**)(_BYTE *))(*(_QWORD *)v250 + 48))(v250);
  v62 = v250;
  if (v250 == v249)
  {
    v63 = 4;
    v62 = v249;
LABEL_76:
    (*(void (**)(void))(*v62 + 8 * v63))();
  }
  else if (v250)
  {
    v63 = 5;
    goto LABEL_76;
  }
  sub_2396FCD14((uint64_t)v253);
  objc_autoreleasePoolPop(v24);
  return v61;
}

void sub_23950A718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,id a63)
{
  if (a58)
    operator delete(a58);
  sub_23950DAF4(&a63);
  sub_239416834(&STACK[0x5C0]);
  sub_2396FCD14((uint64_t)&STACK[0x600]);
  _Unwind_Resume(a1);
}

uint64_t sub_23950AB34(_QWORD *a1, unint64_t a2, int a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, _QWORD *a8, float a9, uint64_t a10, _DWORD *a11, int a12)
{
  _QWORD *v12;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  void **v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  _DWORD *v64;
  unint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  int v74;
  int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v79;
  void *v80;
  int v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  void *v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  __int128 v97;
  __int128 v98;
  void *v99;
  void *v100;
  uint64_t v101;
  void *v102;
  void *v103;
  uint64_t v104;
  _QWORD v105[19];
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  _QWORD v111[3];
  _QWORD *v112;
  _BYTE v113[24];
  _BYTE *v114;
  _BYTE v115[24];
  _BYTE *v116;
  _BYTE v117[24];
  _BYTE *v118;
  void *__p[2];
  char v120;
  void **v121;
  _QWORD v122[3];
  _QWORD *v123;
  _BYTE v124[24];
  _BYTE *v125;
  _BYTE v126[568];
  uint64_t v127;

  v12 = a8;
  v127 = *MEMORY[0x24BDAC8D0];
  sub_2396FD800(a8, (uint64_t)v124);
  v105[0] = 0x42C8000000000000;
  sub_2396FCC68(v126, 100, v124, v105, 1.0);
  v20 = v125;
  if (v125 == v124)
  {
    v21 = 4;
    v20 = v124;
  }
  else
  {
    if (!v125)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  v108 = 0;
  v109 = 0;
  v110 = 0;
  sub_23996301C((uint64_t)v105);
  sub_2394E34C8(a10, (uint64_t)v105);
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v120 = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FCDAC((uint64_t)v126, (__int128 *)__p, 5);
  if ((v120 & 0x80000000) == 0)
  {
    v82 = a3;
    if (!a3)
      goto LABEL_11;
    goto LABEL_10;
  }
  operator delete(__p[0]);
  v82 = a3;
  if (a3)
LABEL_10:
    sub_2394E44D0((uint64_t)v105, 1, 1, 0.2, -0.5, -9999.0, 0.2);
LABEL_11:
  v88 = v12;
  v22 = 3;
  v86 = a6;
  v87 = a7;
  v84 = a4;
  v85 = a5;
  v83 = a1;
  do
  {
    if (!v22)
      goto LABEL_120;
    sub_2394E40C0((uint64_t)v105, (uint64_t)&v102, (uint64_t)&v99);
    sub_2396FDAA8(v12, (uint64_t)v117);
    sub_2396FD534(&v95, v126, 30);
    v116 = 0;
    v25 = (char *)operator new(0x40uLL);
    *(_QWORD *)v25 = &off_250ADB9D8;
    *(_OWORD *)(v25 + 8) = v95;
    *((_QWORD *)v25 + 3) = v96;
    *((_QWORD *)&v95 + 1) = 0;
    v96 = 0;
    v26 = v97;
    v97 = 0uLL;
    v27 = v98;
    *((_OWORD *)v25 + 2) = v26;
    *((_OWORD *)v25 + 3) = v27;
    v98 = 0uLL;
    v116 = v25;
    sub_2396FD600((uint64_t)__p, (uint64_t)v117, (uint64_t)v115);
    v28 = v116;
    if (v116 == v115)
    {
      v28 = v115;
      v29 = 4;
      goto LABEL_20;
    }
    if (v116)
    {
      v29 = 5;
LABEL_20:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
    v90 = v22;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
    if (!*((_QWORD *)&v98 + 1))
      goto LABEL_25;
    v31 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (!*((_QWORD *)&v97 + 1))
        goto LABEL_31;
    }
    else
    {
LABEL_25:
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (!*((_QWORD *)&v97 + 1))
        goto LABEL_31;
    }
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
LABEL_31:
    v36 = v96;
    if (!v96)
      goto LABEL_35;
    v37 = (unint64_t *)&v96->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      v39 = v118;
      if (v118 == v117)
      {
LABEL_39:
        v39 = v117;
        v40 = 4;
        goto LABEL_40;
      }
    }
    else
    {
LABEL_35:
      v39 = v118;
      if (v118 == v117)
        goto LABEL_39;
    }
    if (!v39)
      goto LABEL_41;
    v40 = 5;
LABEL_40:
    (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_41:
    v41 = (uint64_t)v121;
    if (!v121)
      goto LABEL_44;
    if (v121 != __p)
    {
      v41 = (*((uint64_t (**)(void))*v121 + 2))();
LABEL_44:
      v112 = (_QWORD *)v41;
      goto LABEL_46;
    }
    v112 = v111;
    (*((void (**)(void **, _QWORD *))__p[0] + 3))(__p, v111);
LABEL_46:
    v42 = (uint64_t)v123;
    if (!v123)
      goto LABEL_49;
    if (v123 != v122)
    {
      v42 = (*(uint64_t (**)(void))(*v123 + 16))();
LABEL_49:
      v114 = (_BYTE *)v42;
      goto LABEL_51;
    }
    v114 = v113;
    (*(void (**)(_QWORD *, _BYTE *))(v122[0] + 24))(v122, v113);
LABEL_51:
    v43 = sub_23950DC8C(a1, &v102, &v99, a6, a4, a5, a7, &v108, v111, a11, a12);
    v44 = v114;
    if (v114 == v113)
    {
      v44 = v113;
      v45 = 4;
    }
    else
    {
      if (!v114)
        goto LABEL_56;
      v45 = 5;
    }
    (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_56:
    v46 = v112;
    if (v112 == v111)
    {
      v46 = v111;
      v47 = 4;
    }
    else
    {
      if (!v112)
        goto LABEL_61;
      v47 = 5;
    }
    (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_61:
    if ((v43 & 1) != 0)
    {
      v48 = 0;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v50 = v106;
      v49 = v107;
      v51 = (v107 - v106) >> 2;
      v89 = v107 - v106;
      if ((unint64_t)(v107 - v106) >= 0xC)
      {
        if (v89 < 0)
          sub_2394189F8();
        v48 = (char *)operator new(4 * (v51 / 3));
        v92 = v48;
        v93 = (uint64_t)v48;
        v94 = &v48[4 * (v51 / 3)];
      }
      if (v49 != v50)
      {
        v52 = 0;
        v53 = 0;
        if (v51 <= 1)
          v54 = 1;
        else
          v54 = v51;
        v55 = a2;
        while (2)
        {
          if ((float)*((int *)v108 + v52) <= a9)
            goto LABEL_88;
          if (v48 < v94)
          {
            *(_DWORD *)v48 = v52;
            v56 = (uint64_t)(v48 + 4);
            goto LABEL_87;
          }
          v57 = (char *)v92;
          v58 = v48 - (_BYTE *)v92;
          v59 = (v48 - (_BYTE *)v92) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            sub_2394189F8();
          v61 = v94 - (_BYTE *)v92;
          if ((v94 - (_BYTE *)v92) >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            if (v62 >> 62)
              sub_239418A80();
            v63 = operator new(4 * v62);
            v64 = &v63[4 * v59];
            *v64 = v52;
            v56 = (uint64_t)(v64 + 1);
            if (v48 != v57)
            {
LABEL_82:
              v65 = v48 - 4 - v57;
              if (v65 < 0xBC
                || &v63[v58 - 4 - (v65 & 0xFFFFFFFFFFFFFFFCLL)] > &v63[v58 - 4]
                || &v48[-(v65 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v48 - 4
                || (unint64_t)(v48 - v63 - v58) < 0x20)
              {
                v66 = v48;
                v55 = a2;
              }
              else
              {
                v68 = (v65 >> 2) + 1;
                v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
                v66 = &v48[-v69];
                v64 = (_DWORD *)((char *)v64 - v69);
                v70 = &v63[4 * v59 - 16];
                v71 = (__int128 *)(v48 - 16);
                v72 = v68 & 0x7FFFFFFFFFFFFFF8;
                v55 = a2;
                do
                {
                  v73 = *v71;
                  *(v70 - 1) = *(v71 - 1);
                  *v70 = v73;
                  v70 -= 2;
                  v71 -= 2;
                  v72 -= 8;
                }
                while (v72);
                if (v68 == (v68 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_85:
                  v48 = (char *)v92;
                  v92 = v64;
                  v93 = v56;
                  v94 = &v63[4 * v62];
                  if (v48)
                    goto LABEL_86;
                  goto LABEL_87;
                }
              }
              do
              {
                v67 = *((_DWORD *)v66 - 1);
                v66 -= 4;
                *--v64 = v67;
              }
              while (v66 != v57);
              goto LABEL_85;
            }
          }
          else
          {
            v63 = 0;
            v64 = (_DWORD *)(4 * v59);
            *(_DWORD *)(4 * v59) = v52;
            v56 = 4 * v59 + 4;
            if (v48 != v57)
              goto LABEL_82;
          }
          v55 = a2;
          v92 = v64;
          v93 = v56;
          v94 = &v63[4 * v62];
          if (v48)
LABEL_86:
            operator delete(v48);
LABEL_87:
          v93 = v56;
          v53 += 3;
          v48 = (char *)v56;
LABEL_88:
          if (v53 + v51 >= v55)
            goto LABEL_105;
          if (++v52 == v54)
            goto LABEL_105;
          continue;
        }
      }
      v53 = 0;
      v55 = a2;
LABEL_105:
      sub_2394E44F4((unsigned int **)&v92, (uint64_t)v105);
      if ((v107 - v106) >> 2 < (unint64_t)(v89 >> 1) || v53 + v51 >= v55)
        v74 = 3;
      else
        v74 = 0;
      v12 = v88;
      v75 = v90;
      if (v92)
      {
        v93 = (uint64_t)v92;
        operator delete(v92);
      }
      a6 = v86;
      a7 = v87;
      a4 = v84;
      a5 = v85;
      a1 = v83;
      v76 = v123;
      if (v123 == v122)
      {
LABEL_114:
        v76 = v122;
        v77 = 4;
        goto LABEL_115;
      }
    }
    else
    {
      v74 = 1;
      v75 = v90;
      v76 = v123;
      if (v123 == v122)
        goto LABEL_114;
    }
    if (!v76)
      goto LABEL_116;
    v77 = 5;
LABEL_115:
    (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_116:
    v23 = v121;
    if (v121 == __p)
    {
      v23 = __p;
      v24 = 4;
LABEL_13:
      (*((void (**)(void))*v23 + v24))();
      goto LABEL_14;
    }
    if (v121)
    {
      v24 = 5;
      goto LABEL_13;
    }
LABEL_14:
    v22 = v75 - 1;
  }
  while (!v74);
  if (v74 == 3)
  {
LABEL_120:
    if (v82)
      sub_2394E44D0((uint64_t)v105, 2, 1, 0.2, -0.5, -9999.0, 0.2);
    sub_2394E3FC0((uint64_t)v105, a10);
    v120 = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCDAC((uint64_t)v126, (__int128 *)__p, 5);
    if (v120 < 0)
      operator delete(__p[0]);
    v120 = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C((uint64_t)v126, (uint64_t)__p);
    if (v120 < 0)
      operator delete(__p[0]);
    v79 = 1;
    v80 = v99;
    if (v99)
    {
LABEL_127:
      v100 = v80;
      operator delete(v80);
    }
  }
  else
  {
    v79 = 0;
    v80 = v99;
    if (v99)
      goto LABEL_127;
  }
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  sub_23996303C(v105);
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  sub_2396FCD14((uint64_t)v126);
  return v79;
}

void sub_23950B3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t a70;

  if (__p)
    operator delete(__p);
  if (a43)
    operator delete(a43);
  sub_23996303C(&a46);
  if (a69)
  {
    a70 = (uint64_t)a69;
    operator delete(a69);
  }
  sub_2396FCD14((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

uint64_t sub_23950B5D4(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  char *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  _DWORD *v24;
  int64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  int64_t *v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int64_t v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  BOOL v61;
  uint64_t v63;
  char *v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  char *v68;
  _DWORD *v69;
  int64_t v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  int64_t *v83;
  char *v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  char *v91;
  uint64_t v92;
  __int128 v93;
  int64_t v94;
  char *v95;
  _QWORD *v96;
  void *v97;
  char *v98;
  void *v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  char *v107;
  int64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _DWORD *v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _OWORD *v121;
  __int128 *v122;
  uint64_t v123;
  __int128 v124;
  _BYTE *v125;
  int64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  int64_t *v139;
  char *v140;
  int64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  _OWORD *v146;
  char *v147;
  uint64_t v148;
  __int128 v149;
  int64_t v150;
  uint64_t v151;
  size_t v152;
  char *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  int v167;
  _BYTE *v168;
  char *v169;
  _BYTE *v170;
  unint64_t v171;
  char *v172;
  void *v173;
  char *v174;
  unint64_t v175;
  __int128 *v176;
  _OWORD *v177;
  unint64_t v178;
  __int128 v179;
  char *v180;
  int64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  char v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  _BYTE *v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  _OWORD *v200;
  char *v201;
  uint64_t v202;
  __int128 v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  int64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  __int128 v224;
  int v225;
  char *v226;
  uint64_t v227;
  char *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  size_t v232;
  _BYTE *v233;
  char *v234;
  unint64_t v235;
  unsigned int **v236;
  unsigned int *v237;
  unsigned int *v238;
  uint64_t v239;
  unsigned int v240;
  char *v241;
  uint64_t v242;
  char *v243;
  int64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  unsigned int *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  __int128 v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  char *v262;
  uint64_t *v263;
  uint64_t **v264;
  uint64_t **v265;
  uint64_t **v266;
  unsigned int v267;
  _DWORD *v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  _BYTE *v275;
  int v276;
  uint64_t v277;
  int v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  char v283;
  char *v284;
  char *v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  size_t v289;
  _BYTE *v290;
  char *v291;
  unint64_t v292;
  uint64_t v293;
  _OWORD *v294;
  char *v295;
  unint64_t v296;
  __int128 v297;
  _QWORD *v298;
  char *v299;
  unint64_t v300;
  uint64_t v301;
  char *v302;
  char v303;
  unint64_t v304;
  char *v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  _BYTE *v311;
  char *v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  _OWORD *v317;
  char *v318;
  uint64_t v319;
  __int128 v320;
  int v321;
  _OWORD *v322;
  char *v323;
  unint64_t v324;
  __int128 v325;
  _QWORD *v326;
  char *v327;
  unint64_t v328;
  uint64_t v329;
  char *v330;
  char v331;
  char *v332;
  char *v333;
  void *v334;
  char *v335;
  _BYTE *v336;
  _BYTE *v337;
  void *v338;
  _BYTE *v339;
  void *v340;
  void *v341;
  char *v342;
  _BYTE *v343;
  unint64_t v344;
  char *v345;
  char *v346;
  char *v347;
  unint64_t v348;
  __int128 *v349;
  char *v350;
  unint64_t v351;
  __int128 v352;
  char *v353;
  int64_t v354;
  unint64_t v355;
  uint64_t v356;
  char *v357;
  char v358;
  int64_t v359;
  uint64_t v360;
  void *v361;
  unint64_t v362;
  char *v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  _BYTE *v371;
  int64_t *v372;
  char *v373;
  int64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  char *v378;
  _OWORD *v379;
  char *v380;
  uint64_t v381;
  __int128 v382;
  int64_t v383;
  int64_t v384;
  uint64_t v385;
  void *v386;
  unint64_t v387;
  char *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  _BYTE *v396;
  int64_t *v397;
  char *v398;
  int64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  char *v403;
  _OWORD *v404;
  char *v405;
  uint64_t v406;
  __int128 v407;
  int64_t v408;
  uint64_t v409;
  uint64_t v410;
  void *v411;
  unint64_t v412;
  char *v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  _BYTE *v421;
  _QWORD *v422;
  char *v423;
  int64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  _OWORD *v429;
  char *v430;
  uint64_t v431;
  __int128 v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  void *v436;
  unint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  _BYTE *v446;
  uint64_t *v447;
  char *v448;
  int64_t v449;
  unint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t *v453;
  _OWORD *v454;
  uint64_t *v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  void *v461;
  unint64_t v462;
  unint64_t *v463;
  uint64_t v464;
  unint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  uint64_t v469;
  unint64_t v470;
  _BYTE *v471;
  unint64_t *v472;
  char *v473;
  int64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unint64_t *v478;
  _OWORD *v479;
  unint64_t *v480;
  uint64_t v481;
  __int128 v482;
  unint64_t v483;
  uint64_t v484;
  void *v485;
  unint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t *v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  _BYTE *v495;
  uint64_t *v496;
  char *v497;
  int64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  _OWORD *v503;
  uint64_t *v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  uint64_t v508;
  void *v509;
  unint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  _BYTE *v519;
  uint64_t *v520;
  char *v521;
  int64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  _OWORD *v527;
  uint64_t *v528;
  uint64_t v529;
  __int128 v530;
  uint64_t v531;
  _QWORD *v533;
  uint64_t v534;
  void *v536;
  unint64_t *v537;
  unsigned int *v538;
  void *v539;
  _QWORD *v540;
  char *v541;
  void *v542;
  char *v543;
  uint64_t v544;
  void *__p;
  _BYTE *v546;
  uint64_t v547;
  void *v548;
  char *v549;
  char *v550;
  void *v551;
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  char *v556;

  v4 = a3;
  a3[1] = *a3;
  v554 = 0;
  v555 = 0;
  v556 = 0;
  v551 = 0;
  v552 = 0;
  v553 = 0;
  v548 = 0;
  v549 = 0;
  v550 = 0;
  sub_2397A9494(a1);
  v536 = (void *)objc_claimAutoreleasedReturnValue();
  __p = 0;
  v546 = 0;
  v547 = 0;
  v6 = a2[3];
  v7 = a2[4];
  v8 = (uint64_t)(v7 - v6) / 12;
  if (v7 - v6 + 11 >= 0x17)
  {
    sub_23942CB44((uint64_t)&__p, 3 * v8);
    v6 = a2[3];
    v10 = a2[4];
    v9 = (char *)__p;
    v8 = (uint64_t)(v10 - v6) / 12;
    if (v10 == v6)
      goto LABEL_32;
  }
  else
  {
    v9 = 0;
    if (v7 == v6)
      goto LABEL_32;
  }
  if (v8 <= 1)
    v11 = 1;
  else
    v11 = v8;
  if (v11 < 0x10)
    goto LABEL_9;
  v12 = 0;
  v13 = !is_mul_ok(v11 - 1, 0xCuLL);
  v15 = &v9[12 * v11 - 12] >= v9 && &v9[12 * v11 - 8] >= v9 + 4 && (v11 - 1) >> 32 == 0;
  v16 = v15 && &v9[12 * v11 - 4] >= v9 + 8;
  if (!v16 || v13)
    goto LABEL_30;
  if ((unint64_t)v9 < v6 + 12 * v11 && v6 < (unint64_t)&v9[12 * v11])
  {
LABEL_9:
    v12 = 0;
LABEL_30:
    v23 = &v9[12 * v12 + 8];
    do
    {
      v24 = (_DWORD *)(v6 + 12 * v12);
      *((_DWORD *)v23 - 2) = *v24;
      *((_DWORD *)v23 - 1) = v24[1];
      *(_DWORD *)v23 = v24[2];
      v23 += 12;
      ++v12;
    }
    while (v11 != v12);
    goto LABEL_32;
  }
  v18 = 0;
  v12 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  v19 = v9;
  do
  {
    v20 = (__int128 *)(v6 + 12 * (v18 & 0xFFFFFFFC));
    v21 = *v20;
    v22 = v20[2];
    *((_OWORD *)v19 + 1) = v20[1];
    *((_OWORD *)v19 + 2) = v22;
    *(_OWORD *)v19 = v21;
    v19 += 48;
    v18 += 4;
  }
  while (v12 != v18);
  if (v11 != v12)
    goto LABEL_30;
LABEL_32:
  v25 = v546 - v9;
  v26 = objc_msgSend(v536, "newBufferWithBytes:length:options:");
  v27 = *(void **)(a4 + 40);
  *(_QWORD *)(a4 + 40) = v26;

  v29 = (char *)v4[1];
  v28 = v4[2];
  if ((unint64_t)v29 >= v28)
  {
    v31 = (char *)*v4;
    v32 = (uint64_t)&v29[-*v4];
    v33 = v32 >> 3;
    v34 = (v32 >> 3) + 1;
    if (v34 >> 61)
      sub_2394189F8();
    v35 = v28 - (_QWORD)v31;
    if (v35 >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_239418A80();
      v37 = operator new(8 * v36);
      v38 = (int64_t *)&v37[8 * v33];
      v39 = &v37[8 * v36];
      *v38 = v25;
      v30 = (uint64_t)(v38 + 1);
      v40 = v29 - v31;
      if (v29 == v31)
        goto LABEL_51;
    }
    else
    {
      v37 = 0;
      v38 = (int64_t *)(8 * v33);
      v39 = 0;
      *(_QWORD *)(8 * v33) = v25;
      v30 = 8 * v33 + 8;
      v40 = v29 - v31;
      if (v29 == v31)
      {
LABEL_51:
        *v4 = v38;
        v4[1] = v30;
        v4[2] = v39;
        if (v31)
          operator delete(v31);
        goto LABEL_53;
      }
    }
    v41 = v40 - 8;
    if (v41 < 0x58)
      goto LABEL_634;
    if ((unint64_t)(v29 - v37 - v32) < 0x20)
      goto LABEL_634;
    v42 = (v41 >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v29[-v43];
    v38 = (int64_t *)((char *)v38 - v43);
    v45 = &v37[8 * v33 - 16];
    v46 = v29 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v29 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_634:
      do
      {
        v49 = *((_QWORD *)v29 - 1);
        v29 -= 8;
        *--v38 = v49;
      }
      while (v29 != v31);
    }
    goto LABEL_51;
  }
  *(_QWORD *)v29 = v25;
  v30 = (uint64_t)(v29 + 8);
LABEL_53:
  v4[1] = v30;
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  __p = 0;
  v546 = 0;
  v547 = 0;
  v50 = *a2;
  v51 = a2[1];
  v52 = v51 - *a2;
  v53 = v52 / 12;
  if ((unint64_t)(v52 + 11) >= 0x17)
  {
    sub_2394807B4((uint64_t)&__p, 3 * v53);
    v50 = *a2;
    v55 = a2[1];
    v54 = (char *)__p;
    v53 = (uint64_t)(v55 - *a2) / 12;
    if (v55 == *a2)
      goto LABEL_86;
  }
  else
  {
    v54 = 0;
    if (v51 == v50)
      goto LABEL_86;
  }
  if (v53 <= 1)
    v56 = 1;
  else
    v56 = v53;
  if (v56 < 0x10)
    goto LABEL_63;
  v57 = 0;
  v58 = !is_mul_ok(v56 - 1, 0xCuLL);
  v61 = &v54[12 * v56 - 12] >= v54
     && &v54[12 * v56 - 8] >= v54 + 4
     && (v56 - 1) >> 32 == 0
     && &v54[12 * v56 - 4] >= v54 + 8;
  if (!v61 || v58)
    goto LABEL_84;
  if ((unint64_t)v54 < v50 + 12 * v56 && v50 < (unint64_t)&v54[12 * v56])
  {
LABEL_63:
    v57 = 0;
LABEL_84:
    v68 = &v54[12 * v57 + 8];
    do
    {
      v69 = (_DWORD *)(v50 + 12 * v57);
      *((_DWORD *)v68 - 2) = *v69;
      *((_DWORD *)v68 - 1) = v69[1];
      *(_DWORD *)v68 = v69[2];
      v68 += 12;
      ++v57;
    }
    while (v56 != v57);
    goto LABEL_86;
  }
  v63 = 0;
  v57 = v56 & 0xFFFFFFFFFFFFFFFCLL;
  v64 = v54;
  do
  {
    v65 = (__int128 *)(v50 + 12 * (v63 & 0xFFFFFFFC));
    v66 = *v65;
    v67 = v65[2];
    *((_OWORD *)v64 + 1) = v65[1];
    *((_OWORD *)v64 + 2) = v67;
    *(_OWORD *)v64 = v66;
    v64 += 48;
    v63 += 4;
  }
  while (v57 != v63);
  if (v56 != v57)
    goto LABEL_84;
LABEL_86:
  v70 = v546 - v54;
  v71 = objc_msgSend(v536, "newBufferWithBytes:length:options:");
  v72 = *(void **)(a4 + 24);
  *(_QWORD *)(a4 + 24) = v71;

  v74 = (char *)v4[1];
  v73 = v4[2];
  if ((unint64_t)v74 < v73)
  {
    *(_QWORD *)v74 = v70;
    v75 = (uint64_t)(v74 + 8);
    goto LABEL_107;
  }
  v76 = (char *)*v4;
  v77 = (uint64_t)&v74[-*v4];
  v78 = v77 >> 3;
  v79 = (v77 >> 3) + 1;
  if (v79 >> 61)
    sub_2394189F8();
  v80 = v73 - (_QWORD)v76;
  if (v80 >> 2 > v79)
    v79 = v80 >> 2;
  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
    v81 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v81 = v79;
  if (v81)
  {
    if (v81 >> 61)
      sub_239418A80();
    v82 = operator new(8 * v81);
    v83 = (int64_t *)&v82[8 * v78];
    v84 = &v82[8 * v81];
    *v83 = v70;
    v75 = (uint64_t)(v83 + 1);
    v85 = v74 - v76;
    if (v74 == v76)
      goto LABEL_105;
    goto LABEL_99;
  }
  v82 = 0;
  v83 = (int64_t *)(8 * v78);
  v84 = 0;
  *(_QWORD *)(8 * v78) = v70;
  v75 = 8 * v78 + 8;
  v85 = v74 - v76;
  if (v74 != v76)
  {
LABEL_99:
    v86 = v85 - 8;
    if (v86 < 0x58)
      goto LABEL_635;
    if ((unint64_t)(v74 - v82 - v77) < 0x20)
      goto LABEL_635;
    v87 = (v86 >> 3) + 1;
    v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
    v89 = &v74[-v88];
    v83 = (int64_t *)((char *)v83 - v88);
    v90 = &v82[8 * v78 - 16];
    v91 = v74 - 16;
    v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v93 = *(_OWORD *)v91;
      *(v90 - 1) = *((_OWORD *)v91 - 1);
      *v90 = v93;
      v90 -= 2;
      v91 -= 32;
      v92 -= 4;
    }
    while (v92);
    v74 = v89;
    if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_635:
      do
      {
        v94 = *((_QWORD *)v74 - 1);
        v74 -= 8;
        *--v83 = v94;
      }
      while (v74 != v76);
    }
  }
LABEL_105:
  *v4 = v83;
  v4[1] = v75;
  v4[2] = v84;
  if (v76)
    operator delete(v76);
LABEL_107:
  v4[1] = v75;
  if (__p)
  {
    v546 = __p;
    operator delete(__p);
  }
  __p = 0;
  v546 = 0;
  v547 = 0;
  v542 = 0;
  v543 = 0;
  v544 = 0;
  v539 = 0;
  v540 = 0;
  v541 = 0;
  sub_2396C2608(a2, (char **)&v542);
  sub_2396C1F84(a2, &v539, (uint64_t)&v542, 1);
  sub_2396C037C(a2, (uint64_t *)&__p, 1, (uint64_t)&v539, 1);
  v95 = (char *)v539;
  if (v539)
  {
    v96 = v540;
    v97 = v539;
    if (v540 != v539)
    {
      v98 = (char *)v540;
      do
      {
        v100 = (void *)*((_QWORD *)v98 - 3);
        v98 -= 24;
        v99 = v100;
        if (v100)
        {
          *(v96 - 2) = v99;
          operator delete(v99);
        }
        v96 = v98;
      }
      while (v98 != v95);
      v97 = v539;
    }
    v540 = v95;
    operator delete(v97);
  }
  v539 = 0;
  v540 = 0;
  v541 = 0;
  v101 = a2[1] - *a2;
  if (v101)
  {
    v102 = 0xAAAAAAAAAAAAAAABLL * (v101 >> 2);
    if (v102 >> 62)
      sub_2394189F8();
    v103 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * (v101 >> 2));
    v539 = v103;
    v540 = v103;
    v541 = &v103[4 * v102];
    v104 = __p;
    v105 = v546;
    v537 = a2;
    v533 = v4;
    if (__p != v546)
    {
      while (1)
      {
LABEL_122:
        while (1)
        {
          v106 = v104[1] - *v104;
          if (v103 >= v541)
            break;
          *(_DWORD *)v103 = v106 >> 2;
          v103 += 4;
          v540 = v103;
          v104 += 3;
          if (v104 == v105)
            goto LABEL_151;
        }
        v107 = (char *)v539;
        v108 = v103 - (_BYTE *)v539;
        v109 = (v103 - (_BYTE *)v539) >> 2;
        v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 62)
          sub_2394189F8();
        v111 = v541 - (_BYTE *)v539;
        if ((v541 - (_BYTE *)v539) >> 1 > v110)
          v110 = v111 >> 1;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
          v112 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
        {
          if (v112 >> 62)
            sub_239418A80();
          v113 = operator new(4 * v112);
          v114 = &v113[4 * v109];
          *v114 = v106 >> 2;
          v115 = (uint64_t)(v114 + 1);
          if (v103 == v107)
            goto LABEL_137;
        }
        else
        {
          v113 = 0;
          v114 = (_DWORD *)(4 * v109);
          *(_DWORD *)(4 * v109) = v106 >> 2;
          v115 = 4 * v109 + 4;
          if (v103 == v107)
            goto LABEL_137;
        }
        v116 = v103 - 4 - v107;
        if (v116 >= 0xBC)
        {
          if (&v113[v108 - 4 - (v116 & 0xFFFFFFFFFFFFFFFCLL)] > &v113[v108 - 4])
          {
            v117 = v103;
          }
          else if (&v103[-(v116 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v103 - 4)
          {
            v117 = v103;
          }
          else if ((unint64_t)(v103 - v113 - v108) >= 0x20)
          {
            v119 = (v116 >> 2) + 1;
            v120 = 4 * (v119 & 0x7FFFFFFFFFFFFFF8);
            v117 = &v103[-v120];
            v114 = (_DWORD *)((char *)v114 - v120);
            v121 = &v113[4 * v109 - 16];
            v122 = (__int128 *)(v103 - 16);
            v123 = v119 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v124 = *v122;
              *(v121 - 1) = *(v122 - 1);
              *v121 = v124;
              v121 -= 2;
              v122 -= 2;
              v123 -= 8;
            }
            while (v123);
            if (v119 == (v119 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_137;
          }
          else
          {
            v117 = v103;
          }
        }
        else
        {
          v117 = v103;
        }
        do
        {
          v118 = *((_DWORD *)v117 - 1);
          v117 -= 4;
          *--v114 = v118;
        }
        while (v117 != v107);
LABEL_137:
        v539 = v114;
        v540 = (_QWORD *)v115;
        v541 = &v113[4 * v112];
        if (v107)
          operator delete(v107);
        v103 = (char *)v115;
        v540 = (_QWORD *)v115;
        v104 += 3;
        if (v104 == v105)
        {
LABEL_151:
          v125 = v539;
          v4 = v533;
          a2 = v537;
          goto LABEL_154;
        }
      }
    }
  }
  else
  {
    v103 = 0;
    v104 = __p;
    v105 = v546;
    v537 = a2;
    v533 = v4;
    if (__p != v546)
      goto LABEL_122;
  }
  v125 = v103;
LABEL_154:
  v126 = v103 - v125;
  v127 = objc_msgSend(v536, "newBufferWithBytes:length:options:", v533);
  v128 = *(void **)a4;
  *(_QWORD *)a4 = v127;

  v130 = (char *)v4[1];
  v129 = v4[2];
  if ((unint64_t)v130 < v129)
  {
    *(_QWORD *)v130 = v126;
    v131 = (uint64_t)(v130 + 8);
    goto LABEL_175;
  }
  v132 = (char *)*v4;
  v133 = (uint64_t)&v130[-*v4];
  v134 = v133 >> 3;
  v135 = (v133 >> 3) + 1;
  if (v135 >> 61)
    sub_2394189F8();
  v136 = v129 - (_QWORD)v132;
  if (v136 >> 2 > v135)
    v135 = v136 >> 2;
  if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
    v137 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v137 = v135;
  if (v137)
  {
    if (v137 >> 61)
      sub_239418A80();
    v138 = operator new(8 * v137);
    v139 = (int64_t *)&v138[8 * v134];
    v140 = &v138[8 * v137];
    *v139 = v126;
    v131 = (uint64_t)(v139 + 1);
    v141 = v130 - v132;
    if (v130 == v132)
      goto LABEL_173;
    goto LABEL_167;
  }
  v138 = 0;
  v139 = (int64_t *)(8 * v134);
  v140 = 0;
  *(_QWORD *)(8 * v134) = v126;
  v131 = 8 * v134 + 8;
  v141 = v130 - v132;
  if (v130 != v132)
  {
LABEL_167:
    v142 = v141 - 8;
    if (v142 < 0x58)
      goto LABEL_636;
    if ((unint64_t)(v130 - &v138[v133]) < 0x20)
      goto LABEL_636;
    v143 = (v142 >> 3) + 1;
    v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
    v145 = &v130[-v144];
    v139 = (int64_t *)((char *)v139 - v144);
    v146 = &v138[8 * v134 - 16];
    v147 = v130 - 16;
    v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v149 = *(_OWORD *)v147;
      *(v146 - 1) = *((_OWORD *)v147 - 1);
      *v146 = v149;
      v146 -= 2;
      v147 -= 32;
      v148 -= 4;
    }
    while (v148);
    v130 = v145;
    if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_636:
      do
      {
        v150 = *((_QWORD *)v130 - 1);
        v130 -= 8;
        *--v139 = v150;
      }
      while (v130 != v132);
    }
  }
LABEL_173:
  *v4 = v139;
  v4[1] = v131;
  v4[2] = v140;
  if (v132)
    operator delete(v132);
LABEL_175:
  v4[1] = v131;
  if (v539)
  {
    v540 = v539;
    operator delete(v539);
  }
  v151 = a2[1] - *a2;
  v152 = 0xAAAAAAAAAAAAAAABLL * (v151 >> 2);
  v153 = v554;
  if (v152 > (v556 - v554) >> 2)
  {
    if (v152 >> 62)
      sub_2394189F8();
    v154 = v555;
    v155 = (char *)operator new(0xAAAAAAAAAAAAAAACLL * (v151 >> 2));
    v156 = v154 - v153;
    v157 = &v155[(v154 - v153) & 0xFFFFFFFFFFFFFFFCLL];
    v158 = v157;
    if (v154 == v153)
      goto LABEL_187;
    if ((unint64_t)(v156 - 4) >= 0x2C)
    {
      v158 = &v155[(v154 - v153) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(v154 - &v155[v156 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
      {
        v159 = v156 >> 2;
        v160 = ((unint64_t)(v156 - 4) >> 2) + 1;
        v161 = 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
        v162 = &v154[-v161];
        v158 = &v157[-v161];
        v163 = &v155[4 * v159 - 16];
        v164 = v154 - 16;
        v165 = v160 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v166 = *(_OWORD *)v164;
          *((_OWORD *)v163 - 1) = *((_OWORD *)v164 - 1);
          *(_OWORD *)v163 = v166;
          v163 -= 32;
          v164 -= 32;
          v165 -= 8;
        }
        while (v165);
        v154 = v162;
        if (v160 == (v160 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_187:
          v554 = v158;
          v555 = v157;
          v556 = &v155[0xAAAAAAAAAAAAAAACLL * (v151 >> 2)];
          if (v153)
          {
            operator delete(v153);
            v151 = a2[1] - *a2;
            v152 = 0xAAAAAAAAAAAAAAABLL * (v151 >> 2);
          }
          goto LABEL_189;
        }
      }
    }
    else
    {
      v158 = &v155[(v154 - v153) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v167 = *((_DWORD *)v154 - 1);
      v154 -= 4;
      *((_DWORD *)v158 - 1) = v167;
      v158 -= 4;
    }
    while (v154 != v153);
    goto LABEL_187;
  }
LABEL_189:
  v168 = v548;
  if (v550 - (_BYTE *)v548 >= v152)
    goto LABEL_211;
  if (v151 < 0)
    sub_2394189F8();
  v169 = v549;
  v170 = operator new(v152);
  v171 = v169 - v168;
  v172 = &v170[v169 - v168];
  v173 = v172;
  if (v169 != v168)
  {
    if (v171 < 8)
    {
      v174 = &v170[v169 - v168];
      goto LABEL_206;
    }
    v174 = &v170[v169 - v168];
    if ((unint64_t)(v168 - v170) >= 0x20)
    {
      if (v171 < 0x20)
      {
        v175 = 0;
        goto LABEL_201;
      }
      v175 = v171 & 0xFFFFFFFFFFFFFFE0;
      v176 = (__int128 *)(v169 - 16);
      v177 = &v170[v169 - 16 - v168];
      v178 = v171 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v179 = *v176;
        *(v177 - 1) = *(v176 - 1);
        *v177 = v179;
        v177 -= 2;
        v176 -= 2;
        v178 -= 32;
      }
      while (v178);
      if (v171 == v175)
        goto LABEL_208;
      if ((v171 & 0x18) != 0)
      {
LABEL_201:
        v174 = &v172[-(v171 & 0xFFFFFFFFFFFFFFF8)];
        v180 = &v169[-v175 - 8];
        v181 = v180 - v168;
        v182 = v175 - (v171 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v183 = *(_QWORD *)v180;
          v180 -= 8;
          *(_QWORD *)&v170[v181] = v183;
          v181 -= 8;
          v182 += 8;
        }
        while (v182);
        v169 -= v171 & 0xFFFFFFFFFFFFFFF8;
        if (v171 == (v171 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_208;
        goto LABEL_206;
      }
      v174 = &v172[-v175];
      v169 -= v175;
    }
LABEL_206:
    v184 = v174 - 1;
    do
    {
      v185 = *--v169;
      *v184-- = v185;
    }
    while (v169 != v168);
LABEL_208:
    v173 = v170;
  }
  v548 = v173;
  v549 = v172;
  v550 = &v170[v152];
  if (v168)
    operator delete(v168);
LABEL_211:
  v186 = v552 - (_BYTE *)v551;
  v187 = v555;
  if (v555 >= v556)
  {
    v189 = v554;
    v190 = (v555 - v554) >> 2;
    v191 = v190 + 1;
    if ((unint64_t)(v190 + 1) >> 62)
      sub_2394189F8();
    v192 = v556 - v554;
    if ((v556 - v554) >> 1 > v191)
      v191 = v192 >> 1;
    if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL)
      v193 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v193 = v191;
    if (v193)
    {
      if (v193 >> 62)
        sub_239418A80();
      v194 = operator new(4 * v193);
    }
    else
    {
      v194 = 0;
    }
    v195 = &v194[4 * v190];
    *(_DWORD *)v195 = v186 >> 2;
    v188 = v195 + 4;
    if (v187 != v189)
    {
      v196 = v187 - v189 - 4;
      if (v196 < 0x2C)
        goto LABEL_637;
      if ((unint64_t)(v189 - v194) < 0x20)
        goto LABEL_637;
      v197 = (v196 >> 2) + 1;
      v198 = 4 * (v197 & 0x7FFFFFFFFFFFFFF8);
      v199 = &v187[-v198];
      v195 -= v198;
      v200 = &v194[4 * v190 - 16];
      v201 = v187 - 16;
      v202 = v197 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v203 = *(_OWORD *)v201;
        *(v200 - 1) = *((_OWORD *)v201 - 1);
        *v200 = v203;
        v200 -= 2;
        v201 -= 32;
        v202 -= 8;
      }
      while (v202);
      v187 = v199;
      if (v197 != (v197 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_637:
        do
        {
          v204 = *((_DWORD *)v187 - 1);
          v187 -= 4;
          *((_DWORD *)v195 - 1) = v204;
          v195 -= 4;
        }
        while (v187 != v189);
      }
    }
    v554 = v195;
    v555 = v188;
    v556 = &v194[4 * v193];
    if (v189)
      operator delete(v189);
  }
  else
  {
    *(_DWORD *)v555 = v186 >> 2;
    v188 = v187 + 4;
  }
  v555 = v188;
  if (a2[1] != *a2)
  {
    v205 = 0;
    while (1)
    {
      v207 = v552;
      if (v552 < v553)
      {
        *(_DWORD *)v552 = v205;
        v208 = (uint64_t)(v207 + 4);
        goto LABEL_257;
      }
      v209 = (char *)v551;
      v210 = v552 - (_BYTE *)v551;
      v211 = (v552 - (_BYTE *)v551) >> 2;
      v212 = v211 + 1;
      if ((unint64_t)(v211 + 1) >> 62)
        sub_2394189F8();
      v213 = v553 - (_BYTE *)v551;
      if ((v553 - (_BYTE *)v551) >> 1 > v212)
        v212 = v213 >> 1;
      v214 = (unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v212;
      if (v214)
        break;
      v215 = 0;
      v216 = (char *)(4 * v211);
      *(_DWORD *)(4 * v211) = v205;
      v208 = 4 * v211 + 4;
      if (v207 != v209)
        goto LABEL_249;
LABEL_255:
      v551 = v216;
      v552 = (char *)v208;
      v553 = &v215[4 * v214];
      if (v209)
        operator delete(v209);
LABEL_257:
      v552 = (char *)v208;
      v226 = v549;
      if (v549 >= v550)
      {
        v228 = (char *)v548;
        v229 = v549 - (_BYTE *)v548;
        v230 = v549 - (_BYTE *)v548 + 1;
        if (v230 < 0)
          sub_2394189F8();
        v231 = v550 - (_BYTE *)v548;
        if (2 * (v550 - (_BYTE *)v548) > (unint64_t)v230)
          v230 = 2 * v231;
        if (v231 >= 0x3FFFFFFFFFFFFFFFLL)
          v232 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v232 = v230;
        if (v232)
        {
          v233 = operator new(v232);
          v234 = &v233[v229];
          v233[v229] = 50;
          v227 = (uint64_t)&v233[v229 + 1];
          if (v226 != v228)
            goto LABEL_267;
        }
        else
        {
          v233 = 0;
          v234 = (char *)(v549 - (_BYTE *)v548);
          *(_BYTE *)v229 = 50;
          v227 = v229 + 1;
          if (v226 != v228)
          {
LABEL_267:
            if (v229 >= 8 && (unint64_t)(v228 - v233) >= 0x20)
            {
              if (v229 >= 0x20)
              {
                v235 = v229 & 0xFFFFFFFFFFFFFFE0;
                v322 = &v233[v229 - 16];
                v323 = v226 - 16;
                v324 = v229 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v325 = *(_OWORD *)v323;
                  *(v322 - 1) = *((_OWORD *)v323 - 1);
                  *v322 = v325;
                  v322 -= 2;
                  v323 -= 32;
                  v324 -= 32;
                }
                while (v324);
                if (v229 == v235)
                  goto LABEL_407;
                if ((v229 & 0x18) != 0)
                  goto LABEL_400;
                v234 -= v235;
                v226 -= v235;
              }
              else
              {
                v235 = 0;
LABEL_400:
                v234 -= v229 & 0xFFFFFFFFFFFFFFF8;
                v326 = &v233[&v226[-v235] - v228 - 8];
                v327 = &v226[-v235 - 8];
                v328 = v235 - (v229 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v329 = *(_QWORD *)v327;
                  v327 -= 8;
                  *v326-- = v329;
                  v328 += 8;
                }
                while (v328);
                v226 -= v229 & 0xFFFFFFFFFFFFFFF8;
                if (v229 == (v229 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_407:
                  v226 = (char *)v548;
                  v548 = v233;
                  v549 = (char *)v227;
                  v550 = &v233[v232];
                  if (!v226)
                    goto LABEL_274;
LABEL_273:
                  operator delete(v226);
                  goto LABEL_274;
                }
              }
            }
            v330 = v234 - 1;
            do
            {
              v331 = *--v226;
              *v330-- = v331;
            }
            while (v226 != v228);
            goto LABEL_407;
          }
        }
        v548 = v234;
        v549 = (char *)v227;
        v550 = &v233[v232];
        if (v226)
          goto LABEL_273;
      }
      else
      {
        *v549 = 50;
        v227 = (uint64_t)(v226 + 1);
      }
LABEL_274:
      v549 = (char *)v227;
      v236 = (unsigned int **)((char *)__p + 24 * v205);
      v238 = *v236;
      v237 = v236[1];
      v538 = v237;
      while (v238 != v237)
      {
        v240 = *v238;
        v241 = v552;
        if (v552 < v553)
        {
          *(_DWORD *)v552 = v240;
          v242 = (uint64_t)(v241 + 4);
          goto LABEL_299;
        }
        v243 = (char *)v551;
        v244 = v552 - (_BYTE *)v551;
        v245 = (v552 - (_BYTE *)v551) >> 2;
        v246 = v245 + 1;
        if ((unint64_t)(v245 + 1) >> 62)
          sub_2394189F8();
        v247 = v553 - (_BYTE *)v551;
        if ((v553 - (_BYTE *)v551) >> 1 > v246)
          v246 = v247 >> 1;
        if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL)
          v248 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v248 = v246;
        if (v248)
        {
          if (v248 >> 62)
            sub_239418A80();
          v249 = (char *)operator new(4 * v248);
          v250 = (unsigned int *)&v249[4 * v245];
          *v250 = v240;
          v242 = (uint64_t)(v250 + 1);
          if (v241 == v243)
            goto LABEL_297;
LABEL_291:
          v251 = v241 - 4 - v243;
          if (v251 < 0x2C)
            goto LABEL_638;
          if ((unint64_t)(v241 - &v249[v244]) < 0x20)
            goto LABEL_638;
          v252 = (v251 >> 2) + 1;
          v253 = 4 * (v252 & 0x7FFFFFFFFFFFFFF8);
          v254 = &v241[-v253];
          v250 = (unsigned int *)((char *)v250 - v253);
          v255 = &v249[4 * v245 - 16];
          v256 = v241 - 16;
          v257 = v252 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v258 = *(_OWORD *)v256;
            *((_OWORD *)v255 - 1) = *((_OWORD *)v256 - 1);
            *(_OWORD *)v255 = v258;
            v255 -= 32;
            v256 -= 32;
            v257 -= 8;
          }
          while (v257);
          v241 = v254;
          if (v252 != (v252 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_638:
            do
            {
              v259 = *((_DWORD *)v241 - 1);
              v241 -= 4;
              *--v250 = v259;
            }
            while (v241 != v243);
          }
          goto LABEL_297;
        }
        v249 = 0;
        v250 = (unsigned int *)(4 * v245);
        *(_DWORD *)(4 * v245) = v240;
        v242 = 4 * v245 + 4;
        if (v241 != v243)
          goto LABEL_291;
LABEL_297:
        v551 = v250;
        v552 = (char *)v242;
        v553 = &v249[4 * v248];
        if (v243)
          operator delete(v243);
LABEL_299:
        v552 = (char *)v242;
        if (v240 >= v205)
          v260 = v205;
        else
          v260 = v240;
        if (v240 <= v205)
          v261 = v205;
        else
          v261 = v240;
        v262 = (char *)v542 + 24 * v260;
        v264 = (uint64_t **)(v262 + 8);
        v263 = (uint64_t *)*((_QWORD *)v262 + 1);
        v265 = (uint64_t **)(v262 + 8);
        v266 = (uint64_t **)(v262 + 8);
        if (v263)
        {
          while (1)
          {
            while (1)
            {
              v266 = (uint64_t **)v263;
              v267 = *((_DWORD *)v263 + 7);
              if (v261 >= v267)
                break;
              v263 = *v266;
              v265 = v266;
              if (!*v266)
                goto LABEL_312;
            }
            if (v267 >= v261)
              break;
            v263 = v266[1];
            if (!v263)
            {
              v265 = v266 + 1;
              goto LABEL_312;
            }
          }
          v268 = v266;
        }
        else
        {
LABEL_312:
          v268 = operator new(0x28uLL);
          v268[7] = v261;
          *(_QWORD *)v268 = 0;
          *((_QWORD *)v268 + 1) = 0;
          *((_QWORD *)v268 + 2) = v266;
          *v265 = (uint64_t *)v268;
          v269 = **(_QWORD **)v262;
          v270 = (uint64_t *)v268;
          if (v269)
          {
            *(_QWORD *)v262 = v269;
            v270 = *v265;
          }
          v271 = *v264;
          v15 = v270 == *v264;
          *((_BYTE *)v270 + 24) = v15;
          if (!v15)
          {
            do
            {
              v272 = v270[2];
              if (*(_BYTE *)(v272 + 24))
                break;
              v273 = *(uint64_t **)(v272 + 16);
              v274 = *v273;
              if (*v273 == v272)
              {
                v277 = v273[1];
                if (!v277 || (v278 = *(unsigned __int8 *)(v277 + 24), v275 = (_BYTE *)(v277 + 24), v278))
                {
                  if (*(uint64_t **)v272 == v270)
                  {
                    *(_BYTE *)(v272 + 24) = 1;
                    *((_BYTE *)v273 + 24) = 0;
                    v281 = *(_QWORD *)(v272 + 8);
                    *v273 = v281;
                    if (v281)
                      goto LABEL_329;
                  }
                  else
                  {
                    v279 = *(uint64_t **)(v272 + 8);
                    v280 = *v279;
                    *(_QWORD *)(v272 + 8) = *v279;
                    if (v280)
                    {
                      *(_QWORD *)(v280 + 16) = v272;
                      v273 = *(uint64_t **)(v272 + 16);
                    }
                    v279[2] = (uint64_t)v273;
                    *(_QWORD *)(*(_QWORD *)(v272 + 16) + 8 * (**(_QWORD **)(v272 + 16) != v272)) = v279;
                    *v279 = v272;
                    *(_QWORD *)(v272 + 16) = v279;
                    v273 = (uint64_t *)v279[2];
                    v272 = *v273;
                    *((_BYTE *)v279 + 24) = 1;
                    *((_BYTE *)v273 + 24) = 0;
                    v281 = *(_QWORD *)(v272 + 8);
                    *v273 = v281;
                    if (v281)
LABEL_329:
                      *(_QWORD *)(v281 + 16) = v273;
                  }
                  *(_QWORD *)(v272 + 16) = v273[2];
                  *(_QWORD *)(v273[2] + 8 * (*(_QWORD *)v273[2] != (_QWORD)v273)) = v272;
                  *(_QWORD *)(v272 + 8) = v273;
LABEL_336:
                  v273[2] = v272;
                  break;
                }
              }
              else if (!v274 || (v276 = *(unsigned __int8 *)(v274 + 24), v275 = (_BYTE *)(v274 + 24), v276))
              {
                if (*(uint64_t **)v272 == v270)
                {
                  v293 = v270[1];
                  *(_QWORD *)v272 = v293;
                  if (v293)
                  {
                    *(_QWORD *)(v293 + 16) = v272;
                    v273 = *(uint64_t **)(v272 + 16);
                  }
                  v270[2] = (uint64_t)v273;
                  *(_QWORD *)(*(_QWORD *)(v272 + 16) + 8 * (**(_QWORD **)(v272 + 16) != v272)) = v270;
                  v270[1] = v272;
                  *(_QWORD *)(v272 + 16) = v270;
                  v273 = (uint64_t *)v270[2];
                  *((_BYTE *)v270 + 24) = 1;
                  *((_BYTE *)v273 + 24) = 0;
                  v272 = v273[1];
                  v282 = *(uint64_t **)v272;
                  v273[1] = *(_QWORD *)v272;
                  if (v282)
LABEL_334:
                    v282[2] = (uint64_t)v273;
                }
                else
                {
                  *(_BYTE *)(v272 + 24) = 1;
                  *((_BYTE *)v273 + 24) = 0;
                  v272 = v273[1];
                  v282 = *(uint64_t **)v272;
                  v273[1] = *(_QWORD *)v272;
                  if (v282)
                    goto LABEL_334;
                }
                *(_QWORD *)(v272 + 16) = v273[2];
                *(_QWORD *)(v273[2] + 8 * (*(_QWORD *)v273[2] != (_QWORD)v273)) = v272;
                *(_QWORD *)v272 = v273;
                goto LABEL_336;
              }
              *(_BYTE *)(v272 + 24) = 1;
              v270 = v273;
              *((_BYTE *)v273 + 24) = v273 == v271;
              *v275 = 1;
            }
            while (v273 != v271);
          }
          ++*((_QWORD *)v262 + 2);
        }
        if (v268[9] == -1)
          v283 = 49;
        else
          v283 = 48;
        v284 = v549;
        if (v549 < v550)
        {
          *v549 = v283;
          v239 = (uint64_t)(v284 + 1);
          goto LABEL_276;
        }
        v285 = (char *)v548;
        v286 = v549 - (_BYTE *)v548;
        v287 = v549 - (_BYTE *)v548 + 1;
        if (v287 < 0)
          sub_2394189F8();
        v288 = v550 - (_BYTE *)v548;
        if (2 * (v550 - (_BYTE *)v548) > (unint64_t)v287)
          v287 = 2 * v288;
        if (v288 >= 0x3FFFFFFFFFFFFFFFLL)
          v289 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v289 = v287;
        if (v289)
        {
          v290 = operator new(v289);
          v291 = &v290[v286];
          v290[v286] = v283;
          v239 = (uint64_t)&v290[v286 + 1];
          if (v284 != v285)
            goto LABEL_350;
        }
        else
        {
          v290 = 0;
          v291 = (char *)(v549 - (_BYTE *)v548);
          *(_BYTE *)v286 = v283;
          v239 = v286 + 1;
          if (v284 != v285)
          {
LABEL_350:
            if (v286 >= 8 && (unint64_t)(v285 - v290) >= 0x20)
            {
              if (v286 >= 0x20)
              {
                v292 = v286 & 0xFFFFFFFFFFFFFFE0;
                v294 = &v290[v286 - 16];
                v295 = v284 - 16;
                v296 = v286 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v297 = *(_OWORD *)v295;
                  *(v294 - 1) = *((_OWORD *)v295 - 1);
                  *v294 = v297;
                  v294 -= 2;
                  v295 -= 32;
                  v296 -= 32;
                }
                while (v296);
                if (v286 == v292)
                  goto LABEL_374;
                if ((v286 & 0x18) != 0)
                  goto LABEL_365;
                v291 -= v292;
                v284 -= v292;
              }
              else
              {
                v292 = 0;
LABEL_365:
                v291 -= v286 & 0xFFFFFFFFFFFFFFF8;
                v298 = &v290[&v284[-v292] - v285 - 8];
                v299 = &v284[-v292 - 8];
                v300 = v292 - (v286 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v301 = *(_QWORD *)v299;
                  v299 -= 8;
                  *v298-- = v301;
                  v300 += 8;
                }
                while (v300);
                v284 -= v286 & 0xFFFFFFFFFFFFFFF8;
                if (v286 == (v286 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_374:
                  v284 = (char *)v548;
                  v548 = v290;
                  v549 = (char *)v239;
                  v550 = &v290[v289];
                  if (!v284)
                    goto LABEL_276;
LABEL_375:
                  operator delete(v284);
                  goto LABEL_276;
                }
              }
            }
            v302 = v291 - 1;
            do
            {
              v303 = *--v284;
              *v302-- = v303;
            }
            while (v284 != v285);
            goto LABEL_374;
          }
        }
        v548 = v291;
        v549 = (char *)v239;
        v550 = &v290[v289];
        if (v284)
          goto LABEL_375;
LABEL_276:
        v549 = (char *)v239;
        ++v238;
        v237 = v538;
      }
      v304 = v552 - (_BYTE *)v551;
      v305 = v555;
      if (v555 < v556)
      {
        *(_DWORD *)v555 = v304 >> 2;
        v206 = (uint64_t)(v305 + 4);
        goto LABEL_235;
      }
      v306 = v554;
      v307 = (v555 - v554) >> 2;
      v308 = v307 + 1;
      if ((unint64_t)(v307 + 1) >> 62)
        sub_2394189F8();
      v309 = v556 - v554;
      if ((v556 - v554) >> 1 > v308)
        v308 = v309 >> 1;
      if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFFCLL)
        v310 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v310 = v308;
      if (!v310)
      {
        v311 = 0;
        v312 = (char *)(4 * v307);
        *(_DWORD *)(4 * v307) = v304 >> 2;
        v206 = 4 * v307 + 4;
        if (v305 == v306)
          goto LABEL_394;
LABEL_388:
        v313 = v305 - 4 - v306;
        if (v313 < 0x2C)
          goto LABEL_639;
        if ((unint64_t)(v306 - v311) < 0x20)
          goto LABEL_639;
        v314 = (v313 >> 2) + 1;
        v315 = 4 * (v314 & 0x7FFFFFFFFFFFFFF8);
        v316 = &v305[-v315];
        v312 -= v315;
        v317 = &v311[4 * v307 - 16];
        v318 = v305 - 16;
        v319 = v314 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v320 = *(_OWORD *)v318;
          *(v317 - 1) = *((_OWORD *)v318 - 1);
          *v317 = v320;
          v317 -= 2;
          v318 -= 32;
          v319 -= 8;
        }
        while (v319);
        v305 = v316;
        if (v314 != (v314 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_639:
          do
          {
            v321 = *((_DWORD *)v305 - 1);
            v305 -= 4;
            *((_DWORD *)v312 - 1) = v321;
            v312 -= 4;
          }
          while (v305 != v306);
        }
        goto LABEL_394;
      }
      if (v310 >> 62)
        sub_239418A80();
      v311 = operator new(4 * v310);
      v312 = &v311[4 * v307];
      *(_DWORD *)v312 = v304 >> 2;
      v206 = (uint64_t)(v312 + 4);
      if (v305 != v306)
        goto LABEL_388;
LABEL_394:
      v554 = v312;
      v555 = (char *)v206;
      v556 = &v311[4 * v310];
      if (v306)
        operator delete(v306);
LABEL_235:
      v555 = (char *)v206;
      if (++v205 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v537[1] - *v537) >> 2))
        goto LABEL_409;
    }
    if (v214 >> 62)
      sub_239418A80();
    v215 = (char *)operator new(4 * v214);
    v216 = &v215[4 * v211];
    *(_DWORD *)v216 = v205;
    v208 = (uint64_t)(v216 + 4);
    if (v207 == v209)
      goto LABEL_255;
LABEL_249:
    v217 = v207 - 4 - v209;
    if (v217 < 0x2C)
      goto LABEL_640;
    if ((unint64_t)(v207 - &v215[v210]) < 0x20)
      goto LABEL_640;
    v218 = (v217 >> 2) + 1;
    v219 = 4 * (v218 & 0x7FFFFFFFFFFFFFF8);
    v220 = &v207[-v219];
    v216 -= v219;
    v221 = &v215[4 * v211 - 16];
    v222 = v207 - 16;
    v223 = v218 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v224 = *(_OWORD *)v222;
      *((_OWORD *)v221 - 1) = *((_OWORD *)v222 - 1);
      *(_OWORD *)v221 = v224;
      v221 -= 32;
      v222 -= 32;
      v223 -= 8;
    }
    while (v223);
    v207 = v220;
    if (v218 != (v218 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_640:
      do
      {
        v225 = *((_DWORD *)v207 - 1);
        v207 -= 4;
        *((_DWORD *)v216 - 1) = v225;
        v216 -= 4;
      }
      while (v207 != v209);
    }
    goto LABEL_255;
  }
LABEL_409:
  v332 = (char *)v542;
  if (v542)
  {
    v333 = v543;
    v334 = v542;
    if (v543 != v542)
    {
      do
      {
        v335 = v333 - 24;
        sub_239421038((uint64_t)(v333 - 24), *((_QWORD **)v333 - 2));
        v333 = v335;
      }
      while (v335 != v332);
      v334 = v542;
    }
    v543 = v332;
    operator delete(v334);
  }
  v336 = __p;
  if (__p)
  {
    v337 = v546;
    v338 = __p;
    if (v546 != __p)
    {
      v339 = v546;
      do
      {
        v341 = (void *)*((_QWORD *)v339 - 3);
        v339 -= 24;
        v340 = v341;
        if (v341)
        {
          *((_QWORD *)v337 - 2) = v340;
          operator delete(v340);
        }
        v337 = v339;
      }
      while (v339 != v336);
      v338 = __p;
    }
    v546 = v336;
    operator delete(v338);
  }
  v342 = v549;
  v343 = v548;
  v344 = v549 - (_BYTE *)v548;
  if (v550 - (_BYTE *)v548 > (unint64_t)(v549 - (_BYTE *)v548))
  {
    if (v549 == v548)
    {
      v346 = (char *)(v549 - (_BYTE *)v548);
      v345 = (char *)(v549 - (_BYTE *)v548);
      goto LABEL_441;
    }
    v345 = (char *)operator new(v549 - (_BYTE *)v548);
    v346 = &v345[v344];
    if (v344 < 8)
    {
      v347 = &v345[v344];
      goto LABEL_439;
    }
    v347 = &v345[v344];
    if ((unint64_t)(v343 - v345) >= 0x20)
    {
      if (v344 < 0x20)
      {
        v348 = 0;
        goto LABEL_434;
      }
      v348 = v344 & 0xFFFFFFFFFFFFFFE0;
      v349 = (__int128 *)(v342 - 16);
      v350 = &v345[v342 - 16 - v343];
      v351 = v344 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v352 = *v349;
        *((_OWORD *)v350 - 1) = *(v349 - 1);
        *(_OWORD *)v350 = v352;
        v350 -= 32;
        v349 -= 2;
        v351 -= 32;
      }
      while (v351);
      if (v344 == v348)
        goto LABEL_441;
      if ((v344 & 0x18) != 0)
      {
LABEL_434:
        v347 = &v346[-(v344 & 0xFFFFFFFFFFFFFFF8)];
        v353 = &v342[-v348 - 8];
        v354 = v353 - v343;
        v355 = v348 - (v344 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v356 = *(_QWORD *)v353;
          v353 -= 8;
          *(_QWORD *)&v345[v354] = v356;
          v354 -= 8;
          v355 += 8;
        }
        while (v355);
        v342 -= v344 & 0xFFFFFFFFFFFFFFF8;
        if (v344 != (v344 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_439;
LABEL_441:
        v548 = v345;
        v549 = v346;
        v550 = v346;
        if (v343)
          operator delete(v343);
        goto LABEL_443;
      }
      v347 = &v346[-v348];
      v342 -= v348;
    }
LABEL_439:
    v357 = v347 - 1;
    do
    {
      v358 = *--v342;
      *v357-- = v358;
    }
    while (v342 != v343);
    goto LABEL_441;
  }
LABEL_443:
  sub_23950DB64((uint64_t)&v554);
  sub_23950DB64((uint64_t)&v551);
  v359 = v555 - v554;
  v360 = objc_msgSend(v536, "newBufferWithBytes:length:options:");
  v361 = *(void **)(a4 + 8);
  *(_QWORD *)(a4 + 8) = v360;

  v363 = *(char **)(v534 + 8);
  v362 = *(_QWORD *)(v534 + 16);
  if ((unint64_t)v363 < v362)
  {
    *(_QWORD *)v363 = v359;
    v364 = (uint64_t)(v363 + 8);
    goto LABEL_464;
  }
  v365 = *(uint64_t **)v534;
  v366 = (uint64_t)&v363[-*(_QWORD *)v534];
  v367 = v366 >> 3;
  v368 = (v366 >> 3) + 1;
  if (v368 >> 61)
    sub_2394189F8();
  v369 = v362 - (_QWORD)v365;
  if (v369 >> 2 > v368)
    v368 = v369 >> 2;
  if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF8)
    v370 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v370 = v368;
  if (v370)
  {
    if (v370 >> 61)
      sub_239418A80();
    v371 = operator new(8 * v370);
    v372 = (int64_t *)&v371[8 * v367];
    v373 = &v371[8 * v370];
    *v372 = v359;
    v364 = (uint64_t)(v372 + 1);
    v374 = v363 - (char *)v365;
    if (v363 == (char *)v365)
      goto LABEL_462;
    goto LABEL_456;
  }
  v371 = 0;
  v372 = (int64_t *)(8 * v367);
  v373 = 0;
  *(_QWORD *)(8 * v367) = v359;
  v364 = 8 * v367 + 8;
  v374 = v363 - (char *)v365;
  if (v363 != (char *)v365)
  {
LABEL_456:
    v375 = v374 - 8;
    if (v375 < 0x58)
      goto LABEL_641;
    if ((unint64_t)(v363 - &v371[v366]) < 0x20)
      goto LABEL_641;
    v376 = (v375 >> 3) + 1;
    v377 = 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
    v378 = &v363[-v377];
    v372 = (int64_t *)((char *)v372 - v377);
    v379 = &v371[8 * v367 - 16];
    v380 = v363 - 16;
    v381 = v376 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v382 = *(_OWORD *)v380;
      *(v379 - 1) = *((_OWORD *)v380 - 1);
      *v379 = v382;
      v379 -= 2;
      v380 -= 32;
      v381 -= 4;
    }
    while (v381);
    v363 = v378;
    if (v376 != (v376 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_641:
      do
      {
        v383 = *((_QWORD *)v363 - 1);
        v363 -= 8;
        *--v372 = v383;
      }
      while (v363 != (char *)v365);
    }
  }
LABEL_462:
  *(_QWORD *)v534 = v372;
  *(_QWORD *)(v534 + 8) = v364;
  *(_QWORD *)(v534 + 16) = v373;
  if (v365)
    operator delete(v365);
LABEL_464:
  *(_QWORD *)(v534 + 8) = v364;
  v384 = v552 - (_BYTE *)v551;
  v385 = objc_msgSend(v536, "newBufferWithBytes:length:options:");
  v386 = *(void **)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v385;

  v388 = *(char **)(v534 + 8);
  v387 = *(_QWORD *)(v534 + 16);
  if ((unint64_t)v388 < v387)
  {
    *(_QWORD *)v388 = v384;
    v389 = (uint64_t)(v388 + 8);
    goto LABEL_485;
  }
  v390 = *(char **)v534;
  v391 = (uint64_t)&v388[-*(_QWORD *)v534];
  v392 = v391 >> 3;
  v393 = (v391 >> 3) + 1;
  if (v393 >> 61)
    sub_2394189F8();
  v394 = v387 - (_QWORD)v390;
  if (v394 >> 2 > v393)
    v393 = v394 >> 2;
  if ((unint64_t)v394 >= 0x7FFFFFFFFFFFFFF8)
    v395 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v395 = v393;
  if (v395)
  {
    if (v395 >> 61)
      sub_239418A80();
    v396 = operator new(8 * v395);
    v397 = (int64_t *)&v396[8 * v392];
    v398 = &v396[8 * v395];
    *v397 = v384;
    v389 = (uint64_t)(v397 + 1);
    v399 = v388 - v390;
    if (v388 == v390)
      goto LABEL_483;
    goto LABEL_477;
  }
  v396 = 0;
  v397 = (int64_t *)(8 * v392);
  v398 = 0;
  *(_QWORD *)(8 * v392) = v384;
  v389 = 8 * v392 + 8;
  v399 = v388 - v390;
  if (v388 != v390)
  {
LABEL_477:
    v400 = v399 - 8;
    if (v400 < 0x58)
      goto LABEL_642;
    if ((unint64_t)(v388 - &v396[v391]) < 0x20)
      goto LABEL_642;
    v401 = (v400 >> 3) + 1;
    v402 = 8 * (v401 & 0x3FFFFFFFFFFFFFFCLL);
    v403 = &v388[-v402];
    v397 = (int64_t *)((char *)v397 - v402);
    v404 = &v396[8 * v392 - 16];
    v405 = v388 - 16;
    v406 = v401 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v407 = *(_OWORD *)v405;
      *(v404 - 1) = *((_OWORD *)v405 - 1);
      *v404 = v407;
      v404 -= 2;
      v405 -= 32;
      v406 -= 4;
    }
    while (v406);
    v388 = v403;
    if (v401 != (v401 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_642:
      do
      {
        v408 = *((_QWORD *)v388 - 1);
        v388 -= 8;
        *--v397 = v408;
      }
      while (v388 != v390);
    }
  }
LABEL_483:
  *(_QWORD *)v534 = v397;
  *(_QWORD *)(v534 + 8) = v389;
  *(_QWORD *)(v534 + 16) = v398;
  if (v390)
    operator delete(v390);
LABEL_485:
  *(_QWORD *)(v534 + 8) = v389;
  v409 = v549 - (_BYTE *)v548;
  v410 = objc_msgSend(v536, "newBufferWithBytes:length:options:");
  v411 = *(void **)(a4 + 32);
  *(_QWORD *)(a4 + 32) = v410;

  v413 = *(char **)(v534 + 8);
  v412 = *(_QWORD *)(v534 + 16);
  if ((unint64_t)v413 < v412)
  {
    *(_QWORD *)v413 = v409;
    v414 = (uint64_t)(v413 + 8);
    goto LABEL_506;
  }
  v415 = *(char **)v534;
  v416 = (uint64_t)&v413[-*(_QWORD *)v534];
  v417 = v416 >> 3;
  v418 = (v416 >> 3) + 1;
  if (v418 >> 61)
    sub_2394189F8();
  v419 = v412 - (_QWORD)v415;
  if (v419 >> 2 > v418)
    v418 = v419 >> 2;
  if ((unint64_t)v419 >= 0x7FFFFFFFFFFFFFF8)
    v420 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v420 = v418;
  if (v420)
  {
    if (v420 >> 61)
      sub_239418A80();
    v421 = operator new(8 * v420);
    v422 = &v421[8 * v417];
    v423 = &v421[8 * v420];
    *v422 = v409;
    v414 = (uint64_t)(v422 + 1);
    v424 = v413 - v415;
    if (v413 == v415)
      goto LABEL_504;
    goto LABEL_498;
  }
  v421 = 0;
  v422 = (_QWORD *)(8 * v417);
  v423 = 0;
  *(_QWORD *)(8 * v417) = v409;
  v414 = 8 * v417 + 8;
  v424 = v413 - v415;
  if (v413 != v415)
  {
LABEL_498:
    v425 = v424 - 8;
    if (v425 < 0x58)
      goto LABEL_643;
    if ((unint64_t)(v413 - &v421[v416]) < 0x20)
      goto LABEL_643;
    v426 = (v425 >> 3) + 1;
    v427 = 8 * (v426 & 0x3FFFFFFFFFFFFFFCLL);
    v428 = &v413[-v427];
    v422 = (_QWORD *)((char *)v422 - v427);
    v429 = &v421[8 * v417 - 16];
    v430 = v413 - 16;
    v431 = v426 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v432 = *(_OWORD *)v430;
      *(v429 - 1) = *((_OWORD *)v430 - 1);
      *v429 = v432;
      v429 -= 2;
      v430 -= 32;
      v431 -= 4;
    }
    while (v431);
    v413 = v428;
    if (v426 != (v426 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_643:
      do
      {
        v433 = *((_QWORD *)v413 - 1);
        v413 -= 8;
        *--v422 = v433;
      }
      while (v413 != v415);
    }
  }
LABEL_504:
  *(_QWORD *)v534 = v422;
  *(_QWORD *)(v534 + 8) = v414;
  *(_QWORD *)(v534 + 16) = v423;
  if (v415)
    operator delete(v415);
LABEL_506:
  *(_QWORD *)(v534 + 8) = v414;
  v434 = v537[1] - *v537;
  v435 = objc_msgSend(v536, "newBufferWithLength:options:", v434, 32);
  v436 = *(void **)(a4 + 48);
  *(_QWORD *)(a4 + 48) = v435;

  v438 = *(uint64_t **)(v534 + 8);
  v437 = *(_QWORD *)(v534 + 16);
  if ((unint64_t)v438 < v437)
  {
    *v438 = v434;
    v439 = (uint64_t)(v438 + 1);
    goto LABEL_527;
  }
  v440 = *(uint64_t **)v534;
  v441 = (uint64_t)v438 - *(_QWORD *)v534;
  v442 = v441 >> 3;
  v443 = (v441 >> 3) + 1;
  if (v443 >> 61)
    sub_2394189F8();
  v444 = v437 - (_QWORD)v440;
  if (v444 >> 2 > v443)
    v443 = v444 >> 2;
  if ((unint64_t)v444 >= 0x7FFFFFFFFFFFFFF8)
    v445 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v445 = v443;
  if (v445)
  {
    if (v445 >> 61)
      sub_239418A80();
    v446 = operator new(8 * v445);
    v447 = (uint64_t *)&v446[8 * v442];
    v448 = &v446[8 * v445];
    *v447 = v434;
    v439 = (uint64_t)(v447 + 1);
    v449 = (char *)v438 - (char *)v440;
    if (v438 == v440)
      goto LABEL_525;
    goto LABEL_519;
  }
  v446 = 0;
  v447 = (uint64_t *)(8 * v442);
  v448 = 0;
  *(_QWORD *)(8 * v442) = v434;
  v439 = 8 * v442 + 8;
  v449 = (char *)v438 - (char *)v440;
  if (v438 != v440)
  {
LABEL_519:
    v450 = v449 - 8;
    if (v450 < 0x58)
      goto LABEL_644;
    if ((unint64_t)((char *)v438 - &v446[v441]) < 0x20)
      goto LABEL_644;
    v451 = (v450 >> 3) + 1;
    v452 = 8 * (v451 & 0x3FFFFFFFFFFFFFFCLL);
    v453 = &v438[v452 / 0xFFFFFFFFFFFFFFF8];
    v447 = (uint64_t *)((char *)v447 - v452);
    v454 = &v446[8 * v442 - 16];
    v455 = v438 - 2;
    v456 = v451 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v457 = *(_OWORD *)v455;
      *(v454 - 1) = *((_OWORD *)v455 - 1);
      *v454 = v457;
      v454 -= 2;
      v455 -= 4;
      v456 -= 4;
    }
    while (v456);
    v438 = v453;
    if (v451 != (v451 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_644:
      do
      {
        v458 = *--v438;
        *--v447 = v458;
      }
      while (v438 != v440);
    }
  }
LABEL_525:
  *(_QWORD *)v534 = v447;
  *(_QWORD *)(v534 + 8) = v439;
  *(_QWORD *)(v534 + 16) = v448;
  if (v440)
    operator delete(v440);
LABEL_527:
  *(_QWORD *)(v534 + 8) = v439;
  v459 = 0xAAAAAAAAAAAAAAACLL * (v434 >> 2);
  v460 = objc_msgSend(v536, "newBufferWithLength:options:", v459, 32);
  v461 = *(void **)(a4 + 56);
  *(_QWORD *)(a4 + 56) = v460;

  v463 = *(unint64_t **)(v534 + 8);
  v462 = *(_QWORD *)(v534 + 16);
  if ((unint64_t)v463 < v462)
  {
    *v463 = v459;
    v464 = (uint64_t)(v463 + 1);
    goto LABEL_548;
  }
  v465 = *(unint64_t **)v534;
  v466 = (uint64_t)v463 - *(_QWORD *)v534;
  v467 = v466 >> 3;
  v468 = (v466 >> 3) + 1;
  if (v468 >> 61)
    sub_2394189F8();
  v469 = v462 - (_QWORD)v465;
  if (v469 >> 2 > v468)
    v468 = v469 >> 2;
  if ((unint64_t)v469 >= 0x7FFFFFFFFFFFFFF8)
    v470 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v470 = v468;
  if (v470)
  {
    if (v470 >> 61)
      sub_239418A80();
    v471 = operator new(8 * v470);
    v472 = (unint64_t *)&v471[8 * v467];
    v473 = &v471[8 * v470];
    *v472 = v459;
    v464 = (uint64_t)(v472 + 1);
    v474 = (char *)v463 - (char *)v465;
    if (v463 == v465)
      goto LABEL_546;
    goto LABEL_540;
  }
  v471 = 0;
  v472 = (unint64_t *)(8 * v467);
  v473 = 0;
  *(_QWORD *)(8 * v467) = v459;
  v464 = 8 * v467 + 8;
  v474 = (char *)v463 - (char *)v465;
  if (v463 != v465)
  {
LABEL_540:
    v475 = v474 - 8;
    if (v475 < 0x58)
      goto LABEL_645;
    if ((unint64_t)((char *)v463 - v471 - v466) < 0x20)
      goto LABEL_645;
    v476 = (v475 >> 3) + 1;
    v477 = 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
    v478 = &v463[v477 / 0xFFFFFFFFFFFFFFF8];
    v472 = (unint64_t *)((char *)v472 - v477);
    v479 = &v471[8 * v467 - 16];
    v480 = v463 - 2;
    v481 = v476 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v482 = *(_OWORD *)v480;
      *(v479 - 1) = *((_OWORD *)v480 - 1);
      *v479 = v482;
      v479 -= 2;
      v480 -= 4;
      v481 -= 4;
    }
    while (v481);
    v463 = v478;
    if (v476 != (v476 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_645:
      do
      {
        v483 = *--v463;
        *--v472 = v483;
      }
      while (v463 != v465);
    }
  }
LABEL_546:
  *(_QWORD *)v534 = v472;
  *(_QWORD *)(v534 + 8) = v464;
  *(_QWORD *)(v534 + 16) = v473;
  if (v465)
    operator delete(v465);
LABEL_548:
  *(_QWORD *)(v534 + 8) = v464;
  v484 = objc_msgSend(v536, "newBufferWithLength:options:", v434, 32);
  v485 = *(void **)(a4 + 64);
  *(_QWORD *)(a4 + 64) = v484;

  v487 = *(uint64_t **)(v534 + 8);
  v486 = *(_QWORD *)(v534 + 16);
  if ((unint64_t)v487 < v486)
  {
    *v487 = v434;
    v488 = (uint64_t)(v487 + 1);
    goto LABEL_569;
  }
  v489 = *(uint64_t **)v534;
  v490 = (uint64_t)v487 - *(_QWORD *)v534;
  v491 = v490 >> 3;
  v492 = (v490 >> 3) + 1;
  if (v492 >> 61)
    sub_2394189F8();
  v493 = v486 - (_QWORD)v489;
  if (v493 >> 2 > v492)
    v492 = v493 >> 2;
  if ((unint64_t)v493 >= 0x7FFFFFFFFFFFFFF8)
    v494 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v494 = v492;
  if (v494)
  {
    if (v494 >> 61)
      sub_239418A80();
    v495 = operator new(8 * v494);
    v496 = (uint64_t *)&v495[8 * v491];
    v497 = &v495[8 * v494];
    *v496 = v434;
    v488 = (uint64_t)(v496 + 1);
    v498 = (char *)v487 - (char *)v489;
    if (v487 == v489)
      goto LABEL_567;
    goto LABEL_561;
  }
  v495 = 0;
  v496 = (uint64_t *)(8 * v491);
  v497 = 0;
  *(_QWORD *)(8 * v491) = v434;
  v488 = 8 * v491 + 8;
  v498 = (char *)v487 - (char *)v489;
  if (v487 != v489)
  {
LABEL_561:
    v499 = v498 - 8;
    if (v499 < 0x58)
      goto LABEL_646;
    if ((unint64_t)((char *)v487 - &v495[v490]) < 0x20)
      goto LABEL_646;
    v500 = (v499 >> 3) + 1;
    v501 = 8 * (v500 & 0x3FFFFFFFFFFFFFFCLL);
    v502 = &v487[v501 / 0xFFFFFFFFFFFFFFF8];
    v496 = (uint64_t *)((char *)v496 - v501);
    v503 = &v495[8 * v491 - 16];
    v504 = v487 - 2;
    v505 = v500 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v506 = *(_OWORD *)v504;
      *(v503 - 1) = *((_OWORD *)v504 - 1);
      *v503 = v506;
      v503 -= 2;
      v504 -= 4;
      v505 -= 4;
    }
    while (v505);
    v487 = v502;
    if (v500 != (v500 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_646:
      do
      {
        v507 = *--v487;
        *--v496 = v507;
      }
      while (v487 != v489);
    }
  }
LABEL_567:
  *(_QWORD *)v534 = v496;
  *(_QWORD *)(v534 + 8) = v488;
  *(_QWORD *)(v534 + 16) = v497;
  if (v489)
    operator delete(v489);
LABEL_569:
  *(_QWORD *)(v534 + 8) = v488;
  v508 = objc_msgSend(v536, "newBufferWithLength:options:", v434, 0);
  v509 = *(void **)(a4 + 72);
  *(_QWORD *)(a4 + 72) = v508;

  v511 = *(uint64_t **)(v534 + 8);
  v510 = *(_QWORD *)(v534 + 16);
  if ((unint64_t)v511 < v510)
  {
    *v511 = v434;
    v512 = (uint64_t)(v511 + 1);
    goto LABEL_590;
  }
  v513 = *(uint64_t **)v534;
  v514 = (uint64_t)v511 - *(_QWORD *)v534;
  v515 = v514 >> 3;
  v516 = (v514 >> 3) + 1;
  if (v516 >> 61)
    sub_2394189F8();
  v517 = v510 - (_QWORD)v513;
  if (v517 >> 2 > v516)
    v516 = v517 >> 2;
  if ((unint64_t)v517 >= 0x7FFFFFFFFFFFFFF8)
    v518 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v518 = v516;
  if (v518)
  {
    if (v518 >> 61)
      sub_239418A80();
    v519 = operator new(8 * v518);
    v520 = (uint64_t *)&v519[8 * v515];
    v521 = &v519[8 * v518];
    *v520 = v434;
    v512 = (uint64_t)(v520 + 1);
    v522 = (char *)v511 - (char *)v513;
    if (v511 == v513)
      goto LABEL_588;
    goto LABEL_582;
  }
  v519 = 0;
  v520 = (uint64_t *)(8 * v515);
  v521 = 0;
  *(_QWORD *)(8 * v515) = v434;
  v512 = 8 * v515 + 8;
  v522 = (char *)v511 - (char *)v513;
  if (v511 != v513)
  {
LABEL_582:
    v523 = v522 - 8;
    if (v523 < 0x58)
      goto LABEL_647;
    if ((unint64_t)((char *)v511 - v519 - v514) < 0x20)
      goto LABEL_647;
    v524 = (v523 >> 3) + 1;
    v525 = 8 * (v524 & 0x3FFFFFFFFFFFFFFCLL);
    v526 = &v511[v525 / 0xFFFFFFFFFFFFFFF8];
    v520 = (uint64_t *)((char *)v520 - v525);
    v527 = &v519[8 * v515 - 16];
    v528 = v511 - 2;
    v529 = v524 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v530 = *(_OWORD *)v528;
      *(v527 - 1) = *((_OWORD *)v528 - 1);
      *v527 = v530;
      v527 -= 2;
      v528 -= 4;
      v529 -= 4;
    }
    while (v529);
    v511 = v526;
    if (v524 != (v524 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_647:
      do
      {
        v531 = *--v511;
        *--v520 = v531;
      }
      while (v511 != v513);
    }
  }
LABEL_588:
  *(_QWORD *)v534 = v520;
  *(_QWORD *)(v534 + 8) = v512;
  *(_QWORD *)(v534 + 16) = v521;
  if (v513)
    operator delete(v513);
LABEL_590:
  *(_QWORD *)(v534 + 8) = v512;

  if (v548)
  {
    v549 = (char *)v548;
    operator delete(v548);
  }
  if (v551)
  {
    v552 = (char *)v551;
    operator delete(v551);
  }
  if (v554)
  {
    v555 = v554;
    operator delete(v554);
  }
  return 1;
}

void sub_23950D994(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23950CE78);
}

void sub_23950D9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;
  void *v30;
  void *v31;

  if (__p)
  {
    operator delete(__p);

    v29 = a23;
    if (!a23)
    {
LABEL_3:
      v30 = a26;
      if (!a26)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {

    v29 = a23;
    if (!a23)
      goto LABEL_3;
  }
  operator delete(v29);
  v30 = a26;
  if (!a26)
  {
LABEL_4:
    v31 = *(void **)(v27 - 112);
    if (!v31)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v30);
  v31 = *(void **)(v27 - 112);
  if (!v31)
LABEL_5:
    _Unwind_Resume(a1);
LABEL_9:
  *(_QWORD *)(v27 - 104) = v31;
  operator delete(v31);
  _Unwind_Resume(a1);
}

id *sub_23950DAF4(id *a1)
{

  return a1;
}

void sub_23950DB64(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;

  v1 = *(_BYTE **)(a1 + 8);
  v2 = *(_BYTE **)a1;
  v3 = (uint64_t)&v1[-*(_QWORD *)a1];
  v4 = v3 >> 2;
  if (v3 >> 2 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2))
  {
    v6 = v1 - v2;
    if (v1 == v2)
    {
      v8 = 4 * v4;
      v9 = 4 * v4;
    }
    else
    {
      if (v3 < 0)
        sub_239418A80();
      v7 = (char *)operator new((size_t)&v1[-*(_QWORD *)a1]);
      v8 = (uint64_t)&v7[4 * v4];
      if ((unint64_t)(v6 - 4) >= 0x2C)
      {
        v9 = (uint64_t)&v7[4 * v4];
        if ((unint64_t)(&v1[-v3] - v7) >= 0x20)
        {
          v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
          v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
          v12 = &v1[-v11];
          v9 = v8 - v11;
          v13 = &v7[4 * v4 - 16];
          v14 = (__int128 *)(v1 - 16);
          v15 = v10 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v16 = *v14;
            *((_OWORD *)v13 - 1) = *(v14 - 1);
            *(_OWORD *)v13 = v16;
            v13 -= 32;
            v14 -= 2;
            v15 -= 8;
          }
          while (v15);
          v1 = v12;
          if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_12;
        }
      }
      else
      {
        v9 = (uint64_t)&v7[4 * v4];
      }
      do
      {
        v17 = *((_DWORD *)v1 - 1);
        v1 -= 4;
        *(_DWORD *)(v9 - 4) = v17;
        v9 -= 4;
      }
      while (v1 != v2);
    }
LABEL_12:
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    if (v2)
      operator delete(v2);
  }
}

uint64_t sub_23950DC8C(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9, _DWORD *a10, int a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  float64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  __int128 v31;
  char *v32;
  float64_t v33;
  int64_t v34;
  char *v35;
  char *v36;
  char *v37;
  _BYTE *v38;
  int32x2_t *v39;
  int32x2_t v40;
  int32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float *v57;
  float v58;
  float v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  float v65;
  float v66;
  float v67;
  float64_t v68;
  double v69;
  double v70;
  float v71;
  float v72;
  float64x2_t v73;
  unint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  unint64_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  void *v98;
  id v99;
  _QWORD *v100;
  _QWORD *v101;
  void *v102;
  void *v103;
  id v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  void *v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char v119;
  int *v120;
  void **v121;
  __int128 *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  id v126;
  void *v127;
  void *v128;
  void *v129;
  int8x8_t v130;
  uint8x8_t v131;
  uint64_t v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  int8x8_t v140;
  uint8x8_t v141;
  uint64_t v142;
  uint64_t **v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  void *v152;
  void *v153;
  void *v154;
  unsigned int v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  const char *v159;
  size_t v160;
  std::string::size_type v161;
  std::string *p_dst;
  const char *v163;
  const std::string::value_type *v164;
  char v165;
  void *v166;
  uint64_t v167;
  std::string *v168;
  std::string *v169;
  void *v170;
  int v171;
  _QWORD *v172;
  _QWORD *v173;
  void *v174;
  void *v175;
  _QWORD *v176;
  _QWORD *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  _QWORD *v181;
  void *v182;
  char *v183;
  char *v184;
  void *v185;
  char *v186;
  void *v187;
  void *v188;
  uint64_t v190;
  std::string::value_type *__s;
  unint64_t v193;
  void *v194;
  uint64_t v196;
  uint64_t v197;
  int32x2_t v198;
  id v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  void *v203;
  uint64_t v206;
  __int128 v207;
  char v208;
  id v209;
  size_t __n[2];
  size_t __na;
  std::string __dst;
  _QWORD v215[3];
  _QWORD v216[3];
  void *v217;
  void *v218;
  uint64_t v219;
  void *v220;
  void *v221;
  uint64_t v222;
  _QWORD v223[4];
  id v224;
  id v225;
  id v226;
  id v227;
  id v228;
  void *v229;
  _QWORD *v230;
  unint64_t v231;
  void *v232;
  _QWORD *v233;
  unint64_t v234;
  void *v235;
  char *v236;
  char *v237;
  __int128 v238;
  __int128 v239;
  int v240;
  void *v241;
  char *v242;
  unint64_t v243;
  void *v244;
  unint64_t v245;
  unint64_t v246;
  _QWORD v247[3];
  _QWORD *v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  uint64_t v253;
  char v254;
  _BYTE v255[24];
  _BYTE *v256;
  float64x2_t __p;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  uint64_t v265;

  v265 = *MEMORY[0x24BDAC8D0];
  v200 = *a3;
  v201 = a3[1];
  v14 = *a4;
  v13 = a4[1];
  v246 = 0;
  v244 = 0;
  v245 = 0;
  v15 = v13 - v14;
  if (!v15)
  {
    v16 = 0;
    v19 = 0.0;
    v21 = *a7;
    v22 = a7[1] - *a7;
    if (!v22)
      goto LABEL_17;
    goto LABEL_13;
  }
  if (v15 < 0)
    sub_2394189F8();
  v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 6);
  v17 = (v16 - 1) >> 6;
  v18 = operator new(8 * (v17 + 1));
  v19 = *(double *)&v18;
  v246 = v17 + 1;
  v244 = v18;
  v245 = v16;
  if (v16 >= 0x41)
    v20 = (v16 - 1) >> 6;
  else
    v20 = 0;
  *((_QWORD *)v18 + v20) = 0;
  if (v16 >= 0x40)
    bzero(v18, 8 * (v16 >> 6));
  if ((v16 & 0x3F) != 0)
    *(_QWORD *)(*(_QWORD *)&v19 + 8 * (v16 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v16 & 0x3F));
  v21 = *a7;
  v22 = a7[1] - *a7;
  if (v22)
  {
LABEL_13:
    v23 = v22 >> 3;
    if (v23 <= 1)
      v23 = 1;
    v24 = (int *)(v21 + 4);
    do
    {
      v25 = *(v24 - 1);
      *(_QWORD *)(*(_QWORD *)&v19 + (((unint64_t)*v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *v24;
      *(_QWORD *)(*(_QWORD *)&v19 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
      v24 += 2;
      --v23;
    }
    while (v23);
  }
LABEL_17:
  LOBYTE(v223[0]) = 1;
  __p.f64[0] = v19;
  LODWORD(__p.f64[1]) = 0;
  *(_QWORD *)&v249 = *(_QWORD *)&v19 + 8 * (v16 >> 6);
  DWORD2(v249) = v16 & 0x3F;
  v26 = sub_239458E50((uint64_t)&__p, (uint64_t)&v249, v223);
  v242 = 0;
  v241 = 0;
  v243 = 0;
  sub_2395135EC((uint64_t)&v241, v26);
  v202 = a6;
  *((_QWORD *)&v27 + 1) = 0;
  v238 = 0u;
  v239 = 0u;
  v240 = 1065353216;
  if (v16)
  {
    v28 = 0;
    v29 = 0;
    *(int32x2_t *)&v27 = vdup_n_s32(0x4E20u);
    *(_OWORD *)__n = v27;
    v207 = 0u;
    v30 = a5;
    do
    {
      if (((*(_QWORD *)(*(_QWORD *)&v19 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
      {
        __p = 0uLL;
        v258.f64[0] = 0.0;
        v32 = v242;
        if ((unint64_t)v242 >= v243)
        {
          v37 = sub_2395163E0((char **)&v241, (uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v242 = 0;
          *((_QWORD *)v32 + 1) = 0;
          *((_QWORD *)v32 + 2) = 0;
          v33 = __p.f64[0];
          v34 = *(_QWORD *)&__p.f64[1] - *(_QWORD *)&__p.f64[0];
          if (*(_QWORD *)&__p.f64[1] != *(_QWORD *)&__p.f64[0])
          {
            if (v34 < 0)
              sub_2394189F8();
            v35 = (char *)operator new(*(_QWORD *)&__p.f64[1] - *(_QWORD *)&__p.f64[0]);
            *(_QWORD *)v32 = v35;
            *((_QWORD *)v32 + 1) = v35;
            v36 = &v35[4 * (v34 >> 2)];
            *((_QWORD *)v32 + 2) = v36;
            memcpy(v35, *(const void **)&v33, v34);
            *((_QWORD *)v32 + 1) = v36;
            v30 = a5;
          }
          v37 = v32 + 24;
        }
        v242 = v37;
        v38 = v241;
        LODWORD(v223[0]) = v29;
        *(_QWORD *)&v249 = v223;
        *((_DWORD *)sub_2395165EC((uint64_t)&v238, (int *)v223, (uint64_t)&unk_239EC6E98, (_DWORD **)&v249) + 5) = -1 - 1431655765 * ((unint64_t)(v37 - v38) >> 3);
        v39 = (int32x2_t *)(*v30 + v28);
        v40 = *v39;
        v41 = v39[1];
        if (*(_QWORD *)&__p.f64[0])
        {
          __p.f64[1] = __p.f64[0];
          operator delete(*(void **)&__p.f64[0]);
        }
        *((_QWORD *)&v31 + 1) = __n[1];
        *(int32x2_t *)&v31 = vmin_s32(v40, (int32x2_t)__n[0]);
        *(_OWORD *)__n = v31;
        *((_QWORD *)&v31 + 1) = *((_QWORD *)&v207 + 1);
        *(int32x2_t *)&v31 = vmax_s32(*(int32x2_t *)&v207, v41);
        v207 = v31;
      }
      ++v29;
      v28 += 16;
    }
    while (v29 < v16);
  }
  else
  {
    __n[0] = (size_t)vdup_n_s32(0x4E20u);
    *(_QWORD *)&v207 = 0;
  }
  v43 = *a4;
  v42 = a4[1];
  v236 = 0;
  v237 = 0;
  v235 = 0;
  v44 = v42 - v43;
  if (v44)
  {
    v45 = 0xAAAAAAAAAAAAAAABLL * (v44 >> 6);
    if (v45 >> 58)
      sub_2394189F8();
    v46 = 0xAAAAAAAAAAAAAAC0 * (v44 >> 6);
    v47 = (char *)operator new(v46);
    v235 = v47;
    v237 = &v47[64 * v45];
    bzero(v47, v45 << 6);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v198 = vsub_s32(*(int32x2_t *)&v207, (int32x2_t)__n[0]);
    v236 = &v47[v46];
    v51 = 4;
    __asm { FMOV            V0.2D, #-1.0 }
    __n[1] = *((_QWORD *)&_Q0 + 1);
    do
    {
      v57 = (float *)(*v202 + v51);
      v59 = *(v57 - 1);
      v58 = *v57;
      v60 = *(double *)(v43 + v49);
      v61 = *(double *)(v43 + v49 + 8);
      v63 = *(double *)(v43 + v49 + 16);
      v62 = *(double *)(v43 + v49 + 24);
      sub_239512A78(v43 + v49, &__p);
      v64 = (v62 - (double)SHIDWORD(__n[0])) / v61 * v59;
      v65 = v64;
      *(float *)&v64 = v64 - (double)v198.i32[1] / v61 * v59;
      v66 = v65 + *(float *)&v64;
      v67 = v65 - *(float *)&v64;
      v68 = (float)(v66 / v67);
      v69 = (double)v198.i32[0] / v60 * v59;
      v70 = v69 + -(v63 - (double)SLODWORD(__n[0])) / v60 * v59;
      v71 = v70;
      *(float *)&v70 = v70 - v69;
      *(float *)&v69 = v71 + *(float *)&v70;
      v72 = v71 - *(float *)&v70;
      v73.f64[0] = (float)(*(float *)&v69 / v72);
      *(double *)&v74 = (float)((float)(v59 + v59) / v72);
      v75.f64[0] = 0.0;
      v75.f64[1] = (float)((float)(v59 + v59) / v67);
      v73.f64[1] = v68;
      v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v74, __p.f64[0]), v75, __p, 1), v73, v258.f64[0]), (float64x2_t)0, v258, 1);
      *(_QWORD *)&v77.f64[1] = __n[1];
      v77.f64[0] = (float)((float)-v58 / (float)(v58 - v59));
      *(double *)&v78 = (float)((float)-(float)(v58 * v59) / (float)(v58 - v59));
      v79 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v74, v259.f64[0]), v75, v259, 1), v73, v260.f64[0]), (float64x2_t)0, v260, 1);
      v80 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v74, v261.f64[0]), v75, v261, 1), v73, v262.f64[0]), (float64x2_t)0, v262, 1);
      v81 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v261.f64[0]), (float64x2_t)0, v261, 1), v77, v262.f64[0]), (float64x2_t)v78, v262, 1);
      v82 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v74, v263.f64[0]), v75, v263, 1), v73, v264.f64[0]), (float64x2_t)0, v264, 1);
      v83 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v263.f64[0]), (float64x2_t)0, v263, 1), v77, v264.f64[0]), (float64x2_t)v78, v264, 1);
      v84 = (float32x4_t *)((char *)v235 + v48);
      v85 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v76), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, __p.f64[0]), (float64x2_t)0, __p, 1), v77, v258.f64[0]), (float64x2_t)v78, v258, 1));
      v86 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v79), vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v259.f64[0]), (float64x2_t)0, v259, 1), v77, v260.f64[0]), (float64x2_t)v78, v260, 1));
      *v84 = v85;
      v84[1] = v86;
      v84[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v80), v81);
      v84[3] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v82), v83);
      ++v50;
      v43 = *a4;
      v49 += 192;
      v48 += 64;
      v51 += 8;
    }
    while (v50 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 6));
  }
  else
  {
    v198 = vsub_s32(*(int32x2_t *)&v207, (int32x2_t)__n[0]);
  }
  sub_2397A9494((uint64_t)a1);
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v232 = 0;
  v233 = 0;
  v234 = 0;
  v229 = 0;
  v230 = 0;
  v231 = 0;
  v203 = v87;
  v88 = (void *)objc_msgSend(v87, "newBufferWithBytes:length:options:", *a2, a2[1] - *a2, 0);
  v228 = v88;
  v89 = v233;
  if ((unint64_t)v233 >= v234)
  {
    v90 = sub_239516238(&v232, &v228);
  }
  else
  {
    *v89 = v88;
    v90 = v89 + 1;
  }
  v233 = v90;
  v91 = (void *)objc_msgSend(v87, "newBufferWithBytes:length:options:", *a3, a3[1] - *a3, 0);
  v227 = v91;
  v92 = v233;
  if ((unint64_t)v233 >= v234)
  {
    v93 = sub_239516238(&v232, &v227);
  }
  else
  {
    *v92 = v91;
    v93 = v92 + 1;
  }
  v233 = v93;
  v193 = 0xAAAAAAAAAAAAAAABLL * ((v201 - v200) >> 2);
  __na = 0xAAAAAAAAAAAAAAACLL * ((v201 - v200) >> 2);
  v94 = (void *)objc_msgSend(v87, "newBufferWithLength:options:");
  v226 = v94;
  v95 = v233;
  if ((unint64_t)v233 >= v234)
  {
    v96 = sub_239516238(&v232, &v226);
  }
  else
  {
    *v95 = v94;
    v96 = v95 + 1;
  }
  v233 = v96;
  v225 = 0;
  v196 = v198.i32[1];
  v197 = v198.i32[0];
  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 53);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "setUsage:", 7);
  v98 = (void *)objc_msgSend(v87, "newTextureWithDescriptor:", v97);
  v99 = v225;
  v225 = v98;

  v100 = v230;
  if ((unint64_t)v230 >= v231)
  {
    v101 = sub_239516238(&v229, &v225);
  }
  else
  {
    *v100 = v225;
    v101 = v100 + 1;
  }
  v230 = v101;

  v224 = 0;
  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 252, v198.i32[0], v198.i32[1], 0);
  v102 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v102, "setUsage:", 4);
  objc_msgSend(v102, "setStorageMode:", 2);
  v103 = (void *)objc_msgSend(v203, "newTextureWithDescriptor:", v102);
  v104 = v224;
  v224 = v103;

  v105 = v230;
  if ((unint64_t)v230 >= v231)
  {
    v106 = sub_239516238(&v229, &v224);
  }
  else
  {
    *v105 = v224;
    v106 = v105 + 1;
  }
  v230 = v106;

  v107 = v232;
  if (v232 != v233)
  {
    while (*v107)
    {
      if (++v107 == v233)
        goto LABEL_55;
    }
LABEL_63:
    v117 = 0;
    *a10 = 6012;
    goto LABEL_162;
  }
LABEL_55:
  v108 = v229;
  if (v229 != v230)
  {
    while (*v108)
    {
      if (++v108 == v230)
        goto LABEL_58;
    }
    goto LABEL_63;
  }
LABEL_58:
  v199 = objc_alloc_init(MEMORY[0x24BDDD690]);
  objc_msgSend(v199, "colorAttachments");
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v109, "objectAtIndexedSubscript:", 0);
  v110 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v110, "setTexture:", v225);
  objc_msgSend(v110, "setLoadAction:", 2);
  objc_msgSend(v110, "setStoreAction:", 1);
  objc_msgSend(v110, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v199, "depthAttachment");
  v111 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v111, "setTexture:", v224);
  objc_msgSend(v111, "setLoadAction:", 2);
  objc_msgSend(v111, "setStoreAction:", 0);
  objc_msgSend(v199, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v199, "setDefaultRasterSampleCount:", 1);

  v112 = objc_alloc_init(MEMORY[0x24BDDD590]);
  objc_msgSend(v112, "setDepthCompareFunction:", 1);
  objc_msgSend(v112, "setDepthWriteEnabled:", 1);
  v194 = v112;
  a8[1] = *a8;
  LODWORD(__p.f64[0]) = 0;
  if (v201 != v200)
    sub_2394DE27C((uint64_t)a8, v193, (const float *)&__p);
  v114 = *a7;
  v113 = a7[1];
  sub_2396FD800(a9, (uint64_t)v255);
  *(_QWORD *)&v249 = 0x42C8000000000000;
  sub_2396FCC68(&__p, (v113 - v114) >> 3, v255, &v249, 1.0);
  v115 = v256;
  if (v256 == v255)
  {
    v116 = 4;
    v115 = v255;
    goto LABEL_65;
  }
  if (v256)
  {
    v116 = 5;
LABEL_65:
    (*(void (**)(void))(*v115 + 8 * v116))();
  }
  if (a7[1] == *a7)
    goto LABEL_157;
  v206 = 0;
  while (1)
  {
    BYTE7(v250) = 0;
    LOBYTE(v249) = 0;
    sub_2396FD394(v223, (uint64_t)&__p, &v249);
    if (SBYTE7(v250) < 0)
      operator delete((void *)v249);
    if (sub_2396FD7B0((uint64_t)a9))
      break;
    v220 = 0;
    v221 = 0;
    v222 = 0;
    v217 = 0;
    v218 = 0;
    v118 = 1;
    v219 = 0;
    do
    {
      v119 = v118;
      v120 = (int *)(*a7 + 8 * v206);
      v208 = v119;
      if ((v119 & 1) != 0)
        v121 = &v220;
      else
        v121 = &v217;
      if ((v119 & 1) == 0)
        ++v120;
      v122 = (__int128 *)((char *)v235 + 64 * (uint64_t)*v120);
      v123 = v122[3];
      v125 = *v122;
      v124 = v122[1];
      v251 = v122[2];
      v252 = v123;
      v249 = v125;
      v250 = v124;
      v121[1] = *v121;
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      if (v201 != v200)
        sub_2394DE27C((uint64_t)v121, v193, (const float *)&__dst);
      v126 = objc_retainAutorelease(v226);
      bzero((void *)objc_msgSend(v126, "contents"), __na);
      nullsub_4(v126);

      sub_2397A9494((uint64_t)(a1 + 2));
      v127 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v127, "commandBuffer");
      v128 = (void *)objc_claimAutoreleasedReturnValue();

      v129 = (void *)objc_msgSend(v203, "newDepthStencilStateWithDescriptor:", v194);
      v130 = (int8x8_t)a1[12];
      if (!*(_QWORD *)&v130
        || ((v131 = (uint8x8_t)vcnt_s8(v130), v131.i16[0] = vaddlv_u8(v131), v131.u32[0] > 1uLL)
          ? (*(_QWORD *)&v130 <= 3uLL
           ? (v132 = 3u % a1[12])
           : (v132 = 3))
          : (v132 = (v130.i8[0] - 1) & 3),
            (v133 = *(uint64_t ***)(a1[11] + 8 * v132)) == 0 || (v134 = *v133) == 0))
      {
LABEL_189:
        sub_239A444D4((uint64_t)"unknown file", 241, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v131.u32[0] < 2uLL)
      {
        v135 = *(_QWORD *)&v130 - 1;
        while (1)
        {
          v137 = v134[1];
          if (v137 == 3)
          {
            if (*((_DWORD *)v134 + 4) == 3)
              goto LABEL_100;
          }
          else if ((v137 & v135) != v132)
          {
            goto LABEL_189;
          }
          v134 = (uint64_t *)*v134;
          if (!v134)
            goto LABEL_189;
        }
      }
      while (1)
      {
        v136 = v134[1];
        if (v136 == 3)
          break;
        if (v136 >= *(_QWORD *)&v130)
          v136 %= *(_QWORD *)&v130;
        if (v136 != v132)
          goto LABEL_189;
LABEL_90:
        v134 = (uint64_t *)*v134;
        if (!v134)
          goto LABEL_189;
      }
      if (*((_DWORD *)v134 + 4) != 3)
        goto LABEL_90;
LABEL_100:
      sub_2397A9494((uint64_t)(v134 + 3));
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v128, "renderCommandEncoderWithDescriptor:", v199);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v139, "setRenderPipelineState:", v138);
      objc_msgSend(v139, "setVertexBuffer:offset:atIndex:", v228, 0, 0);
      objc_msgSend(v139, "setVertexBytes:length:atIndex:", &v249, 64, 1);
      objc_msgSend(v139, "setFrontFacingWinding:", 1);
      objc_msgSend(v139, "setCullMode:", 2);
      objc_msgSend(v139, "setDepthStencilState:", v129);
      objc_msgSend(v139, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, (uint64_t)(a3[1] - *a3) >> 2, 1, v227, 0);
      objc_msgSend(v139, "endEncoding");
      v140 = (int8x8_t)a1[7];
      if (!*(_QWORD *)&v140
        || ((v141 = (uint8x8_t)vcnt_s8(v140), v141.i16[0] = vaddlv_u8(v141), v141.u32[0] > 1uLL)
          ? (*(_QWORD *)&v140 <= 5uLL
           ? (v142 = 5u % a1[7])
           : (v142 = 5))
          : (v142 = (v140.i32[0] - 1) & 5),
            (v143 = *(uint64_t ***)(a1[6] + 8 * v142)) == 0 || (v144 = *v143) == 0))
      {
LABEL_190:
        sub_239A444D4((uint64_t)"unknown file", 235, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v141.u32[0] < 2uLL)
      {
        v145 = *(_QWORD *)&v140 - 1;
        while (1)
        {
          v147 = v144[1];
          if (v147 == 5)
          {
            if (*((_DWORD *)v144 + 4) == 5)
              goto LABEL_121;
          }
          else if ((v147 & v145) != v142)
          {
            goto LABEL_190;
          }
          v144 = (uint64_t *)*v144;
          if (!v144)
            goto LABEL_190;
        }
      }
      while (2)
      {
        v146 = v144[1];
        if (v146 != 5)
        {
          if (v146 >= *(_QWORD *)&v140)
            v146 %= *(_QWORD *)&v140;
          if (v146 != v142)
            goto LABEL_190;
LABEL_111:
          v144 = (uint64_t *)*v144;
          if (!v144)
            goto LABEL_190;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v144 + 4) != 5)
        goto LABEL_111;
LABEL_121:
      sub_2397A9494((uint64_t)(v144 + 3));
      v148 = (void *)objc_claimAutoreleasedReturnValue();
      v149 = objc_msgSend(v148, "threadExecutionWidth");
      v150 = objc_msgSend(v148, "maxTotalThreadsPerThreadgroup");
      v151 = objc_msgSend(v148, "threadExecutionWidth");
      objc_msgSend(v128, "computeCommandEncoder");
      v152 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v152, "setTexture:atIndex:", v225, 0);
      objc_msgSend(v152, "setBuffer:offset:atIndex:", v226, 0, 0);
      objc_msgSend(v152, "setComputePipelineState:", v148);
      v216[0] = (v197 - 1 + v149) / v149;
      v216[1] = (v196 - 1 + v150 / v151) / (v150 / v151);
      v216[2] = 1;
      v215[0] = v149;
      v215[1] = v150 / v151;
      v215[2] = 1;
      objc_msgSend(v152, "dispatchThreadgroups:threadsPerThreadgroup:", v216, v215);
      objc_msgSend(v152, "endEncoding");
      sub_23971DB68();
      objc_msgSend(v128, "commit");
      kdebug_trace();
      objc_msgSend(v128, "waitUntilCompleted");
      objc_msgSend(v128, "error");
      v153 = (void *)objc_claimAutoreleasedReturnValue();
      v154 = v153;
      if (v153 && objc_msgSend(v153, "code"))
      {
        objc_msgSend(v154, "code");
        v253 = 0x73203A053A210753;
        v254 = 0;
        __s = sub_239513718((char *)&v253);
        objc_msgSend(v154, "localizedDescription");
        v209 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v159 = (const char *)objc_msgSend(v209, "UTF8String");
        v160 = strlen(v159);
        if (v160 >= 0x7FFFFFFFFFFFFFF8)
          sub_23941A5AC();
        v161 = v160;
        if (v160 >= 0x17)
        {
          v167 = (v160 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v160 | 7) != 0x17)
            v167 = v160 | 7;
          v190 = v167 + 1;
          v168 = (std::string *)operator new(v167 + 1);
          v163 = v159;
          p_dst = v168;
          __dst.__r_.__value_.__l.__size_ = v161;
          __dst.__r_.__value_.__r.__words[2] = v190 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
          v164 = __s;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v160;
          p_dst = &__dst;
          v163 = v159;
          v164 = __s;
          if (!v160)
          {
LABEL_146:
            p_dst->__r_.__value_.__s.__data_[v161] = 0;
            v169 = std::string::insert(&__dst, 0, v164);
            v170 = (void *)v169->__r_.__value_.__r.__words[0];
            v171 = SHIBYTE(v169->__r_.__value_.__r.__words[2]);
            v169->__r_.__value_.__r.__words[0] = 0;
            v169->__r_.__value_.__l.__size_ = 0;
            v169->__r_.__value_.__r.__words[2] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);

            *a10 = 6013;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
            __dst.__r_.__value_.__s.__data_[0] = 0;
            sub_2396FCC6C((uint64_t)&__p, (uint64_t)&__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if (v171 < 0)
                goto LABEL_153;
            }
            else
            {
              if ((v171 & 0x80000000) == 0)
                goto LABEL_150;
LABEL_153:
              operator delete(v170);
            }
LABEL_150:

            v165 = 0;
            v166 = v217;
            if (v217)
              goto LABEL_136;
            goto LABEL_137;
          }
        }
        memmove(p_dst, v163, v161);
        goto LABEL_146;
      }
      kdebug_trace();
      memcpy(*v121, (const void *)objc_msgSend(objc_retainAutorelease(v226), "contents"), __na);

      v118 = 0;
    }
    while ((v208 & 1) != 0);
    v155 = a11;
    if (a11 <= 0)
      v155 = std::thread::hardware_concurrency();
    sub_2397A2A50((uint64_t)&v249, v155, 0);
    v248 = 0;
    v156 = operator new(0x20uLL);
    *v156 = &off_250ADD580;
    v156[1] = a8;
    v156[2] = &v220;
    v156[3] = &v217;
    v248 = v156;
    sub_2397A376C((unint64_t *)&v249, v193, v247, 0);
    v157 = v248;
    if (v248 == v247)
    {
      v157 = v247;
      v158 = 4;
LABEL_134:
      (*(void (**)(void))(*v157 + 8 * v158))();
    }
    else if (v248)
    {
      v158 = 5;
      goto LABEL_134;
    }
    sub_2397A2D24((uint64_t)&v249);
    sub_2397A2E14(&v249);
    v165 = 1;
    v166 = v217;
    if (v217)
    {
LABEL_136:
      v218 = v166;
      operator delete(v166);
    }
LABEL_137:
    if (v220)
    {
      v221 = v220;
      operator delete(v220);
    }
    sub_2396FD3E8((uint64_t)v223);
    if ((v165 & 1) == 0)
    {
      v117 = 0;
      goto LABEL_161;
    }
    if (++v206 >= (unint64_t)((a7[1] - *a7) >> 3))
      goto LABEL_157;
  }
  BYTE7(v250) = 0;
  LOBYTE(v249) = 0;
  sub_2396FCC6C((uint64_t)&__p, (uint64_t)&v249);
  if (SBYTE7(v250) < 0)
    operator delete((void *)v249);
  sub_2396FD3E8((uint64_t)v223);
LABEL_157:
  BYTE7(v250) = 0;
  LOBYTE(v249) = 0;
  sub_2396FCC6C((uint64_t)&__p, (uint64_t)&v249);
  if (SBYTE7(v250) < 0)
    operator delete((void *)v249);
  v117 = sub_2396FD7B0((uint64_t)a9) ^ 1;
LABEL_161:
  sub_2396FCD14((uint64_t)&__p);

LABEL_162:
  v172 = v229;
  if (v229)
  {
    v173 = v230;
    v174 = v229;
    if (v230 != v229)
    {
      do
      {
        v175 = (void *)*--v173;

      }
      while (v173 != v172);
      v174 = v229;
    }
    v230 = v172;
    operator delete(v174);
  }
  v176 = v232;
  if (v232)
  {
    v177 = v233;
    v178 = v232;
    if (v233 != v232)
    {
      do
      {
        v179 = (void *)*--v177;

      }
      while (v177 != v176);
      v178 = v232;
    }
    v233 = v176;
    operator delete(v178);
  }

  if (v235)
    operator delete(v235);
  v180 = (_QWORD *)v239;
  if ((_QWORD)v239)
  {
    do
    {
      v181 = (_QWORD *)*v180;
      operator delete(v180);
      v180 = v181;
    }
    while (v181);
  }
  v182 = (void *)v238;
  *(_QWORD *)&v238 = 0;
  if (v182)
    operator delete(v182);
  v183 = (char *)v241;
  if (v241)
  {
    v184 = v242;
    v185 = v241;
    if (v242 != v241)
    {
      v186 = v242;
      do
      {
        v188 = (void *)*((_QWORD *)v186 - 3);
        v186 -= 24;
        v187 = v188;
        if (v188)
        {
          *((_QWORD *)v184 - 2) = v187;
          operator delete(v187);
        }
        v184 = v186;
      }
      while (v186 != v183);
      v185 = v241;
    }
    v242 = v183;
    operator delete(v185);
  }
  if (v244)
    operator delete(v244);
  return v117;
}

void sub_23950F084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  void *a68;
  char a71;
  void *v72;

  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  sub_2396FD3E8((uint64_t)&a53);
  sub_2396FCD14((uint64_t)&STACK[0x400]);

  sub_239513590(&a62);
  sub_239513590(&a65);

  if (a68)
    operator delete(a68);
  v72 = (void *)STACK[0x238];
  sub_239420950((uint64_t)&a71);
  sub_23942A16C((void **)&STACK[0x220]);
  if (v72)
  {
    operator delete(v72);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23950F450(uint64_t a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, void *a7, void *a8, float a9, float a10, float a11, _DWORD *a12)
{
  id v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  double v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  id v36;
  const char *v37;
  size_t v38;
  std::string::size_type v39;
  std::string *p_dst;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  void *v45;
  int v46;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  std::string __dst;
  unint64_t v55;
  int64x2_t v56;
  unint64_t v57;
  int64x2_t v58;
  unsigned int v59;
  float v60;
  float v61;
  float v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v50 = a2;
  v61 = a10;
  v62 = a9;
  v60 = a11;
  v49 = a4;
  v22 = a5;
  v51 = a6;
  v53 = a7;
  v52 = a8;
  sub_2397A9494(a1 + 16);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "commandBuffer");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  v59 = a3;
  v26 = v49;
  v25 = v50;
  v27 = sub_239508E98(a1, 0);
  sub_2397A9494((uint64_t)v27);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_msgSend(v28, "threadExecutionWidth");
  objc_msgSend(v24, "computeCommandEncoder");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v50, 0, 0);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v52, 0, 1);
  objc_msgSend(v30, "setBytes:length:atIndex:", &v62, 4, 2);
  objc_msgSend(v30, "setBytes:length:atIndex:", &v61, 4, 3);
  objc_msgSend(v30, "setBytes:length:atIndex:", &v60, 4, 4);
  objc_msgSend(v30, "setBytes:length:atIndex:", &v59, 4, 5);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v53, 0, 6);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v49, 0, 7);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v22, 0, 8);
  objc_msgSend(v30, "setBuffer:offset:atIndex:", v51, 0, 9);
  objc_msgSend(v30, "setComputePipelineState:", v28);
  v57 = (v29 + a3 - 1) / v29;
  v58 = vdupq_n_s64(1uLL);
  v55 = v29;
  v56 = v58;
  objc_msgSend(v30, "dispatchThreadgroups:threadsPerThreadgroup:", &v57, &v55);
  objc_msgSend(v30, "endEncoding");
  nullsub_4(v24);
  sub_23971DB68();
  objc_msgSend(v24, "commit");
  objc_msgSend(v24, "waitUntilCompleted");
  objc_msgSend(v24, "error");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = v31;
  if (!v31 || !objc_msgSend(v31, "code"))
  {
    v41 = 1;
    goto LABEL_17;
  }
  v48 = v22;
  objc_msgSend(v32, "code");
  v63 = xmmword_239EC6E40;
  *(int8x8_t *)&v33 = sub_23950F8E4((uint64_t)&v63);
  v35 = v34;
  objc_msgSend(v32, "localizedDescription", v33);
  v36 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v37 = (const char *)objc_msgSend(v36, "UTF8String");
  v38 = strlen(v37);
  if (v38 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v39 = v38;
  if (v38 >= 0x17)
  {
    v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v42 = v38 | 7;
    v43 = v42 + 1;
    p_dst = (std::string *)operator new(v42 + 1);
    __dst.__r_.__value_.__l.__size_ = v39;
    __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v38;
    p_dst = &__dst;
    if (!v38)
      goto LABEL_12;
  }
  memmove(p_dst, v37, v39);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v39] = 0;
  v44 = std::string::insert(&__dst, 0, v35);
  v45 = (void *)v44->__r_.__value_.__r.__words[0];
  v46 = SHIBYTE(v44->__r_.__value_.__r.__words[2]);
  v44->__r_.__value_.__r.__words[0] = 0;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v26 = v49;
  v25 = v50;
  v22 = v48;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);

  *a12 = 6013;
  if (v46 < 0)
    operator delete(v45);
  v41 = 0;
LABEL_17:

  return v41;
}

void sub_23950F828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

int8x8_t sub_23950F8E4(uint64_t a1)
{
  uint8x8_t v1;
  int8x16_t v2;
  uint64_t v3;
  unsigned int v4;
  int16x8_t v5;
  int8x8_t result;

  v1 = *(uint8x8_t *)a1;
  v2.i64[0] = *(_QWORD *)a1;
  v2.i8[1] = *(_BYTE *)(a1 + 8);
  v2.i64[1] = v2.i64[0];
  *(int8x8_t *)v2.i8 = veor_s8(*(int8x8_t *)a1, vqtbl1_s8(v2, (int8x8_t)1));
  *(int8x8_t *)(a1 + 1) = vext_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v2.i8, 1uLL);
  v3 = a1 + 1;
  v4 = v1.u8[0];
  v1.i32[0] = *(_DWORD *)(v3 + 8);
  v5 = (int16x8_t)vmovl_u8(v1);
  *(int8x8_t *)v5.i8 = veor_s8((int8x8_t)vdup_n_s16(v4), *(int8x8_t *)v5.i8);
  result = vmovn_s16(v5);
  *(_DWORD *)(v3 + 8) = result.i32[0];
  *(_BYTE *)(v3 + 12) ^= v4;
  *(_WORD *)(v3 + 13) = (v4 ^ *(_BYTE *)(v3 + 13));
  return result;
}

uint64_t sub_23950F94C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, void *a8, float a9, void *a10, void *a11, _DWORD *a12)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  void *v31;
  int8x8_t *v32;
  id v33;
  const char *v34;
  size_t v35;
  std::string::size_type v36;
  std::string *p_dst;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  void *v42;
  int v43;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  std::string __dst;
  unint64_t v57;
  int64x2_t v58;
  unint64_t v59;
  int64x2_t v60;
  unint64_t v61;
  int64x2_t v62;
  unint64_t v63;
  int64x2_t v64;
  int v65;
  float v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v46 = a2;
  v52 = a3;
  v54 = a4;
  v53 = a5;
  v49 = a6;
  v66 = a9;
  v48 = a8;
  v50 = a10;
  v47 = a11;
  sub_2397A9494(a1 + 16);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "commandBuffer");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v65 = a7;
  v22 = v46;
  v23 = sub_239508E98(a1, 1);
  sub_2397A9494((uint64_t)v23);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(v51, "threadExecutionWidth");
  objc_msgSend(v21, "computeCommandEncoder");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  sub_2397A9494(a1);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = (void *)objc_msgSend(v26, "newBufferWithLength:options:", 12 * a7, 0);

  objc_msgSend(v25, "setBuffer:offset:atIndex:", v46, 0, 0);
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v54, 0, 1);
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v52, 0, 2);
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v53, 0, 3);
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v49, 0, 4);
  objc_msgSend(v25, "setBytes:length:atIndex:", &v65, 4, 5);
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v48, 0, 6);
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v50, 0, 7);
  objc_msgSend(v25, "setBuffer:offset:atIndex:", v55, 0, 8);
  objc_msgSend(v25, "setComputePipelineState:", v51);
  v63 = (v24 + a7 - 1) / v24;
  v64 = vdupq_n_s64(1uLL);
  v61 = v24;
  v62 = v64;
  objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", &v63, &v61);
  objc_msgSend(v25, "endEncoding");
  objc_msgSend(v21, "computeCommandEncoder");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = sub_239508E98(a1, 2);
  sub_2397A9494((uint64_t)v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "setBuffer:offset:atIndex:", v46, 0, 0);
  objc_msgSend(v27, "setBuffer:offset:atIndex:", v54, 0, 1);
  objc_msgSend(v27, "setBuffer:offset:atIndex:", v52, 0, 2);
  objc_msgSend(v27, "setBuffer:offset:atIndex:", v53, 0, 3);
  objc_msgSend(v27, "setBuffer:offset:atIndex:", v55, 0, 4);
  objc_msgSend(v27, "setBytes:length:atIndex:", &v66, 4, 5);
  objc_msgSend(v27, "setBytes:length:atIndex:", &v65, 4, 6);
  objc_msgSend(v27, "setBuffer:offset:atIndex:", v47, 0, 7);
  objc_msgSend(v27, "setComputePipelineState:", v29);
  v59 = (v24 + a7 - 1) / v24;
  v60 = vdupq_n_s64(1uLL);
  v57 = v24;
  v58 = v60;
  objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", &v59, &v57);
  objc_msgSend(v27, "endEncoding");
  sub_23971DB68();
  objc_msgSend(v21, "commit");
  objc_msgSend(v21, "waitUntilCompleted");
  objc_msgSend(v21, "error");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v30;
  if (!v30 || !objc_msgSend(v30, "code"))
  {
    v38 = 1;
    goto LABEL_17;
  }
  v45 = v29;
  objc_msgSend(v31, "code");
  v67 = 0x3D3433083F34155ALL;
  v68 = 122;
  v32 = sub_23950FF84((int8x8_t *)&v67);
  objc_msgSend(v31, "localizedDescription");
  v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v34 = (const char *)objc_msgSend(v33, "UTF8String");
  v35 = strlen(v34);
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v39 = v35 | 7;
    v40 = v39 + 1;
    p_dst = (std::string *)operator new(v39 + 1);
    __dst.__r_.__value_.__l.__size_ = v36;
    __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v35;
    p_dst = &__dst;
    if (!v35)
      goto LABEL_12;
  }
  memmove(p_dst, v34, v36);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v36] = 0;
  v29 = v45;
  v41 = std::string::insert(&__dst, 0, (const std::string::value_type *)v32);
  v42 = (void *)v41->__r_.__value_.__r.__words[0];
  v43 = SHIBYTE(v41->__r_.__value_.__r.__words[2]);
  v41->__r_.__value_.__r.__words[0] = 0;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v22 = v46;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);

  *a12 = 6013;
  if (v43 < 0)
    operator delete(v42);
  v38 = 0;
LABEL_17:

  return v38;
}

void sub_23950FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (a26 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

int8x8_t *sub_23950FF84(int8x8_t *a1)
{
  int8x8_t *v1;
  int8x8_t v2;

  v1 = a1;
  v2 = vld1_dup_s8((const char *)v1);
  v1 = (int8x8_t *)((char *)v1 + 1);
  *v1 = veor_s8(v2, *v1);
  a1[1].i8[1] = 0;
  return v1;
}

void sub_23950FFA4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8)
{
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  id v22;

  v22 = a2;
  v15 = a3;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v19 = sub_239508F84(a1, 0);
  sub_2397A9494((uint64_t)v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "renderCommandEncoderWithDescriptor:", v16);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setRenderPipelineState:", v20);
  objc_msgSend(v21, "setVertexBuffer:offset:atIndex:", v17, 0, 0);
  objc_msgSend(v21, "setVertexBytes:length:atIndex:", a4, 64, 1);
  objc_msgSend(v21, "setFrontFacingWinding:", 1);
  objc_msgSend(v21, "setCullMode:", 2);
  objc_msgSend(v21, "setDepthStencilState:", v15);
  objc_msgSend(v21, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * a5, 1, v18, 0);
  objc_msgSend(v21, "endEncoding");

}

void sub_2395100E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_239510120(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t *v23;
  void *v24;
  void *v25;
  id v27;

  v27 = a2;
  v17 = a3;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = a10;
  v22 = a11;
  v23 = sub_239508F84(a1, 1);
  sub_2397A9494((uint64_t)v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v27, "renderCommandEncoderWithDescriptor:", v18);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "setRenderPipelineState:", v24);
  objc_msgSend(v25, "setFragmentTexture:atIndex:", v19, 0);
  objc_msgSend(v25, "setFragmentTexture:atIndex:", v20, 1);
  objc_msgSend(v25, "setVertexBuffer:offset:atIndex:", v21, 0, 0);
  objc_msgSend(v25, "setVertexBytes:length:atIndex:", a4, 64, 1);
  objc_msgSend(v25, "setVertexBytes:length:atIndex:", a5, 64, 2);
  objc_msgSend(v25, "setFrontFacingWinding:", 1);
  objc_msgSend(v25, "setCullMode:", 2);
  objc_msgSend(v25, "setDepthStencilState:", v17);
  objc_msgSend(v25, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * a6, 1, v22, 0);
  objc_msgSend(v25, "endEncoding");

}

void sub_2395102BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_239510304(uint64_t a1, void *a2, void *a3, uint64_t a4, float64x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, unint64_t a12, unint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  float64x2_t v40;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v49;
  double v50;
  double v52;
  int64x2_t v56;
  double v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v65;
  uint64_t *v66;
  void *v67;
  void *v68;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  float v78;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  float32x2_t v83;
  int v84;
  float32x4_t v85;
  float32x2_t v86;
  float32x2_t v87;
  int v88;
  float32x2_t v89;
  int v90;
  float v91[2];
  float v92;
  float v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v72 = a2;
  v71 = a3;
  v81 = a8;
  v82 = a7;
  v79 = a10;
  v80 = a9;
  v78 = a11;
  v32 = a14;
  v33 = a15;
  v34 = a16;
  v76 = a17;
  v75 = a18;
  v35 = a19;
  v77 = a20;
  v73 = a21;
  v74 = a22;
  v36 = a23;
  v37 = a24;
  v92 = 1.0 / (float)a12;
  v93 = 1.0 / (float)a13;
  v91[0] = v92;
  v91[1] = v93;
  _Q1.f64[0] = *(float64_t *)(a4 + 80);
  _Q5 = *(_OWORD *)(a4 + 128);
  v40.f64[0] = *(float64_t *)(a4 + 176);
  _Q0.f64[0] = 0.0;
  *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v40);
  v42 = vsubq_f64((float64x2_t)0, *(float64x2_t *)(a4 + 160));
  _Q1.f64[1] = *(float64_t *)(a4 + 112);
  v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(a4 + 64), *(int64x2_t *)(a4 + 96)), v42.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(a4 + 64), *(int64x2_t *)(a4 + 96)), v42, 1), _Q1, v40.f64[0]);
  _D2 = v42.f64[1];
  __asm { FMLA            D1, D2, V5.D[1] }
  _Q1.f64[0] = vmlad_n_f64(_Q1.f64[0], *(double *)(a4 + 144), v40.f64[0]);
  v89 = vcvt_f32_f64(v43);
  *(float *)_Q1.f64 = _Q1.f64[0];
  v90 = LODWORD(_Q1.f64[0]);
  v49 = a5[1];
  v50 = a5[5].f64[0];
  _Q3 = a5[4];
  v52 = a5[7].f64[0];
  _Q5 = a5[6];
  v40.f64[0] = a5[9].f64[0];
  _Q7 = a5[8];
  v43.f64[0] = a5[11].f64[0];
  _Q17 = a5[10];
  _Q0.f64[1] = a5->f64[1];
  v56 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&a5->f64[0], _Q3.f64[0]), _Q0, _Q3, 1), v49, v50);
  _D20 = 0;
  __asm { FMLA            D21, D20, V3.D[1] }
  v59 = v50 + _D21;
  v60 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&a5->f64[0], _Q5.f64[0]), _Q0, _Q5, 1), v49, v52);
  __asm { FMLA            D21, D20, V5.D[1] }
  v62.f64[0] = v52 + _D21;
  v63 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&a5->f64[0], _Q7.f64[0]), _Q0, _Q7, 1), v49, v40.f64[0]);
  __asm { FMLA            D21, D20, V7.D[1] }
  v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&a5->f64[0], _Q17.f64[0]), _Q0, _Q17, 1), v49, v43.f64[0]);
  __asm { FMLA            D0, D20, V17.D[1] }
  *(float *)v49.f64 = v63.f64[0];
  *(float *)_Q0.f64 = v43.f64[0] + _Q0.f64[0];
  v83 = vcvt_f32_f64((float64x2_t)vzip1q_s64(v56, (int64x2_t)v60));
  v84 = LODWORD(v49.f64[0]);
  *(_QWORD *)&v49.f64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  *(_QWORD *)&v65.f64[1] = v56.i64[1];
  *(_QWORD *)&v60.f64[0] = vdupq_laneq_s64((int64x2_t)v60, 1).u64[0];
  v60.f64[1] = v63.f64[1];
  v85 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v65), v60);
  v49.f64[1] = v59;
  v86 = vcvt_f32_f64(v49);
  v62.f64[1] = v40.f64[0] + _D21;
  v87 = vcvt_f32_f64(v62);
  v88 = LODWORD(_Q0.f64[0]);
  v66 = sub_239508F84(a1, 2);
  sub_2397A9494((uint64_t)v66);
  v67 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v72, "renderCommandEncoderWithDescriptor:", v37);
  v68 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "setRenderPipelineState:", v67);
  objc_msgSend(v68, "setVertexBuffer:offset:atIndex:", v71, 0, 0);
  objc_msgSend(v68, "setVertexBuffer:offset:atIndex:", v77, 0, 1);
  objc_msgSend(v68, "setVertexBytes:length:atIndex:", a6, 64, 2);
  objc_msgSend(v68, "setFragmentTexture:atIndex:", v34, 0);
  objc_msgSend(v68, "setFragmentTexture:atIndex:", v76, 1);
  objc_msgSend(v68, "setFragmentTexture:atIndex:", v32, 2);
  objc_msgSend(v68, "setFragmentTexture:atIndex:", v33, 3);
  objc_msgSend(v68, "setFragmentTexture:atIndex:", v75, 4);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v92, 8, 0);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", v91, 8, 1);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v89, 12, 2);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v83, 48, 3);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v80, 4, 4);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v78, 4, 5);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v82, 8, 6);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v81, 8, 7);
  objc_msgSend(v68, "setFragmentBuffer:offset:atIndex:", v35, 0, 8);
  objc_msgSend(v68, "setFragmentBuffer:offset:atIndex:", v74, 0, 9);
  objc_msgSend(v68, "setFragmentBuffer:offset:atIndex:", v73, 0, 10);
  objc_msgSend(v68, "setFragmentBytes:length:atIndex:", &v79, 4, 11);
  objc_msgSend(v68, "setFrontFacingWinding:", 1);
  objc_msgSend(v68, "setCullMode:", 2);
  objc_msgSend(v68, "setDepthStencilState:", v36);
  objc_msgSend(v68, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * v81, 1, v35, 0);
  objc_msgSend(v68, "endEncoding");

}

void sub_239510840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_2395108C4(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  int64x2_t v19;
  uint64_t v20;

  v9 = a2;
  v20 = a3;
  v10 = a4;
  v11 = a5;
  v12 = sub_239508E98(a1, 6);
  sub_2397A9494((uint64_t)v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "threadExecutionWidth");
  objc_msgSend(v9, "computeCommandEncoder");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v10, 0, 0);
  objc_msgSend(v15, "setBytes:length:atIndex:", &v20, 8, 1);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v11, 0, 2);
  objc_msgSend(v15, "setComputePipelineState:", v13);
  v18 = (v14 + a3 - 1) / v14;
  v19 = vdupq_n_s64(1uLL);
  v16 = v14;
  v17 = v19;
  objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", &v18, &v16);
  objc_msgSend(v15, "endEncoding");

}

void sub_2395109EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_239510A0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_239510A24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_239510A44(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, _DWORD *a8, float a9)
{
  id v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  const std::string::value_type *v24;
  id v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_p;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  void *v35;
  int v36;
  void *v38;
  void *v40;
  id v41;
  id v42;
  id v43;
  std::string __p;
  unint64_t v45;
  int64x2_t v46;
  unint64_t v47;
  int64x2_t v48;
  int v49;
  float v50;
  uint64_t v51;
  char v52[8];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v50 = a9;
  v15 = a3;
  v16 = a4;
  v17 = v15;
  v41 = v16;
  v42 = a5;
  v43 = a6;
  objc_msgSend(v15, "commandBuffer");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = a2;
  v19 = sub_239508E98(a1, 3);
  sub_2397A9494((uint64_t)v19);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = objc_msgSend(v40, "threadExecutionWidth");
  objc_msgSend(v18, "computeCommandEncoder");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setBuffer:offset:atIndex:", v41, 0, 0);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", v42, 0, 1);
  objc_msgSend(v21, "setBytes:length:atIndex:", &v50, 4, 2);
  objc_msgSend(v21, "setBytes:length:atIndex:", &v49, 4, 3);
  objc_msgSend(v21, "setBuffer:offset:atIndex:", v43, 0, 4);
  objc_msgSend(v21, "setComputePipelineState:", v40);
  v47 = (a2 + v20 - 1) / v20;
  v48 = vdupq_n_s64(1uLL);
  v45 = v20;
  v46 = v48;
  objc_msgSend(v21, "dispatchThreadgroups:threadsPerThreadgroup:", &v47, &v45);
  objc_msgSend(v21, "endEncoding");
  nullsub_4(v18);
  sub_23971DB68();
  objc_msgSend(v18, "commit");
  objc_msgSend(v18, "waitUntilCompleted");
  objc_msgSend(v18, "error");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (v22 && objc_msgSend(v22, "code"))
  {
    v38 = v17;
    objc_msgSend(v23, "code");
    v51 = 0x7E5420667C7B4712;
    strcpy(v52, "}sf2");
    v24 = sub_239510ECC((uint64_t)&v51);
    objc_msgSend(v23, "localizedDescription");
    v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v26 = a7;
    v27 = (const char *)objc_msgSend(v25, "UTF8String");
    v28 = strlen(v27);
    if (v28 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v29 = v28;
    if (v28 >= 0x17)
    {
      v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17)
        v32 = v28 | 7;
      v33 = v32 + 1;
      p_p = (std::string *)operator new(v32 + 1);
      __p.__r_.__value_.__l.__size_ = v29;
      __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v28;
      p_p = &__p;
      if (!v28)
      {
LABEL_14:
        p_p->__r_.__value_.__s.__data_[v29] = 0;
        v17 = v38;
        v34 = std::string::insert(&__p, 0, v24);
        v35 = (void *)v34->__r_.__value_.__r.__words[0];
        v36 = SHIBYTE(v34->__r_.__value_.__r.__words[2]);
        v34->__r_.__value_.__r.__words[0] = 0;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);

        *a8 = 6013;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        sub_2396FCC6C(v26, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v36 & 0x80000000) == 0)
            goto LABEL_18;
        }
        else if ((v36 & 0x80000000) == 0)
        {
LABEL_18:
          v31 = 0;
          goto LABEL_19;
        }
        operator delete(v35);
        goto LABEL_18;
      }
    }
    memmove(p_p, v27, v29);
    goto LABEL_14;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_2396FCC6C(a7, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v31 = 1;
LABEL_19:

  return v31;
}

void sub_239510DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  if (a20 < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v23);

  _Unwind_Resume(a1);
}

_BYTE *sub_239510ECC(uint64_t a1)
{
  uint64_t v1;
  int8x16_t v2;
  _BYTE *result;

  v1 = *(_QWORD *)a1;
  v2.i64[0] = *(_QWORD *)a1;
  v2.i8[1] = *(_BYTE *)(a1 + 8);
  v2.i64[1] = v2.i64[0];
  *(int8x8_t *)v2.i8 = veor_s8(*(int8x8_t *)a1, vqtbl1_s8(v2, (int8x8_t)1));
  *(int8x8_t *)(a1 + 1) = vext_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v2.i8, 1uLL);
  result = (_BYTE *)(a1 + 1);
  result[8] ^= v1;
  result[9] ^= v1;
  result[10] ^= v1;
  result[11] = 0;
  return result;
}

uint64_t sub_239510F28(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8, float a9, float a10, _QWORD *a11, unsigned int **a12, int32x2_t **a13, _QWORD *a14, float **a15, _QWORD *a16, void *a17, _DWORD *a18)
{
  size_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  double *v55;
  float *v56;
  float v57;
  float v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  float v65;
  float64_t v66;
  double v67;
  double v68;
  float v69;
  float v70;
  float64x2_t v71;
  unint64_t v72;
  float64x2_t v73;
  int8x16_t v74;
  float64x2_t v75;
  unint64_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int8x16_t v83;
  float v84;
  float32x2_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  _QWORD *v99;
  void *v100;
  _QWORD *v101;
  _QWORD *v102;
  void *v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  float32x4_t *v129;
  float *v130;
  unint64_t v131;
  double v132;
  float *v133;
  uint64_t v134;
  uint64_t v135;
  float32x4_t *v136;
  uint64_t v137;
  float32x4_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float v143;
  unsigned int *v144;
  unsigned int *v145;
  float v146;
  double v147;
  _QWORD *v148;
  uint64_t v149;
  float v150;
  uint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  float v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  id v165;
  void *v166;
  uint64_t v167;
  void *v168;
  id v169;
  void *v170;
  uint64_t v171;
  void *v172;
  id v173;
  void *v174;
  void *v175;
  float v176;
  const std::string::value_type *v177;
  id v178;
  const char *v179;
  size_t v180;
  std::string::size_type v181;
  std::string *p_p;
  uint64_t v183;
  uint64_t v184;
  std::string *v185;
  void *v186;
  int v187;
  _QWORD *v188;
  _QWORD *v189;
  void *v190;
  void *v191;
  _QWORD *v192;
  _QWORD *v193;
  void *v194;
  void *v195;
  id v197;
  id v199;
  void *v200;
  uint64_t v201;
  void *v202;
  void *v203;
  id v204;
  void *v205;
  void *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  float v212;
  uint64_t v213;
  id v214;
  id v215;
  int32x2_t v216;
  unint64_t v217;
  int32x2_t v219;
  unint64_t v220;
  float64_t v221;
  double v222;
  uint64_t v223;
  int32x2_t v225;
  double v226;
  void *v227;
  int v228;
  __int16 v229;
  char v230;
  _QWORD v231[3];
  _QWORD v232[3];
  _QWORD v233[3];
  _QWORD v234[3];
  std::string __p;
  _QWORD v236[2];
  id v237;
  id v238;
  id v239;
  id v240;
  id v241;
  id v242;
  id v243;
  id v244;
  id v245;
  id v246;
  id v247;
  id v248;
  void *v249;
  _QWORD *v250;
  unint64_t v251;
  void *v252;
  _QWORD *v253;
  unint64_t v254;
  void *v255;
  char *v256;
  char *v257;
  void *v258;
  uint64_t v259;
  unint64_t v260;
  _BYTE v261[24];
  _BYTE *v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  uint64_t v271;

  v271 = *MEMORY[0x24BDAC8D0];
  v214 = a2;
  v215 = a3;
  v199 = a4;
  v204 = a5;
  v197 = a17;
  v24 = objc_msgSend(v197, "length");
  v25 = objc_retainAutorelease(v197);
  bzero((void *)objc_msgSend(v25, "contents"), v24);
  nullsub_4(v25);
  v200 = v25;

  v27 = *a8;
  v26 = a8[1];
  v260 = 0;
  v258 = 0;
  v259 = 0;
  v28 = v26 - v27;
  if (v28)
  {
    if (v28 < 0)
      sub_2394189F8();
    v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 6);
    v258 = operator new(8 * (((v29 - 1) >> 6) + 1));
    v259 = 0;
    v260 = ((v29 - 1) >> 6) + 1;
    sub_23942D8C8(&v258, v29, 0);
  }
  v30 = *a12;
  v31 = a12[1];
  if (*a12 != v31)
  {
    v32 = (char *)v258;
    do
    {
      v33 = *v30;
      v34 = v30[1];
      v30 += 2;
      *(_QWORD *)&v32[(v34 >> 3) & 0x1FFFFFF8] |= 1 << v34;
      *(_QWORD *)&v32[(v33 >> 3) & 0x1FFFFFF8] |= 1 << v33;
    }
    while (v30 != v31);
  }
  if (v259)
  {
    v35 = 0;
    v36 = vdup_n_s32(0x4E20u);
    v37 = 0;
    v38 = *a13 + 1;
    do
    {
      if (((*(_QWORD *)((char *)v258 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
      {
        v36 = vmin_s32(v38[-1], v36);
        v37 = vmax_s32(v37, *v38);
      }
      ++v35;
      v38 += 2;
    }
    while (v259 != v35);
  }
  else
  {
    v36 = vdup_n_s32(0x4E20u);
    v37 = 0;
  }
  v40 = *a8;
  v39 = a8[1];
  v257 = 0;
  v255 = 0;
  v256 = 0;
  v41 = v39 - v40;
  if (v41)
  {
    v225 = v37;
    v219 = v36;
    v42 = v41 / 192;
    if ((unint64_t)(v41 / 192) >> 58)
      sub_2394189F8();
    v43 = a1;
    v44 = a6;
    v212 = a10;
    v45 = (char *)operator new(v42 << 6);
    v255 = v45;
    v257 = &v45[64 * v42];
    bzero(v45, v42 << 6);
    v46 = 0;
    v47 = vsub_s32(v225, v219);
    v226 = (double)v47.i32[0];
    v216 = v47;
    v222 = (double)v47.i32[1];
    v256 = v257;
    v48 = 60;
    v49 = 4;
    __asm { FMOV            V0.2D, #-1.0 }
    v221 = *((double *)&_Q0 + 1);
    do
    {
      v55 = (double *)(*a8 + v46);
      v56 = (float *)(*a14 + v49);
      v58 = *(v56 - 1);
      v57 = *v56;
      v60 = *v55;
      v59 = v55[1];
      v61 = v55[2];
      v62 = v55[3];
      sub_239512A78((uint64_t)v55, &v263);
      v63 = (v62 - (double)v219.i32[1]) / v59 * v58;
      v64 = v63;
      *(float *)&v63 = v63 - v222 / v59 * v58;
      v65 = v64 + *(float *)&v63;
      *(float *)&v63 = v64 - *(float *)&v63;
      v66 = (float)(v65 / *(float *)&v63);
      v67 = v226 / v60 * v58;
      v68 = v67 + -(v61 - (double)v219.i32[0]) / v60 * v58;
      v69 = v68;
      *(float *)&v68 = v68 - v67;
      *(float *)&v67 = v69 + *(float *)&v68;
      v70 = v69 - *(float *)&v68;
      v71.f64[0] = (float)(*(float *)&v67 / v70);
      *(double *)&v72 = (float)((float)(v58 + v58) / v70);
      v73.f64[0] = 0.0;
      v73.f64[1] = (float)((float)(v58 + v58) / *(float *)&v63);
      v71.f64[1] = v66;
      v74 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v72, v263.f64[0]), v73, v263, 1), v71, v264.f64[0]), (float64x2_t)0, v264, 1);
      v75.f64[1] = v221;
      v75.f64[0] = (float)((float)-v57 / (float)(v57 - v58));
      *(double *)&v76 = (float)((float)-(float)(v57 * v58) / (float)(v57 - v58));
      v77 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v263.f64[0]), (float64x2_t)0, v263, 1), v75, v264.f64[0]), (float64x2_t)v76, v264, 1);
      v78 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v72, v265.f64[0]), v73, v265, 1), v71, v266.f64[0]), (float64x2_t)0, v266, 1);
      v79 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v265.f64[0]), (float64x2_t)0, v265, 1), v75, v266.f64[0]), (float64x2_t)v76, v266, 1);
      v80 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v72, v267.f64[0]), v73, v267, 1), v71, v268.f64[0]), (float64x2_t)0, v268, 1);
      v81 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v267.f64[0]), (float64x2_t)0, v267, 1), v75, v268.f64[0]), (float64x2_t)v76, v268, 1);
      v82 = (int64x2_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v72, v269.f64[0]), v73, v269, 1), v71, v270.f64[0]), (float64x2_t)0, v270, 1);
      v83 = (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v269.f64[0]), (float64x2_t)0, v269, 1), v75, v270.f64[0]), (float64x2_t)v76, v270, 1);
      v84 = *(double *)v74.i64;
      *(float *)&v45[v48 - 60] = v84;
      v45 = (char *)v255;
      v85 = (float32x2_t *)((char *)v255 + v48);
      v85[-1] = vcvt_f32_f64((float64x2_t)vextq_s8((int8x16_t)v82, v83, 8uLL));
      *(float32x4_t *)v85[-7].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8(v74, (int8x16_t)v77, 8uLL)), (float64x2_t)vzip1q_s64(vdupq_laneq_s64(v77, 1), v78));
      *(float32x4_t *)v85[-5].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 8uLL)), (float64x2_t)vzip1q_s64(vdupq_laneq_s64(v79, 1), v80));
      *(float32x4_t *)v85[-3].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v81, 8uLL)), (float64x2_t)vzip1q_s64(vdupq_laneq_s64(v81, 1), v82));
      *(float *)v74.i32 = *(double *)&v83.i64[1];
      v85->i32[0] = v74.i32[0];
      v48 += 64;
      v46 += 192;
      v49 += 8;
      --v42;
    }
    while (v42);
    v207 = v45;
    a1 = v43;
    a10 = v212;
  }
  else
  {
    v44 = a6;
    v207 = 0;
    v216 = vsub_s32(v37, v36);
  }
  v253 = 0;
  v252 = 0;
  v254 = 0;
  v250 = 0;
  v249 = 0;
  v251 = 0;
  sub_2397A9494(a1);
  v86 = objc_claimAutoreleasedReturnValue();
  v87 = a1;
  v88 = (void *)v86;
  v223 = v87;
  v211 = (void *)v86;
  sub_2397A9494(v87 + 16);
  v205 = (void *)objc_claimAutoreleasedReturnValue();
  v248 = (id)objc_msgSend(v88, "newBufferWithLength:options:", v44, 0);
  v247 = (id)objc_msgSend(v88, "newBufferWithLength:options:", 12 * v44, 32);
  v213 = v44;
  v246 = (id)objc_msgSend(v88, "newBufferWithLength:options:", 4 * v44, 32);
  v220 = v216.i32[0];
  v217 = v216.i32[1];
  v245 = (id)objc_msgSend(v88, "newBufferWithLength:options:", (int)v220 * (uint64_t)(int)v217, 0);
  v244 = (id)objc_msgSend(v88, "newBufferWithLength:options:", (int)v220 * (uint64_t)(int)v217, 0);
  v93 = sub_239516238(&v252, &v247);
  v253 = v93;
  if ((unint64_t)v93 < v254)
  {
    *v93 = v248;
    v89 = v93 + 1;
    v253 = v89;
    if ((unint64_t)v89 >= v254)
      goto LABEL_26;
LABEL_21:
    *v89 = v246;
    v90 = v89 + 1;
    v253 = v90;
    if ((unint64_t)v90 >= v254)
      goto LABEL_27;
    goto LABEL_22;
  }
  v89 = sub_239516238(&v252, &v248);
  v253 = v89;
  if ((unint64_t)v89 < v254)
    goto LABEL_21;
LABEL_26:
  v90 = sub_239516238(&v252, &v246);
  v253 = v90;
  if ((unint64_t)v90 >= v254)
  {
LABEL_27:
    v91 = sub_239516238(&v252, &v245);
    v253 = v91;
    if ((unint64_t)v91 >= v254)
      goto LABEL_28;
LABEL_23:
    *v91 = v244;
    v92 = v91 + 1;
    goto LABEL_29;
  }
LABEL_22:
  *v90 = v245;
  v91 = v90 + 1;
  v253 = v91;
  if ((unint64_t)v91 < v254)
    goto LABEL_23;
LABEL_28:
  v92 = sub_239516238(&v252, &v244);
LABEL_29:
  v253 = v92;
  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, v220, v217, 0);
  v94 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v94, "setUsage:", 5);
  objc_msgSend(v94, "setStorageMode:", 2);
  v243 = (id)objc_msgSend(v88, "newTextureWithDescriptor:", v94);

  v95 = v250;
  if ((unint64_t)v250 >= v251)
  {
    v96 = sub_239516238(&v249, &v243);
  }
  else
  {
    *v95 = v243;
    v96 = v95 + 1;
  }
  v250 = v96;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, v220, v217, 0);
  v97 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v97, "setUsage:", 3);
  objc_msgSend(v97, "setStorageMode:", 2);
  v242 = (id)objc_msgSend(v88, "newTextureWithDescriptor:", v97);

  v98 = v250;
  if ((unint64_t)v250 >= v251)
  {
    v99 = sub_239516238(&v249, &v242);
  }
  else
  {
    *v98 = v242;
    v99 = v98 + 1;
  }
  v250 = v99;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, v220, v217, 0);
  v100 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v100, "setUsage:", 3);
  v241 = (id)objc_msgSend(v88, "newTextureWithDescriptor:", v100);

  v101 = v250;
  if ((unint64_t)v250 >= v251)
  {
    v102 = sub_239516238(&v249, &v241);
  }
  else
  {
    *v101 = v241;
    v102 = v101 + 1;
  }
  v250 = v102;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 10, v220, v217, 0);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v103, "setUsage:", 5);
  v240 = (id)objc_msgSend(v88, "newTextureWithDescriptor:", v103);

  v104 = v250;
  if ((unint64_t)v250 >= v251)
  {
    v105 = sub_239516238(&v249, &v240);
  }
  else
  {
    *v104 = v240;
    v105 = v104 + 1;
  }
  v250 = v105;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 55, v220, v217, 0);
  v106 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v106, "setUsage:", 5);
  v239 = (id)objc_msgSend(v88, "newTextureWithDescriptor:", v106);

  v107 = v250;
  if ((unint64_t)v250 >= v251)
  {
    v108 = sub_239516238(&v249, &v239);
  }
  else
  {
    *v107 = v239;
    v108 = v107 + 1;
  }
  v250 = v108;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 105, v220, v217, 0);
  v109 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v109, "setUsage:", 5);
  v238 = (id)objc_msgSend(v88, "newTextureWithDescriptor:", v109);

  v110 = v250;
  if ((unint64_t)v250 >= v251)
  {
    v111 = sub_239516238(&v249, &v238);
  }
  else
  {
    *v110 = v238;
    v111 = v110 + 1;
  }
  v250 = v111;

  objc_msgSend(MEMORY[0x24BDDD740], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", 252, v220, v217, 0);
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v112, "setUsage:", 4);
  objc_msgSend(v112, "setStorageMode:", 2);
  v237 = (id)objc_msgSend(v88, "newTextureWithDescriptor:", v112);

  v113 = v250;
  if ((unint64_t)v250 >= v251)
  {
    v114 = sub_239516238(&v249, &v237);
  }
  else
  {
    *v113 = v237;
    v114 = v113 + 1;
  }
  v250 = v114;

  v115 = v252;
  if (v252 != v253)
  {
    while (*v115)
    {
      if (++v115 == v253)
        goto LABEL_53;
    }
    goto LABEL_59;
  }
LABEL_53:
  v116 = v249;
  if (v249 != v250)
  {
    while (*v116)
    {
      if (++v116 == v250)
        goto LABEL_56;
    }
LABEL_59:
    v134 = 0;
    *a18 = 6012;
    goto LABEL_112;
  }
LABEL_56:
  v203 = (void *)objc_opt_new();
  objc_msgSend(v203, "colorAttachments");
  v117 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v117, "objectAtIndexedSubscript:", 0);
  v118 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v118, "setTexture:", v243);
  objc_msgSend(v118, "setLoadAction:", 2);
  objc_msgSend(v118, "setStoreAction:", 1);
  objc_msgSend(v118, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v203, "depthAttachment");
  v119 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v119, "setTexture:", v237);
  objc_msgSend(v119, "setLoadAction:", 2);
  objc_msgSend(v119, "setStoreAction:", 0);
  objc_msgSend(v119, "setClearDepth:", 1.0);

  objc_msgSend(v203, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v203, "setDefaultRasterSampleCount:", 1);
  v206 = (void *)objc_opt_new();
  objc_msgSend(v206, "colorAttachments");
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v120, "objectAtIndexedSubscript:", 0);
  v121 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v121, "setTexture:", v240);
  objc_msgSend(v121, "setLoadAction:", 2);
  objc_msgSend(v121, "setStoreAction:", 1);
  objc_msgSend(v121, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v206, "colorAttachments");
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v122, "objectAtIndexedSubscript:", 1);
  v123 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v123, "setTexture:", v239);
  objc_msgSend(v123, "setLoadAction:", 2);
  objc_msgSend(v123, "setStoreAction:", 1);
  objc_msgSend(v123, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v206, "colorAttachments");
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v124, "objectAtIndexedSubscript:", 2);
  v125 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v125, "setTexture:", v238);
  objc_msgSend(v125, "setLoadAction:", 2);
  objc_msgSend(v125, "setStoreAction:", 1);
  objc_msgSend(v125, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v206, "depthAttachment");
  v126 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v126, "setTexture:", v237);
  objc_msgSend(v126, "setLoadAction:", 2);
  objc_msgSend(v126, "setStoreAction:", 0);
  objc_msgSend(v126, "setClearDepth:", 1.0);

  objc_msgSend(v206, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v206, "setDefaultRasterSampleCount:", 1);
  v202 = (void *)objc_opt_new();
  objc_msgSend(v202, "depthAttachment");
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v127, "setTexture:", v237);
  objc_msgSend(v127, "setLoadAction:", 2);
  objc_msgSend(v127, "setStoreAction:", 0);
  objc_msgSend(v127, "setClearDepth:", 1.0);
  objc_msgSend(v202, "setRenderTargetArrayLength:", 1);
  objc_msgSend(v202, "setDefaultRasterSampleCount:", 1);

  v128 = (void *)objc_opt_new();
  objc_msgSend(v128, "setDepthCompareFunction:", 1);
  objc_msgSend(v128, "setDepthWriteEnabled:", 1);
  v210 = (void *)objc_msgSend(v88, "newDepthStencilStateWithDescriptor:", v128);

  v129 = (float32x4_t *)*a15;
  v130 = a15[1];
  if (*a15 == v130)
  {
    v132 = 0.0;
    goto LABEL_65;
  }
  v131 = (char *)v130 - (char *)v129 - 4;
  if (v131 < 0x1C)
  {
    v132 = 0.0;
    v133 = *a15;
    do
    {
LABEL_64:
      v143 = *v133++;
      v132 = v132 + v143;
    }
    while (v133 != v130);
    goto LABEL_65;
  }
  v135 = (v131 >> 2) + 1;
  v133 = &v129->f32[v135 & 0x7FFFFFFFFFFFFFF8];
  v136 = v129 + 1;
  v132 = 0.0;
  v137 = v135 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v138 = v136[-1];
    v139 = vcvt_hight_f64_f32(v138);
    v140 = vcvtq_f64_f32(*(float32x2_t *)v138.f32);
    v141 = vcvt_hight_f64_f32(*v136);
    v142 = vcvtq_f64_f32(*(float32x2_t *)v136->f32);
    v132 = v132
         + v140.f64[0]
         + v140.f64[1]
         + v139.f64[0]
         + v139.f64[1]
         + v142.f64[0]
         + v142.f64[1]
         + v141.f64[0]
         + v141.f64[1];
    v136 += 2;
    v137 -= 8;
  }
  while (v137);
  if (v135 != (v135 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_64;
LABEL_65:
  v145 = *a12;
  v144 = a12[1];
  sub_2396FD800(a16, (uint64_t)v261);
  v236[0] = 0x42C8000000000000;
  sub_2396FCC68(&v263, ((char *)v144 - (char *)v145) >> 3, v261, v236, 1.0);
  v146 = v132 / (double)(unint64_t)(((char *)v130 - (char *)v129) >> 2);
  v147 = 1.0 / v146 * 1000.0;
  v148 = v262;
  if (v262 == v261)
  {
    v149 = 4;
    v148 = v261;
    goto LABEL_69;
  }
  if (v262)
  {
    v149 = 5;
LABEL_69:
    (*(void (**)(void))(*v148 + 8 * v149))();
  }
  v151 = (char *)a12[1] - (char *)*a12;
  if (v151)
  {
    v208 = 0;
    v209 = 0;
    v201 = v151 >> 3;
    while (1)
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_2396FD394(v236, (uint64_t)&v263, (__int128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (sub_2396FD7B0((uint64_t)a16))
        break;
      v152 = &(*a12)[v209];
      v154 = *v152;
      v153 = v152[1];
      v155 = (*a15)[v208];
      objc_msgSend(v205, "commandBuffer");
      v156 = (void *)objc_claimAutoreleasedReturnValue();
      v157 = *(_QWORD *)(*a11 + 8 * v154);
      v159 = *(unsigned int *)(v157 + 64);
      v158 = *(unsigned int *)(v157 + 68);
      v160 = *(_QWORD *)(*a11 + 8 * v153);
      v161 = *(unsigned int *)(v160 + 64);
      v162 = *(unsigned int *)(v160 + 68);
      v227 = v156;
      objc_msgSend(v156, "blitCommandEncoder");
      v163 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v245, "length") < (unint64_t)(v158 * v159))
      {
        v164 = (void *)objc_msgSend(v211, "newBufferWithLength:options:", (v158 * v159), 0);
        v165 = v245;
        v245 = v164;

      }
      v166 = (void *)objc_msgSend(objc_retainAutorelease(v245), "contents");
      v167 = *(_QWORD *)(*a11 + 8 * v154);
      if (*(_BYTE *)(v167 + 80) && *(_QWORD *)(v167 + 32))
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v167 + 8) + 88))(*(_QWORD *)(v167 + 8), 1, "unknown location");
      memcpy(v166, *(const void **)(v167 + 32), (v158 * v159));
      nullsub_4(v245);
      v234[0] = v159;
      v234[1] = v158;
      v234[2] = 1;
      memset(v233, 0, sizeof(v233));
      objc_msgSend(v163, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v245, 0, v159, (v158 * v159), v234, v242, 0, 0, v233);
      if (objc_msgSend(v244, "length") < (unint64_t)(v162 * v161))
      {
        v168 = (void *)objc_msgSend(v211, "newBufferWithLength:options:", (v162 * v161), 0);
        v169 = v244;
        v244 = v168;

      }
      v170 = (void *)objc_msgSend(objc_retainAutorelease(v244), "contents");
      v171 = *(_QWORD *)(*a11 + 8 * v153);
      if (*(_BYTE *)(v171 + 80) && *(_QWORD *)(v171 + 32))
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)(v171 + 8) + 88))(*(_QWORD *)(v171 + 8), 1, "unknown location");
      memcpy(v170, *(const void **)(v171 + 32), (v162 * v161));
      nullsub_4(v244);
      v232[0] = v161;
      v232[1] = v162;
      v232[2] = 1;
      memset(v231, 0, sizeof(v231));
      objc_msgSend(v163, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v244, 0, v161, (v162 * v161), v232, v241, 0, 0, v231);
      objc_msgSend(v163, "endEncoding");

      v88 = v211;
      v172 = (void *)objc_msgSend(objc_retainAutorelease(v248), "contents");
      bzero(v172, objc_msgSend(v248, "length"));
      v173 = v248;
      objc_msgSend(v248, "length");
      nullsub_4(v173);
      sub_23950FFA4(v223, v227, v210, (uint64_t)&v207[64 * v153], a7, v203, v214, v215);
      sub_239510120(v223, v227, v210, (uint64_t)&v207[64 * v154], (uint64_t)&v207[64 * v153], a7, v206, v243, v241, v214, v215);
      v150 = v147;
      sub_239510304(v223, v227, v214, *a8 + 192 * v154, (float64x2_t *)(*a8 + 192 * v153), (uint64_t)&v207[64 * v154], v213, a7, v155, a10, v150, v220, v217, v239, v238, v242, v241, v240, v215,
        v204,
        v248,
        v247,
        v210,
        v202);
      sub_2395108C4(v223, v227, v213, v248, v246);
      sub_23971DB68();
      objc_msgSend(v227, "commit");
      kdebug_trace();
      objc_msgSend(v227, "waitUntilCompleted");
      objc_msgSend(v227, "error");
      v174 = (void *)objc_claimAutoreleasedReturnValue();
      v175 = v174;
      if (v174 && objc_msgSend(v174, "code"))
      {
        objc_msgSend(v175, "code");
        v230 = 0;
        v229 = 28946;
        v228 = 304024401;
        v177 = sub_239513174((char *)&v228);
        objc_msgSend(v175, "localizedDescription");
        v178 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v179 = (const char *)objc_msgSend(v178, "UTF8String");
        v180 = strlen(v179);
        if (v180 >= 0x7FFFFFFFFFFFFFF8)
          sub_23941A5AC();
        v181 = v180;
        if (v180 >= 0x17)
        {
          v183 = (v180 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v180 | 7) != 0x17)
            v183 = v180 | 7;
          v184 = v183 + 1;
          p_p = (std::string *)operator new(v183 + 1);
          __p.__r_.__value_.__l.__size_ = v181;
          __p.__r_.__value_.__r.__words[2] = v184 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        }
        else
        {
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v180;
          p_p = &__p;
          if (!v180)
            goto LABEL_103;
        }
        memmove(p_p, v179, v181);
LABEL_103:
        p_p->__r_.__value_.__s.__data_[v181] = 0;
        v185 = std::string::insert(&__p, 0, v177);
        v186 = (void *)v185->__r_.__value_.__r.__words[0];
        v187 = SHIBYTE(v185->__r_.__value_.__r.__words[2]);
        v185->__r_.__value_.__r.__words[0] = 0;
        v185->__r_.__value_.__l.__size_ = 0;
        v185->__r_.__value_.__r.__words[2] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);

        *a18 = 6013;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        sub_2396FCC6C((uint64_t)&v263, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v187 < 0)
          operator delete(v186);

        sub_2396FD3E8((uint64_t)v236);
        goto LABEL_110;
      }
      kdebug_trace();

      sub_2396FD3E8((uint64_t)v236);
      ++v208;
      v209 += 2;
      if (v201 == v208)
        goto LABEL_92;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_2396FCC6C((uint64_t)&v263, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_2396FD3E8((uint64_t)v236);
  }
LABEL_92:
  v176 = v147;
  if ((sub_239510A44(v223, v213, v205, v247, v246, v200, (uint64_t)&v263, a18, v176) & 1) == 0
    || (sub_2396FD7B0((uint64_t)a16) & 1) != 0)
  {
LABEL_110:
    v134 = 0;
  }
  else
  {
    sub_2395131BC(v223, v199, v213, v200, a18, 0.3, a9);
    v134 = sub_2396FD7B0((uint64_t)a16) ^ 1;
  }
  sub_2396FCD14((uint64_t)&v263);

LABEL_112:
  v188 = v249;
  if (v249)
  {
    v189 = v250;
    v190 = v249;
    if (v250 != v249)
    {
      do
      {
        v191 = (void *)*--v189;

      }
      while (v189 != v188);
      v190 = v249;
    }
    v250 = v188;
    operator delete(v190);
  }
  v192 = v252;
  if (v252)
  {
    v193 = v253;
    v194 = v252;
    if (v253 != v252)
    {
      do
      {
        v195 = (void *)*--v193;

      }
      while (v193 != v192);
      v194 = v252;
    }
    v253 = v192;
    operator delete(v194);
  }
  if (v255)
    operator delete(v255);
  if (v258)
    operator delete(v258);

  return v134;
}

void sub_239512654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34,void *a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,uint64_t a42,void *a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  char a73;
  int v73;
  void *v74;
  void *v75;
  void *v77;

  if (a72 < 0)
    operator delete(__p);
  if (v73 < 0)
    operator delete(v74);

  sub_2396FD3E8((uint64_t)&a73);
  sub_2396FCD14((uint64_t)&STACK[0x2F8]);
  v77 = (void *)STACK[0x2A8];

  sub_239513590((void **)&STACK[0x278]);
  sub_239513590((void **)&STACK[0x290]);
  if (v77)
  {
    STACK[0x2B0] = (unint64_t)v77;
    operator delete(v77);
  }
  if (STACK[0x2C0])
    operator delete((void *)STACK[0x2C0]);

  _Unwind_Resume(a1);
}

float64x2_t sub_239512A78@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v4;
  float64x2_t v5;
  unint64_t v6;
  double v7;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v19;
  float64x2_t v22;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v27;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  int8x16_t v37;
  float64x2_t v38;
  double v39;
  double v40;
  float64x2_t v41;
  int8x16_t v42;
  double v43;
  double v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v52;
  float64x2_t v55;
  int64x2_t v57;
  double v58;
  double v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  unint64_t v68;
  unint64_t v70;
  int64x2_t v71;
  float64x2_t v72;
  double v74;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v80;
  float64x2_t v83;
  float64x2_t v86;
  int64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  int8x16_t v92;
  unint64_t v93;
  double v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t result;
  unint64_t v102;
  float64x2_t v103;
  float64_t v104;
  float64_t v105;
  double v106;
  float64x2_t v107;
  unint64_t v108;
  float64_t v109;
  unint64_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float64x2_t v115;
  _BYTE v116[32];
  float64x2_t v117;
  double v118;
  float64x2_t v119;
  _BYTE v120[32];
  float64x2_t v121;
  double v122;

  v105 = *(double *)(a1 + 80);
  v104 = *(double *)(a1 + 112);
  v112 = *(int8x16_t *)(a1 + 96);
  v113 = *(int8x16_t *)(a1 + 64);
  v106 = *(double *)(a1 + 144);
  v114 = *(int8x16_t *)(a1 + 128);
  v4.f64[1] = *(float64_t *)(a1 + 136);
  v4.f64[0] = *(float64_t *)(a1 + 176);
  v103 = v4;
  v111 = *(int8x16_t *)(a1 + 160);
  *(_OWORD *)v120 = 0uLL;
  v121 = 0uLL;
  v119 = (float64x2_t)0x3FF0000000000000uLL;
  *(_QWORD *)&v120[16] = 0xBFF0000000000000;
  *(_QWORD *)&v120[24] = 0;
  v122 = -1.0;
  v5 = (float64x2_t)0x3FF0000000000000uLL;
  v6 = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
  *(_QWORD *)&v7 = vextq_s8(*(int8x16_t *)&v120[8], *(int8x16_t *)&v120[8], 8uLL).u64[0];
  _Q5 = 0uLL;
  *(_QWORD *)&v9 = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
  v10 = (float64x2_t)vzip1q_s64((int64x2_t)0x3FF0000000000000uLL, *(int64x2_t *)&v120[8]);
  v11 = (float64x2_t)vzip2q_s64((int64x2_t)0x3FF0000000000000uLL, *(int64x2_t *)&v120[8]);
  v12 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v10, 1.0), v11, (float64x2_t)0x3FF0000000000000uLL, 1), (float64x2_t)0, 0.0);
  _Q21 = (int64x2_t)vmulq_f64((float64x2_t)0, (float64x2_t)0x3FF0000000000000uLL);
  _D22 = 0;
  __asm { FMLA            D21, D22, V5.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + -1.0 * 0.0;
  v19 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v10, 0.0), v11, *(float64x2_t *)&v120[8], 1), (float64x2_t)0, 0.0);
  _Q23 = (int8x16_t)vmulq_f64((float64x2_t)0, *(float64x2_t *)&v120[8]);
  _D24 = 0xBFF0000000000000;
  __asm { FMLA            D23, D24, V5.D[1] }
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + -1.0 * 0.0;
  v22 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v10, 0.0), v11, (float64x2_t)0, 1), (float64x2_t)0, -1.0);
  _Q19 = vmulq_f64(_Q5, _Q5);
  _D20 = 0;
  __asm { FMLA            D19, D20, V5.D[1] }
  _Q19.f64[0] = _Q19.f64[0] + -1.0 * -1.0;
  v25 = (float64x2_t)xmmword_239EC6820;
  v26 = (float64x2_t)xmmword_239EC6830;
  v27 = (int64x2_t)vaddq_f64(v19, (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V27.2D, #-1.0 }
  *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, _Q27));
  _Q19.f64[1] = NAN;
  v29 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v12, (float64x2_t)xmmword_239EC6820)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v27, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v27)), vabsq_f64(v22))));
  v30 = -0.0;
  v107 = _Q27;
  if (v29 > 0.0001
    || (v31.f64[0] = 1.0,
        *(_QWORD *)&v31.f64[1] = v6,
        v32.f64[0] = v7,
        v32.f64[1] = *(float64_t *)&v120[8],
        v33 = vmulq_f64(v31, vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v9, v30), v32, -1.0)),
        fabs(0.0 * (v9 * *(double *)&v120[8] - v7 * 0.0)+ vsubq_f64(v33, (float64x2_t)vdupq_laneq_s64((int64x2_t)v33, 1)).f64[0]+ -1.0) > 0.0001))
  {
    if (v29 > 0.1
      || (*(_QWORD *)&v5.f64[1] = v6,
          v34 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v9, v30),
          v35.f64[0] = v7,
          v35.f64[1] = *(float64_t *)&v120[8],
          v36 = vmulq_f64(v5, vmlaq_n_f64(v34, v35, -1.0)),
          fabs(0.0 * (v9 * *(double *)&v120[8] - v7 * 0.0)+ vsubq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)).f64[0]+ -1.0) > 0.1))
    {
      sub_239EBEEB0();
    }
    sub_239516070(&v119);
    v26 = (float64x2_t)xmmword_239EC6830;
    v25 = (float64x2_t)xmmword_239EC6820;
    _Q27 = v107;
  }
  v37.i64[0] = *(_QWORD *)(a1 + 80);
  v38 = *(float64x2_t *)(a1 + 64);
  *(_QWORD *)&v39 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
  v40 = *(double *)(a1 + 112);
  v41 = *(float64x2_t *)(a1 + 96);
  v42.i64[0] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
  v43 = *(double *)(a1 + 144);
  _Q6 = *(float64x2_t *)(a1 + 128);
  *(_QWORD *)&v45 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
  *(_QWORD *)v116 = v37.i64[0];
  v115 = v38;
  *(double *)&v116[24] = v40;
  *(float64x2_t *)&v116[8] = v41;
  v118 = v43;
  v117 = _Q6;
  v46 = (float64x2_t)vzip1q_s64((int64x2_t)v38, (int64x2_t)v41);
  v47 = (float64x2_t)vzip2q_s64((int64x2_t)v38, (int64x2_t)v41);
  *(_QWORD *)&_Q20.f64[0] = v37.i64[0];
  _Q20.f64[1] = v40;
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v38.f64[0]), v47, v38, 1), _Q20, *(double *)v37.i64);
  _Q21 = (int64x2_t)vmulq_f64(_Q6, v38);
  _D22 = v38.f64[1];
  __asm { FMLA            D21, D22, V6.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + v43 * *(double *)v37.i64;
  v52 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v41.f64[0]), v47, v41, 1), _Q20, v40);
  _Q23 = (int8x16_t)vmulq_f64(_Q6, v41);
  _D24 = v41.f64[1];
  __asm { FMLA            D23, D24, V6.D[1] }
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + v43 * v40;
  v55 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, _Q6.f64[0]), v47, _Q6, 1), _Q20, v43);
  _Q19 = vmulq_f64(_Q6, _Q6);
  _Q20.f64[0] = _Q6.f64[1];
  __asm { FMLA            D19, D20, V6.D[1] }
  _Q19.f64[0] = _Q19.f64[0] + v43 * v43;
  v57 = (int64x2_t)vaddq_f64(v52, v26);
  *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q19, _Q27));
  _Q19.f64[1] = NAN;
  v58 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v49, v25)), _Q19), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v57, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v57)), vabsq_f64(v55))));
  v59 = -v40;
  if (v58 > 0.0001
    || (v60.f64[0] = v38.f64[0],
        v60.f64[1] = v39,
        v61.f64[0] = v45,
        v61.f64[1] = _Q6.f64[0],
        *(_QWORD *)&v62.f64[0] = v42.i64[0],
        v62.f64[1] = v41.f64[0],
        v63 = vmulq_f64(v60, vmlaq_n_f64(vmulq_n_f64(v61, v59), v62, v43)),
        fabs(*(double *)v37.i64 * (v45 * v41.f64[0] - *(double *)v42.i64 * _Q6.f64[0])+ vsubq_f64(v63, (float64x2_t)vdupq_laneq_s64((int64x2_t)v63, 1)).f64[0]+ -1.0) > 0.0001))
  {
    if (v58 > 0.1
      || (v38.f64[1] = v39,
          v64.f64[0] = v45,
          v64.f64[1] = _Q6.f64[0],
          v65 = vmulq_n_f64(v64, v59),
          *(_QWORD *)&v64.f64[0] = v42.i64[0],
          v64.f64[1] = v41.f64[0],
          v66 = vmulq_f64(v38, vmlaq_n_f64(v65, v64, v43)),
          fabs(*(double *)v37.i64 * (v45 * v41.f64[0] - *(double *)v42.i64 * _Q6.f64[0])+ vsubq_f64(v66, (float64x2_t)vdupq_laneq_s64((int64x2_t)v66, 1)).f64[0]+ -1.0) > 0.1))
    {
      sub_239EBEEB0();
    }
    sub_239516070(&v115);
    v43 = v118;
    v42 = *(int8x16_t *)&v116[16];
    _Q6 = v117;
    v38 = v115;
    v37 = *(int8x16_t *)v116;
    *(_QWORD *)&v45 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).u64[0];
    *(_QWORD *)&v40 = vextq_s8(v42, v42, 8uLL).u64[0];
    *(_QWORD *)&v41.f64[0] = vextq_s8(v37, v37, 8uLL).u64[0];
    *(_QWORD *)&v39 = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
    v26 = (float64x2_t)xmmword_239EC6830;
    v25 = (float64x2_t)xmmword_239EC6820;
    _Q27 = v107;
  }
  *(_QWORD *)&v67.f64[0] = vextq_s8(v113, v113, 8uLL).u64[0];
  v68 = vextq_s8(v112, v112, 8uLL).u64[0];
  _D24 = vextq_s8(v114, v114, 8uLL).u64[0];
  v70 = vextq_s8(v111, v111, 8uLL).u64[0];
  v71.i64[1] = *(_QWORD *)&v119.f64[1];
  v72 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v119, v38.f64[0]), *(float64x2_t *)&v120[8], v39), v121, *(double *)v37.i64);
  *(double *)v37.i64 = *(double *)v120 * v38.f64[0] + *(double *)&v120[24] * v39 + v122 * *(double *)v37.i64;
  _Q5 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v119, v41.f64[0]), *(float64x2_t *)&v120[8], *(double *)v42.i64), v121, v40);
  v74 = *(double *)v120 * v41.f64[0] + *(double *)&v120[24] * *(double *)v42.i64 + v122 * v40;
  _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v119, _Q6.f64[0]), *(float64x2_t *)&v120[8], v45), v121, v43);
  v76 = *(double *)v120 * _Q6.f64[0] + *(double *)&v120[24] * v45 + v122 * v43;
  *(_QWORD *)v120 = v37.i64[0];
  v119 = v72;
  *(double *)&v120[24] = v74;
  *(float64x2_t *)&v120[8] = _Q5;
  v122 = v76;
  v121 = _Q3;
  v77 = (float64x2_t)vzip1q_s64((int64x2_t)v72, (int64x2_t)_Q5);
  v78 = (float64x2_t)vzip2q_s64((int64x2_t)v72, (int64x2_t)_Q5);
  *(_QWORD *)&_Q18.f64[0] = v37.i64[0];
  _Q18.f64[1] = v74;
  v80 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v77, v72.f64[0]), v78, v72, 1), _Q18, *(double *)v37.i64);
  _D19 = v72.f64[1];
  __asm { FMLA            D6, D19, V3.D[1] }
  *(double *)v71.i64 = _D6 + v76 * *(double *)v37.i64;
  v83 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v77, _Q5.f64[0]), v78, _Q5, 1), _Q18, v74);
  _Q21 = (int8x16_t)vmulq_f64(_Q3, _Q5);
  _D6 = _Q5.f64[1];
  __asm { FMLA            D21, D6, V3.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + v76 * v74;
  v86 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v77, _Q3.f64[0]), v78, _Q3, 1), _Q18, v76);
  _Q17 = vmulq_f64(_Q3, _Q3);
  _Q18.f64[0] = _Q3.f64[1];
  __asm { FMLA            D17, D18, V3.D[1] }
  _Q17.f64[0] = _Q17.f64[0] + v76 * v76;
  v88 = (int64x2_t)vaddq_f64(v83, v26);
  *(_QWORD *)&_Q17.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q17, _Q27));
  _Q17.f64[1] = NAN;
  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v80, v25)), _Q17), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v88, _Q21, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v71, v88)), vabsq_f64(v86)))) > 0.0001)goto LABEL_14;
  v89 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
  v90 = vmulq_f64(v89, vmlaq_n_f64(vmulq_n_f64(_Q3, -v74), _Q5, v76));
  __asm { FMLA            D6, D5, V3.D[1] }
  if (fabs(*(double *)v37.i64 * _D6 + vsubq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v90, 1), v90).f64[0] + -1.0) > 0.0001)
  {
LABEL_14:
    v109 = v67.f64[0];
    v110 = _D24;
    v108 = v68;
    v102 = v70;
    sub_239516070(&v119);
    v70 = v102;
    v68 = v108;
    v67.f64[0] = v109;
    _D24 = v110;
    v76 = v122;
    _Q3 = v121;
    v92 = *(int8x16_t *)&v120[16];
    v37 = *(int8x16_t *)v120;
    v72 = v119;
    v93 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
    *(_QWORD *)&v74 = vextq_s8(v92, v92, 8uLL).u64[0];
    *(_QWORD *)&_Q5.f64[0] = vextq_s8(v37, v37, 8uLL).u64[0];
    *(_QWORD *)&v89.f64[0] = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
  }
  else
  {
    v92.i64[0] = vextq_s8((int8x16_t)_Q5, (int8x16_t)_Q5, 8uLL).u64[0];
    v93 = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
  }
  *(_QWORD *)&_Q3.f64[1] = v93;
  v72.f64[1] = v89.f64[0];
  *(_QWORD *)&_Q16.f64[0] = v111.i64[0];
  *(_QWORD *)&_Q16.f64[1] = v70;
  _Q17 = vsubq_f64((float64x2_t)0, _Q16);
  *(_QWORD *)&v96 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v103);
  *(_QWORD *)&_Q16.f64[0] = v113.i64[0];
  *(_QWORD *)&_Q16.f64[1] = v112.i64[0];
  *(_QWORD *)&v67.f64[1] = v68;
  v97 = vmlaq_laneq_f64(vmulq_n_f64(_Q16, _Q17.f64[0]), v67, _Q17, 1);
  _Q16.f64[0] = v105;
  _Q16.f64[1] = v104;
  v98 = vmlaq_n_f64(v97, _Q16, v96);
  __asm { FMLA            D16, D24, V17.D[1] }
  _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v106, v96);
  *(_QWORD *)&_Q5.f64[1] = v92.i64[0];
  v99 = vmulq_f64(v72, (float64x2_t)0);
  v100 = vmulq_f64((float64x2_t)v37.u64[0], (float64x2_t)0);
  *a2 = vaddq_f64(vmlaq_f64(vmlaq_f64(v72, (float64x2_t)0, _Q5), (float64x2_t)0, _Q3), (float64x2_t)0);
  a2[1] = vaddq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)v37.u64[0], (float64x2_t)0, (float64x2_t)*(unint64_t *)&v74), (float64x2_t)0, (float64x2_t)*(unint64_t *)&v76), (float64x2_t)0);
  a2[2] = vaddq_f64(vmlaq_f64(vaddq_f64(_Q5, v99), (float64x2_t)0, _Q3), (float64x2_t)0);
  a2[3] = vaddq_f64(vmlaq_f64(vaddq_f64((float64x2_t)*(unint64_t *)&v74, v100), (float64x2_t)0, (float64x2_t)*(unint64_t *)&v76), (float64x2_t)0);
  a2[4] = vaddq_f64(vaddq_f64(_Q3, vmlaq_f64(v99, (float64x2_t)0, _Q5)), (float64x2_t)0);
  a2[5] = vaddq_f64(vaddq_f64((float64x2_t)*(unint64_t *)&v76, vmlaq_f64(v100, (float64x2_t)0, (float64x2_t)*(unint64_t *)&v74)), (float64x2_t)0);
  result = vaddq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64((float64x2_t)v37.u64[0], -v98.f64[0]), (float64x2_t)*(unint64_t *)&v74, v98.f64[1], 0), (float64x2_t)*(unint64_t *)&v76, _Q16.f64[0], 0), (float64x2_t)xmmword_239EC6850);
  a2[6] = vaddq_f64(vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v72, -v98.f64[0]), _Q5, v98.f64[1], 0), _Q3, _Q16.f64[0], 0), (float64x2_t)0);
  a2[7] = result;
  return result;
}

_BYTE *sub_239513174(char *a1)
{
  char v1;
  _BYTE *result;
  char v3;

  v1 = *a1;
  a1[2] ^= *a1;
  a1[3] ^= v1;
  a1[4] ^= v1;
  a1[5] ^= v1;
  a1[6] = 0;
  v3 = a1[1];
  result = a1 + 1;
  *result = v1 ^ v3;
  return result;
}

uint64_t sub_2395131BC(uint64_t a1, void *a2, unsigned int a3, void *a4, _DWORD *a5, float a6, float a7)
{
  id v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  const std::string::value_type *v23;
  id v24;
  const char *v25;
  size_t v26;
  std::string::size_type v27;
  std::string *p_dst;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  void *v33;
  int v34;
  _DWORD *v36;
  id v37;
  id v38;
  std::string __dst;
  unint64_t v40;
  int64x2_t v41;
  unint64_t v42;
  int64x2_t v43;
  unsigned int v44;
  float v45;
  float v46;
  char v47[16];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v45 = a7;
  v46 = a6;
  v38 = a4;
  sub_2397A9494(a1 + 16);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "commandBuffer");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  v44 = a3;
  v16 = sub_239508E98(a1, 4);
  sub_2397A9494((uint64_t)v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v17, "threadExecutionWidth");
  v19 = a3;
  objc_msgSend(v15, "computeCommandEncoder");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "setBuffer:offset:atIndex:", v13, 0, 0);
  objc_msgSend(v20, "setBytes:length:atIndex:", &v46, 4, 1);
  objc_msgSend(v20, "setBytes:length:atIndex:", &v45, 4, 2);
  objc_msgSend(v20, "setBytes:length:atIndex:", &v44, 4, 3);
  objc_msgSend(v20, "setBuffer:offset:atIndex:", v38, 0, 4);
  objc_msgSend(v20, "setComputePipelineState:", v17);
  v42 = (v18 + v19 - 1) / v18;
  v43 = vdupq_n_s64(1uLL);
  v40 = v18;
  v41 = v43;
  objc_msgSend(v20, "dispatchThreadgroups:threadsPerThreadgroup:", &v42, &v40);
  objc_msgSend(v20, "endEncoding");
  nullsub_4(v15);
  sub_23971DB68();
  objc_msgSend(v15, "commit");
  objc_msgSend(v15, "waitUntilCompleted");
  objc_msgSend(v15, "error");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = v21;
  if (!v21 || !objc_msgSend(v21, "code"))
  {
    v29 = 1;
    goto LABEL_17;
  }
  v37 = v13;
  objc_msgSend(v22, "code");
  strcpy(v47, "*kN@_Y^y^OZ\n");
  v23 = sub_239510ECC((uint64_t)v47);
  v36 = a5;
  objc_msgSend(v22, "localizedDescription");
  v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v25 = (const char *)objc_msgSend(v24, "UTF8String");
  v26 = strlen(v25);
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    p_dst = (std::string *)operator new(v30 + 1);
    __dst.__r_.__value_.__l.__size_ = v27;
    __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
    p_dst = &__dst;
    if (!v26)
      goto LABEL_12;
  }
  memmove(p_dst, v25, v27);
LABEL_12:
  p_dst->__r_.__value_.__s.__data_[v27] = 0;
  v32 = std::string::insert(&__dst, 0, v23);
  v33 = (void *)v32->__r_.__value_.__r.__words[0];
  v34 = SHIBYTE(v32->__r_.__value_.__r.__words[2]);
  v32->__r_.__value_.__r.__words[0] = 0;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v13 = v37;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);

  *v36 = 6013;
  if (v34 < 0)
    operator delete(v33);
  v29 = 0;
LABEL_17:

  return v29;
}

void sub_2395134F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void **sub_239513590(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2395135EC(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        v12 = v2;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v2 - 2) = v13;
            operator delete(v13);
          }
          v2 = v12;
        }
        while (v12 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

_BYTE *sub_239513718(char *a1)
{
  char v1;
  _BYTE *result;
  char v3;

  v1 = *a1;
  a1[2] ^= *a1;
  a1[3] ^= v1;
  a1[4] ^= v1;
  a1[5] ^= v1;
  a1[6] ^= v1;
  a1[7] ^= v1;
  a1[8] = 0;
  v3 = a1[1];
  result = a1 + 1;
  *result = v1 ^ v3;
  return result;
}

uint64_t sub_239513778(uint64_t a1, const char **a2)
{
  const char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = strlen(*a2);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v5;
  v7 = (void *)a1;
  if (v5)
LABEL_8:
    memmove(v7, v4, v6);
  *((_BYTE *)v7 + v6) = 0;
  v10 = (void *)(a1 + 24);
  v11 = a2[1];
  v12 = strlen(v11);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v15 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v10;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v12;
    if (!v12)
      goto LABEL_17;
  }
  memmove(v10, v11, v13);
LABEL_17:
  *((_BYTE *)v10 + v13) = 0;
  return a1;
}

void sub_2395138B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_2395138D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x28uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v14 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    v28 = *(_QWORD *)a1;
    v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(_QWORD *)v14 = *v29;
LABEL_89:
      *v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v29)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v29)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD *)a1;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      if (v29)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v28 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239513CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239513CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x28uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v26[2] = *(_QWORD *)(a3 + 16);
  }
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_23951412C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239514140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239514158(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_239428940((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

_QWORD *sub_239514384(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2395146A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395146B4(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

