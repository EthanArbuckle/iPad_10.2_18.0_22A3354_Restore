void sub_2395CFD6C(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_250ADFE38;
  v2 = a1 + 1;
  v3 = (std::__shared_weak_count *)a1[11];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v6 = (_QWORD *)a1[4];
    if (v6 != v2)
    {
LABEL_6:
      if (!v6)
        goto LABEL_11;
      v7 = 5;
LABEL_10:
      (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
      JUMPOUT(0x23B83E31CLL);
    }
  }
  v7 = 4;
  v6 = v2;
  goto LABEL_10;
}

char *sub_2395CFE24(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (char *)operator new(0x70uLL);
  *(_QWORD *)v2 = &off_250ADFE38;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    *((_QWORD *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((_QWORD *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 88);
  *((_QWORD *)v2 + 10) = *(_QWORD *)(a1 + 80);
  *((_QWORD *)v2 + 11) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *((_OWORD *)v2 + 6) = *(_OWORD *)(a1 + 96);
  return v2;
}

void sub_2395CFED8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395CFEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)a2 = &off_250ADFE38;
  v4 = a2 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
      *(_QWORD *)(a2 + 32) = result;
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  v6 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v6;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 76);
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

uint64_t sub_2395CFFAC(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t result;

  v2 = a1 + 8;
  v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    result = *(_QWORD *)(a1 + 32);
    if (result != v2)
      goto LABEL_6;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  result = *(_QWORD *)(a1 + 32);
  if (result == v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_6:
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_2395D0064(char *__p)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v2 = __p + 8;
  v3 = (std::__shared_weak_count *)*((_QWORD *)__p + 11);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_5:
    v6 = (char *)*((_QWORD *)__p + 4);
    if (v6 != v2)
      goto LABEL_6;
LABEL_9:
    v7 = 4;
    v6 = v2;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = (char *)*((_QWORD *)__p + 4);
  if (v6 == v2)
    goto LABEL_9;
LABEL_6:
  if (v6)
  {
    v7 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  operator delete(__p);
}

void sub_2395D0100(uint64_t a1)
{
  sub_2395CFBE4(a1 + 8, a1 + 40);
}

uint64_t sub_2395D012C(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, _QWORD *a5, _QWORD *a6, unsigned __int8 a7, uint64_t a8, _QWORD *a9, char a10)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t i;
  _QWORD *v20;
  void *v21;
  float32x4_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  __int32 *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t j;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t k;
  uint64_t v35;
  char *v36;
  unsigned int *v37;
  size_t v38;
  unint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char **v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  float32x4_t *v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  char *v60;
  uint64_t v61;
  __int32 *v62;
  int v63;
  int v64;
  float v65;
  uint64_t *v66;
  unint64_t v67;
  BOOL v69;
  BOOL v70;
  uint64_t v71;
  int8x8_t *v72;
  float32x4_t *v73;
  float32x4_t *v74;
  uint64_t v75;
  int8x8_t v76;
  int8x8_t v77;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t v80;
  float32x4_t *v81;
  float32x4_t *v82;
  int8x16_t *v83;
  int8x16_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x8_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t **v93;
  float *v94;
  float32x4_t *v95;
  unint64_t v96;
  float *v97;
  uint64_t v98;
  float32x4_t *v99;
  uint64_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float v106;
  float v107;
  float v108;
  BOOL v109;
  float *v110;
  float32x4_t *v111;
  unint64_t v112;
  float *v113;
  uint64_t v114;
  float32x4_t *v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float *v128;
  float32x4_t *v129;
  unint64_t v130;
  float *v131;
  uint64_t v132;
  float32x4_t *v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t *v136;
  float32x4_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  float v141;
  float v142;
  unint64_t v143;
  unint64_t v144;
  float32x4_t *v145;
  unint64_t v146;
  float32x4_t v147;
  unint64_t v148;
  float *v149;
  float32x4_t *v150;
  unint64_t v151;
  float32x4_t v152;
  unint64_t v153;
  float *v154;
  uint64_t **v155;
  void *v156;
  float32x4_t v157;
  float *v158;
  float32x4_t *v159;
  unint64_t v160;
  float *v161;
  uint64_t v162;
  float32x4_t *v163;
  uint64_t v164;
  float32x4_t v165;
  int v166;
  float m;
  float v168;
  float v169;
  float v170;
  _QWORD *v171;
  float *v172;
  float32x4_t *v173;
  unint64_t v174;
  float *v175;
  uint64_t v176;
  float32x4_t *v177;
  uint64_t v178;
  float32x4_t v179;
  uint64_t v180;
  char *v181;
  unsigned int *v182;
  BOOL v183;
  _BYTE *__src;
  unsigned int *v185;
  void *__p;
  void *v187;
  char *v188;
  unsigned int v189;
  void *v190;
  unsigned int *v191;

  if (a5[3])
  {
    v16 = (_QWORD *)a5[2];
    if (v16)
    {
      do
      {
        v20 = (_QWORD *)*v16;
        v21 = (void *)v16[3];
        if (v21)
        {
          v16[4] = v21;
          operator delete(v21);
        }
        operator delete(v16);
        v16 = v20;
      }
      while (v20);
    }
    a5[2] = 0;
    v17 = a5[1];
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *(_QWORD *)(*a5 + 8 * i) = 0;
    }
    a5[3] = 0;
  }
  if (!*(_QWORD *)(a1 + 64)
    || *(_BYTE *)(a1 + 33)
    || !*(_DWORD *)(a1 + 36)
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2
    || *(_QWORD *)(a1 + 344))
  {
    return 0;
  }
  sub_239429CA8((uint64_t)a2, a3, (char **)&v190);
  v180 = a7;
  if (a7 || a10)
  {
    v24 = a2[4];
    if (v24)
    {
      v25 = 0;
      v26 = (__int32 *)(a2[6] + 20);
      v183 = 1;
      v22.i64[0] = 0xB4000000B4000000;
      do
      {
        if (((*(_QWORD *)(a2[3] + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
        {
          v23.i32[0] = *v26;
          if (*(float *)v26 > -0.00000011921)
            break;
        }
        v183 = ++v25 < v24;
        v26 += 6;
      }
      while (v24 != v25);
    }
    else
    {
      v183 = 0;
    }
    if (a7 && a6[3])
    {
      v27 = (_QWORD *)a6[2];
      if (v27)
      {
        do
        {
          v28 = (_QWORD *)*v27;
          operator delete(v27);
          v27 = v28;
        }
        while (v28);
      }
      a6[2] = 0;
      v29 = a6[1];
      if (v29)
      {
        for (j = 0; j != v29; ++j)
          *(_QWORD *)(*a6 + 8 * j) = 0;
      }
      a6[3] = 0;
    }
    if (a10 && a9[3])
    {
      v31 = (_QWORD *)a9[2];
      if (v31)
      {
        do
        {
          v32 = (_QWORD *)*v31;
          operator delete(v31);
          v31 = v32;
        }
        while (v32);
      }
      a9[2] = 0;
      v33 = a9[1];
      if (v33)
      {
        for (k = 0; k != v33; ++k)
          *(_QWORD *)(*a9 + 8 * k) = 0;
      }
      a9[3] = 0;
    }
  }
  else
  {
    v183 = 0;
  }
  v35 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v35)
  {
    v36 = (char *)operator new(4 * v35);
    bzero(v36, 4 * v35);
    __src = v36;
    v181 = &v36[4 * v35];
  }
  else
  {
    v181 = 0;
    __src = 0;
  }
  v37 = (unsigned int *)v190;
  v182 = v191;
  if (v190 != v191)
  {
    v38 = v181 - __src;
    do
    {
      v39 = *v37;
      if (a2[4] <= v39 || (*(_QWORD *)(a2[3] + 8 * (v39 >> 6)) & (1 << v39)) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 124, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v40 = (uint64_t *)(a2[9] + 24 * v39);
      v189 = 0;
      v41 = sub_2395CC008(*(_QWORD *)(a1 + 64), v40, *(double *)v22.i64, v23);
      v189 = v41;
      v42 = a5[1];
      if (v42)
      {
        v43 = v41;
        *(int8x8_t *)v22.f32 = vcnt_s8((int8x8_t)v42);
        v22.i16[0] = vaddlv_u8(*(uint8x8_t *)v22.f32);
        if (v22.u32[0] > 1uLL)
        {
          v44 = v41;
          if (v42 <= v41)
            v44 = v41 % v42;
        }
        else
        {
          v44 = ((_DWORD)v42 - 1) & v41;
        }
        v45 = *(char ***)(*a5 + 8 * v44);
        if (v45)
        {
          v46 = *v45;
          if (*v45)
          {
            if (v22.u32[0] < 2uLL)
            {
              v47 = v42 - 1;
              while (1)
              {
                v49 = *((_QWORD *)v46 + 1);
                if (v49 == v41)
                {
                  if (*((_DWORD *)v46 + 4) == v41)
                    goto LABEL_77;
                }
                else if ((v49 & v47) != v44)
                {
                  goto LABEL_71;
                }
                v46 = *(char **)v46;
                if (!v46)
                  goto LABEL_71;
              }
            }
            do
            {
              v48 = *((_QWORD *)v46 + 1);
              if (v48 == v41)
              {
                if (*((_DWORD *)v46 + 4) == v41)
                  goto LABEL_77;
              }
              else
              {
                if (v48 >= v42)
                  v48 %= v42;
                if (v48 != v44)
                  break;
              }
              v46 = *(char **)v46;
            }
            while (v46);
          }
        }
      }
LABEL_71:
      LODWORD(v185) = v41;
      v187 = 0;
      v188 = 0;
      __p = 0;
      if (v181 != __src)
      {
        if ((v38 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v50 = (char *)operator new(v38);
        v51 = &v50[4 * ((v181 - __src) >> 2)];
        __p = v50;
        v188 = v51;
        memcpy(v50, __src, v38);
        v187 = v51;
      }
      v46 = sub_2395D0F14((uint64_t)a5, (unsigned int *)&v185, (uint64_t)&v185);
      if (__p)
      {
        v187 = __p;
        operator delete(__p);
      }
      v43 = v189;
LABEL_77:
      v52 = *(_QWORD *)(a1 + 80);
      if (v43 >= (*(_QWORD *)(a1 + 88) - v52) >> 3)
      {
        sub_239A444D4((uint64_t)"unknown file", 262, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v53 = *(_QWORD *)(v52 + 8 * v43);
      if (!v53)
      {
        sub_239A444D4((uint64_t)"unknown file", 264, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v54 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v54)
      {
        v55 = *v40;
        v56 = *(float32x4_t **)(v53 + 32);
        v57 = *((_QWORD *)v46 + 3);
        if (v54 < 8)
        {
          v58 = 0;
LABEL_82:
          v59 = &v56->f32[v58];
          v60 = (char *)(v55 + v58);
          v61 = v54 - v58;
          v62 = (__int32 *)(v57 + 4 * v58);
          do
          {
            v64 = *v60++;
            v63 = v64;
            v65 = *v59++;
            v23.i32[0] = *v62;
            v22.f32[0] = (float)((float)v63 - v65) + *(float *)v62;
            *v62++ = v22.i32[0];
            --v61;
          }
          while (v61);
          goto LABEL_84;
        }
        v58 = 0;
        v67 = v57 + 4 * v54;
        v69 = v57 < (unint64_t)v56->u64 + 4 * v54 && (unint64_t)v56 < v67;
        v70 = v55 >= v67 || v57 >= v55 + v54;
        if (!v70 || v69)
          goto LABEL_82;
        if (v54 >= 0x10)
        {
          v58 = v54 & 0xFFFFFFF0;
          v80 = v58;
          v81 = (float32x4_t *)*((_QWORD *)v46 + 3);
          v82 = v56;
          v83 = (int8x16_t *)*v40;
          do
          {
            v84 = *v83++;
            v85 = v84;
            v87 = v82[2];
            v86 = v82[3];
            v89 = *v82;
            v88 = v82[1];
            v82 += 4;
            v90 = (int8x8_t)vextq_s8(v85, v85, 8uLL).u64[0];
            v91 = v81[2];
            v23 = (int8x16_t)vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v90, *(int8x8_t *)v84.i8), 8uLL), 8uLL))), v86), v81[3]);
            v92 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v85.i8, *(int8x8_t *)v85.i8), 8uLL), 8uLL))), v88), v81[1]);
            *v81 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)v84.i8), 8uLL), 8uLL))), v89), *v81);
            v81[1] = v92;
            v22 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v90, *(int8x8_t *)v84.i8), 8uLL), 8uLL))), v87), v91);
            v81[2] = v22;
            v81[3] = (float32x4_t)v23;
            v81 += 4;
            v80 -= 16;
          }
          while (v80);
          if (v58 == v54)
            goto LABEL_84;
          if ((v54 & 8) == 0)
            goto LABEL_82;
        }
        else
        {
          v58 = 0;
        }
        v71 = v58;
        v58 = v54 & 0xFFFFFFF8;
        v72 = (int8x8_t *)(v55 + v71);
        v73 = (float32x4_t *)((char *)v56 + 4 * v71);
        v74 = (float32x4_t *)(v57 + 4 * v71);
        v75 = v71 - v58;
        do
        {
          v76 = *v72++;
          v77 = v76;
          v79 = *v73;
          v78 = v73[1];
          v73 += 2;
          v23 = (int8x16_t)vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v77, v77), 8uLL), 8uLL))), v78), v74[1]);
          v22 = vaddq_f32(vsubq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v77, v77), 8uLL), 8uLL))), v79), *v74);
          *v74 = v22;
          v74[1] = (float32x4_t)v23;
          v74 += 2;
          v75 += 8;
        }
        while (v75);
        if (v58 != v54)
          goto LABEL_82;
      }
LABEL_84:
      if (v183 && *(_BYTE *)(a1 + 136) != 0)
      {
        if (a2[4] <= v39 || (*(_QWORD *)(a2[3] + 8 * (v39 >> 6)) & (1 << v39)) == 0)
        {
          sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v22.i32[0] = *(_DWORD *)(a2[6] + 24 * v39 + 20);
        if (v22.f32[0] <= 0.00000011921)
        {
          if (!a10)
            goto LABEL_48;
          v185 = &v189;
          v66 = sub_2394F126C((uint64_t)a9, &v189, (uint64_t)&unk_239EC6E98, &v185);
        }
        else
        {
          if (!v180)
            goto LABEL_48;
          v185 = &v189;
          v66 = sub_2394F126C((uint64_t)a6, &v189, (uint64_t)&unk_239EC6E98, &v185);
        }
        ++*((_DWORD *)v66 + 5);
      }
LABEL_48:
      ++v37;
    }
    while (v37 != v182);
  }
  if (*(_DWORD *)(a1 + 328) != 3)
  {
    sub_239A444D4((uint64_t)"unknown file", 285, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v93 = (uint64_t **)a5[2];
  if (v93)
  {
    while (1)
    {
      switch(*(_DWORD *)(a1 + 328))
      {
        case 1:
          v95 = (float32x4_t *)v93[3];
          v94 = (float *)v93[4];
          if (v95 != (float32x4_t *)v94)
          {
            v96 = (char *)v94 - (char *)v95 - 4;
            v97 = (float *)v93[3];
            if (v96 < 0x1C)
              goto LABEL_222;
            v98 = (v96 >> 2) + 1;
            v97 = &v95->f32[v98 & 0x7FFFFFFFFFFFFFF8];
            v99 = v95 + 1;
            v100 = v98 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v101 = v99[-1];
              v102 = (int8x16_t)vcltzq_f32(v101);
              v103 = vsqrtq_f32(vabsq_f32(v101));
              v104 = vsqrtq_f32(vabsq_f32(*v99));
              v22 = (float32x4_t)vbslq_s8(v102, (int8x16_t)vnegq_f32(v103), (int8x16_t)v103);
              v105 = vbslq_s8((int8x16_t)vcltzq_f32(*v99), (int8x16_t)vnegq_f32(v104), (int8x16_t)v104);
              v99[-1] = v22;
              *v99 = (float32x4_t)v105;
              v99 += 2;
              v100 -= 8;
            }
            while (v100);
            if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_222:
              do
              {
                v106 = sqrtf(fabsf(*v97));
                if (*v97 >= 0.0)
                  v22.f32[0] = v106;
                else
                  v22.f32[0] = -v106;
                *v97++ = v22.f32[0];
              }
              while (v97 != v94);
            }
          }
          goto LABEL_119;
        case 2:
          v136 = (float32x4_t *)v93[3];
          v137 = (float32x4_t *)v93[4];
          v138 = (char *)v137 - (char *)v136;
          if (v137 == v136)
            goto LABEL_119;
          v139 = 0;
          v140 = v138 >> 2;
          v141 = 0.0;
          do
            v141 = v141 + v136->f32[v139++];
          while (v140 != v139);
          v142 = fabsf(v141);
          v22.i32[0] = -8388609;
          if (v141 >= 0.0)
            v22.f32[0] = 3.4028e38;
          if (v142 >= 0.00000011921)
          {
            v22.f32[0] = 1.0 / v141;
            if ((unint64_t)v138 >= 0x20)
            {
              v144 = v140 & 0xFFFFFFFFFFFFFFF8;
              v150 = v136 + 1;
              v151 = v140 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v152 = vmulq_n_f32(*v150, v22.f32[0]);
                v150[-1] = vmulq_n_f32(v150[-1], v22.f32[0]);
                *v150 = v152;
                v150 += 2;
                v151 -= 8;
              }
              while (v151);
              if (v140 == v144)
                goto LABEL_119;
            }
            else
            {
              v144 = 0;
            }
            v153 = v140 - v144;
            v154 = &v136->f32[v144];
            do
            {
              *v154 = v22.f32[0] * *v154;
              ++v154;
              --v153;
            }
            while (v153);
          }
          else
          {
            if ((unint64_t)v138 >= 0x20)
            {
              v143 = v140 & 0xFFFFFFFFFFFFFFF8;
              v145 = v136 + 1;
              v146 = v140 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v147 = vmulq_n_f32(*v145, v22.f32[0]);
                v145[-1] = vmulq_n_f32(v145[-1], v22.f32[0]);
                *v145 = v147;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v140 == v143)
                goto LABEL_119;
            }
            else
            {
              v143 = 0;
            }
            v148 = v140 - v143;
            v149 = &v136->f32[v143];
            do
            {
              *v149 = v22.f32[0] * *v149;
              ++v149;
              --v148;
            }
            while (v148);
          }
LABEL_119:
          v93 = (uint64_t **)*v93;
          if (!v93)
          {
            v155 = (uint64_t **)a5[2];
            if (*(_DWORD *)(a1 + 332))
            {
              v156 = __src;
              goto LABEL_180;
            }
            v156 = __src;
            for (m = 0.0; v155; v155 = (uint64_t **)*v155)
              m = m + sub_2396F54E8((float32x4_t *)v155[3], ((char *)v155[4] - (char *)v155[3]) >> 2);
LABEL_194:
            v168 = fabsf(m);
            v169 = -3.4028e38;
            if (m >= 0.0)
              v169 = 3.4028e38;
            if (v168 < 0.00000011921)
              v170 = v169;
            else
              v170 = 1.0 / m;
            v155 = (uint64_t **)a5[2];
            if (v155)
            {
              v171 = (_QWORD *)a5[2];
              do
              {
                v173 = (float32x4_t *)v171[3];
                v172 = (float *)v171[4];
                if (v173 != (float32x4_t *)v172)
                {
                  v174 = (char *)v172 - (char *)v173 - 4;
                  v175 = (float *)v171[3];
                  if (v174 < 0x1C)
                    goto LABEL_223;
                  v176 = (v174 >> 2) + 1;
                  v175 = &v173->f32[v176 & 0x7FFFFFFFFFFFFFF8];
                  v177 = v173 + 1;
                  v178 = v176 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v179 = vmulq_n_f32(*v177, v170);
                    v177[-1] = vmulq_n_f32(v177[-1], v170);
                    *v177 = v179;
                    v177 += 2;
                    v178 -= 8;
                  }
                  while (v178);
                  if (v176 != (v176 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_223:
                    do
                    {
                      *v175 = v170 * *v175;
                      ++v175;
                    }
                    while (v175 != v172);
                  }
                }
                v171 = (_QWORD *)*v171;
              }
              while (v171);
LABEL_180:
              if (v155)
              {
                v157.i64[0] = 0x4300000043000000;
                v157.i64[1] = 0x4300000043000000;
                do
                {
                  v159 = (float32x4_t *)v155[3];
                  v158 = (float *)v155[4];
                  if (v159 != (float32x4_t *)v158)
                  {
                    v160 = (char *)v158 - (char *)v159 - 4;
                    v161 = (float *)v155[3];
                    if (v160 < 0x1C)
                      goto LABEL_224;
                    v162 = (v160 >> 2) + 1;
                    v161 = &v159->f32[v162 & 0x7FFFFFFFFFFFFFF8];
                    v163 = v159 + 1;
                    v164 = v162 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v165 = vrndaq_f32(vmulq_f32(*v163, v157));
                      v163[-1] = vrndaq_f32(vmulq_f32(v163[-1], v157));
                      *v163 = v165;
                      v163 += 2;
                      v164 -= 8;
                    }
                    while (v164);
                    if (v162 != (v162 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_224:
                      do
                      {
                        *v161 = roundf(*v161 * 128.0);
                        ++v161;
                      }
                      while (v161 != v158);
                    }
                  }
                  v155 = (uint64_t **)*v155;
                }
                while (v155);
              }
            }
            goto LABEL_209;
          }
          break;
        case 3:
          sub_2396F55B0((float32x4_t *)v93[3], ((char *)v93[4] - (char *)v93[3]) >> 2, *(double *)v22.i64);
          goto LABEL_119;
        case 4:
          v22.f32[0] = sqrtf(sub_2396F54E8((float32x4_t *)v93[3], ((char *)v93[4] - (char *)v93[3]) >> 2));
          v126 = fabsf(v22.f32[0]);
          v127 = 1.0 / v22.f32[0];
          v109 = v22.f32[0] < 0.0;
          v22.i32[0] = -8388609;
          if (!v109)
            v22.f32[0] = 3.4028e38;
          if (v126 >= 0.00000011921)
            v22.f32[0] = v127;
          v129 = (float32x4_t *)v93[3];
          v128 = (float *)v93[4];
          if (v129 != (float32x4_t *)v128)
          {
            v130 = (char *)v128 - (char *)v129 - 4;
            v131 = (float *)v93[3];
            if (v130 < 0x1C)
              goto LABEL_225;
            v132 = (v130 >> 2) + 1;
            v131 = &v129->f32[v132 & 0x7FFFFFFFFFFFFFF8];
            v133 = v129 + 1;
            v134 = v132 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v135 = vmulq_n_f32(*v133, v22.f32[0]);
              v133[-1] = vmulq_n_f32(v133[-1], v22.f32[0]);
              *v133 = v135;
              v133 += 2;
              v134 -= 8;
            }
            while (v134);
            if (v132 != (v132 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_225:
              do
              {
                *v131 = v22.f32[0] * *v131;
                ++v131;
              }
              while (v131 != v128);
            }
          }
          goto LABEL_119;
        case 5:
          v22.f32[0] = sub_2396F54E8((float32x4_t *)v93[3], ((char *)v93[4] - (char *)v93[3]) >> 2);
          v107 = fabsf(v22.f32[0]);
          v108 = 1.0 / v22.f32[0];
          v109 = v22.f32[0] < 0.0;
          v22.i32[0] = -8388609;
          if (!v109)
            v22.f32[0] = 3.4028e38;
          if (v107 >= 0.00000011921)
            v22.f32[0] = v108;
          v111 = (float32x4_t *)v93[3];
          v110 = (float *)v93[4];
          if (v111 != (float32x4_t *)v110)
          {
            v112 = (char *)v110 - (char *)v111 - 4;
            v113 = (float *)v93[3];
            if (v112 < 0x1C)
              goto LABEL_226;
            v114 = (v112 >> 2) + 1;
            v113 = &v111->f32[v114 & 0x7FFFFFFFFFFFFFF8];
            v115 = v111 + 1;
            v116 = v114 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v117 = vmulq_n_f32(v115[-1], v22.f32[0]);
              v118 = vmulq_n_f32(*v115, v22.f32[0]);
              v119 = (int8x16_t)vcltzq_f32(v117);
              v120 = (int8x16_t)vcltzq_f32(v118);
              v121 = vsqrtq_f32(vabsq_f32(v117));
              v122 = vsqrtq_f32(vabsq_f32(v118));
              v115[-1] = (float32x4_t)vbslq_s8(v119, (int8x16_t)vnegq_f32(v121), (int8x16_t)v121);
              *(int8x16_t *)v115 = vbslq_s8(v120, (int8x16_t)vnegq_f32(v122), (int8x16_t)v122);
              v115 += 2;
              v116 -= 8;
            }
            while (v116);
            if (v114 != (v114 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_226:
              do
              {
                v123 = v22.f32[0] * *v113;
                v124 = sqrtf(fabsf(v123));
                if (v123 >= 0.0)
                  v125 = v124;
                else
                  v125 = -v124;
                *v113++ = v125;
              }
              while (v113 != v110);
            }
          }
          goto LABEL_119;
        default:
          goto LABEL_119;
      }
    }
  }
  v166 = *(_DWORD *)(a1 + 332);
  v156 = __src;
  if (!v166)
  {
    m = 0.0;
    goto LABEL_194;
  }
LABEL_209:
  if (v156)
    operator delete(v156);
  if (v190)
  {
    v191 = (unsigned int *)v190;
    operator delete(v190);
  }
  return 1;
}

void sub_2395D0E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_2395D0F14(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(_QWORD *)v10 = *v17;
LABEL_61:
      *v17 = v10;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v17)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v17)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2395D1244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395D1258(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *__p[2];
  uint64_t v9;

  __p[0] = 0;
  __p[1] = 0;
  v9 = 0;
  sub_2395D1350(a2, (uint64_t *)__p);
  v3 = *(_QWORD **)(a1 + 312);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 320))
  {
    v4 = sub_2395D1B94((void ***)(a1 + 304), (uint64_t)__p);
    v5 = (char *)__p[0];
    *(_QWORD *)(a1 + 312) = v4;
    if (v5)
    {
      v6 = (char *)__p[1];
      if (__p[1] == v5)
      {
        __p[1] = v5;
        operator delete(v5);
      }
      else
      {
        do
        {
          v7 = (void *)*((_QWORD *)v6 - 3);
          if (v7)
          {
            *((_QWORD *)v6 - 2) = v7;
            operator delete(v7);
          }
          v6 -= 32;
        }
        while (v6 != v5);
        __p[1] = v5;
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    *(_OWORD *)v3 = *(_OWORD *)__p;
    v3[2] = v9;
    *(_QWORD *)(a1 + 312) = v3 + 3;
  }
}

void sub_2395D133C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2394E9400(&a9);
  _Unwind_Resume(a1);
}

void sub_2395D1350(_QWORD *a1, uint64_t *a2)
{
  unint64_t v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  unsigned int *v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char **v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  size_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  size_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  float *v72;
  float *v73;
  int8x16_t *v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  float32x4_t *v79;
  int8x16_t *v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t *v86;
  float *v87;
  float32x4_t *v88;
  int8x8_t *v89;
  uint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float v93;
  char *v94;
  char *v95;
  _QWORD *v96;
  _QWORD *v97;
  __int128 v99;
  uint64_t v100;
  unsigned int *v101;
  unsigned int *v102;
  char *v103;

  v101 = 0;
  v102 = 0;
  v103 = 0;
  v3 = a1[3];
  if (v3)
  {
    if (v3 >> 62)
      sub_2394189F8();
    v4 = (char *)operator new(4 * v3);
    v5 = &v4[4 * v3];
    v101 = (unsigned int *)v4;
    v102 = (unsigned int *)v4;
    v103 = v5;
    v97 = a1;
    v6 = (uint64_t *)a1[2];
    if (v6)
      goto LABEL_4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
    v97 = a1;
    v6 = (uint64_t *)a1[2];
    if (v6)
    {
LABEL_4:
      v7 = (uint64_t)v102;
      v8 = v4;
      while (1)
      {
        while (v4 < v5)
        {
          *(_DWORD *)v4 = *((_DWORD *)v6 + 4);
          v4 += 4;
          v7 = (uint64_t)v4;
          v6 = (uint64_t *)*v6;
          if (!v6)
            goto LABEL_35;
        }
        v9 = (v4 - v8) >> 2;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62)
        {
          v102 = (unsigned int *)v7;
          sub_2394189F8();
        }
        if ((v5 - v8) >> 1 > v10)
          v10 = (v5 - v8) >> 1;
        if ((unint64_t)(v5 - v8) >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
        {
          if (v11 >> 62)
          {
            v102 = (unsigned int *)v7;
            sub_239418A80();
          }
          v12 = operator new(4 * v11);
          v13 = (unsigned int *)&v12[4 * v9];
          *v13 = *((_DWORD *)v6 + 4);
          v7 = (uint64_t)(v13 + 1);
          if (v4 == v8)
            goto LABEL_21;
        }
        else
        {
          v12 = 0;
          v13 = (unsigned int *)(4 * v9);
          *(_DWORD *)(4 * v9) = *((_DWORD *)v6 + 4);
          v7 = 4 * v9 + 4;
          if (v4 == v8)
            goto LABEL_21;
        }
        v14 = v4 - 4 - v8;
        if (v14 >= 0xBC)
        {
          if (&v12[v4 - v8 - 4 - (v14 & 0xFFFFFFFFFFFFFFFCLL)] > &v12[v4 - v8 - 4])
          {
            v15 = v4;
          }
          else if (&v4[-(v14 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v4 - 4)
          {
            v15 = v4;
          }
          else if ((unint64_t)(v8 - v12) >= 0x20)
          {
            v17 = (v14 >> 2) + 1;
            v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
            v15 = &v4[-v18];
            v13 = (unsigned int *)((char *)v13 - v18);
            v19 = &v12[4 * v9 - 16];
            v20 = (__int128 *)(v4 - 16);
            v21 = v17 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v22 = *v20;
              *(v19 - 1) = *(v20 - 1);
              *v19 = v22;
              v19 -= 2;
              v20 -= 2;
              v21 -= 8;
            }
            while (v21);
            if (v17 == (v17 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_21;
          }
          else
          {
            v15 = v4;
          }
        }
        else
        {
          v15 = v4;
        }
        do
        {
          v16 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *--v13 = v16;
        }
        while (v15 != v8);
LABEL_21:
        v5 = &v12[4 * v11];
        v101 = v13;
        v103 = v5;
        if (v8)
          operator delete(v8);
        v8 = (char *)v13;
        v6 = (uint64_t *)*v6;
        v4 = (char *)v7;
        if (!v6)
        {
LABEL_35:
          v102 = (unsigned int *)v7;
          break;
        }
      }
    }
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v23 = v97;
  sub_2395D1B00((char **)&v99, v97[3]);
  v24 = a2;
  v25 = *a2;
  if (*a2)
  {
    v26 = a2[1];
    v27 = (void *)*a2;
    if (v26 != v25)
    {
      do
      {
        v28 = *(void **)(v26 - 24);
        if (v28)
        {
          *(_QWORD *)(v26 - 16) = v28;
          operator delete(v28);
        }
        v26 -= 32;
      }
      while (v26 != v25);
      v27 = (void *)*a2;
    }
    a2[1] = v25;
    operator delete(v27);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  *(_OWORD *)a2 = v99;
  a2[2] = v100;
  v29 = v102;
  if (v102 != v101)
  {
    v30 = 0;
    v29 = v101;
    do
    {
      v31 = v29[v30];
      v32 = *v24;
      *(_DWORD *)(*v24 + 32 * v30) = v31;
      v33 = (int8x8_t)v23[1];
      if (!*(_QWORD *)&v33)
        goto LABEL_123;
      v34 = (uint8x8_t)vcnt_s8(v33);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        v35 = v31;
        if (*(_QWORD *)&v33 <= v31)
          v35 = v31 % *(_QWORD *)&v33;
      }
      else
      {
        v35 = (v33.i32[0] - 1) & v31;
      }
      v36 = *(uint64_t ***)(*v23 + 8 * v35);
      if (!v36 || (v37 = *v36) == 0)
LABEL_123:
        sub_23941D898("unordered_map::at: key not found");
      if (v34.u32[0] < 2uLL)
      {
        v38 = *(_QWORD *)&v33 - 1;
        while (1)
        {
          v40 = v37[1];
          if (v40 == v31)
          {
            if (*((_DWORD *)v37 + 4) == (_DWORD)v31)
              goto LABEL_68;
          }
          else if ((v40 & v38) != v35)
          {
            goto LABEL_123;
          }
          v37 = (uint64_t *)*v37;
          if (!v37)
            goto LABEL_123;
        }
      }
      while (1)
      {
        v39 = v37[1];
        if (v39 == v31)
          break;
        if (v39 >= *(_QWORD *)&v33)
          v39 %= *(_QWORD *)&v33;
        if (v39 != v35)
          goto LABEL_123;
LABEL_58:
        v37 = (uint64_t *)*v37;
        if (!v37)
          goto LABEL_123;
      }
      if (*((_DWORD *)v37 + 4) != (_DWORD)v31)
        goto LABEL_58;
LABEL_68:
      v41 = (_QWORD *)(v32 + 32 * v30);
      v42 = (char **)(v41 + 1);
      v43 = (char *)v41[1];
      v44 = v37[4] - v37[3];
      v45 = v44 >> 2;
      v46 = v41 + 2;
      v47 = (char *)v41[2];
      v48 = v47 - v43;
      v49 = (v44 >> 2) - (v47 - v43);
      if (v44 >> 2 <= (unint64_t)(v47 - v43))
      {
        v23 = v97;
        if (v44 >> 2 < (unint64_t)(v47 - v43))
          *v46 = &v43[v45];
      }
      else
      {
        v52 = v41[3];
        v51 = v41 + 3;
        v50 = v52;
        if (v52 - (uint64_t)v47 >= v49)
        {
          bzero(v42[1], v49);
          *v46 = &v47[v49];
          v23 = v97;
        }
        else
        {
          v96 = v51;
          if (v44 < 0)
            sub_2394189F8();
          v53 = v50 - (_QWORD)v43;
          v54 = 2 * (v50 - (_QWORD)v43);
          v55 = v45;
          if (v54 <= v45)
            v54 = v45;
          if (v53 >= 0x3FFFFFFFFFFFFFFFLL)
            v56 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v56 = v54;
          v57 = v56;
          v95 = (char *)operator new(v56);
          v94 = &v95[v48];
          bzero(&v95[v48], v49);
          if (v47 == v43)
          {
            v23 = v97;
            *v42 = v94;
            *v46 = &v95[v55];
            *v96 = &v95[v57];
            if (v47)
              goto LABEL_99;
          }
          else
          {
            if (v48 < 8)
            {
              v59 = v95;
              v58 = v96;
              v60 = &v95[v48];
              goto LABEL_96;
            }
            v59 = v95;
            v58 = v96;
            v60 = &v95[v48];
            if ((unint64_t)(v43 - v95) < 0x20)
              goto LABEL_96;
            if (v48 >= 0x20)
            {
              v61 = v48 & 0xFFFFFFFFFFFFFFE0;
              v62 = &v95[v48 - 16];
              v63 = v47 - 16;
              v64 = v48 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v65 = *(_OWORD *)v63;
                *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
                *(_OWORD *)v62 = v65;
                v62 -= 32;
                v63 -= 32;
                v64 -= 32;
              }
              while (v64);
              if (v48 != v61)
              {
                if ((v48 & 0x18) == 0)
                {
                  v60 = &v94[-v61];
                  v47 -= v61;
                  goto LABEL_96;
                }
                goto LABEL_91;
              }
            }
            else
            {
              v61 = 0;
LABEL_91:
              v60 = &v94[-(v48 & 0xFFFFFFFFFFFFFFF8)];
              v66 = &v95[&v47[-v61] - v43 - 8];
              v67 = &v47[-v61 - 8];
              v68 = v61 - (v48 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v69 = *(_QWORD *)v67;
                v67 -= 8;
                *(_QWORD *)v66 = v69;
                v66 -= 8;
                v68 += 8;
              }
              while (v68);
              v47 -= v48 & 0xFFFFFFFFFFFFFFF8;
              if (v48 != (v48 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_96:
                v70 = v60 - 1;
                do
                {
                  v71 = *--v47;
                  *v70-- = v71;
                }
                while (v47 != v43);
              }
            }
            v47 = v43;
            v23 = v97;
            *v42 = v59;
            *v46 = &v59[v55];
            *v58 = &v59[v57];
            if (v43)
LABEL_99:
              operator delete(v47);
          }
        }
      }
      v73 = (float *)v37[3];
      v72 = (float *)v37[4];
      v24 = a2;
      if (v73 != v72)
      {
        v74 = *(int8x16_t **)(*a2 + 32 * v30 + 8);
        v75 = (char *)v72 - (char *)v73 - 4;
        if (v75 < 0x1C
          || (v74 < (int8x16_t *)((char *)v73 + (v75 & 0xFFFFFFFFFFFFFFFCLL) + 4)
            ? (v76 = v73 >= (float *)((char *)v74->i32 + (v75 >> 2) + 1))
            : (v76 = 1),
              !v76))
        {
          do
          {
LABEL_118:
            v93 = *v73++;
            v74->i8[0] = (int)v93;
            v74 = (int8x16_t *)((char *)v74 + 1);
          }
          while (v73 != v72);
          goto LABEL_47;
        }
        v77 = (v75 >> 2) + 1;
        if (v75 >= 0x7C)
        {
          v78 = v77 & 0x7FFFFFFFFFFFFFE0;
          v79 = (float32x4_t *)(v73 + 16);
          v80 = v74 + 1;
          v81 = v77 & 0x7FFFFFFFFFFFFFE0;
          do
          {
            *(int16x4_t *)v82.i8 = vmovn_s32(vcvtq_s32_f32(v79[-2]));
            v82.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[-1]));
            *(int16x4_t *)v83.i8 = vmovn_s32(vcvtq_s32_f32(v79[-4]));
            v83.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[-3]));
            v84 = vuzp1q_s8(v83, v82);
            *(int16x4_t *)v82.i8 = vmovn_s32(vcvtq_s32_f32(v79[2]));
            v82.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[3]));
            *(int16x4_t *)v85.i8 = vmovn_s32(vcvtq_s32_f32(*v79));
            v85.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(v79[1]));
            v80[-1] = v84;
            *v80 = vuzp1q_s8(v85, v82);
            v79 += 8;
            v80 += 2;
            v81 -= 32;
          }
          while (v81);
          if (v77 != v78)
          {
            if ((v77 & 0x18) == 0)
            {
              v73 += v78;
              v74 = (int8x16_t *)((char *)v74 + v78);
              goto LABEL_118;
            }
            goto LABEL_113;
          }
        }
        else
        {
          v78 = 0;
LABEL_113:
          v86 = (int8x16_t *)((char *)v74 + (v77 & 0x7FFFFFFFFFFFFFF8));
          v87 = &v73[v77 & 0x7FFFFFFFFFFFFFF8];
          v88 = (float32x4_t *)&v73[v78];
          v89 = (int8x8_t *)&v74->i8[v78];
          v90 = v78 - (v77 & 0x7FFFFFFFFFFFFFF8);
          do
          {
            v91 = *v88;
            v92 = v88[1];
            v88 += 2;
            *v89++ = vuzp1_s8((int8x8_t)vmovn_s32(vcvtq_s32_f32(v91)), (int8x8_t)vmovn_s32(vcvtq_s32_f32(v92)));
            v90 += 8;
          }
          while (v90);
          v74 = v86;
          v73 = v87;
          if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_118;
        }
      }
LABEL_47:
      ++v30;
      v29 = v101;
    }
    while (v30 < v102 - v101);
  }
  if (v29)
  {
    v102 = v29;
    operator delete(v29);
  }
}

void sub_2395D1AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char **sub_2395D1B00(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59)
      sub_2394189F8();
    v4 = (char *)operator new(32 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[32 * a2];
    a1[2] = v5;
    do
    {
      *(_DWORD *)v4 = 0;
      *((_QWORD *)v4 + 2) = 0;
      *((_QWORD *)v4 + 3) = 0;
      *((_QWORD *)v4 + 1) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2395D1B74(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC0D78((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

char *sub_2395D1B94(void ***a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;
  void **v16;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  void *v21;

  v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (a1[2] - *a1) > v4)
    v4 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_239418A80();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v9;
    a1[1] = (void **)v11;
    a1[2] = (void **)v10;
    if (!v13)
      return v11;
    goto LABEL_23;
  }
  do
  {
    v14 = *(_OWORD *)(v13 - 3);
    v13 -= 3;
    *(_OWORD *)(v9 - 24) = v14;
    v9 -= 24;
    *((_QWORD *)v9 + 2) = v13[2];
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
  }
  while (v13 != v12);
  v15 = *a1;
  v13 = a1[1];
  *a1 = (void **)v9;
  a1[1] = (void **)v11;
  a1[2] = (void **)v10;
  if (v13 != v15)
  {
    v16 = v13;
    do
    {
      v19 = (char *)*(v16 - 3);
      v16 -= 3;
      v18 = v19;
      if (v19)
      {
        v20 = (char *)*(v13 - 2);
        v17 = v18;
        if (v20 != v18)
        {
          do
          {
            v21 = (void *)*((_QWORD *)v20 - 3);
            if (v21)
            {
              *((_QWORD *)v20 - 2) = v21;
              operator delete(v21);
            }
            v20 -= 32;
          }
          while (v20 != v18);
          v17 = *v16;
        }
        *(v13 - 2) = v18;
        operator delete(v17);
      }
      v13 = v16;
    }
    while (v16 != v15);
    v13 = v15;
  }
  if (v13)
LABEL_23:
    operator delete(v13);
  return v11;
}

void sub_2395D1D28(_QWORD *a1, void **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unsigned int *v14;
  unint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  unsigned int *v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  int8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  _BYTE *v49;
  __int128 v50;
  void *v51;
  unsigned int *v52;
  unsigned int *v53;
  char *v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  v4 = a1[3];
  if (v4)
  {
    if (v4 >> 62)
      sub_2394189F8();
    v5 = (char *)operator new(4 * v4);
    v6 = &v5[4 * v4];
    v52 = (unsigned int *)v5;
    v53 = (unsigned int *)v5;
    v54 = v6;
    v7 = (uint64_t *)a1[2];
    if (v7)
      goto LABEL_4;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    v7 = (uint64_t *)a1[2];
    if (v7)
    {
LABEL_4:
      v8 = (uint64_t)v53;
      v9 = v5;
      while (1)
      {
        while (v5 < v6)
        {
          *(_DWORD *)v5 = *((_DWORD *)v7 + 4);
          v5 += 4;
          v8 = (uint64_t)v5;
          v7 = (uint64_t *)*v7;
          if (!v7)
            goto LABEL_35;
        }
        v10 = (v5 - v9) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
        {
          v53 = (unsigned int *)v8;
          sub_2394189F8();
        }
        if ((v6 - v9) >> 1 > v11)
          v11 = (v6 - v9) >> 1;
        if ((unint64_t)(v6 - v9) >= 0x7FFFFFFFFFFFFFFCLL)
          v12 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v12 = v11;
        if (v12)
        {
          if (v12 >> 62)
          {
            v53 = (unsigned int *)v8;
            sub_239418A80();
          }
          v13 = operator new(4 * v12);
          v14 = (unsigned int *)&v13[4 * v10];
          *v14 = *((_DWORD *)v7 + 4);
          v8 = (uint64_t)(v14 + 1);
          if (v5 == v9)
            goto LABEL_21;
        }
        else
        {
          v13 = 0;
          v14 = (unsigned int *)(4 * v10);
          *(_DWORD *)(4 * v10) = *((_DWORD *)v7 + 4);
          v8 = 4 * v10 + 4;
          if (v5 == v9)
            goto LABEL_21;
        }
        v15 = v5 - 4 - v9;
        if (v15 >= 0xBC)
        {
          if (&v13[v5 - v9 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v13[v5 - v9 - 4])
          {
            v16 = v5;
          }
          else if (&v5[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v5 - 4)
          {
            v16 = v5;
          }
          else if ((unint64_t)(v9 - v13) >= 0x20)
          {
            v18 = (v15 >> 2) + 1;
            v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
            v16 = &v5[-v19];
            v14 = (unsigned int *)((char *)v14 - v19);
            v20 = &v13[4 * v10 - 16];
            v21 = (__int128 *)(v5 - 16);
            v22 = v18 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v23 = *v21;
              *(v20 - 1) = *(v21 - 1);
              *v20 = v23;
              v20 -= 2;
              v21 -= 2;
              v22 -= 8;
            }
            while (v22);
            if (v18 == (v18 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_21;
          }
          else
          {
            v16 = v5;
          }
        }
        else
        {
          v16 = v5;
        }
        do
        {
          v17 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--v14 = v17;
        }
        while (v16 != v9);
LABEL_21:
        v6 = &v13[4 * v12];
        v52 = v14;
        v54 = v6;
        if (v9)
          operator delete(v9);
        v9 = (char *)v14;
        v7 = (uint64_t *)*v7;
        v5 = (char *)v8;
        if (!v7)
        {
LABEL_35:
          v53 = (unsigned int *)v8;
          break;
        }
      }
    }
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  sub_2395D23C4((char **)&v50, a1[3]);
  v24 = (char *)*a2;
  if (*a2)
  {
    v25 = (char *)a2[1];
    v26 = *a2;
    if (v25 != v24)
    {
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        if (v27)
        {
          *((_QWORD *)v25 - 2) = v27;
          operator delete(v27);
        }
        v25 -= 32;
      }
      while (v25 != v24);
      v26 = *a2;
    }
    a2[1] = v24;
    operator delete(v26);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  *(_OWORD *)a2 = v50;
  a2[2] = v51;
  v28 = v53;
  if (v53 == v52)
    goto LABEL_75;
  v29 = 0;
  v28 = v52;
  while (2)
  {
    v30 = v28[v29];
    v31 = *a2;
    *((_DWORD *)*a2 + 8 * v29) = v30;
    v32 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v32)
      goto LABEL_78;
    v33 = (uint8x8_t)vcnt_s8(v32);
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.u32[0] > 1uLL)
    {
      v34 = v30;
      if (*(_QWORD *)&v32 <= v30)
        v34 = v30 % *(_QWORD *)&v32;
    }
    else
    {
      v34 = (v32.i32[0] - 1) & v30;
    }
    v35 = *(uint64_t ***)(*a1 + 8 * v34);
    if (!v35 || (v36 = *v35) == 0)
LABEL_78:
      sub_23941D898("unordered_map::at: key not found");
    if (v33.u32[0] < 2uLL)
    {
      v37 = *(_QWORD *)&v32 - 1;
      while (1)
      {
        v39 = v36[1];
        if (v39 == v30)
        {
          if (*((_DWORD *)v36 + 4) == (_DWORD)v30)
            goto LABEL_68;
        }
        else if ((v39 & v37) != v34)
        {
          goto LABEL_78;
        }
        v36 = (uint64_t *)*v36;
        if (!v36)
          goto LABEL_78;
      }
    }
    while (1)
    {
      v38 = v36[1];
      if (v38 == v30)
        break;
      if (v38 >= *(_QWORD *)&v32)
        v38 %= *(_QWORD *)&v32;
      if (v38 != v34)
        goto LABEL_78;
LABEL_58:
      v36 = (uint64_t *)*v36;
      if (!v36)
        goto LABEL_78;
    }
    if (*((_DWORD *)v36 + 4) != (_DWORD)v30)
      goto LABEL_58;
LABEL_68:
    v40 = (uint64_t)v31 + 32 * v29;
    v43 = *(_QWORD *)(v40 + 8);
    v41 = v40 + 8;
    v42 = v43;
    v44 = (_BYTE *)v36[3];
    v45 = (v36[4] - (uint64_t)v44) >> 2;
    v46 = (*(_QWORD *)(v41 + 8) - v43) >> 2;
    v47 = v45 >= v46;
    v48 = v45 - v46;
    if (v48 != 0 && v47)
    {
      sub_2394807B4(v41, v48);
      v44 = (_BYTE *)v36[3];
    }
    else if (!v47)
    {
      *(_QWORD *)(v41 + 8) = v42 + 4 * v45;
    }
    v49 = (_BYTE *)v36[4];
    if (v49 != v44)
      memmove(*((void **)*a2 + 4 * v29 + 1), v44, v49 - v44);
    ++v29;
    v28 = v52;
    if (v29 < v53 - v52)
      continue;
    break;
  }
LABEL_75:
  if (v28)
  {
    v53 = v28;
    operator delete(v28);
  }
}

void sub_2395D2190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float *sub_2395D21C8(float *result, uint64_t *a2, double a3, double a4, float32x4_t a5, uint64_t a6, _QWORD *a7)
{
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  float v24;
  unsigned int *v25;

  v9 = result;
  if (a7[3])
  {
    result = (float *)a7[2];
    if (result)
    {
      do
      {
        v10 = *(float **)result;
        operator delete(result);
        result = v10;
      }
      while (v10);
    }
    a7[2] = 0;
    v11 = a7[1];
    if (v11)
    {
      for (i = 0; i != v11; ++i)
        *(_QWORD *)(*a7 + 8 * i) = 0;
    }
    a7[3] = 0;
  }
  v13 = *((_QWORD *)v9 + 1);
  if (*((_QWORD *)v9 + 2) != v13)
  {
    v14 = 0;
    while (1)
    {
      v16 = *((_QWORD *)v9 + 38);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v9 + 39) - v16) >> 3) <= v14)
        sub_239EC0D4C((uint64_t)result, (uint64_t)a2);
      v18 = *a2;
      v17 = a2[1];
      if (*a2 != v17)
        break;
      v15 = 0.0;
LABEL_11:
      v25 = (unsigned int *)(v13 + 4 * v14);
      result = (float *)sub_2394AAB74((uint64_t)a7, v25, (uint64_t)&unk_239EC6E98, &v25);
      result[5] = v15;
      ++v14;
      v13 = *((_QWORD *)v9 + 1);
      if (v14 >= (*((_QWORD *)v9 + 2) - v13) >> 2)
        return result;
    }
    v19 = (uint64_t *)(v16 + 24 * v14);
    v22 = *v19;
    v21 = v19 + 1;
    v20 = v22;
    v15 = 0.0;
    while (1)
    {
      if (v20 == *v21)
        goto LABEL_11;
      if (*(_DWORD *)v18 != *(_DWORD *)v20)
      {
        if (*(_DWORD *)v18 >= *(_DWORD *)v20)
          v20 += 32;
        else
          v18 += 32;
        goto LABEL_16;
      }
      v23 = *((_DWORD *)v9 + 83);
      if (v23 == 1)
        break;
      if (!v23)
      {
        *(float *)&a3 = sub_2396F516C(*(_QWORD *)(v18 + 8), *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 2, a3, a4, a5);
LABEL_28:
        v15 = v15 + *(float *)&a3;
      }
      v18 += 32;
      v20 += 32;
      v17 = a2[1];
LABEL_16:
      if (v18 == v17)
        goto LABEL_11;
    }
    if (*((_DWORD *)v9 + 82) != 3)
      sub_239EC0DC0();
    v24 = sub_2396F516C(*(_QWORD *)(v18 + 8), *(_QWORD *)(v20 + 8), (uint64_t)(*(_QWORD *)(v18 + 16) - *(_QWORD *)(v18 + 8)) >> 2, a3, a4, a5)* 0.000061035;
    *(float *)&a4 = v9[85];
    LODWORD(a3) = 0;
    if (v24 > *(float *)&a4)
    {
      *(float *)&a3 = powf(fabsf(v24), v9[84]);
      *(float *)&a4 = -*(float *)&a3;
      if (v24 < 0.0)
        *(float *)&a3 = -*(float *)&a3;
    }
    goto LABEL_28;
  }
  return result;
}

char **sub_2395D23C4(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59)
      sub_2394189F8();
    v4 = (char *)operator new(32 * a2);
    *a1 = v4;
    a1[1] = v4;
    v5 = &v4[32 * a2];
    a1[2] = v5;
    do
    {
      *(_DWORD *)v4 = 0;
      *((_QWORD *)v4 + 2) = 0;
      *((_QWORD *)v4 + 3) = 0;
      *((_QWORD *)v4 + 1) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2395D2438(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC0D78((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395D2458(uint64_t a1, __int32 a2, uint64_t a3, void **a4)
{
  uint64_t result;
  size_t v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v10;
  uint64_t v11;
  __int32 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  _DWORD *v28;
  uint64_t v29;
  float32x4_t *v30;
  char *v31;
  char **v32;
  char *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  float *v41;
  char *v42;
  int8x8_t *v43;
  float32x4_t *v44;
  uint64_t v45;
  int8x8_t v46;
  int v47;
  unint64_t v48;
  float32x4_t *v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x8_t v52;
  __int128 v53;
  void *v54;

  if (!*(_QWORD *)(a1 + 64))
    return 0;
  if (!*(_BYTE *)(a1 + 33))
  {
    if (*(_DWORD *)(a1 + 36))
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3);
      v7 = *(__int32 **)(a1 + 8);
      v8 = *(__int32 **)(a1 + 16);
      if (v6 == v8 - v7 && !*(_QWORD *)(a1 + 344))
      {
        v10 = wmemchr(v7, a2, v6);
        v12 = v10 ? v10 : v8;
        if (v12 != *(__int32 **)(a1 + 16))
        {
          v13 = ((uint64_t)v12 - *(_QWORD *)(a1 + 8)) >> 2;
          v14 = *(_QWORD *)(a1 + 304);
          if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 312) - v14) >> 3) <= v13)
            sub_239EC0D4C((uint64_t)v10, v11);
          v15 = (uint64_t *)(v14 + 24 * v13);
          v16 = v15 + 1;
          sub_2395D23C4((char **)&v53, (v15[1] - *v15) >> 5);
          v17 = (char *)*a4;
          if (*a4)
          {
            v18 = (char *)a4[1];
            v19 = *a4;
            if (v18 != v17)
            {
              do
              {
                v20 = (void *)*((_QWORD *)v18 - 3);
                if (v20)
                {
                  *((_QWORD *)v18 - 2) = v20;
                  operator delete(v20);
                }
                v18 -= 32;
              }
              while (v18 != v17);
              v19 = *a4;
            }
            a4[1] = v17;
            operator delete(v19);
          }
          v21 = (_DWORD *)v53;
          *(_OWORD *)a4 = v53;
          a4[2] = v54;
          v22 = *v15;
          if (*v16 == *v15)
            return 1;
          v23 = 0;
          v24 = v21;
          while (1)
          {
            v25 = v22 + 32 * v23;
            v27 = (unint64_t *)(v25 + 8);
            v26 = *(_QWORD *)(v25 + 8);
            v24[8 * v23] = *(_DWORD *)v25;
            v28 = &v24[8 * v23];
            v29 = (uint64_t)(v28 + 2);
            v30 = (float32x4_t *)*((_QWORD *)v28 + 1);
            v33 = *(char **)(v25 + 16);
            v32 = (char **)(v25 + 16);
            v31 = v33;
            v34 = (unint64_t)&v33[-v26];
            v36 = *((_QWORD *)v28 + 2);
            v35 = v28 + 4;
            v37 = (v36 - (uint64_t)v30) >> 2;
            if (v34 <= v37)
            {
              if (v34 < v37)
                *v35 = (char *)v30 + 4 * v34;
            }
            else
            {
              sub_2394807B4(v29, v34 - v37);
              v26 = *v27;
              v31 = *v32;
              v24 = *a4;
              v30 = (float32x4_t *)*((_QWORD *)*a4 + 4 * v23 + 1);
            }
            if ((char *)v26 == v31)
              goto LABEL_24;
            v38 = (unint64_t)&v31[-v26];
            if ((unint64_t)&v31[-v26] >= 8
              && (v30 < (float32x4_t *)v31 ? (v39 = v26 >= (unint64_t)v30->u64 + 4 * v38) : (v39 = 1), v39))
            {
              if (v38 < 0x10)
              {
                v40 = 0;
LABEL_38:
                v41 = &v30->f32[v38 & 0xFFFFFFFFFFFFFFF8];
                v42 = (char *)(v26 + (v38 & 0xFFFFFFFFFFFFFFF8));
                v43 = (int8x8_t *)(v26 + v40);
                v44 = (float32x4_t *)((char *)v30 + 4 * v40);
                v45 = v40 - (v38 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v46 = *v43++;
                  *v44 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v46, v46), 8uLL), 8uLL)));
                  v44[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v46, v46), 8uLL), 8uLL)));
                  v44 += 2;
                  v45 += 8;
                }
                while (v45);
                if (v38 == (v38 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_24;
                goto LABEL_43;
              }
              v40 = v38 & 0xFFFFFFFFFFFFFFF0;
              v48 = v38 & 0xFFFFFFFFFFFFFFF0;
              v49 = v30;
              v50 = (int8x16_t *)v26;
              do
              {
                v51 = *v50++;
                v52 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
                *v49 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
                v49[1] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
                v49[2] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v52, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
                v49[3] = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v52, *(int8x8_t *)v51.i8), 8uLL), 8uLL)));
                v49 += 4;
                v48 -= 16;
              }
              while (v48);
              if (v38 == v40)
                goto LABEL_24;
              if ((v38 & 8) != 0)
                goto LABEL_38;
              v42 = (char *)(v26 + v40);
              v41 = &v30->f32[v40];
            }
            else
            {
              v41 = (float *)v30;
              v42 = (char *)v26;
            }
            do
            {
LABEL_43:
              v47 = *v42++;
              *v41++ = (float)v47;
            }
            while (v42 != v31);
LABEL_24:
            ++v23;
            v22 = *v15;
            result = 1;
            if (v23 >= (*v16 - *v15) >> 5)
              return result;
          }
        }
      }
    }
    return 0;
  }
  return 0;
}

uint64_t sub_2395D27BC@<X0>(unsigned int *a1@<X0>, char *a2@<X1>, unsigned __int8 *a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0x90uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_250ADFCE0;
  result = sub_2395CD93C((uint64_t)(v8 + 3), *a1, *a2, 0, *a3);
  *a4 = result;
  a4[1] = (uint64_t)v8;
  return result;
}

void sub_2395D2828(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2395D2840(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v32 = 0;
  std::istream::read();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
  {
    *(_BYTE *)a2 = v32 != 0;
    std::istream::read();
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
    {
      std::istream::read();
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0)
      {
        if (!*(_BYTE *)(a2 + 1))
        {
          v31 = 0;
          std::istream::read();
          std::istream::read();
          return;
        }
        if ((_DWORD)a3)
        {
          v8 = operator new(a3);
          bzero(v8, a3);
        }
        else
        {
          v8 = 0;
        }
        std::istream::read();
        if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
          goto LABEL_10;
        v9 = (_QWORD *)(a2 + 56);
        v10 = *(_QWORD *)(a2 + 56);
        v11 = *(_QWORD *)(a2 + 64);
        v12 = (v11 - v10) >> 4;
        v13 = a3 - v12;
        if (a3 <= v12)
        {
          if (a3 < v12)
          {
            v14 = v10 + 16 * a3;
            while (v11 != v14)
            {
              v15 = *(std::__shared_weak_count **)(v11 - 8);
              if (v15)
              {
                p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                do
                  v17 = __ldaxr(p_shared_owners);
                while (__stlxr(v17 - 1, p_shared_owners));
                if (!v17)
                {
                  ((void (*)(std::__shared_weak_count *, unint64_t))v15->__on_zero_shared)(v15, v13);
                  std::__shared_weak_count::__release_weak(v15);
                }
              }
              v11 -= 16;
            }
            *(_QWORD *)(a2 + 64) = v14;
          }
        }
        else
        {
          sub_23942D080(a2 + 56, v13);
        }
        if (!(_DWORD)a3)
        {
LABEL_10:
          if (!v8)
            return;
        }
        else
        {
          v18 = 0;
          v19 = a1 + 4;
          do
          {
            while (*((_BYTE *)v8 + v18))
            {
              LOBYTE(v33) = 0;
              std::istream::read();
              if ((*((_BYTE *)v19 + *(_QWORD *)(*a1 - 24)) & 5) == 0)
              {
                v20 = operator new(0x90uLL);
                v20[1] = 0;
                v20[2] = 0;
                *v20 = &off_250ADFCE0;
                v21 = sub_2395CD93C((uint64_t)(v20 + 3), a4, (_BYTE)v33 != 0, 0, 0);
                v22 = (uint64_t *)(*v9 + 16 * v18);
                v23 = (std::__shared_weak_count *)v22[1];
                *v22 = v21;
                v22[1] = (uint64_t)v20;
                if (v23)
                {
                  v24 = (unint64_t *)&v23->__shared_owners_;
                  do
                    v25 = __ldaxr(v24);
                  while (__stlxr(v25 - 1, v24));
                  if (!v25)
                  {
                    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                    std::__shared_weak_count::__release_weak(v23);
                  }
                }
                sub_2395D2840(a1, *(_QWORD *)(*v9 + 16 * v18++), a3, a4);
                if ((*(_DWORD *)((_BYTE *)v19 + *(_QWORD *)(*a1 - 24)) & 5) == 0 && v18 != a3)
                  continue;
              }
              goto LABEL_11;
            }
            v27 = (_QWORD *)(*v9 + 16 * v18);
            v28 = (std::__shared_weak_count *)v27[1];
            *v27 = 0;
            v27[1] = 0;
            if (v28)
            {
              v29 = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            ++v18;
          }
          while (v18 != a3);
        }
LABEL_11:
        operator delete(v8);
      }
    }
  }
}

void sub_2395D2D20(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395D2D58(uint64_t result)
{
  uint64_t v1;
  pthread_rwlock_t *v2;
  pthread_rwlock_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  v1 = result;
  if (!*(_QWORD *)(result + 16))
  {
    v2 = (pthread_rwlock_t *)operator new();
    sub_2397A1588(v2);
    result = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v2;
    if (result)
    {
      v3 = sub_2397A15B0((pthread_rwlock_t *)result);
      result = MEMORY[0x23B83E31C](v3, 0x1000C40BEF03554);
    }
  }
  if (*(_BYTE *)(v1 + 1))
  {
    v5 = *(uint64_t **)(v1 + 56);
    v4 = *(uint64_t **)(v1 + 64);
    while (v5 != v4)
    {
      result = *v5;
      if (*v5)
        result = sub_2395D2D58();
      v5 += 2;
    }
  }
  return result;
}

void sub_2395D2DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1000C40BEF03554);
  _Unwind_Resume(a1);
}

void sub_2395D2E10(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 546, a3, a4);
}

uint64_t sub_2395D2E18(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_2395D2E30(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 233, a3, a4);
}

uint64_t *sub_2395D2E38(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  void **v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[4];
  _QWORD v28[2];
  _QWORD *v29;

  sub_2396157EC((uint64_t)v28, a3);
  HIBYTE(v27[2]) = 16;
  strcpy((char *)v27, "camera_track_map");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADFE90;
  v5[1] = a1;
  sub_23961580C((uint64_t)v28, (uint64_t)v27, (uint64_t)v5);
  v26 = 10;
  strcpy((char *)v25, "image_path");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE0460;
  v6[1] = a1 + 456;
  sub_23961580C((uint64_t)v28, (uint64_t)v25, (uint64_t)v6);
  v24 = 9;
  strcpy((char *)v23, "mask_path");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE0460;
  v7[1] = a1 + 496;
  sub_23961580C((uint64_t)v28, (uint64_t)v23, (uint64_t)v7);
  v22 = 4;
  strcpy((char *)v21, "bbox");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE04F0;
  v8[1] = a1 + 536;
  sub_23961580C((uint64_t)v28, (uint64_t)v21, (uint64_t)v8);
  v20 = 12;
  strcpy((char *)v19, "view_cluster");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250AE0520;
  v9[1] = a1 + 792;
  sub_23961580C((uint64_t)v28, (uint64_t)v19, (uint64_t)v9);
  v18 = 14;
  strcpy((char *)__p, "auxiliary_data");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250AE06D0;
  v10[1] = a1 + 856;
  sub_23961580C((uint64_t)v28, (uint64_t)__p, (uint64_t)v10);
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v22 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v19[0]);
  if ((v22 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v24 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v21[0]);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v26 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_23:
    operator delete(v25[0]);
    if ((SHIBYTE(v27[2]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_22:
  operator delete(v23[0]);
  if (v26 < 0)
    goto LABEL_23;
LABEL_6:
  if ((SHIBYTE(v27[2]) & 0x80000000) == 0)
    goto LABEL_7;
LABEL_24:
  operator delete(v27[0]);
LABEL_7:
  sub_23959479C((uint64_t)v28, a2);
  v11 = v29;
  if (v29)
  {
    do
    {
      v12 = v11[5];
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    v13 = (void **)v29;
    if (v29)
    {
      do
      {
        v16 = (void **)*v13;
        if (*((char *)v13 + 39) < 0)
          operator delete(v13[2]);
        operator delete(v13);
        v13 = v16;
      }
      while (v16);
    }
  }
  v14 = (void *)v28[0];
  v28[0] = 0;
  if (v14)
    operator delete(v14);
  return a2;
}

void sub_2395D3184(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395D3198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v39 - 89) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a34);
  if ((*(char *)(v39 - 89) & 0x80000000) == 0)
  {
LABEL_7:
    sub_2395905C0(v39 - 80);
    _Unwind_Resume(a1);
  }
LABEL_13:
  operator delete(*(void **)(v39 - 112));
  sub_2395905C0(v39 - 80);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395D3294(uint64_t a1, uint64_t *a2, char a3, int a4, uint64_t a5)
{
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  void **v24;
  void *v25;
  void **v26;
  void *v27;
  void **v29;
  void **v30;
  void **v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[4];
  std::string __p[2];
  _QWORD v44[2];
  void **v45;
  _QWORD v46[2];
  void **v47;

  sub_2395F6750((uint64_t)v46, a1 + 456);
  sub_2395F6750((uint64_t)v44, a1 + 496);
  v10 = *(unsigned __int8 *)(a5 + 23);
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(_QWORD *)(a5 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(a5 + 23))
  {
    goto LABEL_19;
  }
  memset(__p, 0, 24);
  if ((v10 & 0x80u) == 0)
    v11 = (std::string *)a5;
  else
    v11 = *(std::string **)a5;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a5 + 8);
  sub_23948900C(__p, v11, (std::string *)((char *)v11 + v10));
  sub_2396B8CE0((uint64_t)v46, (const std::__fs::filesystem::path *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  memset(__p, 0, 24);
  v12 = *(unsigned __int8 *)(a5 + 23);
  if ((v12 & 0x80u) == 0)
    v13 = (std::string *)a5;
  else
    v13 = *(std::string **)a5;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a5 + 8);
  sub_23948900C(__p, v13, (std::string *)((char *)v13 + v12));
  sub_2396B8CE0((uint64_t)v44, (const std::__fs::filesystem::path *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_19:
  sub_2396157EC((uint64_t)__p, a3);
  HIBYTE(v42[2]) = 16;
  strcpy((char *)v42, "camera_track_map");
  v14 = (_QWORD *)operator new();
  *v14 = &off_250AE07C0;
  v14[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v42, (uint64_t)v14);
  v41 = 10;
  strcpy((char *)v40, "image_path");
  v15 = (_QWORD *)operator new();
  *v15 = &off_250AE0460;
  v15[1] = v46;
  sub_23961580C((uint64_t)__p, (uint64_t)v40, (uint64_t)v15);
  v39 = 9;
  strcpy((char *)v38, "mask_path");
  v16 = (_QWORD *)operator new();
  *v16 = &off_250AE0460;
  v16[1] = v44;
  sub_23961580C((uint64_t)__p, (uint64_t)v38, (uint64_t)v16);
  v37 = 4;
  strcpy((char *)v36, "bbox");
  v17 = (_QWORD *)operator new();
  *v17 = &off_250AE07F0;
  v17[1] = a1 + 536;
  sub_23961580C((uint64_t)__p, (uint64_t)v36, (uint64_t)v17);
  v35 = 12;
  strcpy((char *)v34, "view_cluster");
  v18 = (_QWORD *)operator new();
  *v18 = &off_250AE0820;
  v18[1] = a1 + 792;
  sub_23961580C((uint64_t)__p, (uint64_t)v34, (uint64_t)v18);
  v33 = 14;
  strcpy((char *)v32, "auxiliary_data");
  v19 = (_QWORD *)operator new();
  *v19 = &off_250AE0850;
  v19[1] = a1 + 856;
  sub_23961580C((uint64_t)__p, (uint64_t)v32, (uint64_t)v19);
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if ((v35 & 0x80000000) == 0)
    {
LABEL_21:
      if ((v37 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_29;
    }
  }
  else if ((v35 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v34[0]);
  if ((v37 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v39 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v36[0]);
  if ((v39 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v38[0]);
  if ((v41 & 0x80000000) == 0)
  {
LABEL_24:
    if ((SHIBYTE(v42[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_32:
    operator delete(v42[0]);
    if (a4)
      goto LABEL_26;
    goto LABEL_33;
  }
LABEL_31:
  operator delete(v40[0]);
  if (SHIBYTE(v42[2]) < 0)
    goto LABEL_32;
LABEL_25:
  if (a4)
  {
LABEL_26:
    sub_2396158C8(a2, (uint64_t)__p);
    goto LABEL_34;
  }
LABEL_33:
  sub_2395902F0((uint64_t)__p, a2);
LABEL_34:
  v20 = (_QWORD *)__p[0].__r_.__value_.__r.__words[2];
  if (__p[0].__r_.__value_.__r.__words[2])
  {
    do
    {
      v21 = v20[5];
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v20 = (_QWORD *)*v20;
    }
    while (v20);
    v22 = (void **)__p[0].__r_.__value_.__r.__words[2];
    if (__p[0].__r_.__value_.__r.__words[2])
    {
      do
      {
        v31 = (void **)*v22;
        if (*((char *)v22 + 39) < 0)
          operator delete(v22[2]);
        operator delete(v22);
        v22 = v31;
      }
      while (v31);
    }
  }
  v23 = (void *)__p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__r.__words[0] = 0;
  if (v23)
    operator delete(v23);
  v24 = v45;
  if (v45)
  {
    do
    {
      v29 = (void **)*v24;
      if (*((char *)v24 + 47) < 0)
        operator delete(v24[3]);
      operator delete(v24);
      v24 = v29;
    }
    while (v29);
  }
  v25 = (void *)v44[0];
  v44[0] = 0;
  if (v25)
    operator delete(v25);
  v26 = v47;
  if (v47)
  {
    do
    {
      v30 = (void **)*v26;
      if (*((char *)v26 + 47) < 0)
        operator delete(v26[3]);
      operator delete(v26);
      v26 = v30;
    }
    while (v30);
  }
  v27 = (void *)v46[0];
  v46[0] = 0;
  if (v27)
    operator delete(v27);
  return a2;
}

void sub_2395D374C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a52 < 0)
  {
    operator delete(__p);
    sub_23959F2D4(v52 - 128);
    sub_23959F2D4(v52 - 88);
    _Unwind_Resume(a1);
  }
  sub_23959F2D4(v52 - 128);
  sub_23959F2D4(v52 - 88);
  _Unwind_Resume(a1);
}

void sub_2395D382C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x2395D3838);
  JUMPOUT(0x2395D37D0);
}

void sub_2395D384C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x2395D3858);
  JUMPOUT(0x2395D37D8);
}

void sub_2395D386C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    JUMPOUT(0x2395D3878);
  JUMPOUT(0x2395D37E0);
}

void sub_2395D388C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    JUMPOUT(0x2395D3898);
  JUMPOUT(0x2395D37E8);
}

void sub_2395D38AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if ((a30 & 0x80000000) == 0)
    JUMPOUT(0x2395D37F8);
  JUMPOUT(0x2395D37F0);
}

uint64_t sub_2395D38BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v11;
  int64x2_t v12;
  float64x2_t v13;
  int64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  int64x2_t v21;
  float64x2_t v22;
  int8x16_t v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  float64x2_t v33;
  float64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  float64x2_t v50;
  char v51;
  char v52;
  char v53;
  unsigned int *v54;
  uint64_t v55;
  int64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  int64x2_t v66;
  int8x16_t v67;
  double v68;
  double v69;
  float64x2_t v70;
  int64x2_t v71;
  float64x2_t v73;
  int8x16_t v74;
  float64x2_t v75;
  int32x4_t v76;
  __int128 v77;
  double v78;
  double v79;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v90;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  int32x4_t v101;
  float64x2_t v102;
  int8x16_t v103;
  _OWORD *v104;
  double *v105;
  double *v106;
  double v107;
  double v108;
  double v109;
  _BOOL4 v110;
  double v111;
  void *v112;
  unsigned int v113;
  _BOOL4 v115;
  _BOOL4 v116;
  _OWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 *v126;
  __int128 v127;
  _OWORD *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  size_t v134;
  void *v135;
  unint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  unint64_t v139;
  void *v140;
  void *v141;
  unint64_t v142;
  unsigned __int8 v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::bad_alloc *exception;
  std::bad_alloc *v148;
  std::bad_alloc *v149;
  std::bad_alloc *v150;
  std::bad_alloc *v151;
  std::bad_alloc *v152;
  std::bad_alloc *v153;
  std::bad_alloc *v154;
  std::bad_alloc *v155;
  std::bad_alloc *v156;
  char v157;
  uint64_t v158;
  char v159;
  BOOL v160;
  char v161;
  char v162;
  char v163;
  char v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  int8x16_t v176;
  int8x16_t v177;
  float64x2_t v178;
  int8x16_t v179;
  int8x16_t v180;
  std::string __str;
  void *memptr;
  void *v183[2];
  unsigned int v184;
  void *v185[2];

  if (*((_BYTE *)a3 + 8))
  {
    v8 = *a3;
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD *)(a1 + 216);
    if (v10 - v9 == 128)
      goto LABEL_3;
  }
  else
  {
    v54 = *(unsigned int **)(a1 + 104);
    if (*(_QWORD *)(a1 + 112) - (_QWORD)v54 != 16)
      return 0;
    v8 = *v54 | (*((_QWORD *)v54 + 1) << 32);
    v9 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD *)(a1 + 216);
    if (v10 - v9 == 128)
    {
LABEL_3:
      v11 = *(float64x2_t *)(v9 + 16);
      v13 = *(float64x2_t *)(v9 + 32);
      v12 = *(int64x2_t *)(v9 + 48);
      v15 = *(float64x2_t *)(v9 + 64);
      v14 = *(int64x2_t *)(v9 + 80);
      v16 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v9, (int64x2_t)v13);
      v17 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v9, (int64x2_t)v13);
      v18 = (float64x2_t)vzip1q_s64((int64x2_t)v16, (int64x2_t)v17);
      v19 = (float64x2_t)vzip2q_s64((int64x2_t)v16, (int64x2_t)v17);
      v20 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, *(double *)v9), v19, v13.f64[0]), v15, v15.f64[0]);
      v21 = (int64x2_t)vmulq_f64(v11, *(float64x2_t *)v9);
      *(double *)v21.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v21.i64, v13.f64[0], *(double *)v12.i64), v15.f64[0], *(double *)v14.i64);
      v22 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v18, *(float64x2_t *)v9, 1), v19, v13, 1), v15, v15, 1);
      v23 = (int8x16_t)vmulq_f64(v11, v17);
      v24 = *(double *)(v9 + 40);
      v25 = *(double *)(v9 + 72);
      *(double *)v23.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v23.i64, v24, *(double *)v12.i64), v25, *(double *)v14.i64);
      v26 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v11.f64[0]), v19, *(double *)v12.i64), v15, *(double *)v14.i64);
      v27 = vmulq_f64(v11, v11);
      v27.f64[0] = vmlad_n_f64(vmlad_n_f64(v27.f64[0], *(double *)v12.i64, *(double *)v12.i64), *(double *)v14.i64, *(double *)v14.i64);
      v28 = (int64x2_t)vaddq_f64(v22, (float64x2_t)xmmword_239EC6830);
      __asm { FMOV            V20.2D, #-1.0 }
      *(_QWORD *)&v27.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v27, _Q20));
      v27.f64[1] = NAN;
      if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v20, (float64x2_t)xmmword_239EC6820)), v27), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v28, v23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v21, v28)), vabsq_f64(v26)))) <= 0.0001)
      {
        v33 = (float64x2_t)vzip1q_s64((int64x2_t)v11, v12);
        v34 = vmulq_f64(v16, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), -v25), (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), *(double *)v14.i64));
        if (fabs(vmlad_n_f64(-v24 * v11.f64[0], *(double *)(v9 + 8), *(double *)v12.i64) * v15.f64[0]+ vsubq_f64(v34, (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)).f64[0]+ -1.0) <= 0.0001)
        {
          v36 = *(int64x2_t *)(v9 + 96);
          v35 = *(int64x2_t *)(v9 + 112);
          if (*(double *)v36.i64 == 0.0)
            goto LABEL_9;
          v37 = 0.0 - *(double *)v36.i64;
          if (*(double *)v36.i64 >= 0.0)
            v37 = *(double *)(v9 + 96);
          if (v37 <= 0.0001)
          {
LABEL_9:
            v38 = *(double *)(v9 + 104);
            if (*(double *)&v36.i64[1] == 0.0)
              goto LABEL_21;
            if (*(double *)&v36.i64[1] < 0.0)
              v38 = 0.0 - *(double *)&v36.i64[1];
            if (v38 <= 0.0001)
            {
LABEL_21:
              if (*(double *)v35.i64 == 0.0)
                goto LABEL_136;
              v39 = 0.0 - *(double *)v35.i64;
              if (*(double *)v35.i64 >= 0.0)
                v39 = *(double *)(v9 + 112);
              if (v39 <= 0.0001)
              {
LABEL_136:
                if (*(double *)&v35.i64[1] == 1.0
                  || (*(double *)&v35.i64[1] >= 1.0
                    ? (v40 = *(double *)&v35.i64[1] + -1.0)
                    : (v40 = 1.0 - *(double *)&v35.i64[1]),
                      v40 <= 0.0001))
                {
                  v41 = (float64x2_t)vzip1q_s64((int64x2_t)v15, v36);
                  *(_QWORD *)&v42.f64[0] = vdupq_laneq_s64((int64x2_t)v15, 1).u64[0];
                  v42.f64[1] = *(float64_t *)(v9 + 104);
                  v43 = (float64x2_t)vzip1q_s64(v14, v35);
                  v44 = (float64x2_t)vzip2q_s64((int64x2_t)v11, v12);
                  *(_QWORD *)&v45.f64[0] = vdupq_laneq_s64(v14, 1).u64[0];
                  v45.f64[1] = *(float64_t *)(v9 + 120);
                  v46 = 1;
                  v47 = *(_QWORD *)(a1 + 56);
                  v48 = *(_QWORD *)(a1 + 64);
                  if (v48 - v47 != 128)
                    goto LABEL_23;
                  goto LABEL_30;
                }
              }
            }
          }
        }
      }
LABEL_29:
      v46 = 0;
      v16 = 0uLL;
      v41 = 0uLL;
      v17 = 0uLL;
      v42 = 0uLL;
      v33 = 0uLL;
      v43 = 0uLL;
      v44 = 0uLL;
      v45 = 0uLL;
      v47 = *(_QWORD *)(a1 + 56);
      v48 = *(_QWORD *)(a1 + 64);
      if (v48 - v47 != 128)
      {
LABEL_23:
        if (v47 == v48)
        {
          v49.i64[1] = 0x3FF0000000000000;
          *(_QWORD *)&v50.f64[1] = unk_239EC7758;
          v171 = v17;
          v172 = v16;
          v169 = v41;
          v170 = v33;
          v167 = v43;
          v168 = v42;
          v165 = v45;
          v166 = v44;
          v179 = (int8x16_t)unk_239EC7750;
          v176 = (int8x16_t)unk_239EC7730;
          v177 = (int8x16_t)xmmword_239EC7740;
          v174 = *(int8x16_t *)algn_239EC7710;
          v175 = (int8x16_t)xmmword_239EC7720;
          v173 = (int8x16_t)xmmword_239EC7700;
          if (*(_BYTE *)(a5 + 24))
          {
            v51 = 0;
            v52 = 0;
            v50.f64[0] = *(float64_t *)(a5 + 16);
            v178 = vnegq_f64(*(float64x2_t *)a5);
            v49.i64[0] = *(_OWORD *)&vnegq_f64(v50);
            v180 = v49;
            v53 = 1;
          }
          else
          {
            v180 = (int8x16_t)xmmword_239EC7770;
            v51 = 0;
            v53 = 0;
            v52 = 0;
            v178 = (float64x2_t)xmmword_239EC7760;
          }
LABEL_53:
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
          v104 = memptr;
          if (!memptr)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v148 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v148, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          *((_QWORD *)memptr + 4) = 0;
          *v104 = 0u;
          v104[1] = 0u;
          v105 = *(double **)(a1 + 32);
          v106 = *(double **)(a1 + 40);
          if ((char *)v106 - (char *)v105 == 72)
          {
            v107 = *v105;
            v108 = v105[2];
            v109 = v105[5];
            v110 = v109 > 0.0 && v108 > 0.0;
            if (v107 > 0.0)
            {
              v111 = v105[4];
              if (v111 > 0.0)
              {
                v164 = 1;
                if (v110)
                {
LABEL_81:
                  LOBYTE(memptr) = 1;
                  v183[0] = 0;
                  v183[1] = (void *)8;
                  v185[0] = 0;
                  malloc_type_posix_memalign(v185, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
                  v117 = v185[0];
                  v183[0] = v185[0];
                  if (!v185[0])
                  {
                    v149 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                    v150 = std::bad_alloc::bad_alloc(v149);
                    __cxa_throw(v150, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                  }
                  v184 = 5;
                  *((_QWORD *)v185[0] + 4) = 0;
                  *v117 = 0u;
                  v117[1] = 0u;
                  v162 = v52;
                  v163 = v53;
                  v161 = v51;
                  if (*(_BYTE *)(a1 + 128)
                    && (LOBYTE(memptr) = *(_BYTE *)(a1 + 128),
                        (v118 = *(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) != 0))
                  {
                    v184 = v118 >> 3;
                    sub_23945215C((uint64_t)v183, v184);
                    v119 = *(_QWORD *)(a1 + 136);
                    v120 = *(_QWORD *)(a1 + 144);
                    v121 = v120 - v119;
                    if (v120 != v119)
                    {
                      v122 = 0;
                      v123 = v121 >> 3;
                      v124 = v183[0];
                      if (v123 <= 1)
                        v123 = 1;
                      if (v123 - 0x100000001 < 0xFFFFFFFF00000005)
                        goto LABEL_137;
                      if ((unint64_t)v183[0] - v119 < 0x20)
                        goto LABEL_137;
                      v125 = 0;
                      v122 = v123 & 0xFFFFFFFFFFFFFFFCLL;
                      v126 = (__int128 *)(v119 + 16);
                      do
                      {
                        v127 = *v126;
                        v128 = &v124[v125 & 0xFFFFFFFC];
                        *v128 = *(v126 - 1);
                        v128[1] = v127;
                        v125 += 4;
                        v126 += 2;
                      }
                      while (v122 != v125);
                      if (v123 != v122)
                      {
LABEL_137:
                        do
                        {
                          v124[v122] = *(_QWORD *)(v119 + 8 * v122);
                          ++v122;
                        }
                        while (v123 != v122);
                      }
                    }
                    v129 = 1;
                  }
                  else
                  {
                    v129 = 0;
                  }
                  v159 = (char)memptr;
                  v160 = v110;
                  v130 = v184;
                  v185[0] = 0;
                  malloc_type_posix_memalign(v185, 0x20uLL, (8 * v184 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
                  v112 = v185[0];
                  if (!v185[0])
                  {
                    v151 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                    v152 = std::bad_alloc::bad_alloc(v151);
                    __cxa_throw(v152, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                  }
                  v157 = v129;
                  v158 = v8;
                  if ((_DWORD)v130)
                    memcpy(v185[0], v183[0], 8 * v130);
                  v131 = v184;
                  free(v104);
                  v132 = a4 & 0xFF00000000;
                  v133 = (8 * v131 + 31) & 0xFFFFFFFE0;
                  v134 = v133 >> 3;
                  if (v46)
                  {
                    v185[0] = 0;
                    malloc_type_posix_memalign(v185, 0x20uLL, v133, 0x100BBD03uLL);
                    v135 = v185[0];
                    if (!v185[0])
                    {
                      v153 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                      v154 = std::bad_alloc::bad_alloc(v153);
                      __cxa_throw(v154, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                    }
                    if ((_DWORD)v131)
                      memcpy(v185[0], v112, 8 * v131);
                    v136 = a4 << 32;
                    v137 = a4 & 0xFF00000000;
                    if (!v132)
                      v136 = 0xFFFFFFFF00000000;
                    v138 = *(_BYTE *)(a1 + 24);
                    v139 = v136 | *(unsigned int *)(a1 + 336);
                    *(double *)a2 = v107;
                    *(double *)(a2 + 8) = v111;
                    *(double *)(a2 + 16) = v108;
                    *(double *)(a2 + 24) = v109;
                    *(_BYTE *)(a2 + 32) = v159;
                    v140 = *(void **)(a2 + 40);
                    *(_QWORD *)(a2 + 40) = v135;
                    *(_QWORD *)(a2 + 48) = v134;
                    *(_DWORD *)(a2 + 56) = v131;
                    *(int8x16_t *)(a2 + 64) = v173;
                    *(int8x16_t *)(a2 + 80) = v174;
                    *(int8x16_t *)(a2 + 96) = v175;
                    *(int8x16_t *)(a2 + 112) = v176;
                    *(int8x16_t *)(a2 + 128) = v177;
                    *(int8x16_t *)(a2 + 144) = v179;
                    *(float64x2_t *)(a2 + 160) = v178;
                    *(int8x16_t *)(a2 + 176) = v180;
                    *(_QWORD *)(a2 + 192) = v139;
                    *(_QWORD *)(a2 + 200) = v158;
                    *(_QWORD *)(a2 + 208) = 0;
                    *(_QWORD *)(a2 + 216) = 0;
                    *(_QWORD *)(a2 + 224) = 0;
                    *(_BYTE *)(a2 + 232) = 0;
                    *(_BYTE *)(a2 + 233) = v164;
                    *(_BYTE *)(a2 + 234) = v160;
                    *(_BYTE *)(a2 + 235) = v157;
                    *(_BYTE *)(a2 + 236) = v162;
                    *(_BYTE *)(a2 + 237) = v162;
                    *(_BYTE *)(a2 + 238) = v163;
                    *(_BYTE *)(a2 + 239) = v161;
                    *(_WORD *)(a2 + 240) = v138;
                    if (*(char *)(a2 + 271) < 0)
                      operator delete(*(void **)(a2 + 248));
                    *(_QWORD *)(a2 + 248) = 0;
                    *(_BYTE *)(a2 + 271) = 0;
                    if (!*(_BYTE *)(a2 + 400))
                      *(_BYTE *)(a2 + 400) = 1;
                    *(float64x2_t *)(a2 + 272) = v172;
                    *(float64x2_t *)(a2 + 288) = v169;
                    *(float64x2_t *)(a2 + 304) = v171;
                    *(float64x2_t *)(a2 + 320) = v168;
                    *(float64x2_t *)(a2 + 336) = v170;
                    *(float64x2_t *)(a2 + 352) = v167;
                    *(float64x2_t *)(a2 + 368) = v166;
                    *(float64x2_t *)(a2 + 384) = v165;
                  }
                  else
                  {
                    v185[0] = 0;
                    malloc_type_posix_memalign(v185, 0x20uLL, v133, 0x100BBD03uLL);
                    v141 = v185[0];
                    if (!v185[0])
                    {
                      v155 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                      v156 = std::bad_alloc::bad_alloc(v155);
                      __cxa_throw(v156, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                    }
                    if ((_DWORD)v131)
                      memcpy(v185[0], v112, 8 * v131);
                    v142 = a4 << 32;
                    v137 = a4 & 0xFF00000000;
                    if (!v132)
                      v142 = 0xFFFFFFFF00000000;
                    v143 = *(_BYTE *)(a1 + 24);
                    v144 = v142 | *(unsigned int *)(a1 + 336);
                    *(double *)a2 = v107;
                    *(double *)(a2 + 8) = v111;
                    *(double *)(a2 + 16) = v108;
                    *(double *)(a2 + 24) = v109;
                    *(_BYTE *)(a2 + 32) = v159;
                    v140 = *(void **)(a2 + 40);
                    *(_QWORD *)(a2 + 40) = v141;
                    *(_QWORD *)(a2 + 48) = v134;
                    *(_DWORD *)(a2 + 56) = v131;
                    *(int8x16_t *)(a2 + 64) = v173;
                    *(int8x16_t *)(a2 + 80) = v174;
                    *(int8x16_t *)(a2 + 96) = v175;
                    *(int8x16_t *)(a2 + 112) = v176;
                    *(int8x16_t *)(a2 + 128) = v177;
                    *(int8x16_t *)(a2 + 144) = v179;
                    *(float64x2_t *)(a2 + 160) = v178;
                    *(int8x16_t *)(a2 + 176) = v180;
                    *(_QWORD *)(a2 + 192) = v144;
                    *(_QWORD *)(a2 + 200) = v158;
                    *(_QWORD *)(a2 + 208) = 0;
                    *(_QWORD *)(a2 + 216) = 0;
                    *(_QWORD *)(a2 + 224) = 0;
                    *(_BYTE *)(a2 + 232) = 0;
                    *(_BYTE *)(a2 + 233) = v164;
                    *(_BYTE *)(a2 + 234) = v160;
                    *(_BYTE *)(a2 + 235) = v157;
                    *(_BYTE *)(a2 + 236) = v162;
                    *(_BYTE *)(a2 + 237) = v162;
                    *(_BYTE *)(a2 + 238) = v163;
                    *(_BYTE *)(a2 + 239) = v161;
                    *(_WORD *)(a2 + 240) = v143;
                    if (*(char *)(a2 + 271) < 0)
                      operator delete(*(void **)(a2 + 248));
                    *(_QWORD *)(a2 + 248) = 0;
                    *(_BYTE *)(a2 + 271) = 0;
                    if (*(_BYTE *)(a2 + 400))
                      *(_BYTE *)(a2 + 400) = 0;
                  }
                  free(v140);
                  v145 = *(_QWORD *)(a1 + 80);
                  if (*(_QWORD *)(a1 + 88) - v145 == 24)
                  {
                    v146 = *(_QWORD *)(v145 + 16);
                    *(_OWORD *)(a2 + 208) = *(_OWORD *)v145;
                    *(_QWORD *)(a2 + 224) = v146;
                  }
                  if (*(char *)(a1 + 335) < 0)
                    sub_23941A7F8(&__str, *(void **)(a1 + 312), *(_QWORD *)(a1 + 320));
                  else
                    __str = *(std::string *)(a1 + 312);
                  std::string::operator=((std::string *)(a2 + 248), &__str);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if (!v137)
                    *(_DWORD *)(a2 + 196) = *(_DWORD *)(a1 + 340);
                  free(v183[0]);
                  v55 = 1;
                  goto LABEL_128;
                }
LABEL_75:
                v115 = v8 > 0xA;
                v116 = HIDWORD(v8) > 0xA;
                if (v115 && v116)
                  v108 = (double)v8 * 0.5;
                else
                  v108 = -1.0;
                if (v115 && v116)
                  v109 = (double)HIDWORD(v8) * 0.5;
                else
                  v109 = -1.0;
                goto LABEL_81;
              }
            }
          }
          else
          {
            if (v105 != v106)
            {
              v55 = 0;
              v112 = v104;
LABEL_128:
              free(v112);
              return v55;
            }
            v110 = 0;
            v109 = -1.0;
            v108 = -1.0;
          }
          v164 = 0;
          if (v8 <= HIDWORD(v8))
            v113 = HIDWORD(v8);
          else
            v113 = v8;
          if (HIDWORD(v8))
            _ZF = (_DWORD)v8 == 0;
          else
            _ZF = 1;
          if (_ZF)
            v111 = -1.0;
          else
            v111 = (double)v113 * 1.2;
          v107 = v111;
          if (v110)
            goto LABEL_81;
          goto LABEL_75;
        }
        return 0;
      }
LABEL_30:
      v56 = *(int64x2_t *)v47;
      v57 = *(float64x2_t *)(v47 + 16);
      v58 = *(float64x2_t *)(v47 + 32);
      _Q3 = *(int64x2_t *)(v47 + 48);
      v60 = *(float64x2_t *)(v47 + 64);
      _Q4 = *(int8x16_t *)(v47 + 80);
      v62 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v47, (int64x2_t)v58);
      v63 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v47, (int64x2_t)v58);
      v64 = (float64x2_t)vzip1q_s64((int64x2_t)v62, (int64x2_t)v63);
      v65 = (float64x2_t)vzip2q_s64((int64x2_t)v62, (int64x2_t)v63);
      v66 = (int64x2_t)vmulq_f64(v57, *(float64x2_t *)v47);
      *(double *)v66.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v66.i64, v58.f64[0], *(double *)_Q3.i64), v60.f64[0], *(double *)_Q4.i64);
      v67 = (int8x16_t)vmulq_f64(v57, v63);
      v68 = *(double *)(v47 + 40);
      v69 = *(double *)(v47 + 72);
      *(double *)v67.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v67.i64, v68, *(double *)_Q3.i64), v69, *(double *)_Q4.i64);
      v70 = vmulq_f64(v57, v57);
      v70.f64[0] = vmlad_n_f64(vmlad_n_f64(v70.f64[0], *(double *)_Q3.i64, *(double *)_Q3.i64), *(double *)_Q4.i64, *(double *)_Q4.i64);
      v71 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v64, *(float64x2_t *)v47, 1), v65, v58, 1), v60, v60, 1), (float64x2_t)xmmword_239EC6830);
      __asm { FMOV            V26.2D, #-1.0 }
      *(_QWORD *)&v73.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v70, _Q26));
      v73.f64[1] = NAN;
      if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, *(double *)v47), v65, v58.f64[0]), v60, v60.f64[0]), (float64x2_t)xmmword_239EC6820)), v73), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v71, v67, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v66, v71)), vabsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v64, v57.f64[0]), v65, *(double *)_Q3.i64), v60, *(double *)_Q4.i64))))) <= 0.0001)
      {
        v74 = (int8x16_t)vzip1q_s64((int64x2_t)v57, _Q3);
        v75 = vmulq_f64(v62, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vextq_s8(v74, v74, 8uLL), -v69), (float64x2_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL), *(double *)_Q4.i64));
        if (fabs(vmlad_n_f64(-v68 * v57.f64[0], *(double *)&v56.i64[1], *(double *)_Q3.i64) * v60.f64[0]+ vsubq_f64(v75, (float64x2_t)vdupq_laneq_s64((int64x2_t)v75, 1)).f64[0]+ -1.0) <= 0.0001)
        {
          v77 = *(_OWORD *)(v47 + 96);
          v76 = *(int32x4_t *)(v47 + 112);
          if (*(double *)&v77 == 0.0)
            goto LABEL_36;
          v78 = 0.0 - *(double *)&v77;
          if (*(double *)&v77 >= 0.0)
            v78 = *(double *)(v47 + 96);
          if (v78 <= 0.0001)
          {
LABEL_36:
            *(_QWORD *)&v77 = *(_QWORD *)(v47 + 104);
            if (*((double *)&v77 + 1) == 0.0)
              goto LABEL_48;
            if (*((double *)&v77 + 1) < 0.0)
              *(double *)&v77 = 0.0 - *((double *)&v77 + 1);
            if (*(double *)&v77 <= 0.0001)
            {
LABEL_48:
              if (*(double *)v76.i64 == 0.0)
                goto LABEL_138;
              v79 = 0.0 - *(double *)v76.i64;
              if (*(double *)v76.i64 >= 0.0)
                v79 = *(double *)(v47 + 112);
              if (v79 <= 0.0001)
              {
LABEL_138:
                v76.i32[1] = HIDWORD(*(_OWORD *)(v47 + 112));
                if (*(double *)&v76.i64[1] == 1.0
                  || (*(double *)&v76.i64[1] >= 1.0
                    ? (*(double *)v76.i64 = *(double *)&v76.i64[1] + -1.0)
                    : (*(double *)v76.i64 = 1.0 - *(double *)&v76.i64[1]),
                      *(double *)v76.i64 <= 0.0001))
                {
                  v76.i32[0] = 0;
                  v53 = 0;
                  v81 = (float64x2_t)vdupq_laneq_s64(v56, 1);
                  v82 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v58, 1);
                  v83 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v60, 1);
                  v84 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57.f64[0], 0);
                  v85 = (float64x2_t)vdupq_lane_s64(_Q3.i64[0], 0);
                  _Q23 = (float64x2_t)vzip2q_s64((int64x2_t)v57, _Q3);
                  v87 = (float64x2_t)vdupq_lane_s64(_Q4.i64[0], 0);
                  *(_QWORD *)&_Q23.f64[1] = vextq_s8((int8x16_t)_Q23, (int8x16_t)_Q23, 8uLL).u64[0];
                  v88 = vmlsq_laneq_f64(vmulq_n_f64(v64, vnegq_f64(_Q23).f64[0]), v65, _Q23, 1);
                  *(_QWORD *)&_D5 = vextq_s8(_Q4, _Q4, 8uLL).u64[0];
                  v90 = vmlsq_lane_f64(v88, v60, _D5, 0);
                  __asm
                  {
                    FMLS            D16, D3, V23.D[1]
                    FMLS            D16, D4, V5.D[0]
                  }
                  v93 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)v56.i64), (float64x2_t)xmmword_239EC68E0, v81), (float64x2_t)0, v84), (float64x2_t)0);
                  v94 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)0, *(double *)v56.i64), (float64x2_t)0, v81), (float64x2_t)xmmword_239EC68D0, v84), (float64x2_t)0);
                  v95 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v58.f64[0]), (float64x2_t)xmmword_239EC68E0, v82), (float64x2_t)0, v85), (float64x2_t)0);
                  v96 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)0, v58.f64[0]), (float64x2_t)0, v82), (float64x2_t)xmmword_239EC68D0, v85), (float64x2_t)0);
                  v97 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v60.f64[0]), (float64x2_t)xmmword_239EC68E0, v83), (float64x2_t)0, v87), (float64x2_t)0);
                  v98 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)0, v60.f64[0]), (float64x2_t)0, v83), (float64x2_t)xmmword_239EC68D0, v87), (float64x2_t)0);
                  v99 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v90.f64[0]), (float64x2_t)xmmword_239EC68E0, v90, 1), (float64x2_t)0, _D16), (float64x2_t)0);
                  v100 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v90.f64[0]), (float64x2_t)0, v90, 1), (float64x2_t)xmmword_239EC68D0, _D16);
                  v101 = (int32x4_t)xmmword_239EC6850;
                  v102 = vaddq_f64(v100, (float64x2_t)xmmword_239EC6850);
                  v101.i32[0] = v46;
                  v103 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_s32(v101, v76)), 0);
                  v180 = vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94, v44.f64[0]), v96, v44, 1), v98, v45.f64[0]), v102, v45, 1), (int8x16_t)v102);
                  v165 = v45;
                  v166 = v44;
                  v178 = (float64x2_t)vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, v44.f64[0]), v95, v44, 1), v97, v45.f64[0]), v99, v45, 1), (int8x16_t)v99);
                  v179 = vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94, v33.f64[0]), v96, v33, 1), v98, v43.f64[0]), v102, v43, 1), (int8x16_t)v98);
                  v170 = v33;
                  v171 = v17;
                  v167 = v43;
                  v168 = v42;
                  v177 = vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, v33.f64[0]), v95, v33, 1), v97, v43.f64[0]), v99, v43, 1), (int8x16_t)v97);
                  v176 = vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94, v17.f64[0]), v96, v17, 1), v98, v42.f64[0]), v102, v42, 1), (int8x16_t)v96);
                  v175 = vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, v17.f64[0]), v95, v17, 1), v97, v42.f64[0]), v99, v42, 1), (int8x16_t)v95);
                  v174 = vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v94, v16.f64[0]), v96, v16, 1), v98, v41.f64[0]), v102, v41, 1), (int8x16_t)v94);
                  v169 = v41;
                  v172 = v16;
                  v173 = vbslq_s8(v103, (int8x16_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v93, v16.f64[0]), v95, v16, 1), v97, v41.f64[0]), v99, v41, 1), (int8x16_t)v93);
                  v52 = 1;
                  v51 = v46;
                  goto LABEL_53;
                }
              }
            }
          }
        }
      }
      return 0;
    }
  }
  v55 = 0;
  if (v9 == v10)
    goto LABEL_29;
  return v55;
}

void sub_2395D45DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  free(*(void **)(v2 - 152));
  free(v1);
  _Unwind_Resume(a1);
}

void sub_2395D4654(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395D4668(uint64_t a1)
{
  if (*(char *)(a1 + 271) < 0)
  {
    operator delete(*(void **)(a1 + 248));
    free(*(void **)(a1 + 40));
  }
  else
  {
    free(*(void **)(a1 + 40));
  }
  return a1;
}

uint64_t sub_2395D46B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, char a6)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  int64x2_t v16;
  int64x2_t *v17;
  int64x2_t v18;
  int64x2_t v19;
  uint64_t v20;
  char *v21;
  const std::nothrow_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const std::nothrow_t *v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  float64_t v49;
  float64_t v50;
  float64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int *v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  int64x2_t v81;
  float64x2_t v82;
  int8x16_t v83;
  double v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  int64x2_t v88;
  int8x16_t v89;
  float64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  double v93;
  double v94;
  double v95;
  double v96;
  float64x2_t v98;
  double v99;
  double v101;
  double v102;
  long double v103;
  int v104;
  int v105;
  _QWORD *v106;
  _QWORD *v107;
  char *v108;
  char *v109;
  std::string::size_type v110;
  double *v111;
  double *v112;
  double *v113;
  std::string::size_type v114;
  double *v115;
  double *v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double *v121;
  double v122;
  double v123;
  double v124;
  double v125;
  std::string::size_type v126;
  double *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  double *v132;
  unint64_t v133;
  double *v134;
  uint64_t v135;
  int64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  double *v141;
  double *v142;
  double *v143;
  double *v144;
  unint64_t v145;
  double *v146;
  uint64_t v147;
  double v148;
  std::string::size_type v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  _BYTE *v153;
  double *v154;
  uint64_t v155;
  uint64_t v156;
  _OWORD *v157;
  double *v158;
  uint64_t v159;
  __int128 v160;
  unint64_t v161;
  double *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  double *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  _OWORD *v172;
  double *v173;
  uint64_t v174;
  __int128 v175;
  std::string::size_type v176;
  double *v177;
  long double v178;
  long double v179;
  long double v180;
  long double v181;
  double v182;
  long double v183;
  long double v184;
  long double v185;
  char v186;
  double v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  double *v192;
  double *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  double *v198;
  uint64_t v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  double v204;
  double v205;
  double v206;
  _BYTE *v207;
  double *v208;
  _QWORD *v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  void **v213;
  void **v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  const void **v218;
  int v219;
  BOOL v220;
  std::string *v221;
  uint64_t v222;
  float64_t v223;
  char *v224;
  const std::locale::facet *v225;
  int v226;
  size_t v227;
  unint64_t v228;
  std::string *p_dst;
  int v230;
  size_t v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  int v237;
  const std::string::value_type *v238;
  std::string::size_type v239;
  std::string *v240;
  __int128 v241;
  std::string *v242;
  std::string::size_type v243;
  char v244;
  std::string *v245;
  uint64_t v246;
  const char **v247;
  std::string *v248;
  int v249;
  BOOL v250;
  std::string *v251;
  uint64_t v252;
  int v253;
  size_t v254;
  size_t v255;
  std::string::size_type v256;
  size_t v257;
  char *v258;
  const void *v259;
  char *v260;
  std::__fs::filesystem::path *v261;
  std::string::size_type v262;
  std::string *v263;
  int v264;
  std::__fs::filesystem::path *v265;
  __int128 v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  std::string *p_pn;
  std::string::size_type size;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::string *v275;
  uint8x8_t v276;
  unint64_t v277;
  uint64_t **v278;
  uint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  int v282;
  uint64_t v283;
  unsigned int v284;
  int8x8_t v285;
  uint8x8_t v286;
  unint64_t v287;
  uint64_t **v288;
  uint64_t *v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  const std::string::value_type *v296;
  char v297;
  char v298;
  _OWORD *v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  unint64_t v306;
  float64x2_t v307;
  int v308;
  size_t v309;
  size_t v310;
  void *v311;
  char *v312;
  int v313;
  uint64_t *i;
  uint64_t *v315;
  float64x2_t v316;
  void *v317;
  void *v318;
  void *v319;
  uint64_t *v320;
  int v321;
  int v322;
  int v323;
  void **v324;
  void **v325;
  unint64_t v326;
  uint8x8_t v327;
  unint64_t v328;
  uint64_t **v329;
  uint64_t *v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  char *v334;
  char *v335;
  uint64_t v337;
  void *v338;
  int64x2_t v339;
  __int128 v340;
  int64x2_t v341;
  int64x2_t v342;
  int64x2_t v343;
  int64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  __int128 v347;
  float64x2_t v348;
  float64x2_t v349;
  int64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  int64x2_t v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  _QWORD *v366;
  _QWORD *v367;
  void *v368;
  _QWORD *v369;
  _QWORD *v370;
  void *v371;
  _QWORD *v372;
  void *v373;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  std::bad_alloc *exception;
  std::bad_alloc *v381;
  std::bad_alloc *v382;
  std::bad_alloc *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  float64_t v387;
  uint64_t v388;
  float64_t v389;
  float64x2_t v390;
  float64x2_t v391;
  unint64_t v392;
  unint64_t v393;
  int64x2_t v394;
  __n128 *v395;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  double *v400;
  double v401;
  std::string::size_type v402;
  unsigned int v403;
  double v404;
  double *v405;
  void **v406;
  float64x2_t v408;
  float64x2_t v409;
  uint64_t v410;
  uint64_t v411;
  float64x2_t v412;
  std::string::size_type v413;
  uint64_t v414;
  float64x2_t v416;
  float64x2_t v417;
  std::string::size_type v418;
  std::string::size_type v419;
  uint64_t v420;
  std::string::size_type v421;
  std::string::size_type v422;
  std::string::size_type v423;
  _BYTE v425[144];
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  char v433;
  _BYTE v434[23];
  char v435;
  std::string::size_type v436;
  char v437;
  float64x2_t v438;
  float64x2_t v439;
  void *v440;
  void *__src;
  void *v442;
  void *v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  __int128 v447;
  __int128 v448;
  __int128 v449;
  __int128 v450;
  __int128 v451;
  _BYTE v452[64];
  void *v453;
  _BYTE *v454;
  char v455;
  _BYTE v456[32];
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  _BYTE v461[31];
  char v462;
  std::string __dst;
  void *v464[2];
  void *v465[2];
  int v466;
  void *v467[2];
  void *__p[2];
  int v469;
  void *v470;
  __n128 *v471;
  uint64_t v472;
  void *v473;
  char *v474;
  uint64_t v475;
  void *v476[2];
  __int128 v477;
  int v478;
  uint64_t v479;
  std::string v480;
  std::string pn;
  _BYTE __str[32];
  float64x2_t v483;
  __int128 v484;
  float64x2_t v485;
  int64x2_t v486;
  int64x2_t v487;
  float64x2_t v488;
  double v489[2];
  std::__fs::filesystem::path v490;
  uint64_t v491;

  v491 = *MEMORY[0x24BDAC8D0];
  v477 = 0u;
  *(_OWORD *)v476 = 0u;
  v478 = 1065353216;
  v474 = 0;
  v473 = 0;
  v475 = 0;
  v471 = 0;
  v470 = 0;
  v472 = 0;
  v384 = *(_QWORD *)(a1 + 176);
  v385 = *(_QWORD *)(a1 + 184);
  v8 = v385 - v384;
  v9 = (v385 - v384) / 352;
  if (v385 == v384)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_10;
  }
  sub_23946DAD4((uint64_t)&v470, v8 / 352);
  v10 = (char *)v470;
  v11 = v471;
  if (v470 == v471)
    goto LABEL_10;
  v12 = (char *)v471 - (_BYTE *)v470 - 8;
  if (v12 < 0x18)
  {
    v13 = 0;
    v14 = (__n128 *)v470;
    do
    {
LABEL_9:
      v14->n128_u64[0] = v13;
      v14 = (__n128 *)((char *)v14 + 8);
      ++v13;
    }
    while (v14 != v11);
    goto LABEL_10;
  }
  v15 = (v12 >> 3) + 1;
  v13 = v15 & 0x3FFFFFFFFFFFFFFCLL;
  v14 = (__n128 *)((char *)v470 + 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL));
  v16 = (int64x2_t)xmmword_239EC6860;
  v17 = (int64x2_t *)((char *)v470 + 16);
  v18 = vdupq_n_s64(2uLL);
  v19 = vdupq_n_s64(4uLL);
  v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v17[-1] = v16;
    *v17 = vaddq_s64(v16, v18);
    v16 = vaddq_s64(v16, v19);
    v17 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v15 != v13)
    goto LABEL_9;
LABEL_10:
  if (!a6)
  {
    v438 = 0uLL;
    v439.f64[0] = 0.0;
    v25 = *(_QWORD *)(a1 + 176);
    v26 = *(_QWORD *)(a1 + 184);
    if (v25 == v26)
      goto LABEL_41;
    v27 = 0;
    v28 = v25 + 288;
    while (1)
    {
      while (*(char *)(v28 + 23) < 0)
      {
        v34 = *(_QWORD *)(v28 + 8);
        v32 = *(_QWORD *)&v439.f64[0];
        if (v34)
        {
          v33 = v28;
          if ((unint64_t)v27 < *(_QWORD *)&v439.f64[0])
          {
            sub_23941A7F8(v27, *(void **)v28, v34);
            goto LABEL_23;
          }
          goto LABEL_35;
        }
LABEL_31:
        if ((unint64_t)v27 < v32)
        {
          if (*(char *)(v28 + 47) < 0)
          {
            sub_23941A7F8(v27, *(void **)(v28 + 24), *(_QWORD *)(v28 + 32));
            goto LABEL_23;
          }
          v29 = *(_OWORD *)(v28 + 24);
          v30 = *(_QWORD *)(v28 + 40);
          goto LABEL_22;
        }
        v33 = v25 + 312;
LABEL_35:
        v27 = sub_23959AE70((char **)&v438, v33);
        *(_QWORD *)&v438.f64[1] = v27;
        v25 += 352;
        v35 = v28 + 64;
        v28 += 352;
        if (v35 == v26)
        {
LABEL_40:
          v10 = (char *)v470;
          v11 = v471;
LABEL_41:
          *(_QWORD *)v425 = &v438;
          if ((char *)v11 - v10 < 1025)
          {
LABEL_45:
            sub_2395F9688(v10, (char *)v11, (uint64_t **)v425, ((char *)v11 - v10) >> 3, 0, 0);
            v40 = (char *)v473;
            v41 = (v474 - (_BYTE *)v473) >> 3;
            _CF = v9 >= v41;
            v43 = v9 - v41;
            if (v9 <= v41)
              goto LABEL_48;
          }
          else
          {
            v37 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
            v38 = ((char *)v11 - v10) >> 3;
            while (1)
            {
              v39 = (char *)operator new(8 * v38, v37);
              if (v39)
                break;
              v220 = v38 > 1;
              v38 >>= 1;
              if (!v220)
                goto LABEL_45;
            }
            v44 = v39;
            sub_2395F9688(v10, (char *)v11, (uint64_t **)v425, ((char *)v11 - v10) >> 3, v39, v38);
            operator delete(v44);
            v40 = (char *)v473;
            v45 = (v474 - (_BYTE *)v473) >> 3;
            _CF = v9 >= v45;
            v43 = v9 - v45;
            if (v9 <= v45)
            {
LABEL_48:
              if (!_CF)
                v474 = &v40[8 * v9];
LABEL_50:
              if (v385 != v384)
              {
                v46 = 0;
                v47 = v470;
                v48 = v473;
                do
                {
                  v48[v47[v46]] = v46;
                  ++v46;
                }
                while (v9 != v46);
              }
              v49 = v438.f64[0];
              if (*(_QWORD *)&v438.f64[0])
              {
                v50 = v438.f64[1];
                v51 = v438.f64[0];
                if (*(_QWORD *)&v438.f64[1] != *(_QWORD *)&v438.f64[0])
                {
                  do
                  {
                    if (*(char *)(*(_QWORD *)&v50 - 1) < 0)
                      operator delete(*(void **)(*(_QWORD *)&v50 - 24));
                    *(_QWORD *)&v50 -= 24;
                  }
                  while (*(_QWORD *)&v50 != *(_QWORD *)&v49);
                  v51 = v438.f64[0];
                }
                v438.f64[1] = v49;
                goto LABEL_62;
              }
LABEL_63:
              *(_OWORD *)__p = 0u;
              *(_OWORD *)v467 = 0u;
              v469 = 1065353216;
              v53 = *(_QWORD *)(a1 + 176);
              v54 = *(_QWORD *)(a1 + 184);
              __asm { FMOV            V0.2D, #-1.0 }
              v408 = _Q0;
              if (v54 == v53)
              {
                v53 = *(_QWORD *)(a1 + 184);
                goto LABEL_115;
              }
              v58 = (v54 - v53) / 352;
              if (v58 <= 1)
                v59 = 1;
              else
                v59 = (v54 - v53) / 352;
              if ((*(_DWORD *)(v53 + 340) & 0x80000000) != 0)
              {
                v61 = (int *)(v53 + 692);
                v62 = 1;
                do
                {
                  v63 = v62;
                  if (v59 == v62)
                    break;
                  v64 = *v61;
                  ++v62;
                  v61 += 88;
                }
                while (v64 < 0);
                v60 = v63 < v58;
              }
              else
              {
                v60 = 1;
              }
              v65 = 0;
              v416 = 0u;
              v66 = -1;
              v67 = 340;
              v423 = 0xBFF0000000000000;
              v401 = 1.0;
              v404 = 0.0;
              v398 = 0u;
              v399 = 0u;
              v409 = (float64x2_t)xmmword_239EC6840;
              v412 = (float64x2_t)xmmword_239EC6850;
              v397 = (float64x2_t)xmmword_239EC6850;
              while (2)
              {
                v68 = *(_QWORD *)(v53 + v67 - 124);
                v69 = *(_QWORD *)(v53 + v67 - 132);
                if (v68 - v69 == 128)
                {
                  v70 = *(int64x2_t *)v69;
                  v71 = *(float64x2_t *)(v69 + 16);
                  v72 = *(float64x2_t *)(v69 + 32);
                  v73 = *(int64x2_t *)(v69 + 48);
                  v75 = *(float64x2_t *)(v69 + 64);
                  v74 = *(int64x2_t *)(v69 + 80);
                  v76 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v69, (int64x2_t)v72);
                  v77 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v69, (int64x2_t)v72);
                  v78 = (float64x2_t)vzip1q_s64((int64x2_t)v76, (int64x2_t)v77);
                  v79 = (float64x2_t)vzip2q_s64((int64x2_t)v76, (int64x2_t)v77);
                  v80 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78, *(double *)v69), v79, v72.f64[0]), v75, v75.f64[0]);
                  v81 = (int64x2_t)vmulq_f64(v71, *(float64x2_t *)v69);
                  *(double *)v81.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v81.i64, v72.f64[0], *(double *)v73.i64), v75.f64[0], *(double *)v74.i64);
                  v82 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v78, *(float64x2_t *)v69, 1), v79, v72, 1), v75, v75, 1);
                  v83 = (int8x16_t)vmulq_f64(v71, v77);
                  v84 = *(double *)(v69 + 40);
                  v85 = *(double *)(v69 + 72);
                  *(double *)v83.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v83.i64, v84, *(double *)v73.i64), v85, *(double *)v74.i64);
                  v86 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v78, v71.f64[0]), v79, *(double *)v73.i64), v75, *(double *)v74.i64);
                  v87 = vmulq_f64(v71, v71);
                  v87.f64[0] = vmlad_n_f64(vmlad_n_f64(v87.f64[0], *(double *)v73.i64, *(double *)v73.i64), *(double *)v74.i64, *(double *)v74.i64);
                  v88 = (int64x2_t)vaddq_f64(v82, (float64x2_t)xmmword_239EC6830);
                  *(_QWORD *)&v87.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v87, v408));
                  v87.f64[1] = NAN;
                  if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v80, (float64x2_t)xmmword_239EC6820)), v87), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v88, v83, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v81, v88)), vabsq_f64(v86)))) <= 0.0001)
                  {
                    v89 = (int8x16_t)vzip1q_s64((int64x2_t)v71, v73);
                    v90 = vmulq_f64(v76, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vextq_s8(v89, v89, 8uLL), -v85), (float64x2_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), *(double *)v74.i64));
                    if (fabs(vmlad_n_f64(-v84 * v71.f64[0], *(double *)&v70.i64[1], *(double *)v73.i64) * v75.f64[0]+ vsubq_f64(v90, (float64x2_t)vdupq_laneq_s64((int64x2_t)v90, 1)).f64[0]+ -1.0) <= 0.0001)
                    {
                      v92 = *(int64x2_t *)(v69 + 96);
                      v91 = *(int64x2_t *)(v69 + 112);
                      if (*(double *)v92.i64 == 0.0)
                        goto LABEL_84;
                      v93 = 0.0 - *(double *)v92.i64;
                      if (*(double *)v92.i64 >= 0.0)
                        v93 = *(double *)(v69 + 96);
                      if (v93 <= 0.0001)
                      {
LABEL_84:
                        v94 = *(double *)(v69 + 104);
                        if (*(double *)&v92.i64[1] == 0.0)
                          goto LABEL_91;
                        if (*(double *)&v92.i64[1] < 0.0)
                          v94 = 0.0 - *(double *)&v92.i64[1];
                        if (v94 <= 0.0001)
                        {
LABEL_91:
                          if (*(double *)v91.i64 == 0.0)
                            goto LABEL_95;
                          v95 = 0.0 - *(double *)v91.i64;
                          if (*(double *)v91.i64 >= 0.0)
                            v95 = *(double *)(v69 + 112);
                          if (v95 <= 0.0001)
                          {
LABEL_95:
                            if (*(double *)&v91.i64[1] == 1.0)
                              goto LABEL_96;
                            v96 = 1.0 - *(double *)&v91.i64[1];
                            if (*(double *)&v91.i64[1] >= 1.0)
                              v96 = *(double *)&v91.i64[1] + -1.0;
                            if (v96 <= 0.0001)
                            {
LABEL_96:
                              v392 = vdupq_laneq_s64((int64x2_t)v75, 1).u64[0];
                              v393 = vzip1q_s64(v74, v91).u64[0];
                              v394 = vzip1q_s64((int64x2_t)v75, v92);
                              _Q19 = (float64x2_t)vzip2q_s64((int64x2_t)v71, v73);
                              v98 = (float64x2_t)vdupq_laneq_s64(v74, 1);
                              *(_QWORD *)&v99 = *(_OWORD *)&vsubq_f64(v397, v98);
                              v98.f64[1] = *(float64_t *)(v69 + 120);
                              v397 = v98;
                              v390 = (float64x2_t)v89;
                              v391 = _Q19;
                              *(_QWORD *)&_Q19.f64[1] = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
                              _D20 = vsubq_f64(v398, _Q19).f64[1];
                              __asm { FMLA            D19, D20, V18.D[1] }
                              v101 = sqrt(vmlad_n_f64(_Q19.f64[0], v99, v99));
                              v102 = (vmlad_n_f64(vmlad_n_f64(vmulq_f64(v416, v75).f64[0], *(double *)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).i64, v404), *(double *)v74.i64, v401)+ vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v409, *(double *)v70.i64), (float64x2_t)vdupq_laneq_s64(v70, 1), v412), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v71.f64[0], 0), v399), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_f64(vmlaq_f64(vmulq_n_f64(v409, v72.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)v72, 1),
                                                                      v412),
                                                                    (float64x2_t)vdupq_lane_s64(v73.i64[0], 0),
                                                                    v399),
                                                       1)).f64[0]
                                    + -1.0)
                                   * 0.5;
                              if (v102 > 1.0)
                                v102 = 1.0;
                              if (v102 < -1.0)
                                v102 = -1.0;
                              v412 = v77;
                              v417 = v76;
                              v103 = acos(v102);
                              v104 = v101 > 0.0199999996;
                              if (v103 > 2.0)
                                v104 = 1;
                              if (v66 == -1)
                                v104 = 1;
                              v66 += v104;
                              v409 = v417;
                              v416 = (float64x2_t)v394;
                              v401 = *(double *)&v393;
                              v404 = *(double *)&v392;
                              v398 = v391;
                              v399 = v390;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_106:
                  v105 = *(_DWORD *)(v53 + v67);
                  *(_QWORD *)&v438.f64[0] = v65;
                  if (((v105 < 0) & ~v60) != 0)
                    LODWORD(v438.f64[1]) = v66;
                  else
                    LODWORD(v438.f64[1]) = v105;
                  sub_2395F6E8C((uint64_t)v467, (unint64_t *)&v438, &v438);
                  ++v65;
                  v53 = *(_QWORD *)(a1 + 176);
                  v54 = *(_QWORD *)(a1 + 184);
                  v67 += 352;
                  if (v65 >= 0x2E8BA2E8BA2E8BA3 * ((v54 - v53) >> 5))
                    goto LABEL_115;
                  continue;
                }
                break;
              }
              if (v69 == v68)
                goto LABEL_106;
              if (__p[1])
              {
                v106 = __p[0];
                if (__p[0])
                {
                  do
                  {
                    v107 = (_QWORD *)*v106;
                    operator delete(v106);
                    v106 = v107;
                  }
                  while (v107);
                }
                __p[0] = 0;
                v108 = (char *)v467[1];
                if (v467[1])
                {
                  v109 = 0;
                  do
                    *((_QWORD *)v467[0] + (_QWORD)v109++) = 0;
                  while (v108 != v109);
                }
                __p[1] = 0;
                v53 = *(_QWORD *)(a1 + 176);
                v54 = *(_QWORD *)(a1 + 184);
              }
LABEL_115:
              *(_OWORD *)v465 = 0u;
              *(_OWORD *)v464 = 0u;
              v466 = 1065353216;
              memset(&pn, 0, sizeof(pn));
              memset(&v490, 0, sizeof(v490));
              memset(&v480, 0, sizeof(v480));
              if (v53 == v54)
              {
                v111 = 0;
                v112 = 0;
                v113 = 0;
                v176 = 0;
                v116 = 0;
                v115 = 0;
                v119 = -3.40282347e38;
                v120 = 3.40282347e38;
                v117 = 3.40282347e38;
                v118 = -3.40282347e38;
                goto LABEL_215;
              }
              v402 = 0;
              v110 = 0;
              v421 = 0;
              v111 = 0;
              v112 = 0;
              v113 = 0;
              v413 = 0;
              v114 = 0;
              v423 = 0;
              v115 = 0;
              v116 = 0;
              v400 = 0;
              v117 = 3.40282347e38;
              v118 = -3.40282347e38;
              v119 = -3.40282347e38;
              v120 = 3.40282347e38;
              v410 = v54;
              while (2)
              {
                v121 = *(double **)(v53 + 256);
                if (*(_QWORD *)(v53 + 264) - (_QWORD)v121 != 24)
                  goto LABEL_119;
                v123 = *v121;
                v122 = v121[1];
                v124 = v121[2];
                if (v122 > v118)
                  v118 = v121[1];
                if (v123 > v119)
                  v119 = *v121;
                if (v122 < v117)
                  v117 = v121[1];
                if (v123 < v120)
                  v120 = *v121;
                v418 = v114;
                if ((unint64_t)v113 < v423)
                {
                  *v113 = v123;
                  v421 = (std::string::size_type)(v113 + 1);
                  if ((unint64_t)v112 < v114)
                    goto LABEL_131;
LABEL_148:
                  v136 = (char *)v112 - (char *)v116;
                  v137 = v112 - v116;
                  v138 = v137 + 1;
                  if ((unint64_t)(v137 + 1) >> 61)
                  {
                    v126 = v110;
LABEL_630:
                    pn.__r_.__value_.__r.__words[2] = v423;
                    v490.__pn_.__r_.__value_.__l.__size_ = v126;
                    v490.__pn_.__r_.__value_.__r.__words[2] = v418;
                    v480.__r_.__value_.__r.__words[2] = v413;
                    pn.__r_.__value_.__l.__size_ = v421;
                    pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                    v490.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
                    v480.__r_.__value_.__l.__size_ = v402;
                    v480.__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
                    sub_2394189F8();
                  }
                  if ((uint64_t)(v114 - (_QWORD)v116) >> 2 > v138)
                    v138 = (uint64_t)(v114 - (_QWORD)v116) >> 2;
                  if (v114 - (unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                    v139 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v139 = v138;
                  if (v139)
                  {
                    v126 = v110;
                    if (v139 >> 61)
                    {
LABEL_628:
                      pn.__r_.__value_.__r.__words[2] = v423;
                      v490.__pn_.__r_.__value_.__l.__size_ = v126;
                      v490.__pn_.__r_.__value_.__r.__words[2] = v418;
                      v480.__r_.__value_.__r.__words[2] = v413;
                      pn.__r_.__value_.__l.__size_ = v421;
                      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                      v490.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
                      v480.__r_.__value_.__l.__size_ = v402;
                      v480.__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
                      sub_239418A80();
                    }
                    v140 = (char *)operator new(8 * v139);
                    v141 = v112;
                    v54 = v410;
                    v142 = (double *)&v140[8 * v137];
                    *v142 = v122;
                    v110 = (std::string::size_type)(v142 + 1);
                    if (v141 == v116)
                    {
LABEL_165:
                      v114 = (std::string::size_type)&v140[8 * v139];
                      if (v116)
                        operator delete(v116);
                      v116 = v142;
                      v125 = *(double *)(v53 + 280);
                      if (v125 >= 0.0)
                        goto LABEL_168;
LABEL_118:
                      v112 = (double *)v110;
                      v113 = (double *)v421;
LABEL_119:
                      v53 += 352;
                      if (v53 != v54)
                        continue;
                      pn.__r_.__value_.__l.__size_ = v421;
                      pn.__r_.__value_.__r.__words[2] = v423;
                      v490.__pn_.__r_.__value_.__l.__size_ = v110;
                      v490.__pn_.__r_.__value_.__r.__words[2] = v114;
                      v480.__r_.__value_.__l.__size_ = v402;
                      v480.__r_.__value_.__r.__words[2] = v413;
                      v176 = (std::string::size_type)v400;
LABEL_215:
                      pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                      v490.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
                      v177 = (double *)v176;
                      v480.__r_.__value_.__r.__words[0] = v176;
                      if (v119 > -3.40282347e38
                        && v120 < 3.40282347e38
                        && v118 > -3.40282347e38
                        && v117 < 3.40282347e38)
                      {
                        v178 = v119 * 3.14159265 / 180.0;
                        v179 = v120 * 3.14159265 / 180.0;
                        v180 = sin((v178 - v179) * 0.5);
                        v181 = v180 * v180;
                        v182 = cos(v178);
                        v183 = cos(v179) * v182;
                        v184 = sin((v118 * 3.14159265 / 180.0 - v117 * 3.14159265 / 180.0) * 0.5);
                        v185 = asin(sqrt(v181 + v183 * (v184 * v184)));
                        v186 = 0;
                        v187 = (v185 + v185) * 6371000.0;
                        if (v187 > 1000000.0 || v187 < 0.1)
                        {
                          v199 = a4;
                          v208 = v177;
                          if (v177)
                            goto LABEL_277;
                          goto LABEL_278;
                        }
                      }
                      *(_OWORD *)v425 = xmmword_239EC7610;
                      *(_OWORD *)&v425[16] = xmmword_239EC7620;
                      v188 = operator new(0x18uLL);
                      *(_QWORD *)&v425[40] = v188 + 3;
                      *(_QWORD *)&v425[48] = v188 + 3;
                      v188[1] = 0;
                      v188[2] = 0;
                      *v188 = 0;
                      *(_QWORD *)&v425[32] = v188;
                      v189 = operator new(0x18uLL);
                      *(_QWORD *)&v425[64] = v189 + 3;
                      *(_QWORD *)&v425[72] = v189 + 3;
                      v189[1] = 0;
                      v189[2] = 0;
                      *v189 = 0;
                      *(_QWORD *)&v425[56] = v189;
                      if (v113 != v115)
                      {
                        v190 = (char *)v112 - (char *)v116;
                        if (v112 != v116)
                        {
                          v191 = ((char *)v113 - (char *)v115) >> 4;
                          v192 = &v115[v191];
                          if (v192 != v113)
                            sub_2395F71EC(v115, &v115[v191], v113);
                          v193 = &v116[v190 >> 4];
                          if (v193 != v112)
                            sub_2395F71EC(v116, &v116[v190 >> 4], v112);
                          v194 = *(_QWORD *)v192;
                          v195 = *(_QWORD *)v193;
                          v196 = operator new(0x18uLL);
                          *(_QWORD *)&v439.f64[0] = v196 + 3;
                          *v196 = v194;
                          v196[1] = v195;
                          v196[2] = 0;
                          *(_QWORD *)&v438.f64[0] = v196;
                          *(_QWORD *)&v438.f64[1] = v196 + 3;
                          sub_239613594((uint64_t)v425, (char **)&v438);
                          if (*(_QWORD *)&v438.f64[0])
                          {
                            v438.f64[1] = v438.f64[0];
                            operator delete(*(void **)&v438.f64[0]);
                          }
                        }
                      }
                      if (v111 == v177)
                      {
                        v200 = 0.0;
                        v199 = a4;
                        v201 = *(_QWORD *)(a1 + 176);
                        if (*(_QWORD *)(a1 + 184) == v201)
                          goto LABEL_272;
                      }
                      else
                      {
                        v197 = ((char *)v111 - (char *)v177) >> 4;
                        v198 = &v177[v197];
                        v199 = a4;
                        if (v198 != v111)
                          sub_2395F71EC(v177, &v177[v197], v111);
                        v200 = *v198;
                        v201 = *(_QWORD *)(a1 + 176);
                        if (*(_QWORD *)(a1 + 184) == v201)
                        {
LABEL_272:
                          if (*(_QWORD *)&v425[56])
                          {
                            *(_QWORD *)&v425[64] = *(_QWORD *)&v425[56];
                            operator delete(*(void **)&v425[56]);
                          }
                          if (*(_QWORD *)&v425[32])
                          {
                            *(_QWORD *)&v425[40] = *(_QWORD *)&v425[32];
                            operator delete(*(void **)&v425[32]);
                          }
                          v186 = 1;
                          v208 = (double *)v480.__r_.__value_.__r.__words[0];
                          if (v480.__r_.__value_.__r.__words[0])
                          {
LABEL_277:
                            v480.__r_.__value_.__l.__size_ = (std::string::size_type)v208;
                            operator delete(v208);
                          }
LABEL_278:
                          if (v490.__pn_.__r_.__value_.__r.__words[0])
                            operator delete(v490.__pn_.__r_.__value_.__l.__data_);
                          if (pn.__r_.__value_.__r.__words[0])
                            operator delete(pn.__r_.__value_.__l.__data_);
                          if ((v186 & 1) == 0 && v465[1])
                          {
                            v209 = v465[0];
                            if (v465[0])
                            {
                              do
                              {
                                v210 = (_QWORD *)*v209;
                                operator delete(v209);
                                v209 = v210;
                              }
                              while (v210);
                            }
                            v465[0] = 0;
                            v211 = (char *)v464[1];
                            if (v464[1])
                            {
                              v212 = 0;
                              do
                                *((_QWORD *)v464[0] + (_QWORD)v212++) = 0;
                              while (v211 != v212);
                            }
                            v465[1] = 0;
                          }
                          v213 = (void **)v470;
                          v214 = (void **)v471;
                          if (v470 != v471)
                          {
                            v403 = 0;
                            v389 = *MEMORY[0x24BEDB7F0];
                            v387 = *(double *)(MEMORY[0x24BEDB7F0] + 72);
                            v388 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                            v386 = MEMORY[0x24BEDB848] + 16;
                            v395 = v471;
                            while (1)
                            {
                              v215 = (unint64_t)*v213;
                              v422 = *((_QWORD *)v473 + (_QWORD)*v213);
                              v216 = *(_QWORD *)(a1 + 176) + 352 * (_QWORD)*v213;
                              v217 = v216 + 288;
                              v218 = (const void **)(v216 + 312);
                              memset(__str, 0, 24);
                              v414 = v216;
                              v420 = v216 + 312;
                              if (*(char *)(v216 + 311) < 0)
                              {
                                if (*(_QWORD *)(v216 + 296))
                                {
LABEL_295:
                                  memset(v425, 0, 24);
                                  v219 = *(char *)(v216 + 311);
                                  v220 = v219 < 0;
                                  if (v219 >= 0)
                                    v221 = (std::string *)(v216 + 288);
                                  else
                                    v221 = *(std::string **)v217;
                                  v222 = *(unsigned __int8 *)(v216 + 311);
                                  if (v220)
                                    v222 = *(_QWORD *)(v216 + 296);
                                  sub_23948900C((std::string *)v425, v221, (std::string *)((char *)v221 + v222));
                                  sub_239498A04((std::__fs::filesystem::path *)v425, a3, (std::__fs::filesystem::path *)&v438);
                                  goto LABEL_301;
                                }
                              }
                              else if (*(_BYTE *)(v216 + 311))
                              {
                                goto LABEL_295;
                              }
                              if ((*(_DWORD *)(v216 + 344) & 0x80000000) == 0)
                              {
                                sub_2394988CC((uint64_t)&v438);
                                v223 = v439.f64[0];
                                v224 = (char *)&v439 + *(_QWORD *)(*(_QWORD *)&v439.f64[0] - 24);
                                if (*((_DWORD *)v224 + 36) == -1)
                                {
                                  std::ios_base::getloc((const std::ios_base *)((char *)&v439
                                                                              + *(_QWORD *)(*(_QWORD *)&v439.f64[0]
                                                                                          - 24)));
                                  v225 = std::locale::use_facet((const std::locale *)v425, MEMORY[0x24BEDB350]);
                                  ((void (*)(const std::locale::facet *, uint64_t))v225->__vftable[2].~facet_0)(v225, 32);
                                  std::locale::~locale((std::locale *)v425);
                                  v223 = v439.f64[0];
                                }
                                *((_DWORD *)v224 + 36) = 48;
                                *(void **)((char *)&__src + *(_QWORD *)(*(_QWORD *)&v223 - 24)) = (void *)5;
                                std::ostream::operator<<();
                                std::stringbuf::str();
                                v226 = v425[23];
                                if (v425[23] >= 0)
                                  v227 = v425[23];
                                else
                                  v227 = *(_QWORD *)&v425[8];
                                v228 = v227 + 1;
                                if (v227 + 1 > 0x7FFFFFFFFFFFFFF7)
                                  sub_23941A5AC();
                                if (v228 >= 0x17)
                                {
                                  v234 = (v228 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v228 | 7) != 0x17)
                                    v234 = v228 | 7;
                                  v235 = v234 + 1;
                                  p_dst = (std::string *)operator new(v234 + 1);
                                  __dst.__r_.__value_.__r.__words[2] = v235 | 0x8000000000000000;
                                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
                                  __dst.__r_.__value_.__l.__size_ = v227 + 1;
                                }
                                else
                                {
                                  memset(&__dst, 0, sizeof(__dst));
                                  p_dst = &__dst;
                                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v227 + 1;
                                  if (!v227)
                                    goto LABEL_330;
                                }
                                if (v226 >= 0)
                                  v236 = v425;
                                else
                                  v236 = *(_BYTE **)v425;
                                memmove(p_dst, v236, v227);
LABEL_330:
                                v216 = v414;
                                v218 = (const void **)v420;
                                *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v227) = 95;
                                v237 = *(char *)(v420 + 23);
                                if (v237 >= 0)
                                  v238 = (const std::string::value_type *)v420;
                                else
                                  v238 = *(const std::string::value_type **)v420;
                                if (v237 >= 0)
                                  v239 = *(unsigned __int8 *)(v420 + 23);
                                else
                                  v239 = *(_QWORD *)(v420 + 8);
                                v240 = std::string::append(&__dst, v238, v239);
                                v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
                                v480.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&v480.__r_.__value_.__l.__data_ = v241;
                                v240->__r_.__value_.__l.__size_ = 0;
                                v240->__r_.__value_.__r.__words[2] = 0;
                                v240->__r_.__value_.__r.__words[0] = 0;
                                v242 = std::string::append(&v480, ".jpg");
                                v243 = v242->__r_.__value_.__r.__words[0];
                                v489[0] = *(double *)&v242->__r_.__value_.__l.__size_;
                                *(double *)((char *)v489 + 7) = *(double *)((char *)&v242->__r_.__value_.__r.__words[1]
                                                                          + 7);
                                v244 = HIBYTE(v242->__r_.__value_.__r.__words[2]);
                                v242->__r_.__value_.__l.__size_ = 0;
                                v242->__r_.__value_.__r.__words[2] = 0;
                                v242->__r_.__value_.__r.__words[0] = 0;
                                v490.__pn_.__r_.__value_.__r.__words[0] = v243;
                                *(std::string::size_type *)((char *)&v490.__pn_.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v489 + 7);
                                *(double *)&v490.__pn_.__r_.__value_.__l.__size_ = v489[0];
                                *((_BYTE *)&v490.__pn_.__r_.__value_.__s + 23) = v244;
                                sub_239498A04(&v490, a3, (std::__fs::filesystem::path *)&pn);
                                if ((__str[23] & 0x80000000) != 0)
                                  operator delete(*(void **)__str);
                                *(std::string *)__str = pn;
                                *((_BYTE *)&pn.__r_.__value_.__s + 23) = 0;
                                pn.__r_.__value_.__s.__data_[0] = 0;
                                if (SHIBYTE(v490.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v490.__pn_.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
                                    goto LABEL_488;
LABEL_340:
                                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_341;
LABEL_489:
                                  operator delete(__dst.__r_.__value_.__l.__data_);
                                  if ((v425[23] & 0x80000000) == 0)
                                  {
LABEL_342:
                                    v438.f64[0] = v389;
                                    *(_QWORD *)((char *)v438.f64 + *(_QWORD *)(*(_QWORD *)&v389 - 24)) = v388;
                                    v439.f64[0] = v387;
                                    *(_QWORD *)&v439.f64[1] = v386;
                                    if (SHIBYTE(v446) < 0)
                                      operator delete(*((void **)&v445 + 1));
                                    std::streambuf::~streambuf();
                                    std::iostream::~basic_iostream();
                                    MEMORY[0x23B83E250](&v448);
                                    goto LABEL_345;
                                  }
                                }
                                else
                                {
                                  if ((SHIBYTE(v480.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_340;
LABEL_488:
                                  operator delete(v480.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                    goto LABEL_489;
LABEL_341:
                                  if ((v425[23] & 0x80000000) == 0)
                                    goto LABEL_342;
                                }
                                operator delete(*(void **)v425);
                                goto LABEL_342;
                              }
                              v230 = *(char *)(v216 + 335);
                              if (v230 >= 0)
                                v231 = *((unsigned __int8 *)v218 + 23);
                              else
                                v231 = (size_t)v218[1];
                              v232 = v231 + 4;
                              if (v231 + 4 > 0x7FFFFFFFFFFFFFF7)
                                sub_23941A5AC();
                              if (v232 >= 0x17)
                                break;
                              memset(&pn, 0, sizeof(pn));
                              v233 = (char *)&pn;
                              *((_BYTE *)&pn.__r_.__value_.__s + 23) = v231 + 4;
                              if (v231)
                                goto LABEL_494;
                              v216 = v414;
                              v218 = (const void **)v420;
LABEL_498:
                              strcpy(&v233[v231], ".jpg");
                              *(std::string *)v425 = pn;
                              sub_239498A04((std::__fs::filesystem::path *)v425, a3, (std::__fs::filesystem::path *)&v438);
LABEL_301:
                              if ((__str[23] & 0x80000000) != 0)
                                operator delete(*(void **)__str);
                              *(float64x2_t *)__str = v438;
                              *(float64_t *)&__str[16] = v439.f64[0];
                              HIBYTE(v439.f64[0]) = 0;
                              LOBYTE(v438.f64[0]) = 0;
                              if ((v425[23] & 0x80000000) != 0)
                                operator delete(*(void **)v425);
LABEL_345:
                              v423 &= 0xFFFFFFFFFFFFFF00;
                              v411 = *(_QWORD *)(v216 + 112) - *(_QWORD *)(v216 + 104);
                              if (v411 != 16)
                              {
                                sub_239726E08((uint64_t)__str, (uint64_t)&v438);
                                if (!BYTE8(v447))
                                {
                                  if (!(_BYTE)v447)
                                    goto LABEL_485;
                                  if (!BYTE8(v446))
                                    goto LABEL_482;
                                  if (SBYTE7(v446) < 0)
                                  {
                                    operator delete((void *)v445);
                                    if (SBYTE7(v444) < 0)
                                      goto LABEL_539;
LABEL_482:
                                    if (!(_BYTE)__src)
                                    {
LABEL_485:
                                      v293 = 7;
                                      if ((__str[23] & 0x80000000) == 0)
                                        goto LABEL_522;
                                      goto LABEL_525;
                                    }
                                  }
                                  else
                                  {
                                    if ((SBYTE7(v444) & 0x80000000) == 0)
                                      goto LABEL_482;
LABEL_539:
                                    operator delete(v442);
                                    if (!(_BYTE)__src)
                                      goto LABEL_485;
                                  }
                                  if (SHIBYTE(v440) < 0)
                                    operator delete(*(void **)&v439.f64[0]);
                                  goto LABEL_485;
                                }
                                v423 = *(_QWORD *)((char *)v438.f64 + 4);
                                if ((_BYTE)v440)
                                {
                                  v272 = *(std::__shared_weak_count **)&v439.f64[1];
                                  if (*(_QWORD *)&v439.f64[1])
                                  {
                                    v273 = (unint64_t *)(*(_QWORD *)&v439.f64[1] + 8);
                                    do
                                      v274 = __ldaxr(v273);
                                    while (__stlxr(v274 - 1, v273));
                                    if (!v274)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
                                      std::__shared_weak_count::__release_weak(v272);
                                    }
                                  }
                                }
                              }
                              *(_QWORD *)v425 = v422;
                              *(_QWORD *)&v438.f64[0] = v425;
                              v245 = (std::string *)sub_2395A09DC(a2 + 456, (unint64_t *)v425, (uint64_t)&unk_239EC6E98, (uint64_t **)&v438);
                              std::string::operator=(v245 + 1, (const std::string *)__str);
                              v246 = *(unsigned __int8 *)(v199 + 23);
                              if ((v246 & 0x80u) != 0)
                                v246 = *(_QWORD *)(v199 + 8);
                              if (!v246)
                                goto LABEL_437;
                              v406 = v213;
                              v438 = 0uLL;
                              v247 = (const char **)off_250ADFE70;
                              v439.f64[0] = 0.0;
                              while (1)
                              {
                                v248 = (std::string *)*v247;
                                if (*(char *)(v217 + 23) < 0)
                                {
                                  if (!*(_QWORD *)(v217 + 8))
                                  {
LABEL_361:
                                    v253 = *((char *)v218 + 23);
                                    if (v253 >= 0)
                                      v254 = *((unsigned __int8 *)v218 + 23);
                                    else
                                      v254 = (size_t)v218[1];
                                    v255 = strlen(*v247);
                                    v256 = v254 + v255;
                                    if (v254 + v255 > 0x7FFFFFFFFFFFFFF7)
                                      sub_23941A5AC();
                                    v257 = v255;
                                    if (v256 > 0x16)
                                    {
                                      v268 = (v256 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v256 | 7) != 0x17)
                                        v268 = v256 | 7;
                                      v269 = v268 + 1;
                                      v258 = (char *)operator new(v268 + 1);
                                      v490.__pn_.__r_.__value_.__l.__size_ = v256;
                                      v490.__pn_.__r_.__value_.__r.__words[2] = v269 | 0x8000000000000000;
                                      v490.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v258;
                                      v218 = (const void **)v420;
                                      if (v254)
                                      {
LABEL_367:
                                        if (v253 >= 0)
                                          v259 = v218;
                                        else
                                          v259 = *v218;
                                        memmove(v258, v259, v254);
                                      }
                                    }
                                    else
                                    {
                                      memset(&v490, 0, sizeof(v490));
                                      v258 = (char *)&v490;
                                      *((_BYTE *)&v490.__pn_.__r_.__value_.__s + 23) = v254 + v255;
                                      if (v254)
                                        goto LABEL_367;
                                    }
                                    v260 = &v258[v254];
                                    if (v257)
                                      memmove(v260, v248, v257);
                                    v260[v257] = 0;
                                    pn = v490.__pn_;
                                    v199 = a4;
                                    if (*(char *)(a4 + 23) < 0)
                                    {
                                      sub_23941A7F8(v425, *(void **)a4, *(_QWORD *)(a4 + 8));
                                    }
                                    else
                                    {
                                      *(_OWORD *)v425 = *(_OWORD *)a4;
                                      *(_QWORD *)&v425[16] = *(_QWORD *)(a4 + 16);
                                    }
                                    if (std::__fs::filesystem::path::__root_directory((const std::__fs::filesystem::path *)&pn).__size_)
                                    {
                                      std::string::operator=((std::string *)v425, &pn);
                                    }
                                    else
                                    {
                                      if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)v425).__size_)
                                        std::string::push_back((std::string *)v425, 47);
                                      if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        p_pn = &pn;
                                      else
                                        p_pn = (std::string *)pn.__r_.__value_.__r.__words[0];
                                      if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        size = HIBYTE(pn.__r_.__value_.__r.__words[2]);
                                      else
                                        size = pn.__r_.__value_.__l.__size_;
                                      std::string::append((std::string *)v425, (const std::string::value_type *)p_pn, size);
                                    }
                                    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
                                    {
                                      v267 = (void *)pn.__r_.__value_.__r.__words[0];
                                      goto LABEL_417;
                                    }
                                    goto LABEL_418;
                                  }
                                }
                                else if (!*(_BYTE *)(v217 + 23))
                                {
                                  goto LABEL_361;
                                }
                                memset(&v490, 0, sizeof(v490));
                                v249 = *(char *)(v217 + 23);
                                v250 = v249 < 0;
                                if (v249 >= 0)
                                  v251 = (std::string *)v217;
                                else
                                  v251 = *(std::string **)v217;
                                v252 = *(unsigned __int8 *)(v217 + 23);
                                if (v250)
                                  v252 = *(_QWORD *)(v217 + 8);
                                sub_23948900C(&v490.__pn_, v251, (std::string *)((char *)v251 + v252));
                                if (*(char *)(v199 + 23) < 0)
                                  sub_23941A7F8(&pn, *(void **)v199, *(_QWORD *)(v199 + 8));
                                else
                                  pn = *(std::string *)v199;
                                if (std::__fs::filesystem::path::__root_directory(&v490).__size_)
                                {
                                  std::string::operator=(&pn, &v490.__pn_);
                                }
                                else
                                {
                                  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&pn).__size_)
                                    std::string::push_back(&pn, 47);
                                  v261 = (v490.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                       ? &v490
                                       : (std::__fs::filesystem::path *)v490.__pn_.__r_.__value_.__r.__words[0];
                                  v262 = (v490.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                                       ? HIBYTE(v490.__pn_.__r_.__value_.__r.__words[2])
                                       : v490.__pn_.__r_.__value_.__l.__size_;
                                  std::string::append(&pn, (const std::string::value_type *)v261, v262);
                                }
                                memset(&v480, 0, sizeof(v480));
                                v263 = (std::string *)((char *)v248 - 1);
                                do
                                {
                                  v264 = v263->__r_.__value_.__s.__data_[1];
                                  v263 = (std::string *)((char *)v263 + 1);
                                }
                                while (v264);
                                sub_23948900C(&v480, v248, v263);
                                v265 = std::__fs::filesystem::path::replace_extension((std::__fs::filesystem::path *)&pn, (const std::__fs::filesystem::path *)&v480);
                                if (SHIBYTE(v265->__pn_.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  sub_23941A7F8(v425, v265->__pn_.__r_.__value_.__l.__data_, v265->__pn_.__r_.__value_.__l.__size_);
                                }
                                else
                                {
                                  v266 = *(_OWORD *)&v265->__pn_.__r_.__value_.__l.__data_;
                                  *(_QWORD *)&v425[16] = *((_QWORD *)&v265->__pn_.__r_.__value_.__l + 2);
                                  *(_OWORD *)v425 = v266;
                                }
                                if (SHIBYTE(v480.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  operator delete(v480.__r_.__value_.__l.__data_);
                                  if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_394:
                                    if (SHIBYTE(v490.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                      goto LABEL_398;
                                    goto LABEL_418;
                                  }
                                }
                                else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                {
                                  goto LABEL_394;
                                }
                                operator delete(pn.__r_.__value_.__l.__data_);
                                if (SHIBYTE(v490.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                {
LABEL_398:
                                  v267 = (void *)v490.__pn_.__r_.__value_.__r.__words[0];
LABEL_417:
                                  operator delete(v267);
                                }
LABEL_418:
                                std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v425, 0);
                                if (pn.__r_.__value_.__s.__data_[0] == 1)
                                  break;
                                std::__fs::filesystem::__symlink_status((const std::__fs::filesystem::path *)v425, 0);
                                if (pn.__r_.__value_.__s.__data_[0] == 3)
                                  break;
                                if ((v425[23] & 0x80000000) != 0)
                                  operator delete(*(void **)v425);
                                if (++v247 == (const char **)&unk_250ADFE80)
                                  goto LABEL_431;
                              }
                              std::string::operator=((std::string *)&v438, (const std::string *)v425);
                              if ((v425[23] & 0x80000000) != 0)
                                operator delete(*(void **)v425);
LABEL_431:
                              std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v438, 0);
                              if (v425[0] == 1
                                || (std::__fs::filesystem::__symlink_status((const std::__fs::filesystem::path *)&v438, 0), v425[0] == 3))
                              {
                                pn.__r_.__value_.__r.__words[0] = v422;
                                *(_QWORD *)v425 = &pn;
                                v275 = (std::string *)sub_2395A09DC(a2 + 496, (unint64_t *)&pn, (uint64_t)&unk_239EC6E98, (uint64_t **)v425);
                                std::string::operator=(v275 + 1, (const std::string *)&v438);
                              }
                              if (SHIBYTE(v439.f64[0]) < 0)
                                operator delete(*(void **)&v438.f64[0]);
                              v213 = v406;
                              v214 = (void **)v395;
LABEL_437:
                              if (v467[1])
                              {
                                v276 = (uint8x8_t)vcnt_s8((int8x8_t)v467[1]);
                                v276.i16[0] = vaddlv_u8(v276);
                                if (v276.u32[0] > 1uLL)
                                {
                                  v277 = v215;
                                  if ((void *)v215 >= v467[1])
                                    v277 = v215 % (unint64_t)v467[1];
                                }
                                else
                                {
                                  v277 = ((unint64_t)v467[1] - 1) & v215;
                                }
                                v278 = (uint64_t **)*((_QWORD *)v467[0] + v277);
                                if (v278)
                                {
                                  v279 = *v278;
                                  if (v279)
                                  {
                                    if (v276.u32[0] < 2uLL)
                                    {
                                      while (1)
                                      {
                                        v281 = v279[1];
                                        if (v281 == v215)
                                        {
                                          if (v279[2] == v215)
                                            goto LABEL_499;
                                        }
                                        else if ((v281 & ((unint64_t)v467[1] - 1)) != v277)
                                        {
                                          goto LABEL_457;
                                        }
                                        v279 = (uint64_t *)*v279;
                                        if (!v279)
                                          goto LABEL_457;
                                      }
                                    }
                                    do
                                    {
                                      v280 = v279[1];
                                      if (v280 == v215)
                                      {
                                        if (v279[2] == v215)
                                        {
LABEL_499:
                                          v284 = *((_DWORD *)v279 + 6);
                                          v403 = v284 >> 8;
                                          v283 = 0x100000000;
                                          v282 = 1;
                                          v285 = (int8x8_t)v464[1];
                                          if (!v464[1])
                                            goto LABEL_500;
                                          goto LABEL_458;
                                        }
                                      }
                                      else
                                      {
                                        if ((void *)v280 >= v467[1])
                                          v280 %= (unint64_t)v467[1];
                                        if (v280 != v277)
                                          break;
                                      }
                                      v279 = (uint64_t *)*v279;
                                    }
                                    while (v279);
                                  }
                                }
                              }
LABEL_457:
                              v282 = 0;
                              v283 = 0;
                              LOBYTE(v284) = 0;
                              v285 = (int8x8_t)v464[1];
                              if (!v464[1])
                              {
LABEL_500:
                                v297 = 0;
                                v298 = 1;
                                goto LABEL_501;
                              }
LABEL_458:
                              v286 = (uint8x8_t)vcnt_s8(v285);
                              v286.i16[0] = vaddlv_u8(v286);
                              if (v286.u32[0] > 1uLL)
                              {
                                v287 = v215;
                                if (v215 >= *(_QWORD *)&v285)
                                  v287 = v215 % *(_QWORD *)&v285;
                              }
                              else
                              {
                                v287 = (*(_QWORD *)&v285 - 1) & v215;
                              }
                              v288 = (uint64_t **)*((_QWORD *)v464[0] + v287);
                              if (!v288)
                                goto LABEL_500;
                              v289 = *v288;
                              if (!v289)
                                goto LABEL_500;
                              if (v286.u32[0] < 2uLL)
                              {
                                v290 = *(_QWORD *)&v285 - 1;
                                while (1)
                                {
                                  v292 = v289[1];
                                  if (v292 == v215)
                                  {
                                    if (v289[2] == v215)
                                      goto LABEL_537;
                                  }
                                  else if ((v292 & v290) != v287)
                                  {
                                    goto LABEL_500;
                                  }
                                  v289 = (uint64_t *)*v289;
                                  if (!v289)
                                    goto LABEL_500;
                                }
                              }
                              while (2)
                              {
                                v291 = v289[1];
                                if (v291 != v215)
                                {
                                  if (v291 >= *(_QWORD *)&v285)
                                    v291 %= *(_QWORD *)&v285;
                                  if (v291 != v287)
                                    goto LABEL_500;
                                  goto LABEL_467;
                                }
                                if (v289[2] != v215)
                                {
LABEL_467:
                                  v289 = (uint64_t *)*v289;
                                  if (!v289)
                                    goto LABEL_500;
                                  continue;
                                }
                                break;
                              }
LABEL_537:
                              v298 = 0;
                              v297 = *((_BYTE *)v289 + 24);
                              *(_OWORD *)&v490.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v289 + 25);
                              *(std::string::size_type *)((char *)&v490.__pn_.__r_.__value_.__r.__words[1] + 7) = v289[5];
LABEL_501:
                              v438 = v408;
                              v439 = v408;
                              LOBYTE(v440) = 1;
                              __src = 0;
                              v442 = (void *)8;
                              *(_QWORD *)v425 = 0;
                              malloc_type_posix_memalign((void **)v425, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
                              v299 = *(_OWORD **)v425;
                              __src = *(void **)v425;
                              if (!*(_QWORD *)v425)
                              {
                                exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                                v381 = std::bad_alloc::bad_alloc(exception);
                                __cxa_throw(v381, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                              }
                              LODWORD(v443) = 5;
                              *(_QWORD *)(*(_QWORD *)v425 + 32) = 0;
                              *v299 = 0u;
                              v299[1] = 0u;
                              v448 = xmmword_239EC7740;
                              v449 = unk_239EC7750;
                              v450 = xmmword_239EC7760;
                              v451 = xmmword_239EC7770;
                              v444 = xmmword_239EC7700;
                              v445 = *(_OWORD *)algn_239EC7710;
                              v446 = xmmword_239EC7720;
                              v447 = unk_239EC7730;
                              *(_QWORD *)v452 = -1;
                              HIBYTE(v454) = 0;
                              v452[56] = 0;
                              v455 = 0;
                              v462 = 0;
                              memset(&v452[8], 0, 42);
                              LOBYTE(v436) = 0;
                              v437 = 0;
                              if (v411 != 16)
                              {
                                v436 = v423;
                                v437 = 1;
                              }
                              v433 = 0;
                              v435 = 0;
                              if ((v298 & 1) == 0)
                              {
                                v433 = v297;
                                *(_OWORD *)v434 = *(_OWORD *)&v490.__pn_.__r_.__value_.__l.__data_;
                                *(_QWORD *)&v434[15] = *(std::string::size_type *)((char *)&v490.__pn_.__r_.__value_.__r.__words[1]
                                                                                 + 7);
                                v435 = 1;
                              }
                              v300 = v284 | (v403 << 8);
                              if ((sub_2395D38BC(v414, (uint64_t)&v438, (uint64_t *)&v436, v283 | v300, (uint64_t)&v433) & 1) != 0
                                && sub_2395D7584(a2, v422, (char *)&v438))
                              {
                                if ((*(_DWORD *)(v414 + 336) & 0x80000000) == 0)
                                {
                                  *(_DWORD *)v425 = *(_DWORD *)(v414 + 336);
                                  memset(&v425[8], 0, 24);
                                  memset(&pn, 0, sizeof(pn));
                                  v301 = sub_2395FB340((uint64_t)v476, (int *)v425, (uint64_t)v425);
                                  v302 = *(_QWORD *)&v425[8];
                                  if (*(_QWORD *)&v425[8])
                                  {
                                    v303 = *(_QWORD *)&v425[16];
                                    v304 = *(void **)&v425[8];
                                    if (*(_QWORD *)&v425[16] != *(_QWORD *)&v425[8])
                                    {
                                      do
                                      {
                                        v305 = v303 - 64;
                                        free(*(void **)(v303 - 24));
                                        v303 = v305;
                                      }
                                      while (v305 != v302);
                                      v304 = *(void **)&v425[8];
                                    }
                                    *(_QWORD *)&v425[16] = v302;
                                    operator delete(v304);
                                  }
                                  v306 = *((_QWORD *)v301 + 4);
                                  if (v306 >= *((_QWORD *)v301 + 5))
                                  {
                                    v312 = sub_2395FB700((void **)v301 + 3, (uint64_t)&v438);
                                  }
                                  else
                                  {
                                    v307 = v439;
                                    *(float64x2_t *)v306 = v438;
                                    *(float64x2_t *)(v306 + 16) = v307;
                                    *(_BYTE *)(v306 + 32) = (_BYTE)v440;
                                    v308 = (int)v443;
                                    v309 = 8 * v443;
                                    v310 = (v309 + 31) & 0xFFFFFFFE0;
                                    *(_QWORD *)(v306 + 40) = 0;
                                    *(_QWORD *)(v306 + 48) = v310 >> 3;
                                    *(_QWORD *)v425 = 0;
                                    malloc_type_posix_memalign((void **)v425, 0x20uLL, v310, 0x100BBD03uLL);
                                    v311 = *(void **)v425;
                                    *(_QWORD *)(v306 + 40) = *(_QWORD *)v425;
                                    if (!v311)
                                    {
                                      v382 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                                      v383 = std::bad_alloc::bad_alloc(v382);
                                      __cxa_throw(v383, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                                    }
                                    if (v308)
                                      memcpy(v311, __src, v309);
                                    *(_DWORD *)(v306 + 56) = (_DWORD)v443;
                                    v312 = (char *)(v306 + 64);
                                    *((_QWORD *)v301 + 4) = v306 + 64;
                                  }
                                  *((_QWORD *)v301 + 4) = v312;
                                }
                                v293 = 0;
                                if (v452[47])
                                  v313 = v282;
                                else
                                  v313 = 0;
                                if (v313 == 1 && (v300 & 0x80000000) == 0 && v462)
                                {
                                  *(_OWORD *)&v425[73] = v459;
                                  *(_OWORD *)&v425[89] = v460;
                                  *(_OWORD *)&v425[105] = *(_OWORD *)v461;
                                  *(_OWORD *)&v425[120] = *(_OWORD *)&v461[15];
                                  *(_OWORD *)&v425[9] = *(_OWORD *)v456;
                                  *(_OWORD *)&v425[25] = *(_OWORD *)&v456[16];
                                  *(_OWORD *)&v425[41] = v457;
                                  *(_OWORD *)&v425[57] = v458;
                                  *(_DWORD *)v425 = v300;
                                  v425[8] = v455;
                                  sub_2395F867C(a2 + 192, (unsigned int *)v425, (uint64_t)v425);
                                  v293 = 0;
                                }
                              }
                              else
                              {
                                v293 = 1;
                              }
                              if (SHIBYTE(v454) < 0)
                              {
                                operator delete(*(void **)&v452[56]);
                                free(__src);
                                if ((__str[23] & 0x80000000) != 0)
                                  goto LABEL_525;
LABEL_522:
                                if (v293 != 7)
                                  goto LABEL_526;
                              }
                              else
                              {
                                free(__src);
                                if ((__str[23] & 0x80000000) == 0)
                                  goto LABEL_522;
LABEL_525:
                                operator delete(*(void **)__str);
                                if (v293 != 7)
                                {
LABEL_526:
                                  if (v293)
                                    goto LABEL_600;
                                }
                              }
                              if (++v213 == v214)
                                goto LABEL_541;
                            }
                            v294 = (v232 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v232 | 7) != 0x17)
                              v294 = v232 | 7;
                            v295 = v294 + 1;
                            v233 = (char *)operator new(v294 + 1);
                            pn.__r_.__value_.__r.__words[2] = v295 | 0x8000000000000000;
                            pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v233;
                            pn.__r_.__value_.__l.__size_ = v231 + 4;
LABEL_494:
                            v218 = (const void **)v420;
                            if (v230 >= 0)
                              v296 = (const std::string::value_type *)v420;
                            else
                              v296 = *(const std::string::value_type **)v420;
                            memmove(v233, v296, v231);
                            v216 = v414;
                            goto LABEL_498;
                          }
LABEL_541:
                          for (i = (uint64_t *)v477; i; i = (uint64_t *)*i)
                          {
                            sub_2395D783C(i + 3, (uint64_t)&v438);
                            *(_DWORD *)__str = *((_DWORD *)i + 4);
                            *(_QWORD *)v425 = __str;
                            v315 = sub_2395FB988(a2 + 152, (unsigned int *)__str, (uint64_t)&unk_239EC6E98, (_DWORD **)v425);
                            v316 = v439;
                            *(float64x2_t *)(v315 + 3) = v438;
                            *(float64x2_t *)(v315 + 5) = v316;
                            *((_BYTE *)v315 + 56) = (_BYTE)v440;
                            v317 = (void *)v315[8];
                            v318 = (void *)v315[9];
                            v319 = v442;
                            v315[8] = (uint64_t)__src;
                            v315[9] = (uint64_t)v319;
                            __src = v317;
                            v442 = v318;
                            *((_DWORD *)v315 + 20) = (_DWORD)v443;
                            LODWORD(v443) = 0;
                            free(v317);
                          }
                          if (v385 == v384)
                            goto LABEL_604;
                          v320 = *(uint64_t **)(a2 + 88);
                          if (v320)
                          {
                            v321 = -1;
                            do
                            {
                              v322 = *((_DWORD *)v320 + 55);
                              if ((v322 & 0x80000000) == 0)
                              {
                                v323 = v321 >= v322 ? *((_DWORD *)v320 + 55) : v321;
                                v321 = v321 == -1 ? *((_DWORD *)v320 + 55) : v323;
                                if (!v321)
                                {
                                  memset(&pn, 0, sizeof(pn));
                                  goto LABEL_559;
                                }
                              }
                              v320 = (uint64_t *)*v320;
                            }
                            while (v320);
                            memset(&pn, 0, sizeof(pn));
                            if (v321 == -1)
                              goto LABEL_590;
LABEL_559:
                            v324 = (void **)v470;
                            v325 = (void **)v471;
                            if (v470 != v471)
                            {
                              do
                              {
                                if (v467[1])
                                {
                                  v326 = (unint64_t)*v324;
                                  v327 = (uint8x8_t)vcnt_s8((int8x8_t)v467[1]);
                                  v327.i16[0] = vaddlv_u8(v327);
                                  if (v327.u32[0] > 1uLL)
                                  {
                                    v328 = (unint64_t)*v324;
                                    if ((void *)v326 >= v467[1])
                                      v328 = v326 % (unint64_t)v467[1];
                                  }
                                  else
                                  {
                                    v328 = ((unint64_t)v467[1] - 1) & v326;
                                  }
                                  v329 = (uint64_t **)*((_QWORD *)v467[0] + v328);
                                  if (v329)
                                  {
                                    v330 = *v329;
                                    if (*v329)
                                    {
                                      if (v327.u32[0] < 2uLL)
                                      {
                                        while (1)
                                        {
                                          v332 = v330[1];
                                          if (v332 == v326)
                                          {
                                            if (v330[2] == v326)
                                              goto LABEL_583;
                                          }
                                          else if ((v332 & ((unint64_t)v467[1] - 1)) != v328)
                                          {
                                            goto LABEL_561;
                                          }
                                          v330 = (uint64_t *)*v330;
                                          if (!v330)
                                            goto LABEL_561;
                                        }
                                      }
                                      do
                                      {
                                        v331 = v330[1];
                                        if (v331 == v326)
                                        {
                                          if (v330[2] == v326)
                                          {
LABEL_583:
                                            if (*((_DWORD *)v330 + 6) == v321)
                                            {
                                              v333 = *(_QWORD *)(a1 + 176) + 352 * v326;
                                              v334 = *(char **)(v333 + 184);
                                              v335 = *(char **)(v333 + 192);
                                              if (&pn != (std::string *)(v333 + 184) && v334 != v335)
                                                sub_23945D3D0(&pn, v334, v335, (v335 - v334) >> 3);
                                            }
                                            break;
                                          }
                                        }
                                        else
                                        {
                                          if ((void *)v331 >= v467[1])
                                            v331 %= (unint64_t)v467[1];
                                          if (v331 != v328)
                                            break;
                                        }
                                        v330 = (uint64_t *)*v330;
                                      }
                                      while (v330);
                                    }
                                  }
                                }
LABEL_561:
                                ++v324;
                              }
                              while (v324 != v325);
                            }
                          }
                          else
                          {
                            memset(&pn, 0, sizeof(pn));
LABEL_590:
                            v337 = *(_QWORD *)(a1 + 176);
                            if (&pn != (std::string *)(v337 + 184))
                              sub_23945D3D0(&pn, *(char **)(v337 + 184), *(char **)(v337 + 192), (uint64_t)(*(_QWORD *)(v337 + 192) - *(_QWORD *)(v337 + 184)) >> 3);
                          }
                          v338 = (void *)pn.__r_.__value_.__l.__size_;
                          if (pn.__r_.__value_.__l.__size_ - pn.__r_.__value_.__r.__words[0] == 128)
                          {
                            v340 = *(_OWORD *)pn.__r_.__value_.__l.__data_;
                            v339 = *(int64x2_t *)(pn.__r_.__value_.__r.__words[0] + 16);
                            v342 = *(int64x2_t *)(pn.__r_.__value_.__r.__words[0] + 32);
                            v341 = *(int64x2_t *)(pn.__r_.__value_.__r.__words[0] + 48);
                            v343 = *(int64x2_t *)(pn.__r_.__value_.__r.__words[0] + 64);
                            v344 = *(int64x2_t *)(pn.__r_.__value_.__r.__words[0] + 80);
                            v352 = *(float64x2_t *)(pn.__r_.__value_.__r.__words[0] + 112);
                            v345 = (float64x2_t)vzip1q_s64(*(int64x2_t *)pn.__r_.__value_.__l.__data_, v342);
                            v346 = (float64x2_t)vzip1q_s64(v343, *(int64x2_t *)(pn.__r_.__value_.__r.__words[0] + 96));
                            *(_QWORD *)&v347 = vdupq_laneq_s64(v343, 1).u64[0];
                            *((_QWORD *)&v347 + 1) = *(_QWORD *)(pn.__r_.__value_.__r.__words[0] + 104);
                            v348 = (float64x2_t)vzip2q_s64(*(int64x2_t *)pn.__r_.__value_.__l.__data_, v342);
                            v349 = (float64x2_t)vzip1q_s64(v339, v341);
                            v350 = vzip1q_s64(v344, (int64x2_t)v352);
                            v344.i64[0] = vdupq_laneq_s64(v344, 1).u64[0];
                            v354.f64[1] = *(float64_t *)(pn.__r_.__value_.__r.__words[0] + 120);
                            *(float64x2_t *)&__str[16] = v346;
                            *(float64x2_t *)__str = v345;
                            v484 = v347;
                            v483 = v348;
                            v486 = v350;
                            v485 = v349;
                            v488 = v354;
                            v487 = vzip2q_s64(v339, v341);
                            v351 = (float64x2_t)vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL);
                            *(_QWORD *)&v352.f64[0] = v347;
                            v353 = (float64x2_t)vextq_s8((int8x16_t)v349, (int8x16_t)v349, 8uLL);
                            *(_QWORD *)&v354.f64[0] = v486.i64[0];
                            v355 = vmulq_f64(v345, vmlaq_n_f64(vmulq_n_f64(v353, -v352.f64[0]), v351, *(double *)v486.i64));
                            if (v346.f64[0]
                               * vmlad_n_f64(-*(double *)&v342.i64[1] * *(double *)v339.i64, *((double *)&v340 + 1), *(double *)v341.i64)+ vsubq_f64(v355, (float64x2_t)vdupq_laneq_s64((int64x2_t)v355, 1)).f64[0] < 0.0)
                            {
                              *(_QWORD *)&v345.f64[1] = vextq_s8((int8x16_t)v345, (int8x16_t)v345, 8uLL).u64[0];
                              v348.f64[1] = v351.f64[0];
                              v349.f64[1] = v353.f64[0];
                              *(float64x2_t *)__str = vnegq_f64(v345);
                              *(_QWORD *)&__str[16] = *(_OWORD *)&vnegq_f64(v346);
                              v483 = vnegq_f64(v348);
                              *(_QWORD *)&v484 = *(_OWORD *)&vnegq_f64(v352);
                              v485 = vnegq_f64(v349);
                              v486.i64[0] = *(_OWORD *)&vnegq_f64(v354);
                            }
                            sub_239A22BE8(&v448);
                            *(float64x2_t *)&v425[64] = v485;
                            *(int64x2_t *)&v425[80] = v486;
                            *(int64x2_t *)&v425[96] = v487;
                            *(float64x2_t *)&v425[112] = v488;
                            *(_OWORD *)v425 = *(_OWORD *)__str;
                            *(_OWORD *)&v425[16] = *(_OWORD *)&__str[16];
                            *(float64x2_t *)&v425[32] = v483;
                            *(_OWORD *)&v425[48] = v484;
                            v427 = v450;
                            v428 = v451;
                            *(_OWORD *)&v425[128] = v448;
                            v426 = v449;
                            v431 = *(_OWORD *)&v452[32];
                            v432 = *(_OWORD *)&v452[48];
                            v429 = *(_OWORD *)v452;
                            v430 = *(_OWORD *)&v452[16];
                            v356 = v486;
                            *(float64x2_t *)(a2 + 600) = v485;
                            *(int64x2_t *)(a2 + 616) = v356;
                            v357 = *(_OWORD *)&v425[112];
                            *(_OWORD *)(a2 + 632) = *(_OWORD *)&v425[96];
                            *(_OWORD *)(a2 + 648) = v357;
                            v358 = *(_OWORD *)&v425[16];
                            *(_OWORD *)(a2 + 536) = *(_OWORD *)v425;
                            *(_OWORD *)(a2 + 552) = v358;
                            v359 = *(_OWORD *)&v425[48];
                            *(_OWORD *)(a2 + 568) = *(_OWORD *)&v425[32];
                            *(_OWORD *)(a2 + 584) = v359;
                            v360 = *(_OWORD *)&v425[128];
                            v361 = v426;
                            v362 = v428;
                            *(_OWORD *)(a2 + 696) = v427;
                            *(_OWORD *)(a2 + 712) = v362;
                            *(_OWORD *)(a2 + 664) = v360;
                            *(_OWORD *)(a2 + 680) = v361;
                            v363 = v429;
                            v364 = v430;
                            v365 = v432;
                            *(_OWORD *)(a2 + 760) = v431;
                            *(_OWORD *)(a2 + 776) = v365;
                            *(_OWORD *)(a2 + 728) = v363;
                            *(_OWORD *)(a2 + 744) = v364;
                            if (!sub_2394AEBA4((float64x2_t *)(a2 + 536), 0.0001))
                            {
                              sub_239A444D4((uint64_t)"unknown file", 556, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                              sub_239A4475C();
                              abort();
                            }
                            v338 = (void *)pn.__r_.__value_.__r.__words[0];
LABEL_602:
                            if (v338)
                            {
                              pn.__r_.__value_.__l.__size_ = (std::string::size_type)v338;
                              operator delete(v338);
                            }
LABEL_604:
                            v36 = 1;
                            v366 = v465[0];
                            if (v465[0])
                            {
                              do
                              {
LABEL_605:
                                v367 = (_QWORD *)*v366;
                                operator delete(v366);
                                v366 = v367;
                              }
                              while (v367);
                            }
                          }
                          else
                          {
                            if (pn.__r_.__value_.__r.__words[0] == pn.__r_.__value_.__l.__size_)
                              goto LABEL_602;
                            if (pn.__r_.__value_.__r.__words[0])
                            {
                              pn.__r_.__value_.__l.__size_ = pn.__r_.__value_.__r.__words[0];
                              operator delete(pn.__r_.__value_.__l.__data_);
                            }
LABEL_600:
                            v36 = 0;
                            v366 = v465[0];
                            if (v465[0])
                              goto LABEL_605;
                          }
                          v368 = v464[0];
                          v464[0] = 0;
                          if (v368)
                            operator delete(v368);
                          v369 = __p[0];
                          if (__p[0])
                          {
                            do
                            {
                              v370 = (_QWORD *)*v369;
                              operator delete(v369);
                              v369 = v370;
                            }
                            while (v370);
                          }
                          v371 = v467[0];
                          v467[0] = 0;
                          if (v371)
                            operator delete(v371);
                          v10 = (char *)v470;
                          if (!v470)
                            goto LABEL_614;
LABEL_613:
                          v471 = (__n128 *)v10;
                          operator delete(v10);
                          goto LABEL_614;
                        }
                      }
                      v202 = 0;
                      v203 = 0;
                      while (2)
                      {
                        sub_2395A7198((uint64_t)&v438, v201 + v202);
                        if (v454 - (_BYTE *)v453 == 24)
                        {
                          v204 = *(double *)v453;
                          v205 = *((double *)v453 + 1);
                          v206 = *((double *)v453 + 2);
                          if ((*(double *)v453 == 0.0 || fabs(v204) >= 0.0001) && (v205 == 0.0 || fabs(v205) >= 0.0001))
                          {
                            if (*(double *)&v456[7] >= 0.0)
                              v206 = v200 + *(double *)&v456[7];
                            __dst.__r_.__value_.__r.__words[0] = 0;
                            v489[0] = 0.0;
                            v479 = 0;
                            sub_239613668((uint64_t)v425, (double *)&__dst, v489, (double *)&v479, v204, v205, v206);
                            *(_QWORD *)__str = v203;
                            *(_QWORD *)&__str[8] = __dst.__r_.__value_.__r.__words[0];
                            *(_QWORD *)&__str[16] = v479;
                            *(double *)&__str[24] = -v489[0];
                            sub_2395F7594((uint64_t)v464, (unint64_t *)__str, (uint64_t)__str);
                          }
                        }
                        if (SBYTE14(v458) < 0)
                        {
                          operator delete(*(void **)((char *)&v457 + 7));
                          if (SBYTE6(v457) < 0)
                            goto LABEL_270;
LABEL_247:
                          v207 = v453;
                          if (!v453)
                          {
LABEL_249:
                            if (*(_QWORD *)&v452[40])
                            {
                              *(_QWORD *)&v452[48] = *(_QWORD *)&v452[40];
                              operator delete(*(void **)&v452[40]);
                            }
                            if (*(_QWORD *)&v452[16])
                            {
                              *(_QWORD *)&v452[24] = *(_QWORD *)&v452[16];
                              operator delete(*(void **)&v452[16]);
                            }
                            if (*((_QWORD *)&v451 + 1))
                            {
                              *(_QWORD *)v452 = *((_QWORD *)&v451 + 1);
                              operator delete(*((void **)&v451 + 1));
                            }
                            if ((_QWORD)v450)
                            {
                              *((_QWORD *)&v450 + 1) = v450;
                              operator delete((void *)v450);
                            }
                            if (*((_QWORD *)&v448 + 1))
                            {
                              *(_QWORD *)&v449 = *((_QWORD *)&v448 + 1);
                              operator delete(*((void **)&v448 + 1));
                            }
                            if (*((_QWORD *)&v446 + 1))
                            {
                              *(_QWORD *)&v447 = *((_QWORD *)&v446 + 1);
                              operator delete(*((void **)&v446 + 1));
                            }
                            if ((_QWORD)v445)
                            {
                              *((_QWORD *)&v445 + 1) = v445;
                              operator delete((void *)v445);
                            }
                            if (v443)
                            {
                              *(_QWORD *)&v444 = v443;
                              operator delete(v443);
                            }
                            if (v440)
                            {
                              __src = v440;
                              operator delete(v440);
                            }
                            if (SHIBYTE(v439.f64[0]) < 0)
                              operator delete(*(void **)&v438.f64[0]);
                            ++v203;
                            v201 = *(_QWORD *)(a1 + 176);
                            v202 += 352;
                            if (v203 >= 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 184) - v201) >> 5))
                              goto LABEL_272;
                            continue;
                          }
                        }
                        else
                        {
                          if ((SBYTE6(v457) & 0x80000000) == 0)
                            goto LABEL_247;
LABEL_270:
                          operator delete(*(void **)&v456[15]);
                          v207 = v453;
                          if (!v453)
                            goto LABEL_249;
                        }
                        break;
                      }
                      v454 = v207;
                      operator delete(v207);
                      goto LABEL_249;
                    }
                  }
                  else
                  {
                    v141 = v112;
                    v140 = 0;
                    v142 = (double *)(8 * v137);
                    *(double *)(8 * v137) = v122;
                    v110 = 8 * v137 + 8;
                    if (v141 == v116)
                      goto LABEL_165;
                  }
                  v143 = v141;
                  v144 = v141 - 1;
                  v145 = (char *)(v141 - 1) - (char *)v116;
                  if (v145 >= 0x168)
                  {
                    if (&v140[v136 - 8 - (v145 & 0xFFFFFFFFFFFFFFF8)] > &v140[v136 - 8])
                    {
                      v146 = v143;
                    }
                    else if ((double *)((char *)v144 - (v145 & 0xFFFFFFFFFFFFFFF8)) > v144)
                    {
                      v146 = v143;
                    }
                    else if ((unint64_t)((char *)v144 - &v140[v136] + 8) >= 0x20)
                    {
                      v164 = (v145 >> 3) + 1;
                      v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
                      v146 = &v143[v165 / 0xFFFFFFFFFFFFFFF8];
                      v142 = (double *)((char *)v142 - v165);
                      v166 = &v140[8 * v137 - 16];
                      v167 = v143 - 2;
                      v168 = v164 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v169 = *(_OWORD *)v167;
                        *((_OWORD *)v166 - 1) = *((_OWORD *)v167 - 1);
                        *(_OWORD *)v166 = v169;
                        v166 -= 32;
                        v167 -= 4;
                        v168 -= 4;
                      }
                      while (v168);
                      if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_165;
                    }
                    else
                    {
                      v146 = v143;
                    }
                  }
                  else
                  {
                    v146 = v143;
                  }
                  do
                  {
                    v147 = *((_QWORD *)v146-- - 1);
                    *((_QWORD *)v142-- - 1) = v147;
                  }
                  while (v146 != v116);
                  goto LABEL_165;
                }
                break;
              }
              v126 = v110;
              v127 = v111;
              v128 = v113 - v115;
              v129 = v128 + 1;
              if ((unint64_t)(v128 + 1) >> 61)
                goto LABEL_630;
              if ((uint64_t)(v423 - (_QWORD)v115) >> 2 > v129)
                v129 = (uint64_t)(v423 - (_QWORD)v115) >> 2;
              if (v423 - (unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
                v130 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v130 = v129;
              v405 = v112;
              if (v130)
              {
                if (v130 >> 61)
                  goto LABEL_628;
                v131 = operator new(8 * v130);
                v132 = (double *)&v131[8 * v128];
                *v132 = v123;
                v421 = (std::string::size_type)(v132 + 1);
                if (v113 != v115)
                {
LABEL_142:
                  v133 = (char *)(v113 - 1) - (char *)v115;
                  if (v133 < 0x168
                    || &v131[(char *)v113 - (char *)v115 - 8 - (v133 & 0xFFFFFFFFFFFFFFF8)] > &v131[(char *)v113 - (char *)v115 - 8]
                    || (double *)((char *)v113 - (v133 & 0xFFFFFFFFFFFFFFF8) - 8) > v113 - 1
                    || (unint64_t)((char *)v115 - v131) < 0x20)
                  {
                    v134 = v113;
                    v111 = v127;
                  }
                  else
                  {
                    v155 = (v133 >> 3) + 1;
                    v156 = 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
                    v134 = &v113[v156 / 0xFFFFFFFFFFFFFFF8];
                    v132 = (double *)((char *)v132 - v156);
                    v157 = &v131[8 * v128 - 16];
                    v158 = v113 - 2;
                    v159 = v155 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v160 = *(_OWORD *)v158;
                      *(v157 - 1) = *((_OWORD *)v158 - 1);
                      *v157 = v160;
                      v157 -= 2;
                      v158 -= 4;
                      v159 -= 4;
                    }
                    while (v159);
                    v111 = v127;
                    if (v155 == (v155 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_145:
                      v423 = (std::string::size_type)&v131[8 * v130];
                      v110 = v126;
                      if (v115)
                        goto LABEL_146;
                      goto LABEL_147;
                    }
                  }
                  do
                  {
                    v135 = *((_QWORD *)v134-- - 1);
                    *((_QWORD *)v132-- - 1) = v135;
                  }
                  while (v134 != v115);
                  goto LABEL_145;
                }
              }
              else
              {
                v131 = 0;
                v132 = (double *)(8 * v128);
                *(double *)(8 * v128) = v123;
                v421 = 8 * v128 + 8;
                if (v113 != v115)
                  goto LABEL_142;
              }
              v111 = v127;
              v423 = (std::string::size_type)&v131[8 * v130];
              v110 = v126;
              if (v115)
LABEL_146:
                operator delete(v115);
LABEL_147:
              v115 = v132;
              v54 = v410;
              v114 = v418;
              v112 = v405;
              if ((unint64_t)v405 >= v418)
                goto LABEL_148;
LABEL_131:
              *v112 = v122;
              v110 = (std::string::size_type)(v112 + 1);
              v125 = *(double *)(v53 + 280);
              if (v125 < 0.0)
                goto LABEL_118;
LABEL_168:
              v148 = v124 - v125;
              if ((unint64_t)v111 < v413)
              {
                *v111++ = v148;
                v402 = (std::string::size_type)v111;
                goto LABEL_118;
              }
              v149 = v110;
              v150 = v111 - v400;
              v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 61)
              {
                pn.__r_.__value_.__r.__words[2] = v423;
                v490.__pn_.__r_.__value_.__l.__size_ = v110;
                v490.__pn_.__r_.__value_.__r.__words[2] = v114;
                v480.__r_.__value_.__r.__words[2] = v413;
                pn.__r_.__value_.__l.__size_ = v421;
                pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                v490.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
                v480.__r_.__value_.__l.__size_ = v402;
                v480.__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
                sub_2394189F8();
              }
              if ((uint64_t)(v413 - (_QWORD)v400) >> 2 > v151)
                v151 = (uint64_t)(v413 - (_QWORD)v400) >> 2;
              if (v413 - (unint64_t)v400 >= 0x7FFFFFFFFFFFFFF8)
                v152 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v152 = v151;
              v419 = v114;
              if (v152)
              {
                if (v152 >> 61)
                {
                  pn.__r_.__value_.__r.__words[2] = v423;
                  v490.__pn_.__r_.__value_.__l.__size_ = v149;
                  v490.__pn_.__r_.__value_.__r.__words[2] = v114;
                  v480.__r_.__value_.__r.__words[2] = v413;
                  pn.__r_.__value_.__l.__size_ = v421;
                  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                  v490.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
                  v480.__r_.__value_.__l.__size_ = v402;
                  v480.__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
                  sub_239418A80();
                }
                v153 = operator new(8 * v152);
                v154 = (double *)&v153[8 * v150];
                *v154 = v148;
                v402 = (std::string::size_type)(v154 + 1);
                if (v111 == v400)
                  goto LABEL_194;
LABEL_191:
                v161 = (char *)(v111 - 1) - (char *)v400;
                if (v161 < 0x168)
                {
                  v162 = v111;
                  goto LABEL_193;
                }
                if (&v153[(char *)v111 - (char *)v400 - 8 - (v161 & 0xFFFFFFFFFFFFFFF8)] > &v153[(char *)v111 - (char *)v400 - 8])
                {
                  v162 = v111;
                  goto LABEL_193;
                }
                if ((double *)((char *)v111 - (v161 & 0xFFFFFFFFFFFFFFF8) - 8) > v111 - 1)
                {
                  v162 = v111;
                  goto LABEL_193;
                }
                if ((unint64_t)((char *)v400 - v153) < 0x20)
                {
                  v162 = v111;
                  goto LABEL_193;
                }
                v170 = (v161 >> 3) + 1;
                v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
                v162 = &v111[v171 / 0xFFFFFFFFFFFFFFF8];
                v154 = (double *)((char *)v154 - v171);
                v172 = &v153[8 * v150 - 16];
                v173 = v111 - 2;
                v174 = v170 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v175 = *(_OWORD *)v173;
                  *(v172 - 1) = *((_OWORD *)v173 - 1);
                  *v172 = v175;
                  v172 -= 2;
                  v173 -= 4;
                  v174 -= 4;
                }
                while (v174);
                if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_193:
                    v163 = *((_QWORD *)v162-- - 1);
                    *((_QWORD *)v154-- - 1) = v163;
                  }
                  while (v162 != v400);
                }
              }
              else
              {
                v153 = 0;
                v154 = (double *)(8 * v150);
                *(double *)(8 * v150) = v148;
                v402 = 8 * v150 + 8;
                if (v111 != v400)
                  goto LABEL_191;
              }
LABEL_194:
              v413 = (std::string::size_type)&v153[8 * v152];
              if (v400)
                operator delete(v400);
              v111 = (double *)v402;
              v110 = v149;
              v112 = (double *)v149;
              v113 = (double *)v421;
              v400 = v154;
              v54 = v410;
              v114 = v419;
              goto LABEL_119;
            }
          }
          sub_23946DAD4((uint64_t)&v473, v43);
          goto LABEL_50;
        }
      }
      v32 = *(_QWORD *)&v439.f64[0];
      if (!*(_BYTE *)(v28 + 23))
        goto LABEL_31;
      v33 = v28;
      if ((unint64_t)v27 >= *(_QWORD *)&v439.f64[0])
        goto LABEL_35;
      v29 = *(_OWORD *)v28;
      v30 = *(_QWORD *)(v28 + 16);
LABEL_22:
      *((_QWORD *)v27 + 2) = v30;
      *(_OWORD *)v27 = v29;
LABEL_23:
      v27 += 24;
      *(_QWORD *)&v438.f64[1] = v27;
      v25 += 352;
      v31 = v28 + 64;
      v28 += 352;
      if (v31 == v26)
        goto LABEL_40;
    }
  }
  v21 = a5[1];
  if (v9 == (v21 - *a5) >> 3)
  {
    if (&v473 != (void **)a5)
    {
      sub_23945D3D0(&v473, *a5, v21, v8 / 352);
      v10 = (char *)v470;
      v11 = v471;
    }
    *(_QWORD *)&v438.f64[0] = &v473;
    if ((char *)v11 - v10 < 1025)
    {
LABEL_18:
      sub_2395F89BC(v10, v11, (uint64_t **)&v438, ((char *)v11 - v10) >> 3, 0, 0);
    }
    else
    {
      v22 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v23 = ((char *)v11 - v10) >> 3;
      while (1)
      {
        v24 = (char *)operator new(8 * v23, v22);
        if (v24)
          break;
        v220 = v23 > 1;
        v23 >>= 1;
        if (!v220)
          goto LABEL_18;
      }
      v52 = v24;
      sub_2395F89BC(v10, v11, (uint64_t **)&v438, ((char *)v11 - v10) >> 3, v24, v23);
      v51 = *(double *)&v52;
LABEL_62:
      operator delete(*(void **)&v51);
    }
    goto LABEL_63;
  }
  v36 = 0;
  if (v10)
    goto LABEL_613;
LABEL_614:
  if (v473)
  {
    v474 = (char *)v473;
    operator delete(v473);
  }
  v372 = (_QWORD *)v477;
  if ((_QWORD)v477)
  {
    do
    {
      v375 = (_QWORD *)*v372;
      v376 = v372[3];
      if (v376)
      {
        v377 = v372[4];
        v378 = (void *)v372[3];
        if (v377 != v376)
        {
          do
          {
            v379 = v377 - 64;
            free(*(void **)(v377 - 24));
            v377 = v379;
          }
          while (v379 != v376);
          v378 = (void *)v372[3];
        }
        v372[4] = v376;
        operator delete(v378);
      }
      operator delete(v372);
      v372 = v375;
    }
    while (v375);
  }
  v373 = v476[0];
  v476[0] = 0;
  if (v373)
    operator delete(v373);
  return v36;
}

void sub_2395D7134(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)STACK[0x570];
  if (STACK[0x570])
  {
    STACK[0x578] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_239420950((uint64_t)&STACK[0x490]);
  sub_239420950((uint64_t)&STACK[0x4C0]);
  v3 = (void *)STACK[0x4F0];
  if (STACK[0x4F0])
  {
    STACK[0x4F8] = (unint64_t)v3;
    operator delete(v3);
    v4 = (void *)STACK[0x508];
    if (!STACK[0x508])
    {
LABEL_5:
      sub_2395D7B50((uint64_t)&STACK[0x520]);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v4 = (void *)STACK[0x508];
    if (!STACK[0x508])
      goto LABEL_5;
  }
  STACK[0x510] = (unint64_t)v4;
  operator delete(v4);
  sub_2395D7B50((uint64_t)&STACK[0x520]);
  _Unwind_Resume(a1);
}

uint64_t sub_2395D7584(uint64_t a1, unsigned int a2, char *a3)
{
  char *v4;
  char *v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  unsigned int *v38;

  v37 = a2;
  v38 = &v37;
  v4 = sub_2395FAF60(a1 + 72, &v37, (uint64_t)&unk_239EC6E98, &v38);
  v5 = v4;
  v6 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 40) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(v4 + 24) = v6;
  v4[56] = a3[32];
  if (v4 + 24 == a3)
  {
    v14 = *((_OWORD *)a3 + 4);
    v15 = *((_OWORD *)a3 + 5);
    v16 = *((_OWORD *)a3 + 6);
    *(_OWORD *)(v4 + 136) = *((_OWORD *)a3 + 7);
    *(_OWORD *)(v4 + 120) = v16;
    *(_OWORD *)(v4 + 104) = v15;
    *(_OWORD *)(v4 + 88) = v14;
    v17 = *((_OWORD *)a3 + 8);
    v18 = *((_OWORD *)a3 + 9);
    v19 = *((_OWORD *)a3 + 10);
    *(_OWORD *)(v4 + 200) = *((_OWORD *)a3 + 11);
    *(_OWORD *)(v4 + 184) = v19;
    *(_OWORD *)(v4 + 168) = v18;
    *(_OWORD *)(v4 + 152) = v17;
    *((_QWORD *)v4 + 27) = *((_QWORD *)a3 + 24);
  }
  else
  {
    v7 = *((unsigned int *)a3 + 14);
    sub_23945215C((uint64_t)(v4 + 64), v7);
    if ((_DWORD)v7)
      memcpy(*((void **)v5 + 8), *((const void **)a3 + 5), 8 * v7);
    *((_DWORD *)v5 + 20) = *((_DWORD *)a3 + 14);
    v8 = *((_OWORD *)a3 + 4);
    v9 = *((_OWORD *)a3 + 5);
    v10 = *((_OWORD *)a3 + 6);
    *(_OWORD *)(v5 + 136) = *((_OWORD *)a3 + 7);
    *(_OWORD *)(v5 + 120) = v10;
    *(_OWORD *)(v5 + 104) = v9;
    *(_OWORD *)(v5 + 88) = v8;
    v11 = *((_OWORD *)a3 + 8);
    v12 = *((_OWORD *)a3 + 9);
    v13 = *((_OWORD *)a3 + 10);
    *(_OWORD *)(v5 + 200) = *((_OWORD *)a3 + 11);
    *(_OWORD *)(v5 + 184) = v13;
    *(_OWORD *)(v5 + 168) = v12;
    *(_OWORD *)(v5 + 152) = v11;
    *((_QWORD *)v5 + 27) = *((_QWORD *)a3 + 24);
    *((_QWORD *)v5 + 28) = *((_QWORD *)a3 + 25);
  }
  v20 = *((_OWORD *)a3 + 13);
  *((_QWORD *)v5 + 31) = *((_QWORD *)a3 + 28);
  *(_OWORD *)(v5 + 232) = v20;
  v21 = *((_QWORD *)a3 + 29);
  *((_WORD *)v5 + 132) = *((_WORD *)a3 + 120);
  *((_QWORD *)v5 + 32) = v21;
  std::string::operator=((std::string *)(v5 + 272), (const std::string *)(a3 + 248));
  v22 = v5 + 296;
  v23 = (__int128 *)(a3 + 272);
  if (v5[424] == a3[400])
  {
    if (v5[424])
    {
      v24 = *v23;
      v25 = *((_OWORD *)a3 + 18);
      v26 = *((_OWORD *)a3 + 20);
      *(_OWORD *)(v5 + 328) = *((_OWORD *)a3 + 19);
      *(_OWORD *)(v5 + 344) = v26;
      *v22 = v24;
      *(_OWORD *)(v5 + 312) = v25;
      v27 = *((_OWORD *)a3 + 21);
      v28 = *((_OWORD *)a3 + 22);
      v29 = *((_OWORD *)a3 + 24);
      *(_OWORD *)(v5 + 392) = *((_OWORD *)a3 + 23);
      *(_OWORD *)(v5 + 408) = v29;
      *(_OWORD *)(v5 + 360) = v27;
      *(_OWORD *)(v5 + 376) = v28;
    }
    return 1;
  }
  else
  {
    if (v5[424])
    {
      v5[424] = 0;
    }
    else
    {
      v31 = *v23;
      v32 = *((_OWORD *)a3 + 18);
      v33 = *((_OWORD *)a3 + 20);
      *(_OWORD *)(v5 + 328) = *((_OWORD *)a3 + 19);
      *(_OWORD *)(v5 + 344) = v33;
      *v22 = v31;
      *(_OWORD *)(v5 + 312) = v32;
      v34 = *((_OWORD *)a3 + 21);
      v35 = *((_OWORD *)a3 + 22);
      v36 = *((_OWORD *)a3 + 24);
      *(_OWORD *)(v5 + 392) = *((_OWORD *)a3 + 23);
      *(_OWORD *)(v5 + 408) = v36;
      *(_OWORD *)(v5 + 360) = v34;
      *(_OWORD *)(v5 + 376) = v35;
      v5[424] = 1;
    }
    return 1;
  }
}

uint64_t sub_2395D7774(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 64;
        free(*(void **)(v3 - 24));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_2395D77D8(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 8;
        free(*(v3 - 3));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2395D783C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  double v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  char *v29;
  std::bad_alloc *exception;
  std::bad_alloc *v31;
  std::bad_alloc *v32;
  std::bad_alloc *v33;
  void *__dst;
  void *__src;
  unsigned int v36;
  void *__p;
  char *v38;
  unint64_t v39;
  void *memptr;

  __p = 0;
  v38 = 0;
  v39 = 0;
  sub_2395FBDB0((char **)&__p, (a1[1] - *a1) >> 6);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 == v5)
  {
    v11 = 0.0;
    v20 = *a1;
    v10 = 0.0;
    v9 = 0.0;
    v8 = 0.0;
  }
  else
  {
    v6 = v38;
    v7 = v4 + 32;
    v8 = 0.0;
    v9 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v13 = *(double *)(v7 - 32);
      v14 = *(double *)(v7 - 24);
      v12 = v7 - 32;
      v15 = *(double *)(v7 - 16);
      v16 = *(double *)(v7 - 8);
      if ((unint64_t)v6 >= v39)
      {
        v6 = sub_2395FC1E8(&__p, (const void **)v7);
      }
      else
      {
        *v6 = *(_BYTE *)v7;
        v17 = *(unsigned int *)(v7 + 24);
        v18 = (8 * v17 + 31) & 0xFFFFFFFE0;
        *((_QWORD *)v6 + 1) = 0;
        *((_QWORD *)v6 + 2) = v18 >> 3;
        __dst = 0;
        malloc_type_posix_memalign(&__dst, 0x20uLL, v18, 0x100BBD03uLL);
        v19 = __dst;
        *((_QWORD *)v6 + 1) = __dst;
        if (!v19)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v31 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v31, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        if ((_DWORD)v17)
          memcpy(v19, *(const void **)(v7 + 8), 8 * v17);
        *((_DWORD *)v6 + 6) = *(_DWORD *)(v7 + 24);
        v6 += 32;
      }
      v38 = v6;
      v11 = v11 + v16;
      v10 = v10 + v15;
      v9 = v9 + v14;
      v8 = v8 + v13;
      v7 += 64;
    }
    while (v12 + 64 != v5);
    v4 = *a1;
    v20 = a1[1];
  }
  sub_2395FBEAC((char **)&__p, (uint64_t)&__dst);
  v21 = (double)(unint64_t)((v20 - v4) >> 6);
  *(double *)a2 = v8 / v21;
  *(double *)(a2 + 8) = v9 / v21;
  *(double *)(a2 + 16) = v10 / v21;
  *(double *)(a2 + 24) = v11 / v21;
  *(_BYTE *)(a2 + 32) = (_BYTE)__dst;
  v22 = v36;
  v23 = 8 * v36;
  v24 = (v23 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v24 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v24, 0x100BBD03uLL);
  v25 = memptr;
  *(_QWORD *)(a2 + 40) = memptr;
  if (!v25)
  {
    v32 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v33 = std::bad_alloc::bad_alloc(v32);
    __cxa_throw(v33, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if (v22)
    memcpy(v25, __src, v23);
  *(_DWORD *)(a2 + 56) = v36;
  free(__src);
  v26 = (char *)__p;
  if (__p)
  {
    v27 = v38;
    v28 = __p;
    if (v38 != __p)
    {
      do
      {
        v29 = v27 - 32;
        free(*((void **)v27 - 3));
        v27 = v29;
      }
      while (v29 != v26);
      v28 = __p;
    }
    v38 = v26;
    operator delete(v28);
  }
}

void sub_2395D7AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395FC130((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395D7ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395FC130((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395D7AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a10);
  sub_2395FC130(&a13);
  _Unwind_Resume(a1);
}

void sub_2395D7B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395FC130((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395D7B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395FC130((void **)va);
  _Unwind_Resume(a1);
}

void sub_2395D7B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395FC130((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395D7B50(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      if (v6)
      {
        v7 = v2[4];
        v8 = (void *)v2[3];
        if (v7 != v6)
        {
          do
          {
            v9 = v7 - 64;
            free(*(void **)(v7 - 24));
            v7 = v9;
          }
          while (v9 != v6);
          v8 = (void *)v2[3];
        }
        v2[4] = v6;
        operator delete(v8);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_2395D7BEC(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EC0DF0();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

uint64_t *sub_2395D7CD8(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 32) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EC0E20();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

uint64_t sub_2395D7DC4(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int16 v17;
  uint64_t result;
  __int128 v19;
  __int16 v20;
  unsigned int v21;
  unsigned int *v22;

  v5 = (_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*v5 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          v11 = v6 - 1;
          while (1)
          {
            v13 = v10[1];
            if (v13 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                goto LABEL_30;
            }
            else if ((v13 & v11) != v8)
            {
              goto LABEL_21;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_21;
          }
        }
        do
        {
          v12 = v10[1];
          if (v12 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
            {
LABEL_30:
              v19 = *(_OWORD *)a3;
              v10[5] = a3[2];
              *(_OWORD *)(v10 + 3) = v19;
              if (v10 + 3 != a3)
              {
                v20 = *((_WORD *)a3 + 12);
                *((_BYTE *)v10 + 50) = *((_BYTE *)a3 + 26);
                *((_WORD *)v10 + 24) = v20;
              }
              *(_WORD *)((char *)v10 + 51) = *(_WORD *)((char *)a3 + 27);
              if (*((unsigned __int8 *)v10 + 104) == *((unsigned __int8 *)a3 + 80))
              {
                if (*((_BYTE *)v10 + 104))
                  sub_2395EAD60((uint64_t)(v10 + 7), (unsigned int *)a3 + 8);
                return 0;
              }
              else if (*((_BYTE *)v10 + 104))
              {
                sub_239916980((uint64_t)(v10 + 9));
                result = 0;
                *((_BYTE *)v10 + 104) = 0;
              }
              else
              {
                *(_OWORD *)(v10 + 7) = *((_OWORD *)a3 + 2);
                sub_23948A5BC(v10 + 9, (uint64_t)(a3 + 6));
                result = 0;
                *((_BYTE *)v10 + 104) = 1;
              }
              return result;
            }
          }
          else
          {
            if (v12 >= v6)
              v12 %= v6;
            if (v12 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_21:
  v21 = a2;
  v22 = &v21;
  v14 = sub_2395FC87C((uint64_t)v5, &v21, (uint64_t)&unk_239EC6E98, &v22);
  v15 = v14;
  v16 = *(_OWORD *)a3;
  *((_QWORD *)v14 + 5) = a3[2];
  *(_OWORD *)(v14 + 24) = v16;
  if (v14 + 24 != (char *)a3)
  {
    v17 = *((_WORD *)a3 + 12);
    v14[50] = *((_BYTE *)a3 + 26);
    *((_WORD *)v14 + 24) = v17;
  }
  *(_WORD *)(v14 + 51) = *(_WORD *)((char *)a3 + 27);
  if (v14[104] == *((_BYTE *)a3 + 80))
  {
    if (v14[104])
    {
      sub_2395EAD60((uint64_t)(v14 + 56), (unsigned int *)a3 + 8);
      return 1;
    }
  }
  else
  {
    if (v14[104])
    {
      sub_239916980((uint64_t)(v14 + 72));
      v15[104] = 0;
      return 1;
    }
    *(_OWORD *)(v14 + 56) = *((_OWORD *)a3 + 2);
    sub_23948A5BC((_QWORD *)v14 + 9, (uint64_t)(a3 + 6));
    v15[104] = 1;
  }
  return 1;
}

BOOL sub_2395D8064(int8x8_t *a1, unsigned int *a2, int a3)
{
  uint64_t v5;
  unint64_t v6;
  int8x8_t *v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  int8x8_t **v12;
  int8x8_t *v13;
  uint64_t v14;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  __int16 v27;
  char *v28;
  char *v29;
  unint64_t v31;
  char *v32;
  BOOL v33;
  char *v34;
  __int16 v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;

  v5 = *((_QWORD *)a2 + 1);
  v6 = *a2;
  v7 = a1 + 9;
  v8 = a1[10];
  if (!*(_QWORD *)&v8)
    goto LABEL_42;
  v9 = *((_QWORD *)a2 + 1);
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)&v8 <= v9)
      v11 = v9 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (v8.i32[0] - 1) & v9;
  }
  v12 = *(int8x8_t ***)(*(_QWORD *)v7 + 8 * v11);
  if (!v12)
    goto LABEL_42;
  v13 = *v12;
  if (!v13)
    goto LABEL_42;
  if (v10.u32[0] < 2uLL)
  {
    v14 = *(_QWORD *)&v8 - 1;
    while (1)
    {
      v16 = v13[1];
      if (*(_QWORD *)&v16 == v9)
      {
        if (v13[2].i32[0] == (_DWORD)v5)
          goto LABEL_22;
      }
      else if ((*(_QWORD *)&v16 & v14) != v11)
      {
        goto LABEL_42;
      }
      v13 = (int8x8_t *)*v13;
      if (!v13)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (*(_QWORD *)&v15 == v9)
      break;
    if (*(_QWORD *)&v15 >= *(_QWORD *)&v8)
      *(_QWORD *)&v15 %= *(_QWORD *)&v8;
    if (*(_QWORD *)&v15 != v11)
      goto LABEL_42;
LABEL_11:
    v13 = (int8x8_t *)*v13;
    if (!v13)
      goto LABEL_42;
  }
  if (v13[2].i32[0] != (_DWORD)v5)
    goto LABEL_11;
LABEL_22:
  v17 = v13[55];
  if (!*(_QWORD *)&v17)
    goto LABEL_42;
  v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    v19 = *a2;
    if (*(_QWORD *)&v17 <= v6)
      v19 = v6 % *(_QWORD *)&v17;
  }
  else
  {
    v19 = (v17.i32[0] - 1) & v6;
  }
  v20 = *(uint64_t ***)(*(_QWORD *)&v13[54] + 8 * v19);
  if (!v20 || (v21 = *v20) == 0)
  {
LABEL_42:
    v25 = a1[56].i32[0] + 1;
    a1[56].i32[0] = v25;
    LODWORD(v38) = v25;
    v26 = sub_2395EC3C8((char **)a1, &v38);
    *(_OWORD *)v26 = *(_OWORD *)a2;
    *(_OWORD *)(v26 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v26 + 32) = *((_OWORD *)a2 + 2);
    if ((unsigned int *)v26 != a2)
    {
      v27 = *((_WORD *)a2 + 24);
      *(_BYTE *)(v26 + 50) = *((_BYTE *)a2 + 50);
      *(_WORD *)(v26 + 48) = v27;
    }
    *(_WORD *)(v26 + 51) = *(_WORD *)((char *)a2 + 51);
    v37 = v5;
    v38 = &v37;
    v28 = sub_2395FAF60((uint64_t)v7, &v37, (uint64_t)&unk_239EC6E98, &v38);
    v36 = v6;
    v38 = &v36;
    *((_DWORD *)sub_2395EC77C((uint64_t)(v28 + 432), &v36, (uint64_t)&unk_239EC6E98, &v38) + 5) = v25;
    v37 = v6;
    v38 = &v37;
    v29 = sub_2395FC87C((uint64_t)&a1[4], &v37, (uint64_t)&unk_239EC6E98, &v38);
    v36 = v5;
    v38 = &v36;
    *((_DWORD *)sub_2395EC77C((uint64_t)(v29 + 112), &v36, (uint64_t)&unk_239EC6E98, &v38) + 5) = v25;
    return 1;
  }
  if (v18.u32[0] < 2uLL)
  {
    v22 = *(_QWORD *)&v17 - 1;
    while (1)
    {
      v24 = v21[1];
      if (v24 == v6)
      {
        if (*((_DWORD *)v21 + 4) == (_DWORD)v6)
          goto LABEL_47;
      }
      else if ((v24 & v22) != v19)
      {
        goto LABEL_42;
      }
      v21 = (uint64_t *)*v21;
      if (!v21)
        goto LABEL_42;
    }
  }
  while (1)
  {
    v23 = v21[1];
    if (v23 == v6)
      break;
    if (v23 >= *(_QWORD *)&v17)
      v23 %= *(_QWORD *)&v17;
    if (v23 != v19)
      goto LABEL_42;
LABEL_32:
    v21 = (uint64_t *)*v21;
    if (!v21)
      goto LABEL_42;
  }
  if (*((_DWORD *)v21 + 4) != (_DWORD)v6)
    goto LABEL_32;
LABEL_47:
  v31 = *((unsigned int *)v21 + 5);
  v32 = (char *)*a1;
  if (v31 >= (uint64_t)(*(_QWORD *)&a1[1] - *(_QWORD *)a1) >> 6
    || (*(_DWORD *)&v32[64 * v31] != -1 ? (v33 = (_DWORD)v31 == -1) : (v33 = 1), v33))
  {
    sub_239EBEF10();
  }
  v34 = &v32[64 * v31];
  if (a3)
    return *((_DWORD *)v34 + 10) == a2[8];
  *(_OWORD *)(v34 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v34 + 24) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v34 + 40) = *((_OWORD *)a2 + 2);
  if (v34 + 8 != (char *)a2)
  {
    v35 = *((_WORD *)a2 + 24);
    v34[58] = *((_BYTE *)a2 + 50);
    *((_WORD *)v34 + 28) = v35;
  }
  *(_WORD *)(v34 + 59) = *(_WORD *)((char *)a2 + 51);
  return 1;
}

uint64_t sub_2395D83CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

BOOL sub_2395D8454(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  const std::string *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  __int128 v19;
  uint64_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int64x2_t v23;
  float64x2_t v24;
  __int128 v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  int64x2_t v30;
  int8x16_t v31;
  double v32;
  double v33;
  float64x2_t v34;
  int64x2_t v35;
  float64x2_t v36;
  int8x16_t v37;
  float64x2_t v38;
  __int128 v39;
  __int128 v40;
  double v41;
  double v42;
  int v43;
  _BOOL8 result;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _OWORD *v50;
  _OWORD *v51;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  uint64_t v72;
  int v73;
  std::string::size_type size;
  unint64_t v75;
  std::string *p_dst;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::string *v80;
  void *v81;
  int v82;
  std::bad_alloc *v83;
  std::bad_alloc *v84;
  std::bad_alloc *exception;
  std::bad_alloc *v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  int8x16_t v93;
  unint64_t *v94;
  float64x2_t v95;
  char *v96;
  float64x2_t v97;
  std::string __dst;
  _DWORD v99[2];
  std::string __str;
  void *memptr[4];
  char v102;
  void *v103;
  uint64_t v104;
  int v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  unint64_t v114;
  unint64_t v115;
  char v116;
  void *__p;
  __int16 v118;
  char v119;
  std::string v120;
  void *v121;
  std::string v122;

  v4 = *a1;
  v5 = (const std::string *)a1[1];
  v6 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (((uint64_t)v5 - v4) >> 4));
  if (v5 == (const std::string *)v4)
    v7 = 0;
  else
    v7 = v6;
  sub_2395FCBB4(v4, v5, v7, 1);
  v8 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    v10 = 0;
    v11 = a2 + 456;
    v12 = &v115;
    v13 = v8 + 144;
    __asm { FMOV            V0.2D, #-1.0 }
    v97 = _Q0;
    while (1)
    {
      if (*(char *)(v13 - 97) < 0)
      {
        sub_23941A7F8(&v120, *(void **)(v13 - 120), *(_QWORD *)(v13 - 112));
      }
      else
      {
        v19 = *(_OWORD *)(v13 - 120);
        v120.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 - 104);
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v19;
      }
      v20 = *(_QWORD *)(v13 - 72);
      v21 = *(float64x2_t *)(v20 + 16);
      v22 = *(float64x2_t *)(v20 + 32);
      v23 = *(int64x2_t *)(v20 + 48);
      v24 = *(float64x2_t *)(v20 + 64);
      v25 = *(_OWORD *)(v20 + 80);
      v26 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v20, (int64x2_t)v22);
      v27 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v20, (int64x2_t)v22);
      v28 = (float64x2_t)vzip1q_s64((int64x2_t)v26, (int64x2_t)v27);
      v29 = (float64x2_t)vzip2q_s64((int64x2_t)v26, (int64x2_t)v27);
      v30 = (int64x2_t)vmulq_f64(v21, *(float64x2_t *)v20);
      *(double *)v30.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v30.i64, v22.f64[0], *(double *)v23.i64), v24.f64[0], *(double *)&v25);
      v31 = (int8x16_t)vmulq_f64(v21, v27);
      v32 = *(double *)(v20 + 40);
      v33 = *(double *)(v20 + 72);
      *(double *)v31.i64 = vmlad_n_f64(vmlad_n_f64(*(double *)v31.i64, v32, *(double *)v23.i64), v33, *(double *)&v25);
      v34 = vmulq_f64(v21, v21);
      v34.f64[0] = vmlad_n_f64(vmlad_n_f64(v34.f64[0], *(double *)v23.i64, *(double *)v23.i64), *(double *)&v25, *(double *)&v25);
      v35 = (int64x2_t)vaddq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v28, *(float64x2_t *)v20, 1), v29, v22, 1), v24, v24, 1), (float64x2_t)xmmword_239EC6830);
      *(_QWORD *)&v36.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v34, v97));
      v36.f64[1] = NAN;
      if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, *(double *)v20), v29, v22.f64[0]), v24, v24.f64[0]), (float64x2_t)xmmword_239EC6820)), v36), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v35, v31, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v30, v35)), vabsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v28, v21.f64[0]), v29, *(double *)v23.i64), v24, *(double *)&v25))))) > 0.0001)goto LABEL_27;
      v37 = (int8x16_t)vzip1q_s64((int64x2_t)v21, v23);
      v38 = vmulq_f64(v26, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vextq_s8(v37, v37, 8uLL), -v33), (float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), *(double *)&v25));
      if (fabs(vmlad_n_f64(-v32 * v21.f64[0], *(double *)(v20 + 8), *(double *)v23.i64) * v24.f64[0]+ vsubq_f64(v38, (float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1)).f64[0]+ -1.0) > 0.0001)goto LABEL_27;
      v40 = *(_OWORD *)(v20 + 96);
      v39 = *(_OWORD *)(v20 + 112);
      if (*(double *)&v40 != 0.0)
      {
        v41 = 0.0 - *(double *)&v40;
        if (*(double *)&v40 >= 0.0)
          v41 = *(double *)(v20 + 96);
        if (v41 > 0.0001)
          goto LABEL_27;
      }
      *(_QWORD *)&v40 = *(_QWORD *)(v20 + 104);
      if (*((double *)&v40 + 1) != 0.0)
      {
        if (*((double *)&v40 + 1) < 0.0)
          *(double *)&v40 = 0.0 - *((double *)&v40 + 1);
        if (*(double *)&v40 > 0.0001)
          goto LABEL_27;
      }
      if (*(double *)&v39 != 0.0)
      {
        v42 = 0.0 - *(double *)&v39;
        if (*(double *)&v39 >= 0.0)
          v42 = *(double *)(v20 + 112);
        if (v42 > 0.0001)
          goto LABEL_27;
      }
      if (*((double *)&v39 + 1) != 1.0)
      {
        *(double *)&v39 = 1.0 - *((double *)&v39 + 1);
        if (*((double *)&v39 + 1) >= 1.0)
          *(double *)&v39 = *((double *)&v39 + 1) + -1.0;
        if (*(double *)&v39 > 0.0001)
        {
LABEL_27:
          v43 = 1;
          if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_29;
LABEL_28:
          operator delete(v120.__r_.__value_.__l.__data_);
          goto LABEL_29;
        }
      }
      v87 = *(int64x2_t *)(v20 + 48);
      v90 = *(int64x2_t *)(v20 + 16);
      v91 = v29;
      v92 = v28;
      v93 = *(int8x16_t *)(v20 + 80);
      v88 = *(int64x2_t *)v20;
      v89 = *(int64x2_t *)(v20 + 32);
      v95 = *(float64x2_t *)(v20 + 64);
      v45 = *(_QWORD *)(v13 - 96);
      v46 = *(void **)v45;
      v47 = *(void **)(v45 + 16);
      v48 = *(void **)(v45 + 32);
      v49 = *(void **)(v45 + 40);
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
      v50 = memptr[0];
      if (!memptr[0])
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v86 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v86, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      *((_QWORD *)memptr[0] + 4) = 0;
      *v50 = 0u;
      v50[1] = 0u;
      memptr[0] = v46;
      memptr[1] = v48;
      memptr[2] = v47;
      memptr[3] = v49;
      v102 = 1;
      v103 = 0;
      v104 = 8;
      v121 = 0;
      malloc_type_posix_memalign(&v121, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
      v51 = v121;
      v103 = v121;
      _D21 = v93.i64[0];
      if (!v121)
      {
        v83 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v84 = std::bad_alloc::bad_alloc(v83);
        __cxa_throw(v84, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      _D18 = v87.i64[0];
      _Q1 = (float64x2_t)vzip2q_s64(v90, v87);
      v55 = (float64x2_t)vdupq_laneq_s64(v88, 1);
      v56 = (float64x2_t)vdupq_laneq_s64(v89, 1);
      v57 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v95, 1);
      v58 = (float64x2_t)vdupq_lane_s64(v90.i64[0], 0);
      v59 = (float64x2_t)vdupq_lane_s64(v87.i64[0], 0);
      v60 = (float64x2_t)vdupq_lane_s64(v93.i64[0], 0);
      *(_QWORD *)&_D16 = vextq_s8(v93, v93, 8uLL).u64[0];
      *(_QWORD *)&_Q1.f64[1] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
      v62 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v92, vnegq_f64(_Q1).f64[0]), v91, _Q1, 1), v95, _D16, 0);
      __asm
      {
        FMLS            D0, D18, V1.D[1]
        FMLS            D0, D21, V16.D[0]
      }
      v65 = *v50;
      v66 = v50[1];
      *((_QWORD *)v121 + 4) = *((_QWORD *)v50 + 4);
      *v51 = v65;
      v51[1] = v66;
      v105 = 5;
      v106 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)v88.i64), (float64x2_t)xmmword_239EC68E0, v55), (float64x2_t)0, v58), (float64x2_t)0);
      v107 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)0, *(double *)v88.i64), (float64x2_t)0, v55), (float64x2_t)xmmword_239EC68D0, v58), (float64x2_t)0);
      v108 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, *(double *)v89.i64), (float64x2_t)xmmword_239EC68E0, v56), (float64x2_t)0, v59), (float64x2_t)0);
      v109 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)0, *(double *)v89.i64), (float64x2_t)0, v56), (float64x2_t)xmmword_239EC68D0, v59), (float64x2_t)0);
      v110 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v95.f64[0]), (float64x2_t)xmmword_239EC68E0, v57), (float64x2_t)0, v60), (float64x2_t)0);
      v111 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)0, v95.f64[0]), (float64x2_t)0, v57), (float64x2_t)xmmword_239EC68D0, v60), (float64x2_t)0);
      v112 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_239EC6840, v62.f64[0]), (float64x2_t)xmmword_239EC68E0, v62, 1), (float64x2_t)0, _D0), (float64x2_t)0);
      v113 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v62.f64[0]), (float64x2_t)0, v62, 1), (float64x2_t)xmmword_239EC68D0, _D0), (float64x2_t)xmmword_239EC6850);
      v114 = 0xFFFFFFFF00000000;
      v118 = 0;
      LOBYTE(__p) = 0;
      v119 = 0;
      *(_OWORD *)((char *)v12 + 26) = 0u;
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      v116 = 2;
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        sub_23941A7F8(&__str, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
      else
        __str = v120;
      std::string::operator=((std::string *)&__p, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        v67 = *(_QWORD *)(v13 - 24);
        if (!v67)
          goto LABEL_44;
      }
      else
      {
        v67 = *(_QWORD *)(v13 - 24);
        if (!v67)
          goto LABEL_44;
      }
      v68 = *(_QWORD *)(v13 - 16);
      if (v68)
        v115 = v67 | ((unint64_t)v68 << 32);
LABEL_44:
      if (!sub_2395D7584(a2, v10, (char *)memptr))
      {
        v43 = 1;
        if (((char)v118 & 0x80000000) == 0)
          goto LABEL_50;
LABEL_49:
        operator delete(__p);
        goto LABEL_50;
      }
      v69 = *(unsigned __int8 *)(v13 - 121);
      if (*(char *)(v13 - 121) < 0)
      {
        v70 = *(_QWORD *)(v13 - 136);
        if (!v70)
        {
LABEL_60:
          v72 = v11;
          v96 = v10;
          v73 = SHIBYTE(v120.__r_.__value_.__r.__words[2]);
          if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
          else
            size = v120.__r_.__value_.__l.__size_;
          v75 = size + 4;
          if (size + 4 >= 0x7FFFFFFFFFFFFFF8)
            sub_23941A5AC();
          v94 = v12;
          if (v75 >= 0x17)
          {
            v77 = a2;
            v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v75 | 7) != 0x17)
              v78 = v75 | 7;
            v79 = v78 + 1;
            p_dst = (std::string *)operator new(v78 + 1);
            __dst.__r_.__value_.__l.__size_ = size + 4;
            __dst.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            a2 = v77;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
            p_dst = &__dst;
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 4;
            if (!size)
              goto LABEL_82;
          }
          if (v73 >= 0)
            v80 = &v120;
          else
            v80 = (std::string *)v120.__r_.__value_.__r.__words[0];
          memmove(p_dst, v80, size);
LABEL_82:
          v11 = v72;
          strcpy((char *)p_dst + size, ".csv");
          v81 = (void *)__dst.__r_.__value_.__r.__words[0];
          v99[0] = __dst.__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v99 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
          v82 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v121 = v96;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(&v122, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v122.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            LODWORD(v122.__r_.__value_.__r.__words[2]) = v99[0];
            *(_DWORD *)((char *)&v122.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v99 + 3);
            *((_BYTE *)&v122.__r_.__value_.__s + 23) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
          }
          sub_2395F833C(v72, (unint64_t *)&v121, (uint64_t)&v121);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v122.__r_.__value_.__l.__data_);
            if (v82 < 0)
              goto LABEL_90;
          }
          else
          {
            if ((v82 & 0x80000000) == 0)
              goto LABEL_87;
LABEL_90:
            operator delete(v81);
          }
LABEL_87:
          v12 = v94;
          v43 = 0;
          v10 = v96 + 1;
          if ((char)v118 < 0)
            goto LABEL_49;
          goto LABEL_50;
        }
      }
      else
      {
        if (!*(_BYTE *)(v13 - 121))
          goto LABEL_60;
        v70 = *(_QWORD *)(v13 - 136);
      }
      memset(&__dst, 0, sizeof(__dst));
      if ((v69 & 0x80u) == 0)
        v71 = (std::string *)(v13 - 144);
      else
        v71 = *(std::string **)(v13 - 144);
      if ((v69 & 0x80u) != 0)
        v69 = v70;
      sub_23948900C(&__dst, v71, (std::string *)((char *)v71 + v69));
      v121 = v10;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        sub_23941A7F8(&v122, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v122 = __dst;
      sub_2395F833C(v11, (unint64_t *)&v121, (uint64_t)&v121);
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v122.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_70:
          v43 = 0;
          ++v10;
          if ((char)v118 < 0)
            goto LABEL_49;
          goto LABEL_50;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_70;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      v43 = 0;
      ++v10;
      if ((char)v118 < 0)
        goto LABEL_49;
LABEL_50:
      free(v103);
      free(v50);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_28;
LABEL_29:
      result = v43 == 0;
      if (!v43)
      {
        _ZF = v13 == v9;
        v13 += 144;
        if (!_ZF)
          continue;
      }
      return result;
    }
  }
  return 1;
}

void sub_2395D8C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  void *v50;
  void *v51;
  uint64_t v52;

  operator delete(v51);
  sub_2395D4668((uint64_t)&a50);
  free(v50);
  if (*(char *)(v52 - 201) < 0)
    operator delete(*(void **)(v52 - 224));
  _Unwind_Resume(a1);
}

void sub_2395D8D58(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395D8D7C(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395D8DFC(*(_QWORD *)(a1 + 8), a2, a3, 0);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395D8DBC(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395E4E28(*(uint64_t **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395D8DFC(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD *v28;

  sub_2396157EC((uint64_t)v27, a3);
  v26 = a1;
  v25 = 6;
  strcpy((char *)v24, "config");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADFEC0;
  v8[1] = a1 + 112;
  sub_23961580C((uint64_t)v27, (uint64_t)v24, (uint64_t)v8);
  v23 = 6;
  strcpy((char *)v22, "images");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250AE00A0;
  v9[1] = a1 + 72;
  sub_23961580C((uint64_t)v27, (uint64_t)v22, (uint64_t)v9);
  v21 = 6;
  strcpy((char *)v20, "tracks");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250AE0280;
  v10[1] = a1 + 32;
  sub_23961580C((uint64_t)v27, (uint64_t)v20, (uint64_t)v10);
  v19 = 11;
  strcpy((char *)__p, "projections");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250AE02E0;
  v11[1] = &v26;
  sub_23961580C((uint64_t)v27, (uint64_t)__p, (uint64_t)v11);
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v20[0]);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v25 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(v24[0]);
    if (!a4)
      goto LABEL_13;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(v22[0]);
  if (v25 < 0)
    goto LABEL_10;
LABEL_5:
  if (!a4)
    goto LABEL_13;
LABEL_11:
  if ((a3 & 1) == 0)
  {
    sub_2396158C8(a2, (uint64_t)v27);
    goto LABEL_14;
  }
LABEL_13:
  sub_2395902F0((uint64_t)v27, a2);
LABEL_14:
  v12 = v28;
  if (v28)
  {
    do
    {
      v13 = v12[5];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    v14 = (void **)v28;
    if (v28)
    {
      do
      {
        v17 = (void **)*v14;
        if (*((char *)v14 + 39) < 0)
          operator delete(v14[2]);
        operator delete(v14);
        v14 = v17;
      }
      while (v17);
    }
  }
  v15 = (void *)v27[0];
  v27[0] = 0;
  if (v15)
    operator delete(v15);
  return a2;
}

void sub_2395D90A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395D90B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0(v33 - 80);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a28);
  sub_2395905C0(v33 - 80);
  _Unwind_Resume(a1);
}

void sub_2395D9164(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395D9188(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395D91F8(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395D91C4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395D91F8(uint64_t *a1, _QWORD *a2, char a3)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void **v15;
  void *v16;
  void **v18;
  void *v19[3];
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *__p[2];
  void *v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;

  v26 = *a1;
  v27 = *((_DWORD *)a1 + 2);
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v7 = (_BYTE *)a1[2];
  v6 = (_BYTE *)a1[3];
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v28 = (char *)operator new(v6 - v7);
    v30 = &v28[128 * (v8 >> 7)];
    v9 = v8 & 0xFFFFFFFFFFFFFF80;
    memcpy(v28, v7, v9);
    v29 = &v28[v9];
  }
  sub_2396157EC((uint64_t)__p, a3);
  v23 = 10;
  strcpy((char *)v22, "camera_rig");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADFEF0;
  v10[1] = &v26;
  sub_23961580C((uint64_t)__p, (uint64_t)v22, (uint64_t)v10);
  v21 = 13;
  strcpy((char *)v20, "intrinsic_map");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADFF80;
  v11[1] = a1 + 5;
  sub_23961580C((uint64_t)__p, (uint64_t)v20, (uint64_t)v11);
  HIBYTE(v19[2]) = 20;
  strcpy((char *)v19, "object_transform_map");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250AE0010;
  v12[1] = a1 + 10;
  sub_23961580C((uint64_t)__p, (uint64_t)v19, (uint64_t)v12);
  if ((SHIBYTE(v19[2]) & 0x80000000) == 0)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_22:
    operator delete(v20[0]);
    if ((v23 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
  operator delete(v19[0]);
  if (v21 < 0)
    goto LABEL_22;
LABEL_6:
  if ((v23 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_23:
  operator delete(v22[0]);
LABEL_7:
  sub_2395902F0((uint64_t)__p, a2);
  v13 = v25;
  if (v25)
  {
    do
    {
      v14 = v13[5];
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v13 = (_QWORD *)*v13;
    }
    while (v13);
    v15 = (void **)v25;
    if (v25)
    {
      do
      {
        v18 = (void **)*v15;
        if (*((char *)v15 + 39) < 0)
          operator delete(v15[2]);
        operator delete(v15);
        v15 = v18;
      }
      while (v18);
    }
  }
  v16 = __p[0];
  __p[0] = 0;
  if (v16)
    operator delete(v16);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  return a2;
}

void sub_2395D9494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  sub_2395905C0((uint64_t)&a27);
  v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(_QWORD *)(v27 - 64) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_2395D9500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    JUMPOUT(0x2395D950CLL);
  JUMPOUT(0x2395D94BCLL);
}

void sub_2395D9520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
    JUMPOUT(0x2395D94CCLL);
  JUMPOUT(0x2395D94C4);
}

void sub_2395D9534(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395D9558(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395D95D4(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395D9594(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395DC214(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395D95D4(uint64_t *a1, _QWORD *a2, char a3)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int64x2_t *v8;
  size_t v9;
  int64x2_t *v10;
  int64x2_t *v11;
  int64x2_t *v12;
  int64x2_t *v13;
  int64x2_t *i;
  int64x2_t *v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int64x2_t *v28;
  int64x2_t *v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  void *v42;
  void **v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *__p[2];
  void *v58;
  int64x2_t *v59;
  int64x2_t *v60;
  int64x2_t *v61;
  int64x2_t *v62;
  char *v63;
  char *i8;
  int v65;
  uint64_t v66;

  v66 = *a1;
  v65 = *((_DWORD *)a1 + 2);
  v62 = 0;
  v63 = 0;
  i8 = 0;
  v6 = (_BYTE *)a1[2];
  v5 = (_BYTE *)a1[3];
  v7 = v5 - v6;
  if (v5 == v6)
  {
    v8 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
  }
  else
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (int64x2_t *)operator new(v5 - v6);
    v62 = v8;
    i8 = v8[8 * (v7 >> 7)].i8;
    v9 = v7 & 0xFFFFFFFFFFFFFF80;
    memcpy(v8, v6, v9);
    v10 = (int64x2_t *)((char *)v8 + v9);
    v63 = &v8->i8[v9];
    v59 = 0;
    v60 = 0;
    v61 = 0;
    if (v9)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      for (i = v8; i != v10; i += 8)
      {
        v22.i64[0] = i[1].i64[0];
        v16 = i[2];
        v23.i64[0] = i[5].i64[0];
        v17 = i[4];
        v18 = vzip1q_s64(*i, v16);
        v19 = vzip1q_s64(v17, i[6]);
        v20.i64[0] = vdupq_laneq_s64(v17, 1).u64[0];
        v20.i64[1] = i[6].i64[1];
        v21 = vzip2q_s64(*i, v16);
        v22.i64[1] = i[3].i64[0];
        v23.i64[1] = i[7].i64[0];
        if (v12 < v11)
        {
          *v12 = v18;
          v12[1] = v19;
          v12[2] = v21;
          v12[3] = v20;
          v12[4] = v22;
          v12[5] = v23;
          v12[6].i64[0] = 0;
          v12[6].i64[1] = 0;
          v15 = v12 + 8;
          v12[7] = (int64x2_t)xmmword_239EC6850;
        }
        else
        {
          v24 = ((char *)v12 - (char *)v13) >> 7;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 57)
            sub_2394189F8();
          if (((char *)v11 - (char *)v13) >> 6 > v25)
            v25 = ((char *)v11 - (char *)v13) >> 6;
          if ((unint64_t)((char *)v11 - (char *)v13) >= 0x7FFFFFFFFFFFFF80)
            v26 = 0x1FFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
          {
            v45 = v21;
            v46 = v19;
            v47 = v18;
            v48 = v20;
            v49 = v23;
            v50 = v22;
            if (v26 >> 57)
              sub_239418A80();
            v27 = (char *)operator new(v26 << 7);
            v23 = v49;
            v22 = v50;
            v18 = v47;
            v20 = v48;
            v21 = v45;
            v19 = v46;
          }
          else
          {
            v27 = 0;
          }
          v28 = (int64x2_t *)&v27[128 * v24];
          *v28 = v18;
          v28[1] = v19;
          v28[2] = v21;
          v28[3] = v20;
          v28[4] = v22;
          v28[5] = v23;
          v28[6].i64[0] = 0;
          v28[6].i64[1] = 0;
          v28[7] = (int64x2_t)xmmword_239EC6850;
          if (v12 != v13)
          {
            v29 = (int64x2_t *)&v27[128 * v24];
            do
            {
              v30 = v12[-8];
              v31 = v12[-7];
              v32 = v12[-5];
              v29[-6] = v12[-6];
              v29[-5] = v32;
              v29[-8] = v30;
              v29[-7] = v31;
              v33 = v12[-4];
              v34 = v12[-3];
              v35 = v12[-1];
              v29[-2] = v12[-2];
              v29[-1] = v35;
              v29[-4] = v33;
              v29[-3] = v34;
              v29 -= 8;
              v12 -= 8;
            }
            while (v12 != v13);
            v12 = v13;
            v13 = v29;
            v11 = (int64x2_t *)&v27[128 * v26];
            v15 = v28 + 8;
            v59 = v29;
            v61 = v11;
            if (!v12)
              goto LABEL_6;
LABEL_24:
            operator delete(v12);
            goto LABEL_6;
          }
          v13 = (int64x2_t *)&v27[128 * v24];
          v11 = (int64x2_t *)&v27[128 * v26];
          v15 = v28 + 8;
          v59 = v28;
          v61 = v11;
          if (v12)
            goto LABEL_24;
        }
LABEL_6:
        v60 = v15;
        v12 = v15;
      }
    }
  }
  sub_2396157EC((uint64_t)__p, a3);
  v56 = 10;
  strcpy((char *)v55, "iid_offset");
  v36 = (_QWORD *)operator new();
  *v36 = &off_250ADF420;
  v36[1] = &v65;
  sub_23961580C((uint64_t)__p, (uint64_t)v55, (uint64_t)v36);
  v54 = 10;
  strcpy((char *)v53, "camera_num");
  v37 = (_QWORD *)operator new();
  *v37 = &off_250ADFF20;
  v37[1] = &v66;
  sub_23961580C((uint64_t)__p, (uint64_t)v53, (uint64_t)v37);
  v52 = 14;
  strcpy((char *)v51, "relative_poses");
  v38 = (_QWORD *)operator new();
  *v38 = &off_250ADFF50;
  v38[1] = &v59;
  sub_23961580C((uint64_t)__p, (uint64_t)v51, (uint64_t)v38);
  if ((v52 & 0x80000000) == 0)
  {
    if ((v54 & 0x80000000) == 0)
      goto LABEL_29;
LABEL_47:
    operator delete(v53[0]);
    if ((v56 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_48;
  }
  operator delete(v51[0]);
  if (v54 < 0)
    goto LABEL_47;
LABEL_29:
  if ((v56 & 0x80000000) == 0)
    goto LABEL_30;
LABEL_48:
  operator delete(v55[0]);
LABEL_30:
  sub_2395902F0((uint64_t)__p, a2);
  v39 = v58;
  if (v58)
  {
    do
    {
      v40 = v39[5];
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      v39 = (_QWORD *)*v39;
    }
    while (v39);
    v41 = (void **)v58;
    if (v58)
    {
      do
      {
        v44 = (void **)*v41;
        if (*((char *)v41 + 39) < 0)
          operator delete(v41[2]);
        operator delete(v41);
        v41 = v44;
      }
      while (v44);
    }
  }
  v42 = __p[0];
  __p[0] = 0;
  if (v42)
    operator delete(v42);
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v8)
    operator delete(v8);
  return a2;
}

void sub_2395D9A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  void *v43;
  uint64_t v44;
  void *v46;

  sub_2395905C0((uint64_t)&a43);
  v46 = *(void **)(v44 - 152);
  if (v46)
  {
    *(_QWORD *)(v44 - 144) = v46;
    operator delete(v46);
  }
  if (v43)
  {
    *(_QWORD *)(v44 - 120) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(a1);
}

void sub_2395D9B1C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395D9B40(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395D9BBC(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395D9B7C(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23959903C(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395D9BBC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  else
  {
    std::ostream::operator<<();
  }
  return a2;
}

void sub_2395D9C90(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395D9CB4(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395D9D30(*(__int128 ***)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395D9CF0(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395DA7B0(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395D9D30(__int128 **a1, uint64_t *a2, int a3)
{
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = (char *)v6 - (char *)*a1;
    if (v7 < 0x7FFFFFFF81)
    {
      sub_2395DA538(v5, v6, (uint64_t)a2, v7 >> 7);
      return a2;
    }
    else
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      BYTE7(v21) = 7;
      strcpy((char *)__p, "content");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v8 = (char *)a1[1] - (char *)*a1;
      if (v8)
      {
        v9 = 0;
        v10 = v8 >> 7;
        do
        {
          v21 = (unint64_t)a1;
          __p[0] = v9;
          v9 += 0x7FFFFFFF;
          if (v10 >= (unint64_t)v9)
            v10 = (unint64_t)v9;
          __p[1] = (void *)v10;
          sub_2395DA178(__p, (uint64_t)a2);
          v10 = ((char *)a1[1] - (char *)*a1) >> 7;
        }
        while ((unint64_t)v9 < v10);
      }
      return a2;
    }
  }
  else
  {
    v13 = *a1;
    v12 = a1[1];
    std::ostream::put();
    if (v13 != v12)
    {
      while (1)
      {
        v14 = *v13;
        v15 = v13[1];
        v16 = v13[3];
        v22 = v13[2];
        v23 = v16;
        *(_OWORD *)__p = v14;
        v21 = v15;
        v17 = v13[4];
        v18 = v13[5];
        v19 = v13[7];
        v26 = v13[6];
        v27 = v19;
        v24 = v17;
        v25 = v18;
        sub_2395A34D0((uint64_t)__p, (uint64_t)&v28, a2);
        v13 += 8;
        if (v13 == v12)
          break;
        std::ostream::put();
      }
    }
    std::ostream::put();
    return a2;
  }
}

void sub_2395DA154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395DA178(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_2395DA538((__int128 *)(*v2 + (*a1 << 7)), (__int128 *)(*v2 + (a1[1] << 7)), a2, a1[1] - *a1);
}

void sub_2395DA514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395DA538(__int128 *a1, __int128 *a2, uint64_t a3, unint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD *exception;
  _OWORD v16[8];
  uint64_t v17;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 8)
  {
    v8 = *a1;
    v9 = a1[1];
    v10 = a1[3];
    v16[2] = a1[2];
    v16[3] = v10;
    v16[0] = v8;
    v16[1] = v9;
    v11 = a1[4];
    v12 = a1[5];
    v13 = a1[7];
    v16[6] = a1[6];
    v16[7] = v13;
    v16[4] = v11;
    v16[5] = v12;
    sub_2395DA64C((uint64_t)v16, (uint64_t)&v17, a3, 0x10uLL);
  }
  return 1;
}

uint64_t sub_2395DA64C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 8)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  return 1;
}

uint64_t sub_2395DA7B0(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char **v12;

  v3 = (uint64_t)a2;
  v12 = (char **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_2395DA8B0(&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = (unint64_t)sub_2396162D4(v3, v6) >> 7;
  v8 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 7;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_2395DB604((void **)a1, v10);
  }
  else if (!v9)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + (v7 << 7);
  }
  std::istream::read();
  return v3;
}

BOOL sub_2395DA8B0(char ***a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  char *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  char **v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char **v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  __int128 v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char *v73;
  _BOOL8 result;
  char v75;
  unsigned int v76;
  int v77;
  int v78;
  char *v79;
  char **v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  __int128 v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  int i;
  unsigned int v103;
  char v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  _OWORD v114[4];
  void *__p[2];
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _OWORD v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v113 = 0uLL;
      *(_QWORD *)&v114[0] = 0;
      sub_2395DB604((void **)&v113, v6);
      std::istream::read();
      v7 = (char *)*((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1) != (_QWORD)v113)
      {
        v8 = 0;
        v7 = (char *)v113;
        do
        {
          v16 = &v7[128 * v8];
          v17 = *a1;
          v19 = (*a1)[1];
          v18 = (unint64_t)(*a1)[2];
          if ((unint64_t)v19 < v18)
          {
            v9 = *(_OWORD *)v16;
            v10 = *((_OWORD *)v16 + 1);
            v11 = *((_OWORD *)v16 + 3);
            *((_OWORD *)v19 + 2) = *((_OWORD *)v16 + 2);
            *((_OWORD *)v19 + 3) = v11;
            *(_OWORD *)v19 = v9;
            *((_OWORD *)v19 + 1) = v10;
            v12 = *((_OWORD *)v16 + 4);
            v13 = *((_OWORD *)v16 + 5);
            v14 = *((_OWORD *)v16 + 7);
            *((_OWORD *)v19 + 6) = *((_OWORD *)v16 + 6);
            *((_OWORD *)v19 + 7) = v14;
            *((_OWORD *)v19 + 4) = v12;
            *((_OWORD *)v19 + 5) = v13;
            v15 = v19 + 128;
          }
          else
          {
            v20 = *v17;
            v21 = (v19 - *v17) >> 7;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 57)
              sub_2394189F8();
            v23 = v18 - (_QWORD)v20;
            if (v23 >> 6 > v22)
              v22 = v23 >> 6;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF80)
              v24 = 0x1FFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              if (v24 >> 57)
                sub_239418A80();
              v25 = (char *)operator new(v24 << 7);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[128 * v21];
            v27 = *(_OWORD *)v16;
            v28 = *((_OWORD *)v16 + 1);
            v29 = *((_OWORD *)v16 + 3);
            *((_OWORD *)v26 + 2) = *((_OWORD *)v16 + 2);
            *((_OWORD *)v26 + 3) = v29;
            *(_OWORD *)v26 = v27;
            *((_OWORD *)v26 + 1) = v28;
            v30 = *((_OWORD *)v16 + 4);
            v31 = *((_OWORD *)v16 + 5);
            v32 = *((_OWORD *)v16 + 7);
            *((_OWORD *)v26 + 6) = *((_OWORD *)v16 + 6);
            *((_OWORD *)v26 + 7) = v32;
            *((_OWORD *)v26 + 4) = v30;
            *((_OWORD *)v26 + 5) = v31;
            v33 = v26;
            if (v19 != v20)
            {
              do
              {
                v34 = *((_OWORD *)v19 - 8);
                v35 = *((_OWORD *)v19 - 7);
                v36 = *((_OWORD *)v19 - 5);
                *((_OWORD *)v33 - 6) = *((_OWORD *)v19 - 6);
                *((_OWORD *)v33 - 5) = v36;
                *((_OWORD *)v33 - 8) = v34;
                *((_OWORD *)v33 - 7) = v35;
                v37 = *((_OWORD *)v19 - 4);
                v38 = *((_OWORD *)v19 - 3);
                v39 = *((_OWORD *)v19 - 1);
                *((_OWORD *)v33 - 2) = *((_OWORD *)v19 - 2);
                *((_OWORD *)v33 - 1) = v39;
                *((_OWORD *)v33 - 4) = v37;
                *((_OWORD *)v33 - 3) = v38;
                v33 -= 128;
                v19 -= 128;
              }
              while (v19 != v20);
              v19 = *v17;
            }
            v15 = v26 + 128;
            *v17 = v33;
            v17[1] = v26 + 128;
            v17[2] = &v25[128 * v24];
            if (v19)
              operator delete(v19);
          }
          v17[1] = v15;
          ++v8;
          v7 = (char *)v113;
        }
        while (v8 < (uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 7);
      }
      if (v7)
      {
        *((_QWORD *)&v113 + 1) = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v48 = sub_2396162D4((uint64_t)a2, v5);
      if (v48)
      {
        v49 = 0;
        v50 = v48;
        do
        {
          *(_QWORD *)&v128[0] = &v113;
          *((_QWORD *)&v128[0] + 1) = 0;
          sub_2395DB9C8((uint64_t *)v128, a2, 1);
          v131 = v114[3];
          v132 = *(_OWORD *)__p;
          v133 = v116;
          v134 = v117;
          v128[0] = v113;
          v128[1] = v114[0];
          v129 = v114[1];
          v130 = v114[2];
          v52 = *a1;
          v54 = (*a1)[1];
          v53 = (unint64_t)(*a1)[2];
          if ((unint64_t)v54 < v53)
          {
            *((_OWORD *)v54 + 4) = v131;
            *((_OWORD *)v54 + 5) = v132;
            *((_OWORD *)v54 + 6) = v133;
            *((_OWORD *)v54 + 7) = v134;
            *(_OWORD *)v54 = v128[0];
            *((_OWORD *)v54 + 1) = v128[1];
            *((_OWORD *)v54 + 2) = v129;
            *((_OWORD *)v54 + 3) = v130;
            v51 = v54 + 128;
          }
          else
          {
            v55 = *v52;
            v56 = (v54 - *v52) >> 7;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 57)
              sub_2394189F8();
            v58 = v53 - (_QWORD)v55;
            if (v58 >> 6 > v57)
              v57 = v58 >> 6;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFF80)
              v59 = 0x1FFFFFFFFFFFFFFLL;
            else
              v59 = v57;
            if (v59)
            {
              if (v59 >> 57)
                sub_239418A80();
              v60 = (char *)operator new(v59 << 7);
            }
            else
            {
              v60 = 0;
            }
            v61 = v132;
            v62 = &v60[128 * v56];
            *((_OWORD *)v62 + 4) = v131;
            *((_OWORD *)v62 + 5) = v61;
            v63 = v134;
            *((_OWORD *)v62 + 6) = v133;
            *((_OWORD *)v62 + 7) = v63;
            v64 = v128[1];
            *(_OWORD *)v62 = v128[0];
            *((_OWORD *)v62 + 1) = v64;
            v65 = v130;
            *((_OWORD *)v62 + 2) = v129;
            *((_OWORD *)v62 + 3) = v65;
            v66 = v62;
            if (v54 != v55)
            {
              do
              {
                v67 = *((_OWORD *)v54 - 8);
                v68 = *((_OWORD *)v54 - 7);
                v69 = *((_OWORD *)v54 - 5);
                *((_OWORD *)v66 - 6) = *((_OWORD *)v54 - 6);
                *((_OWORD *)v66 - 5) = v69;
                *((_OWORD *)v66 - 8) = v67;
                *((_OWORD *)v66 - 7) = v68;
                v70 = *((_OWORD *)v54 - 4);
                v71 = *((_OWORD *)v54 - 3);
                v72 = *((_OWORD *)v54 - 1);
                *((_OWORD *)v66 - 2) = *((_OWORD *)v54 - 2);
                *((_OWORD *)v66 - 1) = v72;
                *((_OWORD *)v66 - 4) = v70;
                *((_OWORD *)v66 - 3) = v71;
                v66 -= 128;
                v54 -= 128;
              }
              while (v54 != v55);
              v54 = *v52;
            }
            v73 = &v60[128 * v59];
            v51 = v62 + 128;
            *v52 = v66;
            v52[1] = v62 + 128;
            v52[2] = v73;
            if (v54)
              operator delete(v54);
          }
          v52[1] = v51;
          ++v49;
        }
        while (v49 != v50);
      }
      return 1;
    }
    if (v5 == 223)
    {
      LODWORD(v119[0]) = 0;
      memset(v128, 0, 24);
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v40 = a2 + 4;
  v41 = MEMORY[0x24BDAC740];
  while (1)
  {
    v42 = std::istream::peek();
    if (v42 <= 0x7F)
      break;
    v43 = __maskrune(v42, 0x4000uLL);
    v44 = *(_QWORD *)(*a2 - 24);
    if (!v43)
      goto LABEL_30;
LABEL_28:
    if (!*(_DWORD *)((char *)v40 + v44))
      std::istream::get();
  }
  v44 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v41 + 4 * v42 + 60) & 0x4000) != 0)
    goto LABEL_28;
LABEL_30:
  if ((*((_BYTE *)a2 + v44 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v45 = std::istream::peek();
    if (v45 > 0x7F)
    {
      v46 = __maskrune(v45, 0x4000uLL);
      v47 = *(_QWORD *)(*a2 - 24);
      if (!v46)
        break;
      goto LABEL_36;
    }
    v47 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v41 + 4 * v45 + 60) & 0x4000) != 0)
    {
LABEL_36:
      if (!*(_DWORD *)((char *)v40 + v47))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v47 + 32) & 2) != 0)
    return 0;
  v75 = 0;
  v111 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v112 = *MEMORY[0x24BEDB7F0];
  v110 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v109 = MEMORY[0x24BEDB848] + 16;
LABEL_65:
  if ((*((_BYTE *)v40 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v75 & 1) == 0)
  {
    while (1)
    {
      v76 = std::istream::peek();
      if (v76 <= 0x7F)
      {
        v78 = *(_DWORD *)((char *)v40 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v41 + 4 * v76 + 60) & 0x4000) == 0)
        {
LABEL_73:
          if ((v78 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v113);
          if (sub_239596128(a2))
          {
            v79 = (char *)v114 + *(_QWORD *)(*(_QWORD *)&v114[0] - 24);
            if ((v79[32] & 5) == 0)
            {
              (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v79 + 5)
                                                                                             + 32))(v128, *((_QWORD *)v79 + 5), 0, 1, 16);
              if (v135 >= 1)
              {
                v119[0] = (uint64_t)v128;
                v119[1] = 0;
                sub_2395DB9C8(v119, &v113, 0);
                v124 = v131;
                v125 = v132;
                v126 = v133;
                v127 = v134;
                v120 = v128[0];
                v121 = v128[1];
                v122 = v129;
                v123 = v130;
                v80 = *a1;
                v82 = (*a1)[1];
                v81 = (unint64_t)(*a1)[2];
                if ((unint64_t)v82 >= v81)
                {
                  v84 = *v80;
                  v85 = (v82 - *v80) >> 7;
                  v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 57)
                    sub_2394189F8();
                  v87 = v81 - (_QWORD)v84;
                  if (v87 >> 6 > v86)
                    v86 = v87 >> 6;
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFF80)
                    v88 = 0x1FFFFFFFFFFFFFFLL;
                  else
                    v88 = v86;
                  if (v88)
                  {
                    if (v88 >> 57)
                      sub_239418A80();
                    v108 = v88;
                    v89 = (char *)operator new(v88 << 7);
                    v88 = v108;
                  }
                  else
                  {
                    v89 = 0;
                  }
                  v90 = v125;
                  v91 = &v89[128 * v85];
                  *((_OWORD *)v91 + 4) = v124;
                  *((_OWORD *)v91 + 5) = v90;
                  v92 = v127;
                  *((_OWORD *)v91 + 6) = v126;
                  *((_OWORD *)v91 + 7) = v92;
                  v93 = v121;
                  *(_OWORD *)v91 = v120;
                  *((_OWORD *)v91 + 1) = v93;
                  v94 = v123;
                  *((_OWORD *)v91 + 2) = v122;
                  *((_OWORD *)v91 + 3) = v94;
                  v95 = v91;
                  if (v82 != v84)
                  {
                    do
                    {
                      v96 = *((_OWORD *)v82 - 8);
                      v97 = *((_OWORD *)v82 - 7);
                      v98 = *((_OWORD *)v82 - 5);
                      *((_OWORD *)v95 - 6) = *((_OWORD *)v82 - 6);
                      *((_OWORD *)v95 - 5) = v98;
                      *((_OWORD *)v95 - 8) = v96;
                      *((_OWORD *)v95 - 7) = v97;
                      v99 = *((_OWORD *)v82 - 4);
                      v100 = *((_OWORD *)v82 - 3);
                      v101 = *((_OWORD *)v82 - 1);
                      *((_OWORD *)v95 - 2) = *((_OWORD *)v82 - 2);
                      *((_OWORD *)v95 - 1) = v101;
                      *((_OWORD *)v95 - 4) = v99;
                      *((_OWORD *)v95 - 3) = v100;
                      v95 -= 128;
                      v82 -= 128;
                    }
                    while (v82 != v84);
                    v82 = *v80;
                  }
                  v83 = v91 + 128;
                  *v80 = v95;
                  v80[1] = v91 + 128;
                  v80[2] = &v89[128 * v88];
                  if (v82)
                    operator delete(v82);
                }
                else
                {
                  *((_OWORD *)v82 + 4) = v124;
                  *((_OWORD *)v82 + 5) = v125;
                  *((_OWORD *)v82 + 6) = v126;
                  *((_OWORD *)v82 + 7) = v127;
                  *(_OWORD *)v82 = v120;
                  *((_OWORD *)v82 + 1) = v121;
                  *((_OWORD *)v82 + 2) = v122;
                  *((_OWORD *)v82 + 3) = v123;
                  v83 = v82 + 128;
                }
                v80[1] = v83;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v103 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_105;
              if (v103 == 1560281088)
                break;
              if (v103 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v41 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_104;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_104;
              }
              if ((*((_BYTE *)v40 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_104:
                if (v103 != 738197504)
                  goto LABEL_106;
LABEL_105:
                std::istream::get();
                v75 = 0;
                goto LABEL_108;
              }
              std::istream::get();
            }
            v75 = 1;
LABEL_108:
            v104 = 1;
          }
          else
          {
LABEL_106:
            v104 = 0;
            v75 = 0;
          }
          *(_QWORD *)&v113 = v112;
          *(_QWORD *)((char *)&v114[-1] + *(_QWORD *)(v112 - 24)) = v111;
          *(_QWORD *)&v114[0] = v110;
          *((_QWORD *)&v114[0] + 1) = v109;
          if (SHIBYTE(v116) < 0)
            operator delete(__p[1]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v118);
          result = 0;
          if ((v104 & 1) == 0)
            return result;
          goto LABEL_65;
        }
      }
      else
      {
        v77 = __maskrune(v76, 0x4000uLL);
        v78 = *(_DWORD *)((char *)v40 + *(_QWORD *)(*a2 - 24));
        if (!v77)
          goto LABEL_73;
      }
      if (!v78)
        std::istream::get();
    }
  }
  while (1)
  {
    v105 = std::istream::peek();
    v106 = v105 <= 0x7F ? *(_DWORD *)(v41 + 4 * v105 + 60) & 0x4000 : __maskrune(v105, 0x4000uLL);
    v107 = *(_QWORD *)(*a2 - 24);
    if (!v106)
      break;
    if (!*(_DWORD *)((char *)v40 + v107))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v107 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395DB52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56)
{
  uint64_t v56;

  if (*(char *)(v56 - 217) < 0)
  {
    operator delete(*(void **)(v56 - 240));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395DB604(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 7)
  {
    a1[1] = &v5[128 * a2];
    return;
  }
  v6 = (char *)*a1;
  v7 = (v5 - (_BYTE *)*a1) >> 7;
  v8 = v7 + a2;
  if ((v7 + a2) >> 57)
    sub_2394189F8();
  v9 = v4 - v6;
  if (v9 >> 6 > v8)
    v8 = v9 >> 6;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80)
    v10 = 0x1FFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 >> 57)
      sub_239418A80();
    v11 = (char *)operator new(v10 << 7);
    v12 = &v11[128 * v7];
    v13 = &v11[128 * v10];
    v14 = (unint64_t)&v12[128 * a2];
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v12;
      a1[1] = (void *)v14;
      a1[2] = v13;
      if (!v5)
        return;
LABEL_17:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = (char *)(v7 << 7);
    v13 = 0;
    v14 = (v7 << 7) + (a2 << 7);
    if (v5 == v6)
      goto LABEL_11;
  }
  do
  {
    v15 = *((_OWORD *)v5 - 8);
    v16 = *((_OWORD *)v5 - 7);
    v17 = *((_OWORD *)v5 - 5);
    *((_OWORD *)v12 - 6) = *((_OWORD *)v5 - 6);
    *((_OWORD *)v12 - 5) = v17;
    *((_OWORD *)v12 - 8) = v15;
    *((_OWORD *)v12 - 7) = v16;
    v18 = *((_OWORD *)v5 - 4);
    v19 = *((_OWORD *)v5 - 3);
    v20 = *((_OWORD *)v5 - 1);
    *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
    *((_OWORD *)v12 - 1) = v20;
    *((_OWORD *)v12 - 4) = v18;
    *((_OWORD *)v12 - 3) = v19;
    v12 -= 128;
    v5 -= 128;
  }
  while (v5 != v6);
  v5 = (char *)*a1;
  *a1 = v12;
  a1[1] = (void *)v14;
  a1[2] = v13;
  if (v5)
    goto LABEL_17;
}

uint64_t sub_2395DB74C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395DB9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2395DB9C8(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23945E108((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 3;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 0xF)
            *(_QWORD *)(v9 + 8 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          v40 = 0;
          sub_2395A1290((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 0xF)
            *(_QWORD *)(*a1 + 8 * v22) = v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                v47.__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x23B83DCEC](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 0xF)
                  *(_QWORD *)(*a1 + 8 * v30) = v47.__r_.__value_.__r.__words[0];
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395DC160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2395DC214(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int64x2_t *v8;
  int64x2_t *v9;
  char *v10;
  char *v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  __int128 v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  void **v41;
  void *v42;
  void **v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  __int128 v49;
  int64x2_t v50;
  __int128 v51;
  int64x2_t v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *__p[2];
  void *v60;
  char *v61;
  char *v62;
  char *v63;
  int64x2_t *v64;
  int64x2_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;

  v68 = 0;
  v67 = 0;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_2396157EC((uint64_t)__p, a3);
  v58 = 10;
  strcpy((char *)v57, "iid_offset");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF420;
  v5[1] = &v67;
  sub_23961580C((uint64_t)__p, (uint64_t)v57, (uint64_t)v5);
  v56 = 10;
  strcpy((char *)v55, "camera_num");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADFF20;
  v6[1] = &v68;
  sub_23961580C((uint64_t)__p, (uint64_t)v55, (uint64_t)v6);
  v54 = 14;
  strcpy((char *)v53, "relative_poses");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADFF50;
  v7[1] = &v64;
  sub_23961580C((uint64_t)__p, (uint64_t)v53, (uint64_t)v7);
  if ((v54 & 0x80000000) == 0)
  {
    if ((v56 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_44:
    operator delete(v55[0]);
    if ((v58 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_45;
  }
  operator delete(v53[0]);
  if (v56 < 0)
    goto LABEL_44;
LABEL_3:
  if ((v58 & 0x80000000) == 0)
    goto LABEL_4;
LABEL_45:
  operator delete(v57[0]);
LABEL_4:
  if (sub_23959479C((uint64_t)__p, a2))
  {
    *(_QWORD *)a1 = v68;
    *(_DWORD *)(a1 + 8) = v67;
    v8 = v64;
    v9 = v65;
    if (v64 != v65)
    {
      v10 = v62;
      do
      {
        v12 = v8[1];
        v14 = v8[2];
        v13 = v8[3];
        v16 = v8[4];
        v15 = v8[5];
        v17 = vzip1q_s64(*v8, v14);
        v18 = vzip1q_s64(v16, v8[6]);
        *(_QWORD *)&v20 = vdupq_laneq_s64(v16, 1).u64[0];
        v19 = vzip2q_s64(*v8, v14);
        *((_QWORD *)&v20 + 1) = v8[6].i64[1];
        v21 = vzip1q_s64(v12, v13);
        v22 = vzip1q_s64(v15, v8[7]);
        v23 = vzip2q_s64(v12, v13);
        *(_QWORD *)&v24 = vdupq_laneq_s64(v15, 1).u64[0];
        *((_QWORD *)&v24 + 1) = v8[7].i64[1];
        if (v10 < v63)
        {
          *(int64x2_t *)v10 = v17;
          *((int64x2_t *)v10 + 1) = v18;
          *((int64x2_t *)v10 + 2) = v19;
          *((_OWORD *)v10 + 3) = v20;
          *((int64x2_t *)v10 + 4) = v21;
          *((int64x2_t *)v10 + 5) = v22;
          v11 = v10 + 128;
          *((int64x2_t *)v10 + 6) = v23;
          *((_OWORD *)v10 + 7) = v24;
        }
        else
        {
          v25 = v61;
          v26 = (v10 - v61) >> 7;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 57)
            sub_2394189F8();
          v28 = v63 - v61;
          if ((v63 - v61) >> 6 > v27)
            v27 = v28 >> 6;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFF80)
            v29 = 0x1FFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v45 = v18;
            v46 = v17;
            v47 = v19;
            v48 = v22;
            v49 = v20;
            v50 = v21;
            v51 = v24;
            v52 = v23;
            if (v29 >> 57)
              sub_239418A80();
            v30 = (char *)operator new(v29 << 7);
            v24 = v51;
            v23 = v52;
            v20 = v49;
            v21 = v50;
            v19 = v47;
            v22 = v48;
            v18 = v45;
            v17 = v46;
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[128 * v26];
          *(int64x2_t *)v31 = v17;
          *((int64x2_t *)v31 + 1) = v18;
          *((int64x2_t *)v31 + 2) = v19;
          *((_OWORD *)v31 + 3) = v20;
          *((int64x2_t *)v31 + 4) = v21;
          *((int64x2_t *)v31 + 5) = v22;
          *((int64x2_t *)v31 + 6) = v23;
          *((_OWORD *)v31 + 7) = v24;
          v32 = v31;
          if (v10 != v25)
          {
            do
            {
              v33 = *((_OWORD *)v10 - 8);
              v34 = *((_OWORD *)v10 - 7);
              v35 = *((_OWORD *)v10 - 5);
              *((_OWORD *)v32 - 6) = *((_OWORD *)v10 - 6);
              *((_OWORD *)v32 - 5) = v35;
              *((_OWORD *)v32 - 8) = v33;
              *((_OWORD *)v32 - 7) = v34;
              v36 = *((_OWORD *)v10 - 4);
              v37 = *((_OWORD *)v10 - 3);
              v38 = *((_OWORD *)v10 - 1);
              *((_OWORD *)v32 - 2) = *((_OWORD *)v10 - 2);
              *((_OWORD *)v32 - 1) = v38;
              *((_OWORD *)v32 - 4) = v36;
              *((_OWORD *)v32 - 3) = v37;
              v32 -= 128;
              v10 -= 128;
            }
            while (v10 != v25);
            v10 = v25;
          }
          v11 = v31 + 128;
          v61 = v32;
          v62 = v31 + 128;
          v63 = &v30[128 * v29];
          if (v10)
            operator delete(v10);
        }
        v62 = v11;
        v8 += 8;
        v10 = v11;
      }
      while (v8 != v9);
    }
    if ((char **)(a1 + 16) != &v61)
      sub_2395DC70C((_QWORD *)(a1 + 16), v61, v62, (v62 - v61) >> 7);
  }
  v39 = v60;
  if (v60)
  {
    do
    {
      v40 = v39[5];
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      v39 = (_QWORD *)*v39;
    }
    while (v39);
    v41 = (void **)v60;
    if (v60)
    {
      do
      {
        v44 = (void **)*v41;
        if (*((char *)v41 + 39) < 0)
          operator delete(v41[2]);
        operator delete(v41);
        v41 = v44;
      }
      while (v44);
    }
  }
  v42 = __p[0];
  __p[0] = 0;
  if (v42)
    operator delete(v42);
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  return a2;
}

void sub_2395DC628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  uint64_t v43;
  void *v45;

  v45 = *(void **)(v43 - 128);
  if (!v45)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v43 - 120) = v45;
  operator delete(v45);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395DC70C(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 7)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 7;
    if (v18 >= __sz)
    {
      v35 = *result;
      if (a2 != a3)
      {
        v36 = (_OWORD *)*result;
        do
        {
          v37 = *(_OWORD *)v6;
          v38 = *((_OWORD *)v6 + 1);
          v39 = *((_OWORD *)v6 + 3);
          v36[2] = *((_OWORD *)v6 + 2);
          v36[3] = v39;
          *v36 = v37;
          v36[1] = v38;
          v40 = *((_OWORD *)v6 + 4);
          v41 = *((_OWORD *)v6 + 5);
          v42 = *((_OWORD *)v6 + 7);
          v36[6] = *((_OWORD *)v6 + 6);
          v36[7] = v42;
          v36[4] = v40;
          v36[5] = v41;
          v6 += 128;
          v36 += 8;
          v35 += 128;
        }
        while (v6 != a3);
      }
      v15 = v35 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[128 * v18];
      if (v17 != v9)
      {
        v20 = v18 << 7;
        do
        {
          v21 = *(_OWORD *)v6;
          v22 = *((_OWORD *)v6 + 1);
          v23 = *((_OWORD *)v6 + 3);
          *((_OWORD *)v9 + 2) = *((_OWORD *)v6 + 2);
          *((_OWORD *)v9 + 3) = v23;
          *(_OWORD *)v9 = v21;
          *((_OWORD *)v9 + 1) = v22;
          v24 = *((_OWORD *)v6 + 4);
          v25 = *((_OWORD *)v6 + 5);
          v26 = *((_OWORD *)v6 + 7);
          *((_OWORD *)v9 + 6) = *((_OWORD *)v6 + 6);
          *((_OWORD *)v9 + 7) = v26;
          *((_OWORD *)v9 + 4) = v24;
          *((_OWORD *)v9 + 5) = v25;
          v6 += 128;
          v9 += 128;
          v20 -= 128;
        }
        while (v20);
        v9 = *v16;
      }
      v27 = v9;
      if (v19 != a3)
      {
        v27 = v9;
        v28 = v9;
        do
        {
          v29 = *(_OWORD *)v19;
          v30 = *((_OWORD *)v19 + 1);
          v31 = *((_OWORD *)v19 + 3);
          *((_OWORD *)v28 + 2) = *((_OWORD *)v19 + 2);
          *((_OWORD *)v28 + 3) = v31;
          *(_OWORD *)v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v32 = *((_OWORD *)v19 + 4);
          v33 = *((_OWORD *)v19 + 5);
          v34 = *((_OWORD *)v19 + 7);
          *((_OWORD *)v28 + 6) = *((_OWORD *)v19 + 6);
          *((_OWORD *)v28 + 7) = v34;
          *((_OWORD *)v28 + 4) = v32;
          *((_OWORD *)v28 + 5) = v33;
          v19 += 128;
          v28 += 128;
          v27 += 128;
        }
        while (v19 != a3);
      }
      v15 = v27 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 57)
      goto LABEL_27;
    v10 = v8 >> 6;
    if (v8 >> 6 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF80;
    v12 = 0x1FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 57)
LABEL_27:
      sub_2394189F8();
    v13 = v12 << 7;
    result = operator new(v12 << 7);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, ((a3 - v6 - 128) & 0xFFFFFFFFFFFFFF80) + 128);
      v14 = &v9[((a3 - v6 - 128) & 0xFFFFFFFFFFFFFF80) + 128];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

void sub_2395DC904(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395DC928(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395DC9A8((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395DC974()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395DC9A8(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      v7 = 0;
      v8 = *(uint64_t **)(*(_QWORD *)a1 + 16);
      do
      {
        if (v8)
        {
          v11 = 0;
          v9 = v8;
          do
          {
            v9 = (uint64_t *)*v9;
            v10 = v11 + 1;
          }
          while (v11++ <= 0x7FFFFFFD && v9 != 0);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        sub_2395DCB04(v8, v9, v10, a2, 1);
        v7 += 0x7FFFFFFFLL;
        v8 = v9;
      }
      while (v7 < *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
  }
  else
  {
    sub_2395DCB04(*(uint64_t **)(*(_QWORD *)a1 + 16), 0, v5, a2, a3);
  }
  return a2;
}

BOOL sub_2395DCB04(uint64_t *a1, uint64_t *a2, unint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  void *__p;
  int v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  _DWORD v29[42];

  if (a5)
  {
    std::ostream::put();
    if (a3 >> 31)
    {
      return 0;
    }
    else
    {
      v20 = a3;
      v29[38] = a3;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (a1 == a2)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v15 = *MEMORY[0x24BEDB7F0];
        v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v18 = MEMORY[0x24BEDB848] + 16;
        do
        {
          sub_2394988CC((uint64_t)v24);
          std::ostream::operator<<();
          std::stringbuf::str();
          std::ostream::put();
          v19 = v23;
          if ((v23 & 0x80u) != 0)
            v19 = v22;
          v29[39] = v19;
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          sub_2395DCF0C((__int128 *)(a1 + 3), a4, 1);
          if ((char)v23 < 0)
            operator delete(__p);
          v24[0] = v15;
          *(_QWORD *)((char *)v24 + *(_QWORD *)(v15 - 24)) = v16;
          v25 = v17;
          v26 = v18;
          if (v28 < 0)
            operator delete(v27);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v29);
          a1 = (uint64_t *)*a1;
          ++v14;
        }
        while (a1 != a2);
      }
      return v14 == v20;
    }
  }
  else
  {
    std::ostream::put();
    if (a1 != a2)
    {
      v10 = *MEMORY[0x24BEDB7F0];
      v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v13 = MEMORY[0x24BEDB848] + 16;
      do
      {
        sub_2394988CC((uint64_t)v24);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        std::ostream::write();
        std::ostream::put();
        std::ostream::put();
        sub_2395DCF0C((__int128 *)(a1 + 3), a4, 0);
        a1 = (uint64_t *)*a1;
        if (a1 != a2)
          std::ostream::put();
        if ((char)v23 < 0)
          operator delete(__p);
        v24[0] = v10;
        *(_QWORD *)((char *)v24 + *(_QWORD *)(v10 - 24)) = v12;
        v25 = v11;
        v26 = v13;
        if (v28 < 0)
          operator delete(v27);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v29);
      }
      while (a1 != a2);
    }
    std::ostream::put();
    return 1;
  }
}

void sub_2395DCE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DCEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DCEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DCED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DCEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395DCF0C(__int128 *a1, _QWORD *a2, char a3)
{
  __int128 v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v17;
  std::bad_alloc *exception;
  std::bad_alloc *v19;
  void *v20[2];
  char v21;
  void *v22;
  char v23;
  void *v24[2];
  char v25;
  void *memptr[2];
  void *__p;
  char v28;
  void *v29;
  size_t v30;
  int v31;
  __int128 v32;
  __int128 v33;

  v6 = *a1;
  v32 = a1[1];
  v33 = v6;
  v28 = *((_BYTE *)a1 + 32);
  v7 = *((unsigned int *)a1 + 14);
  v8 = (8 * v7 + 31) & 0xFFFFFFFE0;
  v30 = v8 >> 3;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v8, 0x100BBD03uLL);
  v29 = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v19 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v19, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v7)
    memcpy(memptr[0], *((const void **)a1 + 5), 8 * v7);
  v31 = *((_DWORD *)a1 + 14);
  sub_2396157EC((uint64_t)memptr, a3);
  v25 = 5;
  strcpy((char *)v24, "focal");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADFFB0;
  v9[1] = &v33;
  sub_23961580C((uint64_t)memptr, (uint64_t)v24, (uint64_t)v9);
  v23 = 3;
  LODWORD(v22) = 7630960;
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADFFB0;
  v10[1] = &v32;
  sub_23961580C((uint64_t)memptr, (uint64_t)&v22, (uint64_t)v10);
  v21 = 10;
  strcpy((char *)v20, "distortion");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADFFE0;
  v11[1] = &v28;
  sub_23961580C((uint64_t)memptr, (uint64_t)v20, (uint64_t)v11);
  if ((v21 & 0x80000000) == 0)
  {
    if ((v23 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_20:
    operator delete(v22);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
  operator delete(v20[0]);
  if (v23 < 0)
    goto LABEL_20;
LABEL_6:
  if ((v25 & 0x80000000) == 0)
    goto LABEL_7;
LABEL_21:
  operator delete(v24[0]);
LABEL_7:
  sub_2395902F0((uint64_t)memptr, a2);
  v12 = __p;
  if (__p)
  {
    do
    {
      v13 = v12[5];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    v14 = (void **)__p;
    if (__p)
    {
      do
      {
        v17 = (void **)*v14;
        if (*((char *)v14 + 39) < 0)
          operator delete(v14[2]);
        operator delete(v14);
        v14 = v17;
      }
      while (v17);
    }
  }
  v15 = memptr[0];
  memptr[0] = 0;
  if (v15)
    operator delete(v15);
  free(v29);
  return a2;
}

void sub_2395DD198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_2395905C0((uint64_t)va);
  free(*(void **)(v11 - 104));
  _Unwind_Resume(a1);
}

void sub_2395DD1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_2395DD1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  if (a15 < 0)
  {
    operator delete(a10);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0((uint64_t)&a28);
    free(*(void **)(v28 - 104));
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_2395DD238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    JUMPOUT(0x2395DD1ECLL);
  JUMPOUT(0x2395DD1E4);
}

void sub_2395DD24C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395DD270(uint64_t a1, uint64_t *a2, int a3)
{
  __int128 v5;
  uint64_t v6;

  v5 = *(_OWORD *)*(_QWORD *)(a1 + 8);
  if (a3)
    sub_2395DA64C((uint64_t)&v5, (uint64_t)&v6, (uint64_t)a2, 2uLL);
  else
    sub_2395A34D0((uint64_t)&v5, (uint64_t)&v6, a2);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395DD2E0(uint64_t a1, _QWORD *a2, int a3)
{
  _OWORD *v4;
  __int128 v6;
  uint64_t v7[2];

  v4 = *(_OWORD **)(a1 + 8);
  v7[0] = (uint64_t)&v6;
  v7[1] = 0;
  sub_2395DD33C(v7, a2, a3);
  *v4 = v6;
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

BOOL sub_2395DD33C(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23945E108((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 3;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 1)
            *(_QWORD *)(v9 + 8 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          v40 = 0;
          sub_2395A1290((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 1)
            *(_QWORD *)(*a1 + 8 * v22) = v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                v47.__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x23B83DCEC](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 1)
                  *(_QWORD *)(*a1 + 8 * v30) = v47.__r_.__value_.__r.__words[0];
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395DDAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395DDB8C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395DDBB0(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395DDC2C(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395DDBEC(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395DDF8C(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395DDC2C(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  void **v25;
  void *__p[2];
  char v27;
  void *memptr[2];
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  void *v33[2];
  char v34;

  v6 = *(unsigned int *)(a1 + 24);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, (8 * v6 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v7 = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v17 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v17, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v6)
    memcpy(memptr[0], *(const void **)(a1 + 8), 8 * v6);
  v8 = *(unsigned int *)(a1 + 24);
  sub_2395A4348((unsigned __int8 *)a1, (uint64_t)v33);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  if ((_DWORD)v8)
  {
    v9 = operator new(8 * v8);
    v30 = v9;
    v32 = (char *)v9 + 8 * v8;
    bzero(v9, 8 * v8);
    v10 = 0;
    v31 = (char *)v9 + 8 * v8;
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    if (v11 < 4 || (unint64_t)((char *)v9 - v7) < 0x20)
      goto LABEL_15;
    v12 = 0;
    v10 = v11 & 0xFFFFFFFC;
    v13 = v9 + 1;
    do
    {
      v14 = &v7[8 * (v12 & 0xFFFFFFFC)];
      v15 = v14[1];
      *(v13 - 1) = *v14;
      *v13 = v15;
      v12 += 4;
      v13 += 2;
    }
    while (v10 != v12);
    while (v11 != v10)
    {
LABEL_15:
      *((_QWORD *)v9 + v10) = *(_QWORD *)&v7[8 * v10];
      ++v10;
    }
  }
  sub_2396157EC((uint64_t)memptr, a3);
  v27 = 4;
  strcpy((char *)__p, "type");
  v18 = (_QWORD *)operator new();
  *v18 = &off_250ADF330;
  v18[1] = v33;
  sub_23961580C((uint64_t)memptr, (uint64_t)__p, (uint64_t)v18);
  if (v27 < 0)
    operator delete(__p[0]);
  v27 = 5;
  strcpy((char *)__p, "param");
  v19 = (_QWORD *)operator new();
  *v19 = &off_250ADF600;
  v19[1] = &v30;
  sub_23961580C((uint64_t)memptr, (uint64_t)__p, (uint64_t)v19);
  if (v27 < 0)
    operator delete(__p[0]);
  sub_2395902F0((uint64_t)memptr, a2);
  v20 = v29;
  if (v29)
  {
    do
    {
      v21 = v20[5];
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v20 = (_QWORD *)*v20;
    }
    while (v20);
    v22 = (void **)v29;
    if (v29)
    {
      do
      {
        v25 = (void **)*v22;
        if (*((char *)v22 + 39) < 0)
          operator delete(v22[2]);
        operator delete(v22);
        v22 = v25;
      }
      while (v25);
    }
  }
  v23 = memptr[0];
  memptr[0] = 0;
  if (v23)
    operator delete(v23);
  if (v30)
  {
    v31 = (char *)v30;
    operator delete(v30);
  }
  if (v34 < 0)
    operator delete(v33[0]);
  free(v7);
  return a2;
}

void sub_2395DDF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  uint64_t v24;

  sub_2395905C0((uint64_t)&a16);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
    if ((*(char *)(v24 - 49) & 0x80000000) == 0)
    {
LABEL_3:
      free(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v24 - 49) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v24 - 72));
  free(v23);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395DDF8C(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  _OWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void **v23;
  void *v24;
  void **v26;
  void *__p[2];
  char v28;
  void *v29[2];
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _BYTE *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_2396157EC((uint64_t)v29, a3);
  v28 = 4;
  strcpy((char *)__p, "type");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF330;
  v5[1] = &v31;
  sub_23961580C((uint64_t)v29, (uint64_t)__p, (uint64_t)v5);
  if (v28 < 0)
    operator delete(__p[0]);
  v28 = 5;
  strcpy((char *)__p, "param");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF600;
  v6[1] = &v34;
  sub_23961580C((uint64_t)v29, (uint64_t)__p, (uint64_t)v6);
  if (v28 < 0)
    operator delete(__p[0]);
  if (!sub_23959479C((uint64_t)v29, a2))
    goto LABEL_36;
  if (SHIBYTE(v33) < 0)
  {
    if (v32 != 3)
    {
      if (v32 == 8)
      {
        if (*(_QWORD *)v31 == 0x616C696B6B696568)
        {
          v7 = 1;
          goto LABEL_24;
        }
        if (*(_QWORD *)v31 == 0x34616C616E6E616BLL)
        {
          v7 = 2;
          goto LABEL_24;
        }
      }
LABEL_23:
      v7 = 0;
      goto LABEL_24;
    }
    v8 = (unsigned __int16 *)v31;
LABEL_19:
    v9 = *v8;
    v10 = *((unsigned __int8 *)v8 + 2);
    if (v9 == 30060 && v10 == 116)
    {
      v7 = 3;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (HIBYTE(v33) == 3)
  {
    v8 = (unsigned __int16 *)&v31;
    goto LABEL_19;
  }
  if (HIBYTE(v33) != 8)
    goto LABEL_23;
  if (v31 == (void *)0x616C696B6B696568)
    v7 = 1;
  else
    v7 = 2 * (v31 == (void *)0x34616C616E6E616BLL);
LABEL_24:
  *(_BYTE *)a1 = v7;
  v12 = v35 - v34;
  *(_DWORD *)(a1 + 24) = (unint64_t)(v35 - v34) >> 3;
  sub_23945215C(a1 + 8, (v12 >> 3));
  v13 = v34;
  if (v35 != v34)
  {
    v14 = 0;
    v15 = (v35 - v34) >> 3;
    v16 = *(_QWORD *)(a1 + 8);
    if (v15 <= 1)
      v15 = 1;
    if (v15 - 0x100000001 < 0xFFFFFFFF00000005 || (unint64_t)(v16 - (_QWORD)v34) < 0x20)
      goto LABEL_34;
    v17 = 0;
    v14 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    v18 = (__int128 *)(v34 + 16);
    do
    {
      v19 = *v18;
      v20 = (_OWORD *)(v16 + 8 * (v17 & 0xFFFFFFFC));
      *v20 = *(v18 - 1);
      v20[1] = v19;
      v17 += 4;
      v18 += 2;
    }
    while (v14 != v17);
    while (v15 != v14)
    {
LABEL_34:
      *(_QWORD *)(v16 + 8 * v14) = *(_QWORD *)&v13[8 * v14];
      ++v14;
    }
  }
LABEL_36:
  v21 = v30;
  if (v30)
  {
    do
    {
      v22 = v21[5];
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      v21 = (_QWORD *)*v21;
    }
    while (v21);
    v23 = (void **)v30;
    if (v30)
    {
      do
      {
        v26 = (void **)*v23;
        if (*((char *)v23 + 39) < 0)
          operator delete(v23[2]);
        operator delete(v23);
        v23 = v26;
      }
      while (v26);
    }
  }
  v24 = v29[0];
  v29[0] = 0;
  if (v24)
    operator delete(v24);
  if (SHIBYTE(v33) < 0)
    operator delete(v31);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  return a2;
}

void sub_2395DE368(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395DE38C(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395DE40C((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395DE3D8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395DE40C(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      v7 = 0;
      v8 = *(_QWORD **)(*(_QWORD *)a1 + 16);
      do
      {
        if (v8)
        {
          v11 = 0;
          v9 = v8;
          do
          {
            v9 = (_QWORD *)*v9;
            v10 = v11 + 1;
          }
          while (v11++ <= 0x7FFFFFFD && v9 != 0);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        sub_2395DE568(v8, v9, v10, a2, 1);
        v7 += 0x7FFFFFFFLL;
        v8 = v9;
      }
      while (v7 < *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
  }
  else
  {
    sub_2395DE568(*(_QWORD **)(*(_QWORD *)a1 + 16), 0, v5, a2, a3);
  }
  return a2;
}

BOOL sub_2395DE568(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int64x2_t v33;
  unint64_t v34;
  void *__p;
  int v36;
  unsigned __int8 v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  _DWORD v43[42];

  if (a5)
  {
    std::ostream::put();
    if (a3 >> 31)
    {
      return 0;
    }
    else
    {
      v34 = a3;
      v43[38] = a3;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (a1 == a2)
      {
        v21 = 0;
      }
      else
      {
        v21 = 0;
        v22 = *MEMORY[0x24BEDB7F0];
        v23 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v25 = MEMORY[0x24BEDB848] + 16;
        do
        {
          sub_2394988CC((uint64_t)v38);
          std::ostream::operator<<();
          std::stringbuf::str();
          std::ostream::put();
          v26 = v37;
          if ((v37 & 0x80u) != 0)
            v26 = v36;
          v43[39] = v26;
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          sub_2395DE970((uint64_t)(a1 + 3), a4, 1, v27, v28, v29, v30, v31, v32, v33);
          if ((char)v37 < 0)
            operator delete(__p);
          v38[0] = v22;
          *(_QWORD *)((char *)v38 + *(_QWORD *)(v22 - 24)) = v23;
          v39 = v24;
          v40 = v25;
          if (v42 < 0)
            operator delete(v41);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v43);
          a1 = (_QWORD *)*a1;
          ++v21;
        }
        while (a1 != a2);
      }
      return v21 == v34;
    }
  }
  else
  {
    std::ostream::put();
    if (a1 != a2)
    {
      v10 = *MEMORY[0x24BEDB7F0];
      v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v13 = MEMORY[0x24BEDB848] + 16;
      do
      {
        sub_2394988CC((uint64_t)v38);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        std::ostream::write();
        std::ostream::put();
        std::ostream::put();
        sub_2395DE970((uint64_t)(a1 + 3), a4, 0, v14, v15, v16, v17, v18, v19, v20);
        a1 = (_QWORD *)*a1;
        if (a1 != a2)
          std::ostream::put();
        if ((char)v37 < 0)
          operator delete(__p);
        v38[0] = v10;
        *(_QWORD *)((char *)v38 + *(_QWORD *)(v10 - 24)) = v12;
        v39 = v11;
        v40 = v13;
        if (v42 < 0)
          operator delete(v41);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v43);
      }
      while (a1 != a2);
    }
    std::ostream::put();
    return 1;
  }
}

void sub_2395DE8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DE90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DE920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DE934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DE948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395DE970(uint64_t a1, _QWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9, int64x2_t a10)
{
  int64x2_t v10;
  float64x2_t v14;
  unint64_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  int64x2_t v34;
  float64x2_t v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  void **v53;
  void *v54;
  void **v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  __int128 v61;
  uint64_t v62;
  void *__p[2];
  void *v64;
  int64x2_t v65;
  unint64_t v66;
  float64x2_t v67;
  double v68;
  _OWORD v69[4];
  double v70;

  v14 = *(float64x2_t *)a1;
  v15 = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
  v10.i64[0] = *(_QWORD *)(a1 + 48);
  v16 = *(float64x2_t *)(a1 + 32);
  *(_QWORD *)&v17 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  v18 = *(double *)(a1 + 80);
  _Q0 = *(float64x2_t *)(a1 + 64);
  *(_QWORD *)&v20 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
  v64 = *(void **)(a1 + 16);
  a10.i64[0] = (uint64_t)v64;
  *(float64x2_t *)__p = v14;
  v66 = v10.i64[0];
  v65 = (int64x2_t)v16;
  v68 = v18;
  v67 = _Q0;
  v21 = (float64x2_t)vzip1q_s64((int64x2_t)v14, (int64x2_t)v16);
  v22 = (float64x2_t)vzip2q_s64((int64x2_t)v14, (int64x2_t)v16);
  v23 = (float64x2_t)vzip1q_s64(a10, v10);
  _Q21 = (int64x2_t)vmulq_f64(_Q0, v14);
  _D22 = v14.f64[1];
  __asm { FMLA            D21, D22, V0.D[1] }
  *(double *)_Q21.i64 = *(double *)_Q21.i64 + v18 * *(double *)&v64;
  _Q23 = (int8x16_t)vmulq_f64(_Q0, v16);
  _D24 = v16.f64[1];
  __asm { FMLA            D23, D24, V0.D[1] }
  *(double *)_Q23.i64 = *(double *)_Q23.i64 + v18 * *(double *)v10.i64;
  _Q25 = vmulq_f64(_Q0, _Q0);
  _D26 = _Q0.f64[1];
  __asm { FMLA            D25, D26, V0.D[1] }
  _Q25.f64[0] = _Q25.f64[0] + v18 * v18;
  v34 = (int64x2_t)vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v16.f64[0]), v22, v16, 1), v23, *(double *)v10.i64), (float64x2_t)xmmword_239EC6830);
  __asm { FMOV            V26.2D, #-1.0 }
  *(_QWORD *)&v36.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q25, _Q26));
  v36.f64[1] = NAN;
  v37 = vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, v14.f64[0]), v22, v14, 1), v23, *(double *)&v64), (float64x2_t)xmmword_239EC6820)), v36), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v34, _Q23, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q21, v34)), vabsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v21, _Q0.f64[0]), v22, _Q0, 1), v23, v18)))));
  *(double *)v10.i64 = -*(double *)v10.i64;
  if (v37 > 0.0001
    || (v38.f64[0] = v14.f64[0],
        *(_QWORD *)&v38.f64[1] = v15,
        v39.f64[0] = v20,
        v39.f64[1] = _Q0.f64[0],
        v40.f64[0] = v17,
        v40.f64[1] = v16.f64[0],
        v41 = vmulq_f64(v38, vmlaq_n_f64(vmulq_n_f64(v39, *(double *)v10.i64), v40, v18)),
        fabs(*(double *)&v64 * (v20 * v16.f64[0] - v17 * _Q0.f64[0])+ vsubq_f64(v41, (float64x2_t)vdupq_laneq_s64((int64x2_t)v41, 1)).f64[0]+ -1.0) > 0.0001))
  {
    if (v37 > 0.1
      || (*(_QWORD *)&v14.f64[1] = v15,
          v45.f64[0] = v20,
          v45.f64[1] = _Q0.f64[0],
          v46.f64[0] = v17,
          v46.f64[1] = v16.f64[0],
          v47 = vmulq_f64(v14, vmlaq_n_f64(vmulq_n_f64(v45, *(double *)v10.i64), v46, v18)),
          fabs(*(double *)&v64 * (v20 * v16.f64[0] - v17 * _Q0.f64[0])+ vsubq_f64(v47, (float64x2_t)vdupq_laneq_s64((int64x2_t)v47, 1)).f64[0]+ -1.0) > 0.1))
    {
      sub_239EBEEB0();
    }
    sub_239516070((float64x2_t *)__p);
    *(_QWORD *)&v23.f64[0] = v64;
    v44 = v66;
    _Q0.f64[0] = v67.f64[0];
    v21 = (float64x2_t)vzip1q_s64(*(int64x2_t *)__p, v65);
    v20 = v67.f64[1];
    *(_QWORD *)&v43 = v65.i64[1];
    *(void **)&v22.f64[0] = __p[1];
    v18 = v68;
    v42 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  }
  else
  {
    v42 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
    *(_QWORD *)&v43 = vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL).u64[0];
    v44 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  }
  v48 = *(_OWORD *)(a1 + 96);
  v62 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)&v21.f64[1] = v42;
  v61 = v48;
  _Q0.f64[1] = v22.f64[0];
  *((double *)&v43 + 1) = v20;
  v69[0] = v21;
  v69[1] = _Q0;
  v70 = v18;
  *(_QWORD *)&v23.f64[1] = v44;
  v69[2] = v43;
  v69[3] = v23;
  sub_2396157EC((uint64_t)__p, a3);
  v60 = 8;
  strcpy((char *)v59, "rotation");
  v49 = (_QWORD *)operator new();
  *v49 = &off_250AE0040;
  v49[1] = v69;
  sub_23961580C((uint64_t)__p, (uint64_t)v59, (uint64_t)v49);
  v58 = 11;
  strcpy((char *)v57, "translation");
  v50 = (_QWORD *)operator new();
  *v50 = &off_250AE0070;
  v50[1] = &v61;
  sub_23961580C((uint64_t)__p, (uint64_t)v57, (uint64_t)v50);
  if (v58 < 0)
  {
    operator delete(v57[0]);
    if ((v60 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v60 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v59[0]);
LABEL_9:
  sub_2395902F0((uint64_t)__p, a2);
  v51 = v64;
  if (*(double *)&v64 != 0.0)
  {
    do
    {
      v52 = v51[5];
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      v51 = (_QWORD *)*v51;
    }
    while (v51);
    v53 = (void **)v64;
    if (*(double *)&v64 != 0.0)
    {
      do
      {
        v56 = (void **)*v53;
        if (*((char *)v53 + 39) < 0)
          operator delete(v53[2]);
        operator delete(v53);
        v53 = v56;
      }
      while (v56);
    }
  }
  v54 = __p[0];
  __p[0] = 0;
  if (v54)
    operator delete(v54);
  return a2;
}

void sub_2395DED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395DED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_2395905C0((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_2395DEDB8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395DEDDC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v9[0] = *(_OWORD *)v4;
  v5 = *(_OWORD *)(v4 + 16);
  v6 = *(_OWORD *)(v4 + 32);
  v7 = *(_OWORD *)(v4 + 48);
  v10 = *(_QWORD *)(v4 + 64);
  v9[2] = v6;
  v9[3] = v7;
  v9[1] = v5;
  if (a3)
    sub_2395DA64C((uint64_t)v9, (uint64_t)&v11, (uint64_t)a2, 9uLL);
  else
    sub_2395A34D0((uint64_t)v9, (uint64_t)&v11, a2);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395DEE64(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[4];
  uint64_t v10;
  uint64_t v11[2];

  v4 = *(_QWORD *)(a1 + 8);
  v11[0] = (uint64_t)v9;
  v11[1] = 0;
  sub_2395DEEDC(v11, a2, a3);
  *(_OWORD *)v4 = v9[0];
  v5 = v9[1];
  v6 = v9[2];
  v7 = v9[3];
  *(_QWORD *)(v4 + 64) = v10;
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

BOOL sub_2395DEEDC(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23945E108((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 3;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 8)
            *(_QWORD *)(v9 + 8 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          v40 = 0;
          sub_2395A1290((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 8)
            *(_QWORD *)(*a1 + 8 * v22) = v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                v47.__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x23B83DCEC](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 8)
                  *(_QWORD *)(*a1 + 8 * v30) = v47.__r_.__value_.__r.__words[0];
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395DF674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395DF72C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395DF750(uint64_t a1, uint64_t *a2, int a3)
{
  __int128 *v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(__int128 **)(a1 + 8);
  v5 = *v4;
  v8 = *((_QWORD *)v4 + 2);
  v7 = v5;
  if (a3)
    sub_2395DA64C((uint64_t)&v7, (uint64_t)&v9, (uint64_t)a2, 3uLL);
  else
    sub_2395A34D0((uint64_t)&v7, (uint64_t)&v9, a2);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395DF7C8(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9[2];

  v4 = *(_QWORD *)(a1 + 8);
  v9[0] = (uint64_t)&v7;
  v9[1] = 0;
  sub_2395DF82C(v9, a2, a3);
  v5 = v7;
  *(_QWORD *)(v4 + 16) = v8;
  *(_OWORD *)v4 = v5;
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

BOOL sub_2395DF82C(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23945E108((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 3;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 2)
            *(_QWORD *)(v9 + 8 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          v40 = 0;
          sub_2395A1290((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 2)
            *(_QWORD *)(*a1 + 8 * v22) = v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                v47.__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x23B83DCEC](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 2)
                  *(_QWORD *)(*a1 + 8 * v30) = v47.__r_.__value_.__r.__words[0];
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395DFFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395E007C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E00A0(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E0120((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395E00EC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395E0120(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      v7 = 0;
      v8 = *(_QWORD **)(*(_QWORD *)a1 + 16);
      do
      {
        if (v8)
        {
          v11 = 0;
          v9 = v8;
          do
          {
            v9 = (_QWORD *)*v9;
            v10 = v11 + 1;
          }
          while (v11++ <= 0x7FFFFFFD && v9 != 0);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        sub_2395E027C(v8, v9, v10, a2, 1);
        v7 += 0x7FFFFFFFLL;
        v8 = v9;
      }
      while (v7 < *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
  }
  else
  {
    sub_2395E027C(*(_QWORD **)(*(_QWORD *)a1 + 16), 0, v5, a2, a3);
  }
  return a2;
}

BOOL sub_2395E027C(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  void *__p;
  int v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  _DWORD v29[42];

  if (a5)
  {
    std::ostream::put();
    if (a3 >> 31)
    {
      return 0;
    }
    else
    {
      v20 = a3;
      v29[38] = a3;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (a1 == a2)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v15 = *MEMORY[0x24BEDB7F0];
        v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v18 = MEMORY[0x24BEDB848] + 16;
        do
        {
          sub_2394988CC((uint64_t)v24);
          std::ostream::operator<<();
          std::stringbuf::str();
          std::ostream::put();
          v19 = v23;
          if ((v23 & 0x80u) != 0)
            v19 = v22;
          v29[39] = v19;
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          sub_2395E0684((uint64_t)(a1 + 3), a4, 1);
          if ((char)v23 < 0)
            operator delete(__p);
          v24[0] = v15;
          *(_QWORD *)((char *)v24 + *(_QWORD *)(v15 - 24)) = v16;
          v25 = v17;
          v26 = v18;
          if (v28 < 0)
            operator delete(v27);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v29);
          a1 = (_QWORD *)*a1;
          ++v14;
        }
        while (a1 != a2);
      }
      return v14 == v20;
    }
  }
  else
  {
    std::ostream::put();
    if (a1 != a2)
    {
      v10 = *MEMORY[0x24BEDB7F0];
      v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v13 = MEMORY[0x24BEDB848] + 16;
      do
      {
        sub_2394988CC((uint64_t)v24);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        std::ostream::write();
        std::ostream::put();
        std::ostream::put();
        sub_2395E0684((uint64_t)(a1 + 3), a4, 0);
        a1 = (_QWORD *)*a1;
        if (a1 != a2)
          std::ostream::put();
        if ((char)v23 < 0)
          operator delete(__p);
        v24[0] = v10;
        *(_QWORD *)((char *)v24 + *(_QWORD *)(v10 - 24)) = v12;
        v25 = v11;
        v26 = v13;
        if (v28 < 0)
          operator delete(v27);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v29);
      }
      while (a1 != a2);
    }
    std::ostream::put();
    return 1;
  }
}

void sub_2395E060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E0620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E0634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E0648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E065C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395E0684(uint64_t a1, _QWORD *a2, char a3)
{
  __int128 v5;
  uint64_t v6;
  size_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint8x8_t v11;
  __int128 v12;
  uint64_t v13;
  int8x16_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void **v32;
  void *v33;
  void **v35;
  std::bad_alloc *exception;
  std::bad_alloc *v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46;
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54;
  char v55;
  char __p[17];
  char v57;
  _OWORD memptr[8];
  char v59;
  __int128 __dst;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int32 v64;
  int v65;
  char v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[2];
  char v72;
  void *v73;
  size_t v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[2];
  _QWORD *v85;

  sub_2396157EC((uint64_t)v84, a3);
  v5 = *(_OWORD *)(a1 + 16);
  v71[0] = *(_OWORD *)a1;
  v71[1] = v5;
  v72 = *(_BYTE *)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 56);
  v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
  v74 = v7 >> 3;
  *(_QWORD *)&memptr[0] = 0;
  malloc_type_posix_memalign((void **)memptr, 0x20uLL, v7, 0x100BBD03uLL);
  v73 = *(void **)&memptr[0];
  if (!*(_QWORD *)&memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v37 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v37, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v6)
    memcpy(*(void **)&memptr[0], *(const void **)(a1 + 40), 8 * v6);
  v75 = *(_DWORD *)(a1 + 56);
  v8 = *(_OWORD *)(a1 + 144);
  v80 = *(_OWORD *)(a1 + 128);
  v81 = v8;
  v9 = *(_OWORD *)(a1 + 176);
  v82 = *(_OWORD *)(a1 + 160);
  v83 = v9;
  v10 = *(_OWORD *)(a1 + 80);
  v76 = *(_OWORD *)(a1 + 64);
  v77 = v10;
  v12 = *(_OWORD *)(a1 + 112);
  v78 = *(_OWORD *)(a1 + 96);
  v11.i32[1] = DWORD1(v78);
  v79 = v12;
  v13 = *(int *)(a1 + 192);
  v69 = *(int *)(a1 + 196);
  v70 = v13;
  v68 = *(_QWORD *)(a1 + 200);
  v67 = *(unsigned __int8 *)(a1 + 240);
  v66 = *(_BYTE *)(a1 + 241);
  v65 = *(unsigned __int8 *)(a1 + 232);
  v11.i32[0] = *(_DWORD *)(a1 + 234);
  v14 = vbicq_s8((int8x16_t)xmmword_239EC7630, (int8x16_t)vceqzq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v11))));
  *(int8x8_t *)v14.i8 = vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  v64 = v14.i32[0] | v14.i32[1] | (32 * *(unsigned __int8 *)(a1 + 238)) | *(unsigned __int8 *)(a1 + 233) | (*(unsigned __int8 *)(a1 + 239) << 6);
  v62 = *(_OWORD *)(a1 + 208);
  v63 = *(_QWORD *)(a1 + 224);
  if (*(char *)(a1 + 271) < 0)
  {
    sub_23941A7F8(&__dst, *(void **)(a1 + 248), *(_QWORD *)(a1 + 256));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 248);
    v61 = *(_QWORD *)(a1 + 264);
  }
  LOBYTE(memptr[0]) = 0;
  v59 = 0;
  if (*(_BYTE *)(a1 + 400))
  {
    v15 = *(_OWORD *)(a1 + 352);
    memptr[4] = *(_OWORD *)(a1 + 336);
    memptr[5] = v15;
    v16 = *(_OWORD *)(a1 + 384);
    memptr[6] = *(_OWORD *)(a1 + 368);
    memptr[7] = v16;
    v17 = *(_OWORD *)(a1 + 288);
    memptr[0] = *(_OWORD *)(a1 + 272);
    memptr[1] = v17;
    v18 = *(_OWORD *)(a1 + 320);
    memptr[2] = *(_OWORD *)(a1 + 304);
    memptr[3] = v18;
    v59 = 1;
    v57 = 16;
    strcpy(__p, "object_transform");
    v19 = (_QWORD *)operator new();
    *v19 = &off_250AE00D0;
    v19[1] = memptr;
    sub_23961580C((uint64_t)v84, (uint64_t)__p, (uint64_t)v19);
    if (v57 < 0)
      operator delete(*(void **)__p);
  }
  v57 = 6;
  strcpy(__p, "camera");
  v20 = (_QWORD *)operator new();
  *v20 = &off_250AE0100;
  v20[1] = v71;
  sub_23961580C((uint64_t)v84, (uint64_t)__p, (uint64_t)v20);
  v55 = 3;
  LODWORD(v54) = 6580579;
  v21 = (_QWORD *)operator new();
  *v21 = &off_250AE01C0;
  v21[1] = &v70;
  sub_23961580C((uint64_t)v84, (uint64_t)&v54, (uint64_t)v21);
  v53 = 10;
  strcpy((char *)v52, "segment_id");
  v22 = (_QWORD *)operator new();
  *v22 = &off_250AE01C0;
  v22[1] = &v69;
  sub_23961580C((uint64_t)v84, (uint64_t)v52, (uint64_t)v22);
  v51 = 4;
  strcpy((char *)v50, "size");
  v23 = (_QWORD *)operator new();
  *v23 = &off_250AE01F0;
  v23[1] = &v68;
  sub_23961580C((uint64_t)v84, (uint64_t)v50, (uint64_t)v23);
  v49 = 11;
  strcpy((char *)v48, "is_keyframe");
  v24 = (_QWORD *)operator new();
  *v24 = &off_250AE0220;
  v24[1] = &v66;
  sub_23961580C((uint64_t)v84, (uint64_t)v48, (uint64_t)v24);
  v47 = 3;
  LODWORD(v46) = 6777958;
  v25 = (_QWORD *)operator new();
  *v25 = &off_250ADF420;
  v25[1] = &v65;
  sub_23961580C((uint64_t)v84, (uint64_t)&v46, (uint64_t)v25);
  v45 = 5;
  strcpy((char *)v44, "prior");
  v26 = (_QWORD *)operator new();
  *v26 = &off_250ADF240;
  v26[1] = &v64;
  sub_23961580C((uint64_t)v84, (uint64_t)v44, (uint64_t)v26);
  v43 = 7;
  strcpy((char *)v42, "gravity");
  v27 = (_QWORD *)operator new();
  *v27 = &off_250AE0250;
  v27[1] = &v62;
  sub_23961580C((uint64_t)v84, (uint64_t)v42, (uint64_t)v27);
  v41 = 11;
  strcpy((char *)v40, "orientation");
  v28 = (_QWORD *)operator new();
  *v28 = &off_250ADF420;
  v28[1] = &v67;
  sub_23961580C((uint64_t)v84, (uint64_t)v40, (uint64_t)v28);
  v39 = 9;
  strcpy((char *)v38, "timestamp");
  v29 = (_QWORD *)operator new();
  *v29 = &off_250ADF330;
  v29[1] = &__dst;
  sub_23961580C((uint64_t)v84, (uint64_t)v38, (uint64_t)v29);
  if (v39 < 0)
  {
    operator delete(v38[0]);
    if ((v41 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v43 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_36;
    }
  }
  else if ((v41 & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v40[0]);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v45 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v42[0]);
  if ((v45 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v47 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v44[0]);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v49 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v46);
  if ((v49 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v51 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v48[0]);
  if ((v51 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v53 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v50[0]);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v55 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_42:
    operator delete(v54);
    if ((v57 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_41:
  operator delete(v52[0]);
  if (v55 < 0)
    goto LABEL_42;
LABEL_19:
  if ((v57 & 0x80000000) == 0)
    goto LABEL_20;
LABEL_43:
  operator delete(*(void **)__p);
LABEL_20:
  sub_2395902F0((uint64_t)v84, a2);
  if (SHIBYTE(v61) < 0)
    operator delete((void *)__dst);
  free(v73);
  v30 = v85;
  if (v85)
  {
    do
    {
      v31 = v30[5];
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v30 = (_QWORD *)*v30;
    }
    while (v30);
    v32 = (void **)v85;
    if (v85)
    {
      do
      {
        v35 = (void **)*v32;
        if (*((char *)v32 + 39) < 0)
          operator delete(v32[2]);
        operator delete(v32);
        v32 = v35;
      }
      while (v35);
    }
  }
  v33 = (void *)v84[0];
  v84[0] = 0;
  if (v33)
    operator delete(v33);
  return a2;
}

void sub_2395E0D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  free((void *)STACK[0x218]);
  sub_2395905C0(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_2395E0DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a64 < 0)
    operator delete(__p);
  free((void *)STACK[0x218]);
  sub_2395905C0(v64 - 96);
  _Unwind_Resume(a1);
}

void sub_2395E0E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x2395E0E60);
  JUMPOUT(0x2395E0DD0);
}

void sub_2395E0E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    JUMPOUT(0x2395E0E80);
  JUMPOUT(0x2395E0DD8);
}

void sub_2395E0E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    JUMPOUT(0x2395E0EA0);
  JUMPOUT(0x2395E0DE0);
}

void sub_2395E0EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    JUMPOUT(0x2395E0EC0);
  JUMPOUT(0x2395E0DE8);
}

void sub_2395E0ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    JUMPOUT(0x2395E0EE0);
  JUMPOUT(0x2395E0DF0);
}

void sub_2395E0EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    JUMPOUT(0x2395E0F00);
  JUMPOUT(0x2395E0DF8);
}

void sub_2395E0F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    JUMPOUT(0x2395E0F20);
  JUMPOUT(0x2395E0E00);
}

void sub_2395E0F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    JUMPOUT(0x2395E0F40);
  JUMPOUT(0x2395E0E08);
}

void sub_2395E0F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_2395E0F7C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E0FA0(uint64_t a1, _QWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9, int64x2_t a10)
{
  sub_2395DE970(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395E0FDC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395E1014(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E1038(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395E10B4(*(int64x2_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E1074(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395E154C(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395E10B4(int64x2_t *a1, _QWORD *a2, char a3)
{
  char *v5;
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  uint64_t v9;
  int64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  void **v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *__p[2];
  void *v30;
  _BYTE v31[128];

  v5 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v6 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = 14;
  memset(&v31[40], 0, 80);
  memset(&v31[8], 0, 32);
  *(_QWORD *)v31 = 0x3FF0000000000000;
  *(_QWORD *)&v31[40] = 0x3FF0000000000000;
  *(_QWORD *)&v31[120] = 0x3FF0000000000000;
  v7 = a1[4];
  v8 = a1[6];
  v9 = a1[7].i64[0];
  v10 = a1[8];
  v11 = a1[9].i64[0];
  *(_QWORD *)&v31[16] = a1[5].i64[0];
  *(_QWORD *)&v31[48] = v9;
  *(_QWORD *)&v31[80] = v11;
  v12 = a1[10];
  *(_QWORD *)&v31[112] = a1[11].i64[0];
  v13 = vzip1q_s64(v10, v12);
  v10.i64[0] = vdupq_laneq_s64(v10, 1).u64[0];
  v10.i64[1] = v12.i64[1];
  v14 = vzip1q_s64(*(int64x2_t *)&v31[16], *(int64x2_t *)&v31[48]);
  v15 = vzip2q_s64(*(int64x2_t *)&v31[16], *(int64x2_t *)&v31[48]);
  *(_QWORD *)&v16 = vdupq_laneq_s64(*(int64x2_t *)&v31[80], 1).u64[0];
  *((_QWORD *)&v16 + 1) = 0x3FF0000000000000;
  *(int64x2_t *)v31 = vzip1q_s64(v7, v8);
  *(int64x2_t *)&v31[16] = v13;
  *(int64x2_t *)&v31[32] = vzip2q_s64(v7, v8);
  *(int64x2_t *)&v31[48] = v10;
  *(int64x2_t *)&v31[64] = v14;
  *(int64x2_t *)&v31[80] = vzip1q_s64(*(int64x2_t *)&v31[80], *(int64x2_t *)&v31[112]);
  *(int64x2_t *)&v31[96] = v15;
  *(_OWORD *)&v31[112] = v16;
  sub_2396157EC((uint64_t)__p, a3);
  v28 = 9;
  strcpy((char *)v27, "extrinsic");
  v17 = (_QWORD *)operator new();
  *v17 = &off_250AE0130;
  v17[1] = v31;
  sub_23961580C((uint64_t)__p, (uint64_t)v27, (uint64_t)v17);
  v26 = 9;
  strcpy((char *)v25, "intrinsic");
  v18 = (_QWORD *)operator new();
  *v18 = &off_250AE0160;
  v18[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v25, (uint64_t)v18);
  if (v26 < 0)
  {
    operator delete(v25[0]);
    if ((v28 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v27[0]);
LABEL_3:
  sub_2395902F0((uint64_t)__p, a2);
  *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = (int)v6;
  v19 = v30;
  if (v30)
  {
    do
    {
      v20 = v19[5];
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v19 = (_QWORD *)*v19;
    }
    while (v19);
    v21 = (void **)v30;
    if (v30)
    {
      do
      {
        v24 = (void **)*v21;
        if (*((char *)v21 + 39) < 0)
          operator delete(v21[2]);
        operator delete(v21);
        v21 = v24;
      }
      while (v24);
    }
  }
  v22 = __p[0];
  __p[0] = 0;
  if (v22)
    operator delete(v22);
  return a2;
}

void sub_2395E1320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E1334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_2395905C0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_2395E1394(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E13B8(uint64_t a1, uint64_t *a2, int a3)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[8];
  uint64_t v13;

  v4 = *(__int128 **)(a1 + 8);
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[3];
  v12[2] = v4[2];
  v12[3] = v7;
  v12[0] = v5;
  v12[1] = v6;
  v8 = v4[4];
  v9 = v4[5];
  v10 = v4[7];
  v12[6] = v4[6];
  v12[7] = v10;
  v12[4] = v8;
  v12[5] = v9;
  if (a3)
    sub_2395DA64C((uint64_t)v12, (uint64_t)&v13, (uint64_t)a2, 0x10uLL);
  else
    sub_2395A34D0((uint64_t)v12, (uint64_t)&v13, a2);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E1440(uint64_t a1, _QWORD *a2, int a3)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[8];
  uint64_t v13[2];

  v4 = *(_OWORD **)(a1 + 8);
  v13[0] = (uint64_t)v12;
  v13[1] = 0;
  sub_2395DB9C8(v13, a2, a3);
  v5 = v12[0];
  v6 = v12[1];
  v7 = v12[3];
  v4[2] = v12[2];
  v4[3] = v7;
  *v4 = v5;
  v4[1] = v6;
  v8 = v12[4];
  v9 = v12[5];
  v10 = v12[7];
  v4[6] = v12[6];
  v4[7] = v10;
  v4[4] = v8;
  v4[5] = v9;
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

void sub_2395E14B8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E14DC(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395DCF0C(*(__int128 **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395E1518()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t *sub_2395E154C(uint64_t a1, uint64_t *a2, char a3)
{
  _OWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  __int128 v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  void *v28;
  void **v30;
  std::bad_alloc *exception;
  std::bad_alloc *v32;
  void *v33[2];
  char v34;
  void *__p[2];
  void *v36;
  __int128 v37;
  __int128 v38;
  char v39;
  void *__src;
  uint64_t v41;
  unsigned int v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t memptr;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V0.2D, #-1.0 }
  v37 = _Q0;
  v38 = _Q0;
  v39 = 1;
  v41 = 8;
  memptr.i64[0] = 0;
  malloc_type_posix_memalign((void **)&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v11 = (_OWORD *)memptr.i64[0];
  __src = (void *)memptr.i64[0];
  if (!memptr.i64[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v32 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v32, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v42 = 5;
  *(_QWORD *)(memptr.i64[0] + 32) = 0;
  *v11 = 0u;
  v11[1] = 0u;
  sub_2396157EC((uint64_t)__p, a3);
  v52.i8[7] = 9;
  strcpy(memptr.i8, "extrinsic");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250AE0130;
  v12[1] = &v43;
  sub_23961580C((uint64_t)__p, (uint64_t)&memptr, (uint64_t)v12);
  v34 = 9;
  strcpy((char *)v33, "intrinsic");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250AE0190;
  v13[1] = &v37;
  sub_23961580C((uint64_t)__p, (uint64_t)v33, (uint64_t)v13);
  if (v34 < 0)
  {
    operator delete(v33[0]);
    if ((v52.i8[7] & 0x80000000) == 0)
      goto LABEL_4;
  }
  else if ((v52.i8[7] & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete((void *)memptr.i64[0]);
LABEL_4:
  if (sub_23959479C((uint64_t)__p, a2))
  {
    v14.i64[0] = vdupq_laneq_s64(v47, 1).u64[0];
    v15 = vzip2q_s64(v43, v45);
    v14.i64[1] = v49.i64[1];
    v16 = vzip1q_s64(v44, v46);
    v17 = vzip2q_s64(v44, v46);
    v18.i64[0] = vdupq_laneq_s64(v48, 1).u64[0];
    v18.i64[1] = v50.i64[1];
    v43 = vzip1q_s64(v43, v45);
    v44 = vzip1q_s64(v47, v49);
    v45 = v15;
    v46 = v14;
    v47 = v16;
    v48 = vzip1q_s64(v48, v50);
    v49 = v17;
    v50 = v18;
    v55 = v16;
    v56 = v48;
    v57 = v17;
    v58 = v18;
    memptr = v43;
    v52 = v44;
    v53 = v15;
    v54 = v14;
    v19 = v38;
    *(_OWORD *)a1 = v37;
    *(_OWORD *)(a1 + 16) = v19;
    *(_BYTE *)(a1 + 32) = v39;
    if (&v37 != (__int128 *)a1)
    {
      v20 = v42;
      sub_23945215C(a1 + 40, v42);
      if ((_DWORD)v20)
        memcpy(*(void **)(a1 + 40), __src, 8 * v20);
      *(_DWORD *)(a1 + 56) = v42;
    }
    v21 = v56;
    *(int64x2_t *)(a1 + 128) = v55;
    *(int64x2_t *)(a1 + 144) = v21;
    v22 = v58;
    *(int64x2_t *)(a1 + 160) = v57;
    *(int64x2_t *)(a1 + 176) = v22;
    v23 = v52;
    *(int64x2_t *)(a1 + 64) = memptr;
    *(int64x2_t *)(a1 + 80) = v23;
    v24 = v54;
    *(int64x2_t *)(a1 + 96) = v53;
    *(int64x2_t *)(a1 + 112) = v24;
  }
  v25 = v36;
  if (v36)
  {
    do
    {
      v26 = v25[5];
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      v25 = (_QWORD *)*v25;
    }
    while (v25);
    v27 = (void **)v36;
    if (v36)
    {
      do
      {
        v30 = (void **)*v27;
        if (*((char *)v27 + 39) < 0)
          operator delete(v27[2]);
        operator delete(v27);
        v27 = v30;
      }
      while (v30);
    }
  }
  v28 = __p[0];
  __p[0] = 0;
  if (v28)
    operator delete(v28);
  free(__src);
  return a2;
}

void sub_2395E187C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  sub_2395905C0((uint64_t)&a13);
  free(a24);
  _Unwind_Resume(a1);
}

void sub_2395E189C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  free(a24);
  _Unwind_Resume(a1);
}

void sub_2395E18B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 169) < 0)
    operator delete(*(void **)(v27 - 192));
  sub_2395905C0((uint64_t)&a16);
  free(a27);
  _Unwind_Resume(a1);
}

void sub_2395E18FC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E1920(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395DCF0C(*(__int128 **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E195C(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395E199C(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395E199C(uint64_t a1, uint64_t *a2, char a3)
{
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  size_t v16;
  void *v17;
  unsigned int v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  void **v25;
  std::bad_alloc *exception;
  std::bad_alloc *v27;
  std::bad_alloc *v28;
  std::bad_alloc *v29;
  void *v30[2];
  char v31;
  void *v32;
  char v33;
  void *__dst[2];
  char v35;
  void *memptr[2];
  void *__p;
  char v38;
  void *__src;
  uint64_t v40;
  unsigned int v41;
  _QWORD v42[2];
  _QWORD v43[2];

  v38 = 1;
  v40 = 8;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v6 = memptr[0];
  __src = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v27 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v27, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v41 = 5;
  *((_QWORD *)memptr[0] + 4) = 0;
  *v6 = 0u;
  v6[1] = 0u;
  sub_2396157EC((uint64_t)memptr, a3);
  v35 = 5;
  strcpy((char *)__dst, "focal");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADFFB0;
  v7[1] = v43;
  sub_23961580C((uint64_t)memptr, (uint64_t)__dst, (uint64_t)v7);
  v33 = 3;
  LODWORD(v32) = 7630960;
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADFFB0;
  v8[1] = v42;
  sub_23961580C((uint64_t)memptr, (uint64_t)&v32, (uint64_t)v8);
  v31 = 10;
  strcpy((char *)v30, "distortion");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250ADFFE0;
  v9[1] = &v38;
  sub_23961580C((uint64_t)memptr, (uint64_t)v30, (uint64_t)v9);
  if ((v31 & 0x80000000) == 0)
  {
    if ((v33 & 0x80000000) == 0)
      goto LABEL_4;
LABEL_23:
    operator delete(v32);
    if ((v35 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
  operator delete(v30[0]);
  if (v33 < 0)
    goto LABEL_23;
LABEL_4:
  if ((v35 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_24:
  operator delete(__dst[0]);
LABEL_5:
  if (sub_23959479C((uint64_t)memptr, a2))
  {
    v10 = v43[0];
    v11 = v43[1];
    v12 = v42[0];
    v13 = v42[1];
    v14 = v38;
    v15 = v41;
    v16 = 8 * v41;
    __dst[0] = 0;
    malloc_type_posix_memalign(__dst, 0x20uLL, (v16 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v17 = __dst[0];
    if (!__dst[0])
    {
      v28 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v29 = std::bad_alloc::bad_alloc(v28);
      __cxa_throw(v29, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if (v15)
      memcpy(__dst[0], __src, v16);
    v18 = v41;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v13;
    *(_BYTE *)(a1 + 32) = v14;
    v19 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v17;
    *(_QWORD *)(a1 + 48) = ((v16 + 31) & 0xFFFFFFFE0) >> 3;
    *(_DWORD *)(a1 + 56) = v18;
    free(v19);
  }
  v20 = __p;
  if (__p)
  {
    do
    {
      v21 = v20[5];
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v20 = (_QWORD *)*v20;
    }
    while (v20);
    v22 = (void **)__p;
    if (__p)
    {
      do
      {
        v25 = (void **)*v22;
        if (*((char *)v22 + 39) < 0)
          operator delete(v22[2]);
        operator delete(v22);
        v22 = v25;
      }
      while (v25);
    }
  }
  v23 = memptr[0];
  memptr[0] = 0;
  if (v23)
    operator delete(v23);
  free(__src);
  return a2;
}

void sub_2395E1CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  sub_2395905C0((uint64_t)&a19);
  free(a26);
  _Unwind_Resume(a1);
}

void sub_2395E1CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  free(a26);
  _Unwind_Resume(a1);
}

void sub_2395E1CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  if (a15 < 0)
  {
    operator delete(a10);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0((uint64_t)&a28);
    free(a35);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_2395E1D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    JUMPOUT(0x2395E1D18);
  JUMPOUT(0x2395E1D10);
}

void sub_2395E1D78(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E1D9C(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395E1E18(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E1DD8(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395E1EE8(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395E1E18(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  else
  {
    std::ostream::operator<<();
  }
  return a2;
}

uint64_t sub_2395E1EE8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (std::istream::get() != 198)
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    return a2;
  }
  else
  {
    MEMORY[0x23B83DD40](a2, a1);
    return a2;
  }
}

void sub_2395E2030(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E2054(uint64_t a1, _QWORD *a2, int a3)
{
  if (a3)
  {
    sub_2395E2134(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 8) + 8, (uint64_t)a2, 2uLL);
  }
  else
  {
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
  }
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E20E4(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5[2];

  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = 0;
  sub_2395E2258(v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395E2134(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 4)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
  }
  return 1;
}

BOOL sub_2395E2258(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23942CB44((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 2;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 1)
            *(_DWORD *)(v9 + 4 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          LODWORD(v40) = 0;
          sub_2395A2AC8((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 1)
            *(_DWORD *)(*a1 + 4 * v22) = (_DWORD)v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                LODWORD(v47.__r_.__value_.__l.__data_) = 0;
                MEMORY[0x23B83DD10](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 1)
                  *(_DWORD *)(*a1 + 4 * v30) = v47.__r_.__value_.__l.__data_;
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395E29F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395E2AA8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E2ACC(uint64_t a1, _QWORD *a2, int a3)
{
  const char *v4;
  _QWORD *v5;
  uint64_t v6;

  if (a3)
  {
    std::ostream::put();
  }
  else
  {
    if (**(_BYTE **)(a1 + 8))
    {
      v4 = "true";
      v5 = a2;
      v6 = 4;
    }
    else
    {
      v4 = "false";
      v5 = a2;
      v6 = 5;
    }
    sub_239458500(v5, (uint64_t)v4, v6);
  }
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E2B58(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395E2B98(*(BOOL **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395E2B98(BOOL *a1, uint64_t *a2, int a3)
{
  int v6;
  _BYTE *p_p;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;

  if (a3)
  {
    *a1 = std::istream::get() != 194;
    return a2;
  }
  __p = 0;
  v13 = 0;
  v14 = 0;
  sub_23955CC24(a2, (uint64_t)&__p);
  v6 = SHIBYTE(v14);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (SHIBYTE(v14) != 5)
    {
      *a1 = 1;
      return a2;
    }
    p_p = &__p;
    v8 = bswap32(__p);
    v9 = v8 >= 0x66616C73;
    if (v8 == 1717660787)
      goto LABEL_6;
LABEL_10:
    if (v9)
      v11 = 1;
    else
      v11 = -1;
    *a1 = v11 != 0;
    if ((v6 & 0x80000000) == 0)
      return a2;
    goto LABEL_17;
  }
  if (v13 == 5)
  {
    p_p = __p;
    v10 = bswap32(*(_DWORD *)__p);
    v9 = v10 >= 0x66616C73;
    if (v10 == 1717660787)
    {
LABEL_6:
      *a1 = p_p[4] != 101;
      if ((v6 & 0x80000000) == 0)
        return a2;
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  *a1 = 1;
LABEL_17:
  operator delete(__p);
  return a2;
}

void sub_2395E2CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395E2CEC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E2D10(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 + 24;
  if (a3)
    sub_2395DA64C(v4, v5, (uint64_t)a2, 3uLL);
  else
    sub_2395A34D0(v4, v5, a2);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E2D68(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5[2];

  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = 0;
  sub_2395DF82C(v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

void sub_2395E2DBC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E2DE0(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E2E60((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395E2E2C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395E2E60(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      v7 = 0;
      v8 = *(uint64_t **)(*(_QWORD *)a1 + 16);
      do
      {
        if (v8)
        {
          v11 = 0;
          v9 = v8;
          do
          {
            v9 = (uint64_t *)*v9;
            v10 = v11 + 1;
          }
          while (v11++ <= 0x7FFFFFFD && v9 != 0);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        sub_2395E2FBC(v8, v9, v10, a2, 1);
        v7 += 0x7FFFFFFFLL;
        v8 = v9;
      }
      while (v7 < *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
  }
  else
  {
    sub_2395E2FBC(*(uint64_t **)(*(_QWORD *)a1 + 16), 0, v5, a2, a3);
  }
  return a2;
}

BOOL sub_2395E2FBC(uint64_t *a1, uint64_t *a2, unint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  void *__p;
  int v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  _DWORD v29[42];

  if (a5)
  {
    std::ostream::put();
    if (a3 >> 31)
    {
      return 0;
    }
    else
    {
      v20 = a3;
      v29[38] = a3;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (a1 == a2)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v15 = *MEMORY[0x24BEDB7F0];
        v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v18 = MEMORY[0x24BEDB848] + 16;
        do
        {
          sub_2394988CC((uint64_t)v24);
          std::ostream::operator<<();
          std::stringbuf::str();
          std::ostream::put();
          v19 = v23;
          if ((v23 & 0x80u) != 0)
            v19 = v22;
          v29[39] = v19;
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          sub_2395E33C4((__int128 *)(a1 + 3), a4, 1);
          if ((char)v23 < 0)
            operator delete(__p);
          v24[0] = v15;
          *(_QWORD *)((char *)v24 + *(_QWORD *)(v15 - 24)) = v16;
          v25 = v17;
          v26 = v18;
          if (v28 < 0)
            operator delete(v27);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v29);
          a1 = (uint64_t *)*a1;
          ++v14;
        }
        while (a1 != a2);
      }
      return v14 == v20;
    }
  }
  else
  {
    std::ostream::put();
    if (a1 != a2)
    {
      v10 = *MEMORY[0x24BEDB7F0];
      v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v13 = MEMORY[0x24BEDB848] + 16;
      do
      {
        sub_2394988CC((uint64_t)v24);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        std::ostream::write();
        std::ostream::put();
        std::ostream::put();
        sub_2395E33C4((__int128 *)(a1 + 3), a4, 0);
        a1 = (uint64_t *)*a1;
        if (a1 != a2)
          std::ostream::put();
        if ((char)v23 < 0)
          operator delete(__p);
        v24[0] = v10;
        *(_QWORD *)((char *)v24 + *(_QWORD *)(v10 - 24)) = v12;
        v25 = v11;
        v26 = v13;
        if (v28 < 0)
          operator delete(v27);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v29);
      }
      while (a1 != a2);
    }
    std::ostream::put();
    return 1;
  }
}

void sub_2395E334C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E3360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E3374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E3388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E339C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395E33C4(__int128 *a1, _QWORD *a2, char a3)
{
  char *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v17;
  void *__p;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  int v26;
  int v27;
  __int16 v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[2];
  _QWORD *v33;

  v5 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  v6 = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = 14;
  sub_2396157EC((uint64_t)v32, a3);
  v30 = *a1;
  v31 = *((_QWORD *)a1 + 2);
  v28 = *((_WORD *)a1 + 12);
  v29 = *((_BYTE *)a1 + 26);
  v7 = *((unsigned __int8 *)a1 + 27);
  v26 = *((unsigned __int8 *)a1 + 28);
  v27 = v7;
  v25 = 3;
  LODWORD(v24) = 7565168;
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE0070;
  v8[1] = &v30;
  sub_23961580C((uint64_t)v32, (uint64_t)&v24, (uint64_t)v8);
  v23 = 3;
  LODWORD(v22) = 7498851;
  v9 = (_QWORD *)operator new();
  *v9 = &off_250AE02B0;
  v9[1] = &v28;
  sub_23961580C((uint64_t)v32, (uint64_t)&v22, (uint64_t)v9);
  v21 = 3;
  LODWORD(v20) = 6777958;
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF420;
  v10[1] = &v27;
  sub_23961580C((uint64_t)v32, (uint64_t)&v20, (uint64_t)v10);
  v19 = 3;
  LODWORD(__p) = 7630195;
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF420;
  v11[1] = &v26;
  sub_23961580C((uint64_t)v32, (uint64_t)&__p, (uint64_t)v11);
  if (v19 < 0)
  {
    operator delete(__p);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_19:
      operator delete(v22);
      if ((v25 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_20;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v20);
  if (v23 < 0)
    goto LABEL_19;
LABEL_4:
  if ((v25 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_20:
  operator delete(v24);
LABEL_5:
  sub_2395902F0((uint64_t)v32, a2);
  *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = (int)v6;
  v12 = v33;
  if (v33)
  {
    do
    {
      v13 = v12[5];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    v14 = (void **)v33;
    if (v33)
    {
      do
      {
        v17 = (void **)*v14;
        if (*((char *)v14 + 39) < 0)
          operator delete(v14[2]);
        operator delete(v14);
        v14 = v17;
      }
      while (v17);
    }
  }
  v15 = (void *)v32[0];
  v32[0] = 0;
  if (v15)
    operator delete(v15);
  return a2;
}

void sub_2395E3658(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395E366C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0(v32 - 80);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a27);
  sub_2395905C0(v32 - 80);
  _Unwind_Resume(a1);
}

void sub_2395E371C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E3740(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned __int8 *v4;
  _DWORD v6[3];

  v4 = *(unsigned __int8 **)(a1 + 8);
  v6[0] = *v4;
  v6[1] = v4[1];
  v6[2] = v4[2];
  sub_2395E3808((uint64_t)v6, (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E37A0(uint64_t a1, _QWORD *a2, int a3)
{
  _BYTE *v4;
  char v5;
  char v6;
  int v8;
  int v9;
  int v10;
  uint64_t v11[2];

  v4 = *(_BYTE **)(a1 + 8);
  v11[0] = (uint64_t)&v8;
  v11[1] = 0;
  sub_2395E38A8(v11, a2, a3);
  v5 = v9;
  v6 = v10;
  *v4 = v8;
  v4[1] = v5;
  v4[2] = v6;
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395E3808(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    sub_2395E2134(a1, a1 + 12, a2, 3uLL);
  }
  else
  {
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
    std::ostream::operator<<();
    std::ostream::put();
  }
  return a2;
}

BOOL sub_2395E38A8(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23942CB44((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 2;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 2)
            *(_DWORD *)(v9 + 4 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          LODWORD(v40) = 0;
          sub_2395A2AC8((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 2)
            *(_DWORD *)(*a1 + 4 * v22) = (_DWORD)v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                LODWORD(v47.__r_.__value_.__l.__data_) = 0;
                MEMORY[0x23B83DD10](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 2)
                  *(_DWORD *)(*a1 + 4 * v30) = v47.__r_.__value_.__l.__data_;
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395E4040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395E40F8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E411C(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395E4178(*(_QWORD ***)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E4158(uint64_t a1, _QWORD *a2)
{
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395E4178(_QWORD **a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  _DWORD **v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = *a1;
  v5 = (*a1)[3];
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    v7 = *a1;
    v8 = (_DWORD *)**a1;
    v9 = (*a1)[1] - (_QWORD)v8;
    if (!v9)
    {
      v10 = 0xFFFFFFFFLL;
      if (!v7[3])
        return a2;
LABEL_30:
      v20 = 0;
      v21 = (_DWORD **)*a1;
      do
      {
        if (v21 == v7)
        {
          v26 = 0;
          v24 = v10;
          while ((_DWORD)v24 != -1)
          {
            while (1)
            {
              v24 = (v24 + 1);
              if ((uint64_t)(v7[1] - *v7) >> 6 <= v24)
                break;
              if (*(_DWORD *)(*v7 + (v24 << 6)) != -1)
                goto LABEL_45;
            }
            LODWORD(v24) = -1;
LABEL_45:
            v24 = v24;
            ++v26;
            v22 = 0x7FFFFFFFLL;
            if (v26 == 0x7FFFFFFF)
              goto LABEL_32;
          }
          v22 = v26;
        }
        else
        {
          v23 = 0;
          v24 = v10;
          do
          {
            if ((_DWORD)v24 != -1)
            {
              LODWORD(v25) = v24;
              while (1)
              {
                v25 = (v25 + 1);
                if ((uint64_t)(v7[1] - *v7) >> 6 <= v25)
                  break;
                if (*(_DWORD *)(*v7 + (v25 << 6)) != -1)
                  goto LABEL_36;
              }
              LODWORD(v25) = -1;
LABEL_36:
              v24 = v25;
            }
            ++v23;
            v22 = 0x7FFFFFFFLL;
          }
          while (v23 != 0x7FFFFFFF);
        }
LABEL_32:
        sub_2395E4448(v10, v7, v24, v7, v22, a2, 1);
        v20 += 0x7FFFFFFFLL;
        v21 = (_DWORD **)*a1;
        v10 = v24;
      }
      while (v20 < (*a1)[3]);
      return a2;
    }
    if (*v8 != -1)
    {
      v10 = 0;
      if (!v7[3])
        return a2;
      goto LABEL_30;
    }
    v16 = v9 >> 6;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 <= v17)
      {
        v10 = 0xFFFFFFFFLL;
        if (!v7[3])
          return a2;
        goto LABEL_30;
      }
      v19 = v8[16 * (unint64_t)v17++];
    }
    while (v19 == -1);
    if (v16 <= v18)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v18;
    if (v7[3])
      goto LABEL_30;
  }
  else
  {
    v11 = (_DWORD *)*v4;
    v12 = (uint64_t)(v4[1] - *v4) >> 6;
    if (v4[1] != *v4 && *v11 == -1)
    {
      LODWORD(v13) = 0;
      while (1)
      {
        v13 = (v13 + 1);
        if (v12 <= v13)
          break;
        if (v11[16 * v13] != -1)
          goto LABEL_10;
      }
      LODWORD(v13) = -1;
    }
    else
    {
      LODWORD(v13) = 0;
    }
LABEL_10:
    if (v12 <= v13)
      v14 = -1;
    else
      v14 = v13;
    sub_2395E4448(v14, v4, -1, v4, v5, a2, a3);
  }
  return a2;
}

uint64_t sub_2395E4448(int a1, _QWORD *a2, int a3, _QWORD *a4, unint64_t a5, _QWORD *a6, int a7)
{
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *__p;
  int v29;
  unsigned __int8 v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  _DWORD v36[42];

  LODWORD(v10) = a1;
  if (!a7)
  {
    std::ostream::put();
    v26 = a3;
    if ((_DWORD)v10 == a3 && a2 == a4)
    {
LABEL_6:
      std::ostream::put();
      return 1;
    }
    v14 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v17 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      sub_2394988CC((uint64_t)v31);
      std::ostream::operator<<();
      std::stringbuf::str();
      std::ostream::put();
      std::ostream::write();
      std::ostream::put();
      std::ostream::put();
      sub_2395E4958((uint64_t *)(*a2 + ((unint64_t)v10 << 6) + 8), a6, 0);
      if ((_DWORD)v10 == -1)
      {
        LODWORD(v10) = -1;
LABEL_17:
        v18 = (_DWORD)v10 == v26 && a2 == a4;
        v19 = !v18;
        if (v18)
          goto LABEL_34;
      }
      else
      {
        while (1)
        {
          v10 = (v10 + 1);
          if ((uint64_t)(a2[1] - *a2) >> 6 <= v10)
            break;
          if (*(_DWORD *)(*a2 + (v10 << 6)) != -1)
            goto LABEL_17;
        }
        LODWORD(v10) = -1;
        v20 = v26 == -1 && a2 == a4;
        v19 = !v20;
        if (v20)
          goto LABEL_34;
      }
      std::ostream::put();
LABEL_34:
      if ((char)v30 < 0)
        operator delete(__p);
      v31[0] = v14;
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v14 - 24)) = v16;
      v32 = v15;
      v33 = v17;
      if (v35 < 0)
        operator delete(v34);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v36);
      if ((v19 & 1) == 0)
        goto LABEL_6;
    }
  }
  std::ostream::put();
  if (a5 >> 31)
    return 0;
  v36[38] = a5;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if ((_DWORD)v10 != a3 || a2 != a4)
  {
    v13 = 0;
    v21 = *MEMORY[0x24BEDB7F0];
    v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v22 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      while (1)
      {
        sub_2394988CC((uint64_t)v31);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        v23 = v30;
        if ((v30 & 0x80u) != 0)
          v23 = v29;
        v36[39] = v23;
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        sub_2395E4958((uint64_t *)(*a2 + ((unint64_t)v10 << 6) + 8), a6, 1);
        if ((char)v30 < 0)
          operator delete(__p);
        v31[0] = v21;
        *(_QWORD *)((char *)v31 + *(_QWORD *)(v21 - 24)) = v25;
        v32 = v24;
        v33 = v22;
        if (v35 < 0)
          operator delete(v34);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v36);
        if ((_DWORD)v10 == -1)
          break;
        while (1)
        {
          v10 = (v10 + 1);
          if ((uint64_t)(a2[1] - *a2) >> 6 <= v10)
            break;
          if (*(_DWORD *)(*a2 + (v10 << 6)) != -1)
            goto LABEL_50;
        }
        LODWORD(v10) = -1;
        ++v13;
        if (a3 == -1)
          goto LABEL_53;
      }
      LODWORD(v10) = -1;
LABEL_50:
      ++v13;
      if ((_DWORD)v10 == a3)
      {
LABEL_53:
        if (a2 == a4)
          return v13 == a5;
      }
    }
  }
  v13 = 0;
  return v13 == a5;
}

void sub_2395E48E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E48F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E4908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E4930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395E4958(uint64_t *a1, _QWORD *a2, char a3)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void **v19;
  void *__p;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26[2];
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  int v34;
  int v35;
  __int16 v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  _QWORD *v43;

  sub_2396157EC((uint64_t)v42, a3);
  v5 = *a1;
  v40 = a1[1];
  v41 = v5;
  v39 = *((int *)a1 + 8);
  v38 = *((_OWORD *)a1 + 1);
  v36 = *((_WORD *)a1 + 24);
  v37 = *((_BYTE *)a1 + 50);
  v6 = *((unsigned __int8 *)a1 + 51);
  v34 = *((unsigned __int8 *)a1 + 52);
  v35 = v6;
  v33 = 3;
  LODWORD(v32) = 6580596;
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADFF20;
  v7[1] = &v41;
  sub_23961580C((uint64_t)v42, (uint64_t)&v32, (uint64_t)v7);
  v31 = 3;
  LODWORD(v30) = 6580585;
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADFF20;
  v8[1] = &v40;
  sub_23961580C((uint64_t)v42, (uint64_t)&v30, (uint64_t)v8);
  v29 = 3;
  LODWORD(v28) = 6580582;
  v9 = (_QWORD *)operator new();
  *v9 = &off_250AE01C0;
  v9[1] = &v39;
  sub_23961580C((uint64_t)v42, (uint64_t)&v28, (uint64_t)v9);
  v27 = 4;
  strcpy((char *)v26, "proj");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADFFB0;
  v10[1] = &v38;
  sub_23961580C((uint64_t)v42, (uint64_t)v26, (uint64_t)v10);
  v25 = 3;
  LODWORD(v24) = 7498851;
  v11 = (_QWORD *)operator new();
  *v11 = &off_250AE02B0;
  v11[1] = &v36;
  sub_23961580C((uint64_t)v42, (uint64_t)&v24, (uint64_t)v11);
  v23 = 3;
  LODWORD(v22) = 6777958;
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF420;
  v12[1] = &v35;
  sub_23961580C((uint64_t)v42, (uint64_t)&v22, (uint64_t)v12);
  v21 = 3;
  LODWORD(__p) = 7630195;
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF420;
  v13[1] = &v34;
  sub_23961580C((uint64_t)v42, (uint64_t)&__p, (uint64_t)v13);
  if (v21 < 0)
  {
    operator delete(__p);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v25 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v22);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v27 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v24);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v29 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v26[0]);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v31 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_25:
    operator delete(v30);
    if ((v33 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_24:
  operator delete(v28);
  if (v31 < 0)
    goto LABEL_25;
LABEL_7:
  if ((v33 & 0x80000000) == 0)
    goto LABEL_8;
LABEL_26:
  operator delete(v32);
LABEL_8:
  sub_2395902F0((uint64_t)v42, a2);
  v14 = v43;
  if (v43)
  {
    do
    {
      v15 = v14[5];
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      v14 = (_QWORD *)*v14;
    }
    while (v14);
    v16 = (void **)v43;
    if (v43)
    {
      do
      {
        v19 = (void **)*v16;
        if (*((char *)v16 + 39) < 0)
          operator delete(v16[2]);
        operator delete(v16);
        v16 = v19;
      }
      while (v19);
    }
  }
  v17 = (void *)v42[0];
  v42[0] = 0;
  if (v17)
    operator delete(v17);
  return a2;
}

void sub_2395E4CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395E4D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a34);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a51 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a40);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_8:
    sub_2395905C0(v51 - 80);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(a46);
  sub_2395905C0(v51 - 80);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395E4E28(uint64_t *a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  uint64_t *v23;
  _QWORD v24[2];
  _QWORD *v25;

  sub_2396157EC((uint64_t)v24, a3);
  v23 = a1;
  v22 = 6;
  strcpy((char *)v21, "config");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0310;
  v5[1] = a1 + 14;
  sub_23961580C((uint64_t)v24, (uint64_t)v21, (uint64_t)v5);
  v20 = 6;
  strcpy((char *)v19, "images");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE03A0;
  v6[1] = a1 + 9;
  sub_23961580C((uint64_t)v24, (uint64_t)v19, (uint64_t)v6);
  v18 = 6;
  strcpy((char *)v17, "tracks");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE0400;
  v7[1] = a1 + 4;
  sub_23961580C((uint64_t)v24, (uint64_t)v17, (uint64_t)v7);
  v16 = 11;
  strcpy((char *)__p, "projections");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE0430;
  v8[1] = &v23;
  sub_23961580C((uint64_t)v24, (uint64_t)__p, (uint64_t)v8);
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_19:
      operator delete(v19[0]);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_20;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17[0]);
  if (v20 < 0)
    goto LABEL_19;
LABEL_4:
  if ((v22 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_20:
  operator delete(v21[0]);
LABEL_5:
  sub_23959479C((uint64_t)v24, a2);
  sub_2395E5170(a1);
  v9 = v25;
  if (v25)
  {
    do
    {
      v10 = v9[5];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = (void **)v25;
    if (v25)
    {
      do
      {
        v14 = (void **)*v11;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v14;
      }
      while (v14);
    }
  }
  v12 = (void *)v24[0];
  v24[0] = 0;
  if (v12)
    operator delete(v12);
  return a2;
}

void sub_2395E50B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395E50C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0(v33 - 80);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a28);
  sub_2395905C0(v33 - 80);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395E5170(uint64_t *result)
{
  int8x8_t *v1;
  _DWORD *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  uint8x8_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  __int32 v29;
  unsigned int v30;
  unsigned int *v31;

  v1 = (int8x8_t *)result;
  v2 = (_DWORD *)*result;
  v3 = (result[1] - *result) >> 6;
  if (result[1] != *result && *v2 == -1)
  {
    LODWORD(v5) = 0;
    while (1)
    {
      v5 = (v5 + 1);
      if (v3 <= v5)
        break;
      if (v2[16 * v5] != -1)
      {
        if (v3 <= v5)
          v4 = -1;
        else
          v4 = v5;
        if (v4 == -1)
          return result;
        goto LABEL_15;
      }
    }
  }
  else
  {
    if (v3)
      v4 = 0;
    else
      v4 = -1;
    if (v4 != -1)
    {
LABEL_15:
      LODWORD(v6) = v4;
      do
      {
        v7 = *(_QWORD *)v1 + ((unint64_t)v4 << 6);
        v8 = *(_QWORD *)(v7 + 16);
        v9 = v1[10];
        if (v9)
        {
          v10 = *(_QWORD *)(v7 + 16);
          v11 = (uint8x8_t)vcnt_s8(v9);
          v11.i16[0] = vaddlv_u8(v11);
          if (v11.u32[0] > 1uLL)
          {
            v12 = *(_QWORD *)(v7 + 16);
            if (*(_QWORD *)&v9 <= v10)
              v12 = v10 % *(_QWORD *)&v9;
          }
          else
          {
            v12 = (v9.i32[0] - 1) & v10;
          }
          v13 = *(uint64_t **)(*(_QWORD *)&v1[9] + 8 * v12);
          if (v13)
          {
            v13 = (uint64_t *)*v13;
            if (v13)
            {
              if (v11.u32[0] < 2uLL)
              {
                v14 = *(_QWORD *)&v9 - 1;
                while (1)
                {
                  v16 = v13[1];
                  if (v16 == v10)
                  {
                    if (*((_DWORD *)v13 + 4) == v8)
                      goto LABEL_40;
                  }
                  else if ((v16 & v14) != v12)
                  {
                    goto LABEL_39;
                  }
                  v13 = (uint64_t *)*v13;
                  if (!v13)
                    goto LABEL_40;
                }
              }
              do
              {
                v15 = v13[1];
                if (v15 == v10)
                {
                  if (*((_DWORD *)v13 + 4) == v8)
                    break;
                }
                else
                {
                  if (v15 >= *(_QWORD *)&v9)
                    v15 %= *(_QWORD *)&v9;
                  if (v15 != v12)
                    goto LABEL_39;
                }
                v13 = (uint64_t *)*v13;
              }
              while (v13);
            }
          }
        }
        else
        {
LABEL_39:
          v13 = 0;
        }
LABEL_40:
        v17 = *(_QWORD *)(v7 + 8);
        v18 = v1[5];
        if (!*(_QWORD *)&v18)
          goto LABEL_60;
        v19 = *(_QWORD *)(v7 + 8);
        v20 = (uint8x8_t)vcnt_s8(v18);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          v21 = *(_QWORD *)(v7 + 8);
          if (*(_QWORD *)&v18 <= v19)
            v21 = v19 % *(_QWORD *)&v18;
        }
        else
        {
          v21 = (v18.i32[0] - 1) & v19;
        }
        v22 = *(uint64_t ***)(*(_QWORD *)&v1[4] + 8 * v21);
        if (v22)
        {
          v23 = *v22;
          if (*v22)
          {
            if (v20.u32[0] < 2uLL)
            {
              v24 = *(_QWORD *)&v18 - 1;
              while (1)
              {
                v26 = v23[1];
                if (v26 == v19)
                {
                  if (*((_DWORD *)v23 + 4) == (_DWORD)v17)
                    goto LABEL_61;
                }
                else if ((v26 & v24) != v21)
                {
                  goto LABEL_60;
                }
                v23 = (uint64_t *)*v23;
                if (!v23)
                  goto LABEL_61;
              }
            }
            do
            {
              v25 = v23[1];
              if (v25 == v19)
              {
                if (*((_DWORD *)v23 + 4) == (_DWORD)v17)
                  break;
              }
              else
              {
                if (v25 >= *(_QWORD *)&v18)
                  v25 %= *(_QWORD *)&v18;
                if (v25 != v21)
                  goto LABEL_60;
              }
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
        }
        else
        {
LABEL_60:
          v23 = 0;
        }
LABEL_61:
        if (!v13)
          sub_239EC0E50();
        if (!v23)
          sub_239EC0E80();
        v27 = *(_DWORD *)v7;
        v30 = *(_QWORD *)(v7 + 8);
        v31 = &v30;
        *((_DWORD *)sub_2395EC77C((uint64_t)(v13 + 54), &v30, (uint64_t)&unk_239EC6E98, &v31) + 5) = v27;
        v28 = *(_DWORD *)v7;
        v30 = *(_QWORD *)(v7 + 16);
        v31 = &v30;
        result = sub_2395EC77C((uint64_t)(v23 + 14), &v30, (uint64_t)&unk_239EC6E98, &v31);
        *((_DWORD *)result + 5) = v28;
        v29 = *(_DWORD *)v7;
        if (v1[56].i32[0] > *(_DWORD *)v7)
          v29 = v1[56].i32[0];
        v1[56].i32[0] = v29;
        if ((_DWORD)v6 != -1)
        {
          while (1)
          {
            v6 = (v6 + 1);
            if ((uint64_t)(*(_QWORD *)&v1[1] - *(_QWORD *)v1) >> 6 <= v6)
              break;
            if (*(_DWORD *)(*(_QWORD *)v1 + (v6 << 6)) != -1)
              goto LABEL_17;
          }
          LODWORD(v6) = -1;
LABEL_17:
          v4 = v6;
        }
        LODWORD(v6) = v4;
      }
      while (v4 != -1);
    }
  }
  return result;
}

void sub_2395E54E0(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E5504(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395D91F8(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E5540(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395E5580(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395E5580(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  void **v15;
  void **v16;
  void *v17;
  void **v19;
  void *v20[4];
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *__p[2];
  void *v26;
  void *v27[2];
  void *v28[2];
  int v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v33 = 0;
  v34 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v30 = 0u;
  v31 = 0u;
  v32 = 1065353216;
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 1065353216;
  sub_2396157EC((uint64_t)__p, a3);
  v24 = 10;
  strcpy((char *)v23, "camera_rig");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADFEF0;
  v5[1] = &v33;
  sub_23961580C((uint64_t)__p, (uint64_t)v23, (uint64_t)v5);
  v22 = 13;
  strcpy((char *)v21, "intrinsic_map");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE0340;
  v6[1] = &v30;
  sub_23961580C((uint64_t)__p, (uint64_t)v21, (uint64_t)v6);
  HIBYTE(v20[2]) = 20;
  strcpy((char *)v20, "object_transform_map");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE0370;
  v7[1] = v27;
  sub_23961580C((uint64_t)__p, (uint64_t)v20, (uint64_t)v7);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    if ((v22 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_34:
    operator delete(v21[0]);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_35;
  }
  operator delete(v20[0]);
  if (v22 < 0)
    goto LABEL_34;
LABEL_3:
  if ((v24 & 0x80000000) == 0)
    goto LABEL_4;
LABEL_35:
  operator delete(v23[0]);
LABEL_4:
  if (sub_23959479C((uint64_t)__p, a2))
  {
    *(_QWORD *)a1 = v33;
    *(_DWORD *)(a1 + 8) = v34;
    if (&v33 != (uint64_t *)a1)
      sub_2395DC70C((_QWORD *)(a1 + 16), v35, v36, (v36 - v35) >> 7);
    if ((__int128 *)(a1 + 40) != &v30)
    {
      *(_DWORD *)(a1 + 72) = v32;
      sub_2395E7688((_QWORD *)(a1 + 40), (uint64_t *)v31, 0);
    }
    if ((void **)(a1 + 80) != v27)
    {
      *(_DWORD *)(a1 + 112) = v29;
      sub_2395E7954((_QWORD *)(a1 + 80), (uint64_t *)v28[0], 0);
    }
  }
  v8 = v26;
  if (v26)
  {
    do
    {
      v9 = v8[5];
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v8 = (_QWORD *)*v8;
    }
    while (v8);
    v10 = (void **)v26;
    if (v26)
    {
      do
      {
        v19 = (void **)*v10;
        if (*((char *)v10 + 39) < 0)
          operator delete(v10[2]);
        operator delete(v10);
        v10 = v19;
      }
      while (v19);
    }
  }
  v11 = __p[0];
  __p[0] = 0;
  if (v11)
    operator delete(v11);
  v12 = v28[0];
  if (v28[0])
  {
    do
    {
      v13 = (_QWORD *)*v12;
      operator delete(v12);
      v12 = v13;
    }
    while (v13);
  }
  v14 = v27[0];
  v27[0] = 0;
  if (v14)
    operator delete(v14);
  v15 = (void **)v31;
  if ((_QWORD)v31)
  {
    do
    {
      v16 = (void **)*v15;
      free(v15[8]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
  v17 = (void *)v30;
  *(_QWORD *)&v30 = 0;
  if (v17)
    operator delete(v17);
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  return a2;
}

void sub_2395E58A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  void *v36;

  sub_239420950((uint64_t)&a34);
  sub_239557A4C(v34 - 112);
  v36 = *(void **)(v34 - 56);
  if (v36)
  {
    *(_QWORD *)(v34 - 48) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void sub_2395E591C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x2395E5928);
  JUMPOUT(0x2395E58C8);
}

void sub_2395E593C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    JUMPOUT(0x2395E58D8);
  JUMPOUT(0x2395E58D0);
}

void sub_2395E5950(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E5974(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395DC9A8((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E59C0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E5A10(&v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395E5A10(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395E5B10(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395E5B10(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395E5B10(uint64_t *a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  char i;
  unsigned int v35;
  int v36;
  int v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  __int128 v42;
  uint64_t v43;
  int j;
  unsigned int v45;
  int v46;
  int v47;
  std::bad_alloc *exception;
  std::bad_alloc *v50;
  std::bad_alloc *v51;
  std::bad_alloc *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unsigned int v61[3];
  unsigned int v62;
  __int128 v63;
  __int128 v64;
  char v65;
  void *__src;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69[2];
  uint64_t v70;
  uint64_t v71;
  void *__p;
  char v73;
  _BYTE v74[152];
  std::string v75;
  void *memptr[2];

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (!*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      if (!v5)
        return 1;
      v6 = v5;
      v7 = *MEMORY[0x24BEDB7F0];
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v56 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      __asm { FMOV            V0.2D, #-1.0 }
      v59 = _Q0;
      v14 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        memset(&v75, 0, sizeof(v75));
        v15 = std::istream::get();
        v16 = sub_2396162D4((uint64_t)a2, v15);
        if (v16)
        {
          std::string::resize(&v75, v16, 0);
          std::istream::read();
        }
        else if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        {
          *v75.__r_.__value_.__l.__data_ = 0;
          v75.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v75.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v75.__r_.__value_.__s + 23) = 0;
        }
        v61[0] = 0;
        sub_239593804((uint64_t)v69, (uint64_t)&v75, 24);
        MEMORY[0x23B83DD10](v69, v61);
        v63 = v59;
        v64 = v59;
        v65 = 1;
        __src = 0;
        v67 = 8;
        memptr[0] = 0;
        malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
        v17 = memptr[0];
        __src = memptr[0];
        if (!memptr[0])
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v50 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v50, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v68 = 5;
        *((_QWORD *)memptr[0] + 4) = 0;
        *v17 = 0u;
        v17[1] = 0u;
        sub_2395E199C((uint64_t)&v63, a2, 1);
        v18 = *a1;
        memptr[0] = v61;
        v19 = sub_2395E6410(v18, v61, (uint64_t)&unk_239EC6E98, (_DWORD **)memptr);
        v20 = v19;
        v21 = v64;
        *(_OWORD *)(v19 + 3) = v63;
        *(_OWORD *)(v19 + 5) = v21;
        *((_BYTE *)v19 + 56) = v65;
        if (v19 + 3 != (uint64_t *)&v63)
        {
          v22 = v68;
          sub_23945215C((uint64_t)(v19 + 8), v68);
          if ((_DWORD)v22)
            memcpy((void *)v20[8], __src, 8 * v22);
          *((_DWORD *)v20 + 20) = v68;
        }
        v23 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
        free(__src);
        v69[0] = v7;
        *(uint64_t *)((char *)v69 + *(_QWORD *)(v7 - 24)) = v56;
        v70 = v8;
        v71 = v14;
        if (v73 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v74);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        if (v23)
          break;
        if (!--v6)
          return 1;
      }
    }
    return 0;
  }
  v24 = a2 + 4;
  v25 = MEMORY[0x24BDAC740];
  while (1)
  {
    v26 = std::istream::peek();
    if (v26 <= 0x7F)
      break;
    v27 = __maskrune(v26, 0x4000uLL);
    v28 = *(_QWORD *)(*a2 - 24);
    if (!v27)
      goto LABEL_29;
LABEL_27:
    if (!*(_DWORD *)((char *)v24 + v28))
      std::istream::get();
  }
  v28 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v25 + 4 * v26 + 60) & 0x4000) != 0)
    goto LABEL_27;
LABEL_29:
  if ((*((_BYTE *)a2 + v28 + 32) & 2) != 0)
    return 1;
  v62 = 0;
  memset(&v75, 0, sizeof(v75));
  if (std::istream::get() != 123)
    goto LABEL_85;
  while (2)
  {
    v29 = std::istream::peek();
    if (v29 > 0x7F)
    {
      v30 = __maskrune(v29, 0x4000uLL);
      v31 = *(_QWORD *)(*a2 - 24);
      if (!v30)
        break;
      goto LABEL_35;
    }
    v31 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v25 + 4 * v29 + 60) & 0x4000) != 0)
    {
LABEL_35:
      if (!*(_DWORD *)((char *)v24 + v31))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v31 + 32) & 2) != 0)
    goto LABEL_85;
  v32 = std::istream::peek() == 125;
  v57 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v58 = *MEMORY[0x24BEDB7F0];
  v55 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  __asm { FMOV            V0.2D, #-1.0 }
  v53 = _Q0;
  v54 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v24 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v32)
  {
    if (!sub_239595A48((uint64_t)&v75, a2))
      goto LABEL_85;
    sub_2395E6330((uint64_t)&v62, (uint64_t)&v75);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v24 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v24 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_85;
LABEL_48:
    std::istream::get();
    while (1)
    {
      v35 = std::istream::peek();
      if (v35 > 0x7F)
      {
        v36 = __maskrune(v35, 0x4000uLL);
        v37 = *(_DWORD *)((char *)v24 + *(_QWORD *)(*a2 - 24));
        if (!v36)
          break;
        goto LABEL_53;
      }
      v37 = *(_DWORD *)((char *)v24 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v25 + 4 * v35 + 60) & 0x4000) == 0)
        break;
LABEL_53:
      if (!v37)
        goto LABEL_48;
    }
    if ((v37 & 2) == 0)
    {
      sub_2394988CC((uint64_t)v69);
      *(_QWORD *)v61 = &v70;
      if (sub_239596128(a2))
      {
        v63 = v53;
        v64 = v53;
        v65 = 1;
        __src = 0;
        v67 = 8;
        memptr[0] = 0;
        malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
        v38 = memptr[0];
        __src = memptr[0];
        if (!memptr[0])
        {
          v51 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v52 = std::bad_alloc::bad_alloc(v51);
          __cxa_throw(v52, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
        }
        v68 = 5;
        *((_QWORD *)memptr[0] + 4) = 0;
        *v38 = 0u;
        v38[1] = 0u;
        sub_2395E199C((uint64_t)&v63, v69, 0);
        v39 = *a1;
        memptr[0] = &v62;
        v40 = sub_2395E6410(v39, &v62, (uint64_t)&unk_239EC6E98, (_DWORD **)memptr);
        v41 = v40;
        v42 = v64;
        *(_OWORD *)(v40 + 3) = v63;
        *(_OWORD *)(v40 + 5) = v42;
        *((_BYTE *)v40 + 56) = v65;
        if (v40 + 3 != (uint64_t *)&v63)
        {
          v43 = v68;
          sub_23945215C((uint64_t)(v40 + 8), v68);
          if ((_DWORD)v43)
            memcpy((void *)v41[8], __src, 8 * v43);
          *((_DWORD *)v41 + 20) = v68;
        }
        for (j = std::istream::peek(); ; j = std::istream::peek())
        {
          v45 = j << 24;
          if (j << 24 == 738197504)
            goto LABEL_73;
          if (v45 == 2097152000)
          {
            v32 = 1;
            goto LABEL_75;
          }
          if (v45 <= 0x7F000000)
          {
            if ((*(_DWORD *)(v25 + 4 * (char)j + 60) & 0x4000) == 0)
              break;
          }
          else if (!__maskrune((char)j, 0x4000uLL))
          {
            break;
          }
          if ((*((_BYTE *)v24 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            break;
          std::istream::get();
        }
        if (v45 == 738197504)
        {
LABEL_73:
          std::istream::get();
          v32 = 0;
LABEL_75:
          v46 = 0;
          goto LABEL_76;
        }
        v32 = 0;
        v46 = 1;
LABEL_76:
        free(__src);
      }
      else
      {
        v32 = 0;
        v46 = 1;
      }
      v69[0] = v58;
      *(uint64_t *)((char *)v69 + *(_QWORD *)(v58 - 24)) = v57;
      v70 = v55;
      v71 = v54;
      if (v73 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v74);
      if (!v46)
        continue;
    }
    goto LABEL_85;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_85:
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    return 0;
  }
  v47 = std::istream::get();
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  return v47 == 125;
}

void sub_2395E62A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  sub_239498ABC((uint64_t)&a32);
  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_2395E6330(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_2394988CC((uint64_t)v9);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  sub_239458500(v10, v5, v6);
  MEMORY[0x23B83DD10](v9, a1);
  v9[0] = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B83E250](&v12);
}

void sub_2395E63FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395E6410(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (uint64_t *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v4)
              break;
          }
          result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_2395E673C(a1, *a2, a4, (uint64_t)v25);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v20)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v20)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v20 < 3uLL || (v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < *(_QWORD *)&v20)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v4 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v4 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v24 >= v7)
          v24 %= v7;
      }
      else
      {
        v24 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25[0];
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v25[0] = *v15;
  *v15 = v25[0];
LABEL_61:
  result = (uint64_t *)v25[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2395E6728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23955C23C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2395E673C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v14;
  double result;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  void *memptr;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  *((_DWORD *)v8 + 4) = **a3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v8 + 24) = _Q0;
  *(_OWORD *)(v8 + 40) = _Q0;
  v8[56] = 1;
  *((_QWORD *)v8 + 8) = 0;
  *((_QWORD *)v8 + 9) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v14 = memptr;
  *((_QWORD *)v8 + 8) = memptr;
  if (!v14)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v17 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v17, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  *((_DWORD *)v8 + 20) = 5;
  result = 0.0;
  v14[4] = 0;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2395E6824(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23955C23C(v1);
  _Unwind_Resume(a1);
}

void sub_2395E683C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E6860(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395DE40C((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E68AC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E68FC(&v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395E68FC(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395E69FC(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395E69FC(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395E69FC(uint64_t *a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char i;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int j;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53[3];
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63[2];
  uint64_t v64;
  uint64_t v65;
  void *__p;
  char v67;
  _BYTE v68[152];
  std::string v69;
  _DWORD *v70[2];

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (!*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      if (!v5)
        return 1;
      v6 = v5;
      v7 = *MEMORY[0x24BEDB7F0];
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v10 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        memset(&v69, 0, sizeof(v69));
        v11 = std::istream::get();
        v12 = sub_2396162D4((uint64_t)a2, v11);
        if (v12)
        {
          std::string::resize(&v69, v12, 0);
          std::istream::read();
        }
        else if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        {
          *v69.__r_.__value_.__l.__data_ = 0;
          v69.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v69.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v69.__r_.__value_.__s + 23) = 0;
        }
        v53[0] = 0;
        sub_239593804((uint64_t)v63, (uint64_t)&v69, 24);
        MEMORY[0x23B83DD10](v63, v53);
        v59 = xmmword_239EC7740;
        v60 = unk_239EC7750;
        v61 = xmmword_239EC7760;
        v62 = xmmword_239EC7770;
        v55 = xmmword_239EC7700;
        v56 = *(_OWORD *)algn_239EC7710;
        v57 = xmmword_239EC7720;
        v58 = unk_239EC7730;
        sub_2395E70C4((uint64_t)&v55, a2, 1);
        v13 = *a1;
        v70[0] = v53;
        v14 = sub_2395E734C(v13, v53, (uint64_t)&unk_239EC6E98, v70);
        v16 = v57;
        v15 = v58;
        v17 = v56;
        *(_OWORD *)(v14 + 24) = v55;
        *(_OWORD *)(v14 + 40) = v17;
        v19 = v61;
        v18 = v62;
        v20 = v60;
        *(_OWORD *)(v14 + 88) = v59;
        *(_OWORD *)(v14 + 104) = v20;
        *(_OWORD *)(v14 + 120) = v19;
        *(_OWORD *)(v14 + 136) = v18;
        *(_OWORD *)(v14 + 56) = v16;
        *(_OWORD *)(v14 + 72) = v15;
        v21 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
        v63[0] = v7;
        *(uint64_t *)((char *)v63 + *(_QWORD *)(v7 - 24)) = v8;
        v64 = v9;
        v65 = v10;
        if (v67 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v68);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (v21)
          break;
        if (!--v6)
          return 1;
      }
    }
    return 0;
  }
  v22 = a2 + 4;
  v23 = MEMORY[0x24BDAC740];
  while (1)
  {
    v24 = std::istream::peek();
    if (v24 <= 0x7F)
      break;
    v25 = __maskrune(v24, 0x4000uLL);
    v26 = *(_QWORD *)(*a2 - 24);
    if (!v25)
      goto LABEL_24;
LABEL_22:
    if (!*(_DWORD *)((char *)v22 + v26))
      std::istream::get();
  }
  v26 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v23 + 4 * v24 + 60) & 0x4000) != 0)
    goto LABEL_22;
LABEL_24:
  if ((*((_BYTE *)a2 + v26 + 32) & 2) != 0)
    return 1;
  v54 = 0;
  memset(&v69, 0, sizeof(v69));
  if (std::istream::get() != 123)
    goto LABEL_73;
  while (2)
  {
    v27 = std::istream::peek();
    if (v27 > 0x7F)
    {
      v28 = __maskrune(v27, 0x4000uLL);
      v29 = *(_QWORD *)(*a2 - 24);
      if (!v28)
        break;
      goto LABEL_30;
    }
    v29 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v23 + 4 * v27 + 60) & 0x4000) != 0)
    {
LABEL_30:
      if (!*(_DWORD *)((char *)v22 + v29))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v29 + 32) & 2) != 0)
    goto LABEL_73;
  v30 = std::istream::peek() == 125;
  v31 = *MEMORY[0x24BEDB7F0];
  v50 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v51 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v49 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v22 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v30)
  {
    if (!sub_239595A48((uint64_t)&v69, a2))
      goto LABEL_73;
    sub_2395E6330((uint64_t)&v54, (uint64_t)&v69);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v22 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v22 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_73;
LABEL_43:
    std::istream::get();
    while (1)
    {
      v33 = std::istream::peek();
      if (v33 > 0x7F)
      {
        v34 = __maskrune(v33, 0x4000uLL);
        v35 = *(_DWORD *)((char *)v22 + *(_QWORD *)(*a2 - 24));
        if (!v34)
          break;
        goto LABEL_48;
      }
      v35 = *(_DWORD *)((char *)v22 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v23 + 4 * v33 + 60) & 0x4000) == 0)
        break;
LABEL_48:
      if (!v35)
        goto LABEL_43;
    }
    if ((v35 & 2) == 0)
    {
      sub_2394988CC((uint64_t)v63);
      *(_QWORD *)v53 = &v64;
      if (sub_239596128(a2))
      {
        v59 = xmmword_239EC7740;
        v60 = unk_239EC7750;
        v61 = xmmword_239EC7760;
        v62 = xmmword_239EC7770;
        v55 = xmmword_239EC7700;
        v56 = *(_OWORD *)algn_239EC7710;
        v57 = xmmword_239EC7720;
        v58 = unk_239EC7730;
        sub_2395E70C4((uint64_t)&v55, v63, 0);
        v36 = *a1;
        v70[0] = &v54;
        v37 = sub_2395E734C(v36, &v54, (uint64_t)&unk_239EC6E98, v70);
        v39 = v57;
        v38 = v58;
        v40 = v56;
        *(_OWORD *)(v37 + 24) = v55;
        *(_OWORD *)(v37 + 40) = v40;
        v42 = v61;
        v41 = v62;
        v43 = v60;
        *(_OWORD *)(v37 + 88) = v59;
        *(_OWORD *)(v37 + 104) = v43;
        *(_OWORD *)(v37 + 120) = v42;
        *(_OWORD *)(v37 + 136) = v41;
        *(_OWORD *)(v37 + 56) = v39;
        *(_OWORD *)(v37 + 72) = v38;
        for (j = std::istream::peek(); ; j = std::istream::peek())
        {
          v45 = j << 24;
          if (j << 24 == 738197504)
            goto LABEL_62;
          if (v45 == 2097152000)
            break;
          if (v45 <= 0x7F000000)
          {
            if ((*(_DWORD *)(v23 + 4 * (char)j + 60) & 0x4000) == 0)
              goto LABEL_61;
          }
          else if (!__maskrune((char)j, 0x4000uLL))
          {
            goto LABEL_61;
          }
          if ((*((_BYTE *)v22 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
          {
LABEL_61:
            if (v45 != 738197504)
              goto LABEL_63;
LABEL_62:
            std::istream::get();
            v30 = 0;
            goto LABEL_65;
          }
          std::istream::get();
        }
        v30 = 1;
LABEL_65:
        v46 = 0;
      }
      else
      {
LABEL_63:
        v30 = 0;
        v46 = 1;
      }
      v63[0] = v31;
      *(uint64_t *)((char *)v63 + *(_QWORD *)(v31 - 24)) = v51;
      v64 = v50;
      v65 = v49;
      if (v67 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v68);
      if (!v46)
        continue;
    }
    goto LABEL_73;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_73:
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    return 0;
  }
  v47 = std::istream::get();
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  return v47 == 125;
}

void sub_2395E706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 105) < 0)
    operator delete(*(void **)(v36 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2395E70C4(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;
  int64x2_t v8;
  uint64_t v9;
  __int128 v10;
  int64x2_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  void **v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *__p[2];
  void *v31;
  __int128 v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;

  sub_2396157EC((uint64_t)__p, a3);
  v29 = 8;
  strcpy((char *)v28, "rotation");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0040;
  v5[1] = &v34;
  sub_23961580C((uint64_t)__p, (uint64_t)v28, (uint64_t)v5);
  v27 = 11;
  strcpy((char *)v26, "translation");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE0070;
  v6[1] = &v32;
  sub_23961580C((uint64_t)__p, (uint64_t)v26, (uint64_t)v6);
  if (v27 < 0)
  {
    operator delete(v26[0]);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((v29 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v28[0]);
LABEL_3:
  if (sub_23959479C((uint64_t)__p, a2))
  {
    v8 = v34;
    v9 = v36.i64[1];
    v10 = v38;
    v11 = vzip2q_s64(v34, v36);
    *(_QWORD *)&v12 = v35;
    *(_QWORD *)&v7 = v39;
    *((_QWORD *)&v12 + 1) = v37;
    v34 = vzip1q_s64(v34, v36);
    v37 = *((_QWORD *)&v38 + 1);
    v35 = v38;
    v36 = v11;
    v38 = v12;
    v13 = v32;
    v8.i64[0] = vdupq_laneq_s64(v8, 1).u64[0];
    v8.i64[1] = v9;
    v14 = v10;
    __asm { FMOV            V2.2D, #1.0 }
    *(_QWORD *)&_Q2 = v33;
    *(int64x2_t *)a1 = v34;
    *(_OWORD *)(a1 + 16) = (unint64_t)v14;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 112) = _Q2;
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 80) = v7;
    *(int64x2_t *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = *((unint64_t *)&v14 + 1);
  }
  v20 = v31;
  if (v31)
  {
    do
    {
      v21 = v20[5];
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      v20 = (_QWORD *)*v20;
    }
    while (v20);
    v22 = (void **)v31;
    if (v31)
    {
      do
      {
        v25 = (void **)*v22;
        if (*((char *)v22 + 39) < 0)
          operator delete(v22[2]);
        operator delete(v22);
        v22 = v25;
      }
      while (v25);
    }
  }
  v23 = __p[0];
  __p[0] = 0;
  if (v23)
    operator delete(v23);
  return a2;
}

void sub_2395E72DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395E72F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  sub_2395905C0((uint64_t)&a21);
  _Unwind_Resume(a1);
}

char *sub_2395E734C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return (char *)v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return (char *)v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = (char *)operator new(0x98uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(_OWORD *)(v15 + 72) = unk_239EC7730;
  *(_OWORD *)(v15 + 56) = xmmword_239EC7720;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)algn_239EC7710;
  *(_OWORD *)(v15 + 24) = xmmword_239EC7700;
  *(_OWORD *)(v15 + 136) = xmmword_239EC7770;
  *(_OWORD *)(v15 + 120) = xmmword_239EC7760;
  *(_OWORD *)(v15 + 104) = unk_239EC7750;
  *(_OWORD *)(v15 + 88) = xmmword_239EC7740;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395E7674(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395E7688(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;

  v6 = a1[1];
  if (!v6)
    goto LABEL_11;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v8 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v8 + 3) = v9;
      *((_BYTE *)v8 + 56) = *((_BYTE *)a2 + 56);
      if (v8 != a2)
      {
        v10 = *((unsigned int *)a2 + 20);
        sub_23945215C((uint64_t)(v8 + 8), v10);
        if ((_DWORD)v10)
          memcpy((void *)v8[8], (const void *)a2[8], 8 * v10);
        *((_DWORD *)v8 + 20) = *((_DWORD *)a2 + 20);
      }
      v11 = (uint64_t *)*v8;
      sub_23943604C(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v11;
      if (!v11)
        goto LABEL_11;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      free((void *)v8[8]);
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      sub_2395E7844((uint64_t)a1, (uint64_t)(a2 + 2), (uint64_t)&v13);
      sub_23943604C(a1, v13);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2395E77B8(void *a1)
{
  uint64_t v1;
  void **v2;

  __cxa_begin_catch(a1);
  sub_2395E7808(v1, v2);
  __cxa_rethrow();
}

void sub_2395E77D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2395E77E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p)
{
  void **v11;

  v11 = __p;
  __p = 0;
  if (v11)
  {
    sub_239EC0EB0((uint64_t)&__p, v11);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2395E77DCLL);
}

void sub_2395E7808(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      free(v2[8]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void *sub_2395E7844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  size_t v8;
  void *result;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  void *memptr;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_DWORD *)v6 + 4) = *(_DWORD *)a2;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a2 + 24);
  v6[56] = *(_BYTE *)(a2 + 40);
  v7 = *(unsigned int *)(a2 + 64);
  v8 = (8 * v7 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)v6 + 8) = 0;
  *((_QWORD *)v6 + 9) = v8 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v8, 0x100BBD03uLL);
  result = memptr;
  *((_QWORD *)v6 + 8) = memptr;
  if (!result)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v7)
    result = memcpy(result, *(const void **)(a2 + 48), 8 * v7);
  *((_DWORD *)v6 + 20) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a3 + 16) = 1;
  *((_QWORD *)v6 + 1) = *((unsigned int *)v6 + 4);
  return result;
}

void sub_2395E7940(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23955C23C(v1);
  _Unwind_Resume(a1);
}

void sub_2395E7954(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      v9 = *(_OWORD *)(a2 + 3);
      v10 = *(_OWORD *)(a2 + 5);
      v11 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v8 + 9) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v8 + 7) = v11;
      *(_OWORD *)(v8 + 5) = v10;
      *(_OWORD *)(v8 + 3) = v9;
      v12 = *(_OWORD *)(a2 + 11);
      v13 = *(_OWORD *)(a2 + 13);
      v14 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(v8 + 17) = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v8 + 15) = v14;
      *(_OWORD *)(v8 + 13) = v13;
      *(_OWORD *)(v8 + 11) = v12;
      v15 = (uint64_t *)*v8;
      sub_23943604C(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v15;
      if (!v15)
        goto LABEL_7;
    }
    do
    {
      v24 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v24;
    }
    while (v24);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v16 = (char *)operator new(0x98uLL);
      *(_QWORD *)v16 = 0;
      v17 = *((unsigned int *)a2 + 4);
      *((_DWORD *)v16 + 4) = v17;
      v18 = *(_OWORD *)(a2 + 3);
      v19 = *(_OWORD *)(a2 + 5);
      v20 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v16 + 72) = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(v16 + 56) = v20;
      *(_OWORD *)(v16 + 40) = v19;
      *(_OWORD *)(v16 + 24) = v18;
      v21 = *(_OWORD *)(a2 + 11);
      v22 = *(_OWORD *)(a2 + 13);
      v23 = *(_OWORD *)(a2 + 15);
      *(_OWORD *)(v16 + 136) = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v16 + 120) = v23;
      *(_OWORD *)(v16 + 104) = v22;
      *(_OWORD *)(v16 + 88) = v21;
      *((_QWORD *)v16 + 1) = v17;
      sub_23943604C(a1, (unsigned int *)v16);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2395E7AB0(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2395E7AD0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2395E7AE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395E7AFC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E7B20(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E0120((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E7B6C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E7BBC(&v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395E7BBC(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395E7CBC(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395E7CBC(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395E7CBC(uint64_t *a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v12;
  unsigned int v13;
  _OWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char i;
  unsigned int v56;
  int v57;
  int v58;
  _OWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  int v79;
  int j;
  unsigned int v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int v91;
  std::bad_alloc *exception;
  std::bad_alloc *v94;
  std::bad_alloc *v95;
  std::bad_alloc *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  std::string *__str;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  unsigned int v109[3];
  unsigned int v110;
  __int128 v111;
  __int128 v112;
  char v113;
  void *__src;
  uint64_t v115;
  unsigned int v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[50];
  std::string v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  char v135;
  __int128 v136;
  __int128 __p;
  int v138;
  uint64_t v139[2];
  uint64_t v140;
  uint64_t v141;
  void *v142;
  char v143;
  _BYTE v144[152];
  std::string v145;
  void *memptr[2];

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
      return 0;
    if (!v5)
      return 1;
    v6 = 0;
    v97 = v5;
    v101 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v102 = *MEMORY[0x24BEDB7F0];
    v100 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    __asm { FMOV            V0.2D, #-1.0 }
    v106 = _Q0;
    v98 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      memset(&v145, 0, sizeof(v145));
      v12 = std::istream::get();
      v13 = sub_2396162D4((uint64_t)a2, v12);
      if (v13)
      {
        std::string::resize(&v145, v13, 0);
        std::istream::read();
      }
      else if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      {
        *v145.__r_.__value_.__l.__data_ = 0;
        v145.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v145.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v145.__r_.__value_.__s + 23) = 0;
      }
      v109[0] = 0;
      sub_239593804((uint64_t)v139, (uint64_t)&v145, 24);
      MEMORY[0x23B83DD10](v139, v109);
      v111 = v106;
      v112 = v106;
      v113 = 1;
      __src = 0;
      v115 = 8;
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
      v14 = memptr[0];
      __src = memptr[0];
      if (!memptr[0])
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v94 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v94, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v116 = 5;
      *((_QWORD *)memptr[0] + 4) = 0;
      *v14 = 0u;
      v14[1] = 0u;
      v121 = xmmword_239EC7740;
      v122 = unk_239EC7750;
      v123 = xmmword_239EC7760;
      v124 = xmmword_239EC7770;
      v117 = xmmword_239EC7700;
      v118 = *(_OWORD *)algn_239EC7710;
      v119 = xmmword_239EC7720;
      v120 = unk_239EC7730;
      *(_QWORD *)v125 = -1;
      *((_BYTE *)&v126.__r_.__value_.__s + 23) = 0;
      v126.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v127) = 0;
      v135 = 0;
      v136 = 0u;
      __p = 0u;
      memset(&v125[8], 0, 42);
      v138 = 1065353216;
      sub_2395E8954((uint64_t)&v111, a2, 1);
      v15 = *a1;
      memptr[0] = v109;
      v16 = sub_2395E95DC(v15, v109, (uint64_t)&unk_239EC6E98, (_DWORD **)memptr);
      v17 = v16;
      v18 = (__int128 *)(v16 + 24);
      v19 = v112;
      *(_OWORD *)(v16 + 24) = v111;
      *(_OWORD *)(v16 + 40) = v19;
      v16[56] = v113;
      if (v16 + 24 != (char *)&v111)
      {
        v20 = v116;
        sub_23945215C((uint64_t)(v16 + 64), v116);
        if ((_DWORD)v20)
          memcpy(*((void **)v17 + 8), __src, 8 * v20);
        *((_DWORD *)v17 + 20) = v116;
        v22 = v119;
        v21 = v120;
        v23 = v117;
        *(_OWORD *)(v17 + 104) = v118;
        *(_OWORD *)(v17 + 88) = v23;
        *(_OWORD *)(v17 + 120) = v22;
        v25 = v123;
        v24 = v124;
        v26 = v121;
        *(_OWORD *)(v17 + 168) = v122;
        *(_OWORD *)(v17 + 152) = v26;
        *(_OWORD *)(v17 + 184) = v25;
        *(_OWORD *)(v17 + 200) = v24;
        *(_OWORD *)(v17 + 136) = v21;
        *(_OWORD *)(v17 + 216) = *(_OWORD *)v125;
      }
      *(_OWORD *)(v17 + 232) = *(_OWORD *)&v125[16];
      *((_QWORD *)v17 + 31) = *(_QWORD *)&v125[32];
      *((_QWORD *)v17 + 32) = *(_QWORD *)&v125[40];
      *((_WORD *)v17 + 132) = *(_WORD *)&v125[48];
      std::string::operator=((std::string *)(v17 + 272), &v126);
      v27 = v17 + 296;
      if (v17[424] == v135)
      {
        if (!v17[424])
          goto LABEL_21;
        v29 = v133;
        v28 = v134;
        v30 = v132;
        *(_OWORD *)(v17 + 360) = v131;
        *(_OWORD *)(v17 + 376) = v30;
        *(_OWORD *)(v17 + 392) = v29;
        *(_OWORD *)(v17 + 408) = v28;
        v32 = v129;
        v31 = v130;
        v33 = v128;
        *v27 = v127;
        *(_OWORD *)(v17 + 312) = v33;
        *(_OWORD *)(v17 + 328) = v32;
        *(_OWORD *)(v17 + 344) = v31;
        if (v18 != &v111)
          goto LABEL_22;
      }
      else
      {
        if (v17[424])
        {
          v17[424] = 0;
LABEL_21:
          if (v18 == &v111)
            goto LABEL_23;
LABEL_22:
          *((_DWORD *)v17 + 116) = v138;
          sub_2395E9A40((_QWORD *)v17 + 54, (uint64_t *)__p, 0);
          goto LABEL_23;
        }
        v39 = v133;
        v38 = v134;
        v40 = v132;
        *(_OWORD *)(v17 + 360) = v131;
        *(_OWORD *)(v17 + 376) = v40;
        *(_OWORD *)(v17 + 392) = v39;
        *(_OWORD *)(v17 + 408) = v38;
        v42 = v129;
        v41 = v130;
        v43 = v128;
        *v27 = v127;
        *(_OWORD *)(v17 + 312) = v43;
        *(_OWORD *)(v17 + 328) = v42;
        *(_OWORD *)(v17 + 344) = v41;
        v17[424] = 1;
        if (v18 != &v111)
          goto LABEL_22;
      }
LABEL_23:
      v34 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
      v35 = (_QWORD *)__p;
      if ((_QWORD)__p)
      {
        do
        {
          v36 = (_QWORD *)*v35;
          operator delete(v35);
          v35 = v36;
        }
        while (v36);
      }
      v37 = (void *)v136;
      *(_QWORD *)&v136 = 0;
      if (v37)
        operator delete(v37);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      free(__src);
      v139[0] = v102;
      *(uint64_t *)((char *)v139 + *(_QWORD *)(v102 - 24)) = v101;
      v140 = v100;
      v141 = v98;
      if (v143 < 0)
        operator delete(v142);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v144);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
      if (v34)
        return 0;
      if (++v6 == v97)
        return 1;
    }
  }
  v44 = a2 + 4;
  v45 = MEMORY[0x24BDAC740];
  while (1)
  {
    v46 = std::istream::peek();
    if (v46 <= 0x7F)
      break;
    v47 = __maskrune(v46, 0x4000uLL);
    v48 = *(_QWORD *)(*a2 - 24);
    if (!v47)
      goto LABEL_45;
LABEL_43:
    if (!*(_DWORD *)((char *)v44 + v48))
      std::istream::get();
  }
  v48 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v45 + 4 * v46 + 60) & 0x4000) != 0)
    goto LABEL_43;
LABEL_45:
  if ((*((_BYTE *)a2 + v48 + 32) & 2) != 0)
    return 1;
  v110 = 0;
  memset(&v145, 0, sizeof(v145));
  if (std::istream::get() != 123)
    goto LABEL_117;
  while (2)
  {
    v49 = std::istream::peek();
    if (v49 > 0x7F)
    {
      v50 = __maskrune(v49, 0x4000uLL);
      v51 = *(_QWORD *)(*a2 - 24);
      if (!v50)
        break;
      goto LABEL_51;
    }
    v51 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v45 + 4 * v49 + 60) & 0x4000) != 0)
    {
LABEL_51:
      if (!*(_DWORD *)((char *)v44 + v51))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v51 + 32) & 2) != 0)
    goto LABEL_117;
  v52 = std::istream::peek() == 125;
  v53 = *MEMORY[0x24BEDB7F0];
  v105 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v107 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  __asm { FMOV            V0.2D, #-1.0 }
  v103 = _Q0;
  __str = (std::string *)(MEMORY[0x24BEDB848] + 16);
  v99 = *MEMORY[0x24BEDB7F0];
  while ((*((_BYTE *)v44 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v52)
  {
    if (!sub_239595A48((uint64_t)&v145, a2))
      goto LABEL_117;
    sub_2395E6330((uint64_t)&v110, (uint64_t)&v145);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v44 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v44 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_117;
LABEL_64:
    std::istream::get();
    while (1)
    {
      v56 = std::istream::peek();
      if (v56 > 0x7F)
      {
        v57 = __maskrune(v56, 0x4000uLL);
        v58 = *(_DWORD *)((char *)v44 + *(_QWORD *)(*a2 - 24));
        if (!v57)
          break;
        goto LABEL_69;
      }
      v58 = *(_DWORD *)((char *)v44 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v45 + 4 * v56 + 60) & 0x4000) == 0)
        break;
LABEL_69:
      if (!v58)
        goto LABEL_64;
    }
    if ((v58 & 2) != 0)
      goto LABEL_117;
    sub_2394988CC((uint64_t)v139);
    *(_QWORD *)v109 = &v140;
    if (!sub_239596128(a2))
    {
      v52 = 0;
      v79 = 1;
      goto LABEL_106;
    }
    v111 = v103;
    v112 = v103;
    v113 = 1;
    __src = 0;
    v115 = 8;
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
    v59 = memptr[0];
    __src = memptr[0];
    if (!memptr[0])
    {
      v95 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v96 = std::bad_alloc::bad_alloc(v95);
      __cxa_throw(v96, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v116 = 5;
    *((_QWORD *)memptr[0] + 4) = 0;
    *v59 = 0u;
    v59[1] = 0u;
    v121 = xmmword_239EC7740;
    v122 = unk_239EC7750;
    v123 = xmmword_239EC7760;
    v124 = xmmword_239EC7770;
    v117 = xmmword_239EC7700;
    v118 = *(_OWORD *)algn_239EC7710;
    v119 = xmmword_239EC7720;
    v120 = unk_239EC7730;
    *(_QWORD *)v125 = -1;
    *((_BYTE *)&v126.__r_.__value_.__s + 23) = 0;
    v126.__r_.__value_.__s.__data_[0] = 0;
    LOBYTE(v127) = 0;
    v135 = 0;
    v136 = 0u;
    __p = 0u;
    memset(&v125[8], 0, 42);
    v138 = 1065353216;
    sub_2395E8954((uint64_t)&v111, v139, 0);
    v60 = *a1;
    memptr[0] = &v110;
    v61 = sub_2395E95DC(v60, &v110, (uint64_t)&unk_239EC6E98, (_DWORD **)memptr);
    v62 = v61;
    v63 = (__int128 *)(v61 + 24);
    v64 = v112;
    *(_OWORD *)(v61 + 24) = v111;
    *(_OWORD *)(v61 + 40) = v64;
    v61[56] = v113;
    if (v61 + 24 != (char *)&v111)
    {
      v65 = v116;
      sub_23945215C((uint64_t)(v61 + 64), v116);
      if ((_DWORD)v65)
        memcpy(*((void **)v62 + 8), __src, 8 * v65);
      *((_DWORD *)v62 + 20) = v116;
      v67 = v119;
      v66 = v120;
      v68 = v117;
      *(_OWORD *)(v62 + 104) = v118;
      *(_OWORD *)(v62 + 88) = v68;
      *(_OWORD *)(v62 + 120) = v67;
      v70 = v123;
      v69 = v124;
      v71 = v121;
      *(_OWORD *)(v62 + 168) = v122;
      *(_OWORD *)(v62 + 152) = v71;
      *(_OWORD *)(v62 + 184) = v70;
      *(_OWORD *)(v62 + 200) = v69;
      *(_OWORD *)(v62 + 136) = v66;
      *(_OWORD *)(v62 + 216) = *(_OWORD *)v125;
    }
    *(_OWORD *)(v62 + 232) = *(_OWORD *)&v125[16];
    *((_QWORD *)v62 + 31) = *(_QWORD *)&v125[32];
    *((_QWORD *)v62 + 32) = *(_QWORD *)&v125[40];
    *((_WORD *)v62 + 132) = *(_WORD *)&v125[48];
    std::string::operator=((std::string *)(v62 + 272), &v126);
    v72 = v62 + 296;
    if (v62[424] != v135)
    {
      if (!v62[424])
      {
        v86 = v133;
        v85 = v134;
        v87 = v132;
        *(_OWORD *)(v62 + 360) = v131;
        *(_OWORD *)(v62 + 376) = v87;
        *(_OWORD *)(v62 + 392) = v86;
        *(_OWORD *)(v62 + 408) = v85;
        v89 = v129;
        v88 = v130;
        v90 = v128;
        *v72 = v127;
        *(_OWORD *)(v62 + 312) = v90;
        *(_OWORD *)(v62 + 328) = v89;
        *(_OWORD *)(v62 + 344) = v88;
        v62[424] = 1;
        if (v63 == &v111)
          goto LABEL_87;
        goto LABEL_86;
      }
      v62[424] = 0;
LABEL_85:
      if (v63 != &v111)
        goto LABEL_86;
      goto LABEL_87;
    }
    if (!v62[424])
      goto LABEL_85;
    v74 = v133;
    v73 = v134;
    v75 = v132;
    *(_OWORD *)(v62 + 360) = v131;
    *(_OWORD *)(v62 + 376) = v75;
    *(_OWORD *)(v62 + 392) = v74;
    *(_OWORD *)(v62 + 408) = v73;
    v77 = v129;
    v76 = v130;
    v78 = v128;
    *v72 = v127;
    *(_OWORD *)(v62 + 312) = v78;
    *(_OWORD *)(v62 + 328) = v77;
    *(_OWORD *)(v62 + 344) = v76;
    if (v63 == &v111)
      goto LABEL_87;
LABEL_86:
    *((_DWORD *)v62 + 116) = v138;
    sub_2395E9A40((_QWORD *)v62 + 54, (uint64_t *)__p, 0);
LABEL_87:
    for (j = std::istream::peek(); ; j = std::istream::peek())
    {
      v81 = j << 24;
      if (j << 24 == 738197504)
        goto LABEL_97;
      if (v81 == 2097152000)
      {
        v52 = 1;
        v79 = 0;
        v53 = v99;
        v82 = (_QWORD *)__p;
        if (!(_QWORD)__p)
          goto LABEL_101;
        goto LABEL_100;
      }
      if (v81 <= 0x7F000000)
      {
        if ((*(_DWORD *)(v45 + 4 * (char)j + 60) & 0x4000) == 0)
          break;
      }
      else if (!__maskrune((char)j, 0x4000uLL))
      {
        break;
      }
      if ((*((_BYTE *)v44 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        break;
      std::istream::get();
    }
    if (v81 == 738197504)
    {
LABEL_97:
      std::istream::get();
      v52 = 0;
      v79 = 0;
      v53 = v99;
      v82 = (_QWORD *)__p;
      if (!(_QWORD)__p)
        goto LABEL_101;
      goto LABEL_100;
    }
    v52 = 0;
    v79 = 1;
    v53 = v99;
    v82 = (_QWORD *)__p;
    if (!(_QWORD)__p)
      goto LABEL_101;
    do
    {
LABEL_100:
      v83 = (_QWORD *)*v82;
      operator delete(v82);
      v82 = v83;
    }
    while (v83);
LABEL_101:
    v84 = (void *)v136;
    *(_QWORD *)&v136 = 0;
    if (v84)
      operator delete(v84);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    free(__src);
LABEL_106:
    v139[0] = v53;
    *(uint64_t *)((char *)v139 + *(_QWORD *)(v53 - 24)) = v107;
    v140 = v105;
    v141 = (uint64_t)__str;
    if (v143 < 0)
      operator delete(v142);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](v144);
    if (v79)
      goto LABEL_117;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_117:
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v145.__r_.__value_.__l.__data_);
    return 0;
  }
  v91 = std::istream::get();
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v145.__r_.__value_.__l.__data_);
  return v91 == 125;
}

void sub_2395E8854(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239498ABC((uint64_t)&STACK[0x268]);
  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_2395E88DC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 424);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = 0;
  if (v4)
    operator delete(v4);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  free(*(void **)(a1 + 40));
  return a1;
}

uint64_t *sub_2395E8954(uint64_t a1, uint64_t *a2, char a3)
{
  _OWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  float64x2_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int16x8_t v28;
  __int128 v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v42;
  float64x2_t v45;
  int64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  uint64_t v61;
  void **v62;
  void *v63;
  void **v65;
  std::bad_alloc *exception;
  std::bad_alloc *v67;
  float64x2_t v68;
  std::string __str;
  char __p[17];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80;
  char v81;
  void *v82[2];
  char v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88;
  char v89;
  void *v90[2];
  char v91;
  void *v92[2];
  void *v93;
  void *memptr[2];
  __int128 v95;
  float64x2_t v96;
  __int128 v97;
  float64x2_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  char v102;
  std::string v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float64x2_t v112;
  float64x2_t v113;
  char v114;
  void *v115;
  uint64_t v116;
  unsigned int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;

  __asm { FMOV            V0.2D, #-1.0 }
  v112 = _Q0;
  v113 = _Q0;
  v68 = _Q0;
  v114 = 1;
  v116 = 8;
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v11 = memptr[0];
  v115 = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v67 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v67, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v117 = 5;
  *((_QWORD *)memptr[0] + 4) = 0;
  *v11 = 0u;
  v11[1] = 0u;
  v122 = xmmword_239EC7740;
  v123 = unk_239EC7750;
  v124 = xmmword_239EC7760;
  v125 = xmmword_239EC7770;
  v118 = xmmword_239EC7700;
  v119 = *(_OWORD *)algn_239EC7710;
  v120 = xmmword_239EC7720;
  v121 = unk_239EC7730;
  v110 = -1;
  v111 = -1;
  v108 = 0;
  v107 = 0;
  v106 = 0;
  memset(&v103, 0, sizeof(v103));
  LOBYTE(memptr[0]) = 0;
  v102 = 0;
  sub_2396157EC((uint64_t)v92, a3);
  v91 = 6;
  strcpy((char *)v90, "camera");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250AE0100;
  v12[1] = &v112;
  sub_23961580C((uint64_t)v92, (uint64_t)v90, (uint64_t)v12);
  v89 = 3;
  LODWORD(v88) = 6580579;
  v13 = (_QWORD *)operator new();
  *v13 = &off_250AE01C0;
  v13[1] = &v111;
  sub_23961580C((uint64_t)v92, (uint64_t)&v88, (uint64_t)v13);
  v87 = 10;
  strcpy((char *)v86, "segment_id");
  v14 = (_QWORD *)operator new();
  *v14 = &off_250AE01C0;
  v14[1] = &v110;
  sub_23961580C((uint64_t)v92, (uint64_t)v86, (uint64_t)v14);
  v85 = 4;
  strcpy((char *)v84, "size");
  v15 = (_QWORD *)operator new();
  *v15 = &off_250AE01F0;
  v15[1] = &v109;
  sub_23961580C((uint64_t)v92, (uint64_t)v84, (uint64_t)v15);
  v83 = 11;
  strcpy((char *)v82, "is_keyframe");
  v16 = (_QWORD *)operator new();
  *v16 = &off_250AE0220;
  v16[1] = &v107;
  sub_23961580C((uint64_t)v92, (uint64_t)v82, (uint64_t)v16);
  v81 = 3;
  LODWORD(v80) = 6777958;
  v17 = (_QWORD *)operator new();
  *v17 = &off_250ADF420;
  v17[1] = (char *)&v106 + 4;
  sub_23961580C((uint64_t)v92, (uint64_t)&v80, (uint64_t)v17);
  v79 = 5;
  strcpy((char *)v78, "prior");
  v18 = (_QWORD *)operator new();
  *v18 = &off_250ADF240;
  v18[1] = &v106;
  sub_23961580C((uint64_t)v92, (uint64_t)v78, (uint64_t)v18);
  v77 = 7;
  strcpy((char *)v76, "gravity");
  v19 = (_QWORD *)operator new();
  *v19 = &off_250AE0250;
  v19[1] = &v104;
  sub_23961580C((uint64_t)v92, (uint64_t)v76, (uint64_t)v19);
  v75 = 11;
  strcpy((char *)v74, "orientation");
  v20 = (_QWORD *)operator new();
  *v20 = &off_250ADF420;
  v20[1] = &v108;
  sub_23961580C((uint64_t)v92, (uint64_t)v74, (uint64_t)v20);
  v73 = 9;
  strcpy((char *)v72, "timestamp");
  v21 = (_QWORD *)operator new();
  *v21 = &off_250ADF330;
  v21[1] = &v103;
  sub_23961580C((uint64_t)v92, (uint64_t)v72, (uint64_t)v21);
  v71 = 16;
  strcpy(__p, "object_transform");
  v22 = (_QWORD *)operator new();
  *v22 = &off_250AE03D0;
  v22[1] = memptr;
  sub_23961580C((uint64_t)v92, (uint64_t)__p, (uint64_t)v22);
  if (v71 < 0)
  {
    operator delete(*(void **)__p);
    if ((v73 & 0x80000000) == 0)
    {
LABEL_4:
      if ((v75 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_22;
    }
  }
  else if ((v73 & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(v72[0]);
  if ((v75 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v77 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v74[0]);
  if ((v77 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v79 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v76[0]);
  if ((v79 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v81 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v78[0]);
  if ((v81 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v83 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v80);
  if ((v83 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v85 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(v82[0]);
  if ((v85 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v87 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(v84[0]);
  if ((v87 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v89 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_29:
    operator delete(v88);
    if ((v91 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_28:
  operator delete(v86[0]);
  if (v89 < 0)
    goto LABEL_29;
LABEL_12:
  if ((v91 & 0x80000000) == 0)
    goto LABEL_13;
LABEL_30:
  operator delete(v90[0]);
LABEL_13:
  if (sub_23959479C((uint64_t)v92, a2))
  {
    v23 = v113;
    *(float64x2_t *)a1 = v112;
    *(float64x2_t *)(a1 + 16) = v23;
    *(_BYTE *)(a1 + 32) = v114;
    if (&v112 != (float64x2_t *)a1)
    {
      v24 = v117;
      sub_23945215C(a1 + 40, v117);
      if ((_DWORD)v24)
        memcpy(*(void **)(a1 + 40), v115, 8 * v24);
      *(_DWORD *)(a1 + 56) = v117;
    }
    v25 = v123;
    *(_OWORD *)(a1 + 128) = v122;
    *(_OWORD *)(a1 + 144) = v25;
    v26 = v125;
    *(_OWORD *)(a1 + 160) = v124;
    *(_OWORD *)(a1 + 176) = v26;
    v27 = v119;
    *(_OWORD *)(a1 + 64) = v118;
    *(_OWORD *)(a1 + 80) = v27;
    v28.i64[1] = *((_QWORD *)&v120 + 1);
    v29 = v121;
    *(_OWORD *)(a1 + 96) = v120;
    *(_OWORD *)(a1 + 112) = v29;
    v30 = v110;
    *(_DWORD *)(a1 + 192) = v111;
    *(_DWORD *)(a1 + 196) = v30;
    *(_QWORD *)(a1 + 200) = v109;
    *(_BYTE *)(a1 + 240) = v108;
    *(_BYTE *)(a1 + 241) = v107;
    *(_BYTE *)(a1 + 232) = BYTE4(v106);
    v31 = v106;
    v32 = (v106 >> 5) & 1;
    v33 = (v106 >> 6) & 1;
    *(_BYTE *)(a1 + 233) = v106 & 1;
    v28.i64[0] = *(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(v31), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01;
    *(_DWORD *)(a1 + 234) = vmovn_s16(v28).u32[0];
    *(_BYTE *)(a1 + 238) = v32;
    *(_BYTE *)(a1 + 239) = v33;
    v28.i64[0] = v105;
    *(_OWORD *)(a1 + 208) = v104;
    *(_QWORD *)(a1 + 224) = v28.i64[0];
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      sub_23941A7F8(&__str, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
    else
      __str = v103;
    std::string::operator=((std::string *)(a1 + 248), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v102)
    {
      *(void **)&v34.f64[0] = memptr[0];
      _Q4 = v98;
      v36 = (float64x2_t)vzip1q_s64(*(int64x2_t *)memptr, (int64x2_t)v96);
      v37 = (float64x2_t)vzip2q_s64(*(int64x2_t *)memptr, (int64x2_t)v96);
      *(_QWORD *)&_Q17.f64[0] = v95;
      *(_QWORD *)&_Q17.f64[1] = v97;
      v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, *(double *)memptr), v37, *(float64x2_t *)memptr, 1), _Q17, *(double *)&v95);
      _Q18 = (int64x2_t)vmulq_f64(v98, *(float64x2_t *)memptr);
      _D19 = memptr[1];
      __asm { FMLA            D18, D19, V4.D[1] }
      *(double *)_Q18.i64 = *(double *)_Q18.i64 + *(double *)&v99 * *(double *)&v95;
      v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v96.f64[0]), v37, v96, 1), _Q17, *(double *)&v97);
      _Q20 = (int8x16_t)vmulq_f64(v98, v96);
      _D21 = v96.f64[1];
      __asm { FMLA            D20, D21, V4.D[1] }
      *(double *)_Q20.i64 = *(double *)_Q20.i64 + *(double *)&v99 * *(double *)&v97;
      v45 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v36, v98.f64[0]), v37, v98, 1), _Q17, *(double *)&v99);
      _Q16 = vmulq_f64(_Q4, _Q4);
      _Q17.f64[0] = v98.f64[1];
      __asm { FMLA            D16, D17, V4.D[1] }
      _Q16.f64[0] = _Q16.f64[0] + *(double *)&v99 * *(double *)&v99;
      v47 = (int64x2_t)vaddq_f64(v42, (float64x2_t)xmmword_239EC6830);
      *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(_Q16, v68));
      _Q16.f64[1] = NAN;
      if (vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v39, (float64x2_t)xmmword_239EC6820)), _Q16), vabsq_f64((float64x2_t)vextq_s8((int8x16_t)v47, _Q20, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(_Q18, v47)), vabsq_f64(v45)))) <= 0.0001)
      {
        v48.f64[0] = *(double *)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).i64;
        v49.f64[0] = *(double *)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).i64;
        *(_QWORD *)&v34.f64[1] = vextq_s8(*(int8x16_t *)memptr, *(int8x16_t *)memptr, 8uLL).u64[0];
        v49.f64[1] = v98.f64[0];
        v48.f64[1] = v96.f64[0];
        v50 = vmulq_f64(v34, vmlaq_n_f64(vmulq_n_f64(v49, -*(double *)&v97), v48, *(double *)&v99));
        if (fabs(*(double *)&v95 * (v49.f64[0] * v96.f64[0] - v48.f64[0] * v98.f64[0])+ vsubq_f64(v50, (float64x2_t)vdupq_laneq_s64((int64x2_t)v50, 1)).f64[0]+ -1.0) <= 0.0001)
        {
          v51 = *((double *)&v95 + 1);
          v52 = *((double *)&v97 + 1);
          v53 = *((double *)&v99 + 1);
          if (*((double *)&v95 + 1) == 0.0)
            goto LABEL_44;
          if (*((double *)&v95 + 1) < 0.0)
            v51 = 0.0 - *((double *)&v95 + 1);
          if (v51 <= 0.0001)
          {
LABEL_44:
            if (*((double *)&v97 + 1) == 0.0)
              goto LABEL_48;
            if (*((double *)&v97 + 1) < 0.0)
              v52 = 0.0 - *((double *)&v97 + 1);
            if (v52 <= 0.0001)
            {
LABEL_48:
              if (*((double *)&v99 + 1) == 0.0)
                goto LABEL_73;
              if (*((double *)&v99 + 1) < 0.0)
                v53 = 0.0 - *((double *)&v99 + 1);
              if (v53 <= 0.0001)
              {
LABEL_73:
                if (*((double *)&v101 + 1) == 1.0
                  || (*((double *)&v101 + 1) >= 1.0
                    ? (v54 = *((double *)&v101 + 1) + -1.0)
                    : (v54 = 1.0 - *((double *)&v101 + 1)),
                      v54 <= 0.0001))
                {
                  v55 = *(unsigned __int8 *)(a1 + 400);
                  v56 = v99;
                  *(float64x2_t *)(a1 + 336) = v98;
                  *(_OWORD *)(a1 + 352) = v56;
                  v57 = v101;
                  *(_OWORD *)(a1 + 368) = v100;
                  *(_OWORD *)(a1 + 384) = v57;
                  v58 = v95;
                  *(_OWORD *)(a1 + 272) = *(_OWORD *)memptr;
                  *(_OWORD *)(a1 + 288) = v58;
                  v59 = v97;
                  *(float64x2_t *)(a1 + 304) = v96;
                  *(_OWORD *)(a1 + 320) = v59;
                  if (!v55)
                    *(_BYTE *)(a1 + 400) = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  v60 = v93;
  if (v93)
  {
    do
    {
      v61 = v60[5];
      if (v61)
        (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
      v60 = (_QWORD *)*v60;
    }
    while (v60);
    v62 = (void **)v93;
    if (v93)
    {
      do
      {
        v65 = (void **)*v62;
        if (*((char *)v62 + 39) < 0)
          operator delete(v62[2]);
        operator delete(v62);
        v62 = v65;
      }
      while (v65);
    }
  }
  v63 = v92[0];
  v92[0] = 0;
  if (v63)
    operator delete(v63);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  free(v115);
  return a2;
}

void sub_2395E92D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v72;

  sub_2395905C0((uint64_t)&a49);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(__p);
  free(*(void **)(v72 - 200));
  _Unwind_Resume(a1);
}

void sub_2395E9448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    JUMPOUT(0x2395E93C0);
  JUMPOUT(0x2395E9358);
}

void sub_2395E9458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    JUMPOUT(0x2395E9360);
  JUMPOUT(0x2395E93D0);
}

void sub_2395E9468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    JUMPOUT(0x2395E93D8);
  JUMPOUT(0x2395E9370);
}

void sub_2395E9478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    JUMPOUT(0x2395E9378);
  JUMPOUT(0x2395E93E8);
}

void sub_2395E9488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    JUMPOUT(0x2395E93F0);
  JUMPOUT(0x2395E9388);
}

void sub_2395E9498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0)
    JUMPOUT(0x2395E9390);
  JUMPOUT(0x2395E9400);
}

void sub_2395E94A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0)
    JUMPOUT(0x2395E9408);
  JUMPOUT(0x2395E93A0);
}

void sub_2395E94B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if ((a51 & 0x80000000) == 0)
    JUMPOUT(0x2395E9420);
  JUMPOUT(0x2395E9418);
}

void sub_2395E94CC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E94F0(uint64_t a1, _QWORD *a2, char a3, double a4, double a5, double a6, double a7, double a8, double a9, int64x2_t a10)
{
  uint64_t v10;

  v10 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v10 + 128))
    sub_239EC0EE4(v10, (uint64_t)a2);
  sub_2395DE970(v10, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E9538(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *(_QWORD *)(a1 + 8);
  v17 = xmmword_239EC7740;
  v18 = unk_239EC7750;
  v19 = xmmword_239EC7760;
  v20 = xmmword_239EC7770;
  v13 = xmmword_239EC7700;
  v14 = *(_OWORD *)algn_239EC7710;
  v15 = xmmword_239EC7720;
  v16 = unk_239EC7730;
  sub_2395E70C4((uint64_t)&v13, a2, a3);
  v5 = *(unsigned __int8 *)(v4 + 128);
  v6 = v16;
  v8 = v13;
  v7 = v14;
  *(_OWORD *)(v4 + 32) = v15;
  *(_OWORD *)(v4 + 48) = v6;
  *(_OWORD *)v4 = v8;
  *(_OWORD *)(v4 + 16) = v7;
  v9 = v20;
  v11 = v17;
  v10 = v18;
  *(_OWORD *)(v4 + 96) = v19;
  *(_OWORD *)(v4 + 112) = v9;
  *(_OWORD *)(v4 + 64) = v11;
  *(_OWORD *)(v4 + 80) = v10;
  if (!v5)
    *(_BYTE *)(v4 + 128) = 1;
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

char *sub_2395E95DC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  char **v10;
  char *result;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)result + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v7)
                return result;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)result + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v7)
              return result;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = (char *)operator new(0x1D8uLL);
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v7;
  *((_DWORD *)v27 + 4) = **a4;
  *(_OWORD *)(v27 + 248) = 0u;
  *(_OWORD *)(v27 + 232) = 0u;
  *(_OWORD *)(v27 + 216) = 0u;
  *(_OWORD *)(v27 + 200) = 0u;
  *(_OWORD *)(v27 + 184) = 0u;
  *(_OWORD *)(v27 + 168) = 0u;
  *(_OWORD *)(v27 + 152) = 0u;
  *(_OWORD *)(v27 + 136) = 0u;
  *(_OWORD *)(v27 + 120) = 0u;
  *(_OWORD *)(v27 + 104) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 440) = 0u;
  *(_OWORD *)(v27 + 456) = 0u;
  *(_OWORD *)(v27 + 408) = 0u;
  *(_OWORD *)(v27 + 424) = 0u;
  *(_OWORD *)(v27 + 376) = 0u;
  *(_OWORD *)(v27 + 392) = 0u;
  *(_OWORD *)(v27 + 344) = 0u;
  *(_OWORD *)(v27 + 360) = 0u;
  *(_OWORD *)(v27 + 312) = 0u;
  *(_OWORD *)(v27 + 328) = 0u;
  *(_OWORD *)(v27 + 280) = 0u;
  *(_OWORD *)(v27 + 296) = 0u;
  *(_OWORD *)(v27 + 264) = 0u;
  sub_2395F78C4((uint64_t)(v27 + 24));
  *((_OWORD *)v27 + 27) = 0u;
  *((_OWORD *)v27 + 28) = 0u;
  *((_DWORD *)v27 + 116) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v18 = v8 < 3 || (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_38;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_38:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        v17 = v27;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        v17 = v27;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      v17 = v27;
      if (v16)
        goto LABEL_26;
    }
LABEL_51:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v26 >= v8)
          v26 %= v8;
      }
      else
      {
        v26 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_62;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v17 = v27;
  if (!v16)
    goto LABEL_51;
LABEL_26:
  *v17 = *v16;
  *v16 = v27;
LABEL_62:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2395E9994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395E99BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395E99A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395E99BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395E99BC(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 448);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = *(void **)(v2 + 432);
      *(_QWORD *)(v2 + 432) = 0;
      if (v5)
        operator delete(v5);
      if (*(char *)(v2 + 295) < 0)
        operator delete(*(void **)(v2 + 272));
      free(*(void **)(v2 + 64));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_2395E9A40(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (unsigned int *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[4] = *((_DWORD *)a2 + 4);
      v8[5] = *((_DWORD *)a2 + 5);
      v9 = *(unsigned int **)v8;
      sub_23943604C(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = *(unsigned int **)v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = (unsigned int *)operator new(0x18uLL);
      *(_QWORD *)v10 = 0;
      v11 = a2[2];
      *((_QWORD *)v10 + 1) = v11;
      *((_QWORD *)v10 + 2) = v11;
      sub_23943604C(a1, v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2395E9B24(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2395E9B44(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2395E9B58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395E9B70(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395E9B94(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E2E60((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395E9BE0(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395E9C30(&v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395E9C30(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395E9D30(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395E9D30(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395E9D30(uint64_t *a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  char i;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 *v36;
  int v37;
  int j;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v52[3];
  unsigned int v53;
  __int128 v54;
  uint64_t v55;
  __int16 v56;
  char v57;
  __int16 v58;
  __int128 v59;
  _BYTE v60[32];
  char v61;
  __int128 v62;
  __int128 __p;
  int v64;
  uint64_t v65[2];
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char v69;
  _BYTE v70[152];
  std::string v71;
  _DWORD *v72[2];

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
      return 0;
    if (!v5)
      return 1;
    v6 = 0;
    v46 = v5;
    v7 = *MEMORY[0x24BEDB7F0];
    v47 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v49 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v8 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      memset(&v71, 0, sizeof(v71));
      v9 = std::istream::get();
      v10 = sub_2396162D4((uint64_t)a2, v9);
      if (v10)
      {
        std::string::resize(&v71, v10, 0);
        std::istream::read();
      }
      else if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        *v71.__r_.__value_.__l.__data_ = 0;
        v71.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v71.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v71.__r_.__value_.__s + 23) = 0;
      }
      v52[0] = 0;
      sub_239593804((uint64_t)v65, (uint64_t)&v71, 24);
      MEMORY[0x23B83DD10](v65, v52);
      v54 = 0uLL;
      v55 = 0;
      v58 = 0;
      LOBYTE(v59) = 0;
      v61 = 0;
      v62 = 0u;
      __p = 0u;
      v64 = 1065353216;
      sub_2395EA668((uint64_t)&v54, a2, 1);
      v11 = *a1;
      v72[0] = v52;
      v12 = sub_2395EA9AC(v11, v52, (uint64_t)&unk_239EC6E98, v72);
      v13 = v12;
      v14 = (__int128 *)(v12 + 24);
      *(_OWORD *)(v12 + 24) = v54;
      *((_QWORD *)v12 + 5) = v55;
      if (v12 + 24 != (char *)&v54)
      {
        *((_WORD *)v12 + 24) = v56;
        v12[50] = v57;
      }
      *(_WORD *)(v12 + 51) = v58;
      if (v12[104] == v61)
      {
        if (v12[104])
          sub_2395EAD60((uint64_t)(v12 + 56), (unsigned int *)&v59);
        if (v14 != &v54)
          goto LABEL_21;
      }
      else
      {
        if (!v12[104])
        {
          *(_OWORD *)(v12 + 56) = v59;
          sub_23948A5BC((_QWORD *)v12 + 9, (uint64_t)v60);
          v13[104] = 1;
          if (v14 == &v54)
            goto LABEL_22;
LABEL_21:
          *((_DWORD *)v13 + 36) = v64;
          sub_2395E9A40((_QWORD *)v13 + 14, (uint64_t *)__p, 0);
          goto LABEL_22;
        }
        sub_239916980((uint64_t)(v12 + 72));
        v13[104] = 0;
        if (v14 != &v54)
          goto LABEL_21;
      }
LABEL_22:
      v15 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
      v16 = (_QWORD *)__p;
      if ((_QWORD)__p)
      {
        do
        {
          v17 = (_QWORD *)*v16;
          operator delete(v16);
          v16 = v17;
        }
        while (v17);
      }
      v18 = (void *)v62;
      *(_QWORD *)&v62 = 0;
      if (v18)
        operator delete(v18);
      if (v61)
        sub_239916980((uint64_t)v60);
      v65[0] = v7;
      *(uint64_t *)((char *)v65 + *(_QWORD *)(v7 - 24)) = v49;
      v66 = v47;
      v67 = v8;
      if (v69 < 0)
        operator delete(v68);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v70);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (v15)
        return 0;
      if (++v6 == v46)
        return 1;
    }
  }
  v19 = a2 + 4;
  v20 = MEMORY[0x24BDAC740];
  while (1)
  {
    v21 = std::istream::peek();
    if (v21 <= 0x7F)
      break;
    v22 = __maskrune(v21, 0x4000uLL);
    v23 = *(_QWORD *)(*a2 - 24);
    if (!v22)
      goto LABEL_42;
LABEL_40:
    if (!*(_DWORD *)((char *)v19 + v23))
      std::istream::get();
  }
  v23 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v20 + 4 * v21 + 60) & 0x4000) != 0)
    goto LABEL_40;
LABEL_42:
  if ((*((_BYTE *)a2 + v23 + 32) & 2) != 0)
    return 1;
  v53 = 0;
  memset(&v71, 0, sizeof(v71));
  if (std::istream::get() != 123)
    goto LABEL_110;
  while (2)
  {
    v24 = std::istream::peek();
    if (v24 > 0x7F)
    {
      v25 = __maskrune(v24, 0x4000uLL);
      v26 = *(_QWORD *)(*a2 - 24);
      if (!v25)
        break;
      goto LABEL_48;
    }
    v26 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v20 + 4 * v24 + 60) & 0x4000) != 0)
    {
LABEL_48:
      if (!*(_DWORD *)((char *)v19 + v26))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v26 + 32) & 2) != 0)
    goto LABEL_110;
  v27 = std::istream::peek() == 125;
  v28 = *MEMORY[0x24BEDB7F0];
  v48 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v50 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v45 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v19 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v27)
  {
    if (!sub_239595A48((uint64_t)&v71, a2))
      goto LABEL_110;
    sub_2395E6330((uint64_t)&v53, (uint64_t)&v71);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v19 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v19 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_110;
LABEL_61:
    std::istream::get();
    while (1)
    {
      v30 = std::istream::peek();
      if (v30 > 0x7F)
      {
        v31 = __maskrune(v30, 0x4000uLL);
        v32 = *(_DWORD *)((char *)v19 + *(_QWORD *)(*a2 - 24));
        if (!v31)
          break;
        goto LABEL_66;
      }
      v32 = *(_DWORD *)((char *)v19 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v20 + 4 * v30 + 60) & 0x4000) == 0)
        break;
LABEL_66:
      if (!v32)
        goto LABEL_61;
    }
    if ((v32 & 2) == 0)
    {
      sub_2394988CC((uint64_t)v65);
      *(_QWORD *)v52 = &v66;
      if (sub_239596128(a2))
      {
        v54 = 0uLL;
        v55 = 0;
        v58 = 0;
        LOBYTE(v59) = 0;
        v61 = 0;
        v62 = 0u;
        __p = 0u;
        v64 = 1065353216;
        sub_2395EA668((uint64_t)&v54, v65, 0);
        v33 = *a1;
        v72[0] = &v53;
        v34 = sub_2395EA9AC(v33, &v53, (uint64_t)&unk_239EC6E98, v72);
        v35 = v34;
        v36 = (__int128 *)(v34 + 24);
        *(_OWORD *)(v34 + 24) = v54;
        *((_QWORD *)v34 + 5) = v55;
        if (v34 + 24 != (char *)&v54)
        {
          *((_WORD *)v34 + 24) = v56;
          v34[50] = v57;
        }
        *(_WORD *)(v34 + 51) = v58;
        if (v34[104] == v61)
        {
          if (v34[104])
            sub_2395EAD60((uint64_t)(v34 + 56), (unsigned int *)&v59);
          if (v36 == &v54)
            goto LABEL_83;
LABEL_82:
          *((_DWORD *)v35 + 36) = v64;
          sub_2395E9A40((_QWORD *)v35 + 14, (uint64_t *)__p, 0);
        }
        else if (v34[104])
        {
          sub_239916980((uint64_t)(v34 + 72));
          v35[104] = 0;
          if (v36 != &v54)
            goto LABEL_82;
        }
        else
        {
          *(_OWORD *)(v34 + 56) = v59;
          sub_23948A5BC((_QWORD *)v34 + 9, (uint64_t)v60);
          v35[104] = 1;
          if (v36 != &v54)
            goto LABEL_82;
        }
LABEL_83:
        for (j = std::istream::peek(); ; j = std::istream::peek())
        {
          v39 = j << 24;
          if (j << 24 == 738197504)
            goto LABEL_93;
          if (v39 == 2097152000)
          {
            v27 = 1;
            v37 = 0;
            v40 = (_QWORD *)__p;
            if (!(_QWORD)__p)
              goto LABEL_97;
            goto LABEL_96;
          }
          if (v39 <= 0x7F000000)
          {
            if ((*(_DWORD *)(v20 + 4 * (char)j + 60) & 0x4000) == 0)
              break;
          }
          else if (!__maskrune((char)j, 0x4000uLL))
          {
            break;
          }
          if ((*((_BYTE *)v19 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            break;
          std::istream::get();
        }
        if (v39 == 738197504)
        {
LABEL_93:
          std::istream::get();
          v27 = 0;
          v37 = 0;
          v40 = (_QWORD *)__p;
          if (!(_QWORD)__p)
            goto LABEL_97;
          goto LABEL_96;
        }
        v27 = 0;
        v37 = 1;
        v40 = (_QWORD *)__p;
        if (!(_QWORD)__p)
          goto LABEL_97;
        do
        {
LABEL_96:
          v41 = (_QWORD *)*v40;
          operator delete(v40);
          v40 = v41;
        }
        while (v41);
LABEL_97:
        v42 = (void *)v62;
        *(_QWORD *)&v62 = 0;
        if (v42)
          operator delete(v42);
        if (v61)
          sub_239916980((uint64_t)v60);
      }
      else
      {
        v27 = 0;
        v37 = 1;
      }
      v65[0] = v28;
      *(uint64_t *)((char *)v65 + *(_QWORD *)(v28 - 24)) = v50;
      v66 = v48;
      v67 = v45;
      if (v69 < 0)
        operator delete(v68);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v70);
      if (!v37)
        continue;
    }
    goto LABEL_110;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_110:
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    return 0;
  }
  v43 = std::istream::get();
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  return v43 == 125;
}

void sub_2395EA5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 105) < 0)
    operator delete(*(void **)(v38 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395EA610(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 104);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v4)
    operator delete(v4);
  if (*(_BYTE *)(a1 + 80))
    sub_239916980(a1 + 48);
  return a1;
}

uint64_t *sub_2395EA668(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *__p[2];
  void *v24;
  uint64_t v25;
  __int16 v26;
  char v27;
  __int128 v28;
  uint64_t v29;

  v25 = 0;
  sub_2396157EC((uint64_t)__p, a3);
  v22 = 3;
  LODWORD(v21) = 7565168;
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0070;
  v5[1] = &v28;
  sub_23961580C((uint64_t)__p, (uint64_t)&v21, (uint64_t)v5);
  v20 = 3;
  LODWORD(v19) = 7498851;
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE02B0;
  v6[1] = &v26;
  sub_23961580C((uint64_t)__p, (uint64_t)&v19, (uint64_t)v6);
  v18 = 3;
  LODWORD(v17) = 6777958;
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF420;
  v7[1] = (char *)&v25 + 4;
  sub_23961580C((uint64_t)__p, (uint64_t)&v17, (uint64_t)v7);
  v16 = 3;
  LODWORD(v15) = 7630195;
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF420;
  v8[1] = &v25;
  sub_23961580C((uint64_t)__p, (uint64_t)&v15, (uint64_t)v8);
  if (v16 < 0)
  {
    operator delete(v15);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_23:
      operator delete(v19);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_24;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17);
  if (v20 < 0)
    goto LABEL_23;
LABEL_4:
  if ((v22 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_24:
  operator delete(v21);
LABEL_5:
  if (sub_23959479C((uint64_t)__p, a2))
  {
    *(_OWORD *)a1 = v28;
    *(_QWORD *)(a1 + 16) = v29;
    if ((__int16 *)(a1 + 24) != &v26)
    {
      *(_WORD *)(a1 + 24) = v26;
      *(_BYTE *)(a1 + 26) = v27;
    }
    *(_BYTE *)(a1 + 27) = BYTE4(v25);
    *(_BYTE *)(a1 + 28) = v25;
  }
  v9 = v24;
  if (v24)
  {
    do
    {
      v10 = v9[5];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = (void **)v24;
    if (v24)
    {
      do
      {
        v14 = (void **)*v11;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v14;
      }
      while (v14);
    }
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    operator delete(v12);
  return a2;
}

void sub_2395EA8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EA900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0((uint64_t)&a34);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a28);
  sub_2395905C0((uint64_t)&a34);
  _Unwind_Resume(a1);
}

char *sub_2395EA9AC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x98uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 36) = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2395EACD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395EACE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395EACE4(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD **)(v2 + 128);
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = *(void **)(v2 + 112);
      *(_QWORD *)(v2 + 112) = 0;
      if (v5)
        operator delete(v5);
      if (*(_BYTE *)(v2 + 104))
        sub_239916980(v2 + 72);
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2395EAD60(uint64_t a1, unsigned int *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[4];

  v3 = *(_DWORD **)(a1 + 24);
  if (v3 && (v4 = *a2, (_DWORD)v4 == *(_DWORD *)a1) && (v5 = a2[1], (_DWORD)v5 == *(_DWORD *)(a1 + 4)))
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = (const void *)*((_QWORD *)a2 + 3);
      if ((_DWORD)v4 && !v6)
        sub_239EC0394();
      if ((_DWORD)v4)
        memmove(v3, v6, 4 * v4);
      return a1;
    }
    if (!(_DWORD)v4)
      return a1;
    v8 = (_DWORD *)*((_QWORD *)a2 + 3);
    v9 = v4 - 1;
    if ((_DWORD)v4 != 1)
    {
      v10 = 0;
      v11 = 4 * v5;
      do
      {
        *(_DWORD *)((char *)v3 + v10) = *(_DWORD *)((char *)v8 + v10);
        v10 += v11;
        --v9;
      }
      while (v9);
      v8 = (_DWORD *)((char *)v8 + v10);
      v3 = (_DWORD *)((char *)v3 + v10);
    }
    *v3 = *v8;
    return a1;
  }
  else
  {
    v12 = *(_OWORD *)a2;
    sub_23948A5BC(v13, (uint64_t)(a2 + 4));
    *(_OWORD *)a1 = v12;
    *(_QWORD *)(a1 + 40) = v13[3];
    sub_23991693C((_QWORD *)(a1 + 16), v13);
    sub_239916980((uint64_t)v13);
    return a1;
  }
}

void sub_2395EAE74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

void sub_2395EAE8C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EAEB0(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395EAF2C(*(_QWORD ***)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395EAEEC(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395EB70C(*(char ****)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395EAF2C(_QWORD **a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  _DWORD **v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v4 = *a1;
  v5 = (*a1)[3];
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    v7 = *a1;
    v8 = (_DWORD *)**a1;
    v9 = (*a1)[1] - (_QWORD)v8;
    if (!v9)
    {
      v10 = 0xFFFFFFFFLL;
      if (!v7[3])
        return a2;
LABEL_30:
      v20 = 0;
      v21 = (_DWORD **)*a1;
      do
      {
        if (v21 == v7)
        {
          v26 = 0;
          v24 = v10;
          while ((_DWORD)v24 != -1)
          {
            while (1)
            {
              v24 = (v24 + 1);
              if ((uint64_t)(v7[1] - *v7) >> 6 <= v24)
                break;
              if (*(_DWORD *)(*v7 + (v24 << 6)) != -1)
                goto LABEL_45;
            }
            LODWORD(v24) = -1;
LABEL_45:
            v24 = v24;
            ++v26;
            v22 = 0x7FFFFFFFLL;
            if (v26 == 0x7FFFFFFF)
              goto LABEL_32;
          }
          v22 = v26;
        }
        else
        {
          v23 = 0;
          v24 = v10;
          do
          {
            if ((_DWORD)v24 != -1)
            {
              LODWORD(v25) = v24;
              while (1)
              {
                v25 = (v25 + 1);
                if ((uint64_t)(v7[1] - *v7) >> 6 <= v25)
                  break;
                if (*(_DWORD *)(*v7 + (v25 << 6)) != -1)
                  goto LABEL_36;
              }
              LODWORD(v25) = -1;
LABEL_36:
              v24 = v25;
            }
            ++v23;
            v22 = 0x7FFFFFFFLL;
          }
          while (v23 != 0x7FFFFFFF);
        }
LABEL_32:
        sub_2395EB1FC(v10, v7, v24, v7, v22, a2, 1);
        v20 += 0x7FFFFFFFLL;
        v21 = (_DWORD **)*a1;
        v10 = v24;
      }
      while (v20 < (*a1)[3]);
      return a2;
    }
    if (*v8 != -1)
    {
      v10 = 0;
      if (!v7[3])
        return a2;
      goto LABEL_30;
    }
    v16 = v9 >> 6;
    v17 = 1;
    do
    {
      v18 = v17;
      if (v16 <= v17)
      {
        v10 = 0xFFFFFFFFLL;
        if (!v7[3])
          return a2;
        goto LABEL_30;
      }
      v19 = v8[16 * (unint64_t)v17++];
    }
    while (v19 == -1);
    if (v16 <= v18)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v18;
    if (v7[3])
      goto LABEL_30;
  }
  else
  {
    v11 = (_DWORD *)*v4;
    v12 = (uint64_t)(v4[1] - *v4) >> 6;
    if (v4[1] != *v4 && *v11 == -1)
    {
      LODWORD(v13) = 0;
      while (1)
      {
        v13 = (v13 + 1);
        if (v12 <= v13)
          break;
        if (v11[16 * v13] != -1)
          goto LABEL_10;
      }
      LODWORD(v13) = -1;
    }
    else
    {
      LODWORD(v13) = 0;
    }
LABEL_10:
    if (v12 <= v13)
      v14 = -1;
    else
      v14 = v13;
    sub_2395EB1FC(v14, v4, -1, v4, v5, a2, a3);
  }
  return a2;
}

uint64_t sub_2395EB1FC(int a1, _QWORD *a2, int a3, _QWORD *a4, unint64_t a5, _QWORD *a6, int a7)
{
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *__p;
  int v29;
  unsigned __int8 v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  _DWORD v36[42];

  LODWORD(v10) = a1;
  if (!a7)
  {
    std::ostream::put();
    v26 = a3;
    if ((_DWORD)v10 == a3 && a2 == a4)
    {
LABEL_6:
      std::ostream::put();
      return 1;
    }
    v14 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v15 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v17 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      sub_2394988CC((uint64_t)v31);
      std::ostream::operator<<();
      std::stringbuf::str();
      std::ostream::put();
      std::ostream::write();
      std::ostream::put();
      std::ostream::put();
      sub_2395E4958((uint64_t *)(*a2 + ((unint64_t)v10 << 6) + 8), a6, 0);
      if ((_DWORD)v10 == -1)
      {
        LODWORD(v10) = -1;
LABEL_17:
        v18 = (_DWORD)v10 == v26 && a2 == a4;
        v19 = !v18;
        if (v18)
          goto LABEL_34;
      }
      else
      {
        while (1)
        {
          v10 = (v10 + 1);
          if ((uint64_t)(a2[1] - *a2) >> 6 <= v10)
            break;
          if (*(_DWORD *)(*a2 + (v10 << 6)) != -1)
            goto LABEL_17;
        }
        LODWORD(v10) = -1;
        v20 = v26 == -1 && a2 == a4;
        v19 = !v20;
        if (v20)
          goto LABEL_34;
      }
      std::ostream::put();
LABEL_34:
      if ((char)v30 < 0)
        operator delete(__p);
      v31[0] = v14;
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v14 - 24)) = v16;
      v32 = v15;
      v33 = v17;
      if (v35 < 0)
        operator delete(v34);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v36);
      if ((v19 & 1) == 0)
        goto LABEL_6;
    }
  }
  std::ostream::put();
  if (a5 >> 31)
    return 0;
  v36[38] = a5;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if ((_DWORD)v10 != a3 || a2 != a4)
  {
    v13 = 0;
    v21 = *MEMORY[0x24BEDB7F0];
    v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v25 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v22 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      while (1)
      {
        sub_2394988CC((uint64_t)v31);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        v23 = v30;
        if ((v30 & 0x80u) != 0)
          v23 = v29;
        v36[39] = v23;
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        std::ostream::write();
        sub_2395E4958((uint64_t *)(*a2 + ((unint64_t)v10 << 6) + 8), a6, 1);
        if ((char)v30 < 0)
          operator delete(__p);
        v31[0] = v21;
        *(_QWORD *)((char *)v31 + *(_QWORD *)(v21 - 24)) = v25;
        v32 = v24;
        v33 = v22;
        if (v35 < 0)
          operator delete(v34);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v36);
        if ((_DWORD)v10 == -1)
          break;
        while (1)
        {
          v10 = (v10 + 1);
          if ((uint64_t)(a2[1] - *a2) >> 6 <= v10)
            break;
          if (*(_DWORD *)(*a2 + (v10 << 6)) != -1)
            goto LABEL_50;
        }
        LODWORD(v10) = -1;
        ++v13;
        if (a3 == -1)
          goto LABEL_53;
      }
      LODWORD(v10) = -1;
LABEL_50:
      ++v13;
      if ((_DWORD)v10 == a3)
      {
LABEL_53:
        if (a2 == a4)
          return v13 == a5;
      }
    }
  }
  v13 = 0;
  return v13 == a5;
}

void sub_2395EB694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EB6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EB6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EB6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EB6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395EB70C(char ***a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  char ***v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395EB80C(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395EB80C(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395EB80C(char ***a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  __int16 v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char i;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  __int16 v31;
  int j;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int16 v46;
  char v47;
  __int16 v48;
  uint64_t v49[2];
  uint64_t v50;
  uint64_t v51;
  void *__p;
  char v53;
  _BYTE v54[152];
  std::string v55;

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (!*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      if (!v5)
        return 1;
      v6 = v5;
      v7 = *MEMORY[0x24BEDB7F0];
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v37 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v9 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        memset(&v55, 0, sizeof(v55));
        v10 = std::istream::get();
        v11 = sub_2396162D4((uint64_t)a2, v10);
        if (v11)
        {
          std::string::resize(&v55, v11, 0);
          std::istream::read();
        }
        else if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        {
          *v55.__r_.__value_.__l.__data_ = 0;
          v55.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v55.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v55.__r_.__value_.__s + 23) = 0;
        }
        LODWORD(v41) = 0;
        sub_239593804((uint64_t)v49, (uint64_t)&v55, 24);
        MEMORY[0x23B83DD10](v49, &v41);
        LODWORD(v45) = -1;
        *(_QWORD *)&v43 = -1;
        *((_QWORD *)&v43 + 1) = -1;
        *((_QWORD *)&v45 + 1) = 0;
        v48 = 0;
        sub_2395EBEDC((uint64_t)&v43, a2, 1);
        v12 = sub_2395EC3C8(*a1, &v41);
        *(_OWORD *)v12 = v43;
        *(_OWORD *)(v12 + 16) = v44;
        *(_OWORD *)(v12 + 32) = v45;
        if ((__int128 *)v12 != &v43)
        {
          v13 = v46;
          *(_BYTE *)(v12 + 50) = v47;
          *(_WORD *)(v12 + 48) = v13;
        }
        *(_WORD *)(v12 + 51) = v48;
        v14 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
        v49[0] = v7;
        *(uint64_t *)((char *)v49 + *(_QWORD *)(v7 - 24)) = v37;
        v50 = v8;
        v51 = v9;
        if (v53 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v54);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        if (v14)
          break;
        if (!--v6)
          return 1;
      }
    }
    return 0;
  }
  v15 = a2 + 4;
  v16 = MEMORY[0x24BDAC740];
  while (1)
  {
    v17 = std::istream::peek();
    if (v17 <= 0x7F)
      break;
    v18 = __maskrune(v17, 0x4000uLL);
    v19 = *(_QWORD *)(*a2 - 24);
    if (!v18)
      goto LABEL_26;
LABEL_24:
    if (!*(_DWORD *)((char *)v15 + v19))
      std::istream::get();
  }
  v19 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v16 + 4 * v17 + 60) & 0x4000) != 0)
    goto LABEL_24;
LABEL_26:
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 1;
  v42 = 0;
  memset(&v55, 0, sizeof(v55));
  if (std::istream::get() != 123)
    goto LABEL_77;
  while (2)
  {
    v20 = std::istream::peek();
    if (v20 > 0x7F)
    {
      v21 = __maskrune(v20, 0x4000uLL);
      v22 = *(_QWORD *)(*a2 - 24);
      if (!v21)
        break;
      goto LABEL_32;
    }
    v22 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v16 + 4 * v20 + 60) & 0x4000) != 0)
    {
LABEL_32:
      if (!*(_DWORD *)((char *)v15 + v22))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v22 + 32) & 2) != 0)
    goto LABEL_77;
  v23 = std::istream::peek() == 125;
  v24 = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v25 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v15 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v23)
  {
    if (!sub_239595A48((uint64_t)&v55, a2))
      goto LABEL_77;
    sub_2395E6330((uint64_t)&v42, (uint64_t)&v55);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v15 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v15 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_77;
LABEL_45:
    std::istream::get();
    while (1)
    {
      v27 = std::istream::peek();
      if (v27 > 0x7F)
      {
        v28 = __maskrune(v27, 0x4000uLL);
        v29 = *(_DWORD *)((char *)v15 + *(_QWORD *)(*a2 - 24));
        if (!v28)
          break;
        goto LABEL_50;
      }
      v29 = *(_DWORD *)((char *)v15 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v16 + 4 * v27 + 60) & 0x4000) == 0)
        break;
LABEL_50:
      if (!v29)
        goto LABEL_45;
    }
    if ((v29 & 2) == 0)
    {
      sub_2394988CC((uint64_t)v49);
      v41 = &v50;
      if (sub_239596128(a2))
      {
        LODWORD(v45) = -1;
        *(_QWORD *)&v43 = -1;
        *((_QWORD *)&v43 + 1) = -1;
        *((_QWORD *)&v45 + 1) = 0;
        v48 = 0;
        sub_2395EBEDC((uint64_t)&v43, v49, 0);
        v30 = sub_2395EC3C8(*a1, &v42);
        *(_OWORD *)v30 = v43;
        *(_OWORD *)(v30 + 16) = v44;
        *(_OWORD *)(v30 + 32) = v45;
        if ((__int128 *)v30 != &v43)
        {
          v31 = v46;
          *(_BYTE *)(v30 + 50) = v47;
          *(_WORD *)(v30 + 48) = v31;
        }
        *(_WORD *)(v30 + 51) = v48;
        for (j = std::istream::peek(); ; j = std::istream::peek())
        {
          v33 = j << 24;
          if (j << 24 == 738197504)
            goto LABEL_66;
          if (v33 == 2097152000)
            break;
          if (v33 <= 0x7F000000)
          {
            if ((*(_DWORD *)(v16 + 4 * (char)j + 60) & 0x4000) == 0)
              goto LABEL_65;
          }
          else if (!__maskrune((char)j, 0x4000uLL))
          {
            goto LABEL_65;
          }
          if ((*((_BYTE *)v15 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
          {
LABEL_65:
            if (v33 != 738197504)
              goto LABEL_67;
LABEL_66:
            std::istream::get();
            v23 = 0;
            goto LABEL_69;
          }
          std::istream::get();
        }
        v23 = 1;
LABEL_69:
        v34 = 0;
      }
      else
      {
LABEL_67:
        v23 = 0;
        v34 = 1;
      }
      v49[0] = v24;
      *(uint64_t *)((char *)v49 + *(_QWORD *)(v24 - 24)) = v39;
      v50 = v38;
      v51 = v25;
      if (v53 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v54);
      if (!v34)
        continue;
    }
    goto LABEL_77;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_77:
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    return 0;
  }
  v35 = std::istream::get();
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  return v35 == 125;
}

void sub_2395EBE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2395EBEDC(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  void *v20;
  void **v22;
  void *__p;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29[2];
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  _QWORD v37[2];
  _QWORD *v38;
  uint64_t v39;
  __int16 v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v44 = 0;
  v45 = 0;
  v43 = 0;
  v39 = 0;
  sub_2396157EC((uint64_t)v37, a3);
  v36 = 3;
  LODWORD(v35) = 6580596;
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADFF20;
  v5[1] = &v45;
  sub_23961580C((uint64_t)v37, (uint64_t)&v35, (uint64_t)v5);
  v34 = 3;
  LODWORD(v33) = 6580585;
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADFF20;
  v6[1] = &v44;
  sub_23961580C((uint64_t)v37, (uint64_t)&v33, (uint64_t)v6);
  v32 = 3;
  LODWORD(v31) = 6580582;
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE01C0;
  v7[1] = &v43;
  sub_23961580C((uint64_t)v37, (uint64_t)&v31, (uint64_t)v7);
  v30 = 4;
  strcpy((char *)v29, "proj");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADFFB0;
  v8[1] = &v42;
  sub_23961580C((uint64_t)v37, (uint64_t)v29, (uint64_t)v8);
  v28 = 3;
  LODWORD(v27) = 7498851;
  v9 = (_QWORD *)operator new();
  *v9 = &off_250AE02B0;
  v9[1] = &v40;
  sub_23961580C((uint64_t)v37, (uint64_t)&v27, (uint64_t)v9);
  v26 = 3;
  LODWORD(v25) = 6777958;
  v10 = (_QWORD *)operator new();
  *v10 = &off_250ADF420;
  v10[1] = (char *)&v39 + 4;
  sub_23961580C((uint64_t)v37, (uint64_t)&v25, (uint64_t)v10);
  v24 = 3;
  LODWORD(__p) = 7630195;
  v11 = (_QWORD *)operator new();
  *v11 = &off_250ADF420;
  v11[1] = &v39;
  sub_23961580C((uint64_t)v37, (uint64_t)&__p, (uint64_t)v11);
  if (v24 < 0)
  {
    operator delete(__p);
    if ((v26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v28 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v25);
  if ((v28 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v30 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(v27);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v32 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(v29[0]);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v34 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_27:
    operator delete(v33);
    if ((v36 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_26:
  operator delete(v31);
  if (v34 < 0)
    goto LABEL_27;
LABEL_7:
  if ((v36 & 0x80000000) == 0)
    goto LABEL_8;
LABEL_28:
  operator delete(v35);
LABEL_8:
  if (sub_23959479C((uint64_t)v37, a2))
  {
    v13 = v44;
    v12 = v45;
    v14 = v43;
    v15 = BYTE4(v39);
    v16 = v39;
    *(_OWORD *)(a1 + 16) = v42;
    *(_WORD *)(a1 + 48) = v40;
    *(_BYTE *)(a1 + 50) = v41;
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v13;
    *(_DWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = 0;
    *(_WORD *)(a1 + 51) = v15 | (v16 << 8);
  }
  v17 = v38;
  if (v38)
  {
    do
    {
      v18 = v17[5];
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v17 = (_QWORD *)*v17;
    }
    while (v17);
    v19 = (void **)v38;
    if (v38)
    {
      do
      {
        v22 = (void **)*v19;
        if (*((char *)v19 + 39) < 0)
          operator delete(v19[2]);
        operator delete(v19);
        v19 = v22;
      }
      while (v22);
    }
  }
  v20 = (void *)v37[0];
  v37[0] = 0;
  if (v20)
    operator delete(v20);
  return a2;
}

void sub_2395EC290(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_2395EC2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a27);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a44 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a33);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a39);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_8:
    sub_2395905C0(v50 - 136);
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(a45);
  sub_2395905C0(v50 - 136);
  _Unwind_Resume(a1);
}

unint64_t sub_2395EC3C8(char **a1, _DWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  int v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;

  v4 = *a2;
  v5 = *a1;
  v6 = a1[1];
  v7 = (v6 - *a1) >> 6;
  if (v7 <= v4)
  {
    v10 = (a1[2] - v5) >> 6;
    v11 = (2 * v4 + 2);
    if (v10 > v4 || v10 >= v11)
    {
      v13 = *a1;
      v14 = a1[1];
    }
    else
    {
      v18 = v11 << 6;
      v19 = (char *)operator new(v11 << 6);
      v14 = &v19[64 * v7];
      v13 = v14;
      if (v6 != v5)
      {
        v20 = 0;
        do
        {
          v21 = &v14[v20];
          *((_DWORD *)v21 - 16) = *(_DWORD *)&v6[v20 - 64];
          *(_OWORD *)(v21 - 56) = *(_OWORD *)&v6[v20 - 56];
          *(_OWORD *)(v21 - 40) = *(_OWORD *)&v6[v20 - 40];
          *(_OWORD *)(v21 - 24) = *(_OWORD *)&v6[v20 - 24];
          v22 = *(_WORD *)&v6[v20 - 8];
          *(v21 - 6) = v6[v20 - 6];
          *((_WORD *)v21 - 4) = v22;
          *(_WORD *)(v21 - 5) = *(_WORD *)&v6[v20 - 5];
          v20 -= 64;
        }
        while (&v6[v20] != v5);
        v13 = &v14[v20];
      }
      *a1 = v13;
      a1[1] = v14;
      a1[2] = &v19[v18];
      if (v5)
      {
        operator delete(v5);
        LODWORD(v4) = *a2;
        v13 = *a1;
        v14 = a1[1];
      }
    }
    v15 = (v4 + 1);
    v23 = -1;
    v24 = -1;
    v25 = -1;
    v26 = -1;
    v27 = 0;
    v28 = 0;
    v16 = (v14 - v13) >> 6;
    if (v15 <= v16)
    {
      if (v15 < v16)
        a1[1] = &v13[64 * v15];
    }
    else
    {
      sub_2395EC584((void **)a1, v15 - v16, (uint64_t)&v23);
      LODWORD(v4) = *a2;
      v13 = *a1;
    }
    v8 = v4;
    v5 = v13;
    v9 = &v13[64 * (unint64_t)v4];
    if (*(_DWORD *)v9 == -1)
      goto LABEL_15;
  }
  else
  {
    v8 = *a2;
    v9 = &v5[64 * v4];
    if (*(_DWORD *)v9 == -1)
LABEL_15:
      ++a1[3];
  }
  *(_DWORD *)v9 = v8;
  return (unint64_t)&v5[64 * (unint64_t)*a2 + 8];
}

void sub_2395EC584(void **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int16 v14;
  char *v15;
  char *v16;
  char *v17;
  char v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int16 v24;

  v6 = (char *)a1[1];
  v7 = a1[2];
  if (a2 <= (v7 - v6) >> 6)
  {
    if (a2)
    {
      v13 = &v6[64 * a2];
      do
      {
        *(_DWORD *)v6 = *(_DWORD *)a3;
        *(_OWORD *)(v6 + 8) = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(v6 + 24) = *(_OWORD *)(a3 + 24);
        *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 40);
        v14 = *(_WORD *)(a3 + 56);
        v6[58] = *(_BYTE *)(a3 + 58);
        *((_WORD *)v6 + 28) = v14;
        *(_WORD *)(v6 + 59) = *(_WORD *)(a3 + 59);
        v6 += 64;
      }
      while (v6 != v13);
      v6 = v13;
    }
    a1[1] = v6;
  }
  else
  {
    v8 = (v6 - (_BYTE *)*a1) >> 6;
    v9 = v8 + a2;
    if ((v8 + a2) >> 58)
      sub_2394189F8();
    v10 = v7 - (_BYTE *)*a1;
    if (v10 >> 5 > v9)
      v9 = v10 >> 5;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0)
      v11 = 0x3FFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 58)
        sub_239418A80();
      v12 = (char *)operator new(v11 << 6);
    }
    else
    {
      v12 = 0;
    }
    v15 = &v12[64 * v8];
    v16 = &v15[64 * a2];
    v17 = v15;
    do
    {
      *(_DWORD *)v17 = *(_DWORD *)a3;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v17 + 24) = *(_OWORD *)(a3 + 24);
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(a3 + 40);
      v18 = *(_BYTE *)(a3 + 58);
      *((_WORD *)v17 + 28) = *(_WORD *)(a3 + 56);
      v17[58] = v18;
      *(_WORD *)(v17 + 59) = *(_WORD *)(a3 + 59);
      v17 += 64;
    }
    while (v17 != v16);
    v19 = &v12[64 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      v22 = 0;
      do
      {
        v23 = &v15[v22];
        *((_DWORD *)v23 - 16) = *(_DWORD *)&v20[v22 - 64];
        *(_OWORD *)(v23 - 56) = *(_OWORD *)&v20[v22 - 56];
        *(_OWORD *)(v23 - 40) = *(_OWORD *)&v20[v22 - 40];
        *(_OWORD *)(v23 - 24) = *(_OWORD *)&v20[v22 - 24];
        v24 = *(_WORD *)&v20[v22 - 8];
        *(v23 - 6) = v20[v22 - 6];
        *((_WORD *)v23 - 4) = v24;
        *(_WORD *)(v23 - 5) = *(_WORD *)&v20[v22 - 5];
        v22 -= 64;
      }
      while (&v20[v22] != v21);
      v20 = (char *)*a1;
      v15 += v22;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

uint64_t *sub_2395EC77C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395ECA6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395ECA84(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395ECAA8(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395ECB24(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395ECAE4(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395ED3F0(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395ECB24(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  void *v15;

  sub_2396157EC((uint64_t)v14, a3);
  v13 = 10;
  strcpy((char *)__p, "file_paths");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0490;
  v5[1] = a1;
  sub_23961580C((uint64_t)v14, (uint64_t)__p, (uint64_t)v5);
  if (v13 < 0)
    operator delete(__p[0]);
  sub_2395902F0((uint64_t)v14, a2);
  v6 = v15;
  if (v15)
  {
    do
    {
      v7 = v6[5];
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    v8 = (void **)v15;
    if (v15)
    {
      do
      {
        v11 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v11;
      }
      while (v11);
    }
  }
  v9 = v14[0];
  v14[0] = 0;
  if (v9)
    operator delete(v9);
  return a2;
}

void sub_2395ECC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395ECC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_2395905C0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2395ECC80(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395ECCA4(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395ECD24((uint64_t)&v5, (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395ECCF0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t sub_2395ECD24(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      v7 = 0;
      v8 = *(uint64_t **)(*(_QWORD *)a1 + 16);
      do
      {
        if (v8)
        {
          v11 = 0;
          v9 = v8;
          do
          {
            v9 = (uint64_t *)*v9;
            v10 = v11 + 1;
          }
          while (v11++ <= 0x7FFFFFFD && v9 != 0);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        sub_2395ECE80(v8, v9, v10, a2, 1);
        v7 += 0x7FFFFFFFLL;
        v8 = v9;
      }
      while (v7 < *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
  }
  else
  {
    sub_2395ECE80(*(uint64_t **)(*(_QWORD *)a1 + 16), 0, v5, a2, a3);
  }
  return a2;
}

uint64_t sub_2395ECE80(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  void *__p;
  int v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  _DWORD v30[40];
  __int128 __dst;
  uint64_t v32;
  int v33;

  if (!a5)
  {
    std::ostream::put();
    if (a1 == a2)
    {
LABEL_19:
      std::ostream::put();
      return 1;
    }
    v10 = *MEMORY[0x24BEDB7F0];
    v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v13 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      sub_2394988CC((uint64_t)v25);
      std::ostream::operator<<();
      std::stringbuf::str();
      std::ostream::put();
      std::ostream::write();
      std::ostream::put();
      std::ostream::put();
      if (*((char *)a1 + 47) < 0)
      {
        sub_23941A7F8(&__dst, (void *)a1[3], a1[4]);
      }
      else
      {
        __dst = *(_OWORD *)(a1 + 3);
        v32 = a1[5];
      }
      sub_2395955F0((uint64_t)&__dst, a4, 0);
      if ((SHIBYTE(v32) & 0x80000000) == 0)
        break;
      operator delete((void *)__dst);
      a1 = (uint64_t *)*a1;
      if (a1 != a2)
        goto LABEL_14;
LABEL_15:
      if ((char)v24 < 0)
        operator delete(__p);
      v25[0] = v10;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v10 - 24)) = v12;
      v26 = v11;
      v27 = v13;
      if (v29 < 0)
        operator delete(v28);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v30);
      if (a1 == a2)
        goto LABEL_19;
    }
    a1 = (uint64_t *)*a1;
    if (a1 == a2)
      goto LABEL_15;
LABEL_14:
    std::ostream::put();
    goto LABEL_15;
  }
  std::ostream::put();
  if (a3 >> 31)
    return 0;
  v21 = a3;
  v30[39] = a3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if (a1 != a2)
  {
    v14 = 0;
    v15 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v18 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      sub_2394988CC((uint64_t)v25);
      std::ostream::operator<<();
      std::stringbuf::str();
      std::ostream::put();
      v19 = v24;
      if ((v24 & 0x80u) != 0)
        v19 = v23;
      LODWORD(__dst) = v19;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (*((char *)a1 + 47) < 0)
      {
        sub_23941A7F8(&__dst, (void *)a1[3], a1[4]);
      }
      else
      {
        __dst = *(_OWORD *)(a1 + 3);
        v32 = a1[5];
      }
      std::ostream::put();
      v20 = HIBYTE(v32);
      if (v32 < 0)
        v20 = DWORD2(__dst);
      v33 = v20;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (SHIBYTE(v32) < 0)
      {
        operator delete((void *)__dst);
        if ((char)v24 < 0)
LABEL_35:
          operator delete(__p);
      }
      else if ((char)v24 < 0)
      {
        goto LABEL_35;
      }
      v25[0] = v15;
      *(_QWORD *)((char *)v25 + *(_QWORD *)(v15 - 24)) = v17;
      v26 = v16;
      v27 = v18;
      if (v29 < 0)
        operator delete(v28);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v30);
      a1 = (uint64_t *)*a1;
      ++v14;
      if (a1 == a2)
        return v14 == v21;
    }
  }
  v14 = 0;
  return v14 == v21;
}

void sub_2395ED33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395ED350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395ED364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 105) < 0)
  {
    operator delete(*(void **)(v24 - 128));
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      sub_239498ABC((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  sub_239498ABC((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395ED3F0(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void **v11;
  void *__p[2];
  char v13;
  void *v14[2];
  void *v15;

  sub_2396157EC((uint64_t)v14, a3);
  v13 = 10;
  strcpy((char *)__p, "file_paths");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE04C0;
  v5[1] = a1;
  sub_23961580C((uint64_t)v14, (uint64_t)__p, (uint64_t)v5);
  if (v13 < 0)
    operator delete(__p[0]);
  sub_23959479C((uint64_t)v14, a2);
  v6 = v15;
  if (v15)
  {
    do
    {
      v7 = v6[5];
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    v8 = (void **)v15;
    if (v15)
    {
      do
      {
        v11 = (void **)*v8;
        if (*((char *)v8 + 39) < 0)
          operator delete(v8[2]);
        operator delete(v8);
        v8 = v11;
      }
      while (v11);
    }
  }
  v9 = v14[0];
  v14[0] = 0;
  if (v9)
    operator delete(v9);
  return a2;
}

void sub_2395ED510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395ED524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_2395905C0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2395ED54C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395ED570(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395ECD24((uint64_t)&v5, (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395ED5BC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395ED60C(&v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395ED60C(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395ED70C(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395ED70C(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395ED70C(uint64_t *a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  std::string *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char i;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  std::string *v32;
  std::string::size_type size;
  uint64_t v34;
  std::string *v35;
  int j;
  unsigned int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  std::string v43;
  uint64_t *v44;
  std::string __str;
  uint64_t v46[2];
  uint64_t v47;
  uint64_t v48;
  void *__p;
  char v50;
  _BYTE v51[152];
  unint64_t v52;
  std::string v53;

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (!*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      if (!v5)
        return 1;
      v6 = v5;
      v7 = *MEMORY[0x24BEDB7F0];
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v10 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        memset(&v53, 0, sizeof(v53));
        v11 = std::istream::get();
        v12 = sub_2396162D4((uint64_t)a2, v11);
        if (v12)
        {
          std::string::resize(&v53, v12, 0);
          std::istream::read();
        }
        else if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
          *v53.__r_.__value_.__l.__data_ = 0;
          v53.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v53.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
        }
        v52 = 0;
        sub_239593804((uint64_t)v46, (uint64_t)&v53, 24);
        MEMORY[0x23B83DD1C](v46, &v52);
        memset(&__str, 0, sizeof(__str));
        sub_2395EDE34((uint64_t)&__str, a2, 1);
        v13 = *a1;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
        v14 = (std::string *)sub_2395A09DC(v13, &v52, (uint64_t)&unk_239EC6E98, (uint64_t **)&v43);
        std::string::operator=(v14 + 1, &__str);
        v15 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v46[0] = v7;
        *(uint64_t *)((char *)v46 + *(_QWORD *)(v7 - 24)) = v8;
        v47 = v9;
        v48 = v10;
        if (v50 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v51);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (v15)
          break;
        if (!--v6)
          return 1;
      }
    }
    return 0;
  }
  v16 = a2 + 4;
  v17 = MEMORY[0x24BDAC740];
  while (1)
  {
    v18 = std::istream::peek();
    if (v18 <= 0x7F)
      break;
    v19 = __maskrune(v18, 0x4000uLL);
    v20 = *(_QWORD *)(*a2 - 24);
    if (!v19)
      goto LABEL_26;
LABEL_24:
    if (!*(_DWORD *)((char *)v16 + v20))
      std::istream::get();
  }
  v20 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) != 0)
    goto LABEL_24;
LABEL_26:
  if ((*((_BYTE *)a2 + v20 + 32) & 2) != 0)
    return 1;
  v52 = 0;
  memset(&__str, 0, sizeof(__str));
  if (std::istream::get() != 123)
    goto LABEL_88;
  while (2)
  {
    v21 = std::istream::peek();
    if (v21 > 0x7F)
    {
      v22 = __maskrune(v21, 0x4000uLL);
      v23 = *(_QWORD *)(*a2 - 24);
      if (!v22)
        break;
      goto LABEL_32;
    }
    v23 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v17 + 4 * v21 + 60) & 0x4000) != 0)
    {
LABEL_32:
      if (!*(_DWORD *)((char *)v16 + v23))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v23 + 32) & 2) != 0)
    goto LABEL_88;
  v24 = std::istream::peek() == 125;
  v25 = *MEMORY[0x24BEDB7F0];
  v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v26 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v24)
  {
    if (!sub_239595A48((uint64_t)&__str, a2))
      goto LABEL_88;
    sub_2395EDF80((uint64_t)&v52, (uint64_t)&__str);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_88;
LABEL_45:
    std::istream::get();
    while (1)
    {
      v28 = std::istream::peek();
      if (v28 > 0x7F)
      {
        v29 = __maskrune(v28, 0x4000uLL);
        v30 = *(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24));
        if (!v29)
          break;
        goto LABEL_50;
      }
      v30 = *(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v17 + 4 * v28 + 60) & 0x4000) == 0)
        break;
LABEL_50:
      if (!v30)
        goto LABEL_45;
    }
    if ((v30 & 2) == 0)
    {
      sub_2394988CC((uint64_t)v46);
      v44 = &v47;
      if (sub_239596128(a2))
      {
        memset(&v43, 0, sizeof(v43));
        memset(&v53, 0, sizeof(v53));
        sub_239595A48((uint64_t)&v53, v46);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        {
          *v43.__r_.__value_.__l.__data_ = 0;
          v43.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v43.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v43.__r_.__value_.__s + 23) = 0;
        }
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v53;
        else
          v32 = (std::string *)v53.__r_.__value_.__r.__words[0];
        size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v53.__r_.__value_.__l.__size_;
        sub_23948900C(&v43, v32, (std::string *)((char *)v32 + size));
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        v34 = *a1;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
        v35 = (std::string *)sub_2395A09DC(v34, &v52, (uint64_t)&unk_239EC6E98, (uint64_t **)&v53);
        std::string::operator=(v35 + 1, &v43);
        for (j = std::istream::peek(); ; j = std::istream::peek())
        {
          v37 = j << 24;
          if (j << 24 == 738197504)
            goto LABEL_75;
          if (v37 == 2097152000)
          {
            v24 = 1;
            v31 = 0;
            if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_79;
            goto LABEL_78;
          }
          if (v37 <= 0x7F000000)
          {
            if ((*(_DWORD *)(v17 + 4 * (char)j + 60) & 0x4000) == 0)
              break;
          }
          else if (!__maskrune((char)j, 0x4000uLL))
          {
            break;
          }
          if ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            break;
          std::istream::get();
        }
        if (v37 == 738197504)
        {
LABEL_75:
          std::istream::get();
          v24 = 0;
          v31 = 0;
          if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_78;
        }
        v24 = 0;
        v31 = 1;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
LABEL_78:
          operator delete(v43.__r_.__value_.__l.__data_);
      }
      else
      {
        v24 = 0;
        v31 = 1;
      }
LABEL_79:
      v46[0] = v25;
      *(uint64_t *)((char *)v46 + *(_QWORD *)(v25 - 24)) = v41;
      v47 = v40;
      v48 = v26;
      if (v50 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v51);
      if (!v31)
        continue;
    }
    goto LABEL_88;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_88:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return 0;
  }
  v38 = std::istream::get();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v38 == 125;
}

void sub_2395EDD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2395EDE34(uint64_t a1, uint64_t *a2, int a3)
{
  int v5;
  unsigned int v6;
  std::string *v7;
  std::string::size_type size;
  std::string v10;

  memset(&v10, 0, sizeof(v10));
  if (a3)
  {
    v5 = std::istream::get();
    v6 = sub_2396162D4((uint64_t)a2, v5);
    if (v6)
    {
      std::string::resize(&v10, v6, 0);
      std::istream::read();
    }
    else if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      *v10.__r_.__value_.__l.__data_ = 0;
      v10.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v10.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
    }
  }
  else
  {
    sub_239595A48((uint64_t)&v10, a2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    **(_BYTE **)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
  }
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v10;
  else
    v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v10.__r_.__value_.__l.__size_;
  sub_23948900C((std::string *)a1, v7, (std::string *)((char *)v7 + size));
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return a2;
}

void sub_2395EDF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395EDF80(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_2394988CC((uint64_t)v9);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *(_QWORD *)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  sub_239458500(v10, v5, v6);
  MEMORY[0x23B83DD1C](v9, a1);
  v9[0] = *MEMORY[0x24BEDB7F0];
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23B83E250](&v12);
}

void sub_2395EE04C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EE064(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EE088(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395EE104(*(int64x2_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395EE0C4(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395EE2B0(*(float64x2_t **)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395EE104(int64x2_t *a1, _QWORD *a2, char a3)
{
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  void **v21;
  void *__p[2];
  void *v23;
  _OWORD v24[8];
  void *v25[2];
  char v26;

  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v9 = vzip1q_s64(*a1, v6);
  v10 = vzip1q_s64(v8, a1[6]);
  v8.i64[0] = vdupq_laneq_s64(v8, 1).u64[0];
  v11 = vzip2q_s64(*a1, v6);
  v8.i64[1] = a1[6].i64[1];
  v12 = vzip1q_s64(v4, v5);
  v13 = vzip1q_s64(v7, a1[7]);
  v14 = vzip2q_s64(v4, v5);
  v5.i64[0] = vdupq_laneq_s64(v7, 1).u64[0];
  v5.i64[1] = a1[7].i64[1];
  v24[1] = v10;
  v24[0] = v9;
  v24[2] = v11;
  v24[3] = v8;
  v24[5] = v13;
  v24[4] = v12;
  v24[6] = v14;
  v24[7] = v5;
  sub_2396157EC((uint64_t)__p, a3);
  v26 = 9;
  strcpy((char *)v25, "transform");
  v15 = (_QWORD *)operator new();
  *v15 = &off_250AE0130;
  v15[1] = v24;
  sub_23961580C((uint64_t)__p, (uint64_t)v25, (uint64_t)v15);
  if (v26 < 0)
    operator delete(v25[0]);
  sub_2395902F0((uint64_t)__p, a2);
  v16 = v23;
  if (v23)
  {
    do
    {
      v17 = v16[5];
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v16 = (_QWORD *)*v16;
    }
    while (v16);
    v18 = (void **)v23;
    if (v23)
    {
      do
      {
        v21 = (void **)*v18;
        if (*((char *)v18 + 39) < 0)
          operator delete(v18[2]);
        operator delete(v18);
        v18 = v21;
      }
      while (v21);
    }
  }
  v19 = __p[0];
  __p[0] = 0;
  if (v19)
    operator delete(v19);
  return a2;
}

void sub_2395EE278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EE28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395EE2B0(float64x2_t *a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  unint64_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  int64x2_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  void *v21;
  void **v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  void *v38[2];
  void *v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  void *__p[2];
  char v49;
  _OWORD v50[8];
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  float64x2_t v58;

  sub_2396157EC((uint64_t)v38, a3);
  v49 = 9;
  strcpy((char *)__p, "transform");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0130;
  v5[1] = &v40;
  sub_23961580C((uint64_t)v38, (uint64_t)__p, (uint64_t)v5);
  if (v49 < 0)
    operator delete(__p[0]);
  if (sub_23959479C((uint64_t)v38, a2))
  {
    *(_QWORD *)&v13.f64[1] = v47.i64[1];
    v6 = (float64x2_t)vzip1q_s64(v40, v42);
    v7 = (float64x2_t)vzip1q_s64(v44, v46);
    *(_QWORD *)&v8.f64[0] = vdupq_laneq_s64(v44, 1).u64[0];
    *(_QWORD *)&v8.f64[1] = v46.i64[1];
    v9 = (float64x2_t)vzip2q_s64(v40, v42);
    v10 = (float64x2_t)vzip1q_s64(v41, v43);
    v11 = vdupq_laneq_s64(v45, 1).u64[0];
    *(_QWORD *)&v15.f64[1] = v47.i64[1];
    v51 = v6;
    v52 = v7;
    v53 = v9;
    v54 = v8;
    v55 = v10;
    v56 = vzip1q_s64(v45, v47);
    v57 = vzip2q_s64(v41, v43);
    v58 = v15;
    v12 = (float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
    v13.f64[0] = v8.f64[0];
    v14 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
    *(_QWORD *)&v15.f64[0] = v56.i64[0];
    v16 = vmulq_f64(v6, vmlaq_n_f64(vmulq_n_f64(v14, -v13.f64[0]), v12, *(double *)v56.i64));
    if (v7.f64[0]
       * vmlad_n_f64(-*(double *)&v42.i64[1] * *(double *)v41.i64, *(double *)&v40.i64[1], *(double *)v43.i64)
       + vsubq_f64(v16, (float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1)).f64[0] < 0.0)
    {
      *(_QWORD *)&v6.f64[1] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
      v9.f64[1] = v12.f64[0];
      v10.f64[1] = v14.f64[0];
      v51 = vnegq_f64(v6);
      *(_QWORD *)&v52.f64[0] = *(_OWORD *)&vnegq_f64(v7);
      v53 = vnegq_f64(v9);
      *(_QWORD *)&v54.f64[0] = *(_OWORD *)&vnegq_f64(v13);
      v55 = vnegq_f64(v10);
      v56.i64[0] = *(_OWORD *)&vnegq_f64(v15);
    }
    sub_239A22BE8(v50);
    v28 = v57;
    v29 = v58;
    v24 = v51;
    v25 = v52;
    v26 = v53;
    v27 = v54;
    v32 = (float64x2_t)v50[2];
    v33 = (float64x2_t)v50[3];
    v30 = (float64x2_t)v50[0];
    v31 = (float64x2_t)v50[1];
    v36 = (float64x2_t)v50[6];
    v37 = (float64x2_t)v50[7];
    v34 = (float64x2_t)v50[4];
    v35 = (float64x2_t)v50[5];
    v17 = v56;
    a1[4] = v55;
    a1[5] = (float64x2_t)v17;
    a1[6] = (float64x2_t)v28;
    a1[7] = v29;
    *a1 = v24;
    a1[1] = v25;
    a1[2] = v26;
    a1[3] = v27;
    a1[10] = v32;
    a1[11] = v33;
    a1[8] = v30;
    a1[9] = v31;
    a1[14] = v36;
    a1[15] = v37;
    a1[12] = v34;
    a1[13] = v35;
  }
  v18 = v39;
  if (v39)
  {
    do
    {
      v19 = v18[5];
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      v18 = (_QWORD *)*v18;
    }
    while (v18);
    v20 = (void **)v39;
    if (v39)
    {
      do
      {
        v23 = (void **)*v20;
        if (*((char *)v20 + 39) < 0)
          operator delete(v20[2]);
        operator delete(v20);
        v20 = v23;
      }
      while (v23);
    }
  }
  v21 = v38[0];
  v38[0] = 0;
  if (v21)
    operator delete(v21);
  return a2;
}

void sub_2395EE540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_2395905C0((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_2395EE558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (a68 < 0)
    operator delete(__p);
  sub_2395905C0((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_2395EE580(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EE5A4(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395EE624(*(_QWORD *)(a1 + 8), a2, a3, 0);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395EE5E4(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395EFE48(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395EE624(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[4];
  void *v18[2];
  void *v19;

  sub_2396157EC((uint64_t)v18, a3);
  HIBYTE(v17[2]) = 20;
  strcpy((char *)v17, "reference_source_map");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE0550;
  v7[1] = a1;
  sub_23961580C((uint64_t)v18, (uint64_t)v17, (uint64_t)v7);
  v16 = 10;
  strcpy((char *)__p, "view_pairs");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE0610;
  v8[1] = a1 + 40;
  sub_23961580C((uint64_t)v18, (uint64_t)__p, (uint64_t)v8);
  if ((v16 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v17[0]);
    if (a4)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17[2]) < 0)
    goto LABEL_6;
LABEL_3:
  if (a4)
  {
LABEL_4:
    sub_2396158C8(a2, (uint64_t)v18);
    goto LABEL_8;
  }
LABEL_7:
  sub_2395902F0((uint64_t)v18, a2);
LABEL_8:
  v9 = v19;
  if (v19)
  {
    do
    {
      v10 = v9[5];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = (void **)v19;
    if (v19)
    {
      do
      {
        v14 = (void **)*v11;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v14;
      }
      while (v14);
    }
  }
  v12 = v18[0];
  v18[0] = 0;
  if (v12)
    operator delete(v12);
  return a2;
}

void sub_2395EE7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EE7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_2395905C0((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_2395EE84C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EE870(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395EE8F0((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395EE8BC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395EE8F0(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      v7 = 0;
      v8 = *(_QWORD **)(*(_QWORD *)a1 + 16);
      do
      {
        if (v8)
        {
          v11 = 0;
          v9 = v8;
          do
          {
            v9 = (_QWORD *)*v9;
            v10 = v11 + 1;
          }
          while (v11++ <= 0x7FFFFFFD && v9 != 0);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        sub_2395EEA4C(v8, v9, v10, a2, 1);
        v7 += 0x7FFFFFFFLL;
        v8 = v9;
      }
      while (v7 < *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
  }
  else
  {
    sub_2395EEA4C(*(_QWORD **)(*(_QWORD *)a1 + 16), 0, v5, a2, a3);
  }
  return a2;
}

BOOL sub_2395EEA4C(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  void *__p;
  int v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  _DWORD v29[42];

  if (a5)
  {
    std::ostream::put();
    if (a3 >> 31)
    {
      return 0;
    }
    else
    {
      v20 = a3;
      v29[38] = a3;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (a1 == a2)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v15 = *MEMORY[0x24BEDB7F0];
        v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v18 = MEMORY[0x24BEDB848] + 16;
        do
        {
          sub_2394988CC((uint64_t)v24);
          std::ostream::operator<<();
          std::stringbuf::str();
          std::ostream::put();
          v19 = v23;
          if ((v23 & 0x80u) != 0)
            v19 = v22;
          v29[39] = v19;
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          sub_2395EEE54((uint64_t)(a1 + 3), a4, 1);
          if ((char)v23 < 0)
            operator delete(__p);
          v24[0] = v15;
          *(_QWORD *)((char *)v24 + *(_QWORD *)(v15 - 24)) = v16;
          v25 = v17;
          v26 = v18;
          if (v28 < 0)
            operator delete(v27);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v29);
          a1 = (_QWORD *)*a1;
          ++v14;
        }
        while (a1 != a2);
      }
      return v14 == v20;
    }
  }
  else
  {
    std::ostream::put();
    if (a1 != a2)
    {
      v10 = *MEMORY[0x24BEDB7F0];
      v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v13 = MEMORY[0x24BEDB848] + 16;
      do
      {
        sub_2394988CC((uint64_t)v24);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        std::ostream::write();
        std::ostream::put();
        std::ostream::put();
        sub_2395EEE54((uint64_t)(a1 + 3), a4, 0);
        a1 = (_QWORD *)*a1;
        if (a1 != a2)
          std::ostream::put();
        if ((char)v23 < 0)
          operator delete(__p);
        v24[0] = v10;
        *(_QWORD *)((char *)v24 + *(_QWORD *)(v10 - 24)) = v12;
        v25 = v11;
        v26 = v13;
        if (v28 < 0)
          operator delete(v27);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v29);
      }
      while (a1 != a2);
    }
    std::ostream::put();
    return 1;
  }
}

void sub_2395EEDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EEDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EEE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EEE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EEE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395EEE54(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  _QWORD v23[2];
  _QWORD *v24;

  sub_2396157EC((uint64_t)v23, a3);
  v22 = 5;
  strcpy((char *)v21, "d_min");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0580;
  v5[1] = a1 + 48;
  sub_23961580C((uint64_t)v23, (uint64_t)v21, (uint64_t)v5);
  v20 = 5;
  strcpy((char *)v19, "d_max");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE0580;
  v6[1] = a1 + 52;
  sub_23961580C((uint64_t)v23, (uint64_t)v19, (uint64_t)v6);
  v18 = 7;
  strcpy((char *)v17, "src_idx");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE05B0;
  v7[1] = a1;
  sub_23961580C((uint64_t)v23, (uint64_t)v17, (uint64_t)v7);
  v16 = 9;
  strcpy((char *)__p, "src_score");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE05E0;
  v8[1] = a1 + 24;
  sub_23961580C((uint64_t)v23, (uint64_t)__p, (uint64_t)v8);
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_19:
      operator delete(v19[0]);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_20;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17[0]);
  if (v20 < 0)
    goto LABEL_19;
LABEL_4:
  if ((v22 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_20:
  operator delete(v21[0]);
LABEL_5:
  sub_2395902F0((uint64_t)v23, a2);
  v9 = v24;
  if (v24)
  {
    do
    {
      v10 = v9[5];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = (void **)v24;
    if (v24)
    {
      do
      {
        v14 = (void **)*v11;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v14;
      }
      while (v14);
    }
  }
  v12 = (void *)v23[0];
  v23[0] = 0;
  if (v12)
    operator delete(v12);
  return a2;
}

void sub_2395EF0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395EF0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0(v32 - 80);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a27);
  sub_2395905C0(v32 - 80);
  _Unwind_Resume(a1);
}

void sub_2395EF17C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EF1A0(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395EF210(*(float **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395EF1DC()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t *sub_2395EF210(float *a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    return a2;
  }
  else
  {
    if (fmod(*a1, 1.0) == 0.0)
    {
      v5 = *a2;
      v6 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v7 = *((_QWORD *)v6 + 2);
      *((_DWORD *)v6 + 2) = *((_DWORD *)v6 + 2) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)a2 + *(_QWORD *)(v5 - 24) + 16) = 1;
      std::ostream::operator<<();
      v8 = *a2;
      *(uint64_t *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 16) = v7;
      *(_DWORD *)((char *)a2 + *(_QWORD *)(v8 - 24) + 8) &= 0xFFFFFEFB;
    }
    else
    {
      std::ostream::operator<<();
    }
    return a2;
  }
}

void sub_2395EF340(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EF364(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395AF49C(*(_QWORD **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395EF3A0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395EF3D8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EF3FC(uint64_t a1, uint64_t *a2, int a3)
{
  sub_239599224(*(uint64_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395EF438()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395EF470(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395EF494(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395EF504(*(uint64_t **)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395EF4D0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t sub_2395EF504(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 __p;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  if (a3)
  {
    v5 = (uint64_t *)*a1;
    v6 = (uint64_t *)a1[1];
    v7 = (unint64_t)v6 - *a1;
    if (v7 < 0x7FFFFFFF9)
    {
      sub_2395EFCA0(v5, v6, a2, v7 >> 3);
      return a2;
    }
    else
    {
      std::ostream::put();
      v8 = (a1[1] - *a1) >> 3;
      if (0x7FFFFFFF * (unint64_t)(v8 / 0x7FFFFFFF) >= v8)
        v9 = v8 / 0x7FFFFFFF;
      else
        v9 = v8 / 0x7FFFFFFF + 1;
      v17 = 2;
      v18 = v9;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v15) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v19 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v10 = a1[1] - *a1;
      if (v10)
      {
        v11 = 0;
        v12 = v10 >> 3;
        do
        {
          v15 = a1;
          v16 = 0;
          *(_QWORD *)&__p = v11;
          v11 += 0x7FFFFFFFLL;
          if (v12 >= v11)
            v12 = v11;
          *((_QWORD *)&__p + 1) = v12;
          sub_2395EF8E0(&__p, a2);
          v12 = (a1[1] - *a1) >> 3;
        }
        while (v11 < v12);
      }
      return a2;
    }
  }
  else
  {
    sub_2395EFD98(*a1, a1[1]);
    return a2;
  }
}

void sub_2395EF8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395EF8E0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_2395EFCA0((uint64_t *)(*v2 + 8 * *a1), (uint64_t *)(*v2 + 8 * a1[1]), a2, a1[1] - *a1);
}

void sub_2395EFC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395EFCA0(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *exception;
  uint64_t v11;
  uint64_t v12;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  while (a1 != a2)
  {
    v8 = *a1++;
    v11 = v8;
    sub_2395E2134((uint64_t)&v11, (uint64_t)&v12, a3, 2uLL);
  }
  return 1;
}

uint64_t sub_2395EFD98(uint64_t a1, uint64_t a2)
{
  std::ostream::put();
  if (a1 != a2)
  {
    while (1)
    {
      a1 += 8;
      std::ostream::put();
      std::ostream::operator<<();
      std::ostream::put();
      std::ostream::operator<<();
      std::ostream::put();
      if (a1 == a2)
        break;
      std::ostream::put();
    }
  }
  std::ostream::put();
  return 1;
}

uint64_t *sub_2395EFE48(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v12;
  void *v13[2];
  char v14;
  void *v15[4];
  void *__p[2];
  void *v17;

  sub_2396157EC((uint64_t)__p, a3);
  HIBYTE(v15[2]) = 20;
  strcpy((char *)v15, "reference_source_map");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0640;
  v5[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v15, (uint64_t)v5);
  v14 = 10;
  strcpy((char *)v13, "view_pairs");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE06A0;
  v6[1] = a1 + 40;
  sub_23961580C((uint64_t)__p, (uint64_t)v13, (uint64_t)v6);
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15[0]);
LABEL_3:
  sub_23959479C((uint64_t)__p, a2);
  v7 = v17;
  if (v17)
  {
    do
    {
      v8 = v7[5];
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = (void **)v17;
    if (v17)
    {
      do
      {
        v12 = (void **)*v9;
        if (*((char *)v9 + 39) < 0)
          operator delete(v9[2]);
        operator delete(v9);
        v9 = v12;
      }
      while (v12);
    }
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
  return a2;
}

void sub_2395EFFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395EFFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_2395905C0((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_2395F0058(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F007C(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395EE8F0((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395F00C8(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395F0118(&v5, a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395F0118(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395F0218(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395F0218(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395F0218(uint64_t *a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  void *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char i;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t v32;
  char *v33;
  int j;
  unsigned int v35;
  int v36;
  void *v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  unsigned int v43[3];
  unsigned int v44;
  void *v45[2];
  void *__p[2];
  __int128 v47;
  uint64_t v48;
  uint64_t v49[2];
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char v53;
  _BYTE v54[152];
  std::string v55;
  _DWORD *v56[2];

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (!*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      if (!v5)
        return 1;
      v6 = v5;
      v7 = *MEMORY[0x24BEDB7F0];
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v10 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        memset(&v55, 0, sizeof(v55));
        v11 = std::istream::get();
        v12 = sub_2396162D4((uint64_t)a2, v11);
        if (v12)
        {
          std::string::resize(&v55, v12, 0);
          std::istream::read();
        }
        else if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        {
          *v55.__r_.__value_.__l.__data_ = 0;
          v55.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v55.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v55.__r_.__value_.__s + 23) = 0;
        }
        v43[0] = 0;
        sub_239593804((uint64_t)v49, (uint64_t)&v55, 24);
        MEMORY[0x23B83DD10](v49, v43);
        v48 = 0;
        *(_OWORD *)__p = 0u;
        v47 = 0u;
        *(_OWORD *)v45 = 0u;
        sub_2395F0930((uint64_t)v45, a2, 1);
        v13 = *a1;
        v56[0] = v43;
        v14 = sub_2394A9B44(v13, v43, (uint64_t)&unk_239EC6E98, v56);
        if (v14 + 24 != (char *)v45)
        {
          sub_23942156C((_QWORD *)v14 + 3, (char *)v45[0], (char *)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          sub_23942156C((_QWORD *)v14 + 6, (char *)__p[1], (char *)v47, (uint64_t)(v47 - (unint64_t)__p[1]) >> 2);
        }
        v15 = __p[1];
        *((_QWORD *)v14 + 9) = v48;
        v16 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
        if (v15)
        {
          *(_QWORD *)&v47 = v15;
          operator delete(v15);
        }
        if (v45[0])
        {
          v45[1] = v45[0];
          operator delete(v45[0]);
        }
        v49[0] = v7;
        *(uint64_t *)((char *)v49 + *(_QWORD *)(v7 - 24)) = v8;
        v50 = v9;
        v51 = v10;
        if (v53 < 0)
          operator delete(v52);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v54);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        if (v16)
          break;
        if (!--v6)
          return 1;
      }
    }
    return 0;
  }
  v17 = a2 + 4;
  v18 = MEMORY[0x24BDAC740];
  while (1)
  {
    v19 = std::istream::peek();
    if (v19 <= 0x7F)
      break;
    v20 = __maskrune(v19, 0x4000uLL);
    v21 = *(_QWORD *)(*a2 - 24);
    if (!v20)
      goto LABEL_30;
LABEL_28:
    if (!*(_DWORD *)((char *)v17 + v21))
      std::istream::get();
  }
  v21 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v18 + 4 * v19 + 60) & 0x4000) != 0)
    goto LABEL_28;
LABEL_30:
  if ((*((_BYTE *)a2 + v21 + 32) & 2) != 0)
    return 1;
  v44 = 0;
  memset(&v55, 0, sizeof(v55));
  if (std::istream::get() != 123)
    goto LABEL_86;
  while (2)
  {
    v22 = std::istream::peek();
    if (v22 > 0x7F)
    {
      v23 = __maskrune(v22, 0x4000uLL);
      v24 = *(_QWORD *)(*a2 - 24);
      if (!v23)
        break;
      goto LABEL_36;
    }
    v24 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v18 + 4 * v22 + 60) & 0x4000) != 0)
    {
LABEL_36:
      if (!*(_DWORD *)((char *)v17 + v24))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v24 + 32) & 2) != 0)
    goto LABEL_86;
  v25 = std::istream::peek() == 125;
  v26 = *MEMORY[0x24BEDB7F0];
  v40 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v41 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v27 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v17 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v25)
  {
    if (!sub_239595A48((uint64_t)&v55, a2))
      goto LABEL_86;
    sub_2395E6330((uint64_t)&v44, (uint64_t)&v55);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v17 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v17 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_86;
LABEL_49:
    std::istream::get();
    while (1)
    {
      v29 = std::istream::peek();
      if (v29 > 0x7F)
      {
        v30 = __maskrune(v29, 0x4000uLL);
        v31 = *(_DWORD *)((char *)v17 + *(_QWORD *)(*a2 - 24));
        if (!v30)
          break;
        goto LABEL_54;
      }
      v31 = *(_DWORD *)((char *)v17 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v18 + 4 * v29 + 60) & 0x4000) == 0)
        break;
LABEL_54:
      if (!v31)
        goto LABEL_49;
    }
    if ((v31 & 2) == 0)
    {
      sub_2394988CC((uint64_t)v49);
      *(_QWORD *)v43 = &v50;
      if (sub_239596128(a2))
      {
        v48 = 0;
        *(_OWORD *)__p = 0u;
        v47 = 0u;
        *(_OWORD *)v45 = 0u;
        sub_2395F0930((uint64_t)v45, v49, 0);
        v32 = *a1;
        v56[0] = &v44;
        v33 = sub_2394A9B44(v32, &v44, (uint64_t)&unk_239EC6E98, v56);
        if (v33 + 24 != (char *)v45)
        {
          sub_23942156C((_QWORD *)v33 + 3, (char *)v45[0], (char *)v45[1], ((char *)v45[1] - (char *)v45[0]) >> 2);
          sub_23942156C((_QWORD *)v33 + 6, (char *)__p[1], (char *)v47, (uint64_t)(v47 - (unint64_t)__p[1]) >> 2);
        }
        *((_QWORD *)v33 + 9) = v48;
        for (j = std::istream::peek(); ; j = std::istream::peek())
        {
          v35 = j << 24;
          if (j << 24 == 738197504)
            goto LABEL_71;
          if (v35 == 2097152000)
          {
            v25 = 1;
            v36 = 0;
            v37 = __p[1];
            if (!__p[1])
              goto LABEL_75;
            goto LABEL_74;
          }
          if (v35 <= 0x7F000000)
          {
            if ((*(_DWORD *)(v18 + 4 * (char)j + 60) & 0x4000) == 0)
              break;
          }
          else if (!__maskrune((char)j, 0x4000uLL))
          {
            break;
          }
          if ((*((_BYTE *)v17 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            break;
          std::istream::get();
        }
        if (v35 == 738197504)
        {
LABEL_71:
          std::istream::get();
          v25 = 0;
          v36 = 0;
          v37 = __p[1];
          if (!__p[1])
            goto LABEL_75;
          goto LABEL_74;
        }
        v25 = 0;
        v36 = 1;
        v37 = __p[1];
        if (__p[1])
        {
LABEL_74:
          *(_QWORD *)&v47 = v37;
          operator delete(v37);
        }
LABEL_75:
        if (v45[0])
        {
          v45[1] = v45[0];
          operator delete(v45[0]);
        }
      }
      else
      {
        v25 = 0;
        v36 = 1;
      }
      v49[0] = v26;
      *(uint64_t *)((char *)v49 + *(_QWORD *)(v26 - 24)) = v41;
      v50 = v40;
      v51 = v27;
      if (v53 < 0)
        operator delete(v52);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v54);
      if (!v36)
        continue;
    }
    goto LABEL_86;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_86:
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    return 0;
  }
  v38 = std::istream::get();
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  return v38 == 125;
}

void sub_2395F08C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 105) < 0)
    operator delete(*(void **)(v24 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2395F0930(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  _QWORD v23[2];
  _QWORD *v24;

  sub_2396157EC((uint64_t)v23, a3);
  v22 = 5;
  strcpy((char *)v21, "d_min");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0670;
  v5[1] = a1 + 48;
  sub_23961580C((uint64_t)v23, (uint64_t)v21, (uint64_t)v5);
  v20 = 5;
  strcpy((char *)v19, "d_max");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE0670;
  v6[1] = a1 + 52;
  sub_23961580C((uint64_t)v23, (uint64_t)v19, (uint64_t)v6);
  v18 = 7;
  strcpy((char *)v17, "src_idx");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250ADF7B0;
  v7[1] = a1;
  sub_23961580C((uint64_t)v23, (uint64_t)v17, (uint64_t)v7);
  v16 = 9;
  strcpy((char *)__p, "src_score");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250ADF2A0;
  v8[1] = a1 + 24;
  sub_23961580C((uint64_t)v23, (uint64_t)__p, (uint64_t)v8);
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_19:
      operator delete(v19[0]);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_20;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17[0]);
  if (v20 < 0)
    goto LABEL_19;
LABEL_4:
  if ((v22 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_20:
  operator delete(v21[0]);
LABEL_5:
  sub_23959479C((uint64_t)v23, a2);
  v9 = v24;
  if (v24)
  {
    do
    {
      v10 = v9[5];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = (void **)v24;
    if (v24)
    {
      do
      {
        v14 = (void **)*v11;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v14;
      }
      while (v14);
    }
  }
  v12 = (void *)v23[0];
  v23[0] = 0;
  if (v12)
    operator delete(v12);
  return a2;
}

void sub_2395F0B94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395F0BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0(v32 - 80);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a27);
  sub_2395905C0(v32 - 80);
  _Unwind_Resume(a1);
}

void sub_2395F0C58(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F0C7C(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395EF210(*(float **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395F0CB8(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23959AA58(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

void sub_2395F0CFC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F0D20(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395EF504(*(uint64_t **)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395F0D5C(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2395F0D9C(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_2395F0D9C(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char **v12;

  v3 = (uint64_t)a2;
  v12 = (char **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_2395F0E9C(&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = (unint64_t)sub_2396162D4(v3, v6) >> 3;
  v8 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_2394FBB68((void **)a1, v10);
  }
  else if (!v9)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * v7;
  }
  std::istream::read();
  return v3;
}

BOOL sub_2395F0E9C(char ***a1, _QWORD *a2, int a3)
{
  int v4;
  unsigned int v5;
  std::string *v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t data_low;
  unint64_t **v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  _OWORD *v57;
  unint64_t *v58;
  uint64_t v59;
  __int128 v60;
  unint64_t v61;
  _BOOL8 result;
  char v63;
  std::string *v64;
  unsigned int v65;
  int v66;
  int v67;
  char *v68;
  char **v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int i;
  unsigned int v93;
  char v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  std::string *v105;
  uint64_t v106;
  std::string *v108;
  std::string *v109;
  _QWORD v110[11];
  char v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  std::string v116;
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = std::istream::get();
    if ((v4 - 196) <= 2)
    {
      v5 = sub_2396162D4((uint64_t)a2, v4);
      v108 = 0;
      v109 = 0;
      v110[0] = 0;
      sub_2394FBB68((void **)&v108, v5);
      std::istream::read();
      v6 = v109;
      if (v109 == v108)
      {
LABEL_69:
        if (v6)
        {
          v109 = v6;
          operator delete(v6);
        }
        return 1;
      }
      v7 = 0;
      v6 = v108;
      while (1)
      {
        v9 = *a1;
        v11 = (*a1)[1];
        v10 = (unint64_t)(*a1)[2];
        if ((unint64_t)v11 < v10)
        {
          *(_QWORD *)v11 = *((_QWORD *)&v6->__r_.__value_.__l.__data_ + v7);
          v8 = (uint64_t)(v11 + 8);
        }
        else
        {
          v12 = *v9;
          v13 = v11 - *v9;
          v14 = v13 >> 3;
          v15 = (v13 >> 3) + 1;
          if (v15 >> 61)
            sub_2394189F8();
          v16 = v10 - (_QWORD)v12;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            if (v17 >> 61)
              sub_239418A80();
            v18 = operator new(8 * v17);
            v19 = &v18[8 * v14];
            *(_QWORD *)v19 = *((_QWORD *)&v6->__r_.__value_.__l.__data_ + v7);
            v8 = (uint64_t)(v19 + 8);
            if (v11 != v12)
            {
LABEL_17:
              v20 = v11 - 8 - v12;
              if (v20 < 0x58)
                goto LABEL_148;
              if ((unint64_t)(v11 - &v18[v13]) < 0x20)
                goto LABEL_148;
              v21 = (v20 >> 3) + 1;
              v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
              v23 = &v11[-v22];
              v19 -= v22;
              v24 = &v18[8 * v14 - 16];
              v25 = v11 - 16;
              v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v27 = *(_OWORD *)v25;
                *(v24 - 1) = *((_OWORD *)v25 - 1);
                *v24 = v27;
                v24 -= 2;
                v25 -= 32;
                v26 -= 4;
              }
              while (v26);
              v11 = v23;
              if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_148:
                do
                {
                  v28 = *((_QWORD *)v11 - 1);
                  v11 -= 8;
                  *((_QWORD *)v19 - 1) = v28;
                  v19 -= 8;
                }
                while (v11 != v12);
              }
              v11 = *v9;
              *v9 = v19;
              v9[1] = (char *)v8;
              v9[2] = &v18[8 * v17];
              if (!v11)
                goto LABEL_6;
LABEL_27:
              operator delete(v11);
              goto LABEL_6;
            }
          }
          else
          {
            v18 = 0;
            v19 = (char *)(8 * v14);
            *(_QWORD *)(8 * v14) = *((_QWORD *)&v6->__r_.__value_.__l.__data_ + v7);
            v8 = 8 * v14 + 8;
            if (v11 != v12)
              goto LABEL_17;
          }
          *v9 = v19;
          v9[1] = (char *)v8;
          v9[2] = &v18[8 * v17];
          if (v11)
            goto LABEL_27;
        }
LABEL_6:
        v9[1] = (char *)v8;
        ++v7;
        v6 = v108;
        if (v7 >= ((char *)v109 - (char *)v108) >> 3)
          goto LABEL_69;
      }
    }
    if ((v4 & 0xFFFFFFFE) != 0xDC)
    {
      if (v4 == 223)
      {
        v115 = 0;
        memset(&v116, 0, sizeof(v116));
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
      }
      return 0;
    }
    v37 = sub_2396162D4((uint64_t)a2, v4);
    if (!v37)
      return 1;
    v38 = 0;
    v106 = v37;
    while (1)
    {
      v108 = &v116;
      v109 = 0;
      sub_2395E2258((uint64_t *)&v108, a2, 1);
      data_low = LODWORD(v116.__r_.__value_.__l.__data_);
      v40 = HIDWORD(v116.__r_.__value_.__r.__words[0]);
      v42 = (unint64_t **)*a1;
      v44 = (unint64_t *)(*a1)[1];
      v43 = (unint64_t)(*a1)[2];
      if ((unint64_t)v44 < v43)
      {
        *v44 = LODWORD(v116.__r_.__value_.__l.__data_) | ((unint64_t)HIDWORD(v116.__r_.__value_.__r.__words[0]) << 32);
        v39 = (uint64_t)(v44 + 1);
      }
      else
      {
        v45 = *v42;
        v46 = (char *)v44 - (char *)*v42;
        v47 = v46 >> 3;
        v48 = (v46 >> 3) + 1;
        if (v48 >> 61)
          sub_2394189F8();
        v49 = v43 - (_QWORD)v45;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          if (v50 >> 61)
            sub_239418A80();
          v51 = operator new(8 * v50);
          v52 = (unint64_t *)&v51[8 * v47];
          *v52 = data_low | (v40 << 32);
          v39 = (uint64_t)(v52 + 1);
          if (v44 != v45)
          {
LABEL_58:
            v53 = (char *)(v44 - 1) - (char *)v45;
            if (v53 < 0x58)
              goto LABEL_149;
            if ((unint64_t)((char *)v44 - &v51[v46]) < 0x20)
              goto LABEL_149;
            v54 = (v53 >> 3) + 1;
            v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
            v56 = &v44[v55 / 0xFFFFFFFFFFFFFFF8];
            v52 = (unint64_t *)((char *)v52 - v55);
            v57 = &v51[8 * v47 - 16];
            v58 = v44 - 2;
            v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v60 = *(_OWORD *)v58;
              *(v57 - 1) = *((_OWORD *)v58 - 1);
              *v57 = v60;
              v57 -= 2;
              v58 -= 4;
              v59 -= 4;
            }
            while (v59);
            v44 = v56;
            if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_149:
              do
              {
                v61 = *--v44;
                *--v52 = v61;
              }
              while (v44 != v45);
            }
            v44 = *v42;
            *v42 = v52;
            v42[1] = (unint64_t *)v39;
            v42[2] = (unint64_t *)&v51[8 * v50];
            if (!v44)
              goto LABEL_47;
LABEL_68:
            operator delete(v44);
            goto LABEL_47;
          }
        }
        else
        {
          v51 = 0;
          v52 = (unint64_t *)(8 * v47);
          *(_QWORD *)(8 * v47) = LODWORD(v116.__r_.__value_.__l.__data_) | ((unint64_t)HIDWORD(v116.__r_.__value_.__r.__words[0]) << 32);
          v39 = 8 * v47 + 8;
          if (v44 != v45)
            goto LABEL_58;
        }
        *v42 = v52;
        v42[1] = (unint64_t *)v39;
        v42[2] = (unint64_t *)&v51[8 * v50];
        if (v44)
          goto LABEL_68;
      }
LABEL_47:
      v42[1] = (unint64_t *)v39;
      if (++v38 == v106)
        return 1;
    }
  }
  v29 = a2 + 4;
  v30 = MEMORY[0x24BDAC740];
  while (1)
  {
    v31 = std::istream::peek();
    if (v31 <= 0x7F)
      break;
    v32 = __maskrune(v31, 0x4000uLL);
    v33 = *(_QWORD *)(*a2 - 24);
    if (!v32)
      goto LABEL_35;
LABEL_33:
    if (!*(_DWORD *)((char *)v29 + v33))
      std::istream::get();
  }
  v33 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v30 + 4 * v31 + 60) & 0x4000) != 0)
    goto LABEL_33;
LABEL_35:
  if ((*((_BYTE *)a2 + v33 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v34 = std::istream::peek();
    if (v34 > 0x7F)
    {
      v35 = __maskrune(v34, 0x4000uLL);
      v36 = *(_QWORD *)(*a2 - 24);
      if (!v35)
        break;
      goto LABEL_41;
    }
    v36 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v30 + 4 * v34 + 60) & 0x4000) != 0)
    {
LABEL_41:
      if (!*(_DWORD *)((char *)v29 + v36))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v36 + 32) & 2) != 0)
    return 0;
  v63 = 0;
  v64 = (std::string *)*MEMORY[0x24BEDB7F0];
  v104 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v105 = *(std::string **)(MEMORY[0x24BEDB7F0] + 64);
  v103 = MEMORY[0x24BEDB848] + 16;
LABEL_75:
  if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v63 & 1) == 0)
  {
    while (1)
    {
      v65 = std::istream::peek();
      if (v65 <= 0x7F)
      {
        v67 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v30 + 4 * v65 + 60) & 0x4000) == 0)
        {
LABEL_83:
          if ((v67 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v108);
          if (!sub_239596128(a2))
          {
LABEL_122:
            v94 = 0;
            v63 = 0;
            goto LABEL_125;
          }
          v68 = (char *)v110 + *(_QWORD *)(v110[0] - 24);
          if ((v68[32] & 5) != 0)
            goto LABEL_111;
          (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v68 + 5)
                                                                                              + 32))(&v116, *((_QWORD *)v68 + 5), 0, 1, 16);
          if (v117 < 1)
            goto LABEL_111;
          v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
          v116.__r_.__value_.__l.__size_ = 0;
          sub_2395E2258((uint64_t *)&v116, &v108, 0);
          v69 = *a1;
          v71 = (*a1)[1];
          v70 = (unint64_t)(*a1)[2];
          if ((unint64_t)v71 < v70)
          {
            *(_QWORD *)v71 = v113 | ((unint64_t)v114 << 32);
            v72 = (uint64_t)(v71 + 8);
            goto LABEL_110;
          }
          v102 = *a1;
          v73 = *v69;
          v74 = v71 - *v69;
          v75 = v74 >> 3;
          v76 = (v74 >> 3) + 1;
          if (v76 >> 61)
            sub_2394189F8();
          v77 = v70 - (_QWORD)v73;
          if (v77 >> 2 > v76)
            v76 = v77 >> 2;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8)
            v78 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v78 = v76;
          if (!v78)
          {
            v80 = 0;
            v81 = (char *)(8 * v75);
            *(_QWORD *)(8 * v75) = v113 | ((unint64_t)v114 << 32);
            v72 = 8 * v75 + 8;
            if (v71 != v73)
              goto LABEL_98;
LABEL_101:
            v69 = v102;
            goto LABEL_108;
          }
          v98 = (char *)(v71 - *v69);
          v99 = v114;
          v100 = v113;
          v101 = v74 >> 3;
          if (v78 >> 61)
            sub_239418A80();
          v79 = v78;
          v80 = operator new(8 * v78);
          v78 = v79;
          v75 = v101;
          v74 = (uint64_t)v98;
          v81 = &v80[8 * v101];
          *(_QWORD *)v81 = v100 | (v99 << 32);
          v72 = (uint64_t)(v81 + 8);
          if (v71 == v73)
            goto LABEL_101;
LABEL_98:
          v82 = v71 - 8 - v73;
          if (v82 < 0x58)
          {
            v69 = v102;
            goto LABEL_106;
          }
          v69 = v102;
          if ((unint64_t)(v71 - &v80[v74]) < 0x20)
            goto LABEL_150;
          v83 = (v82 >> 3) + 1;
          v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
          v85 = &v71[-v84];
          v81 -= v84;
          v86 = &v80[8 * v75 - 16];
          v87 = v71 - 16;
          v88 = v83 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v89 = *(_OWORD *)v87;
            *(v86 - 1) = *((_OWORD *)v87 - 1);
            *v86 = v89;
            v86 -= 2;
            v87 -= 32;
            v88 -= 4;
          }
          while (v88);
          v71 = v85;
          if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_150:
            do
            {
LABEL_106:
              v90 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *((_QWORD *)v81 - 1) = v90;
              v81 -= 8;
            }
            while (v71 != v73);
          }
          v71 = *v69;
LABEL_108:
          *v69 = v81;
          v69[1] = (char *)v72;
          v69[2] = &v80[8 * v78];
          if (v71)
          {
            v91 = v72;
            operator delete(v71);
            v72 = v91;
          }
LABEL_110:
          v69[1] = (char *)v72;
LABEL_111:
          for (i = std::istream::peek(); ; i = std::istream::peek())
          {
            v93 = i << 24;
            if (i << 24 == 738197504)
              goto LABEL_121;
            if (v93 == 1560281088)
              break;
            if (v93 <= 0x7F000000)
            {
              if ((*(_DWORD *)(v30 + 4 * (char)i + 60) & 0x4000) == 0)
                goto LABEL_120;
            }
            else if (!__maskrune((char)i, 0x4000uLL))
            {
              goto LABEL_120;
            }
            if ((*((_BYTE *)v29 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
            {
LABEL_120:
              if (v93 != 738197504)
                goto LABEL_122;
LABEL_121:
              std::istream::get();
              v63 = 0;
              goto LABEL_124;
            }
            std::istream::get();
          }
          v63 = 1;
LABEL_124:
          v94 = 1;
LABEL_125:
          v108 = v64;
          *(std::string **)((char *)&v108 + v64[-1].__r_.__value_.__r.__words[0]) = v105;
          v110[0] = v104;
          v110[1] = v103;
          if (v111 < 0)
            operator delete((void *)v110[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v112);
          result = 0;
          if ((v94 & 1) == 0)
            return result;
          goto LABEL_75;
        }
      }
      else
      {
        v66 = __maskrune(v65, 0x4000uLL);
        v67 = *(_DWORD *)((char *)v29 + *(_QWORD *)(*a2 - 24));
        if (!v66)
          goto LABEL_83;
      }
      if (!v67)
        std::istream::get();
    }
  }
  while (1)
  {
    v95 = std::istream::peek();
    v96 = v95 <= 0x7F ? *(_DWORD *)(v30 + 4 * v95 + 60) & 0x4000 : __maskrune(v95, 0x4000uLL);
    v97 = *(_QWORD *)(*a2 - 24);
    if (!v96)
      break;
    if (!*(_DWORD *)((char *)v29 + v97))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v97 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395F1B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59)
{
  uint64_t v59;

  if (*(char *)(v59 - 209) < 0)
  {
    operator delete(*(void **)(v59 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395F1C6C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395F1EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2395F1EEC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F1F10(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395F1F8C(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395F1F4C(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395F3430(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_2395F1F8C(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v12;
  char __p[22];
  char v14;
  void *v15[2];
  void *v16;

  sub_2396157EC((uint64_t)v15, a3);
  if (*(_BYTE *)(a1 + 40)
    && (v14 = 21,
        strcpy(__p, "image_cropping_params"),
        v5 = (_QWORD *)operator new(),
        *v5 = &off_250AE0700,
        v5[1] = a1,
        sub_23961580C((uint64_t)v15, (uint64_t)__p, (uint64_t)v5),
        v14 < 0))
  {
    operator delete(*(void **)__p);
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 72))
  {
    goto LABEL_7;
  }
  v14 = 6;
  strcpy(__p, "planes");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE0730;
  v6[1] = a1 + 48;
  sub_23961580C((uint64_t)v15, (uint64_t)__p, (uint64_t)v6);
  if (v14 < 0)
    operator delete(*(void **)__p);
LABEL_7:
  sub_2395902F0((uint64_t)v15, a2);
  v7 = v16;
  if (v16)
  {
    do
    {
      v8 = v7[5];
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = (void **)v16;
    if (v16)
    {
      do
      {
        v12 = (void **)*v9;
        if (*((char *)v9 + 39) < 0)
          operator delete(v9[2]);
        operator delete(v9);
        v9 = v12;
      }
      while (v12);
    }
  }
  v10 = v15[0];
  v15[0] = 0;
  if (v10)
    operator delete(v10);
  return a2;
}

void sub_2395F2130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395F2144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_2395905C0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2395F2170(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F2194(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  sub_2395F2214((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395F21E0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395F2214(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (a3 && v5 >> 31)
  {
    std::ostream::put();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    std::ostream::write();
    if (*(_QWORD *)(*(_QWORD *)a1 + 24))
    {
      v7 = 0;
      v8 = *(_QWORD **)(*(_QWORD *)a1 + 16);
      do
      {
        if (v8)
        {
          v11 = 0;
          v9 = v8;
          do
          {
            v9 = (_QWORD *)*v9;
            v10 = v11 + 1;
          }
          while (v11++ <= 0x7FFFFFFD && v9 != 0);
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        sub_2395F2370(v8, v9, v10, a2, 1);
        v7 += 0x7FFFFFFFLL;
        v8 = v9;
      }
      while (v7 < *(_QWORD *)(*(_QWORD *)a1 + 24));
    }
  }
  else
  {
    sub_2395F2370(*(_QWORD **)(*(_QWORD *)a1 + 16), 0, v5, a2, a3);
  }
  return a2;
}

BOOL sub_2395F2370(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  void *__p;
  int v22;
  unsigned __int8 v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  _DWORD v29[42];

  if (a5)
  {
    std::ostream::put();
    if (a3 >> 31)
    {
      return 0;
    }
    else
    {
      v20 = a3;
      v29[38] = a3;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      if (a1 == a2)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        v15 = *MEMORY[0x24BEDB7F0];
        v16 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
        v17 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
        v18 = MEMORY[0x24BEDB848] + 16;
        do
        {
          sub_2394988CC((uint64_t)v24);
          std::ostream::operator<<();
          std::stringbuf::str();
          std::ostream::put();
          v19 = v23;
          if ((v23 & 0x80u) != 0)
            v19 = v22;
          v29[39] = v19;
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          std::ostream::write();
          sub_2395F2778((uint64_t)a1 + 20, a4, 1);
          if ((char)v23 < 0)
            operator delete(__p);
          v24[0] = v15;
          *(_QWORD *)((char *)v24 + *(_QWORD *)(v15 - 24)) = v16;
          v25 = v17;
          v26 = v18;
          if (v28 < 0)
            operator delete(v27);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](v29);
          a1 = (_QWORD *)*a1;
          ++v14;
        }
        while (a1 != a2);
      }
      return v14 == v20;
    }
  }
  else
  {
    std::ostream::put();
    if (a1 != a2)
    {
      v10 = *MEMORY[0x24BEDB7F0];
      v12 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v13 = MEMORY[0x24BEDB848] + 16;
      do
      {
        sub_2394988CC((uint64_t)v24);
        std::ostream::operator<<();
        std::stringbuf::str();
        std::ostream::put();
        std::ostream::write();
        std::ostream::put();
        std::ostream::put();
        sub_2395F2778((uint64_t)a1 + 20, a4, 0);
        a1 = (_QWORD *)*a1;
        if (a1 != a2)
          std::ostream::put();
        if ((char)v23 < 0)
          operator delete(__p);
        v24[0] = v10;
        *(_QWORD *)((char *)v24 + *(_QWORD *)(v10 - 24)) = v12;
        v25 = v11;
        v26 = v13;
        if (v28 < 0)
          operator delete(v27);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v29);
      }
      while (a1 != a2);
    }
    std::ostream::put();
    return 1;
  }
}

void sub_2395F2700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395F2714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395F2728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395F273C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239498ABC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395F2750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_239498ABC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395F2778(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  void **v14;
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  _QWORD v23[2];
  _QWORD *v24;

  sub_2396157EC((uint64_t)v23, a3);
  v22 = 12;
  strcpy((char *)v21, "origin_width");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF750;
  v5[1] = a1;
  sub_23961580C((uint64_t)v23, (uint64_t)v21, (uint64_t)v5);
  v20 = 13;
  strcpy((char *)v19, "origin_height");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF750;
  v6[1] = a1 + 4;
  sub_23961580C((uint64_t)v23, (uint64_t)v19, (uint64_t)v6);
  v18 = 12;
  strcpy((char *)v17, "upper_left_x");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE0580;
  v7[1] = a1 + 8;
  sub_23961580C((uint64_t)v23, (uint64_t)v17, (uint64_t)v7);
  v16 = 12;
  strcpy((char *)__p, "upper_left_y");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE0580;
  v8[1] = a1 + 12;
  sub_23961580C((uint64_t)v23, (uint64_t)__p, (uint64_t)v8);
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_19:
      operator delete(v19[0]);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_20;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v17[0]);
  if (v20 < 0)
    goto LABEL_19;
LABEL_4:
  if ((v22 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_20:
  operator delete(v21[0]);
LABEL_5:
  sub_2395902F0((uint64_t)v23, a2);
  v9 = v24;
  if (v24)
  {
    do
    {
      v10 = v9[5];
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v9 = (_QWORD *)*v9;
    }
    while (v9);
    v11 = (void **)v24;
    if (v24)
    {
      do
      {
        v14 = (void **)*v11;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v14;
      }
      while (v14);
    }
  }
  v12 = (void *)v23[0];
  v23[0] = 0;
  if (v12)
    operator delete(v12);
  return a2;
}

void sub_2395F29F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395F2A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0(v32 - 80);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a27);
  sub_2395905C0(v32 - 80);
  _Unwind_Resume(a1);
}

void sub_2395F2AB8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F2ADC(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395F2B4C(*(__int128 ***)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395F2B18()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

uint64_t *sub_2395F2B4C(__int128 **a1, uint64_t *a2, int a3)
{
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  void *__p[2];
  __int128 v17;
  uint64_t v18;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = (char *)v6 - (char *)*a1;
    if (v7 < 0x1FFFFFFFE1)
    {
      sub_2395F3338(v5, v6, (uint64_t)a2, v7 >> 5);
      return a2;
    }
    else
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      BYTE7(v17) = 7;
      strcpy((char *)__p, "content");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v8 = (char *)a1[1] - (char *)*a1;
      if (v8)
      {
        v9 = 0;
        v10 = v8 >> 5;
        do
        {
          v17 = (unint64_t)a1;
          __p[0] = v9;
          v9 += 0x7FFFFFFF;
          if (v10 >= (unint64_t)v9)
            v10 = (unint64_t)v9;
          __p[1] = (void *)v10;
          sub_2395F2F78(__p, (uint64_t)a2);
          v10 = ((char *)a1[1] - (char *)*a1) >> 5;
        }
        while ((unint64_t)v9 < v10);
      }
      return a2;
    }
  }
  else
  {
    v13 = *a1;
    v12 = a1[1];
    std::ostream::put();
    if (v13 != v12)
    {
      while (1)
      {
        v14 = *v13;
        v15 = v13[1];
        v13 += 2;
        *(_OWORD *)__p = v14;
        v17 = v15;
        sub_2395A34D0((uint64_t)__p, (uint64_t)&v18, a2);
        if (v13 == v12)
          break;
        std::ostream::put();
      }
    }
    std::ostream::put();
    return a2;
  }
}

void sub_2395F2F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395F2F78(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_2395F3338((__int128 *)(*v2 + 32 * *a1), (__int128 *)(*v2 + 32 * a1[1]), a2, a1[1] - *a1);
}

void sub_2395F3314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395F3338(__int128 *a1, __int128 *a2, uint64_t a3, unint64_t a4)
{
  __int128 v8;
  __int128 v9;
  _QWORD *exception;
  _OWORD v12[2];
  uint64_t v13;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  while (a1 != a2)
  {
    v8 = *a1;
    v9 = a1[1];
    a1 += 2;
    v12[0] = v8;
    v12[1] = v9;
    sub_2395DA64C((uint64_t)v12, (uint64_t)&v13, a3, 4uLL);
  }
  return 1;
}

uint64_t *sub_2395F3430(uint64_t a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void **v12;
  void *v13[2];
  char v14;
  void *v15[4];
  void *__p[2];
  void *v17;

  sub_2396157EC((uint64_t)__p, a3);
  HIBYTE(v15[2]) = 21;
  strcpy((char *)v15, "image_cropping_params");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250AE0760;
  v5[1] = a1;
  sub_23961580C((uint64_t)__p, (uint64_t)v15, (uint64_t)v5);
  v14 = 6;
  strcpy((char *)v13, "planes");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250AE0790;
  v6[1] = a1 + 48;
  sub_23961580C((uint64_t)__p, (uint64_t)v13, (uint64_t)v6);
  if (v14 < 0)
  {
    operator delete(v13[0]);
    if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15[0]);
LABEL_3:
  sub_23959479C((uint64_t)__p, a2);
  v7 = v17;
  if (v17)
  {
    do
    {
      v8 = v7[5];
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = (_QWORD *)*v7;
    }
    while (v7);
    v9 = (void **)v17;
    if (v17)
    {
      do
      {
        v12 = (void **)*v9;
        if (*((char *)v9 + 39) < 0)
          operator delete(v9[2]);
        operator delete(v9);
        v9 = v12;
      }
      while (v12);
    }
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
  return a2;
}

void sub_2395F35C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2395905C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395F35D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2395905C0((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  sub_2395905C0((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_2395F3638(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F365C(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 8) + 40))
    sub_239EC0EE4(a1, (uint64_t)a2);
  v5 = *(_QWORD *)(a1 + 8);
  sub_2395F2214((uint64_t)&v5, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395F36B4(uint64_t a1, uint64_t *a2, int a3)
{
  sub_2395F36F4(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_2395F36F4(uint64_t a1, uint64_t *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v9[2];
  void *__p[2];
  int v11;
  void **v12;

  *(_OWORD *)v9 = 0u;
  *(_OWORD *)__p = 0u;
  v11 = 1065353216;
  v12 = v9;
  sub_2395F37C8((uint64_t *)&v12, a2, a3);
  if (!*(_BYTE *)(a1 + 40))
  {
    sub_2395F4690(a1, (uint64_t)v9);
    *(_BYTE *)(a1 + 40) = 1;
    v5 = __p[0];
    if (!__p[0])
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v9 != (void **)a1)
  {
    *(_DWORD *)(a1 + 32) = v11;
    sub_2395F4558((_QWORD *)a1, (uint64_t *)__p[0], 0);
  }
  v5 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_5:
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
LABEL_6:
  v7 = v9[0];
  v9[0] = 0;
  if (v7)
    operator delete(v7);
  return a2;
}

void sub_2395F37B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239420950((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395F37C8(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  int v8;
  int i;
  _QWORD *exception;

  v3 = a2;
  v4 = a1;
  if (!a3)
    goto LABEL_4;
  v5 = std::istream::peek();
  if ((v5 & 0xFFFFFFFE) == 0xDE)
  {
    a1 = v4;
    a2 = v3;
    a3 = 1;
LABEL_4:
    sub_2395F38C8(a1, a2, a3);
    return v3;
  }
  v7 = v5;
  std::istream::get();
  if (v7 == 221)
  {
    v8 = sub_2396162D4((uint64_t)v3, 221);
    if (*(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    for (i = v8; i; --i)
      sub_2395F38C8(v4, v3, 1);
    return v3;
  }
  sub_2396163F8(v3, v7);
  return v3;
}

BOOL sub_2395F38C8(uint64_t *a1, uint64_t *a2, int a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char i;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  int j;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  unsigned int v41[3];
  unsigned int v42;
  __int128 v43;
  uint64_t v44[2];
  uint64_t v45;
  uint64_t v46;
  void *__p;
  char v48;
  _BYTE v49[152];
  std::string v50;
  _DWORD *v51[2];

  if (a3)
  {
    v4 = std::istream::get();
    v5 = sub_2396162D4((uint64_t)a2, v4);
    if (!*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
      if (!v5)
        return 1;
      v6 = v5;
      v7 = *MEMORY[0x24BEDB7F0];
      v8 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
      v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
      v10 = MEMORY[0x24BEDB848] + 16;
      while (1)
      {
        memset(&v50, 0, sizeof(v50));
        v11 = std::istream::get();
        v12 = sub_2396162D4((uint64_t)a2, v11);
        if (v12)
        {
          std::string::resize(&v50, v12, 0);
          std::istream::read();
        }
        else if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          *v50.__r_.__value_.__l.__data_ = 0;
          v50.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v50.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v50.__r_.__value_.__s + 23) = 0;
        }
        v41[0] = 0;
        sub_239593804((uint64_t)v44, (uint64_t)&v50, 24);
        MEMORY[0x23B83DD10](v44, v41);
        v43 = 0uLL;
        sub_2395F3EE8(&v43, a2, 1);
        v13 = *a1;
        v51[0] = v41;
        v14 = sub_2395F424C(v13, v41, (uint64_t)&unk_239EC6E98, v51);
        *(_OWORD *)((char *)v14 + 20) = v43;
        v15 = *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32);
        v44[0] = v7;
        *(uint64_t *)((char *)v44 + *(_QWORD *)(v7 - 24)) = v8;
        v45 = v9;
        v46 = v10;
        if (v48 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x23B83E250](v49);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        if (v15)
          break;
        if (!--v6)
          return 1;
      }
    }
    return 0;
  }
  v16 = a2 + 4;
  v17 = MEMORY[0x24BDAC740];
  while (1)
  {
    v18 = std::istream::peek();
    if (v18 <= 0x7F)
      break;
    v19 = __maskrune(v18, 0x4000uLL);
    v20 = *(_QWORD *)(*a2 - 24);
    if (!v19)
      goto LABEL_24;
LABEL_22:
    if (!*(_DWORD *)((char *)v16 + v20))
      std::istream::get();
  }
  v20 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v17 + 4 * v18 + 60) & 0x4000) != 0)
    goto LABEL_22;
LABEL_24:
  if ((*((_BYTE *)a2 + v20 + 32) & 2) != 0)
    return 1;
  v42 = 0;
  memset(&v50, 0, sizeof(v50));
  if (std::istream::get() != 123)
    goto LABEL_73;
  while (2)
  {
    v21 = std::istream::peek();
    if (v21 > 0x7F)
    {
      v22 = __maskrune(v21, 0x4000uLL);
      v23 = *(_QWORD *)(*a2 - 24);
      if (!v22)
        break;
      goto LABEL_30;
    }
    v23 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v17 + 4 * v21 + 60) & 0x4000) != 0)
    {
LABEL_30:
      if (!*(_DWORD *)((char *)v16 + v23))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v23 + 32) & 2) != 0)
    goto LABEL_73;
  v24 = std::istream::peek() == 125;
  v25 = *MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v26 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && !v24)
  {
    if (!sub_239595A48((uint64_t)&v50, a2))
      goto LABEL_73;
    sub_2395E6330((uint64_t)&v42, (uint64_t)&v50);
    for (i = std::istream::peek(); i != 58 && !*(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24)); i = std::istream::peek())
      std::istream::get();
    if (*(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24)))
      goto LABEL_73;
LABEL_43:
    std::istream::get();
    while (1)
    {
      v28 = std::istream::peek();
      if (v28 > 0x7F)
      {
        v29 = __maskrune(v28, 0x4000uLL);
        v30 = *(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24));
        if (!v29)
          break;
        goto LABEL_48;
      }
      v30 = *(_DWORD *)((char *)v16 + *(_QWORD *)(*a2 - 24));
      if ((*(_DWORD *)(v17 + 4 * v28 + 60) & 0x4000) == 0)
        break;
LABEL_48:
      if (!v30)
        goto LABEL_43;
    }
    if ((v30 & 2) == 0)
    {
      sub_2394988CC((uint64_t)v44);
      *(_QWORD *)v41 = &v45;
      if (sub_239596128(a2))
      {
        v43 = 0uLL;
        sub_2395F3EE8(&v43, v44, 0);
        v31 = *a1;
        v51[0] = &v42;
        v32 = sub_2395F424C(v31, &v42, (uint64_t)&unk_239EC6E98, v51);
        *(_OWORD *)((char *)v32 + 20) = v43;
        for (j = std::istream::peek(); ; j = std::istream::peek())
        {
          v34 = j << 24;
          if (j << 24 == 738197504)
            goto LABEL_62;
          if (v34 == 2097152000)
            break;
          if (v34 <= 0x7F000000)
          {
            if ((*(_DWORD *)(v17 + 4 * (char)j + 60) & 0x4000) == 0)
              goto LABEL_61;
          }
          else if (!__maskrune((char)j, 0x4000uLL))
          {
            goto LABEL_61;
          }
          if ((*((_BYTE *)v16 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
          {
LABEL_61:
            if (v34 != 738197504)
              goto LABEL_63;
LABEL_62:
            std::istream::get();
            v24 = 0;
            goto LABEL_65;
          }
          std::istream::get();
        }
        v24 = 1;
LABEL_65:
        v35 = 0;
      }
      else
      {
LABEL_63:
        v24 = 0;
        v35 = 1;
      }
      v44[0] = v25;
      *(uint64_t *)((char *)v44 + *(_QWORD *)(v25 - 24)) = v39;
      v45 = v38;
      v46 = v26;
      if (v48 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x23B83E250](v49);
      if (!v35)
        continue;
    }
    goto LABEL_73;
  }
  if (!sub_2395959B4(a2))
  {
LABEL_73:
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    return 0;
  }
  v36 = std::istream::get();
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return v36 == 125;
}

void sub_2395F3E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 105) < 0)
    operator delete(*(void **)(v20 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2395F3EE8(_DWORD *a1, uint64_t *a2, char a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  void **v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD *v30;

  sub_2396157EC((uint64_t)v29, a3);
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v25 = 12;
  strcpy((char *)v24, "origin_width");
  v5 = (_QWORD *)operator new();
  *v5 = &off_250ADF420;
  v5[1] = (char *)&v28 + 4;
  sub_23961580C((uint64_t)v29, (uint64_t)v24, (uint64_t)v5);
  v23 = 13;
  strcpy((char *)v22, "origin_height");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF420;
  v6[1] = &v28;
  sub_23961580C((uint64_t)v29, (uint64_t)v22, (uint64_t)v6);
  v21 = 12;
  strcpy((char *)v20, "upper_left_x");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE0670;
  v7[1] = &v27;
  sub_23961580C((uint64_t)v29, (uint64_t)v20, (uint64_t)v7);
  v19 = 12;
  strcpy((char *)__p, "upper_left_y");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE0670;
  v8[1] = &v26;
  sub_23961580C((uint64_t)v29, (uint64_t)__p, (uint64_t)v8);
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_4;
LABEL_21:
      operator delete(v22[0]);
      if ((v25 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_22;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v20[0]);
  if (v23 < 0)
    goto LABEL_21;
LABEL_4:
  if ((v25 & 0x80000000) == 0)
    goto LABEL_5;
LABEL_22:
  operator delete(v24[0]);
LABEL_5:
  if ((sub_23959479C((uint64_t)v29, a2) & 1) != 0)
  {
    v9 = v28;
    v10 = v27;
    v11 = v26;
    *a1 = HIDWORD(v28);
    a1[1] = v9;
    a1[2] = v10;
    a1[3] = v11;
  }
  v12 = v30;
  if (v30)
  {
    do
    {
      v13 = v12[5];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = (_QWORD *)*v12;
    }
    while (v12);
    v14 = (void **)v30;
    if (v30)
    {
      do
      {
        v17 = (void **)*v14;
        if (*((char *)v14 + 39) < 0)
          operator delete(v14[2]);
        operator delete(v14);
        v14 = v17;
      }
      while (v17);
    }
  }
  v15 = (void *)v29[0];
  v29[0] = 0;
  if (v15)
    operator delete(v15);
  return a2;
}

void sub_2395F418C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2395905C0(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_2395F41A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_5:
    sub_2395905C0(v32 - 80);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a27);
  sub_2395905C0(v32 - 80);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395F424C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(_QWORD *)((char *)v15 + 20) = 0;
  *(_QWORD *)((char *)v15 + 28) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2395F4544(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395F4558(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  _OWORD *v10;
  int v11;
  uint64_t *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_7;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      *(_OWORD *)((char *)v8 + 20) = *(_OWORD *)((char *)a2 + 20);
      v9 = (uint64_t *)*v8;
      sub_23943604C(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_7;
    }
    do
    {
      v12 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_7:
    while (a2 != a3)
    {
      v10 = operator new(0x28uLL);
      *(_QWORD *)v10 = 0;
      v11 = *((_DWORD *)a2 + 8);
      v10[1] = *((_OWORD *)a2 + 1);
      *((_DWORD *)v10 + 8) = v11;
      *((_QWORD *)v10 + 1) = *((unsigned int *)v10 + 4);
      sub_23943604C(a1, (unsigned int *)v10);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_2395F4648(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2395F4668(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2395F467C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395F4690(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_2395F47D0(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_2395F47A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

void sub_2395F47BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239420950(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2395F47D0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((_DWORD *)v14 + 8) = *(_DWORD *)(a3 + 16);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2395F4AC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2395F4ADC(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F4B00(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v3 + 24))
    sub_239EC0EE4(v3, (uint64_t)a2);
  sub_2395F2B4C((__int128 **)v3, a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2395F4B48(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_2395F4BD4((uint64_t *)&__p, a2, a3);
  sub_2395F4CD4(v4, (char **)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

void sub_2395F4BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2395F4BD4(uint64_t *a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t *v12;

  v3 = (uint64_t)a2;
  v12 = a1;
  a1[1] = *a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_2395F4DB4(&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = (unint64_t)sub_2396162D4(v3, v6) >> 5;
  v8 = (a1[1] - *a1) >> 5;
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_2395F59C8(a1, v10);
  }
  else if (!v9)
  {
    a1[1] = *a1 + 32 * v7;
  }
  std::istream::read();
  return v3;
}

uint64_t sub_2395F4CD4(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  size_t v8;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((char **)a1 != a2)
      sub_2395F65BC((_QWORD *)a1, *a2, a2[1], (a2[1] - *a2) >> 5);
    return a1;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *a2;
    v4 = a2[1];
    v6 = v4 - *a2;
    if (v4 != *a2)
    {
      if (v6 < 0)
        sub_2394189F8();
      v7 = (char *)operator new(v4 - *a2);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = &v7[32 * (v6 >> 5)];
      v8 = v6 & 0xFFFFFFFFFFFFFFE0;
      memcpy(v7, v5, v8);
      *(_QWORD *)(a1 + 8) = &v7[v8];
    }
    *(_BYTE *)(a1 + 24) = 1;
    return a1;
  }
}

void sub_2395F4D98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2395F4DB4(uint64_t **a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  char *v7;
  unint64_t v8;
  __int128 v9;
  _OWORD *v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t *v38;
  unint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  char *v53;
  _BOOL8 result;
  char v55;
  unsigned int v56;
  int v57;
  int v58;
  char *v59;
  uint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 v73;
  int i;
  unsigned int v75;
  char v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  _OWORD v87[4];
  void *__p;
  char v89;
  uint64_t v90;
  uint64_t v91[2];
  __int128 v92;
  __int128 v93;
  _OWORD v94[8];
  uint64_t v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v86 = 0uLL;
      *(_QWORD *)&v87[0] = 0;
      sub_2395F59C8((uint64_t *)&v86, v6);
      std::istream::read();
      v7 = (char *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1) == (_QWORD)v86)
      {
LABEL_61:
        if (v7)
        {
          *((_QWORD *)&v86 + 1) = v7;
          operator delete(v7);
        }
        return 1;
      }
      v8 = 0;
      v7 = (char *)v86;
      while (1)
      {
        v11 = &v7[32 * v8];
        v12 = *a1;
        v14 = (_OWORD *)(*a1)[1];
        v13 = (*a1)[2];
        if ((unint64_t)v14 < v13)
        {
          v9 = *((_OWORD *)v11 + 1);
          *v14 = *(_OWORD *)v11;
          v14[1] = v9;
          v10 = v14 + 2;
        }
        else
        {
          v15 = (_OWORD *)*v12;
          v16 = ((uint64_t)v14 - *v12) >> 5;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 59)
            sub_2394189F8();
          v18 = v13 - (_QWORD)v15;
          if (v18 >> 4 > v17)
            v17 = v18 >> 4;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
            v19 = 0x7FFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 >> 59)
              sub_239418A80();
            v20 = (char *)operator new(32 * v19);
            v21 = *((_OWORD *)v11 + 1);
            v22 = &v20[32 * v16];
            *(_OWORD *)v22 = *(_OWORD *)v11;
            *((_OWORD *)v22 + 1) = v21;
            v23 = (uint64_t)v22;
            if (v14 != v15)
            {
              do
              {
LABEL_19:
                v25 = *(v14 - 1);
                *(_OWORD *)(v23 - 32) = *(v14 - 2);
                *(_OWORD *)(v23 - 16) = v25;
                v23 -= 32;
                v14 -= 2;
              }
              while (v14 != v15);
              v14 = (_OWORD *)*v12;
              v10 = v22 + 32;
              *v12 = v23;
              v12[1] = (uint64_t)(v22 + 32);
              v12[2] = (uint64_t)&v20[32 * v19];
              if (!v14)
                goto LABEL_6;
LABEL_23:
              operator delete(v14);
              goto LABEL_6;
            }
          }
          else
          {
            v20 = 0;
            v24 = *((_OWORD *)v11 + 1);
            v22 = (char *)(32 * v16);
            *(_OWORD *)v22 = *(_OWORD *)v11;
            *((_OWORD *)v22 + 1) = v24;
            v23 = 32 * v16;
            if (v14 != v15)
              goto LABEL_19;
          }
          v10 = v22 + 32;
          *v12 = v23;
          v12[1] = (uint64_t)(v22 + 32);
          v12[2] = (uint64_t)&v20[32 * v19];
          if (v14)
            goto LABEL_23;
        }
LABEL_6:
        v12[1] = (uint64_t)v10;
        ++v8;
        v7 = (char *)v86;
        if (v8 >= (uint64_t)(*((_QWORD *)&v86 + 1) - v86) >> 5)
          goto LABEL_61;
      }
    }
    if ((v5 & 0xFFFFFFFE) != 0xDC)
    {
      if (v5 == 223)
      {
        LODWORD(v91[0]) = 0;
        memset(v94, 0, 24);
        std::istream::read();
        std::istream::read();
        std::istream::read();
        std::istream::read();
      }
      return 0;
    }
    v34 = sub_2396162D4((uint64_t)a2, v5);
    if (!v34)
      return 1;
    v35 = 0;
    v36 = v34;
    while (1)
    {
      *(_QWORD *)&v94[0] = &v86;
      *((_QWORD *)&v94[0] + 1) = 0;
      sub_2395F5D70((uint64_t *)v94, a2, 1);
      v94[0] = v86;
      v94[1] = v87[0];
      v38 = *a1;
      v40 = (_OWORD *)(*a1)[1];
      v39 = (*a1)[2];
      if ((unint64_t)v40 < v39)
      {
        *v40 = v94[0];
        v40[1] = v94[1];
        v37 = v40 + 2;
      }
      else
      {
        v41 = (_OWORD *)*v38;
        v42 = ((uint64_t)v40 - *v38) >> 5;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 59)
          sub_2394189F8();
        v44 = v39 - (_QWORD)v41;
        if (v44 >> 4 > v43)
          v43 = v44 >> 4;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
          v45 = 0x7FFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 59)
            sub_239418A80();
          v46 = (char *)operator new(32 * v45);
          v47 = v94[1];
          v48 = &v46[32 * v42];
          *(_OWORD *)v48 = v94[0];
          *((_OWORD *)v48 + 1) = v47;
          v49 = (uint64_t)v48;
          if (v40 != v41)
          {
            do
            {
LABEL_56:
              v51 = *(v40 - 1);
              *(_OWORD *)(v49 - 32) = *(v40 - 2);
              *(_OWORD *)(v49 - 16) = v51;
              v49 -= 32;
              v40 -= 2;
            }
            while (v40 != v41);
            v40 = (_OWORD *)*v38;
            v52 = &v46[32 * v45];
            v37 = v48 + 32;
            *v38 = v49;
            v38[1] = (uint64_t)(v48 + 32);
            v38[2] = (uint64_t)v52;
            if (!v40)
              goto LABEL_43;
LABEL_60:
            operator delete(v40);
            goto LABEL_43;
          }
        }
        else
        {
          v46 = 0;
          v50 = v94[1];
          v48 = (char *)(32 * v42);
          *(_OWORD *)v48 = v94[0];
          *((_OWORD *)v48 + 1) = v50;
          v49 = 32 * v42;
          if (v40 != v41)
            goto LABEL_56;
        }
        v53 = &v46[32 * v45];
        v37 = v48 + 32;
        *v38 = v49;
        v38[1] = (uint64_t)(v48 + 32);
        v38[2] = (uint64_t)v53;
        if (v40)
          goto LABEL_60;
      }
LABEL_43:
      v38[1] = (uint64_t)v37;
      if (++v35 == v36)
        return 1;
    }
  }
  v26 = a2 + 4;
  v27 = MEMORY[0x24BDAC740];
  while (1)
  {
    v28 = std::istream::peek();
    if (v28 <= 0x7F)
      break;
    v29 = __maskrune(v28, 0x4000uLL);
    v30 = *(_QWORD *)(*a2 - 24);
    if (!v29)
      goto LABEL_31;
LABEL_29:
    if (!*(_DWORD *)((char *)v26 + v30))
      std::istream::get();
  }
  v30 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v27 + 4 * v28 + 60) & 0x4000) != 0)
    goto LABEL_29;
LABEL_31:
  if ((*((_BYTE *)a2 + v30 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v31 = std::istream::peek();
    if (v31 > 0x7F)
    {
      v32 = __maskrune(v31, 0x4000uLL);
      v33 = *(_QWORD *)(*a2 - 24);
      if (!v32)
        break;
      goto LABEL_37;
    }
    v33 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v27 + 4 * v31 + 60) & 0x4000) != 0)
    {
LABEL_37:
      if (!*(_DWORD *)((char *)v26 + v33))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v33 + 32) & 2) != 0)
    return 0;
  v55 = 0;
  v84 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v85 = *MEMORY[0x24BEDB7F0];
  v83 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v82 = MEMORY[0x24BEDB848] + 16;
LABEL_67:
  if ((*((_BYTE *)v26 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v55 & 1) == 0)
  {
    while (1)
    {
      v56 = std::istream::peek();
      if (v56 <= 0x7F)
      {
        v58 = *(_DWORD *)((char *)v26 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v27 + 4 * v56 + 60) & 0x4000) == 0)
        {
LABEL_75:
          if ((v58 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v86);
          if (sub_239596128(a2))
          {
            v59 = (char *)v87 + *(_QWORD *)(*(_QWORD *)&v87[0] - 24);
            if ((v59[32] & 5) == 0)
            {
              (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v59 + 5)
                                                                                             + 32))(v94, *((_QWORD *)v59 + 5), 0, 1, 16);
              if (v95 >= 1)
              {
                v91[0] = (uint64_t)v94;
                v91[1] = 0;
                sub_2395F5D70(v91, &v86, 0);
                v92 = v94[0];
                v93 = v94[1];
                v60 = *a1;
                v62 = (_OWORD *)(*a1)[1];
                v61 = (*a1)[2];
                if ((unint64_t)v62 >= v61)
                {
                  v64 = (_OWORD *)*v60;
                  v65 = ((uint64_t)v62 - *v60) >> 5;
                  v66 = v65 + 1;
                  if ((unint64_t)(v65 + 1) >> 59)
                    sub_2394189F8();
                  v67 = v61 - (_QWORD)v64;
                  if (v67 >> 4 > v66)
                    v66 = v67 >> 4;
                  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0)
                    v68 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v68 = v66;
                  if (v68)
                  {
                    v81 = ((uint64_t)v62 - *v60) >> 5;
                    if (v68 >> 59)
                      sub_239418A80();
                    v80 = v68;
                    v69 = (char *)operator new(32 * v68);
                    v68 = v80;
                    v65 = v81;
                  }
                  else
                  {
                    v69 = 0;
                  }
                  v70 = v93;
                  v71 = &v69[32 * v65];
                  *(_OWORD *)v71 = v92;
                  *((_OWORD *)v71 + 1) = v70;
                  v72 = v71;
                  if (v62 != v64)
                  {
                    do
                    {
                      v73 = *(v62 - 1);
                      *((_OWORD *)v72 - 2) = *(v62 - 2);
                      *((_OWORD *)v72 - 1) = v73;
                      v72 -= 32;
                      v62 -= 2;
                    }
                    while (v62 != v64);
                    v62 = (_OWORD *)*v60;
                  }
                  v63 = v71 + 32;
                  *v60 = (uint64_t)v72;
                  v60[1] = (uint64_t)(v71 + 32);
                  v60[2] = (uint64_t)&v69[32 * v68];
                  if (v62)
                    operator delete(v62);
                }
                else
                {
                  *v62 = v92;
                  v62[1] = v93;
                  v63 = v62 + 2;
                }
                v60[1] = (uint64_t)v63;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v75 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_107;
              if (v75 == 1560281088)
                break;
              if (v75 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v27 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_106;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_106;
              }
              if ((*((_BYTE *)v26 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_106:
                if (v75 != 738197504)
                  goto LABEL_108;
LABEL_107:
                std::istream::get();
                v55 = 0;
                goto LABEL_110;
              }
              std::istream::get();
            }
            v55 = 1;
LABEL_110:
            v76 = 1;
          }
          else
          {
LABEL_108:
            v76 = 0;
            v55 = 0;
          }
          *(_QWORD *)&v86 = v85;
          *(_QWORD *)((char *)&v87[-1] + *(_QWORD *)(v85 - 24)) = v84;
          *(_QWORD *)&v87[0] = v83;
          *((_QWORD *)&v87[0] + 1) = v82;
          if (v89 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v90);
          result = 0;
          if ((v76 & 1) == 0)
            return result;
          goto LABEL_67;
        }
      }
      else
      {
        v57 = __maskrune(v56, 0x4000uLL);
        v58 = *(_DWORD *)((char *)v26 + *(_QWORD *)(*a2 - 24));
        if (!v57)
          goto LABEL_75;
      }
      if (!v58)
        std::istream::get();
    }
  }
  while (1)
  {
    v77 = std::istream::peek();
    v78 = v77 <= 0x7F ? *(_DWORD *)(v27 + 4 * v77 + 60) & 0x4000 : __maskrune(v77, 0x4000uLL);
    v79 = *(_QWORD *)(*a2 - 24);
    if (!v78)
      break;
    if (!*(_DWORD *)((char *)v26 + v79))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v79 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395F58F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  uint64_t v58;

  if (*(char *)(v58 - 217) < 0)
  {
    operator delete(*(void **)(v58 - 240));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2395F59C8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (uint64_t)v5) >> 5)
  {
    a1[1] = (uint64_t)&v5[32 * a2];
    return;
  }
  v6 = (char *)*a1;
  v7 = (uint64_t)&v5[-*a1] >> 5;
  v8 = v7 + a2;
  if ((v7 + a2) >> 59)
    sub_2394189F8();
  v9 = v4 - (_QWORD)v6;
  if (v9 >> 4 > v8)
    v8 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 >> 59)
      sub_239418A80();
    v11 = (char *)operator new(32 * v10);
    v12 = (uint64_t)&v11[32 * v7];
    v13 = &v11[32 * v10];
    v14 = v12 + 32 * a2;
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v12;
      a1[1] = v14;
      a1[2] = (uint64_t)v13;
      if (!v5)
        return;
LABEL_17:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = 32 * v7;
    v13 = 0;
    v14 = 32 * v7 + 32 * a2;
    if (v5 == v6)
      goto LABEL_11;
  }
  do
  {
    v15 = *((_OWORD *)v5 - 1);
    *(_OWORD *)(v12 - 32) = *((_OWORD *)v5 - 2);
    *(_OWORD *)(v12 - 16) = v15;
    v12 -= 32;
    v5 -= 32;
  }
  while (v5 != v6);
  v5 = (char *)*a1;
  *a1 = v12;
  a1[1] = v14;
  a1[2] = (uint64_t)v13;
  if (v5)
    goto LABEL_17;
}

uint64_t sub_2395F5AF4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2395F5D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2395F5D70(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23945E108((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 3;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 3)
            *(_QWORD *)(v9 + 8 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          v40 = 0;
          sub_2395A1290((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 3)
            *(_QWORD *)(*a1 + 8 * v22) = v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                v47.__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x23B83DCEC](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 3)
                  *(_QWORD *)(*a1 + 8 * v30) = v47.__r_.__value_.__r.__words[0];
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2395F6508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2395F65BC(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 5)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 5;
    if (v18 >= __sz)
    {
      v27 = *result;
      if (a2 != a3)
      {
        v28 = (_OWORD *)*result;
        do
        {
          v29 = *(_OWORD *)v6;
          v30 = *((_OWORD *)v6 + 1);
          v6 += 32;
          *v28 = v29;
          v28[1] = v30;
          v28 += 2;
          v27 += 32;
        }
        while (v6 != a3);
      }
      v15 = v27 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[32 * v18];
      if (v17 != v9)
      {
        v20 = 32 * v18;
        do
        {
          v21 = *(_OWORD *)v6;
          v22 = *((_OWORD *)v6 + 1);
          v6 += 32;
          *(_OWORD *)v9 = v21;
          *((_OWORD *)v9 + 1) = v22;
          v9 += 32;
          v20 -= 32;
        }
        while (v20);
        v9 = *v16;
      }
      v23 = v9;
      if (v19 != a3)
      {
        v23 = v9;
        v24 = v9;
        do
        {
          v25 = *(_OWORD *)v19;
          v26 = *((_OWORD *)v19 + 1);
          v19 += 32;
          *(_OWORD *)v24 = v25;
          *((_OWORD *)v24 + 1) = v26;
          v24 += 32;
          v23 += 32;
        }
        while (v19 != a3);
      }
      v15 = v23 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59)
      goto LABEL_27;
    v10 = v8 >> 4;
    if (v8 >> 4 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 59)
LABEL_27:
      sub_2394189F8();
    v13 = 4 * v12;
    result = operator new(32 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, ((a3 - v6 - 32) & 0xFFFFFFFFFFFFFFE0) + 32);
      v14 = &v9[((a3 - v6 - 32) & 0xFFFFFFFFFFFFFFE0) + 32];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

uint64_t sub_2395F6750(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_2395F6890(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_2395F6868(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23959F2D4(v1);
  _Unwind_Resume(a1);
}

void sub_2395F687C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23959F2D4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395F6890(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *result;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (result[2] == v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (_QWORD *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = operator new(0x30uLL);
  *v28 = 0;
  v28[1] = v6;
  v28[2] = *(_QWORD *)a3;
  v13 = v28 + 3;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_23941A7F8(v13, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a3 + 8);
    v28[5] = *(_QWORD *)(a3 + 24);
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v17 = v28;
        if (v16)
          goto LABEL_29;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v17 = v28;
        if (v16)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      v17 = v28;
      if (v16)
        goto LABEL_29;
    }
LABEL_53:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v28)
    {
      v27 = *(_QWORD *)(*v28 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v27 >= v7)
          v27 %= v7;
      }
      else
      {
        v27 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_64;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v17 = v28;
  if (!v16)
    goto LABEL_53;
LABEL_29:
  *v17 = *v16;
  *v16 = v28;
LABEL_64:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2395F6BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395F6C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395F6C28(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F6C4C(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395D8DFC(*(_QWORD *)(a1 + 8), a2, a3, 0);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395F6C8C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395F6CC4(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F6CE8(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395EE104(*(int64x2_t **)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395F6D24()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395F6D5C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F6D80(uint64_t a1, uint64_t *a2, char a3)
{
  sub_2395EE624(*(_QWORD *)(a1 + 8), a2, a3, 0);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395F6DC0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

void sub_2395F6DF8(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2395F6E1C(uint64_t a1, _QWORD *a2, char a3)
{
  sub_2395F1F8C(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

void sub_2395F6E58()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8F0] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
}

_QWORD *sub_2395F6E8C(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2395F7198(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2395F71AC(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

double *sub_2395F71EC(double *result, double *a2, double *a3)
{
  unint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;

  while (a3 != a2)
  {
    v3 = a3 - result;
    if (v3 < 2)
      break;
    if (v3 == 3)
    {
      v38 = *result;
      v39 = result[1];
      v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          v50 = *result;
          v49 = result[1];
          if (v49 < *result)
          {
            *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        *result = v39;
        result[1] = v38;
        v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      v36 = *(a3 - 1);
      v37 = *result;
      if (v36 < *result)
      {
        *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 1)
      {
        v41 = result++;
        if (v41 != a3 && result != a3)
        {
          v42 = *v41;
          v43 = *v41;
          v44 = result;
          v45 = v41;
          v46 = result;
          do
          {
            v47 = *v46++;
            v48 = v47;
            if (v47 < v43)
            {
              v43 = v48;
              v45 = v44;
            }
            v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *v41 = *v45;
            *v45 = v42;
          }
        }
      }
      return result;
    }
    v4 = &result[v3 >> 1];
    v5 = a3 - 1;
    v6 = *(a3 - 1);
    v7 = *v4;
    v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        v9 = 0;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
      *v4 = v6;
      *v5 = v7;
      v21 = *result;
      if (*v4 < *result)
      {
        *result = *v4;
        *v4 = v21;
        v9 = 2;
        v10 = *result;
        v11 = *v4;
        if (*result >= *v4)
          goto LABEL_27;
        goto LABEL_9;
      }
LABEL_49:
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result >= *v4)
        goto LABEL_27;
LABEL_9:
      v12 = a3 - 1;
      v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        v18 = v13;
      }
      else
      {
LABEL_10:
        v14 = v13;
        while (1)
        {
          v15 = *v4;
          do
          {
            v16 = *v14++;
            v17 = v16;
          }
          while (v16 < v15);
          v18 = v14 - 1;
          do
          {
            v19 = *--v12;
            v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12)
            break;
          *v18 = v20;
          *v12 = v17;
          ++v9;
          if (v18 == v4)
            v4 = v12;
        }
      }
      if (v18 != v4)
      {
        v22 = *v18;
        if (*v4 < *v18)
        {
          *v18 = *v4;
          *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2)
        return result;
      if (!v9)
      {
        if (v18 <= a2)
        {
          v27 = v18 + 1;
          while (v27 != a3)
          {
            v29 = *(v27 - 1);
            v28 = *v27++;
            if (v28 < v29)
              goto LABEL_37;
          }
        }
        else
        {
          while (v13 != v18)
          {
            v24 = *(v13 - 1);
            v23 = *v13++;
            if (v23 < v24)
              goto LABEL_37;
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2)
        result = v18 + 1;
      else
        a3 = v18;
    }
    else
    {
      if (v6 >= v7)
      {
        *result = v7;
        *v4 = v8;
        if (*v5 < v8)
        {
          *v4 = *v5;
          *v5 = v8;
          v9 = 2;
          v10 = *result;
          v11 = *v4;
          if (*result >= *v4)
            goto LABEL_27;
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      *result = v6;
      *v5 = v8;
      v9 = 1;
      v10 = *result;
      v11 = *v4;
      if (*result < *v4)
        goto LABEL_9;
LABEL_27:
      v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          *result = *v12;
          *v12 = v10;
          ++v9;
          v13 = result + 1;
          if (result + 1 < v12)
            goto LABEL_10;
          goto LABEL_31;
        }
      }
      v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5)
          return result;
        while (1)
        {
          v26 = *v25;
          if (v10 < *v25)
            break;
          if (++v25 == v5)
            return result;
        }
        *v25++ = *v5;
        *v5 = v26;
      }
      if (v25 == v5)
        return result;
      while (1)
      {
        v30 = *result;
        do
        {
          v31 = *v25++;
          v32 = v31;
        }
        while (v30 >= v31);
        v33 = v25 - 1;
        do
        {
          v34 = *--v5;
          v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5)
          break;
        *v33 = v35;
        *v5 = v32;
      }
      result = v25 - 1;
      if (v33 > a2)
        return result;
    }
  }
  return result;
}

char *sub_2395F7594(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return (char *)v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return (char *)v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_QWORD *)v14 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v14 + 5) = *(_QWORD *)(a3 + 24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2395F78B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395F78C4(uint64_t a1)
{
  _QWORD *v7;
  std::bad_alloc *exception;
  std::bad_alloc *v10;
  void *memptr;

  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v7 = memptr;
  *(_QWORD *)(a1 + 40) = memptr;
  if (!v7)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v10 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v10, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  *(_DWORD *)(a1 + 56) = 5;
  v7[4] = 0;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *(_OWORD *)(a1 + 128) = xmmword_239EC7740;
  *(_OWORD *)(a1 + 144) = unk_239EC7750;
  *(_OWORD *)(a1 + 160) = xmmword_239EC7760;
  *(_OWORD *)(a1 + 176) = xmmword_239EC7770;
  *(_OWORD *)(a1 + 64) = xmmword_239EC7700;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)algn_239EC7710;
  *(_OWORD *)(a1 + 96) = xmmword_239EC7720;
  *(_OWORD *)(a1 + 112) = unk_239EC7730;
  *(_OWORD *)(a1 + 192) = xmmword_239EC7640;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 271) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 240) = 0;
  return a1;
}

uint64_t sub_2395F79B0(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_14;
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_15:
  operator delete(*(void **)a1);
  return a1;
}

void sub_2395F7A80(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void **v13;
  char *v14;
  char *v15;
  void **v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *__p[2];
  uint64_t v32;
  char *v33;
  void *v34[2];
  char v35;
  uint64_t v36;

  v6 = (char *)a1;
  v36 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      v6 = *(char **)a1;
      goto LABEL_6;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(a1 + 23);
    if (*(_BYTE *)(a1 + 23))
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
LABEL_6:
      v33 = v6;
      v34[0] = v6;
      v9 = &v6[v8];
      while (1)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          sub_23941A7F8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)a2;
          v32 = *(_QWORD *)(a2 + 16);
        }
        v12 = v9;
        if (v6 != v9)
        {
          if (v32 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          if (v32 >= 0)
            v14 = (char *)HIBYTE(v32);
          else
            v14 = (char *)__p[1];
          if (v14)
          {
LABEL_21:
            v15 = v14;
            v16 = v13;
            while (*(unsigned __int8 *)v16 != *v6)
            {
              v16 = (void **)((char *)v16 + 1);
              if (!--v15)
              {
                if (++v6 != v9)
                  goto LABEL_21;
                goto LABEL_25;
              }
            }
            v33 = v6;
            if ((v32 & 0x8000000000000000) == 0)
              goto LABEL_27;
            goto LABEL_30;
          }
LABEL_25:
          v12 = v9;
        }
        v33 = v12;
        if ((v32 & 0x8000000000000000) == 0)
        {
LABEL_27:
          if (a3 == 1)
            goto LABEL_32;
          goto LABEL_31;
        }
LABEL_30:
        operator delete(__p[0]);
        if (a3 == 1)
          goto LABEL_32;
LABEL_31:
        v11 = v33;
        if (v33 == v34[0])
          goto LABEL_9;
LABEL_32:
        v17 = *(char **)(a4 + 8);
        if ((unint64_t)v17 < *(_QWORD *)(a4 + 16))
        {
          v19 = v33;
          v18 = (char *)v34[0];
          v20 = v33 - (char *)v34[0];
          if ((unint64_t)(v33 - (char *)v34[0]) >= 0x7FFFFFFFFFFFFFF8)
            sub_23941A5AC();
          if (v20 > 0x16)
          {
            v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v20 | 7) != 0x17)
              v28 = v20 | 7;
            v29 = v28 + 1;
            v21 = (char *)operator new(v28 + 1);
            *((_QWORD *)v17 + 1) = v20;
            *((_QWORD *)v17 + 2) = v29 | 0x8000000000000000;
            *(_QWORD *)v17 = v21;
            if (v18 == v19)
              goto LABEL_45;
LABEL_36:
            if (v20 < 0x20 || (unint64_t)(v21 - v18) < 0x20)
            {
              v22 = v21;
              v23 = v18;
            }
            else
            {
              v22 = &v21[v20 & 0xFFFFFFFFFFFFFFE0];
              v23 = &v18[v20 & 0xFFFFFFFFFFFFFFE0];
              v24 = (__int128 *)(v18 + 16);
              v25 = v21 + 16;
              v26 = v20 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v27 = *v24;
                *(v25 - 1) = *(v24 - 1);
                *v25 = v27;
                v24 += 2;
                v25 += 2;
                v26 -= 32;
              }
              while (v26);
              if (v20 == (v20 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_48;
            }
            do
            {
              v30 = *v23++;
              *v22++ = v30;
            }
            while (v23 != v19);
          }
          else
          {
            v17[23] = v20;
            v21 = v17;
            if (v18 != v19)
              goto LABEL_36;
LABEL_45:
            v22 = v21;
          }
LABEL_48:
          *v22 = 0;
          v10 = v17 + 24;
          *(_QWORD *)(a4 + 8) = v17 + 24;
          goto LABEL_8;
        }
        v10 = sub_2395F7D9C((void **)a4, (uint64_t *)v34, &v33);
LABEL_8:
        *(_QWORD *)(a4 + 8) = v10;
        v11 = v33;
LABEL_9:
        v6 = v11 + 1;
        v34[0] = v11 + 1;
        if (v9 == v11)
          return;
      }
    }
  }
  if (a3)
  {
    v35 = 0;
    LOBYTE(v34[0]) = 0;
    sub_23941B674((_QWORD *)a4, (uint64_t)v34, 1uLL);
    if (v35 < 0)
      operator delete(v34[0]);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
}

void sub_2395F7D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2395F7D9C(void **a1, uint64_t *a2, char **a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  void *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v31;
  char *v32;
  char *v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  v31 = v10;
  v32 = v10;
  v33 = &v9[24 * v8];
  v11 = *a2;
  v12 = *a3;
  v13 = (unint64_t)&(*a3)[-v11];
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v13 <= 0x16)
  {
    v10[23] = v13;
    if ((char *)v11 != v12)
      goto LABEL_14;
LABEL_23:
    v14 = v10;
    goto LABEL_26;
  }
  v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v20 = v13 | 7;
  v21 = v20 + 1;
  v22 = (char *)operator new(v20 + 1);
  *((_QWORD *)v10 + 1) = v13;
  *((_QWORD *)v10 + 2) = v21 | 0x8000000000000000;
  *(_QWORD *)v10 = v22;
  v10 = v22;
  if ((char *)v11 == v12)
    goto LABEL_23;
LABEL_14:
  if (v13 < 0x20 || (unint64_t)&v10[-v11] < 0x20)
  {
    v14 = v10;
    v15 = (char *)v11;
    do
    {
LABEL_25:
      v23 = *v15++;
      *v14++ = v23;
    }
    while (v15 != v12);
    goto LABEL_26;
  }
  v14 = &v10[v13 & 0xFFFFFFFFFFFFFFE0];
  v15 = (char *)(v11 + (v13 & 0xFFFFFFFFFFFFFFE0));
  v16 = (__int128 *)(v11 + 16);
  v17 = v10 + 16;
  v18 = v13 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v19 = *v16;
    *(v17 - 1) = *(v16 - 1);
    *v17 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 32;
  }
  while (v18);
  if (v13 != (v13 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_25;
LABEL_26:
  *v14 = 0;
  v24 = v31;
  v25 = v32 + 24;
  v26 = (char *)*a1;
  v27 = (char *)a1[1];
  if (v27 == *a1)
  {
    *a1 = v31;
    a1[1] = v25;
    a1[2] = v33;
  }
  else
  {
    do
    {
      v28 = *(_OWORD *)(v27 - 24);
      *((_QWORD *)v24 - 1) = *((_QWORD *)v27 - 1);
      *(_OWORD *)(v24 - 24) = v28;
      v24 -= 24;
      *((_QWORD *)v27 - 2) = 0;
      *((_QWORD *)v27 - 1) = 0;
      *((_QWORD *)v27 - 3) = 0;
      v27 -= 24;
    }
    while (v27 != v26);
    v29 = (char *)*a1;
    v27 = (char *)a1[1];
    *a1 = v24;
    a1[1] = v25;
    a1[2] = v33;
    if (v27 != v29)
    {
      do
      {
        if (*(v27 - 1) < 0)
          operator delete(*((void **)v27 - 3));
        v27 -= 24;
      }
      while (v27 != v29);
      v27 = v29;
    }
  }
  if (v27)
    operator delete(v27);
  return v32 + 24;
}

void sub_2395F8008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2395F801C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 7)
  {
    if (a2)
    {
      v11 = &v5[128 * a2];
      v12 = a2 << 7;
      do
      {
        *((_OWORD *)v5 + 4) = xmmword_239EC7740;
        *((_OWORD *)v5 + 5) = unk_239EC7750;
        *((_OWORD *)v5 + 6) = xmmword_239EC7760;
        *((_OWORD *)v5 + 7) = xmmword_239EC7770;
        *(_OWORD *)v5 = xmmword_239EC7700;
        *((_OWORD *)v5 + 1) = *(_OWORD *)algn_239EC7710;
        *((_OWORD *)v5 + 2) = xmmword_239EC7720;
        *((_OWORD *)v5 + 3) = unk_239EC7730;
        v5 += 128;
        v12 -= 128;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = (v5 - *a1) >> 7;
    if ((v6 + a2) >> 57)
      sub_2394189F8();
    v7 = v4 - *a1;
    v8 = v7 >> 6;
    if (v7 >> 6 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFF80)
      v9 = 0x1FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 57)
        sub_239418A80();
      v10 = (char *)operator new(v9 << 7);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[128 * v6];
    v14 = a2 << 7;
    v15 = &v13[128 * a2];
    v16 = v13;
    do
    {
      *((_OWORD *)v16 + 4) = xmmword_239EC7740;
      *((_OWORD *)v16 + 5) = unk_239EC7750;
      *((_OWORD *)v16 + 6) = xmmword_239EC7760;
      *((_OWORD *)v16 + 7) = xmmword_239EC7770;
      *(_OWORD *)v16 = xmmword_239EC7700;
      *((_OWORD *)v16 + 1) = *(_OWORD *)algn_239EC7710;
      *((_OWORD *)v16 + 2) = xmmword_239EC7720;
      *((_OWORD *)v16 + 3) = unk_239EC7730;
      v16 += 128;
      v14 -= 128;
    }
    while (v14);
    v17 = *a1;
    if (v5 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v5 - 8);
        v19 = *((_OWORD *)v5 - 7);
        v20 = *((_OWORD *)v5 - 5);
        *((_OWORD *)v13 - 6) = *((_OWORD *)v5 - 6);
        *((_OWORD *)v13 - 5) = v20;
        *((_OWORD *)v13 - 8) = v18;
        *((_OWORD *)v13 - 7) = v19;
        v21 = *((_OWORD *)v5 - 4);
        v22 = *((_OWORD *)v5 - 3);
        v23 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v13 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v13 - 1) = v23;
        *((_OWORD *)v13 - 4) = v21;
        *((_OWORD *)v13 - 3) = v22;
        v13 -= 128;
        v5 -= 128;
      }
      while (v5 != v17);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[128 * v9];
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_2395F81B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  void *memptr;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(unsigned int *)(a2 + 56);
  v6 = (8 * v5 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v6 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v6, 0x100BBD03uLL);
  v7 = memptr;
  *(_QWORD *)(a1 + 40) = memptr;
  if (!v7)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v26, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v5)
    memcpy(v7, *(const void **)(a2 + 40), 8 * v5);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  v11 = *(_OWORD *)(a2 + 128);
  v12 = *(_OWORD *)(a2 + 144);
  v13 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v13;
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v14 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v14;
  v15 = *(_QWORD *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v15;
  v16 = (_BYTE *)(a1 + 248);
  if (*(char *)(a2 + 271) < 0)
  {
    sub_23941A7F8(v16, *(void **)(a2 + 248), *(_QWORD *)(a2 + 256));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    *(_OWORD *)v16 = v17;
  }
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  if (*(_BYTE *)(a2 + 400))
  {
    v18 = *(_OWORD *)(a2 + 272);
    v19 = *(_OWORD *)(a2 + 288);
    v20 = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 320) = v20;
    *(_OWORD *)(a1 + 272) = v18;
    *(_OWORD *)(a1 + 288) = v19;
    v21 = *(_OWORD *)(a2 + 336);
    v22 = *(_OWORD *)(a2 + 352);
    v23 = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    *(_OWORD *)(a1 + 384) = v23;
    *(_OWORD *)(a1 + 336) = v21;
    *(_OWORD *)(a1 + 352) = v22;
    *(_BYTE *)(a1 + 400) = 1;
  }
  return a1;
}

void sub_2395F8328(_Unwind_Exception *a1)
{
  uint64_t v1;

  free(*(void **)(v1 + 40));
  _Unwind_Resume(a1);
}

char *sub_2395F833C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_QWORD *)v10 + 2) == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_QWORD *)v10 + 2) == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(_QWORD *)v10 = *v17;
LABEL_61:
      *v17 = v10;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v17)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v17)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2395F8668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2395F867C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return (char *)v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return (char *)v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = (char *)operator new(0x98uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(v14 + 104) = *(_OWORD *)(a3 + 88);
  *(_OWORD *)(v14 + 120) = *(_OWORD *)(a3 + 104);
  *(_OWORD *)(v14 + 136) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(v14 + 72) = *(_OWORD *)(a3 + 56);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *(_QWORD *)v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2395F89A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_2395F89BC(char *a1, __n128 *a2, uint64_t **a3, unint64_t a4, char *a5, uint64_t a6)
{
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  __n128 result;
  char *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  __n128 *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  __n128 *v43;
  char v44;
  char *v45;
  uint64_t v46;
  __n128 *v47;
  __n128 v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  __n128 *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 *v58;
  __n128 v59;

  if (a4 >= 2)
  {
    v8 = (__n128 *)a1;
    if (a4 == 2)
    {
      v9 = a2[-1].n128_u64[1];
      v10 = *(_QWORD *)a1;
      if (*(_QWORD *)(**a3 + 8 * v9) < *(_QWORD *)(**a3 + 8 * *(_QWORD *)a1))
      {
        *(_QWORD *)a1 = v9;
        a2[-1].n128_u64[1] = v10;
      }
      return result;
    }
    if ((uint64_t)a4 > 128)
    {
      v22 = a4 >> 1;
      v23 = &a1[8 * (a4 >> 1)];
      v24 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        sub_2395F89BC(a1, v23, a3, v24, a5, a6);
        sub_2395F89BC(&v8->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        result.n128_u64[0] = sub_2395F9034(v8, (__n128 *)((char *)v8 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6).n128_u64[0];
        return result;
      }
      sub_2395F8D18(a1, v23, a3, v24, a5);
      v26 = &a5[8 * v22];
      result.n128_u64[0] = sub_2395F8D18(&v8->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v26).n128_u64[0];
      v27 = *a3;
      v28 = v26;
      v29 = a5;
      v30 = v8;
      v31 = &a5[8 * a4];
      do
      {
        if (v28 == v31)
        {
          if (v29 == v26)
            return result;
          v50 = &a5[8 * v22] - v29 - 8;
          if (v50 >= 0x38 && (unint64_t)((char *)v8 - v29) >= 0x20)
          {
            v54 = 0;
            v55 = (v50 >> 3) + 1;
            v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
            v51 = &v29[v56];
            v52 = (__n128 *)((char *)v30 + v56);
            v57 = v55 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v58 = &v30[v54];
              result = *(__n128 *)&v29[v54 * 16];
              v59 = *(__n128 *)&v29[v54 * 16 + 16];
              *v58 = result;
              v58[1] = v59;
              v54 += 2;
              v57 -= 4;
            }
            while (v57);
            if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v51 = v29;
            v52 = v30;
          }
          do
          {
            v53 = *(_QWORD *)v51;
            v51 += 8;
            v52->n128_u64[0] = v53;
            v52 = (__n128 *)((char *)v52 + 8);
          }
          while (v51 != v26);
          return result;
        }
        v32 = v28;
        v33 = *(_QWORD *)v28;
        v34 = *(_QWORD *)v29;
        v35 = *(_QWORD *)(*v27 + 8 * v33);
        v36 = *(_QWORD *)(*v27 + 8 * *(_QWORD *)v29);
        if (v35 < v36)
          v34 = v33;
        v29 += 8 * (v35 >= v36);
        v28 = &v32[8 * (v35 < v36)];
        v30->n128_u64[0] = v34;
        v30 = (__n128 *)((char *)v30 + 8);
        v8 = (__n128 *)((char *)v8 + 8);
      }
      while (v29 != v26);
      if (v28 != v31)
      {
        v37 = -8;
        if (v35 >= v36)
          v37 = 0;
        v38 = &a5[8 * a4] - v32 + v37 - 8;
        if (v38 < 0x78 || (unint64_t)((char *)v8 - &v32[8 * (v35 < v36)]) < 0x20)
          goto LABEL_48;
        v39 = 0;
        v40 = (v38 >> 3) + 1;
        v41 = v35 >= v36;
        v42 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        v28 += v42;
        v43 = (__n128 *)((char *)v30 + v42);
        v44 = v41 ? 2 : 1;
        v45 = &v32[8 * (v44 & 1)];
        v46 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = &v30[v39];
          result = *(__n128 *)&v45[v39 * 16];
          v48 = *(__n128 *)&v45[v39 * 16 + 16];
          *v47 = result;
          v47[1] = v48;
          v39 += 2;
          v46 -= 4;
        }
        while (v46);
        v30 = v43;
        if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            v49 = *(_QWORD *)v28;
            v28 += 8;
            v30->n128_u64[0] = v49;
            v30 = (__n128 *)((char *)v30 + 8);
          }
          while (v28 != v31);
        }
      }
    }
    else if (a1 != (char *)a2)
    {
      v12 = a1 + 8;
      if (a1 + 8 != (char *)a2)
      {
        v13 = 0;
        v14 = **a3;
        v15 = a1;
        do
        {
          v17 = *(_QWORD *)v15;
          v15 = v12;
          v18 = *(_QWORD *)v12;
          if (*(_QWORD *)(v14 + 8 * v18) < *(_QWORD *)(v14 + 8 * v17))
          {
            v19 = v13;
            do
            {
              *(_QWORD *)&a1[v19 + 8] = v17;
              if (!v19)
              {
                v16 = a1;
                goto LABEL_10;
              }
              v17 = *(_QWORD *)&a1[v19 - 8];
              v19 -= 8;
            }
            while (*(_QWORD *)(v14 + 8 * v18) < *(_QWORD *)(v14 + 8 * v17));
            v16 = &a1[v19 + 8];
LABEL_10:
            *(_QWORD *)v16 = v18;
          }
          v12 = v15 + 8;
          v13 += 8;
        }
        while (v15 + 8 != (char *)a2);
      }
    }
  }
  return result;
}

__n128 sub_2395F8D18(char *a1, char *a2, uint64_t **a3, unint64_t a4, char *a5)
{
  char *v5;
  char *v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 result;
  uint64_t *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;

  if (a4)
  {
    v5 = a5;
    v7 = a1;
    if (a4 == 1)
    {
LABEL_8:
      *(_QWORD *)v5 = *(_QWORD *)v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = *((_QWORD *)a2 - 1);
      v11 = **a3;
      v12 = *(_QWORD *)(v11 + 8 * v10);
      v13 = *(_QWORD *)(v11 + 8 * *(_QWORD *)a1);
      if (v12 >= v13)
        v10 = *(_QWORD *)a1;
      *(_QWORD *)a5 = v10;
      v5 = a5 + 8;
      if (v12 >= v13)
        v7 = a2 - 8;
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      v26 = a4 >> 1;
      v27 = 8 * (a4 >> 1);
      v28 = &a1[v27];
      sub_2395F89BC(a1, &a1[v27], a3, a4 >> 1, a5, a4 >> 1);
      sub_2395F89BC(&v7[v27], a2, a3, a4 - v26, &v5[v27], a4 - v26);
      v30 = *a3;
      v31 = v5;
      v32 = v7;
      v33 = &v7[v27];
      do
      {
        if (v33 == a2)
        {
          if (v32 == v28)
            return result;
          v51 = &v7[8 * v26] - v32 - 8;
          if (v51 >= 0x38 && (unint64_t)(v31 - v32) >= 0x20)
          {
            v55 = 0;
            v56 = (v51 >> 3) + 1;
            v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
            v52 = &v5[v57];
            v53 = &v32[v57];
            v58 = v56 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v59 = &v5[v55];
              result = *(__n128 *)&v32[v55];
              v60 = *(_OWORD *)&v32[v55 + 16];
              *(__n128 *)v59 = result;
              *((_OWORD *)v59 + 1) = v60;
              v55 += 32;
              v58 -= 4;
            }
            while (v58);
            if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
              return result;
          }
          else
          {
            v52 = v5;
            v53 = v32;
          }
          do
          {
            v54 = *(_QWORD *)v53;
            v53 += 8;
            *(_QWORD *)v52 = v54;
            v52 += 8;
          }
          while (v53 != v28);
          return result;
        }
        v34 = v33;
        v35 = *(_QWORD *)v33;
        v36 = *(_QWORD *)v32;
        v37 = *(_QWORD *)(*v30 + 8 * v35);
        v38 = *(_QWORD *)(*v30 + 8 * *(_QWORD *)v32);
        if (v37 < v38)
          v36 = v35;
        v33 = &v34[8 * (v37 < v38)];
        v32 += 8 * (v37 >= v38);
        *(_QWORD *)v5 = v36;
        v5 += 8;
        v31 += 8;
      }
      while (v32 != v28);
      if (v33 != a2)
      {
        v39 = -8;
        if (v37 >= v38)
          v39 = 0;
        v40 = a2 - v34 + v39 - 8;
        if (v40 < 0x68)
          goto LABEL_49;
        if ((unint64_t)(v31 - &v34[8 * (v37 < v38)]) < 0x20)
          goto LABEL_49;
        v41 = 0;
        v42 = (v40 >> 3) + 1;
        v43 = v37 < v38;
        v44 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        v45 = &v5[v44];
        v33 += v44;
        v46 = &v34[8 * v43];
        v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = &v5[v41];
          result = *(__n128 *)&v46[v41];
          v49 = *(_OWORD *)&v46[v41 + 16];
          *(__n128 *)v48 = result;
          *((_OWORD *)v48 + 1) = v49;
          v41 += 32;
          v47 -= 4;
        }
        while (v47);
        v5 = v45;
        if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_49:
          do
          {
            v50 = *(_QWORD *)v33;
            v33 += 8;
            *(_QWORD *)v5 = v50;
            v5 += 8;
          }
          while (v33 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v14 = *a3;
      v15 = a1 + 8;
      *(_QWORD *)a5 = *(_QWORD *)a1;
      if (a1 + 8 != a2)
      {
        v16 = 0;
        v17 = *v14;
        v18 = a5;
        v19 = (uint64_t *)a5;
        do
        {
          while (1)
          {
            v21 = *v19++;
            v20 = v21;
            if (*(_QWORD *)(v17 + 8 * *(_QWORD *)v15) < *(_QWORD *)(v17 + 8 * v21))
              break;
            *v19 = *(_QWORD *)v15;
            v15 += 8;
            v16 += 8;
            v18 = (char *)v19;
            if (v15 == a2)
              return result;
          }
          *((_QWORD *)v18 + 1) = v20;
          v22 = a5;
          if (v18 != a5)
          {
            v23 = v16;
            while (1)
            {
              v22 = &a5[v23];
              v24 = *(_QWORD *)&a5[v23 - 8];
              if (*(_QWORD *)(v17 + 8 * *(_QWORD *)v15) >= *(_QWORD *)(v17 + 8 * v24))
                break;
              *(_QWORD *)v22 = v24;
              v23 -= 8;
              if (!v23)
              {
                v22 = a5;
                break;
              }
            }
          }
          v25 = *(_QWORD *)v15;
          v15 += 8;
          *(_QWORD *)v22 = v25;
          v16 += 8;
          v18 = (char *)v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

__n128 sub_2395F9034(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  __n128 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __n128 *v43;
  unint64_t v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  __n128 *v52;
  __n128 *v53;
  __n128 *v54;
  uint64_t v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t **v61;
  char *v62;
  __n128 *v63;
  __n128 result;
  __n128 *v65;
  char *v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  __n128 *v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  __n128 v81;
  unint64_t v82;
  char *v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  __n128 *v87;
  __n128 *v88;
  uint64_t v89;
  __n128 v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  _BOOL4 v94;
  unint64_t v95;
  __n128 *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  __n128 *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __n128 *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t **v116;
  uint64_t **v117;
  uint64_t v118;

  if (!a6)
    return result;
  v9 = a6;
  while (v9 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    v14 = 0;
    v15 = **a4;
    v16 = -a5;
    while (1)
    {
      v17 = a1->n128_i64[v14 / 8];
      if (*(_QWORD *)(v15 + 8 * a2->n128_u64[0]) < *(_QWORD *)(v15 + 8 * v17))
        break;
      v14 += 8;
      if (__CFADD__(v16++, 1))
        return result;
    }
    v19 = (__n128 *)((char *)a1 + v14);
    if (-v16 >= v9)
    {
      if (v16 == -1)
      {
        a1->n128_u64[v14 / 8] = a2->n128_u64[0];
        a2->n128_u64[0] = v17;
        return result;
      }
      if (v16 <= 0)
        v37 = -v16;
      else
        v37 = 1 - v16;
      v29 = v37 >> 1;
      v23 = (__n128 *)((char *)a1 + 8 * (v37 >> 1) + v14);
      v22 = (char *)a2;
      if (a2 != a3)
      {
        v38 = ((char *)a3 - (char *)a2) >> 3;
        v22 = (char *)a2;
        do
        {
          v39 = v38 >> 1;
          v40 = &v22[8 * (v38 >> 1)];
          v42 = *(_QWORD *)v40;
          v41 = v40 + 8;
          v38 += ~(v38 >> 1);
          if (*(_QWORD *)(v15 + 8 * v42) < *(_QWORD *)(v15 + 8 * v23->n128_u64[0]))
            v22 = v41;
          else
            v38 = v39;
        }
        while (v38);
      }
      v21 = (v22 - (char *)a2) >> 3;
      if (v23 != a2)
      {
LABEL_22:
        v30 = v22 - (char *)a2;
        if (v22 == (char *)a2)
        {
          a2 = v23;
        }
        else
        {
          v31 = (__n128 *)&v23->n128_i8[8];
          v118 = v21;
          if (&v23->n128_i8[8] == (__int8 *)a2)
          {
            v111 = v23->n128_u64[0];
            v113 = v29;
            v114 = a7;
            v116 = a4;
            v43 = a3;
            memmove(v23, a2, v22 - (char *)a2);
            a4 = v116;
            v21 = v118;
            v29 = v113;
            a7 = v114;
            v19 = (__n128 *)((char *)a1 + v14);
            a3 = v43;
            a2 = (__n128 *)((char *)v23 + v30);
            *(unint64_t *)((char *)v23->n128_u64 + v30) = v111;
          }
          else
          {
            v32 = v29;
            v33 = &a2->n128_i8[8];
            if (&a2->n128_i8[8] == v22)
            {
              v44 = *((_QWORD *)v22 - 1);
              a2 = (__n128 *)&v23->n128_i8[8];
              if (v22 - 8 != (char *)v23)
              {
                v115 = a7;
                v117 = a4;
                v45 = a3;
                v112 = *((_QWORD *)v22 - 1);
                memmove(&v23->n128_i8[8], v23, v22 - 8 - (char *)v23);
                v44 = v112;
                v19 = (__n128 *)((char *)a1 + v14);
                a7 = v115;
                a4 = v117;
                a3 = v45;
              }
              v23->n128_u64[0] = v44;
              v29 = v32;
              v21 = v118;
            }
            else
            {
              v34 = ((char *)a2 - (char *)v23) >> 3;
              if (v34 == v30 >> 3)
              {
                do
                {
                  v35 = v31[-1].n128_i64[1];
                  v31[-1].n128_u64[1] = *((_QWORD *)v33 - 1);
                  *((_QWORD *)v33 - 1) = v35;
                  if (v31 == a2)
                    break;
                  v31 = (__n128 *)((char *)v31 + 8);
                  v36 = v33 == v22;
                  v33 += 8;
                }
                while (!v36);
              }
              else
              {
                v46 = v30 >> 3;
                v47 = ((char *)a2 - (char *)v23) >> 3;
                do
                {
                  v48 = v47;
                  v47 = v46;
                  v46 = v48 % v46;
                }
                while (v46);
                if (v47)
                {
                  v49 = (__n128 *)((char *)v23 + 8 * v47);
                  do
                  {
                    v51 = v49[-1].n128_i64[1];
                    v49 = (__n128 *)((char *)v49 - 8);
                    v50 = v51;
                    v52 = (__n128 *)((char *)v49 + 8 * v34);
                    v53 = v49;
                    do
                    {
                      v54 = v52;
                      v53->n128_u64[0] = v52->n128_u64[0];
                      v55 = (v22 - (char *)v52) >> 3;
                      v56 = __OFSUB__(v34, v55);
                      v58 = v34 - v55;
                      v57 = (v58 < 0) ^ v56;
                      v52 = (__n128 *)((char *)v23 + 8 * v58);
                      if (v57)
                        v52 = (__n128 *)((char *)v54 + 8 * v34);
                      v53 = v54;
                    }
                    while (v52 != v49);
                    v54->n128_u64[0] = v50;
                  }
                  while (v49 != v23);
                }
                a2 = (__n128 *)((char *)v23 + 8 * (v30 >> 3));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v9 >= 0)
        v20 = v9;
      else
        v20 = v9 + 1;
      v21 = v20 >> 1;
      v22 = &a2->n128_i8[8 * (v20 >> 1)];
      v23 = a2;
      if ((char *)a2 - (char *)a1 != v14)
      {
        v24 = (uint64_t)((char *)a2 - (char *)a1 - v14) >> 3;
        v23 = (__n128 *)((char *)a1 + v14);
        do
        {
          v25 = v24 >> 1;
          v26 = &v23->n128_u64[v24 >> 1];
          v28 = *v26;
          v27 = (__n128 *)(v26 + 1);
          v24 += ~(v24 >> 1);
          if (*(_QWORD *)(v15 + 8 * *(_QWORD *)v22) < *(_QWORD *)(v15 + 8 * v28))
            v24 = v25;
          else
            v23 = v27;
        }
        while (v24);
      }
      v29 = (uint64_t)((char *)v23 - (char *)a1 - v14) >> 3;
      if (v23 != a2)
        goto LABEL_22;
    }
    a2 = (__n128 *)v22;
LABEL_57:
    a5 = -(v29 + v16);
    v59 = v9 - v21;
    if (v29 + v21 >= v9 - (v29 + v21) - v16)
    {
      v65 = a2;
      v66 = v22;
      v67 = a4;
      v68 = v29;
      v69 = v21;
      v70 = a7;
      a1 = v19;
      sub_2395F9034(a2, v66, a3);
      a4 = v67;
      a7 = v70;
      a2 = v23;
      v71 = v69;
      a5 = v68;
      a3 = v65;
      v9 = v71;
      if (!v71)
        return result;
    }
    else
    {
      v60 = &a1->n128_u64[v14 / 8];
      v61 = a4;
      v62 = a7;
      v63 = a3;
      sub_2395F9034(v60, v23, a2);
      a4 = v61;
      a3 = v63;
      a7 = v62;
      a1 = a2;
      a2 = (__n128 *)v22;
      v9 = v59;
      if (!v59)
        return result;
    }
  }
  if (a5 <= v9)
  {
    if (a1 != a2)
    {
      v82 = (char *)a2 - (char *)a1 - 8;
      v83 = a7;
      v84 = a1;
      if (v82 < 0x18)
        goto LABEL_109;
      v83 = a7;
      v84 = a1;
      if ((unint64_t)(a7 - (char *)a1) < 0x20)
        goto LABEL_109;
      v85 = (v82 >> 3) + 1;
      v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
      v83 = &a7[v86];
      v84 = (__n128 *)((char *)a1 + v86);
      v87 = a1 + 1;
      v88 = (__n128 *)(a7 + 16);
      v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v87[-1];
        v90 = *v87;
        v88[-1] = result;
        *v88 = v90;
        v87 += 2;
        v88 += 2;
        v89 -= 4;
      }
      while (v89);
      if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_109:
        do
        {
          v91 = v84->n128_u64[0];
          v84 = (__n128 *)((char *)v84 + 8);
          *(_QWORD *)v83 = v91;
          v83 += 8;
        }
        while (v84 != a2);
      }
      if (v83 != a7)
      {
        v92 = *a4;
        while (a2 != a3)
        {
          v93 = a2->n128_u64[0];
          v94 = *(_QWORD *)(*v92 + 8 * a2->n128_u64[0]) >= *(_QWORD *)(*v92 + 8 * *(_QWORD *)a7);
          if (*(_QWORD *)(*v92 + 8 * a2->n128_u64[0]) >= *(_QWORD *)(*v92 + 8 * *(_QWORD *)a7))
            v93 = *(_QWORD *)a7;
          a2 = (__n128 *)((char *)a2
                        + 8 * (*(_QWORD *)(*v92 + 8 * a2->n128_u64[0]) < *(_QWORD *)(*v92 + 8 * *(_QWORD *)a7)));
          a7 += 8 * v94;
          a1->n128_u64[0] = v93;
          a1 = (__n128 *)((char *)a1 + 8);
          if (a7 == v83)
            return result;
        }
        memmove(a1, a7, v83 - a7);
      }
    }
    return result;
  }
  v72 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v73 = v72 - 8;
  if ((unint64_t)(v72 - 8) < 0x18)
  {
    v74 = a7;
    v75 = a2;
    do
    {
LABEL_87:
      v95 = v75->n128_u64[0];
      v75 = (__n128 *)((char *)v75 + 8);
      *(_QWORD *)v74 = v95;
      v74 += 8;
    }
    while (v75 != a3);
    goto LABEL_88;
  }
  v74 = a7;
  v75 = a2;
  if ((unint64_t)(a7 - (char *)a2) < 0x20)
    goto LABEL_87;
  v76 = (v73 >> 3) + 1;
  v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
  v74 = &a7[v77];
  v75 = (__n128 *)((char *)a2 + v77);
  v78 = a2 + 1;
  v79 = (__n128 *)(a7 + 16);
  v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = v78[-1];
    v81 = *v78;
    v79[-1] = result;
    *v79 = v81;
    v78 += 2;
    v79 += 2;
    v80 -= 4;
  }
  while (v80);
  if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_87;
LABEL_88:
  if (v74 != a7)
  {
    v96 = a3;
    while (a2 != a1)
    {
      v97 = a2[-1].n128_i64[1];
      v98 = **a4;
      v99 = *(_QWORD *)(v98 + 8 * *((_QWORD *)v74 - 1));
      v100 = *(_QWORD *)(v98 + 8 * v97);
      if (v99 < v100)
        a2 = (__n128 *)((char *)a2 - 8);
      else
        v97 = *((_QWORD *)v74 - 1);
      if (v99 >= v100)
        v74 -= 8;
      a3[-1].n128_u64[1] = v97;
      a3 = (__n128 *)((char *)a3 - 8);
      v96 = (__n128 *)((char *)v96 - 8);
      if (v74 == a7)
        return result;
    }
    v101 = v74 - a7 - 8;
    if (v101 < 0x58 || (unint64_t)(v74 - (char *)v96) < 0x20)
    {
      v102 = v74;
      v103 = a3;
      goto LABEL_101;
    }
    v106 = 0;
    v107 = (v101 >> 3) + 1;
    v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
    v102 = &v74[-v108];
    v103 = (__n128 *)((char *)a3 - v108);
    v109 = v107 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = *(__n128 *)&v74[v106 * 16 - 16];
      v110 = &a3[v106];
      v110[-2] = *(__n128 *)&v74[v106 * 16 - 32];
      v110[-1] = result;
      v106 -= 2;
      v109 -= 4;
    }
    while (v109);
    if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_101:
      v104 = &v103[-1].n128_u64[1];
      do
      {
        v105 = *((_QWORD *)v102 - 1);
        v102 -= 8;
        *v104-- = v105;
      }
      while (v102 != a7);
    }
  }
  return result;
}

__n128 sub_2395F9688(char *a1, char *a2, uint64_t **a3, unint64_t a4, char *a5, uint64_t a6)
{
  char *v7;
  __n128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  char v13;
  unint64_t v14;
  const void **v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 *v21;
  const void **v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  const void **v26;
  size_t v27;
  unint64_t v28;
  size_t v29;
  const void *v30;
  size_t v31;
  const void *v32;
  size_t v33;
  int v34;
  __n128 result;
  BOOL v36;
  _BOOL4 v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  const void **v42;
  size_t v43;
  unint64_t v44;
  size_t v45;
  const void *v46;
  size_t v47;
  const void *v48;
  size_t v49;
  int v50;
  _BOOL4 v51;
  unint64_t v53;
  __n128 *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t *v60;
  char *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  __n128 *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  const void **v73;
  size_t v74;
  unint64_t v75;
  char *v76;
  size_t v77;
  const void *v78;
  size_t v79;
  const void *v80;
  size_t v81;
  int v82;
  _BOOL4 v83;
  unint64_t v84;
  uint64_t *v85;
  __n128 *v86;
  unint64_t v87;
  size_t v88;
  const void *v89;
  size_t v90;
  const void *v91;
  size_t v92;
  int v93;
  _BOOL4 v94;
  unint64_t v95;
  uint64_t *v96;
  __n128 *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 *v103;
  __n128 v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 *v109;
  __n128 v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v114;
  unint64_t v115;

  if (a4 < 2)
    return result;
  v7 = a2;
  v8 = (__n128 *)a1;
  if (a4 == 2)
  {
    v9 = *((_QWORD *)a2 - 1);
    v10 = *(_QWORD *)a1;
    v11 = **a3;
    v12 = (const void **)(v11 + 24 * v9);
    v13 = *((_BYTE *)v12 + 23);
    if (v13 < 0)
    {
      v14 = (unint64_t)v12[1];
      v15 = (const void **)(v11 + 24 * v10);
      v16 = *((unsigned __int8 *)v15 + 23);
      if ((*((char *)v15 + 23) & 0x80000000) == 0)
      {
LABEL_5:
        if (v14 < v16)
          goto LABEL_152;
        goto LABEL_88;
      }
    }
    else
    {
      v14 = *((unsigned __int8 *)v12 + 23);
      v15 = (const void **)(v11 + 24 * v10);
      v16 = *((unsigned __int8 *)v15 + 23);
      if ((*((char *)v15 + 23) & 0x80000000) == 0)
        goto LABEL_5;
    }
    if (v14 < (unint64_t)v15[1])
      goto LABEL_152;
LABEL_88:
    if ((*((_BYTE *)v12 + 23) & 0x80) != 0)
    {
      v58 = (unint64_t)v12[1];
      if ((v16 & 0x80) == 0)
      {
LABEL_90:
        if (v58 > v16)
          return result;
        goto LABEL_134;
      }
    }
    else
    {
      v58 = *((unsigned __int8 *)v12 + 23);
      if ((v16 & 0x80) == 0)
        goto LABEL_90;
    }
    if (v58 > (unint64_t)v15[1])
      return result;
LABEL_134:
    if (v13 >= 0)
      v88 = *((unsigned __int8 *)v12 + 23);
    else
      v88 = (size_t)v12[1];
    if (v13 >= 0)
      v89 = v12;
    else
      v89 = *v12;
    if ((v16 & 0x80u) == 0)
      v90 = v16;
    else
      v90 = (size_t)v15[1];
    if ((v16 & 0x80u) == 0)
      v91 = v15;
    else
      v91 = *v15;
    if (v90 >= v88)
      v92 = v88;
    else
      v92 = v90;
    v93 = memcmp(v89, v91, v92);
    v94 = v88 < v90;
    if (v93)
      v94 = v93 < 0;
    if (!v94)
      return result;
LABEL_152:
    v8->n128_u64[0] = v9;
    *((_QWORD *)v7 - 1) = v10;
    return result;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (a1 == a2)
      return result;
    v17 = a1 + 8;
    if (a1 + 8 == a2)
      return result;
    v18 = 0;
    v19 = **a3;
    v20 = a1;
LABEL_14:
    v21 = (__n128 *)v20;
    v20 = v17;
    v115 = *(_QWORD *)v17;
    v22 = (const void **)(v19 + 24 * *(_QWORD *)v17);
    v23 = *((_BYTE *)v22 + 23);
    if (v23 < 0)
    {
      v24 = (unint64_t)v22[1];
      v25 = v21->n128_u64[0];
      v26 = (const void **)(v19 + 24 * v21->n128_u64[0]);
      v27 = *((unsigned __int8 *)v26 + 23);
      if ((*((char *)v26 + 23) & 0x80000000) == 0)
      {
LABEL_16:
        if (v24 < v27)
          goto LABEL_47;
        goto LABEL_20;
      }
    }
    else
    {
      v24 = *((unsigned __int8 *)v22 + 23);
      v25 = v21->n128_u64[0];
      v26 = (const void **)(v19 + 24 * v21->n128_u64[0]);
      v27 = *((unsigned __int8 *)v26 + 23);
      if ((*((char *)v26 + 23) & 0x80000000) == 0)
        goto LABEL_16;
    }
    if (v24 < (unint64_t)v26[1])
    {
LABEL_47:
      *(_QWORD *)v20 = v25;
      if (v21 == v8)
      {
        v21 = v8;
        goto LABEL_12;
      }
      v38 = v18;
      while (1)
      {
        v39 = *((_BYTE *)v22 + 23);
        if (v39 < 0)
        {
          v40 = (unint64_t)v22[1];
          v41 = *(unint64_t *)((char *)&v8->n128_u64[-1] + v38);
          v42 = (const void **)(v19 + 24 * v41);
          v43 = *((unsigned __int8 *)v42 + 23);
          if ((*((char *)v42 + 23) & 0x80000000) == 0)
          {
LABEL_52:
            if (v40 >= v43)
              goto LABEL_56;
            goto LABEL_49;
          }
        }
        else
        {
          v40 = *((unsigned __int8 *)v22 + 23);
          v41 = *(unint64_t *)((char *)&v8->n128_u64[-1] + v38);
          v42 = (const void **)(v19 + 24 * v41);
          v43 = *((unsigned __int8 *)v42 + 23);
          if ((*((char *)v42 + 23) & 0x80000000) == 0)
            goto LABEL_52;
        }
        if (v40 >= (unint64_t)v42[1])
        {
LABEL_56:
          if ((*((_BYTE *)v22 + 23) & 0x80) != 0)
          {
            v44 = (unint64_t)v22[1];
            if ((v43 & 0x80) == 0)
              goto LABEL_58;
          }
          else
          {
            v44 = *((unsigned __int8 *)v22 + 23);
            if ((v43 & 0x80) == 0)
            {
LABEL_58:
              if (v44 > v43)
                goto LABEL_82;
LABEL_62:
              if (v39 >= 0)
                v45 = *((unsigned __int8 *)v22 + 23);
              else
                v45 = (size_t)v22[1];
              if (v39 >= 0)
                v46 = v22;
              else
                v46 = *v22;
              if ((v43 & 0x80u) == 0)
                v47 = v43;
              else
                v47 = (size_t)v42[1];
              if ((v43 & 0x80u) == 0)
                v48 = v42;
              else
                v48 = *v42;
              if (v47 >= v45)
                v49 = v45;
              else
                v49 = v47;
              v50 = memcmp(v46, v48, v49);
              v51 = v45 < v47;
              if (v50)
                v51 = v50 < 0;
              if (!v51)
                goto LABEL_83;
              goto LABEL_49;
            }
          }
          if (v44 > (unint64_t)v42[1])
          {
LABEL_82:
            v21 = (__n128 *)((char *)v8 + v38);
LABEL_83:
            v7 = a2;
LABEL_12:
            v21->n128_u64[0] = v115;
LABEL_13:
            v17 = v20 + 8;
            v18 += 8;
            if (v20 + 8 == v7)
              return result;
            goto LABEL_14;
          }
          goto LABEL_62;
        }
LABEL_49:
        v21 = (__n128 *)((char *)v21 - 8);
        *(unint64_t *)((char *)v8->n128_u64 + v38) = v41;
        v38 -= 8;
        if (!v38)
        {
          v21 = v8;
          goto LABEL_83;
        }
      }
    }
LABEL_20:
    if ((*((_BYTE *)v22 + 23) & 0x80) != 0)
    {
      v28 = (unint64_t)v22[1];
      if ((v27 & 0x80) == 0)
      {
LABEL_22:
        if (v28 > v27)
          goto LABEL_13;
        goto LABEL_26;
      }
    }
    else
    {
      v28 = *((unsigned __int8 *)v22 + 23);
      if ((v27 & 0x80) == 0)
        goto LABEL_22;
    }
    if (v28 > (unint64_t)v26[1])
      goto LABEL_13;
LABEL_26:
    if (v23 >= 0)
      v29 = *((unsigned __int8 *)v22 + 23);
    else
      v29 = (size_t)v22[1];
    if (v23 >= 0)
      v30 = (const void *)(v19 + 24 * v115);
    else
      v30 = *v22;
    if ((v27 & 0x80u) == 0)
      v31 = v27;
    else
      v31 = (size_t)v26[1];
    if ((v27 & 0x80u) == 0)
      v32 = v26;
    else
      v32 = *v26;
    if (v31 >= v29)
      v33 = v29;
    else
      v33 = v31;
    v34 = memcmp(v30, v32, v33);
    v36 = v29 >= v31;
    v7 = a2;
    v37 = !v36;
    if (v34)
      v37 = v34 < 0;
    if (!v37)
      goto LABEL_13;
    goto LABEL_47;
  }
  v53 = a4 >> 1;
  v54 = (__n128 *)&a1[8 * (a4 >> 1)];
  v55 = a4 - (a4 >> 1);
  if ((uint64_t)a4 > a6)
  {
    v56 = a4 >> 1;
    sub_2395F9688(a1, &a1[8 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
    sub_2395F9688(v54, v7, a3, v55, a5, a6);
    result.n128_u64[0] = sub_2395FA3EC(v8, v54, v7, a3, v56, v55, a5, a6).n128_u64[0];
    return result;
  }
  sub_2395F9D78(a1, &a1[8 * (a4 >> 1)], a3, a4 >> 1, (uint64_t *)a5);
  v111 = v53;
  v60 = (uint64_t *)&a5[8 * v53];
  result.n128_u64[0] = sub_2395F9D78((char *)v54, v7, a3, v55, v60).n128_u64[0];
  v61 = a5;
  v62 = *a3;
  v63 = v60;
  v64 = (uint64_t *)a5;
  v65 = v8;
  v112 = a4;
  v114 = *a3;
  v66 = &a5[8 * a4];
  do
  {
    while (1)
    {
      if (v63 == (uint64_t *)v66)
      {
        if (v64 == v60)
          return result;
        v95 = &v61[8 * v111] - (char *)v64 - 8;
        if (v95 >= 0x38 && (unint64_t)((char *)v8 - (char *)v64) >= 0x20)
        {
          v105 = 0;
          v106 = (v95 >> 3) + 1;
          v107 = v106 & 0x3FFFFFFFFFFFFFFCLL;
          v96 = &v64[v107];
          v97 = (__n128 *)((char *)v65 + v107 * 8);
          v108 = v106 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v109 = &v65[v105 / 2];
            result = *(__n128 *)&v64[v105];
            v110 = *(__n128 *)&v64[v105 + 2];
            *v109 = result;
            v109[1] = v110;
            v105 += 4;
            v108 -= 4;
          }
          while (v108);
          if (v106 == (v106 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v96 = v64;
          v97 = v65;
        }
        do
        {
          v98 = *v96++;
          v97->n128_u64[0] = v98;
          v97 = (__n128 *)((char *)v97 + 8);
        }
        while (v96 != v60);
        return result;
      }
      v67 = *v63;
      v68 = *v62;
      v69 = *v62 + 24 * *v63;
      v70 = *(_BYTE *)(v69 + 23);
      if (v70 < 0)
        break;
      v71 = *(unsigned __int8 *)(v69 + 23);
      v72 = *v64;
      v73 = (const void **)(v68 + 24 * *v64);
      v74 = *((unsigned __int8 *)v73 + 23);
      if ((*((char *)v73 + 23) & 0x80000000) == 0)
        goto LABEL_97;
LABEL_100:
      if (v71 >= (unint64_t)v73[1])
        goto LABEL_101;
LABEL_93:
      v65->n128_u64[0] = v67;
      v65 = (__n128 *)((char *)v65 + 8);
      ++v63;
      v8 = (__n128 *)((char *)v8 + 8);
      if (v64 == v60)
        goto LABEL_126;
    }
    v71 = *(_QWORD *)(v69 + 8);
    v72 = *v64;
    v73 = (const void **)(v68 + 24 * *v64);
    v74 = *((unsigned __int8 *)v73 + 23);
    if (*((char *)v73 + 23) < 0)
      goto LABEL_100;
LABEL_97:
    if (v71 < v74)
      goto LABEL_93;
LABEL_101:
    if ((*(_BYTE *)(v69 + 23) & 0x80) != 0)
    {
      v75 = *(_QWORD *)(v69 + 8);
      if ((v74 & 0x80) != 0)
      {
LABEL_106:
        if (v75 > (unint64_t)v73[1])
          goto LABEL_125;
        goto LABEL_107;
      }
    }
    else
    {
      v75 = *(unsigned __int8 *)(v69 + 23);
      if ((v74 & 0x80) != 0)
        goto LABEL_106;
    }
    if (v75 > v74)
      goto LABEL_125;
LABEL_107:
    v76 = v66;
    if (v70 >= 0)
      v77 = *(unsigned __int8 *)(v69 + 23);
    else
      v77 = *(_QWORD *)(v69 + 8);
    if (v70 >= 0)
      v78 = (const void *)(*v62 + 24 * *v63);
    else
      v78 = *(const void **)v69;
    if ((v74 & 0x80u) == 0)
      v79 = v74;
    else
      v79 = (size_t)v73[1];
    if ((v74 & 0x80u) == 0)
      v80 = v73;
    else
      v80 = *v73;
    if (v79 >= v77)
      v81 = v77;
    else
      v81 = v79;
    v82 = memcmp(v78, v80, v81);
    v62 = v114;
    v61 = a5;
    v66 = v76;
    v83 = v77 < v79;
    if (v82)
      v83 = v82 < 0;
    if (v83)
      goto LABEL_93;
LABEL_125:
    v65->n128_u64[0] = v72;
    v65 = (__n128 *)((char *)v65 + 8);
    ++v64;
    v8 = (__n128 *)((char *)v8 + 8);
  }
  while (v64 != v60);
LABEL_126:
  if (v63 == (uint64_t *)v66)
    return result;
  v84 = &v61[8 * v112] - (char *)v63 - 8;
  if (v84 < 0x48 || (unint64_t)((char *)v8 - (char *)v63) < 0x20)
  {
    v85 = v63;
    v86 = v65;
    do
    {
LABEL_130:
      v87 = *v85++;
      v86->n128_u64[0] = v87;
      v86 = (__n128 *)((char *)v86 + 8);
    }
    while (v85 != (uint64_t *)v66);
    return result;
  }
  v99 = 0;
  v100 = (v84 >> 3) + 1;
  v101 = v100 & 0x3FFFFFFFFFFFFFFCLL;
  v85 = &v63[v101];
  v86 = (__n128 *)((char *)v65 + v101 * 8);
  v102 = v100 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v103 = &v65[v99 / 2];
    result = *(__n128 *)&v63[v99];
    v104 = *(__n128 *)&v63[v99 + 2];
    *v103 = result;
    v103[1] = v104;
    v99 += 4;
    v102 -= 4;
  }
  while (v102);
  if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_130;
  return result;
}

__n128 sub_2395F9D78(char *a1, char *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  char *v7;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  char v15;
  unint64_t v16;
  const void **v17;
  size_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  size_t v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  int v38;
  __n128 result;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  const void **v47;
  size_t v48;
  unint64_t v49;
  size_t v50;
  const void *v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  const void **v70;
  size_t v71;
  unint64_t v72;
  uint64_t *v73;
  size_t v74;
  const void *v75;
  size_t v76;
  const void *v77;
  size_t v78;
  int v79;
  BOOL v80;
  _BOOL4 v81;
  unint64_t v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  size_t v91;
  const void *v92;
  size_t v93;
  const void *v94;
  size_t v95;
  int v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  __int128 v109;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;

  if (!a4)
    return result;
  v5 = a5;
  v7 = a1;
  if (a4 == 1)
  {
LABEL_159:
    *v5 = *(_QWORD *)v7;
    return result;
  }
  v9 = a2;
  if (a4 == 2)
  {
    v11 = a2 - 8;
    v10 = *((_QWORD *)a2 - 1);
    v12 = *(_QWORD *)a1;
    v13 = **a3;
    v14 = (const void **)(v13 + 24 * v10);
    v15 = *((_BYTE *)v14 + 23);
    if (v15 < 0)
    {
      v16 = (unint64_t)v14[1];
      v17 = (const void **)(v13 + 24 * v12);
      v18 = *((unsigned __int8 *)v17 + 23);
      if ((*((char *)v17 + 23) & 0x80000000) == 0)
      {
LABEL_6:
        if (v16 < v18)
          goto LABEL_158;
        goto LABEL_127;
      }
    }
    else
    {
      v16 = *((unsigned __int8 *)v14 + 23);
      v17 = (const void **)(v13 + 24 * v12);
      v18 = *((unsigned __int8 *)v17 + 23);
      if ((*((char *)v17 + 23) & 0x80000000) == 0)
        goto LABEL_6;
    }
    if (v16 < (unint64_t)v17[1])
    {
LABEL_158:
      *v5++ = v10;
      goto LABEL_159;
    }
LABEL_127:
    if ((*((_BYTE *)v14 + 23) & 0x80) != 0)
    {
      v86 = (unint64_t)v14[1];
      if ((v18 & 0x80) == 0)
      {
LABEL_129:
        if (v86 > v18)
          goto LABEL_157;
        goto LABEL_139;
      }
    }
    else
    {
      v86 = *((unsigned __int8 *)v14 + 23);
      if ((v18 & 0x80) == 0)
        goto LABEL_129;
    }
    if (v86 > (unint64_t)v17[1])
    {
LABEL_157:
      v10 = v12;
      v7 = v11;
      goto LABEL_158;
    }
LABEL_139:
    if (v15 >= 0)
      v91 = *((unsigned __int8 *)v14 + 23);
    else
      v91 = (size_t)v14[1];
    if (v15 >= 0)
      v92 = v14;
    else
      v92 = *v14;
    if ((v18 & 0x80u) == 0)
      v93 = v18;
    else
      v93 = (size_t)v17[1];
    if ((v18 & 0x80u) == 0)
      v94 = v17;
    else
      v94 = *v17;
    if (v93 >= v91)
      v95 = v91;
    else
      v95 = v93;
    v96 = memcmp(v92, v94, v95);
    v97 = v91 < v93;
    if (v96)
      v97 = v96 < 0;
    if (v97)
      goto LABEL_158;
    goto LABEL_157;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2)
      return result;
    v19 = *a3;
    v20 = (uint64_t *)(a1 + 8);
    *a5 = *(_QWORD *)a1;
    if (a1 + 8 == a2)
      return result;
    v113 = 0;
    v21 = *v19;
    v22 = a5;
LABEL_15:
    v25 = *v20;
    v26 = v21 + 24 * *v20;
    v27 = *(_BYTE *)(v26 + 23);
    if (v27 < 0)
      v28 = *(_QWORD *)(v26 + 8);
    else
      v28 = *(unsigned __int8 *)(v26 + 23);
    v29 = *v22;
    v111 = v22 + 1;
    v30 = v21 + 24 * *v22;
    v31 = *(unsigned __int8 *)(v30 + 23);
    if (*(char *)(v30 + 23) < 0)
    {
      if (v28 < *(_QWORD *)(v30 + 8))
      {
LABEL_46:
        v22[1] = v29;
        v23 = v5;
        if (v22 == v5)
          goto LABEL_13;
        v41 = v113;
        while (1)
        {
          v42 = v21 + 24 * *v20;
          v43 = *(_BYTE *)(v42 + 23);
          if (v43 < 0)
          {
            v44 = *(_QWORD *)(v42 + 8);
            v45 = (uint64_t *)((char *)v5 + v41);
            v46 = *(uint64_t *)((char *)v5 + v41 - 8);
            v47 = (const void **)(v21 + 24 * v46);
            v48 = *((unsigned __int8 *)v47 + 23);
            if (*((char *)v47 + 23) < 0)
            {
LABEL_54:
              if (v44 < (unint64_t)v47[1])
                goto LABEL_48;
              goto LABEL_55;
            }
          }
          else
          {
            v44 = *(unsigned __int8 *)(v42 + 23);
            v45 = (uint64_t *)((char *)v5 + v41);
            v46 = *(uint64_t *)((char *)v5 + v41 - 8);
            v47 = (const void **)(v21 + 24 * v46);
            v48 = *((unsigned __int8 *)v47 + 23);
            if (*((char *)v47 + 23) < 0)
              goto LABEL_54;
          }
          if (v44 < v48)
            goto LABEL_48;
LABEL_55:
          if ((*(_BYTE *)(v42 + 23) & 0x80) != 0)
          {
            v49 = *(_QWORD *)(v42 + 8);
            if ((v48 & 0x80) != 0)
            {
LABEL_60:
              if (v49 > (unint64_t)v47[1])
              {
LABEL_81:
                v23 = (uint64_t *)((char *)v5 + v41);
LABEL_13:
                *v23 = *v20;
                v24 = a2;
                v22 = v111;
LABEL_14:
                ++v20;
                v113 += 8;
                if (v20 == (uint64_t *)v24)
                  return result;
                goto LABEL_15;
              }
              goto LABEL_61;
            }
          }
          else
          {
            v49 = *(unsigned __int8 *)(v42 + 23);
            if ((v48 & 0x80) != 0)
              goto LABEL_60;
          }
          if (v49 > v48)
            goto LABEL_81;
LABEL_61:
          if (v43 >= 0)
            v50 = *(unsigned __int8 *)(v42 + 23);
          else
            v50 = *(_QWORD *)(v42 + 8);
          if (v43 >= 0)
            v51 = (const void *)(v21 + 24 * *v20);
          else
            v51 = *(const void **)v42;
          if ((v48 & 0x80u) == 0)
            v52 = v48;
          else
            v52 = (size_t)v47[1];
          if ((v48 & 0x80u) == 0)
            v53 = v47;
          else
            v53 = *v47;
          if (v52 >= v50)
            v54 = v50;
          else
            v54 = v52;
          v55 = memcmp(v51, v53, v54);
          v56 = v50 < v52;
          if (v55)
            v56 = v55 < 0;
          if (!v56)
          {
            v23 = v22;
            goto LABEL_13;
          }
LABEL_48:
          --v22;
          *v45 = v46;
          v41 -= 8;
          if (!v41)
          {
            v23 = v5;
            goto LABEL_13;
          }
        }
      }
    }
    else if (v28 < v31)
    {
      goto LABEL_46;
    }
    if ((*(_BYTE *)(v26 + 23) & 0x80) != 0)
    {
      v32 = *(_QWORD *)(v26 + 8);
      if ((v31 & 0x80) == 0)
      {
LABEL_24:
        if (v32 > v31)
          goto LABEL_80;
        goto LABEL_28;
      }
    }
    else
    {
      v32 = *(unsigned __int8 *)(v26 + 23);
      if ((v31 & 0x80) == 0)
        goto LABEL_24;
    }
    if (v32 > *(_QWORD *)(v30 + 8))
      goto LABEL_80;
LABEL_28:
    if (v27 >= 0)
      v33 = *(unsigned __int8 *)(v26 + 23);
    else
      v33 = *(_QWORD *)(v26 + 8);
    if (v27 >= 0)
      v34 = (const void *)(v21 + 24 * *v20);
    else
      v34 = *(const void **)v26;
    if ((v31 & 0x80u) == 0)
      v35 = *(unsigned __int8 *)(v30 + 23);
    else
      v35 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x80u) == 0)
      v36 = (const void *)(v21 + 24 * v29);
    else
      v36 = *(const void **)v30;
    if (v35 >= v33)
      v37 = v33;
    else
      v37 = v35;
    v38 = memcmp(v34, v36, v37);
    v40 = v33 < v35;
    if (v38)
      v40 = v38 < 0;
    if (!v40)
    {
LABEL_80:
      v24 = a2;
      ++v22;
      *v111 = v25;
      goto LABEL_14;
    }
    goto LABEL_46;
  }
  v57 = a4 >> 1;
  v58 = 8 * (a4 >> 1);
  v59 = &a1[v58];
  sub_2395F9688(a1, &a1[v58], a3, a4 >> 1, a5, a4 >> 1);
  v112 = a4 >> 1;
  sub_2395F9688(&v7[v58], v9, a3, a4 - v57, &v5[(unint64_t)v58 / 8], a4 - v57);
  v60 = *a3;
  v61 = (char *)v5;
  v62 = v7;
  v63 = &v7[v58];
  v114 = &v7[v58];
  do
  {
    while (1)
    {
      if (v63 == v9)
      {
        if (v62 == v59)
          return result;
        v87 = &v7[8 * v112] - v62 - 8;
        if (v87 >= 0x38 && (unint64_t)(v61 - v62) >= 0x20)
        {
          v104 = 0;
          v105 = (v87 >> 3) + 1;
          v106 = v105 & 0x3FFFFFFFFFFFFFFCLL;
          v88 = &v5[v106];
          v89 = &v62[v106 * 8];
          v107 = v105 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v108 = &v5[v104];
            result = *(__n128 *)&v62[v104 * 8];
            v109 = *(_OWORD *)&v62[v104 * 8 + 16];
            *(__n128 *)v108 = result;
            *((_OWORD *)v108 + 1) = v109;
            v104 += 4;
            v107 -= 4;
          }
          while (v107);
          if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
            return result;
        }
        else
        {
          v88 = v5;
          v89 = v62;
        }
        do
        {
          v90 = *(_QWORD *)v89;
          v89 += 8;
          *v88++ = v90;
        }
        while (v89 != v59);
        return result;
      }
      v64 = *(_QWORD *)v63;
      v65 = *v60;
      v66 = *v60 + 24 * *(_QWORD *)v63;
      v67 = *(_BYTE *)(v66 + 23);
      if (v67 < 0)
        break;
      v68 = *(unsigned __int8 *)(v66 + 23);
      v69 = *(_QWORD *)v62;
      v70 = (const void **)(v65 + 24 * *(_QWORD *)v62);
      v71 = *((unsigned __int8 *)v70 + 23);
      if ((*((char *)v70 + 23) & 0x80000000) == 0)
        goto LABEL_87;
LABEL_90:
      if (v68 >= (unint64_t)v70[1])
        goto LABEL_91;
LABEL_83:
      *v5++ = v64;
      v63 += 8;
      v61 += 8;
      if (v62 == v59)
        goto LABEL_119;
    }
    v68 = *(_QWORD *)(v66 + 8);
    v69 = *(_QWORD *)v62;
    v70 = (const void **)(v65 + 24 * *(_QWORD *)v62);
    v71 = *((unsigned __int8 *)v70 + 23);
    if (*((char *)v70 + 23) < 0)
      goto LABEL_90;
LABEL_87:
    if (v68 < v71)
      goto LABEL_83;
LABEL_91:
    if ((*(_BYTE *)(v66 + 23) & 0x80) != 0)
    {
      v72 = *(_QWORD *)(v66 + 8);
      if ((v71 & 0x80) != 0)
      {
LABEL_96:
        if (v72 > (unint64_t)v70[1])
          goto LABEL_118;
        goto LABEL_97;
      }
    }
    else
    {
      v72 = *(unsigned __int8 *)(v66 + 23);
      if ((v71 & 0x80) != 0)
        goto LABEL_96;
    }
    if (v72 > v71)
      goto LABEL_118;
LABEL_97:
    v73 = v60;
    if (v67 >= 0)
      v74 = *(unsigned __int8 *)(v66 + 23);
    else
      v74 = *(_QWORD *)(v66 + 8);
    if (v67 >= 0)
      v75 = (const void *)(*v60 + 24 * *(_QWORD *)v63);
    else
      v75 = *(const void **)v66;
    if ((v71 & 0x80u) == 0)
      v76 = v71;
    else
      v76 = (size_t)v70[1];
    if ((v71 & 0x80u) == 0)
      v77 = v70;
    else
      v77 = *v70;
    if (v76 >= v74)
      v78 = v74;
    else
      v78 = v76;
    v79 = memcmp(v75, v77, v78);
    v60 = v73;
    v59 = v114;
    v80 = v74 >= v76;
    v9 = a2;
    v81 = !v80;
    if (v79)
      v81 = v79 < 0;
    if (v81)
      goto LABEL_83;
LABEL_118:
    *v5++ = v69;
    v62 += 8;
    v61 += 8;
  }
  while (v62 != v59);
LABEL_119:
  if (v63 == v9)
    return result;
  v82 = v9 - v63 - 8;
  if (v82 < 0x48 || (unint64_t)(v61 - v63) < 0x20)
  {
    v83 = v5;
    v84 = v63;
    do
    {
LABEL_123:
      v85 = *(_QWORD *)v84;
      v84 += 8;
      *v83++ = v85;
    }
    while (v84 != v9);
    return result;
  }
  v98 = 0;
  v99 = (v82 >> 3) + 1;
  v100 = v99 & 0x3FFFFFFFFFFFFFFCLL;
  v83 = &v5[v100];
  v84 = &v63[v100 * 8];
  v101 = v99 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v102 = &v5[v98];
    result = *(__n128 *)&v63[v98 * 8];
    v103 = *(_OWORD *)&v63[v98 * 8 + 16];
    *(__n128 *)v102 = result;
    *((_OWORD *)v102 + 1) = v103;
    v98 += 4;
    v101 -= 4;
  }
  while (v101);
  if (v99 != (v99 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_123;
  return result;
}

__n128 sub_2395FA3EC(__n128 *a1, __n128 *a2, char *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void **v13;
  size_t v14;
  uint64_t v15;
  const void *v17;
  uint64_t v18;
  const void **v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  __n128 result;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __n128 *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  __n128 *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  size_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  int v52;
  const void *v53;
  size_t v54;
  BOOL v55;
  int v56;
  BOOL v57;
  unint64_t v58;
  const void **v59;
  size_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  size_t v65;
  size_t v66;
  const void *v67;
  size_t v68;
  int v69;
  _BOOL4 v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  size_t v84;
  size_t v85;
  size_t v86;
  const void *v87;
  size_t v88;
  int v89;
  BOOL v90;
  const void *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  size_t v97;
  const void *v98;
  size_t v99;
  int v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  BOOL v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  unint64_t v118;
  char *v119;
  __n128 *v120;
  __n128 *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  __n128 *v125;
  __n128 *v126;
  uint64_t v127;
  __n128 v128;
  __n128 *v129;
  unint64_t v130;
  char *v131;
  __n128 *v132;
  uint64_t v133;
  uint64_t v134;
  __n128 *v135;
  __n128 *v136;
  uint64_t v137;
  __n128 v138;
  unint64_t v139;
  uint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  unint64_t v145;
  char *v146;
  unint64_t v147;
  const void **v148;
  size_t v149;
  unint64_t v150;
  size_t v151;
  const void *v152;
  __n128 *v153;
  size_t v154;
  const void *v155;
  size_t v156;
  int v157;
  _BOOL4 v158;
  unint64_t v159;
  char *v160;
  uint64_t *v161;
  uint64_t v162;
  __n128 *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  const void **v169;
  size_t v170;
  unint64_t v171;
  size_t v172;
  const void *v173;
  size_t v174;
  const void *v175;
  size_t v176;
  int v177;
  BOOL v178;
  unint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  __n128 *v190;
  const void **__s1;
  const void **__s1a;
  uint64_t v197;
  __n128 *v199;

  v197 = a6;
  if (!a6)
    return result;
LABEL_2:
  v199 = a1;
  if (v197 > a8 && a5 > a8)
  {
    if (!a5)
      return result;
    v10 = 0;
    v11 = a2->n128_u64[0];
    v12 = **a4;
    v13 = (const void **)(v12 + 24 * a2->n128_u64[0]);
    v14 = *((unsigned __int8 *)v13 + 23);
    v15 = -a5;
    while (1)
    {
      v17 = (const void *)v14;
      if ((v14 & 0x80) != 0)
      {
        v17 = v13[1];
        v18 = a1->n128_i64[v10 / 8];
        v19 = (const void **)(v12 + 24 * v18);
        v20 = *((unsigned __int8 *)v19 + 23);
        if ((*((char *)v19 + 23) & 0x80000000) == 0)
        {
LABEL_9:
          if ((unint64_t)v17 < v20)
            goto LABEL_37;
          goto LABEL_13;
        }
      }
      else
      {
        v18 = a1->n128_i64[v10 / 8];
        v19 = (const void **)(v12 + 24 * v18);
        v20 = *((unsigned __int8 *)v19 + 23);
        if ((*((char *)v19 + 23) & 0x80000000) == 0)
          goto LABEL_9;
      }
      if (v17 < v19[1])
        goto LABEL_37;
LABEL_13:
      v21 = (const void *)v14;
      if ((v14 & 0x80) != 0)
      {
        v21 = v13[1];
        if ((v20 & 0x80) == 0)
        {
LABEL_15:
          if ((unint64_t)v21 > v20)
            goto LABEL_6;
          goto LABEL_19;
        }
      }
      else if ((v20 & 0x80) == 0)
      {
        goto LABEL_15;
      }
      if (v21 > v19[1])
        goto LABEL_6;
LABEL_19:
      if ((v14 & 0x80u) == 0)
        v22 = v14;
      else
        v22 = (size_t)v13[1];
      if ((v14 & 0x80u) == 0)
        v23 = v13;
      else
        v23 = *v13;
      if ((v20 & 0x80u) == 0)
        v24 = v20;
      else
        v24 = (size_t)v19[1];
      if ((v20 & 0x80u) == 0)
        v25 = v19;
      else
        v25 = *v19;
      if (v24 >= v22)
        v26 = v22;
      else
        v26 = v24;
      v27 = memcmp(v23, v25, v26);
      a1 = v199;
      v29 = v22 < v24;
      if (v27)
        v29 = v27 < 0;
      if (v29)
      {
LABEL_37:
        v30 = -v15;
        v190 = (__n128 *)((char *)a1 + v10);
        if (-v15 < v197)
        {
          if (v197 >= 0)
            v31 = v197;
          else
            v31 = v197 + 1;
          v32 = v31 >> 1;
          v33 = (char *)a2;
          v34 = (char *)a1 + v10;
          if ((char *)a2 - (char *)a1 == v10)
          {
LABEL_42:
            v35 = v199;
            v36 = (uint64_t)(v34 - (char *)v199 - v10) >> 3;
            v37 = v32;
            v38 = (__n128 *)&v33[8 * v32];
            if (v34 != v33)
              goto LABEL_43;
LABEL_55:
            v39 = v38;
            goto LABEL_157;
          }
          v44 = (uint64_t)((char *)a2 - (char *)a1 - v10) >> 3;
          v45 = v12 + 24 * a2->n128_u64[v32];
          v46 = *(unsigned __int8 *)(v45 + 23);
          __s1 = (const void **)v45;
          if ((*(char *)(v45 + 23) & 0x80000000) == 0)
          {
            v34 = (char *)a1 + v10;
            while (1)
            {
              v47 = v44 >> 1;
              v48 = &v34[8 * (v44 >> 1)];
              v49 = v12 + 24 * *(_QWORD *)v48;
              v50 = *(unsigned __int8 *)(v49 + 23);
              if (*(char *)(v49 + 23) < 0)
              {
                v51 = *(_QWORD *)(v49 + 8);
                if (v51 <= v46)
                  goto LABEL_64;
              }
              else if (v50 <= v46)
              {
                v51 = *(unsigned __int8 *)(v49 + 23);
LABEL_64:
                if (v51 < v46)
                  goto LABEL_58;
                v52 = (char)v50;
                if ((v50 & 0x80u) != 0)
                  v50 = *(_QWORD *)(v49 + 8);
                if (v52 >= 0)
                  v53 = (const void *)(v12 + 24 * *(_QWORD *)v48);
                else
                  v53 = *(const void **)v49;
                if (v50 >= v46)
                  v54 = v46;
                else
                  v54 = v50;
                v55 = v50 > v46;
                v56 = memcmp(__s1, v53, v54);
                v33 = (char *)a2;
                v57 = v56 < 0;
                if (!v56)
                  v57 = v55;
                if (!v57)
                {
LABEL_58:
                  v34 = v48 + 8;
                  v47 = v44 + ~v47;
                }
              }
              v44 = v47;
              if (!v47)
                goto LABEL_42;
            }
          }
          v80 = *(_QWORD *)(v45 + 8);
          v34 = (char *)a1 + v10;
          while (2)
          {
            v81 = v44 >> 1;
            v82 = &v34[8 * (v44 >> 1)];
            v83 = v12 + 24 * *(_QWORD *)v82;
            v84 = *(unsigned __int8 *)(v83 + 23);
            if (*(char *)(v83 + 23) < 0)
            {
              v85 = *(_QWORD *)(v83 + 8);
              if (v80 >= v85)
                goto LABEL_112;
            }
            else
            {
              v85 = *(unsigned __int8 *)(v83 + 23);
              if (v80 >= v84)
              {
LABEL_112:
                if (v80 > v85)
                  goto LABEL_106;
                if ((v84 & 0x80u) == 0)
                  v86 = *(unsigned __int8 *)(v83 + 23);
                else
                  v86 = *(_QWORD *)(v83 + 8);
                if ((v84 & 0x80u) == 0)
                  v87 = (const void *)(v12 + 24 * *(_QWORD *)v82);
                else
                  v87 = *(const void **)v83;
                if (v86 >= v80)
                  v88 = v80;
                else
                  v88 = v86;
                v89 = memcmp(*__s1, v87, v88);
                v33 = (char *)a2;
                v90 = v80 < v86;
                if (v89)
                  v90 = v89 < 0;
                if (!v90)
                {
LABEL_106:
                  v34 = v82 + 8;
                  v81 = v44 + ~v81;
                }
              }
            }
            v44 = v81;
            if (!v81)
              goto LABEL_42;
            continue;
          }
        }
        if (v15 == -1)
        {
          a1->n128_u64[v10 / 8] = v11;
          a2->n128_u64[0] = v18;
          return result;
        }
        if (v15 > 0)
          v30 = 1 - v15;
        v34 = &a1->n128_i8[8 * (v30 >> 1) + v10];
        v33 = (char *)a2;
        v189 = v30 >> 1;
        if (a3 == (char *)a2)
        {
          v32 = 0;
LABEL_54:
          v37 = (8 * v32) >> 3;
          v35 = v199;
          v36 = v189;
          v38 = (__n128 *)&v33[8 * v32];
          if (v34 == v33)
            goto LABEL_55;
LABEL_43:
          v39 = (__n128 *)v34;
          if (v32)
          {
            v40 = v34 + 8;
            if (v34 + 8 == v33)
            {
              v71 = *(_QWORD *)v34;
              v72 = (char *)v38 - v33;
              v73 = v37;
              memmove(v34, v33, (char *)v38 - v33);
              v37 = v73;
              v39 = (__n128 *)&v34[v72];
              v39->n128_u64[0] = v71;
            }
            else if (v32 == 1)
            {
              v41 = v36;
              v42 = v38[-1].n128_i64[1];
              v39 = (__n128 *)(v34 + 8);
              if (&v38[-1].n128_i8[8] != v34)
              {
                v43 = v37;
                memmove(v34 + 8, v34, &v38[-1].n128_i8[8] - v34);
                v37 = v43;
              }
              *(_QWORD *)v34 = v42;
              v36 = v41;
            }
            else
            {
              v74 = (v33 - v34) >> 3;
              v75 = ((char *)v38 - v33) >> 3;
              if (v74 == v75)
              {
                v76 = 8 * v32 - 8;
                v77 = v33;
                do
                {
                  v78 = *((_QWORD *)v40 - 1);
                  *((_QWORD *)v40 - 1) = *(_QWORD *)v77;
                  *(_QWORD *)v77 = v78;
                  v77 += 8;
                  if (v40 == v33)
                    break;
                  v40 += 8;
                  v79 = v76;
                  v76 -= 8;
                }
                while (v79);
                v39 = (__n128 *)v33;
              }
              else
              {
                v102 = ((char *)v38 - v33) >> 3;
                v103 = (v33 - v34) >> 3;
                do
                {
                  v104 = v103;
                  v103 = v102;
                  v102 = v104 % v102;
                }
                while (v102);
                if (v103)
                {
                  v105 = &v34[8 * v103];
                  do
                  {
                    v107 = *((_QWORD *)v105 - 1);
                    v105 -= 8;
                    v106 = v107;
                    v108 = &v105[8 * v74];
                    v109 = v105;
                    do
                    {
                      v110 = v108;
                      *(_QWORD *)v109 = *(_QWORD *)v108;
                      v111 = ((char *)v38 - v108) >> 3;
                      v112 = __OFSUB__(v74, v111);
                      v114 = v74 - v111;
                      v113 = (v114 < 0) ^ v112;
                      v108 = &v34[8 * v114];
                      if (v113)
                        v108 = &v110[8 * v74];
                      v109 = v110;
                    }
                    while (v108 != v105);
                    *(_QWORD *)v110 = v106;
                  }
                  while (v105 != v34);
                }
                v39 = (__n128 *)&v34[8 * v75];
              }
            }
          }
LABEL_157:
          a5 = -v36 - v15;
          v115 = v197 - v37;
          if (v36 + v37 >= v197 - (v36 + v37) - v15)
          {
            v116 = v37;
            sub_2395FA3EC(v39, v38, a3, a4, -v36 - v15, v197 - v37, a7, a8);
            a5 = v36;
            a3 = (char *)v39;
            a1 = v190;
            v197 = v116;
            a2 = (__n128 *)v34;
            if (!v116)
              return result;
          }
          else
          {
            sub_2395FA3EC((char *)v35 + v10, v34, v39, a4, v36, v37, a7, a8);
            a1 = v39;
            v197 = v115;
            a2 = v38;
            if (!v115)
              return result;
          }
          goto LABEL_2;
        }
        v58 = (a3 - (char *)a2) >> 3;
        v59 = (const void **)(v12 + 24 * *(_QWORD *)v34);
        __s1a = v59;
        v32 = 0;
        if ((*((char *)v59 + 23) & 0x80000000) == 0)
        {
          v60 = *((unsigned __int8 *)v59 + 23);
          while (1)
          {
            v61 = v58 >> 1;
            v62 = (v58 >> 1) + v32;
            v63 = v12 + 24 * *(_QWORD *)&v33[8 * v62];
            v64 = *(unsigned __int8 *)(v63 + 23);
            if (*(char *)(v63 + 23) < 0)
            {
              v65 = *(_QWORD *)(v63 + 8);
              if (v65 >= v60)
                goto LABEL_85;
            }
            else if (v64 >= v60)
            {
              v65 = *(unsigned __int8 *)(v63 + 23);
LABEL_85:
              if (v65 > v60)
                goto LABEL_80;
              if ((v64 & 0x80u) == 0)
                v66 = *(unsigned __int8 *)(v63 + 23);
              else
                v66 = *(_QWORD *)(v63 + 8);
              if ((v64 & 0x80u) == 0)
                v67 = (const void *)(v12 + 24 * *(_QWORD *)&v33[8 * v62]);
              else
                v67 = *(const void **)v63;
              if (v60 >= v66)
                v68 = v66;
              else
                v68 = v60;
              v69 = memcmp(v67, v59, v68);
              v59 = __s1a;
              v33 = (char *)a2;
              v70 = v66 < v60;
              if (v69)
                v70 = v69 < 0;
              if (!v70)
                goto LABEL_80;
            }
            v32 = v62 + 1;
            v61 = v58 + ~v61;
LABEL_80:
            v58 = v61;
            if (!v61)
              goto LABEL_54;
          }
        }
        v91 = v59[1];
        while (2)
        {
          v92 = v58 >> 1;
          v93 = (v58 >> 1) + v32;
          v94 = v12 + 24 * *(_QWORD *)&v33[8 * v93];
          v95 = *(unsigned __int8 *)(v94 + 23);
          if ((*(char *)(v94 + 23) & 0x80000000) == 0)
          {
            v96 = *(unsigned __int8 *)(v94 + 23);
            if ((unint64_t)v91 <= v95)
              goto LABEL_133;
            goto LABEL_127;
          }
          v96 = *(_QWORD *)(v94 + 8);
          if (v96 < (unint64_t)v91)
            goto LABEL_127;
LABEL_133:
          if (v96 <= (unint64_t)v91)
          {
            if ((v95 & 0x80u) == 0)
              v97 = *(unsigned __int8 *)(v94 + 23);
            else
              v97 = *(_QWORD *)(v94 + 8);
            if ((v95 & 0x80u) == 0)
              v98 = (const void *)(v12 + 24 * *(_QWORD *)&v33[8 * v93]);
            else
              v98 = *(const void **)v94;
            if ((unint64_t)v91 >= v97)
              v99 = v97;
            else
              v99 = (size_t)v91;
            v100 = memcmp(v98, *v59, v99);
            v59 = __s1a;
            v33 = (char *)a2;
            v101 = v97 < (unint64_t)v91;
            if (v100)
              v101 = v100 < 0;
            if (v101)
            {
LABEL_127:
              v32 = v93 + 1;
              v92 = v58 + ~v92;
            }
          }
          v58 = v92;
          if (!v92)
            goto LABEL_54;
          continue;
        }
      }
LABEL_6:
      v10 += 8;
      if (__CFADD__(v15++, 1))
        return result;
    }
  }
  if (a5 <= v197)
  {
    if (a1 == a2)
      return result;
    v129 = a2;
    v130 = (char *)a2 - (char *)a1 - 8;
    v131 = a7;
    v132 = a1;
    if (v130 < 0x18)
      goto LABEL_264;
    v131 = a7;
    v132 = a1;
    if ((unint64_t)(a7 - (char *)a1) < 0x20)
      goto LABEL_264;
    v133 = (v130 >> 3) + 1;
    v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
    v131 = &a7[v134];
    v132 = (__n128 *)((char *)a1 + v134);
    v135 = a1 + 1;
    v136 = (__n128 *)(a7 + 16);
    v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      result = v135[-1];
      v138 = *v135;
      v136[-1] = result;
      *v136 = v138;
      v135 += 2;
      v136 += 2;
      v137 -= 4;
    }
    while (v137);
    v129 = a2;
    if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_264:
      do
      {
        v139 = v132->n128_u64[0];
        v132 = (__n128 *)((char *)v132 + 8);
        *(_QWORD *)v131 = v139;
        v131 += 8;
      }
      while (v132 != v129);
    }
    if (v131 == a7)
      return result;
    v140 = *a4;
    while (1)
    {
      if (a2 == (__n128 *)a3)
      {
        memmove(a1, a7, v131 - a7);
        return result;
      }
      v141 = a2->n128_u64[0];
      v142 = *v140;
      v143 = *v140 + 24 * a2->n128_u64[0];
      v144 = *(_BYTE *)(v143 + 23);
      if (v144 < 0)
      {
        v145 = *(_QWORD *)(v143 + 8);
        v146 = a7;
        v147 = *(_QWORD *)a7;
        v148 = (const void **)(v142 + 24 * *(_QWORD *)a7);
        v149 = *((unsigned __int8 *)v148 + 23);
        if (*((char *)v148 + 23) < 0)
        {
LABEL_186:
          if (v145 < (unint64_t)v148[1])
            goto LABEL_179;
          goto LABEL_187;
        }
      }
      else
      {
        v145 = *(unsigned __int8 *)(v143 + 23);
        v146 = a7;
        v147 = *(_QWORD *)a7;
        v148 = (const void **)(v142 + 24 * *(_QWORD *)a7);
        v149 = *((unsigned __int8 *)v148 + 23);
        if (*((char *)v148 + 23) < 0)
          goto LABEL_186;
      }
      if (v145 < v149)
        goto LABEL_179;
LABEL_187:
      if ((*(_BYTE *)(v143 + 23) & 0x80) != 0)
      {
        v150 = *(_QWORD *)(v143 + 8);
        if ((v149 & 0x80) == 0)
        {
LABEL_189:
          if (v150 > v149)
            goto LABEL_211;
          goto LABEL_193;
        }
      }
      else
      {
        v150 = *(unsigned __int8 *)(v143 + 23);
        if ((v149 & 0x80) == 0)
          goto LABEL_189;
      }
      if (v150 > (unint64_t)v148[1])
      {
LABEL_211:
        a1->n128_u64[0] = v147;
        a1 = (__n128 *)((char *)a1 + 8);
        a7 = v146 + 8;
        if (v146 + 8 == v131)
          return result;
      }
      else
      {
LABEL_193:
        if (v144 >= 0)
          v151 = *(unsigned __int8 *)(v143 + 23);
        else
          v151 = *(_QWORD *)(v143 + 8);
        if (v144 >= 0)
          v152 = (const void *)(*v140 + 24 * a2->n128_u64[0]);
        else
          v152 = *(const void **)v143;
        v153 = a1;
        if ((v149 & 0x80u) == 0)
          v154 = v149;
        else
          v154 = (size_t)v148[1];
        if ((v149 & 0x80u) == 0)
          v155 = v148;
        else
          v155 = *v148;
        if (v154 >= v151)
          v156 = v151;
        else
          v156 = v154;
        v157 = memcmp(v152, v155, v156);
        a1 = v153;
        v158 = v151 < v154;
        if (v157)
          v158 = v157 < 0;
        if (!v158)
          goto LABEL_211;
LABEL_179:
        a1->n128_u64[0] = v141;
        a1 = (__n128 *)((char *)a1 + 8);
        a2 = (__n128 *)((char *)a2 + 8);
        a7 = v146;
        if (v146 == v131)
          return result;
      }
    }
  }
  v117 = a3 - (char *)a2;
  if (a3 == (char *)a2)
    return result;
  v118 = v117 - 8;
  if ((unint64_t)(v117 - 8) < 0x18)
  {
    v119 = a7;
    v120 = (__n128 *)a3;
    v122 = a7;
    v121 = a2;
  }
  else
  {
    v119 = a7;
    v120 = (__n128 *)a3;
    v121 = a2;
    v122 = a7;
    if ((unint64_t)(a7 - (char *)a2) >= 0x20)
    {
      v123 = (v118 >> 3) + 1;
      v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
      v122 = &a7[v124];
      v121 = (__n128 *)((char *)a2 + v124);
      v125 = a2 + 1;
      v126 = (__n128 *)(a7 + 16);
      v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        result = v125[-1];
        v128 = *v125;
        v126[-1] = result;
        *v126 = v128;
        v125 += 2;
        v126 += 2;
        v127 -= 4;
      }
      while (v127);
      if (v123 == (v123 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_217;
    }
  }
  do
  {
    v159 = v121->n128_u64[0];
    v121 = (__n128 *)((char *)v121 + 8);
    *(_QWORD *)v122 = v159;
    v122 += 8;
  }
  while (v121 != v120);
LABEL_217:
  if (v122 == v119)
    return result;
  v160 = a3;
  v161 = *a4;
  while (a2 != a1)
  {
    v164 = *((_QWORD *)v122 - 1);
    v165 = *v161;
    v166 = *v161 + 24 * v164;
    v167 = *(_BYTE *)(v166 + 23);
    if (v167 < 0)
    {
      v168 = *(_QWORD *)(v166 + 8);
      v163 = (__n128 *)((char *)a2 - 8);
      v162 = a2[-1].n128_i64[1];
      v169 = (const void **)(v165 + 24 * v162);
      v170 = *((unsigned __int8 *)v169 + 23);
      if (*((char *)v169 + 23) < 0)
      {
LABEL_227:
        if (v168 < (unint64_t)v169[1])
          goto LABEL_220;
        goto LABEL_228;
      }
    }
    else
    {
      v168 = *(unsigned __int8 *)(v166 + 23);
      v163 = (__n128 *)((char *)a2 - 8);
      v162 = a2[-1].n128_i64[1];
      v169 = (const void **)(v165 + 24 * v162);
      v170 = *((unsigned __int8 *)v169 + 23);
      if (*((char *)v169 + 23) < 0)
        goto LABEL_227;
    }
    if (v168 < v170)
      goto LABEL_220;
LABEL_228:
    if ((*(_BYTE *)(v166 + 23) & 0x80) != 0)
    {
      v171 = *(_QWORD *)(v166 + 8);
      if ((v170 & 0x80) == 0)
      {
LABEL_230:
        if (v171 <= v170)
          goto LABEL_234;
        goto LABEL_219;
      }
    }
    else
    {
      v171 = *(unsigned __int8 *)(v166 + 23);
      if ((v170 & 0x80) == 0)
        goto LABEL_230;
    }
    if (v171 <= (unint64_t)v169[1])
    {
LABEL_234:
      if (v167 >= 0)
        v172 = *(unsigned __int8 *)(v166 + 23);
      else
        v172 = *(_QWORD *)(v166 + 8);
      if (v167 >= 0)
        v173 = (const void *)(*v161 + 24 * v164);
      else
        v173 = *(const void **)v166;
      if ((v170 & 0x80u) == 0)
        v174 = v170;
      else
        v174 = (size_t)v169[1];
      if ((v170 & 0x80u) == 0)
        v175 = v169;
      else
        v175 = *v169;
      if (v174 >= v172)
        v176 = v172;
      else
        v176 = v174;
      v177 = memcmp(v173, v175, v176);
      a1 = v199;
      v178 = v172 < v174;
      if (v177)
        v178 = v177 < 0;
      if (v178)
        goto LABEL_220;
    }
LABEL_219:
    v162 = v164;
    v163 = a2;
    v122 -= 8;
LABEL_220:
    *((_QWORD *)a3 - 1) = v162;
    a3 -= 8;
    v160 -= 8;
    a2 = v163;
    if (v122 == a7)
      return result;
  }
  v179 = v122 - a7 - 8;
  if (v179 < 0x58 || (unint64_t)(v122 - v160) < 0x20)
  {
    v180 = v122;
    v181 = a3;
    goto LABEL_256;
  }
  v184 = 0;
  v185 = (v179 >> 3) + 1;
  v186 = 8 * (v185 & 0x3FFFFFFFFFFFFFFCLL);
  v180 = &v122[-v186];
  v181 = &a3[-v186];
  v187 = v185 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    result = *(__n128 *)&v122[v184 - 16];
    v188 = &a3[v184];
    *((_OWORD *)v188 - 2) = *(_OWORD *)&v122[v184 - 32];
    *((__n128 *)v188 - 1) = result;
    v184 -= 32;
    v187 -= 4;
  }
  while (v187);
  if (v185 != (v185 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_256:
    v182 = v181 - 8;
    do
    {
      v183 = *((_QWORD *)v180 - 1);
      v180 -= 8;
      *(_QWORD *)v182 = v183;
      v182 -= 8;
    }
    while (v180 != a7);
  }
  return result;
}

char *sub_2395FAF60(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  char **v10;
  char *result;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(char ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)result + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v7)
                return result;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)result + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v7)
              return result;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = (char *)operator new(0x1D8uLL);
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v7;
  *((_DWORD *)v27 + 4) = **a4;
  *(_OWORD *)(v27 + 248) = 0u;
  *(_OWORD *)(v27 + 232) = 0u;
  *(_OWORD *)(v27 + 216) = 0u;
  *(_OWORD *)(v27 + 200) = 0u;
  *(_OWORD *)(v27 + 184) = 0u;
  *(_OWORD *)(v27 + 168) = 0u;
  *(_OWORD *)(v27 + 152) = 0u;
  *(_OWORD *)(v27 + 136) = 0u;
  *(_OWORD *)(v27 + 120) = 0u;
  *(_OWORD *)(v27 + 104) = 0u;
  *(_OWORD *)(v27 + 88) = 0u;
  *(_OWORD *)(v27 + 72) = 0u;
  *(_OWORD *)(v27 + 56) = 0u;
  *(_OWORD *)(v27 + 40) = 0u;
  *(_OWORD *)(v27 + 24) = 0u;
  *(_OWORD *)(v27 + 440) = 0u;
  *(_OWORD *)(v27 + 456) = 0u;
  *(_OWORD *)(v27 + 408) = 0u;
  *(_OWORD *)(v27 + 424) = 0u;
  *(_OWORD *)(v27 + 376) = 0u;
  *(_OWORD *)(v27 + 392) = 0u;
  *(_OWORD *)(v27 + 344) = 0u;
  *(_OWORD *)(v27 + 360) = 0u;
  *(_OWORD *)(v27 + 312) = 0u;
  *(_OWORD *)(v27 + 328) = 0u;
  *(_OWORD *)(v27 + 280) = 0u;
  *(_OWORD *)(v27 + 296) = 0u;
  *(_OWORD *)(v27 + 264) = 0u;
  sub_2395F78C4((uint64_t)(v27 + 24));
  *((_OWORD *)v27 + 27) = 0u;
  *((_OWORD *)v27 + 28) = 0u;
  *((_DWORD *)v27 + 116) = 1065353216;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v18 = v8 < 3 || (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_38;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_38:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        v4 = v7 % v8;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        v17 = v27;
        if (v16)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        v17 = v27;
        if (v16)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      v17 = v27;
      if (v16)
        goto LABEL_26;
    }
LABEL_51:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v26 >= v8)
          v26 %= v8;
      }
      else
      {
        v26 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_62;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v17 = v27;
  if (!v16)
    goto LABEL_51;
LABEL_26:
  *v17 = *v16;
  *v16 = v27;
LABEL_62:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2395FB318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395E99BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395FB32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395E99BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2395FB340(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v13 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v16 = *(_QWORD *)a1;
    v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v17)
    {
LABEL_26:
      *(_QWORD *)v10 = *v17;
LABEL_61:
      *v17 = v10;
      goto LABEL_62;
    }
  }
  else
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v17)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD *)a1;
        v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v17)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD *)a1;
      v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v17)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v3) = v13;
  if (*(_QWORD *)v10)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_2395FB66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395FB680((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2395FB680(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = v2[3];
      if (v3)
      {
        v4 = v2[4];
        v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            v6 = v4 - 64;
            free(*(void **)(v4 - 24));
            v4 = v6;
          }
          while (v6 != v3);
          v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_2395FB700(void **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  char *v15;
  void **v16;
  void **v17;
  uint64_t v18;
  char *v19;
  void **v20;
  __int128 v21;
  void **v22;
  void **v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  char *v27;
  void *memptr;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    sub_2394189F8();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0)
    v7 = 0x3FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 58)
      sub_239418A80();
    v8 = operator new(v7 << 6);
  }
  else
  {
    v8 = 0;
  }
  v9 = (char *)&v8[16 * v3];
  v10 = (char *)&v8[16 * v7];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  v9[32] = *(_BYTE *)(a2 + 32);
  *((_QWORD *)v9 + 5) = 0;
  v12 = *(unsigned int *)(a2 + 56);
  v13 = (8 * v12 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)v9 + 6) = v13 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v13, 0x100BBD03uLL);
  v14 = memptr;
  *((_QWORD *)v9 + 5) = memptr;
  if (!v14)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v26, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v12)
    memcpy(v14, *(const void **)(a2 + 40), 8 * v12);
  v8[16 * v3 + 14] = *(_DWORD *)(a2 + 56);
  v15 = v9 + 64;
  v27 = v9 + 64;
  v17 = (void **)*a1;
  v16 = (void **)a1[1];
  if (v16 == *a1)
  {
    v22 = (void **)a1[1];
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = &v9[v18 * 8];
      v20 = &v16[v18];
      v21 = *(_OWORD *)&v16[v18 - 6];
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v16[v18 - 8];
      *((_OWORD *)v19 - 3) = v21;
      *(v19 - 32) = (char)v16[v18 - 4];
      *((_QWORD *)v19 - 3) = 0;
      *((_QWORD *)v19 - 2) = 0;
      *((_QWORD *)v19 - 3) = v16[v18 - 3];
      *(v20 - 3) = 0;
      *((_QWORD *)v19 - 2) = v16[v18 - 2];
      *(v20 - 2) = 0;
      *((_DWORD *)v19 - 2) = v16[v18 - 1];
      *((_DWORD *)v20 - 2) = 0;
      v18 -= 8;
    }
    while (&v16[v18] != v17);
    v22 = (void **)*a1;
    v16 = (void **)a1[1];
    v9 += v18 * 8;
    v15 = v27;
  }
  *a1 = v9;
  a1[1] = v15;
  a1[2] = v10;
  if (v16 != v22)
  {
    do
    {
      v23 = v16 - 8;
      free(*(v16 - 3));
      v16 = v23;
    }
    while (v23 != v22);
    v16 = v22;
  }
  if (v16)
    operator delete(v16);
  return v15;
}

void sub_2395FB920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2395FB934((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2395FB934(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    free(*(void **)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_2395FB988(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v4)
            {
              goto LABEL_23;
            }
            result = (uint64_t *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v4)
              break;
          }
          result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_2395FBCB4(a1, *a2, a4, (uint64_t)v25);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18)
      prime = v18;
    else
      prime = v17;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v20)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v20)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v20 < 3uLL || (v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < *(_QWORD *)&v20)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v4 = v6 % v7;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v15)
          goto LABEL_26;
      }
      else
      {
        v4 = v6;
        v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v15)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
      v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
      if (v15)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v24 >= v7)
          v24 %= v7;
      }
      else
      {
        v24 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25[0];
    }
    goto LABEL_61;
  }
  v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v15)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v25[0] = *v15;
  *v15 = v25[0];
LABEL_61:
  result = (uint64_t *)v25[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2395FBCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23955C23C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2395FBCB4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v14;
  double result;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  void *memptr;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  *((_DWORD *)v8 + 4) = **a3;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v8 + 24) = _Q0;
  *(_OWORD *)(v8 + 40) = _Q0;
  v8[56] = 1;
  *((_QWORD *)v8 + 8) = 0;
  *((_QWORD *)v8 + 9) = 8;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
  v14 = memptr;
  *((_QWORD *)v8 + 8) = memptr;
  if (!v14)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v17 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v17, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  *((_DWORD *)v8 + 20) = 5;
  result = 0.0;
  v14[4] = 0;
  *(_OWORD *)v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_2395FBD9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23955C23C(v1);
  _Unwind_Resume(a1);
}

void sub_2395FBDB0(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v2 = *a1;
  if (a2 > (a1[2] - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        *(v10 - 32) = v4[v9 - 32];
        v12 = *(_QWORD *)&v4[v9 - 16];
        *((_QWORD *)v10 - 3) = *(_QWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 2) = v12;
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
        *((_DWORD *)v11 - 2) = 0;
        v9 -= 32;
      }
      while (&v4[v9] != v2);
      v13 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v13)
      {
        do
        {
          free(*((void **)v2 - 3));
          v2 -= 32;
        }
        while (v2 != v13);
        v2 = v13;
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

void sub_2395FBEAC(char **a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  size_t v5;
  size_t v6;
  size_t v7;
  double *v8;
  double *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  double *v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  uint64_t v23;
  float64x2_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  float64x2_t *v28;
  BOOL v29;
  double *v30;
  double *v31;
  float64x2_t *v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  double v36;
  std::bad_alloc *exception;
  std::bad_alloc *v38;
  void *v39[2];
  int v40;
  char v41;
  void *memptr;

  v3 = *a1;
  v41 = **a1;
  if (!v41)
  {
    LOBYTE(v39[0]) = 0;
    sub_2395FC410(a2, v39);
    return;
  }
  v5 = *((unsigned int *)v3 + 6);
  v6 = v5;
  v7 = (8 * v5 + 31) & 0xFFFFFFFE0;
  v39[1] = (void *)(v7 >> 3);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x100BBD03uLL);
  v8 = (double *)memptr;
  v39[0] = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v38 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v38, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v40 = v5;
  v9 = (double *)((char *)memptr + 8 * v5);
  if ((_DWORD)v5)
  {
    bzero(memptr, v6 * 8);
    v10 = *a1;
    v11 = a1[1];
    if (*a1 == v11)
    {
LABEL_14:
      v18 = (double)(unint64_t)((v11 - v10) >> 5);
      v19 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v19 < 3)
        goto LABEL_35;
      v20 = v19 + 1;
      v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0);
      v22 = (float64x2_t *)(v8 + 2);
      v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = vdivq_f64(*v22, v21);
        v22[-1] = vdivq_f64(v22[-1], v21);
        *v22 = v24;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      v8 += v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_35:
        do
        {
          *v8 = *v8 / v18;
          ++v8;
        }
        while (v8 != v9);
      }
      goto LABEL_19;
    }
    v12 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v12 >= 3)
    {
      v25 = v12 + 1;
      v26 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      v27 = *a1;
      do
      {
        v28 = (float64x2_t *)*((_QWORD *)v27 + 1);
        v29 = v8 >= &v28->f64[v6] || v28 >= (float64x2_t *)&v8[v6];
        v30 = (double *)*((_QWORD *)v27 + 1);
        v31 = v8;
        if (!v29)
          goto LABEL_36;
        v30 = &v28->f64[v26];
        v32 = v28 + 1;
        v33 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        v34 = (float64x2_t *)(v8 + 2);
        do
        {
          v35 = vaddq_f64(*v32, *v34);
          v34[-1] = vaddq_f64(v32[-1], v34[-1]);
          *v34 = v35;
          v34 += 2;
          v32 += 2;
          v33 -= 4;
        }
        while (v33);
        v31 = &v8[v26];
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          do
          {
            v36 = *v30++;
            *v31 = v36 + *v31;
            ++v31;
          }
          while (v31 != v9);
        }
        v27 += 32;
      }
      while (v27 != v11);
    }
    else
    {
      v13 = *a1;
      do
      {
        v14 = (double *)*((_QWORD *)v13 + 1);
        v15 = 8 * v5;
        v16 = v8;
        do
        {
          v17 = *v14++;
          *v16 = v17 + *v16;
          ++v16;
          v15 -= 8;
        }
        while (v15);
        v13 += 32;
      }
      while (v13 != v11);
    }
  }
  else
  {
    v10 = *a1;
    v11 = a1[1];
  }
  if ((_DWORD)v5)
    goto LABEL_14;
LABEL_19:
  sub_2395FC5C4(a2, &v41, v39);
  free(v39[0]);
}

void sub_2395FC11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void **sub_2395FC130(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 4;
        free(*(v3 - 3));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2395FC194(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    free(*(void **)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_2395FC1E8(void **a1, const void **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  void **v21;
  BOOL v22;
  std::bad_alloc *exception;
  std::bad_alloc *v25;
  char *v26;
  void *memptr;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_2394189F8();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 4 > v4)
    v4 = v6 >> 4;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 59)
      sub_239418A80();
    v8 = operator new(32 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = (char *)&v8[8 * v3];
  v10 = (char *)&v8[8 * v7];
  *v9 = *(_BYTE *)a2;
  *((_QWORD *)v9 + 1) = 0;
  v11 = *((unsigned int *)a2 + 6);
  v12 = (8 * v11 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)v9 + 2) = v12 >> 3;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x100BBD03uLL);
  v13 = memptr;
  *((_QWORD *)v9 + 1) = memptr;
  if (!v13)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v25 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v25, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v11)
    memcpy(v13, a2[1], 8 * v11);
  v8[8 * v3 + 6] = *((_DWORD *)a2 + 6);
  v14 = v9 + 32;
  v26 = v9 + 32;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    v20 = (char *)a1[1];
  }
  else
  {
    v17 = 0;
    do
    {
      v18 = &v9[v17];
      v19 = &v15[v17];
      *(v18 - 32) = v15[v17 - 32];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v18 - 2) = 0;
      *((_QWORD *)v18 - 3) = *(_QWORD *)&v15[v17 - 24];
      *((_QWORD *)v19 - 3) = 0;
      *((_QWORD *)v18 - 2) = *(_QWORD *)&v15[v17 - 16];
      *((_QWORD *)v19 - 2) = 0;
      *((_DWORD *)v18 - 2) = *(_DWORD *)&v15[v17 - 8];
      *((_DWORD *)v19 - 2) = 0;
      v17 -= 32;
    }
    while (&v15[v17] != v16);
    v20 = (char *)*a1;
    v15 = (char *)a1[1];
    v9 += v17;
    v14 = v26;
  }
  *a1 = v9;
  a1[1] = v14;
  a1[2] = v10;
  if (v15 != v20)
  {
    v21 = (void **)(v15 - 32);
    do
    {
      free(v21[1]);
      v22 = v21 == (void **)v20;
      v21 -= 4;
    }
    while (!v22);
    v15 = v20;
  }
  if (v15)
    operator delete(v15);
  return v14;
}

void sub_2395FC3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2395FC194((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2395FC410(uint64_t a1, _BYTE *a2)
{
  void **v3;
  int v4;
  void *v5;
  std::bad_alloc *v6;
  std::bad_alloc *v7;
  std::bad_alloc *v8;
  std::bad_alloc *v9;
  std::bad_alloc *exception;
  std::bad_alloc *v12;
  void *memptr;

  *(_BYTE *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = *a2;
  switch(v4)
  {
    case 3:
      *(_DWORD *)(a1 + 24) = 256;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 256;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0x800uLL, 0x100BBD03uLL);
      v5 = memptr;
      *v3 = memptr;
      if (!v5)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v12 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v12, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      break;
    case 2:
      *(_DWORD *)(a1 + 24) = 4;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 4;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x100BBD03uLL);
      v5 = memptr;
      *v3 = memptr;
      if (!v5)
      {
        v8 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v9 = std::bad_alloc::bad_alloc(v8);
        __cxa_throw(v9, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      break;
    case 1:
      *(_DWORD *)(a1 + 24) = 5;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 8;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
      v5 = memptr;
      *v3 = memptr;
      if (!v5)
      {
        v6 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v7 = std::bad_alloc::bad_alloc(v6);
        __cxa_throw(v7, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      break;
    default:
      return a1;
  }
  if (*(_DWORD *)(a1 + 24))
    bzero(v5, 8 * *(unsigned int *)(a1 + 24));
  return a1;
}

void sub_2395FC588(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void sub_2395FC59C(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void sub_2395FC5B0(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2395FC5C4(uint64_t a1, _BYTE *a2, void **a3)
{
  void **v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  std::bad_alloc *exception;
  std::bad_alloc *v17;
  void *memptr;

  *(_BYTE *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v6 = *a2;
  if (v6 != 3)
  {
    if (v6 == 2)
    {
      if (*((_DWORD *)a3 + 4) != 4)
      {
        v15 = 237;
        goto LABEL_24;
      }
      if (v5 != a3)
      {
        sub_23945215C(a1 + 8, 4uLL);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(_OWORD *)*a3;
        v14 = *((_OWORD *)*a3 + 1);
LABEL_19:
        *(_OWORD *)v12 = v13;
        *(_OWORD *)(v12 + 16) = v14;
        goto LABEL_20;
      }
    }
    else if (v6 == 1)
    {
      v7 = *((_DWORD *)a3 + 4);
      if (v7 != 5)
      {
        if (v7 == 3)
        {
          *(_DWORD *)(a1 + 24) = 5;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 8;
          memptr = 0;
          malloc_type_posix_memalign(&memptr, 0x20uLL, 0x40uLL, 0x100BBD03uLL);
          v8 = memptr;
          *v5 = memptr;
          if (!v8)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v17 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v17, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          v9 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v9)
            bzero(v8, 8 * v9);
          v10 = *(_OWORD *)*a3;
          v8[2] = *((_QWORD *)*a3 + 2);
          *(_OWORD *)v8 = v10;
          return a1;
        }
        v15 = 233;
LABEL_24:
        sub_239A444D4((uint64_t)"unknown file", v15, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v5 != a3)
      {
        sub_23945215C(a1 + 8, 5uLL);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(_OWORD *)*a3;
        v14 = *((_OWORD *)*a3 + 1);
        *(_QWORD *)(v12 + 32) = *((_QWORD *)*a3 + 4);
        goto LABEL_19;
      }
    }
    return a1;
  }
  if (*((_DWORD *)a3 + 4) != 256)
  {
    v15 = 241;
    goto LABEL_24;
  }
  if (v5 == a3)
    return a1;
  sub_23945215C(a1 + 8, 0x100uLL);
  memcpy(*(void **)(a1 + 8), *a3, 0x800uLL);
LABEL_20:
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 4);
  return a1;
}

void sub_2395FC7B0(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void sub_2395FC7C4(_Unwind_Exception *a1)
{
  void **v1;

  free(*v1);
  _Unwind_Resume(a1);
}

void sub_2395FC7D8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 144)
  {
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 72);
    if (v6)
    {
      *(_QWORD *)(i - 64) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(i - 96);
    if (v7)
    {
      *(_QWORD *)(i - 88) = v7;
      operator delete(v7);
    }
    if (*(char *)(i - 97) < 0)
    {
      operator delete(*(void **)(i - 120));
      if (*(char *)(i - 121) < 0)
LABEL_14:
        operator delete(*(void **)(i - 144));
    }
    else if (*(char *)(i - 121) < 0)
    {
      goto LABEL_14;
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

char *sub_2395FC87C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x98uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 36) = 1065353216;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_2395FCBA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395EACE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2395FCBB4(uint64_t a1, const std::string *a2, uint64_t a3, char a4)
{
  const std::string *v7;
  __int128 *v8;
  const std::string *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float v19;
  unint64_t v20;
  float v21;
  float v22;
  const std::string *v23;
  __int128 *v24;
  float v25;
  float v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  float v33;
  float v34;
  float v35;
  const std::string *v36;
  float v37;
  float v38;
  __int128 *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  float v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void **v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  void **v72;
  float v73;
  float v74;
  void *v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  const std::string *v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  float v92;
  int64_t v93;
  BOOL v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  __int128 v108;
  void **v109;
  __int128 *v110;
  __int128 v111;
  void *v112;
  void *v113;
  void *v114;
  __int128 *v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  float v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  void **v125;
  unint64_t v126;
  __int128 v127;
  void *v128;
  unint64_t v129;
  __int128 v130;
  unint64_t v131;
  void *v132;
  void *v133;
  unint64_t v134;
  __int128 v135;
  float v136;
  uint64_t v137;
  uint64_t i;
  uint64_t v139;
  _OWORD *v140;
  float v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  void **v147;
  void **v148;
  void *v149;
  _QWORD *v150;
  void *v151;
  void *v152;
  float v153;
  float v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  std::string *__str;
  std::string *__stra;
  uint64_t v160;
  uint64_t v162;
  void *v163[2];
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  void *v167[2];
  uint64_t v168;
  void *v169[2];
  uint64_t v170;
  void *v171[2];
  uint64_t v172;
  __int128 v173;
  int v174;
  void *v175[2];
  uint64_t v176;
  std::string v177;
  void *v178[2];
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  void *__p[2];
  uint64_t v183;
  __int128 v184;
  int v185;

void sub_2395FE090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p)
{
  void *v58;
  void *v59;

  if (__p)
  {
    operator delete(__p);
    v58 = a54;
    if (!a54)
    {
LABEL_3:
      v59 = a51;
      if (!a51)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v58 = a54;
    if (!a54)
      goto LABEL_3;
  }
  operator delete(v58);
  v59 = a51;
  if (!a51)
  {
LABEL_4:
    if ((a50 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v59);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a44 & 0x80000000) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    operator delete(a39);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a45);
  if ((a44 & 0x80000000) == 0)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_2395FE248(const std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v10;
  float v11;
  float v12;
  float v13;

  sub_2395FEA10(a1, a2, a3, a4);
  v10 = std::stof((const std::string *)(a5 + 24), 0);
  if (v10 < std::stof((const std::string *)(a4 + 24), 0))
  {
    sub_2395FE7BC(a4, (__int128 *)a5);
    v11 = std::stof((const std::string *)(a4 + 24), 0);
    if (v11 < std::stof((const std::string *)(a3 + 24), 0))
    {
      sub_2395FE7BC(a3, (__int128 *)a4);
      v12 = std::stof((const std::string *)(a3 + 24), 0);
      if (v12 < std::stof((const std::string *)(a2 + 24), 0))
      {
        sub_2395FE7BC(a2, (__int128 *)a3);
        v13 = std::stof((const std::string *)(a2 + 24), 0);
        if (v13 < std::stof(a1 + 1, 0))
          sub_2395FE7BC((uint64_t)a1, (__int128 *)a2);
      }
    }
  }
}

void sub_2395FE370(const std::string *a1, uint64_t a2, uint64_t a3)
{
  const std::string *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  __int128 *v13;
  float v14;

  v6 = (const std::string *)(a2 + 24);
  v7 = std::stof((const std::string *)(a2 + 24), 0);
  v8 = std::stof(a1 + 1, 0);
  v9 = std::stof((const std::string *)(a3 + 24), 0);
  v10 = std::stof(v6, 0);
  if (v7 < v8)
  {
    v11 = (uint64_t)a1;
    if (v9 >= v10)
    {
      sub_2395FE7BC((uint64_t)a1, (__int128 *)a2);
      v12 = std::stof((const std::string *)(a3 + 24), 0);
      if (v12 >= std::stof(v6, 0))
        return;
      v11 = a2;
    }
    v13 = (__int128 *)a3;
    goto LABEL_9;
  }
  if (v9 < v10)
  {
    sub_2395FE7BC(a2, (__int128 *)a3);
    v14 = std::stof(v6, 0);
    if (v14 < std::stof(a1 + 1, 0))
    {
      v11 = (uint64_t)a1;
      v13 = (__int128 *)a2;
LABEL_9:
      sub_2395FE7BC(v11, v13);
    }
  }
}

BOOL sub_2395FE4A4(const std::string *a1, const std::string *a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  const std::string *v7;
  const std::string *v8;
  uint64_t v9;
  int v10;
  const std::string *v11;
  float v12;
  __int128 v13;
  uint64_t v14;
  float v15;
  float v16;
  void *v17;
  void *v18[2];
  std::string::size_type v19;
  std::string __p;
  void *v21[2];
  std::string::size_type v22;
  void *v23[2];
  std::string::size_type v24;
  void *v25[2];
  std::string::size_type v26;
  __int128 v27;
  int v28;

  v4 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = std::stof(a2 - 5, 0);
      if (v6 >= std::stof(a1 + 1, 0))
        return 1;
      sub_2395FE7BC((uint64_t)a1, (__int128 *)&a2[-6]);
      return 1;
    case 3uLL:
      sub_2395FE370(a1, (uint64_t)&a1[6], (uint64_t)&a2[-6]);
      return 1;
    case 4uLL:
      sub_2395FEA10(a1, (uint64_t)&a1[6], (uint64_t)&a1[12], (uint64_t)&a2[-6]);
      return 1;
    case 5uLL:
      sub_2395FE248(a1, (uint64_t)&a1[6], (uint64_t)&a1[12], (uint64_t)&a1[18], (uint64_t)&a2[-6]);
      return 1;
    default:
      v7 = a1 + 12;
      sub_2395FE370(a1, (uint64_t)&a1[6], (uint64_t)&a1[12]);
      v8 = a1 + 18;
      if (&a1[18] == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  do
  {
    v11 = v8 + 1;
    v12 = std::stof(v8 + 1, 0);
    if (v12 >= std::stof(v7 + 1, 0))
      goto LABEL_8;
    *(_OWORD *)v18 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v19 = v8->__r_.__value_.__r.__words[2];
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v8[1].__r_.__value_.__r.__words[2];
    v11->__r_.__value_.__r.__words[0] = 0;
    v8[1].__r_.__value_.__l.__size_ = 0;
    v8[1].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)v21 = *(_OWORD *)&v8[2].__r_.__value_.__l.__data_;
    v22 = v8[2].__r_.__value_.__r.__words[2];
    v8[2].__r_.__value_.__r.__words[0] = 0;
    v8[2].__r_.__value_.__l.__size_ = 0;
    *(_OWORD *)v23 = *(_OWORD *)&v8[3].__r_.__value_.__l.__data_;
    v24 = v8[3].__r_.__value_.__r.__words[2];
    v8[2].__r_.__value_.__r.__words[2] = 0;
    v8[3].__r_.__value_.__r.__words[0] = 0;
    v8[3].__r_.__value_.__l.__size_ = 0;
    v8[3].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)v25 = *(_OWORD *)&v8[4].__r_.__value_.__l.__data_;
    v26 = v8[4].__r_.__value_.__r.__words[2];
    v8[4].__r_.__value_.__r.__words[0] = 0;
    v8[4].__r_.__value_.__l.__size_ = 0;
    v8[4].__r_.__value_.__r.__words[2] = 0;
    v13 = *(_OWORD *)&v8[5].__r_.__value_.__l.__data_;
    v28 = v8[5].__r_.__value_.__r.__words[2];
    v14 = v9;
    v27 = v13;
    while (1)
    {
      sub_2395FE8D8((uint64_t)&a1[18] + v14, (__int128 *)((char *)&a1[12] + v14));
      if (v14 == -288)
        break;
      v15 = std::stof(&__p, 0);
      v16 = std::stof((const std::string *)((char *)a1 + v14 + 168), 0);
      v14 -= 144;
      if (v15 >= v16)
      {
        sub_2395FE8D8((uint64_t)&a1[18] + v14, (__int128 *)v18);
        v17 = v25[0];
        if (!v25[0])
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    sub_2395FE8D8((uint64_t)a1, (__int128 *)v18);
    v17 = v25[0];
    if (!v25[0])
      goto LABEL_17;
LABEL_16:
    v25[1] = v17;
    operator delete(v17);
LABEL_17:
    if (v23[0])
    {
      v23[1] = v23[0];
      operator delete(v23[0]);
    }
    if (v21[0])
    {
      v21[1] = v21[0];
      operator delete(v21[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_7:
      if (++v10 == 8)
        return &v8[6] == a2;
      goto LABEL_8;
    }
    operator delete(v18[0]);
    if (++v10 == 8)
      return &v8[6] == a2;
LABEL_8:
    v7 = v8;
    v9 += 144;
    v8 += 6;
  }
  while (v8 != a2);
  return 1;
}

void sub_2395FE7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2395D83CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2395FE7BC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  void *v5[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  int v16;

  *(_OWORD *)v5 = *(_OWORD *)a1;
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)v7 = v3;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)v9 = *(_OWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)v11 = *(_OWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v4 = *(_OWORD *)(a1 + 120);
  v16 = *(_DWORD *)(a1 + 136);
  v15 = v4;
  sub_2395FE8D8(a1, a2);
  sub_2395FE8D8((uint64_t)a2, (__int128 *)v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(v5[0]);
    return;
  }
  operator delete(v7[0]);
  if (SHIBYTE(v6) < 0)
    goto LABEL_11;
}

uint64_t sub_2395FE8D8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(_QWORD *)(a1 + 56) = v7;
    operator delete(v7);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(_QWORD *)(a1 + 80) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v9 = *(void **)(a1 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 104) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  v10 = *(__int128 *)((char *)a2 + 120);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  *(_OWORD *)(a1 + 120) = v10;
  return a1;
}

void sub_2395FEA10(const std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v8;
  float v9;
  float v10;

  sub_2395FE370(a1, a2, a3);
  v8 = std::stof((const std::string *)(a4 + 24), 0);
  if (v8 < std::stof((const std::string *)(a3 + 24), 0))
  {
    sub_2395FE7BC(a3, (__int128 *)a4);
    v9 = std::stof((const std::string *)(a3 + 24), 0);
    if (v9 < std::stof((const std::string *)(a2 + 24), 0))
    {
      sub_2395FE7BC(a2, (__int128 *)a3);
      v10 = std::stof((const std::string *)(a2 + 24), 0);
      if (v10 < std::stof(a1 + 1, 0))
        sub_2395FE7BC((uint64_t)a1, (__int128 *)a2);
    }
  }
}

void sub_2395FEB00(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  void *v6;
  void *v7;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 144;
    v5 = *(void **)(i - 48);
    if (v5)
    {
      *(_QWORD *)(i - 40) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 72);
    if (v6)
    {
      *(_QWORD *)(i - 64) = v6;
      operator delete(v6);
    }
    v7 = *(void **)(i - 96);
    if (v7)
    {
      *(_QWORD *)(i - 88) = v7;
      operator delete(v7);
    }
    if (*(char *)(i - 97) < 0)
    {
      operator delete(*(void **)(i - 120));
      if (*(char *)(i - 121) < 0)
LABEL_14:
        operator delete(*(void **)(i - 144));
    }
    else if (*(char *)(i - 121) < 0)
    {
      goto LABEL_14;
    }
  }
}

void sub_2395FEBAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 1098, a3, a4);
}

uint64_t sub_2395FEBB4(uint64_t a1, uint64_t a2, char a3)
{
  std::string::size_type v3;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  unint64_t v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  int data_low;
  int v24;
  unsigned int v26;
  char v27;
  unsigned int v28;
  char v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  std::string::size_type v39;
  double v40;
  double *v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  unint64_t v48;
  double *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  char v59;
  double v60;
  char v61;
  unint64_t v62;
  unsigned int v63;
  double v64;
  char v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  int v72;
  std::string::value_type v73;
  char v74;
  int v75;
  std::string::value_type v76;
  char v77;
  std::string::size_type v78;
  std::string::size_type v79;
  unint64_t v80;
  std::string *v81;
  std::string::size_type v82;
  int v83;
  std::string::size_type v84;
  std::string *p_p;
  std::string *p_dst;
  char *v87;
  std::string *v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  std::string *v94;
  std::string *v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  char v99;
  void *v100;
  int v101;
  std::string::value_type v102;
  char v103;
  std::string::size_type v104;
  std::string::size_type v105;
  int v106;
  std::string::value_type v107;
  char v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  void **v117;
  void **v118;
  unint64_t v119;
  char v120;
  std::string::size_type v121;
  std::string::size_type v122;
  int v123;
  std::string::value_type v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  const std::string *v128;
  BOOL v129;
  std::string::size_type v130;
  const std::string *v131;
  const std::string *v132;
  std::string *v133;
  std::string::size_type v134;
  std::string::size_type v135;
  void *v136;
  std::string::size_type v138;
  std::string::size_type v139;
  void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  std::string::size_type v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char v150;
  unint64_t v151;
  char v152;
  unint64_t v153;
  char v154;
  _BYTE *v155;
  int v156;
  int v157;
  _BYTE *v158;
  int v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  __int128 v176;
  __int128 v177;
  std::string v178;
  std::string __p;
  unsigned __int8 v180;
  __int128 v181;
  std::string v182;
  unsigned __int8 v183;
  std::string __dst;
  _BYTE v185[22];
  char v186;
  void *v187[4];
  std::string v188;
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "ColorModel");
  sub_239600BC4(a1, (uint64_t)&__p, &v182);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "Depth");
  v7 = sub_239600CF8(a1, (uint64_t)&__p);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&__p, "PixelWidth");
  v10 = sub_239600CF8(a1, (uint64_t)&__p);
  v12 = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "PixelHeight");
  v13 = sub_239600CF8(a1, (uint64_t)&__p);
  v15 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v16 = v183;
    if ((a3 & 1) != 0)
    {
LABEL_9:
      v17 = 0;
      if (!v16 || !v9 || !(_BYTE)v12 || !v15)
        goto LABEL_472;
      if ((_BYTE)v12)
        v18 = v10;
      else
        v18 = 0;
      if (v15)
        v19 = v13;
      else
        v19 = 0;
      *(_QWORD *)a2 = v18;
      *(_QWORD *)(a2 + 8) = v19;
      goto LABEL_30;
    }
  }
  else
  {
    v16 = v183;
    if ((a3 & 1) != 0)
      goto LABEL_9;
  }
  if ((_BYTE)v12)
    v20 = v10;
  else
    v20 = 0;
  if (v15)
    v21 = v13;
  else
    v21 = 0;
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v21;
  if (!v16)
  {
    *(_QWORD *)(a2 + 16) = 0;
    if (v9)
      goto LABEL_56;
    goto LABEL_21;
  }
LABEL_30:
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v182.__r_.__value_.__l.__size_ != 3)
    {
      if (v182.__r_.__value_.__l.__size_ == 4 && *(_DWORD *)v182.__r_.__value_.__l.__data_ == 2036429383)
        goto LABEL_54;
      goto LABEL_55;
    }
    v22 = (std::string *)v182.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v182.__r_.__value_.__r.__words[2]) != 3)
    {
      if (HIBYTE(v182.__r_.__value_.__r.__words[2]) == 4 && LODWORD(v182.__r_.__value_.__l.__data_) == 2036429383)
LABEL_54:
        *(_QWORD *)(a2 + 16) = 1;
LABEL_55:
      if (v9)
        goto LABEL_56;
LABEL_21:
      *(_DWORD *)(a2 + 24) = 0;
      goto LABEL_71;
    }
    v22 = &v182;
  }
  data_low = LOWORD(v22->__r_.__value_.__l.__data_);
  v24 = v22->__r_.__value_.__s.__data_[2];
  if (data_low != 18258 || v24 != 66)
    goto LABEL_55;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "HasAlpha");
  v26 = (unsigned __int16)sub_2396019E4(a1, (uint64_t)&__p);
  if (v26 <= 0x100)
    v27 = 0;
  else
    v27 = v26;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v27)
  {
    *(_QWORD *)(a2 + 16) = 4;
    if (v9)
      goto LABEL_56;
    goto LABEL_21;
  }
  *(_QWORD *)(a2 + 16) = 3;
  if (!v9)
    goto LABEL_21;
LABEL_56:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "IsFloat");
  v28 = (unsigned __int16)sub_2396019E4(a1, (uint64_t)&__p);
  if (v28 <= 0x100)
    v29 = 0;
  else
    v29 = v28;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7 != 8)
      goto LABEL_65;
  }
  else if (v7 != 8)
  {
    goto LABEL_65;
  }
  if (!v29)
  {
    *(_QWORD *)(a2 + 24) = 8;
    goto LABEL_71;
  }
LABEL_65:
  if (v7 != 16 || v29)
  {
    v17 = 0;
    if (v7 != 32 || !v29)
      goto LABEL_472;
    *(_QWORD *)(a2 + 24) = 0x200000020;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0x100000010;
  }
LABEL_71:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__dst, "{MakerApple}");
  sub_239600E58(a1, (uint64_t)&__dst, &__p);
  if (__p.__r_.__value_.__s.__data_[16])
  {
    v181 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    sub_23962C5DC(&v181);
    if (!__p.__r_.__value_.__s.__data_[16])
      goto LABEL_78;
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_78;
  v31 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_78:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
LABEL_82:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
    v34 = v181;
    if (!*((_QWORD *)&v181 + 1))
      goto LABEL_87;
    goto LABEL_83;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_82;
LABEL_79:
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  v34 = v181;
  if (!*((_QWORD *)&v181 + 1))
    goto LABEL_87;
LABEL_83:
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v36 = __ldxr(p_shared_owners);
  while (__stxr(v36 + 1, p_shared_owners));
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (v37)
  {
LABEL_87:
    if (!v34)
      goto LABEL_112;
    goto LABEL_88;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (!v34)
    goto LABEL_112;
LABEL_88:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
  LOWORD(__dst.__r_.__value_.__l.__data_) = 56;
  sub_239600FFC((uint64_t)&v181, (uint64_t)&__dst, &__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v180)
      goto LABEL_112;
  }
  else if (!v180)
  {
    goto LABEL_112;
  }
  v38 = (double *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] == 24)
  {
    if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
    {
      v46 = sqrt(0.0);
      if (v46 < 0.1)
        goto LABEL_102;
    }
    else
    {
      v39 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] - 8;
      v40 = 0.0;
      v41 = (double *)__p.__r_.__value_.__r.__words[0];
      if (v39 < 8)
        goto LABEL_493;
      v42 = (v39 >> 3) + 1;
      v41 = (double *)(__p.__r_.__value_.__r.__words[0] + 8 * (v42 & 0x3FFFFFFFFFFFFFFELL));
      v43 = (double *)(__p.__r_.__value_.__r.__words[0] + 8);
      v44 = v42 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v40 = v40 + *(v43 - 1) * *(v43 - 1) + *v43 * *v43;
        v43 += 2;
        v44 -= 2;
      }
      while (v44);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_493:
        do
        {
          v45 = *v41++;
          v40 = v40 + v45 * v45;
        }
        while (v41 != (double *)__p.__r_.__value_.__l.__size_);
      }
      v46 = sqrt(v40);
      if (v46 < 0.1)
        goto LABEL_102;
    }
    v47 = *(_QWORD *)(a2 + 344);
    v48 = *(_QWORD *)(a2 + 352) - v47;
    if (v48 > 0x17)
    {
      if (v48 != 24)
        *(_QWORD *)(a2 + 352) = v47 + 24;
    }
    else
    {
      sub_23945E108(a2 + 344, 3 - (v48 >> 3));
      if (!v180)
        sub_2394875CC();
    }
    v38 = (double *)__p.__r_.__value_.__r.__words[0];
    v49 = *(double **)(a2 + 344);
    *v49 = -*(double *)(__p.__r_.__value_.__r.__words[0] + 8) / v46;
    v49[1] = -*v38 / v46;
    v49[2] = -v38[2] / v46;
    goto LABEL_111;
  }
LABEL_102:
  if (__p.__r_.__value_.__r.__words[0])
  {
LABEL_111:
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
    operator delete(v38);
  }
LABEL_112:
  memset(&v178, 0, sizeof(v178));
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__dst, "{Exif}");
  sub_239600E58(a1, (uint64_t)&__dst, &__p);
  if (__p.__r_.__value_.__s.__data_[16])
  {
    v177 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    sub_23962C5DC(&v177);
    if (!__p.__r_.__value_.__s.__data_[16])
      goto LABEL_119;
  }
  v50 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_119;
  v51 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (v52)
  {
LABEL_119:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_120;
LABEL_123:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
    v54 = v177;
    if (!*((_QWORD *)&v177 + 1))
      goto LABEL_128;
    goto LABEL_124;
  }
  ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
  std::__shared_weak_count::__release_weak(v50);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_123;
LABEL_120:
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
  v54 = v177;
  if (!*((_QWORD *)&v177 + 1))
    goto LABEL_128;
LABEL_124:
  v55 = (unint64_t *)&v53->__shared_owners_;
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
  do
    v57 = __ldaxr(v55);
  while (__stlxr(v57 - 1, v55));
  if (v57)
  {
LABEL_128:
    if (!v54)
      goto LABEL_272;
LABEL_129:
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 18;
    strcpy((char *)&__p, "FocalLenIn35mmFilm");
    v58 = COERCE_DOUBLE(sub_239601130((uint64_t)&v177, (uint64_t)&__p));
    if (!v59)
      v58 = 0.0;
    *(double *)(a2 + 168) = v58;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__p, "FocalLength");
    v60 = COERCE_DOUBLE(sub_239601130((uint64_t)&v177, (uint64_t)&__p));
    if (!v61)
      v60 = 0.0;
    *(double *)(a2 + 160) = v60;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_239EC77A0;
    strcpy(__p.__r_.__value_.__l.__data_, "FocalPlaneResolutionUnit");
    v62 = sub_239601290((uint64_t)&v177, (uint64_t)&__p);
    if ((v62 & 0xFF00000000) != 0)
      v63 = v62;
    else
      v63 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v63 >= 6)
      {
LABEL_143:
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 21;
        strcpy((char *)&__p, "FocalPlaneXResolution");
        v64 = COERCE_DOUBLE(sub_239601130((uint64_t)&v177, (uint64_t)&__p));
        if (!v65)
          v64 = 0.0;
        *(double *)(a2 + 184) = v64;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__p, "PixelXResolution");
        v66 = sub_239600CF8((uint64_t)&v177, (uint64_t)&__p);
        if (v67)
          v68 = v66;
        else
          v68 = 0;
        *(_QWORD *)(a2 + 192) = v68;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 16;
        strcpy((char *)&__p, "PixelYResolution");
        v69 = sub_239600CF8((uint64_t)&v177, (uint64_t)&__p);
        if (v70)
          v71 = v69;
        else
          v71 = 0;
        *(_QWORD *)(a2 + 200) = v71;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *((_BYTE *)&v188.__r_.__value_.__s + 23) = 8;
        strcpy((char *)&v188, "LensMake");
        sub_239600BC4((uint64_t)&v177, (uint64_t)&v188, &__p);
        if (v180)
        {
          __dst = __p;
          memset(&__p, 0, sizeof(__p));
          if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_160;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          __dst.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_160:
            HIBYTE(v187[2]) = 9;
            strcpy((char *)v187, "LensModel");
            sub_239600BC4((uint64_t)&v177, (uint64_t)v187, &__p);
            if (v180)
            {
              v188 = __p;
              memset(&__p, 0, sizeof(__p));
              if ((SHIBYTE(v187[2]) & 0x80000000) == 0)
                goto LABEL_163;
            }
            else
            {
              *((_BYTE *)&v188.__r_.__value_.__s + 23) = 0;
              v188.__r_.__value_.__s.__data_[0] = 0;
              if ((SHIBYTE(v187[2]) & 0x80000000) == 0)
              {
LABEL_163:
                HIBYTE(v187[2]) = 16;
                strcpy((char *)v187, "LensSerialNumber");
                sub_239600BC4((uint64_t)&v177, (uint64_t)v187, &__p);
                v72 = v180;
                if (v180)
                {
                  v73 = __p.__r_.__value_.__s.__data_[0];
                  *(_OWORD *)v185 = *(_OWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1);
                  *(_QWORD *)&v185[14] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
                  v74 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  memset(&__p, 0, sizeof(__p));
                  if ((*(char *)(a2 + 159) & 0x80000000) == 0)
                  {
LABEL_166:
                    *(_BYTE *)(a2 + 136) = v73;
                    *(_OWORD *)(a2 + 137) = *(_OWORD *)v185;
                    *(_QWORD *)(a2 + 151) = *(_QWORD *)&v185[14];
                    *(_BYTE *)(a2 + 159) = v74;
                    if (v72 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v187[2]) < 0)
                      operator delete(v187[0]);
                    HIBYTE(v187[2]) = 16;
                    strcpy((char *)v187, "BodySerialNumber");
                    sub_239600BC4((uint64_t)&v177, (uint64_t)v187, &__p);
                    v75 = v180;
                    if (v180)
                    {
                      v76 = __p.__r_.__value_.__s.__data_[0];
                      *(_OWORD *)v185 = *(_OWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1);
                      *(_QWORD *)&v185[14] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
                      v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      memset(&__p, 0, sizeof(__p));
                      if ((*(char *)(a2 + 135) & 0x80000000) == 0)
                      {
LABEL_174:
                        *(_BYTE *)(a2 + 112) = v76;
                        *(_OWORD *)(a2 + 113) = *(_OWORD *)v185;
                        *(_QWORD *)(a2 + 127) = *(_QWORD *)&v185[14];
                        *(_BYTE *)(a2 + 135) = v77;
                        if (v75 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v187[2]) < 0)
                        {
                          operator delete(v187[0]);
                          v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
LABEL_179:
                            if (!(_DWORD)v12)
                            {
LABEL_205:
                              if ((v12 & 0x80u) == 0)
                                v82 = v12;
                              else
                                v82 = __dst.__r_.__value_.__l.__size_;
                              v83 = SHIBYTE(v188.__r_.__value_.__r.__words[2]);
                              if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v84 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
                              else
                                v84 = v188.__r_.__value_.__l.__size_;
                              v3 = v84 + v82;
                              if (v84 + v82 > 0x7FFFFFFFFFFFFFF7)
                                sub_23941A5AC();
                              if (v3 > 0x16)
                              {
                                v90 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v3 | 7) != 0x17)
                                  v90 = v3 | 7;
                                v91 = v90 + 1;
                                p_p = (std::string *)operator new(v90 + 1);
                                __p.__r_.__value_.__l.__size_ = v84 + v82;
                                __p.__r_.__value_.__r.__words[2] = v91 | 0x8000000000000000;
                                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
                                if (!v82)
                                  goto LABEL_218;
                              }
                              else
                              {
                                memset(&__p, 0, sizeof(__p));
                                p_p = &__p;
                                *((_BYTE *)&__p.__r_.__value_.__s + 23) = v84 + v82;
                                if (!v82)
                                {
LABEL_218:
                                  v87 = (char *)p_p + v82;
                                  if (v84)
                                  {
                                    if (v83 >= 0)
                                      v88 = &v188;
                                    else
                                      v88 = (std::string *)v188.__r_.__value_.__r.__words[0];
                                    memmove(v87, v88, v84);
                                  }
                                  v87[v84] = 0;
                                  v89 = (void **)(a2 + 88);
                                  if (*(char *)(a2 + 111) < 0)
                                    operator delete(*v89);
                                  *(_OWORD *)v89 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                                  *(_QWORD *)(a2 + 104) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                                  goto LABEL_247;
                                }
                              }
                              if ((v12 & 0x80u) == 0)
                                p_dst = &__dst;
                              else
                                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
                              memmove(p_p, p_dst, v82);
                              goto LABEL_218;
                            }
LABEL_195:
                            v78 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
                            if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
                            {
                              if (!v188.__r_.__value_.__l.__size_)
                                goto LABEL_205;
                            }
                            else if (!*((_BYTE *)&v188.__r_.__value_.__s + 23))
                            {
                              goto LABEL_205;
                            }
                            if ((v12 & 0x80u) == 0)
                              v79 = v12;
                            else
                              v79 = __dst.__r_.__value_.__l.__size_;
                            v80 = v79 + 1;
                            if (v79 + 1 > 0x7FFFFFFFFFFFFFF7)
                              sub_23941A5AC();
                            if (v80 >= 0x17)
                            {
                              v92 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v80 | 7) != 0x17)
                                v92 = v80 | 7;
                              v93 = v92 + 1;
                              v81 = (std::string *)operator new(v92 + 1);
                              __p.__r_.__value_.__l.__size_ = v79 + 1;
                              __p.__r_.__value_.__r.__words[2] = v93 | 0x8000000000000000;
                              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
                            }
                            else
                            {
                              memset(&__p, 0, sizeof(__p));
                              v81 = &__p;
                              *((_BYTE *)&__p.__r_.__value_.__s + 23) = v79 + 1;
                              if (!v79)
                              {
LABEL_237:
                                *(_WORD *)((char *)&v81->__r_.__value_.__l.__data_ + v79) = 32;
                                if ((v78 & 0x80u) == 0)
                                  v95 = &v188;
                                else
                                  v95 = (std::string *)v188.__r_.__value_.__r.__words[0];
                                if ((v78 & 0x80u) == 0)
                                  v96 = v78;
                                else
                                  v96 = v188.__r_.__value_.__l.__size_;
                                v97 = std::string::append(&__p, (const std::string::value_type *)v95, v96);
                                v98 = v97->__r_.__value_.__r.__words[0];
                                v187[0] = (void *)v97->__r_.__value_.__l.__size_;
                                *(void **)((char *)v187 + 7) = *(void **)((char *)&v97->__r_.__value_.__r.__words[1] + 7);
                                v99 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
                                v97->__r_.__value_.__l.__size_ = 0;
                                v97->__r_.__value_.__r.__words[2] = 0;
                                v97->__r_.__value_.__r.__words[0] = 0;
                                if (*(char *)(a2 + 111) < 0)
                                  operator delete(*(void **)(a2 + 88));
                                v100 = v187[0];
                                *(_QWORD *)(a2 + 88) = v98;
                                *(_QWORD *)(a2 + 96) = v100;
                                *(void **)(a2 + 103) = *(void **)((char *)v187 + 7);
                                *(_BYTE *)(a2 + 111) = v99;
                                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_247:
                                HIBYTE(v187[2]) = 17;
                                strcpy((char *)v187, "DateTimeDigitized");
                                sub_239600BC4((uint64_t)&v177, (uint64_t)v187, &__p);
                                v101 = v180;
                                if (v180)
                                {
                                  v102 = __p.__r_.__value_.__s.__data_[0];
                                  *(_OWORD *)v185 = *(_OWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1);
                                  *(_QWORD *)&v185[14] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1]
                                                                                   + 7);
                                  v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                  memset(&__p, 0, sizeof(__p));
                                  if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                  {
LABEL_250:
                                    v178.__r_.__value_.__s.__data_[0] = v102;
                                    *(_OWORD *)((char *)&v178.__r_.__value_.__l.__data_ + 1) = *(_OWORD *)v185;
                                    *(std::string::size_type *)((char *)&v178.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v185[14];
                                    *((_BYTE *)&v178.__r_.__value_.__s + 23) = v103;
                                    if (v101 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__p.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v187[2]) < 0)
                                    {
                                      operator delete(v187[0]);
                                      v105 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
                                      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                        v105 = v178.__r_.__value_.__l.__size_;
                                      if (v105)
                                        goto LABEL_270;
                                    }
                                    else
                                    {
                                      v104 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
                                      if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                                        v104 = v178.__r_.__value_.__l.__size_;
                                      if (v104)
                                        goto LABEL_270;
                                    }
                                    HIBYTE(v187[2]) = 16;
                                    strcpy((char *)v187, "DateTimeOriginal");
                                    sub_239600BC4((uint64_t)&v177, (uint64_t)v187, &__p);
                                    v106 = v180;
                                    if (v180)
                                    {
                                      v107 = __p.__r_.__value_.__s.__data_[0];
                                      *(_OWORD *)v185 = *(_OWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1);
                                      *(_QWORD *)&v185[14] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1]
                                                                                       + 7);
                                      v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                                      memset(&__p, 0, sizeof(__p));
                                      if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                      {
LABEL_266:
                                        v178.__r_.__value_.__s.__data_[0] = v107;
                                        *(_OWORD *)((char *)&v178.__r_.__value_.__l.__data_ + 1) = *(_OWORD *)v185;
                                        *(std::string::size_type *)((char *)&v178.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v185[14];
                                        *((_BYTE *)&v178.__r_.__value_.__s + 23) = v108;
                                        if (v106 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(__p.__r_.__value_.__l.__data_);
                                        if (SHIBYTE(v187[2]) < 0)
                                        {
                                          operator delete(v187[0]);
                                          if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          {
LABEL_271:
                                            if ((v12 & 0x80) == 0)
                                              goto LABEL_272;
LABEL_486:
                                            operator delete(__dst.__r_.__value_.__l.__data_);
                                            goto LABEL_272;
                                          }
LABEL_485:
                                          operator delete(v188.__r_.__value_.__l.__data_);
                                          if ((v12 & 0x80) == 0)
                                            goto LABEL_272;
                                          goto LABEL_486;
                                        }
LABEL_270:
                                        if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                          goto LABEL_271;
                                        goto LABEL_485;
                                      }
                                    }
                                    else
                                    {
                                      v108 = 0;
                                      v107 = 0;
                                      if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                        goto LABEL_266;
                                    }
                                    operator delete(v178.__r_.__value_.__l.__data_);
                                    v106 = v180;
                                    goto LABEL_266;
                                  }
                                }
                                else
                                {
                                  v103 = 0;
                                  v102 = 0;
                                  if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                    goto LABEL_250;
                                }
                                operator delete(v178.__r_.__value_.__l.__data_);
                                v101 = v180;
                                goto LABEL_250;
                              }
                            }
                            if ((v12 & 0x80u) == 0)
                              v94 = &__dst;
                            else
                              v94 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                            memmove(v81, v94, v79);
                            goto LABEL_237;
                          }
                        }
                        else
                        {
                          v12 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_179;
                        }
                        if (!__dst.__r_.__value_.__l.__size_)
                          goto LABEL_205;
                        goto LABEL_195;
                      }
                    }
                    else
                    {
                      v77 = 0;
                      v76 = 0;
                      if ((*(char *)(a2 + 135) & 0x80000000) == 0)
                        goto LABEL_174;
                    }
                    operator delete(*(void **)(a2 + 112));
                    v75 = v180;
                    goto LABEL_174;
                  }
                }
                else
                {
                  v74 = 0;
                  v73 = 0;
                  if ((*(char *)(a2 + 159) & 0x80000000) == 0)
                    goto LABEL_166;
                }
                operator delete(*(void **)(a2 + 136));
                v72 = v180;
                goto LABEL_166;
              }
            }
            operator delete(v187[0]);
            goto LABEL_163;
          }
        }
        operator delete(v188.__r_.__value_.__l.__data_);
        goto LABEL_160;
      }
    }
    else if (v63 >= 6)
    {
      goto LABEL_143;
    }
    *(_QWORD *)(a2 + 176) = qword_239EC77B0[v63];
    goto LABEL_143;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if (v54)
    goto LABEL_129;
LABEL_272:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__dst, "{TIFF}");
  sub_239600E58(a1, (uint64_t)&__dst, &__p);
  if (__p.__r_.__value_.__s.__data_[16])
  {
    v176 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    sub_23962C5DC(&v176);
    if (!__p.__r_.__value_.__s.__data_[16])
      goto LABEL_279;
  }
  v109 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_279;
  v110 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v111 = __ldaxr(v110);
  while (__stlxr(v111 - 1, v110));
  if (v111)
  {
LABEL_279:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_280;
LABEL_283:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v112 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
    v113 = v176;
    if (!*((_QWORD *)&v176 + 1))
      goto LABEL_288;
    goto LABEL_284;
  }
  ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
  std::__shared_weak_count::__release_weak(v109);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_283;
LABEL_280:
  v112 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  v113 = v176;
  if (!*((_QWORD *)&v176 + 1))
    goto LABEL_288;
LABEL_284:
  v114 = (unint64_t *)&v112->__shared_owners_;
  do
    v115 = __ldxr(v114);
  while (__stxr(v115 + 1, v114));
  do
    v116 = __ldaxr(v114);
  while (__stlxr(v116 - 1, v114));
  if (v116)
  {
LABEL_288:
    if (!v113)
      goto LABEL_334;
    goto LABEL_289;
  }
  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
  std::__shared_weak_count::__release_weak(v112);
  if (!v113)
    goto LABEL_334;
LABEL_289:
  *((_BYTE *)&v188.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&v188, "Model");
  sub_239600BC4((uint64_t)&v176, (uint64_t)&v188, &__p);
  v117 = (void **)(a2 + 64);
  if (v180)
  {
    __dst = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else if (*(char *)(a2 + 87) < 0)
  {
    sub_23941A7F8(&__dst, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v117;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
  }
  if (*(char *)(a2 + 87) < 0)
    operator delete(*v117);
  *(_OWORD *)v117 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 80) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (v180 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  *((_BYTE *)&v188.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v188, "Make");
  sub_239600BC4((uint64_t)&v176, (uint64_t)&v188, &__p);
  v118 = (void **)(a2 + 40);
  if (v180)
  {
    __dst = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else if (*(char *)(a2 + 63) < 0)
  {
    sub_23941A7F8(&__dst, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)v118;
    __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  }
  if (*(char *)(a2 + 63) < 0)
    operator delete(*v118);
  *(_OWORD *)v118 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 56) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (v180 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v188.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "Orientation");
  v119 = sub_239601290((uint64_t)&v176, (uint64_t)&__p);
  if ((v119 & 0xFF00000000) != 0)
    v120 = v119;
  else
    v120 = 0;
  *(_BYTE *)(a2 + 32) = v120;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v122 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
    if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v122 = v178.__r_.__value_.__l.__size_;
    if (!v122)
    {
LABEL_326:
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&__dst, "DateTime");
      sub_239600BC4((uint64_t)&v176, (uint64_t)&__dst, &__p);
      v123 = v180;
      if (v180)
      {
        v124 = __p.__r_.__value_.__s.__data_[0];
        *(_OWORD *)&v188.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1);
        *(std::string::size_type *)((char *)&v188.__r_.__value_.__r.__words[1] + 6) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
        v125 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        memset(&__p, 0, sizeof(__p));
        if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_329;
      }
      else
      {
        v125 = 0;
        v124 = 0;
        if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_329:
          v178.__r_.__value_.__s.__data_[0] = v124;
          *(_OWORD *)((char *)&v178.__r_.__value_.__l.__data_ + 1) = *(_OWORD *)&v188.__r_.__value_.__l.__data_;
          *(std::string::size_type *)((char *)&v178.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v188.__r_.__value_.__r.__words[1] + 6);
          *((_BYTE *)&v178.__r_.__value_.__s + 23) = v125;
          if (v123 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_334;
        }
      }
      operator delete(v178.__r_.__value_.__l.__data_);
      v123 = v180;
      goto LABEL_329;
    }
  }
  else
  {
    v121 = HIBYTE(v178.__r_.__value_.__r.__words[2]);
    if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v121 = v178.__r_.__value_.__l.__size_;
    if (!v121)
      goto LABEL_326;
  }
LABEL_334:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 6;
  LODWORD(__dst.__r_.__value_.__l.__data_) = 218762272;
  WORD2(__dst.__r_.__value_.__r.__words[0]) = 2825;
  __dst.__r_.__value_.__s.__data_[6] = 0;
  sub_239593978(&v178, (void **)&__dst.__r_.__value_.__l.__data_, &__p);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v178.__r_.__value_.__l.__data_);
  v178 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *((_BYTE *)&v188.__r_.__value_.__s + 23) = 1;
  strcpy((char *)&v188, " ");
  sub_239601608((const char *)&v188, (uint64_t)&__p);
  sub_2395F7A80((uint64_t)&v178, (uint64_t)&__p, 0, (uint64_t)&__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_340:
      v126 = a2 + 288;
      v127 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0] == 48)
        goto LABEL_341;
LABEL_347:
      v129 = 0;
      goto LABEL_374;
    }
  }
  else if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_340;
  }
  operator delete(v188.__r_.__value_.__l.__data_);
  v126 = a2 + 288;
  v127 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__l.__size_ - __dst.__r_.__value_.__r.__words[0] != 48)
    goto LABEL_347;
LABEL_341:
  HIBYTE(v187[2]) = 1;
  strcpy((char *)v187, ":");
  sub_239601608((const char *)v187, (uint64_t)&__p);
  sub_2395F7A80(v127, (uint64_t)&__p, 0, (uint64_t)&v188);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v187[2]) & 0x80000000) == 0)
      goto LABEL_343;
LABEL_349:
    operator delete(v187[0]);
    v128 = (const std::string *)v188.__r_.__value_.__r.__words[0];
    v129 = v188.__r_.__value_.__l.__size_ - v188.__r_.__value_.__r.__words[0] == 72;
    if (v188.__r_.__value_.__l.__size_ - v188.__r_.__value_.__r.__words[0] != 72)
      goto LABEL_351;
    goto LABEL_350;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v187[2]) < 0)
    goto LABEL_349;
LABEL_343:
  v128 = (const std::string *)v188.__r_.__value_.__r.__words[0];
  v129 = v188.__r_.__value_.__l.__size_ - v188.__r_.__value_.__r.__words[0] == 72;
  if (v188.__r_.__value_.__l.__size_ - v188.__r_.__value_.__r.__words[0] == 72)
  {
LABEL_350:
    *(_DWORD *)(a2 + 308) = std::stoi(v128, 0, 10) - 1900;
    *(_DWORD *)(a2 + 304) = std::stoi((const std::string *)(v188.__r_.__value_.__r.__words[0] + 24), 0, 10) - 1;
    *(_DWORD *)(a2 + 300) = std::stoi((const std::string *)(v188.__r_.__value_.__r.__words[0] + 48), 0, 10);
  }
LABEL_351:
  v130 = __dst.__r_.__value_.__r.__words[0];
  v186 = 1;
  strcpy(v185, ":");
  sub_239601608(v185, (uint64_t)&__p);
  sub_2395F7A80(v130 + 24, (uint64_t)&__p, 0, (uint64_t)v187);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v186 & 0x80000000) == 0)
    {
LABEL_353:
      v131 = (const std::string *)v187[0];
      if ((void *)((char *)v187[1] - (char *)v187[0]) == (void *)72)
        goto LABEL_354;
LABEL_358:
      v129 = 0;
      if (!v131)
        goto LABEL_366;
LABEL_359:
      v132 = (const std::string *)v187[1];
      v133 = (std::string *)v131;
      if (v187[1] != v131)
      {
        do
        {
          if (SHIBYTE(v132[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132[-1].__r_.__value_.__l.__data_);
          --v132;
        }
        while (v132 != v131);
        v133 = (std::string *)v187[0];
      }
      v187[1] = (void *)v131;
      operator delete(v133);
      goto LABEL_366;
    }
  }
  else if ((v186 & 0x80000000) == 0)
  {
    goto LABEL_353;
  }
  operator delete(*(void **)v185);
  v131 = (const std::string *)v187[0];
  if ((void *)((char *)v187[1] - (char *)v187[0]) != (void *)72)
    goto LABEL_358;
LABEL_354:
  *(_DWORD *)(a2 + 296) = std::stoi(v131, 0, 10);
  *(_DWORD *)(a2 + 292) = std::stoi((const std::string *)v187[0] + 1, 0, 10);
  *(_DWORD *)v126 = std::stoi((const std::string *)v187[0] + 2, 0, 10);
  v131 = (const std::string *)v187[0];
  if (v187[0])
    goto LABEL_359;
LABEL_366:
  v134 = v188.__r_.__value_.__r.__words[0];
  if (v188.__r_.__value_.__r.__words[0])
  {
    v135 = v188.__r_.__value_.__l.__size_;
    v136 = (void *)v188.__r_.__value_.__r.__words[0];
    if (v188.__r_.__value_.__l.__size_ != v188.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v135 - 1) < 0)
          operator delete(*(void **)(v135 - 24));
        v135 -= 24;
      }
      while (v135 != v134);
      v136 = (void *)v188.__r_.__value_.__r.__words[0];
    }
    v188.__r_.__value_.__l.__size_ = v134;
    operator delete(v136);
  }
LABEL_374:
  if (mktime((tm *)v126) == -1 || !v129)
  {
    *(_DWORD *)(a2 + 316) = 0;
    *(_QWORD *)v126 = 0;
    *(_QWORD *)(v126 + 8) = 0;
    *(_DWORD *)(v126 + 16) = 0;
  }
  v138 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v139 = __dst.__r_.__value_.__l.__size_;
    v140 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v139 - 1) < 0)
          operator delete(*(void **)(v139 - 24));
        v139 -= 24;
      }
      while (v139 != v138);
      v140 = (void *)__dst.__r_.__value_.__r.__words[0];
    }
    __dst.__r_.__value_.__l.__size_ = v138;
    operator delete(v140);
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__dst, "{GPS}");
  sub_239600E58(a1, (uint64_t)&__dst, &__p);
  if (__p.__r_.__value_.__s.__data_[16])
  {
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  else
  {
    sub_23962C5DC(&v188);
    if (!__p.__r_.__value_.__s.__data_[16])
      goto LABEL_394;
  }
  v141 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_394;
  v142 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v143 = __ldaxr(v142);
  while (__stlxr(v143 - 1, v142));
  if (v143)
  {
LABEL_394:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_395;
LABEL_398:
    operator delete(__dst.__r_.__value_.__l.__data_);
    v144 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
    v145 = v188.__r_.__value_.__r.__words[0];
    if (!v188.__r_.__value_.__l.__size_)
      goto LABEL_403;
    goto LABEL_399;
  }
  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
  std::__shared_weak_count::__release_weak(v141);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_398;
LABEL_395:
  v144 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
  v145 = v188.__r_.__value_.__r.__words[0];
  if (!v188.__r_.__value_.__l.__size_)
    goto LABEL_403;
LABEL_399:
  v146 = (unint64_t *)&v144->__shared_owners_;
  do
    v147 = __ldxr(v146);
  while (__stxr(v147 + 1, v146));
  do
    v148 = __ldaxr(v146);
  while (__stlxr(v148 - 1, v146));
  if (v148)
  {
LABEL_403:
    if (!v145)
      goto LABEL_449;
    goto LABEL_404;
  }
  ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
  std::__shared_weak_count::__release_weak(v144);
  if (!v145)
    goto LABEL_449;
LABEL_404:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "Latitude");
  v149 = sub_239601130((uint64_t)&v188, (uint64_t)&__p);
  if (!v150)
    v149 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = v149;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "Longitude");
  v151 = sub_239601130((uint64_t)&v188, (uint64_t)&__p);
  if (!v152)
    v151 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = v151;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "Altitude");
  v153 = sub_239601130((uint64_t)&v188, (uint64_t)&__p);
  if (!v154)
    v153 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = v153;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__dst, "LatitudeRef");
  sub_239600BC4((uint64_t)&v188, (uint64_t)&__dst, &__p);
  if (v180)
  {
    v12 = __p.__r_.__value_.__l.__size_;
    v155 = (_BYTE *)__p.__r_.__value_.__r.__words[0];
    v156 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    v157 = v155;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_419;
    goto LABEL_418;
  }
  v155 = 0;
  v157 = 0;
  v156 = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_418:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_419:
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__dst, "LongitudeRef");
  sub_239600BC4((uint64_t)&v188, (uint64_t)&__dst, &__p);
  if (v180)
  {
    v3 = __p.__r_.__value_.__l.__size_;
    v158 = (_BYTE *)__p.__r_.__value_.__r.__words[0];
    v159 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    memset(&__p, 0, sizeof(__p));
    v160 = v158;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_422;
    goto LABEL_421;
  }
  v158 = 0;
  v160 = 0;
  v159 = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_421:
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_422:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&__p, "AltitudeRef");
  v161 = sub_239601290((uint64_t)&v188, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v162 = v161 & 0xFF00000000;
    if ((v156 & 0x80) == 0)
      goto LABEL_424;
  }
  else
  {
    v162 = v161 & 0xFF00000000;
    if ((v156 & 0x80) == 0)
    {
LABEL_424:
      if (v156 != 1 || v157 != 83)
        goto LABEL_437;
LABEL_436:
      *(double *)(a2 + 208) = -*(double *)(a2 + 208);
      goto LABEL_437;
    }
  }
  if (v12 == 1 && *v155 == 83)
    goto LABEL_436;
LABEL_437:
  if ((v159 & 0x80) == 0)
  {
    if (v159 != 1 || v160 != 87)
      goto LABEL_444;
LABEL_443:
    *(double *)(a2 + 216) = -*(double *)(a2 + 216);
    goto LABEL_444;
  }
  if (v3 == 1 && *v158 == 87)
    goto LABEL_443;
LABEL_444:
  if (v162 && v161 == 1)
    *(double *)(a2 + 224) = -*(double *)(a2 + 224);
  if ((v159 & 0x80) != 0)
  {
    operator delete(v158);
    if ((v156 & 0x80) != 0)
      goto LABEL_455;
LABEL_449:
    v163 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
    if (!v188.__r_.__value_.__l.__size_)
      goto LABEL_456;
    goto LABEL_450;
  }
  if ((v156 & 0x80) == 0)
    goto LABEL_449;
LABEL_455:
  operator delete(v155);
  v163 = (std::__shared_weak_count *)v188.__r_.__value_.__l.__size_;
  if (!v188.__r_.__value_.__l.__size_)
    goto LABEL_456;
LABEL_450:
  v164 = (unint64_t *)&v163->__shared_owners_;
  do
    v165 = __ldaxr(v164);
  while (__stlxr(v165 - 1, v164));
  if (!v165)
  {
    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
    std::__shared_weak_count::__release_weak(v163);
  }
LABEL_456:
  v166 = (std::__shared_weak_count *)*((_QWORD *)&v176 + 1);
  if (!*((_QWORD *)&v176 + 1))
    goto LABEL_460;
  v167 = (unint64_t *)(*((_QWORD *)&v176 + 1) + 8);
  do
    v168 = __ldaxr(v167);
  while (__stlxr(v168 - 1, v167));
  if (!v168)
  {
    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
    std::__shared_weak_count::__release_weak(v166);
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
    if (!*((_QWORD *)&v177 + 1))
      goto LABEL_464;
  }
  else
  {
LABEL_460:
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v177 + 1);
    if (!*((_QWORD *)&v177 + 1))
      goto LABEL_464;
  }
  v170 = (unint64_t *)&v169->__shared_owners_;
  do
    v171 = __ldaxr(v170);
  while (__stlxr(v171 - 1, v170));
  if (v171)
  {
LABEL_464:
    if ((SHIBYTE(v178.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_466;
    goto LABEL_465;
  }
  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
  std::__shared_weak_count::__release_weak(v169);
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
LABEL_465:
    operator delete(v178.__r_.__value_.__l.__data_);
LABEL_466:
  v172 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
  if (*((_QWORD *)&v181 + 1))
  {
    v173 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v17 = 1;
LABEL_472:
  if (v183 && SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v182.__r_.__value_.__l.__data_);
  return v17;
}

void sub_239600858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a26 && a25 < 0)
    operator delete(__p);
  if (*(char *)(v51 - 121) < 0)
    operator delete(*(void **)(v51 - 144));
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  if (a18 < 0)
    operator delete(a13);
  sub_239416DA0((uint64_t)&a28);
  if (a38)
  {
    if (a37 < 0)
      operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_239600B98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x239600B40);
}

void sub_239600BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x239600B54);
  JUMPOUT(0x239600B58);
}

void sub_239600BC4(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  CFStringRef v5;
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  std::__shared_weak_count *v15;
  uint64_t v16;

  sub_239629EF4(a2, &v14);
  v5 = v14;
  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_12;
  }
  v16 = 0;
  if (!v5 || !sub_23962C8C0(*(const __CFDictionary **)a1, v5, (const void **)&v16))
  {
LABEL_12:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
    v11 = v15;
    if (!v15)
      return;
    goto LABEL_13;
  }
  sub_23962A000(v16, a3);
  v11 = v15;
  if (!v15)
    return;
LABEL_13:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_239600CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_239600CF8(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  std::__shared_weak_count *v4;
  const __CFDictionary *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFStringRef v16;
  std::__shared_weak_count *v17;
  const __CFNumber *v18;

  sub_239629EF4(a2, &v16);
  v3 = v16;
  v5 = *(const __CFDictionary **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_12:
    v11 = 0;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_12;
LABEL_7:
  v18 = 0;
  if (v3)
  {
    if (sub_23962C8C0(*(const __CFDictionary **)a1, v3, (const void **)&v18))
    {
      v9 = sub_239629AD4(v18);
      v10 = v9;
      v11 = v9 & 0xFFFFFFFFFFFFFF00;
      v12 = v17;
      if (!v17)
        return v11 & 0xFFFFFFFFFFFFFF00 | v10;
      goto LABEL_17;
    }
    v11 = 0;
LABEL_16:
    v10 = 0;
    v12 = v17;
    if (!v17)
      return v11 & 0xFFFFFFFFFFFFFF00 | v10;
    goto LABEL_17;
  }
  v11 = 0;
  v10 = 0;
  v12 = v17;
  if (!v17)
    return v11 & 0xFFFFFFFFFFFFFF00 | v10;
LABEL_17:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v11 & 0xFFFFFFFFFFFFFF00 | v10;
}

void sub_239600E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239600E58(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  CFStringRef v5;
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  std::__shared_weak_count *v15;
  const void *v16;

  sub_239629EF4(a2, &v14);
  v5 = v14;
  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_12;
  }
  v16 = 0;
  if (!v5 || !sub_23962C8C0(*(const __CFDictionary **)a1, v5, &v16))
  {
LABEL_12:
    *a3 = 0;
    a3[16] = 0;
    v11 = v15;
    if (!v15)
      return;
    goto LABEL_13;
  }
  sub_239601B04(v16, (uint64_t)a3);
  v11 = v15;
  if (!v15)
    return;
LABEL_13:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_239600F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239600F8C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 16))
  {
    v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

void sub_239600FFC(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  CFStringRef v5;
  std::__shared_weak_count *v6;
  const __CFDictionary *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  CFStringRef v14;
  std::__shared_weak_count *v15;
  const __CFArray *v16;

  sub_239629EF4(a2, &v14);
  v5 = v14;
  v7 = *(const __CFDictionary **)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_12;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_12;
  }
  v16 = 0;
  if (!v5 || !sub_23962C8C0(*(const __CFDictionary **)a1, v5, (const void **)&v16))
  {
LABEL_12:
    *a3 = 0;
    a3[24] = 0;
    v11 = v15;
    if (!v15)
      return;
    goto LABEL_13;
  }
  sub_239601C50(v16, (uint64_t)a3);
  v11 = v15;
  if (!v15)
    return;
LABEL_13:
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_23960111C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_239601130(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  std::__shared_weak_count *v4;
  const __CFDictionary *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const __CFNumber *v9;
  unsigned __int8 v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFStringRef v16;
  std::__shared_weak_count *v17;
  const __CFNumber *v18;

  sub_239629EF4(a2, &v16);
  v3 = v16;
  v5 = *(const __CFDictionary **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_12:
    v11 = 0;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_12;
LABEL_7:
  v18 = 0;
  if (v3)
  {
    if (sub_23962C8C0(*(const __CFDictionary **)a1, v3, (const void **)&v18))
    {
      v9 = sub_239629D2C(v18);
      v10 = v9;
      v11 = (unint64_t)v9 & 0xFFFFFFFFFFFFFF00;
      v12 = v17;
      if (!v17)
        return v11 & 0xFFFFFFFFFFFFFF00 | v10;
      goto LABEL_17;
    }
    v11 = 0;
LABEL_16:
    v10 = 0;
    v12 = v17;
    if (!v17)
      return v11 & 0xFFFFFFFFFFFFFF00 | v10;
    goto LABEL_17;
  }
  v11 = 0;
  v10 = 0;
  v12 = v17;
  if (!v17)
    return v11 & 0xFFFFFFFFFFFFFF00 | v10;
LABEL_17:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v11 & 0xFFFFFFFFFFFFFF00 | v10;
}

void sub_23960127C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_239601290(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  std::__shared_weak_count *v4;
  const __CFDictionary *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  CFStringRef v17;
  std::__shared_weak_count *v18;
  const __CFNumber *v19;

  sub_239629EF4(a2, &v17);
  v3 = v17;
  v5 = *(const __CFDictionary **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
LABEL_14:
      v11 = 0;
      v12 = 0;
      v10 = 0;
      v13 = v18;
      if (!v18)
        return v12 & 0xFFFFFF0000000000 | v11 & 0xFFFFFF00 | (unint64_t)v5 & 0xFF00000000 | v10;
      goto LABEL_15;
    }
  }
  if (!v5)
    goto LABEL_14;
LABEL_7:
  v19 = 0;
  if (v3 && sub_23962C8C0(*(const __CFDictionary **)a1, v3, (const void **)&v19))
  {
    v9 = sub_23962973C(v19);
    v10 = v9;
    v11 = v9 & 0xFFFFFF00;
    v5 = (const __CFDictionary *)(v9 & 0xFFFFFFFF00000000);
    v12 = v9 & 0xFFFFFF0000000000;
    v13 = v18;
    if (!v18)
      return v12 & 0xFFFFFF0000000000 | v11 & 0xFFFFFF00 | (unint64_t)v5 & 0xFF00000000 | v10;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v5 = 0;
    v10 = 0;
    v13 = v18;
    if (!v18)
      return v12 & 0xFFFFFF0000000000 | v11 & 0xFFFFFF00 | (unint64_t)v5 & 0xFF00000000 | v10;
  }
LABEL_15:
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return v12 & 0xFFFFFF0000000000 | v11 & 0xFFFFFF00 | (unint64_t)v5 & 0xFF00000000 | v10;
}

void sub_2396013DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396013F0(std::string *__str, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  _BYTE v19[16];
  void *__p;
  std::__shared_weak_count *v21;
  char v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  char v30;
  char v31;

  std::string::operator=((std::string *)(a2 + 368), __str);
  sub_23961FB98((uint64_t)__str, (uint64_t)v19);
  if (!v31)
  {
    v4 = 0;
    goto LABEL_20;
  }
  if (!v22)
    sub_2394875CC();
  sub_23962C330(&v17, (std::__shared_weak_count_vtbl *)__p, 1);
  sub_239601718(&v15, (uint64_t)&v17);
  v4 = sub_2395FEBB4((uint64_t)&v15, a2, 1);
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v18;
  if (!v18)
    goto LABEL_12;
  v9 = (unint64_t *)&v18->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_12:
    if (v31)
      goto LABEL_13;
LABEL_20:
    if (!v30)
      return v4;
    if (!v29)
      goto LABEL_24;
    if (v28 < 0)
    {
      operator delete(v27);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_24:
        if (!v24)
          return v4;
        goto LABEL_25;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v25);
    if (!v24)
      return v4;
LABEL_25:
    if (v23 < 0)
    {
      operator delete(__p);
      return v4;
    }
    return v4;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v31)
    goto LABEL_20;
LABEL_13:
  if (!v22)
    return v4;
  v11 = v21;
  if (!v21)
    return v4;
  v12 = (unint64_t *)&v21->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
    return v4;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return v4;
}

void sub_2396015C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  sub_239601900((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2396015F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239601900((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239601608(const char *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_9:
    memcpy(p_dst, a1, v5);
    *((_BYTE *)p_dst + v5) = 0;
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
    goto LABEL_9;
  LOBYTE(__dst) = 0;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(_QWORD *)(a2 + 16) = v11;
    return;
  }
LABEL_10:
  v9 = (void *)__dst;
  sub_23941A7F8((_BYTE *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  operator delete(v9);
}

void sub_239601704(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239601718(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_239601828(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_239601814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239601828(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE0880;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_239601888(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2396018A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2396018B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396018DC(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_239601900(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_12;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_12:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_13:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  if (!*(_BYTE *)(a1 + 32))
    return a1;
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_2396019E4(uint64_t a1, uint64_t a2)
{
  CFStringRef v3;
  std::__shared_weak_count *v4;
  const __CFDictionary *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  unsigned __int8 v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFStringRef v16;
  std::__shared_weak_count *v17;
  const __CFBoolean *v18;

  sub_239629EF4(a2, &v16);
  v3 = v16;
  v5 = *(const __CFDictionary **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
LABEL_6:
    if (!v5)
      goto LABEL_12;
  }
  v18 = 0;
  if (!v3 || !sub_23962C8C0(*(const __CFDictionary **)a1, v3, (const void **)&v18))
  {
LABEL_12:
    v11 = 0;
    v10 = 0;
    v12 = v17;
    if (!v17)
      return v10 | (v11 << 8);
    goto LABEL_13;
  }
  v9 = sub_239629E90(v18);
  v10 = v9;
  v11 = HIBYTE(v9);
  v12 = v17;
  if (!v17)
    return v10 | (v11 << 8);
LABEL_13:
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v10 | (v11 << 8);
}

void sub_239601AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239601B04(const void *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  CFTypeRef cf;

  cf = a1;
  if (a1 && (TypeID = j__CFDictionaryGetTypeID(), sub_239628DA8(&cf, TypeID)) && sub_23962BB30(&cf))
  {
    sub_239601828(&v13, cf);
    v4 = v13;
    v5 = v14;
    v12 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    sub_23962C330((std::__shared_weak_count_vtbl **)a2, v4, 1);
    *(_BYTE *)(a2 + 16) = 1;
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v12)
    {
      v10 = (unint64_t *)&v12->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
}

void sub_239601C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_239416DA0((uint64_t)&a12);
  sub_239600F8C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239601C50(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  const __CFArray *v4;
  unint64_t Count;
  unint64_t v6;
  CFIndex v7;
  uint64_t v8;
  unint64_t v9;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v11;
  char v12;
  const __CFNumber *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  char *__p;
  char *v35;
  char *v36;
  CFArrayRef theArray;

  theArray = a1;
  if (a1
    && (TypeID = j__CFArrayGetTypeID(), sub_239628DA8((CFTypeRef *)&theArray, TypeID))
    && (v4 = theArray, Count = j__CFArrayGetCount(theArray), (Count & 0x8000000000000000) == 0))
  {
    v6 = Count;
    if (Count)
    {
      if (Count >> 61)
        sub_2394189F8();
      v33 = Count;
      __p = (char *)operator new(8 * Count);
      v35 = __p;
      v36 = &__p[8 * v6];
      if (v4)
      {
        v7 = 0;
        while (1)
        {
          if (j__CFArrayGetCount(v4) <= v7)
            goto LABEL_35;
          ValueAtIndex = (const __CFNumber *)j__CFArrayGetValueAtIndex(v4, v7);
          v11 = sub_239629D2C(ValueAtIndex);
          if (!v12)
            goto LABEL_35;
          v13 = v11;
          v14 = v35;
          if (v35 >= v36)
            break;
          *(_QWORD *)v35 = v11;
          v8 = (uint64_t)(v35 + 8);
          v9 = v33;
LABEL_11:
          v35 = (char *)v8;
          if (++v7 == v9)
          {
            v32 = __p;
            v31 = v36;
            goto LABEL_39;
          }
        }
        v15 = __p;
        v16 = (v35 - __p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_2394189F8();
        v18 = v36 - __p;
        if ((v36 - __p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            sub_239418A80();
          v20 = operator new(8 * v19);
          v21 = &v20[8 * v16];
          *(_QWORD *)v21 = v13;
          v8 = (uint64_t)(v21 + 8);
          if (v35 != __p)
            goto LABEL_24;
        }
        else
        {
          v20 = 0;
          v21 = (char *)(8 * v16);
          *(_QWORD *)(8 * v16) = v13;
          v8 = 8 * v16 + 8;
          if (v35 != __p)
          {
LABEL_24:
            v22 = v35 - 8 - __p;
            if (v22 >= 0x58)
            {
              v9 = v33;
              if ((unint64_t)(__p - v20) >= 0x20)
              {
                v23 = (v22 >> 3) + 1;
                v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
                v25 = &v35[-v24];
                v21 -= v24;
                v26 = &v20[8 * v16 - 16];
                v27 = v35 - 16;
                v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v29 = *(_OWORD *)v27;
                  *(v26 - 1) = *((_OWORD *)v27 - 1);
                  *v26 = v29;
                  v26 -= 2;
                  v27 -= 32;
                  v28 -= 4;
                }
                while (v28);
                v14 = v25;
                if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_33;
              }
            }
            else
            {
              v9 = v33;
            }
            do
            {
              v30 = *((_QWORD *)v14 - 1);
              v14 -= 8;
              *((_QWORD *)v21 - 1) = v30;
              v21 -= 8;
            }
            while (v14 != __p);
LABEL_33:
            __p = v21;
            v36 = &v20[8 * v19];
            if (v15)
              operator delete(v15);
            goto LABEL_11;
          }
        }
        v9 = v33;
        goto LABEL_33;
      }
LABEL_35:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      if (__p)
        operator delete(__p);
    }
    else
    {
      v31 = 0;
      v8 = 0;
      v32 = 0;
LABEL_39:
      *(_QWORD *)a2 = v32;
      *(_QWORD *)(a2 + 8) = v8;
      *(_QWORD *)(a2 + 16) = v31;
      *(_BYTE *)(a2 + 24) = 1;
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_239601EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239601F08()
{
  unsigned __int8 v0;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD v8[7];
  int v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *__p;
  char v17;
  void *v18[3];
  char v19;
  void *v20[3];
  char v21;
  void *v22[3];
  char v23;
  void *v24[3];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25693C678);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C678))
  {
    v8[0] = 0;
    sub_239602204((uint64_t)&v9, v8, "");
    v7 = 1;
    sub_239602204((uint64_t)&v12, &v7, "map_Kd");
    v6 = 2;
    sub_239602204((uint64_t)&v15, &v6, "norm");
    v5 = 3;
    sub_239602204((uint64_t)v18, &v5, "disp");
    v4 = 4;
    sub_239602204((uint64_t)v20, &v4, "map_ao");
    v3 = 5;
    sub_239602204((uint64_t)v22, &v3, "map_Pr");
    v2 = 6;
    sub_239602204((uint64_t)v24, &v2, "map_onorm");
    sub_2396022BC((uint64_t)&qword_25693C688, &v9, 7);
    if (v25 < 0)
    {
      operator delete(v24[1]);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v21 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v22[1]);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
LABEL_14:
    operator delete(v20[1]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v17 & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    operator delete(v18[1]);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
LABEL_16:
    operator delete(__p);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_10:
      if ((v11 & 0x80000000) == 0)
      {
LABEL_11:
        __cxa_atexit((void (*)(void *))sub_23960233C, &qword_25693C688, &dword_23940C000);
        __cxa_guard_release(&qword_25693C678);
        return &qword_25693C688;
      }
LABEL_18:
      operator delete(v10);
      goto LABEL_11;
    }
LABEL_17:
    operator delete(v13);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
  return &qword_25693C688;
}

void sub_239602158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void **v49;
  uint64_t v50;

  if (a49 < 0)
    operator delete(*(void **)(v50 + 200));
  sub_239EC0F10();
  if (&a19 != (char *)v49 && a18)
  {
    do
    {
      if (*((char *)v49 - 1) < 0)
        operator delete(*(v49 - 3));
      v49 -= 4;
    }
    while (v49 != (void **)&a19);
  }
  __cxa_guard_abort(&qword_25693C678);
  _Unwind_Resume(a13);
}

uint64_t sub_239602204(uint64_t a1, _DWORD *a2, char *__s)
{
  void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *a2;
  v5 = (void *)(a1 + 8);
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v5 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v5, __s, v7);
LABEL_9:
  *((_BYTE *)v5 + v7) = 0;
  return a1;
}

uint64_t sub_2396022BC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      sub_239609704(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_23960231C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    sub_239EC0F98(v3);
  sub_239EBFDD0((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23960233C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_2396023A4()
{
  unsigned __int8 v0;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD v8[7];
  int v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *__p;
  char v17;
  void *v18[3];
  char v19;
  void *v20[3];
  char v21;
  void *v22[3];
  char v23;
  void *v24[3];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25693C680);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C680))
  {
    v8[0] = 0;
    sub_239602204((uint64_t)&v9, v8, "");
    v7 = 1;
    sub_239602204((uint64_t)&v12, &v7, "tex");
    v6 = 2;
    sub_239602204((uint64_t)&v15, &v6, "norm");
    v5 = 3;
    sub_239602204((uint64_t)v18, &v5, "disp");
    v4 = 4;
    sub_239602204((uint64_t)v20, &v4, "ao");
    v3 = 5;
    sub_239602204((uint64_t)v22, &v3, "roughness");
    v2 = 6;
    sub_239602204((uint64_t)v24, &v2, "onorm");
    sub_2396022BC((uint64_t)&qword_25693C6B0, &v9, 7);
    if (v25 < 0)
    {
      operator delete(v24[1]);
      if ((v23 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v21 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_14;
      }
    }
    else if ((v23 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v22[1]);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v19 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
LABEL_14:
    operator delete(v20[1]);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v17 & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_16;
    }
LABEL_15:
    operator delete(v18[1]);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_17;
    }
LABEL_16:
    operator delete(__p);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_10:
      if ((v11 & 0x80000000) == 0)
      {
LABEL_11:
        __cxa_atexit((void (*)(void *))sub_23960233C, &qword_25693C6B0, &dword_23940C000);
        __cxa_guard_release(&qword_25693C680);
        return &qword_25693C6B0;
      }
LABEL_18:
      operator delete(v10);
      goto LABEL_11;
    }
LABEL_17:
    operator delete(v13);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_18;
  }
  return &qword_25693C6B0;
}

void sub_2396025F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void **v49;
  uint64_t v50;

  if (a49 < 0)
    operator delete(*(void **)(v50 + 200));
  sub_239EC0F10();
  if (&a19 != (char *)v49 && a18)
  {
    do
    {
      if (*((char *)v49 - 1) < 0)
        operator delete(*(v49 - 3));
      v49 -= 4;
    }
    while (v49 != (void **)&a19);
  }
  __cxa_guard_abort(&qword_25693C680);
  _Unwind_Resume(a13);
}

unint64_t sub_2396026A0(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  size_t v22;
  __int128 *p_dst;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 __dst;
  unint64_t v30;

  v6 = a1;
  if (*((char *)a1 + 23) >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = a1[1];
  v8 = a2;
  if (v7 > a2)
  {
    v9 = MEMORY[0x24BDAC740];
    v8 = a2;
    do
    {
      if (*((char *)v6 + 23) >= 0)
        v10 = v6;
      else
        v10 = (uint64_t *)*v6;
      v11 = *((char *)v10 + v8);
      if ((v11 & 0x80000000) != 0)
      {
        if (!__maskrune(v11, 0x4000uLL))
          goto LABEL_15;
      }
      else if ((*(_DWORD *)(v9 + 4 * v11 + 60) & 0x4000) == 0)
      {
        goto LABEL_15;
      }
      ++v8;
    }
    while (v7 != v8);
    LODWORD(v8) = v7;
    v12 = v7;
LABEL_41:
    v13 = v7;
    v18 = (v7 - v12);
    if ((int)v18 < 1)
      goto LABEL_42;
LABEL_31:
    v19 = (int)v8;
    if (*((char *)v6 + 23) < 0)
    {
      v24 = v6[1];
      if (v24 >= (int)v8)
      {
        v6 = (uint64_t *)*v6;
        v25 = v24 - (int)v8;
        if (v25 >= v18)
          v22 = v18;
        else
          v22 = v25;
        if (v22 < 0x17)
        {
LABEL_37:
          HIBYTE(v30) = v22;
          p_dst = &__dst;
          if (!v22)
          {
            LOBYTE(__dst) = 0;
            if ((*(char *)(a4 + 23) & 0x80000000) == 0)
            {
LABEL_39:
              *(_OWORD *)a4 = __dst;
              *(_QWORD *)(a4 + 16) = v30;
              return v13 - a2;
            }
LABEL_53:
            operator delete(*(void **)a4);
            goto LABEL_39;
          }
LABEL_52:
          memmove(p_dst, (char *)v6 + v19, v22);
          *((_BYTE *)p_dst + v22) = 0;
          if ((*(char *)(a4 + 23) & 0x80000000) == 0)
            goto LABEL_39;
          goto LABEL_53;
        }
LABEL_49:
        v26 = (v22 & 0xFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v26 = v22 | 7;
        v27 = v26 + 1;
        p_dst = (__int128 *)operator new(v26 + 1);
        *((_QWORD *)&__dst + 1) = v22;
        v30 = v27 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
        goto LABEL_52;
      }
    }
    else
    {
      v20 = *((unsigned __int8 *)v6 + 23);
      if ((int)v8 <= v20)
      {
        v21 = v20 - (int)v8;
        if (v21 >= v18)
          v22 = v18;
        else
          v22 = v21;
        if (v22 < 0x17)
          goto LABEL_37;
        goto LABEL_49;
      }
    }
    sub_239423B0C();
  }
LABEL_15:
  if (v8 >= v7)
  {
    v12 = v8;
    goto LABEL_41;
  }
  v13 = -1;
  v14 = MEMORY[0x24BDAC740];
  v15 = v8;
  while (1)
  {
    v16 = *((char *)v6 + 23) >= 0 ? (uint64_t)v6 : *v6;
    v17 = *(char *)(v16 + v15);
    if ((v17 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v14 + 4 * v17 + 60) & 0x4000) != 0)
      v13 = v15;
    if (++v15 >= v7)
      goto LABEL_29;
LABEL_28:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_29;
  }
  if (__maskrune(v17, 0x4000uLL))
    v13 = v15;
  if (++v15 < v7)
    goto LABEL_28;
LABEL_29:
  v12 = v8;
  if (v13 < 0)
    goto LABEL_41;
  v18 = (v13 - v8);
  if ((int)v18 >= 1)
    goto LABEL_31;
LABEL_42:
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
  }
  return v13 - a2;
}

uint64_t sub_239602908(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  BOOL v14;

  v2 = 0;
  if (*((char *)a1 + 23) >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = a1[1];
  if (v3)
  {
    v4 = MEMORY[0x24BDAC740];
    while (1)
    {
      if (*((char *)a1 + 23) >= 0)
        v5 = a1;
      else
        v5 = (uint64_t *)*a1;
      v6 = *((char *)v5 + v2);
      if ((v6 & 0x80000000) != 0)
      {
        if (!__maskrune(v6, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v4 + 4 * v6 + 60) & 0x4000) == 0)
      {
        break;
      }
      if (v3 == ++v2)
        return 0;
    }
  }
  if (v2 < v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = MEMORY[0x24BDAC740];
    while (1)
    {
      if (*((char *)a1 + 23) >= 0)
        v10 = a1;
      else
        v10 = (uint64_t *)*a1;
      v11 = *((char *)v10 + v2);
      if ((v11 & 0x80000000) != 0)
      {
        v13 = (v7 & 1) == 0;
        if (__maskrune(*((char *)v10 + v2), 0x4000uLL))
          v14 = 0;
        else
          v14 = (v7 & 1) == 0;
        if (v14)
        {
LABEL_15:
          v8 = (v8 + 1);
          v7 = 1;
          goto LABEL_16;
        }
        if (__maskrune(v11, 0x4000uLL))
        {
LABEL_30:
          if (!v13)
            v7 = 0;
        }
      }
      else
      {
        v12 = *(_DWORD *)(v9 + 4 * v11 + 60) & 0x4000;
        v13 = (v7 & 1) == 0;
        if (!v12 && (v7 & 1) == 0)
          goto LABEL_15;
        if (v12)
          goto LABEL_30;
      }
LABEL_16:
      if (v3 == ++v2)
        return v8;
    }
  }
  return 0;
}

unint64_t sub_239602A5C(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  __int128 __dst;
  unint64_t v25;

  v6 = a1;
  v7 = *((unsigned __int8 *)a1 + 23);
  v8 = a1[1];
  if ((v7 & 0x80u) == 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = a1[1];
  v10 = a2;
  if (v9 <= a2)
  {
LABEL_11:
    if (v10 >= v9)
    {
      v12 = v10;
    }
    else
    {
      if ((v7 & 0x80u) == 0)
        v13 = a1;
      else
        v13 = (uint64_t *)*a1;
      v14 = -1;
      v15 = v10;
      do
      {
        if (*a3 == *((unsigned __int8 *)v13 + v15))
          v14 = v15;
        ++v15;
      }
      while (v15 < v9 && v14 < 0);
      v12 = v10;
      if ((v14 & 0x80000000) == 0)
      {
        v16 = (v14 - v10);
        if ((int)v16 < 1)
          goto LABEL_33;
LABEL_22:
        v17 = (int)v10;
        if ((v7 & 0x80) != 0)
        {
          if (v8 >= (int)v10)
          {
            v6 = (_QWORD *)*v6;
            if (v8 - (int)v10 >= v16)
              v19 = v16;
            else
              v19 = v8 - (int)v10;
            if (v19 < 0x17)
            {
LABEL_28:
              HIBYTE(v25) = v19;
              p_dst = &__dst;
              if (!v19)
              {
                LOBYTE(__dst) = 0;
                if ((*(char *)(a4 + 23) & 0x80000000) == 0)
                {
LABEL_30:
                  *(_OWORD *)a4 = __dst;
                  *(_QWORD *)(a4 + 16) = v25;
                  return v14 - a2;
                }
LABEL_44:
                operator delete(*(void **)a4);
                goto LABEL_30;
              }
LABEL_43:
              memmove(p_dst, (char *)v6 + v17, v19);
              *((_BYTE *)p_dst + v19) = 0;
              if ((*(char *)(a4 + 23) & 0x80000000) == 0)
                goto LABEL_30;
              goto LABEL_44;
            }
LABEL_40:
            v21 = (v19 & 0xFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17)
              v21 = v19 | 7;
            v22 = v21 + 1;
            p_dst = (__int128 *)operator new(v21 + 1);
            *((_QWORD *)&__dst + 1) = v19;
            v25 = v22 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
            goto LABEL_43;
          }
        }
        else if ((int)v10 <= v7)
        {
          v18 = v7 - (int)v10;
          if (v18 >= v16)
            v19 = v16;
          else
            v19 = v18;
          if (v19 < 0x17)
            goto LABEL_28;
          goto LABEL_40;
        }
        sub_239423B0C();
      }
    }
  }
  else
  {
    v11 = (uint64_t *)*a1;
    if ((v7 & 0x80u) == 0)
      v11 = a1;
    v10 = a2;
    do
    {
      if (*a3 != *((unsigned __int8 *)v11 + v10))
        goto LABEL_11;
      ++v10;
    }
    while (v9 != v10);
    LODWORD(v10) = v9;
    v12 = v9;
  }
  v14 = v9;
  v16 = (v9 - v12);
  if ((int)v16 >= 1)
    goto LABEL_22;
LABEL_33:
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
  }
  return v14 - a2;
}

BOOL sub_239602C68(uint64_t *a1, uint64_t a2, const void **a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  int v7;
  size_t v8;
  unint64_t v9;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  size_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  void **v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type size;
  std::string *v55;
  __int128 v56;
  const std::string::value_type *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  int8x8_t v61;
  uint8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t **v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  void **v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  std::string *v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  int v84;
  unint64_t v85;
  __int128 v86;
  char *v87;
  __n128 v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __n128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint8x8_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t **v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  size_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  const void *v117;
  void **v118;
  std::string::size_type v119;
  std::string *v120;
  __int128 v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  int8x8_t v130;
  uint8x8_t v131;
  uint64_t v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  void **v146;
  uint64_t v147;
  _QWORD *v148;
  char *v149;
  std::string *v150;
  uint64_t v151;
  int v152;
  __n128 v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  __n128 v157;
  std::__shared_weak_count *v158;
  unint64_t *p_shared_owners;
  unint64_t v160;
  int v161;
  unint64_t v162;
  __int128 v163;
  char *v164;
  __n128 v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  __n128 v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint8x8_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t **v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  int v186;
  size_t v187;
  unint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  const void *v192;
  void **v193;
  std::string::size_type v194;
  std::string *v195;
  __int128 v196;
  std::string *v197;
  std::string::size_type v198;
  std::string *v199;
  __int128 v200;
  const std::string::value_type *v201;
  std::string::size_type v202;
  std::string *v203;
  __int128 v204;
  int8x8_t v205;
  uint8x8_t v206;
  uint64_t v207;
  uint64_t **v208;
  uint64_t *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  _QWORD *v220;
  void **v221;
  uint64_t v222;
  _QWORD *v223;
  char *v224;
  std::string *v225;
  uint64_t v226;
  int v227;
  __n128 v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  __n128 v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  int v236;
  unint64_t v237;
  __int128 v238;
  char *v239;
  int v240;
  unint64_t v241;
  __int128 v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t **v246;
  uint64_t *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t **v250;
  uint64_t *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint8x8_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t **v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  size_t v264;
  unint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  const void *v269;
  void **v270;
  std::string::size_type v271;
  std::string *v272;
  __int128 v273;
  std::string *v274;
  std::string::size_type v275;
  std::string *v276;
  __int128 v277;
  const std::string::value_type *v278;
  std::string::size_type v279;
  std::string *v280;
  __int128 v281;
  int8x8_t v282;
  uint8x8_t v283;
  uint64_t v284;
  uint64_t **v285;
  uint64_t *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  _QWORD *v297;
  void **v298;
  uint64_t v299;
  _QWORD *v300;
  char *v301;
  std::string *v302;
  uint64_t v303;
  int v304;
  __n128 v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  __n128 v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  int v313;
  unint64_t v314;
  __int128 v315;
  char *v316;
  int v317;
  unint64_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  uint8x8_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t **v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  size_t v331;
  unint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  const void *v336;
  void **v337;
  std::string::size_type v338;
  std::string *v339;
  __int128 v340;
  std::string *v341;
  std::string::size_type v342;
  std::string *v343;
  __int128 v344;
  const std::string::value_type *v345;
  std::string::size_type v346;
  std::string *v347;
  __int128 v348;
  int8x8_t v349;
  uint8x8_t v350;
  uint64_t v351;
  uint64_t **v352;
  uint64_t *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD *v363;
  _QWORD *v364;
  void **v365;
  uint64_t v366;
  _QWORD *v367;
  char *v368;
  std::string *v369;
  uint64_t v370;
  int v371;
  __n128 v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  __n128 v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  int v380;
  unint64_t v381;
  __int128 v382;
  char *v383;
  int v384;
  unint64_t v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint8x8_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  int v397;
  size_t v398;
  unint64_t v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  const void *v403;
  void **v404;
  std::string::size_type v405;
  std::string *v406;
  __int128 v407;
  std::string *v408;
  std::string::size_type v409;
  std::string *v410;
  __int128 v411;
  const std::string::value_type *v412;
  std::string::size_type v413;
  std::string *v414;
  __int128 v415;
  int8x8_t v416;
  uint8x8_t v417;
  uint64_t v418;
  uint64_t **v419;
  uint64_t *v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  _QWORD *v431;
  void **v432;
  uint64_t v433;
  _QWORD *v434;
  char *v435;
  std::string *v436;
  uint64_t v437;
  int v438;
  __n128 v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  __n128 v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  int v447;
  unint64_t v448;
  __int128 v449;
  char *v450;
  __n128 v451;
  std::__shared_weak_count *v452;
  unint64_t *v453;
  unint64_t v454;
  __n128 v455;
  std::__shared_weak_count *v456;
  unint64_t *v457;
  unint64_t v458;
  int v459;
  unint64_t v460;
  __int128 v461;
  uint64_t v462;
  char *v463;
  char *v464;
  char *v465;
  uint64_t **v466;
  uint64_t *v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t **v470;
  uint64_t *v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v479;
  uint64_t v481;
  uint64_t v484;
  std::string v485;
  _BYTE v486[7];
  char v487;
  char v488;
  void *v489;
  char v490;
  void *v491;
  char v492;
  char v493;
  char v494;
  unsigned __int8 v495;
  std::string v496;
  _BYTE v497[32];
  std::string __dst;
  _BYTE v499[7];
  char v500;
  char v501;
  void *v502;
  char v503;
  void *v504;
  char v505;
  char v506;
  char v507;
  unsigned __int8 v508;
  std::string v509;
  void *v510[2];
  int64_t v511;
  void *v512;
  std::string::size_type v513;
  unsigned __int8 v514;
  void *v515[2];
  uint64_t v516;
  std::__fs::filesystem::path __src;
  std::__fs::filesystem::path __p[5];
  uint64_t v519;
  _QWORD v520[22];

  v520[19] = *MEMORY[0x24BDAC8D0];
  v7 = *((char *)a3 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = v8 + 4;
  if (v8 + 4 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v8 + 4;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8 + 4;
    if (!v8)
      goto LABEL_15;
  }
  if (v7 >= 0)
    v16 = a3;
  else
    v16 = *a3;
  memmove(p_dst, v16, v8);
LABEL_15:
  strcpy((char *)p_dst + v8, ".mtl");
  __p[0].__pn_ = __dst;
  sub_239498A04(__p, a2, &__src);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  sub_23955CF88(__p);
  v17 = v519;
  if (v519)
  {
    v481 = a7;
    if (a7)
    {
      v18 = *(_QWORD *)(a6 + 8);
      if (v18 >= *(_QWORD *)(a6 + 16))
      {
        v20 = sub_23958837C((char **)a6, (uint64_t)&__src);
        v21 = a6;
      }
      else
      {
        if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_23941A7F8(*(_BYTE **)(a6 + 8), __src.__pn_.__r_.__value_.__l.__data_, __src.__pn_.__r_.__value_.__l.__size_);
        }
        else
        {
          v19 = *(_OWORD *)&__src.__pn_.__r_.__value_.__l.__data_;
          *(_QWORD *)(v18 + 16) = *((_QWORD *)&__src.__pn_.__r_.__value_.__l + 2);
          *(_OWORD *)v18 = v19;
        }
        v20 = (char *)(v18 + 24);
        v21 = a6;
        *(_QWORD *)(a6 + 8) = v18 + 24;
      }
      *(_QWORD *)(v21 + 8) = v20;
    }
    sub_239458500(__p, (uint64_t)"#  \n", 4);
    sub_239458500(__p, (uint64_t)"#  Wavefront MTL\n", 17);
    sub_239458500(__p, (uint64_t)"#  \n", 4);
    sub_239458500(__p, (uint64_t)"#  \n\n", 5);
    std::ostream::flush();
    v479 = v17;
    v22 = *a1;
    if (a1[1] == *a1)
      goto LABEL_1222;
    v23 = 0;
    v24 = 0;
    v484 = a4 & 0x1C;
    while (1)
    {
      v25 = sub_239458500(__p, (uint64_t)"newmtl ", 7);
      v26 = v22 + 912 * v23;
      v27 = *(char *)(v26 + 23);
      if (v27 >= 0)
        v28 = v22 + 912 * v23;
      else
        v28 = *(_QWORD *)v26;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(v26 + 23);
      else
        v29 = *(_QWORD *)(v26 + 8);
      v30 = sub_239458500(v25, v28, v29);
      sub_239458500(v30, (uint64_t)"\n", 1);
      sub_2396023A4();
      sub_239601F08();
      v31 = a6;
      v32 = v22 + 912 * v23;
      if (!*(_BYTE *)(v32 + 208))
        goto LABEL_209;
      if (qword_25693C6B8)
      {
        v33 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C6B8);
        v33.i16[0] = vaddlv_u8(v33);
        v34 = qword_25693C6B8 - 1;
        v35 = qword_25693C6B8 != 1;
        if (v33.u32[0] < 2uLL)
          v35 = (qword_25693C6B8 & 1) == 0;
        v36 = *(uint64_t ***)(qword_25693C6B0 + 8 * v35);
        if (v36)
        {
          v37 = *v36;
          if (v37)
          {
            v38 = v37;
            if (v33.u32[0] < 2uLL)
            {
              v39 = v37;
              while (1)
              {
                v41 = v39[1];
                if (v41 == 1)
                {
                  if (*((_DWORD *)v39 + 4) == 1)
                    goto LABEL_162;
                }
                else if ((v41 & v34) != v35)
                {
                  goto LABEL_53;
                }
                v39 = (uint64_t *)*v39;
                if (!v39)
                  goto LABEL_53;
              }
            }
            do
            {
              v40 = v38[1];
              if (v40 == 1)
              {
                if (*((_DWORD *)v38 + 4) == 1)
                {
LABEL_162:
                  if (v33.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v99 = v37[1];
                      if (v99 == 1)
                      {
                        if (*((_DWORD *)v37 + 4) == 1)
                          goto LABEL_168;
                      }
                      else if ((v99 & v34) != v35)
                      {
                        goto LABEL_1238;
                      }
                      v37 = (uint64_t *)*v37;
                      if (!v37)
                        goto LABEL_1238;
                    }
                  }
                  while (1)
                  {
                    v100 = v37[1];
                    if (v100 == 1)
                    {
                      if (*((_DWORD *)v37 + 4) == 1)
                      {
LABEL_168:
                        if (*((char *)v37 + 47) < 0)
                        {
                          sub_23941A7F8(v515, (void *)v37[3], v37[4]);
                        }
                        else
                        {
                          *(_OWORD *)v515 = *(_OWORD *)(v37 + 3);
                          v516 = v37[5];
                        }
                        goto LABEL_54;
                      }
                    }
                    else
                    {
                      if (v100 >= qword_25693C6B8)
                        v100 %= (unint64_t)qword_25693C6B8;
                      if (v100 != v35)
LABEL_1238:
                        sub_23941D898("unordered_map::at: key not found");
                    }
                    v37 = (uint64_t *)*v37;
                    if (!v37)
                      goto LABEL_1238;
                  }
                }
              }
              else
              {
                if (v40 >= qword_25693C6B8)
                  v40 %= (unint64_t)qword_25693C6B8;
                if (v40 != v35)
                  break;
              }
              v38 = (uint64_t *)*v38;
            }
            while (v38);
          }
        }
      }
LABEL_53:
      HIBYTE(v516) = 0;
      LOBYTE(v515[0]) = 0;
LABEL_54:
      std::operator+<char>();
      v42 = *((char *)a3 + 23);
      if (v42 >= 0)
        v43 = *((unsigned __int8 *)a3 + 23);
      else
        v43 = (size_t)a3[1];
      v44 = v43 + 1;
      if (v43 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v44 >= 0x17)
      {
        v46 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17)
          v46 = v44 | 7;
        v47 = v46 + 1;
        v45 = (char *)operator new(v46 + 1);
        v496.__r_.__value_.__l.__size_ = v43 + 1;
        v496.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
        v31 = a6;
      }
      else
      {
        memset(&v496, 0, sizeof(v496));
        v45 = (char *)&v496;
        *((_BYTE *)&v496.__r_.__value_.__s + 23) = v43 + 1;
        if (!v43)
          goto LABEL_68;
      }
      if (v42 >= 0)
        v48 = a3;
      else
        v48 = *a3;
      memmove(v45, v48, v43);
LABEL_68:
      *(_WORD *)&v45[v43] = 95;
      if (v516 >= 0)
        v49 = v515;
      else
        v49 = (void **)v515[0];
      if (v516 >= 0)
        v50 = HIBYTE(v516);
      else
        v50 = (std::string::size_type)v515[1];
      v51 = std::string::append(&v496, (const std::string::value_type *)v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v485.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v485.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v509, v24);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v509;
      else
        v53 = (std::string *)v509.__r_.__value_.__r.__words[0];
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v509.__r_.__value_.__r.__words[2]);
      else
        size = v509.__r_.__value_.__l.__size_;
      v55 = std::string::append(&v485, (const std::string::value_type *)v53, size);
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      if ((v514 & 0x80u) == 0)
        v57 = (const std::string::value_type *)&v512;
      else
        v57 = (const std::string::value_type *)v512;
      if ((v514 & 0x80u) == 0)
        v58 = v514;
      else
        v58 = v513;
      v59 = std::string::append(&__dst, v57, v58);
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v511 = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)v510 = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_88:
          if ((SHIBYTE(v485.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_89;
          goto LABEL_94;
        }
      }
      else if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_88;
      }
      operator delete(v509.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v485.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_89:
        if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_95;
        goto LABEL_90;
      }
LABEL_94:
      operator delete(v485.__r_.__value_.__l.__data_);
      if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_95:
        operator delete(v496.__r_.__value_.__l.__data_);
        v61 = (int8x8_t)qword_25693C690;
        if (!qword_25693C690)
          goto LABEL_1227;
        goto LABEL_96;
      }
LABEL_90:
      v61 = (int8x8_t)qword_25693C690;
      if (!qword_25693C690)
        goto LABEL_1227;
LABEL_96:
      v62 = (uint8x8_t)vcnt_s8(v61);
      v62.i16[0] = vaddlv_u8(v62);
      v63 = *(_QWORD *)&v61 - 1;
      v64 = *(_QWORD *)&v61 != 1;
      if (v62.u32[0] < 2uLL)
        v64 = (v61.i8[0] & 1) == 0;
      v65 = *(uint64_t ***)(qword_25693C688 + 8 * v64);
      if (!v65 || (v66 = *v65) == 0)
LABEL_1227:
        sub_23941D898("unordered_map::at: key not found");
      if (v62.u32[0] < 2uLL)
      {
        while (1)
        {
          v67 = v66[1];
          if (v67 == 1)
          {
            if (*((_DWORD *)v66 + 4) == 1)
              goto LABEL_106;
          }
          else if ((v67 & v63) != v64)
          {
            goto LABEL_1227;
          }
          v66 = (uint64_t *)*v66;
          if (!v66)
            goto LABEL_1227;
        }
      }
      while (1)
      {
        v83 = v66[1];
        if (v83 == 1)
          break;
        if (v83 >= *(_QWORD *)&v61)
          v83 %= *(_QWORD *)&v61;
        if (v83 != v64)
          goto LABEL_1227;
LABEL_130:
        v66 = (uint64_t *)*v66;
        if (!v66)
          goto LABEL_1227;
      }
      if (*((_DWORD *)v66 + 4) != 1)
        goto LABEL_130;
LABEL_106:
      v70 = v66[3];
      v68 = (uint64_t)(v66 + 3);
      v69 = v70;
      v71 = *(char *)(v68 + 23);
      if (v71 >= 0)
        v72 = v68;
      else
        v72 = v69;
      if (v71 >= 0)
        v73 = *(unsigned __int8 *)(v68 + 23);
      else
        v73 = *(_QWORD *)(v68 + 8);
      v74 = sub_239458500(__p, v72, v73);
      v75 = sub_239458500(v74, (uint64_t)" ", 1);
      if (v511 >= 0)
        v76 = v510;
      else
        v76 = (void **)v510[0];
      if (v511 >= 0)
        v77 = HIBYTE(v511);
      else
        v77 = (uint64_t)v510[1];
      v78 = sub_239458500(v75, (uint64_t)v76, v77);
      sub_239458500(v78, (uint64_t)"\n", 1);
      if (v484 != 28)
        goto LABEL_206;
      memset(&__dst, 0, sizeof(__dst));
      v79 = (char *)HIBYTE(v511);
      if (v511 >= 0)
        v80 = (std::string *)v510;
      else
        v80 = (std::string *)v510[0];
      if (v511 < 0)
        v79 = (char *)v510[1];
      sub_23948900C(&__dst, v80, (std::string *)&v79[(_QWORD)v80]);
      sub_239498A04((std::__fs::filesystem::path *)&__dst, a2, (std::__fs::filesystem::path *)&v509);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v81 = v32 + 48;
        v82 = (char)v514;
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_126;
LABEL_137:
        if (v513 != 4 || *(_DWORD *)v512 != 1920492846)
          goto LABEL_139;
LABEL_146:
        if (!*(_BYTE *)(v81 + 160))
          sub_2394875CC();
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
        sub_239423B80((_QWORD *)(v81 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
        sub_2397078F8((uint64_t)&v496, 32, &v485);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE08B8;
        sub_23960A1CC((uint64_t)&v485, (uint64_t)&__dst.__r_.__value_.__l.__size_);
        v88 = nullsub_4(v486);
        v89 = (std::__shared_weak_count *)v485.__r_.__value_.__r.__words[2];
        if (v485.__r_.__value_.__r.__words[2])
        {
          v90 = (unint64_t *)(v485.__r_.__value_.__r.__words[2] + 8);
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v88);
            std::__shared_weak_count::__release_weak(v89);
          }
        }
        j_nullsub_4_89(&v485);
        v92 = nullsub_4(v497);
        v93 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
          v94 = (unint64_t *)(v496.__r_.__value_.__r.__words[2] + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v93->__on_zero_shared)(v93, v92);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        nullsub_4(&v496);
        sub_239606EFC(&__dst, (std::__fs::filesystem::path *)&v509, (uint64_t)&v485);
        v96 = v495;
        if (v481 && v495)
        {
          v97 = *(_QWORD *)(v31 + 8);
          if (v97 >= *(_QWORD *)(v31 + 16))
          {
            v101 = sub_23958837C((char **)v31, (uint64_t)&v509);
          }
          else
          {
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
            }
            else
            {
              v98 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
              *(_QWORD *)(v97 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
              *(_OWORD *)v97 = v98;
            }
            v101 = (char *)(v97 + 24);
            *(_QWORD *)(v31 + 8) = v97 + 24;
          }
          *(_QWORD *)(v31 + 8) = v101;
          v96 = v495;
        }
        if (v96 || !v494)
          goto LABEL_204;
        if (!v493)
          goto LABEL_201;
        if (v492 < 0)
        {
          operator delete(v491);
          if (v490 < 0)
            goto LABEL_585;
LABEL_201:
          if (!v488)
          {
LABEL_204:
            sub_239416DA0((uint64_t)&__dst.__r_.__value_.__l.__size_);
            nullsub_4(&__dst);
            goto LABEL_205;
          }
        }
        else
        {
          if ((v490 & 0x80000000) == 0)
            goto LABEL_201;
LABEL_585:
          operator delete(v489);
          if (!v488)
            goto LABEL_204;
        }
        if (v487 < 0)
          operator delete((void *)v485.__r_.__value_.__r.__words[2]);
        goto LABEL_204;
      }
      v81 = v32 + 48;
      v82 = (char)v514;
      if ((char)v514 < 0)
        goto LABEL_137;
LABEL_126:
      if (v82 == 4 && (_DWORD)v512 == 1920492846)
        goto LABEL_146;
LABEL_139:
      if (!*(_BYTE *)(v81 + 160))
        sub_2394875CC();
      sub_2396072A4((_QWORD *)(v81 + 24), (std::__fs::filesystem::path *)&v509, (uint64_t)&__dst);
      v84 = v508;
      if (v481 && v508)
      {
        v85 = *(_QWORD *)(v31 + 8);
        if (v85 >= *(_QWORD *)(v31 + 16))
        {
          v87 = sub_23958837C((char **)v31, (uint64_t)&v509);
        }
        else
        {
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
          }
          else
          {
            v86 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
            *(_QWORD *)(v85 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
            *(_OWORD *)v85 = v86;
          }
          v87 = (char *)(v85 + 24);
          *(_QWORD *)(v31 + 8) = v85 + 24;
        }
        *(_QWORD *)(v31 + 8) = v87;
        v84 = v508;
      }
      if (v84 || !v507)
        goto LABEL_205;
      if (!v506)
        goto LABEL_185;
      if ((v505 & 0x80000000) == 0)
      {
        if ((v503 & 0x80000000) == 0)
          goto LABEL_185;
LABEL_189:
        operator delete(v502);
        if (!v501)
          goto LABEL_205;
LABEL_186:
        if (v500 < 0)
          operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_205;
      }
      operator delete(v504);
      if (v503 < 0)
        goto LABEL_189;
LABEL_185:
      if (v501)
        goto LABEL_186;
LABEL_205:
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v511) < 0)
          goto LABEL_218;
LABEL_207:
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_208;
LABEL_219:
        operator delete(v512);
        if (SHIBYTE(v516) < 0)
          goto LABEL_220;
LABEL_209:
        v102 = v22 + 912 * v23;
        if (!*(_BYTE *)(v102 + 376))
          goto LABEL_376;
      }
      else
      {
LABEL_206:
        if ((SHIBYTE(v511) & 0x80000000) == 0)
          goto LABEL_207;
LABEL_218:
        operator delete(v510[0]);
        if ((char)v514 < 0)
          goto LABEL_219;
LABEL_208:
        if ((SHIBYTE(v516) & 0x80000000) == 0)
          goto LABEL_209;
LABEL_220:
        operator delete(v515[0]);
        v102 = v22 + 912 * v23;
        if (!*(_BYTE *)(v102 + 376))
          goto LABEL_376;
      }
      if (qword_25693C6B8)
      {
        v103 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C6B8);
        v103.i16[0] = vaddlv_u8(v103);
        if (v103.u32[0] > 1uLL)
        {
          if ((unint64_t)qword_25693C6B8 > 2)
          {
            v104 = 2;
            v105 = qword_25693C6B0;
            v106 = *(uint64_t ***)(qword_25693C6B0 + 16);
            if (!v106)
              goto LABEL_237;
            goto LABEL_223;
          }
          v104 = 2u % qword_25693C6B8;
          v105 = qword_25693C6B0;
          v106 = *(uint64_t ***)(qword_25693C6B0 + 8 * v104);
          if (v106)
            goto LABEL_223;
        }
        else
        {
          v104 = ((_BYTE)qword_25693C6B8 - 1) & 2;
          v105 = qword_25693C6B0;
          v106 = *(uint64_t ***)(qword_25693C6B0 + 8 * v104);
          if (!v106)
            goto LABEL_237;
LABEL_223:
          v107 = *v106;
          if (*v106)
          {
            v108 = qword_25693C6B8 - 1;
            if (v103.u32[0] < 2uLL)
            {
              while (1)
              {
                v109 = v107[1];
                if (v109 == 2)
                {
                  if (*((_DWORD *)v107 + 4) == 2)
                    goto LABEL_359;
                }
                else if ((v109 & v108) != v104)
                {
                  goto LABEL_237;
                }
                v107 = (uint64_t *)*v107;
                if (!v107)
                  goto LABEL_237;
              }
            }
            do
            {
              v110 = v107[1];
              if (v110 == 2)
              {
                if (*((_DWORD *)v107 + 4) == 2)
                {
LABEL_359:
                  if (v103.u32[0] > 1uLL)
                  {
                    if ((unint64_t)qword_25693C6B8 <= 2)
                      v176 = 2u % qword_25693C6B8;
                    else
                      v176 = 2;
                  }
                  else
                  {
                    v176 = ((_BYTE)qword_25693C6B8 - 1) & 2;
                  }
                  v246 = *(uint64_t ***)(v105 + 8 * v176);
                  if (!v246 || (v247 = *v246) == 0)
LABEL_1233:
                    sub_23941D898("unordered_map::at: key not found");
                  if (v103.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v248 = v247[1];
                      if (v248 == 2)
                      {
                        if (*((_DWORD *)v247 + 4) == 2)
                          goto LABEL_555;
                      }
                      else if ((v248 & v108) != v176)
                      {
                        goto LABEL_1233;
                      }
                      v247 = (uint64_t *)*v247;
                      if (!v247)
                        goto LABEL_1233;
                    }
                  }
                  while (1)
                  {
                    v249 = v247[1];
                    if (v249 == 2)
                    {
                      if (*((_DWORD *)v247 + 4) == 2)
                      {
LABEL_555:
                        if (*((char *)v247 + 47) < 0)
                        {
                          sub_23941A7F8(v515, (void *)v247[3], v247[4]);
                        }
                        else
                        {
                          *(_OWORD *)v515 = *(_OWORD *)(v247 + 3);
                          v516 = v247[5];
                        }
                        goto LABEL_238;
                      }
                    }
                    else
                    {
                      if (v249 >= qword_25693C6B8)
                        v249 %= (unint64_t)qword_25693C6B8;
                      if (v249 != v176)
                        goto LABEL_1233;
                    }
                    v247 = (uint64_t *)*v247;
                    if (!v247)
                      goto LABEL_1233;
                  }
                }
              }
              else
              {
                if (v110 >= qword_25693C6B8)
                  v110 %= (unint64_t)qword_25693C6B8;
                if (v110 != v104)
                  break;
              }
              v107 = (uint64_t *)*v107;
            }
            while (v107);
          }
        }
      }
LABEL_237:
      HIBYTE(v516) = 0;
      LOBYTE(v515[0]) = 0;
LABEL_238:
      std::operator+<char>();
      v111 = *((char *)a3 + 23);
      if (v111 >= 0)
        v112 = *((unsigned __int8 *)a3 + 23);
      else
        v112 = (size_t)a3[1];
      v113 = v112 + 1;
      if (v112 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v113 >= 0x17)
      {
        v115 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v113 | 7) != 0x17)
          v115 = v113 | 7;
        v116 = v115 + 1;
        v114 = (char *)operator new(v115 + 1);
        v496.__r_.__value_.__l.__size_ = v112 + 1;
        v496.__r_.__value_.__r.__words[2] = v116 | 0x8000000000000000;
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
        v31 = a6;
      }
      else
      {
        memset(&v496, 0, sizeof(v496));
        v114 = (char *)&v496;
        *((_BYTE *)&v496.__r_.__value_.__s + 23) = v112 + 1;
        if (!v112)
          goto LABEL_252;
      }
      if (v111 >= 0)
        v117 = a3;
      else
        v117 = *a3;
      memmove(v114, v117, v112);
LABEL_252:
      *(_WORD *)&v114[v112] = 95;
      if (v516 >= 0)
        v118 = v515;
      else
        v118 = (void **)v515[0];
      if (v516 >= 0)
        v119 = HIBYTE(v516);
      else
        v119 = (std::string::size_type)v515[1];
      v120 = std::string::append(&v496, (const std::string::value_type *)v118, v119);
      v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v485.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v485.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v509, v24);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v122 = &v509;
      else
        v122 = (std::string *)v509.__r_.__value_.__r.__words[0];
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v123 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
      else
        v123 = v509.__r_.__value_.__l.__size_;
      v124 = std::string::append(&v485, (const std::string::value_type *)v122, v123);
      v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v125;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      if ((v514 & 0x80u) == 0)
        v126 = (const std::string::value_type *)&v512;
      else
        v126 = (const std::string::value_type *)v512;
      if ((v514 & 0x80u) == 0)
        v127 = v514;
      else
        v127 = v513;
      v128 = std::string::append(&__dst, v126, v127);
      v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      v511 = v128->__r_.__value_.__r.__words[2];
      *(_OWORD *)v510 = v129;
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_272;
LABEL_277:
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_278;
LABEL_273:
        if ((SHIBYTE(v496.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_274;
LABEL_279:
        operator delete(v496.__r_.__value_.__l.__data_);
        v130 = (int8x8_t)qword_25693C690;
        if (qword_25693C690)
          goto LABEL_280;
LABEL_1228:
        sub_23941D898("unordered_map::at: key not found");
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_277;
LABEL_272:
      if ((SHIBYTE(v485.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_273;
LABEL_278:
      operator delete(v485.__r_.__value_.__l.__data_);
      if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_279;
LABEL_274:
      v130 = (int8x8_t)qword_25693C690;
      if (!qword_25693C690)
        goto LABEL_1228;
LABEL_280:
      v131 = (uint8x8_t)vcnt_s8(v130);
      v131.i16[0] = vaddlv_u8(v131);
      if (v131.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v130 <= 2uLL)
          v132 = 2u % v130.u8[0];
        else
          v132 = 2;
      }
      else
      {
        v132 = (v130.i8[0] - 1) & 2;
      }
      v133 = *(uint64_t ***)(qword_25693C688 + 8 * v132);
      if (!v133)
        goto LABEL_1228;
      v134 = *v133;
      if (!v134)
        goto LABEL_1228;
      if (v131.u32[0] < 2uLL)
      {
        v135 = *(_QWORD *)&v130 - 1;
        while (1)
        {
          v137 = v134[1];
          if (v137 == 2)
          {
            if (*((_DWORD *)v134 + 4) == 2)
              goto LABEL_300;
          }
          else if ((v137 & v135) != v132)
          {
            goto LABEL_1228;
          }
          v134 = (uint64_t *)*v134;
          if (!v134)
            goto LABEL_1228;
        }
      }
      while (2)
      {
        v136 = v134[1];
        if (v136 != 2)
        {
          if (v136 >= *(_QWORD *)&v130)
            v136 %= *(_QWORD *)&v130;
          if (v136 != v132)
            goto LABEL_1228;
LABEL_290:
          v134 = (uint64_t *)*v134;
          if (!v134)
            goto LABEL_1228;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v134 + 4) != 2)
        goto LABEL_290;
LABEL_300:
      v140 = v134[3];
      v139 = (uint64_t)(v134 + 3);
      v138 = v140;
      v141 = *(char *)(v139 + 23);
      if (v141 >= 0)
        v142 = v139;
      else
        v142 = v138;
      if (v141 >= 0)
        v143 = *(unsigned __int8 *)(v139 + 23);
      else
        v143 = *(_QWORD *)(v139 + 8);
      v144 = sub_239458500(__p, v142, v143);
      v145 = sub_239458500(v144, (uint64_t)" ", 1);
      if (v511 >= 0)
        v146 = v510;
      else
        v146 = (void **)v510[0];
      if (v511 >= 0)
        v147 = HIBYTE(v511);
      else
        v147 = (uint64_t)v510[1];
      v148 = sub_239458500(v145, (uint64_t)v146, v147);
      sub_239458500(v148, (uint64_t)"\n", 1);
      if (v484 != 28)
        goto LABEL_373;
      memset(&__dst, 0, sizeof(__dst));
      v149 = (char *)HIBYTE(v511);
      if (v511 >= 0)
        v150 = (std::string *)v510;
      else
        v150 = (std::string *)v510[0];
      if (v511 < 0)
        v149 = (char *)v510[1];
      sub_23948900C(&__dst, v150, (std::string *)&v149[(_QWORD)v150]);
      sub_239498A04((std::__fs::filesystem::path *)&__dst, a2, (std::__fs::filesystem::path *)&v509);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v151 = v102 + 216;
        v152 = (char)v514;
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_320;
LABEL_324:
        if (v513 != 4 || *(_DWORD *)v512 != 1920492846)
          goto LABEL_326;
LABEL_343:
        if (!*(_BYTE *)(v151 + 160))
          sub_2394875CC();
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
        sub_23960AB44((_QWORD *)(v151 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
        sub_2397078F8((uint64_t)&v496, 32, &v485);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE08B8;
        sub_23960A1CC((uint64_t)&v485, (uint64_t)&__dst.__r_.__value_.__l.__size_);
        v165 = nullsub_4(v486);
        v166 = (std::__shared_weak_count *)v485.__r_.__value_.__r.__words[2];
        if (v485.__r_.__value_.__r.__words[2])
        {
          v167 = (unint64_t *)(v485.__r_.__value_.__r.__words[2] + 8);
          do
            v168 = __ldaxr(v167);
          while (__stlxr(v168 - 1, v167));
          if (!v168)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v166->__on_zero_shared)(v166, v165);
            std::__shared_weak_count::__release_weak(v166);
          }
        }
        j_nullsub_4_89(&v485);
        v169 = nullsub_4(v497);
        v170 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
          v171 = (unint64_t *)(v496.__r_.__value_.__r.__words[2] + 8);
          do
            v172 = __ldaxr(v171);
          while (__stlxr(v172 - 1, v171));
          if (!v172)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v170->__on_zero_shared)(v170, v169);
            std::__shared_weak_count::__release_weak(v170);
          }
        }
        nullsub_4(&v496);
        sub_239606EFC(&__dst, (std::__fs::filesystem::path *)&v509, (uint64_t)&v485);
        v173 = v495;
        if (v481 && v495)
        {
          v174 = *(_QWORD *)(v31 + 8);
          if (v174 >= *(_QWORD *)(v31 + 16))
          {
            v244 = sub_23958837C((char **)v31, (uint64_t)&v509);
          }
          else
          {
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
            }
            else
            {
              v175 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
              *(_QWORD *)(v174 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
              *(_OWORD *)v174 = v175;
            }
            v244 = (char *)(v174 + 24);
            *(_QWORD *)(v31 + 8) = v174 + 24;
          }
          *(_QWORD *)(v31 + 8) = v244;
          v173 = v495;
        }
        if (v173 || !v494)
          goto LABEL_598;
        if (!v493)
          goto LABEL_595;
        if (v492 < 0)
        {
          operator delete(v491);
          if (v490 < 0)
            goto LABEL_1159;
LABEL_595:
          if (!v488)
          {
LABEL_598:
            sub_239416DA0((uint64_t)&__dst.__r_.__value_.__l.__size_);
            nullsub_4(&__dst);
            if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_373;
            goto LABEL_599;
          }
        }
        else
        {
          if ((v490 & 0x80000000) == 0)
            goto LABEL_595;
LABEL_1159:
          operator delete(v489);
          if (!v488)
            goto LABEL_598;
        }
        if (v487 < 0)
          operator delete((void *)v485.__r_.__value_.__r.__words[2]);
        goto LABEL_598;
      }
      v151 = v102 + 216;
      v152 = (char)v514;
      if ((char)v514 < 0)
        goto LABEL_324;
LABEL_320:
      if (v152 == 4 && (_DWORD)v512 == 1920492846)
        goto LABEL_343;
LABEL_326:
      if (!*(_BYTE *)(v151 + 160))
        sub_2394875CC();
      v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
      sub_23960AB44((_QWORD *)(v151 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
      sub_2397078F8((uint64_t)&v496, 21, &v485);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADBEA0;
      sub_239469644((uint64_t)&v485, (uint64_t)&__dst.__r_.__value_.__l.__size_);
      v153 = nullsub_4(v486);
      v154 = (std::__shared_weak_count *)v485.__r_.__value_.__r.__words[2];
      if (!v485.__r_.__value_.__r.__words[2])
        goto LABEL_331;
      v155 = (unint64_t *)(v485.__r_.__value_.__r.__words[2] + 8);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v154->__on_zero_shared)(v154, v153);
        std::__shared_weak_count::__release_weak(v154);
        j_nullsub_4_89(&v485);
        v157 = nullsub_4(v497);
        v158 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
LABEL_332:
          p_shared_owners = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldaxr(p_shared_owners);
          while (__stlxr(v160 - 1, p_shared_owners));
          if (!v160)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v158->__on_zero_shared)(v158, v157);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
      }
      else
      {
LABEL_331:
        j_nullsub_4_89(&v485);
        v157 = nullsub_4(v497);
        v158 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
          goto LABEL_332;
      }
      nullsub_4(&v496);
      sub_239607624(&__dst, (std::__fs::filesystem::path *)&v509, (uint64_t)&v485);
      v161 = v495;
      if (v481 && v495)
      {
        v162 = *(_QWORD *)(v31 + 8);
        if (v162 >= *(_QWORD *)(v31 + 16))
        {
          v164 = sub_23958837C((char **)v31, (uint64_t)&v509);
        }
        else
        {
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
          }
          else
          {
            v163 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
            *(_QWORD *)(v162 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
            *(_OWORD *)v162 = v163;
          }
          v164 = (char *)(v162 + 24);
          *(_QWORD *)(v31 + 8) = v162 + 24;
        }
        *(_QWORD *)(v31 + 8) = v164;
        v161 = v495;
      }
      if (v161 || !v494)
        goto LABEL_372;
      if (!v493)
        goto LABEL_369;
      if ((v492 & 0x80000000) == 0)
      {
        if ((v490 & 0x80000000) == 0)
          goto LABEL_369;
LABEL_514:
        operator delete(v489);
        if (!v488)
          goto LABEL_372;
LABEL_370:
        if (v487 < 0)
          operator delete((void *)v485.__r_.__value_.__r.__words[2]);
        goto LABEL_372;
      }
      operator delete(v491);
      if (v490 < 0)
        goto LABEL_514;
LABEL_369:
      if (v488)
        goto LABEL_370;
LABEL_372:
      sub_239416DA0((uint64_t)&__dst.__r_.__value_.__l.__size_);
      nullsub_4(&__dst);
      if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_373:
        if ((SHIBYTE(v511) & 0x80000000) == 0)
          goto LABEL_374;
LABEL_600:
        operator delete(v510[0]);
        if ((char)v514 < 0)
          goto LABEL_601;
LABEL_375:
        if ((SHIBYTE(v516) & 0x80000000) == 0)
          goto LABEL_376;
LABEL_602:
        operator delete(v515[0]);
        v177 = v22 + 912 * v23;
        if (!*(_BYTE *)(v177 + 496))
          goto LABEL_603;
        goto LABEL_377;
      }
LABEL_599:
      operator delete(v509.__r_.__value_.__l.__data_);
      if (SHIBYTE(v511) < 0)
        goto LABEL_600;
LABEL_374:
      if (((char)v514 & 0x80000000) == 0)
        goto LABEL_375;
LABEL_601:
      operator delete(v512);
      if (SHIBYTE(v516) < 0)
        goto LABEL_602;
LABEL_376:
      v177 = v22 + 912 * v23;
      if (!*(_BYTE *)(v177 + 496))
        goto LABEL_603;
LABEL_377:
      if (qword_25693C6B8)
      {
        v178 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C6B8);
        v178.i16[0] = vaddlv_u8(v178);
        if (v178.u32[0] > 1uLL)
        {
          if ((unint64_t)qword_25693C6B8 > 3)
          {
            v179 = 3;
            v180 = qword_25693C6B0;
            v181 = *(uint64_t ***)(qword_25693C6B0 + 24);
            if (!v181)
              goto LABEL_399;
            goto LABEL_385;
          }
          v179 = 3u % qword_25693C6B8;
          v180 = qword_25693C6B0;
          v181 = *(uint64_t ***)(qword_25693C6B0 + 8 * v179);
          if (v181)
            goto LABEL_385;
        }
        else
        {
          v179 = ((_BYTE)qword_25693C6B8 - 1) & 3;
          v180 = qword_25693C6B0;
          v181 = *(uint64_t ***)(qword_25693C6B0 + 8 * v179);
          if (!v181)
            goto LABEL_399;
LABEL_385:
          v182 = *v181;
          if (*v181)
          {
            v183 = qword_25693C6B8 - 1;
            if (v178.u32[0] < 2uLL)
            {
              while (1)
              {
                v184 = v182[1];
                if (v184 == 3)
                {
                  if (*((_DWORD *)v182 + 4) == 3)
                    goto LABEL_511;
                }
                else if ((v184 & v183) != v179)
                {
                  goto LABEL_399;
                }
                v182 = (uint64_t *)*v182;
                if (!v182)
                  goto LABEL_399;
              }
            }
            do
            {
              v185 = v182[1];
              if (v185 == 3)
              {
                if (*((_DWORD *)v182 + 4) == 3)
                {
LABEL_511:
                  if (v178.u32[0] > 1uLL)
                  {
                    if ((unint64_t)qword_25693C6B8 <= 3)
                      v243 = 3u % qword_25693C6B8;
                    else
                      v243 = 3;
                  }
                  else
                  {
                    v243 = ((_BYTE)qword_25693C6B8 - 1) & 3;
                  }
                  v250 = *(uint64_t ***)(v180 + 8 * v243);
                  if (!v250 || (v251 = *v250) == 0)
LABEL_1234:
                    sub_23941D898("unordered_map::at: key not found");
                  if (v178.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v252 = v251[1];
                      if (v252 == 3)
                      {
                        if (*((_DWORD *)v251 + 4) == 3)
                          goto LABEL_574;
                      }
                      else if ((v252 & v183) != v243)
                      {
                        goto LABEL_1234;
                      }
                      v251 = (uint64_t *)*v251;
                      if (!v251)
                        goto LABEL_1234;
                    }
                  }
                  while (1)
                  {
                    v253 = v251[1];
                    if (v253 == 3)
                    {
                      if (*((_DWORD *)v251 + 4) == 3)
                      {
LABEL_574:
                        if (*((char *)v251 + 47) < 0)
                        {
                          sub_23941A7F8(v515, (void *)v251[3], v251[4]);
                        }
                        else
                        {
                          *(_OWORD *)v515 = *(_OWORD *)(v251 + 3);
                          v516 = v251[5];
                        }
                        goto LABEL_400;
                      }
                    }
                    else
                    {
                      if (v253 >= qword_25693C6B8)
                        v253 %= (unint64_t)qword_25693C6B8;
                      if (v253 != v243)
                        goto LABEL_1234;
                    }
                    v251 = (uint64_t *)*v251;
                    if (!v251)
                      goto LABEL_1234;
                  }
                }
              }
              else
              {
                if (v185 >= qword_25693C6B8)
                  v185 %= (unint64_t)qword_25693C6B8;
                if (v185 != v179)
                  break;
              }
              v182 = (uint64_t *)*v182;
            }
            while (v182);
          }
        }
      }
LABEL_399:
      HIBYTE(v516) = 0;
      LOBYTE(v515[0]) = 0;
LABEL_400:
      std::operator+<char>();
      v186 = *((char *)a3 + 23);
      if (v186 >= 0)
        v187 = *((unsigned __int8 *)a3 + 23);
      else
        v187 = (size_t)a3[1];
      v188 = v187 + 1;
      if (v187 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v188 >= 0x17)
      {
        v190 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v188 | 7) != 0x17)
          v190 = v188 | 7;
        v191 = v190 + 1;
        v189 = (char *)operator new(v190 + 1);
        v496.__r_.__value_.__l.__size_ = v187 + 1;
        v496.__r_.__value_.__r.__words[2] = v191 | 0x8000000000000000;
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)v189;
        v31 = a6;
      }
      else
      {
        memset(&v496, 0, sizeof(v496));
        v189 = (char *)&v496;
        *((_BYTE *)&v496.__r_.__value_.__s + 23) = v187 + 1;
        if (!v187)
          goto LABEL_414;
      }
      if (v186 >= 0)
        v192 = a3;
      else
        v192 = *a3;
      memmove(v189, v192, v187);
LABEL_414:
      *(_WORD *)&v189[v187] = 95;
      if (v516 >= 0)
        v193 = v515;
      else
        v193 = (void **)v515[0];
      if (v516 >= 0)
        v194 = HIBYTE(v516);
      else
        v194 = (std::string::size_type)v515[1];
      v195 = std::string::append(&v496, (const std::string::value_type *)v193, v194);
      v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
      v485.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v485.__r_.__value_.__l.__data_ = v196;
      v195->__r_.__value_.__l.__size_ = 0;
      v195->__r_.__value_.__r.__words[2] = 0;
      v195->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v509, v24);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v197 = &v509;
      else
        v197 = (std::string *)v509.__r_.__value_.__r.__words[0];
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v198 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
      else
        v198 = v509.__r_.__value_.__l.__size_;
      v199 = std::string::append(&v485, (const std::string::value_type *)v197, v198);
      v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v200;
      v199->__r_.__value_.__l.__size_ = 0;
      v199->__r_.__value_.__r.__words[2] = 0;
      v199->__r_.__value_.__r.__words[0] = 0;
      if ((v514 & 0x80u) == 0)
        v201 = (const std::string::value_type *)&v512;
      else
        v201 = (const std::string::value_type *)v512;
      if ((v514 & 0x80u) == 0)
        v202 = v514;
      else
        v202 = v513;
      v203 = std::string::append(&__dst, v201, v202);
      v204 = *(_OWORD *)&v203->__r_.__value_.__l.__data_;
      v511 = v203->__r_.__value_.__r.__words[2];
      *(_OWORD *)v510 = v204;
      v203->__r_.__value_.__l.__size_ = 0;
      v203->__r_.__value_.__r.__words[2] = 0;
      v203->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_434;
LABEL_439:
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_440;
LABEL_435:
        if ((SHIBYTE(v496.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_436;
LABEL_441:
        operator delete(v496.__r_.__value_.__l.__data_);
        v205 = (int8x8_t)qword_25693C690;
        if (qword_25693C690)
          goto LABEL_442;
LABEL_1229:
        sub_23941D898("unordered_map::at: key not found");
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_439;
LABEL_434:
      if ((SHIBYTE(v485.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_435;
LABEL_440:
      operator delete(v485.__r_.__value_.__l.__data_);
      if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_441;
LABEL_436:
      v205 = (int8x8_t)qword_25693C690;
      if (!qword_25693C690)
        goto LABEL_1229;
LABEL_442:
      v206 = (uint8x8_t)vcnt_s8(v205);
      v206.i16[0] = vaddlv_u8(v206);
      if (v206.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v205 <= 3uLL)
          v207 = 3u % v205.u8[0];
        else
          v207 = 3;
      }
      else
      {
        v207 = (v205.i8[0] - 1) & 3;
      }
      v208 = *(uint64_t ***)(qword_25693C688 + 8 * v207);
      if (!v208)
        goto LABEL_1229;
      v209 = *v208;
      if (!v209)
        goto LABEL_1229;
      if (v206.u32[0] < 2uLL)
      {
        v210 = *(_QWORD *)&v205 - 1;
        while (1)
        {
          v212 = v209[1];
          if (v212 == 3)
          {
            if (*((_DWORD *)v209 + 4) == 3)
              goto LABEL_462;
          }
          else if ((v212 & v210) != v207)
          {
            goto LABEL_1229;
          }
          v209 = (uint64_t *)*v209;
          if (!v209)
            goto LABEL_1229;
        }
      }
      while (2)
      {
        v211 = v209[1];
        if (v211 != 3)
        {
          if (v211 >= *(_QWORD *)&v205)
            v211 %= *(_QWORD *)&v205;
          if (v211 != v207)
            goto LABEL_1229;
LABEL_452:
          v209 = (uint64_t *)*v209;
          if (!v209)
            goto LABEL_1229;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v209 + 4) != 3)
        goto LABEL_452;
LABEL_462:
      v215 = v209[3];
      v214 = (uint64_t)(v209 + 3);
      v213 = v215;
      v216 = *(char *)(v214 + 23);
      if (v216 >= 0)
        v217 = v214;
      else
        v217 = v213;
      if (v216 >= 0)
        v218 = *(unsigned __int8 *)(v214 + 23);
      else
        v218 = *(_QWORD *)(v214 + 8);
      v219 = sub_239458500(__p, v217, v218);
      v220 = sub_239458500(v219, (uint64_t)" ", 1);
      if (v511 >= 0)
        v221 = v510;
      else
        v221 = (void **)v510[0];
      if (v511 >= 0)
        v222 = HIBYTE(v511);
      else
        v222 = (uint64_t)v510[1];
      v223 = sub_239458500(v220, (uint64_t)v221, v222);
      sub_239458500(v223, (uint64_t)"\n", 1);
      if (v484 != 28)
        goto LABEL_529;
      memset(&__dst, 0, sizeof(__dst));
      v224 = (char *)HIBYTE(v511);
      if (v511 >= 0)
        v225 = (std::string *)v510;
      else
        v225 = (std::string *)v510[0];
      if (v511 < 0)
        v224 = (char *)v510[1];
      sub_23948900C(&__dst, v225, (std::string *)&v224[(_QWORD)v225]);
      sub_239498A04((std::__fs::filesystem::path *)&__dst, a2, (std::__fs::filesystem::path *)&v509);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v226 = v177 + 384;
        v227 = (char)v514;
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_482;
LABEL_486:
        if (v513 != 4 || *(_DWORD *)v512 != 1920492846)
          goto LABEL_488;
LABEL_505:
        if (!*(_BYTE *)(v226 + 112))
          sub_2394875CC();
        sub_2396079A4((_QWORD *)(v226 + 24), (std::__fs::filesystem::path *)&v509, (uint64_t)&__dst);
        v240 = v508;
        if (v481 && v508)
        {
          v241 = *(_QWORD *)(v31 + 8);
          if (v241 >= *(_QWORD *)(v31 + 16))
          {
            v245 = sub_23958837C((char **)v31, (uint64_t)&v509);
          }
          else
          {
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
            }
            else
            {
              v242 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
              *(_QWORD *)(v241 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
              *(_OWORD *)v241 = v242;
            }
            v245 = (char *)(v241 + 24);
            *(_QWORD *)(v31 + 8) = v241 + 24;
          }
          *(_QWORD *)(v31 + 8) = v245;
          v240 = v508;
        }
        if (v240 || !v507)
          goto LABEL_528;
        if (v506)
        {
          if (v505 < 0)
          {
            operator delete(v504);
            if ((v503 & 0x80000000) == 0)
              goto LABEL_1169;
          }
          else if ((v503 & 0x80000000) == 0)
          {
            goto LABEL_1169;
          }
          operator delete(v502);
          if (!v501)
            goto LABEL_528;
        }
        else
        {
LABEL_1169:
          if (!v501)
            goto LABEL_528;
        }
        if (v500 < 0)
          operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_528;
      }
      v226 = v177 + 384;
      v227 = (char)v514;
      if ((char)v514 < 0)
        goto LABEL_486;
LABEL_482:
      if (v227 == 4 && (_DWORD)v512 == 1920492846)
        goto LABEL_505;
LABEL_488:
      if (!*(_BYTE *)(v226 + 112))
        sub_2394875CC();
      v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
      sub_23960ACFC((_QWORD *)(v226 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
      sub_2397078F8((uint64_t)&v496, 1, &__dst);
      v485.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB628;
      sub_239423E50((uint64_t)&__dst, (uint64_t)&v485.__r_.__value_.__l.__size_);
      v228 = nullsub_4(v499);
      v229 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (!__dst.__r_.__value_.__r.__words[2])
        goto LABEL_493;
      v230 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
      do
        v231 = __ldaxr(v230);
      while (__stlxr(v231 - 1, v230));
      if (!v231)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v229->__on_zero_shared)(v229, v228);
        std::__shared_weak_count::__release_weak(v229);
        j_nullsub_4_89(&__dst);
        v232 = nullsub_4(v497);
        v233 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
LABEL_494:
          v234 = (unint64_t *)&v233->__shared_owners_;
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v233->__on_zero_shared)(v233, v232);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
      }
      else
      {
LABEL_493:
        j_nullsub_4_89(&__dst);
        v232 = nullsub_4(v497);
        v233 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
          goto LABEL_494;
      }
      nullsub_4(&v496);
      sub_239607D24(&v485, (std::__fs::filesystem::path *)&v509, (uint64_t)&__dst);
      v236 = v508;
      if (v481 && v508)
      {
        v237 = *(_QWORD *)(v31 + 8);
        if (v237 >= *(_QWORD *)(v31 + 16))
        {
          v239 = sub_23958837C((char **)v31, (uint64_t)&v509);
        }
        else
        {
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
          }
          else
          {
            v238 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
            *(_QWORD *)(v237 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
            *(_OWORD *)v237 = v238;
          }
          v239 = (char *)(v237 + 24);
          *(_QWORD *)(v31 + 8) = v237 + 24;
        }
        *(_QWORD *)(v31 + 8) = v239;
        v236 = v508;
      }
      if (v236 || !v507)
        goto LABEL_527;
      if (!v506)
        goto LABEL_524;
      if ((v505 & 0x80000000) == 0)
      {
        if ((v503 & 0x80000000) == 0)
          goto LABEL_524;
LABEL_538:
        operator delete(v502);
        if (!v501)
          goto LABEL_527;
LABEL_525:
        if (v500 < 0)
          operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_527;
      }
      operator delete(v504);
      if (v503 < 0)
        goto LABEL_538;
LABEL_524:
      if (v501)
        goto LABEL_525;
LABEL_527:
      sub_239416DA0((uint64_t)&v485.__r_.__value_.__l.__size_);
      nullsub_4(&v485);
LABEL_528:
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v511) < 0)
          goto LABEL_534;
LABEL_530:
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_531;
LABEL_535:
        operator delete(v512);
        if (SHIBYTE(v516) < 0)
LABEL_536:
          operator delete(v515[0]);
      }
      else
      {
LABEL_529:
        if ((SHIBYTE(v511) & 0x80000000) == 0)
          goto LABEL_530;
LABEL_534:
        operator delete(v510[0]);
        if ((char)v514 < 0)
          goto LABEL_535;
LABEL_531:
        if (SHIBYTE(v516) < 0)
          goto LABEL_536;
      }
LABEL_603:
      v254 = v22 + 912 * v23;
      if (!*(_BYTE *)(v254 + 616))
        goto LABEL_756;
      if (qword_25693C6B8)
      {
        v255 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C6B8);
        v255.i16[0] = vaddlv_u8(v255);
        if (v255.u32[0] > 1uLL)
        {
          if ((unint64_t)qword_25693C6B8 > 4)
          {
            v256 = 4;
            v257 = qword_25693C6B0;
            v258 = *(uint64_t ***)(qword_25693C6B0 + 32);
            if (!v258)
              goto LABEL_626;
            goto LABEL_612;
          }
          v256 = 4u % qword_25693C6B8;
          v257 = qword_25693C6B0;
          v258 = *(uint64_t ***)(qword_25693C6B0 + 8 * v256);
          if (v258)
            goto LABEL_612;
        }
        else
        {
          v256 = ((_BYTE)qword_25693C6B8 - 1) & 4;
          v257 = qword_25693C6B0;
          v258 = *(uint64_t ***)(qword_25693C6B0 + 8 * v256);
          if (!v258)
            goto LABEL_626;
LABEL_612:
          v259 = *v258;
          if (*v258)
          {
            v260 = qword_25693C6B8 - 1;
            if (v255.u32[0] < 2uLL)
            {
              while (1)
              {
                v261 = v259[1];
                if (v261 == 4)
                {
                  if (*((_DWORD *)v259 + 4) == 4)
                    goto LABEL_738;
                }
                else if ((v261 & v260) != v256)
                {
                  goto LABEL_626;
                }
                v259 = (uint64_t *)*v259;
                if (!v259)
                  goto LABEL_626;
              }
            }
            do
            {
              v262 = v259[1];
              if (v262 == 4)
              {
                if (*((_DWORD *)v259 + 4) == 4)
                {
LABEL_738:
                  if (v255.u32[0] > 1uLL)
                  {
                    if ((unint64_t)qword_25693C6B8 <= 4)
                      v320 = 4u % qword_25693C6B8;
                    else
                      v320 = 4;
                  }
                  else
                  {
                    v320 = ((_BYTE)qword_25693C6B8 - 1) & 4;
                  }
                  v466 = *(uint64_t ***)(v257 + 8 * v320);
                  if (!v466 || (v467 = *v466) == 0)
LABEL_1235:
                    sub_23941D898("unordered_map::at: key not found");
                  if (v255.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v468 = v467[1];
                      if (v468 == 4)
                      {
                        if (*((_DWORD *)v467 + 4) == 4)
                          goto LABEL_1110;
                      }
                      else if ((v468 & v260) != v320)
                      {
                        goto LABEL_1235;
                      }
                      v467 = (uint64_t *)*v467;
                      if (!v467)
                        goto LABEL_1235;
                    }
                  }
                  while (1)
                  {
                    v469 = v467[1];
                    if (v469 == 4)
                    {
                      if (*((_DWORD *)v467 + 4) == 4)
                      {
LABEL_1110:
                        if (*((char *)v467 + 47) < 0)
                        {
                          sub_23941A7F8(v515, (void *)v467[3], v467[4]);
                        }
                        else
                        {
                          *(_OWORD *)v515 = *(_OWORD *)(v467 + 3);
                          v516 = v467[5];
                        }
                        goto LABEL_627;
                      }
                    }
                    else
                    {
                      if (v469 >= qword_25693C6B8)
                        v469 %= (unint64_t)qword_25693C6B8;
                      if (v469 != v320)
                        goto LABEL_1235;
                    }
                    v467 = (uint64_t *)*v467;
                    if (!v467)
                      goto LABEL_1235;
                  }
                }
              }
              else
              {
                if (v262 >= qword_25693C6B8)
                  v262 %= (unint64_t)qword_25693C6B8;
                if (v262 != v256)
                  break;
              }
              v259 = (uint64_t *)*v259;
            }
            while (v259);
          }
        }
      }
LABEL_626:
      HIBYTE(v516) = 0;
      LOBYTE(v515[0]) = 0;
LABEL_627:
      std::operator+<char>();
      v263 = *((char *)a3 + 23);
      if (v263 >= 0)
        v264 = *((unsigned __int8 *)a3 + 23);
      else
        v264 = (size_t)a3[1];
      v265 = v264 + 1;
      if (v264 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v265 >= 0x17)
      {
        v267 = (v265 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v265 | 7) != 0x17)
          v267 = v265 | 7;
        v268 = v267 + 1;
        v266 = (char *)operator new(v267 + 1);
        v496.__r_.__value_.__l.__size_ = v264 + 1;
        v496.__r_.__value_.__r.__words[2] = v268 | 0x8000000000000000;
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)v266;
        v31 = a6;
      }
      else
      {
        memset(&v496, 0, sizeof(v496));
        v266 = (char *)&v496;
        *((_BYTE *)&v496.__r_.__value_.__s + 23) = v264 + 1;
        if (!v264)
          goto LABEL_641;
      }
      if (v263 >= 0)
        v269 = a3;
      else
        v269 = *a3;
      memmove(v266, v269, v264);
LABEL_641:
      *(_WORD *)&v266[v264] = 95;
      if (v516 >= 0)
        v270 = v515;
      else
        v270 = (void **)v515[0];
      if (v516 >= 0)
        v271 = HIBYTE(v516);
      else
        v271 = (std::string::size_type)v515[1];
      v272 = std::string::append(&v496, (const std::string::value_type *)v270, v271);
      v273 = *(_OWORD *)&v272->__r_.__value_.__l.__data_;
      v485.__r_.__value_.__r.__words[2] = v272->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v485.__r_.__value_.__l.__data_ = v273;
      v272->__r_.__value_.__l.__size_ = 0;
      v272->__r_.__value_.__r.__words[2] = 0;
      v272->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v509, v24);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v274 = &v509;
      else
        v274 = (std::string *)v509.__r_.__value_.__r.__words[0];
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v275 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
      else
        v275 = v509.__r_.__value_.__l.__size_;
      v276 = std::string::append(&v485, (const std::string::value_type *)v274, v275);
      v277 = *(_OWORD *)&v276->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v276->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v277;
      v276->__r_.__value_.__l.__size_ = 0;
      v276->__r_.__value_.__r.__words[2] = 0;
      v276->__r_.__value_.__r.__words[0] = 0;
      if ((v514 & 0x80u) == 0)
        v278 = (const std::string::value_type *)&v512;
      else
        v278 = (const std::string::value_type *)v512;
      if ((v514 & 0x80u) == 0)
        v279 = v514;
      else
        v279 = v513;
      v280 = std::string::append(&__dst, v278, v279);
      v281 = *(_OWORD *)&v280->__r_.__value_.__l.__data_;
      v511 = v280->__r_.__value_.__r.__words[2];
      *(_OWORD *)v510 = v281;
      v280->__r_.__value_.__l.__size_ = 0;
      v280->__r_.__value_.__r.__words[2] = 0;
      v280->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_661;
LABEL_666:
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_667;
LABEL_662:
        if ((SHIBYTE(v496.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_663;
LABEL_668:
        operator delete(v496.__r_.__value_.__l.__data_);
        v282 = (int8x8_t)qword_25693C690;
        if (qword_25693C690)
          goto LABEL_669;
LABEL_1230:
        sub_23941D898("unordered_map::at: key not found");
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_666;
LABEL_661:
      if ((SHIBYTE(v485.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_662;
LABEL_667:
      operator delete(v485.__r_.__value_.__l.__data_);
      if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_668;
LABEL_663:
      v282 = (int8x8_t)qword_25693C690;
      if (!qword_25693C690)
        goto LABEL_1230;
LABEL_669:
      v283 = (uint8x8_t)vcnt_s8(v282);
      v283.i16[0] = vaddlv_u8(v283);
      if (v283.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v282 <= 4uLL)
          v284 = 4u % v282.u8[0];
        else
          v284 = 4;
      }
      else
      {
        v284 = (v282.i8[0] - 1) & 4;
      }
      v285 = *(uint64_t ***)(qword_25693C688 + 8 * v284);
      if (!v285)
        goto LABEL_1230;
      v286 = *v285;
      if (!v286)
        goto LABEL_1230;
      if (v283.u32[0] < 2uLL)
      {
        v287 = *(_QWORD *)&v282 - 1;
        while (1)
        {
          v289 = v286[1];
          if (v289 == 4)
          {
            if (*((_DWORD *)v286 + 4) == 4)
              goto LABEL_689;
          }
          else if ((v289 & v287) != v284)
          {
            goto LABEL_1230;
          }
          v286 = (uint64_t *)*v286;
          if (!v286)
            goto LABEL_1230;
        }
      }
      while (2)
      {
        v288 = v286[1];
        if (v288 != 4)
        {
          if (v288 >= *(_QWORD *)&v282)
            v288 %= *(_QWORD *)&v282;
          if (v288 != v284)
            goto LABEL_1230;
LABEL_679:
          v286 = (uint64_t *)*v286;
          if (!v286)
            goto LABEL_1230;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v286 + 4) != 4)
        goto LABEL_679;
LABEL_689:
      v292 = v286[3];
      v291 = (uint64_t)(v286 + 3);
      v290 = v292;
      v293 = *(char *)(v291 + 23);
      if (v293 >= 0)
        v294 = v291;
      else
        v294 = v290;
      if (v293 >= 0)
        v295 = *(unsigned __int8 *)(v291 + 23);
      else
        v295 = *(_QWORD *)(v291 + 8);
      v296 = sub_239458500(__p, v294, v295);
      v297 = sub_239458500(v296, (uint64_t)" ", 1);
      if (v511 >= 0)
        v298 = v510;
      else
        v298 = (void **)v510[0];
      if (v511 >= 0)
        v299 = HIBYTE(v511);
      else
        v299 = (uint64_t)v510[1];
      v300 = sub_239458500(v297, (uint64_t)v298, v299);
      sub_239458500(v300, (uint64_t)"\n", 1);
      if (v484 != 28)
        goto LABEL_753;
      memset(&__dst, 0, sizeof(__dst));
      v301 = (char *)HIBYTE(v511);
      if (v511 >= 0)
        v302 = (std::string *)v510;
      else
        v302 = (std::string *)v510[0];
      if (v511 < 0)
        v301 = (char *)v510[1];
      sub_23948900C(&__dst, v302, (std::string *)&v301[(_QWORD)v302]);
      sub_239498A04((std::__fs::filesystem::path *)&__dst, a2, (std::__fs::filesystem::path *)&v509);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v303 = v254 + 504;
        v304 = (char)v514;
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_709;
LABEL_713:
        if (v513 != 4 || *(_DWORD *)v512 != 1920492846)
          goto LABEL_715;
LABEL_732:
        if (!*(_BYTE *)(v303 + 112))
          sub_2394875CC();
        sub_2396079A4((_QWORD *)(v303 + 24), (std::__fs::filesystem::path *)&v509, (uint64_t)&__dst);
        v317 = v508;
        if (v481 && v508)
        {
          v318 = *(_QWORD *)(v31 + 8);
          if (v318 >= *(_QWORD *)(v31 + 16))
          {
            v463 = sub_23958837C((char **)v31, (uint64_t)&v509);
          }
          else
          {
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
            }
            else
            {
              v319 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
              *(_QWORD *)(v318 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
              *(_OWORD *)v318 = v319;
            }
            v463 = (char *)(v318 + 24);
            *(_QWORD *)(v31 + 8) = v318 + 24;
          }
          *(_QWORD *)(v31 + 8) = v463;
          v317 = v508;
        }
        if (v317 || !v507)
          goto LABEL_752;
        if (v506)
        {
          if (v505 < 0)
          {
            operator delete(v504);
            if ((v503 & 0x80000000) == 0)
              goto LABEL_1183;
          }
          else if ((v503 & 0x80000000) == 0)
          {
            goto LABEL_1183;
          }
          operator delete(v502);
          if (!v501)
            goto LABEL_752;
        }
        else
        {
LABEL_1183:
          if (!v501)
            goto LABEL_752;
        }
        if (v500 < 0)
          operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_752;
      }
      v303 = v254 + 504;
      v304 = (char)v514;
      if ((char)v514 < 0)
        goto LABEL_713;
LABEL_709:
      if (v304 == 4 && (_DWORD)v512 == 1920492846)
        goto LABEL_732;
LABEL_715:
      if (!*(_BYTE *)(v303 + 112))
        sub_2394875CC();
      v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
      sub_23960ACFC((_QWORD *)(v303 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
      sub_2397078F8((uint64_t)&v496, 1, &__dst);
      v485.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB628;
      sub_239423E50((uint64_t)&__dst, (uint64_t)&v485.__r_.__value_.__l.__size_);
      v305 = nullsub_4(v499);
      v306 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (!__dst.__r_.__value_.__r.__words[2])
        goto LABEL_720;
      v307 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
      do
        v308 = __ldaxr(v307);
      while (__stlxr(v308 - 1, v307));
      if (!v308)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v306->__on_zero_shared)(v306, v305);
        std::__shared_weak_count::__release_weak(v306);
        j_nullsub_4_89(&__dst);
        v309 = nullsub_4(v497);
        v310 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
LABEL_721:
          v311 = (unint64_t *)&v310->__shared_owners_;
          do
            v312 = __ldaxr(v311);
          while (__stlxr(v312 - 1, v311));
          if (!v312)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v310->__on_zero_shared)(v310, v309);
            std::__shared_weak_count::__release_weak(v310);
          }
        }
      }
      else
      {
LABEL_720:
        j_nullsub_4_89(&__dst);
        v309 = nullsub_4(v497);
        v310 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
          goto LABEL_721;
      }
      nullsub_4(&v496);
      sub_239607D24(&v485, (std::__fs::filesystem::path *)&v509, (uint64_t)&__dst);
      v313 = v508;
      if (v481 && v508)
      {
        v314 = *(_QWORD *)(v31 + 8);
        if (v314 >= *(_QWORD *)(v31 + 16))
        {
          v316 = sub_23958837C((char **)v31, (uint64_t)&v509);
        }
        else
        {
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
          }
          else
          {
            v315 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
            *(_QWORD *)(v314 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
            *(_OWORD *)v314 = v315;
          }
          v316 = (char *)(v314 + 24);
          *(_QWORD *)(v31 + 8) = v314 + 24;
        }
        *(_QWORD *)(v31 + 8) = v316;
        v313 = v508;
      }
      if (v313 || !v507)
        goto LABEL_751;
      if (!v506)
        goto LABEL_748;
      if ((v505 & 0x80000000) == 0)
      {
        if ((v503 & 0x80000000) == 0)
          goto LABEL_748;
LABEL_899:
        operator delete(v502);
        if (!v501)
          goto LABEL_751;
LABEL_749:
        if (v500 < 0)
          operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_751;
      }
      operator delete(v504);
      if (v503 < 0)
        goto LABEL_899;
LABEL_748:
      if (v501)
        goto LABEL_749;
LABEL_751:
      sub_239416DA0((uint64_t)&v485.__r_.__value_.__l.__size_);
      nullsub_4(&v485);
LABEL_752:
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v511) < 0)
          goto LABEL_765;
LABEL_754:
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_755;
LABEL_766:
        operator delete(v512);
        if (SHIBYTE(v516) < 0)
          goto LABEL_767;
LABEL_756:
        v321 = v22 + 912 * v23;
        if (!*(_BYTE *)(v321 + 736))
          goto LABEL_917;
      }
      else
      {
LABEL_753:
        if ((SHIBYTE(v511) & 0x80000000) == 0)
          goto LABEL_754;
LABEL_765:
        operator delete(v510[0]);
        if ((char)v514 < 0)
          goto LABEL_766;
LABEL_755:
        if ((SHIBYTE(v516) & 0x80000000) == 0)
          goto LABEL_756;
LABEL_767:
        operator delete(v515[0]);
        v321 = v22 + 912 * v23;
        if (!*(_BYTE *)(v321 + 736))
          goto LABEL_917;
      }
      if (qword_25693C6B8)
      {
        v322 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C6B8);
        v322.i16[0] = vaddlv_u8(v322);
        if (v322.u32[0] > 1uLL)
        {
          if ((unint64_t)qword_25693C6B8 > 5)
          {
            v323 = 5;
            v324 = qword_25693C6B0;
            v325 = *(uint64_t ***)(qword_25693C6B0 + 40);
            if (!v325)
              goto LABEL_784;
            goto LABEL_770;
          }
          v323 = 5u % qword_25693C6B8;
          v324 = qword_25693C6B0;
          v325 = *(uint64_t ***)(qword_25693C6B0 + 8 * v323);
          if (v325)
            goto LABEL_770;
        }
        else
        {
          v323 = ((int)qword_25693C6B8 - 1) & 5;
          v324 = qword_25693C6B0;
          v325 = *(uint64_t ***)(qword_25693C6B0 + 8 * v323);
          if (!v325)
            goto LABEL_784;
LABEL_770:
          v326 = *v325;
          if (*v325)
          {
            v327 = qword_25693C6B8 - 1;
            if (v322.u32[0] < 2uLL)
            {
              while (1)
              {
                v328 = v326[1];
                if (v328 == 5)
                {
                  if (*((_DWORD *)v326 + 4) == 5)
                    goto LABEL_896;
                }
                else if ((v328 & v327) != v323)
                {
                  goto LABEL_784;
                }
                v326 = (uint64_t *)*v326;
                if (!v326)
                  goto LABEL_784;
              }
            }
            do
            {
              v329 = v326[1];
              if (v329 == 5)
              {
                if (*((_DWORD *)v326 + 4) == 5)
                {
LABEL_896:
                  if (v322.u32[0] > 1uLL)
                  {
                    if ((unint64_t)qword_25693C6B8 <= 5)
                      v387 = 5u % qword_25693C6B8;
                    else
                      v387 = 5;
                  }
                  else
                  {
                    v387 = ((int)qword_25693C6B8 - 1) & 5;
                  }
                  v470 = *(uint64_t ***)(v324 + 8 * v387);
                  if (!v470 || (v471 = *v470) == 0)
LABEL_1236:
                    sub_23941D898("unordered_map::at: key not found");
                  if (v322.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v472 = v471[1];
                      if (v472 == 5)
                      {
                        if (*((_DWORD *)v471 + 4) == 5)
                          goto LABEL_1129;
                      }
                      else if ((v472 & v327) != v387)
                      {
                        goto LABEL_1236;
                      }
                      v471 = (uint64_t *)*v471;
                      if (!v471)
                        goto LABEL_1236;
                    }
                  }
                  while (1)
                  {
                    v473 = v471[1];
                    if (v473 == 5)
                    {
                      if (*((_DWORD *)v471 + 4) == 5)
                      {
LABEL_1129:
                        if (*((char *)v471 + 47) < 0)
                        {
                          sub_23941A7F8(v515, (void *)v471[3], v471[4]);
                        }
                        else
                        {
                          *(_OWORD *)v515 = *(_OWORD *)(v471 + 3);
                          v516 = v471[5];
                        }
                        goto LABEL_785;
                      }
                    }
                    else
                    {
                      if (v473 >= qword_25693C6B8)
                        v473 %= (unint64_t)qword_25693C6B8;
                      if (v473 != v387)
                        goto LABEL_1236;
                    }
                    v471 = (uint64_t *)*v471;
                    if (!v471)
                      goto LABEL_1236;
                  }
                }
              }
              else
              {
                if (v329 >= qword_25693C6B8)
                  v329 %= (unint64_t)qword_25693C6B8;
                if (v329 != v323)
                  break;
              }
              v326 = (uint64_t *)*v326;
            }
            while (v326);
          }
        }
      }
LABEL_784:
      HIBYTE(v516) = 0;
      LOBYTE(v515[0]) = 0;
LABEL_785:
      std::operator+<char>();
      v330 = *((char *)a3 + 23);
      if (v330 >= 0)
        v331 = *((unsigned __int8 *)a3 + 23);
      else
        v331 = (size_t)a3[1];
      v332 = v331 + 1;
      if (v331 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v332 >= 0x17)
      {
        v334 = (v332 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v332 | 7) != 0x17)
          v334 = v332 | 7;
        v335 = v334 + 1;
        v333 = (char *)operator new(v334 + 1);
        v496.__r_.__value_.__l.__size_ = v331 + 1;
        v496.__r_.__value_.__r.__words[2] = v335 | 0x8000000000000000;
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)v333;
        v31 = a6;
      }
      else
      {
        memset(&v496, 0, sizeof(v496));
        v333 = (char *)&v496;
        *((_BYTE *)&v496.__r_.__value_.__s + 23) = v331 + 1;
        if (!v331)
          goto LABEL_799;
      }
      if (v330 >= 0)
        v336 = a3;
      else
        v336 = *a3;
      memmove(v333, v336, v331);
LABEL_799:
      *(_WORD *)&v333[v331] = 95;
      if (v516 >= 0)
        v337 = v515;
      else
        v337 = (void **)v515[0];
      if (v516 >= 0)
        v338 = HIBYTE(v516);
      else
        v338 = (std::string::size_type)v515[1];
      v339 = std::string::append(&v496, (const std::string::value_type *)v337, v338);
      v340 = *(_OWORD *)&v339->__r_.__value_.__l.__data_;
      v485.__r_.__value_.__r.__words[2] = v339->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v485.__r_.__value_.__l.__data_ = v340;
      v339->__r_.__value_.__l.__size_ = 0;
      v339->__r_.__value_.__r.__words[2] = 0;
      v339->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v509, v24);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v341 = &v509;
      else
        v341 = (std::string *)v509.__r_.__value_.__r.__words[0];
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v342 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
      else
        v342 = v509.__r_.__value_.__l.__size_;
      v343 = std::string::append(&v485, (const std::string::value_type *)v341, v342);
      v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v343->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v344;
      v343->__r_.__value_.__l.__size_ = 0;
      v343->__r_.__value_.__r.__words[2] = 0;
      v343->__r_.__value_.__r.__words[0] = 0;
      if ((v514 & 0x80u) == 0)
        v345 = (const std::string::value_type *)&v512;
      else
        v345 = (const std::string::value_type *)v512;
      if ((v514 & 0x80u) == 0)
        v346 = v514;
      else
        v346 = v513;
      v347 = std::string::append(&__dst, v345, v346);
      v348 = *(_OWORD *)&v347->__r_.__value_.__l.__data_;
      v511 = v347->__r_.__value_.__r.__words[2];
      *(_OWORD *)v510 = v348;
      v347->__r_.__value_.__l.__size_ = 0;
      v347->__r_.__value_.__r.__words[2] = 0;
      v347->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_819;
LABEL_824:
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_825;
LABEL_820:
        if ((SHIBYTE(v496.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_821;
LABEL_826:
        operator delete(v496.__r_.__value_.__l.__data_);
        v349 = (int8x8_t)qword_25693C690;
        if (qword_25693C690)
          goto LABEL_827;
LABEL_1231:
        sub_23941D898("unordered_map::at: key not found");
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_824;
LABEL_819:
      if ((SHIBYTE(v485.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_820;
LABEL_825:
      operator delete(v485.__r_.__value_.__l.__data_);
      if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_826;
LABEL_821:
      v349 = (int8x8_t)qword_25693C690;
      if (!qword_25693C690)
        goto LABEL_1231;
LABEL_827:
      v350 = (uint8x8_t)vcnt_s8(v349);
      v350.i16[0] = vaddlv_u8(v350);
      if (v350.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v349 <= 5uLL)
          v351 = 5u % v349.u8[0];
        else
          v351 = 5;
      }
      else
      {
        v351 = (v349.i32[0] - 1) & 5;
      }
      v352 = *(uint64_t ***)(qword_25693C688 + 8 * v351);
      if (!v352)
        goto LABEL_1231;
      v353 = *v352;
      if (!v353)
        goto LABEL_1231;
      if (v350.u32[0] < 2uLL)
      {
        v354 = *(_QWORD *)&v349 - 1;
        while (1)
        {
          v356 = v353[1];
          if (v356 == 5)
          {
            if (*((_DWORD *)v353 + 4) == 5)
              goto LABEL_847;
          }
          else if ((v356 & v354) != v351)
          {
            goto LABEL_1231;
          }
          v353 = (uint64_t *)*v353;
          if (!v353)
            goto LABEL_1231;
        }
      }
      while (2)
      {
        v355 = v353[1];
        if (v355 != 5)
        {
          if (v355 >= *(_QWORD *)&v349)
            v355 %= *(_QWORD *)&v349;
          if (v355 != v351)
            goto LABEL_1231;
LABEL_837:
          v353 = (uint64_t *)*v353;
          if (!v353)
            goto LABEL_1231;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v353 + 4) != 5)
        goto LABEL_837;
LABEL_847:
      v359 = v353[3];
      v358 = (uint64_t)(v353 + 3);
      v357 = v359;
      v360 = *(char *)(v358 + 23);
      if (v360 >= 0)
        v361 = v358;
      else
        v361 = v357;
      if (v360 >= 0)
        v362 = *(unsigned __int8 *)(v358 + 23);
      else
        v362 = *(_QWORD *)(v358 + 8);
      v363 = sub_239458500(__p, v361, v362);
      v364 = sub_239458500(v363, (uint64_t)" ", 1);
      if (v511 >= 0)
        v365 = v510;
      else
        v365 = (void **)v510[0];
      if (v511 >= 0)
        v366 = HIBYTE(v511);
      else
        v366 = (uint64_t)v510[1];
      v367 = sub_239458500(v364, (uint64_t)v365, v366);
      sub_239458500(v367, (uint64_t)"\n", 1);
      if (v484 != 28)
        goto LABEL_914;
      memset(&__dst, 0, sizeof(__dst));
      v368 = (char *)HIBYTE(v511);
      if (v511 >= 0)
        v369 = (std::string *)v510;
      else
        v369 = (std::string *)v510[0];
      if (v511 < 0)
        v368 = (char *)v510[1];
      sub_23948900C(&__dst, v369, (std::string *)&v368[(_QWORD)v369]);
      sub_239498A04((std::__fs::filesystem::path *)&__dst, a2, (std::__fs::filesystem::path *)&v509);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v370 = v321 + 624;
        v371 = (char)v514;
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_867;
LABEL_871:
        if (v513 != 4 || *(_DWORD *)v512 != 1920492846)
          goto LABEL_873;
LABEL_890:
        if (!*(_BYTE *)(v370 + 112))
          sub_2394875CC();
        sub_2396079A4((_QWORD *)(v370 + 24), (std::__fs::filesystem::path *)&v509, (uint64_t)&__dst);
        v384 = v508;
        if (v481 && v508)
        {
          v385 = *(_QWORD *)(v31 + 8);
          if (v385 >= *(_QWORD *)(v31 + 16))
          {
            v464 = sub_23958837C((char **)v31, (uint64_t)&v509);
          }
          else
          {
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
            }
            else
            {
              v386 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
              *(_QWORD *)(v385 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
              *(_OWORD *)v385 = v386;
            }
            v464 = (char *)(v385 + 24);
            *(_QWORD *)(v31 + 8) = v385 + 24;
          }
          *(_QWORD *)(v31 + 8) = v464;
          v384 = v508;
        }
        if (v384 || !v507)
          goto LABEL_913;
        if (v506)
        {
          if (v505 < 0)
          {
            operator delete(v504);
            if ((v503 & 0x80000000) == 0)
              goto LABEL_1197;
          }
          else if ((v503 & 0x80000000) == 0)
          {
            goto LABEL_1197;
          }
          operator delete(v502);
          if (!v501)
            goto LABEL_913;
        }
        else
        {
LABEL_1197:
          if (!v501)
            goto LABEL_913;
        }
        if (v500 < 0)
          operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_913;
      }
      v370 = v321 + 624;
      v371 = (char)v514;
      if ((char)v514 < 0)
        goto LABEL_871;
LABEL_867:
      if (v371 == 4 && (_DWORD)v512 == 1920492846)
        goto LABEL_890;
LABEL_873:
      if (!*(_BYTE *)(v370 + 112))
        sub_2394875CC();
      v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
      sub_23960ACFC((_QWORD *)(v370 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
      sub_2397078F8((uint64_t)&v496, 1, &__dst);
      v485.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB628;
      sub_239423E50((uint64_t)&__dst, (uint64_t)&v485.__r_.__value_.__l.__size_);
      v372 = nullsub_4(v499);
      v373 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (!__dst.__r_.__value_.__r.__words[2])
        goto LABEL_878;
      v374 = (unint64_t *)(__dst.__r_.__value_.__r.__words[2] + 8);
      do
        v375 = __ldaxr(v374);
      while (__stlxr(v375 - 1, v374));
      if (!v375)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v373->__on_zero_shared)(v373, v372);
        std::__shared_weak_count::__release_weak(v373);
        j_nullsub_4_89(&__dst);
        v376 = nullsub_4(v497);
        v377 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
LABEL_879:
          v378 = (unint64_t *)&v377->__shared_owners_;
          do
            v379 = __ldaxr(v378);
          while (__stlxr(v379 - 1, v378));
          if (!v379)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v377->__on_zero_shared)(v377, v376);
            std::__shared_weak_count::__release_weak(v377);
          }
        }
      }
      else
      {
LABEL_878:
        j_nullsub_4_89(&__dst);
        v376 = nullsub_4(v497);
        v377 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
          goto LABEL_879;
      }
      nullsub_4(&v496);
      sub_239607D24(&v485, (std::__fs::filesystem::path *)&v509, (uint64_t)&__dst);
      v380 = v508;
      if (v481 && v508)
      {
        v381 = *(_QWORD *)(v31 + 8);
        if (v381 >= *(_QWORD *)(v31 + 16))
        {
          v383 = sub_23958837C((char **)v31, (uint64_t)&v509);
        }
        else
        {
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
          }
          else
          {
            v382 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
            *(_QWORD *)(v381 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
            *(_OWORD *)v381 = v382;
          }
          v383 = (char *)(v381 + 24);
          *(_QWORD *)(v31 + 8) = v381 + 24;
        }
        *(_QWORD *)(v31 + 8) = v383;
        v380 = v508;
      }
      if (v380 || !v507)
        goto LABEL_912;
      if (!v506)
        goto LABEL_909;
      if ((v505 & 0x80000000) == 0)
      {
        if ((v503 & 0x80000000) == 0)
          goto LABEL_909;
LABEL_1070:
        operator delete(v502);
        if (!v501)
          goto LABEL_912;
LABEL_910:
        if (v500 < 0)
          operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
        goto LABEL_912;
      }
      operator delete(v504);
      if (v503 < 0)
        goto LABEL_1070;
LABEL_909:
      if (v501)
        goto LABEL_910;
LABEL_912:
      sub_239416DA0((uint64_t)&v485.__r_.__value_.__l.__size_);
      nullsub_4(&v485);
LABEL_913:
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v511) < 0)
          goto LABEL_926;
LABEL_915:
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_916;
LABEL_927:
        operator delete(v512);
        if (SHIBYTE(v516) < 0)
          goto LABEL_928;
LABEL_917:
        v388 = v22 + 912 * v23;
        if (!*(_BYTE *)(v388 + 904))
          goto LABEL_1087;
      }
      else
      {
LABEL_914:
        if ((SHIBYTE(v511) & 0x80000000) == 0)
          goto LABEL_915;
LABEL_926:
        operator delete(v510[0]);
        if ((char)v514 < 0)
          goto LABEL_927;
LABEL_916:
        if ((SHIBYTE(v516) & 0x80000000) == 0)
          goto LABEL_917;
LABEL_928:
        operator delete(v515[0]);
        v388 = v22 + 912 * v23;
        if (!*(_BYTE *)(v388 + 904))
          goto LABEL_1087;
      }
      if (qword_25693C6B8)
      {
        v389 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C6B8);
        v389.i16[0] = vaddlv_u8(v389);
        if (v389.u32[0] > 1uLL)
        {
          if ((unint64_t)qword_25693C6B8 > 6)
          {
            v390 = 6;
            v391 = qword_25693C6B0;
            v392 = *(uint64_t ***)(qword_25693C6B0 + 48);
            if (!v392)
              goto LABEL_945;
            goto LABEL_931;
          }
          v390 = 6u % qword_25693C6B8;
          v391 = qword_25693C6B0;
          v392 = *(uint64_t ***)(qword_25693C6B0 + 8 * v390);
          if (v392)
            goto LABEL_931;
        }
        else
        {
          v390 = ((_BYTE)qword_25693C6B8 - 1) & 6;
          v391 = qword_25693C6B0;
          v392 = *(uint64_t ***)(qword_25693C6B0 + 8 * v390);
          if (!v392)
            goto LABEL_945;
LABEL_931:
          v393 = *v392;
          if (*v392)
          {
            v394 = qword_25693C6B8 - 1;
            if (v389.u32[0] < 2uLL)
            {
              while (1)
              {
                v395 = v393[1];
                if (v395 == 6)
                {
                  if (*((_DWORD *)v393 + 4) == 6)
                    goto LABEL_1067;
                }
                else if ((v395 & v394) != v390)
                {
                  goto LABEL_945;
                }
                v393 = (uint64_t *)*v393;
                if (!v393)
                  goto LABEL_945;
              }
            }
            do
            {
              v396 = v393[1];
              if (v396 == 6)
              {
                if (*((_DWORD *)v393 + 4) == 6)
                {
LABEL_1067:
                  if (v389.u32[0] > 1uLL)
                  {
                    if ((unint64_t)qword_25693C6B8 <= 6)
                      v462 = 6u % qword_25693C6B8;
                    else
                      v462 = 6;
                  }
                  else
                  {
                    v462 = ((_BYTE)qword_25693C6B8 - 1) & 6;
                  }
                  v474 = *(uint64_t ***)(v391 + 8 * v462);
                  if (!v474 || (v475 = *v474) == 0)
LABEL_1237:
                    sub_23941D898("unordered_map::at: key not found");
                  if (v389.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v476 = v475[1];
                      if (v476 == 6)
                      {
                        if (*((_DWORD *)v475 + 4) == 6)
                          goto LABEL_1148;
                      }
                      else if ((v476 & v394) != v462)
                      {
                        goto LABEL_1237;
                      }
                      v475 = (uint64_t *)*v475;
                      if (!v475)
                        goto LABEL_1237;
                    }
                  }
                  while (1)
                  {
                    v477 = v475[1];
                    if (v477 == 6)
                    {
                      if (*((_DWORD *)v475 + 4) == 6)
                      {
LABEL_1148:
                        if (*((char *)v475 + 47) < 0)
                        {
                          sub_23941A7F8(v515, (void *)v475[3], v475[4]);
                        }
                        else
                        {
                          *(_OWORD *)v515 = *(_OWORD *)(v475 + 3);
                          v516 = v475[5];
                        }
                        goto LABEL_946;
                      }
                    }
                    else
                    {
                      if (v477 >= qword_25693C6B8)
                        v477 %= (unint64_t)qword_25693C6B8;
                      if (v477 != v462)
                        goto LABEL_1237;
                    }
                    v475 = (uint64_t *)*v475;
                    if (!v475)
                      goto LABEL_1237;
                  }
                }
              }
              else
              {
                if (v396 >= qword_25693C6B8)
                  v396 %= (unint64_t)qword_25693C6B8;
                if (v396 != v390)
                  break;
              }
              v393 = (uint64_t *)*v393;
            }
            while (v393);
          }
        }
      }
LABEL_945:
      HIBYTE(v516) = 0;
      LOBYTE(v515[0]) = 0;
LABEL_946:
      std::operator+<char>();
      v397 = *((char *)a3 + 23);
      if (v397 >= 0)
        v398 = *((unsigned __int8 *)a3 + 23);
      else
        v398 = (size_t)a3[1];
      v399 = v398 + 1;
      if (v398 + 1 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      if (v399 >= 0x17)
      {
        v401 = (v399 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v399 | 7) != 0x17)
          v401 = v399 | 7;
        v402 = v401 + 1;
        v400 = (char *)operator new(v401 + 1);
        v496.__r_.__value_.__l.__size_ = v398 + 1;
        v496.__r_.__value_.__r.__words[2] = v402 | 0x8000000000000000;
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
        v31 = a6;
      }
      else
      {
        memset(&v496, 0, sizeof(v496));
        v400 = (char *)&v496;
        *((_BYTE *)&v496.__r_.__value_.__s + 23) = v398 + 1;
        if (!v398)
          goto LABEL_960;
      }
      if (v397 >= 0)
        v403 = a3;
      else
        v403 = *a3;
      memmove(v400, v403, v398);
LABEL_960:
      *(_WORD *)&v400[v398] = 95;
      if (v516 >= 0)
        v404 = v515;
      else
        v404 = (void **)v515[0];
      if (v516 >= 0)
        v405 = HIBYTE(v516);
      else
        v405 = (std::string::size_type)v515[1];
      v406 = std::string::append(&v496, (const std::string::value_type *)v404, v405);
      v407 = *(_OWORD *)&v406->__r_.__value_.__l.__data_;
      v485.__r_.__value_.__r.__words[2] = v406->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v485.__r_.__value_.__l.__data_ = v407;
      v406->__r_.__value_.__l.__size_ = 0;
      v406->__r_.__value_.__r.__words[2] = 0;
      v406->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v509, v24);
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v408 = &v509;
      else
        v408 = (std::string *)v509.__r_.__value_.__r.__words[0];
      if ((v509.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v409 = HIBYTE(v509.__r_.__value_.__r.__words[2]);
      else
        v409 = v509.__r_.__value_.__l.__size_;
      v410 = std::string::append(&v485, (const std::string::value_type *)v408, v409);
      v411 = *(_OWORD *)&v410->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v410->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v411;
      v410->__r_.__value_.__l.__size_ = 0;
      v410->__r_.__value_.__r.__words[2] = 0;
      v410->__r_.__value_.__r.__words[0] = 0;
      if ((v514 & 0x80u) == 0)
        v412 = (const std::string::value_type *)&v512;
      else
        v412 = (const std::string::value_type *)v512;
      if ((v514 & 0x80u) == 0)
        v413 = v514;
      else
        v413 = v513;
      v414 = std::string::append(&__dst, v412, v413);
      v415 = *(_OWORD *)&v414->__r_.__value_.__l.__data_;
      v511 = v414->__r_.__value_.__r.__words[2];
      *(_OWORD *)v510 = v415;
      v414->__r_.__value_.__l.__size_ = 0;
      v414->__r_.__value_.__r.__words[2] = 0;
      v414->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_980;
LABEL_985:
        operator delete(v509.__r_.__value_.__l.__data_);
        if (SHIBYTE(v485.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_986;
LABEL_981:
        if ((SHIBYTE(v496.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_982;
LABEL_987:
        operator delete(v496.__r_.__value_.__l.__data_);
        v416 = (int8x8_t)qword_25693C690;
        if (qword_25693C690)
          goto LABEL_988;
LABEL_1232:
        sub_23941D898("unordered_map::at: key not found");
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_985;
LABEL_980:
      if ((SHIBYTE(v485.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_981;
LABEL_986:
      operator delete(v485.__r_.__value_.__l.__data_);
      if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_987;
LABEL_982:
      v416 = (int8x8_t)qword_25693C690;
      if (!qword_25693C690)
        goto LABEL_1232;
LABEL_988:
      v417 = (uint8x8_t)vcnt_s8(v416);
      v417.i16[0] = vaddlv_u8(v417);
      if (v417.u32[0] > 1uLL)
      {
        if (*(_QWORD *)&v416 <= 6uLL)
          v418 = 6u % v416.u8[0];
        else
          v418 = 6;
      }
      else
      {
        v418 = (v416.i8[0] - 1) & 6;
      }
      v419 = *(uint64_t ***)(qword_25693C688 + 8 * v418);
      if (!v419)
        goto LABEL_1232;
      v420 = *v419;
      if (!v420)
        goto LABEL_1232;
      if (v417.u32[0] < 2uLL)
      {
        v421 = *(_QWORD *)&v416 - 1;
        while (1)
        {
          v423 = v420[1];
          if (v423 == 6)
          {
            if (*((_DWORD *)v420 + 4) == 6)
              goto LABEL_1008;
          }
          else if ((v423 & v421) != v418)
          {
            goto LABEL_1232;
          }
          v420 = (uint64_t *)*v420;
          if (!v420)
            goto LABEL_1232;
        }
      }
      while (2)
      {
        v422 = v420[1];
        if (v422 != 6)
        {
          if (v422 >= *(_QWORD *)&v416)
            v422 %= *(_QWORD *)&v416;
          if (v422 != v418)
            goto LABEL_1232;
LABEL_998:
          v420 = (uint64_t *)*v420;
          if (!v420)
            goto LABEL_1232;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v420 + 4) != 6)
        goto LABEL_998;
LABEL_1008:
      v426 = v420[3];
      v425 = (uint64_t)(v420 + 3);
      v424 = v426;
      v427 = *(char *)(v425 + 23);
      if (v427 >= 0)
        v428 = v425;
      else
        v428 = v424;
      if (v427 >= 0)
        v429 = *(unsigned __int8 *)(v425 + 23);
      else
        v429 = *(_QWORD *)(v425 + 8);
      v430 = sub_239458500(__p, v428, v429);
      v431 = sub_239458500(v430, (uint64_t)" ", 1);
      if (v511 >= 0)
        v432 = v510;
      else
        v432 = (void **)v510[0];
      if (v511 >= 0)
        v433 = HIBYTE(v511);
      else
        v433 = (uint64_t)v510[1];
      v434 = sub_239458500(v431, (uint64_t)v432, v433);
      sub_239458500(v434, (uint64_t)"\n", 1);
      if (v484 != 28)
        goto LABEL_1084;
      memset(&__dst, 0, sizeof(__dst));
      v435 = (char *)HIBYTE(v511);
      if (v511 >= 0)
        v436 = (std::string *)v510;
      else
        v436 = (std::string *)v510[0];
      if (v511 < 0)
        v435 = (char *)v510[1];
      sub_23948900C(&__dst, v436, (std::string *)&v435[(_QWORD)v436]);
      sub_239498A04((std::__fs::filesystem::path *)&__dst, a2, (std::__fs::filesystem::path *)&v509);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v437 = v388 + 744;
        v438 = (char)v514;
        if (((char)v514 & 0x80000000) == 0)
          goto LABEL_1028;
LABEL_1032:
        if (v513 != 4 || *(_DWORD *)v512 != 1920492846)
          goto LABEL_1034;
LABEL_1051:
        if (!*(_BYTE *)(v437 + 160))
          sub_2394875CC();
        v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
        sub_23960AB44((_QWORD *)(v437 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
        sub_2397078F8((uint64_t)&v496, 32, &v485);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250AE08B8;
        sub_23960A1CC((uint64_t)&v485, (uint64_t)&__dst.__r_.__value_.__l.__size_);
        v451 = nullsub_4(v486);
        v452 = (std::__shared_weak_count *)v485.__r_.__value_.__r.__words[2];
        if (v485.__r_.__value_.__r.__words[2])
        {
          v453 = (unint64_t *)(v485.__r_.__value_.__r.__words[2] + 8);
          do
            v454 = __ldaxr(v453);
          while (__stlxr(v454 - 1, v453));
          if (!v454)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v452->__on_zero_shared)(v452, v451);
            std::__shared_weak_count::__release_weak(v452);
          }
        }
        j_nullsub_4_89(&v485);
        v455 = nullsub_4(v497);
        v456 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
          v457 = (unint64_t *)(v496.__r_.__value_.__r.__words[2] + 8);
          do
            v458 = __ldaxr(v457);
          while (__stlxr(v458 - 1, v457));
          if (!v458)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v456->__on_zero_shared)(v456, v455);
            std::__shared_weak_count::__release_weak(v456);
          }
        }
        nullsub_4(&v496);
        sub_239606EFC(&__dst, (std::__fs::filesystem::path *)&v509, (uint64_t)&v485);
        v459 = v495;
        if (v481 && v495)
        {
          v460 = *(_QWORD *)(v31 + 8);
          if (v460 >= *(_QWORD *)(v31 + 16))
          {
            v465 = sub_23958837C((char **)v31, (uint64_t)&v509);
          }
          else
          {
            if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
            }
            else
            {
              v461 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
              *(_QWORD *)(v460 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
              *(_OWORD *)v460 = v461;
            }
            v465 = (char *)(v460 + 24);
            *(_QWORD *)(v31 + 8) = v460 + 24;
          }
          *(_QWORD *)(v31 + 8) = v465;
          v459 = v495;
        }
        if (v459 || !v494)
          goto LABEL_1214;
        if (!v493)
          goto LABEL_1211;
        if (v492 < 0)
        {
          operator delete(v491);
          if (v490 < 0)
            goto LABEL_1220;
LABEL_1211:
          if (!v488)
          {
LABEL_1214:
            sub_239416DA0((uint64_t)&__dst.__r_.__value_.__l.__size_);
            nullsub_4(&__dst);
            if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_1084;
            goto LABEL_1215;
          }
        }
        else
        {
          if ((v490 & 0x80000000) == 0)
            goto LABEL_1211;
LABEL_1220:
          operator delete(v489);
          if (!v488)
            goto LABEL_1214;
        }
        if (v487 < 0)
          operator delete((void *)v485.__r_.__value_.__r.__words[2]);
        goto LABEL_1214;
      }
      v437 = v388 + 744;
      v438 = (char)v514;
      if ((char)v514 < 0)
        goto LABEL_1032;
LABEL_1028:
      if (v438 == 4 && (_DWORD)v512 == 1920492846)
        goto LABEL_1051;
LABEL_1034:
      if (!*(_BYTE *)(v437 + 160))
        sub_2394875CC();
      v496.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADB210;
      sub_23960AB44((_QWORD *)(v437 + 24), (uint64_t)&v496.__r_.__value_.__l.__size_);
      sub_2397078F8((uint64_t)&v496, 21, &v485);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_250ADBEA0;
      sub_239469644((uint64_t)&v485, (uint64_t)&__dst.__r_.__value_.__l.__size_);
      v439 = nullsub_4(v486);
      v440 = (std::__shared_weak_count *)v485.__r_.__value_.__r.__words[2];
      if (!v485.__r_.__value_.__r.__words[2])
        goto LABEL_1039;
      v441 = (unint64_t *)(v485.__r_.__value_.__r.__words[2] + 8);
      do
        v442 = __ldaxr(v441);
      while (__stlxr(v442 - 1, v441));
      if (!v442)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v440->__on_zero_shared)(v440, v439);
        std::__shared_weak_count::__release_weak(v440);
        j_nullsub_4_89(&v485);
        v443 = nullsub_4(v497);
        v444 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
        {
LABEL_1040:
          v445 = (unint64_t *)&v444->__shared_owners_;
          do
            v446 = __ldaxr(v445);
          while (__stlxr(v446 - 1, v445));
          if (!v446)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v444->__on_zero_shared)(v444, v443);
            std::__shared_weak_count::__release_weak(v444);
          }
        }
      }
      else
      {
LABEL_1039:
        j_nullsub_4_89(&v485);
        v443 = nullsub_4(v497);
        v444 = (std::__shared_weak_count *)v496.__r_.__value_.__r.__words[2];
        if (v496.__r_.__value_.__r.__words[2])
          goto LABEL_1040;
      }
      nullsub_4(&v496);
      sub_239607624(&__dst, (std::__fs::filesystem::path *)&v509, (uint64_t)&v485);
      v447 = v495;
      if (v481 && v495)
      {
        v448 = *(_QWORD *)(v31 + 8);
        if (v448 >= *(_QWORD *)(v31 + 16))
        {
          v450 = sub_23958837C((char **)v31, (uint64_t)&v509);
        }
        else
        {
          if (SHIBYTE(v509.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_23941A7F8(*(_BYTE **)(v31 + 8), v509.__r_.__value_.__l.__data_, v509.__r_.__value_.__l.__size_);
          }
          else
          {
            v449 = *(_OWORD *)&v509.__r_.__value_.__l.__data_;
            *(_QWORD *)(v448 + 16) = *((_QWORD *)&v509.__r_.__value_.__l + 2);
            *(_OWORD *)v448 = v449;
          }
          v450 = (char *)(v448 + 24);
          *(_QWORD *)(v31 + 8) = v448 + 24;
        }
        *(_QWORD *)(v31 + 8) = v450;
        v447 = v495;
      }
      if (v447 || !v494)
        goto LABEL_1083;
      if (!v493)
        goto LABEL_1080;
      if ((v492 & 0x80000000) == 0)
      {
        if ((v490 & 0x80000000) == 0)
          goto LABEL_1080;
LABEL_1090:
        operator delete(v489);
        if (!v488)
          goto LABEL_1083;
LABEL_1081:
        if (v487 < 0)
          operator delete((void *)v485.__r_.__value_.__r.__words[2]);
        goto LABEL_1083;
      }
      operator delete(v491);
      if (v490 < 0)
        goto LABEL_1090;
LABEL_1080:
      if (v488)
        goto LABEL_1081;
LABEL_1083:
      sub_239416DA0((uint64_t)&__dst.__r_.__value_.__l.__size_);
      nullsub_4(&__dst);
      if ((SHIBYTE(v509.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_1084:
        if ((SHIBYTE(v511) & 0x80000000) == 0)
          goto LABEL_1085;
LABEL_1216:
        operator delete(v510[0]);
        if ((char)v514 < 0)
          goto LABEL_1217;
LABEL_1086:
        if ((SHIBYTE(v516) & 0x80000000) == 0)
          goto LABEL_1087;
LABEL_1218:
        operator delete(v515[0]);
        goto LABEL_1087;
      }
LABEL_1215:
      operator delete(v509.__r_.__value_.__l.__data_);
      if (SHIBYTE(v511) < 0)
        goto LABEL_1216;
LABEL_1085:
      if (((char)v514 & 0x80000000) == 0)
        goto LABEL_1086;
LABEL_1217:
      operator delete(v512);
      if (SHIBYTE(v516) < 0)
        goto LABEL_1218;
LABEL_1087:
      sub_239458500(__p, (uint64_t)"#  \n", 4);
      std::ostream::flush();
      v22 = *a1;
      v23 = ++v24;
      if (0x823EE08FB823EE09 * ((a1[1] - *a1) >> 4) <= v24)
      {
LABEL_1222:
        v17 = v479;
        if (!std::filebuf::close())
          std::ios_base::clear((std::ios_base *)((char *)__p + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__pn_.__r_.__value_.__r.__words[1]+ *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) | 4);
        break;
      }
    }
  }
  __p[0].__pn_.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7E8];
  *(std::string::size_type *)((char *)__p[0].__pn_.__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x23B83DC8C](&__p[0].__pn_.__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v520);
  if (SHIBYTE(__src.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__pn_.__r_.__value_.__l.__data_);
  return v17 != 0;
}

void sub_23960692C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  void *a73;
  uint64_t v73;
  uint64_t v74;

  *(_QWORD *)(v73 + 8) = v74;
  sub_239522F50((uint64_t)&a27);
  sub_239416DA0(a19);
  nullsub_4(&a51);
  if (a72 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  sub_23955C978(&STACK[0x250]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  _Unwind_Resume(a1);
}

void sub_239606EFC(_QWORD *a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *exception;
  std::string v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  void *v24;
  _BYTE v25[16];
  char v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;

  *(_QWORD *)&v23 = &off_250ADB210;
  sub_23960A9E4(a1, (uint64_t)&v23 + 8);
  sub_2397284EC(a2, &v23, (uint64_t)&v34);
  v5 = nullsub_4(v25);
  v6 = (std::__shared_weak_count *)v24;
  if (!v24)
    goto LABEL_5;
  v7 = (unint64_t *)((char *)v24 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
    std::__shared_weak_count::__release_weak(v6);
    nullsub_4(&v23);
    if (v44)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v23);
    if (v44)
    {
LABEL_6:
      *(_BYTE *)(a3 + 120) = 1;
      return;
    }
  }
  sub_239727894((uint64_t)a2, (uint64_t)"save", 4, &v12);
  if (v44)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v12, &v34, (uint64_t)&v13);
  v23 = v13;
  v9 = sub_23952329C(&v24, &v14);
  *(_OWORD *)a3 = v23;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v33)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v26)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v9;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v32)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v26)
      goto LABEL_25;
    goto LABEL_23;
  }
  v10 = v29;
  *(_QWORD *)(a3 + 64) = v28;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  *(_QWORD *)(a3 + 72) = v10;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 96) = v31;
  __p[1] = 0;
  v31 = 0;
  v28 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v26)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v27[0]);
  if (!v26)
    goto LABEL_25;
LABEL_23:
  if ((v25[15] & 0x80000000) != 0)
    operator delete(v24);
LABEL_25:
  if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete((void *)v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (v44)
      return;
  }
  else if (v44)
  {
    return;
  }
  if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_23960720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 160);
  _Unwind_Resume(a1);
}

void sub_239607254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239607268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

double sub_23960727C(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

void sub_2396072A4(_QWORD *a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *exception;
  std::string v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  void *v24;
  _BYTE v25[16];
  char v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;

  *(_QWORD *)&v23 = &off_250ADB210;
  sub_239423B80(a1, (uint64_t)&v23 + 8);
  sub_2397284EC(a2, &v23, (uint64_t)&v34);
  v5 = nullsub_4(v25);
  v6 = (std::__shared_weak_count *)v24;
  if (!v24)
    goto LABEL_5;
  v7 = (unint64_t *)((char *)v24 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
    std::__shared_weak_count::__release_weak(v6);
    nullsub_4(&v23);
    if (v44)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v23);
    if (v44)
    {
LABEL_6:
      *(_BYTE *)(a3 + 120) = 1;
      return;
    }
  }
  sub_239727894((uint64_t)a2, (uint64_t)"save", 4, &v12);
  if (v44)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v12, &v34, (uint64_t)&v13);
  v23 = v13;
  v9 = sub_23952329C(&v24, &v14);
  *(_OWORD *)a3 = v23;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v33)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v26)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v9;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v32)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v26)
      goto LABEL_25;
    goto LABEL_23;
  }
  v10 = v29;
  *(_QWORD *)(a3 + 64) = v28;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  *(_QWORD *)(a3 + 72) = v10;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 96) = v31;
  __p[1] = 0;
  v31 = 0;
  v28 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v26)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v27[0]);
  if (!v26)
    goto LABEL_25;
LABEL_23:
  if ((v25[15] & 0x80000000) != 0)
    operator delete(v24);
LABEL_25:
  if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete((void *)v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (v44)
      return;
  }
  else if (v44)
  {
    return;
  }
  if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_2396075B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 160);
  _Unwind_Resume(a1);
}

void sub_2396075FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239607610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

void sub_239607624(_QWORD *a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *exception;
  std::string v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  void *v24;
  _BYTE v25[16];
  char v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;

  *(_QWORD *)&v23 = &off_250ADB210;
  sub_23955C5A4(a1, (uint64_t)&v23 + 8);
  sub_2397284EC(a2, &v23, (uint64_t)&v34);
  v5 = nullsub_4(v25);
  v6 = (std::__shared_weak_count *)v24;
  if (!v24)
    goto LABEL_5;
  v7 = (unint64_t *)((char *)v24 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
    std::__shared_weak_count::__release_weak(v6);
    nullsub_4(&v23);
    if (v44)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v23);
    if (v44)
    {
LABEL_6:
      *(_BYTE *)(a3 + 120) = 1;
      return;
    }
  }
  sub_239727894((uint64_t)a2, (uint64_t)"save", 4, &v12);
  if (v44)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v12, &v34, (uint64_t)&v13);
  v23 = v13;
  v9 = sub_23952329C(&v24, &v14);
  *(_OWORD *)a3 = v23;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v33)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v26)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v9;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v32)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v26)
      goto LABEL_25;
    goto LABEL_23;
  }
  v10 = v29;
  *(_QWORD *)(a3 + 64) = v28;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  *(_QWORD *)(a3 + 72) = v10;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 96) = v31;
  __p[1] = 0;
  v31 = 0;
  v28 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v26)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v27[0]);
  if (!v26)
    goto LABEL_25;
LABEL_23:
  if ((v25[15] & 0x80000000) != 0)
    operator delete(v24);
LABEL_25:
  if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete((void *)v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (v44)
      return;
  }
  else if (v44)
  {
    return;
  }
  if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_239607934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 160);
  _Unwind_Resume(a1);
}

void sub_23960797C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239607990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

void sub_2396079A4(_QWORD *a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *exception;
  std::string v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  void *v24;
  _BYTE v25[16];
  char v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;

  *(_QWORD *)&v23 = &off_250ADB210;
  sub_23960ACFC(a1, (uint64_t)&v23 + 8);
  sub_2397284EC(a2, &v23, (uint64_t)&v34);
  v5 = nullsub_4(v25);
  v6 = (std::__shared_weak_count *)v24;
  if (!v24)
    goto LABEL_5;
  v7 = (unint64_t *)((char *)v24 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
    std::__shared_weak_count::__release_weak(v6);
    nullsub_4(&v23);
    if (v44)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v23);
    if (v44)
    {
LABEL_6:
      *(_BYTE *)(a3 + 120) = 1;
      return;
    }
  }
  sub_239727894((uint64_t)a2, (uint64_t)"save", 4, &v12);
  if (v44)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v12, &v34, (uint64_t)&v13);
  v23 = v13;
  v9 = sub_23952329C(&v24, &v14);
  *(_OWORD *)a3 = v23;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v33)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v26)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v9;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v32)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v26)
      goto LABEL_25;
    goto LABEL_23;
  }
  v10 = v29;
  *(_QWORD *)(a3 + 64) = v28;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  *(_QWORD *)(a3 + 72) = v10;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 96) = v31;
  __p[1] = 0;
  v31 = 0;
  v28 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v26)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v27[0]);
  if (!v26)
    goto LABEL_25;
LABEL_23:
  if ((v25[15] & 0x80000000) != 0)
    operator delete(v24);
LABEL_25:
  if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete((void *)v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (v44)
      return;
  }
  else if (v44)
  {
    return;
  }
  if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_239607CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 160);
  _Unwind_Resume(a1);
}

void sub_239607CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239607D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

void sub_239607D24(_QWORD *a1@<X0>, std::__fs::filesystem::path *a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *exception;
  std::string v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  void *v24;
  _BYTE v25[16];
  char v26;
  void *v27[2];
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  char v33;
  __int128 v34;
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  char v44;

  *(_QWORD *)&v23 = &off_250ADB210;
  sub_23960AEB4(a1, (uint64_t)&v23 + 8);
  sub_2397284EC(a2, &v23, (uint64_t)&v34);
  v5 = nullsub_4(v25);
  v6 = (std::__shared_weak_count *)v24;
  if (!v24)
    goto LABEL_5;
  v7 = (unint64_t *)((char *)v24 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
    std::__shared_weak_count::__release_weak(v6);
    nullsub_4(&v23);
    if (v44)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v23);
    if (v44)
    {
LABEL_6:
      *(_BYTE *)(a3 + 120) = 1;
      return;
    }
  }
  sub_239727894((uint64_t)a2, (uint64_t)"save", 4, &v12);
  if (v44)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v12, &v34, (uint64_t)&v13);
  v23 = v13;
  v9 = sub_23952329C(&v24, &v14);
  *(_OWORD *)a3 = v23;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v33)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v26)
  {
    *(_OWORD *)(a3 + 16) = *(_OWORD *)v9;
    *(_QWORD *)(a3 + 32) = *((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v32)
  {
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v26)
      goto LABEL_25;
    goto LABEL_23;
  }
  v10 = v29;
  *(_QWORD *)(a3 + 64) = v28;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v27;
  v27[0] = 0;
  v27[1] = 0;
  *(_QWORD *)(a3 + 72) = v10;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 96) = v31;
  __p[1] = 0;
  v31 = 0;
  v28 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v26)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v27[0]);
  if (!v26)
    goto LABEL_25;
LABEL_23:
  if ((v25[15] & 0x80000000) != 0)
    operator delete(v24);
LABEL_25:
  if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete((void *)v14);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (v44)
      return;
  }
  else if (v44)
  {
    return;
  }
  if (v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_239608034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 160);
  _Unwind_Resume(a1);
}

void sub_23960807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239608090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_2396080A4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  std::__fs::filesystem::path::__string_view v17;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v19;
  std::basic_string_view<_CharT, _Traits>::size_type v20;
  void *v21;
  _BOOL4 v22;
  _BOOL4 v24;
  int v25;
  int v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  std::__fs::filesystem::path::__string_view v31;
  __int128 *v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  std::basic_string_view<_CharT, _Traits>::size_type v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BOOL4 v113;
  int v114;
  _BOOL4 v115;
  int v116;
  void *__p[2];
  uint64_t v118;
  void *v119[2];
  unint64_t v120;
  void *v121[2];
  uint64_t v122;
  __int128 __dst;
  unint64_t v124;
  uint64_t v125;
  _QWORD v126[51];
  _QWORD v127[21];

  v127[19] = *MEMORY[0x24BDAC8D0];
  sub_23955CF88(&v125);
  if (!v126[15])
    goto LABEL_11;
  if (a6)
  {
    v12 = *(_QWORD *)(a5 + 8);
    if (v12 >= *(_QWORD *)(a5 + 16))
    {
      v14 = sub_23958837C((char **)a5, a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_23941A7F8(*(_BYTE **)(a5 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v13 = *(_OWORD *)a2;
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v12 = v13;
      }
      v14 = (char *)(v12 + 24);
      *(_QWORD *)(a5 + 8) = v12 + 24;
    }
    *(_QWORD *)(a5 + 8) = v14;
  }
  sub_239458500(&v125, (uint64_t)"#  \n", 4);
  sub_239458500(&v125, (uint64_t)"#  Wavefront OBJ\n", 17);
  sub_239458500(&v125, (uint64_t)"#  \n", 4);
  if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
  {
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
  v17 = std::__fs::filesystem::path::__stem((const std::__fs::filesystem::path *)a2);
  if (v17.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v17.__size_ >= 0x17)
  {
    v19 = (v17.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17.__size_ | 7) != 0x17)
      v19 = v17.__size_ | 7;
    v20 = v19 + 1;
    p_dst = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&__dst + 1) = v17.__size_;
    v124 = v20 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v124) = v17.__size_;
  p_dst = &__dst;
  if (v17.__size_)
LABEL_20:
    memmove(p_dst, v17.__data_, v17.__size_);
  *((_BYTE *)p_dst + v17.__size_) = 0;
  v21 = (void *)__dst;
  LODWORD(v119[0]) = v124;
  *(_DWORD *)((char *)v119 + 3) = *(_DWORD *)((char *)&v124 + 3);
  if (SHIBYTE(v124) < 0)
  {
    sub_23941A7F8(v121, (void *)__dst, *((unint64_t *)&__dst + 1));
    operator delete(v21);
  }
  else
  {
    *(_OWORD *)v121 = __dst;
    LODWORD(v122) = v119[0];
    *(_DWORD *)((char *)&v122 + 3) = *(_DWORD *)((char *)v119 + 3);
    HIBYTE(v122) = HIBYTE(v124);
  }
  v115 = *(_BYTE *)(a1 + 72) != 0;
  v22 = *(_BYTE *)(a1 + 104) != 0;
  v24 = (~a3 & 0xC) == 0 && *(_BYTE *)(a1 + 232) != 0;
  v25 = (a3 >> 2) & 1;
  if (*(_BYTE *)(a1 + 168))
    v26 = (a3 >> 2) & 1;
  else
    v26 = 0;
  v113 = v24;
  v114 = v26;
  if (!*(_BYTE *)(a1 + 200))
    LOBYTE(v25) = 0;
  v112 = v25;
  if (!v24)
    goto LABEL_60;
  v27 = sub_239458500(&v125, (uint64_t)"\nmtllib ", 8);
  if (v122 >= 0)
    v28 = v121;
  else
    v28 = (void **)v121[0];
  if (v122 >= 0)
    v29 = HIBYTE(v122);
  else
    v29 = (uint64_t)v121[1];
  v30 = sub_239458500(v27, (uint64_t)v28, v29);
  sub_239458500(v30, (uint64_t)".mtl\n\n", 6);
  std::ostream::flush();
  if (!*(_BYTE *)(a1 + 232))
    goto LABEL_156;
  v31 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)a2);
  if (v31.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v31.__size_ >= 0x17)
  {
    v33 = (v31.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31.__size_ | 7) != 0x17)
      v33 = v31.__size_ | 7;
    v34 = v33 + 1;
    v32 = (__int128 *)operator new(v33 + 1);
    *((_QWORD *)&__dst + 1) = v31.__size_;
    v124 = v34 | 0x8000000000000000;
    *(_QWORD *)&__dst = v32;
    goto LABEL_50;
  }
  HIBYTE(v124) = v31.__size_;
  v32 = &__dst;
  if (v31.__size_)
LABEL_50:
    memmove(v32, v31.__data_, v31.__size_);
  *((_BYTE *)v32 + v31.__size_) = 0;
  *(_OWORD *)v119 = __dst;
  v120 = v124;
  if (SHIBYTE(v122) < 0)
  {
    sub_23941A7F8(__p, v121[0], (unint64_t)v121[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v121;
    v118 = v122;
  }
  v35 = sub_239602C68((uint64_t *)(a1 + 208), (uint64_t)v119, (const void **)__p, a3, a4, a5, a6);
  if (SHIBYTE(v118) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v120) & 0x80000000) == 0)
    {
LABEL_56:
      if (!v35)
        goto LABEL_62;
      goto LABEL_60;
    }
  }
  else if ((SHIBYTE(v120) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v119[0]);
  if (!v35)
    goto LABEL_62;
LABEL_60:
  if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
    goto LABEL_62;
  sub_239458500(&v125, (uint64_t)"\n", 1);
  sub_239458500(&v125, (uint64_t)"# ", 2);
  v36 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v36, (uint64_t)" vertices\n", 10);
  if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
    goto LABEL_62;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    if ((v22 & (a3 >> 1) & 1) != 0)
    {
      v37 = 0;
      while (1)
      {
        if (!*(_BYTE *)(a1 + 104))
          sub_2394875CC();
        v38 = sub_239458500(&v125, (uint64_t)"v ", 2);
        *(_QWORD *)((char *)v38 + *(_QWORD *)(*v38 - 24) + 16) = 10;
        v39 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v39, (uint64_t)&__dst, 1);
        v40 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v40, (uint64_t)&__dst, 1);
        v41 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v41, (uint64_t)&__dst, 1);
        v42 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v42, (uint64_t)&__dst, 1);
        v43 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v43, (uint64_t)&__dst, 1);
        v44 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v44, (uint64_t)"\n", 1);
        if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
          break;
        if (++v37 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2))
          goto LABEL_74;
      }
    }
    else
    {
      v45 = 0;
      while (1)
      {
        v46 = sub_239458500(&v125, (uint64_t)"v ", 2);
        *(_QWORD *)((char *)v46 + *(_QWORD *)(*v46 - 24) + 16) = 10;
        v47 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v47, (uint64_t)&__dst, 1);
        v48 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v48, (uint64_t)&__dst, 1);
        v49 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v49, (uint64_t)"\n", 1);
        if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
          break;
        if (++v45 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2))
          goto LABEL_74;
      }
    }
LABEL_62:
    v15 = 0;
    if ((SHIBYTE(v122) & 0x80000000) == 0)
      goto LABEL_12;
LABEL_63:
    operator delete(v121[0]);
    goto LABEL_12;
  }
LABEL_74:
  v116 = a3 & v115;
  if (v116)
  {
    sub_239458500(&v125, (uint64_t)"\n", 1);
    sub_239458500(&v125, (uint64_t)"# ", 2);
    v50 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v50, (uint64_t)" normals\n", 9);
    if (*(_BYTE *)(a1 + 72))
    {
      v51 = 0;
      do
      {
        if (v51 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2))
          break;
        v52 = sub_239458500(&v125, (uint64_t)"vn ", 3);
        *(_QWORD *)((char *)v52 + *(_QWORD *)(*v52 - 24) + 16) = 10;
        v53 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v53, (uint64_t)&__dst, 1);
        v54 = (_QWORD *)std::ostream::operator<<();
        LOBYTE(__dst) = 32;
        sub_239458500(v54, (uint64_t)&__dst, 1);
        v55 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v55, (uint64_t)"\n", 1);
        if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
          goto LABEL_62;
        ++v51;
      }
      while (*(_BYTE *)(a1 + 72));
    }
  }
  if (v114)
  {
    sub_239458500(&v125, (uint64_t)"\n", 1);
    sub_239458500(&v125, (uint64_t)"# ", 2);
    if (*(_BYTE *)(a1 + 168))
    {
      v56 = (_QWORD *)std::ostream::operator<<();
      sub_239458500(v56, (uint64_t)" texcoords\n", 11);
      if (!*(_BYTE *)(a1 + 168))
LABEL_89:
        sub_2394875CC();
      v57 = 0;
      v58 = -1;
      while (++v58 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3))
      {
        v59 = sub_239458500(&v125, (uint64_t)"vt ", 3);
        *(_QWORD *)((char *)v59 + *(_QWORD *)(*v59 - 24) + 16) = 10;
        if (!*(_BYTE *)(a1 + 168)
          || (v60 = (_QWORD *)std::ostream::operator<<(),
              LOBYTE(__dst) = 32,
              sub_239458500(v60, (uint64_t)&__dst, 1),
              !*(_BYTE *)(a1 + 168)))
        {
          sub_2394875CC();
        }
        v61 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v61, (uint64_t)"\n", 1);
        if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
          goto LABEL_62;
        v57 += 8;
        if (!*(_BYTE *)(a1 + 168))
          goto LABEL_89;
      }
      goto LABEL_90;
    }
LABEL_156:
    sub_2394875CC();
  }
LABEL_90:
  sub_239458500(&v125, (uint64_t)"\n", 1);
  sub_239458500(&v125, (uint64_t)"# ", 2);
  v62 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v62, (uint64_t)" faces (triangles)\n", 19);
  sub_239458500(&v125, (uint64_t)"\n", 1);
  if (v113)
  {
    if (!*(_BYTE *)(a1 + 232))
LABEL_117:
      sub_2394875CC();
    v63 = 0;
    while (1)
    {
      v64 = *(_QWORD *)(a1 + 208);
      if (v63 >= 0x823EE08FB823EE09 * ((*(_QWORD *)(a1 + 216) - v64) >> 4))
        break;
      v65 = sub_239458500(&v125, (uint64_t)"usemtl ", 7);
      v66 = v64 + 912 * v63;
      v67 = *(char *)(v66 + 23);
      if (v67 >= 0)
        v68 = v64 + 912 * v63;
      else
        v68 = *(_QWORD *)v66;
      if (v67 >= 0)
        v69 = *(unsigned __int8 *)(v66 + 23);
      else
        v69 = *(_QWORD *)(v66 + 8);
      v70 = sub_239458500(v65, v68, v69);
      sub_239458500(v70, (uint64_t)"\n", 1);
      v71 = v64 + 912 * v63;
      v72 = *(_QWORD *)(v71 + 24);
      v73 = *(_QWORD *)(v71 + 32);
      if (v72 != v73)
      {
        if ((v116 & 1) != 0)
        {
          while (*(_BYTE *)(a1 + 200))
          {
            sub_239458500(&v125, (uint64_t)"f", 1);
            *(_QWORD *)((char *)&v126[1] + *(_QWORD *)(v125 - 24)) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v74 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v74, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v75 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
            if ((v75[32] & 5) != 0)
              goto LABEL_62;
            *((_QWORD *)v75 + 2) = 10;
            LOBYTE(__dst) = 47;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v76 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v76) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v76) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v77 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v77, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v78 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
            if ((v78[32] & 5) != 0)
              goto LABEL_62;
            *((_QWORD *)v78 + 2) = 10;
            LOBYTE(__dst) = 47;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v79 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v79) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v79) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v80 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v80, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v81 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
            if ((v81[32] & 5) != 0)
              goto LABEL_62;
            *((_QWORD *)v81 + 2) = 10;
            LOBYTE(__dst) = 47;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
              goto LABEL_62;
            sub_239458500(&v125, (uint64_t)"\n", 1);
            v72 += 4;
            if (v72 == v73)
              goto LABEL_116;
          }
        }
        else
        {
          while (*(_BYTE *)(a1 + 200))
          {
            sub_239458500(&v125, (uint64_t)"f", 1);
            *(_QWORD *)((char *)&v126[1] + *(_QWORD *)(v125 - 24)) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v82 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v82, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v83 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v83) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v83) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v84 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v84, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v85 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v85) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v85) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v86 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v86, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
              goto LABEL_62;
            sub_239458500(&v125, (uint64_t)"\n", 1);
            v72 += 4;
            if (v72 == v73)
              goto LABEL_116;
          }
        }
        sub_2394875CC();
      }
LABEL_116:
      ++v63;
      if (!*(_BYTE *)(a1 + 232))
        goto LABEL_117;
    }
  }
  else
  {
    v88 = *(_QWORD *)(a1 + 24);
    v87 = *(_QWORD *)(a1 + 32);
    if ((v112 & 1) != 0)
    {
      if (v87 != v88)
      {
        v89 = 0;
        v90 = 0;
        do
        {
          if (!*(_BYTE *)(a1 + 200))
            sub_2394875CC();
          sub_239458500(&v125, (uint64_t)"f", 1);
          *(_QWORD *)((char *)&v126[1] + *(_QWORD *)(v125 - 24)) = 10;
          LOBYTE(__dst) = 32;
          if ((v116 & 1) != 0)
          {
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v91 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v91, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v92 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
            if ((v92[32] & 5) != 0)
              goto LABEL_62;
            *((_QWORD *)v92 + 2) = 10;
            sub_239458500(&v125, (uint64_t)"//", 2);
            std::ostream::operator<<();
            v93 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v93) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v93) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v94 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v94, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v95 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
            if ((v95[32] & 5) != 0)
              goto LABEL_62;
            *((_QWORD *)v95 + 2) = 10;
            sub_239458500(&v125, (uint64_t)"//", 2);
            std::ostream::operator<<();
            v96 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v96) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v96) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v97 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v97, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v98 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
            if ((v98[32] & 5) != 0)
              goto LABEL_62;
            *((_QWORD *)v98 + 2) = 10;
            sub_239458500(&v125, (uint64_t)"//", 2);
            std::ostream::operator<<();
          }
          else
          {
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v99 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v99, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v100 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v100) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v100) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v101 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v101, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
            v102 = *(_QWORD *)(v125 - 24);
            if ((*((_BYTE *)&v126[3] + v102) & 5) != 0)
              goto LABEL_62;
            *(_QWORD *)((char *)&v126[1] + v102) = 10;
            LOBYTE(__dst) = 32;
            sub_239458500(&v125, (uint64_t)&__dst, 1);
            v103 = (_QWORD *)std::ostream::operator<<();
            LOBYTE(__dst) = 47;
            sub_239458500(v103, (uint64_t)&__dst, 1);
            std::ostream::operator<<();
          }
          if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
            goto LABEL_62;
          sub_239458500(&v125, (uint64_t)"\n", 1);
          ++v90;
          v89 += 12;
        }
        while (v90 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2));
      }
    }
    else if (v87 != v88)
    {
      v104 = 0;
      do
      {
        sub_239458500(&v125, (uint64_t)"f", 1);
        *(_QWORD *)((char *)&v126[1] + *(_QWORD *)(v125 - 24)) = 10;
        LOBYTE(__dst) = 32;
        if ((v116 & 1) != 0)
        {
          sub_239458500(&v125, (uint64_t)&__dst, 1);
          std::ostream::operator<<();
          v105 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
          if ((v105[32] & 5) != 0)
            goto LABEL_62;
          *((_QWORD *)v105 + 2) = 10;
          sub_239458500(&v125, (uint64_t)"//", 2);
          std::ostream::operator<<();
          v106 = *(_QWORD *)(v125 - 24);
          if ((*((_BYTE *)&v126[3] + v106) & 5) != 0)
            goto LABEL_62;
          *(_QWORD *)((char *)&v126[1] + v106) = 10;
          LOBYTE(__dst) = 32;
          sub_239458500(&v125, (uint64_t)&__dst, 1);
          std::ostream::operator<<();
          v107 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
          if ((v107[32] & 5) != 0)
            goto LABEL_62;
          *((_QWORD *)v107 + 2) = 10;
          sub_239458500(&v125, (uint64_t)"//", 2);
          std::ostream::operator<<();
          v108 = *(_QWORD *)(v125 - 24);
          if ((*((_BYTE *)&v126[3] + v108) & 5) != 0)
            goto LABEL_62;
          *(_QWORD *)((char *)&v126[1] + v108) = 10;
          LOBYTE(__dst) = 32;
          sub_239458500(&v125, (uint64_t)&__dst, 1);
          std::ostream::operator<<();
          v109 = (char *)&v126[-1] + *(_QWORD *)(v125 - 24);
          if ((v109[32] & 5) != 0)
            goto LABEL_62;
          *((_QWORD *)v109 + 2) = 10;
          sub_239458500(&v125, (uint64_t)"//", 2);
          std::ostream::operator<<();
        }
        else
        {
          sub_239458500(&v125, (uint64_t)&__dst, 1);
          std::ostream::operator<<();
          v110 = *(_QWORD *)(v125 - 24);
          if ((*((_BYTE *)&v126[3] + v110) & 5) != 0)
            goto LABEL_62;
          *(_QWORD *)((char *)&v126[1] + v110) = 10;
          LOBYTE(__dst) = 32;
          sub_239458500(&v125, (uint64_t)&__dst, 1);
          std::ostream::operator<<();
          v111 = *(_QWORD *)(v125 - 24);
          if ((*((_BYTE *)&v126[3] + v111) & 5) != 0)
            goto LABEL_62;
          *(_QWORD *)((char *)&v126[1] + v111) = 10;
          LOBYTE(__dst) = 32;
          sub_239458500(&v125, (uint64_t)&__dst, 1);
          std::ostream::operator<<();
        }
        if ((*((_BYTE *)&v126[3] + *(_QWORD *)(v125 - 24)) & 5) != 0)
          goto LABEL_62;
        sub_239458500(&v125, (uint64_t)"\n", 1);
        ++v104;
      }
      while (v104 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2));
    }
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v126[-1] + *(_QWORD *)(v125 - 24)), *(_DWORD *)((char *)&v126[3] + *(_QWORD *)(v125 - 24)) | 4);
  v15 = 1;
  if (SHIBYTE(v122) < 0)
    goto LABEL_63;
LABEL_12:
  v125 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v126[-1] + *(_QWORD *)(v125 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x23B83DC8C](v126);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v127);
  return v15;
}

void sub_2396095AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if ((a31 & 0x80000000) == 0)
  {
    sub_23955C978(&a35);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_23955C978(&a35);
  _Unwind_Resume(a1);
}

void sub_2396096F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_23955C978(&a26);
  _Unwind_Resume(a1);
}

char *sub_239609704(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  char **v9;
  char *result;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)result + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)result + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v28 = (char *)operator new(0x30uLL);
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = v6;
  *((_DWORD *)v28 + 4) = *(_DWORD *)a3;
  v13 = v28 + 24;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_23941A7F8(v13, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v28 + 5) = *(_QWORD *)(a3 + 24);
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v17 = v28;
        if (v16)
          goto LABEL_29;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v17 = v28;
        if (v16)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = v26 & v6;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      v17 = v28;
      if (v16)
        goto LABEL_29;
    }
LABEL_53:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v28)
    {
      v27 = *(_QWORD *)(*(_QWORD *)v28 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v27 >= v7)
          v27 %= v7;
      }
      else
      {
        v27 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v28;
    }
    goto LABEL_64;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v17 = v28;
  if (!v16)
    goto LABEL_53;
LABEL_29:
  *v17 = *v16;
  *v16 = v28;
LABEL_64:
  result = v28;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_239609A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239609A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_239609A98()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930A50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930A50))
    return &xmmword_256930A38;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb32f]", &xmmword_256930A38);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930A38, &dword_23940C000);
  __cxa_guard_release(&qword_256930A50);
  return &xmmword_256930A38;
}

void sub_239609B28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930A50);
  _Unwind_Resume(a1);
}

void sub_239609B40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  sub_239609C40(a1, &v14);
  v13 = v14;
  v14 = 0uLL;
  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 0xFF00000000) != 0)
    v5 = (v4 >> 2) | 0x100000000;
  else
    v5 = 0;
  v6 = *(_WORD *)(a1 + 60);
  sub_239827CE0(a2, &v13, v5);
  *(_WORD *)(a2 + 120) = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_239609C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_239609C40(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239609E80(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_239609E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239609E80(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239609EF8();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_239609EF8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930AD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930AD0))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_239609A98();
    sub_23960A0FC((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23960A0FC((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930AB8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930AB8, &dword_23940C000);
          __cxa_guard_release(&qword_256930AD0);
          return &stru_256930AB8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930AB8;
}

void sub_23960A048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930AD0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930AD0);
  _Unwind_Resume(a1);
}

void sub_23960A0FC(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23960A190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23960A1CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  sub_23960A3B0(a1, &v14);
  v13 = v14;
  v14 = 0uLL;
  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 0xFF00000000) != 0)
    v5 = (v4 >> 2) | 0x100000000;
  else
    v5 = 0;
  v6 = *(_WORD *)(a1 + 60);
  sub_2398282C0(a2, &v13, v5);
  *(_WORD *)(a2 + 120) = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_23960A2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_23960A2CC(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23960A308()
{
  return 32;
}

uint64_t sub_23960A310(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_23960A318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 88, 3, a1 + 100, 4);
}

uint64_t sub_23960A334(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_23960A3B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23960A5F0(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_23960A590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23960A5F0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23960A668();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23960A668()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930AF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930AF0))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_23960A93C();
    sub_23960A86C((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23960A86C((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930AD8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930AD8, &dword_23940C000);
          __cxa_guard_release(&qword_256930AF0);
          return &stru_256930AD8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930AD8;
}

void sub_23960A7B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930AF0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930AF0);
  _Unwind_Resume(a1);
}

void sub_23960A86C(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23960A900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_23960A93C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930B10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930B10))
    return &xmmword_256930AF8;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba32f]", &xmmword_256930AF8);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930AF8, &dword_23940C000);
  __cxa_guard_release(&qword_256930B10);
  return &xmmword_256930AF8;
}

void sub_23960A9CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930B10);
  _Unwind_Resume(a1);
}

void sub_23960A9E4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 3, (uint64_t)(a1 + 11), 3, (uint64_t)a1 + 100, 4);
  sub_239423D38(a2, &v17, (uint64_t)v16, v8, 32);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23960AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_23960AB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23960AB44(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[12];
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v4 = a1[1];
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v23 = v4;
    v24 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v23 = a1[1];
    v24 = 0;
  }
  v21 = v23;
  v22 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a1[10];
  sub_2398EB464((uint64_t)v20, 3, (uint64_t)(a1 + 11), 3, (uint64_t)a1 + 100, 4);
  sub_239423D38(a2, &v21, (uint64_t)v20, v12, 24);
  v13 = nullsub_4(v20);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v13);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_23960ACBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_23960ACE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23960ACFC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[12];
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v4 = a1[1];
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v23 = v4;
    v24 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v23 = a1[1];
    v24 = 0;
  }
  v21 = v23;
  v22 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a1[7];
  sub_2398EB464((uint64_t)v20, 2, (uint64_t)(a1 + 8), 2, (uint64_t)(a1 + 9), 4);
  sub_239423D38(a2, &v21, (uint64_t)v20, v12, 4);
  v13 = nullsub_4(v20);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v13);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_23960AE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_23960AE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23960AEB4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 2, (uint64_t)(a1 + 8), 2, (uint64_t)(a1 + 9), 1);
  sub_239423D38(a2, &v17, (uint64_t)v16, v8, 1);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_23960AFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_23960AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_23960B040(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v4;
  _DWORD *v5;
  uint64_t *i;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  int v11;
  void *__p;
  void *v13;

  v4 = *(_QWORD *)(a1 + 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v4)
  {
    v5 = 0;
    i = *(uint64_t **)(a1 + 16);
    if (!i)
      return;
    goto LABEL_8;
  }
  if (v4 >> 62)
    sub_2394189F8();
  v5 = operator new(4 * v4);
  *a2 = v5;
  a2[2] = &v5[v4];
  bzero(v5, 4 * v4);
  a2[1] = &v5[v4];
  for (i = *(uint64_t **)(a1 + 16); i; ++v5)
  {
LABEL_8:
    v11 = *((_DWORD *)i + 4);
    sub_23960D6F4((uint64_t)&__p, (uint64_t)(i + 3));
    *v5 = v11;
    v7 = v13;
    if (v13)
    {
      do
      {
        v9 = (_QWORD *)*v7;
        v10 = (void *)v7[3];
        if (v10)
        {
          v7[4] = v10;
          operator delete(v10);
        }
        operator delete(v7);
        v7 = v9;
      }
      while (v9);
    }
    v8 = __p;
    __p = 0;
    if (v8)
      operator delete(v8);
    i = (uint64_t *)*i;
  }
}

void sub_23960B158(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23960B178(size_t *a1, uint64_t *a2, char a3)
{
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  int64_t v54;
  unint64_t v55;
  float *v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char *v63;
  char *v64;
  float *v65;
  unint64_t v66;
  BOOL v68;
  BOOL v70;
  BOOL v71;
  uint64_t v72;
  float32x4_t *v73;
  const float *v74;
  char *v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void **v88;
  void *v89;
  void **v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  char v96;
  uint64_t v97;
  size_t *v98;
  size_t __sz;
  void *__p;
  __int128 v101;
  void *v102[3];
  void *v103[2];
  char v104;
  void *v105[4];
  void *v106[2];
  char v107;
  void *v108[2];
  char v109;
  void *v110[3];
  void *v111[2];
  char v112;
  void *v113[2];
  void *v114;
  void *v115;
  void *v116;
  char *v117;
  void *v118;
  void *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  unsigned int *v136;
  unsigned int *v137;
  float32x4x3_t v138;

  sub_23960B040((uint64_t)a1, &v136);
  v6 = (uint64_t *)a1[2];
  if (v6)
  {
    v7 = 0;
    do
    {
      v7 += *((_DWORD *)v6 + 12);
      v6 = (uint64_t *)*v6;
    }
    while (v6);
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
      goto LABEL_5;
  }
  else
  {
    v7 = 0;
    if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
    {
LABEL_5:
      v8 = 0;
      goto LABEL_166;
    }
  }
  v10 = v136;
  v9 = v137;
  v95 = a2;
  if (v136 == v137)
  {
    v12 = 0;
  }
  else
  {
    v11 = (int8x8_t)a1[1];
    if (v11)
    {
      v12 = 0;
      v13 = (uint8x8_t)vcnt_s8(v11);
      v13.i16[0] = vaddlv_u8(v13);
      v14 = v136;
      do
      {
        v15 = *v14;
        if (v13.u32[0] > 1uLL)
        {
          v16 = *v14;
          if (*(_QWORD *)&v11 <= v15)
            v16 = v15 % *(_QWORD *)&v11;
        }
        else
        {
          v16 = (*(_QWORD *)&v11 + 0xFFFFFFFFLL) & v15;
        }
        v17 = *(uint64_t ***)(*a1 + 8 * v16);
        if (v17)
        {
          v18 = *v17;
          if (v18)
          {
            if (v13.u32[0] < 2uLL)
            {
              while (1)
              {
                v19 = v18[1];
                if (v19 == v15)
                {
                  if (*((_DWORD *)v18 + 4) == (_DWORD)v15)
                    goto LABEL_33;
                }
                else if ((v19 & (*(_QWORD *)&v11 - 1)) != v16)
                {
                  goto LABEL_30;
                }
                v18 = (uint64_t *)*v18;
                if (!v18)
                  goto LABEL_30;
              }
            }
            do
            {
              v20 = v18[1];
              if (v20 == v15)
              {
                if (*((_DWORD *)v18 + 4) == (_DWORD)v15)
                {
LABEL_33:
                  v21 = *(_QWORD **)(((_BYTE)v18 + 24) + 0x10);
                  if (!v21)
                    goto LABEL_10;
                  goto LABEL_31;
                }
              }
              else
              {
                if (v20 >= *(_QWORD *)&v11)
                  v20 %= *(_QWORD *)&v11;
                if (v20 != v16)
                  break;
              }
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
        }
LABEL_30:
        v21 = (_QWORD *)MEMORY[0x10];
        if (!MEMORY[0x10])
          goto LABEL_10;
        do
        {
LABEL_31:
          v12 -= 0x5555555555555555 * ((uint64_t)(v21[4] - v21[3]) >> 2);
          v21 = (_QWORD *)*v21;
        }
        while (v21);
LABEL_10:
        ++v14;
      }
      while (v14 != v137);
    }
    else
    {
      v12 = 0;
      v92 = (char *)v136;
      do
      {
        if (MEMORY[0x10])
        {
          v93 = (_QWORD *)MEMORY[0x10];
          do
          {
            v12 -= 0x5555555555555555 * ((uint64_t)(v93[4] - v93[3]) >> 2);
            v93 = (_QWORD *)*v93;
          }
          while (v93);
        }
        v92 += 4;
      }
      while (v92 != (char *)v137);
    }
  }
  v22 = 2 * v7;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v96 = a3;
  v98 = a1;
  if ((_DWORD)v22)
  {
    v23 = (char *)operator new(4 * v22);
    v133 = v23;
    v135 = &v23[4 * v22];
    bzero(v23, 4 * v22);
    v134 = v135;
    v24 = 6 * v7;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    if ((_DWORD)v24)
    {
LABEL_38:
      v25 = (char *)operator new(8 * v24);
      v130 = v25;
      v132 = &v25[8 * v24];
      bzero(v25, 8 * v24);
      v131 = v132;
      v26 = (char *)operator new(8 * v24);
      v127 = v26;
      v129 = &v26[8 * v24];
      bzero(v26, 8 * v24);
      v128 = v129;
      goto LABEL_41;
    }
  }
  else
  {
    v23 = 0;
    v24 = 6 * v7;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    if ((_DWORD)v24)
      goto LABEL_38;
  }
  v26 = 0;
  v25 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
LABEL_41:
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v97 = v7;
  if (v7)
  {
    v27 = (char *)operator new(4 * v7);
    v124 = v27;
    v126 = &v27[4 * v7];
    bzero(v27, 4 * v7);
    v125 = v126;
    v28 = 2 * v12;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    if (2 * v12)
      goto LABEL_43;
LABEL_118:
    v118 = 0;
    v119 = 0;
    v120 = 0;
    if (!v12)
      goto LABEL_45;
    goto LABEL_119;
  }
  v27 = 0;
  v28 = 2 * v12;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  if (!(2 * v12))
    goto LABEL_118;
LABEL_43:
  if (v28 >> 62)
    sub_2394189F8();
  v121 = (char *)operator new(8 * v12);
  v123 = &v121[4 * v28];
  bzero(v121, 8 * v12);
  v122 = v123;
  v118 = 0;
  v119 = 0;
  v120 = 0;
  if (!v12)
  {
LABEL_45:
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v29 = 4 * v7;
    if (v7)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_119:
  if (v12 >> 62)
    sub_2394189F8();
  v75 = (char *)operator new(4 * v12);
  v76 = &v75[4 * v12];
  v118 = v75;
  v120 = v76;
  bzero(v75, 4 * v12);
  v119 = v76;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v29 = 4 * v7;
  if (v7)
  {
LABEL_46:
    v30 = (char *)operator new(v29);
    v115 = v30;
    v117 = &v30[4 * v7];
    bzero(v30, v29);
    v116 = v117;
    if (v10 != v9)
      goto LABEL_47;
LABEL_122:
    v36 = 0;
    v31 = 0;
    goto LABEL_123;
  }
LABEL_121:
  v30 = 0;
  if (v10 == v9)
    goto LABEL_122;
LABEL_47:
  v31 = 0;
  v32 = 0;
  v33 = (int8x8_t)v98[1];
  __sz = *v98;
  v34 = (uint8x8_t)vcnt_s8(v33);
  v34.i16[0] = vaddlv_u8(v34);
  v35 = v34.u32[0];
  do
  {
    v37 = *v10;
    if (v33)
    {
      if (v35 > 1)
      {
        v38 = *v10;
        if (*(_QWORD *)&v33 <= v37)
          v38 = v37 % *(_QWORD *)&v33;
      }
      else
      {
        v38 = (*(_QWORD *)&v33 + 0xFFFFFFFFLL) & v37;
      }
      v39 = *(uint64_t **)(__sz + 8 * v38);
      if (v39)
      {
        v39 = (uint64_t *)*v39;
        if (v39)
        {
          if (v35 < 2)
          {
            while (1)
            {
              v40 = v39[1];
              if (v40 == v37)
              {
                if (*((_DWORD *)v39 + 4) == (_DWORD)v37)
                  goto LABEL_115;
              }
              else if ((v40 & (*(_QWORD *)&v33 - 1)) != v38)
              {
                goto LABEL_70;
              }
              v39 = (uint64_t *)*v39;
              if (!v39)
                goto LABEL_72;
            }
          }
          do
          {
            v41 = v39[1];
            if (v41 == v37)
            {
              if (*((_DWORD *)v39 + 4) == (_DWORD)v37)
              {
LABEL_115:
                v42 = *(uint64_t **)(((_BYTE)v39 + 24) + 0x10);
                if (!v42)
                  goto LABEL_48;
LABEL_73:
                v43 = v121;
                v44 = v118;
                v45 = v121 + 4;
                while (2)
                {
                  *(_DWORD *)&v27[4 * v31] = v32;
                  v46 = &v23[8 * v31];
                  *(_DWORD *)v46 = v37;
                  *((_DWORD *)v46 + 1) = *((_DWORD *)v42 + 4);
                  v47 = &v25[48 * v31];
                  v48 = *(_OWORD *)(v42 + 7);
                  v49 = *(_OWORD *)(v42 + 11);
                  *((_OWORD *)v47 + 1) = *(_OWORD *)(v42 + 9);
                  *((_OWORD *)v47 + 2) = v49;
                  *(_OWORD *)v47 = v48;
                  v50 = &v26[48 * v31];
                  v51 = *(_OWORD *)(v42 + 13);
                  v52 = *(_OWORD *)(v42 + 17);
                  *((_OWORD *)v50 + 1) = *(_OWORD *)(v42 + 15);
                  *((_OWORD *)v50 + 2) = v52;
                  *(_OWORD *)v50 = v51;
                  v53 = v42[3];
                  v54 = v42[4] - v53;
                  if (v54)
                  {
                    v55 = v54 / 12;
                    if (v55 <= 1)
                      v55 = 1;
                    if (v55 < 0x14
                      || ((v56 = (float *)&v43[8 * v32], v57 = 2 * (v55 - 1), &v45[8 * v32 + v57 * 4] >= &v45[8 * v32])
                        ? (v58 = &v56[v57] >= v56)
                        : (v58 = 0),
                          v58 ? (v59 = (v55 - 1) >> 32 == 0) : (v59 = 0),
                          !v59))
                    {
                      v60 = 0;
                      goto LABEL_88;
                    }
                    v60 = 0;
                    v63 = &v43[8 * v32 + 8 * v55];
                    v64 = (char *)&v44[v32];
                    v65 = (float *)&v44[v32 + v55];
                    v66 = v53 + 12 * v55 - 4;
                    v68 = (unint64_t)v56 < v66 && v53 < (unint64_t)v63;
                    v70 = (unint64_t)v64 < v66 && v53 < (unint64_t)v65;
                    v71 = v64 >= v63 || v56 >= v65;
                    if (!v71 || v68 || v70)
                    {
LABEL_88:
                      v36 = v32;
                      goto LABEL_89;
                    }
                    v72 = 0;
                    v60 = v55 & 0xFFFFFFFFFFFFFFFCLL;
                    v36 = v32 + (v55 & 0xFFFFFFFFFFFFFFFCLL);
                    v73 = (float32x4_t *)&v44[v32];
                    do
                    {
                      v74 = (const float *)(v53 + 12 * (v72 & 0xFFFFFFFC));
                      v138 = vld3q_f32(v74);
                      vst2q_f32(v56, *(float32x4x2_t *)v138.val[0].f32);
                      v56 += 8;
                      *v73++ = v138.val[2];
                      v72 += 4;
                    }
                    while (v60 != v72);
                    if (v55 != v60)
                    {
LABEL_89:
                      v61 = &v45[8 * v36];
                      do
                      {
                        v62 = (_DWORD *)(v53 + 12 * v60);
                        *((_DWORD *)v61 - 1) = *v62;
                        *(_DWORD *)v61 = v62[1];
                        v61 += 8;
                        v44[v36++] = v62[2];
                        ++v60;
                      }
                      while (v55 != v60);
                    }
                  }
                  else
                  {
                    v36 = v32;
                  }
                  *(_DWORD *)&v30[4 * v31++] = *((_DWORD *)v42 + 38);
                  v42 = (uint64_t *)*v42;
                  v32 = v36;
                  if (!v42)
                    goto LABEL_49;
                  continue;
                }
              }
            }
            else
            {
              if (v41 >= *(_QWORD *)&v33)
                v41 %= *(_QWORD *)&v33;
              if (v41 != v38)
                goto LABEL_70;
            }
            v39 = (uint64_t *)*v39;
          }
          while (v39);
        }
      }
LABEL_72:
      v42 = (uint64_t *)v39[2];
      if (v42)
        goto LABEL_73;
    }
    else
    {
LABEL_70:
      v42 = (uint64_t *)MEMORY[0x10];
      if (MEMORY[0x10])
        goto LABEL_73;
    }
LABEL_48:
    v36 = v32;
LABEL_49:
    ++v10;
    v32 = v36;
  }
  while (v10 != v9);
LABEL_123:
  if (v36 != v12)
  {
    v94 = 332;
    goto LABEL_180;
  }
  if (v31 != v97)
  {
    v94 = 333;
LABEL_180:
    sub_239A444D4((uint64_t)"unknown file", v94, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  sub_2396157EC((uint64_t)v113, v96);
  v112 = 7;
  strcpy((char *)v111, "version");
  v77 = (_QWORD *)operator new();
  *v77 = &off_250ADF750;
  v77[1] = &unk_239EC77F0;
  sub_23961580C((uint64_t)v113, (uint64_t)v111, (uint64_t)v77);
  HIBYTE(v110[2]) = 18;
  strcpy((char *)v110, "flatten_view_pairs");
  v78 = (_QWORD *)operator new();
  *v78 = &off_250ADF7B0;
  v78[1] = &v133;
  sub_23961580C((uint64_t)v113, (uint64_t)v110, (uint64_t)v78);
  v109 = 14;
  strcpy((char *)v108, "flatten_hposes");
  v79 = (_QWORD *)operator new();
  *v79 = &off_250ADF600;
  v79[1] = &v130;
  sub_23961580C((uint64_t)v113, (uint64_t)v108, (uint64_t)v79);
  v107 = 14;
  strcpy((char *)v106, "flatten_fposes");
  v80 = (_QWORD *)operator new();
  *v80 = &off_250ADF600;
  v80[1] = &v127;
  sub_23961580C((uint64_t)v113, (uint64_t)v106, (uint64_t)v80);
  HIBYTE(v105[2]) = 19;
  strcpy((char *)v105, "flatten_point_pairs");
  v81 = (_QWORD *)operator new();
  *v81 = &off_250ADF7B0;
  v81[1] = &v121;
  sub_23961580C((uint64_t)v113, (uint64_t)v105, (uint64_t)v81);
  v104 = 13;
  strcpy((char *)v103, "flatten_flags");
  v82 = (_QWORD *)operator new();
  *v82 = &off_250ADF7B0;
  v82[1] = &v118;
  sub_23961580C((uint64_t)v113, (uint64_t)v103, (uint64_t)v82);
  HIBYTE(v102[2]) = 21;
  strcpy((char *)v102, "flatten_start_indices");
  v83 = (_QWORD *)operator new();
  *v83 = &off_250ADF7B0;
  v83[1] = &v124;
  sub_23961580C((uint64_t)v113, (uint64_t)v102, (uint64_t)v83);
  __p = operator new(0x20uLL);
  v101 = xmmword_239EC77E0;
  strcpy((char *)__p, "flatten_all_overlap_ratios");
  v84 = (_QWORD *)operator new();
  *v84 = &off_250ADF2A0;
  v84[1] = &v115;
  sub_23961580C((uint64_t)v113, (uint64_t)&__p, (uint64_t)v84);
  if (SHIBYTE(v101) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v102[2]) & 0x80000000) == 0)
    {
LABEL_127:
      if ((v104 & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_137;
    }
  }
  else if ((SHIBYTE(v102[2]) & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(v102[0]);
  if ((v104 & 0x80000000) == 0)
  {
LABEL_128:
    if ((SHIBYTE(v105[2]) & 0x80000000) == 0)
      goto LABEL_129;
    goto LABEL_138;
  }
LABEL_137:
  operator delete(v103[0]);
  if ((SHIBYTE(v105[2]) & 0x80000000) == 0)
  {
LABEL_129:
    if ((v107 & 0x80000000) == 0)
      goto LABEL_130;
    goto LABEL_139;
  }
LABEL_138:
  operator delete(v105[0]);
  if ((v107 & 0x80000000) == 0)
  {
LABEL_130:
    if ((v109 & 0x80000000) == 0)
      goto LABEL_131;
    goto LABEL_140;
  }
LABEL_139:
  operator delete(v106[0]);
  if ((v109 & 0x80000000) == 0)
  {
LABEL_131:
    if ((SHIBYTE(v110[2]) & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_141;
  }
LABEL_140:
  operator delete(v108[0]);
  if ((SHIBYTE(v110[2]) & 0x80000000) == 0)
  {
LABEL_132:
    if ((v112 & 0x80000000) == 0)
      goto LABEL_133;
LABEL_142:
    operator delete(v111[0]);
    if ((v96 & 1) != 0)
      goto LABEL_134;
LABEL_143:
    v85 = sub_2396158C8(v95, (uint64_t)v113);
    goto LABEL_144;
  }
LABEL_141:
  operator delete(v110[0]);
  if (v112 < 0)
    goto LABEL_142;
LABEL_133:
  if ((v96 & 1) == 0)
    goto LABEL_143;
LABEL_134:
  v85 = sub_2395902F0((uint64_t)v113, v95);
LABEL_144:
  v8 = v85;
  v86 = v114;
  if (v114)
  {
    do
    {
      v87 = v86[5];
      if (v87)
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
      v86 = (_QWORD *)*v86;
    }
    while (v86);
    v88 = (void **)v114;
    if (v114)
    {
      do
      {
        v91 = (void **)*v88;
        if (*((char *)v88 + 39) < 0)
          operator delete(v88[2]);
        operator delete(v88);
        v88 = v91;
      }
      while (v91);
    }
  }
  v89 = v113[0];
  v113[0] = 0;
  if (v89)
    operator delete(v89);
  if (v115)
  {
    v116 = v115;
    operator delete(v115);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v121)
  {
    v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
LABEL_166:
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  return v8;
}

void sub_23960BDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *__p)
{
  uint64_t v48;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  if (__p)
  {
    operator delete(__p);
    v50 = *(void **)(v48 - 240);
    if (!v50)
    {
LABEL_3:
      v51 = *(void **)(v48 - 216);
      if (!v51)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v50 = *(void **)(v48 - 240);
    if (!v50)
      goto LABEL_3;
  }
  *(_QWORD *)(v48 - 232) = v50;
  operator delete(v50);
  v51 = *(void **)(v48 - 216);
  if (!v51)
  {
LABEL_4:
    v52 = *(void **)(v48 - 192);
    if (!v52)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  *(_QWORD *)(v48 - 208) = v51;
  operator delete(v51);
  v52 = *(void **)(v48 - 192);
  if (!v52)
  {
LABEL_5:
    v53 = *(void **)(v48 - 168);
    if (!v53)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v48 - 184) = v52;
  operator delete(v52);
  v53 = *(void **)(v48 - 168);
  if (!v53)
  {
LABEL_6:
    v54 = *(void **)(v48 - 144);
    if (!v54)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  *(_QWORD *)(v48 - 160) = v53;
  operator delete(v53);
  v54 = *(void **)(v48 - 144);
  if (!v54)
  {
LABEL_7:
    v55 = *(void **)(v48 - 120);
    if (!v55)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v48 - 136) = v54;
  operator delete(v54);
  v55 = *(void **)(v48 - 120);
  if (!v55)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_15:
  *(_QWORD *)(v48 - 112) = v55;
  operator delete(v55);
  _Unwind_Resume(a1);
}

void sub_23960BFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((a22 & 0x80000000) == 0)
    JUMPOUT(0x23960BFB0);
  JUMPOUT(0x23960BE8CLL);
}

void sub_23960BFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    JUMPOUT(0x23960BFB8);
  JUMPOUT(0x23960BE9CLL);
}

void sub_23960C00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x23960BEA4);
  JUMPOUT(0x23960BFC8);
}

void sub_23960C01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    JUMPOUT(0x23960BFD0);
  JUMPOUT(0x23960BEB4);
}

void sub_23960C02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    JUMPOUT(0x23960BEBCLL);
  JUMPOUT(0x23960BFE0);
}

void sub_23960C03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    JUMPOUT(0x23960BFE8);
  JUMPOUT(0x23960BECCLL);
}

void sub_23960C04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if ((a41 & 0x80000000) == 0)
    JUMPOUT(0x23960BEDCLL);
  JUMPOUT(0x23960BED4);
}

void sub_23960C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (!a45)
    JUMPOUT(0x23960BEF4);
  JUMPOUT(0x23960BEECLL);
}

uint64_t sub_23960C06C(uint64_t *a1, _QWORD *a2, char a3)
{
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  char *v45;
  _DWORD *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  void *v62;
  _DWORD *v63;
  int *v64;
  int v65;
  int v66;
  int v67;
  _DWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  void *v77;
  _DWORD *v78;
  int64_t v79;
  char *v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void **v87;
  void *v88;
  char *v89;
  char *v90;
  void *v91;
  char *v92;
  void **v93;
  void *v94;
  void *v95;
  char *v96;
  char *v97;
  void *v98;
  char *v99;
  void *v100;
  void *v101;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  _QWORD *v118;
  void *__p;
  void *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  void *v130;
  __int128 v131;
  void *v132[3];
  void *v133[2];
  char v134;
  void *v135[4];
  void *v136[2];
  char v137;
  void *v138[2];
  char v139;
  void *v140[4];
  void *v141[2];
  char v142;
  void *v143[2];
  char v144;
  void *v145;
  _DWORD *v146;
  char *v147;
  void *v148[2];
  void *v149;
  void *v150;
  _BYTE *v151;
  uint64_t v152;
  void *v153;
  _BYTE *v154;
  uint64_t v155;
  void *v156;
  _BYTE *v157;
  uint64_t v158;
  void *v159;
  _BYTE *v160;
  uint64_t v161;
  void *v162;
  _BYTE *v163;
  uint64_t v164;
  void *v165;
  _BYTE *v166;
  uint64_t v167;
  void *v168;
  _BYTE *v169;
  uint64_t v170;
  void *v171;
  char *v172;
  uint64_t v173;
  void *v174;
  char *v175;
  uint64_t v176;
  void *v177;
  _BYTE *v178;
  uint64_t v179;
  void *v180;
  _BYTE *v181;
  uint64_t v182;
  _BYTE *v183;
  _BYTE *v184;
  uint64_t v185;
  int v186;
  __int128 v187[3];
  __int128 __dst[3];
  uint64_t v189;

  v189 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32))
    return 0;
  v186 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  v181 = 0;
  v180 = 0;
  v182 = 0;
  v178 = 0;
  v177 = 0;
  v179 = 0;
  v175 = 0;
  v174 = 0;
  v176 = 0;
  v172 = 0;
  v171 = 0;
  v173 = 0;
  v169 = 0;
  v168 = 0;
  v170 = 0;
  v166 = 0;
  v165 = 0;
  v167 = 0;
  v163 = 0;
  v162 = 0;
  v164 = 0;
  v160 = 0;
  v159 = 0;
  v161 = 0;
  v157 = 0;
  v156 = 0;
  v158 = 0;
  v154 = 0;
  v153 = 0;
  v155 = 0;
  v151 = 0;
  v150 = 0;
  v152 = 0;
  sub_2396157EC((uint64_t)v148, a3);
  HIBYTE(v121) = 7;
  strcpy((char *)&__p, "version");
  v6 = (_QWORD *)operator new();
  *v6 = &off_250ADF420;
  v6[1] = &v186;
  sub_23961580C((uint64_t)v148, (uint64_t)&__p, (uint64_t)v6);
  BYTE7(__dst[1]) = 10;
  strcpy((char *)__dst, "view_pairs");
  v7 = (_QWORD *)operator new();
  *v7 = &off_250AE06A0;
  v7[1] = &v183;
  sub_23961580C((uint64_t)v148, (uint64_t)__dst, (uint64_t)v7);
  BYTE7(v187[1]) = 6;
  strcpy((char *)v187, "hposes");
  v8 = (_QWORD *)operator new();
  *v8 = &off_250AE08F8;
  v8[1] = &v180;
  sub_23961580C((uint64_t)v148, (uint64_t)v187, (uint64_t)v8);
  HIBYTE(v147) = 6;
  strcpy((char *)&v145, "fposes");
  v9 = (_QWORD *)operator new();
  *v9 = &off_250AE08F8;
  v9[1] = &v177;
  sub_23961580C((uint64_t)v148, (uint64_t)&v145, (uint64_t)v9);
  v144 = 11;
  strcpy((char *)v143, "point_pairs");
  v10 = (_QWORD *)operator new();
  *v10 = &off_250AE0928;
  v10[1] = &v174;
  sub_23961580C((uint64_t)v148, (uint64_t)v143, (uint64_t)v10);
  v142 = 5;
  strcpy((char *)v141, "flags");
  v11 = (_QWORD *)operator new();
  *v11 = &off_250AE0958;
  v11[1] = &v171;
  sub_23961580C((uint64_t)v148, (uint64_t)v141, (uint64_t)v11);
  HIBYTE(v140[2]) = 18;
  strcpy((char *)v140, "flatten_view_pairs");
  v12 = (_QWORD *)operator new();
  *v12 = &off_250ADF7B0;
  v12[1] = &v168;
  sub_23961580C((uint64_t)v148, (uint64_t)v140, (uint64_t)v12);
  v139 = 14;
  strcpy((char *)v138, "flatten_hposes");
  v13 = (_QWORD *)operator new();
  *v13 = &off_250ADF600;
  v13[1] = &v165;
  sub_23961580C((uint64_t)v148, (uint64_t)v138, (uint64_t)v13);
  v137 = 14;
  strcpy((char *)v136, "flatten_fposes");
  v14 = (_QWORD *)operator new();
  *v14 = &off_250ADF600;
  v14[1] = &v162;
  sub_23961580C((uint64_t)v148, (uint64_t)v136, (uint64_t)v14);
  HIBYTE(v135[2]) = 19;
  strcpy((char *)v135, "flatten_point_pairs");
  v15 = (_QWORD *)operator new();
  *v15 = &off_250ADF7B0;
  v15[1] = &v156;
  sub_23961580C((uint64_t)v148, (uint64_t)v135, (uint64_t)v15);
  v134 = 13;
  strcpy((char *)v133, "flatten_flags");
  v16 = (_QWORD *)operator new();
  *v16 = &off_250ADF7B0;
  v16[1] = &v153;
  sub_23961580C((uint64_t)v148, (uint64_t)v133, (uint64_t)v16);
  HIBYTE(v132[2]) = 21;
  strcpy((char *)v132, "flatten_start_indices");
  v17 = (_QWORD *)operator new();
  *v17 = &off_250ADF7B0;
  v17[1] = &v159;
  sub_23961580C((uint64_t)v148, (uint64_t)v132, (uint64_t)v17);
  v130 = operator new(0x20uLL);
  v131 = xmmword_239EC77E0;
  strcpy((char *)v130, "flatten_all_overlap_ratios");
  v18 = (_QWORD *)operator new();
  *v18 = &off_250ADF2A0;
  v18[1] = &v150;
  sub_23961580C((uint64_t)v148, (uint64_t)&v130, (uint64_t)v18);
  if (SHIBYTE(v131) < 0)
  {
    operator delete(v130);
    if ((SHIBYTE(v132[2]) & 0x80000000) == 0)
    {
LABEL_5:
      if ((v134 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_60;
    }
  }
  else if ((SHIBYTE(v132[2]) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v132[0]);
  if ((v134 & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v135[2]) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v133[0]);
  if ((SHIBYTE(v135[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((v137 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v135[0]);
  if ((v137 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v139 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_63;
  }
LABEL_62:
  operator delete(v136[0]);
  if ((v139 & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v140[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_64;
  }
LABEL_63:
  operator delete(v138[0]);
  if ((SHIBYTE(v140[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((v142 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_65;
  }
LABEL_64:
  operator delete(v140[0]);
  if ((v142 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v144 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_66;
  }
LABEL_65:
  operator delete(v141[0]);
  if ((v144 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v147) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_67;
  }
LABEL_66:
  operator delete(v143[0]);
  if ((SHIBYTE(v147) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SBYTE7(v187[1]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_68;
  }
LABEL_67:
  operator delete(v145);
  if ((SBYTE7(v187[1]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_69:
    operator delete(*(void **)&__dst[0]);
    if ((SHIBYTE(v121) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_70;
  }
LABEL_68:
  operator delete(*(void **)&v187[0]);
  if (SBYTE7(__dst[1]) < 0)
    goto LABEL_69;
LABEL_15:
  if ((SHIBYTE(v121) & 0x80000000) == 0)
    goto LABEL_16;
LABEL_70:
  operator delete(__p);
LABEL_16:
  sub_2396134D8(a2);
  v19 = sub_23959479C((uint64_t)v148, a1);
  v20 = v19;
  if ((v19 & 1) == 0)
    goto LABEL_124;
  v118 = a2;
  if (v186 == 1)
  {
    if ((v169 - (_BYTE *)v168) >> 2 == (v160 - (_BYTE *)v159) >> 1)
    {
      v53 = (v166 - (_BYTE *)v165) >> 3;
      v111 = (v160 - (_BYTE *)v159) >> 2;
      if (v53 == 6 * v111)
      {
        if (v53 == (v163 - (_BYTE *)v162) >> 3)
        {
          if ((v157 - (_BYTE *)v156) >> 2 == (v154 - (_BYTE *)v153) >> 1)
          {
            if (v111 == (v151 - (_BYTE *)v150) >> 2)
            {
              v145 = 0;
              v146 = 0;
              v147 = 0;
              if (v160 == v159)
                goto LABEL_124;
              v105 = v19;
              v54 = 0;
              v109 = (v154 - (_BYTE *)v153) >> 2;
              v55 = (v160 - (_BYTE *)v159) >> 2;
              if (v111 <= 1)
                v55 = 1;
              v106 = v55;
              while (1)
              {
                v56 = (unsigned int *)((char *)v168 + 8 * v54);
                v117 = *v56;
                v115 = v56[1];
                memcpy(__dst, (char *)v165 + 48 * v54, sizeof(__dst));
                memcpy(v187, (char *)v162 + 48 * v54, sizeof(v187));
                v57 = v109;
                if (v54 + 1 < v111)
                  v57 = *((unsigned int *)v159 + v54 + 1);
                v113 = v54 + 1;
                v58 = 4 * v54;
                v59 = *((unsigned int *)v159 + v54);
                v60 = v57 - v59;
                if (v57 <= v59)
                {
                  sub_239A444D4((uint64_t)"unknown file", 460, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                v61 = *(_DWORD *)((char *)v150 + v58);
                v62 = v145;
                v146 = v145;
                if (0xAAAAAAAAAAAAAAABLL * ((v147 - (_BYTE *)v145) >> 2) < v60)
                {
                  if (v60 > 0x1555555555555555)
                    sub_2394189F8();
                  v145 = operator new(12 * v60);
                  v146 = v145;
                  v147 = (char *)v145 + 12 * v60;
                  if (v62)
                    operator delete(v62);
                }
                v63 = v146;
                do
                {
                  while (1)
                  {
                    v64 = (int *)((char *)v156 + 8 * v59);
                    v66 = *v64;
                    v65 = v64[1];
                    v67 = *((_DWORD *)v153 + v59);
                    if (v63 >= (_DWORD *)v147)
                      break;
                    *v63 = v66;
                    v63[1] = v65;
                    v63[2] = v67;
                    v63 += 3;
                    v146 = v63;
                    if (++v59 == v57)
                      goto LABEL_110;
                  }
                  v68 = v145;
                  v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (_BYTE *)v145) >> 2);
                  v70 = v69 + 1;
                  if (v69 + 1 > 0x1555555555555555)
                    sub_2394189F8();
                  if (0x5555555555555556 * ((v147 - (_BYTE *)v145) >> 2) > v70)
                    v70 = 0x5555555555555556 * ((v147 - (_BYTE *)v145) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((v147 - (_BYTE *)v145) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v71 = 0x1555555555555555;
                  else
                    v71 = v70;
                  if (v71)
                  {
                    if (v71 > 0x1555555555555555)
                      sub_239418A80();
                    v72 = (char *)operator new(12 * v71);
                  }
                  else
                  {
                    v72 = 0;
                  }
                  v73 = &v72[12 * v69];
                  *(_DWORD *)v73 = v66;
                  *((_DWORD *)v73 + 1) = v65;
                  *((_DWORD *)v73 + 2) = v67;
                  if (v63 == v68)
                  {
                    v77 = v63;
                    v63 = v73 + 12;
                    v145 = &v72[12 * v69];
                    v146 = v73 + 12;
                    v147 = &v72[12 * v71];
                    if (v77)
                      goto LABEL_105;
                  }
                  else
                  {
                    v74 = &v72[12 * v69];
                    do
                    {
                      v75 = *(_QWORD *)(v63 - 3);
                      v63 -= 3;
                      v76 = v63[2];
                      *(_QWORD *)(v74 - 12) = v75;
                      v74 -= 12;
                      *((_DWORD *)v74 + 2) = v76;
                    }
                    while (v63 != v68);
                    v77 = v145;
                    v63 = v73 + 12;
                    v145 = v74;
                    v146 = v73 + 12;
                    v147 = &v72[12 * v71];
                    if (v77)
LABEL_105:
                      operator delete(v77);
                  }
                  v146 = v63;
                  ++v59;
                }
                while (v59 != v57);
LABEL_110:
                __p = 0;
                v120 = 0;
                v121 = 0;
                v78 = v145;
                v79 = (char *)v63 - (_BYTE *)v145;
                if (v63 != v145)
                {
                  if (0xAAAAAAAAAAAAAAABLL * (v79 >> 2) > 0x1555555555555555)
                    sub_2394189F8();
                  __p = operator new((char *)v63 - (_BYTE *)v145);
                  v120 = __p;
                  v80 = (char *)__p + 4 * (v79 >> 2);
                  v121 = v80;
                  memcpy(__p, v78, v79);
                  v81 = 0;
                  v82 = 0;
                  v120 = v80;
                  v122 = 0;
                  v123 = __dst[0];
                  v124 = __dst[1];
                  v125 = __dst[2];
                  v126 = v187[0];
                  v127 = v187[1];
                  v128 = v187[2];
                  v129 = v61;
                  while (1)
                  {
                    v83 = v78[2];
                    if ((v83 & 0xFFFFFFFD) == 1)
                    {
                      LODWORD(v122) = ++v82;
                      if ((v83 & 0xFFFFFFFE) == 2)
                        goto LABEL_118;
                    }
                    else if ((v83 & 0xFFFFFFFE) == 2)
                    {
LABEL_118:
                      HIDWORD(v122) = ++v81;
                    }
                    v78 += 3;
                    if (v78 == v63)
                      goto LABEL_120;
                  }
                }
                v122 = 0;
                v123 = __dst[0];
                v124 = __dst[1];
                v125 = __dst[2];
                v126 = v187[0];
                v127 = v187[1];
                v128 = v187[2];
                v129 = v61;
LABEL_120:
                sub_239473F20(v118, v117, v115, (uint64_t)&__p);
                if (__p)
                {
                  v120 = __p;
                  operator delete(__p);
                }
                v54 = v113;
                if (v113 == v106)
                  goto LABEL_122;
              }
            }
            v104 = 443;
          }
          else
          {
            v104 = 442;
          }
        }
        else
        {
          v104 = 441;
        }
      }
      else
      {
        v104 = 440;
      }
    }
    else
    {
      v104 = 439;
    }
    sub_239A444D4((uint64_t)"unknown file", v104, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (!v186)
  {
    v21 = (v184 - v183) >> 3;
    if (v21 == 0xAAAAAAAAAAAAAAABLL * ((v181 - (_BYTE *)v180) >> 4))
    {
      if (v21 == 0xAAAAAAAAAAAAAAABLL * ((v178 - (_BYTE *)v177) >> 4))
      {
        if (v21 == 0xAAAAAAAAAAAAAAABLL * ((v175 - (_BYTE *)v174) >> 3))
        {
          if (v21 == 0xAAAAAAAAAAAAAAABLL * ((v172 - (_BYTE *)v171) >> 3))
          {
            v145 = 0;
            v146 = 0;
            v147 = 0;
            if (v184 != v183)
            {
              v105 = v19;
              v22 = 0;
              if (v21 <= 1)
                v21 = 1;
              v107 = v21;
              do
              {
                v116 = 3 * v22;
                v23 = (uint64_t *)((char *)v174 + 24 * v22);
                v24 = (char *)v171 + 24 * v22;
                v26 = *v23;
                v25 = v23[1];
                v27 = v25 - *v23;
                v28 = v27 >> 3;
                if (v27 >> 3 != (uint64_t)(v24[1] - *v24) >> 2)
                {
                  sub_239A444D4((uint64_t)"unknown file", 425, (uint64_t)"", (void (*)(void *))sub_239A4463C);
                  sub_239A4475C();
                  abort();
                }
                v29 = v183;
                v112 = (char *)v177;
                v114 = (char *)v180;
                v30 = v145;
                v146 = v145;
                if (0xAAAAAAAAAAAAAAABLL * ((v147 - (_BYTE *)v145) >> 2) < v28)
                {
                  if (v27 < 0)
                    sub_2394189F8();
                  v145 = operator new(12 * v28);
                  v146 = v145;
                  v147 = (char *)v145 + 12 * v28;
                  if (v30)
                    operator delete(v30);
                }
                v108 = v29;
                v110 = v22;
                if (v25 != v26)
                {
                  v31 = 0;
                  if (v28 <= 1)
                    v32 = 1;
                  else
                    v32 = v28;
                  v33 = (char *)v146;
                  do
                  {
                    while (1)
                    {
                      v34 = *(_QWORD *)(*v23 + 8 * v31);
                      v35 = *(_DWORD *)(*v24 + 4 * v31);
                      if (v33 >= v147)
                        break;
                      *(_QWORD *)v33 = v34;
                      *((_DWORD *)v33 + 2) = v35;
                      v146 = v33 + 12;
                      ++v31;
                      v33 += 12;
                      if (v31 == v32)
                        goto LABEL_56;
                    }
                    v36 = (char *)v145;
                    v37 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (_BYTE *)v145) >> 2);
                    v38 = v37 + 1;
                    if (v37 + 1 > 0x1555555555555555)
                      sub_2394189F8();
                    if (0x5555555555555556 * ((v147 - (_BYTE *)v145) >> 2) > v38)
                      v38 = 0x5555555555555556 * ((v147 - (_BYTE *)v145) >> 2);
                    if (0xAAAAAAAAAAAAAAABLL * ((v147 - (_BYTE *)v145) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                      v39 = 0x1555555555555555;
                    else
                      v39 = v38;
                    if (v39)
                    {
                      if (v39 > 0x1555555555555555)
                        sub_239418A80();
                      v40 = (char *)operator new(12 * v39);
                    }
                    else
                    {
                      v40 = 0;
                    }
                    v41 = &v40[12 * v37];
                    *(_QWORD *)v41 = v34;
                    *((_DWORD *)v41 + 2) = v35;
                    v42 = v41;
                    if (v33 != v36)
                    {
                      do
                      {
                        v43 = *(_QWORD *)(v33 - 12);
                        v33 -= 12;
                        v44 = *((_DWORD *)v33 + 2);
                        *(_QWORD *)(v42 - 12) = v43;
                        v42 -= 12;
                        *((_DWORD *)v42 + 2) = v44;
                      }
                      while (v33 != v36);
                      v33 = (char *)v145;
                    }
                    v45 = &v40[12 * v39];
                    v46 = v41 + 12;
                    v145 = v42;
                    v146 = v41 + 12;
                    v147 = v45;
                    if (v33)
                      operator delete(v33);
                    v146 = v46;
                    ++v31;
                    v33 = (char *)v46;
                  }
                  while (v31 != v32);
                }
LABEL_56:
                v47 = (__int128 *)&v112[16 * v116];
                v48 = (__int128 *)&v114[16 * v116];
                v49 = *v48;
                v50 = v48[2];
                __dst[1] = v48[1];
                __dst[2] = v50;
                __dst[0] = v49;
                v51 = *v47;
                v52 = v47[2];
                v187[1] = v47[1];
                v187[2] = v52;
                v187[0] = v51;
                sub_23960D59C((uint64_t)&__p, (uint64_t)&v145, __dst, v187);
                sub_239473F20(v118, v108[2 * v110], v108[2 * v110 + 1], (uint64_t)&__p);
                if (__p)
                {
                  v120 = __p;
                  operator delete(__p);
                }
                v22 = v110 + 1;
              }
              while (v110 + 1 != v107);
LABEL_122:
              v20 = v105;
              if (v145)
              {
                v146 = v145;
                operator delete(v145);
              }
            }
            goto LABEL_124;
          }
          v103 = 415;
        }
        else
        {
          v103 = 414;
        }
      }
      else
      {
        v103 = 413;
      }
    }
    else
    {
      v103 = 412;
    }
    sub_239A444D4((uint64_t)"unknown file", v103, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
LABEL_124:
  v84 = v20;
  v85 = v149;
  if (v149)
  {
    do
    {
      v86 = v85[5];
      if (v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
      v85 = (_QWORD *)*v85;
    }
    while (v85);
    v87 = (void **)v149;
    if (v149)
    {
      do
      {
        v93 = (void **)*v87;
        if (*((char *)v87 + 39) < 0)
          operator delete(v87[2]);
        operator delete(v87);
        v87 = v93;
      }
      while (v93);
    }
  }
  v88 = v148[0];
  v148[0] = 0;
  if (v88)
    operator delete(v88);
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  v89 = (char *)v171;
  if (v171)
  {
    v90 = v172;
    v91 = v171;
    if (v172 != v171)
    {
      v92 = v172;
      do
      {
        v95 = (void *)*((_QWORD *)v92 - 3);
        v92 -= 24;
        v94 = v95;
        if (v95)
        {
          *((_QWORD *)v90 - 2) = v94;
          operator delete(v94);
        }
        v90 = v92;
      }
      while (v92 != v89);
      v91 = v171;
    }
    v172 = v89;
    operator delete(v91);
  }
  v96 = (char *)v174;
  if (v174)
  {
    v97 = v175;
    v98 = v174;
    if (v175 != v174)
    {
      v99 = v175;
      do
      {
        v101 = (void *)*((_QWORD *)v99 - 3);
        v99 -= 24;
        v100 = v101;
        if (v101)
        {
          *((_QWORD *)v97 - 2) = v100;
          operator delete(v100);
        }
        v97 = v99;
      }
      while (v99 != v96);
      v98 = v174;
    }
    v175 = v96;
    operator delete(v98);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  v3 = v84;
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  return v3;
}

void sub_23960D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a68;
  uint64_t v68;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;

  sub_2395905C0((uint64_t)&a68);
  v70 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v70;
    operator delete(v70);
    v71 = (void *)STACK[0x220];
    if (!STACK[0x220])
    {
LABEL_3:
      v72 = (void *)STACK[0x238];
      if (!STACK[0x238])
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else
  {
    v71 = (void *)STACK[0x220];
    if (!STACK[0x220])
      goto LABEL_3;
  }
  STACK[0x228] = (unint64_t)v71;
  operator delete(v71);
  v72 = (void *)STACK[0x238];
  if (!STACK[0x238])
  {
LABEL_4:
    v73 = (void *)STACK[0x250];
    if (!STACK[0x250])
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  STACK[0x240] = (unint64_t)v72;
  operator delete(v72);
  v73 = (void *)STACK[0x250];
  if (!STACK[0x250])
  {
LABEL_5:
    v74 = (void *)STACK[0x268];
    if (!STACK[0x268])
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  STACK[0x258] = (unint64_t)v73;
  operator delete(v73);
  v74 = (void *)STACK[0x268];
  if (!STACK[0x268])
  {
LABEL_6:
    v75 = (void *)STACK[0x280];
    if (!STACK[0x280])
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  STACK[0x270] = (unint64_t)v74;
  operator delete(v74);
  v75 = (void *)STACK[0x280];
  if (!STACK[0x280])
  {
LABEL_7:
    v76 = (void *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  STACK[0x288] = (unint64_t)v75;
  operator delete(v75);
  v76 = (void *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_8:
    sub_23942A16C((void **)&STACK[0x2B0]);
    sub_23942A16C((void **)&STACK[0x2C8]);
    v77 = (void *)STACK[0x2E0];
    if (!STACK[0x2E0])
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  STACK[0x2A0] = (unint64_t)v76;
  operator delete(v76);
  sub_23942A16C((void **)&STACK[0x2B0]);
  sub_23942A16C((void **)&STACK[0x2C8]);
  v77 = (void *)STACK[0x2E0];
  if (!STACK[0x2E0])
  {
LABEL_9:
    v78 = (void *)STACK[0x2F8];
    if (!STACK[0x2F8])
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  STACK[0x2E8] = (unint64_t)v77;
  operator delete(v77);
  v78 = (void *)STACK[0x2F8];
  if (!STACK[0x2F8])
  {
LABEL_10:
    v79 = *(void **)(v68 - 256);
    if (!v79)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  STACK[0x300] = (unint64_t)v78;
  operator delete(v78);
  v79 = *(void **)(v68 - 256);
  if (!v79)
LABEL_11:
    _Unwind_Resume(a1);
LABEL_21:
  *(_QWORD *)(v68 - 248) = v79;
  operator delete(v79);
  _Unwind_Resume(a1);
}

uint64_t sub_23960D59C(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v8;
  _DWORD *v9;
  int64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = *(_DWORD **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = v8 - *(_QWORD *)a2;
  if (v8 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v10 >> 2) >= 0x1555555555555556)
      sub_2394189F8();
    v11 = (char *)operator new(v10);
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v11;
    v12 = &v11[4 * (v10 >> 2)];
    *(_QWORD *)(a1 + 16) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 8) = v12;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(a1 + 48) = a3[1];
  *(_OWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 32) = v13;
  v15 = *a4;
  v16 = a4[2];
  *(_OWORD *)(a1 + 96) = a4[1];
  *(_OWORD *)(a1 + 112) = v16;
  *(_OWORD *)(a1 + 80) = v15;
  *(_DWORD *)(a1 + 128) = 0;
  v17 = *(_DWORD **)a2;
  v18 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v18)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = v17[2];
      if ((v21 & 0xFFFFFFFD) == 1)
      {
        *(_DWORD *)(a1 + 24) = ++v20;
        if ((v21 & 0xFFFFFFFE) == 2)
LABEL_11:
          *(_DWORD *)(a1 + 28) = ++v19;
      }
      else if ((v21 & 0xFFFFFFFE) == 2)
      {
        goto LABEL_11;
      }
      v17 += 3;
    }
    while (v17 != v18);
  }
  return a1;
}

void sub_23960D6D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23960D6F4(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_23960D834(a1, i + 4, (int *)i + 4);
  return a1;
}

void sub_23960D80C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394630E4(v1);
  _Unwind_Resume(a1);
}

void sub_23960D820(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394630E4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_23960D834(uint64_t a1, unsigned int *a2, int *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  _QWORD *v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  int8x8_t v19;
  unint64_t v20;
  uint8x8_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = *v8;
      if (*v8)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v11 = result[1];
            if (v11 == v5)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v5)
                return result;
            }
            else if ((v11 & (v6 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = (uint64_t *)*result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v10 = result[1];
          if (v10 == v5)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v5)
              return result;
          }
          else
          {
            if (v10 >= v6)
              v10 %= v6;
            if (v10 != v3)
              break;
          }
          result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_23960DB60(a1, *a2, a3, (uint64_t)v24);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v12 / v13);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v19 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v19)
      goto LABEL_37;
    if (prime < *(_QWORD *)&v19)
    {
      v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v19 < 3uLL || (v21 = (uint8x8_t)vcnt_s8(v19), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        v20 = std::__next_prime(v20);
      }
      else
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
      }
      if (prime <= v20)
        prime = v20;
      if (prime < *(_QWORD *)&v19)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
      {
        v3 = v5 % v6;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v5 % v6));
        if (v14)
          goto LABEL_26;
      }
      else
      {
        v3 = v5;
        v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
        if (v14)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v6 - 1) & v5;
      v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v14)
        goto LABEL_26;
    }
LABEL_50:
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v23 >= v6)
          v23 %= v6;
      }
      else
      {
        v23 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v24[0];
    }
    goto LABEL_61;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (!v14)
    goto LABEL_50;
LABEL_26:
  *(_QWORD *)v24[0] = *v14;
  *v14 = v24[0];
LABEL_61:
  result = (uint64_t *)v24[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_23960DB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239474998((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_23960DB60@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  float result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0xA0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = *a3;
  *((_QWORD *)v8 + 3) = 0;
  *((_DWORD *)v8 + 4) = v9;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  v11 = (_BYTE *)*((_QWORD *)a3 + 1);
  v10 = (_BYTE *)*((_QWORD *)a3 + 2);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) >= 0x1555555555555556)
      sub_2394189F8();
    v13 = (char *)operator new(v12);
    *((_QWORD *)v8 + 3) = v13;
    *((_QWORD *)v8 + 4) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *((_QWORD *)v8 + 5) = v14;
    memcpy(v13, v11, v12);
    *((_QWORD *)v8 + 4) = v14;
  }
  *((_QWORD *)v8 + 6) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a3 + 10);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 + 14);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(a3 + 18);
  *(_OWORD *)(v8 + 104) = *(_OWORD *)(a3 + 22);
  *(_OWORD *)(v8 + 120) = *(_OWORD *)(a3 + 26);
  *(_OWORD *)(v8 + 136) = *(_OWORD *)(a3 + 30);
  result = *((float *)a3 + 34);
  *((float *)v8 + 38) = result;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_23960DC78(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v5;
    operator delete(v5);
  }
  sub_239474998(v1);
  _Unwind_Resume(a1);
}

void sub_23960DCA0(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_23960DCC4(uint64_t a1, uint64_t *a2, int a3)
{
  sub_23960DD40(*(__int128 ***)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_23960DD00(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23960E638(*(_QWORD *)(a1 + 8), a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t *sub_23960DD40(__int128 **a1, uint64_t *a2, int a3)
{
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  __int128 *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - *a1);
    if (HIDWORD(v7))
    {
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      BYTE7(v17) = 7;
      strcpy((char *)__p, "content");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v8 = (char *)a1[1] - (char *)*a1;
      if (v8)
      {
        v9 = 0;
        v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
        do
        {
          v17 = (unint64_t)a1;
          __p[0] = v9;
          v9 += 0x7FFFFFFF;
          if (v10 >= (unint64_t)v9)
            v10 = (unint64_t)v9;
          __p[1] = (void *)v10;
          sub_23960E170(__p, (uint64_t)a2);
          v10 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
        }
        while ((unint64_t)v9 < v10);
      }
    }
    else
    {
      sub_23960E534(v5, v6, (uint64_t)a2, v7);
    }
  }
  else
  {
    v12 = *a1;
    v11 = a1[1];
    std::ostream::put();
    if (v12 != v11)
    {
      while (1)
      {
        v13 = *v12;
        v14 = v12[2];
        v17 = v12[1];
        v18 = v14;
        *(_OWORD *)__p = v13;
        sub_2395A34D0((uint64_t)__p, (uint64_t)&v19, a2);
        v12 += 3;
        if (v12 == v11)
          break;
        std::ostream::put();
      }
    }
    std::ostream::put();
  }
  return a2;
}

void sub_23960E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23960E170(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_23960E534((__int128 *)(*v2 + 48 * *a1), (__int128 *)(*v2 + 48 * a1[1]), a2, a1[1] - *a1);
}

void sub_23960E510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23960E534(__int128 *a1, __int128 *a2, uint64_t a3, unint64_t a4)
{
  __int128 v8;
  __int128 v9;
  _QWORD *exception;
  _OWORD v12[3];
  uint64_t v13;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 3)
  {
    v8 = *a1;
    v9 = a1[2];
    v12[1] = a1[1];
    v12[2] = v9;
    v12[0] = v8;
    sub_2395DA64C((uint64_t)v12, (uint64_t)&v13, a3, 6uLL);
  }
  return 1;
}

uint64_t sub_23960E638(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  char **v12;

  v3 = (uint64_t)a2;
  v12 = (char **)a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  if (!a3)
    goto LABEL_10;
  v5 = std::istream::peek();
  v6 = v5;
  if ((v5 - 196) > 2)
  {
    if ((v5 - 220) > 3 || v5 == 222)
      return v3;
    a2 = (_QWORD *)v3;
    a3 = 1;
LABEL_10:
    sub_23960E754(&v12, a2, a3);
    return v3;
  }
  std::istream::get();
  v7 = sub_2396162D4(v3, v6) / 0x30uLL;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  v9 = v7 >= v8;
  v10 = v7 - v8;
  if (v10 != 0 && v9)
  {
    sub_23960F450((void **)a1, v10);
  }
  else if (!v9)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 48 * v7;
  }
  std::istream::read();
  return v3;
}

BOOL sub_23960E754(char ***a1, _QWORD *a2, int a3)
{
  int v4;
  unsigned int v5;
  char *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  char *v11;
  char **v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char **v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  _BOOL8 result;
  char v54;
  unsigned int v55;
  int v56;
  int v57;
  char *v58;
  char **v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  int i;
  unsigned int v75;
  char v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v86;
  _OWORD v87[4];
  void *__p;
  char v89;
  uint64_t v90;
  uint64_t v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = std::istream::get();
    if ((v4 - 196) <= 2)
    {
      v5 = sub_2396162D4((uint64_t)a2, v4);
      v86 = 0uLL;
      *(_QWORD *)&v87[0] = 0;
      sub_23960F450((void **)&v86, v5);
      std::istream::read();
      v6 = (char *)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1) != (_QWORD)v86)
      {
        v7 = 0;
        v6 = (char *)v86;
        do
        {
          v11 = &v6[48 * v7];
          v12 = *a1;
          v14 = (*a1)[1];
          v13 = (unint64_t)(*a1)[2];
          if ((unint64_t)v14 < v13)
          {
            v8 = *(_OWORD *)v11;
            v9 = *((_OWORD *)v11 + 2);
            *((_OWORD *)v14 + 1) = *((_OWORD *)v11 + 1);
            *((_OWORD *)v14 + 2) = v9;
            *(_OWORD *)v14 = v8;
            v10 = v14 + 48;
          }
          else
          {
            v15 = *v12;
            v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *v12) >> 4);
            v17 = v16 + 1;
            if (v16 + 1 > 0x555555555555555)
              sub_2394189F8();
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v15) >> 4);
            if (2 * v18 > v17)
              v17 = 2 * v18;
            if (v18 >= 0x2AAAAAAAAAAAAAALL)
              v19 = 0x555555555555555;
            else
              v19 = v17;
            if (v19)
            {
              if (v19 > 0x555555555555555)
                sub_239418A80();
              v20 = (char *)operator new(48 * v19);
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[48 * v16];
            v22 = *(_OWORD *)v11;
            v23 = *((_OWORD *)v11 + 2);
            *((_OWORD *)v21 + 1) = *((_OWORD *)v11 + 1);
            *((_OWORD *)v21 + 2) = v23;
            *(_OWORD *)v21 = v22;
            v24 = v21;
            if (v14 != v15)
            {
              do
              {
                v25 = *((_OWORD *)v14 - 3);
                v26 = *((_OWORD *)v14 - 1);
                *((_OWORD *)v24 - 2) = *((_OWORD *)v14 - 2);
                *((_OWORD *)v24 - 1) = v26;
                *((_OWORD *)v24 - 3) = v25;
                v24 -= 48;
                v14 -= 48;
              }
              while (v14 != v15);
              v14 = *v12;
            }
            v10 = v21 + 48;
            *v12 = v24;
            v12[1] = v21 + 48;
            v12[2] = &v20[48 * v19];
            if (v14)
              operator delete(v14);
          }
          v12[1] = v10;
          ++v7;
          v6 = (char *)v86;
        }
        while (v7 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v86 + 1) - v86) >> 4));
      }
      if (v6)
      {
        *((_QWORD *)&v86 + 1) = v6;
        operator delete(v6);
      }
      return 1;
    }
    if ((v4 & 0xFFFFFFFE) == 0xDC)
    {
      v35 = sub_2396162D4((uint64_t)a2, v4);
      if (v35)
      {
        v36 = 0;
        v37 = v35;
        do
        {
          *(_QWORD *)&v95[0] = &v86;
          *((_QWORD *)&v95[0] + 1) = 0;
          sub_23960F83C((uint64_t *)v95, a2, 1);
          v95[0] = v86;
          v95[1] = v87[0];
          v96 = v87[1];
          v39 = *a1;
          v41 = (*a1)[1];
          v40 = (unint64_t)(*a1)[2];
          if ((unint64_t)v41 < v40)
          {
            *(_OWORD *)v41 = v95[0];
            *((_OWORD *)v41 + 1) = v95[1];
            *((_OWORD *)v41 + 2) = v96;
            v38 = v41 + 48;
          }
          else
          {
            v42 = *v39;
            v43 = 0xAAAAAAAAAAAAAAABLL * ((v41 - *v39) >> 4);
            v44 = v43 + 1;
            if (v43 + 1 > 0x555555555555555)
              sub_2394189F8();
            v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)v42) >> 4);
            if (2 * v45 > v44)
              v44 = 2 * v45;
            if (v45 >= 0x2AAAAAAAAAAAAAALL)
              v46 = 0x555555555555555;
            else
              v46 = v44;
            if (v46)
            {
              if (v46 > 0x555555555555555)
                sub_239418A80();
              v47 = (char *)operator new(48 * v46);
            }
            else
            {
              v47 = 0;
            }
            v48 = &v47[48 * v43];
            v49 = v95[1];
            *(_OWORD *)v48 = v95[0];
            *((_OWORD *)v48 + 1) = v49;
            *((_OWORD *)v48 + 2) = v96;
            v50 = v48;
            if (v41 != v42)
            {
              do
              {
                v51 = *((_OWORD *)v41 - 3);
                v52 = *((_OWORD *)v41 - 1);
                *((_OWORD *)v50 - 2) = *((_OWORD *)v41 - 2);
                *((_OWORD *)v50 - 1) = v52;
                *((_OWORD *)v50 - 3) = v51;
                v50 -= 48;
                v41 -= 48;
              }
              while (v41 != v42);
              v41 = *v39;
            }
            v38 = v48 + 48;
            *v39 = v50;
            v39[1] = v48 + 48;
            v39[2] = &v47[48 * v46];
            if (v41)
              operator delete(v41);
          }
          v39[1] = v38;
          ++v36;
        }
        while (v36 != v37);
      }
      return 1;
    }
    if (v4 == 223)
    {
      LODWORD(v91[0]) = 0;
      memset(v95, 0, 24);
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v27 = a2 + 4;
  v28 = MEMORY[0x24BDAC740];
  while (1)
  {
    v29 = std::istream::peek();
    if (v29 <= 0x7F)
      break;
    v30 = __maskrune(v29, 0x4000uLL);
    v31 = *(_QWORD *)(*a2 - 24);
    if (!v30)
      goto LABEL_30;
LABEL_28:
    if (!*(_DWORD *)((char *)v27 + v31))
      std::istream::get();
  }
  v31 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v28 + 4 * v29 + 60) & 0x4000) != 0)
    goto LABEL_28;
LABEL_30:
  if ((*((_BYTE *)a2 + v31 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v32 = std::istream::peek();
    if (v32 > 0x7F)
    {
      v33 = __maskrune(v32, 0x4000uLL);
      v34 = *(_QWORD *)(*a2 - 24);
      if (!v33)
        break;
      goto LABEL_36;
    }
    v34 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v28 + 4 * v32 + 60) & 0x4000) != 0)
    {
LABEL_36:
      if (!*(_DWORD *)((char *)v27 + v34))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v34 + 32) & 2) != 0)
    return 0;
  v54 = 0;
  v84 = *MEMORY[0x24BEDB7F0];
  v82 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v83 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v81 = MEMORY[0x24BEDB848] + 16;
LABEL_65:
  if ((*((_BYTE *)v27 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v54 & 1) == 0)
  {
    while (1)
    {
      v55 = std::istream::peek();
      if (v55 <= 0x7F)
      {
        v57 = *(_DWORD *)((char *)v27 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v28 + 4 * v55 + 60) & 0x4000) == 0)
        {
LABEL_73:
          if ((v57 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v86);
          if (sub_239596128(a2))
          {
            v58 = (char *)v87 + *(_QWORD *)(*(_QWORD *)&v87[0] - 24);
            if ((v58[32] & 5) == 0)
            {
              (*(void (**)(_OWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v58 + 5)
                                                                                             + 32))(v95, *((_QWORD *)v58 + 5), 0, 1, 16);
              if (v97 >= 1)
              {
                v91[0] = (uint64_t)v95;
                v91[1] = 0;
                sub_23960F83C(v91, &v86, 0);
                v92 = v95[0];
                v93 = v95[1];
                v94 = v96;
                v59 = *a1;
                v61 = (*a1)[1];
                v60 = (unint64_t)(*a1)[2];
                if ((unint64_t)v61 >= v60)
                {
                  v63 = *v59;
                  v64 = 0xAAAAAAAAAAAAAAABLL * ((v61 - *v59) >> 4);
                  v65 = v64 + 1;
                  v66 = 0x555555555555555;
                  if (v64 + 1 > 0x555555555555555)
                    sub_2394189F8();
                  v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (_QWORD)v63) >> 4);
                  if (2 * v67 > v65)
                    v65 = 2 * v67;
                  if (v67 < 0x2AAAAAAAAAAAAAALL)
                    v66 = v65;
                  if (v66)
                  {
                    if (v66 > 0x555555555555555)
                      sub_239418A80();
                    v80 = v66;
                    v68 = (char *)operator new(48 * v66);
                    v66 = v80;
                  }
                  else
                  {
                    v68 = 0;
                  }
                  v69 = &v68[48 * v64];
                  v70 = v93;
                  *(_OWORD *)v69 = v92;
                  *((_OWORD *)v69 + 1) = v70;
                  *((_OWORD *)v69 + 2) = v94;
                  v71 = v69;
                  if (v61 != v63)
                  {
                    do
                    {
                      v72 = *((_OWORD *)v61 - 3);
                      v73 = *((_OWORD *)v61 - 1);
                      *((_OWORD *)v71 - 2) = *((_OWORD *)v61 - 2);
                      *((_OWORD *)v71 - 1) = v73;
                      *((_OWORD *)v71 - 3) = v72;
                      v71 -= 48;
                      v61 -= 48;
                    }
                    while (v61 != v63);
                    v61 = *v59;
                  }
                  v62 = v69 + 48;
                  *v59 = v71;
                  v59[1] = v69 + 48;
                  v59[2] = &v68[48 * v66];
                  if (v61)
                    operator delete(v61);
                }
                else
                {
                  *(_OWORD *)v61 = v92;
                  *((_OWORD *)v61 + 1) = v93;
                  *((_OWORD *)v61 + 2) = v94;
                  v62 = v61 + 48;
                }
                v59[1] = v62;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v75 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_104;
              if (v75 == 1560281088)
                break;
              if (v75 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v28 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_103;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_103;
              }
              if ((*((_BYTE *)v27 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_103:
                if (v75 != 738197504)
                  goto LABEL_105;
LABEL_104:
                std::istream::get();
                v54 = 0;
                goto LABEL_107;
              }
              std::istream::get();
            }
            v54 = 1;
LABEL_107:
            v76 = 1;
          }
          else
          {
LABEL_105:
            v76 = 0;
            v54 = 0;
          }
          *(_QWORD *)&v86 = v84;
          *(_QWORD *)((char *)&v87[-1] + *(_QWORD *)(v84 - 24)) = v83;
          *(_QWORD *)&v87[0] = v82;
          *((_QWORD *)&v87[0] + 1) = v81;
          if (v89 < 0)
            operator delete(__p);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v90);
          result = 0;
          if ((v76 & 1) == 0)
            return result;
          goto LABEL_65;
        }
      }
      else
      {
        v56 = __maskrune(v55, 0x4000uLL);
        v57 = *(_DWORD *)((char *)v27 + *(_QWORD *)(*a2 - 24));
        if (!v56)
          goto LABEL_73;
      }
      if (!v57)
        std::istream::get();
    }
  }
  while (1)
  {
    v77 = std::istream::peek();
    v78 = v77 <= 0x7F ? *(_DWORD *)(v28 + 4 * v77 + 60) & 0x4000 : __maskrune(v77, 0x4000uLL);
    v79 = *(_QWORD *)(*a2 - 24);
    if (!v78)
      break;
    if (!*(_DWORD *)((char *)v27 + v79))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v79 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_23960F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58)
{
  uint64_t v58;

  if (*(char *)(v58 - 217) < 0)
  {
    operator delete(*(void **)(v58 - 240));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23960F450(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    a1[1] = &v5[48 * (48 * a2 / 0x30)];
  }
  else
  {
    v6 = (char *)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        sub_239418A80();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[48 * v7];
    v13 = &v12[48 * (48 * a2 / 0x30)];
    if (v5 != v6)
    {
      do
      {
        v14 = *((_OWORD *)v5 - 3);
        v15 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v12 - 1) = v15;
        *((_OWORD *)v12 - 3) = v14;
        v12 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[48 * v10];
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_23960F5C0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_23960F81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_23960F83C(uint64_t *a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL8 result;
  char v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  char *v29;
  unint64_t v30;
  int i;
  unsigned int v32;
  char v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _QWORD v42[11];
  char v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      v40 = 0;
      v41 = 0;
      v42[0] = 0;
      sub_23945E108((uint64_t)&v40, v6);
      std::istream::read();
      v7 = v40;
      if (v41 != v40)
      {
        v8 = (v41 - v40) >> 3;
        v9 = *a1;
        v10 = a1[1];
        if (v8 <= 1)
          v8 = 1;
        v11 = v40;
        do
        {
          if (v10 <= 5)
            *(_QWORD *)(v9 + 8 * v10) = *v11;
          ++v10;
          ++v11;
          --v8;
        }
        while (v8);
        a1[1] = v10;
      }
      if (v7)
      {
        v41 = v7;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v20 = sub_2396162D4((uint64_t)a2, v5);
      if (v20)
      {
        v21 = v20;
        do
        {
          v40 = 0;
          sub_2395A1290((uint64_t)&v40, (uint64_t)a2, 1);
          v22 = a1[1];
          if (v22 <= 5)
            *(_QWORD *)(*a1 + 8 * v22) = v40;
          a1[1] = v22 + 1;
          --v21;
        }
        while (v21);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v46 = 0;
      memset(&v47, 0, sizeof(v47));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
    }
    return 0;
  }
  v12 = a2 + 4;
  v13 = MEMORY[0x24BDAC740];
  while (1)
  {
    v14 = std::istream::peek();
    if (v14 <= 0x7F)
      break;
    v15 = __maskrune(v14, 0x4000uLL);
    v16 = *(_QWORD *)(*a2 - 24);
    if (!v15)
      goto LABEL_17;
LABEL_15:
    if (!*(_DWORD *)((char *)v12 + v16))
      std::istream::get();
  }
  v16 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) != 0)
    goto LABEL_15;
LABEL_17:
  if ((*((_BYTE *)a2 + v16 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v17 = std::istream::peek();
    if (v17 > 0x7F)
    {
      v18 = __maskrune(v17, 0x4000uLL);
      v19 = *(_QWORD *)(*a2 - 24);
      if (!v18)
        break;
      goto LABEL_23;
    }
    v19 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v13 + 4 * v17 + 60) & 0x4000) != 0)
    {
LABEL_23:
      if (!*(_DWORD *)((char *)v12 + v19))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v19 + 32) & 2) != 0)
    return 0;
  v24 = 0;
  v25 = (_BYTE *)*MEMORY[0x24BEDB7F0];
  v38 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v39 = *(_BYTE **)(MEMORY[0x24BEDB7F0] + 64);
  v37 = MEMORY[0x24BEDB848] + 16;
LABEL_38:
  if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v24 & 1) == 0)
  {
    while (1)
    {
      v26 = std::istream::peek();
      if (v26 <= 0x7F)
      {
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
LABEL_46:
          if ((v28 & 2) != 0)
            return 0;
          sub_2394988CC((uint64_t)&v40);
          v45 = v42;
          if (sub_239596128(a2))
          {
            v29 = (char *)v42 + *(_QWORD *)(v42[0] - 24);
            if ((v29[32] & 5) == 0)
            {
              (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v29 + 5)
                                                                                                  + 32))(&v47, *((_QWORD *)v29 + 5), 0, 1, 16);
              if (v48 >= 1)
              {
                v47.__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x23B83DCEC](&v40, &v47);
                v30 = a1[1];
                if (v30 <= 5)
                  *(_QWORD *)(*a1 + 8 * v30) = v47.__r_.__value_.__r.__words[0];
                a1[1] = v30 + 1;
              }
            }
            for (i = std::istream::peek(); ; i = std::istream::peek())
            {
              v32 = i << 24;
              if (i << 24 == 738197504)
                goto LABEL_63;
              if (v32 == 1560281088)
                break;
              if (v32 <= 0x7F000000)
              {
                if ((*(_DWORD *)(v13 + 4 * (char)i + 60) & 0x4000) == 0)
                  goto LABEL_62;
              }
              else if (!__maskrune((char)i, 0x4000uLL))
              {
                goto LABEL_62;
              }
              if ((*((_BYTE *)v12 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
              {
LABEL_62:
                if (v32 != 738197504)
                  goto LABEL_64;
LABEL_63:
                std::istream::get();
                v24 = 0;
                goto LABEL_66;
              }
              std::istream::get();
            }
            v24 = 1;
LABEL_66:
            v33 = 1;
          }
          else
          {
LABEL_64:
            v33 = 0;
            v24 = 0;
          }
          v40 = v25;
          *(_BYTE **)((char *)&v40 + *((_QWORD *)v25 - 3)) = v39;
          v42[0] = v38;
          v42[1] = v37;
          if (v43 < 0)
            operator delete((void *)v42[9]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x23B83E250](&v44);
          result = 0;
          if ((v33 & 1) == 0)
            return result;
          goto LABEL_38;
        }
      }
      else
      {
        v27 = __maskrune(v26, 0x4000uLL);
        v28 = *(_DWORD *)((char *)v12 + *(_QWORD *)(*a2 - 24));
        if (!v27)
          goto LABEL_46;
      }
      if (!v28)
        std::istream::get();
    }
  }
  while (1)
  {
    v34 = std::istream::peek();
    v35 = v34 <= 0x7F ? *(_DWORD *)(v13 + 4 * v34 + 60) & 0x4000 : __maskrune(v34, 0x4000uLL);
    v36 = *(_QWORD *)(*a2 - 24);
    if (!v35)
      break;
    if (!*(_DWORD *)((char *)v12 + v36))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v36 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_23960FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  uint64_t v51;

  if (*(char *)(v51 - 209) < 0)
  {
    operator delete(*(void **)(v51 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23961008C(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_2396100B0(uint64_t a1, _QWORD *a2, int a3)
{
  sub_23961012C(*(uint64_t ***)(a1 + 8), (uint64_t)a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_2396100EC(uint64_t a1, _QWORD *a2, int a3)
{
  sub_2396109F8(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

uint64_t sub_23961012C(uint64_t **a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 __p;
  uint64_t **v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;

  if (a3)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 - *a1);
    if (HIDWORD(v7))
    {
      std::ostream::put();
      v8 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
      if (0x7FFFFFFF * (unint64_t)(v8 / 0x7FFFFFFF) >= v8)
        v9 = v8 / 0x7FFFFFFF;
      else
        v9 = v8 / 0x7FFFFFFF + 1;
      v24 = 2;
      v25 = v9;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v22) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v26 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v10 = (char *)a1[1] - (char *)*a1;
      if (v10)
      {
        v11 = 0;
        v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
        do
        {
          v22 = a1;
          v23 = 0;
          *(_QWORD *)&__p = v11;
          v11 += 0x7FFFFFFFLL;
          if (v12 >= v11)
            v12 = v11;
          *((_QWORD *)&__p + 1) = v12;
          sub_23961054C(&__p, a2);
          v12 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
        }
        while (v11 < v12);
      }
    }
    else
    {
      sub_239610910(v5, v6, a2, v7);
    }
  }
  else
  {
    v14 = *a1;
    v13 = a1[1];
    std::ostream::put();
    if (v14 != v13)
    {
      v15 = *v14;
      v16 = v14[1];
      v17 = v14 + 3;
      sub_2395EFD98(v15, v16);
      while (v17 != v13)
      {
        std::ostream::put();
        v18 = *v17;
        v19 = v17[1];
        v17 += 3;
        sub_2395EFD98(v18, v19);
      }
    }
    std::ostream::put();
  }
  return a2;
}

void sub_239610528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23961054C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_239610910((uint64_t *)(*v2 + 24 * *a1), (uint64_t *)(*v2 + 24 * a1[1]), a2, a1[1] - *a1);
}

void sub_2396108EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239610910(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 3)
    sub_2395EF504(a1, a3, 1);
  return 1;
}

uint64_t sub_2396109F8(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char **v23;

  v23 = (char **)a1;
  v7 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  if (v6 != *(char **)a1)
  {
    v8 = *(char **)(a1 + 8);
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 2) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (!a3)
  {
    v16 = (_QWORD *)a2;
    v17 = 0;
    goto LABEL_14;
  }
  v11 = std::istream::peek();
  v12 = v11;
  if ((v11 - 196) > 2)
  {
    if ((v11 - 220) > 3 || v11 == 222)
      return a2;
    v16 = (_QWORD *)a2;
    v17 = 1;
LABEL_14:
    sub_239610B6C(&v23, v16, v17);
    return a2;
  }
  std::istream::get();
  v13 = sub_2396162D4(a2, v12) / 0x18uLL;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *(_QWORD *)a1) >> 3);
  if (v13 <= v15)
  {
    if (v13 < v15)
    {
      v18 = *(_QWORD *)a1 + 24 * v13;
      if (v14 != v18)
      {
        v19 = *(_QWORD *)(a1 + 8);
        do
        {
          v21 = *(void **)(v19 - 24);
          v19 -= 24;
          v20 = v21;
          if (v21)
          {
            *(_QWORD *)(v14 - 16) = v20;
            operator delete(v20);
          }
          v14 = v19;
        }
        while (v19 != v18);
      }
      *(_QWORD *)(a1 + 8) = v18;
    }
  }
  else
  {
    sub_2394D951C(a1, v13 - v15);
  }
  std::istream::read();
  return a2;
}

BOOL sub_239610B6C(char ***a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  const void **v12;
  char **v13;
  char *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char **v30;
  char *v31;
  void *v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  char *v36;
  char v37;
  void *v38;
  _BOOL8 result;
  unsigned int v40;
  int v41;
  int v42;
  char *v43;
  int i;
  unsigned int v45;
  char v46;
  char **v47;
  char *v48;
  size_t v49;
  char *v50;
  char *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  char *v55;
  void *v56;
  void *v57;
  int64_t v58;
  const void *v59;
  char **v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *__p;
  char *v65;
  _QWORD v66[11];
  char v67;
  uint64_t v68;
  std::string *v69;
  int v70;
  std::string v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      __p = 0;
      v65 = 0;
      v66[0] = 0;
      sub_2394D951C((uint64_t)&__p, v6);
      std::istream::read();
      v8 = (char *)__p;
      v7 = v65;
      if (v65 == __p)
      {
        v8 = v65;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v12 = (const void **)&v8[v9];
          v13 = *a1;
          v14 = (*a1)[1];
          if (v14 >= (*a1)[2])
          {
            v11 = sub_2396119B8(*a1, (uint64_t)v12);
          }
          else
          {
            *(_QWORD *)v14 = 0;
            *((_QWORD *)v14 + 1) = 0;
            *((_QWORD *)v14 + 2) = 0;
            v16 = *v12;
            v15 = v12[1];
            v17 = v15 - (_BYTE *)*v12;
            if (v15 != *v12)
            {
              if (v17 < 0)
                sub_2394189F8();
              v18 = (char *)operator new(v15 - (_BYTE *)*v12);
              *(_QWORD *)v14 = v18;
              *((_QWORD *)v14 + 1) = v18;
              *((_QWORD *)v14 + 2) = &v18[8 * (v17 >> 3)];
              v19 = v17 & 0xFFFFFFFFFFFFFFF8;
              memcpy(v18, v16, v19);
              *((_QWORD *)v14 + 1) = &v18[v19];
            }
            v11 = v14 + 24;
            v13[1] = v14 + 24;
          }
          v13[1] = v11;
          ++v10;
          v8 = (char *)__p;
          v7 = v65;
          v9 += 24;
        }
        while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v65 - (_BYTE *)__p) >> 3));
      }
      if (v8)
      {
        if (v7 != v8)
        {
          v55 = v7;
          do
          {
            v57 = (void *)*((_QWORD *)v55 - 3);
            v55 -= 24;
            v56 = v57;
            if (v57)
            {
              *((_QWORD *)v7 - 2) = v56;
              operator delete(v56);
            }
            v7 = v55;
          }
          while (v55 != v8);
          v7 = (char *)__p;
        }
        v65 = v8;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v28 = sub_2396162D4((uint64_t)a2, v5);
      if (v28)
      {
        v29 = v28;
        do
        {
          __p = 0;
          v65 = 0;
          v66[0] = 0;
          sub_2395F0D9C((uint64_t)&__p, a2, 1);
          v30 = *a1;
          v31 = (*a1)[1];
          if (v31 >= (*a1)[2])
          {
            v36 = sub_2396119B8(*a1, (uint64_t)&__p);
          }
          else
          {
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_QWORD *)v31 + 2) = 0;
            v32 = __p;
            v33 = v65 - (_BYTE *)__p;
            if (v65 != __p)
            {
              if (v33 < 0)
                sub_2394189F8();
              v34 = (char *)operator new(v65 - (_BYTE *)__p);
              *(_QWORD *)v31 = v34;
              *((_QWORD *)v31 + 1) = v34;
              *((_QWORD *)v31 + 2) = &v34[8 * (v33 >> 3)];
              v35 = v33 & 0xFFFFFFFFFFFFFFF8;
              memcpy(v34, v32, v35);
              *((_QWORD *)v31 + 1) = &v34[v35];
            }
            v36 = v31 + 24;
            v30[1] = v31 + 24;
          }
          v30[1] = v36;
          if (__p)
          {
            v65 = (char *)__p;
            operator delete(__p);
          }
          --v29;
        }
        while (v29);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v70 = 0;
      memset(&v71, 0, sizeof(v71));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  v20 = a2 + 4;
  v21 = MEMORY[0x24BDAC740];
  while (1)
  {
    v22 = std::istream::peek();
    if (v22 <= 0x7F)
      break;
    v23 = __maskrune(v22, 0x4000uLL);
    v24 = *(_QWORD *)(*a2 - 24);
    if (!v23)
      goto LABEL_19;
LABEL_17:
    if (!*(_DWORD *)((char *)v20 + v24))
      std::istream::get();
  }
  v24 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v21 + 4 * v22 + 60) & 0x4000) != 0)
    goto LABEL_17;
LABEL_19:
  if ((*((_BYTE *)a2 + v24 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v25 = std::istream::peek();
    if (v25 > 0x7F)
    {
      v26 = __maskrune(v25, 0x4000uLL);
      v27 = *(_QWORD *)(*a2 - 24);
      if (!v26)
        break;
      goto LABEL_25;
    }
    v27 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v21 + 4 * v25 + 60) & 0x4000) != 0)
    {
LABEL_25:
      if (!*(_DWORD *)((char *)v20 + v27))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v27 + 32) & 2) != 0)
    return 0;
  v37 = 0;
  v38 = (void *)*MEMORY[0x24BEDB7F0];
  v62 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v63 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v61 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v20 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v37 & 1) == 0)
  {
    while (1)
    {
      v40 = std::istream::peek();
      if (v40 <= 0x7F)
        break;
      v41 = __maskrune(v40, 0x4000uLL);
      v42 = *(_DWORD *)((char *)v20 + *(_QWORD *)(*a2 - 24));
      if (!v41)
        goto LABEL_50;
LABEL_48:
      if (!v42)
        std::istream::get();
    }
    v42 = *(_DWORD *)((char *)v20 + *(_QWORD *)(*a2 - 24));
    if ((*(_DWORD *)(v21 + 4 * v40 + 60) & 0x4000) != 0)
      goto LABEL_48;
LABEL_50:
    if ((v42 & 2) != 0)
      return 0;
    sub_2394988CC((uint64_t)&__p);
    if (sub_239596128(a2))
    {
      v43 = (char *)v66 + *(_QWORD *)(v66[0] - 24);
      if ((v43[32] & 5) == 0)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v43 + 5)
                                                                                            + 32))(&v71, *((_QWORD *)v43 + 5), 0, 1, 16);
        if (v72 >= 1)
        {
          memset(&v71, 0, sizeof(v71));
          v69 = &v71;
          sub_2395F0E9C((char ***)&v69, &__p, 0);
          v47 = *a1;
          v48 = (*a1)[1];
          if (v48 >= (*a1)[2])
          {
            v51 = sub_2396119B8(*a1, (uint64_t)&v71);
          }
          else
          {
            *(_QWORD *)v48 = 0;
            *((_QWORD *)v48 + 1) = 0;
            *((_QWORD *)v48 + 2) = 0;
            v59 = (const void *)v71.__r_.__value_.__r.__words[0];
            v60 = v47;
            v49 = v71.__r_.__value_.__l.__size_ - v71.__r_.__value_.__r.__words[0];
            if (v71.__r_.__value_.__l.__size_ != v71.__r_.__value_.__r.__words[0])
            {
              if ((v49 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v58 = v71.__r_.__value_.__l.__size_ - v71.__r_.__value_.__r.__words[0];
              v50 = (char *)operator new(v49);
              *(_QWORD *)v48 = v50;
              *((_QWORD *)v48 + 1) = v50;
              *((_QWORD *)v48 + 2) = &v50[8 * (v58 >> 3)];
              v58 &= 0xFFFFFFFFFFFFFFF8;
              memcpy(v50, v59, v58);
              *((_QWORD *)v48 + 1) = &v50[v58];
            }
            v51 = v48 + 24;
            v47 = v60;
            v60[1] = v48 + 24;
          }
          v47[1] = v51;
          if (v71.__r_.__value_.__r.__words[0])
          {
            v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
            operator delete(v71.__r_.__value_.__l.__data_);
          }
        }
      }
      for (i = std::istream::peek(); ; i = std::istream::peek())
      {
        v45 = i << 24;
        if (i << 24 == 738197504)
          goto LABEL_63;
        if (v45 == 1560281088)
          break;
        if (v45 <= 0x7F000000)
        {
          if ((*(_DWORD *)(v21 + 4 * (char)i + 60) & 0x4000) == 0)
            goto LABEL_62;
        }
        else if (!__maskrune((char)i, 0x4000uLL))
        {
          goto LABEL_62;
        }
        if ((*((_BYTE *)v20 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        {
LABEL_62:
          if (v45 != 738197504)
            goto LABEL_64;
LABEL_63:
          std::istream::get();
          v37 = 0;
          goto LABEL_66;
        }
        std::istream::get();
      }
      v37 = 1;
LABEL_66:
      v46 = 1;
    }
    else
    {
LABEL_64:
      v46 = 0;
      v37 = 0;
    }
    __p = v38;
    *(void **)((char *)&__p + *((_QWORD *)v38 - 3)) = v63;
    v66[0] = v62;
    v66[1] = v61;
    if (v67 < 0)
      operator delete((void *)v66[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](&v68);
    result = 0;
    if ((v46 & 1) == 0)
      return result;
  }
  while (1)
  {
    v52 = std::istream::peek();
    v53 = v52 <= 0x7F ? *(_DWORD *)(v21 + 4 * v52 + 60) & 0x4000 : __maskrune(v52, 0x4000uLL);
    v54 = *(_QWORD *)(*a2 - 24);
    if (!v53)
      break;
    if (!*(_DWORD *)((char *)v20 + v54))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v54 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2396115A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 209) < 0)
  {
    operator delete(*(void **)(v54 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239611700(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_239611998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_2396119B8(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  const void *v13;
  int64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  v12 = v10 + 8;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v13 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_2394189F8();
    v15 = (char *)operator new(v14);
    *(_QWORD *)v10 = v15;
    *v12 = v15;
    *((_QWORD *)v10 + 2) = &v15[8 * (v14 >> 3)];
    v16 = v14 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v15, v13, v16);
    *v12 = &v15[v16];
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_239611BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239611BD4(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

BOOL sub_239611BF8(uint64_t a1, _QWORD *a2, int a3)
{
  sub_239611C74(*(_QWORD *)(a1 + 8), a2, a3);
  return *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) == 0;
}

BOOL sub_239611C34(uint64_t a1, _QWORD *a2, int a3)
{
  sub_239612550(*(_QWORD *)(a1 + 8), (uint64_t)a2, a3);
  return (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
}

_QWORD *sub_239611C74(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *i;
  __int128 __p;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if (a3)
  {
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD **)(a1 + 8);
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a1) >> 3);
    if (HIDWORD(v7))
    {
      std::ostream::put();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
      if (0x7FFFFFFF * (unint64_t)(v8 / 0x7FFFFFFF) >= v8)
        v9 = v8 / 0x7FFFFFFF;
      else
        v9 = v8 / 0x7FFFFFFF + 1;
      v20 = 2;
      v21 = v9;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "type");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      strcpy((char *)&__p, "vector_chunks");
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      HIBYTE(v18) = 7;
      strcpy((char *)&__p, "content");
      std::ostream::put();
      v22 = 7;
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::put();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      std::ostream::write();
      v10 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
      if (v10)
      {
        v11 = 0;
        v12 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
        do
        {
          v18 = a1;
          v19 = 0;
          *(_QWORD *)&__p = v11;
          v11 += 0x7FFFFFFFLL;
          if (v12 >= v11)
            v12 = v11;
          *((_QWORD *)&__p + 1) = v12;
          sub_2396120A4(&__p, a2);
          v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
        }
        while (v11 < v12);
      }
    }
    else
    {
      sub_239612468(v5, v6, a2, v7);
    }
  }
  else
  {
    v13 = *(_QWORD **)a1;
    v14 = *(_QWORD **)(a1 + 8);
    std::ostream::put();
    if (v13 != v14)
    {
      sub_2395AF49C(v13, a2, 0);
      for (i = v13 + 3; i != v14; i += 3)
      {
        std::ostream::put();
        sub_2395AF49C(i, a2, 0);
      }
    }
    std::ostream::put();
  }
  return a2;
}

void sub_239612080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396120A4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  char __p[23];
  char v7;
  int v8;
  int v9;

  v2 = (_QWORD *)a1[2];
  if (!v2)
    return 0;
  std::ostream::put();
  v8 = 3;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  strcpy(__p, "start");
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::put();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  v7 = 7;
  strcpy(__p, "content");
  std::ostream::put();
  v9 = 7;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return sub_239612468((_QWORD *)(*v2 + 24 * *a1), (_QWORD *)(*v2 + 24 * a1[1]), a2, a1[1] - *a1);
}

void sub_239612444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239612468(_QWORD *a1, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *exception;

  std::ostream::put();
  if (HIDWORD(a4))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = MEMORY[0x24BEDB8F0] + 16;
    __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
  }
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  for (; a1 != a2; a1 += 3)
    sub_2395AF49C(a1, a3, 1);
  return 1;
}

uint64_t sub_239612550(uint64_t a1, uint64_t a2, int a3)
{
  char *v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char **v23;

  v23 = (char **)a1;
  v7 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  if (v6 != *(char **)a1)
  {
    v8 = *(char **)(a1 + 8);
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v6 - 2) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (!a3)
  {
    v16 = (_QWORD *)a2;
    v17 = 0;
    goto LABEL_14;
  }
  v11 = std::istream::peek();
  v12 = v11;
  if ((v11 - 196) > 2)
  {
    if ((v11 - 220) > 3 || v11 == 222)
      return a2;
    v16 = (_QWORD *)a2;
    v17 = 1;
LABEL_14:
    sub_2396126C4(&v23, v16, v17);
    return a2;
  }
  std::istream::get();
  v13 = sub_2396162D4(a2, v12) / 0x18uLL;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *(_QWORD *)a1) >> 3);
  if (v13 <= v15)
  {
    if (v13 < v15)
    {
      v18 = *(_QWORD *)a1 + 24 * v13;
      if (v14 != v18)
      {
        v19 = *(_QWORD *)(a1 + 8);
        do
        {
          v21 = *(void **)(v19 - 24);
          v19 -= 24;
          v20 = v21;
          if (v21)
          {
            *(_QWORD *)(v14 - 16) = v20;
            operator delete(v20);
          }
          v14 = v19;
        }
        while (v19 != v18);
      }
      *(_QWORD *)(a1 + 8) = v18;
    }
  }
  else
  {
    sub_2394D951C(a1, v13 - v15);
  }
  std::istream::read();
  return a2;
}

BOOL sub_2396126C4(char ***a1, _QWORD *a2, int a3)
{
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  const void **v12;
  char **v13;
  char *v14;
  _BYTE *v15;
  const void *v16;
  int64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char **v30;
  char *v31;
  void *v32;
  int64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char v37;
  void *v38;
  _BOOL8 result;
  unsigned int v40;
  int v41;
  int v42;
  char *v43;
  int i;
  unsigned int v45;
  char v46;
  char **v47;
  char *v48;
  size_t v49;
  char *v50;
  char *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  char *v55;
  void *v56;
  void *v57;
  char *v58;
  int64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *__p;
  char *v65;
  _QWORD v66[11];
  char v67;
  uint64_t v68;
  std::string *v69;
  int v70;
  std::string v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = std::istream::get();
    if ((v5 - 196) <= 2)
    {
      v6 = sub_2396162D4((uint64_t)a2, v5);
      __p = 0;
      v65 = 0;
      v66[0] = 0;
      sub_2394D951C((uint64_t)&__p, v6);
      std::istream::read();
      v8 = (char *)__p;
      v7 = v65;
      if (v65 == __p)
      {
        v8 = v65;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v12 = (const void **)&v8[v9];
          v13 = *a1;
          v14 = (*a1)[1];
          if (v14 >= (*a1)[2])
          {
            v11 = sub_2395BB144(*a1, (uint64_t)v12);
          }
          else
          {
            *(_QWORD *)v14 = 0;
            *((_QWORD *)v14 + 1) = 0;
            *((_QWORD *)v14 + 2) = 0;
            v16 = *v12;
            v15 = v12[1];
            v17 = v15 - (_BYTE *)*v12;
            if (v15 != *v12)
            {
              if (v17 < 0)
                sub_2394189F8();
              v18 = (char *)operator new(v15 - (_BYTE *)*v12);
              *(_QWORD *)v14 = v18;
              *((_QWORD *)v14 + 1) = v18;
              v19 = &v18[4 * (v17 >> 2)];
              *((_QWORD *)v14 + 2) = v19;
              memcpy(v18, v16, v17);
              *((_QWORD *)v14 + 1) = v19;
            }
            v11 = v14 + 24;
            v13[1] = v14 + 24;
          }
          v13[1] = v11;
          ++v10;
          v8 = (char *)__p;
          v7 = v65;
          v9 += 24;
        }
        while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v65 - (_BYTE *)__p) >> 3));
      }
      if (v8)
      {
        if (v7 != v8)
        {
          v55 = v7;
          do
          {
            v57 = (void *)*((_QWORD *)v55 - 3);
            v55 -= 24;
            v56 = v57;
            if (v57)
            {
              *((_QWORD *)v7 - 2) = v56;
              operator delete(v56);
            }
            v7 = v55;
          }
          while (v55 != v8);
          v7 = (char *)__p;
        }
        v65 = v8;
        operator delete(v7);
      }
      return 1;
    }
    if ((v5 & 0xFFFFFFFE) == 0xDC)
    {
      v28 = sub_2396162D4((uint64_t)a2, v5);
      if (v28)
      {
        v29 = v28;
        do
        {
          __p = 0;
          v65 = 0;
          v66[0] = 0;
          sub_2395AFD54(&__p, a2, 1);
          v30 = *a1;
          v31 = (*a1)[1];
          if (v31 >= (*a1)[2])
          {
            v36 = sub_2395BB144(*a1, (uint64_t)&__p);
          }
          else
          {
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_QWORD *)v31 + 2) = 0;
            v32 = __p;
            v33 = v65 - (_BYTE *)__p;
            if (v65 != __p)
            {
              if (v33 < 0)
                sub_2394189F8();
              v34 = (char *)operator new(v65 - (_BYTE *)__p);
              *(_QWORD *)v31 = v34;
              *((_QWORD *)v31 + 1) = v34;
              v35 = &v34[4 * (v33 >> 2)];
              *((_QWORD *)v31 + 2) = v35;
              memcpy(v34, v32, v33);
              *((_QWORD *)v31 + 1) = v35;
            }
            v36 = v31 + 24;
            v30[1] = v31 + 24;
          }
          v30[1] = v36;
          if (__p)
          {
            v65 = (char *)__p;
            operator delete(__p);
          }
          --v29;
        }
        while (v29);
      }
      return 1;
    }
    if (v5 == 223)
    {
      v70 = 0;
      memset(&v71, 0, sizeof(v71));
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
    }
    return 0;
  }
  v20 = a2 + 4;
  v21 = MEMORY[0x24BDAC740];
  while (1)
  {
    v22 = std::istream::peek();
    if (v22 <= 0x7F)
      break;
    v23 = __maskrune(v22, 0x4000uLL);
    v24 = *(_QWORD *)(*a2 - 24);
    if (!v23)
      goto LABEL_19;
LABEL_17:
    if (!*(_DWORD *)((char *)v20 + v24))
      std::istream::get();
  }
  v24 = *(_QWORD *)(*a2 - 24);
  if ((*(_DWORD *)(v21 + 4 * v22 + 60) & 0x4000) != 0)
    goto LABEL_17;
LABEL_19:
  if ((*((_BYTE *)a2 + v24 + 32) & 2) != 0)
    return 1;
  if (std::istream::get() != 91)
    return 0;
  while (2)
  {
    v25 = std::istream::peek();
    if (v25 > 0x7F)
    {
      v26 = __maskrune(v25, 0x4000uLL);
      v27 = *(_QWORD *)(*a2 - 24);
      if (!v26)
        break;
      goto LABEL_25;
    }
    v27 = *(_QWORD *)(*a2 - 24);
    if ((*(_DWORD *)(v21 + 4 * v25 + 60) & 0x4000) != 0)
    {
LABEL_25:
      if (!*(_DWORD *)((char *)v20 + v27))
        std::istream::get();
      continue;
    }
    break;
  }
  if ((*((_BYTE *)a2 + v27 + 32) & 2) != 0)
    return 0;
  v37 = 0;
  v38 = (void *)*MEMORY[0x24BEDB7F0];
  v62 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v63 = *(void **)(MEMORY[0x24BEDB7F0] + 64);
  v61 = MEMORY[0x24BEDB848] + 16;
  while ((*((_BYTE *)v20 + *(_QWORD *)(*a2 - 24)) & 2) == 0 && (v37 & 1) == 0)
  {
    while (1)
    {
      v40 = std::istream::peek();
      if (v40 <= 0x7F)
        break;
      v41 = __maskrune(v40, 0x4000uLL);
      v42 = *(_DWORD *)((char *)v20 + *(_QWORD *)(*a2 - 24));
      if (!v41)
        goto LABEL_50;
LABEL_48:
      if (!v42)
        std::istream::get();
    }
    v42 = *(_DWORD *)((char *)v20 + *(_QWORD *)(*a2 - 24));
    if ((*(_DWORD *)(v21 + 4 * v40 + 60) & 0x4000) != 0)
      goto LABEL_48;
LABEL_50:
    if ((v42 & 2) != 0)
      return 0;
    sub_2394988CC((uint64_t)&__p);
    if (sub_239596128(a2))
    {
      v43 = (char *)v66 + *(_QWORD *)(v66[0] - 24);
      if ((v43[32] & 5) == 0)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v43 + 5)
                                                                                            + 32))(&v71, *((_QWORD *)v43 + 5), 0, 1, 16);
        if (v72 >= 1)
        {
          memset(&v71, 0, sizeof(v71));
          v69 = &v71;
          sub_2395AFE54((uint64_t *)&v69, &__p, 0);
          v47 = *a1;
          v48 = (*a1)[1];
          if (v48 >= (*a1)[2])
          {
            v51 = sub_2395BB144(*a1, (uint64_t)&v71);
          }
          else
          {
            *(_QWORD *)v48 = 0;
            *((_QWORD *)v48 + 1) = 0;
            *((_QWORD *)v48 + 2) = 0;
            v60 = (const void *)v71.__r_.__value_.__r.__words[0];
            v49 = v71.__r_.__value_.__l.__size_ - v71.__r_.__value_.__r.__words[0];
            if (v71.__r_.__value_.__l.__size_ != v71.__r_.__value_.__r.__words[0])
            {
              if ((v49 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v59 = v71.__r_.__value_.__l.__size_ - v71.__r_.__value_.__r.__words[0];
              v50 = (char *)operator new(v49);
              *(_QWORD *)v48 = v50;
              *((_QWORD *)v48 + 1) = v50;
              v58 = &v50[4 * (v59 >> 2)];
              *((_QWORD *)v48 + 2) = v58;
              memcpy(v50, v60, v59);
              *((_QWORD *)v48 + 1) = v58;
            }
            v51 = v48 + 24;
            v47[1] = v48 + 24;
          }
          v47[1] = v51;
          if (v71.__r_.__value_.__r.__words[0])
          {
            v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
            operator delete(v71.__r_.__value_.__l.__data_);
          }
        }
      }
      for (i = std::istream::peek(); ; i = std::istream::peek())
      {
        v45 = i << 24;
        if (i << 24 == 738197504)
          goto LABEL_63;
        if (v45 == 1560281088)
          break;
        if (v45 <= 0x7F000000)
        {
          if ((*(_DWORD *)(v21 + 4 * (char)i + 60) & 0x4000) == 0)
            goto LABEL_62;
        }
        else if (!__maskrune((char)i, 0x4000uLL))
        {
          goto LABEL_62;
        }
        if ((*((_BYTE *)v20 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        {
LABEL_62:
          if (v45 != 738197504)
            goto LABEL_64;
LABEL_63:
          std::istream::get();
          v37 = 0;
          goto LABEL_66;
        }
        std::istream::get();
      }
      v37 = 1;
LABEL_66:
      v46 = 1;
    }
    else
    {
LABEL_64:
      v46 = 0;
      v37 = 0;
    }
    __p = v38;
    *(void **)((char *)&__p + *((_QWORD *)v38 - 3)) = v63;
    v66[0] = v62;
    v66[1] = v61;
    if (v67 < 0)
      operator delete((void *)v66[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x23B83E250](&v68);
    result = 0;
    if ((v46 & 1) == 0)
      return result;
  }
  while (1)
  {
    v52 = std::istream::peek();
    v53 = v52 <= 0x7F ? *(_DWORD *)(v21 + 4 * v52 + 60) & 0x4000 : __maskrune(v52, 0x4000uLL);
    v54 = *(_QWORD *)(*a2 - 24);
    if (!v53)
      break;
    if (!*(_DWORD *)((char *)v20 + v54))
      std::istream::get();
  }
  return (*((_BYTE *)a2 + v54 + 32) & 2) == 0 && std::istream::get() == 93;
}

void sub_2396130CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 209) < 0)
  {
    operator delete(*(void **)(v54 - 232));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239613220(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) && std::istream::get() == 223)
  {
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
  }
  return 0;
}

void sub_2396134B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2396134D8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;

  if (a1[3])
  {
    v2 = (_QWORD *)a1[2];
    if (v2)
    {
      do
      {
        v5 = (_QWORD *)*v2;
        v6 = (_QWORD *)v2[5];
        if (v6)
        {
          do
          {
            v8 = (_QWORD *)*v6;
            v9 = (void *)v6[3];
            if (v9)
            {
              v6[4] = v9;
              operator delete(v9);
            }
            operator delete(v6);
            v6 = v8;
          }
          while (v8);
        }
        v7 = (void *)v2[3];
        v2[3] = 0;
        if (v7)
          operator delete(v7);
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

double sub_239613594(uint64_t a1, char **a2)
{
  char **v3;
  double *v4;
  double v5;
  double *v6;
  double v7;
  __double2 v8;
  double v9;
  double result;
  __double2 v11;
  double v12;

  v3 = (char **)(a1 + 32);
  if (v3 != a2)
    sub_23945D3D0(v3, *a2, a2[1], (a2[1] - *a2) >> 3);
  v4 = *(double **)(a1 + 32);
  v5 = v4[2];
  v6 = *(double **)(a1 + 56);
  v7 = v4[1] * 0.0174532925;
  v8 = __sincos_stret(*v4 * 0.0174532925);
  v9 = *(double *)a1 / sqrt(-(*(double *)(a1 + 24) * v8.__sinval) * v8.__sinval + 1.0);
  v11 = __sincos_stret(v7);
  result = v11.__sinval;
  v12 = v8.__cosval * (v5 + v9);
  *v6 = v11.__cosval * v12;
  v6[1] = v11.__sinval * v12;
  v6[2] = v8.__sinval * (v5 + (1.0 - *(double *)(a1 + 24)) * v9);
  *(__double2 *)(a1 + 80) = v8;
  *(double *)(a1 + 96) = v11.__cosval;
  *(double *)(a1 + 104) = v11.__sinval;
  return result;
}

double sub_239613668(uint64_t a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v12;
  __double2 v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double result;

  v12 = a6 * 0.0174532925;
  v13 = __sincos_stret(a5 * 0.0174532925);
  v14 = *(double *)(a1 + 24);
  v15 = *(double *)a1 / sqrt(-(v14 * v13.__sinval) * v13.__sinval + 1.0);
  v16 = __sincos_stret(v12);
  v17 = v13.__cosval * (v15 + a7);
  v18 = *(double **)(a1 + 56);
  v19 = v16.__cosval * v17 - *v18;
  v20 = v16.__sinval * v17 - v18[1];
  v21 = v13.__sinval * (a7 + (1.0 - v14) * v15) - v18[2];
  *a2 = *(double *)(a1 + 96) * v20 - *(double *)(a1 + 104) * v19;
  *a3 = v20 * -(*(double *)(a1 + 80) * *(double *)(a1 + 104))
      + -(*(double *)(a1 + 96) * *(double *)(a1 + 80)) * v19
      + *(double *)(a1 + 88) * v21;
  result = v20 * (*(double *)(a1 + 88) * *(double *)(a1 + 104))
         + *(double *)(a1 + 88) * *(double *)(a1 + 96) * v19
         + *(double *)(a1 + 80) * v21;
  *a4 = result;
  return result;
}

uint64_t sub_239613780(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void **v23;
  int v24;
  int v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  void **v30;
  int v31;
  int v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void **v38;
  int v39;
  int v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  const char *v50;
  int v51;
  int v52;
  unint64_t v53;
  const char *v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  const char *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  int v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _DWORD *v71;
  char *v72;
  _DWORD *v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  char *v77;
  _DWORD *v78;
  _DWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  _DWORD *v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  char *v102;
  uint64_t v105;
  char *v106;
  char *i;
  unsigned int v108;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  int v127;
  int *v128;
  const char *v129;
  int v130;
  int v131;
  int v132;
  int v133;
  unint64_t v134;
  _DWORD *v135;
  _DWORD *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  int v145;
  char *v146;
  char *v147;
  uint64_t v148;
  int v149;
  unint64_t v150;
  int v151;
  char *v152;
  int *v153;
  int v154;
  int v155;
  unint64_t v156;
  void **v157;
  int v158;
  int v159;
  unint64_t v160;
  char *v161;
  int v162;
  unint64_t v163;
  _DWORD *v164;
  _DWORD *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  int v174;
  _DWORD *v175;
  _BYTE *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  _DWORD *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  __int16 v190;
  char v191;
  char *v192;
  char *v193;
  uint64_t v194;
  int v195;
  void *v196;
  void *v197;
  unsigned int *v198;
  unsigned int *v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t *v203;
  std::locale::id *v204;
  uint64_t v205;
  const std::string::value_type *v206;
  std::string::size_type v207;
  const std::locale::facet *v208;
  unsigned __int8 v209;
  char *v210;
  std::string *v211;
  unsigned int v212;
  int v213;
  int v214;
  uint64_t *v215;
  __int128 v216;
  uint64_t *v217;
  void *v218;
  _QWORD *v219;
  _QWORD *v220;
  char v221;
  _QWORD *v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t *v226;
  int v227;
  unsigned __int8 v228;
  void *__p[2];
  char v230;
  char *__str[2];
  uint64_t v232;
  void *v233;
  uint64_t *v234;
  unint64_t v235;
  _QWORD v236[2];
  _QWORD v237[51];
  _QWORD v238[21];

  v238[19] = *MEMORY[0x24BDAC8D0];
  sub_23955D09C(v236);
  if (!v237[15])
  {
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5 = (_QWORD *)(v236[0] - 24);
  if (*(_DWORD *)((char *)&v237[2] + *(_QWORD *)(v236[0] - 24)))
  {
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v236 + *(_QWORD *)(v236[0] - 24)), *(_DWORD *)((char *)&v237[2] + *(_QWORD *)(v236[0] - 24)) | 4);
    goto LABEL_5;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 24);
  v222 = (_QWORD *)(a2 + 24);
  if (v8 != *(_QWORD *)(a2 + 32))
    *(_QWORD *)(a2 + 32) = v8;
  v9 = *(unsigned __int8 *)(a2 + 104);
  if (*(_BYTE *)(a2 + 104))
  {
    v10 = *(_QWORD *)(a2 + 80);
    if (v10 != *(_QWORD *)(a2 + 88))
      *(_QWORD *)(a2 + 88) = v10;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    v11 = *(_QWORD *)(a2 + 48);
    if (v11 != *(_QWORD *)(a2 + 56))
      *(_QWORD *)(a2 + 56) = v11;
    v233 = 0;
    v234 = 0;
    v235 = 0;
  }
  else
  {
    v233 = 0;
    v234 = 0;
    v235 = 0;
    if ((a3 & 1) != 0)
    {
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 72) = 1;
    }
  }
  v221 = a3;
  if ((a3 & 2) != 0 && !v9)
  {
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_BYTE *)(a2 + 104) = 1;
  }
  if (!*(_DWORD *)((char *)&v237[2] + *v5))
  {
    v227 = 0;
    v204 = (std::locale::id *)MEMORY[0x24BEDB350];
    v205 = MEMORY[0x24BDAC740];
    while (1)
    {
      while (1)
      {
        __str[0] = 0;
        __str[1] = 0;
        v232 = 0;
        std::ios_base::getloc((const std::ios_base *)((char *)v236 + *v5));
        v208 = std::locale::use_facet((const std::locale *)__p, v204);
        v209 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v208->__vftable[2].~facet_0)(v208, 10);
        std::locale::~locale((std::locale *)__p);
        sub_23955D1B4(v236, (uint64_t)__str, v209);
        v210 = (char *)HIBYTE(v232);
        if (v232 < 0)
          v210 = __str[1];
        if (v210)
          break;
LABEL_304:
        if ((SHIBYTE(v232) & 0x80000000) == 0)
          goto LABEL_305;
LABEL_326:
        operator delete(__str[0]);
        v5 = (_QWORD *)(v236[0] - 24);
        if (*(_DWORD *)((char *)&v237[2] + *(_QWORD *)(v236[0] - 24)))
          goto LABEL_25;
      }
      if (v234 == v233)
        goto LABEL_321;
      v211 = (std::string *)(v234 - 3);
      if (sub_23958D4A0(v234 - 3))
      {
        if (v232 >= 0)
          v206 = (const std::string::value_type *)__str;
        else
          v206 = __str[0];
        if (v232 >= 0)
          v207 = HIBYTE(v232);
        else
          v207 = (std::string::size_type)__str[1];
        std::string::append(v211, v206, v207);
        goto LABEL_304;
      }
      if (v232 < 0)
      {
        if (*__str[0] != 118)
          goto LABEL_321;
        v212 = __str[0][1];
        if ((v212 & 0x80000000) != 0)
        {
LABEL_317:
          v213 = __maskrune(v212, 0x4000uLL);
          goto LABEL_318;
        }
      }
      else
      {
        if (LOBYTE(__str[0]) != 118)
          goto LABEL_321;
        v212 = SBYTE1(__str[0]);
        if (SBYTE1(__str[0]) < 0)
          goto LABEL_317;
      }
      v213 = *(_DWORD *)(v205 + 4 * v212 + 60) & 0x4000;
LABEL_318:
      v214 = v227;
      if (v213)
        v214 = v227 + 1;
      v227 = v214;
LABEL_321:
      v215 = v234;
      if ((unint64_t)v234 >= v235)
      {
        v234 = (uint64_t *)sub_23959AE70((char **)&v233, (uint64_t)__str);
        if ((SHIBYTE(v232) & 0x80000000) == 0)
          goto LABEL_305;
        goto LABEL_326;
      }
      if (SHIBYTE(v232) < 0)
      {
        sub_23941A7F8(v234, __str[0], (unint64_t)__str[1]);
        v234 = v215 + 3;
        if (SHIBYTE(v232) < 0)
          goto LABEL_326;
      }
      else
      {
        v216 = *(_OWORD *)__str;
        v234[2] = v232;
        *(_OWORD *)v215 = v216;
        v234 = v215 + 3;
        if (SHIBYTE(v232) < 0)
          goto LABEL_326;
      }
LABEL_305:
      v5 = (_QWORD *)(v236[0] - 24);
      if (*(_DWORD *)((char *)&v237[2] + *(_QWORD *)(v236[0] - 24)))
        goto LABEL_25;
    }
  }
  v227 = 0;
LABEL_25:
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v236 + *(_QWORD *)(v236[0] - 24)), *(_DWORD *)((char *)&v237[2] + *(_QWORD *)(v236[0] - 24)) | 4);
  v12 = (uint64_t *)v233;
  v226 = v234;
  if (v233 == v234)
  {
LABEL_275:
    if (*(_BYTE *)(a2 + 104))
    {
      v196 = *(void **)(a2 + 80);
      if (v196 == *(void **)(a2 + 88))
      {
        if (v196)
        {
          *(_QWORD *)(a2 + 88) = v196;
          operator delete(v196);
        }
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    if (*(_BYTE *)(a2 + 72))
    {
      v197 = *(void **)(a2 + 48);
      if (v197 == *(void **)(a2 + 56))
      {
        if (v197)
        {
          *(_QWORD *)(a2 + 56) = v197;
          operator delete(v197);
        }
        *(_BYTE *)(a2 + 72) = 0;
      }
    }
    v198 = *(unsigned int **)(a2 + 24);
    v199 = *(unsigned int **)(a2 + 32);
    if (v198 != v199)
    {
      v200 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      do
      {
        if (v200 <= *v198 || v200 <= v198[1])
          break;
        v201 = v198[2];
        v198 += 3;
      }
      while (v200 > v201 && v198 != v199);
    }
    v6 = 1;
    v203 = (uint64_t *)v233;
    if (v233)
      goto LABEL_333;
    goto LABEL_6;
  }
  v13 = 0;
  v220 = (_QWORD *)(a2 + 80);
  v219 = (_QWORD *)(a2 + 48);
  v225 = a2;
  while (1)
  {
    v14 = *((char *)v12 + 23);
    if ((v14 & 0x80000000) != 0)
    {
      v15 = *(char *)*v12;
      if (v15 != 102)
        goto LABEL_33;
LABEL_39:
      if ((int)sub_239602908(v12) <= 3)
        goto LABEL_332;
      HIBYTE(v232) = 0;
      LOBYTE(__str[0]) = 0;
      v230 = 0;
      LOBYTE(__p[0]) = 0;
      v18 = sub_2396026A0(v12, 1uLL, (uint64_t)&v228, (uint64_t)__str);
      v223 = v13;
      v228 = 47;
      v19 = sub_239602A5C((uint64_t *)__str, 0, &v228, (uint64_t)__p);
      v20 = v19;
      v21 = v18 + 1;
      v22 = (char *)HIBYTE(v232);
      if (v232 < 0)
        v22 = __str[1];
      if (v19 < (unint64_t)v22)
      {
        if (v230 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        v24 = strtol((const char *)v23, 0, 10);
        v25 = sub_23958D5CC(v24, v227);
        v228 = 47;
        v26 = sub_239602A5C((uint64_t *)__str, v20, &v228, (uint64_t)__p) + v20;
        v27 = (char *)HIBYTE(v232);
        if (v232 < 0)
          v27 = __str[1];
        if (v26 < (unint64_t)v27)
        {
          v228 = 47;
          sub_239602A5C((uint64_t *)__str, v26, &v228, (uint64_t)__p);
        }
        v28 = sub_2396026A0(v12, v18 + 1, (uint64_t)&v228, (uint64_t)__str);
        v228 = 47;
        v29 = sub_239602A5C((uint64_t *)__str, 0, &v228, (uint64_t)__p);
        if (v230 >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        v31 = strtol((const char *)v30, 0, 10);
        v32 = sub_23958D5CC(v31, v227);
        v228 = 47;
        v33 = sub_239602A5C((uint64_t *)__str, v29, &v228, (uint64_t)__p) + v29;
        v34 = (char *)HIBYTE(v232);
        if (v232 < 0)
          v34 = __str[1];
        if (v33 < (unint64_t)v34)
        {
          v228 = 47;
          sub_239602A5C((uint64_t *)__str, v33, &v228, (uint64_t)__p);
        }
        v35 = v28 + v21;
        v36 = sub_2396026A0(v12, v35, (uint64_t)&v228, (uint64_t)__str);
        v228 = 47;
        v37 = sub_239602A5C((uint64_t *)__str, 0, &v228, (uint64_t)__p);
        if (v230 >= 0)
          v38 = __p;
        else
          v38 = (void **)__p[0];
        v39 = strtol((const char *)v38, 0, 10);
        v40 = sub_23958D5CC(v39, v227);
        v228 = 47;
        v41 = sub_239602A5C((uint64_t *)__str, v37, &v228, (uint64_t)__p) + v37;
        v42 = (char *)HIBYTE(v232);
        if (v232 < 0)
          v42 = __str[1];
        if (v41 < (unint64_t)v42)
        {
          v228 = 47;
          sub_239602A5C((uint64_t *)__str, v41, &v228, (uint64_t)__p);
        }
        v43 = a2;
        v44 = v25 - 1;
        v45 = v32 - 1;
        v46 = v40 - 1;
        v48 = *(_DWORD **)(v43 + 32);
        v47 = *(_QWORD *)(v43 + 40);
        if ((unint64_t)v48 < v47)
        {
          *v48 = v44;
          v48[1] = v45;
          v49 = v48 + 3;
          v48[2] = v46;
          a2 = v225;
          goto LABEL_200;
        }
        v91 = (_DWORD *)*v222;
        v92 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *v222) >> 2);
        v93 = v92 + 1;
        if (v92 + 1 <= 0x1555555555555555)
        {
          v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v91) >> 2);
          if (2 * v94 > v93)
            v93 = 2 * v94;
          if (v94 >= 0xAAAAAAAAAAAAAAALL)
            v95 = 0x1555555555555555;
          else
            v95 = v93;
          if (!v95)
          {
            v96 = 0;
            goto LABEL_195;
          }
          if (v95 <= 0x1555555555555555)
          {
            v96 = (char *)operator new(12 * v95);
LABEL_195:
            v146 = &v96[12 * v92];
            *(_DWORD *)v146 = v44;
            *((_DWORD *)v146 + 1) = v45;
            *((_DWORD *)v146 + 2) = v46;
            v147 = v146;
            if (v48 == v91)
            {
              a2 = v225;
              v49 = v146 + 12;
              *(_QWORD *)(v225 + 24) = v146;
              *(_QWORD *)(v225 + 32) = v146 + 12;
              *(_QWORD *)(v225 + 40) = &v96[12 * v95];
              if (!v48)
                goto LABEL_200;
            }
            else
            {
              a2 = v225;
              do
              {
                v148 = *(_QWORD *)(v48 - 3);
                v48 -= 3;
                v149 = v48[2];
                *(_QWORD *)(v147 - 12) = v148;
                v147 -= 12;
                *((_DWORD *)v147 + 2) = v149;
              }
              while (v48 != v91);
              v48 = (_DWORD *)*v222;
              v49 = v146 + 12;
              *(_QWORD *)(v225 + 24) = v147;
              *(_QWORD *)(v225 + 32) = v146 + 12;
              *(_QWORD *)(v225 + 40) = &v96[12 * v95];
              if (!v48)
                goto LABEL_200;
            }
            operator delete(v48);
LABEL_200:
            v150 = v36 + v35;
            *(_QWORD *)(a2 + 32) = v49;
            v151 = v223;
            while (1)
            {
              while (1)
              {
                v13 = v151 + 1;
                do
                {
                  if (*((char *)v12 + 23) < 0)
                  {
                    if (v150 >= v12[1])
                      goto LABEL_236;
                  }
                  else if (v150 >= *((unsigned __int8 *)v12 + 23))
                  {
                    goto LABEL_236;
                  }
                  v150 += sub_2396026A0(v12, v150, (uint64_t)&v228, (uint64_t)__str);
                  v152 = (char *)HIBYTE(v232);
                  if (v232 < 0)
                    v152 = __str[1];
                }
                while (!v152);
                v224 = v151 + 1;
                v153 = (int *)(*v222 + 12 * v151);
                v154 = *v153;
                v155 = v153[2];
                v228 = 47;
                v156 = sub_239602A5C((uint64_t *)__str, 0, &v228, (uint64_t)__p);
                if (v230 >= 0)
                  v157 = __p;
                else
                  v157 = (void **)__p[0];
                v158 = strtol((const char *)v157, 0, 10);
                v159 = sub_23958D5CC(v158, v227);
                v228 = 47;
                v160 = sub_239602A5C((uint64_t *)__str, v156, &v228, (uint64_t)__p) + v156;
                v161 = (char *)HIBYTE(v232);
                if (v232 < 0)
                  v161 = __str[1];
                if (v160 < (unint64_t)v161)
                {
                  v228 = 47;
                  sub_239602A5C((uint64_t *)__str, v160, &v228, (uint64_t)__p);
                }
                v162 = v159 - 1;
                v164 = *(_DWORD **)(a2 + 32);
                v163 = *(_QWORD *)(a2 + 40);
                if ((unint64_t)v164 >= v163)
                  break;
                *v164 = v154;
                v164[1] = v155;
                v164[2] = v162;
                v151 = v224;
                *(_QWORD *)(a2 + 32) = v164 + 3;
              }
              v165 = (_DWORD *)*v222;
              v166 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v164 - *v222) >> 2);
              v167 = v166 + 1;
              if (v166 + 1 > 0x1555555555555555)
                sub_2394189F8();
              v168 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - (_QWORD)v165) >> 2);
              if (2 * v168 > v167)
                v167 = 2 * v168;
              if (v168 >= 0xAAAAAAAAAAAAAAALL)
                v169 = 0x1555555555555555;
              else
                v169 = v167;
              if (v169)
              {
                if (v169 > 0x1555555555555555)
                  sub_239418A80();
                v170 = (char *)operator new(12 * v169);
              }
              else
              {
                v170 = 0;
              }
              v171 = &v170[12 * v166];
              *(_DWORD *)v171 = v154;
              *((_DWORD *)v171 + 1) = v155;
              *((_DWORD *)v171 + 2) = v162;
              v172 = v171;
              if (v164 == v165)
              {
                v151 = v224;
                v175 = v171 + 12;
                *(_QWORD *)(a2 + 24) = v171;
                *(_QWORD *)(a2 + 32) = v171 + 12;
                *(_QWORD *)(a2 + 40) = &v170[12 * v169];
                if (v164)
                  goto LABEL_232;
              }
              else
              {
                v151 = v224;
                do
                {
                  v173 = *(_QWORD *)(v164 - 3);
                  v164 -= 3;
                  v174 = v164[2];
                  *(_QWORD *)(v172 - 12) = v173;
                  v172 -= 12;
                  *((_DWORD *)v172 + 2) = v174;
                }
                while (v164 != v165);
                v164 = (_DWORD *)*v222;
                v175 = v171 + 12;
                *(_QWORD *)(a2 + 24) = v172;
                *(_QWORD *)(a2 + 32) = v171 + 12;
                *(_QWORD *)(a2 + 40) = &v170[12 * v169];
                if (v164)
LABEL_232:
                  operator delete(v164);
              }
              *(_QWORD *)(a2 + 32) = v175;
            }
          }
LABEL_341:
          sub_239418A80();
        }
LABEL_340:
        sub_2394189F8();
      }
      if (v232 >= 0)
        v50 = (const char *)__str;
      else
        v50 = __str[0];
      v51 = strtol(v50, 0, 10);
      v52 = sub_23958D5CC(v51, v227);
      v53 = sub_2396026A0(v12, v18 + 1, (uint64_t)&v228, (uint64_t)__str);
      if (v232 >= 0)
        v54 = (const char *)__str;
      else
        v54 = __str[0];
      v55 = strtol(v54, 0, 10);
      v56 = sub_23958D5CC(v55, v227);
      v57 = v53 + v21;
      v58 = sub_2396026A0(v12, v53 + v21, (uint64_t)&v228, (uint64_t)__str);
      if (v232 >= 0)
        v59 = (const char *)__str;
      else
        v59 = __str[0];
      v60 = strtol(v59, 0, 10);
      v61 = v52 - 1;
      v62 = v56 - 1;
      v63 = sub_23958D5CC(v60, v227) - 1;
      v65 = *(_DWORD **)(v225 + 32);
      v64 = *(_QWORD *)(v225 + 40);
      if ((unint64_t)v65 < v64)
      {
        *v65 = v61;
        v65[1] = v62;
        v66 = v65 + 3;
        v65[2] = v63;
        a2 = v225;
        v67 = v223;
        goto LABEL_163;
      }
      v85 = (_DWORD *)*v222;
      v86 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65 - *v222) >> 2);
      v87 = v86 + 1;
      if (v86 + 1 > 0x1555555555555555)
        goto LABEL_340;
      v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - (_QWORD)v85) >> 2);
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0xAAAAAAAAAAAAAAALL)
        v89 = 0x1555555555555555;
      else
        v89 = v87;
      if (v89)
      {
        if (v89 > 0x1555555555555555)
          goto LABEL_341;
        v90 = (char *)operator new(12 * v89);
      }
      else
      {
        v90 = 0;
      }
      v122 = &v90[12 * v86];
      *(_DWORD *)v122 = v61;
      *((_DWORD *)v122 + 1) = v62;
      *((_DWORD *)v122 + 2) = v63;
      v123 = v122;
      if (v65 == v85)
      {
        a2 = v225;
        v67 = v223;
        v66 = v122 + 12;
        *(_QWORD *)(v225 + 24) = v122;
        *(_QWORD *)(v225 + 32) = v122 + 12;
        *(_QWORD *)(v225 + 40) = &v90[12 * v89];
        if (v65)
LABEL_162:
          operator delete(v65);
      }
      else
      {
        a2 = v225;
        v67 = v223;
        do
        {
          v124 = *(_QWORD *)(v65 - 3);
          v65 -= 3;
          v125 = v65[2];
          *(_QWORD *)(v123 - 12) = v124;
          v123 -= 12;
          *((_DWORD *)v123 + 2) = v125;
        }
        while (v65 != v85);
        v65 = (_DWORD *)*v222;
        v66 = v122 + 12;
        *(_QWORD *)(v225 + 24) = v123;
        *(_QWORD *)(v225 + 32) = v122 + 12;
        *(_QWORD *)(v225 + 40) = &v90[12 * v89];
        if (v65)
          goto LABEL_162;
      }
LABEL_163:
      v126 = v58 + v57;
LABEL_164:
      *(_QWORD *)(a2 + 32) = v66;
      v13 = v67 + 1;
      while (1)
      {
        if (*((char *)v12 + 23) < 0)
        {
          if (v126 >= v12[1])
          {
LABEL_236:
            if (v230 < 0)
            {
              operator delete(__p[0]);
              if (SHIBYTE(v232) < 0)
                goto LABEL_238;
            }
            else if (SHIBYTE(v232) < 0)
            {
LABEL_238:
              operator delete(__str[0]);
            }
            goto LABEL_30;
          }
        }
        else if (v126 >= *((unsigned __int8 *)v12 + 23))
        {
          goto LABEL_236;
        }
        v126 += sub_2396026A0(v12, v126, (uint64_t)&v228, (uint64_t)__str);
        if (SHIBYTE(v232) < 0)
        {
          if (__str[1])
          {
            v127 = v67 + 1;
            v128 = (int *)(*v222 + 12 * v67);
            v129 = __str[0];
            goto LABEL_174;
          }
        }
        else if (HIBYTE(v232))
        {
          v127 = v67 + 1;
          v128 = (int *)(*v222 + 12 * v67);
          v129 = (const char *)__str;
LABEL_174:
          v130 = *v128;
          v131 = v128[2];
          v132 = strtol(v129, 0, 10);
          v133 = sub_23958D5CC(v132, v227) - 1;
          v135 = *(_DWORD **)(v225 + 32);
          v134 = *(_QWORD *)(v225 + 40);
          if ((unint64_t)v135 >= v134)
          {
            v136 = (_DWORD *)*v222;
            v137 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v135 - *v222) >> 2);
            v138 = v137 + 1;
            if (v137 + 1 > 0x1555555555555555)
              sub_2394189F8();
            v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v134 - (_QWORD)v136) >> 2);
            if (2 * v139 > v138)
              v138 = 2 * v139;
            if (v139 >= 0xAAAAAAAAAAAAAAALL)
              v140 = 0x1555555555555555;
            else
              v140 = v138;
            if (v140)
            {
              if (v140 > 0x1555555555555555)
                sub_239418A80();
              v141 = (char *)operator new(12 * v140);
            }
            else
            {
              v141 = 0;
            }
            v142 = &v141[12 * v137];
            *(_DWORD *)v142 = v130;
            *((_DWORD *)v142 + 1) = v131;
            *((_DWORD *)v142 + 2) = v133;
            v143 = v142;
            if (v135 != v136)
            {
              do
              {
                v144 = *(_QWORD *)(v135 - 3);
                v135 -= 3;
                v145 = v135[2];
                *(_QWORD *)(v143 - 12) = v144;
                v143 -= 12;
                *((_DWORD *)v143 + 2) = v145;
              }
              while (v135 != v136);
              v135 = (_DWORD *)*v222;
            }
            v66 = v142 + 12;
            *(_QWORD *)(v225 + 24) = v143;
            *(_QWORD *)(v225 + 32) = v142 + 12;
            *(_QWORD *)(v225 + 40) = &v141[12 * v140];
            if (v135)
              operator delete(v135);
          }
          else
          {
            *v135 = v130;
            v135[1] = v131;
            v66 = v135 + 3;
            v135[2] = v133;
          }
          v67 = v127;
          a2 = v225;
          goto LABEL_164;
        }
      }
    }
    v15 = *(char *)v12;
    if (v15 == 102)
      goto LABEL_39;
LABEL_33:
    if (v15 != 118)
      goto LABEL_30;
    if ((v14 & 0x80000000) != 0)
    {
      if ((unint64_t)v12[1] < 2)
        goto LABEL_332;
      v16 = *(char *)(*v12 + 1);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_37:
        v17 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v16 + 60) & 0x4000;
        goto LABEL_80;
      }
    }
    else
    {
      if (v14 < 2)
        goto LABEL_332;
      v16 = *((char *)v12 + 1);
      if ((v16 & 0x80000000) == 0)
        goto LABEL_37;
    }
    v17 = __maskrune(v16, 0x4000uLL);
LABEL_80:
    if (!v17)
      break;
    __str[0] = 0;
    LODWORD(__str[1]) = 0;
    __p[0] = 0;
    v68 = (uint64_t)v12;
    if (*((char *)v12 + 23) < 0)
      v68 = *v12;
    v69 = sub_23958D5D8((const char *)(v68 + 1), (float *)__str, 3);
    v71 = *(_DWORD **)(a2 + 8);
    v70 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v71 >= v70)
    {
      v79 = *(_DWORD **)a2;
      v80 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v71 - *(_QWORD *)a2) >> 2);
      v81 = v80 + 1;
      if (v80 + 1 > 0x1555555555555555)
        sub_2394189F8();
      v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)v79) >> 2);
      if (2 * v82 > v81)
        v81 = 2 * v82;
      if (v82 >= 0xAAAAAAAAAAAAAAALL)
        v83 = 0x1555555555555555;
      else
        v83 = v81;
      if (v83)
      {
        if (v83 > 0x1555555555555555)
          sub_239418A80();
        v84 = (char *)operator new(12 * v83);
      }
      else
      {
        v84 = 0;
      }
      v97 = &v84[12 * v80];
      *(char **)v97 = __str[0];
      *((_DWORD *)v97 + 2) = __str[1];
      v98 = v97;
      if (v71 != v79)
      {
        do
        {
          v99 = *(_QWORD *)(v71 - 3);
          v71 -= 3;
          v100 = v71[2];
          *(_QWORD *)(v98 - 12) = v99;
          v98 -= 12;
          *((_DWORD *)v98 + 2) = v100;
        }
        while (v71 != v79);
        v71 = *(_DWORD **)a2;
      }
      v73 = v97 + 12;
      *(_QWORD *)a2 = v98;
      *(_QWORD *)(a2 + 8) = v97 + 12;
      *(_QWORD *)(a2 + 16) = &v84[12 * v83];
      if (v71)
        operator delete(v71);
    }
    else
    {
      v72 = __str[0];
      v71[2] = __str[1];
      *(_QWORD *)v71 = v72;
      v73 = v71 + 3;
    }
    *(_QWORD *)(a2 + 8) = v73;
    v101 = *((unsigned __int8 *)v12 + 23);
    if (*((char *)v12 + 23) < 0)
    {
      v102 = v69 + 1;
      if ((unint64_t)(v69 + 1) >= v12[1] || (v221 & 2) == 0)
        goto LABEL_30;
    }
    else
    {
      v102 = v69 + 1;
      if ((unint64_t)(v69 + 1) >= v101 || (v221 & 2) == 0)
        goto LABEL_30;
    }
    v105 = (uint64_t)v12;
    if ((v101 & 0x80) != 0)
      v105 = *v12;
    v106 = &v102[v105];
    for (i = v69 + 2; ; ++i)
    {
      v108 = *v106;
      if (!((v108 & 0x80000000) != 0
           ? __maskrune(*v106, 0x4000uLL)
           : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v108 + 60) & 0x4000))
        break;
      v110 = *((unsigned __int8 *)v12 + 23);
      if (*((char *)v12 + 23) < 0)
      {
        if ((unint64_t)i >= v12[1])
          goto LABEL_151;
      }
      else if ((unint64_t)i >= v110)
      {
        goto LABEL_151;
      }
      v111 = (uint64_t)v12;
      if ((v110 & 0x80) != 0)
        v111 = *v12;
      v106 = &i[v111];
    }
    --i;
LABEL_151:
    if (v108 - 48 <= 9)
    {
      v112 = (uint64_t)v12;
      if (*((char *)v12 + 23) < 0)
        v112 = *v12;
      v113 = strtod(&i[v112 - 1], (char **)__p);
      v114 = strtod((const char *)__p[0], (char **)__p);
      v115 = strtod((const char *)__p[0], (char **)__p);
      if (!*(_BYTE *)(v225 + 104))
        sub_2394875CC();
      v116 = (int)(v113 * 255.0);
      v117 = (int)(v114 * 255.0);
      v118 = (int)(v115 * 255.0);
      v120 = *(_BYTE **)(v225 + 88);
      v119 = *(_QWORD *)(v225 + 96);
      if ((unint64_t)v120 >= v119)
      {
        v176 = (_BYTE *)*v220;
        v177 = 0xAAAAAAAAAAAAAAABLL * (_QWORD)&v120[-*v220];
        v178 = v177 + 1;
        if (v177 + 1 >= 0x5555555555555556)
          sub_2394189F8();
        v179 = 0xAAAAAAAAAAAAAAABLL * (v119 - (_QWORD)v176);
        if (2 * v179 > v178)
          v178 = 2 * v179;
        if (v179 >= 0x2AAAAAAAAAAAAAAALL)
          v180 = 0x5555555555555555;
        else
          v180 = v178;
        if (v180)
        {
          if (v180 >= 0x5555555555555556)
            sub_239418A80();
          v181 = (char *)operator new(3 * v180);
        }
        else
        {
          v181 = 0;
        }
        v188 = &v181[3 * v177];
        *v188 = v116;
        v188[1] = v117;
        v188[2] = v118;
        v189 = v188;
        if (v120 == v176)
        {
          a2 = v225;
          v121 = v188 + 3;
          *(_QWORD *)(v225 + 80) = v188;
          *(_QWORD *)(v225 + 88) = v188 + 3;
          *(_QWORD *)(v225 + 96) = &v181[3 * v180];
          if (!v120)
            goto LABEL_265;
        }
        else
        {
          a2 = v225;
          do
          {
            v190 = *(_WORD *)(v120 - 3);
            v120 -= 3;
            v191 = v120[2];
            *(_WORD *)(v189 - 3) = v190;
            v189 -= 3;
            v189[2] = v191;
          }
          while (v120 != v176);
          v120 = (_BYTE *)*v220;
          v121 = v188 + 3;
          *(_QWORD *)(v225 + 80) = v189;
          *(_QWORD *)(v225 + 88) = v188 + 3;
          *(_QWORD *)(v225 + 96) = &v181[3 * v180];
          if (!v120)
            goto LABEL_265;
        }
        operator delete(v120);
      }
      else
      {
        *v120 = v116;
        v120[1] = v117;
        v121 = v120 + 3;
        v120[2] = v118;
        a2 = v225;
      }
LABEL_265:
      *(_QWORD *)(a2 + 88) = v121;
    }
LABEL_30:
    v12 += 3;
    if (v12 == v226)
      goto LABEL_275;
  }
  if (v16 == 116)
    goto LABEL_30;
  if (v16 == 110)
  {
    if ((v221 & 1) != 0)
    {
      __str[0] = 0;
      LODWORD(__str[1]) = 0;
      v74 = (uint64_t)v12;
      if (*((char *)v12 + 23) < 0)
        v74 = *v12;
      sub_23958D5D8((const char *)(v74 + 2), (float *)__str, 3);
      if (!*(_BYTE *)(a2 + 72))
        sub_2394875CC();
      v76 = *(_DWORD **)(a2 + 56);
      v75 = *(_QWORD *)(a2 + 64);
      if ((unint64_t)v76 >= v75)
      {
        v182 = (_DWORD *)*v219;
        v183 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v76 - *v219) >> 2);
        v184 = v183 + 1;
        if (v183 + 1 > 0x1555555555555555)
          sub_2394189F8();
        v185 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - (_QWORD)v182) >> 2);
        if (2 * v185 > v184)
          v184 = 2 * v185;
        if (v185 >= 0xAAAAAAAAAAAAAAALL)
          v186 = 0x1555555555555555;
        else
          v186 = v184;
        if (v186)
        {
          if (v186 > 0x1555555555555555)
            sub_239418A80();
          v187 = (char *)operator new(12 * v186);
        }
        else
        {
          v187 = 0;
        }
        v192 = &v187[12 * v183];
        *(char **)v192 = __str[0];
        *((_DWORD *)v192 + 2) = __str[1];
        v193 = v192;
        if (v76 != v182)
        {
          do
          {
            v194 = *(_QWORD *)(v76 - 3);
            v76 -= 3;
            v195 = v76[2];
            *(_QWORD *)(v193 - 12) = v194;
            v193 -= 12;
            *((_DWORD *)v193 + 2) = v195;
          }
          while (v76 != v182);
          v76 = (_DWORD *)*v219;
        }
        v78 = v192 + 12;
        *(_QWORD *)(a2 + 48) = v193;
        *(_QWORD *)(a2 + 56) = v192 + 12;
        *(_QWORD *)(a2 + 64) = &v187[12 * v186];
        if (v76)
          operator delete(v76);
      }
      else
      {
        v77 = __str[0];
        v76[2] = __str[1];
        *(_QWORD *)v76 = v77;
        v78 = v76 + 3;
      }
      *(_QWORD *)(a2 + 56) = v78;
    }
    goto LABEL_30;
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v236 + *(_QWORD *)(v236[0] - 24)), *(_DWORD *)((char *)&v237[2] + *(_QWORD *)(v236[0] - 24)) | 4);
LABEL_332:
  v6 = 0;
  v203 = (uint64_t *)v233;
  if (v233)
  {
LABEL_333:
    v217 = v234;
    v218 = v203;
    if (v234 != v203)
    {
      do
      {
        if (*((char *)v217 - 1) < 0)
          operator delete((void *)*(v217 - 3));
        v217 -= 3;
      }
      while (v217 != v203);
      v218 = v233;
    }
    v234 = v203;
    operator delete(v218);
  }
LABEL_6:
  v236[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v236 + *(_QWORD *)(v236[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x23B83DC8C](v237);
  std::istream::~istream();
  MEMORY[0x23B83E250](v238);
  return v6;
}

void sub_239614C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_23941B08C(&a30);
  sub_23955CB90(&a33);
  _Unwind_Resume(a1);
}

void sub_239614D50()
{
  JUMPOUT(0x239614D88);
}

void sub_239614D58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18)
{
  std::locale::~locale(&a18);
  JUMPOUT(0x239614D88);
}

void sub_239614D68()
{
  JUMPOUT(0x239614D88);
}

void sub_239614D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  sub_23941B08C(&a30);
  sub_23955CB90(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_239614DB0(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  char v45;
  uint64_t v46;
  _QWORD v47[51];
  _QWORD v48[21];

  v48[19] = *MEMORY[0x24BDAC8D0];
  sub_23955CF88(&v46);
  if (!v47[15])
    goto LABEL_3;
  v5 = sub_239458500(&v46, (uint64_t)"#  \n", 4);
  v6 = sub_239458500(v5, (uint64_t)"#  Wavefront OBJ\n", 17);
  v7 = sub_239458500(v6, (uint64_t)"#  \n", 4);
  v8 = sub_239458500(v7, (uint64_t)"\n", 1);
  sub_239458500(v8, (uint64_t)"# ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_239458500(v9, (uint64_t)" vertices\n", 10);
  if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
    goto LABEL_3;
  v44 = *(_BYTE *)(a1 + 72) != 0;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    if ((a3 & 2) != 0 && *(_BYTE *)(a1 + 104))
    {
      for (i = 1; ; ++i)
      {
        v13 = sub_239458500(&v46, (uint64_t)"v ", 2);
        *(_QWORD *)((char *)v13 + *(_QWORD *)(*v13 - 24) + 16) = 10;
        v14 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v14, (uint64_t)&v45, 1);
        v15 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v15, (uint64_t)&v45, 1);
        v16 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v16, (uint64_t)&v45, 1);
        v17 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v17, (uint64_t)&v45, 1);
        v18 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v18, (uint64_t)&v45, 1);
        v19 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v19, (uint64_t)"\n", 1);
        if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
          break;
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2))
          goto LABEL_16;
        if (!*(_BYTE *)(a1 + 104))
          sub_2394875CC();
      }
    }
    else
    {
      v20 = 0;
      while (1)
      {
        v21 = sub_239458500(&v46, (uint64_t)"v ", 2);
        *(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 16) = 10;
        v22 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v22, (uint64_t)&v45, 1);
        v23 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v23, (uint64_t)&v45, 1);
        v24 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v24, (uint64_t)"\n", 1);
        if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
          break;
        if (++v20 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2))
          goto LABEL_16;
      }
    }
    goto LABEL_3;
  }
LABEL_16:
  if ((a3 & v44) != 0)
  {
    v25 = sub_239458500(&v46, (uint64_t)"\n", 1);
    sub_239458500(v25, (uint64_t)"# ", 2);
    v26 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v26, (uint64_t)" normals\n", 9);
    if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
    {
LABEL_3:
      v10 = 0;
      goto LABEL_4;
    }
    if (*(_BYTE *)(a1 + 72))
    {
      v27 = 0;
      do
      {
        if (v27 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 2))
          break;
        v28 = sub_239458500(&v46, (uint64_t)"vn ", 3);
        *(_QWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 16) = 10;
        v29 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v29, (uint64_t)&v45, 1);
        v30 = (_QWORD *)std::ostream::operator<<();
        v45 = 32;
        sub_239458500(v30, (uint64_t)&v45, 1);
        v31 = (_QWORD *)std::ostream::operator<<();
        sub_239458500(v31, (uint64_t)"\n", 1);
        if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
          goto LABEL_3;
        ++v27;
      }
      while (*(_BYTE *)(a1 + 72));
    }
  }
  v32 = sub_239458500(&v46, (uint64_t)"\n", 1);
  sub_239458500(v32, (uint64_t)"# ", 2);
  v33 = (_QWORD *)std::ostream::operator<<();
  v34 = sub_239458500(v33, (uint64_t)" faces (triangles)\n", 19);
  sub_239458500(v34, (uint64_t)"\n", 1);
  if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
    goto LABEL_3;
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a1 + 24))
  {
    if ((a3 & v44 & 1) != 0)
    {
      v35 = 0;
      while (1)
      {
        sub_239458500(&v46, (uint64_t)"f", 1);
        *(_QWORD *)((char *)&v47[1] + *(_QWORD *)(v46 - 24)) = 10;
        v45 = 32;
        sub_239458500(&v46, (uint64_t)&v45, 1);
        std::ostream::operator<<();
        v36 = (char *)&v47[-1] + *(_QWORD *)(v46 - 24);
        if ((v36[32] & 5) != 0)
          break;
        *((_QWORD *)v36 + 2) = 10;
        sub_239458500(&v46, (uint64_t)"//", 2);
        std::ostream::operator<<();
        v37 = *(_QWORD *)(v46 - 24);
        if ((*((_BYTE *)&v47[3] + v37) & 5) != 0)
          break;
        *(_QWORD *)((char *)&v47[1] + v37) = 10;
        v45 = 32;
        sub_239458500(&v46, (uint64_t)&v45, 1);
        std::ostream::operator<<();
        v38 = (char *)&v47[-1] + *(_QWORD *)(v46 - 24);
        if ((v38[32] & 5) != 0)
          break;
        *((_QWORD *)v38 + 2) = 10;
        sub_239458500(&v46, (uint64_t)"//", 2);
        std::ostream::operator<<();
        v39 = *(_QWORD *)(v46 - 24);
        if ((*((_BYTE *)&v47[3] + v39) & 5) != 0)
          break;
        *(_QWORD *)((char *)&v47[1] + v39) = 10;
        v45 = 32;
        sub_239458500(&v46, (uint64_t)&v45, 1);
        std::ostream::operator<<();
        v40 = (char *)&v47[-1] + *(_QWORD *)(v46 - 24);
        if ((v40[32] & 5) != 0)
          break;
        *((_QWORD *)v40 + 2) = 10;
        sub_239458500(&v46, (uint64_t)"//", 2);
        std::ostream::operator<<();
        if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
          break;
        sub_239458500(&v46, (uint64_t)"\n", 1);
        if (++v35 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2))
          goto LABEL_40;
      }
    }
    else
    {
      v41 = 0;
      while (1)
      {
        sub_239458500(&v46, (uint64_t)"f", 1);
        *(_QWORD *)((char *)&v47[1] + *(_QWORD *)(v46 - 24)) = 10;
        v45 = 32;
        sub_239458500(&v46, (uint64_t)&v45, 1);
        std::ostream::operator<<();
        v42 = *(_QWORD *)(v46 - 24);
        if ((*((_BYTE *)&v47[3] + v42) & 5) != 0)
          break;
        *(_QWORD *)((char *)&v47[1] + v42) = 10;
        v45 = 32;
        sub_239458500(&v46, (uint64_t)&v45, 1);
        std::ostream::operator<<();
        v43 = *(_QWORD *)(v46 - 24);
        if ((*((_BYTE *)&v47[3] + v43) & 5) != 0)
          break;
        *(_QWORD *)((char *)&v47[1] + v43) = 10;
        v45 = 32;
        sub_239458500(&v46, (uint64_t)&v45, 1);
        std::ostream::operator<<();
        if ((*((_BYTE *)&v47[3] + *(_QWORD *)(v46 - 24)) & 5) != 0)
          break;
        sub_239458500(&v46, (uint64_t)"\n", 1);
        if (++v41 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2))
          goto LABEL_40;
      }
    }
    goto LABEL_3;
  }
LABEL_40:
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)&v47[-1] + *(_QWORD *)(v46 - 24)), *(_DWORD *)((char *)&v47[3] + *(_QWORD *)(v46 - 24)) | 4);
  v10 = 1;
LABEL_4:
  v46 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)&v47[-1] + *(_QWORD *)(v46 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x23B83DC8C](v47);
  std::ostream::~ostream();
  MEMORY[0x23B83E250](v48);
  return v10;
}

void sub_2396156D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396156E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396156F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961570C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239615720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239615734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239615748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239615760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239615774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239615788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961579C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396157B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396157C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396157D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_23955C978((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2396157EC(uint64_t a1, char a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_BYTE *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 41) = 1;
  return result;
}

uint64_t *sub_23961580C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *result;
  _QWORD *exception;
  __int128 *v9;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    if (!*(_BYTE *)(a1 + 41) || *(_QWORD *)(a1 + 24))
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = MEMORY[0x24BEDB8F0] + 16;
      __cxa_throw(exception, (struct type_info *)&unk_250ADB198, MEMORY[0x24BEDB680]);
    }
    *(_BYTE *)(a1 + 41) = 0;
  }
  sub_2395965C8((_QWORD *)a1, a2);
  v9 = (__int128 *)a2;
  result = sub_239615E64(a1, a2, (uint64_t)&unk_239EC6E98, &v9);
  result[5] = a3;
  return result;
}

uint64_t sub_2396158C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  void **v24;
  void **v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  _QWORD v35[2];
  _QWORD v36[11];
  char v37;
  uint64_t v38;

  if (*(_BYTE *)(a2 + 40))
  {
    sub_2395902F0(a2, a1);
    return 1;
  }
  sub_2394988CC((uint64_t)v35);
  v4 = v36[0];
  v5 = *a1;
  *(_DWORD *)((char *)&v35[1] + *(_QWORD *)(v35[0] - 24)) |= *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  *(_QWORD *)((char *)&v36[2] + *(_QWORD *)(v4 - 24)) = *(int *)((char *)a1 + *(_QWORD *)(v5 - 24) + 16);
  sub_2395902F0(a2, v36);
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)__p = 0u;
  if ((*((_BYTE *)&v36[2] + *(_QWORD *)(v35[0] - 24)) & 2) == 0)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = std::istream::get();
      if ((*((_BYTE *)&v36[2] + *(_QWORD *)(v35[0] - 24)) & 2) != 0)
        goto LABEL_7;
      v10 = v9 << 24;
      if (v9 << 24 == 570425344)
      {
        std::ostream::put();
        v7 = v7 ^ 1 | v6;
        v6 = 0;
        goto LABEL_7;
      }
      if ((v7 & 1) != 0)
      {
        std::ostream::put();
        v6 = (v10 == 1543503872) & (v6 ^ 1);
        v7 = 1;
        goto LABEL_7;
      }
      switch(v10)
      {
        case 2063597568:
          v11 = (char *)__p[1];
          v12 = (((_QWORD)v33 - (unint64_t)__p[1]) << 9) - 1;
          if ((void *)v33 == __p[1])
            v12 = 0;
          v13 = *((_QWORD *)&v34 + 1) + v34;
          if (v12 == *((_QWORD *)&v34 + 1) + (_QWORD)v34)
          {
            sub_2395967F4((uint64_t)__p);
            v11 = (char *)__p[1];
            v13 = *((_QWORD *)&v34 + 1) + v34;
          }
          *(_BYTE *)(*(_QWORD *)&v11[(v13 >> 9) & 0x7FFFFFFFFFFFF8] + (v13 & 0xFFF)) = 123;
          ++*((_QWORD *)&v34 + 1);
          v8 += 4;
          break;
        case 1526726656:
          v17 = (char *)__p[1];
          v18 = (((_QWORD)v33 - (unint64_t)__p[1]) << 9) - 1;
          if ((void *)v33 == __p[1])
            v18 = 0;
          v19 = *((_QWORD *)&v34 + 1) + v34;
          if (v18 == *((_QWORD *)&v34 + 1) + (_QWORD)v34)
          {
            sub_2395967F4((uint64_t)__p);
            v17 = (char *)__p[1];
            v19 = *((_QWORD *)&v34 + 1) + v34;
          }
          *(_BYTE *)(*(_QWORD *)&v17[(v19 >> 9) & 0x7FFFFFFFFFFFF8] + (v19 & 0xFFF)) = 91;
          ++*((_QWORD *)&v34 + 1);
          break;
        case 1560281088:
          v20 = *((_QWORD *)&v34 + 1);
          if (*((_QWORD *)&v34 + 1)
            && *(_BYTE *)(*(_QWORD *)((char *)__p[1]
                                    + (((unint64_t)(v34 + *((_QWORD *)&v34 + 1) - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                        + ((v34 + *((_QWORD *)&v34 + 1) - 1) & 0xFFF)) == 91)
          {
            --*((_QWORD *)&v34 + 1);
            v21 = (void *)v33 == __p[1] ? 0 : (((_QWORD)v33 - (unint64_t)__p[1]) << 9) - 1;
            if (v21 - (v20 + (_QWORD)v34) + 1 >= 0x2000)
            {
              operator delete(*(void **)(v33 - 8));
              *(_QWORD *)&v33 = v33 - 8;
            }
          }
          break;
        case 2097152000:
          v14 = *((_QWORD *)&v34 + 1);
          if (*((_QWORD *)&v34 + 1)
            && *(_BYTE *)(*(_QWORD *)((char *)__p[1]
                                    + (((unint64_t)(v34 + *((_QWORD *)&v34 + 1) - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                        + ((v34 + *((_QWORD *)&v34 + 1) - 1) & 0xFFF)) == 123)
          {
            --*((_QWORD *)&v34 + 1);
            if ((void *)v33 == __p[1])
              v15 = 0;
            else
              v15 = (((_QWORD)v33 - (unint64_t)__p[1]) << 9) - 1;
            if (v15 - (v14 + (_QWORD)v34) + 1 >= 0x2000)
            {
              operator delete(*(void **)(v33 - 8));
              *(_QWORD *)&v33 = v33 - 8;
            }
            v8 -= 4;
          }
          std::ostream::put();
          if (v8 >= 1)
          {
            v16 = v8;
            do
            {
              std::ostream::put();
              --v16;
            }
            while (v16);
          }
          break;
      }
      std::ostream::put();
      if (v10 == 973078528)
        break;
      if (v10 == 2063597568)
        goto LABEL_48;
      if (v10 == 738197504 && *((_QWORD *)&v34 + 1))
      {
        v23 = *(unsigned __int8 *)(*(_QWORD *)((char *)__p[1]
                                             + (((unint64_t)(*((_QWORD *)&v34 + 1) + v34 - 1) >> 9) & 0x7FFFFFFFFFFFF8))
                                 + ((*((_QWORD *)&v34 + 1) + v34 - 1) & 0xFFF));
        if (v23 == 91)
          break;
        if (v23 == 123)
        {
LABEL_48:
          std::ostream::put();
          if (v8 >= 1)
          {
            v22 = v8;
            do
            {
              std::ostream::put();
              --v22;
            }
            while (v22);
          }
        }
      }
LABEL_6:
      v7 = 0;
LABEL_7:
      if ((*((_BYTE *)&v36[2] + *(_QWORD *)(v35[0] - 24)) & 2) != 0)
        goto LABEL_57;
    }
    std::ostream::put();
    goto LABEL_6;
  }
LABEL_57:
  std::ostream::put();
  v24 = (void **)__p[1];
  v25 = (void **)v33;
  *((_QWORD *)&v34 + 1) = 0;
  v26 = v33 - (unint64_t)__p[1];
  if ((unint64_t)v33 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v24);
      v25 = (void **)v33;
      v24 = (void **)((char *)__p[1] + 8);
      __p[1] = v24;
      v26 = v33 - (_QWORD)v24;
    }
    while ((_QWORD)v33 - (_QWORD)v24 > 0x10uLL);
  }
  v27 = v26 >> 3;
  if (v27 == 1)
  {
    v28 = 2048;
  }
  else
  {
    if (v27 != 2)
      goto LABEL_64;
    v28 = 4096;
  }
  *(_QWORD *)&v34 = v28;
LABEL_64:
  if (v24 != v25)
  {
    do
    {
      v29 = *v24++;
      operator delete(v29);
    }
    while (v24 != v25);
    if ((void *)v33 != __p[1])
      *(_QWORD *)&v33 = v33 + (((unint64_t)__p[1] - v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  v35[0] = *MEMORY[0x24BEDB7F0];
  v30 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v36[0] = v30;
  v36[1] = MEMORY[0x24BEDB848] + 16;
  if (v37 < 0)
    operator delete((void *)v36[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B83E250](&v38);
  return 1;
}

void sub_239615E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_239596DB0((uint64_t)&a9);
  sub_239498ABC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_239615E64(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_239428940((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *v26 = 0;
  v26[1] = v11;
  v27 = v26 + 2;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_23941A7F8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    v26[4] = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  v26[5] = 0;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_2396162A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396162BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396162D4(uint64_t a1, int a2)
{
  uint64_t result;
  char v3;

  result = 0;
  v3 = a2 + 60;
  if ((a2 - 196) <= 0x1B)
  {
    if (((1 << v3) & 0x5400012) != 0)
    {
      std::istream::read();
      std::istream::read();
      return 0;
    }
    else if (((1 << v3) & 0xA800024) != 0)
    {
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      return 0;
    }
    else if (((1 << v3) & 0x200009) != 0)
    {
      std::istream::read();
      return 0;
    }
  }
  return result;
}

uint64_t sub_2396163F8(_QWORD *a1, int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  switch(a2)
  {
    case 194:
    case 195:
    case 204:
    case 208:
      goto LABEL_4;
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 217:
    case 218:
    case 219:
      sub_2396162D4((uint64_t)a1, a2);
      goto LABEL_16;
    case 202:
    case 203:
    case 206:
    case 207:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
LABEL_16:
      std::istream::seekg();
      return *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) == 0;
    case 205:
    case 209:
      std::istream::get();
LABEL_4:
      std::istream::get();
      return *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) == 0;
    case 220:
    case 221:
      v3 = sub_2396162D4((uint64_t)a1, a2);
      if (v3)
      {
        v4 = v3;
        do
        {
          v5 = std::istream::get();
          sub_2396163F8(a1, v5);
          --v4;
        }
        while (v4);
      }
      return *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) == 0;
    case 222:
    case 223:
      v6 = sub_2396162D4((uint64_t)a1, a2);
      if (!v6)
        return *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) == 0;
      v7 = v6;
      break;
    default:
      return 0;
  }
  while (1)
  {
    v8 = std::istream::get();
    result = sub_2396163F8(a1, v8);
    if (!(_DWORD)result)
      break;
    v10 = std::istream::get();
    if ((sub_2396163F8(a1, v10) & 1) == 0)
      return 0;
    if (!--v7)
      return *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) == 0;
  }
  return result;
}

void sub_239616578(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6[2];
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __p;
  uint64_t v23;
  char v24;
  char v25;

  sub_23952329C(v6, a2);
  sub_239618E34((uint64_t)&v15, a1, (__int128 *)v6);
  *(_OWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v25)
    goto LABEL_15;
  *(_BYTE *)(a3 + 40) = 0;
  if (v18)
  {
    *(_OWORD *)(a3 + 16) = v16;
    *(_QWORD *)(a3 + 32) = v17;
    v17 = 0;
    v16 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (!v24)
  {
    *(_BYTE *)(a3 + 112) = 1;
    if (!v18)
      goto LABEL_15;
    goto LABEL_13;
  }
  v5 = v21;
  *(_QWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 48) = v19;
  v19 = 0uLL;
  *(_QWORD *)(a3 + 72) = v5;
  *(_OWORD *)(a3 + 80) = __p;
  *(_QWORD *)(a3 + 96) = v23;
  v23 = 0;
  v20 = 0;
  __p = 0uLL;
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 112) = 1;
  if (SHIBYTE(v23) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
LABEL_7:
      if (!v18)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)v19);
  if (!v18)
    goto LABEL_15;
LABEL_13:
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16);
LABEL_15:
  if (!v14)
    return;
  if (!v13)
    goto LABEL_19;
  if (v12 < 0)
  {
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_24;
LABEL_19:
    if (!v8)
      return;
    goto LABEL_20;
  }
  if ((v10 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_24:
  operator delete(v9);
  if (!v8)
    return;
LABEL_20:
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_239616724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239523188((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239616738(_QWORD *a1, const __CFDictionary *a2, const void *a3)
{
  void *v6;
  const __CFString *Value;
  const char *CStringPtr;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v6 = (void *)MEMORY[0x23B83EC40]();
  Value = (const __CFString *)CFDictionaryGetValue(a2, a3);
  if (!Value)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    objc_autoreleasePoolPop(v6);
    return;
  }
  CStringPtr = CFStringGetCStringPtr(Value, 0);
  v9 = strlen(CStringPtr);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    a1[1] = v10;
    a1[2] = v12 | 0x8000000000000000;
    *a1 = v13;
    a1 = v13;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v9;
    if (!v9)
      goto LABEL_11;
  }
  memmove(a1, CStringPtr, v10);
LABEL_11:
  *((_BYTE *)a1 + v10) = 0;
  objc_autoreleasePoolPop(v6);
}

double sub_239616828(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

double sub_239616850(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

double sub_239616878(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

void sub_2396168A0(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  CGImageSource *v6;
  CGImageSource *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  CGImage *ImageAtIndex;
  const __CFDictionary *v13;
  CGDataProvider *DataProvider;
  const __CFData *v15;
  const UInt8 *BytePtr;
  size_t Width;
  size_t Height;
  const void *v19;
  void *v20;
  const __CFNumber *Value;
  double v22;
  char *v23;
  int v24;
  char *v25;
  unsigned __int16 *v26;
  int v27;
  int v28;
  uint64_t v30;
  char *v31;
  double v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  size_t v42;
  unint64_t v43;
  unint64_t v44;
  size_t BitsPerPixel;
  void *v46;
  void *v47;
  _DWORD v48[2];
  _BYTE provider[40];
  _BYTE v50[32];
  _BYTE __p[32];
  __int128 v52;
  uint64_t v53;
  __int16 v54;
  void *v55[2];
  char v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  char v62;
  char v63;
  char *v64;
  uint64_t v65;
  unsigned __int8 v66;
  __int128 v67;
  char v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  char v74;
  char v75;

  v4 = (void *)MEMORY[0x23B83EC40]();
  v5 = (void *)MEMORY[0x23B83EC40]();
  sub_2397690E0(a1, (std::__shared_weak_count_vtbl **)provider);
  v6 = CGImageSourceCreateWithDataProvider(*(CGDataProviderRef *)provider, 0);
  v7 = v6;
  v8 = *(std::__shared_weak_count **)&provider[8];
  if (!*(_QWORD *)&provider[8])
    goto LABEL_100;
  v9 = (unint64_t *)(*(_QWORD *)&provider[8] + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_100:
    if (CGImageSourceGetStatus(v6))
      goto LABEL_6;
LABEL_15:
    v46 = v5;
    v47 = v4;
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, 0);
    v13 = CGImageSourceCopyPropertiesAtIndex(v7, 0, 0);
    DataProvider = CGImageGetDataProvider(ImageAtIndex);
    v15 = CGDataProviderCopyData(DataProvider);
    BytePtr = CFDataGetBytePtr(v15);
    Width = CGImageGetWidth(ImageAtIndex);
    Height = CGImageGetHeight(ImageAtIndex);
    BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
    v19 = (const void *)*MEMORY[0x24BDD93D0];
    v20 = (void *)MEMORY[0x23B83EC40]();
    *(_QWORD *)provider = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(v13, v19);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberCGFloatType, provider);
      v22 = *(double *)provider;
    }
    else
    {
      v22 = 0.0;
    }
    objc_autoreleasePoolPop(v20);
    v23 = (char *)&v64;
    sub_239616738(&v64, v13, (const void *)*MEMORY[0x24BDD92D0]);
    v24 = v66;
    if ((v66 & 0x80u) == 0)
      v25 = (char *)&v64 + v66;
    else
      v25 = &v64[v65];
    if ((v66 & 0x80u) != 0)
      v23 = v64;
    if (v23 != v25)
    {
      do
      {
        *v23 = __tolower(*v23);
        ++v23;
      }
      while (v23 != v25);
      v24 = v66;
    }
    if ((v24 & 0x80) != 0)
    {
      if (v65 != 3)
        goto LABEL_38;
      v26 = (unsigned __int16 *)v64;
    }
    else
    {
      if (v24 != 3)
        goto LABEL_38;
      v26 = (unsigned __int16 *)&v64;
    }
    v27 = *v26;
    v28 = *((unsigned __int8 *)v26 + 2);
    if (v27 == 26482 && v28 == 98)
    {
      v48[0] = Width;
      v48[1] = Height;
      *(_QWORD *)provider = &off_250ADBEA0;
      sub_2396192A4(v48, &provider[8]);
      v33 = *(_QWORD *)&provider[32];
      if ((_BYTE)v54 && *(_QWORD *)&provider[32])
      {
        (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)&provider[8] + 88))(*(_QWORD *)&provider[8], 1, "unknown location");
        v33 = *(_QWORD *)&provider[32];
      }
      if (Height && Width)
      {
        v34 = BitsPerPixel >> 3;
        if ((unint64_t)v22 == 16)
        {
          v39 = 0;
          v40 = (_BYTE *)(v33 + 1);
          do
          {
            v41 = v40;
            v42 = Width;
            do
            {
              LOWORD(v32) = *(_WORD *)BytePtr;
              *(double *)&v43 = (double)*(unint64_t *)&v32 * 255.0 / 65535.0;
              *(v41 - 1) = (int)*(double *)&v43;
              LOWORD(v43) = *((_WORD *)BytePtr + 1);
              *(double *)&v44 = (double)v43 * 255.0 / 65535.0;
              *v41 = (int)*(double *)&v44;
              LOWORD(v44) = *((_WORD *)BytePtr + 2);
              v32 = (double)v44 * 255.0 / 65535.0;
              v41[1] = (int)v32;
              BytePtr += v34;
              v41 += 3;
              --v42;
            }
            while (v42);
            ++v39;
            v40 += 3 * Width;
          }
          while (v39 != Height);
        }
        else if ((unint64_t)v22 == 8)
        {
          v35 = 0;
          v36 = (_BYTE *)(v33 + 1);
          do
          {
            v37 = v36;
            v38 = Width;
            do
            {
              *(v37 - 1) = *BytePtr;
              *v37 = BytePtr[1];
              v37[1] = BytePtr[2];
              BytePtr += v34;
              v37 += 3;
              --v38;
            }
            while (v38);
            ++v35;
            v36 += 3 * Width;
          }
          while (v35 != Height);
        }
      }
      CFRelease(v7);
      CFRelease(ImageAtIndex);
      CFRelease(v13);
      CFRelease(v15);
      *(_QWORD *)a2 = &off_250ADBEA0;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&provider[8];
      *(_QWORD *)&provider[8] = 0;
      *(_QWORD *)&provider[16] = 0;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)__p;
      *(_OWORD *)(a2 + 88) = *(_OWORD *)&__p[16];
      *(_OWORD *)(a2 + 104) = v52;
      *(_QWORD *)(a2 + 120) = v53;
      *(_OWORD *)(a2 + 24) = *(_OWORD *)&provider[24];
      *(_OWORD *)(a2 + 40) = *(_OWORD *)v50;
      *(_OWORD *)(a2 + 56) = *(_OWORD *)&v50[16];
      *(_WORD *)(a2 + 128) = v54;
      *(_BYTE *)(a2 + 136) = 1;
      sub_239416DA0((uint64_t)&provider[8]);
      nullsub_4(provider);
      v5 = v46;
      v4 = v47;
      if (((char)v66 & 0x80000000) == 0)
        goto LABEL_91;
LABEL_89:
      v31 = v64;
      goto LABEL_90;
    }
LABEL_38:
    CFRelease(v7);
    CGImageRelease(ImageAtIndex);
    CFRelease(v13);
    CFRelease(v15);
    sub_239618F08(v55, "Failed to load image.");
    v5 = v46;
    v4 = v47;
    v63 = 1;
    sub_239616578(5u, (__int128 *)v55, (uint64_t)provider);
    *(_OWORD *)a2 = *(_OWORD *)provider;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (!BYTE8(v52))
    {
      *(_BYTE *)(a2 + 136) = 0;
      goto LABEL_79;
    }
    *(_BYTE *)(a2 + 40) = 0;
    if (v50[0])
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)&provider[16];
      *(_QWORD *)(a2 + 32) = *(_QWORD *)&provider[32];
      memset(&provider[16], 0, 24);
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!(_BYTE)v52)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 136) = 0;
      if (!v50[0])
        goto LABEL_79;
      goto LABEL_77;
    }
    v30 = *(_QWORD *)__p;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v50[24];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)&v50[8];
    *(_QWORD *)&v50[8] = 0;
    *(_QWORD *)&v50[16] = 0;
    *(_QWORD *)(a2 + 72) = v30;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[8];
    *(_QWORD *)(a2 + 96) = *(_QWORD *)&__p[24];
    *(_QWORD *)&v50[24] = 0;
    memset(&__p[8], 0, 24);
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 136) = 0;
    if ((__p[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&__p[8]);
      if ((v50[31] & 0x80000000) == 0)
      {
LABEL_44:
        if (!v50[0])
          goto LABEL_79;
        goto LABEL_77;
      }
    }
    else if ((v50[31] & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(*(void **)&v50[8]);
    if (!v50[0])
      goto LABEL_79;
LABEL_77:
    if ((provider[39] & 0x80000000) != 0)
      operator delete(*(void **)&provider[16]);
LABEL_79:
    if (v63)
    {
      if (v62)
      {
        if (v61 < 0)
          operator delete(v60);
        if (v59 < 0)
          operator delete(v58);
      }
      if (v57 && v56 < 0)
        operator delete(v55[0]);
    }
    if (((char)v66 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_89;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (CGImageSourceGetStatus(v7) == kCGImageStatusComplete)
    goto LABEL_15;
LABEL_6:
  CFRelease(v7);
  sub_239618F08(&v67, "Failed to load image.");
  v75 = 1;
  sub_239616578(5u, &v67, (uint64_t)provider);
  *(_OWORD *)a2 = *(_OWORD *)provider;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!BYTE8(v52))
  {
    *(_BYTE *)(a2 + 136) = 0;
    goto LABEL_51;
  }
  *(_BYTE *)(a2 + 40) = 0;
  if (v50[0])
  {
    *(_OWORD *)(a2 + 16) = *(_OWORD *)&provider[16];
    *(_QWORD *)(a2 + 32) = *(_QWORD *)&provider[32];
    memset(&provider[16], 0, 24);
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (!(_BYTE)v52)
  {
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 136) = 0;
    if (!v50[0])
      goto LABEL_51;
    goto LABEL_49;
  }
  v11 = *(_QWORD *)__p;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)&v50[24];
  *(_OWORD *)(a2 + 48) = *(_OWORD *)&v50[8];
  *(_QWORD *)&v50[8] = 0;
  *(_QWORD *)&v50[16] = 0;
  *(_QWORD *)(a2 + 72) = v11;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[8];
  *(_QWORD *)(a2 + 96) = *(_QWORD *)&__p[24];
  *(_QWORD *)&v50[24] = 0;
  memset(&__p[8], 0, 24);
  *(_BYTE *)(a2 + 104) = 1;
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 136) = 0;
  if ((__p[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&__p[8]);
    if ((v50[31] & 0x80000000) == 0)
    {
LABEL_12:
      if (!v50[0])
        goto LABEL_51;
      goto LABEL_49;
    }
  }
  else if ((v50[31] & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(*(void **)&v50[8]);
  if (!v50[0])
    goto LABEL_51;
LABEL_49:
  if ((provider[39] & 0x80000000) != 0)
    operator delete(*(void **)&provider[16]);
LABEL_51:
  if (!v75)
    goto LABEL_91;
  if (!v74)
    goto LABEL_55;
  if (v73 < 0)
  {
    operator delete(v72);
    if ((v71 & 0x80000000) == 0)
    {
LABEL_55:
      if (!v69)
        goto LABEL_91;
      goto LABEL_56;
    }
  }
  else if ((v71 & 0x80000000) == 0)
  {
    goto LABEL_55;
  }
  operator delete(v70);
  if (!v69)
    goto LABEL_91;
LABEL_56:
  if (v68 < 0)
  {
    v31 = (char *)v67;
LABEL_90:
    operator delete(v31);
  }
LABEL_91:
  objc_autoreleasePoolPop(v5);
  objc_autoreleasePoolPop(v4);
}

void sub_239617018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  sub_239416DA0(v5);
  nullsub_4(va);
  if (*(char *)(v6 - 217) < 0)
    operator delete(*(void **)(v6 - 240));
  _Unwind_Resume(a1);
}

void sub_239617098(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  void *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  void *v31;
  float v32;
  float v33;
  void *v34;
  float v35;
  float v36;
  void *v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t Width;
  size_t Height;
  const __int16 *BaseAddress;
  float64x2_t v52;
  float *v53;
  unint64_t v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  const __int16 *v62;
  float *v63;
  uint32x4_t v64;
  uint64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  uint32x4_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint32x4_t v71;
  float64x2_t v72;
  uint32x4_t v73;
  float64x2_t v74;
  uint32x4_t v75;
  float64x2_t v76;
  float *v77;
  float *v78;
  unint64_t v79;
  float *v80;
  const __int16 *v81;
  double v82;
  double v83;
  void *v84;
  void *v85;
  _BYTE v86[40];
  _BYTE v87[32];
  _BYTE __p[32];
  __int128 v89;
  uint64_t v90;
  __int16 v91;
  void *v92[2];
  char v93;
  char v94;
  void *v95;
  char v96;
  void *v97;
  char v98;
  char v99;
  char v100;
  void *v101[2];
  char v102;
  char v103;
  void *v104;
  char v105;
  void *v106;
  char v107;
  char v108;
  char v109;
  void *v110[2];
  char v111;
  char v112;
  void *v113;
  char v114;
  void *v115;
  char v116;
  char v117;
  char v118;
  void *v119[2];
  char v120;
  char v121;
  void *v122;
  char v123;
  void *v124;
  char v125;
  char v126;
  char v127;
  _DWORD v128[2];
  std::__shared_weak_count *v129;
  uint64_t v130;
  CFTypeRef v131;
  CVPixelBufferRef v132;
  int16x8x3_t v133;
  float32x4x3_t v134;
  float32x4x3_t v135;

  v4 = (void *)MEMORY[0x23B83EC40]();
  v5 = (void *)MEMORY[0x23B83EC40]();
  v131 = 0;
  v132 = 0;
  v130 = 0;
  sub_2397690E0(a1, (std::__shared_weak_count_vtbl **)v86);
  sub_239769054((uint64_t)v86, (int)v128);
  v6 = CMPhotoDNGUnpack();
  v7 = v129;
  if (v129)
  {
    p_shared_owners = (unint64_t *)&v129->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)&v86[8];
  if (!*(_QWORD *)&v86[8])
    goto LABEL_10;
  v11 = (unint64_t *)(*(_QWORD *)&v86[8] + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v6)
    {
LABEL_30:
      sub_239618F08(v119, "Failed to load image.");
      v127 = 1;
      sub_239616578(5u, (__int128 *)v119, (uint64_t)v86);
      *(_OWORD *)a2 = *(_OWORD *)v86;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (!BYTE8(v89))
      {
        *(_BYTE *)(a2 + 136) = 0;
        goto LABEL_54;
      }
      *(_BYTE *)(a2 + 40) = 0;
      if (v87[0])
      {
        *(_OWORD *)(a2 + 16) = *(_OWORD *)&v86[16];
        *(_QWORD *)(a2 + 32) = *(_QWORD *)&v86[32];
        memset(&v86[16], 0, 24);
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (!(_BYTE)v89)
      {
        *(_BYTE *)(a2 + 112) = 1;
        *(_BYTE *)(a2 + 136) = 0;
        if (!v87[0])
          goto LABEL_54;
        goto LABEL_52;
      }
      v46 = *(_QWORD *)__p;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)&v87[24];
      *(_OWORD *)(a2 + 48) = *(_OWORD *)&v87[8];
      *(_QWORD *)&v87[8] = 0;
      *(_QWORD *)&v87[16] = 0;
      *(_QWORD *)(a2 + 72) = v46;
      *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[8];
      *(_QWORD *)(a2 + 96) = *(_QWORD *)&__p[24];
      *(_QWORD *)&v87[24] = 0;
      memset(&__p[8], 0, 24);
      *(_BYTE *)(a2 + 104) = 1;
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 136) = 0;
      if ((__p[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&__p[8]);
        if ((v87[31] & 0x80000000) == 0)
        {
LABEL_36:
          if (!v87[0])
            goto LABEL_54;
          goto LABEL_52;
        }
      }
      else if ((v87[31] & 0x80000000) == 0)
      {
        goto LABEL_36;
      }
      operator delete(*(void **)&v87[8]);
      if (!v87[0])
        goto LABEL_54;
LABEL_52:
      if ((v86[39] & 0x80000000) != 0)
        operator delete(*(void **)&v86[16]);
LABEL_54:
      if (!v127)
        goto LABEL_138;
      if (!v126)
        goto LABEL_58;
      if (v125 < 0)
      {
        operator delete(v124);
        if ((v123 & 0x80000000) == 0)
        {
LABEL_58:
          if (!v121)
            goto LABEL_138;
          goto LABEL_59;
        }
      }
      else if ((v123 & 0x80000000) == 0)
      {
        goto LABEL_58;
      }
      operator delete(v122);
      if (!v121)
        goto LABEL_138;
LABEL_59:
      if (v120 < 0)
        operator delete(v119[0]);
      goto LABEL_138;
    }
  }
  else
  {
LABEL_10:
    if (v6)
      goto LABEL_30;
  }
  if (!v132)
    goto LABEL_30;
  if (CVPixelBufferGetPixelFormatType(v132) != 1647589490)
  {
    sub_239618F08(v110, "Failed to load image.");
    v118 = 1;
    sub_239616578(5u, (__int128 *)v110, (uint64_t)v86);
    *(_OWORD *)a2 = *(_OWORD *)v86;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (!BYTE8(v89))
    {
      *(_BYTE *)(a2 + 136) = 0;
      goto LABEL_79;
    }
    *(_BYTE *)(a2 + 40) = 0;
    if (v87[0])
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)&v86[16];
      *(_QWORD *)(a2 + 32) = *(_QWORD *)&v86[32];
      memset(&v86[16], 0, 24);
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!(_BYTE)v89)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 136) = 0;
      if (!v87[0])
      {
LABEL_79:
        if (v118)
        {
          if (v117)
          {
            if (v116 < 0)
              operator delete(v115);
            if (v114 < 0)
              operator delete(v113);
          }
          if (v112 && v111 < 0)
            operator delete(v110[0]);
        }
        goto LABEL_138;
      }
LABEL_77:
      if ((v86[39] & 0x80000000) != 0)
        operator delete(*(void **)&v86[16]);
      goto LABEL_79;
    }
    v45 = *(_QWORD *)__p;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v87[24];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)&v87[8];
    *(_QWORD *)&v87[8] = 0;
    *(_QWORD *)&v87[16] = 0;
    *(_QWORD *)(a2 + 72) = v45;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[8];
    *(_QWORD *)(a2 + 96) = *(_QWORD *)&__p[24];
    *(_QWORD *)&v87[24] = 0;
    memset(&__p[8], 0, 24);
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 136) = 0;
    if ((__p[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&__p[8]);
      if ((v87[31] & 0x80000000) == 0)
      {
LABEL_27:
        if (!v87[0])
          goto LABEL_79;
        goto LABEL_77;
      }
    }
    else if ((v87[31] & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(*(void **)&v87[8]);
    if (!v87[0])
      goto LABEL_79;
    goto LABEL_77;
  }
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithDictionary:", v131);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKey:", CFSTR("{DNG}"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "objectForKey:", CFSTR("{Exif}"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (!v14 || !v15)
  {
    sub_239618F08(v101, "Failed to load image.");
    v109 = 1;
    sub_239616578(5u, (__int128 *)v101, (uint64_t)v86);
    *(_OWORD *)a2 = *(_OWORD *)v86;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (BYTE8(v89))
    {
      *(_BYTE *)(a2 + 40) = 0;
      if (v87[0])
      {
        *(_OWORD *)(a2 + 16) = *(_OWORD *)&v86[16];
        *(_QWORD *)(a2 + 32) = *(_QWORD *)&v86[32];
        memset(&v86[16], 0, 24);
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (!(_BYTE)v89)
      {
        *(_BYTE *)(a2 + 112) = 1;
        *(_BYTE *)(a2 + 136) = 0;
        if (!v87[0])
          goto LABEL_95;
        goto LABEL_93;
      }
      v47 = *(_QWORD *)__p;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)&v87[24];
      *(_OWORD *)(a2 + 48) = *(_OWORD *)&v87[8];
      *(_QWORD *)&v87[8] = 0;
      *(_QWORD *)&v87[16] = 0;
      *(_QWORD *)(a2 + 72) = v47;
      *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[8];
      *(_QWORD *)(a2 + 96) = *(_QWORD *)&__p[24];
      *(_QWORD *)&v87[24] = 0;
      memset(&__p[8], 0, 24);
      *(_BYTE *)(a2 + 104) = 1;
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 136) = 0;
      if ((__p[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&__p[8]);
        if ((v87[31] & 0x80000000) == 0)
        {
LABEL_45:
          if (!v87[0])
            goto LABEL_95;
LABEL_93:
          if ((v86[39] & 0x80000000) != 0)
            operator delete(*(void **)&v86[16]);
          goto LABEL_95;
        }
      }
      else if ((v87[31] & 0x80000000) == 0)
      {
        goto LABEL_45;
      }
      operator delete(*(void **)&v87[8]);
      if (v87[0])
        goto LABEL_93;
    }
    else
    {
      *(_BYTE *)(a2 + 136) = 0;
    }
LABEL_95:
    if (v109)
    {
      if (v108)
      {
        if (v107 < 0)
          operator delete(v106);
        if (v105 < 0)
          operator delete(v104);
      }
      if (v103 && v102 < 0)
        operator delete(v101[0]);
    }

    goto LABEL_138;
  }
  objc_msgSend(v15, "valueForKey:", CFSTR("ISOSpeedRatings"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = v17;
  objc_msgSend(v16, "valueForKey:", CFSTR("FNumber"));
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "valueForKey:", CFSTR("ExposureTime"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "valueForKey:", CFSTR("BaselineExposure"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "valueForKey:", CFSTR("AnalogBalance"));
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)v20;
  if (v17 && v85 && v18 && v19 && v20)
  {
    objc_msgSend(v17, "objectAtIndex:", 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "floatValue");
    v24 = v23;

    objc_msgSend(v85, "floatValue");
    v26 = v25;
    objc_msgSend(v18, "floatValue");
    v28 = v27;
    objc_msgSend(v19, "floatValue");
    v30 = v29;
    objc_msgSend(v21, "objectAtIndex:", 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v31, "floatValue");
    v33 = v32;

    objc_msgSend(v21, "objectAtIndex:", 1);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "floatValue");
    v36 = v35;

    objc_msgSend(v21, "objectAtIndex:", 2);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "floatValue");
    v39 = v38;

    v40 = 0;
    v41 = exp2(v30) * (float)((float)((float)(v26 * v26) / v28) / v24);
    v42 = v41 / v33;
    v43 = v41 / (float)(v36 + v36);
    v44 = v41 / v39;
    goto LABEL_121;
  }
  sub_239618F08(v92, "Failed to load image.");
  v100 = 1;
  sub_239616578(5u, (__int128 *)v92, (uint64_t)v86);
  *(_OWORD *)a2 = *(_OWORD *)v86;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (BYTE8(v89))
  {
    *(_BYTE *)(a2 + 40) = 0;
    if (v87[0])
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)&v86[16];
      *(_QWORD *)(a2 + 32) = *(_QWORD *)&v86[32];
      memset(&v86[16], 0, 24);
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!(_BYTE)v89)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 136) = 0;
      if (!v87[0])
        goto LABEL_111;
      goto LABEL_109;
    }
    v48 = *(_QWORD *)__p;
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v87[24];
    *(_OWORD *)(a2 + 48) = *(_OWORD *)&v87[8];
    *(_QWORD *)&v87[8] = 0;
    *(_QWORD *)&v87[16] = 0;
    *(_QWORD *)(a2 + 72) = v48;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[8];
    *(_QWORD *)(a2 + 96) = *(_QWORD *)&__p[24];
    *(_QWORD *)&v87[24] = 0;
    memset(&__p[8], 0, 24);
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 136) = 0;
    if ((__p[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&__p[8]);
      if ((v87[31] & 0x80000000) == 0)
      {
LABEL_70:
        if (!v87[0])
          goto LABEL_111;
LABEL_109:
        if ((v86[39] & 0x80000000) != 0)
          operator delete(*(void **)&v86[16]);
        goto LABEL_111;
      }
    }
    else if ((v87[31] & 0x80000000) == 0)
    {
      goto LABEL_70;
    }
    operator delete(*(void **)&v87[8]);
    if (v87[0])
      goto LABEL_109;
  }
  else
  {
    *(_BYTE *)(a2 + 136) = 0;
  }
LABEL_111:
  if (v100)
  {
    if (v99)
    {
      if (v98 < 0)
        operator delete(v97);
      if (v96 < 0)
        operator delete(v95);
    }
    if (v94 && v93 < 0)
      operator delete(v92[0]);
  }
  v40 = 1;
  v42 = 1.0;
  v43 = 1.0;
  v44 = 1.0;
LABEL_121:

  if (!v40)
  {
    Width = CVPixelBufferGetWidth(v132);
    Height = CVPixelBufferGetHeight(v132);
    v128[0] = Width;
    v128[1] = Height;
    *(_QWORD *)v86 = &off_250ADDC30;
    sub_239619E74(v128, &v86[8]);
    CVPixelBufferLockBaseAddress(v132, 0);
    BaseAddress = (const __int16 *)CVPixelBufferGetBaseAddress(v132);
    v53 = *(float **)&v86[32];
    if ((_BYTE)v91 && *(_QWORD *)&v86[32])
    {
      (*(void (**)(_QWORD, uint64_t, const char *))(**(_QWORD **)&v86[8] + 88))(*(_QWORD *)&v86[8], 1, "unknown location");
      v53 = *(float **)&v86[32];
    }
    v54 = Height * Width;
    if (!(Height * Width))
      goto LABEL_137;
    v55 = v42;
    v56 = v43;
    v57 = v44;
    if (v54 >= 8)
    {
      v58 = 0;
      v59 = !is_mul_ok(v54 - 1, 0xCuLL);
      v60 = 3 * (v54 - 1);
      if (&v53[v60 + 2] >= v53 + 2 && &v53[v60 + 1] >= v53 + 1 && &v53[v60] >= v53 && !v59)
      {
        v58 = v54 & 0xFFFFFFFFFFFFFFF8;
        v52 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
        v61 = v54 & 0xFFFFFFFFFFFFFFF8;
        v62 = BaseAddress;
        v63 = v53;
        do
        {
          v133 = vld3q_s16(v62);
          v62 += 24;
          v64 = vmovl_u16(*(uint16x4_t *)v133.val[0].i8);
          v65.i64[0] = v64.u32[2];
          v65.i64[1] = v64.u32[3];
          v66 = vcvtq_f64_u64(v65);
          v65.i64[0] = v64.u32[0];
          v65.i64[1] = v64.u32[1];
          v67 = vcvtq_f64_u64(v65);
          v68 = vmovl_high_u16((uint16x8_t)v133.val[0]);
          v65.i64[0] = v68.u32[2];
          v65.i64[1] = v68.u32[3];
          v69 = vcvtq_f64_u64(v65);
          v65.i64[0] = v68.u32[0];
          v65.i64[1] = v68.u32[1];
          v70 = vmulq_n_f64(vdivq_f64(v66, v52), v55);
          v134.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v65), v52), v55)), vmulq_n_f64(vdivq_f64(v69, v52), v55));
          v71 = vmovl_high_u16((uint16x8_t)v133.val[1]);
          v65.i64[0] = v71.u32[2];
          v65.i64[1] = v71.u32[3];
          v72 = vcvtq_f64_u64(v65);
          v65.i64[0] = v71.u32[0];
          v65.i64[1] = v71.u32[1];
          v134.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v65), v52), v56)), vmulq_n_f64(vdivq_f64(v72, v52), v56));
          v73 = vmovl_high_u16((uint16x8_t)v133.val[2]);
          v65.i64[0] = v73.u32[2];
          v65.i64[1] = v73.u32[3];
          v74 = vcvtq_f64_u64(v65);
          v65.i64[0] = v73.u32[0];
          v65.i64[1] = v73.u32[1];
          v134.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v65), v52), v57)), vmulq_n_f64(vdivq_f64(v74, v52), v57));
          v135.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(v67, v52), v55)), v70);
          v75 = vmovl_u16(*(uint16x4_t *)v133.val[1].i8);
          v65.i64[0] = v75.u32[2];
          v65.i64[1] = v75.u32[3];
          v76 = vcvtq_f64_u64(v65);
          v65.i64[0] = v75.u32[0];
          v65.i64[1] = v75.u32[1];
          v135.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v65), v52), v56)), vmulq_n_f64(vdivq_f64(v76, v52), v56));
          v133.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v133.val[2].i8);
          v65.i64[0] = v133.val[0].u32[2];
          v65.i64[1] = v133.val[0].u32[3];
          v133.val[1] = (int16x8_t)vcvtq_f64_u64(v65);
          v65.i64[0] = v133.val[0].u32[0];
          v65.i64[1] = v133.val[0].u32[1];
          v77 = v63 + 24;
          v135.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v65), v52), v57)), vmulq_n_f64(vdivq_f64((float64x2_t)v133.val[1], v52), v57));
          vst3q_f32(v63, v135);
          v78 = v63 + 12;
          vst3q_f32(v78, v134);
          v63 = v77;
          v61 -= 8;
        }
        while (v61);
        if (v54 == v58)
          goto LABEL_137;
      }
    }
    else
    {
      v58 = 0;
    }
    v79 = v54 - v58;
    v80 = &v53[3 * v58 + 1];
    v81 = &BaseAddress[3 * v58 + 2];
    do
    {
      LOWORD(v52.f64[0]) = *(v81 - 2);
      v82 = (double)*(unint64_t *)&v52.f64[0] / 65535.0 * v55;
      *(float *)&v82 = v82;
      *(v80 - 1) = *(float *)&v82;
      LOWORD(v82) = *(v81 - 1);
      v83 = (double)*(unint64_t *)&v82 / 65535.0 * v56;
      *(float *)&v83 = v83;
      *v80 = *(float *)&v83;
      LOWORD(v83) = *v81;
      v52.f64[0] = (double)*(unint64_t *)&v83 / 65535.0 * v57;
      *(float *)v52.f64 = v52.f64[0];
      v80[1] = *(float *)v52.f64;
      v80 += 3;
      v81 += 3;
      --v79;
    }
    while (v79);
LABEL_137:
    CVPixelBufferUnlockBaseAddress(v132, 0);
    CFRelease(v132);
    CFRelease(v131);
    *(_QWORD *)a2 = &off_250ADDC30;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v86[8];
    *(_QWORD *)&v86[8] = 0;
    *(_QWORD *)&v86[16] = 0;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)__p;
    *(_OWORD *)(a2 + 88) = *(_OWORD *)&__p[16];
    *(_OWORD *)(a2 + 104) = v89;
    *(_QWORD *)(a2 + 120) = v90;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v86[24];
    *(_OWORD *)(a2 + 40) = *(_OWORD *)v87;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)&v87[16];
    *(_WORD *)(a2 + 128) = v91;
    *(_BYTE *)(a2 + 136) = 1;
    sub_239416DA0((uint64_t)&v86[8]);
    nullsub_4(v86);
  }
LABEL_138:
  objc_autoreleasePoolPop(v5);
  objc_autoreleasePoolPop(v4);
}

void sub_239617D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_239416DA0(v3);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239617EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  sub_239523188((uint64_t)&a67);
  _Unwind_Resume(a1);
}

void sub_239617EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_239416DA0(v3 - 200);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239617F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239617F20(uint64_t a1, void *a2)
{
  void *v4;
  int v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  BOOL v20;
  int v21;
  float v22;
  float v23;
  float v24;
  void *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  void *v34;
  float v35;
  float v36;
  void *v37;
  float v38;
  float v39;
  void *v40;
  float v41;
  float v42;
  float v43;
  size_t Width;
  size_t Height;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t v54;
  const __int16 *BaseAddress;
  float64x2_t v56;
  unint64_t v57;
  double v58;
  double v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v70;
  unint64_t v75;
  float *v76;
  const __int16 *v77;
  uint32x4_t v78;
  uint64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  uint32x4_t v82;
  float64x2_t v83;
  float32x4_t v84;
  uint32x4_t v85;
  float64x2_t v86;
  float32x4_t v87;
  uint32x4_t v88;
  float64x2_t v89;
  float32x4_t v90;
  uint32x4_t v91;
  float64x2_t v92;
  float *v93;
  float *v94;
  unint64_t v95;
  _DWORD *v96;
  const __int16 *v97;
  double v98;
  double v99;
  void *v100;
  void *v101;
  void *__p;
  __int128 v103;
  unsigned int v104[2];
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  CFTypeRef cf;
  CVPixelBufferRef pixelBuffer;
  uint64_t v110;
  std::__shared_weak_count *v111;
  std::__shared_weak_count_vtbl *v112;
  std::__shared_weak_count *v113;
  int16x8x3_t v114;
  float32x4x4_t v115;

  v4 = (void *)MEMORY[0x23B83EC40]();
  sub_2397690E0(a2, &v112);
  sub_239769054((uint64_t)&v112, (int)&v110);
  cf = 0;
  pixelBuffer = 0;
  v107 = 0;
  v5 = CMPhotoDNGUnpack();
  if (v5)
    _ZF = 1;
  else
    _ZF = pixelBuffer == 0;
  if (_ZF)
  {
    if (!v5)
      goto LABEL_9;
LABEL_49:
    v62 = 0;
    goto LABEL_50;
  }
  if (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1647589490)
    goto LABEL_49;
LABEL_9:
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithDictionary:", cf);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("{DNG}"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("{Exif}"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (!v8 || !v9)
  {

    goto LABEL_49;
  }
  objc_msgSend(v9, "valueForKey:", CFSTR("ISOSpeedRatings"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "valueForKey:", CFSTR("FNumber"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "valueForKey:", CFSTR("ExposureTime"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "valueForKey:", CFSTR("BaselineExposure"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v101 = v4;
  objc_msgSend(v8, "valueForKey:", CFSTR("AnalogBalance"));
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)v15;
  if (v11)
    v17 = v12 == 0;
  else
    v17 = 1;
  v20 = v17 || v13 == 0 || v14 == 0 || v15 == 0;
  v21 = !v20;
  v22 = 1.0;
  v23 = 1.0;
  v24 = 1.0;
  if (!v20)
  {
    v100 = v11;
    objc_msgSend(v11, "objectAtIndex:", 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "floatValue");
    v27 = v26;

    objc_msgSend(v12, "floatValue");
    v29 = v28;
    objc_msgSend(v13, "floatValue");
    v31 = v30;
    objc_msgSend(v14, "floatValue");
    v33 = v32;
    objc_msgSend(v16, "objectAtIndex:", 0);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "floatValue");
    v36 = v35;

    objc_msgSend(v16, "objectAtIndex:", 1);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v37, "floatValue");
    v39 = v38;

    objc_msgSend(v16, "objectAtIndex:", 2);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "floatValue");
    v42 = v41;

    v43 = exp2(v33) * (float)((float)((float)(v29 * v29) / v31) / v27);
    v22 = v43 / v36;
    v23 = v43 / (float)(v39 + v39);
    v24 = v43 / v42;
    v11 = v100;
  }

  if (v21)
  {
    Width = CVPixelBufferGetWidth(pixelBuffer);
    Height = CVPixelBufferGetHeight(pixelBuffer);
    sub_23979D0F0(a1, &v105);
    v46 = v105;
    v47 = (std::__shared_weak_count *)v106;
    if ((_QWORD)v106)
    {
      v48 = (unint64_t *)(v106 + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (!v46
      || sub_23979A918(a1) != 1380410945
      || sub_23979C8D0(a1) != Width
      || sub_23979CAD8(a1) != Height)
    {
      v104[0] = Width;
      v104[1] = Height;
      __p = operator new(0xA0uLL);
      v103 = xmmword_239EC64A0;
      strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/aspenbase/third-party/cpg-applecmake/src/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h:216");
      sub_23979BD68((uint64_t)&v105, v104, 0x52476641u, (uint64_t)&__p, 1u);
      v50 = v106;
      v106 = 0uLL;
      v51 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v50;
      if (v51)
      {
        p_shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      sub_23979BCF4(&v105);
      if (SHIBYTE(v103) < 0)
        operator delete(__p);
    }
    sub_23979C518(a1, &v105);
    v4 = v101;
    v54 = sub_23979B638((uint64_t)&v105, 0);
    CVPixelBufferLockBaseAddress(pixelBuffer, 0);
    BaseAddress = (const __int16 *)CVPixelBufferGetBaseAddress(pixelBuffer);
    v57 = Height * Width;
    if (!(Height * Width))
      goto LABEL_72;
    v58 = v22;
    v59 = v23;
    v60 = v24;
    if (v57 >= 8)
    {
      v61 = 0;
      v70 = 16 * (v57 - 1);
      if (v54 + v70 >= v54
        && v54 + 4 + v70 >= v54 + 4
        && v54 + 8 + v70 >= v54 + 8
        && v54 + 12 + v70 >= v54 + 12
        && !((v57 - 1) >> 60))
      {
        v61 = v57 & 0xFFFFFFFFFFFFFFF8;
        v56 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
        __asm { FMOV            V7.4S, #1.0 }
        v75 = v57 & 0xFFFFFFFFFFFFFFF8;
        v76 = (float *)v54;
        v77 = BaseAddress;
        do
        {
          v114 = vld3q_s16(v77);
          v77 += 24;
          v78 = vmovl_u16(*(uint16x4_t *)v114.val[0].i8);
          v79.i64[0] = v78.u32[2];
          v79.i64[1] = v78.u32[3];
          v80 = vcvtq_f64_u64(v79);
          v79.i64[0] = v78.u32[0];
          v79.i64[1] = v78.u32[1];
          v81 = vcvtq_f64_u64(v79);
          v82 = vmovl_high_u16((uint16x8_t)v114.val[0]);
          v79.i64[0] = v82.u32[2];
          v79.i64[1] = v82.u32[3];
          v83 = vcvtq_f64_u64(v79);
          v79.i64[0] = v82.u32[0];
          v79.i64[1] = v82.u32[1];
          v84 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v79), v56), v58)), vmulq_n_f64(vdivq_f64(v83, v56), v58));
          v85 = vmovl_high_u16((uint16x8_t)v114.val[1]);
          v79.i64[0] = v85.u32[2];
          v79.i64[1] = v85.u32[3];
          v86 = vcvtq_f64_u64(v79);
          v79.i64[0] = v85.u32[0];
          v79.i64[1] = v85.u32[1];
          v87 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v79), v56), v59)), vmulq_n_f64(vdivq_f64(v86, v56), v59));
          v88 = vmovl_high_u16((uint16x8_t)v114.val[2]);
          v79.i64[0] = v88.u32[2];
          v79.i64[1] = v88.u32[3];
          v89 = vcvtq_f64_u64(v79);
          v79.i64[0] = v88.u32[0];
          v79.i64[1] = v88.u32[1];
          v90 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v79), v56), v60)), vmulq_n_f64(vdivq_f64(v89, v56), v60));
          v115.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(v81, v56), v58)), vmulq_n_f64(vdivq_f64(v80, v56), v58));
          v91 = vmovl_u16(*(uint16x4_t *)v114.val[1].i8);
          v79.i64[0] = v91.u32[2];
          v79.i64[1] = v91.u32[3];
          v92 = vcvtq_f64_u64(v79);
          v79.i64[0] = v91.u32[0];
          v79.i64[1] = v91.u32[1];
          v115.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v79), v56), v59)), vmulq_n_f64(vdivq_f64(v92, v56), v59));
          v114.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v114.val[2].i8);
          v79.i64[0] = v114.val[0].u32[2];
          v79.i64[1] = v114.val[0].u32[3];
          v114.val[1] = (int16x8_t)vcvtq_f64_u64(v79);
          v79.i64[0] = v114.val[0].u32[0];
          v79.i64[1] = v114.val[0].u32[1];
          v115.val[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vdivq_f64(vcvtq_f64_u64(v79), v56), v60)), vmulq_n_f64(vdivq_f64((float64x2_t)v114.val[1], v56), v60));
          v115.val[3] = _Q7;
          v93 = v76 + 32;
          vst4q_f32(v76, v115);
          v94 = v76 + 16;
          vst4q_f32(v94, *(float32x4x4_t *)(&_Q7 - 3));
          v76 = v93;
          v75 -= 8;
        }
        while (v75);
        if (v57 == v61)
          goto LABEL_72;
      }
    }
    else
    {
      v61 = 0;
    }
    v95 = v57 - v61;
    v96 = (_DWORD *)(v54 + 16 * v61 + 8);
    v97 = &BaseAddress[3 * v61 + 2];
    do
    {
      LOWORD(v56.f64[0]) = *(v97 - 2);
      v98 = (double)*(unint64_t *)&v56.f64[0] / 65535.0 * v58;
      *(float *)&v98 = v98;
      *(v96 - 2) = LODWORD(v98);
      LOWORD(v98) = *(v97 - 1);
      v99 = (double)*(unint64_t *)&v98 / 65535.0 * v59;
      *(float *)&v99 = v99;
      *(v96 - 1) = LODWORD(v99);
      LOWORD(v99) = *v97;
      v56.f64[0] = (double)*(unint64_t *)&v99 / 65535.0 * v60;
      *(float *)v56.f64 = v56.f64[0];
      *v96 = LODWORD(v56.f64[0]);
      v96[1] = 1065353216;
      v96 += 4;
      v97 += 3;
      --v95;
    }
    while (v95);
LABEL_72:
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CFRelease(pixelBuffer);
    CFRelease(cf);
    sub_23979B610(&v105);
    v62 = 1;
    goto LABEL_50;
  }
  v62 = 0;
  v4 = v101;
LABEL_50:
  v63 = v111;
  if (v111)
  {
    v64 = (unint64_t *)&v111->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v113;
  if (v113)
  {
    v67 = (unint64_t *)&v113->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  objc_autoreleasePoolPop(v4);
  return v62;
}

void sub_239618694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_239416DA0((uint64_t)&a25);
    sub_239416DA0((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  sub_239416DA0((uint64_t)&a25);
  sub_239416DA0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_2396187D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2396187EC(uint64_t a1, void *a2)
{
  void *v4;
  CGImageSourceRef v5;
  uint64_t v6;
  CGImage *ImageAtIndex;
  const __CFDictionary *v8;
  CGDataProvider *DataProvider;
  const UInt8 *BytePtr;
  size_t Width;
  size_t Height;
  const void *v13;
  void *v14;
  const __CFNumber *Value;
  double v16;
  char *p_valuePtr;
  int v18;
  char *v19;
  char **v20;
  int v21;
  int v22;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  double v37;
  size_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  size_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  size_t v46;
  unint64_t v47;
  unint64_t v48;
  size_t BitsPerPixel;
  const __CFData *cf;
  void *__p;
  __int128 v52;
  unsigned int v53[2];
  uint64_t v54;
  __int128 v55;
  char *valuePtr;
  uint64_t v57;
  unsigned __int8 v58;
  CGDataProviderRef provider;
  std::__shared_weak_count *v60;

  v4 = (void *)MEMORY[0x23B83EC40]();
  sub_2397690E0(a2, (std::__shared_weak_count_vtbl **)&provider);
  v5 = CGImageSourceCreateWithDataProvider(provider, 0);
  if (CGImageSourceGetStatus(v5))
  {
    CFRelease(v5);
    v6 = 0;
    goto LABEL_26;
  }
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, 0);
  v8 = CGImageSourceCopyPropertiesAtIndex(v5, 0, 0);
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  cf = CGDataProviderCopyData(DataProvider);
  BytePtr = CFDataGetBytePtr(cf);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
  v13 = (const void *)*MEMORY[0x24BDD93D0];
  v14 = (void *)MEMORY[0x23B83EC40]();
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(v8, v13);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberCGFloatType, &valuePtr);
    v16 = *(double *)&valuePtr;
  }
  else
  {
    v16 = 0.0;
  }
  objc_autoreleasePoolPop(v14);
  p_valuePtr = (char *)&valuePtr;
  sub_239616738(&valuePtr, v8, (const void *)*MEMORY[0x24BDD92D0]);
  v18 = v58;
  if ((v58 & 0x80u) == 0)
    v19 = (char *)&valuePtr + v58;
  else
    v19 = &valuePtr[v57];
  if ((v58 & 0x80u) != 0)
    p_valuePtr = valuePtr;
  if (p_valuePtr != v19)
  {
    do
    {
      *p_valuePtr = __tolower(*p_valuePtr);
      ++p_valuePtr;
    }
    while (p_valuePtr != v19);
    v18 = v58;
  }
  if ((v18 & 0x80) != 0)
  {
    if (v57 != 3)
      goto LABEL_23;
    v20 = (char **)valuePtr;
  }
  else
  {
    if (v18 != 3)
      goto LABEL_23;
    v20 = &valuePtr;
  }
  v21 = *(unsigned __int16 *)v20;
  v22 = *((unsigned __int8 *)v20 + 2);
  if (v21 == 26482 && v22 == 98)
  {
    sub_23979D0F0(a1, &v54);
    v28 = v54;
    v29 = (std::__shared_weak_count *)v55;
    if ((_QWORD)v55)
    {
      v30 = (unint64_t *)(v55 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (!v28 || sub_23979A918(a1) != 24 || sub_23979C8D0(a1) != Width || sub_23979CAD8(a1) != Height)
    {
      v53[0] = Width;
      v53[1] = Height;
      __p = operator new(0xA0uLL);
      v52 = xmmword_239EC64A0;
      strcpy((char *)__p, "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/aspenbase/third-party/cpg-applecmake/src/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h:216");
      sub_23979BD68((uint64_t)&v54, v53, 0x18u, (uint64_t)&__p, 1u);
      v32 = v55;
      v55 = 0uLL;
      v33 = *(std::__shared_weak_count **)(a1 + 16);
      *(_OWORD *)(a1 + 8) = v32;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      sub_23979BCF4(&v54);
      if (SHIBYTE(v52) < 0)
        operator delete(__p);
    }
    sub_23979C518(a1, &v54);
    v36 = sub_23979B638((uint64_t)&v54, 0);
    if (Height && Width)
    {
      v38 = BitsPerPixel >> 3;
      if ((unint64_t)v16 == 16)
      {
        v43 = 0;
        v44 = (_BYTE *)(v36 + 1);
        do
        {
          v45 = v44;
          v46 = Width;
          do
          {
            LOWORD(v37) = *(_WORD *)BytePtr;
            *(double *)&v47 = (double)*(unint64_t *)&v37 * 255.0 / 65535.0;
            *(v45 - 1) = (int)*(double *)&v47;
            LOWORD(v47) = *((_WORD *)BytePtr + 1);
            *(double *)&v48 = (double)v47 * 255.0 / 65535.0;
            *v45 = (int)*(double *)&v48;
            LOWORD(v48) = *((_WORD *)BytePtr + 2);
            v37 = (double)v48 * 255.0 / 65535.0;
            v45[1] = (int)v37;
            BytePtr += v38;
            v45 += 3;
            --v46;
          }
          while (v46);
          ++v43;
          v44 += 3 * Width;
        }
        while (v43 != Height);
      }
      else if ((unint64_t)v16 == 8)
      {
        v39 = 0;
        v40 = (_BYTE *)(v36 + 1);
        do
        {
          v41 = v40;
          v42 = Width;
          do
          {
            *(v41 - 1) = *BytePtr;
            *v41 = BytePtr[1];
            v41[1] = BytePtr[2];
            BytePtr += v38;
            v41 += 3;
            --v42;
          }
          while (v42);
          ++v39;
          v40 += 3 * Width;
        }
        while (v39 != Height);
      }
    }
    sub_23979B610(&v54);
    v6 = 1;
    goto LABEL_24;
  }
LABEL_23:
  v6 = 0;
LABEL_24:
  CFRelease(v5);
  CFRelease(ImageAtIndex);
  CFRelease(v8);
  CFRelease(cf);
  if ((char)v58 < 0)
    operator delete(valuePtr);
LABEL_26:
  v24 = v60;
  if (v60)
  {
    v25 = (unint64_t *)&v60->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  objc_autoreleasePoolPop(v4);
  return v6;
}

void sub_239618CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if (a26 < 0)
    {
LABEL_5:
      operator delete(a21);
      sub_239416DA0((uint64_t)&a27);
      _Unwind_Resume(a1);
    }
  }
  else if (a26 < 0)
  {
    goto LABEL_5;
  }
  sub_239416DA0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_239618E0C(uint64_t a1, void *a2, int a3)
{
  if (a3 == 1380410945)
    return sub_239617F20(a1, a2);
  if (a3 == 24)
    return sub_2396187EC(a1, a2);
  return 0;
}

uint64_t sub_239618E34(uint64_t a1, unsigned int a2, __int128 *a3)
{
  const std::error_category *v6;
  void *__p[2];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;

  v6 = std::generic_category();
  sub_23952329C(__p, a3);
  sub_239A434D0(a1, a2, (uint64_t)v6, (__int128 *)__p);
  if (!v16)
    return a1;
  if (!v15)
    goto LABEL_5;
  if (v14 < 0)
  {
    operator delete(v13);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_5:
      if (!v10)
        return a1;
      goto LABEL_6;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v11);
  if (!v10)
    return a1;
LABEL_6:
  if (v9 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_239618EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239523188((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239618F08(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  sub_239A42F9C(a1, &__dst);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_239618FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239618FF8(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239619034()
{
  return 29;
}

uint64_t sub_23961903C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_239619044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 88, 3, a1 + 100, 1);
}

uint64_t sub_239619060(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2396190DC(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239619118()
{
  return 23;
}

uint64_t sub_239619120(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_239619128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 88, 3, a1 + 100, 2);
}

uint64_t sub_239619144(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_2396191C0(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2396191FC()
{
  return 31;
}

uint64_t sub_239619204(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_23961920C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 88, 3, a1 + 100, 2);
}

uint64_t sub_239619228(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_2396192A4@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_23961940C(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADCAC0;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_2398277C4((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_239817224(result);
    return MEMORY[0x23B83E31C](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_2396193B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396193CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2396193F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_23949CC1C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23961940C@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_250ADCA20;
  sub_23982234C(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_250ADCA40;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_239916924((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_239817224((uint64_t)v5);
}

void sub_2396194C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_239817224((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396194F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239817224((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23961950C@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_239619674(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0AE8;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_23982808C((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_23981A034(result);
    return MEMORY[0x23B83E31C](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_239619620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239619774((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239619634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239619774((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239619658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239619774((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239619674@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_250AE0A48;
  sub_239823DC8(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_250AE0A68;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_239916924((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_23981A034((uint64_t)v5);
}

void sub_239619730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_23981A034((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239619760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23981A034((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239619774(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_23981A034(v2);
    MEMORY[0x23B83E31C](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_2396197BC()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2396197D0()
{
  return 29;
}

__int128 *sub_2396197DC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930B30);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930B30))
  {
    v2 = sub_2396198B4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_256930B18, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_256930B28 = *((_QWORD *)v2 + 2);
      xmmword_256930B18 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930B18, &dword_23940C000);
    __cxa_guard_release(&qword_256930B30);
  }
  if (byte_256930B2F >= 0)
    return &xmmword_256930B18;
  else
    return (__int128 *)xmmword_256930B18;
}

void sub_23961989C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930B30);
  _Unwind_Resume(a1);
}

__int128 *sub_2396198B4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930B50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930B50))
    return &xmmword_256930B38;
  v2 = sub_239619990();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930B38, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930B48 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930B38 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930B38, &dword_23940C000);
  __cxa_guard_release(&qword_256930B50);
  return &xmmword_256930B38;
}

void sub_239619978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930B50);
  _Unwind_Resume(a1);
}

std::string *sub_239619990()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930B70);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930B70))
    return &stru_256930B58;
  sub_239619C30((uint64_t)__p);
  sub_239619A80((uint64_t)__p, &stru_256930B58);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930B58, &dword_23940C000);
  __cxa_guard_release(&qword_256930B70);
  return &stru_256930B58;
}

void sub_239619A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_256930B70);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_256930B70);
  _Unwind_Resume(a1);
}

void sub_239619A80(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930B90);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930B90))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba8u]", &xmmword_256930B78);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930B78, &dword_23940C000);
    __cxa_guard_release(&qword_256930B90);
  }
  if (byte_256930B8F < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_256930B78, *((unint64_t *)&xmmword_256930B78 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_256930B78;
    v13 = unk_256930B88;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_239619BE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930B90);
  _Unwind_Resume(a1);
}

void sub_239619C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_239619C30(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_256930BB0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930BB0))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba8u>]", qword_256930B98);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930B98, &dword_23940C000);
    __cxa_guard_release(&qword_256930BB0);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_256930BD0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_256930BD0))
  {
    v5 = sub_239423A18(qword_256930B98, "<", 0);
    sub_239423914(qword_256930B98, 0, v5, qword_256930BB8);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930BB8, &dword_23940C000);
    __cxa_guard_release(&qword_256930BD0);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_256930BF0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930BF0))
  {
    sub_239A44118((std::string::size_type)qword_256930BB8, (std::string *)&xmmword_256930BD8);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930BD8, &dword_23940C000);
    __cxa_guard_release(&qword_256930BF0);
  }
  if (byte_256930BEF < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_256930BD8, *((unint64_t *)&xmmword_256930BD8 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_256930BD8;
    *(_QWORD *)(a1 + 16) = unk_256930BE8;
  }
}

void sub_239619DCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930BF0);
  _Unwind_Resume(a1);
}

void sub_239619DE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930BD0);
  _Unwind_Resume(a1);
}

void sub_239619DFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930BB0);
  _Unwind_Resume(a1);
}

void sub_239619E18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239619E3C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_23981A034(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_239619E74@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_239619FDC(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADECB8;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_239827CE0((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_239818264(result);
    return MEMORY[0x23B83E31C](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_239619F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239619F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239619FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239581014((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239619FDC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_250ADEC18;
  sub_239822EF4(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_250ADEC38;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_239916924((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_239818264((uint64_t)v5);
}

void sub_23961A098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_239818264((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23961A0C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239818264((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23961A0DC@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_23961A244(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0BC0;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_2398282C0((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_23981B074(result);
    return MEMORY[0x23B83E31C](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_23961A1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23961A344((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961A204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_23961A344((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961A228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_23961A344((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23961A244@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_250AE0B20;
  sub_2398247F4(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_250AE0B40;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_239916924((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_23981B074((uint64_t)v5);
}

void sub_23961A300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_23981B074((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23961A330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23981B074((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23961A344(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_23981B074(v2);
    MEMORY[0x23B83E31C](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_23961A38C()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23961A3A0()
{
  return 32;
}

__int128 *sub_23961A3AC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930C10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930C10))
  {
    v2 = sub_23961A484();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_256930BF8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_256930C08 = *((_QWORD *)v2 + 2);
      xmmword_256930BF8 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930BF8, &dword_23940C000);
    __cxa_guard_release(&qword_256930C10);
  }
  if (byte_256930C0F >= 0)
    return &xmmword_256930BF8;
  else
    return (__int128 *)xmmword_256930BF8;
}

void sub_23961A46C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930C10);
  _Unwind_Resume(a1);
}

__int128 *sub_23961A484()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930C30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930C30))
    return &xmmword_256930C18;
  v2 = sub_23961A560();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930C18, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930C28 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930C18 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930C18, &dword_23940C000);
  __cxa_guard_release(&qword_256930C30);
  return &xmmword_256930C18;
}

void sub_23961A548(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930C30);
  _Unwind_Resume(a1);
}

std::string *sub_23961A560()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930C50);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930C50))
    return &stru_256930C38;
  sub_23961A800((uint64_t)__p);
  sub_23961A650((uint64_t)__p, &stru_256930C38);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930C38, &dword_23940C000);
  __cxa_guard_release(&qword_256930C50);
  return &stru_256930C38;
}

void sub_23961A610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_256930C50);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_256930C50);
  _Unwind_Resume(a1);
}

void sub_23961A650(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930B10);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930B10))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba32f]", &xmmword_256930AF8);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930AF8, &dword_23940C000);
    __cxa_guard_release(&qword_256930B10);
  }
  if (byte_256930B0F < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_256930AF8, *((unint64_t *)&xmmword_256930AF8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_256930AF8;
    v13 = unk_256930B08;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_23961A7B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930B10);
  _Unwind_Resume(a1);
}

void sub_23961A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23961A800(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_256930C70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930C70))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba32f>]", qword_256930C58);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930C58, &dword_23940C000);
    __cxa_guard_release(&qword_256930C70);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_256930C90);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_256930C90))
  {
    v5 = sub_239423A18(qword_256930C58, "<", 0);
    sub_239423914(qword_256930C58, 0, v5, qword_256930C78);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930C78, &dword_23940C000);
    __cxa_guard_release(&qword_256930C90);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_256930CB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930CB0))
  {
    sub_239A44118((std::string::size_type)qword_256930C78, (std::string *)&xmmword_256930C98);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930C98, &dword_23940C000);
    __cxa_guard_release(&qword_256930CB0);
  }
  if (byte_256930CAF < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_256930C98, *((unint64_t *)&xmmword_256930C98 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_256930C98;
    *(_QWORD *)(a1 + 16) = unk_256930CA8;
  }
}

void sub_23961A99C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930CB0);
  _Unwind_Resume(a1);
}

void sub_23961A9B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930C90);
  _Unwind_Resume(a1);
}

void sub_23961A9CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930C70);
  _Unwind_Resume(a1);
}

void sub_23961A9E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23961AA0C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_23981B074(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_23961AA44@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_23961ABAC(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0C98;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_23982793C((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_239817D50(result);
    return MEMORY[0x23B83E31C](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_23961AB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23961ACAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961AB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_23961ACAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961AB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_23961ACAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23961ABAC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_250AE0BF8;
  sub_23982298C(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_250AE0C18;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_239916924((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_239817D50(v5);
}

void sub_23961AC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_239817D50(va);
  _Unwind_Resume(a1);
}

void sub_23961AC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239817D50(va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23961ACAC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239817D50();
    MEMORY[0x23B83E31C](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_23961ACF4()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23961AD08()
{
  return 23;
}

__int128 *sub_23961AD14()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930CD0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930CD0))
  {
    v2 = sub_23961ADEC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_256930CB8, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_256930CC8 = *((_QWORD *)v2 + 2);
      xmmword_256930CB8 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930CB8, &dword_23940C000);
    __cxa_guard_release(&qword_256930CD0);
  }
  if (byte_256930CCF >= 0)
    return &xmmword_256930CB8;
  else
    return (__int128 *)xmmword_256930CB8;
}

void sub_23961ADD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930CD0);
  _Unwind_Resume(a1);
}

__int128 *sub_23961ADEC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930CF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930CF0))
    return &xmmword_256930CD8;
  v2 = sub_23961AEC8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930CD8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930CE8 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930CD8 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930CD8, &dword_23940C000);
  __cxa_guard_release(&qword_256930CF0);
  return &xmmword_256930CD8;
}

void sub_23961AEB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930CF0);
  _Unwind_Resume(a1);
}

std::string *sub_23961AEC8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930D10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930D10))
    return &stru_256930CF8;
  sub_23961B168((uint64_t)__p);
  sub_23961AFB8((uint64_t)__p, &stru_256930CF8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930CF8, &dword_23940C000);
  __cxa_guard_release(&qword_256930D10);
  return &stru_256930CF8;
}

void sub_23961AF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_256930D10);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_256930D10);
  _Unwind_Resume(a1);
}

void sub_23961AFB8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930D30);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930D30))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16f]", &xmmword_256930D18);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930D18, &dword_23940C000);
    __cxa_guard_release(&qword_256930D30);
  }
  if (byte_256930D2F < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_256930D18, *((unint64_t *)&xmmword_256930D18 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_256930D18;
    v13 = unk_256930D28;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_23961B120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930D30);
  _Unwind_Resume(a1);
}

void sub_23961B13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23961B168(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_256930D50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930D50))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16f>]", qword_256930D38);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930D38, &dword_23940C000);
    __cxa_guard_release(&qword_256930D50);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_256930D70);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_256930D70))
  {
    v5 = sub_239423A18(qword_256930D38, "<", 0);
    sub_239423914(qword_256930D38, 0, v5, qword_256930D58);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930D58, &dword_23940C000);
    __cxa_guard_release(&qword_256930D70);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_256930D90);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930D90))
  {
    sub_239A44118((std::string::size_type)qword_256930D58, (std::string *)&xmmword_256930D78);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930D78, &dword_23940C000);
    __cxa_guard_release(&qword_256930D90);
  }
  if (byte_256930D8F < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_256930D78, *((unint64_t *)&xmmword_256930D78 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_256930D78;
    *(_QWORD *)(a1 + 16) = unk_256930D88;
  }
}

void sub_23961B304(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930D90);
  _Unwind_Resume(a1);
}

void sub_23961B31C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930D70);
  _Unwind_Resume(a1);
}

void sub_23961B334(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930D50);
  _Unwind_Resume(a1);
}

void sub_23961B350(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23961B374(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_239817D50();
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_23961B3AC@<X0>(_DWORD *a1@<X0>, _WORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int16 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_23961B514(a1, &v13);
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0D70;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v15 = v3;
  v13 = 0;
  sub_239828204((uint64_t)a2, &v14, 0);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 104))(*(_QWORD *)a2);
  v6 = v5;
  if ((v5 & 0xFFFFFF) <= 0x10000)
    v6 = 0;
  v7 = v5 & 0xFF00;
  if ((v5 & 0xFF0000) == 0)
    v7 = 0;
  a2[60] = v7 & 0xFF00 | v6;
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_23981AB60(result);
    return MEMORY[0x23B83E31C](v12, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_23961B4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23961B614((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961B4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_23961B614((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23961B4F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_23961B614((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23961B514@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[7];

  v10[6] = &off_250AE0CD0;
  sub_239824420(a1, (uint64_t)v5);
  v3 = operator new();
  *(_QWORD *)v3 = &off_250AE0CF0;
  *(_OWORD *)(v3 + 8) = v6;
  *(_OWORD *)(v3 + 24) = v7;
  *(_OWORD *)(v3 + 40) = v8;
  *(_QWORD *)(v3 + 56) = v9;
  sub_239916924((__n128 *)(v3 + 64), (__n128 *)v10);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)&v10[3];
  *(_QWORD *)(v3 + 104) = v10[5];
  *a2 = v3;
  return sub_23981AB60(v5);
}

void sub_23961B5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  __n128 v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4);
  sub_23981AB60(va);
  _Unwind_Resume(a1);
}

void sub_23961B600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23981AB60(va);
  _Unwind_Resume(a1);
}

uint64_t *sub_23961B614(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_23981AB60();
    MEMORY[0x23B83E31C](v3, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_23961B65C()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23961B670()
{
  return 31;
}

__int128 *sub_23961B67C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930DB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930DB0))
  {
    v2 = sub_23961B754();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_256930D98, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_256930DA8 = *((_QWORD *)v2 + 2);
      xmmword_256930D98 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930D98, &dword_23940C000);
    __cxa_guard_release(&qword_256930DB0);
  }
  if (byte_256930DAF >= 0)
    return &xmmword_256930D98;
  else
    return (__int128 *)xmmword_256930D98;
}

void sub_23961B73C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930DB0);
  _Unwind_Resume(a1);
}

__int128 *sub_23961B754()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930DD0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930DD0))
    return &xmmword_256930DB8;
  v2 = sub_23961B830();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930DB8, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930DC8 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930DB8 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930DB8, &dword_23940C000);
  __cxa_guard_release(&qword_256930DD0);
  return &xmmword_256930DB8;
}

void sub_23961B818(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930DD0);
  _Unwind_Resume(a1);
}

std::string *sub_23961B830()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930DF0);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930DF0))
    return &stru_256930DD8;
  sub_23961BAD0((uint64_t)__p);
  sub_23961B920((uint64_t)__p, &stru_256930DD8);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930DD8, &dword_23940C000);
  __cxa_guard_release(&qword_256930DF0);
  return &stru_256930DD8;
}

void sub_23961B8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_256930DF0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_256930DF0);
  _Unwind_Resume(a1);
}

void sub_23961B920(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930E10);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930E10))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16f]", &xmmword_256930DF8);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930DF8, &dword_23940C000);
    __cxa_guard_release(&qword_256930E10);
  }
  if (byte_256930E0F < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_256930DF8, *((unint64_t *)&xmmword_256930DF8 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_256930DF8;
    v13 = unk_256930E08;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_23961BA88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930E10);
  _Unwind_Resume(a1);
}

void sub_23961BAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23961BAD0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_256930E30);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_256930E30))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16f>]", qword_256930E18);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930E18, &dword_23940C000);
    __cxa_guard_release(&qword_256930E30);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_256930E50);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_256930E50))
  {
    v5 = sub_239423A18(qword_256930E18, "<", 0);
    sub_239423914(qword_256930E18, 0, v5, qword_256930E38);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930E38, &dword_23940C000);
    __cxa_guard_release(&qword_256930E50);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_256930E70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930E70))
  {
    sub_239A44118((std::string::size_type)qword_256930E38, (std::string *)&xmmword_256930E58);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930E58, &dword_23940C000);
    __cxa_guard_release(&qword_256930E70);
  }
  if (byte_256930E6F < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_256930E58, *((unint64_t *)&xmmword_256930E58 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_256930E58;
    *(_QWORD *)(a1 + 16) = unk_256930E68;
  }
}

void sub_23961BC6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930E70);
  _Unwind_Resume(a1);
}

void sub_23961BC84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930E50);
  _Unwind_Resume(a1);
}

void sub_23961BC9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930E30);
  _Unwind_Resume(a1);
}

void sub_23961BCB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23961BCDC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_23981AB60();
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_23961BD14(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a3;
  v5 = *(_QWORD *)(a3 + 16);
  sub_23961BD44(a1, a2, &v4, a4);
}

void sub_23961BD44(_QWORD *a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE __p[72];
  _BYTE v30[32];
  __int128 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t (**v36)();
  __int128 v37;
  _BYTE v38[30];
  void *v39[2];
  char v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  unint64_t v48;
  void *v49[2];
  char v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  char v56;
  char v57;
  uint64_t (**v58)();
  __int128 v59;
  void *v60[2];
  char v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  char v67;
  char v68;
  __int128 v69;
  uint64_t v70;
  _QWORD v71[3];
  __int128 v72;
  char v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  char v79;
  char v80;

  if (a2)
  {
    v7 = a2;
    if ((a2 & 0xFFFFFFFD) != 4)
    {
      if (a2 == 8)
      {
        sub_2396168A0(a1, a4);
        return;
      }
      goto LABEL_44;
    }
LABEL_8:
    v71[1] = 0;
    v71[2] = 0;
    v71[0] = &off_250AE94F0;
    v69 = *a3;
    v70 = *((_QWORD *)a3 + 2);
    if ((sub_23961F414((uint64_t)v71, a1, v7, 875704422, (uint64_t)&v69) & 1) != 0)
    {
      v59 = 0uLL;
      v58 = &off_250AE94F0;
      if (*((_BYTE *)a3 + 16))
      {
        v48 = sub_23979C610((uint64_t)v71);
        *(_QWORD *)__p = operator new(0xA0uLL);
        *(_OWORD *)&__p[8] = xmmword_239EC64A0;
        strcpy(*(char **)__p, "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/aspenbase/third-party/cpg-applecmake/src/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h:216");
        sub_23979BD68((uint64_t)&v36, (unsigned int *)&v48, 0x18u, (uint64_t)__p, 1u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((sub_239710484(*((_QWORD *)a3 + 1), (uint64_t)v71, (uint64_t)&v36) & 0xFF00000000) == 0)
        {
          v12 = v37;
          if (*((_QWORD *)&v37 + 1))
          {
            v13 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
            do
              v14 = __ldxr(v13);
            while (__stxr(v14 + 1, v13));
          }
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          v59 = v12;
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          sub_23979BCF4(&v36);
          v34 = &off_250AE94F0;
          v35 = v59;
          if (*((_QWORD *)&v59 + 1))
          {
            v18 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          sub_239785B2C((uint64_t)&v34, (uint64_t)__p);
          v36 = &off_250ADB1D0;
          v37 = *(_OWORD *)&__p[8];
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = 0;
          *(_OWORD *)v38 = *(_OWORD *)&__p[24];
          *(_OWORD *)&v38[14] = *(_OWORD *)&__p[38];
          v20 = nullsub_4(&__p[24]);
          v21 = *(std::__shared_weak_count **)&__p[16];
          if (*(_QWORD *)&__p[16])
          {
            v22 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          nullsub_4(__p);
          sub_23979BCF4(&v34);
          LOBYTE(v48) = 0;
          *(_QWORD *)__p = &off_250ADBEA0;
          sub_23949C9B0(v38, &v48, &__p[8]);
          sub_239621E94((uint64_t)&v36, __p);
          *(_QWORD *)a4 = &off_250ADBEA0;
          *(_OWORD *)(a4 + 8) = *(_OWORD *)&__p[8];
          *(_QWORD *)&__p[8] = 0;
          *(_QWORD *)&__p[16] = 0;
          *(_OWORD *)(a4 + 72) = *(_OWORD *)v30;
          *(_OWORD *)(a4 + 88) = *(_OWORD *)&v30[16];
          *(_OWORD *)(a4 + 104) = v31;
          *(_QWORD *)(a4 + 120) = v32;
          *(_OWORD *)(a4 + 24) = *(_OWORD *)&__p[24];
          *(_OWORD *)(a4 + 40) = *(_OWORD *)&__p[40];
          *(_OWORD *)(a4 + 56) = *(_OWORD *)&__p[56];
          *(_WORD *)(a4 + 128) = v33;
          *(_BYTE *)(a4 + 136) = 1;
          sub_239416DA0((uint64_t)&__p[8]);
          nullsub_4(__p);
          v24 = nullsub_4(v38);
          v25 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
          if (*((_QWORD *)&v37 + 1))
          {
            v26 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v24);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          nullsub_4(&v36);
          goto LABEL_124;
        }
        sub_239618F08(v39, "Failed to convert pixel format.");
        v47 = 1;
        sub_239616578(5u, (__int128 *)v39, (uint64_t)__p);
        *(_OWORD *)a4 = *(_OWORD *)__p;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (BYTE8(v31))
        {
          *(_BYTE *)(a4 + 40) = 0;
          if (__p[40])
          {
            *(_OWORD *)(a4 + 16) = *(_OWORD *)&__p[16];
            *(_QWORD *)(a4 + 32) = *(_QWORD *)&__p[32];
            memset(&__p[16], 0, 24);
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (!(_BYTE)v31)
          {
            *(_BYTE *)(a4 + 112) = 1;
            *(_BYTE *)(a4 + 136) = 0;
            if (!__p[40])
              goto LABEL_101;
            goto LABEL_99;
          }
          v9 = *(_QWORD *)v30;
          *(_QWORD *)(a4 + 64) = *(_QWORD *)&__p[64];
          *(_OWORD *)(a4 + 48) = *(_OWORD *)&__p[48];
          *(_QWORD *)&__p[48] = 0;
          *(_QWORD *)&__p[56] = 0;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = *(_OWORD *)&v30[8];
          *(_QWORD *)(a4 + 96) = *(_QWORD *)&v30[24];
          *(_QWORD *)&__p[64] = 0;
          memset(&v30[8], 0, 24);
          *(_BYTE *)(a4 + 104) = 1;
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 136) = 0;
          if ((v30[31] & 0x80000000) != 0)
          {
            operator delete(*(void **)&v30[8]);
            if ((__p[71] & 0x80000000) == 0)
            {
LABEL_19:
              if (!__p[40])
                goto LABEL_101;
LABEL_99:
              if ((__p[39] & 0x80000000) != 0)
                operator delete(*(void **)&__p[16]);
              goto LABEL_101;
            }
          }
          else if ((__p[71] & 0x80000000) == 0)
          {
            goto LABEL_19;
          }
          operator delete(*(void **)&__p[48]);
          if (__p[40])
            goto LABEL_99;
        }
        else
        {
          *(_BYTE *)(a4 + 136) = 0;
        }
LABEL_101:
        if (v47)
        {
          if (v46)
          {
            if (v45 < 0)
              operator delete(v44);
            if (v43 < 0)
              operator delete(v42);
          }
          if (v41)
          {
            if (v40 < 0)
              operator delete(v39[0]);
          }
        }
        sub_23979BCF4(&v36);
LABEL_124:
        sub_23979BCF4(&v58);
LABEL_125:
        sub_23979BCF4(v71);
        return;
      }
      sub_239618F08(v49, "No convertor provided.");
      v57 = 1;
      sub_239616578(5u, (__int128 *)v49, (uint64_t)__p);
      *(_OWORD *)a4 = *(_OWORD *)__p;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (!BYTE8(v31))
      {
        *(_BYTE *)(a4 + 136) = 0;
        goto LABEL_115;
      }
      *(_BYTE *)(a4 + 40) = 0;
      if (__p[40])
      {
        *(_OWORD *)(a4 + 16) = *(_OWORD *)&__p[16];
        *(_QWORD *)(a4 + 32) = *(_QWORD *)&__p[32];
        memset(&__p[16], 0, 24);
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (!(_BYTE)v31)
      {
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 136) = 0;
        if (!__p[40])
        {
LABEL_115:
          if (v57)
          {
            if (v56)
            {
              if (v55 < 0)
                operator delete(v54);
              if (v53 < 0)
                operator delete(v52);
            }
            if (v51 && v50 < 0)
              operator delete(v49[0]);
          }
          goto LABEL_124;
        }
LABEL_113:
        if ((__p[39] & 0x80000000) != 0)
          operator delete(*(void **)&__p[16]);
        goto LABEL_115;
      }
      v11 = *(_QWORD *)v30;
      *(_QWORD *)(a4 + 64) = *(_QWORD *)&__p[64];
      *(_OWORD *)(a4 + 48) = *(_OWORD *)&__p[48];
      *(_QWORD *)&__p[48] = 0;
      *(_QWORD *)&__p[56] = 0;
      *(_QWORD *)(a4 + 72) = v11;
      *(_OWORD *)(a4 + 80) = *(_OWORD *)&v30[8];
      *(_QWORD *)(a4 + 96) = *(_QWORD *)&v30[24];
      *(_QWORD *)&__p[64] = 0;
      memset(&v30[8], 0, 24);
      *(_BYTE *)(a4 + 104) = 1;
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 136) = 0;
      if ((v30[31] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v30[8]);
        if ((__p[71] & 0x80000000) == 0)
        {
LABEL_38:
          if (!__p[40])
            goto LABEL_115;
          goto LABEL_113;
        }
      }
      else if ((__p[71] & 0x80000000) == 0)
      {
        goto LABEL_38;
      }
      operator delete(*(void **)&__p[48]);
      if (!__p[40])
        goto LABEL_115;
      goto LABEL_113;
    }
    sub_239618F08(v60, "Failed to load image.");
    v68 = 1;
    sub_239616578(5u, (__int128 *)v60, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (!BYTE8(v31))
    {
      *(_BYTE *)(a4 + 136) = 0;
      goto LABEL_73;
    }
    *(_BYTE *)(a4 + 40) = 0;
    if (__p[40])
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)&__p[16];
      *(_QWORD *)(a4 + 32) = *(_QWORD *)&__p[32];
      memset(&__p[16], 0, 24);
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (!(_BYTE)v31)
    {
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 136) = 0;
      if (!__p[40])
      {
LABEL_73:
        if (v68)
        {
          if (v67)
          {
            if (v66 < 0)
              operator delete(v65);
            if (v64 < 0)
              operator delete(v63);
          }
          if (v62 && v61 < 0)
            operator delete(v60[0]);
        }
        goto LABEL_125;
      }
LABEL_71:
      if ((__p[39] & 0x80000000) != 0)
        operator delete(*(void **)&__p[16]);
      goto LABEL_73;
    }
    v10 = *(_QWORD *)v30;
    *(_QWORD *)(a4 + 64) = *(_QWORD *)&__p[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&__p[48];
    *(_QWORD *)&__p[48] = 0;
    *(_QWORD *)&__p[56] = 0;
    *(_QWORD *)(a4 + 72) = v10;
    *(_OWORD *)(a4 + 80) = *(_OWORD *)&v30[8];
    *(_QWORD *)(a4 + 96) = *(_QWORD *)&v30[24];
    *(_QWORD *)&__p[64] = 0;
    memset(&v30[8], 0, 24);
    *(_BYTE *)(a4 + 104) = 1;
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 136) = 0;
    if ((v30[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v30[8]);
      if ((__p[71] & 0x80000000) == 0)
      {
LABEL_27:
        if (!__p[40])
          goto LABEL_73;
        goto LABEL_71;
      }
    }
    else if ((__p[71] & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(*(void **)&__p[48]);
    if (!__p[40])
      goto LABEL_73;
    goto LABEL_71;
  }
  v8 = std::istream::peek();
  if (v8 == 137)
  {
    v7 = 3;
LABEL_44:
    sub_239622948(a1, v7, a4);
    return;
  }
  if (v8 == 255)
  {
    v7 = 4;
    goto LABEL_8;
  }
  if ((v8 & 0xFFFFFFFB) == 0x49)
  {
    v7 = 5;
    goto LABEL_44;
  }
  if (!v8)
  {
    v7 = 6;
    goto LABEL_8;
  }
  if (v8 == 118)
  {
    v7 = 7;
    goto LABEL_44;
  }
  sub_239618F08(&v72, "Failed to identify image format.");
  v80 = 1;
  sub_239616578(5u, &v72, (uint64_t)__p);
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!BYTE8(v31))
  {
    *(_BYTE *)(a4 + 136) = 0;
    goto LABEL_134;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (__p[40])
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&__p[16];
    *(_QWORD *)(a4 + 32) = *(_QWORD *)&__p[32];
    memset(&__p[16], 0, 24);
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if ((_BYTE)v31)
  {
    v28 = *(_QWORD *)v30;
    *(_QWORD *)(a4 + 64) = *(_QWORD *)&__p[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&__p[48];
    *(_QWORD *)&__p[48] = 0;
    *(_QWORD *)&__p[56] = 0;
    *(_QWORD *)(a4 + 72) = v28;
    *(_OWORD *)(a4 + 80) = *(_OWORD *)&v30[8];
    *(_QWORD *)(a4 + 96) = *(_QWORD *)&v30[24];
    *(_QWORD *)&__p[64] = 0;
    memset(&v30[8], 0, 24);
    *(_BYTE *)(a4 + 104) = 1;
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 136) = 0;
    if ((v30[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&v30[8]);
      if ((__p[71] & 0x80000000) == 0)
      {
LABEL_93:
        if (!__p[40])
          goto LABEL_134;
LABEL_132:
        if ((__p[39] & 0x80000000) != 0)
          operator delete(*(void **)&__p[16]);
        goto LABEL_134;
      }
    }
    else if ((__p[71] & 0x80000000) == 0)
    {
      goto LABEL_93;
    }
    operator delete(*(void **)&__p[48]);
    if (!__p[40])
      goto LABEL_134;
    goto LABEL_132;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 136) = 0;
  if (__p[40])
    goto LABEL_132;
LABEL_134:
  if (v80)
  {
    if (v79)
    {
      if (v78 < 0)
        operator delete(v77);
      if (v76 < 0)
        operator delete(v75);
    }
    if (v74 && v73 < 0)
      operator delete((void *)v72);
  }
}

void sub_23961C774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239523188(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_23961C788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  uint64_t v64;

  sub_239416DA0(v63);
  nullsub_4(&__p);
  sub_239416D30((uint64_t)&a29);
  sub_23979BCF4(&a63);
  sub_23979BCF4((_QWORD *)(v64 - 176));
  _Unwind_Resume(a1);
}

void sub_23961C830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  sub_239523188((uint64_t)&a66);
  sub_23979BCF4((_QWORD *)(v66 - 176));
  _Unwind_Resume(a1);
}

void sub_23961C84C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23979BCF4((_QWORD *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23961C860(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23979BCF4((_QWORD *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_23961C874(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v5;
  uint64_t v6;

  v5 = *(_OWORD *)a4;
  v6 = *(_QWORD *)(a4 + 16);
  sub_23961C8A4(a1, a2, a3, &v5, a5);
}

void sub_23961C8A4(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  void *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *size;
  void *v27;
  _QWORD __dst[2];
  char v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  char v36;
  void *v37[2];
  char v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  void *v46[2];
  char v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 __p;
  uint64_t v74;
  char v75;
  char v76;
  std::string v77;
  char v78;
  char v79;
  _BYTE v80[24];
  _BYTE *v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 0xFFFFFFFD) == 4)
  {
    v10 = *(void **)(a1 + 80);
    if (*(_BYTE *)(a1 + 128))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "unknown location");
      v10 = *(void **)(a1 + 80);
    }
    v17 = *(unsigned int *)(a1 + 108);
    v80[0] = 0;
    v82 = 0;
    sub_23979BE48((unsigned int *)(a1 + 112), 0x18u, v10, v17 | 0x100000000, (uint64_t)v80, (uint64_t)&v77);
    if (v82)
    {
      v18 = v81;
      if (v81 == v80)
      {
        v19 = 4;
        v18 = v80;
      }
      else
      {
        if (!v81)
          goto LABEL_22;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
LABEL_22:
    if (v79)
    {
      v55 = *a4;
      v56 = *((_QWORD *)a4 + 2);
      if ((sub_23961F944((uint64_t)&v77, (uint64_t)a2, a3, (unsigned int *)&v55) & 1) != 0)
      {
        *(_BYTE *)(a5 + 120) = 1;
        goto LABEL_90;
      }
      sub_239618F08(v46, "Failed to save image.");
      v54 = 1;
      sub_239616578(5u, (__int128 *)v46, (uint64_t)&v66);
      *(_OWORD *)a5 = v66;
      *(_BYTE *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      if (!v76)
      {
        *(_BYTE *)(a5 + 120) = 0;
        goto LABEL_80;
      }
      *(_BYTE *)(a5 + 40) = 0;
      if (v69)
      {
        *(_OWORD *)(a5 + 16) = v67;
        *(_QWORD *)(a5 + 32) = v68;
        v68 = 0;
        v67 = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (!v75)
      {
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (!v69)
          goto LABEL_80;
LABEL_78:
        if (SHIBYTE(v68) < 0)
          operator delete((void *)v67);
LABEL_80:
        if (v54)
        {
          if (v53)
          {
            if (v52 < 0)
              operator delete(v51);
            if (v50 < 0)
              operator delete(v49);
          }
          if (v48 && v47 < 0)
          {
            v25 = v46[0];
            goto LABEL_89;
          }
        }
        goto LABEL_90;
      }
      v22 = v72;
      *(_QWORD *)(a5 + 64) = v71;
      *(_OWORD *)(a5 + 48) = v70;
      v70 = 0uLL;
      *(_QWORD *)(a5 + 72) = v22;
      *(_OWORD *)(a5 + 80) = __p;
      *(_QWORD *)(a5 + 96) = v74;
      v74 = 0;
      v71 = 0;
      __p = 0uLL;
      *(_BYTE *)(a5 + 104) = 1;
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (SHIBYTE(v74) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_39:
          if (!v69)
            goto LABEL_80;
          goto LABEL_78;
        }
      }
      else if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete((void *)v70);
      if (!v69)
        goto LABEL_80;
      goto LABEL_78;
    }
    sub_239618F08(&v57, "Failed to save image.");
    v65 = 1;
    sub_239616578(5u, &v57, (uint64_t)&v66);
    *(_OWORD *)a5 = v66;
    *(_BYTE *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 112) = 0;
    if (!v76)
    {
      *(_BYTE *)(a5 + 120) = 0;
      goto LABEL_67;
    }
    *(_BYTE *)(a5 + 40) = 0;
    if (v69)
    {
      *(_OWORD *)(a5 + 16) = v67;
      *(_QWORD *)(a5 + 32) = v68;
      v68 = 0;
      v67 = 0uLL;
      *(_BYTE *)(a5 + 40) = 1;
    }
    *(_BYTE *)(a5 + 48) = 0;
    *(_BYTE *)(a5 + 104) = 0;
    if (!v75)
    {
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (!v69)
        goto LABEL_67;
LABEL_65:
      if (SHIBYTE(v68) < 0)
        operator delete((void *)v67);
LABEL_67:
      if (v65)
      {
        if (v64)
        {
          if (v63 < 0)
            operator delete(v62);
          if (v61 < 0)
            operator delete(v60);
        }
        if (v59 && v58 < 0)
        {
          v25 = (void *)v57;
LABEL_89:
          operator delete(v25);
        }
      }
LABEL_90:
      if (v79)
      {
        (*(void (**)(std::string *))v77.__r_.__value_.__l.__data_)(&v77);
        return;
      }
      if (v78 < 0)
      {
        size = (void *)v77.__r_.__value_.__l.__size_;
LABEL_129:
        operator delete(size);
        return;
      }
      return;
    }
    v21 = v72;
    *(_QWORD *)(a5 + 64) = v71;
    *(_OWORD *)(a5 + 48) = v70;
    v70 = 0uLL;
    *(_QWORD *)(a5 + 72) = v21;
    *(_OWORD *)(a5 + 80) = __p;
    *(_QWORD *)(a5 + 96) = v74;
    v74 = 0;
    v71 = 0;
    __p = 0uLL;
    *(_BYTE *)(a5 + 104) = 1;
    *(_BYTE *)(a5 + 112) = 1;
    *(_BYTE *)(a5 + 120) = 0;
    if (SHIBYTE(v74) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
LABEL_31:
        if (!v69)
          goto LABEL_67;
        goto LABEL_65;
      }
    }
    else if ((SHIBYTE(v71) & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
    operator delete((void *)v70);
    if (!v69)
      goto LABEL_67;
    goto LABEL_65;
  }
  v20 = 1;
  switch(a3)
  {
    case 0:
      sub_239621138("Format Not Supported", &v77);
      sub_239A42F9C(__dst, (__int128 *)&v77);
      v36 = 1;
      sub_239914D5C((uint64_t)__dst, (uint64_t)&v66);
      *(_OWORD *)a5 = v66;
      *(_BYTE *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      if (!v76)
      {
        *(_BYTE *)(a5 + 120) = 0;
        goto LABEL_104;
      }
      *(_BYTE *)(a5 + 40) = 0;
      if (v69)
      {
        *(_OWORD *)(a5 + 16) = v67;
        *(_QWORD *)(a5 + 32) = v68;
        v68 = 0;
        v67 = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (!v75)
      {
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (!v69)
          goto LABEL_104;
LABEL_102:
        if (SHIBYTE(v68) < 0)
          operator delete((void *)v67);
LABEL_104:
        if (v36)
        {
          if (v35)
          {
            if (v34 < 0)
              operator delete(v33);
            if (v32 < 0)
              operator delete(v31);
          }
          if (v30 && v29 < 0)
          {
            v27 = (void *)__dst[0];
            goto LABEL_126;
          }
        }
        goto LABEL_127;
      }
      v23 = v72;
      *(_QWORD *)(a5 + 64) = v71;
      *(_OWORD *)(a5 + 48) = v70;
      v70 = 0uLL;
      *(_QWORD *)(a5 + 72) = v23;
      *(_OWORD *)(a5 + 80) = __p;
      *(_QWORD *)(a5 + 96) = v74;
      v74 = 0;
      v71 = 0;
      __p = 0uLL;
      *(_BYTE *)(a5 + 104) = 1;
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (SHIBYTE(v74) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_49:
          if (!v69)
            goto LABEL_104;
          goto LABEL_102;
        }
      }
      else if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
        goto LABEL_49;
      }
      operator delete((void *)v70);
      if (!v69)
        goto LABEL_104;
      goto LABEL_102;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v20 = a3;
      goto LABEL_19;
    case 8:
      sub_239621B80("Not Implemented", &v77);
      sub_239A42F9C(v37, (__int128 *)&v77);
      v45 = 1;
      sub_239914D5C((uint64_t)v37, (uint64_t)&v66);
      *(_OWORD *)a5 = v66;
      *(_BYTE *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      if (!v76)
      {
        *(_BYTE *)(a5 + 120) = 0;
        goto LABEL_117;
      }
      *(_BYTE *)(a5 + 40) = 0;
      if (v69)
      {
        *(_OWORD *)(a5 + 16) = v67;
        *(_QWORD *)(a5 + 32) = v68;
        v68 = 0;
        v67 = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (v75)
      {
        v24 = v72;
        *(_QWORD *)(a5 + 64) = v71;
        *(_OWORD *)(a5 + 48) = v70;
        v70 = 0uLL;
        *(_QWORD *)(a5 + 72) = v24;
        *(_OWORD *)(a5 + 80) = __p;
        *(_QWORD *)(a5 + 96) = v74;
        v74 = 0;
        v71 = 0;
        __p = 0uLL;
        *(_BYTE *)(a5 + 104) = 1;
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (SHIBYTE(v74) < 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v71) & 0x80000000) == 0)
          {
LABEL_57:
            if (!v69)
              goto LABEL_117;
            goto LABEL_115;
          }
        }
        else if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
          goto LABEL_57;
        }
        operator delete((void *)v70);
        if (!v69)
          goto LABEL_117;
      }
      else
      {
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (!v69)
          goto LABEL_117;
      }
LABEL_115:
      if (SHIBYTE(v68) < 0)
        operator delete((void *)v67);
LABEL_117:
      if (v45)
      {
        if (v44)
        {
          if (v43 < 0)
            operator delete(v42);
          if (v41 < 0)
            operator delete(v40);
        }
        if (v39 && v38 < 0)
        {
          v27 = v37[0];
LABEL_126:
          operator delete(v27);
        }
      }
LABEL_127:
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        size = (void *)v77.__r_.__value_.__r.__words[0];
        goto LABEL_129;
      }
      return;
    default:
LABEL_19:
      sub_239623210((_QWORD *)a1, a2, v20, a5);
      return;
  }
}

void sub_23961D138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_239523188((uint64_t)va);
  if (*(char *)(v15 - 145) < 0)
  {
    operator delete(*(void **)(v15 - 168));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23961D248(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a3;
  v5 = *(_QWORD *)(a3 + 16);
  sub_23961D278(a1, a2, &v4, a4);
}

void sub_23961D278(_QWORD *a1@<X0>, int a2@<W1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t (**v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  __int128 v30;
  _BYTE v31[30];
  uint64_t (**v32)();
  uint64_t v33;
  uint64_t v34;
  void *__p[2];
  char v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  char v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  uint64_t (**v46)();
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  char v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  char v56;
  char v57;
  _BYTE v58[72];
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  char v63;

  if (a2)
  {
    v7 = a2;
    if ((a2 & 0xFFFFFFFD) != 4)
    {
      if (a2 == 8)
      {
        sub_239623F18(a1, 8, a4);
        return;
      }
      goto LABEL_42;
    }
LABEL_8:
    v47 = 0;
    v48 = 0;
    v44 = *a3;
    v45 = *((_QWORD *)a3 + 2);
    v46 = &off_250AE94F0;
    if ((sub_23961F414((uint64_t)&v46, a1, v7, 1278226488, (uint64_t)&v44) & 1) != 0)
    {
      v33 = 0;
      v34 = 0;
      v32 = &off_250AE94F0;
      v10 = v47;
      v9 = v48;
      if (v48)
      {
        v11 = (unint64_t *)(v48 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v33 = v10;
        v34 = v9;
        v26 = &off_250AE94F0;
        v27 = v10;
        v28 = v9;
        do
          v13 = __ldxr(v11);
        while (__stxr(v13 + 1, v11));
      }
      else
      {
        v33 = v47;
        v34 = 0;
        v26 = &off_250AE94F0;
        v27 = v47;
        v28 = 0;
      }
      sub_239785B2C((uint64_t)&v26, (uint64_t)v58);
      v29 = &off_250ADB1D0;
      v15 = *(_OWORD *)&v58[8];
      *(_QWORD *)&v58[8] = 0;
      *(_QWORD *)&v58[16] = 0;
      v30 = v15;
      *(_OWORD *)v31 = *(_OWORD *)&v58[24];
      *(_OWORD *)&v31[14] = *(_OWORD *)&v58[38];
      v16 = nullsub_4(&v58[24]);
      v17 = *(std::__shared_weak_count **)&v58[16];
      if (*(_QWORD *)&v58[16])
      {
        v18 = (unint64_t *)(*(_QWORD *)&v58[16] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      nullsub_4(v58);
      sub_23979BCF4(&v26);
      v25 = 0;
      *(_QWORD *)v58 = &off_250ADB628;
      sub_23949E6D4(v31, (void **)&v25, &v58[8]);
      sub_2396235A4((uint64_t)&v29, v58);
      *(_QWORD *)a4 = &off_250ADB628;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)&v58[8];
      *(_QWORD *)&v58[8] = 0;
      *(_QWORD *)&v58[16] = 0;
      *(_OWORD *)(a4 + 24) = *(_OWORD *)&v58[24];
      *(_OWORD *)(a4 + 40) = *(_OWORD *)&v58[40];
      *(_OWORD *)(a4 + 56) = *(_OWORD *)&v58[56];
      *(_QWORD *)(a4 + 72) = v59;
      *(_WORD *)(a4 + 80) = v60;
      *(_BYTE *)(a4 + 120) = 1;
      sub_239416DA0((uint64_t)&v58[8]);
      nullsub_4(v58);
      v20 = nullsub_4(v31);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      nullsub_4(&v29);
      sub_23979BCF4(&v32);
LABEL_58:
      sub_23979BCF4(&v46);
      return;
    }
    sub_239618F08(__p, "Failed to load image.");
    v43 = 1;
    sub_239616578(5u, (__int128 *)__p, (uint64_t)v58);
    *(_OWORD *)a4 = *(_OWORD *)v58;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (!v63)
    {
      *(_BYTE *)(a4 + 120) = 0;
      goto LABEL_49;
    }
    *(_BYTE *)(a4 + 40) = 0;
    if (v58[40])
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)&v58[16];
      *(_QWORD *)(a4 + 32) = *(_QWORD *)&v58[32];
      memset(&v58[16], 0, 24);
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (!v62)
    {
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (!v58[40])
      {
LABEL_49:
        if (v43)
        {
          if (v42)
          {
            if (v41 < 0)
              operator delete(v40);
            if (v39 < 0)
              operator delete(v38);
          }
          if (v37 && v36 < 0)
            operator delete(__p[0]);
        }
        goto LABEL_58;
      }
LABEL_47:
      if ((v58[39] & 0x80000000) != 0)
        operator delete(*(void **)&v58[16]);
      goto LABEL_49;
    }
    v14 = v59;
    *(_QWORD *)(a4 + 64) = *(_QWORD *)&v58[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v58[48];
    memset(&v58[48], 0, 24);
    *(_QWORD *)(a4 + 72) = v14;
    *(_OWORD *)(a4 + 80) = v60;
    *(_QWORD *)(a4 + 96) = v61;
    v61 = 0;
    v60 = 0uLL;
    *(_BYTE *)(a4 + 104) = 1;
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (SHIBYTE(v61) < 0)
    {
      operator delete((void *)v60);
      if ((v58[71] & 0x80000000) == 0)
      {
LABEL_21:
        if (!v58[40])
          goto LABEL_49;
        goto LABEL_47;
      }
    }
    else if ((v58[71] & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(*(void **)&v58[48]);
    if (!v58[40])
      goto LABEL_49;
    goto LABEL_47;
  }
  v8 = std::istream::peek();
  if (v8 == 137)
  {
    v7 = 3;
LABEL_42:
    sub_239623F18(a1, v7, a4);
    return;
  }
  if (v8 == 255)
  {
    v7 = 4;
    goto LABEL_8;
  }
  if ((v8 & 0xFFFFFFFB) == 0x49)
  {
    v7 = 5;
    goto LABEL_42;
  }
  if (!v8)
  {
    v7 = 6;
    goto LABEL_8;
  }
  if (v8 == 118)
  {
    v7 = 7;
    goto LABEL_42;
  }
  sub_239618F08(&v49, "Failed to identify image format.");
  v57 = 1;
  sub_239616578(5u, &v49, (uint64_t)v58);
  *(_OWORD *)a4 = *(_OWORD *)v58;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v63)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_76;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v58[40])
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)&v58[16];
    *(_QWORD *)(a4 + 32) = *(_QWORD *)&v58[32];
    memset(&v58[16], 0, 24);
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v62)
  {
    v24 = v59;
    *(_QWORD *)(a4 + 64) = *(_QWORD *)&v58[64];
    *(_OWORD *)(a4 + 48) = *(_OWORD *)&v58[48];
    memset(&v58[48], 0, 24);
    *(_QWORD *)(a4 + 72) = v24;
    *(_OWORD *)(a4 + 80) = v60;
    *(_QWORD *)(a4 + 96) = v61;
    v61 = 0;
    v60 = 0uLL;
    *(_BYTE *)(a4 + 104) = 1;
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (SHIBYTE(v61) < 0)
    {
      operator delete((void *)v60);
      if ((v58[71] & 0x80000000) == 0)
      {
LABEL_67:
        if (!v58[40])
          goto LABEL_76;
LABEL_74:
        if ((v58[39] & 0x80000000) != 0)
          operator delete(*(void **)&v58[16]);
        goto LABEL_76;
      }
    }
    else if ((v58[71] & 0x80000000) == 0)
    {
      goto LABEL_67;
    }
    operator delete(*(void **)&v58[48]);
    if (!v58[40])
      goto LABEL_76;
    goto LABEL_74;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v58[40])
    goto LABEL_74;
LABEL_76:
  if (v57)
  {
    if (v56)
    {
      if (v55 < 0)
        operator delete(v54);
      if (v53 < 0)
        operator delete(v52);
    }
    if (v51 && v50 < 0)
      operator delete((void *)v49);
  }
}

void sub_23961D894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_239523188((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_23961D8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v40;
  uint64_t v41;

  sub_239416DA0(v40);
  nullsub_4(v41 - 168);
  sub_239416D30((uint64_t)&a14);
  sub_23979BCF4(&a21);
  sub_23979BCF4(&a40);
  _Unwind_Resume(a1);
}

void sub_23961D8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_239523188((uint64_t)&a24);
  sub_23979BCF4(&a40);
  _Unwind_Resume(a1);
}

void sub_23961D910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_23979BCF4(&a40);
  _Unwind_Resume(a1);
}

void sub_23961D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  sub_23979BCF4(&a40);
  _Unwind_Resume(a1);
}

void sub_23961D938(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v5;
  uint64_t v6;

  v5 = *(_OWORD *)a4;
  v6 = *(_QWORD *)(a4 + 16);
  sub_23961D968(a1, a2, a3, &v5, a5);
}

void sub_23961D968(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  void *v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *size;
  void *v27;
  _QWORD __dst[2];
  char v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  char v35;
  char v36;
  void *v37[2];
  char v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  void *v46[2];
  char v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  char v64;
  char v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 __p;
  uint64_t v74;
  char v75;
  char v76;
  std::string v77;
  char v78;
  char v79;
  _BYTE v80[24];
  _BYTE *v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 0xFFFFFFFD) == 4)
  {
    v10 = *(void **)(a1 + 56);
    if (*(_BYTE *)(a1 + 80))
      v11 = v10 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(std::__shared_weak_count **)(a1 + 16);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "unknown location");
      v10 = *(void **)(a1 + 56);
    }
    v17 = *(unsigned int *)(a1 + 76);
    v80[0] = 0;
    v82 = 0;
    sub_23979BE48((unsigned int *)(a1 + 64), 0x4C303038u, v10, v17 | 0x100000000, (uint64_t)v80, (uint64_t)&v77);
    if (v82)
    {
      v18 = v81;
      if (v81 == v80)
      {
        v19 = 4;
        v18 = v80;
      }
      else
      {
        if (!v81)
          goto LABEL_22;
        v19 = 5;
      }
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
LABEL_22:
    if (v79)
    {
      v55 = *a4;
      v56 = *((_QWORD *)a4 + 2);
      if ((sub_23961F944((uint64_t)&v77, (uint64_t)a2, a3, (unsigned int *)&v55) & 1) != 0)
      {
        *(_BYTE *)(a5 + 120) = 1;
        goto LABEL_90;
      }
      sub_239618F08(v46, "Failed to save image.");
      v54 = 1;
      sub_239616578(5u, (__int128 *)v46, (uint64_t)&v66);
      *(_OWORD *)a5 = v66;
      *(_BYTE *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      if (!v76)
      {
        *(_BYTE *)(a5 + 120) = 0;
        goto LABEL_80;
      }
      *(_BYTE *)(a5 + 40) = 0;
      if (v69)
      {
        *(_OWORD *)(a5 + 16) = v67;
        *(_QWORD *)(a5 + 32) = v68;
        v68 = 0;
        v67 = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (!v75)
      {
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (!v69)
          goto LABEL_80;
LABEL_78:
        if (SHIBYTE(v68) < 0)
          operator delete((void *)v67);
LABEL_80:
        if (v54)
        {
          if (v53)
          {
            if (v52 < 0)
              operator delete(v51);
            if (v50 < 0)
              operator delete(v49);
          }
          if (v48 && v47 < 0)
          {
            v25 = v46[0];
            goto LABEL_89;
          }
        }
        goto LABEL_90;
      }
      v22 = v72;
      *(_QWORD *)(a5 + 64) = v71;
      *(_OWORD *)(a5 + 48) = v70;
      v70 = 0uLL;
      *(_QWORD *)(a5 + 72) = v22;
      *(_OWORD *)(a5 + 80) = __p;
      *(_QWORD *)(a5 + 96) = v74;
      v74 = 0;
      v71 = 0;
      __p = 0uLL;
      *(_BYTE *)(a5 + 104) = 1;
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (SHIBYTE(v74) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_39:
          if (!v69)
            goto LABEL_80;
          goto LABEL_78;
        }
      }
      else if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete((void *)v70);
      if (!v69)
        goto LABEL_80;
      goto LABEL_78;
    }
    sub_239618F08(&v57, "Failed to save image.");
    v65 = 1;
    sub_239616578(5u, &v57, (uint64_t)&v66);
    *(_OWORD *)a5 = v66;
    *(_BYTE *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 112) = 0;
    if (!v76)
    {
      *(_BYTE *)(a5 + 120) = 0;
      goto LABEL_67;
    }
    *(_BYTE *)(a5 + 40) = 0;
    if (v69)
    {
      *(_OWORD *)(a5 + 16) = v67;
      *(_QWORD *)(a5 + 32) = v68;
      v68 = 0;
      v67 = 0uLL;
      *(_BYTE *)(a5 + 40) = 1;
    }
    *(_BYTE *)(a5 + 48) = 0;
    *(_BYTE *)(a5 + 104) = 0;
    if (!v75)
    {
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (!v69)
        goto LABEL_67;
LABEL_65:
      if (SHIBYTE(v68) < 0)
        operator delete((void *)v67);
LABEL_67:
      if (v65)
      {
        if (v64)
        {
          if (v63 < 0)
            operator delete(v62);
          if (v61 < 0)
            operator delete(v60);
        }
        if (v59 && v58 < 0)
        {
          v25 = (void *)v57;
LABEL_89:
          operator delete(v25);
        }
      }
LABEL_90:
      if (v79)
      {
        (*(void (**)(std::string *))v77.__r_.__value_.__l.__data_)(&v77);
        return;
      }
      if (v78 < 0)
      {
        size = (void *)v77.__r_.__value_.__l.__size_;
LABEL_129:
        operator delete(size);
        return;
      }
      return;
    }
    v21 = v72;
    *(_QWORD *)(a5 + 64) = v71;
    *(_OWORD *)(a5 + 48) = v70;
    v70 = 0uLL;
    *(_QWORD *)(a5 + 72) = v21;
    *(_OWORD *)(a5 + 80) = __p;
    *(_QWORD *)(a5 + 96) = v74;
    v74 = 0;
    v71 = 0;
    __p = 0uLL;
    *(_BYTE *)(a5 + 104) = 1;
    *(_BYTE *)(a5 + 112) = 1;
    *(_BYTE *)(a5 + 120) = 0;
    if (SHIBYTE(v74) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
LABEL_31:
        if (!v69)
          goto LABEL_67;
        goto LABEL_65;
      }
    }
    else if ((SHIBYTE(v71) & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
    operator delete((void *)v70);
    if (!v69)
      goto LABEL_67;
    goto LABEL_65;
  }
  v20 = 1;
  switch(a3)
  {
    case 0:
      sub_239621138("Format Not Supported", &v77);
      sub_239A42F9C(__dst, (__int128 *)&v77);
      v36 = 1;
      sub_239914D5C((uint64_t)__dst, (uint64_t)&v66);
      *(_OWORD *)a5 = v66;
      *(_BYTE *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      if (!v76)
      {
        *(_BYTE *)(a5 + 120) = 0;
        goto LABEL_104;
      }
      *(_BYTE *)(a5 + 40) = 0;
      if (v69)
      {
        *(_OWORD *)(a5 + 16) = v67;
        *(_QWORD *)(a5 + 32) = v68;
        v68 = 0;
        v67 = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (!v75)
      {
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (!v69)
          goto LABEL_104;
LABEL_102:
        if (SHIBYTE(v68) < 0)
          operator delete((void *)v67);
LABEL_104:
        if (v36)
        {
          if (v35)
          {
            if (v34 < 0)
              operator delete(v33);
            if (v32 < 0)
              operator delete(v31);
          }
          if (v30 && v29 < 0)
          {
            v27 = (void *)__dst[0];
            goto LABEL_126;
          }
        }
        goto LABEL_127;
      }
      v23 = v72;
      *(_QWORD *)(a5 + 64) = v71;
      *(_OWORD *)(a5 + 48) = v70;
      v70 = 0uLL;
      *(_QWORD *)(a5 + 72) = v23;
      *(_OWORD *)(a5 + 80) = __p;
      *(_QWORD *)(a5 + 96) = v74;
      v74 = 0;
      v71 = 0;
      __p = 0uLL;
      *(_BYTE *)(a5 + 104) = 1;
      *(_BYTE *)(a5 + 112) = 1;
      *(_BYTE *)(a5 + 120) = 0;
      if (SHIBYTE(v74) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
LABEL_49:
          if (!v69)
            goto LABEL_104;
          goto LABEL_102;
        }
      }
      else if ((SHIBYTE(v71) & 0x80000000) == 0)
      {
        goto LABEL_49;
      }
      operator delete((void *)v70);
      if (!v69)
        goto LABEL_104;
      goto LABEL_102;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v20 = a3;
      goto LABEL_19;
    case 8:
      sub_239621B80("Not Implemented", &v77);
      sub_239A42F9C(v37, (__int128 *)&v77);
      v45 = 1;
      sub_239914D5C((uint64_t)v37, (uint64_t)&v66);
      *(_OWORD *)a5 = v66;
      *(_BYTE *)(a5 + 16) = 0;
      *(_BYTE *)(a5 + 112) = 0;
      if (!v76)
      {
        *(_BYTE *)(a5 + 120) = 0;
        goto LABEL_117;
      }
      *(_BYTE *)(a5 + 40) = 0;
      if (v69)
      {
        *(_OWORD *)(a5 + 16) = v67;
        *(_QWORD *)(a5 + 32) = v68;
        v68 = 0;
        v67 = 0uLL;
        *(_BYTE *)(a5 + 40) = 1;
      }
      *(_BYTE *)(a5 + 48) = 0;
      *(_BYTE *)(a5 + 104) = 0;
      if (v75)
      {
        v24 = v72;
        *(_QWORD *)(a5 + 64) = v71;
        *(_OWORD *)(a5 + 48) = v70;
        v70 = 0uLL;
        *(_QWORD *)(a5 + 72) = v24;
        *(_OWORD *)(a5 + 80) = __p;
        *(_QWORD *)(a5 + 96) = v74;
        v74 = 0;
        v71 = 0;
        __p = 0uLL;
        *(_BYTE *)(a5 + 104) = 1;
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (SHIBYTE(v74) < 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v71) & 0x80000000) == 0)
          {
LABEL_57:
            if (!v69)
              goto LABEL_117;
            goto LABEL_115;
          }
        }
        else if ((SHIBYTE(v71) & 0x80000000) == 0)
        {
          goto LABEL_57;
        }
        operator delete((void *)v70);
        if (!v69)
          goto LABEL_117;
      }
      else
      {
        *(_BYTE *)(a5 + 112) = 1;
        *(_BYTE *)(a5 + 120) = 0;
        if (!v69)
          goto LABEL_117;
      }
LABEL_115:
      if (SHIBYTE(v68) < 0)
        operator delete((void *)v67);
LABEL_117:
      if (v45)
      {
        if (v44)
        {
          if (v43 < 0)
            operator delete(v42);
          if (v41 < 0)
            operator delete(v40);
        }
        if (v39 && v38 < 0)
        {
          v27 = v37[0];
LABEL_126:
          operator delete(v27);
        }
      }
LABEL_127:
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      {
        size = (void *)v77.__r_.__value_.__r.__words[0];
        goto LABEL_129;
      }
      return;
    default:
LABEL_19:
      sub_239624928((_QWORD *)a1, a2, v20, a5);
      return;
  }
}

void sub_23961E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_239523188((uint64_t)va);
  if (*(char *)(v15 - 145) < 0)
  {
    operator delete(*(void **)(v15 - 168));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23961E310(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_23961E340(a1, a2, a3);
}

void sub_23961E340(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 __p;
  uint64_t v24;
  char v25;
  char v26;

  if (a2)
  {
    if ((a2 & 0xFFFFFFFD) != 4 && a2 == 8)
    {
      sub_239617098(a1, a3);
      return;
    }
    goto LABEL_15;
  }
  v5 = std::istream::peek();
  if (v5 == 137)
  {
    a2 = 3;
    goto LABEL_15;
  }
  if (v5 == 255)
  {
    a2 = 4;
LABEL_15:
    sub_2396252C0(a1, a2, a3);
    return;
  }
  if ((v5 & 0xFFFFFFFB) == 0x49)
  {
    a2 = 5;
    goto LABEL_15;
  }
  if (!v5)
  {
    a2 = 6;
    goto LABEL_15;
  }
  if (v5 == 118)
  {
    a2 = 7;
    goto LABEL_15;
  }
  sub_239618F08(v7, "Failed to identify image format.");
  v15 = 1;
  sub_239616578(5u, (__int128 *)v7, (uint64_t)&v16);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v26)
  {
    *(_BYTE *)(a3 + 136) = 0;
    goto LABEL_31;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v19)
  {
    *(_OWORD *)(a3 + 16) = v17;
    *(_QWORD *)(a3 + 32) = v18;
    v18 = 0;
    v17 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v25)
  {
    v6 = v22;
    *(_QWORD *)(a3 + 64) = v21;
    *(_OWORD *)(a3 + 48) = v20;
    v20 = 0uLL;
    *(_QWORD *)(a3 + 72) = v6;
    *(_OWORD *)(a3 + 80) = __p;
    *(_QWORD *)(a3 + 96) = v24;
    v24 = 0;
    v21 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 136) = 0;
    if (SHIBYTE(v24) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_22:
        if (!v19)
          goto LABEL_31;
LABEL_29:
        if (SHIBYTE(v18) < 0)
          operator delete((void *)v17);
        goto LABEL_31;
      }
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete((void *)v20);
    if (!v19)
      goto LABEL_31;
    goto LABEL_29;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 136) = 0;
  if (v19)
    goto LABEL_29;
LABEL_31:
  if (v15)
  {
    if (v14)
    {
      if (v13 < 0)
        operator delete(v12);
      if (v11 < 0)
        operator delete(v10);
    }
    if (v9 && v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_23961E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239523188((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23961E5B4(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_23961E5E4(a1, a2, a3, a4);
}

void sub_23961E5E4(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[2];
  char v10;
  char v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  char v16;
  char v17;
  std::string v18;
  void *__dst[2];
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;

  v4 = a3;
  if ((a3 & 0xFFFFFFFD) != 4)
  {
    a3 = 1;
    switch(v4)
    {
      case 0:
        sub_239621138("Format Not Supported", &v18);
        sub_239A42F9C(v9, (__int128 *)&v18);
        v17 = 1;
        sub_239914D5C((uint64_t)v9, (uint64_t)&v28);
        *(_OWORD *)a4 = v28;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (!v38)
        {
          *(_BYTE *)(a4 + 120) = 0;
          goto LABEL_33;
        }
        *(_BYTE *)(a4 + 40) = 0;
        if (v31)
        {
          *(_OWORD *)(a4 + 16) = v29;
          *(_QWORD *)(a4 + 32) = v30;
          v30 = 0;
          v29 = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v37)
        {
          v6 = v34;
          *(_QWORD *)(a4 + 64) = v33;
          *(_OWORD *)(a4 + 48) = v32;
          v32 = 0uLL;
          *(_QWORD *)(a4 + 72) = v6;
          *(_OWORD *)(a4 + 80) = v35;
          *(_QWORD *)(a4 + 96) = v36;
          v36 = 0;
          v33 = 0;
          v35 = 0uLL;
          *(_BYTE *)(a4 + 104) = 1;
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (SHIBYTE(v36) < 0)
          {
            operator delete((void *)v35);
            if ((SHIBYTE(v33) & 0x80000000) == 0)
            {
LABEL_13:
              if (!v31)
                goto LABEL_33;
              goto LABEL_31;
            }
          }
          else if ((SHIBYTE(v33) & 0x80000000) == 0)
          {
            goto LABEL_13;
          }
          operator delete((void *)v32);
          if (!v31)
            goto LABEL_33;
        }
        else
        {
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (!v31)
            goto LABEL_33;
        }
LABEL_31:
        if (SHIBYTE(v30) < 0)
          operator delete((void *)v29);
LABEL_33:
        if (!v17)
          goto LABEL_56;
        if (v16)
        {
          if (v15 < 0)
            operator delete(__p);
          if (v13 < 0)
            operator delete(v12);
        }
        if (!v11 || (v10 & 0x80000000) == 0)
          goto LABEL_56;
        v8 = (void *)v9[0];
        goto LABEL_55;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        a3 = v4;
        goto LABEL_4;
      case 8:
        sub_239621B80("Not Implemented", &v18);
        sub_239A42F9C(__dst, (__int128 *)&v18);
        v27 = 1;
        sub_239914D5C((uint64_t)__dst, (uint64_t)&v28);
        *(_OWORD *)a4 = v28;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (!v38)
        {
          *(_BYTE *)(a4 + 120) = 0;
          goto LABEL_46;
        }
        *(_BYTE *)(a4 + 40) = 0;
        if (v31)
        {
          *(_OWORD *)(a4 + 16) = v29;
          *(_QWORD *)(a4 + 32) = v30;
          v30 = 0;
          v29 = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v37)
        {
          v7 = v34;
          *(_QWORD *)(a4 + 64) = v33;
          *(_OWORD *)(a4 + 48) = v32;
          v32 = 0uLL;
          *(_QWORD *)(a4 + 72) = v7;
          *(_OWORD *)(a4 + 80) = v35;
          *(_QWORD *)(a4 + 96) = v36;
          v36 = 0;
          v33 = 0;
          v35 = 0uLL;
          *(_BYTE *)(a4 + 104) = 1;
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (SHIBYTE(v36) < 0)
          {
            operator delete((void *)v35);
            if ((SHIBYTE(v33) & 0x80000000) == 0)
            {
LABEL_21:
              if (!v31)
                goto LABEL_46;
              goto LABEL_44;
            }
          }
          else if ((SHIBYTE(v33) & 0x80000000) == 0)
          {
            goto LABEL_21;
          }
          operator delete((void *)v32);
          if (!v31)
            goto LABEL_46;
        }
        else
        {
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (!v31)
            goto LABEL_46;
        }
LABEL_44:
        if (SHIBYTE(v30) < 0)
          operator delete((void *)v29);
LABEL_46:
        if (v27)
        {
          if (v26)
          {
            if (v25 < 0)
              operator delete(v24);
            if (v23 < 0)
              operator delete(v22);
          }
          if (v21 && v20 < 0)
          {
            v8 = __dst[0];
LABEL_55:
            operator delete(v8);
          }
        }
LABEL_56:
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        return;
      default:
        goto LABEL_4;
    }
  }
  if ((a3 - 4) >= 3)
    a3 = 1;
LABEL_4:
  sub_239625B30(a1, a2, a3, a4);
}

void sub_23961E9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_239523188((uint64_t)&a28);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_23961EA04(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  sub_23961EA34(a1, a2, a3);
}

void sub_23961EA34(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 __p;
  uint64_t v24;
  char v25;
  char v26;

  if (a2)
    goto LABEL_12;
  v5 = std::istream::peek();
  if (v5 == 137)
  {
    a2 = 3;
    goto LABEL_12;
  }
  if (v5 == 255)
  {
    a2 = 4;
LABEL_12:
    sub_2396264B4(a1, a2, a3);
    return;
  }
  if ((v5 & 0xFFFFFFFB) == 0x49)
  {
    a2 = 5;
    goto LABEL_12;
  }
  if (!v5)
  {
    a2 = 6;
    goto LABEL_12;
  }
  if (v5 == 118)
  {
    a2 = 7;
    goto LABEL_12;
  }
  sub_239618F08(v7, "Failed to identify image format.");
  v15 = 1;
  sub_239616578(5u, (__int128 *)v7, (uint64_t)&v16);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v26)
  {
    *(_BYTE *)(a3 + 120) = 0;
    goto LABEL_28;
  }
  *(_BYTE *)(a3 + 40) = 0;
  if (v19)
  {
    *(_OWORD *)(a3 + 16) = v17;
    *(_QWORD *)(a3 + 32) = v18;
    v18 = 0;
    v17 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v25)
  {
    v6 = v22;
    *(_QWORD *)(a3 + 64) = v21;
    *(_OWORD *)(a3 + 48) = v20;
    v20 = 0uLL;
    *(_QWORD *)(a3 + 72) = v6;
    *(_OWORD *)(a3 + 80) = __p;
    *(_QWORD *)(a3 + 96) = v24;
    v24 = 0;
    v21 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (SHIBYTE(v24) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_19:
        if (!v19)
          goto LABEL_28;
LABEL_26:
        if (SHIBYTE(v18) < 0)
          operator delete((void *)v17);
        goto LABEL_28;
      }
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete((void *)v20);
    if (!v19)
      goto LABEL_28;
    goto LABEL_26;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v19)
    goto LABEL_26;
LABEL_28:
  if (v15)
  {
    if (v14)
    {
      if (v13 < 0)
        operator delete(v12);
      if (v11 < 0)
        operator delete(v10);
    }
    if (v9)
    {
      if (v8 < 0)
        operator delete(v7[0]);
    }
  }
}

void sub_23961EC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239523188((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23961EC8C(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  sub_23961ECBC(a1, a2, a3, a4);
}

void sub_23961ECBC(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[2];
  char v10;
  char v11;
  void *v12;
  char v13;
  void *__p;
  char v15;
  char v16;
  char v17;
  std::string v18;
  void *__dst[2];
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;

  v4 = a3;
  if ((a3 & 0xFFFFFFFD) != 4)
  {
    a3 = 1;
    switch(v4)
    {
      case 0:
        sub_239621138("Format Not Supported", &v18);
        sub_239A42F9C(v9, (__int128 *)&v18);
        v17 = 1;
        sub_239914D5C((uint64_t)v9, (uint64_t)&v28);
        *(_OWORD *)a4 = v28;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (!v38)
        {
          *(_BYTE *)(a4 + 120) = 0;
          goto LABEL_33;
        }
        *(_BYTE *)(a4 + 40) = 0;
        if (v31)
        {
          *(_OWORD *)(a4 + 16) = v29;
          *(_QWORD *)(a4 + 32) = v30;
          v30 = 0;
          v29 = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v37)
        {
          v6 = v34;
          *(_QWORD *)(a4 + 64) = v33;
          *(_OWORD *)(a4 + 48) = v32;
          v32 = 0uLL;
          *(_QWORD *)(a4 + 72) = v6;
          *(_OWORD *)(a4 + 80) = v35;
          *(_QWORD *)(a4 + 96) = v36;
          v36 = 0;
          v33 = 0;
          v35 = 0uLL;
          *(_BYTE *)(a4 + 104) = 1;
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (SHIBYTE(v36) < 0)
          {
            operator delete((void *)v35);
            if ((SHIBYTE(v33) & 0x80000000) == 0)
            {
LABEL_13:
              if (!v31)
                goto LABEL_33;
              goto LABEL_31;
            }
          }
          else if ((SHIBYTE(v33) & 0x80000000) == 0)
          {
            goto LABEL_13;
          }
          operator delete((void *)v32);
          if (!v31)
            goto LABEL_33;
        }
        else
        {
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (!v31)
            goto LABEL_33;
        }
LABEL_31:
        if (SHIBYTE(v30) < 0)
          operator delete((void *)v29);
LABEL_33:
        if (!v17)
          goto LABEL_56;
        if (v16)
        {
          if (v15 < 0)
            operator delete(__p);
          if (v13 < 0)
            operator delete(v12);
        }
        if (!v11 || (v10 & 0x80000000) == 0)
          goto LABEL_56;
        v8 = (void *)v9[0];
        goto LABEL_55;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        a3 = v4;
        goto LABEL_4;
      case 8:
        sub_239621B80("Not Implemented", &v18);
        sub_239A42F9C(__dst, (__int128 *)&v18);
        v27 = 1;
        sub_239914D5C((uint64_t)__dst, (uint64_t)&v28);
        *(_OWORD *)a4 = v28;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (!v38)
        {
          *(_BYTE *)(a4 + 120) = 0;
          goto LABEL_46;
        }
        *(_BYTE *)(a4 + 40) = 0;
        if (v31)
        {
          *(_OWORD *)(a4 + 16) = v29;
          *(_QWORD *)(a4 + 32) = v30;
          v30 = 0;
          v29 = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v37)
        {
          v7 = v34;
          *(_QWORD *)(a4 + 64) = v33;
          *(_OWORD *)(a4 + 48) = v32;
          v32 = 0uLL;
          *(_QWORD *)(a4 + 72) = v7;
          *(_OWORD *)(a4 + 80) = v35;
          *(_QWORD *)(a4 + 96) = v36;
          v36 = 0;
          v33 = 0;
          v35 = 0uLL;
          *(_BYTE *)(a4 + 104) = 1;
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (SHIBYTE(v36) < 0)
          {
            operator delete((void *)v35);
            if ((SHIBYTE(v33) & 0x80000000) == 0)
            {
LABEL_21:
              if (!v31)
                goto LABEL_46;
              goto LABEL_44;
            }
          }
          else if ((SHIBYTE(v33) & 0x80000000) == 0)
          {
            goto LABEL_21;
          }
          operator delete((void *)v32);
          if (!v31)
            goto LABEL_46;
        }
        else
        {
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (!v31)
            goto LABEL_46;
        }
LABEL_44:
        if (SHIBYTE(v30) < 0)
          operator delete((void *)v29);
LABEL_46:
        if (v27)
        {
          if (v26)
          {
            if (v25 < 0)
              operator delete(v24);
            if (v23 < 0)
              operator delete(v22);
          }
          if (v21 && v20 < 0)
          {
            v8 = __dst[0];
LABEL_55:
            operator delete(v8);
          }
        }
LABEL_56:
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        return;
      default:
        goto LABEL_4;
    }
  }
  if ((a3 - 4) >= 3)
    a3 = 1;
LABEL_4:
  sub_239626D0C(a1, a2, a3, a4);
}

void sub_23961F0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_239523188((uint64_t)&a28);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_23961F0DC(uint64_t a1)
{
  int v1;
  void **v2;
  void **v3;
  void *v5;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v13;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v13 = *(_QWORD *)(a1 + 16);
  }
  v1 = HIBYTE(v13);
  if (v13 >= 0)
    v2 = (void **)((char *)__p + HIBYTE(v13));
  else
    v2 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (v13 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v3 != v2)
  {
    do
    {
      *(_BYTE *)v3 = __tolower(*(unsigned __int8 *)v3);
      v3 = (void **)((char *)v3 + 1);
    }
    while (v3 != v2);
    v1 = HIBYTE(v13);
  }
  if ((v1 & 0x80) != 0)
  {
    v5 = __p[1];
    if (__p[1] != (void *)4 || *(_DWORD *)__p[0] != 1735420462)
    {
      if (__p[1] != (void *)5)
        goto LABEL_29;
      if (*(_DWORD *)__p[0] != 1701866030 || *((_BYTE *)__p[0] + 4) != 103)
      {
        v5 = __p[1];
LABEL_29:
        if (v5 == (void *)4)
        {
          if (*(_DWORD *)__p[0] == 1735290926)
            goto LABEL_46;
          v5 = __p[1];
          if (__p[1] == (void *)4 && *(_DWORD *)__p[0] == 1735287854)
            goto LABEL_49;
        }
        if (v5 == (void *)5)
        {
          if (*(_DWORD *)__p[0] == 1718187054 && *((_BYTE *)__p[0] + 4) == 102)
          {
LABEL_68:
            v8 = 0x100000000;
            v9 = 5;
            if ((SHIBYTE(v13) & 0x80000000) == 0)
              return v9 | v8;
            goto LABEL_69;
          }
          v5 = __p[1];
        }
        if (v5 != (void *)4 || *(_DWORD *)__p[0] != 1920492846)
          goto LABEL_57;
        goto LABEL_71;
      }
    }
LABEL_43:
    v8 = 0x100000000;
    v9 = 4;
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return v9 | v8;
LABEL_69:
    operator delete(__p[0]);
    return v9 | v8;
  }
  if (v1 == 4)
  {
    switch(LODWORD(__p[0]))
    {
      case 0x67706A2E:
        goto LABEL_43;
      case 0x676E702E:
LABEL_46:
        v8 = 0x100000000;
        v9 = 3;
        if ((SHIBYTE(v13) & 0x80000000) == 0)
          return v9 | v8;
        goto LABEL_69;
      case 0x676E642E:
LABEL_49:
        v8 = 0x100000000;
        v9 = 8;
        if ((SHIBYTE(v13) & 0x80000000) == 0)
          return v9 | v8;
        goto LABEL_69;
    }
    if (LODWORD(__p[0]) != 1920492846)
      goto LABEL_57;
LABEL_71:
    v8 = 0x100000000;
    v9 = 7;
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return v9 | v8;
    goto LABEL_69;
  }
  if (v1 != 5)
    goto LABEL_57;
  if (LODWORD(__p[0]) == 1701866030 && BYTE4(__p[0]) == 103)
    goto LABEL_43;
  if (LODWORD(__p[0]) == 1718187054 && BYTE4(__p[0]) == 102)
    goto LABEL_68;
LABEL_57:
  if (sub_239593B20(__p, ".heic"))
  {
    v8 = 0x100000000;
    v9 = 6;
    if (SHIBYTE(v13) < 0)
      goto LABEL_69;
  }
  else
  {
    v8 = 0x100000000;
    if (sub_239593B20(__p, ".pgm"))
    {
      v9 = 1;
      if (SHIBYTE(v13) < 0)
        goto LABEL_69;
    }
    else
    {
      if (sub_239593B20(__p, ".ppm"))
      {
        v9 = 2;
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
      if (SHIBYTE(v13) < 0)
        goto LABEL_69;
    }
  }
  return v9 | v8;
}

void sub_23961F3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23961F414(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v9;
  uint64_t result;
  int v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v29[8];
  std::__shared_weak_count *v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;

  if (a3 == 8)
  {
    if ((_DWORD)a4 == 1380410945 || (_DWORD)a4 == 24)
      return sub_239618E0C(a1, a2, a4);
    return 0;
  }
  if (!a3)
  {
    v9 = std::istream::peek();
    if (v9 != 137)
    {
      if (v9 != 255)
      {
        result = 0;
        if ((v9 & 0xFFFFFFFB) == 0x49 || v9)
          return result;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if ((a3 & 0xFFFFFFFD) != 4)
    return 0;
LABEL_12:
  result = 0;
  if ((int)a4 <= 1111970368)
  {
    if ((_DWORD)a4 != 875704422 && (_DWORD)a4 != 875704438)
      return result;
  }
  else if ((_DWORD)a4 != 1111970369 && (_DWORD)a4 != 1380401729 && (_DWORD)a4 != 1278226488)
  {
    return result;
  }
  v11 = *(_DWORD *)(a5 + 4);
  sub_2397690E0(a2, &v31);
  sub_239769054((uint64_t)&v31, (int)v29);
  sub_239620DEC(&v25, (uint64_t)v29);
  sub_2396B3210((uint64_t)&v25, a4, v11, &v27);
  v12 = v28;
  v28 = 0uLL;
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_23979BCF4(&v27);
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (sub_23979A918(a1) != (_DWORD)a4)
  {
    sub_239A444D4((uint64_t)"unknown file", 259, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  return 1;
}

uint64_t sub_23961F718(uint64_t a1, const std::__fs::filesystem::path *a2, int a3, unsigned int *a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _UNKNOWN **v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  std::__shared_weak_count *v26;

  if (!a3)
    return 0;
  sub_23979D0F0(a1, &v25);
  v9 = v25;
  v8 = v26;
  if (!v26)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (!v9)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v9)
      return 0;
  }
  if ((a3 | 2) != 6)
    return 0;
  v12 = sub_23979A918(a1);
  result = 0;
  if (v12 <= 875704437)
  {
    if (v12 <= 842285638)
    {
      if (v12 != 24 && v12 != 32)
        return result;
      goto LABEL_25;
    }
    if (v12 == 842285639)
      goto LABEL_25;
    v14 = 875704422;
LABEL_24:
    if (v12 != v14)
      return result;
    goto LABEL_25;
  }
  if (v12 <= 1111970368)
  {
    if (v12 == 875704438)
      goto LABEL_25;
    v14 = 1094862674;
    goto LABEL_24;
  }
  if (v12 != 1111970369 && v12 != 1380401729)
  {
    v14 = 1278226488;
    goto LABEL_24;
  }
LABEL_25:
  v15 = *a4;
  v17 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  v24[0] = &off_250AE94F0;
  v24[1] = v17;
  v24[2] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = sub_23962E60C();
  sub_2396B3670(a2, (uint64_t)v24, v15 << 32, a3 == 6, (uint64_t)v20, (int)&v25);
  sub_23979BCF4(v24);
  v21 = v26;
  if (v26)
  {
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return 1;
}

void sub_23961F924(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23979BCF4((uint64_t *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23961F7F4);
}

uint64_t sub_23961F944(uint64_t a1, uint64_t a2, int a3, unsigned int *a4)
{
  std::__shared_weak_count *v7;
  CFDataRef v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[3];
  CFDataRef v23;
  std::__shared_weak_count *v24;

  if (!a3)
    return 0;
  sub_23979D0F0(a1, &v23);
  v8 = v23;
  v7 = v24;
  if (!v24)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v8)
      return 0;
  }
  if ((a3 | 2) != 6)
    return 0;
  v11 = sub_23979A918(a1);
  result = 0;
  if (v11 <= 875704437)
  {
    if (v11 <= 842285638)
    {
      if (v11 != 24 && v11 != 32)
        return result;
      goto LABEL_25;
    }
    if (v11 == 842285639)
      goto LABEL_25;
    v13 = 875704422;
LABEL_24:
    if (v11 != v13)
      return result;
    goto LABEL_25;
  }
  if (v11 <= 1111970368)
  {
    if (v11 == 875704438)
      goto LABEL_25;
    v13 = 1094862674;
    goto LABEL_24;
  }
  if (v11 != 1111970369 && v11 != 1380401729)
  {
    v13 = 1278226488;
    goto LABEL_24;
  }
LABEL_25:
  v14 = *a4;
  v16 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v22[0] = &off_250AE94F0;
  v22[1] = v16;
  v22[2] = v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  sub_2396B3214((uint64_t)v22, v14 << 32, a3 == 6, (int)&v23);
  sub_23979BCF4(v22);
  sub_23962A554(&v23);
  sub_23962A53C(&v23);
  std::ostream::write();
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return 1;
}

void sub_23961FB68(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23979BCF4(va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x23961FA20);
}

void sub_23961FB98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v4;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  const __CFURL *v14;
  CGImageSource *v15;
  CFDictionaryRef v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v21;
  char v22;
  char v23;
  unsigned int v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  __int128 v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  __int128 v44[6];
  char v45;
  void *v46[2];
  char v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  void *v59[2];
  char v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  char v66;
  char v67;
  __int128 __p;
  __int128 v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  char v78;
  __int128 __dst;
  __int128 v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  void *v91;
  char v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  char v98;
  char v99;

  v4 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)a1);
  if (v4.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v4.__size_ >= 0x17)
  {
    v6 = (v4.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4.__size_ | 7) != 0x17)
      v6 = v4.__size_ | 7;
    v7 = v6 + 1;
    p_dst = (__int128 *)operator new(v6 + 1);
    *((_QWORD *)&__dst + 1) = v4.__size_;
    *(_QWORD *)&v80 = v7 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v80) = v4.__size_;
  p_dst = &__dst;
  if (v4.__size_)
LABEL_8:
    memmove(p_dst, v4.__data_, v4.__size_);
  *((_BYTE *)p_dst + v4.__size_) = 0;
  v8 = (void *)__dst;
  LODWORD(v57) = v80;
  *(_DWORD *)((char *)&v57 + 3) = *(_DWORD *)((char *)&v80 + 3);
  v9 = SBYTE7(v80);
  if (SBYTE7(v80) < 0)
  {
    sub_23941A7F8(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    __p = __dst;
    LODWORD(v69) = v57;
    *(_DWORD *)((char *)&v69 + 3) = *(_DWORD *)((char *)&v57 + 3);
    BYTE7(v69) = BYTE7(v80);
  }
  v10 = sub_23961F0DC((uint64_t)&__p);
  if (SBYTE7(v69) < 0)
  {
    operator delete((void *)__p);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0xFF00000000) != 0)
        goto LABEL_15;
      goto LABEL_35;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v8);
  if ((v10 & 0xFF00000000) != 0)
  {
LABEL_15:
    if ((_DWORD)v10 == 8)
    {
      v11 = (void *)MEMORY[0x23B83EC40]();
      if (*(char *)(a1 + 23) >= 0)
        v12 = a1;
      else
        v12 = *(_QWORD *)a1;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v13);
      v14 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
      v15 = CGImageSourceCreateWithURL(v14, 0);
      v16 = CGImageSourceCopyPropertiesAtIndex(v15, 0, 0);
      *(_QWORD *)&__dst = v16;
      v17 = (_QWORD *)operator new();
      *v17 = &off_250AE0880;
      v17[1] = 0;
      v17[2] = 0;
      v17[3] = v16;
      *((_QWORD *)&__dst + 1) = v17;
      sub_23962C5E4(&v57, &__dst);
      v18 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      BYTE7(v80) = 10;
      strcpy((char *)&__dst, "PixelWidth");
      v21 = sub_239600CF8((uint64_t)&v57, (uint64_t)&__dst);
      v23 = v22;
      if (SBYTE7(v80) < 0)
        operator delete((void *)__dst);
      BYTE7(v80) = 11;
      strcpy((char *)&__dst, "PixelHeight");
      v24 = sub_239600CF8((uint64_t)&v57, (uint64_t)&__dst);
      v26 = v25;
      if (SBYTE7(v80) < 0)
        operator delete((void *)__dst);
      BYTE7(v80) = 10;
      strcpy((char *)&__dst, "ColorModel");
      sub_239600BC4((uint64_t)&v57, (uint64_t)&__dst, (std::string *)&__p);
      if (SBYTE7(v80) < 0)
        operator delete((void *)__dst);
      BYTE7(v80) = 5;
      strcpy((char *)&__dst, "Depth");
      v55 = sub_239600CF8((uint64_t)&v57, (uint64_t)&__dst);
      v56 = v27;
      if (SBYTE7(v80) < 0)
      {
        operator delete((void *)__dst);
        v28 = v56;
        if (!BYTE8(v69))
          goto LABEL_61;
      }
      else
      {
        v28 = v27;
        if (!BYTE8(v69))
          goto LABEL_61;
      }
      if (v28 && v23 && v26)
      {
        *(_QWORD *)&__dst = &__p;
        *((_QWORD *)&__dst + 1) = &v55;
        *(_QWORD *)&v80 = &v57;
        v33 = sub_239620904((unsigned __int16 **)&__dst);
        v34 = v33;
        if ((v33 & 0xFF00000000) != 0)
        {
          CFRelease(v14);
          CFRelease(v15);
          *(_QWORD *)&__dst = __PAIR64__(v21, v34);
          *((_QWORD *)&__dst + 1) = v24 | 0x800000000;
          v35 = sub_239620CDC(&v80, (uint64_t)&v57);
          LOBYTE(v81) = 1;
          v36 = v80;
          *(_OWORD *)a2 = __dst;
          *(_OWORD *)(a2 + 16) = v36;
          *v35 = 0;
          v35[1] = 0;
          *(_BYTE *)(a2 + 32) = 1;
          *(_BYTE *)(a2 + 120) = 1;
          sub_239620894((uint64_t)&__dst);
        }
        else
        {
          CFRelease(v14);
          CFRelease(v15);
          sub_239618F08(v44, "Failed to load image header.");
          v45 = 1;
          sub_239616578(5u, v44, (uint64_t)&__dst);
          sub_2396207E4(a2, (uint64_t)&__dst);
          sub_239522FE4((uint64_t)&__dst);
          sub_239523188((uint64_t)v44);
        }
LABEL_122:
        if (BYTE8(v69) && SBYTE7(v69) < 0)
          operator delete((void *)__p);
        v41 = v58;
        if (v58)
        {
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }

        objc_autoreleasePoolPop(v11);
        return;
      }
LABEL_61:
      CFRelease(v14);
      CFRelease(v15);
      sub_239618F08(v46, "Failed to load image header.");
      v54 = 1;
      sub_239616578(5u, (__int128 *)v46, (uint64_t)&__dst);
      *(_OWORD *)a2 = __dst;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (!v89)
      {
        *(_BYTE *)(a2 + 120) = 0;
        goto LABEL_113;
      }
      *(_BYTE *)(a2 + 40) = 0;
      if (v82)
      {
        *(_OWORD *)(a2 + 16) = v80;
        *(_QWORD *)(a2 + 32) = v81;
        v81 = 0;
        v80 = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (!v88)
      {
        *(_BYTE *)(a2 + 112) = 1;
        *(_BYTE *)(a2 + 120) = 0;
        if (!v82)
        {
LABEL_113:
          if (v54)
          {
            if (v53)
            {
              if (v52 < 0)
                operator delete(v51);
              if (v50 < 0)
                operator delete(v49);
            }
            if (v48 && v47 < 0)
              operator delete(v46[0]);
          }
          goto LABEL_122;
        }
LABEL_111:
        if (SHIBYTE(v81) < 0)
          operator delete((void *)v80);
        goto LABEL_113;
      }
      v37 = v85;
      *(_QWORD *)(a2 + 64) = v84;
      *(_OWORD *)(a2 + 48) = v83;
      v83 = 0uLL;
      *(_QWORD *)(a2 + 72) = v37;
      *(_OWORD *)(a2 + 80) = v86;
      *(_QWORD *)(a2 + 96) = v87;
      v87 = 0;
      v84 = 0;
      v86 = 0uLL;
      *(_BYTE *)(a2 + 104) = 1;
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (SHIBYTE(v87) < 0)
      {
        operator delete((void *)v86);
        if ((SHIBYTE(v84) & 0x80000000) == 0)
        {
LABEL_67:
          if (!v82)
            goto LABEL_113;
          goto LABEL_111;
        }
      }
      else if ((SHIBYTE(v84) & 0x80000000) == 0)
      {
        goto LABEL_67;
      }
      operator delete((void *)v83);
      if (!v82)
        goto LABEL_113;
      goto LABEL_111;
    }
    sub_239726E08(a1, (uint64_t)&__dst);
    if (v90)
    {
      *(_QWORD *)((char *)&__p + 4) = *(_QWORD *)((char *)&__dst + 4);
      LODWORD(__p) = __dst;
      HIDWORD(__p) = v10;
      LOBYTE(v69) = 0;
      LOBYTE(v70) = 0;
      if ((_BYTE)v81)
      {
        sub_239620CDC(&v69, (uint64_t)&v80);
        LOBYTE(v70) = 1;
        v31 = v69;
        *(_OWORD *)a2 = __p;
        *(_OWORD *)(a2 + 16) = v31;
        *(_BYTE *)(a2 + 32) = 1;
      }
      else
      {
        *(_OWORD *)a2 = __p;
        *(_BYTE *)(a2 + 16) = 0;
        *(_BYTE *)(a2 + 32) = 0;
      }
      *(_BYTE *)(a2 + 120) = 1;
LABEL_73:
      if (v90)
      {
        if ((_BYTE)v81)
        {
          v38 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
          if (*((_QWORD *)&v80 + 1))
          {
            v39 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
      }
      else if (v89)
      {
        if (v88)
        {
          if (SHIBYTE(v87) < 0)
            operator delete((void *)v86);
          if (SHIBYTE(v84) < 0)
            operator delete((void *)v83);
        }
        if (v82 && SHIBYTE(v81) < 0)
          operator delete((void *)v80);
      }
      return;
    }
    sub_239618F08(v59, "No known method to load properties for file");
    v67 = 1;
    sub_239914D5C((uint64_t)v59, (uint64_t)&__p);
    *(_OWORD *)a2 = __p;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (!v78)
    {
      *(_BYTE *)(a2 + 120) = 0;
      goto LABEL_136;
    }
    *(_BYTE *)(a2 + 40) = 0;
    if (v71)
    {
      *(_OWORD *)(a2 + 16) = v69;
      *(_QWORD *)(a2 + 32) = v70;
      v70 = 0;
      v69 = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (!v77)
    {
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (!v71)
      {
LABEL_136:
        if (v67)
        {
          if (v66)
          {
            if (v65 < 0)
              operator delete(v64);
            if (v63 < 0)
              operator delete(v62);
          }
          if (v61 && v60 < 0)
            operator delete(v59[0]);
        }
        goto LABEL_73;
      }
LABEL_134:
      if (SHIBYTE(v70) < 0)
        operator delete((void *)v69);
      goto LABEL_136;
    }
    v32 = v74;
    *(_QWORD *)(a2 + 64) = v73;
    *(_OWORD *)(a2 + 48) = v72;
    v72 = 0uLL;
    *(_QWORD *)(a2 + 72) = v32;
    *(_OWORD *)(a2 + 80) = v75;
    *(_QWORD *)(a2 + 96) = v76;
    v76 = 0;
    v73 = 0;
    v75 = 0uLL;
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (SHIBYTE(v76) < 0)
    {
      operator delete((void *)v75);
      if ((SHIBYTE(v73) & 0x80000000) == 0)
      {
LABEL_53:
        if (!v71)
          goto LABEL_136;
        goto LABEL_134;
      }
    }
    else if ((SHIBYTE(v73) & 0x80000000) == 0)
    {
      goto LABEL_53;
    }
    operator delete((void *)v72);
    if (!v71)
      goto LABEL_136;
    goto LABEL_134;
  }
LABEL_35:
  v29 = sub_239618F08(&v91, "No known method to load properties for file");
  v99 = 1;
  sub_239914D5C((uint64_t)v29, (uint64_t)&__dst);
  *(_OWORD *)a2 = __dst;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (!v89)
  {
    *(_BYTE *)(a2 + 120) = 0;
    goto LABEL_95;
  }
  *(_BYTE *)(a2 + 40) = 0;
  if (v82)
  {
    *(_OWORD *)(a2 + 16) = v80;
    *(_QWORD *)(a2 + 32) = v81;
    v81 = 0;
    v80 = 0uLL;
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  if (v88)
  {
    v30 = v85;
    *(_QWORD *)(a2 + 64) = v84;
    *(_OWORD *)(a2 + 48) = v83;
    v83 = 0uLL;
    *(_QWORD *)(a2 + 72) = v30;
    *(_OWORD *)(a2 + 80) = v86;
    *(_QWORD *)(a2 + 96) = v87;
    v87 = 0;
    v84 = 0;
    v86 = 0uLL;
    *(_BYTE *)(a2 + 104) = 1;
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (SHIBYTE(v87) < 0)
    {
      operator delete((void *)v86);
      if ((SHIBYTE(v84) & 0x80000000) == 0)
      {
LABEL_41:
        if (!v82)
          goto LABEL_95;
LABEL_93:
        if (SHIBYTE(v81) < 0)
          operator delete((void *)v80);
        goto LABEL_95;
      }
    }
    else if ((SHIBYTE(v84) & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete((void *)v83);
    if (!v82)
      goto LABEL_95;
    goto LABEL_93;
  }
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = 0;
  if (v82)
    goto LABEL_93;
LABEL_95:
  if (v99)
  {
    if (v98)
    {
      if (v97 < 0)
        operator delete(v96);
      if (v95 < 0)
        operator delete(v94);
    }
    if (v93 && v92 < 0)
      operator delete(v91);
  }
}

void sub_239620628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  void *v71;

  sub_239522FE4((uint64_t)&a71);
  sub_239523188((uint64_t)&a10);
  if (a59)
  {
    if (a58 < 0)
      operator delete(__p);
  }
  sub_239416DA0((uint64_t)&a38);

  _Unwind_Resume(a1);
}

void sub_239620724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  void *v68;

  sub_239416DA0((uint64_t)&a68);

  _Unwind_Resume(a1);
}

void sub_23962073C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239620754()
{
  __cxa_end_catch();
  JUMPOUT(0x239620718);
}

void sub_239620764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239620774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239620784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239620794(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239523188(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_2396207A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2396207BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  int v59;

  if (a58 < 0)
    operator delete(__p);
  if (v59 < 0)
    operator delete(v58);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396207E4(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v2 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(result + 16) = v2;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v3 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v3;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
      v4 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(result + 80) = v4;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 120) = 0;
  return result;
}

uint64_t sub_239620894(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 32))
  {
    v2 = *(std::__shared_weak_count **)(result + 24);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_239620904(unsigned __int16 **a1)
{
  uint64_t v2;
  unsigned int v3;
  char v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  void *__p[2];
  char v21;

  v2 = (uint64_t)a1[2];
  v21 = 7;
  strcpy((char *)__p, "IsFloat");
  v3 = (unsigned __int16)sub_2396019E4(v2, (uint64_t)__p);
  if (v3 <= 0x100)
    v4 = 0;
  else
    v4 = v3;
  if (v21 < 0)
  {
    operator delete(__p[0]);
    v5 = *a1;
    v6 = *((char *)*a1 + 23);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_6:
      if (v6 != 3)
      {
        if (v6 != 4 || *(_DWORD *)v5 != 2036429383)
          return 0;
        goto LABEL_37;
      }
      goto LABEL_16;
    }
  }
  else
  {
    v5 = *a1;
    v6 = *((char *)*a1 + 23);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_6;
  }
  v7 = *((_QWORD *)v5 + 1);
  if (v7 != 3)
  {
    if (v7 != 4 || **(_DWORD **)v5 != 2036429383)
      return 0;
LABEL_37:
    v18 = *(_QWORD *)a1[1];
    if (v18 == 8 && v4 == 0)
      return 0x100000001;
    if (v18 == 16 && !v4)
      return 0x100000002;
    if (v18 == 32 && v4)
      return 0x100000004;
    if (v18 == 16 && v4)
      return 0x100000003;
    return 0;
  }
  v5 = *(unsigned __int16 **)v5;
LABEL_16:
  v8 = *v5;
  v9 = *((unsigned __int8 *)v5 + 2);
  if (v8 != 18258 || v9 != 66)
    return 0;
  v12 = (uint64_t)a1[2];
  v21 = 8;
  strcpy((char *)__p, "HasAlpha");
  v13 = (unsigned __int16)sub_2396019E4(v12, (uint64_t)__p);
  if (v13 <= 0x100)
    v14 = 0;
  else
    v14 = v13;
  if (v21 < 0)
    operator delete(__p[0]);
  v15 = *(_QWORD *)a1[1];
  if (v4)
    v16 = 0;
  else
    v16 = v15 == 8;
  v17 = !v16;
  if (v14)
  {
    if ((v17 & 1) == 0)
      return 0x10000001DLL;
    if (v15 == 16 && !v4)
      return 0x10000001ELL;
    if (v15 == 32 && v4)
      return 0x100000020;
    if (v15 != 16 || !v4)
      return 0;
    return 0x10000001FLL;
  }
  else
  {
    if (!v17)
      return 0x100000015;
    if (v15 == 16 && !v4)
      return 0x100000016;
    if (v15 == 32 && v4)
    {
      return 0x100000018;
    }
    else
    {
      if (v15 != 16 || !v4)
        return 0;
      return 0x100000017;
    }
  }
}

void sub_239620CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239620CDC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_239601828(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_239620DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239620DEC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_239620EFC(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_239620EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239620EFC(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE0DA8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_239620F5C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239620F74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239620F8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239620FB0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_239620FD4(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 136))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_23952329C(v4, v1 + 1);
    sub_239523424((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_250ADD7C0, (void (*)(void *))sub_239523474);
  }
  return result;
}

void sub_239621050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239522FE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239621064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_239522FE4((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_239621080(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239621094(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 136))
  {
    sub_239416DA0(a1 + 8);
    nullsub_4(a1);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_239621138(const char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v3;
  int8x16_t v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  void *__p;
  char v12;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v9 = sub_239621220(&v8, a1);
  v12 = 0;
  LOBYTE(__p) = 0;
  sub_23941AE44((uint64_t)v8, (uint64_t)v9, (uint64_t)&__p, a2, v3, v4);
  if (v12 < 0)
    operator delete(__p);
  v5 = (char *)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*(v6 - 1) < 0)
          operator delete(*((void **)v6 - 3));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_2396211E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

char *sub_239621220(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_239621438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

__int128 *sub_23962144C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930B90);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930B90))
    return &xmmword_256930B78;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba8u]", &xmmword_256930B78);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930B78, &dword_23940C000);
  __cxa_guard_release(&qword_256930B90);
  return &xmmword_256930B78;
}

void sub_2396214DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930B90);
  _Unwind_Resume(a1);
}

void sub_2396214F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  sub_2396215F4(a1, &v13);
  v12 = v13;
  v13 = 0uLL;
  if ((*(_QWORD *)(a1 + 24) & 0xFF00000000) != 0)
    v4 = *(_QWORD *)(a1 + 24) | 0x100000000;
  else
    v4 = 0;
  v5 = *(_WORD *)(a1 + 60);
  sub_23982808C(a2, &v12, v4);
  *(_WORD *)(a2 + 120) = v5;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_2396215D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_2396215F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 29)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239621834(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_2396217D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239621834(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_2396218AC();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_2396218AC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930E90);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930E90))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_23962144C();
    sub_239621AB0((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239621AB0((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930E78, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930E78, &dword_23940C000);
          __cxa_guard_release(&qword_256930E90);
          return &stru_256930E78;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930E78;
}

void sub_2396219FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930E90);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930E90);
  _Unwind_Resume(a1);
}

void sub_239621AB0(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_239621B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_239621B80(const char *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v3;
  int8x16_t v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  char *v9;
  uint64_t v10;
  void *__p;
  char v12;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  v9 = sub_239621C68(&v8, a1);
  v12 = 0;
  LOBYTE(__p) = 0;
  sub_23941AE44((uint64_t)v8, (uint64_t)v9, (uint64_t)&__p, a2, v3, v4);
  if (v12 < 0)
    operator delete(__p);
  v5 = (char *)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*(v6 - 1) < 0)
          operator delete(*((void **)v6 - 3));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_239621C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

char *sub_239621C68(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_239621E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239621E94(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_23;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_23;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (*(_BYTE *)(a1 + 53))
        goto LABEL_14;
    }
    else
    {
LABEL_23:
      if (*(_BYTE *)(a1 + 53))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v17, v4, 1);
        goto LABEL_17;
      }
    }
  }
  v17 = 0;
LABEL_17:
  sub_239622218((uint64_t)a2, &v16);
  v13.n128_f64[0] = sub_239622038(a1, a2);
  v14 = v16;
  v16 = 0;
  if (v14)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v14 + 8))(v14, v13.n128_f64[0]);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v13);
  return result;
}

void sub_239621FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

double sub_239622038(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double result;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  __int16 v32;

  v26[0] = &off_250ADB210;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_DWORD *)(a1 + 48);
    v9 = *(_WORD *)(a1 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_DWORD *)(a1 + 48);
    v9 = *(_WORD *)(a1 + 52);
  }
  v26[1] = v3;
  v27 = v4;
  v28 = *(_QWORD *)(a1 + 24);
  v29 = *(_DWORD *)(a1 + 32);
  v30 = v7;
  v31 = v8;
  v32 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v22 = &off_250ADB1D0;
  sub_239622344(a2, (uint64_t)&v23);
  sub_2397AA044(v26, &v22);
  v13 = nullsub_4(&v25);
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  nullsub_4(&v22);
  v17 = nullsub_4(&v28);
  v18 = v27;
  if (!v27)
    goto LABEL_22;
  v19 = (unint64_t *)&v27->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
    std::__shared_weak_count::__release_weak(v18);
    *(_QWORD *)&result = nullsub_4(v26).n128_u64[0];
  }
  else
  {
LABEL_22:
    *(_QWORD *)&result = nullsub_4(v26).n128_u64[0];
  }
  return result;
}

void sub_2396221E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_239416D30((uint64_t)&a9);
  sub_239416FF8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2396221FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  nullsub_4(&a9);
  sub_239416FF8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_239622218(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      goto LABEL_18;
  }
  else
  {
LABEL_14:
    if (!v5)
      goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 129))
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), 1);
    return;
  }
LABEL_18:
  *a2 = 0;
}

void sub_239622344(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 3, (uint64_t)(a1 + 11), 3, (uint64_t)a1 + 100, 1);
  sub_239523070(a2, &v17, (uint64_t)v16, v8, 21);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_239622464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_239622488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2396224A8()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_2396224BC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AE0DE0;
  result[1] = v3;
  return result;
}

uint64_t sub_2396224F0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AE0DE0;
  a2[1] = v2;
  return result;
}

double sub_23962250C@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_239622518((uint64_t *)(a1 + 8), a2, *a3, a4);
}

double sub_239622518@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t *v22;
  double result;
  uint64_t (**v24)();
  __int128 v25;
  _OWORD v26[6];
  uint64_t v27;
  __int16 v28;
  _QWORD v29[3];
  int v30;

  if (!a3)
    sub_239EC100C((uint64_t)a1, (uint64_t)a2);
  v6 = *a1;
  if (*(_DWORD *)(v6 + 112) == *a2 && a3 == 21 && *(_DWORD *)(v6 + 116) == a2[1])
  {
    v24 = &off_250ADB1D0;
    sub_239622344((_QWORD *)v6, (uint64_t)&v25);
    *(_QWORD *)a4 = &off_250ADB1D0;
    *(_OWORD *)(a4 + 8) = v25;
    v25 = 0uLL;
    *(_OWORD *)(a4 + 24) = v26[0];
    *(_OWORD *)(a4 + 38) = *(_OWORD *)((char *)v26 + 14);
    *(_BYTE *)(a4 + 120) = 1;
    v7 = nullsub_4(v26);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (!*((_QWORD *)&v25 + 1))
      goto LABEL_20;
    v9 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    goto LABEL_18;
  }
  if (a3 != 21)
    sub_239EC1038(v6, (uint64_t)a2);
  v30 = 21;
  v29[0] = v6;
  v29[1] = &v30;
  v29[2] = a2;
  sub_23962276C((uint64_t)v29, &v24);
  v11 = *a1;
  v12 = v25;
  v25 = 0uLL;
  v13 = *(std::__shared_weak_count **)(v11 + 16);
  *(_OWORD *)(v11 + 8) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v26[0];
  v17 = v26[1];
  *(_OWORD *)(v11 + 56) = v26[2];
  *(_OWORD *)(v11 + 40) = v17;
  *(_OWORD *)(v11 + 24) = v16;
  v18 = v26[3];
  v19 = v26[4];
  v20 = v26[5];
  *(_QWORD *)(v11 + 120) = v27;
  *(_OWORD *)(v11 + 104) = v20;
  *(_OWORD *)(v11 + 88) = v19;
  *(_OWORD *)(v11 + 72) = v18;
  *(_WORD *)(v11 + 128) = v28;
  sub_239416DA0((uint64_t)&v25);
  nullsub_4(&v24);
  v21 = (_QWORD *)*a1;
  v24 = &off_250ADB1D0;
  sub_239622344(v21, (uint64_t)&v25);
  *(_QWORD *)a4 = &off_250ADB1D0;
  *(_OWORD *)(a4 + 8) = v25;
  v25 = 0uLL;
  *(_OWORD *)(a4 + 24) = v26[0];
  *(_OWORD *)(a4 + 38) = *(_OWORD *)((char *)v26 + 14);
  *(_BYTE *)(a4 + 120) = 1;
  v7 = nullsub_4(v26);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v10 = __ldaxr(v22);
    while (__stlxr(v10 - 1, v22));
LABEL_18:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_20:
  *(_QWORD *)&result = nullsub_4(&v24).n128_u64[0];
  return result;
}

void sub_239622744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239622758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_23962276C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[16];
  std::__shared_weak_count *v21;
  uint64_t v22;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v18 = v4;
    v19 = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v19 = 0;
  }
  sub_2398D81F4((uint64_t)&v18, 21);
  *a2 = &off_250ADBEA0;
  sub_239469644((uint64_t)v20, (uint64_t)(a2 + 1));
  v11 = nullsub_4(&v22);
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  j_nullsub_4_89(v20);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_239622910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  nullsub_4(v11);
  sub_239422DD0((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239622934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239622948(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  std::string v7;
  void *__dst[2];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  char v26;
  char v27;

  v5 = 1;
  switch(a2)
  {
    case 0:
    case 8:
      sub_239621138("Format Not Supported", &v7);
      sub_239A42F9C(__dst, (__int128 *)&v7);
      v16 = 1;
      sub_239914D5C((uint64_t)__dst, (uint64_t)&v17);
      *(_OWORD *)a3 = v17;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (!v27)
      {
        *(_BYTE *)(a3 + 136) = 0;
        goto LABEL_19;
      }
      *(_BYTE *)(a3 + 40) = 0;
      if (v20)
      {
        *(_OWORD *)(a3 + 16) = v18;
        *(_QWORD *)(a3 + 32) = v19;
        v19 = 0;
        v18 = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v26)
      {
        v6 = v23;
        *(_QWORD *)(a3 + 64) = v22;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v21;
        v21[0] = 0;
        v21[1] = 0;
        *(_QWORD *)(a3 + 72) = v6;
        *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 96) = v25;
        __p[1] = 0;
        v25 = 0;
        v22 = 0;
        __p[0] = 0;
        *(_BYTE *)(a3 + 104) = 1;
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 136) = 0;
        if (SHIBYTE(v25) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v22) & 0x80000000) == 0)
          {
LABEL_10:
            if (!v20)
              goto LABEL_19;
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v22) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(v21[0]);
        if (!v20)
          goto LABEL_19;
      }
      else
      {
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 136) = 0;
        if (!v20)
          goto LABEL_19;
      }
LABEL_17:
      if (SHIBYTE(v19) < 0)
        operator delete((void *)v18);
LABEL_19:
      if (v16)
      {
        if (v15)
        {
          if (v14 < 0)
            operator delete(v13);
          if (v12 < 0)
            operator delete(v11);
        }
        if (v10 && v9 < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      return;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v5 = a2;
      goto LABEL_3;
    default:
LABEL_3:
      sub_239622B98(a1, v5, a3);
      return;
  }
}

void sub_239622B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_239523188((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_239622B98@<D0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13[2];
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t (**v31)();
  _OWORD v32[7];
  uint64_t v33;
  __int16 v34;

  v31 = &off_250ADBEA0;
  sub_239542AE8(v32);
  sub_239622E38((uint64_t)&v31, a1, a2, (uint64_t)&v20);
  if (v30)
  {
    *(_QWORD *)a3 = &off_250ADBEA0;
    *(_OWORD *)(a3 + 8) = v32[0];
    v32[0] = 0uLL;
    *(_OWORD *)(a3 + 72) = v32[4];
    *(_OWORD *)(a3 + 88) = v32[5];
    *(_OWORD *)(a3 + 104) = v32[6];
    *(_QWORD *)(a3 + 120) = v33;
    *(_OWORD *)(a3 + 24) = v32[1];
    *(_OWORD *)(a3 + 40) = v32[2];
    *(_OWORD *)(a3 + 56) = v32[3];
    *(_WORD *)(a3 + 128) = v34;
    *(_BYTE *)(a3 + 136) = 1;
    goto LABEL_3;
  }
  v9 = v20;
  v7 = sub_23952329C(&v10, &v21);
  *(_OWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v19)
  {
    *(_BYTE *)(a3 + 40) = 0;
    if (v12)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (!v18)
    {
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 136) = 0;
      if (!v12)
        goto LABEL_19;
      goto LABEL_17;
    }
    v8 = v15;
    *(_QWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v13;
    v13[0] = 0;
    v13[1] = 0;
    *(_QWORD *)(a3 + 72) = v8;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 96) = v17;
    __p[1] = 0;
    v17 = 0;
    v14 = 0;
    __p[0] = 0;
    *(_BYTE *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 136) = 0;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_10:
        if (!v12)
          goto LABEL_19;
LABEL_17:
        if (v11 < 0)
          operator delete(v10);
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v13[0]);
    if (v12)
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)(a3 + 136) = 0;
  }
LABEL_19:
  if (!v30 && v29)
  {
    if (v28)
    {
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
    }
    if (v23 && v22 < 0)
      operator delete((void *)v21);
  }
LABEL_3:
  sub_239416DA0((uint64_t)v32);
  *(_QWORD *)&result = nullsub_4(&v31).n128_u64[0];
  return result;
}

void sub_239622DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  sub_239522F50((uint64_t)va);
  sub_239416DA0(v16);
  nullsub_4(v17 - 200);
  _Unwind_Resume(a1);
}

void sub_239622E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_239622E38(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *exception;
  std::string v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  void *v34;
  char v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v44[0] = &off_250AE0DE0;
  v44[1] = a1;
  v45 = v44;
  sub_2397261E0(v44, 0x15u, a2, a3, (uint64_t)&v33);
  v6 = v45;
  if (v45 == v44)
  {
    v7 = 4;
    v6 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v43)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_239726DC4(a3, (uint64_t)"load", 4, &v11);
  if (v43)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v11, &v33, (uint64_t)&v12);
  v22 = v12;
  v8 = sub_23952329C(&v23, &v13);
  *(_OWORD *)a4 = v22;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v32)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_24;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v25)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v31)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v25)
      goto LABEL_24;
    goto LABEL_22;
  }
  v9 = v28;
  *(_QWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v26;
  v26[0] = 0;
  v26[1] = 0;
  *(_QWORD *)(a4 + 72) = v9;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v30;
  __p[1] = 0;
  v30 = 0;
  v27 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v25)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v26[0]);
  if (!v25)
    goto LABEL_24;
LABEL_22:
  if (v24 < 0)
    operator delete(v23);
LABEL_24:
  if (v21)
  {
    if (v20)
    {
      if (v19 < 0)
        operator delete(v18);
      if (v17 < 0)
        operator delete(v16);
    }
    if (v15 && v14 < 0)
      operator delete((void *)v13);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v43)
      return;
  }
  else if (v43)
  {
    return;
  }
  if (v42)
  {
    if (v41)
    {
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37);
    }
    if (v36)
    {
      if (v35 < 0)
        operator delete(v34);
    }
  }
}

void sub_239623138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 200);
  _Unwind_Resume(a1);
}

void sub_239623180(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396231B8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_239623210(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *exception;
  std::string v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  void *v26;
  _BYTE v27[16];
  char v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  *(_QWORD *)&v25 = &off_250ADB210;
  sub_239423B80(a1, (uint64_t)&v25 + 8);
  sub_239727F50(&v25, a2, a3, (uint64_t)&v36);
  v7 = nullsub_4(v27);
  v8 = (std::__shared_weak_count *)v26;
  if (!v26)
    goto LABEL_5;
  v9 = (unint64_t *)((char *)v26 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
    std::__shared_weak_count::__release_weak(v8);
    nullsub_4(&v25);
    if (v46)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v25);
    if (v46)
    {
LABEL_6:
      *(_BYTE *)(a4 + 120) = 1;
      return;
    }
  }
  sub_239726DC4(a3, (uint64_t)"save", 4, &v14);
  if (v46)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v14, &v36, (uint64_t)&v15);
  v25 = v15;
  v11 = sub_23952329C(&v26, &v16);
  *(_OWORD *)a4 = v25;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v35)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v28)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v11;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v34)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v28)
      goto LABEL_25;
    goto LABEL_23;
  }
  v12 = v31;
  *(_QWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  *(_QWORD *)(a4 + 72) = v12;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v33;
  __p[1] = 0;
  v33 = 0;
  v30 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v28)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v29[0]);
  if (!v28)
    goto LABEL_25;
LABEL_23:
  if ((v27[15] & 0x80000000) != 0)
    operator delete(v26);
LABEL_25:
  if (v24)
  {
    if (v23)
    {
      if (v22 < 0)
        operator delete(v21);
      if (v20 < 0)
        operator delete(v19);
    }
    if (v18 && v17 < 0)
      operator delete((void *)v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v46)
      return;
  }
  else if (v46)
  {
    return;
  }
  if (v45)
  {
    if (v44)
    {
      if (v43 < 0)
        operator delete(v42);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
    }
  }
}

void sub_239623534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 176);
  _Unwind_Resume(a1);
}

void sub_23962357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239623590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_2396235A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      goto LABEL_23;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    v4 = *(_QWORD *)(a1 + 8);
    v9 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v9)
      goto LABEL_23;
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (*(_BYTE *)(a1 + 53))
        goto LABEL_14;
    }
    else
    {
LABEL_23:
      if (*(_BYTE *)(a1 + 53))
      {
LABEL_14:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(&v17, v4, 1);
        goto LABEL_17;
      }
    }
  }
  v17 = 0;
LABEL_17:
  sub_2395795F0((uint64_t)a2, &v16);
  v13.n128_f64[0] = sub_239623748(a1, a2);
  v14 = v16;
  v16 = 0;
  if (v14)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v14 + 8))(v14, v13.n128_f64[0]);
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v13);
  return result;
}

void sub_2396236E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    v11 = a10;
    if (!a10)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v11 = a10;
    if (!a10)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

double sub_239623748(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double result;
  uint64_t (**v22)();
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  _QWORD v26[2];
  std::__shared_weak_count *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  __int16 v32;

  v26[0] = &off_250ADB210;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_DWORD *)(a1 + 48);
    v9 = *(_WORD *)(a1 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(_DWORD *)(a1 + 48);
    v9 = *(_WORD *)(a1 + 52);
  }
  v26[1] = v3;
  v27 = v4;
  v28 = *(_QWORD *)(a1 + 24);
  v29 = *(_DWORD *)(a1 + 32);
  v30 = v7;
  v31 = v8;
  v32 = v9;
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v22 = &off_250ADB1D0;
  sub_239623928(a2, (uint64_t)&v23);
  sub_2397AA044(v26, &v22);
  v13 = nullsub_4(&v25);
  v14 = v24;
  if (v24)
  {
    v15 = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  nullsub_4(&v22);
  v17 = nullsub_4(&v28);
  v18 = v27;
  if (!v27)
    goto LABEL_22;
  v19 = (unint64_t *)&v27->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
    std::__shared_weak_count::__release_weak(v18);
    *(_QWORD *)&result = nullsub_4(v26).n128_u64[0];
  }
  else
  {
LABEL_22:
    *(_QWORD *)&result = nullsub_4(v26).n128_u64[0];
  }
  return result;
}

void sub_2396238F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_239416D30((uint64_t)&a9);
  sub_239416FF8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_23962390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  nullsub_4(&a9);
  sub_239416FF8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_239623928(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 2, (uint64_t)(a1 + 8), 2, (uint64_t)(a1 + 9), 1);
  sub_239523070(a2, &v17, (uint64_t)v16, v8, 1);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_239623A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_239623A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_239623A8C()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239623AA0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AE0E28;
  result[1] = v3;
  return result;
}

uint64_t sub_239623AD4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AE0E28;
  a2[1] = v2;
  return result;
}

double sub_239623AF0@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_239623AFC((uint64_t *)(a1 + 8), a2, *a3, a4);
}

double sub_239623AFC@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  unint64_t *v20;
  double result;
  uint64_t (**v22)();
  __int128 v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[3];
  int v29;

  if (!a3)
    sub_239EC100C((uint64_t)a1, (uint64_t)a2);
  v6 = *a1;
  if (*(_DWORD *)(v6 + 64) == *a2 && a3 == 1 && *(_DWORD *)(v6 + 68) == a2[1])
  {
    v22 = &off_250ADB1D0;
    sub_239623928((_QWORD *)v6, (uint64_t)&v23);
    *(_QWORD *)a4 = &off_250ADB1D0;
    *(_OWORD *)(a4 + 8) = v23;
    v23 = 0uLL;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)v24;
    *(_OWORD *)(a4 + 38) = *(_OWORD *)&v24[14];
    *(_BYTE *)(a4 + 120) = 1;
    v7 = nullsub_4(v24);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      goto LABEL_20;
    v9 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    goto LABEL_18;
  }
  if (a3 != 1)
    sub_239EC1038(v6, (uint64_t)a2);
  v29 = 1;
  v28[0] = v6;
  v28[1] = &v29;
  v28[2] = a2;
  sub_239623D3C((uint64_t)v28, &v22);
  v11 = *a1;
  v12 = v23;
  v23 = 0uLL;
  v13 = *(std::__shared_weak_count **)(v11 + 16);
  *(_OWORD *)(v11 + 8) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_OWORD *)v24;
  v17 = *(_OWORD *)&v24[16];
  v18 = v25;
  *(_QWORD *)(v11 + 72) = v26;
  *(_OWORD *)(v11 + 56) = v18;
  *(_OWORD *)(v11 + 40) = v17;
  *(_OWORD *)(v11 + 24) = v16;
  *(_WORD *)(v11 + 80) = v27;
  sub_239416DA0((uint64_t)&v23);
  nullsub_4(&v22);
  v19 = (_QWORD *)*a1;
  v22 = &off_250ADB1D0;
  sub_239623928(v19, (uint64_t)&v23);
  *(_QWORD *)a4 = &off_250ADB1D0;
  *(_OWORD *)(a4 + 8) = v23;
  v23 = 0uLL;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v24;
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v24[14];
  *(_BYTE *)(a4 + 120) = 1;
  v7 = nullsub_4(v24);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v10 = __ldaxr(v20);
    while (__stlxr(v10 - 1, v20));
LABEL_18:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_20:
  *(_QWORD *)&result = nullsub_4(&v22).n128_u64[0];
  return result;
}

void sub_239623D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239623D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239623D3C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[16];
  std::__shared_weak_count *v21;
  uint64_t v22;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v18 = v4;
    v19 = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v19 = 0;
  }
  sub_2398D81F4((uint64_t)&v18, 1);
  *a2 = &off_250ADB628;
  sub_239423E50((uint64_t)v20, (uint64_t)(a2 + 1));
  v11 = nullsub_4(&v22);
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  j_nullsub_4_89(v20);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_239623EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  nullsub_4(v11);
  sub_239422DD0((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239623F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239623F18(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  std::string v7;
  void *__dst[2];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  char v26;
  char v27;

  v5 = 1;
  switch(a2)
  {
    case 0:
    case 8:
      sub_239621138("Format Not Supported", &v7);
      sub_239A42F9C(__dst, (__int128 *)&v7);
      v16 = 1;
      sub_239914D5C((uint64_t)__dst, (uint64_t)&v17);
      *(_OWORD *)a3 = v17;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (!v27)
      {
        *(_BYTE *)(a3 + 120) = 0;
        goto LABEL_19;
      }
      *(_BYTE *)(a3 + 40) = 0;
      if (v20)
      {
        *(_OWORD *)(a3 + 16) = v18;
        *(_QWORD *)(a3 + 32) = v19;
        v19 = 0;
        v18 = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v26)
      {
        v6 = v23;
        *(_QWORD *)(a3 + 64) = v22;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v21;
        v21[0] = 0;
        v21[1] = 0;
        *(_QWORD *)(a3 + 72) = v6;
        *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 96) = v25;
        __p[1] = 0;
        v25 = 0;
        v22 = 0;
        __p[0] = 0;
        *(_BYTE *)(a3 + 104) = 1;
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (SHIBYTE(v25) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v22) & 0x80000000) == 0)
          {
LABEL_10:
            if (!v20)
              goto LABEL_19;
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v22) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(v21[0]);
        if (!v20)
          goto LABEL_19;
      }
      else
      {
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (!v20)
          goto LABEL_19;
      }
LABEL_17:
      if (SHIBYTE(v19) < 0)
        operator delete((void *)v18);
LABEL_19:
      if (v16)
      {
        if (v15)
        {
          if (v14 < 0)
            operator delete(v13);
          if (v12 < 0)
            operator delete(v11);
        }
        if (v10 && v9 < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      return;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v5 = a2;
      goto LABEL_3;
    default:
LABEL_3:
      sub_239624168(a1, v5, a3);
      return;
  }
}

void sub_23962413C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_239523188((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_239624168@<D0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13[2];
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t (**v31)();
  _OWORD v32[4];
  uint64_t v33;
  __int16 v34;

  v31 = &off_250ADB628;
  sub_239422F30(v32);
  sub_2396243F0((uint64_t)&v31, a1, a2, (uint64_t)&v20);
  if (v30)
  {
    *(_QWORD *)a3 = &off_250ADB628;
    *(_OWORD *)(a3 + 8) = v32[0];
    v32[0] = 0uLL;
    *(_OWORD *)(a3 + 24) = v32[1];
    *(_OWORD *)(a3 + 40) = v32[2];
    *(_OWORD *)(a3 + 56) = v32[3];
    *(_QWORD *)(a3 + 72) = v33;
    *(_WORD *)(a3 + 80) = v34;
    *(_BYTE *)(a3 + 120) = 1;
    goto LABEL_3;
  }
  v9 = v20;
  v7 = sub_23952329C(&v10, &v21);
  *(_OWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v19)
  {
    *(_BYTE *)(a3 + 40) = 0;
    if (v12)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (!v18)
    {
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (!v12)
        goto LABEL_19;
      goto LABEL_17;
    }
    v8 = v15;
    *(_QWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v13;
    v13[0] = 0;
    v13[1] = 0;
    *(_QWORD *)(a3 + 72) = v8;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 96) = v17;
    __p[1] = 0;
    v17 = 0;
    v14 = 0;
    __p[0] = 0;
    *(_BYTE *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_10:
        if (!v12)
          goto LABEL_19;
LABEL_17:
        if (v11 < 0)
          operator delete(v10);
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v13[0]);
    if (v12)
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
LABEL_19:
  if (!v30 && v29)
  {
    if (v28)
    {
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
    }
    if (v23 && v22 < 0)
      operator delete((void *)v21);
  }
LABEL_3:
  sub_239416DA0((uint64_t)v32);
  *(_QWORD *)&result = nullsub_4(&v31).n128_u64[0];
  return result;
}

void sub_2396243B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  sub_239522F50((uint64_t)va);
  sub_239416DA0(v16);
  nullsub_4(v17 - 152);
  _Unwind_Resume(a1);
}

void sub_2396243DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_2396243F0(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *exception;
  std::string v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  void *v34;
  char v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v44[0] = &off_250AE0E28;
  v44[1] = a1;
  v45 = v44;
  sub_2397261E0(v44, 1u, a2, a3, (uint64_t)&v33);
  v6 = v45;
  if (v45 == v44)
  {
    v7 = 4;
    v6 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v43)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_239726DC4(a3, (uint64_t)"load", 4, &v11);
  if (v43)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v11, &v33, (uint64_t)&v12);
  v22 = v12;
  v8 = sub_23952329C(&v23, &v13);
  *(_OWORD *)a4 = v22;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v32)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_24;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v25)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v31)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v25)
      goto LABEL_24;
    goto LABEL_22;
  }
  v9 = v28;
  *(_QWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v26;
  v26[0] = 0;
  v26[1] = 0;
  *(_QWORD *)(a4 + 72) = v9;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v30;
  __p[1] = 0;
  v30 = 0;
  v27 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v25)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v26[0]);
  if (!v25)
    goto LABEL_24;
LABEL_22:
  if (v24 < 0)
    operator delete(v23);
LABEL_24:
  if (v21)
  {
    if (v20)
    {
      if (v19 < 0)
        operator delete(v18);
      if (v17 < 0)
        operator delete(v16);
    }
    if (v15 && v14 < 0)
      operator delete((void *)v13);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v43)
      return;
  }
  else if (v43)
  {
    return;
  }
  if (v42)
  {
    if (v41)
    {
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37);
    }
    if (v36)
    {
      if (v35 < 0)
        operator delete(v34);
    }
  }
}

void sub_2396246F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 200);
  _Unwind_Resume(a1);
}

void sub_239624738(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_239624770(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[12];
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v4 = a1[1];
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v23 = v4;
    v24 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v23 = a1[1];
    v24 = 0;
  }
  v21 = v23;
  v22 = v24;
  if (v24)
  {
    v10 = (unint64_t *)&v24->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a1[7];
  sub_2398EB464((uint64_t)v20, 2, (uint64_t)(a1 + 8), 2, (uint64_t)(a1 + 9), 1);
  sub_239423D38(a2, &v21, (uint64_t)v20, v12, 1);
  v13 = nullsub_4(v20);
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v24;
  if (v24)
  {
    v18 = (unint64_t *)&v24->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v13);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_2396248E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_23962490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_239624928(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *exception;
  std::string v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  void *v26;
  _BYTE v27[16];
  char v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  *(_QWORD *)&v25 = &off_250ADB210;
  sub_239624770(a1, (uint64_t)&v25 + 8);
  sub_239727F50(&v25, a2, a3, (uint64_t)&v36);
  v7 = nullsub_4(v27);
  v8 = (std::__shared_weak_count *)v26;
  if (!v26)
    goto LABEL_5;
  v9 = (unint64_t *)((char *)v26 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
    std::__shared_weak_count::__release_weak(v8);
    nullsub_4(&v25);
    if (v46)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v25);
    if (v46)
    {
LABEL_6:
      *(_BYTE *)(a4 + 120) = 1;
      return;
    }
  }
  sub_239726DC4(a3, (uint64_t)"save", 4, &v14);
  if (v46)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v14, &v36, (uint64_t)&v15);
  v25 = v15;
  v11 = sub_23952329C(&v26, &v16);
  *(_OWORD *)a4 = v25;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v35)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v28)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v11;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v34)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v28)
      goto LABEL_25;
    goto LABEL_23;
  }
  v12 = v31;
  *(_QWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  *(_QWORD *)(a4 + 72) = v12;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v33;
  __p[1] = 0;
  v33 = 0;
  v30 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v28)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v29[0]);
  if (!v28)
    goto LABEL_25;
LABEL_23:
  if ((v27[15] & 0x80000000) != 0)
    operator delete(v26);
LABEL_25:
  if (v24)
  {
    if (v23)
    {
      if (v22 < 0)
        operator delete(v21);
      if (v20 < 0)
        operator delete(v19);
    }
    if (v18 && v17 < 0)
      operator delete((void *)v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v46)
      return;
  }
  else if (v46)
  {
    return;
  }
  if (v45)
  {
    if (v44)
    {
      if (v43 < 0)
        operator delete(v42);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
    }
  }
}

void sub_239624C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 176);
  _Unwind_Resume(a1);
}

void sub_239624C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239624CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

void sub_239624CC0()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239624CD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AE0E70;
  result[1] = v3;
  return result;
}

uint64_t sub_239624D08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AE0E70;
  a2[1] = v2;
  return result;
}

double sub_239624D24@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_239624D30((uint64_t *)(a1 + 8), a2, *a3, a4);
}

double sub_239624D30@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t *v22;
  double result;
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[3];
  int v34;

  if (!a3)
    sub_239EC100C((uint64_t)a1, (uint64_t)a2);
  v6 = *a1;
  if (*(_DWORD *)(v6 + 112) == *a2 && a3 == 24 && *(_DWORD *)(v6 + 116) == a2[1])
  {
    v24 = &off_250ADB1D0;
    sub_239624F84((_QWORD *)v6, (uint64_t)&v25);
    *(_QWORD *)a4 = &off_250ADB1D0;
    *(_OWORD *)(a4 + 8) = v25;
    v25 = 0uLL;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)v26;
    *(_OWORD *)(a4 + 38) = *(_OWORD *)&v26[14];
    *(_BYTE *)(a4 + 120) = 1;
    v7 = nullsub_4(v26);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (!*((_QWORD *)&v25 + 1))
      goto LABEL_20;
    v9 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    goto LABEL_18;
  }
  if (a3 != 24)
    sub_239EC1038(v6, (uint64_t)a2);
  v34 = 24;
  v33[0] = v6;
  v33[1] = &v34;
  v33[2] = a2;
  sub_2396250E4((uint64_t)v33, &v24);
  v11 = *a1;
  v12 = v25;
  v25 = 0uLL;
  v13 = *(std::__shared_weak_count **)(v11 + 16);
  *(_OWORD *)(v11 + 8) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_OWORD *)v26;
  v17 = *(_OWORD *)&v26[16];
  *(_OWORD *)(v11 + 56) = v27;
  *(_OWORD *)(v11 + 40) = v17;
  *(_OWORD *)(v11 + 24) = v16;
  v18 = v28;
  v19 = v29;
  v20 = v30;
  *(_QWORD *)(v11 + 120) = v31;
  *(_OWORD *)(v11 + 104) = v20;
  *(_OWORD *)(v11 + 88) = v19;
  *(_OWORD *)(v11 + 72) = v18;
  *(_WORD *)(v11 + 128) = v32;
  sub_239416DA0((uint64_t)&v25);
  nullsub_4(&v24);
  v21 = (_QWORD *)*a1;
  v24 = &off_250ADB1D0;
  sub_239624F84(v21, (uint64_t)&v25);
  *(_QWORD *)a4 = &off_250ADB1D0;
  *(_OWORD *)(a4 + 8) = v25;
  v25 = 0uLL;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v26;
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v26[14];
  *(_BYTE *)(a4 + 120) = 1;
  v7 = nullsub_4(v26);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v10 = __ldaxr(v22);
    while (__stlxr(v10 - 1, v22));
LABEL_18:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_20:
  *(_QWORD *)&result = nullsub_4(&v24).n128_u64[0];
  return result;
}

void sub_239624F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239624F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239624F84(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 3, (uint64_t)(a1 + 11), 3, (uint64_t)a1 + 100, 4);
  sub_239523070(a2, &v17, (uint64_t)v16, v8, 24);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_2396250A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_2396250C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2396250E4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[16];
  std::__shared_weak_count *v21;
  uint64_t v22;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v18 = v4;
    v19 = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v19 = 0;
  }
  sub_2398D81F4((uint64_t)&v18, 24);
  *a2 = &off_250ADDC30;
  sub_239609B40((uint64_t)v20, (uint64_t)(a2 + 1));
  v11 = nullsub_4(&v22);
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  j_nullsub_4_89(v20);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_239625288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  nullsub_4(v11);
  sub_239422DD0((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2396252AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2396252C0(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  std::string v7;
  void *__dst[2];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  char v26;
  char v27;

  v5 = 1;
  switch(a2)
  {
    case 0:
    case 8:
      sub_239621138("Format Not Supported", &v7);
      sub_239A42F9C(__dst, (__int128 *)&v7);
      v16 = 1;
      sub_239914D5C((uint64_t)__dst, (uint64_t)&v17);
      *(_OWORD *)a3 = v17;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (!v27)
      {
        *(_BYTE *)(a3 + 136) = 0;
        goto LABEL_19;
      }
      *(_BYTE *)(a3 + 40) = 0;
      if (v20)
      {
        *(_OWORD *)(a3 + 16) = v18;
        *(_QWORD *)(a3 + 32) = v19;
        v19 = 0;
        v18 = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v26)
      {
        v6 = v23;
        *(_QWORD *)(a3 + 64) = v22;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v21;
        v21[0] = 0;
        v21[1] = 0;
        *(_QWORD *)(a3 + 72) = v6;
        *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 96) = v25;
        __p[1] = 0;
        v25 = 0;
        v22 = 0;
        __p[0] = 0;
        *(_BYTE *)(a3 + 104) = 1;
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 136) = 0;
        if (SHIBYTE(v25) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v22) & 0x80000000) == 0)
          {
LABEL_10:
            if (!v20)
              goto LABEL_19;
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v22) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(v21[0]);
        if (!v20)
          goto LABEL_19;
      }
      else
      {
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 136) = 0;
        if (!v20)
          goto LABEL_19;
      }
LABEL_17:
      if (SHIBYTE(v19) < 0)
        operator delete((void *)v18);
LABEL_19:
      if (v16)
      {
        if (v15)
        {
          if (v14 < 0)
            operator delete(v13);
          if (v12 < 0)
            operator delete(v11);
        }
        if (v10 && v9 < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      return;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v5 = a2;
      goto LABEL_3;
    default:
LABEL_3:
      sub_239625510(a1, v5, a3);
      return;
  }
}

void sub_2396254E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_239523188((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_239625510@<D0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13[2];
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t (**v31)();
  _OWORD v32[7];
  uint64_t v33;
  __int16 v34;

  v31 = &off_250ADDC30;
  sub_239580DB0(v32);
  sub_2396257B0((uint64_t)&v31, a1, a2, (uint64_t)&v20);
  if (v30)
  {
    *(_QWORD *)a3 = &off_250ADDC30;
    *(_OWORD *)(a3 + 8) = v32[0];
    v32[0] = 0uLL;
    *(_OWORD *)(a3 + 72) = v32[4];
    *(_OWORD *)(a3 + 88) = v32[5];
    *(_OWORD *)(a3 + 104) = v32[6];
    *(_QWORD *)(a3 + 120) = v33;
    *(_OWORD *)(a3 + 24) = v32[1];
    *(_OWORD *)(a3 + 40) = v32[2];
    *(_OWORD *)(a3 + 56) = v32[3];
    *(_WORD *)(a3 + 128) = v34;
    *(_BYTE *)(a3 + 136) = 1;
    goto LABEL_3;
  }
  v9 = v20;
  v7 = sub_23952329C(&v10, &v21);
  *(_OWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v19)
  {
    *(_BYTE *)(a3 + 40) = 0;
    if (v12)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (!v18)
    {
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 136) = 0;
      if (!v12)
        goto LABEL_19;
      goto LABEL_17;
    }
    v8 = v15;
    *(_QWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v13;
    v13[0] = 0;
    v13[1] = 0;
    *(_QWORD *)(a3 + 72) = v8;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 96) = v17;
    __p[1] = 0;
    v17 = 0;
    v14 = 0;
    __p[0] = 0;
    *(_BYTE *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 136) = 0;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_10:
        if (!v12)
          goto LABEL_19;
LABEL_17:
        if (v11 < 0)
          operator delete(v10);
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v13[0]);
    if (v12)
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)(a3 + 136) = 0;
  }
LABEL_19:
  if (!v30 && v29)
  {
    if (v28)
    {
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
    }
    if (v23 && v22 < 0)
      operator delete((void *)v21);
  }
LABEL_3:
  sub_239416DA0((uint64_t)v32);
  *(_QWORD *)&result = nullsub_4(&v31).n128_u64[0];
  return result;
}

void sub_239625770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  sub_239522F50((uint64_t)va);
  sub_239416DA0(v16);
  nullsub_4(v17 - 200);
  _Unwind_Resume(a1);
}

void sub_23962579C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_2396257B0(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *exception;
  std::string v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  void *v34;
  char v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v44[0] = &off_250AE0E70;
  v44[1] = a1;
  v45 = v44;
  sub_2397261E0(v44, 0x18u, a2, a3, (uint64_t)&v33);
  v6 = v45;
  if (v45 == v44)
  {
    v7 = 4;
    v6 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v43)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_239726DC4(a3, (uint64_t)"load", 4, &v11);
  if (v43)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v11, &v33, (uint64_t)&v12);
  v22 = v12;
  v8 = sub_23952329C(&v23, &v13);
  *(_OWORD *)a4 = v22;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v32)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_24;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v25)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v31)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v25)
      goto LABEL_24;
    goto LABEL_22;
  }
  v9 = v28;
  *(_QWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v26;
  v26[0] = 0;
  v26[1] = 0;
  *(_QWORD *)(a4 + 72) = v9;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v30;
  __p[1] = 0;
  v30 = 0;
  v27 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v25)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v26[0]);
  if (!v25)
    goto LABEL_24;
LABEL_22:
  if (v24 < 0)
    operator delete(v23);
LABEL_24:
  if (v21)
  {
    if (v20)
    {
      if (v19 < 0)
        operator delete(v18);
      if (v17 < 0)
        operator delete(v16);
    }
    if (v15 && v14 < 0)
      operator delete((void *)v13);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v43)
      return;
  }
  else if (v43)
  {
    return;
  }
  if (v42)
  {
    if (v41)
    {
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37);
    }
    if (v36)
    {
      if (v35 < 0)
        operator delete(v34);
    }
  }
}

void sub_239625AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 200);
  _Unwind_Resume(a1);
}

void sub_239625AF8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_239625B30(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *exception;
  std::string v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  void *v26;
  _BYTE v27[16];
  char v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  *(_QWORD *)&v25 = &off_250ADB210;
  sub_23960AB44(a1, (uint64_t)&v25 + 8);
  sub_239727F50(&v25, a2, a3, (uint64_t)&v36);
  v7 = nullsub_4(v27);
  v8 = (std::__shared_weak_count *)v26;
  if (!v26)
    goto LABEL_5;
  v9 = (unint64_t *)((char *)v26 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
    std::__shared_weak_count::__release_weak(v8);
    nullsub_4(&v25);
    if (v46)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v25);
    if (v46)
    {
LABEL_6:
      *(_BYTE *)(a4 + 120) = 1;
      return;
    }
  }
  sub_239726DC4(a3, (uint64_t)"save", 4, &v14);
  if (v46)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v14, &v36, (uint64_t)&v15);
  v25 = v15;
  v11 = sub_23952329C(&v26, &v16);
  *(_OWORD *)a4 = v25;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v35)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v28)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v11;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v34)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v28)
      goto LABEL_25;
    goto LABEL_23;
  }
  v12 = v31;
  *(_QWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  *(_QWORD *)(a4 + 72) = v12;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v33;
  __p[1] = 0;
  v33 = 0;
  v30 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v28)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v29[0]);
  if (!v28)
    goto LABEL_25;
LABEL_23:
  if ((v27[15] & 0x80000000) != 0)
    operator delete(v26);
LABEL_25:
  if (v24)
  {
    if (v23)
    {
      if (v22 < 0)
        operator delete(v21);
      if (v20 < 0)
        operator delete(v19);
    }
    if (v18 && v17 < 0)
      operator delete((void *)v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v46)
      return;
  }
  else if (v46)
  {
    return;
  }
  if (v45)
  {
    if (v44)
    {
      if (v43 < 0)
        operator delete(v42);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
    }
  }
}

void sub_239625E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 176);
  _Unwind_Resume(a1);
}

void sub_239625E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_239625EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

void sub_239625EC8()
{
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239625EDC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_250AE0EB8;
  result[1] = v3;
  return result;
}

uint64_t sub_239625F10(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_250AE0EB8;
  a2[1] = v2;
  return result;
}

double sub_239625F2C@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_239625F38((uint64_t *)(a1 + 8), a2, *a3, a4);
}

double sub_239625F38@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  unint64_t *v20;
  double result;
  uint64_t (**v22)();
  __int128 v23;
  _BYTE v24[32];
  __int128 v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[3];
  int v29;

  if (!a3)
    sub_239EC100C((uint64_t)a1, (uint64_t)a2);
  v6 = *a1;
  if (*(_DWORD *)(v6 + 64) == *a2 && a3 == 4 && *(_DWORD *)(v6 + 68) == a2[1])
  {
    v22 = &off_250ADB1D0;
    sub_239626178((_QWORD *)v6, (uint64_t)&v23);
    *(_QWORD *)a4 = &off_250ADB1D0;
    *(_OWORD *)(a4 + 8) = v23;
    v23 = 0uLL;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)v24;
    *(_OWORD *)(a4 + 38) = *(_OWORD *)&v24[14];
    *(_BYTE *)(a4 + 120) = 1;
    v7 = nullsub_4(v24);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (!*((_QWORD *)&v23 + 1))
      goto LABEL_20;
    v9 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    goto LABEL_18;
  }
  if (a3 != 4)
    sub_239EC1038(v6, (uint64_t)a2);
  v29 = 4;
  v28[0] = v6;
  v28[1] = &v29;
  v28[2] = a2;
  sub_2396262D8((uint64_t)v28, &v22);
  v11 = *a1;
  v12 = v23;
  v23 = 0uLL;
  v13 = *(std::__shared_weak_count **)(v11 + 16);
  *(_OWORD *)(v11 + 8) = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(_OWORD *)v24;
  v17 = *(_OWORD *)&v24[16];
  v18 = v25;
  *(_QWORD *)(v11 + 72) = v26;
  *(_OWORD *)(v11 + 56) = v18;
  *(_OWORD *)(v11 + 40) = v17;
  *(_OWORD *)(v11 + 24) = v16;
  *(_WORD *)(v11 + 80) = v27;
  sub_239416DA0((uint64_t)&v23);
  nullsub_4(&v22);
  v19 = (_QWORD *)*a1;
  v22 = &off_250ADB1D0;
  sub_239626178(v19, (uint64_t)&v23);
  *(_QWORD *)a4 = &off_250ADB1D0;
  *(_OWORD *)(a4 + 8) = v23;
  v23 = 0uLL;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v24;
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v24[14];
  *(_BYTE *)(a4 + 120) = 1;
  v7 = nullsub_4(v24);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v10 = __ldaxr(v20);
    while (__stlxr(v10 - 1, v20));
LABEL_18:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_20:
  *(_QWORD *)&result = nullsub_4(&v22).n128_u64[0];
  return result;
}

void sub_239626150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239626164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239626178(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE v16[12];
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1[1];
  v4 = (std::__shared_weak_count *)a1[2];
  v19 = v3;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v17 = v3;
    v18 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v17 = v3;
    v18 = 0;
  }
  v8 = a1[4];
  sub_2398EB464((uint64_t)v16, 2, (uint64_t)(a1 + 8), 2, (uint64_t)(a1 + 9), 4);
  sub_239523070(a2, &v17, (uint64_t)v16, v8, 4);
  v9 = nullsub_4(v16);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v9);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_239626298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_2396262BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2396262D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[16];
  std::__shared_weak_count *v21;
  uint64_t v22;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *(std::__shared_weak_count **)(*(_QWORD *)a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    v18 = v4;
    v19 = v3;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v19 = 0;
  }
  sub_2398D81F4((uint64_t)&v18, 4);
  *a2 = &off_250ADD920;
  sub_239541EE0((uint64_t)v20, (uint64_t)(a2 + 1));
  v11 = nullsub_4(&v22);
  v12 = v21;
  if (v21)
  {
    v13 = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  j_nullsub_4_89(v20);
  v15 = v19;
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_23962647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  nullsub_4(v11);
  sub_239422DD0((uint64_t)&a11);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2396264A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2396264B4(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  std::string v7;
  void *__dst[2];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  char v26;
  char v27;

  v5 = 1;
  switch(a2)
  {
    case 0:
    case 8:
      sub_239621138("Format Not Supported", &v7);
      sub_239A42F9C(__dst, (__int128 *)&v7);
      v16 = 1;
      sub_239914D5C((uint64_t)__dst, (uint64_t)&v17);
      *(_OWORD *)a3 = v17;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (!v27)
      {
        *(_BYTE *)(a3 + 120) = 0;
        goto LABEL_19;
      }
      *(_BYTE *)(a3 + 40) = 0;
      if (v20)
      {
        *(_OWORD *)(a3 + 16) = v18;
        *(_QWORD *)(a3 + 32) = v19;
        v19 = 0;
        v18 = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v26)
      {
        v6 = v23;
        *(_QWORD *)(a3 + 64) = v22;
        *(_OWORD *)(a3 + 48) = *(_OWORD *)v21;
        v21[0] = 0;
        v21[1] = 0;
        *(_QWORD *)(a3 + 72) = v6;
        *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 96) = v25;
        __p[1] = 0;
        v25 = 0;
        v22 = 0;
        __p[0] = 0;
        *(_BYTE *)(a3 + 104) = 1;
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (SHIBYTE(v25) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v22) & 0x80000000) == 0)
          {
LABEL_10:
            if (!v20)
              goto LABEL_19;
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v22) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(v21[0]);
        if (!v20)
          goto LABEL_19;
      }
      else
      {
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (!v20)
          goto LABEL_19;
      }
LABEL_17:
      if (SHIBYTE(v19) < 0)
        operator delete((void *)v18);
LABEL_19:
      if (v16)
      {
        if (v15)
        {
          if (v14 < 0)
            operator delete(v13);
          if (v12 < 0)
            operator delete(v11);
        }
        if (v10 && v9 < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      return;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      v5 = a2;
      goto LABEL_3;
    default:
LABEL_3:
      sub_239626704(a1, v5, a3);
      return;
  }
}

void sub_2396266D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_239523188((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double sub_239626704@<D0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  double result;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  char v11;
  char v12;
  void *v13[2];
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t (**v31)();
  _OWORD v32[4];
  uint64_t v33;
  __int16 v34;

  v31 = &off_250ADD920;
  sub_23954695C(v32);
  sub_23962698C((uint64_t)&v31, a1, a2, (uint64_t)&v20);
  if (v30)
  {
    *(_QWORD *)a3 = &off_250ADD920;
    *(_OWORD *)(a3 + 8) = v32[0];
    v32[0] = 0uLL;
    *(_OWORD *)(a3 + 24) = v32[1];
    *(_OWORD *)(a3 + 40) = v32[2];
    *(_OWORD *)(a3 + 56) = v32[3];
    *(_QWORD *)(a3 + 72) = v33;
    *(_WORD *)(a3 + 80) = v34;
    *(_BYTE *)(a3 + 120) = 1;
    goto LABEL_3;
  }
  v9 = v20;
  v7 = sub_23952329C(&v10, &v21);
  *(_OWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v19)
  {
    *(_BYTE *)(a3 + 40) = 0;
    if (v12)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (!v18)
    {
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (!v12)
        goto LABEL_19;
      goto LABEL_17;
    }
    v8 = v15;
    *(_QWORD *)(a3 + 64) = v14;
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v13;
    v13[0] = 0;
    v13[1] = 0;
    *(_QWORD *)(a3 + 72) = v8;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 96) = v17;
    __p[1] = 0;
    v17 = 0;
    v14 = 0;
    __p[0] = 0;
    *(_BYTE *)(a3 + 104) = 1;
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v14) & 0x80000000) == 0)
      {
LABEL_10:
        if (!v12)
          goto LABEL_19;
LABEL_17:
        if (v11 < 0)
          operator delete(v10);
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v13[0]);
    if (v12)
      goto LABEL_17;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
LABEL_19:
  if (!v30 && v29)
  {
    if (v28)
    {
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
    }
    if (v23 && v22 < 0)
      operator delete((void *)v21);
  }
LABEL_3:
  sub_239416DA0((uint64_t)v32);
  *(_QWORD *)&result = nullsub_4(&v31).n128_u64[0];
  return result;
}

void sub_23962694C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  sub_239522F50((uint64_t)va);
  sub_239416DA0(v16);
  nullsub_4(v17 - 152);
  _Unwind_Resume(a1);
}

void sub_239626978(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_23962698C(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *exception;
  std::string v11;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  char v20;
  char v21;
  __int128 v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  char v31;
  char v32;
  __int128 v33;
  void *v34;
  char v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v44[0] = &off_250AE0EB8;
  v44[1] = a1;
  v45 = v44;
  sub_2397261E0(v44, 4u, a2, a3, (uint64_t)&v33);
  v6 = v45;
  if (v45 == v44)
  {
    v7 = 4;
    v6 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v43)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_239726DC4(a3, (uint64_t)"load", 4, &v11);
  if (v43)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v11, &v33, (uint64_t)&v12);
  v22 = v12;
  v8 = sub_23952329C(&v23, &v13);
  *(_OWORD *)a4 = v22;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v32)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_24;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v25)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v31)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v25)
      goto LABEL_24;
    goto LABEL_22;
  }
  v9 = v28;
  *(_QWORD *)(a4 + 64) = v27;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v26;
  v26[0] = 0;
  v26[1] = 0;
  *(_QWORD *)(a4 + 72) = v9;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v30;
  __p[1] = 0;
  v30 = 0;
  v27 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v30) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_15:
      if (!v25)
        goto LABEL_24;
      goto LABEL_22;
    }
  }
  else if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v26[0]);
  if (!v25)
    goto LABEL_24;
LABEL_22:
  if (v24 < 0)
    operator delete(v23);
LABEL_24:
  if (v21)
  {
    if (v20)
    {
      if (v19 < 0)
        operator delete(v18);
      if (v17 < 0)
        operator delete(v16);
    }
    if (v15 && v14 < 0)
      operator delete((void *)v13);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v43)
      return;
  }
  else if (v43)
  {
    return;
  }
  if (v42)
  {
    if (v41)
    {
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37);
    }
    if (v36)
    {
      if (v35 < 0)
        operator delete(v34);
    }
  }
}

void sub_239626C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 200);
  _Unwind_Resume(a1);
}

void sub_239626CD4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_239626D0C(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *exception;
  std::string v14;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  void *v26;
  _BYTE v27[16];
  char v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  uint64_t v33;
  char v34;
  char v35;
  __int128 v36;
  void *v37;
  char v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  char v44;
  char v45;
  char v46;

  *(_QWORD *)&v25 = &off_250ADB210;
  sub_23960ACFC(a1, (uint64_t)&v25 + 8);
  sub_239727F50(&v25, a2, a3, (uint64_t)&v36);
  v7 = nullsub_4(v27);
  v8 = (std::__shared_weak_count *)v26;
  if (!v26)
    goto LABEL_5;
  v9 = (unint64_t *)((char *)v26 + 8);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
    std::__shared_weak_count::__release_weak(v8);
    nullsub_4(&v25);
    if (v46)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    nullsub_4(&v25);
    if (v46)
    {
LABEL_6:
      *(_BYTE *)(a4 + 120) = 1;
      return;
    }
  }
  sub_239726DC4(a3, (uint64_t)"save", 4, &v14);
  if (v46)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_250ADD7A8;
    __cxa_throw(exception, (struct type_info *)&unk_250ADD780, (void (*)(void *))std::exception::~exception);
  }
  sub_239A43574((__int128 *)&v14, &v36, (uint64_t)&v15);
  v25 = v15;
  v11 = sub_23952329C(&v26, &v16);
  *(_OWORD *)a4 = v25;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v35)
  {
    *(_BYTE *)(a4 + 120) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)(a4 + 40) = 0;
  if (v28)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v11;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (!v34)
  {
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (!v28)
      goto LABEL_25;
    goto LABEL_23;
  }
  v12 = v31;
  *(_QWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)v29;
  v29[0] = 0;
  v29[1] = 0;
  *(_QWORD *)(a4 + 72) = v12;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 96) = v33;
  __p[1] = 0;
  v33 = 0;
  v30 = 0;
  __p[0] = 0;
  *(_BYTE *)(a4 + 104) = 1;
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v28)
        goto LABEL_25;
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v29[0]);
  if (!v28)
    goto LABEL_25;
LABEL_23:
  if ((v27[15] & 0x80000000) != 0)
    operator delete(v26);
LABEL_25:
  if (v24)
  {
    if (v23)
    {
      if (v22 < 0)
        operator delete(v21);
      if (v20 < 0)
        operator delete(v19);
    }
    if (v18 && v17 < 0)
      operator delete((void *)v16);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v46)
      return;
  }
  else if (v46)
  {
    return;
  }
  if (v45)
  {
    if (v44)
    {
      if (v43 < 0)
        operator delete(v42);
      if (v41 < 0)
        operator delete(v40);
    }
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
    }
  }
}

void sub_239627030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_239522FE4((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_239522F50(v15 - 176);
  _Unwind_Resume(a1);
}

void sub_239627078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_239416FF8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_23962708C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_4(&a27);
  _Unwind_Resume(a1);
}

__int128 *sub_2396270A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930E10);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930E10))
    return &xmmword_256930DF8;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16f]", &xmmword_256930DF8);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930DF8, &dword_23940C000);
  __cxa_guard_release(&qword_256930E10);
  return &xmmword_256930DF8;
}

void sub_239627130(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930E10);
  _Unwind_Resume(a1);
}

void sub_239627148(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  sub_239627248(a1, &v14);
  v13 = v14;
  v14 = 0uLL;
  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 0xFF00000000) != 0)
    v5 = (v4 >> 1) | 0x100000000;
  else
    v5 = 0;
  v6 = *(_WORD *)(a1 + 60);
  sub_239828204(a2, &v13, v5);
  *(_WORD *)(a2 + 120) = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_23962722C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_239627248(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 31)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239627488(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_239627428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239627488(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239627500();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_239627500()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930EB0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930EB0))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_2396270A0();
    sub_239627704((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239627704((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930E98, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930E98, &dword_23940C000);
          __cxa_guard_release(&qword_256930EB0);
          return &stru_256930E98;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930E98;
}

void sub_239627650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930EB0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930EB0);
  _Unwind_Resume(a1);
}

void sub_239627704(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_239627798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_2396277D4()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930D30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930D30))
    return &xmmword_256930D18;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16f]", &xmmword_256930D18);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930D18, &dword_23940C000);
  __cxa_guard_release(&qword_256930D30);
  return &xmmword_256930D18;
}

void sub_239627864(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930D30);
  _Unwind_Resume(a1);
}

void sub_23962787C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  sub_23962797C(a1, &v14);
  v13 = v14;
  v14 = 0uLL;
  v4 = *(_QWORD *)(a1 + 24);
  if ((v4 & 0xFF00000000) != 0)
    v5 = (v4 >> 1) | 0x100000000;
  else
    v5 = 0;
  v6 = *(_WORD *)(a1 + 60);
  sub_23982793C(a2, &v13, v5);
  *(_WORD *)(a2 + 120) = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_239627960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_23962797C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 23)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239627BBC(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_239627B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239627BBC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239627C34();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_239627C34()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930ED0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930ED0))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_2396277D4();
    sub_239627E38((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239627E38((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930EB8, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930EB8, &dword_23940C000);
          __cxa_guard_release(&qword_256930ED0);
          return &stru_256930EB8;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930EB8;
}

void sub_239627D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930ED0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930ED0);
  _Unwind_Resume(a1);
}

void sub_239627E38(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_239627ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_239627F08(unsigned int *a1)
{
  _QWORD *v2;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v6;
  std::string __p;

  sub_239A43D24(&v6);
  v2 = (_QWORD *)sub_239A43E64(&v6);
  sub_239627FD8(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  sub_239458500(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_239A43E70();
  return sub_239A43DB8(&v6);
}

void sub_239627FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_239A43DB8(&a9);
    _Unwind_Resume(a1);
  }
  sub_239A43DB8(&a9);
  _Unwind_Resume(a1);
}

void sub_239627FD8(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2396280BC((uint64_t)__p, (uint64_t)&v8, a1);
  v12 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v8, (uint64_t)v9, (uint64_t)__p, a2, v3, v4);
  if (v12 < 0)
    operator delete(__p[0]);
  v5 = (void **)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_239628084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

char *sub_2396280BC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v5;
  char *v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  int v10;
  char *v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  int v15;
  char *result;
  std::string v17;

  v5 = *(_QWORD *)(a2 + 8);
  if (v5 >= *(_QWORD *)(a2 + 16))
  {
    v6 = sub_239583C68((void **)a2, "{");
  }
  else
  {
    *(_BYTE *)(v5 + 23) = 1;
    *(_WORD *)v5 = 123;
    v6 = (char *)(v5 + 24);
    *(_QWORD *)(a2 + 8) = v5 + 24;
  }
  *(_QWORD *)(a2 + 8) = v6;
  std::to_string(&v17, *a3);
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 < *(_QWORD *)(a2 + 16))
  {
    v8 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 24);
    *(_QWORD *)(a2 + 8) = v7 + 24;
    if (v7 + 24 >= *(_QWORD *)(a2 + 16))
      goto LABEL_11;
LABEL_9:
    v9[23] = 1;
    *(_WORD *)v9 = 44;
    v11 = v9 + 24;
    *(_QWORD *)(a2 + 8) = v11;
    goto LABEL_12;
  }
  v9 = sub_23941ACDC((void **)a2, (uint64_t)&v17);
  v10 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a2 + 8) = v9;
  if (v10 < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    v9 = *(char **)(a2 + 8);
    if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
      goto LABEL_9;
  }
  else if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
  {
    goto LABEL_9;
  }
LABEL_11:
  v11 = sub_239583C68((void **)a2, ",");
LABEL_12:
  *(_QWORD *)(a2 + 8) = v11;
  std::to_string(&v17, a3[1]);
  v12 = *(_QWORD *)(a2 + 8);
  if (v12 < *(_QWORD *)(a2 + 16))
  {
    v13 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
    *(_QWORD *)(v12 + 16) = *((_QWORD *)&v17.__r_.__value_.__l + 2);
    *(_OWORD *)v12 = v13;
    v14 = (char *)(v12 + 24);
    *(_QWORD *)(a2 + 8) = v12 + 24;
    if (v12 + 24 >= *(_QWORD *)(a2 + 16))
      goto LABEL_19;
LABEL_17:
    v14[23] = 1;
    *(_WORD *)v14 = 125;
    result = v14 + 24;
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v14 = sub_23941ACDC((void **)a2, (uint64_t)&v17);
  v15 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a2 + 8) = v14;
  if (v15 < 0)
  {
    operator delete(v17.__r_.__value_.__l.__data_);
    v14 = *(char **)(a2 + 8);
    if ((unint64_t)v14 < *(_QWORD *)(a2 + 16))
      goto LABEL_17;
  }
  else if ((unint64_t)v14 < *(_QWORD *)(a2 + 16))
  {
    goto LABEL_17;
  }
LABEL_19:
  result = sub_239583C68((void **)a2, "}");
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

void sub_239628278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_239628298(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_2396284B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396284C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 387, a3, a4);
}

void sub_2396284CC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 400, a3, a4);
}

void sub_2396284D4(uint64_t a1@<X0>, __int128 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  size_t v10;
  size_t v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  id v15;
  __int128 __dst;
  unint64_t v17;

  sub_239628658(a2, a3);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  sub_23962873C(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "stringForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    v9 = (const char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String");
    v10 = strlen(v9);
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v11 = v10;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_dst = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&__dst + 1) = v11;
      v17 = v14 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v17) = v10;
      p_dst = &__dst;
      if (!v10)
        goto LABEL_11;
    }
    memmove(p_dst, v9, v11);
LABEL_11:
    *((_BYTE *)p_dst + v11) = 0;
    *(_OWORD *)a4 = __dst;
    *(_QWORD *)(a4 + 16) = v17;
    *(_BYTE *)(a4 + 24) = 1;
    goto LABEL_12;
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_12:

}

void sub_239628610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_239628628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_23962863C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

id sub_239628658(__int128 *a1, char a2)
{
  void *v2;
  __int128 v3;
  void *v4;
  void **v5;
  void *v6;
  void *__p[2];
  uint64_t v9;

  if (a2)
  {
    v2 = (void *)MEMORY[0x24BDD17C8];
    if (*((char *)a1 + 23) < 0)
    {
      sub_23941A7F8(__p, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v3 = *a1;
      v9 = *((_QWORD *)a1 + 2);
      *(_OWORD *)__p = v3;
    }
    if (v9 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    objc_msgSend(v2, "stringWithUTF8String:", v5, __p[0], __p[1], v9);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = 0;
  }
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", v4);

  return v6;
}

void sub_239628710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id sub_23962873C(uint64_t a1)
{
  void *v1;
  void **v2;
  void *v3;
  void *v4;
  void *__p[2];
  uint64_t v7;

  v1 = (void *)MEMORY[0x24BDD17C8];
  if (*(char *)(a1 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v7 = *(_QWORD *)(a1 + 16);
  }
  if (v7 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  objc_msgSend(v1, "stringWithUTF8String:", v2, __p[0], __p[1], v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if ((SHIBYTE(v7) & 0x80000000) == 0)
    return v3;
  operator delete(__p[0]);
  return v4;
}

void sub_2396287D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396287F4(uint64_t a1, __int128 *a2, char a3)
{
  void *v3;
  int v4;

  sub_239628890(a1, a2, a3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = objc_msgSend(v3, "BOOLValue");

    return v4 | 0x100u;
  }
  else
  {

    return 0;
  }
}

void sub_239628870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_239628880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_239628890(uint64_t a1, __int128 *a2, char a3)
{
  void *v4;
  void *v5;
  void *v6;

  sub_239628658(a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  sub_23962873C(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_2396288F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_23962890C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_23962891C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_239628C4C(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0F00;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2396289F8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239628A10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_239628A24@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  std::__shared_weak_count *v4;
  CFBundleRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  CFURLRef v9;

  v5 = *(CFBundleRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v5)
    sub_239EC1064();
  v9 = CFBundleCopyExecutableURL(*(CFBundleRef *)a1);
  return sub_23962B308(a2, v9);
}

void sub_239628AB0(_QWORD *a1@<X8>)
{
  CFBundleRef MainBundle;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  MainBundle = CFBundleGetMainBundle();
  sub_239628C4C(&v9, MainBundle);
  v3 = v10;
  *a1 = v9;
  a1[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_239628B4C(uint64_t a1@<X8>)
{
  std::__shared_weak_count_vtbl *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFURLRef bundleURL;
  std::__shared_weak_count *v7;
  void *__p[2];
  char v9;
  char v10;

  sub_23962ECE8((uint64_t)__p);
  if (v10)
  {
    sub_23962B460(&bundleURL, __p, 1);
    v2 = (std::__shared_weak_count_vtbl *)CFBundleCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], bundleURL);
    sub_23962891C((std::__shared_weak_count_vtbl **)a1, v2, 0);
    v3 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (v10)
    {
      if (v9 < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_239628C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239628C4C(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE0F00;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_239628CAC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239628CC4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239628CDC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239628D00(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_239628D20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CFBundleEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

BOOL sub_239628DA8(CFTypeRef *a1, uint64_t a2)
{
  return CFGetTypeID(*a1) == a2;
}

_QWORD *sub_239628DD4(_QWORD *a1, CFTypeRef cf)
{
  CFStringRef v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  unint64_t v9;
  std::string *v11;
  std::string::size_type v12;
  std::string __p;
  char v14;
  CFStringRef v15;
  std::__shared_weak_count *v16;
  CFTypeRef v17;

  v17 = cf;
  if (cf)
  {
    v3 = CFCopyDescription(cf);
    v15 = v3;
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0F50;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    v16 = v4;
    sub_23962A000((uint64_t)v3, &__p);
    if (!v14)
    {
      sub_239A444D4((uint64_t)"unknown file", 37, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v8 = sub_239458500(a1, (uint64_t)p_p, size);
    if (v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return v8;
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    return v8;
  }
  else
  {
    sub_239628FFC(&v17, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &__p;
    else
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v12 = __p.__r_.__value_.__l.__size_;
    v8 = sub_239458500(a1, (uint64_t)v11, v12);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v8;
    operator delete(__p.__r_.__value_.__l.__data_);
    return v8;
  }
}

void sub_239628F70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  __break(1u);
}

void sub_239628FBC()
{
  __cxa_end_catch();
  JUMPOUT(0x239628FC4);
}

void sub_239628FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  sub_239416DA0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_239628FFC(_QWORD *a1@<X0>, std::string *a2@<X8>)
{
  int64x2_t v3;
  int8x16_t v4;
  void **v5;
  void **v6;
  void *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void *__p[2];
  char v12;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_2396290E0((uint64_t)__p, (uint64_t)&v8, a1);
  v12 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v8, (uint64_t)v9, (uint64_t)__p, a2, v3, v4);
  if (v12 < 0)
    operator delete(__p[0]);
  v5 = (void **)v8;
  if (v8)
  {
    v6 = v9;
    v7 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v6 - 1) < 0)
          operator delete(*(v6 - 3));
        v6 -= 3;
      }
      while (v6 != v5);
      v7 = v8;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void sub_2396290A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_23941A260((void **)&a9);
    _Unwind_Resume(a1);
  }
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_2396290E0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  __int128 v5;
  char *v6;
  char *v7;
  int v8;
  void *__p[2];
  uint64_t v10;
  uint64_t v11;

  if (*a3)
  {
    sub_239A43D24(&v11);
    sub_239A43E64(&v11);
    std::ostream::operator<<();
    sub_239A43E70();
    sub_239A43DB8(&v11);
    v4 = *(_QWORD *)(a2 + 8);
    if (v4 >= *(_QWORD *)(a2 + 16))
    {
      v7 = sub_23941ACDC((void **)a2, (uint64_t)__p);
      v8 = SHIBYTE(v10);
      *(_QWORD *)(a2 + 8) = v7;
      if (v8 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v5 = *(_OWORD *)__p;
      *(_QWORD *)(v4 + 16) = v10;
      *(_OWORD *)v4 = v5;
      *(_QWORD *)(a2 + 8) = v4 + 24;
    }
  }
  else
  {
    v6 = *(char **)(a2 + 8);
    if ((unint64_t)v6 >= *(_QWORD *)(a2 + 16))
    {
      *(_QWORD *)(a2 + 8) = sub_239628298((void **)a2, "nullptr");
    }
    else
    {
      v6[23] = 7;
      strcpy(v6, "nullptr");
      *(_QWORD *)(a2 + 8) = v6 + 24;
    }
  }
}

void sub_2396291F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23962922C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239629250(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_239629270(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_2396292E0(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_2396294F0(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FA0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_2396293BC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2396293D4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2396293EC(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  char v9;
  std::string::size_type v10;
  uint64_t v11;
  std::string v12;
  _BYTE v13[15];
  unsigned __int8 v14[17];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v5)
    sub_239EC1094();
  sub_23962A148(*a1, (uint64_t)v14);
  if (v14[16])
  {
    sub_239912A44(v14, &v12);
    *(_QWORD *)v13 = v12.__r_.__value_.__l.__size_;
    v10 = v12.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v13[7] = *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 7);
    v9 = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)v13;
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)&v13[7];
  *(_BYTE *)(a2 + 23) = v9;
}

_QWORD *sub_2396294F0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE0FA0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_239629550(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239629568(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239629580(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2396295A4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_2396295C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK8__CFUUIDEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_239629638(int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239629710(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239629728(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_23962973C(const __CFNumber *a1)
{
  CFTypeID TypeID;
  uint64_t v3;
  CFNumberRef number;

  number = a1;
  if (!a1)
    return 0;
  TypeID = j__CFNumberGetTypeID();
  if (!sub_239628DA8((CFTypeRef *)&number, TypeID))
    return 0;
  v3 = 0;
  CFNumberGetValue(number, kCFNumberNSIntegerType, &v3);
  return v3 | 0x100000000 | v3 & 0xFFFFFF00;
}

void sub_2396297C0(unsigned __int8 *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239629898(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2396298B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2396298C8(unsigned int *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2396299A0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_2396299B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2396299D0(uint64_t *a1@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t valuePtr;

  valuePtr = *a1;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberNSIntegerType, &valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239629AA8(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239629AC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_239629AD4(const __CFNumber *a1)
{
  CFTypeID TypeID;
  uint64_t v3;
  CFNumberRef number;

  number = a1;
  if (!a1)
    return 0;
  TypeID = j__CFNumberGetTypeID();
  if (!sub_239628DA8((CFTypeRef *)&number, TypeID))
    return 0;
  v3 = 0;
  CFNumberGetValue(number, kCFNumberNSIntegerType, &v3);
  return v3;
}

void sub_239629B50(void *valuePtr@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberFloatType, valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239629C10(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239629C28(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239629C40(void *valuePtr@<X0>, CFNumberRef *a2@<X8>)
{
  CFNumberRef v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], kCFNumberDoubleType, valuePtr);
  v4 = (std::__shared_weak_count *)operator new();
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *a2 = v3;
  a2[1] = (CFNumberRef)v4;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_239629D00(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239629D18(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

const __CFNumber *sub_239629D2C(const __CFNumber *result)
{
  CFTypeID TypeID;
  uint64_t v2;
  CFNumberRef number;

  number = result;
  if (result)
  {
    TypeID = j__CFNumberGetTypeID();
    if (sub_239628DA8((CFTypeRef *)&number, TypeID))
    {
      v2 = 0;
      CFNumberGetValue(number, kCFNumberDoubleType, &v2);
      return (const __CFNumber *)v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_239629DA0(_BYTE *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count_vtbl **v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD270];
  if (!*a1)
    v3 = (std::__shared_weak_count_vtbl **)MEMORY[0x24BDBD268];
  v4 = *v3;
  v5 = (std::__shared_weak_count *)operator new();
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1040;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  *a2 = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_239629E64(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239629E7C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_239629E90(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  CFBooleanRef BOOLean;

  BOOLean = a1;
  if (a1 && (TypeID = j__CFBooleanGetTypeID(), sub_239628DA8((CFTypeRef *)&BOOLean, TypeID)))
    return (CFBooleanGetValue(BOOLean) != 0) | 0x100u;
  else
    return 0;
}

void sub_239629EF4(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  CFStringRef v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;

  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, v5, 0x8000100u, 0);
  v7 = (std::__shared_weak_count *)operator new();
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0F50;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  *a2 = v6;
  a2[1] = (CFStringRef)v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_239629FD4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_239629FEC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_23962A000@<X0>(uint64_t result@<X0>, std::string *a2@<X8>)
{
  CFTypeID TypeID;
  const __CFString *v4;
  CFIndex v5;
  std::string *v6;
  std::string v7;
  CFIndex maxBufLen;
  CFStringRef theString;
  CFRange v10;
  CFRange v11;

  theString = (CFStringRef)result;
  if (!result)
    goto LABEL_9;
  TypeID = j__CFStringGetTypeID();
  result = sub_239628DA8((CFTypeRef *)&theString, TypeID);
  if ((result & 1) == 0)
    goto LABEL_9;
  v4 = theString;
  result = CFStringGetLength(theString);
  if (result)
  {
    v5 = result;
    maxBufLen = 0;
    v10.location = 0;
    v10.length = result;
    result = CFStringGetBytes(v4, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    if (result > 0)
    {
      memset(&v7, 0, sizeof(v7));
      std::string::resize(&v7, maxBufLen, 0);
      if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v7;
      else
        v6 = (std::string *)v7.__r_.__value_.__r.__words[0];
      v11.location = 0;
      v11.length = v5;
      result = CFStringGetBytes(v4, v11, 0x8000100u, 0, 0, (UInt8 *)v6, maxBufLen, 0);
      *a2 = v7;
      goto LABEL_11;
    }
LABEL_9:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_11:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_23962A12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_23962A148@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  CFTypeID v3;
  uint64_t v4;
  CFUUIDBytes v5;
  CFUUIDRef uuid;

  uuid = (CFUUIDRef)result;
  if (result && (v3 = j__CFUUIDGetTypeID(), result = sub_239628DA8((CFTypeRef *)&uuid, v3), (result & 1) != 0))
  {
    v5 = CFUUIDGetUUIDBytes(uuid);
    result = sub_23962D0A0((__n128 *)&v5);
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_23962A1C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23962A1E8(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_23962A208(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_23962A27C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23962A2A0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_23962A2C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK11__CFBooleanEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_23962A330(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_239620EFC(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0DA8;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962A40C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962A424(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962A43C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v3 = *(const void **)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_239620EFC(&v16, v3);
  v7 = v17;
  *a2 = v16;
  a2[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = v17;
    if (v17)
    {
      v11 = (unint64_t *)&v17->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_23962A528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFIndex sub_23962A53C(CFDataRef *a1)
{
  return CFDataGetLength(*a1);
}

const UInt8 *sub_23962A554(CFDataRef *a1)
{
  return CFDataGetBytePtr(*a1);
}

uint64_t sub_23962A55C(CFDataRef *a1)
{
  uint64_t result;
  _QWORD *exception;

  LODWORD(result) = CFDataGetLength(*a1);
  if ((result & 0x80000000) != 0)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &unk_250AF2150;
    __cxa_throw(exception, (struct type_info *)&unk_250AF2168, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

void sub_23962A5A8(const UInt8 *a1@<X0>, CFIndex a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFAllocator *Default;
  CFDataRef v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  CFDataRef v12;
  std::__shared_weak_count *v13;

  Default = CFAllocatorGetDefault();
  v7 = CFDataCreateWithBytesNoCopy(Default, a1, a2, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v12 = v7;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0DA8;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v13 = v8;
  sub_23962A43C((uint64_t)&v12, a3);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_23962A684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23962A698(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962A6B0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_23962A6C4(std::__shared_weak_count_vtbl **a1, uint64_t a2, unsigned __int8 a3)
{
  const __CFAllocator *v4;
  CFNumberType v5;
  std::__shared_weak_count_vtbl *v6;
  double valuePtr;

  switch((int)a2)
  {
    case 1:
      LOBYTE(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt8Type;
      break;
    case 2:
      LOWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt16Type;
      break;
    case 3:
      LODWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt32Type;
      break;
    case 4:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt64Type;
      break;
    case 5:
      *(float *)&valuePtr = (float)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloat32Type;
      break;
    case 6:
      valuePtr = (double)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloat64Type;
      break;
    case 7:
      LOBYTE(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberCharType;
      break;
    case 8:
      LOWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberShortType;
      break;
    case 9:
      LODWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberIntType;
      break;
    case 10:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberLongType;
      break;
    case 11:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberLongLongType;
      break;
    case 12:
      *(float *)&valuePtr = (float)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloatType;
      break;
    case 13:
      valuePtr = (double)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberDoubleType;
      break;
    case 14:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberCFIndexType;
      break;
    case 15:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberNSIntegerType;
      break;
    default:
      sub_239EC10C4((uint64_t)a1, a2);
  }
  v6 = (std::__shared_weak_count_vtbl *)CFNumberCreate(v4, v5, &valuePtr);
  return sub_23962AD68(a1, v6, 0);
}

std::__shared_weak_count_vtbl **sub_23962A908(std::__shared_weak_count_vtbl **a1, uint64_t a2, unsigned __int16 a3)
{
  const __CFAllocator *v4;
  CFNumberType v5;
  std::__shared_weak_count_vtbl *v6;
  double valuePtr;

  switch((int)a2)
  {
    case 1:
      LOBYTE(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt8Type;
      break;
    case 2:
      LOWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt16Type;
      break;
    case 3:
      LODWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt32Type;
      break;
    case 4:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt64Type;
      break;
    case 5:
      *(float *)&valuePtr = (float)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloat32Type;
      break;
    case 6:
      valuePtr = (double)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloat64Type;
      break;
    case 7:
      LOBYTE(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberCharType;
      break;
    case 8:
      LOWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberShortType;
      break;
    case 9:
      LODWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberIntType;
      break;
    case 10:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberLongType;
      break;
    case 11:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberLongLongType;
      break;
    case 12:
      *(float *)&valuePtr = (float)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloatType;
      break;
    case 13:
      valuePtr = (double)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberDoubleType;
      break;
    case 14:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberCFIndexType;
      break;
    case 15:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberNSIntegerType;
      break;
    default:
      sub_239EC10C4((uint64_t)a1, a2);
  }
  v6 = (std::__shared_weak_count_vtbl *)CFNumberCreate(v4, v5, &valuePtr);
  return sub_23962AD68(a1, v6, 0);
}

std::__shared_weak_count_vtbl **sub_23962AB44(std::__shared_weak_count_vtbl **a1, uint64_t a2, unsigned int a3)
{
  const __CFAllocator *v4;
  CFNumberType v5;
  std::__shared_weak_count_vtbl *v6;
  double valuePtr;

  switch((int)a2)
  {
    case 1:
      LOBYTE(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt8Type;
      break;
    case 2:
      LOWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt16Type;
      break;
    case 3:
      LODWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt32Type;
      break;
    case 4:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberSInt64Type;
      break;
    case 5:
      *(float *)&valuePtr = (float)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloat32Type;
      break;
    case 6:
      valuePtr = (double)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloat64Type;
      break;
    case 7:
      LOBYTE(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberCharType;
      break;
    case 8:
      LOWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberShortType;
      break;
    case 9:
      LODWORD(valuePtr) = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberIntType;
      break;
    case 10:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberLongType;
      break;
    case 11:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberLongLongType;
      break;
    case 12:
      *(float *)&valuePtr = (float)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberFloatType;
      break;
    case 13:
      valuePtr = (double)a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberDoubleType;
      break;
    case 14:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberCFIndexType;
      break;
    case 15:
      *(_QWORD *)&valuePtr = a3;
      v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
      v5 = kCFNumberNSIntegerType;
      break;
    default:
      sub_239EC10C4((uint64_t)a1, a2);
  }
  v6 = (std::__shared_weak_count_vtbl *)CFNumberCreate(v4, v5, &valuePtr);
  return sub_23962AD68(a1, v6, 0);
}

std::__shared_weak_count_vtbl **sub_23962AD68(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23962B16C(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0FF0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962AE44(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962AE5C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962AE70(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;

  v2 = (char *)sub_23962AEB0 + 4 * byte_239EC7B80[sub_23991340C(a2)];
  __asm { BR              X10 }
}

void sub_23962AEB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, __int128 valuePtr, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _OWORD *v19;
  unsigned __int8 *v20;
  _BOOL4 v21;
  unsigned __int8 *v22;
  uint64_t v23;
  char v24;
  void *v25;
  void *v26;
  __int128 v27;

  sub_239913260((uint64_t)&v24, 5, 127);
  v21 = sub_2399149E0(v20, &v24);
  v22 = (unsigned __int8 *)sub_23991332C((uint64_t)v20);
  if (v21)
    v23 = 2;
  else
    v23 = 1;
  sub_23962A6C4((std::__shared_weak_count_vtbl **)&v27, v23, *v22);
  *v19 = v27;
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_23962AFD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, int a13)
{
  unsigned __int8 *v13;
  _BOOL4 v14;

  sub_23991321C((uint64_t)&a9, 8, 0x7FFFFFFFFFFFFFFFLL);
  v14 = sub_2399149E0(v13, &a9);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  if (!v14)
  {
    sub_2399137D4((uint64_t)v13);
    JUMPOUT(0x23962B0BCLL);
  }
  JUMPOUT(0x23962B0C0);
}

void sub_23962B10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_23962B134(_OWORD *a1, unsigned __int8 *a2)
{
  __int128 v4;

  sub_23962AE70((uint64_t)&v4, a2);
  *a1 = v4;
  return a1;
}

_QWORD *sub_23962B16C(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE0FF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_23962B1CC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962B1E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962B1F8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 106, a3, a4);
}

std::__shared_weak_count_vtbl **sub_23962B200(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23962B960(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1090;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962B2DC(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962B2F4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *sub_23962B30C(_OWORD *a1, uint64_t a2, Boolean a3)
{
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  uint64_t v11;
  CFStringRef filePath;
  std::__shared_weak_count *v13;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  sub_239629EF4((uint64_t)__p, &filePath);
  v5 = (std::__shared_weak_count_vtbl *)CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x24BDBD240], filePath, kCFURLPOSIXPathStyle, a3);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if ((SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  if (SHIBYTE(v11) < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  sub_23962B858((std::__shared_weak_count_vtbl **)__p, v5, 0);
  *a1 = *(_OWORD *)__p;
  return a1;
}

void sub_23962B404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  unint64_t *p_shared_owners;
  unint64_t v19;

  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **sub_23962B464(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23962BAA4(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0F50;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962B540(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962B558(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962B56C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::string v15;

  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v5)
    sub_239EC10F0();
  v9 = (std::__shared_weak_count_vtbl *)CFURLCopyScheme(*(CFURLRef *)a1);
  sub_23962B464(&v13, v9, 0);
  sub_23962A000((uint64_t)v13, &v15);
  *a2 = v15;
  memset(&v15, 0, sizeof(v15));
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_23962B674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23962B688(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFURLRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  int v9;
  std::__shared_weak_count_vtbl *v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(CFURLRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v5)
    sub_239EC1120();
  sub_23962B56C(a1, &v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v19.__r_.__value_.__l.__size_ == 4)
    {
      v9 = *(_DWORD *)v19.__r_.__value_.__l.__data_;
      operator delete(v19.__r_.__value_.__l.__data_);
      if (v9 == 1701603686)
        goto LABEL_14;
    }
    else
    {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
LABEL_20:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) != 4 || LODWORD(v19.__r_.__value_.__l.__data_) != 1701603686)
    goto LABEL_20;
LABEL_14:
  v10 = (std::__shared_weak_count_vtbl *)CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
  sub_23962B464(&v17, v10, 0);
  sub_23962A000((uint64_t)v17, &v19);
  v20[0] = v19.__r_.__value_.__l.__size_;
  v11 = v19.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
  v12 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  memset(&v19, 0, sizeof(v19));
  v13 = v20[0];
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v20 + 7);
  *(_BYTE *)(a2 + 23) = v12;
  v20[0] = 0;
  *(_QWORD *)((char *)v20 + 7) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_23962B840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_23962B858(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23962B960(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1090;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962B934(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962B94C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_23962B960(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE1090;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_23962B9C0(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962B9D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962B9F0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23962BA14(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_23962BA34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_23962BAA4(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE0F50;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_23962BB04(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962BB1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_23962BB30(CFTypeRef *a1)
{
  CFTypeID TypeID;
  _BOOL4 v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  uint64_t result;
  CFIndex v8;
  CFIndex v9;
  char v10;
  CFTypeID v11;
  CFTypeRef ValueAtIndex;

  if (!*a1)
    return 0;
  TypeID = j__CFArrayGetTypeID();
  v3 = sub_239628DA8(a1, TypeID);
  v4 = (const __CFArray *)*a1;
  if (!v3)
  {
    if (v4)
    {
      v11 = j__CFDictionaryGetTypeID();
      if (sub_239628DA8(a1, v11))
      {
        ValueAtIndex = *a1;
        return sub_23962BC54((CFDictionaryRef *)&ValueAtIndex);
      }
    }
    return 1;
  }
  if (!v4)
    return 0;
  Count = CFArrayGetCount((CFArrayRef)*a1);
  if (Count < 1)
    return 1;
  v6 = Count;
  ValueAtIndex = CFArrayGetValueAtIndex(v4, 0);
  result = sub_23962BB30(&ValueAtIndex);
  if ((_DWORD)result)
  {
    v8 = 1;
    do
    {
      v9 = v8;
      if (v6 == v8)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v8);
      v10 = sub_23962BB30(&ValueAtIndex);
      v8 = v9 + 1;
    }
    while ((v10 & 1) != 0);
    return v9 >= v6;
  }
  return result;
}

uint64_t sub_23962BC54(CFDictionaryRef *a1)
{
  const __CFDictionary *v2;
  unint64_t Count;
  size_t v4;
  CFTypeRef *v5;
  char *v6;
  CFTypeRef *v7;
  char *v8;
  uint64_t v9;
  CFTypeRef *v10;
  CFTypeID TypeID;
  char *v12;
  uint64_t v13;
  char v14;

  v2 = *a1;
  if (!v2)
    return 0;
  Count = CFDictionaryGetCount(v2);
  if (Count)
  {
    if (Count >> 61)
      sub_2394189F8();
    v4 = 8 * Count;
    v5 = (CFTypeRef *)operator new(8 * Count);
    bzero(v5, v4);
    v6 = (char *)operator new(v4);
    v7 = &v5[v4 / 8];
    bzero(v6, v4);
    v8 = &v6[v4];
  }
  else
  {
    v7 = 0;
    v5 = 0;
    v6 = 0;
    v8 = 0;
  }
  CFDictionaryGetKeysAndValues(*a1, v5, (const void **)v6);
  if (v5 != v7)
  {
    v10 = v5;
    while (1)
    {
      if (!*v10)
      {
        v9 = 0;
        if (v6)
          goto LABEL_19;
        goto LABEL_20;
      }
      TypeID = j__CFStringGetTypeID();
      if (!sub_239628DA8(v10, TypeID))
        break;
      if (++v10 == v7)
        goto LABEL_12;
    }
    v9 = 0;
    if (v6)
      goto LABEL_19;
    goto LABEL_20;
  }
LABEL_12:
  if (v6 != v8)
  {
    v12 = v6;
    do
    {
      v13 = sub_23962BB30(v12);
      v9 = v13;
      v12 += 8;
      if (v12 == v8)
        v14 = 0;
      else
        v14 = v13;
    }
    while ((v14 & 1) != 0);
    if (!v6)
      goto LABEL_20;
    goto LABEL_19;
  }
  v9 = 1;
  if (v6)
LABEL_19:
    operator delete(v6);
LABEL_20:
  if (v5)
    operator delete(v5);
  return v9;
}

void sub_23962BDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_23962BDF8@<X0>(std::__shared_weak_count_vtbl **a1@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  return sub_23962BE3C(a1, Mutable, 0);
}

std::__shared_weak_count_vtbl **sub_23962BE3C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23962C0A8(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE10E0;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962BF18(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962BF30(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_23962BF50@<X0>(std::__shared_weak_count_vtbl **a1@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;

  Mutable = (std::__shared_weak_count_vtbl *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  return sub_23962BF9C(a1, Mutable, 0);
}

std::__shared_weak_count_vtbl **sub_23962BF9C(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_23962C1EC(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1130;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962C078(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962C090(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_23962C0A8(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE10E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_23962C108(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962C120(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962C138(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23962C15C(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_23962C17C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP9__CFArrayEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_23962C1EC(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE1130;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_23962C24C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962C264(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962C27C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23962C2A0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_23962C2C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

std::__shared_weak_count_vtbl **sub_23962C330(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2, int a3)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;

  sub_23962C464(&v18, a2, a3);
  v4 = v18;
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *a1 = v4;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (std::__shared_weak_count *)a1[1];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a1 = v18;
    a1[1] = 0;
  }
  v14 = v19;
  if (!v19)
    return a1;
  v15 = (unint64_t *)&v19->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

std::__shared_weak_count_vtbl **sub_23962C464(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *cf, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  if (a3)
  {
    sub_239601828(&v12, cf);
    v5 = v13;
    *a1 = v12;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    if (!v5)
      return a1;
  }
  else
  {
    v12 = cf;
    v5 = (std::__shared_weak_count *)operator new();
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE0880;
    v5->__shared_owners_ = 0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = cf;
    v13 = v5;
    *a1 = cf;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v9 = v13;
  if (!v13)
    return a1;
  v10 = (unint64_t *)&v13->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_23962C540(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962C558(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_OWORD *sub_23962C56C(_OWORD *a1)
{
  char **v3;
  char *v4[2];
  __int128 v5;

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  sub_23962CA40(&v3, (std::__shared_weak_count_vtbl **)&v5);
  *a1 = v5;
  sub_239587BCC((uint64_t)&v3, v4[0]);
  return a1;
}

void sub_23962C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_239587BCC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_23962C5DC(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

_QWORD *sub_23962C5E4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v2 = result;
  v3 = a2[1];
  *result = *a2;
  result[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = (std::__shared_weak_count *)result[1];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        return v2;
      }
    }
  }
  return result;
}

uint64_t sub_23962C67C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  CFDictionaryRef v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;

  v3 = *(CFDictionaryRef *)a1;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldxr(p_shared_owners);
  while (__stxr(v5 + 1, p_shared_owners));
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v3)
      return CFDictionaryGetCount(*(CFDictionaryRef *)a1) == 0;
  }
  else
  {
LABEL_6:
    if (v3)
      return CFDictionaryGetCount(*(CFDictionaryRef *)a1) == 0;
  }
  return 1;
}

_OWORD *sub_23962C714(_OWORD *a1)
{
  char **v3;
  char *v4[2];
  __int128 v5;

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  sub_23962CF48(&v3, (std::__shared_weak_count_vtbl **)&v5);
  *a1 = v5;
  sub_239587BCC((uint64_t)&v3, v4[0]);
  return a1;
}

void sub_23962C76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_239587BCC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

std::__shared_weak_count_vtbl **sub_23962C784(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2, int a3)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;

  sub_23962BF9C(&v18, a2, a3);
  v4 = v18;
  v5 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *a1 = v4;
    a1[1] = (std::__shared_weak_count_vtbl *)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (std::__shared_weak_count *)a1[1];
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a1 = v18;
    a1[1] = 0;
  }
  v14 = v19;
  if (!v19)
    return a1;
  v15 = (unint64_t *)&v19->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_23962C8B8(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(*a1, a2, a3);
}

BOOL sub_23962C8C0(const __CFDictionary *a1, const void *a2, const void **a3)
{
  return CFDictionaryGetValueIfPresent(a1, a2, a3) != 0;
}

BOOL sub_23962C8DC(const __CFDictionary *a1, const void *a2)
{
  return CFDictionaryContainsKey(a1, a2) != 0;
}

_QWORD *sub_23962C8FC(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250AE1180;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_23962C95C(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23962C974(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23962C98C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23962C9B0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_23962C9D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_23962CA40(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::logic_error *exception;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  sub_23962CB90(a1, &v12);
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  sub_23962C330(a2, v12, 1);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_23962CB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23962CB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23962CB90(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  CFMutableDictionaryRef v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *value;
  std::__shared_weak_count *v40;
  void *key;
  std::__shared_weak_count *v42;
  CFMutableDictionaryRef theDict[2];

  sub_23962BF50((std::__shared_weak_count_vtbl **)theDict);
  v5 = theDict[0];
  v4 = (std::__shared_weak_count *)theDict[1];
  if (!theDict[1])
    goto LABEL_6;
  v6 = (unint64_t *)((char *)theDict[1] + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 - 1, v6));
  if (v8)
  {
LABEL_6:
    if (v5)
      goto LABEL_7;
LABEL_41:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5)
    goto LABEL_41;
LABEL_7:
  v11 = (_QWORD *)*a1;
  v9 = a1 + 1;
  v10 = v11;
  if (v11 == v9)
  {
LABEL_8:
    *(_OWORD *)a2 = *(_OWORD *)theDict;
    theDict[0] = 0;
    theDict[1] = 0;
    goto LABEL_53;
  }
  while (1)
  {
    sub_239629EF4((uint64_t)(v10 + 4), (CFStringRef *)&key);
    sub_239629634(&value, v10 + 7);
    v13 = key;
    v12 = v42;
    if (v42)
    {
      p_shared_owners = (unint64_t *)&v42->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v17 = v40;
    if (!v13)
      break;
    v18 = value;
    if (v40)
    {
      v19 = (unint64_t *)&v40->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (!v18)
    {
      v17 = v40;
      break;
    }
    j__CFDictionarySetValue(theDict[0], key, value);
    v22 = v40;
    if (!v40)
      goto LABEL_28;
    v23 = (unint64_t *)&v40->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      v25 = v42;
      if (v42)
      {
LABEL_29:
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
LABEL_28:
      v25 = v42;
      if (v42)
        goto LABEL_29;
    }
    v28 = (_QWORD *)v10[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (_QWORD *)*v28;
      }
      while (v28);
    }
    else
    {
      do
      {
        v29 = (_QWORD *)v10[2];
        v30 = *v29 == (_QWORD)v10;
        v10 = v29;
      }
      while (!v30);
    }
    v10 = v29;
    if (v29 == v9)
      goto LABEL_8;
  }
  *a2 = 0;
  a2[1] = 0;
  if (v17)
  {
    v31 = (unint64_t *)&v17->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v33 = v42;
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_53:
  v36 = (std::__shared_weak_count *)theDict[1];
  if (theDict[1])
  {
    v37 = (unint64_t *)((char *)theDict[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_23962CE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a12)
  {
    v17 = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_23962CF48(_QWORD *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count_vtbl *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::logic_error *exception;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;

  sub_23962CB90(a1, &v12);
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (!v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Given map is not compatible with this dictionary type");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  sub_23962C784(a2, v12, 1);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_23962D068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23962D084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_23962D0A0(__n128 *a1)
{
  __n128 v2;
  __n128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  sub_2399129C4(&v3, &v2, 16);
  return v3.n128_u64[0];
}

void sub_23962D104(uint64_t a1)
{
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

std::__fs::filesystem::path *sub_23962D128@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__absolute(a2, a1, 0);
}

std::__fs::filesystem::path *sub_23962D134@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__canonical(a2, a1, 0);
}

std::__fs::filesystem::path *sub_23962D140@<X0>(std::__fs::filesystem::path *__p@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__weakly_canonical(a2, __p, 0);
}

void sub_23962D14C(const std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::path v4;

  std::__fs::filesystem::__current_path(&v4, 0);
  sub_23962D1CC(a1, &v4, a2);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
}

void sub_23962D1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23962D1CC(const std::__fs::filesystem::path *a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v6;

  std::__fs::filesystem::__weakly_canonical(&v6, a1, 0);
  std::__fs::filesystem::__weakly_canonical(&__p, a2, 0);
  std::__fs::filesystem::path::lexically_relative(a3, &v6, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_23962D258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_23962D2A4(const std::__fs::filesystem::path *a1@<X1>, const std::__fs::filesystem::path *a2@<X2>, std::__fs::filesystem::path *a3@<X8>)
{
  sub_23962D1CC(a1, a2, a3);
}

void sub_23962D2B0(const std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::path v4;

  std::__fs::filesystem::__current_path(&v4, 0);
  sub_23962D330(a1, &v4, a2);
  if (SHIBYTE(v4.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__pn_.__r_.__value_.__l.__data_);
}

void sub_23962D314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23962D330(const std::__fs::filesystem::path *a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  std::string::size_type size;
  char v6;
  std::__fs::filesystem::path __base;
  std::__fs::filesystem::path v8;
  std::__fs::filesystem::path v9;

  std::__fs::filesystem::__weakly_canonical(&v8, a1, 0);
  std::__fs::filesystem::__weakly_canonical(&__base, a2, 0);
  std::__fs::filesystem::path::lexically_relative(&v9, &v8, &__base);
  size = HIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]);
  if ((v9.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v9.__pn_.__r_.__value_.__l.__size_;
  if (size)
  {
    *a3 = v9;
    goto LABEL_8;
  }
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *a3 = v8;
    if ((v6 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  sub_23941A7F8(a3, v8.__pn_.__r_.__value_.__l.__data_, v8.__pn_.__r_.__value_.__l.__size_);
  if ((*((_BYTE *)&v9.__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_7:
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
LABEL_8:
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
}

void sub_23962D424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
  {
    operator delete(*(void **)(v21 - 40));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23962D498(const std::__fs::filesystem::path *a1@<X1>, const std::__fs::filesystem::path *a2@<X2>, std::__fs::filesystem::path *a3@<X8>)
{
  sub_23962D330(a1, a2, a3);
}

void sub_23962D4A4(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
  std::__fs::filesystem::__copy(__from, __to, (std::__fs::filesystem::copy_options)0, 0);
}

void sub_23962D4B8(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt)
{
  std::__fs::filesystem::__copy(__from, __to, __opt, 0);
}

BOOL sub_23962D4CC(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
  return std::__fs::filesystem::__copy_file(__from, __to, (std::__fs::filesystem::copy_options)0, 0);
}

BOOL sub_23962D4E0(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to, std::__fs::filesystem::copy_options __opt)
{
  return std::__fs::filesystem::__copy_file(__from, __to, __opt, 0);
}

void sub_23962D4F4(int a1, std::__fs::filesystem::path *__existing_symlink, std::__fs::filesystem::path *__new_symlink)
{
  std::__fs::filesystem::__copy_symlink(__existing_symlink, __new_symlink, 0);
}

BOOL sub_23962D504(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__create_directory(a2, 0);
}

BOOL sub_23962D510(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *__attributes)
{
  return std::__fs::filesystem::__create_directory(a2, __attributes, 0);
}

BOOL sub_23962D520(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__create_directories(a2, 0);
}

void sub_23962D52C(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_hard_link)
{
  std::__fs::filesystem::__create_hard_link(__to, __new_hard_link, 0);
}

void sub_23962D53C(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_symlink)
{
  std::__fs::filesystem::__create_symlink(__to, __new_symlink, 0);
}

void sub_23962D54C(int a1, std::__fs::filesystem::path *__to, std::__fs::filesystem::path *__new_symlink)
{
  std::__fs::filesystem::__create_directory_symlink(__to, __new_symlink, 0);
}

std::__fs::filesystem::path *sub_23962D55C@<X0>(std::__fs::filesystem::path *a1@<X8>)
{
  return std::__fs::filesystem::__current_path(a1, 0);
}

void sub_23962D564(int a1, std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__current_path(a2, 0);
}

BOOL sub_23962D570(int a1, std::__fs::filesystem::path *a2)
{
  BOOL v2;
  unsigned __int8 v4;

  std::__fs::filesystem::__status(a2, 0);
  if (v4)
    v2 = v4 == 255;
  else
    v2 = 1;
  return !v2;
}

BOOL sub_23962D5AC(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::path *a3)
{
  return std::__fs::filesystem::__equivalent(a2, a3, 0);
}

uintmax_t sub_23962D5BC(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__file_size(a2, 0);
}

uintmax_t sub_23962D5C8(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__hard_link_count(a2, 0);
}

uint64_t sub_23962D5D4(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__last_write_time(a2, 0).__d_.__rep_;
}

void sub_23962D5E0(int a1, std::__fs::filesystem::path *a2, std::__fs::filesystem::perms a3, std::__fs::filesystem::perm_options a4)
{
  std::__fs::filesystem::__permissions(a2, a3, a4, 0);
}

std::__fs::filesystem::path *sub_23962D5F4@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  return std::__fs::filesystem::__read_symlink(a2, a1, 0);
}

BOOL sub_23962D600(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__remove(a2, 0);
}

uintmax_t sub_23962D60C(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__remove_all(a2, 0);
}

void sub_23962D618(int a1, std::__fs::filesystem::path *__from, std::__fs::filesystem::path *__to)
{
  std::__fs::filesystem::__rename(__from, __to, 0);
}

void sub_23962D628(int a1, std::__fs::filesystem::path *a2, uintmax_t __size)
{
  std::__fs::filesystem::__resize_file(a2, __size, 0);
}

std::__fs::filesystem::space_info *sub_23962D638@<X0>(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::space_info *a2@<X8>)
{
  return std::__fs::filesystem::__space(a2, a1, 0);
}

std::__fs::filesystem::file_status sub_23962D644(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__status(a2, 0);
}

std::__fs::filesystem::file_status sub_23962D650(int a1, std::__fs::filesystem::path *a2)
{
  return std::__fs::filesystem::__symlink_status(a2, 0);
}

std::__fs::filesystem::path *sub_23962D65C@<X0>(std::__fs::filesystem::path *a1@<X8>)
{
  return std::__fs::filesystem::__temp_directory_path(a1, 0);
}

BOOL sub_23962D664(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 4;
}

BOOL sub_23962D69C(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 5;
}

BOOL sub_23962D6D4(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 2;
}

BOOL sub_23962D70C(int a1, std::__fs::filesystem::path *__p)
{
  return std::__fs::filesystem::__fs_is_empty(__p, 0);
}

BOOL sub_23962D718(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 1;
}

BOOL sub_23962D750(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 6;
}

BOOL sub_23962D788(int a1, std::__fs::filesystem::path *a2)
{
  unsigned __int8 v3;

  std::__fs::filesystem::__status(a2, 0);
  if (!v3)
    return 0;
  if (v3 == 255)
    return 0;
  return v3 - 4 < 0xFFFFFFFD;
}

BOOL sub_23962D7E0(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__status(a2, 0);
  return v3 == 7;
}

BOOL sub_23962D818(int a1, std::__fs::filesystem::path *a2)
{
  char v3;

  std::__fs::filesystem::__symlink_status(a2, 0);
  return v3 == 3;
}

uint64_t sub_23962D850@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  char v23;

  v2 = (_QWORD *)operator new();
  v3 = MEMORY[0x24BEDB838];
  v4 = MEMORY[0x24BEDB838] + 64;
  v2[53] = MEMORY[0x24BEDB838] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *v2 = v5;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v5 - 24)) = v6;
  v2[1] = 0;
  v7 = (std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24));
  std::ios_base::init(v7, v2 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *v2 = v3 + 24;
  v2[53] = v4;
  MEMORY[0x23B83DC80](v2 + 2);
  v22 = v2;
  std::ifstream::open();
  if (v2[17])
  {
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1380;
    sub_23962DFBC((uint64_t)&v23, &v8[1].__vftable, (unint64_t *)&v22);
    v20 = &v8[1].__vftable;
    v21 = v8;
    v18 = 0;
    v19 = 0;
    sub_23962E7B0(a1, (uint64_t *)&v20);
    v9 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
    sub_23962E7B0(a1, &v16);
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  result = (uint64_t)v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23962DA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a9);
  a15 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_23962DA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;

  sub_239416DA0((uint64_t)&a13);
  sub_239416DA0((uint64_t)&a11);
  v16 = a15;
  a15 = 0;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_23962DB0C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  char v23;

  v2 = (_QWORD *)operator new();
  v3 = MEMORY[0x24BEDB840];
  v4 = MEMORY[0x24BEDB840] + 64;
  v2[52] = MEMORY[0x24BEDB840] + 64;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *v2 = v5;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24));
  std::ios_base::init(v7, v2 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *v2 = v3 + 24;
  v2[52] = v4;
  MEMORY[0x23B83DC80](v2 + 1);
  v22 = v2;
  std::ofstream::open();
  if (v2[16])
  {
    v8 = (std::__shared_weak_count *)operator new(0x30uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1420;
    sub_23962E1A8((uint64_t)&v23, &v8[1].__vftable, (unint64_t *)&v22);
    v20 = &v8[1].__vftable;
    v21 = v8;
    v18 = 0;
    v19 = 0;
    sub_23962E8C0(a1, (uint64_t *)&v20);
    v9 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v16 = 0;
    v17 = 0;
    sub_23962E8C0(a1, &v16);
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  result = (uint64_t)v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23962DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a9);
  a15 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_23962DD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;

  sub_239416DA0((uint64_t)&a13);
  sub_239416DA0((uint64_t)&a11);
  v16 = a15;
  a15 = 0;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23962DDC4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  const std::__fs::filesystem::directory_entry *v8;
  unint64_t v9;
  std::__fs::filesystem::perms non_sym_perms;
  std::__shared_weak_count *cntrl;
  uint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD v17[3];
  std::__fs::filesystem::directory_iterator v18;
  std::__fs::filesystem::directory_iterator v19;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  MEMORY[0x23B83E094](&v19, a1, 0, a2);
  v18 = v19;
  if (v19.__imp_.__cntrl_)
  {
    p_shared_owners = &v19.__imp_.__cntrl_->__shared_owners_;
    do
      v5 = __ldxr((unint64_t *)p_shared_owners);
    while (__stxr(v5 + 1, (unint64_t *)p_shared_owners));
  }
  v17[1] = 0;
  v17[2] = 0;
  while (v18.__imp_.__ptr_)
  {
    v7 = (__int128 *)std::__fs::filesystem::directory_iterator::__dereference(&v18);
    v8 = std::__fs::filesystem::directory_iterator::__dereference(&v18);
    if (((1 << v8->__data_.__cache_type_) & 0x17) != 0)
    {
      std::__fs::filesystem::__status(&v8->__p_, 0);
      v9 = a3[1];
      if (v9 >= a3[2])
        goto LABEL_5;
    }
    else
    {
      non_sym_perms = v8->__data_.__non_sym_perms_;
      LOBYTE(v17[0]) = v8->__data_.__type_;
      HIDWORD(v17[0]) = non_sym_perms;
      v9 = a3[1];
      if (v9 >= a3[2])
      {
LABEL_5:
        v6 = sub_23962E394(a3, v7, v17);
        goto LABEL_6;
      }
    }
    sub_23962E5A0(v9, v7, v17);
    v6 = v9 + 32;
    a3[1] = v9 + 32;
LABEL_6:
    a3[1] = v6;
    std::__fs::filesystem::directory_iterator::__increment(&v18, 0);
  }
  cntrl = v18.__imp_.__cntrl_;
  if (v18.__imp_.__cntrl_)
  {
    v12 = &v18.__imp_.__cntrl_->__shared_owners_;
    do
      v13 = __ldaxr((unint64_t *)v12);
    while (__stlxr(v13 - 1, (unint64_t *)v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v14 = v19.__imp_.__cntrl_;
  if (v19.__imp_.__cntrl_)
  {
    v15 = &v19.__imp_.__cntrl_->__shared_owners_;
    do
      v16 = __ldaxr((unint64_t *)v15);
    while (__stlxr(v16 - 1, (unint64_t *)v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_23962DF68(_Unwind_Exception *a1)
{
  void **v1;

  sub_239593BB8(v1);
  _Unwind_Resume(a1);
}

void sub_23962DF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  *(_QWORD *)(v3 + 8) = v4;
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  sub_239593BB8((void **)v3);
  _Unwind_Resume(a1);
}

void sub_23962DFBC(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v11;

  v11.n128_u64[0] = *a3;
  if (v11.n128_u64[0])
  {
    v5 = (_QWORD *)operator new();
    v6 = *a3;
    *v5 = &unk_250AE13D0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  v11.n128_u64[1] = (unint64_t)v5;
  *a3 = 0;
  v7 = sub_23962E9D0(a2, &v11);
  v8 = (std::__shared_weak_count *)v11.n128_u64[1];
  if (v11.n128_u64[1])
  {
    v9 = (unint64_t *)(v11.n128_u64[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_23962E084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_239EC00D0(a10);
  _Unwind_Resume(exception_object);
}

void sub_23962E09C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23962E0AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_23962E0DC(uint64_t a1)
{
  return sub_23962EA08(a1 + 24);
}

void sub_23962E0EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23962E110(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_23962E128(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000239EC7ED9)
    return a1 + 24;
  if (((v3 & 0x8000000239EC7ED9 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000239EC7ED9))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000239EC7ED9 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_23962E1A8(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v11;

  v11.n128_u64[0] = *a3;
  if (v11.n128_u64[0])
  {
    v5 = (_QWORD *)operator new();
    v6 = *a3;
    *v5 = &unk_250AE1470;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  v11.n128_u64[1] = (unint64_t)v5;
  *a3 = 0;
  v7 = sub_23962EAE4(a2, &v11);
  v8 = (std::__shared_weak_count *)v11.n128_u64[1];
  if (v11.n128_u64[1])
  {
    v9 = (unint64_t *)(v11.n128_u64[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_23962E270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_239EC00D0(a10);
  _Unwind_Resume(exception_object);
}

void sub_23962E288(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1420;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23962E298(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AE1420;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

double sub_23962E2C8(uint64_t a1)
{
  return sub_23962EB1C(a1 + 24);
}

void sub_23962E2D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23962E2FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_23962E314(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x8000000239EC7FE3)
    return a1 + 24;
  if (((v3 & 0x8000000239EC7FE3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000239EC7FE3))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000239EC7FE3 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t sub_23962E394(uint64_t *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  uint64_t v18;
  char *v19;

  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_2394189F8();
  v8 = a1[2] - *a1;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_239418A80();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v18 = (uint64_t)&v10[32 * v4];
  v19 = &v10[32 * v9];
  sub_23962E5A0(v18, a2, a3);
  v11 = v18;
  v12 = v18 + 32;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v18;
    a1[1] = v12;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    do
    {
      v15 = *((_OWORD *)v14 - 2);
      *(_QWORD *)(v11 - 16) = *((_QWORD *)v14 - 2);
      *(_OWORD *)(v11 - 32) = v15;
      *((_QWORD *)v14 - 3) = 0;
      *((_QWORD *)v14 - 2) = 0;
      *((_QWORD *)v14 - 4) = 0;
      *(_QWORD *)(v11 - 8) = *((_QWORD *)v14 - 1);
      v11 -= 32;
      v14 -= 32;
    }
    while (v14 != v13);
    v16 = (char *)*a1;
    v14 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v12;
    a1[2] = (uint64_t)v19;
    if (v14 != v16)
    {
      do
      {
        if (*(v14 - 9) < 0)
          operator delete(*((void **)v14 - 4));
        v14 -= 32;
      }
      while (v14 != v16);
      v14 = v16;
    }
  }
  if (v14)
    operator delete(v14);
  return v18 + 32;
}

void sub_23962E510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23962E524((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23962E524(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23962E588(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 312))(a2, a1);
}

uint64_t sub_23962E5A0(uint64_t __dst, __int128 *a2, _QWORD *a3)
{
  uint64_t v4;
  __int128 v5;

  v4 = __dst;
  if (*((char *)a2 + 23) < 0)
  {
    sub_23941A7F8((_BYTE *)__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    *(_QWORD *)(v4 + 24) = *a3;
    return v4;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(__dst + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
    *(_QWORD *)(__dst + 24) = *a3;
  }
  return __dst;
}

_UNKNOWN **sub_23962E60C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25693C6D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25693C6D8))
    return &off_256930ED8;
  __cxa_atexit((void (*)(void *))j_nullsub_4_86, &off_256930ED8, &dword_23940C000);
  __cxa_guard_release(&qword_25693C6D8);
  return &off_256930ED8;
}

_QWORD *sub_23962E67C(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  for (; a2 != a3; ++a2)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_239458500(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_23962E760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23962E780(_QWORD *result)
{
  *result = off_250AE14D0;
  return result;
}

_QWORD *sub_23962E798(_QWORD *result)
{
  *result = off_250AE14F8;
  return result;
}

_QWORD *sub_23962E7B0(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_250AE1520;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_23962E7E0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_23962E848(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23962E8B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_23962E8C0(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = &off_250AE1548;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_23962E8F0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_23962E958(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23962E9C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

__n128 sub_23962E9D0(_QWORD *a1, __n128 *a2)
{
  _QWORD *v3;
  __n128 result;

  v3 = sub_23962E780(a1);
  *v3 = &off_250AE15E0;
  result = *a2;
  *(__n128 *)(v3 + 1) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

double sub_23962EA08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

void sub_23962EA70(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23962EADC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

__n128 sub_23962EAE4(_QWORD *a1, __n128 *a2)
{
  _QWORD *v3;
  __n128 result;

  v3 = sub_23962E798(a1);
  *v3 = &off_250AE1608;
  result = *a2;
  *(__n128 *)(v3 + 1) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

double sub_23962EB1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  double result;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  else
  {
LABEL_5:
    *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  }
  return result;
}

void sub_23962EB84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23962EBF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

__n128 sub_23962EBF8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q1>, __n128 a4@<Q3>, __n128 a5@<Q5>)
{
  __n128 result;
  __int128 v6;
  __int128 v7;

  result = *(__n128 *)a1;
  a3.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 24);
  a4.n128_u64[0] = *(_QWORD *)(a1 + 40);
  v7 = *(_OWORD *)(a1 + 48);
  a5.n128_u64[0] = *(_QWORD *)(a1 + 64);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = a3;
  *(_OWORD *)(a2 + 32) = v6;
  *(__n128 *)(a2 + 48) = a4;
  *(_OWORD *)(a2 + 64) = v7;
  *(__n128 *)(a2 + 80) = a5;
  return result;
}

__n128 sub_23962EC30@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  v7 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v9 = *(_OWORD *)(a1 + 112);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  return result;
}

__n128 sub_23962EC84@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 sub_23962EC90@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = *(__n128 *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v3;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 112) = v7;
  return result;
}

BOOL sub_23962ECB4(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (v1 <= 0x100)
    LOBYTE(v1) = 0;
  return v1 != 0;
}

void sub_23962ECE8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)qword_25693C6E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_25693C6E0))
  {
    sub_23962EDF4(&sub_23962ECE8, (uint64_t)&xmmword_25693C6F0);
    __cxa_atexit((void (*)(void *))sub_23962F1C8, &xmmword_25693C6F0, &dword_23940C000);
    __cxa_guard_release(qword_25693C6E0);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_25693C708)
  {
    if (byte_25693C707 < 0)
    {
      sub_23941A7F8((_BYTE *)a1, (void *)xmmword_25693C6F0, *((unint64_t *)&xmmword_25693C6F0 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_25693C6F0;
      *(_QWORD *)(a1 + 16) = unk_25693C700;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_23962EDB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_25693C6E0);
  _Unwind_Resume(a1);
}

void sub_23962EDD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_23962EDF4(const void *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  std::__fs::filesystem::path::__string_view v4;
  std::__fs::filesystem::path *p_p;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  char v8;
  std::string::size_type size;
  __int16 v10;
  std::__fs::filesystem::path __p;
  unsigned __int8 v12;
  std::__fs::filesystem::path v13;
  char v14;
  std::__fs::filesystem::path v15;
  char v16;
  std::__fs::filesystem::path v17;
  char v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  sub_23962F210(a1, &v17);
  if (!v18)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return;
  }
  sub_23962F2E8(&v17, &v15);
  if (!v16
    || (std::__fs::filesystem::__status(&v15, 0), !v13.__pn_.__r_.__value_.__s.__data_[0])
    || v13.__pn_.__r_.__value_.__s.__data_[0] == 255
    || (std::__fs::filesystem::__status(&v15, 0),
        std::__fs::filesystem::__status(&v15, 0),
        v13.__pn_.__r_.__value_.__s.__data_[0] != 2)
    || (v13.__pn_.__r_.__value_.__r.__words[0] & 0x10000000000) == 0)
  {
    sub_23962F974(&v13.__pn_);
    if (!v14)
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      goto LABEL_34;
    }
    sub_23962FB04(&v13, &__p);
    v3 = v12;
    if (v16 == v12)
    {
      if (v16)
      {
        if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v15.__pn_.__r_.__value_.__l.__data_);
        v15 = __p;
        *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = 0;
        __p.__pn_.__r_.__value_.__s.__data_[0] = 0;
        if (!v3)
        {
LABEL_21:
          if (v16)
          {
            std::__fs::filesystem::__status(&v15, 0);
            if (__p.__pn_.__r_.__value_.__s.__data_[0])
            {
              if (__p.__pn_.__r_.__value_.__s.__data_[0] != 255)
              {
                std::__fs::filesystem::__status(&v15, 0);
                v10 = WORD2(__p.__pn_.__r_.__value_.__r.__words[0]);
                std::__fs::filesystem::__status(&v15, 0);
                if (__p.__pn_.__r_.__value_.__s.__data_[0] == 2 && (v10 & 0x100) != 0)
                {
                  *(_BYTE *)a2 = 0;
                  *(_BYTE *)(a2 + 24) = 0;
                  if (!v16)
                  {
LABEL_34:
                    if (v14 && SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v13.__pn_.__r_.__value_.__l.__data_);
                    if (v16 && SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v15.__pn_.__r_.__value_.__l.__data_);
                    goto LABEL_40;
                  }
                  *(std::__fs::filesystem::path *)a2 = v15;
                  memset(&v15, 0, sizeof(v15));
LABEL_33:
                  *(_BYTE *)(a2 + 24) = 1;
                  goto LABEL_34;
                }
              }
            }
          }
          v4 = std::__fs::filesystem::path::__parent_path(&v13);
          if (v4.__size_ >= 0x7FFFFFFFFFFFFFF8)
            sub_23941A5AC();
          if (v4.__size_ >= 0x17)
          {
            v6 = (v4.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v4.__size_ | 7) != 0x17)
              v6 = v4.__size_ | 7;
            v7 = v6 + 1;
            p_p = (std::__fs::filesystem::path *)operator new(v6 + 1);
            __p.__pn_.__r_.__value_.__l.__size_ = v4.__size_;
            __p.__pn_.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
            __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
          }
          else
          {
            *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v4.__size_;
            p_p = &__p;
            if (!v4.__size_)
              goto LABEL_32;
          }
          memmove(p_p, v4.__data_, v4.__size_);
LABEL_32:
          p_p->__pn_.__r_.__value_.__s.__data_[v4.__size_] = 0;
          *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7);
          v19[0] = __p.__pn_.__r_.__value_.__l.__size_;
          v8 = HIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
          size = __p.__pn_.__r_.__value_.__l.__size_;
          *(_QWORD *)a2 = __p.__pn_.__r_.__value_.__r.__words[0];
          *(_QWORD *)(a2 + 8) = size;
          *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v19 + 7);
          *(_BYTE *)(a2 + 23) = v8;
          goto LABEL_33;
        }
LABEL_19:
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        goto LABEL_21;
      }
    }
    else
    {
      if (!v16)
      {
        v15 = __p;
        memset(&__p, 0, sizeof(__p));
        v16 = 1;
        if (!v12)
          goto LABEL_21;
        goto LABEL_19;
      }
      if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__pn_.__r_.__value_.__l.__data_);
      v16 = 0;
    }
    if (!v3)
      goto LABEL_21;
    goto LABEL_19;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v16)
  {
    *(std::__fs::filesystem::path *)a2 = v15;
    *(_BYTE *)(a2 + 24) = 1;
  }
LABEL_40:
  if (v18)
  {
    if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_23962F14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a19 && a18 < 0)
    operator delete(__p);
  if (a26 && a25 < 0)
    operator delete(a20);
  if (a34)
  {
    if (a33 < 0)
    {
      operator delete(a28);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23962F1C8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

void sub_23962F210(const void *a1@<X0>, std::__fs::filesystem::path *a2@<X8>)
{
  std::string *v3;
  int v4;
  std::string __p;
  std::__fs::filesystem::path v6;
  Dl_info v7;

  if (dladdr(a1, &v7))
  {
    memset(&__p, 0, sizeof(__p));
    v3 = (std::string *)(v7.dli_fname - 1);
    do
    {
      v4 = v3->__r_.__value_.__s.__data_[1];
      v3 = (std::string *)((char *)v3 + 1);
    }
    while (v4);
    sub_23948900C(&__p, (std::string *)v7.dli_fname, v3);
    std::__fs::filesystem::__weakly_canonical(&v6, (const std::__fs::filesystem::path *)&__p, 0);
    *a2 = v6;
    memset(&v6, 0, sizeof(v6));
    a2[1].__pn_.__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    a2->__pn_.__r_.__value_.__s.__data_[0] = 0;
    a2[1].__pn_.__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_23962F2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23962F2E8(const std::__fs::filesystem::path *a1@<X0>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  std::string *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  std::__fs::filesystem::path::__string_view v7;
  std::string *v8;
  std::basic_string_view<_CharT, _Traits>::size_type v9;
  std::basic_string_view<_CharT, _Traits>::size_type v10;
  std::__fs::filesystem::path::__string_view v11;
  int v12;
  std::__fs::filesystem::path::__string_view v13;
  std::string *v14;
  std::basic_string_view<_CharT, _Traits>::size_type v15;
  std::basic_string_view<_CharT, _Traits>::size_type v16;
  std::__fs::filesystem::path::__string_view v17;
  std::string *v18;
  std::basic_string_view<_CharT, _Traits>::size_type v19;
  std::basic_string_view<_CharT, _Traits>::size_type v20;
  std::__fs::filesystem::path::__string_view v21;
  int v22;
  int v23;
  std::__fs::filesystem::path::__string_view v24;
  std::string *v25;
  std::basic_string_view<_CharT, _Traits>::size_type v26;
  std::basic_string_view<_CharT, _Traits>::size_type v27;
  std::__fs::filesystem::path::__string_view v28;
  std::string *v29;
  std::basic_string_view<_CharT, _Traits>::size_type v30;
  std::basic_string_view<_CharT, _Traits>::size_type v31;
  std::__fs::filesystem::path::__string_view v32;
  int v33;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v35;
  std::__fs::filesystem::path v36;
  std::__fs::filesystem::path v37;
  std::__fs::filesystem::path v38;
  std::string __dst;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3.__size_;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3.__size_;
  p_dst = &__dst;
  if (v3.__size_)
LABEL_8:
    memmove(p_dst, v3.__data_, v3.__size_);
  p_dst->__r_.__value_.__s.__data_[v3.__size_] = 0;
  v38.__pn_ = __dst;
  v7 = std::__fs::filesystem::path::__extension(&v38);
  if (v7.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v7.__size_ >= 0x17)
  {
    v9 = (v7.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7.__size_ | 7) != 0x17)
      v9 = v7.__size_ | 7;
    v10 = v9 + 1;
    v8 = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7.__size_;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    goto LABEL_16;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7.__size_;
  v8 = &__dst;
  if (v7.__size_)
LABEL_16:
    memmove(v8, v7.__data_, v7.__size_);
  v8->__r_.__value_.__s.__data_[v7.__size_] = 0;
  v37.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  sub_23948900C(&__dst, (std::string *)".framework", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v11.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v11.__size_ = __dst.__r_.__value_.__l.__size_;
  v12 = std::__fs::filesystem::path::__compare(&v37, v11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if (v12)
        goto LABEL_26;
LABEL_32:
      *a2 = v38;
      a2[1].__pn_.__r_.__value_.__s.__data_[0] = 1;
      return;
    }
  }
  else if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v37.__pn_.__r_.__value_.__l.__data_);
  if (!v12)
    goto LABEL_32;
LABEL_26:
  v13 = std::__fs::filesystem::path::__parent_path(&v38);
  if (v13.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v13.__size_ >= 0x17)
  {
    v15 = (v13.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13.__size_ | 7) != 0x17)
      v15 = v13.__size_ | 7;
    v16 = v15 + 1;
    v14 = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v13.__size_;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    goto LABEL_36;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13.__size_;
  v14 = &__dst;
  if (v13.__size_)
LABEL_36:
    memmove(v14, v13.__data_, v13.__size_);
  v14->__r_.__value_.__s.__data_[v13.__size_] = 0;
  v37.__pn_ = __dst;
  v17 = std::__fs::filesystem::path::__filename(&v37);
  if (v17.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v17.__size_ >= 0x17)
  {
    v19 = (v17.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17.__size_ | 7) != 0x17)
      v19 = v17.__size_ | 7;
    v20 = v19 + 1;
    v18 = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v17.__size_;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    goto LABEL_44;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v17.__size_;
  v18 = &__dst;
  if (v17.__size_)
LABEL_44:
    memmove(v18, v17.__data_, v17.__size_);
  v18->__r_.__value_.__s.__data_[v17.__size_] = 0;
  v36.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  sub_23948900C(&__dst, (std::string *)"Versions", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v21.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v21.__size_ = __dst.__r_.__value_.__l.__size_;
  v22 = std::__fs::filesystem::path::__compare(&v36, v21);
  v23 = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v23)
      goto LABEL_82;
  }
  else if (v22)
  {
    goto LABEL_82;
  }
  v24 = std::__fs::filesystem::path::__parent_path(&v37);
  if (v24.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v24.__size_ >= 0x17)
  {
    v26 = (v24.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24.__size_ | 7) != 0x17)
      v26 = v24.__size_ | 7;
    v27 = v26 + 1;
    v25 = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v24.__size_;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    goto LABEL_62;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24.__size_;
  v25 = &__dst;
  if (v24.__size_)
LABEL_62:
    memmove(v25, v24.__data_, v24.__size_);
  v25->__r_.__value_.__s.__data_[v24.__size_] = 0;
  v35.__pn_ = __dst;
  v28 = std::__fs::filesystem::path::__extension(&v35);
  if (v28.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v28.__size_ >= 0x17)
  {
    v30 = (v28.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28.__size_ | 7) != 0x17)
      v30 = v28.__size_ | 7;
    v31 = v30 + 1;
    v29 = (std::string *)operator new(v30 + 1);
    __dst.__r_.__value_.__l.__size_ = v28.__size_;
    __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    goto LABEL_70;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28.__size_;
  v29 = &__dst;
  if (v28.__size_)
LABEL_70:
    memmove(v29, v28.__data_, v28.__size_);
  v29->__r_.__value_.__s.__data_[v28.__size_] = 0;
  __p.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  sub_23948900C(&__dst, (std::string *)".framework", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v32.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v32.__size_ = __dst.__r_.__value_.__l.__size_;
  v33 = std::__fs::filesystem::path::__compare(&__p, v32);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_79:
      if (v33)
        goto LABEL_80;
      goto LABEL_88;
    }
  }
  else if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_79;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (v33)
  {
LABEL_80:
    if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__pn_.__r_.__value_.__l.__data_);
LABEL_82:
    a2->__pn_.__r_.__value_.__s.__data_[0] = 0;
    a2[1].__pn_.__r_.__value_.__s.__data_[0] = 0;
    if ((SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_83;
    goto LABEL_89;
  }
LABEL_88:
  *a2 = v35;
  a2[1].__pn_.__r_.__value_.__s.__data_[0] = 1;
  if ((SHIBYTE(v36.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_83:
    if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_90;
  }
LABEL_89:
  operator delete(v36.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_84:
    if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_91:
    operator delete(v38.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_90:
  operator delete(v37.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_91;
}

void sub_23962F874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 81) < 0)
  {
    operator delete(*(void **)(v42 - 104));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        if (a28 < 0)
          operator delete(a23);
        if (a35 < 0)
        {
          operator delete(a30);
          if ((a42 & 0x80000000) == 0)
LABEL_12:
            _Unwind_Resume(exception_object);
        }
        else if ((a42 & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
        operator delete(a37);
        _Unwind_Resume(exception_object);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

double sub_23962F974@<D0>(std::string *a1@<X8>)
{
  size_t v2;
  std::string *v3;
  std::string *v4;
  int v5;
  double result;
  std::string *v7;
  int v8;
  std::string v9;
  uint32_t bufsize;
  _BYTE v11[1009];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  bufsize = 1026;
  if (_NSGetExecutablePath(&v11[1], &bufsize))
  {
    v2 = bufsize;
    if (bufsize)
    {
      v3 = (std::string *)operator new(bufsize);
      bzero(v3, v2);
    }
    else
    {
      v3 = 0;
    }
    if (_NSGetExecutablePath((char *)v3, &bufsize))
    {
      a1->__r_.__value_.__s.__data_[0] = 0;
      a1[1].__r_.__value_.__s.__data_[0] = 0;
      if (!v3)
        return result;
      goto LABEL_10;
    }
    memset(&v9, 0, sizeof(v9));
    v7 = (std::string *)((char *)v3 - 1);
    do
    {
      v8 = v7->__r_.__value_.__s.__data_[1];
      v7 = (std::string *)((char *)v7 + 1);
    }
    while (v8);
    sub_23948900C(&v9, v3, v7);
    result = *(double *)&v9.__r_.__value_.__l.__data_;
    *a1 = v9;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    if (v3)
LABEL_10:
      operator delete(v3);
  }
  else
  {
    memset(&v9, 0, sizeof(v9));
    v4 = (std::string *)v11;
    do
    {
      v5 = v4->__r_.__value_.__s.__data_[1];
      v4 = (std::string *)((char *)v4 + 1);
    }
    while (v5);
    sub_23948900C(&v9, (std::string *)&v11[1], v4);
    result = *(double *)&v9.__r_.__value_.__l.__data_;
    *a1 = v9;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return result;
}

void sub_23962FAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  if (v15)
  {
    operator delete(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23962FB04(const std::__fs::filesystem::path *a1@<X0>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  std::__fs::filesystem::path *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  __int128 v7;
  int v8;
  std::__fs::filesystem::path::__string_view v9;
  void *v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::__fs::filesystem::path::__string_view v13;
  std::__fs::filesystem::path::__string_view v14;
  void *v15;
  _BOOL4 v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  std::__fs::filesystem::path::__string_view v19;
  int v20;
  std::__fs::filesystem::path __p;
  std::string v22;
  std::__fs::filesystem::path v23;
  std::__fs::filesystem::path __dst;
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (std::__fs::filesystem::path *)operator new(v5 + 1);
    __dst.__pn_.__r_.__value_.__l.__size_ = v3.__size_;
    __dst.__pn_.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__pn_.__r_.__value_.__s + 23) = v3.__size_;
  p_dst = &__dst;
  if (v3.__size_)
LABEL_8:
    memmove(p_dst, v3.__data_, v3.__size_);
  p_dst->__pn_.__r_.__value_.__s.__data_[v3.__size_] = 0;
  v7 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
  v26[0] = __dst.__pn_.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3);
  v8 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
  __dst.__pn_.__r_.__value_.__s.__data_[0] = 0;
  v25 = 0;
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&__dst, (void *)v7, *((unint64_t *)&v7 + 1));
  }
  else
  {
    *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_ = v7;
    LODWORD(__dst.__pn_.__r_.__value_.__r.__words[2]) = v26[0];
    *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v26 + 3);
  }
  v25 = 1;
  v9 = std::__fs::filesystem::path::__extension(&__dst);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v9.__size_ >= 0x17)
  {
    v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17)
      v11 = v9.__size_ | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    v27.__r_.__value_.__l.__size_ = v9.__size_;
    v27.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    goto LABEL_19;
  }
  *((_BYTE *)&v27.__r_.__value_.__s + 23) = v9.__size_;
  v10 = &v27;
  if (v9.__size_)
LABEL_19:
    memmove(v10, v9.__data_, v9.__size_);
  *((_BYTE *)v10 + v9.__size_) = 0;
  v23.__pn_ = v27;
  memset(&v22, 0, sizeof(v22));
  sub_23948900C(&v22, (std::string *)".app", (std::string *)"");
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13.__data_ = (const std::string_view::value_type *)&v22;
  else
    v13.__data_ = (const std::string_view::value_type *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13.__size_ = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    v13.__size_ = v22.__r_.__value_.__l.__size_;
  if (!std::__fs::filesystem::path::__compare(&v23, v13))
  {
    v16 = 1;
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_52;
  }
  v14 = std::__fs::filesystem::path::__extension(&__dst);
  if (v14.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  if (v14.__size_ >= 0x17)
  {
    v17 = (v14.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14.__size_ | 7) != 0x17)
      v17 = v14.__size_ | 7;
    v18 = v17 + 1;
    v15 = operator new(v17 + 1);
    v27.__r_.__value_.__l.__size_ = v14.__size_;
    v27.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    goto LABEL_36;
  }
  *((_BYTE *)&v27.__r_.__value_.__s + 23) = v14.__size_;
  v15 = &v27;
  if (v14.__size_)
LABEL_36:
    memmove(v15, v14.__data_, v14.__size_);
  *((_BYTE *)v15 + v14.__size_) = 0;
  __p.__pn_ = v27;
  memset(&v27, 0, sizeof(v27));
  sub_23948900C(&v27, (std::string *)".bundle", (std::string *)"");
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19.__data_ = (const std::string_view::value_type *)&v27;
  else
    v19.__data_ = (const std::string_view::value_type *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19.__size_ = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    v19.__size_ = v27.__r_.__value_.__l.__size_;
  v16 = std::__fs::filesystem::path::__compare(&__p, v19) == 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_52;
    }
  }
  else if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v23.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_53;
  }
LABEL_52:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v23.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_47:
    a2->__pn_.__r_.__value_.__s.__data_[0] = 0;
    a2[1].__pn_.__r_.__value_.__s.__data_[0] = 0;
    v20 = v25;
    if (v16)
      goto LABEL_48;
    goto LABEL_54;
  }
LABEL_53:
  operator delete(v23.__pn_.__r_.__value_.__l.__data_);
  a2->__pn_.__r_.__value_.__s.__data_[0] = 0;
  a2[1].__pn_.__r_.__value_.__s.__data_[0] = 0;
  v20 = v25;
  if (v16)
  {
LABEL_48:
    if (v20)
    {
      *a2 = __dst;
      a2[1].__pn_.__r_.__value_.__s.__data_[0] = 1;
    }
    goto LABEL_57;
  }
LABEL_54:
  if (v20 && SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
LABEL_57:
  if (v8 < 0)
    operator delete((void *)v7);
}

void sub_23962FE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  void *v34;
  int v35;

  if (a34 && a33 < 0)
    operator delete(__p);
  if (v35 < 0)
    operator delete(v34);
  _Unwind_Resume(exception_object);
}

const void **sub_23962FF4C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_239630614((int)a1, v2);
  return a1;
}

void sub_23962FF88()
{
  JUMPOUT(0x23B83E31CLL);
}

void sub_23962FF9C(std::string *a1@<X8>)
{
  const __CFString *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (const __CFString *)MGGetStringAnswer();
  cf = v2;
  if (v2)
  {
    sub_239630624(v2, a1);
    v3 = cf;
    cf = 0;
    if (v3)
      sub_239630614((int)&cf, v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_23963000C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    sub_239630614((int)&cf, v11);
  _Unwind_Resume(exception_object);
}

void sub_239630030(std::string *a1@<X8>)
{
  const __CFString *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (const __CFString *)MGGetStringAnswer();
  cf = v2;
  if (v2)
  {
    sub_239630624(v2, a1);
    v3 = cf;
    cf = 0;
    if (v3)
      sub_239630614((int)&cf, v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2396300A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    sub_239630614((int)&cf, v11);
  _Unwind_Resume(exception_object);
}

void sub_2396300C4(std::string *a1@<X8>)
{
  const __CFString *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (const __CFString *)MGGetStringAnswer();
  cf = v2;
  if (v2)
  {
    sub_239630624(v2, a1);
    v3 = cf;
    cf = 0;
    if (v3)
      sub_239630614((int)&cf, v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_239630134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    sub_239630614((int)&cf, v11);
  _Unwind_Resume(exception_object);
}

void sub_239630158(std::string *a1@<X8>)
{
  const __CFString *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (const __CFString *)MGGetStringAnswer();
  cf = v2;
  if (v2)
  {
    sub_239630624(v2, a1);
    v3 = cf;
    cf = 0;
    if (v3)
      sub_239630614((int)&cf, v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2396301C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    sub_239630614((int)&cf, v11);
  _Unwind_Resume(exception_object);
}

void sub_2396301EC(std::string *a1@<X8>)
{
  const __CFString *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (const __CFString *)MGGetStringAnswer();
  cf = v2;
  if (v2)
  {
    sub_239630624(v2, a1);
    v3 = cf;
    cf = 0;
    if (v3)
      sub_239630614((int)&cf, v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_23963025C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    sub_239630614((int)&cf, v11);
  _Unwind_Resume(exception_object);
}

void sub_239630280(std::string *a1@<X8>)
{
  const __CFString *v2;
  CFTypeRef v3;
  CFTypeRef cf;

  v2 = (const __CFString *)MGGetStringAnswer();
  cf = v2;
  if (v2)
  {
    sub_239630624(v2, a1);
    v3 = cf;
    cf = 0;
    if (v3)
      sub_239630614((int)&cf, v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_2396302F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFTypeRef v11;

  v11 = cf;
  cf = 0;
  if (v11)
    sub_239630614((int)&cf, v11);
  _Unwind_Resume(exception_object);
}

void sub_239630314(uint64_t a1@<X8>)
{
  const __CFString *v2;
  CFTypeRef v3;
  std::string::value_type v4;
  std::string::size_type v5;
  __int16 v6;
  char v7;
  int v8;
  std::string __p;
  std::string::value_type v10;
  CFTypeRef cf;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFString *)MGGetStringAnswer();
  cf = v2;
  if (v2)
  {
    sub_239630624(v2, &__p);
    v3 = cf;
    cf = 0;
    if (v3)
      sub_239630614((int)&cf, v3);
    v4 = v10;
    if (v10)
    {
      v5 = __p.__r_.__value_.__r.__words[0];
      v6 = __p.__r_.__value_.__r.__words[1];
      v4 = __p.__r_.__value_.__s.__data_[10];
      cf = *(CFTypeRef *)((char *)&__p.__r_.__value_.__r.__words[1] + 3);
      v12 = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3);
      v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v8 = 1;
      memset(&__p, 0, sizeof(__p));
      goto LABEL_9;
    }
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v4 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v10 = 0;
  }
  v7 = 10;
  v6 = 28271;
  v5 = 0x69746375646F7250;
LABEL_9:
  *(_QWORD *)a1 = v5;
  *(_WORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 10) = v4;
  *(_QWORD *)(a1 + 11) = cf;
  *(_DWORD *)(a1 + 19) = v12;
  *(_BYTE *)(a1 + 23) = v7;
  *(_BYTE *)(a1 + 24) = 1;
  if (v8)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239630438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_239416A48(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23963045C()
{
  return MGGetSInt64Answer();
}

uint64_t sub_239630480()
{
  const void *v0;
  const void *v1;
  uint64_t v3;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  v3 = 0;
  sub_239630614((int)&v3, v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_239630504()
{
  const void *v0;
  const void *v1;
  uint64_t v3;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  v3 = 0;
  sub_239630614((int)&v3, v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_239630588()
{
  const void *v0;
  const void *v1;
  uint64_t v3;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  v3 = 0;
  sub_239630614((int)&v3, v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_23963060C()
{
  return 256;
}

void sub_239630614(int a1, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

const __CFString *sub_239630624@<X0>(const __CFString *result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFIndex v4;
  std::string *v5;
  std::string v6;
  CFIndex maxBufLen;
  CFRange v8;
  CFRange v9;

  if (!result)
    goto LABEL_8;
  v3 = result;
  result = (const __CFString *)CFStringGetLength(result);
  if (result)
  {
    v4 = (CFIndex)result;
    maxBufLen = 0;
    v8.location = 0;
    v8.length = (CFIndex)result;
    result = (const __CFString *)CFStringGetBytes(v3, v8, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    if ((uint64_t)result > 0)
    {
      memset(&v6, 0, sizeof(v6));
      std::string::resize(&v6, maxBufLen, 0);
      if ((v6.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v6;
      else
        v5 = (std::string *)v6.__r_.__value_.__r.__words[0];
      v9.location = 0;
      v9.length = v4;
      result = (const __CFString *)CFStringGetBytes(v3, v9, 0x8000100u, 0, 0, (UInt8 *)v5, maxBufLen, 0);
      *a2 = v6;
      goto LABEL_10;
    }
LABEL_8:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_10:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_239630734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239630750(uint64_t a1, __int32 *a2, __int32 *a3, __int32 a4, unsigned int *a5, _DWORD *a6, uint64_t *a7, uint64_t a8, char a9)
{
  __int32 v9;
  __int32 v16;
  uint64_t v17;
  unint64_t v19;
  int8x8_t *v20;
  int8x8_t *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t i;
  float32x2_t *v28;
  int32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  int8x8_t v32;
  float v33;
  float v34;
  __int32 v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8x8_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t *v50;
  char *v51;
  int8x8_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  size_t v74;
  size_t v75;
  void *v76;
  void **v77;
  void *v78;
  int v79;
  unsigned int *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  int v84;
  unint64_t v85;
  void **v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  int *v94;
  unint64_t v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  _BYTE *v104;
  _QWORD *v105;
  _QWORD *v106;
  void *v107;
  std::bad_alloc *exception;
  std::bad_alloc *v109;
  std::bad_alloc *v110;
  std::bad_alloc *v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int *v114;
  int8x8_t v115;
  void *__src[2];
  unsigned int v117;
  void *__p;
  unint64_t v119;
  uint64_t v120;
  void *v121[2];
  void *v122[2];
  int v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  __int32 v131;
  __int32 v132;
  uint64_t v133;
  void *memptr[2];

  v9 = *a2;
  if (*a2 > a4)
    sub_239EBF3AC();
  v130 = a1;
  v16 = *a3;
  v131 = v9;
  v132 = v16;
  v133 = a4;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  if (sub_23963CCF8(&v130, a5, a7, *a6)
    || sub_23963CD48(a7, (uint64_t)a5, (uint64_t)&v127, (uint64_t)&v124, *a6))
  {
    return 0;
  }
  v112 = (uint64_t)a7;
  v19 = v127;
  v20 = *(int8x8_t **)a8;
  v114 = a5;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a8 + 16) - *(_QWORD *)a8) >> 2) < v127)
  {
    if (v127 > 0xCCCCCCCCCCCCCCCLL)
      sub_2394189F8();
    v21 = *(int8x8_t **)(a8 + 8);
    v22 = (char *)operator new(20 * v127);
    v23 = &v22[20 * (((char *)v21 - (char *)v20) / 20)];
    v24 = v23;
    if (v21 != v20)
    {
      v25 = &v22[20 * (((char *)v21 - (char *)v20) / 20)];
      do
      {
        v26 = *(_OWORD *)&v21[-3].u8[4];
        v24 = v25 - 20;
        *((_DWORD *)v25 - 1) = v21[-1].i32[1];
        *(_OWORD *)(v25 - 20) = v26;
        v21 = (int8x8_t *)((char *)v21 - 20);
        v25 -= 20;
      }
      while (v21 != v20);
    }
    *(_QWORD *)a8 = v24;
    *(_QWORD *)(a8 + 8) = v23;
    *(_QWORD *)(a8 + 16) = &v22[20 * v19];
    if (v20)
      operator delete(v20);
  }
  *(_OWORD *)v121 = 0u;
  *(_OWORD *)v122 = 0u;
  v123 = 1065353216;
  __p = 0;
  v119 = 0;
  v120 = 0;
  sub_2394187EC((uint64_t)&__p, v19);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      while (1)
      {
        v28 = (float32x2_t *)((char *)v128 + 148 * i);
        v29.i32[0] = *a2;
        v29.i32[1] = *a3;
        v30 = vadd_f32(*v28, (float32x2_t)0x3F0000003F000000);
        v31 = vcvt_f32_s32(v29);
        v32 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v30, v31), (int8x8_t)v31, (int8x8_t)v30), (int8x8_t)vcltz_f32(v30));
        v33 = (float)(v28[1].f32[1] / 180.0) * 3.14159265;
        v34 = v28[1].f32[0] * 0.5;
        v35 = v28[2].i32[0];
        v36 = v32.u32[0];
        if (*(float *)v32.i32 == 0.0)
          v36 = 0;
        v37 = v32.u32[1];
        if (*(float *)&v32.i32[1] == 0.0)
          v37 = 0;
        v38 = ((v36 >> 2) + 2654435769u + (v36 << 6) + v37) ^ v36;
        v39 = v34 == 0.0 ? 2654435769 : LODWORD(v34) + 2654435769;
        v40 = (v39 + (v38 >> 2) + (v38 << 6)) ^ v38;
        v41 = v33 == 0.0 ? 2654435769 : LODWORD(v33) + 2654435769;
        v42 = (v41 + (v40 >> 2) + (v40 << 6)) ^ v40;
        __src[0] = (void *)v42;
        if (v121[1])
        {
          v43 = (uint8x8_t)vcnt_s8((int8x8_t)v121[1]);
          v43.i16[0] = vaddlv_u8(v43);
          if (v43.u32[0] > 1uLL)
          {
            v44 = v42;
            if ((void *)v42 >= v121[1])
              v44 = v42 % (unint64_t)v121[1];
          }
          else
          {
            v44 = v42 & ((unint64_t)v121[1] - 1);
          }
          v45 = (_QWORD *)*((_QWORD *)v121[0] + v44);
          if (v45)
          {
            v46 = (_QWORD *)*v45;
            if (v46)
              break;
          }
        }
LABEL_45:
        v50 = *(int8x8_t **)(a8 + 8);
        v49 = *(_QWORD *)(a8 + 16);
        if ((unint64_t)v50 >= v49)
        {
          v52 = *(int8x8_t **)a8;
          v53 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v50 - *(_QWORD *)a8) >> 2);
          v54 = v53 + 1;
          if (v53 + 1 > 0xCCCCCCCCCCCCCCCLL)
            sub_2394189F8();
          v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v49 - (_QWORD)v52) >> 2);
          if (2 * v55 > v54)
            v54 = 2 * v55;
          if (v55 >= 0x666666666666666)
            v56 = 0xCCCCCCCCCCCCCCCLL;
          else
            v56 = v54;
          if (v56)
          {
            v115 = v32;
            if (v56 > 0xCCCCCCCCCCCCCCCLL)
              sub_239418A80();
            v57 = (char *)operator new(20 * v56);
            v32 = v115;
          }
          else
          {
            v57 = 0;
          }
          v58 = &v57[20 * v53];
          *(int8x8_t *)v58 = v32;
          *((float *)v58 + 2) = v33;
          *((float *)v58 + 3) = v34;
          *((_DWORD *)v58 + 4) = v35;
          v59 = v58;
          if (v50 != v52)
          {
            do
            {
              v60 = *(_OWORD *)&v50[-3].u8[4];
              *((_DWORD *)v59 - 1) = v50[-1].i32[1];
              *(_OWORD *)(v59 - 20) = v60;
              v59 -= 20;
              v50 = (int8x8_t *)((char *)v50 - 20);
            }
            while (v50 != v52);
            v50 = *(int8x8_t **)a8;
          }
          v61 = &v57[20 * v56];
          v51 = v58 + 20;
          *(_QWORD *)a8 = v59;
          *(_QWORD *)(a8 + 8) = v58 + 20;
          *(_QWORD *)(a8 + 16) = v61;
          if (v50)
            operator delete(v50);
        }
        else
        {
          *v50 = v32;
          *(float *)v50[1].i32 = v33;
          *(float *)&v50[1].i32[1] = v34;
          v51 = (char *)&v50[2] + 4;
          v50[2].i32[0] = v35;
        }
        *(_QWORD *)(a8 + 8) = v51;
        v62 = v119;
        if (v119 == v120 << 6)
        {
          if ((uint64_t)(v119 + 1) < 0)
            sub_2394189F8();
          v63 = v120 << 7;
          if (v120 << 7 <= (v119 & 0xFFFFFFFFFFFFFFC0) + 64)
            v63 = (v119 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v119 <= 0x3FFFFFFFFFFFFFFELL)
            v64 = v63;
          else
            v64 = 0x7FFFFFFFFFFFFFFFLL;
          sub_2394187EC((uint64_t)&__p, v64);
          v62 = v119;
        }
        v119 = v62 + 1;
        *(_QWORD *)((char *)__p + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
        sub_239465800((uint64_t)v121, (unint64_t *)__src, __src);
        if (++i == v19)
          goto LABEL_81;
      }
      if (v43.u32[0] < 2uLL)
      {
        while (1)
        {
          v48 = v46[1];
          if (v48 == v42)
          {
            if (v46[2] == v42)
              goto LABEL_72;
          }
          else if ((v48 & ((unint64_t)v121[1] - 1)) != v44)
          {
            goto LABEL_45;
          }
          v46 = (_QWORD *)*v46;
          if (!v46)
            goto LABEL_45;
        }
      }
      while (1)
      {
        v47 = v46[1];
        if (v47 == v42)
          break;
        if ((void *)v47 >= v121[1])
          v47 %= (unint64_t)v121[1];
        if (v47 != v44)
          goto LABEL_45;
LABEL_35:
        v46 = (_QWORD *)*v46;
        if (!v46)
          goto LABEL_45;
      }
      if (v46[2] != v42)
        goto LABEL_35;
LABEL_72:
      v65 = v119;
      if (v119 == v120 << 6)
      {
        if ((uint64_t)(v119 + 1) < 0)
          sub_2394189F8();
        v66 = v120 << 7;
        if (v120 << 7 <= (v119 & 0xFFFFFFFFFFFFFFC0) + 64)
          v66 = (v119 & 0xFFFFFFFFFFFFFFC0) + 64;
        if (v119 <= 0x3FFFFFFFFFFFFFFELL)
          v67 = v66;
        else
          v67 = 0x7FFFFFFFFFFFFFFFLL;
        sub_2394187EC((uint64_t)&__p, v67);
        v65 = v119;
      }
      v119 = v65 + 1;
      *(_QWORD *)((char *)__p + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v65);
    }
  }
LABEL_81:
  if ((a9 & 1) != 0)
  {
LABEL_99:
    v77 = (void **)(a8 + 48);
    if (*(_BYTE *)(a8 + 72))
    {
      v78 = *v77;
      if (*v77)
      {
        *(_QWORD *)(a8 + 56) = v78;
        operator delete(v78);
        v79 = *(unsigned __int8 *)(a8 + 72);
        *(_QWORD *)(a8 + 56) = 0;
        *(_QWORD *)(a8 + 64) = 0;
        *v77 = 0;
        v80 = v114;
        if (!v79)
          sub_2394875CC();
        if (v19)
          goto LABEL_103;
LABEL_139:
        v104 = 0;
        v81 = 0;
LABEL_140:
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 2) != (v81 - v104) >> 2)
        {
          sub_239A444D4((uint64_t)"unknown file", 118, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        free(v128);
        v127 = 0;
        v128 = 0;
        v129 = 0;
        free(v125);
        v124 = 0;
        v125 = 0;
        v17 = 1;
        v126 = 0;
        goto LABEL_142;
      }
      *v77 = 0;
      *(_QWORD *)(a8 + 56) = 0;
      *(_QWORD *)(a8 + 64) = 0;
      v80 = v114;
      if (!v19)
        goto LABEL_139;
    }
    else
    {
      *v77 = 0;
      *(_QWORD *)(a8 + 56) = 0;
      *(_QWORD *)(a8 + 64) = 0;
      *(_BYTE *)(a8 + 72) = 1;
      v80 = v114;
      if (!v19)
        goto LABEL_139;
    }
LABEL_103:
    if (v19 >> 62)
      sub_2394189F8();
    v81 = (char *)operator new(4 * v19);
    v82 = 0;
    *(_QWORD *)(a8 + 48) = v81;
    *(_QWORD *)(a8 + 56) = v81;
    *(_QWORD *)(a8 + 64) = &v81[4 * v19];
    v83 = v81;
    v113 = v19;
    while (1)
    {
      if (((*(_QWORD *)((char *)__p + ((v82 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v82) & 1) == 0)
        goto LABEL_107;
      v84 = *((_DWORD *)v125 + 2 * v82 + 1) + v80[1] * *((_DWORD *)v125 + 2 * v82) - 1;
      v85 = *(_QWORD *)(a8 + 64);
      if ((unint64_t)v83 >= v85)
        break;
      *(_DWORD *)v83 = v84;
      v81 = v83 + 4;
LABEL_106:
      *(_QWORD *)(a8 + 56) = v81;
      v83 = v81;
LABEL_107:
      if (++v82 == v19)
      {
        v104 = *v77;
        goto LABEL_140;
      }
    }
    v86 = v77;
    v87 = (char *)*v77;
    v88 = v83 - (_BYTE *)*v77;
    v89 = v88 >> 2;
    v90 = (v88 >> 2) + 1;
    if (v90 >> 62)
      sub_2394189F8();
    v91 = v85 - (_QWORD)v87;
    if (v91 >> 1 > v90)
      v90 = v91 >> 1;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
      v92 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    if (v92)
    {
      if (v92 >> 62)
        sub_239418A80();
      v93 = operator new(4 * v92);
      v94 = (int *)&v93[4 * v89];
      *v94 = v84;
      v81 = (char *)(v94 + 1);
      if (v83 != v87)
      {
LABEL_119:
        v95 = v83 - 4 - v87;
        if (v95 < 0xBC
          || &v93[v88 - 4 - (v95 & 0xFFFFFFFFFFFFFFFCLL)] > &v93[v88 - 4]
          || &v83[-(v95 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v83 - 4
          || (unint64_t)(v83 - v93 - v88) < 0x20)
        {
          v96 = v83;
          v77 = v86;
        }
        else
        {
          v98 = (v95 >> 2) + 1;
          v99 = 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
          v96 = &v83[-v99];
          v94 = (int *)((char *)v94 - v99);
          v100 = &v93[4 * v89 - 16];
          v101 = v83 - 16;
          v102 = v98 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v103 = *(_OWORD *)v101;
            *(v100 - 1) = *((_OWORD *)v101 - 1);
            *v100 = v103;
            v100 -= 2;
            v101 -= 32;
            v102 -= 8;
          }
          while (v102);
          v77 = v86;
          if (v98 == (v98 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_122:
            *(_QWORD *)(a8 + 48) = v94;
            *(_QWORD *)(a8 + 56) = v81;
            *(_QWORD *)(a8 + 64) = &v93[4 * v92];
            v19 = v113;
            if (!v87)
            {
LABEL_124:
              v80 = v114;
              goto LABEL_106;
            }
LABEL_123:
            operator delete(v87);
            goto LABEL_124;
          }
        }
        do
        {
          v97 = *((_DWORD *)v96 - 1);
          v96 -= 4;
          *--v94 = v97;
        }
        while (v96 != v87);
        goto LABEL_122;
      }
    }
    else
    {
      v93 = 0;
      v94 = (int *)(4 * v89);
      *(_DWORD *)(4 * v89) = v84;
      v81 = (char *)(4 * v89 + 4);
      if (v83 != v87)
        goto LABEL_119;
    }
    v77 = v86;
    *(_QWORD *)(a8 + 48) = v94;
    *(_QWORD *)(a8 + 56) = v81;
    *(_QWORD *)(a8 + 64) = &v93[4 * v92];
    v19 = v113;
    if (!v87)
      goto LABEL_124;
    goto LABEL_123;
  }
  sub_2394188EC((char **)(a8 + 24), v19);
  if (!sub_23963D1BC(v112, (uint64_t *)&v127, (uint64_t)&v124))
  {
    if (v19)
    {
      v68 = 0;
      v69 = 20;
      do
      {
        if (((*(_QWORD *)((char *)__p + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v68) & 1) != 0)
        {
          __src[0] = 0;
          __src[1] = (void *)128;
          memptr[0] = 0;
          malloc_type_posix_memalign(memptr, 0x20uLL, 0x80uLL, 0x100BBD03uLL);
          __src[0] = memptr[0];
          if (!memptr[0])
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v109 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v109, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          v71 = 0;
          v117 = 128;
          v72 = (char *)v128 + v69;
          do
          {
            *((_BYTE *)__src[0] + v71) = v72[v71] ^ 0x80;
            ++v71;
          }
          while (v71 != 128);
          v73 = *(_QWORD *)(a8 + 32);
          if (v73 >= *(_QWORD *)(a8 + 40))
          {
            v70 = sub_2396317E4((void **)(a8 + 24), (uint64_t)__src);
          }
          else
          {
            v74 = v117;
            v75 = (v117 + 31) & 0x1FFFFFFE0;
            *(_QWORD *)v73 = 0;
            *(_QWORD *)(v73 + 8) = v75;
            memptr[0] = 0;
            malloc_type_posix_memalign(memptr, 0x20uLL, v75, 0x100BBD03uLL);
            v76 = memptr[0];
            *(void **)v73 = memptr[0];
            if (!v76)
            {
              v110 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
              v111 = std::bad_alloc::bad_alloc(v110);
              __cxa_throw(v111, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
            }
            if ((_DWORD)v74)
              memcpy(v76, __src[0], v74);
            *(_DWORD *)(v73 + 16) = v117;
            v70 = (char *)(v73 + 24);
            *(_QWORD *)(a8 + 32) = v73 + 24;
          }
          *(_QWORD *)(a8 + 32) = v70;
          free(__src[0]);
        }
        ++v68;
        v69 += 148;
      }
      while (v68 != v19);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 2) != 0xAAAAAAAAAAAAAAABLL
                                                                                       * ((uint64_t)(*(_QWORD *)(a8 + 32)
                                                                                                  - *(_QWORD *)(a8 + 24)) >> 3))
    {
      sub_239A444D4((uint64_t)"unknown file", 106, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    goto LABEL_99;
  }
  v17 = 0;
LABEL_142:
  if (__p)
    operator delete(__p);
  v105 = v122[0];
  if (v122[0])
  {
    do
    {
      v106 = (_QWORD *)*v105;
      operator delete(v105);
      v105 = v106;
    }
    while (v106);
  }
  v107 = v121[0];
  v121[0] = 0;
  if (v107)
    operator delete(v107);
  return v17;
}

void sub_23963122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  sub_239420950((uint64_t)&a21);
  _Unwind_Resume(a1);
}

int32x2_t **sub_2396312A0(int32x2_t **a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int32x2_t *v9;
  _OWORD v11[3];
  __int32 v12;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 104) = 8;
  *a1 = (int32x2_t *)v4;
  a1[1] = (int32x2_t *)sub_2396319F8;
  *(_DWORD *)(v4 + 56) = *(unsigned __int8 *)(a2 + 20);
  sub_23963CC9C((uint64_t)v11);
  v5 = *a1;
  v6 = v11[0];
  v7 = v11[1];
  v8 = v11[2];
  v5[6].i32[0] = v12;
  *(_OWORD *)v5[2].i8 = v7;
  *(_OWORD *)v5[4].i8 = v8;
  *(_OWORD *)v5->i8 = v6;
  v9 = *a1;
  v9->i32[0] = *(_DWORD *)(a2 + 12);
  v9->i32[1] = *(_DWORD *)(a2 + 36);
  v9[1].i32[0] = *(_DWORD *)(a2 + 24);
  v9[1].i32[1] = 0;
  v9[2].i32[0] = *(_DWORD *)a2;
  v9[2].i32[1] = *(_DWORD *)(a2 + 40);
  v9[3].i32[0] = *(_DWORD *)(a2 + 44);
  v9[3].i32[1] = *(_DWORD *)(a2 + 48);
  v9[4] = *(int32x2_t *)(a2 + 52);
  v9[5].i32[0] = *(_DWORD *)(a2 + 60);
  v9[5].i32[1] = *(_DWORD *)(a2 + 4);
  v9[6] = vrev64_s32(*(int32x2_t *)(a2 + 28));
  v9[11].i8[0] = *(_BYTE *)(a2 + 8);
  v9[11].i32[1] = *(_DWORD *)(a2 + 16);
  v9[12] = (int32x2_t)-1;
  return a1;
}

void sub_2396313B4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    ((void (*)(void))v1[1])();
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2396313DC(uint64_t *a1)
{
  uint64_t v2;

  sub_23963CB40(*a1 + 64);
  v2 = *a1;
  *a1 = 0;
  if (v2)
    ((void (*)(void))a1[1])();
  return a1;
}

uint64_t sub_239631424(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  signed int v10;
  signed int v11;
  unsigned int *v12;
  signed int v13;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  char v37;
  char *v38;
  char *v39;
  void *v40;
  void *v41;
  uint64_t v43;
  void *v44[2];
  void *v45[2];
  __int128 v46;
  void *__p;
  void *v48;
  char v49;
  unsigned int v50;
  unsigned int v51;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v6 = *(_QWORD *)(a3 + 24);
  for (i = *(_QWORD *)(a3 + 32); i != v6; i -= 24)
  {
    v8 = *(void **)(i - 24);
    free(v8);
  }
  *(_QWORD *)(a3 + 32) = v6;
  if (*(_BYTE *)(a3 + 72))
  {
    v9 = *(void **)(a3 + 48);
    if (v9)
    {
      *(_QWORD *)(a3 + 56) = v9;
      operator delete(v9);
    }
    *(_BYTE *)(a3 + 72) = 0;
  }
  v10 = *(_DWORD *)(a2 + 32);
  v11 = *(_DWORD *)(a2 + 36);
  v50 = v11;
  v51 = v10;
  v12 = *a1;
  v13 = (*a1)[26];
  if (v10 < v13 || v11 < v13)
    return 0;
  if (v11 != v12[24] || v10 != v12[25])
  {
    sub_23963CB40((uint64_t)(v12 + 16));
    v16 = *a1;
    *((_QWORD *)v16 + 8) = 0;
    *((_QWORD *)v16 + 9) = 0;
    *((_QWORD *)v16 + 10) = 0;
    v17 = *a1;
    v17[24] = v11;
    v17[25] = v10;
  }
  v49 = 0;
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  LOBYTE(__p) = 0;
  v18 = *(_QWORD *)(a2 + 8);
  if (!v18)
    goto LABEL_32;
  v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v18 = *(_QWORD *)(a2 + 8);
    v23 = *(std::__shared_weak_count **)(a2 + 16);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      do
        v26 = __ldaxr(v24);
      while (__stlxr(v26 - 1, v24));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  if (*(_BYTE *)(a2 + 49))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v18 + 96))(&v43, v18, 0);
    v27 = *(_QWORD *)(a2 + 24);
    if (!*(_BYTE *)(a2 + 48))
      goto LABEL_41;
  }
  else
  {
LABEL_32:
    v43 = 0;
    v27 = *(_QWORD *)(a2 + 24);
    if (!*(_BYTE *)(a2 + 48))
      goto LABEL_41;
  }
  if (v27)
  {
    v28 = *(_QWORD *)(a2 + 8);
    v29 = *(std::__shared_weak_count **)(a2 + 16);
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      do
        v32 = __ldaxr(v30);
      while (__stlxr(v32 - 1, v30));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v28 + 88))(v28, 0, "unknown location");
    v27 = *(_QWORD *)(a2 + 24);
  }
LABEL_41:
  v33 = sub_239630750(v27, (__int32 *)&v51, (__int32 *)&v50, *(_DWORD *)(a2 + 44), *a1, *a1 + 14, (uint64_t *)*a1 + 8, (uint64_t)v44, *((_BYTE *)*a1 + 88));
  v34 = v43;
  v43 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  if ((v33 & 1) == 0)
  {
    v15 = 1;
    if (!v49)
      goto LABEL_58;
    goto LABEL_56;
  }
  v35 = *a1;
  v36 = (*a1)[23];
  if (!v36)
  {
    v37 = sub_239631A14((uint64_t *)v44, a3, (int)v35[13]);
    goto LABEL_54;
  }
  if (v36 == 1)
  {
    v37 = sub_2396326C8(v51, v50, (uint64_t *)v44, a3, (int)v35[13], 9u, 0, 0);
LABEL_54:
    if ((v37 & 1) == 0)
      goto LABEL_48;
    goto LABEL_55;
  }
  if (v36 != 2 || !sub_239633760((uint64_t *)v44, a3, (int)v35[13], 0))
  {
LABEL_48:
    v15 = 3;
    if (!v49)
      goto LABEL_58;
LABEL_56:
    if (__p)
    {
      v48 = __p;
      operator delete(__p);
    }
    goto LABEL_58;
  }
LABEL_55:
  v15 = 0;
  if (v49)
    goto LABEL_56;
LABEL_58:
  v38 = (char *)v45[1];
  if (v45[1])
  {
    v39 = (char *)v46;
    v40 = v45[1];
    if ((void *)v46 != v45[1])
    {
      do
      {
        v41 = (void *)*((_QWORD *)v39 - 3);
        v39 -= 24;
        free(v41);
      }
      while (v39 != v38);
      v40 = v45[1];
    }
    *(_QWORD *)&v46 = v38;
    operator delete(v40);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  return v15;
}

void sub_23963178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394162A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396317A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2394162A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2396317B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  sub_2394162A0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2396317E4(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  void *v12;
  char *v13;
  void **v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void **v19;
  void **v20;
  void **v21;
  void *v22;
  BOOL v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  char *v27;
  void *memptr;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  v10 = *(unsigned int *)(a2 + 16);
  v11 = (v10 + 31) & 0x1FFFFFFE0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = v11;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x100BBD03uLL);
  v12 = memptr;
  *(_QWORD *)v8 = memptr;
  if (!v12)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v26, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v10)
    memcpy(v12, *(const void **)a2, v10);
  *((_DWORD *)v8 + 4) = *(_DWORD *)(a2 + 16);
  v13 = v8 + 24;
  v27 = v8 + 24;
  v15 = (char *)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
    v19 = (void **)a1[1];
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v8[v16 * 8];
      v18 = (char *)&v14[v16];
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 3) = v14[v16 - 3];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v17 - 2) = v14[v16 - 2];
      *((_QWORD *)v18 - 2) = 0;
      *((_DWORD *)v17 - 2) = v14[v16 - 1];
      *((_DWORD *)v18 - 2) = 0;
      v16 -= 3;
    }
    while (&v14[v16] != (void **)v15);
    v19 = (void **)*a1;
    v14 = (void **)a1[1];
    v8 += v16 * 8;
    v13 = v27;
  }
  *a1 = v8;
  a1[1] = v13;
  a1[2] = v9;
  if (v14 != v19)
  {
    v20 = v14 - 3;
    v21 = v14 - 3;
    do
    {
      v22 = *v21;
      v21 -= 3;
      free(v22);
      v23 = v20 == v19;
      v20 = v21;
    }
    while (!v23);
    v14 = v19;
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_2396319E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23942A88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2396319F8(uint64_t result)
{
  if (result)
    JUMPOUT(0x23B83E31CLL);
  return result;
}

BOOL sub_239631A14(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  int v3;
  void **v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  int v19;
  unint64_t v20;
  int32x4_t v21;
  int32x4_t *v22;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int32x4_t *v28;
  int32x4_t *v29;
  unint64_t v30;
  int v31;
  __int32 *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int32x4_t *v40;
  int32x4_t v41;
  uint64_t v42;
  int32x4_t v43;
  int v44;
  int v45;
  char *v46;
  __int32 v47;
  uint64_t v48;
  unint64_t v49;
  BOOL v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  _BYTE *v58;
  _BYTE *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char *v83;
  void **v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  void **v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 *v106;
  uint64_t v107;
  __int128 v108;
  int v109;
  uint64_t i;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  __int128 v126;
  char *v127;
  char *v128;
  __int128 v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _BYTE *v137;
  _DWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _OWORD *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  size_t v151;
  size_t v152;
  void *v153;
  std::bad_alloc *exception;
  std::bad_alloc *v156;
  void *__p;
  int v158;
  void **v159;
  uint64_t *v160;
  void **v161;
  _BOOL4 v162;
  uint64_t *v163;
  int32x4_t *v164;
  void *memptr[2];

  v3 = *((unsigned __int8 *)a1 + 72);
  if (!*((_BYTE *)a1 + 72))
    return v3 != 0;
  v7 = (void **)(a2 + 48);
  if (*(_BYTE *)(a2 + 72))
  {
    v8 = *v7;
    if (*v7)
    {
      *(_QWORD *)(a2 + 56) = v8;
      operator delete(v8);
      v9 = *(unsigned __int8 *)(a2 + 72);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = 0;
      if (!v9)
        sub_2394875CC();
      v158 = v3;
      v10 = a1[4] - a1[3];
      v163 = a1;
      if (v10)
      {
LABEL_6:
        v11 = *a1;
        v12 = a1[1];
        v13 = (v12 - *a1) / 20;
        v162 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3) == v13;
        v164 = 0;
        if (v12 != *a1)
          goto LABEL_7;
LABEL_13:
        v15 = 0;
        v16 = 0;
LABEL_14:
        v19 = 1;
        goto LABEL_22;
      }
    }
    else
    {
      *v7 = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      v158 = v3;
      v10 = a1[4] - a1[3];
      v163 = a1;
      if (v10)
        goto LABEL_6;
    }
  }
  else
  {
    *v7 = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(a2 + 72) = 1;
    v158 = v3;
    v10 = a1[4] - a1[3];
    v163 = a1;
    if (v10)
      goto LABEL_6;
  }
  v162 = 0;
  v11 = *a1;
  v12 = a1[1];
  v13 = (v12 - *a1) / 20;
  v164 = 0;
  if (v12 == *a1)
    goto LABEL_13;
LABEL_7:
  if (v13 >> 62)
    sub_2394189F8();
  v14 = 4 * v13;
  v15 = (int32x4_t *)operator new(4 * v13);
  v164 = v15;
  bzero(v15, 4 * v13);
  v16 = (unsigned int *)v15 + v13;
  if (!v13)
    goto LABEL_14;
  if ((unint64_t)(v14 - 4) >= 0x1C)
  {
    v20 = ((unint64_t)(v14 - 4) >> 2) + 1;
    v17 = v20 & 0x7FFFFFFFFFFFFFF8;
    v18 = (unsigned int *)v15 + (v20 & 0x7FFFFFFFFFFFFFF8);
    v21 = (int32x4_t)xmmword_239EC6870;
    v22 = v15 + 1;
    v23.i64[0] = 0x400000004;
    v23.i64[1] = 0x400000004;
    v24.i64[0] = 0x800000008;
    v24.i64[1] = 0x800000008;
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v22[-1] = v21;
      *v22 = vaddq_s32(v21, v23);
      v21 = vaddq_s32(v21, v24);
      v22 += 2;
      v25 -= 8;
    }
    while (v25);
    if (v20 == v17)
      goto LABEL_21;
  }
  else
  {
    LODWORD(v17) = 0;
    v18 = (unsigned int *)v15;
  }
  do
  {
    *v18++ = v17;
    LODWORD(v17) = v17 + 1;
  }
  while (v18 != v16);
LABEL_21:
  v19 = 0;
LABEL_22:
  v160 = v163 + 6;
  v161 = (void **)(a2 + 24);
  memptr[0] = v163;
  memptr[1] = v163 + 6;
  v26 = 126 - 2 * __clz(((char *)v16 - (char *)v15) >> 2);
  if (v19)
    v27 = 0;
  else
    v27 = v26;
  sub_239633D9C((uint64_t)v15, v16, (uint64_t **)memptr, v27, 1);
  if (!a3 || v13 <= a3)
  {
    v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (v13 <= v33)
    {
      if (v13 < v33)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 20 * v13;
    }
    else
    {
      sub_239634F24((char **)a2, v13 - v33);
    }
    v34 = *(_QWORD *)(a2 + 48);
    v35 = (*(_QWORD *)(a2 + 56) - v34) >> 2;
    if (v13 <= v35)
    {
      if (v13 < v35)
        *(_QWORD *)(a2 + 56) = v34 + 4 * v13;
    }
    else
    {
      sub_23942CB44((uint64_t)v7, v13 - v35);
    }
    if (v162)
    {
      v36 = *(_QWORD *)(a2 + 24);
      v37 = *(_QWORD *)(a2 + 32);
      v38 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 3);
      if (v13 <= v38)
      {
        if (v13 < v38)
        {
          v71 = v36 + 24 * v13;
          while (v37 != v71)
          {
            v72 = *(void **)(v37 - 24);
            v37 -= 24;
            free(v72);
          }
          *(_QWORD *)(a2 + 32) = v71;
        }
      }
      else
      {
        sub_23941C9CC(v161, v13 - v38);
      }
    }
    if (v12 == v11)
      goto LABEL_170;
    v73 = 0;
    v74 = 0;
    v75 = 0;
    if (v13 <= 1)
      v76 = 1;
    else
      v76 = v13;
    v77 = v163;
    v78 = v162;
    do
    {
      v79 = *v77 + 20 * v15->u32[v75];
      v80 = *(_QWORD *)a2 + v74;
      v81 = *(_OWORD *)v79;
      *(_DWORD *)(v80 + 16) = *(_DWORD *)(v79 + 16);
      *(_OWORD *)v80 = v81;
      *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v75) = *(_DWORD *)(v77[6] + 4 * v15->u32[v75]);
      if (v78)
      {
        v82 = v77[3] + 24 * v15->u32[v75];
        v83 = (char *)*v161;
        v84 = (void **)((char *)*v161 + v73);
        if (v84 != (void **)v82)
        {
          v85 = *(unsigned int *)(v82 + 16);
          sub_23941D1E8((uint64_t)*v161 + v73, v85);
          if ((_DWORD)v85)
            memcpy(*v84, *(const void **)v82, v85);
          *(_DWORD *)&v83[v73 + 16] = *(_DWORD *)(v82 + 16);
          v77 = v163;
          v78 = v162;
        }
      }
      ++v75;
      v74 += 20;
      v73 += 24;
    }
    while (v76 != v75);
LABEL_109:
    v3 = v158;
LABEL_171:
    operator delete(v15);
    return v3 != 0;
  }
  v159 = v7;
  v29 = (int32x4_t *)v163[6];
  v28 = (int32x4_t *)v163[7];
  if (v29 == v28)
  {
LABEL_68:
    v64 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (v13 <= v64)
    {
      v65 = (uint64_t)v159;
      if (v13 < v64)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 20 * v13;
    }
    else
    {
      sub_239634F24((char **)a2, v13 - v64);
      v65 = (uint64_t)v159;
    }
    v66 = *(_QWORD *)(a2 + 48);
    v67 = (*(_QWORD *)(a2 + 56) - v66) >> 2;
    if (v13 <= v67)
    {
      if (v13 < v67)
        *(_QWORD *)(a2 + 56) = v66 + 4 * v13;
    }
    else
    {
      sub_23942CB44(v65, v13 - v67);
    }
    if (v162)
    {
      v68 = *(_QWORD *)(a2 + 24);
      v69 = *(_QWORD *)(a2 + 32);
      v70 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3);
      if (v13 <= v70)
      {
        if (v13 < v70)
        {
          v86 = v68 + 24 * v13;
          while (v69 != v86)
          {
            v87 = *(void **)(v69 - 24);
            v69 -= 24;
            free(v87);
          }
          *(_QWORD *)(a2 + 32) = v86;
        }
      }
      else
      {
        sub_23941C9CC(v161, v13 - v70);
      }
    }
    if (v12 == v11)
      goto LABEL_170;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    if (v13 <= 1)
      v91 = 1;
    else
      v91 = v13;
    v92 = v163;
    v93 = v162;
    do
    {
      v94 = *v92 + 20 * v15->u32[v90];
      v95 = *(_QWORD *)a2 + v89;
      v96 = *(_OWORD *)v94;
      *(_DWORD *)(v95 + 16) = *(_DWORD *)(v94 + 16);
      *(_OWORD *)v95 = v96;
      *(_DWORD *)(*(_QWORD *)(a2 + 48) + 4 * v90) = *(_DWORD *)(v92[6] + 4 * v15->u32[v90]);
      if (v93)
      {
        v97 = v92[3] + 24 * v15->u32[v90];
        v98 = (char *)*v161;
        v99 = (void **)((char *)*v161 + v88);
        if (v99 != (void **)v97)
        {
          v100 = *(unsigned int *)(v97 + 16);
          sub_23941D1E8((uint64_t)*v161 + v88, v100);
          if ((_DWORD)v100)
            memcpy(*v99, *(const void **)v97, v100);
          *(_DWORD *)&v98[v88 + 16] = *(_DWORD *)(v97 + 16);
          v92 = v163;
          v93 = v162;
        }
      }
      ++v90;
      v89 += 20;
      v88 += 24;
    }
    while (v91 != v90);
    goto LABEL_109;
  }
  v30 = (char *)v28 - (char *)v29 - 4;
  if (v30 >= 0x1C)
  {
    v39 = (v30 >> 2) + 1;
    v32 = &v29->i32[v39 & 0x7FFFFFFFFFFFFFF8];
    v40 = v29 + 1;
    v41 = 0uLL;
    v42 = v39 & 0x7FFFFFFFFFFFFFF8;
    v43 = 0uLL;
    do
    {
      v41 = vmaxq_s32(v40[-1], v41);
      v43 = vmaxq_s32(*v40, v43);
      v40 += 2;
      v42 -= 8;
    }
    while (v42);
    v31 = vmaxvq_s32(vmaxq_s32(v41, v43));
    if (v39 == (v39 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_47;
  }
  else
  {
    v31 = 0;
    v32 = (__int32 *)v163[6];
  }
  do
  {
    v45 = *v32++;
    v44 = v45;
    if (v45 > v31)
      v31 = v44;
  }
  while (v32 != (__int32 *)v28);
LABEL_47:
  if (!v31)
    goto LABEL_68;
  v46 = (char *)operator new(4 * (v31 + 1));
  bzero(v46, 4 * (v31 + 1));
  do
  {
    v47 = v29->i32[0];
    v29 = (int32x4_t *)((char *)v29 + 4);
    ++*(_DWORD *)&v46[4 * (v31 - v47)];
  }
  while (v29 != v28);
  v48 = 0;
  v49 = 0;
  do
  {
    v49 += *(int *)&v46[v48];
    v50 = v49 > a3 || 4 * (v31 + 1) - 4 == v48;
    v48 += 4;
  }
  while (!v50);
  v51 = *(char **)a2;
  __p = v46;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 2) < v49)
  {
    if (v49 > 0xCCCCCCCCCCCCCCCLL)
      sub_2394189F8();
    v52 = *(char **)(a2 + 8);
    v53 = (char *)operator new(20 * v49);
    v54 = &v53[20 * ((v52 - v51) / 20)];
    v55 = v54;
    if (v52 != v51)
    {
      v56 = &v53[20 * ((v52 - v51) / 20)];
      do
      {
        v57 = *(_OWORD *)(v52 - 20);
        v55 = v56 - 20;
        *((_DWORD *)v56 - 1) = *((_DWORD *)v52 - 1);
        *(_OWORD *)(v56 - 20) = v57;
        v52 -= 20;
        v56 -= 20;
      }
      while (v52 != v51);
    }
    *(_QWORD *)a2 = v55;
    *(_QWORD *)(a2 + 8) = v54;
    *(_QWORD *)(a2 + 16) = &v53[20 * v49];
    if (v51)
      operator delete(v51);
  }
  v58 = *(_BYTE **)(a2 + 48);
  if (v49 <= (uint64_t)(*(_QWORD *)(a2 + 64) - (_QWORD)v58) >> 2)
    goto LABEL_117;
  if (v49 >> 62)
    sub_2394189F8();
  v59 = *(_BYTE **)(a2 + 56);
  v60 = (char *)operator new(4 * v49);
  v61 = v59 - v58;
  v62 = &v60[(v59 - v58) & 0xFFFFFFFFFFFFFFFCLL];
  v63 = v62;
  if (v59 != v58)
  {
    if ((unint64_t)(v61 - 4) < 0x2C)
    {
      v63 = &v60[(v59 - v58) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_114:
        v109 = *((_DWORD *)v59 - 1);
        v59 -= 4;
        *((_DWORD *)v63 - 1) = v109;
        v63 -= 4;
      }
      while (v59 != v58);
      goto LABEL_115;
    }
    v63 = &v60[(v59 - v58) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v59[-(v61 & 0xFFFFFFFFFFFFFFFCLL)] - v60) < 0x20)
      goto LABEL_114;
    v101 = v61 >> 2;
    v102 = ((unint64_t)(v61 - 4) >> 2) + 1;
    v103 = 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
    v104 = &v59[-v103];
    v63 = &v62[-v103];
    v105 = &v60[4 * v101 - 16];
    v106 = (__int128 *)(v59 - 16);
    v107 = v102 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v108 = *v106;
      *((_OWORD *)v105 - 1) = *(v106 - 1);
      *(_OWORD *)v105 = v108;
      v105 -= 32;
      v106 -= 2;
      v107 -= 8;
    }
    while (v107);
    v59 = v104;
    if (v102 != (v102 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_114;
  }
LABEL_115:
  *(_QWORD *)(a2 + 48) = v63;
  *(_QWORD *)(a2 + 56) = v62;
  *(_QWORD *)(a2 + 64) = &v60[4 * v49];
  if (v58)
    operator delete(v58);
LABEL_117:
  if (v162)
    sub_2394188EC((char **)v161, v49);
  if (v49)
  {
    for (i = 0; i != v49; ++i)
    {
      v112 = v164->u32[i];
      v113 = *v163 + 20 * v112;
      v115 = *(char **)(a2 + 8);
      v114 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v115 >= v114)
      {
        v120 = *(char **)a2;
        v121 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v115[-*(_QWORD *)a2] >> 2);
        v122 = v121 + 1;
        if (v121 + 1 > 0xCCCCCCCCCCCCCCCLL)
          sub_2394189F8();
        v123 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v114 - (_QWORD)v120) >> 2);
        if (2 * v123 > v122)
          v122 = 2 * v123;
        if (v123 >= 0x666666666666666)
          v124 = 0xCCCCCCCCCCCCCCCLL;
        else
          v124 = v122;
        if (v124)
        {
          if (v124 > 0xCCCCCCCCCCCCCCCLL)
            goto LABEL_173;
          v125 = (char *)operator new(20 * v124);
        }
        else
        {
          v125 = 0;
        }
        v126 = *(_OWORD *)v113;
        v127 = &v125[20 * v121];
        *((_DWORD *)v127 + 4) = *(_DWORD *)(v113 + 16);
        *(_OWORD *)v127 = v126;
        v128 = v127;
        if (v115 != v120)
        {
          do
          {
            v129 = *(_OWORD *)(v115 - 20);
            *((_DWORD *)v128 - 1) = *((_DWORD *)v115 - 1);
            *(_OWORD *)(v128 - 20) = v129;
            v128 -= 20;
            v115 -= 20;
          }
          while (v115 != v120);
          v115 = *(char **)a2;
        }
        v130 = v127 + 20;
        *(_QWORD *)a2 = v128;
        *(_QWORD *)(a2 + 8) = v127 + 20;
        *(_QWORD *)(a2 + 16) = &v125[20 * v124];
        if (v115)
          operator delete(v115);
        *(_QWORD *)(a2 + 8) = v130;
        v117 = *v160;
        v119 = *(char **)(a2 + 56);
        v118 = *(_QWORD *)(a2 + 64);
        if ((unint64_t)v119 >= v118)
        {
LABEL_144:
          v131 = (char *)*v159;
          v132 = v119 - (_BYTE *)*v159;
          v133 = v132 >> 2;
          v134 = (v132 >> 2) + 1;
          if (v134 >> 62)
            sub_2394189F8();
          v135 = v118 - (_QWORD)v131;
          if (v135 >> 1 > v134)
            v134 = v135 >> 1;
          if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
            v136 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v136 = v134;
          if (v136)
          {
            if (v136 >> 62)
LABEL_173:
              sub_239418A80();
            v137 = operator new(4 * v136);
            v138 = &v137[4 * v133];
            *v138 = *(_DWORD *)(v117 + 4 * v112);
            v139 = (uint64_t)(v138 + 1);
            if (v119 == v131)
            {
LABEL_161:
              *(_QWORD *)(a2 + 48) = v138;
              *(_QWORD *)(a2 + 56) = v139;
              *(_QWORD *)(a2 + 64) = &v137[4 * v136];
              if (v131)
                operator delete(v131);
              *(_QWORD *)(a2 + 56) = v139;
              if (!v162)
                continue;
LABEL_164:
              v149 = v163[3] + 24 * v112;
              v150 = *(_QWORD *)(a2 + 32);
              if (v150 >= *(_QWORD *)(a2 + 40))
              {
                v111 = sub_2396350C0(v161, v163[3] + 24 * v112);
              }
              else
              {
                v151 = *(unsigned int *)(v149 + 16);
                v152 = (v151 + 31) & 0x1FFFFFFE0;
                *(_QWORD *)v150 = 0;
                *(_QWORD *)(v150 + 8) = v152;
                memptr[0] = 0;
                malloc_type_posix_memalign(memptr, 0x20uLL, v152, 0x100BBD03uLL);
                v153 = memptr[0];
                *(void **)v150 = memptr[0];
                if (!v153)
                {
                  exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
                  v156 = std::bad_alloc::bad_alloc(exception);
                  __cxa_throw(v156, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
                }
                if ((_DWORD)v151)
                  memcpy(v153, *(const void **)v149, v151);
                *(_DWORD *)(v150 + 16) = *(_DWORD *)(v149 + 16);
                v111 = (char *)(v150 + 24);
                *(_QWORD *)(a2 + 32) = v150 + 24;
              }
              *(_QWORD *)(a2 + 32) = v111;
              continue;
            }
          }
          else
          {
            v137 = 0;
            v138 = (_DWORD *)(4 * v133);
            *(_DWORD *)(4 * v133) = *(_DWORD *)(v117 + 4 * v112);
            v139 = 4 * v133 + 4;
            if (v119 == v131)
              goto LABEL_161;
          }
          v140 = v119 - 4 - v131;
          if (v140 < 0x2C)
            goto LABEL_183;
          if ((unint64_t)(v119 - &v137[v132]) < 0x20)
            goto LABEL_183;
          v141 = (v140 >> 2) + 1;
          v142 = 4 * (v141 & 0x7FFFFFFFFFFFFFF8);
          v143 = &v119[-v142];
          v138 = (_DWORD *)((char *)v138 - v142);
          v144 = &v137[4 * v133 - 16];
          v145 = v119 - 16;
          v146 = v141 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v147 = *(_OWORD *)v145;
            *(v144 - 1) = *((_OWORD *)v145 - 1);
            *v144 = v147;
            v144 -= 2;
            v145 -= 32;
            v146 -= 8;
          }
          while (v146);
          v119 = v143;
          if (v141 != (v141 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_183:
            do
            {
              v148 = *((_DWORD *)v119 - 1);
              v119 -= 4;
              *--v138 = v148;
            }
            while (v119 != v131);
          }
          goto LABEL_161;
        }
      }
      else
      {
        v116 = *(_OWORD *)v113;
        *((_DWORD *)v115 + 4) = *(_DWORD *)(v113 + 16);
        *(_OWORD *)v115 = v116;
        *(_QWORD *)(a2 + 8) = v115 + 20;
        v117 = *v160;
        v119 = *(char **)(a2 + 56);
        v118 = *(_QWORD *)(a2 + 64);
        if ((unint64_t)v119 >= v118)
          goto LABEL_144;
      }
      *(_DWORD *)v119 = *(_DWORD *)(v117 + 4 * v112);
      *(_QWORD *)(a2 + 56) = v119 + 4;
      if (v162)
        goto LABEL_164;
    }
  }
  operator delete(__p);
  v15 = v164;
LABEL_170:
  v3 = v158;
  if (v15)
    goto LABEL_171;
  return v3 != 0;
}

void sub_239632650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2396326C8(unsigned int a1, unsigned int a2, uint64_t *a3, uint64_t a4, uint64_t a5, unsigned int a6, _QWORD *__sz, unsigned __int8 a8)
{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  unint64_t v26;
  int32x4_t v27;
  int32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  _BYTE *v53;
  _BYTE *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  _BYTE *v60;
  _BYTE *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  void **v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  char **v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  _BYTE *v108;
  _DWORD *v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  _OWORD *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  __int128 v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  __int128 v146;
  char *v147;
  char *v148;
  __int128 v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  _OWORD *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  char **v161;
  char *v162;
  size_t v163;
  size_t v164;
  void *v165;
  char *v166;
  int v167;
  std::bad_alloc *exception;
  std::bad_alloc *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned __int8 v174;
  uint64_t v175;
  _QWORD *v176;
  char *v178;
  void **v179;
  char **v180;
  _BOOL4 v182;
  unsigned int v183;
  void *v184[2];
  void *__p[2];
  int v186;
  void *v187[2];
  void *v188[2];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  unsigned int v192;
  unsigned int v193;
  char v194;
  int v195;
  int v196;
  int32x4_t *v197;
  int32x4_t *v198;
  unsigned int *v199;
  void *memptr[3];

  if (!*((_BYTE *)a3 + 72))
    goto LABEL_6;
  v14 = a4 + 48;
  if (*(_BYTE *)(a4 + 72))
  {
    v15 = *(void **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)(a4 + 56) = v15;
      operator delete(v15);
      *(_QWORD *)v14 = 0;
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
    }
    *(_QWORD *)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
LABEL_6:
    v176 = __sz;
    v16 = a3[4] - a3[3];
    if (v16)
      goto LABEL_7;
    goto LABEL_13;
  }
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_BYTE *)(a4 + 72) = 1;
  v176 = __sz;
  v16 = a3[4] - a3[3];
  if (v16)
  {
LABEL_7:
    v17 = *a3;
    v18 = a3[1];
    v19 = (v18 - *a3) / 20;
    v182 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3) == v19;
    v197 = 0;
    v198 = 0;
    v199 = 0;
    v174 = a8;
    if (v18 != v17)
      goto LABEL_8;
LABEL_14:
    v21 = 0;
    v22 = 0;
LABEL_15:
    v25 = 1;
    goto LABEL_21;
  }
LABEL_13:
  v182 = 0;
  v17 = *a3;
  v18 = a3[1];
  v19 = (v18 - *a3) / 20;
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v174 = a8;
  if (v18 == v17)
    goto LABEL_14;
LABEL_8:
  if (v19 >> 62)
    sub_2394189F8();
  v20 = 4 * v19;
  v21 = (int32x4_t *)operator new(4 * v19);
  v197 = v21;
  v199 = (unsigned int *)v21 + v19;
  bzero(v21, 4 * v19);
  v22 = v199;
  v198 = (int32x4_t *)v199;
  if (!v19)
    goto LABEL_15;
  if ((unint64_t)(v20 - 4) >= 0x1C)
  {
    v26 = ((unint64_t)(v20 - 4) >> 2) + 1;
    v23 = v26 & 0x7FFFFFFFFFFFFFF8;
    v24 = (unsigned int *)v21 + (v26 & 0x7FFFFFFFFFFFFFF8);
    v27 = (int32x4_t)xmmword_239EC6870;
    v28 = v21 + 1;
    v29.i64[0] = 0x400000004;
    v29.i64[1] = 0x400000004;
    v30.i64[0] = 0x800000008;
    v30.i64[1] = 0x800000008;
    v31 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28[-1] = v27;
      *v28 = vaddq_s32(v27, v29);
      v27 = vaddq_s32(v27, v30);
      v28 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v26 == v23)
      goto LABEL_20;
  }
  else
  {
    LODWORD(v23) = 0;
    v24 = (unsigned int *)v21;
  }
  do
  {
    *v24++ = v23;
    LODWORD(v23) = v23 + 1;
  }
  while (v24 != v22);
LABEL_20:
  v25 = 0;
LABEL_21:
  v179 = (void **)(a4 + 24);
  v180 = (char **)(a4 + 48);
  v187[0] = a3;
  v32 = 126 - 2 * __clz(((char *)v22 - (char *)v21) >> 2);
  if (v25)
    v33 = 0;
  else
    v33 = v32;
  sub_2396352D4((unsigned int *)v21, v22, (uint64_t **)v187, v33, 1);
  v34 = a5;
  if (!a5)
  {
    v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
    v40 = a4;
    if (v19 <= v39)
    {
      if (v19 < v39)
        *(_QWORD *)(a4 + 8) = *(_QWORD *)a4 + 20 * v19;
    }
    else
    {
      sub_239634F24((char **)a4, v19 - v39);
    }
    if (*((_BYTE *)a3 + 72))
    {
      v66 = *(_QWORD *)(a4 + 48);
      v67 = (*(_QWORD *)(a4 + 56) - v66) >> 2;
      if (v19 <= v67)
      {
        if (v19 < v67)
          *(_QWORD *)(a4 + 56) = v66 + 4 * v19;
      }
      else
      {
        sub_23942CB44((uint64_t)v180, v19 - v67);
      }
    }
    if (v182)
    {
      v68 = *(_QWORD *)(a4 + 24);
      v69 = *(_QWORD *)(a4 + 32);
      v70 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3);
      if (v19 <= v70)
      {
        if (v19 < v70)
        {
          v71 = v68 + 24 * v19;
          while (v69 != v71)
          {
            v72 = *(void **)(v69 - 24);
            v69 -= 24;
            free(v72);
          }
          *(_QWORD *)(a4 + 32) = v71;
        }
      }
      else
      {
        sub_23941C9CC(v179, v19 - v70);
      }
    }
    if (v18 != v17)
    {
      v73 = 0;
      v74 = 0;
      v75 = 0;
      if (v19 <= 1)
        v19 = 1;
      do
      {
        v76 = *a3 + 20 * v21->u32[v75];
        v77 = *(_QWORD *)v40 + v74;
        v78 = *(_OWORD *)v76;
        *(_DWORD *)(v77 + 16) = *(_DWORD *)(v76 + 16);
        *(_OWORD *)v77 = v78;
        if (*((_BYTE *)a3 + 72))
        {
          if (!*(_BYTE *)(v40 + 72))
            sub_2394875CC();
          *(_DWORD *)&(*v180)[4 * v75] = *(_DWORD *)(a3[6] + 4 * v21->u32[v75]);
        }
        if (v182)
        {
          v79 = a3[3] + 24 * v21->u32[v75];
          v80 = (char *)*v179;
          v81 = (void **)((char *)*v179 + v73);
          if (v81 != (void **)v79)
          {
            v82 = *(unsigned int *)(v79 + 16);
            sub_23941D1E8((uint64_t)*v179 + v73, v82);
            if ((_DWORD)v82)
              memcpy(*v81, *(const void **)v79, v82);
            *(_DWORD *)&v80[v73 + 16] = *(_DWORD *)(v79 + 16);
            v40 = a4;
          }
        }
        ++v75;
        v74 += 20;
        v73 += 24;
      }
      while (v19 != v75);
    }
    if (v21)
      goto LABEL_107;
    return 1;
  }
  v195 = 0;
  v196 = 0;
  v194 = 0;
  *(_OWORD *)v187 = 0u;
  *(_OWORD *)v188 = 0u;
  v189 = 0u;
  v190 = 0u;
  v191 = 0u;
  v192 = a1;
  v193 = a2;
  if ((a6 & 0x80000000) != 0)
  {
    a6 = vcvtpd_s64_f64(log2((double)a1));
    v41 = log2((double)a2);
    v34 = a5;
    v38 = vcvtpd_s64_f64(v41);
    v35 = 1;
    v36 = 1;
    v37 = 1;
  }
  else
  {
    v35 = (a1 + (1 << a6) - 1) >> a6;
    v36 = (a2 + (1 << a6) - 1) >> a6;
    v37 = v36 * v35;
    v38 = a6;
    a1 = 1 << a6;
    a2 = 1 << a6;
  }
  *(_QWORD *)&v190 = __PAIR64__(v38, a6);
  *((_QWORD *)&v190 + 1) = __PAIR64__(a2, a1);
  HIDWORD(v191) = v36;
  *(_QWORD *)((char *)&v191 + 4) = __PAIR64__(v35, v37);
  sub_239636544((uint64_t)v187, v34);
  *(_OWORD *)v184 = 0u;
  *(_OWORD *)__p = 0u;
  v186 = 1065353216;
  if (v18 != v17)
  {
    v42 = 0;
    v43 = 0;
    if (v19 <= 1)
      v44 = 1;
    else
      v44 = v19;
    do
    {
      sub_239633558((uint64_t)v187, *(float *)(*a3 + v42), *(float *)(*a3 + v42 + 4), *(float *)(*a3 + v42 + 16));
      if (v45)
      {
        v183 = *(_DWORD *)(v45 + 4);
        memptr[0] = &v183;
        sub_239636DE4((uint64_t)v184, &v183, (uint64_t)&unk_239EC6E98, (_DWORD **)memptr)[3] = v43;
      }
      ++v43;
      v42 += 20;
    }
    while (v44 != v43);
  }
  v46 = ((char *)v187[1] - (char *)v187[0]) >> 4;
  v47 = (char *)v188[1];
  v48 = (int)v191;
  v49 = v191 * DWORD1(v191);
  v178 = (char *)v188[1];
  if ((int)v191 * DWORD1(v191) < 1)
  {
    v51 = 0;
    v50 = a4;
  }
  else
  {
    v50 = a4;
    v51 = 0;
    if (!*(_QWORD *)v188[1])
    {
      while (1)
      {
        while (1)
        {
          v51 += v191;
          v52 = v51 - v49;
          if (v51 >= v49)
            break;
          v47 += 8 * (int)v191;
          if (*(_QWORD *)v47)
            goto LABEL_46;
        }
        v51 = v52 + 1;
        if (v52 + 1 == (_DWORD)v191)
          break;
        v47 = (char *)v188[1] + 8 * v51;
        if (*(_QWORD *)v47)
          goto LABEL_46;
      }
      v51 = v191 * DWORD1(v191);
    }
  }
LABEL_46:
  v53 = *(_BYTE **)v50;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v50 + 16) - *(_QWORD *)v50) >> 2) < v46)
  {
    if ((char *)v187[1] - (char *)v187[0] < 0)
      sub_2394189F8();
    v54 = *(_BYTE **)(v50 + 8);
    v55 = (char *)operator new(20 * v46);
    v56 = &v55[20 * ((v54 - v53) / 20)];
    v57 = v56;
    if (v54 != v53)
    {
      v58 = &v55[20 * ((v54 - v53) / 20)];
      do
      {
        v59 = *(_OWORD *)(v54 - 20);
        v57 = v58 - 20;
        *((_DWORD *)v58 - 1) = *((_DWORD *)v54 - 1);
        *(_OWORD *)(v58 - 20) = v59;
        v54 -= 20;
        v58 -= 20;
      }
      while (v54 != v53);
    }
    v50 = a4;
    *(_QWORD *)a4 = v57;
    *(_QWORD *)(a4 + 8) = v56;
    *(_QWORD *)(a4 + 16) = &v55[20 * v46];
    if (v53)
      operator delete(v53);
  }
  v172 = v46;
  if (*((_BYTE *)a3 + 72))
  {
    v60 = *(_BYTE **)(v50 + 48);
    if (v19 > (uint64_t)(*(_QWORD *)(v50 + 64) - (_QWORD)v60) >> 2)
    {
      if (v19 >> 62)
        sub_2394189F8();
      v61 = *(_BYTE **)(v50 + 56);
      v62 = (char *)operator new(4 * v19);
      v63 = v61 - v60;
      v64 = &v62[(v61 - v60) & 0xFFFFFFFFFFFFFFFCLL];
      v65 = v64;
      if (v61 == v60)
        goto LABEL_93;
      if ((unint64_t)(v63 - 4) >= 0x2C)
      {
        v65 = &v62[(v61 - v60) & 0xFFFFFFFFFFFFFFFCLL];
        if (v61 - v62 - (v63 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
        {
          v83 = v63 >> 2;
          v84 = ((unint64_t)(v63 - 4) >> 2) + 1;
          v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
          v86 = &v61[-v85];
          v65 = &v64[-v85];
          v87 = &v62[4 * v83 - 16];
          v88 = (__int128 *)(v61 - 16);
          v89 = v84 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v90 = *v88;
            *((_OWORD *)v87 - 1) = *(v88 - 1);
            *(_OWORD *)v87 = v90;
            v87 -= 32;
            v88 -= 2;
            v89 -= 8;
          }
          while (v89);
          v61 = v86;
          if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_93:
            *(_QWORD *)(a4 + 48) = v65;
            *(_QWORD *)(a4 + 56) = v64;
            *(_QWORD *)(a4 + 64) = &v62[4 * v19];
            if (v60)
              operator delete(v60);
            goto LABEL_95;
          }
        }
      }
      else
      {
        v65 = &v62[(v61 - v60) & 0xFFFFFFFFFFFFFFFCLL];
      }
      do
      {
        v91 = *((_DWORD *)v61 - 1);
        v61 -= 4;
        *((_DWORD *)v65 - 1) = v91;
        v65 -= 4;
      }
      while (v61 != v60);
      goto LABEL_93;
    }
  }
LABEL_95:
  if (v182)
    sub_2394188EC((char **)v179, v172);
  v92 = (char **)a4;
  v93 = v176;
  if (v51 != v49)
  {
    v173 = v174;
    while (1)
    {
      v183 = *(_DWORD *)(*(_QWORD *)v47 + 4);
      memptr[0] = &v183;
      v98 = sub_239636DE4((uint64_t)v184, &v183, (uint64_t)&unk_239EC6E98, (_DWORD **)memptr)[3];
      v175 = v98;
      if (!v173)
        goto LABEL_134;
      v100 = (char *)v93[1];
      v99 = v93[2];
      if ((unint64_t)v100 >= v99)
        break;
      *(_DWORD *)v100 = v98;
      v101 = (uint64_t)(v100 + 4);
LABEL_133:
      v93[1] = v101;
LABEL_134:
      v121 = *a3 + 20 * v98;
      v123 = v92[1];
      v122 = (unint64_t)v92[2];
      if ((unint64_t)v123 < v122)
      {
        v124 = *(_OWORD *)v121;
        *((_DWORD *)v123 + 4) = *(_DWORD *)(v121 + 16);
        *(_OWORD *)v123 = v124;
        v92[1] = v123 + 20;
        v125 = v178;
        if (!*((_BYTE *)a3 + 72))
          goto LABEL_165;
        goto LABEL_136;
      }
      v129 = *v92;
      v130 = 0xCCCCCCCCCCCCCCCDLL * ((v123 - v129) >> 2) + 1;
      if (v130 > 0xCCCCCCCCCCCCCCCLL)
        sub_2394189F8();
      v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v122 - (_QWORD)v129) >> 2);
      if (2 * v131 > v130)
        v130 = 2 * v131;
      if (v131 >= 0x666666666666666)
        v132 = 0xCCCCCCCCCCCCCCCLL;
      else
        v132 = v130;
      if (v132)
      {
        if (v132 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_195;
        v133 = (char *)operator new(20 * v132);
        v98 = v175;
      }
      else
      {
        v133 = 0;
      }
      v146 = *(_OWORD *)v121;
      v147 = &v133[4 * ((v123 - v129) >> 2)];
      *((_DWORD *)v147 + 4) = *(_DWORD *)(v121 + 16);
      *(_OWORD *)v147 = v146;
      v148 = v147;
      if (v123 == v129)
      {
        v92 = (char **)a4;
        v150 = v147 + 20;
        *(_QWORD *)a4 = v147;
        *(_QWORD *)(a4 + 8) = v147 + 20;
        *(_QWORD *)(a4 + 16) = &v133[20 * v132];
        if (v123)
          goto LABEL_163;
      }
      else
      {
        do
        {
          v149 = *(_OWORD *)(v123 - 20);
          *((_DWORD *)v148 - 1) = *((_DWORD *)v123 - 1);
          *(_OWORD *)(v148 - 20) = v149;
          v148 -= 20;
          v123 -= 20;
        }
        while (v123 != v129);
        v92 = (char **)a4;
        v123 = *(char **)a4;
        v150 = v147 + 20;
        *(_QWORD *)a4 = v148;
        *(_QWORD *)(a4 + 8) = v147 + 20;
        *(_QWORD *)(a4 + 16) = &v133[20 * v132];
        if (v123)
        {
LABEL_163:
          operator delete(v123);
          v98 = v175;
        }
      }
      v92[1] = v150;
      v93 = v176;
      v125 = v178;
      if (!*((_BYTE *)a3 + 72))
      {
LABEL_165:
        if (!v182)
          goto LABEL_187;
        goto LABEL_179;
      }
LABEL_136:
      v126 = a3[6];
      v128 = v92[7];
      v127 = (unint64_t)v92[8];
      if ((unint64_t)v128 < v127)
      {
        *(_DWORD *)v128 = *(_DWORD *)(v126 + 4 * v98);
        v92[7] = v128 + 4;
        if (!v182)
          goto LABEL_187;
LABEL_179:
        v160 = a3[3] + 24 * v98;
        v161 = v92;
        v162 = v92[4];
        if (v162 >= v161[5])
        {
          v166 = sub_2396370EC(v179, a3[3] + 24 * v98);
          v92 = (char **)a4;
        }
        else
        {
          v163 = *(unsigned int *)(v160 + 16);
          v164 = (v163 + 31) & 0x1FFFFFFE0;
          *(_QWORD *)v162 = 0;
          *((_QWORD *)v162 + 1) = v164;
          memptr[0] = 0;
          malloc_type_posix_memalign(memptr, 0x20uLL, v164, 0x100BBD03uLL);
          v165 = memptr[0];
          *(void **)v162 = memptr[0];
          if (!v165)
          {
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v169 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v169, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
          }
          v125 = v178;
          if ((_DWORD)v163)
            memcpy(v165, *(const void **)v160, v163);
          *((_DWORD *)v162 + 4) = *(_DWORD *)(v160 + 16);
          v166 = v162 + 24;
          v92 = (char **)a4;
          *(_QWORD *)(a4 + 32) = v166;
        }
        v92[4] = v166;
        goto LABEL_187;
      }
      v134 = *v180;
      v135 = v128 - *v180;
      v136 = v135 >> 2;
      v137 = (v135 >> 2) + 1;
      if (v137 >> 62)
        sub_2394189F8();
      v138 = v127 - (_QWORD)v134;
      if (v138 >> 1 > v137)
        v137 = v138 >> 1;
      if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
        v139 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v139 = v137;
      if (v139)
      {
        v170 = (char *)(v128 - *v180);
        v171 = a3[6];
        if (v139 >> 62)
LABEL_195:
          sub_239418A80();
        v140 = v135 >> 2;
        v141 = v139;
        v142 = operator new(4 * v139);
        v125 = v178;
        v98 = v175;
        v139 = v141;
        v136 = v140;
        v135 = (uint64_t)v170;
        v143 = &v142[4 * v140];
        *(_DWORD *)v143 = *(_DWORD *)(v171 + 4 * v175);
        v144 = (uint64_t)(v143 + 4);
        if (v128 == v134)
        {
LABEL_170:
          v92 = (char **)a4;
          goto LABEL_176;
        }
      }
      else
      {
        v142 = 0;
        v143 = (char *)(4 * v136);
        *(_DWORD *)(4 * v136) = *(_DWORD *)(v126 + 4 * v98);
        v144 = 4 * v136 + 4;
        if (v128 == v134)
          goto LABEL_170;
      }
      v145 = v128 - 4 - v134;
      if (v145 >= 0x2C)
      {
        v92 = (char **)a4;
        if ((unint64_t)(v128 - &v142[v135]) >= 0x20)
        {
          v151 = (v145 >> 2) + 1;
          v152 = 4 * (v151 & 0x7FFFFFFFFFFFFFF8);
          v153 = &v128[-v152];
          v143 -= v152;
          v154 = &v142[4 * v136 - 16];
          v155 = v128 - 16;
          v156 = v151 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v157 = *(_OWORD *)v155;
            *(v154 - 1) = *((_OWORD *)v155 - 1);
            *v154 = v157;
            v154 -= 2;
            v155 -= 32;
            v156 -= 8;
          }
          while (v156);
          v128 = v153;
          if (v151 == (v151 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_176;
        }
      }
      else
      {
        v92 = (char **)a4;
      }
      do
      {
        v158 = *((_DWORD *)v128 - 1);
        v128 -= 4;
        *((_DWORD *)v143 - 1) = v158;
        v143 -= 4;
      }
      while (v128 != v134);
LABEL_176:
      v92[6] = v143;
      v92[7] = (char *)v144;
      v92[8] = &v142[4 * v139];
      if (v134)
      {
        v159 = v144;
        operator delete(v134);
        v144 = v159;
        v98 = v175;
      }
      v93 = v176;
      v92[7] = (char *)v144;
      if (v182)
        goto LABEL_179;
      do
      {
LABEL_187:
        while (1)
        {
          v51 += v48;
          v167 = v51 - v49;
          if (v51 >= v49)
            break;
          v47 += 8 * v48;
          if (*(_QWORD *)v47)
            goto LABEL_190;
        }
        v51 = v167 + 1;
        if (v167 + 1 == (_DWORD)v48)
          goto LABEL_98;
        v47 = &v125[8 * v51];
      }
      while (!*(_QWORD *)v47);
LABEL_190:
      if (v51 == v49)
        goto LABEL_98;
    }
    v102 = (char *)*v93;
    v103 = (uint64_t)&v100[-*v93];
    v104 = v103 >> 2;
    v105 = (v103 >> 2) + 1;
    if (v105 >> 62)
      sub_2394189F8();
    v106 = v99 - (_QWORD)v102;
    if (v106 >> 1 > v105)
      v105 = v106 >> 1;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
      v107 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    if (v107)
    {
      if (v107 >> 62)
        goto LABEL_195;
      v108 = operator new(4 * v107);
      v98 = v175;
      v109 = &v108[4 * v104];
      *v109 = v175;
      v101 = (uint64_t)(v109 + 1);
      if (v100 != v102)
      {
LABEL_122:
        v110 = v100 - 4 - v102;
        if (v110 >= 0x2C)
        {
          v111 = v100 - &v108[v103];
          v92 = (char **)a4;
          if (v111 >= 0x20)
          {
            v112 = (v110 >> 2) + 1;
            v113 = 4 * (v112 & 0x7FFFFFFFFFFFFFF8);
            v114 = &v100[-v113];
            v109 = (_DWORD *)((char *)v109 - v113);
            v115 = &v108[4 * v104 - 16];
            v116 = v100 - 16;
            v117 = v112 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v118 = *(_OWORD *)v116;
              *(v115 - 1) = *((_OWORD *)v116 - 1);
              *v115 = v118;
              v115 -= 2;
              v116 -= 32;
              v117 -= 8;
            }
            while (v117);
            v100 = v114;
            if (v112 == (v112 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_131:
              v93 = v176;
              *v176 = v109;
              v176[1] = v101;
              v176[2] = &v108[4 * v107];
              if (v102)
              {
                v120 = v101;
                operator delete(v102);
                v101 = v120;
                v98 = v175;
              }
              goto LABEL_133;
            }
          }
        }
        else
        {
          v92 = (char **)a4;
        }
        do
        {
          v119 = *((_DWORD *)v100 - 1);
          v100 -= 4;
          *--v109 = v119;
        }
        while (v100 != v102);
        goto LABEL_131;
      }
    }
    else
    {
      v108 = 0;
      v109 = (_DWORD *)(4 * v104);
      *(_DWORD *)(4 * v104) = v98;
      v101 = 4 * v104 + 4;
      if (v100 != v102)
        goto LABEL_122;
    }
    v92 = (char **)a4;
    goto LABEL_131;
  }
LABEL_98:
  v94 = __p[0];
  if (__p[0])
  {
    do
    {
      v95 = (_QWORD *)*v94;
      operator delete(v94);
      v94 = v95;
    }
    while (v95);
  }
  v96 = v184[0];
  v184[0] = 0;
  if (v96)
    operator delete(v96);
  if (v188[1])
  {
    *(void **)&v189 = v188[1];
    operator delete(v188[1]);
  }
  if (v187[0])
  {
    v187[1] = v187[0];
    operator delete(v187[0]);
  }
  v21 = v197;
  if (v197)
  {
LABEL_107:
    v198 = v21;
    operator delete(v21);
  }
  return 1;
}

void sub_2396334C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  *(_QWORD *)(a10 + 32) = v11;
  sub_239420950((uint64_t)va);
  v14 = *(void **)(v12 - 136);
  sub_2394FCFA8((uint64_t)va1);
  if (v14)
  {
    *(_QWORD *)(v12 - 128) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239633558(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  float **v16;
  float *v17;
  float *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v24[2];

  if ((float)*(unsigned int *)(a1 + 80) <= a2)
    return -1;
  v6 = -1;
  if (a3 >= 0.0 && a2 >= 0.0 && (float)*(unsigned int *)(a1 + 84) > a3)
  {
    v6 = ((int)a2 >> *(_DWORD *)(a1 + 48)) + *(_DWORD *)(a1 + 72) * ((int)a3 >> *(_DWORD *)(a1 + 52));
    v10 = *(int *)(a1 + 64);
    v11 = v10 + (int)v10 * v6;
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(char **)(v12 + 8 * (v11 - 1));
    if (v13)
    {
      if (*(_BYTE *)(a1 + 88))
        return v6;
      v19 = (int)v6 * (uint64_t)(int)v10;
      v16 = (float **)(v12 + 8 * v19);
      if (v19 == v11 - 1)
      {
LABEL_20:
        if (**v16 > a4)
          return v6;
      }
      else
      {
        v20 = 8 * v10 - 8;
        while (**v16 > a4)
        {
          ++v16;
          v20 -= 8;
          if (!v20)
          {
            v16 = (float **)(v12 + 8 * (v11 - 1));
            goto LABEL_20;
          }
        }
        memmove((void *)(v12 + 8 * v11 - v20), v16, v20);
      }
      sub_239638134((uint64_t)v24, *((_DWORD *)v13 + 1), a2, a3, a4);
      *(_QWORD *)v13 = v24[0];
      *((_QWORD *)v13 + 1) = v24[1];
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      sub_239638134((uint64_t)v24, (*(_DWORD *)(a1 + 92) << 24) | ((v14 - *(_DWORD *)a1) >> 4) & 0xFFFFFF, a2, a3, a4);
      v15 = sub_239636644((unint64_t *)a1, v14, v24);
      v13 = v15;
      v16 = (float **)(*(_QWORD *)(a1 + 24) + 8 * *(int *)(a1 + 64) * (uint64_t)(int)v6);
      v17 = *v16;
      if (*v16)
      {
        while (*v17 > *(float *)v15)
        {
          v18 = v16[1];
          ++v16;
          v17 = v18;
          if (!v18)
            goto LABEL_28;
        }
        v21 = 1;
        while (v16[v21++])
          ;
        if (v21 != 1)
          memmove((char *)&v16[v21] - ((v21 * 8 - 8) & 0xFFFFFFFFFFFFFFF8), v16, v21 * 8 - 8);
      }
    }
LABEL_28:
    *v16 = (float *)v13;
  }
  return v6;
}

uint64_t sub_239633760(uint64_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  int32x4_t *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  unint64_t v19;
  int32x4_t v20;
  int32x4_t *v21;
  int32x4_t v22;
  int32x4_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int32x4_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int32x4_t *v72;
  int v73;
  unsigned int v74;
  void *__p;
  void *v76;
  uint64_t v77;
  uint64_t *v78[313];
  uint64_t v79;
  int32x4_t *v80;
  unsigned int *v81;
  unsigned int *v82;

  v8 = a1[4] - a1[3];
  if (v8)
  {
    v10 = *a1;
    v9 = a1[1];
    v11 = (v9 - *a1) / 20;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3) == v11;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    if (v9 != v10)
      goto LABEL_3;
LABEL_8:
    v14 = 0;
    v15 = 0;
LABEL_9:
    v18 = 1;
    goto LABEL_15;
  }
  v12 = 0;
  v10 = *a1;
  v9 = a1[1];
  v11 = (v9 - *a1) / 20;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  if (v9 == v10)
    goto LABEL_8;
LABEL_3:
  if (v11 >> 62)
    sub_2394189F8();
  v13 = 4 * v11;
  v14 = (int32x4_t *)operator new(4 * v11);
  v80 = v14;
  v82 = (unsigned int *)v14 + v11;
  bzero(v14, 4 * v11);
  v15 = v82;
  v81 = v82;
  if (!v11)
    goto LABEL_9;
  if ((unint64_t)(v13 - 4) >= 0x1C)
  {
    v19 = ((unint64_t)(v13 - 4) >> 2) + 1;
    v16 = v19 & 0x7FFFFFFFFFFFFFF8;
    v17 = (unsigned int *)v14 + (v19 & 0x7FFFFFFFFFFFFFF8);
    v20 = (int32x4_t)xmmword_239EC6870;
    v21 = v14 + 1;
    v22.i64[0] = 0x400000004;
    v22.i64[1] = 0x400000004;
    v23.i64[0] = 0x800000008;
    v23.i64[1] = 0x800000008;
    v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v21[-1] = v20;
      *v21 = vaddq_s32(v20, v22);
      v20 = vaddq_s32(v20, v23);
      v21 += 2;
      v24 -= 8;
    }
    while (v24);
    if (v19 == v16)
      goto LABEL_14;
  }
  else
  {
    LODWORD(v16) = 0;
    v17 = (unsigned int *)v14;
  }
  do
  {
    *v17++ = v16;
    LODWORD(v16) = v16 + 1;
  }
  while (v17 != v15);
LABEL_14:
  v18 = 0;
LABEL_15:
  v72 = v14;
  v78[0] = a1;
  v25 = 126 - 2 * __clz(((char *)v15 - (char *)v14) >> 2);
  if (v18)
    v26 = 0;
  else
    v26 = v25;
  sub_239637300((unsigned int *)v14, v15, v78, v26, 1);
  if (a3 && v11 > a3)
  {
    LODWORD(__p) = a4;
    sub_239454CD8((int *)&__p, (uint64_t)v78);
    v73 = a3;
    v74 = v11;
    if (a3 > v11)
    {
      sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    if ((_DWORD)v11)
    {
      if ((double)v11 * 0.5 >= (double)a3)
        sub_239455384((uint64_t)v78, &v74, &v73, (int32x4_t **)&__p);
      else
        sub_2394551BC((uint64_t)v78, &v74, (unsigned int *)&v73, (int32x4_t **)&__p);
    }
    else
    {
      __p = 0;
      v76 = 0;
      v77 = 0;
    }
    v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    if (a3 <= v32)
    {
      if (a3 < v32)
        *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 20 * a3;
    }
    else
    {
      sub_239634F24((char **)a2, a3 - v32);
    }
    if (v12)
    {
      v33 = *(_QWORD *)(a2 + 24);
      v34 = *(_QWORD *)(a2 + 32);
      v35 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3);
      if (v11 <= v35)
      {
        if (v11 < v35)
        {
          v60 = v33 + 24 * v11;
          while (v34 != v60)
          {
            v61 = *(void **)(v34 - 24);
            v34 -= 24;
            free(v61);
          }
          *(_QWORD *)(a2 + 32) = v60;
        }
      }
      else
      {
        sub_23941C9CC((void **)(a2 + 24), v11 - v35);
      }
      v62 = 0;
      v63 = 0;
      v64 = 0;
      if (a3 <= 1)
        v65 = 1;
      else
        v65 = a3;
      do
      {
        v66 = *a1 + 20 * *((unsigned int *)__p + v64);
        v67 = *(_QWORD *)a2 + v62;
        v68 = *(_OWORD *)v66;
        *(_DWORD *)(v67 + 16) = *(_DWORD *)(v66 + 16);
        *(_OWORD *)v67 = v68;
        v69 = a1[3] + 24 * *((unsigned int *)__p + v64);
        v70 = *(_QWORD *)(a2 + 24);
        if (v70 + v63 != v69)
        {
          v71 = *(unsigned int *)(v69 + 16);
          sub_23941D1E8(v70 + v63, v71);
          if ((_DWORD)v71)
            memcpy(*(void **)(v70 + v63), *(const void **)v69, v71);
          *(_DWORD *)(v70 + v63 + 16) = *(_DWORD *)(v69 + 16);
        }
        ++v64;
        v63 += 24;
        v62 += 20;
      }
      while (v65 != v64);
    }
    else
    {
      v36 = 0;
      v37 = 0;
      do
      {
        v38 = *a1 + 20 * *((unsigned int *)__p + v37);
        v39 = *(_QWORD *)a2 + v36;
        v40 = *(_OWORD *)v38;
        *(_DWORD *)(v39 + 16) = *(_DWORD *)(v38 + 16);
        *(_OWORD *)v39 = v40;
        ++v37;
        v36 += 20;
      }
      while (a3 != v37);
    }
    if (__p)
    {
      v76 = __p;
      operator delete(__p);
    }
    sub_239911CF8((uint64_t)&v79);
    v31 = v72;
    goto LABEL_47;
  }
  v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (v11 <= v27)
  {
    if (v11 < v27)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 20 * v11;
  }
  else
  {
    sub_239634F24((char **)a2, v11 - v27);
  }
  if (v12)
  {
    v28 = *(_QWORD *)(a2 + 24);
    v29 = *(_QWORD *)(a2 + 32);
    v30 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
    if (v11 <= v30)
    {
      if (v11 < v30)
      {
        v41 = v28 + 24 * v11;
        while (v29 != v41)
        {
          v42 = *(void **)(v29 - 24);
          v29 -= 24;
          free(v42);
        }
        *(_QWORD *)(a2 + 32) = v41;
      }
    }
    else
    {
      sub_23941C9CC((void **)(a2 + 24), v11 - v30);
    }
    v31 = v72;
    if (v9 == v10)
    {
LABEL_47:
      if (!v31)
        return 1;
      goto LABEL_66;
    }
    v43 = 0;
    v44 = 0;
    if (v11 <= 1)
      v11 = 1;
    v45 = v72;
    do
    {
      v46 = *a1 + 20 * v45->u32[0];
      v47 = *(_QWORD *)a2 + v43;
      v48 = *(_OWORD *)v46;
      *(_DWORD *)(v47 + 16) = *(_DWORD *)(v46 + 16);
      *(_OWORD *)v47 = v48;
      v49 = v45->i32[0];
      v45 = (int32x4_t *)((char *)v45 + 4);
      v50 = a1[3] + 24 * v49;
      v51 = *(_QWORD *)(a2 + 24);
      if (v51 + v44 != v50)
      {
        v52 = *(unsigned int *)(v50 + 16);
        sub_23941D1E8(v51 + v44, v52);
        if ((_DWORD)v52)
          memcpy(*(void **)(v51 + v44), *(const void **)v50, v52);
        *(_DWORD *)(v51 + v44 + 16) = *(_DWORD *)(v50 + 16);
      }
      v44 += 24;
      v43 += 20;
      --v11;
    }
    while (v11);
  }
  else
  {
    v31 = v14;
    if (v9 == v10)
      goto LABEL_47;
    v53 = 0;
    if (v11 <= 1)
      v54 = 1;
    else
      v54 = v11;
    do
    {
      v55 = v31->i32[0];
      v31 = (int32x4_t *)((char *)v31 + 4);
      v56 = *a1 + 20 * v55;
      v57 = *(_QWORD *)a2 + v53;
      v58 = *(_OWORD *)v56;
      *(_DWORD *)(v57 + 16) = *(_DWORD *)(v56 + 16);
      *(_OWORD *)v57 = v58;
      v53 += 20;
      --v54;
    }
    while (v54);
  }
LABEL_66:
  operator delete(v72);
  return 1;
}

void sub_239633D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  if (__p)
    operator delete(__p);
  sub_239911CF8((uint64_t)&STACK[0x9F8]);
  if (a10)
  {
    *(_QWORD *)(v15 - 104) = a10;
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239633D9C(uint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  char *i;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  uint64_t j;
  uint64_t v24;
  float v25;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  float v29;
  unsigned int *k;
  unsigned int v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  float v38;
  unsigned int v39;
  float v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  float v47;
  uint64_t v48;
  float v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  float v55;
  unsigned int v56;
  float v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unsigned int *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  int64_t v78;
  int64_t v79;
  unsigned int *v80;
  int64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float v98;
  float v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  int64_t v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t *v107;
  unsigned int *v108;
  unsigned int *v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  float v114;
  float v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  float v125;
  unsigned int *v126;
  unint64_t v127;
  uint64_t v128;
  float v129;
  unsigned int *v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  float v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  float v140;
  unsigned int *v141;
  unsigned int *v142;
  unsigned int *v143;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = a2 - 1;
  v141 = a2 - 3;
  v142 = a2 - 2;
  i = (char *)v8;
  v143 = a2;
  while (2)
  {
    v8 = (unsigned int *)i;
    v11 = (char *)a2 - i;
    v12 = ((char *)a2 - i) >> 2;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v59 = *(a2 - 1);
        v60 = *(unsigned int *)i;
        v61 = **a3;
        v62 = *(float *)(v61 + 20 * v59 + 12);
        v63 = *(float *)(v61 + 20 * v60 + 12);
        if (v62 > v63 || v62 >= v63 && *(_DWORD *)(*a3[1] + 4 * v59) > *(_DWORD *)(*a3[1] + 4 * v60))
        {
          *(_DWORD *)i = v59;
          *(a2 - 1) = v60;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_239634A3C(i, (_DWORD *)i + 1, v9, a3);
      case 4uLL:
        return (uint64_t)sub_239634DEC(i, (_DWORD *)i + 1, (_DWORD *)i + 2, v9, a3);
      case 5uLL:
        return (uint64_t)sub_2396348B4(i, (_DWORD *)i + 1, (_DWORD *)i + 2, (_DWORD *)i + 3, v9, a3);
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (i != (char *)a2)
            {
              v78 = (v12 - 2) >> 1;
              v79 = v78;
              do
              {
                v81 = v79;
                if (v78 >= v79)
                {
                  v82 = a3[1];
                  v83 = (2 * v81) | 1;
                  v84 = (unsigned int *)&i[4 * v83];
                  v85 = **a3;
                  if (2 * v81 + 2 < (uint64_t)v12)
                  {
                    v86 = v84[1];
                    v87 = *v84;
                    v88 = *(float *)(v85 + 20 * v87 + 12);
                    v89 = *(float *)(v85 + 20 * v86 + 12);
                    if (v88 > v89 || v88 >= v89 && *(_DWORD *)(*v82 + 4 * v87) > *(_DWORD *)(*v82 + 4 * v86))
                    {
                      ++v84;
                      v83 = 2 * v81 + 2;
                    }
                  }
                  v90 = *(unsigned int *)&i[4 * v81];
                  v91 = *v84;
                  v92 = *(float *)(v85 + 20 * v91 + 12);
                  v93 = *(float *)(v85 + 20 * v90 + 12);
                  if (v92 <= v93 && (v92 < v93 || *(_DWORD *)(*v82 + 4 * v91) <= *(_DWORD *)(*v82 + 4 * v90)))
                  {
                    *(_DWORD *)&i[4 * v81] = v91;
                    if (v78 >= v83)
                    {
                      while (1)
                      {
                        v94 = 2 * v83;
                        v83 = (2 * v83) | 1;
                        v80 = (unsigned int *)&i[4 * v83];
                        v95 = v94 + 2;
                        if (v95 < (uint64_t)v12)
                        {
                          v96 = v80[1];
                          v97 = *v80;
                          v98 = *(float *)(v85 + 20 * v97 + 12);
                          v99 = *(float *)(v85 + 20 * v96 + 12);
                          if (v98 > v99 || v98 >= v99 && *(_DWORD *)(*v82 + 4 * v97) > *(_DWORD *)(*v82 + 4 * v96))
                          {
                            ++v80;
                            v83 = v95;
                          }
                        }
                        v100 = *v80;
                        v101 = *(float *)(v85 + 20 * v100 + 12);
                        if (v101 > v93 || v101 >= v93 && *(_DWORD *)(*v82 + 4 * v100) > *(_DWORD *)(*v82 + 4 * v90))
                          break;
                        *v84 = v100;
                        v84 = v80;
                        if (v78 < v83)
                          goto LABEL_117;
                      }
                    }
                    v80 = v84;
LABEL_117:
                    *v80 = v90;
                  }
                }
                v79 = v81 - 1;
              }
              while (v81);
              v102 = (unint64_t)v11 >> 2;
              do
              {
                v104 = 0;
                v105 = *(_DWORD *)i;
                v106 = *a3;
                v107 = a3[1];
                v108 = (unsigned int *)i;
                do
                {
                  v109 = v108;
                  v108 += v104 + 1;
                  v110 = 2 * v104;
                  result = (2 * v104) | 1;
                  v104 = result;
                  v111 = v110 + 2;
                  if (v111 < v102)
                  {
                    v112 = *v108;
                    result = (uint64_t)(v108 + 1);
                    v113 = v108[1];
                    v114 = *(float *)(*v106 + 20 * v112 + 12);
                    v115 = *(float *)(*v106 + 20 * v113 + 12);
                    if (v114 > v115 || v114 >= v115 && *(_DWORD *)(*v107 + 4 * v112) > *(_DWORD *)(*v107 + 4 * v113))
                    {
                      ++v108;
                      v104 = v111;
                    }
                  }
                  *v109 = *v108;
                }
                while (v104 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                if (v108 == --a2)
                {
                  *v108 = v105;
                }
                else
                {
                  *v108 = *a2;
                  *a2 = v105;
                  v116 = (char *)v108 - i + 4;
                  if (v116 >= 5)
                  {
                    v117 = a3[1];
                    v118 = ((unint64_t)v116 >> 2) - 2;
                    v119 = v118 >> 1;
                    v120 = (unsigned int *)&i[4 * (v118 >> 1)];
                    v121 = *v120;
                    v122 = *v108;
                    v123 = **a3;
                    v124 = *(float *)(v123 + 20 * v121 + 12);
                    result = v123 + 20 * v122;
                    v125 = *(float *)(result + 12);
                    if (v124 > v125
                      || v124 >= v125
                      && (result = *(unsigned int *)(*v117 + 4 * v122), *(_DWORD *)(*v117 + 4 * v121) > (int)result))
                    {
                      *v108 = v121;
                      if (v118 >= 2)
                      {
                        while (1)
                        {
                          v127 = v119 - 1;
                          v119 = (v119 - 1) >> 1;
                          v126 = (unsigned int *)&i[4 * v119];
                          v128 = *v126;
                          result = v123 + 20 * v128;
                          v129 = *(float *)(result + 12);
                          if (v129 <= v125)
                          {
                            if (v129 < v125)
                              break;
                            result = *(unsigned int *)(*v117 + 4 * v122);
                            if (*(_DWORD *)(*v117 + 4 * v128) <= (int)result)
                              break;
                          }
                          *v120 = v128;
                          v120 = (unsigned int *)&i[4 * v119];
                          if (v127 <= 1)
                            goto LABEL_158;
                        }
                      }
                      v126 = v120;
LABEL_158:
                      *v126 = v122;
                    }
                  }
                }
              }
              while (v102-- > 2);
            }
            return result;
          }
          v13 = v12 >> 1;
          v14 = (unsigned int *)&i[4 * (v12 >> 1)];
          if ((unint64_t)v11 < 0x201)
          {
            result = (uint64_t)sub_239634A3C(&v8[v12 >> 1], v8, v9, a3);
          }
          else
          {
            sub_239634A3C(v8, &v8[v12 >> 1], v9, a3);
            v15 = &v8[v13];
            sub_239634A3C(v8 + 1, v15 - 1, v142, a3);
            sub_239634A3C(v8 + 2, &v8[v13 + 1], v141, a3);
            result = (uint64_t)sub_239634A3C(v15 - 1, v14, &v8[v13 + 1], a3);
            v16 = *v8;
            *v8 = *v15;
            *v15 = v16;
            a2 = v143;
          }
          --a4;
          v17 = a3[1];
          v18 = *v8;
          v19 = **a3;
          if ((a5 & 1) == 0)
          {
            v21 = *(v8 - 1);
            v22 = *(float *)(v19 + 20 * v21 + 12);
            v20 = *(float *)(v19 + 20 * v18 + 12);
            if (v22 > v20 || v22 >= v20 && *(_DWORD *)(*v17 + 4 * v21) > *(_DWORD *)(*v17 + 4 * v18))
              goto LABEL_14;
            v43 = *v9;
            v44 = *(float *)(v19 + 20 * v43 + 12);
            if (v20 <= v44 && (v20 < v44 || *(_DWORD *)(*v17 + 4 * v18) <= *(_DWORD *)(*v17 + 4 * v43)))
            {
              for (i = (char *)(v8 + 1); i < (char *)a2; i += 4)
              {
                v48 = *(unsigned int *)i;
                v49 = *(float *)(v19 + 20 * v48 + 12);
                if (v20 > v49 || v20 >= v49 && *(_DWORD *)(*v17 + 4 * v18) > *(_DWORD *)(*v17 + 4 * v48))
                  break;
              }
            }
            else
            {
              i = (char *)v8;
              do
              {
                v46 = *((_DWORD *)i + 1);
                i += 4;
                v45 = v46;
                v47 = *(float *)(v19 + 20 * v46 + 12);
              }
              while (v20 <= v47 && (v20 < v47 || *(_DWORD *)(*v17 + 4 * v18) <= *(_DWORD *)(*v17 + 4 * v45)));
            }
            v50 = a2;
            if (i < (char *)a2)
            {
              v50 = v9;
              while (v20 > v44 || v20 >= v44 && *(_DWORD *)(*v17 + 4 * v18) > *(_DWORD *)(*v17 + 4 * v43))
              {
                v51 = *--v50;
                v43 = v51;
                v44 = *(float *)(v19 + 20 * v51 + 12);
              }
            }
            if (i < (char *)v50)
            {
              LODWORD(v52) = *(_DWORD *)i;
              LODWORD(v53) = *v50;
              do
              {
                *(_DWORD *)i = v53;
                *v50 = v52;
                do
                {
                  v54 = *((_DWORD *)i + 1);
                  i += 4;
                  v52 = v54;
                  v55 = *(float *)(v19 + 20 * v54 + 12);
                }
                while (v20 <= v55 && (v20 < v55 || *(_DWORD *)(*v17 + 4 * v18) <= *(_DWORD *)(*v17 + 4 * v52)));
                do
                {
                  do
                  {
                    v56 = *--v50;
                    v53 = v56;
                    v57 = *(float *)(v19 + 20 * v56 + 12);
                  }
                  while (v20 > v57);
                }
                while (v20 >= v57 && *(_DWORD *)(*v17 + 4 * v18) > *(_DWORD *)(*v17 + 4 * v53));
              }
              while (i < (char *)v50);
            }
            v58 = (unsigned int *)(i - 4);
            if (i - 4 != (char *)v8)
              *v8 = *v58;
            a5 = 0;
            *v58 = v18;
            continue;
          }
          v20 = *(float *)(v19 + 20 * v18 + 12);
LABEL_14:
          for (j = 0; ; ++j)
          {
            v24 = v8[j + 1];
            v25 = *(float *)(v19 + 20 * v24 + 12);
            if (v25 <= v20 && (v25 < v20 || *(_DWORD *)(*v17 + 4 * v24) <= *(_DWORD *)(*v17 + 4 * v18)))
              break;
          }
          v26 = &v8[j];
          v27 = (unint64_t)&v8[j + 1];
          if (j * 4)
          {
            v28 = *v9;
            v29 = *(float *)(v19 + 20 * v28 + 12);
            for (k = v9; v29 <= v20; v29 = *(float *)(v19 + 20 * v31 + 12))
            {
              if (v29 >= v20 && *(_DWORD *)(*v17 + 4 * v28) > *(_DWORD *)(*v17 + 4 * v18))
                break;
              v31 = *--k;
              v28 = v31;
            }
          }
          else
          {
            k = a2;
            if (v27 < (unint64_t)a2)
            {
              v32 = *v9;
              v33 = *(float *)(v19 + 20 * v32 + 12);
              k = v9;
              if (v33 <= v20)
              {
                k = v9;
                do
                {
                  if (v33 < v20)
                  {
                    if (v27 >= (unint64_t)k)
                      break;
                  }
                  else if (v27 >= (unint64_t)k || *(_DWORD *)(*v17 + 4 * v32) > *(_DWORD *)(*v17 + 4 * v18))
                  {
                    break;
                  }
                  v42 = *--k;
                  v32 = v42;
                  v33 = *(float *)(v19 + 20 * v42 + 12);
                }
                while (v33 <= v20);
              }
            }
          }
          if (v27 < (unint64_t)k)
          {
            LODWORD(v34) = *k;
            LODWORD(v35) = v24;
            v36 = (unsigned int *)v27;
            v37 = k;
            do
            {
              *v36++ = v34;
              *v37 = v35;
              while (1)
              {
                v35 = *v36;
                v38 = *(float *)(v19 + 20 * v35 + 12);
                if (v38 <= v20 && (v38 < v20 || *(_DWORD *)(*v17 + 4 * v35) <= *(_DWORD *)(*v17 + 4 * v18)))
                  break;
                ++v36;
              }
              do
              {
                v39 = *--v37;
                v34 = v39;
                v40 = *(float *)(v19 + 20 * v39 + 12);
              }
              while (v40 <= v20 && (v40 < v20 || *(_DWORD *)(*v17 + 4 * v34) <= *(_DWORD *)(*v17 + 4 * v18)));
            }
            while (v36 < v37);
            v26 = v36 - 1;
          }
          if (v26 != v8)
            *v8 = *v26;
          *v26 = v18;
          if (v27 < (unint64_t)k)
          {
LABEL_46:
            result = sub_239633D9C(v8, v26, a3, a4, a5 & 1);
            a5 = 0;
            i = (char *)(v26 + 1);
            continue;
          }
          v41 = sub_239634B7C(v8, v26, a3);
          i = (char *)(v26 + 1);
          result = sub_239634B7C(v26 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v41)
              continue;
            goto LABEL_46;
          }
          a2 = v26;
          if (v41)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
        {
          if (i != (char *)a2)
          {
            v130 = (unsigned int *)(i + 4);
            if (i + 4 != (char *)a2)
            {
              v131 = **a3;
              do
              {
                v132 = v8;
                v8 = v130;
                v134 = *v132;
                v133 = v132[1];
                v135 = *(float *)(v131 + 20 * v133 + 12);
                v136 = *(float *)(v131 + 20 * v134 + 12);
                if (v135 > v136 || v135 >= v136 && *(_DWORD *)(*a3[1] + 4 * v133) > *(_DWORD *)(*a3[1] + 4 * v134))
                {
                  do
                  {
                    do
                    {
                      v137 = v132;
                      v138 = v134;
                      v139 = *--v132;
                      v134 = v139;
                      v132[2] = v138;
                      v140 = *(float *)(v131 + 20 * v139 + 12);
                    }
                    while (v135 > v140);
                  }
                  while (v135 >= v140 && *(_DWORD *)(*a3[1] + 4 * v133) > *(_DWORD *)(*a3[1] + 4 * v134));
                  *v137 = v133;
                }
                v130 = v8 + 1;
              }
              while (v8 + 1 != a2);
            }
          }
          return result;
        }
        if (i == (char *)a2)
          return result;
        v64 = (unsigned int *)(i + 4);
        if (i + 4 == (char *)a2)
          return result;
        v65 = 0;
        v66 = a3[1];
        v67 = **a3;
        v68 = (unsigned int *)i;
        while (2)
        {
          v70 = (char *)v68;
          v68 = v64;
          v72 = *(unsigned int *)v70;
          v71 = *((unsigned int *)v70 + 1);
          v73 = *(float *)(v67 + 20 * v71 + 12);
          v74 = *(float *)(v67 + 20 * v72 + 12);
          if (v73 <= v74 && (v73 < v74 || *(_DWORD *)(*v66 + 4 * v71) <= *(_DWORD *)(*v66 + 4 * v72)))
            goto LABEL_102;
          *((_DWORD *)v70 + 1) = v72;
          v69 = i;
          if (v70 == i)
            goto LABEL_101;
          v75 = v65;
          while (1)
          {
            v76 = *(unsigned int *)&i[v75 - 4];
            result = v67 + 20 * v76;
            v77 = *(float *)(result + 12);
            if (v73 > v77)
              goto LABEL_108;
            if (v73 < v77)
              break;
            result = *(unsigned int *)(*v66 + 4 * v76);
            if (*(_DWORD *)(*v66 + 4 * v71) <= (int)result)
            {
              v69 = v70;
              goto LABEL_101;
            }
LABEL_108:
            v70 -= 4;
            *(_DWORD *)&i[v75] = v76;
            v75 -= 4;
            if (!v75)
            {
              v69 = i;
              goto LABEL_101;
            }
          }
          v69 = &i[v75];
LABEL_101:
          *(_DWORD *)v69 = v71;
LABEL_102:
          v64 = v68 + 1;
          v65 += 4;
          if (v68 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

_DWORD *sub_2396348B4(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t **a6)
{
  _DWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;

  result = sub_239634DEC(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = **a6;
  v16 = *(float *)(v15 + 20 * v13 + 12);
  v17 = *(float *)(v15 + 20 * v14 + 12);
  if (v16 > v17 || v16 >= v17 && *(_DWORD *)(*a6[1] + 4 * v13) > *(_DWORD *)(*a6[1] + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v18 = *a4;
    v19 = *a3;
    v20 = *(float *)(v15 + 20 * v18 + 12);
    v21 = *(float *)(v15 + 20 * v19 + 12);
    if (v20 > v21 || v20 >= v21 && *(_DWORD *)(*a6[1] + 4 * v18) > *(_DWORD *)(*a6[1] + 4 * v19))
    {
      *a3 = v18;
      *a4 = v19;
      v22 = *a3;
      v23 = *a2;
      v24 = *(float *)(v15 + 20 * v22 + 12);
      v25 = *(float *)(v15 + 20 * v23 + 12);
      if (v24 > v25 || v24 >= v25 && *(_DWORD *)(*a6[1] + 4 * v22) > *(_DWORD *)(*a6[1] + 4 * v23))
      {
        *a2 = v22;
        *a3 = v23;
        v26 = *a2;
        v27 = *a1;
        v28 = *(float *)(v15 + 20 * v26 + 12);
        v29 = *(float *)(v15 + 20 * v27 + 12);
        if (v28 > v29 || v28 >= v29 && *(_DWORD *)(*a6[1] + 4 * v26) > *(_DWORD *)(*a6[1] + 4 * v27))
        {
          *a1 = v26;
          *a2 = v27;
        }
      }
    }
  }
  return result;
}

_DWORD *sub_239634A3C(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;

  v4 = *a2;
  v5 = *result;
  v6 = a4[1];
  v7 = **a4;
  v8 = *(float *)(v7 + 20 * v4 + 12);
  v9 = *(float *)(v7 + 20 * v5 + 12);
  if (v8 <= v9 && (v8 < v9 || *(_DWORD *)(*v6 + 4 * v4) <= *(_DWORD *)(*v6 + 4 * v5)))
  {
    v12 = *a3;
    v13 = *(float *)(v7 + 20 * v12 + 12);
    if (v13 > v8 || v13 >= v8 && *(_DWORD *)(*v6 + 4 * v12) > *(_DWORD *)(*v6 + 4 * v4))
    {
      *a2 = v12;
      *a3 = v4;
      v14 = *a2;
      v15 = *result;
      v16 = *(float *)(v7 + 20 * v14 + 12);
      v17 = *(float *)(v7 + 20 * v15 + 12);
      if (v16 > v17 || v16 >= v17 && *(_DWORD *)(*a4[1] + 4 * v14) > *(_DWORD *)(*a4[1] + 4 * v15))
      {
        *result = v14;
        *a2 = v15;
      }
    }
  }
  else
  {
    v10 = *a3;
    v11 = *(float *)(v7 + 20 * v10 + 12);
    if (v11 > v8 || v11 >= v8 && *(_DWORD *)(*v6 + 4 * v10) > *(_DWORD *)(*v6 + 4 * v4))
    {
      *result = v10;
LABEL_17:
      *a3 = v5;
      return result;
    }
    *result = v4;
    *a2 = v5;
    v18 = *a3;
    v19 = *(float *)(v7 + 20 * v18 + 12);
    if (v19 > v9 || v19 >= v9 && *(_DWORD *)(*a4[1] + 4 * v18) > *(_DWORD *)(*a4[1] + 4 * v5))
    {
      *a2 = v18;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL sub_239634B7C(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v21 = *(a2 - 1);
      v22 = *a1;
      v23 = **a3;
      v24 = *(float *)(v23 + 20 * v21 + 12);
      v25 = *(float *)(v23 + 20 * v22 + 12);
      if (v24 > v25 || v24 >= v25 && *(_DWORD *)(*a3[1] + 4 * v21) > *(_DWORD *)(*a3[1] + 4 * v22))
      {
        *a1 = v21;
        *(a2 - 1) = v22;
      }
      return result;
    case 3:
      sub_239634A3C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_239634DEC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_2396348B4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_239634A3C(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = **a3;
      break;
  }
  while (2)
  {
    v14 = *v9;
    v15 = *v8;
    v16 = *(float *)(v12 + 20 * v14 + 12);
    v17 = *(float *)(v12 + 20 * v15 + 12);
    if (v16 <= v17 && (v16 < v17 || *(_DWORD *)(*a3[1] + 4 * v14) <= *(_DWORD *)(*a3[1] + 4 * v15)))
      goto LABEL_7;
    *v9 = v15;
    v13 = a1;
    if (v8 == a1)
      goto LABEL_6;
    v18 = v10;
    while (1)
    {
      v19 = *(unsigned int *)((char *)a1 + v18 + 4);
      v20 = *(float *)(v12 + 20 * v19 + 12);
      if (v16 > v20)
        goto LABEL_13;
      if (v16 < v20)
        break;
      if (*(_DWORD *)(*a3[1] + 4 * v14) <= *(_DWORD *)(*a3[1] + 4 * v19))
      {
        v13 = (unsigned int *)((char *)a1 + v18 + 8);
        goto LABEL_6;
      }
LABEL_13:
      --v8;
      *(unsigned int *)((char *)a1 + v18 + 8) = v19;
      v18 -= 4;
      if (v18 == -8)
      {
        v13 = a1;
        goto LABEL_6;
      }
    }
    v13 = v8;
LABEL_6:
    *v13 = v14;
    if (++v11 == 8)
      return v9 + 1 == a2;
LABEL_7:
    v8 = v9;
    v10 += 4;
    if (++v9 != a2)
      continue;
    return 1;
  }
}

_DWORD *sub_239634DEC(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t **a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  result = sub_239634A3C(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = **a5;
  v14 = *(float *)(v13 + 20 * v11 + 12);
  v15 = *(float *)(v13 + 20 * v12 + 12);
  if (v14 > v15 || v14 >= v15 && *(_DWORD *)(*a5[1] + 4 * v11) > *(_DWORD *)(*a5[1] + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v16 = *a3;
    v17 = *a2;
    v18 = *(float *)(v13 + 20 * v16 + 12);
    v19 = *(float *)(v13 + 20 * v17 + 12);
    if (v18 > v19 || v18 >= v19 && *(_DWORD *)(*a5[1] + 4 * v16) > *(_DWORD *)(*a5[1] + 4 * v17))
    {
      *a2 = v16;
      *a3 = v17;
      v20 = *a2;
      v21 = *a1;
      v22 = *(float *)(v13 + 20 * v20 + 12);
      v23 = *(float *)(v13 + 20 * v21 + 12);
      if (v22 > v23 || v22 >= v23 && *(_DWORD *)(*a5[1] + 4 * v20) > *(_DWORD *)(*a5[1] + 4 * v21))
      {
        *a1 = v20;
        *a2 = v21;
      }
    }
  }
  return result;
}

void sub_239634F24(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0xCCCCCCCCCCCCCCCLL)
      sub_2394189F8();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x666666666666666)
      v10 = 0xCCCCCCCCCCCCCCCLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xCCCCCCCCCCCCCCCLL)
        sub_239418A80();
      v11 = (char *)operator new(20 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[20 * v7];
    v14 = &v11[20 * v10];
    v15 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 20);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 - 1);
        *(_OWORD *)(v13 - 20) = v17;
        v13 -= 20;
        v5 -= 20;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

char *sub_2396350C0(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  void *v12;
  char *v13;
  void **v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void **v19;
  void **v20;
  void **v21;
  void *v22;
  BOOL v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  char *v27;
  void *memptr;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  v10 = *(unsigned int *)(a2 + 16);
  v11 = (v10 + 31) & 0x1FFFFFFE0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = v11;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x100BBD03uLL);
  v12 = memptr;
  *(_QWORD *)v8 = memptr;
  if (!v12)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v26, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v10)
    memcpy(v12, *(const void **)a2, v10);
  *((_DWORD *)v8 + 4) = *(_DWORD *)(a2 + 16);
  v13 = v8 + 24;
  v27 = v8 + 24;
  v15 = (char *)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
    v19 = (void **)a1[1];
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v8[v16 * 8];
      v18 = (char *)&v14[v16];
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 3) = v14[v16 - 3];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v17 - 2) = v14[v16 - 2];
      *((_QWORD *)v18 - 2) = 0;
      *((_DWORD *)v17 - 2) = v14[v16 - 1];
      *((_DWORD *)v18 - 2) = 0;
      v16 -= 3;
    }
    while (&v14[v16] != (void **)v15);
    v19 = (void **)*a1;
    v14 = (void **)a1[1];
    v8 += v16 * 8;
    v13 = v27;
  }
  *a1 = v8;
  a1[1] = v13;
  a1[2] = v9;
  if (v14 != v19)
  {
    v20 = v14 - 3;
    v21 = v14 - 3;
    do
    {
      v22 = *v21;
      v21 -= 3;
      free(v22);
      v23 = v20 == v19;
      v20 = v21;
    }
    while (!v23);
    v14 = v19;
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_2396352C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23942A88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2396352D4(unsigned int *a1, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *j;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  unsigned int v21;
  float v22;
  uint64_t v23;
  float *v24;
  unsigned int v25;
  float v26;
  unsigned int *v27;
  unint64_t v28;
  uint64_t v29;
  float v30;
  unsigned int *k;
  unsigned int v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  float v39;
  unsigned int v40;
  float v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float i;
  unsigned int v48;
  float v49;
  unsigned int *v50;
  unsigned int v51;
  float *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  unsigned int v57;
  float v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  float v63;
  float v64;
  uint64_t *v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  float v74;
  float v75;
  uint64_t v76;
  unsigned int v77;
  float v78;
  int64_t v79;
  int64_t v80;
  unsigned int *v81;
  int64_t v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  unsigned int v86;
  float v87;
  float v88;
  unsigned int v89;
  unsigned int v90;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  float v96;
  float v97;
  unsigned int v98;
  float v99;
  uint64_t v100;
  uint64_t v102;
  unsigned int v103;
  uint64_t *v104;
  unsigned int *v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  float v110;
  float v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  float v119;
  float v120;
  unint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  float v124;
  unsigned int *v125;
  uint64_t v126;
  unsigned int *v127;
  unsigned int v128;
  float v129;
  float v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  float v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int *v138;

float sub_239635E88(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t **a6)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  float result;
  float v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  unsigned int v20;
  unsigned int v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  float v25;

  sub_2396363FC(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v14 = **a6;
  result = *(float *)(v14 + 20 * *a5 + 12);
  v16 = *(float *)(v14 + 20 * *a4 + 12);
  if (result > v16
    || result >= v16 && (result = *(float *)(v14 + 20 * v12 + 16), result > *(float *)(v14 + 20 * v13 + 16)))
  {
    *a4 = v12;
    *a5 = v13;
    v17 = *a4;
    v18 = *a3;
    result = *(float *)(v14 + 20 * *a4 + 12);
    v19 = *(float *)(v14 + 20 * *a3 + 12);
    if (result > v19
      || result >= v19 && (result = *(float *)(v14 + 20 * v17 + 16), result > *(float *)(v14 + 20 * v18 + 16)))
    {
      *a3 = v17;
      *a4 = v18;
      v20 = *a3;
      v21 = *a2;
      result = *(float *)(v14 + 20 * *a3 + 12);
      v22 = *(float *)(v14 + 20 * *a2 + 12);
      if (result > v22
        || result >= v22 && (result = *(float *)(v14 + 20 * v20 + 16), result > *(float *)(v14 + 20 * v21 + 16)))
      {
        *a2 = v20;
        *a3 = v21;
        v23 = *a2;
        v24 = *a1;
        result = *(float *)(v14 + 20 * *a2 + 12);
        v25 = *(float *)(v14 + 20 * *a1 + 12);
        if (result > v25
          || result >= v25 && (result = *(float *)(v14 + 20 * v23 + 16), result > *(float *)(v14 + 20 * v24 + 16)))
        {
          *a1 = v23;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

float sub_239636020(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  float v6;
  float result;
  unsigned int v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  unsigned int v14;
  float v15;

  v4 = *a2;
  v5 = *a1;
  v6 = *(float *)(a4 + 20 * *a2 + 12);
  result = *(float *)(a4 + 20 * *a1 + 12);
  if (v6 <= result && (v6 < result || *(float *)(a4 + 20 * v4 + 16) <= *(float *)(a4 + 20 * v5 + 16)))
  {
    v10 = *a3;
    result = *(float *)(a4 + 20 * *a3 + 12);
    if (result > v6
      || result >= v6 && (result = *(float *)(a4 + 20 * v10 + 16), result > *(float *)(a4 + 20 * v4 + 16)))
    {
      *a2 = v10;
      *a3 = v4;
      v11 = *a2;
      v12 = *a1;
      result = *(float *)(a4 + 20 * *a2 + 12);
      v13 = *(float *)(a4 + 20 * *a1 + 12);
      if (result > v13
        || result >= v13 && (result = *(float *)(a4 + 20 * v11 + 16), result > *(float *)(a4 + 20 * v12 + 16)))
      {
        *a1 = v11;
        *a2 = v12;
      }
    }
  }
  else
  {
    v8 = *a3;
    v9 = *(float *)(a4 + 20 * *a3 + 12);
    if (v9 > v6 || v9 >= v6 && *(float *)(a4 + 20 * v8 + 16) > *(float *)(a4 + 20 * v4 + 16))
    {
      *a1 = v8;
LABEL_17:
      *a3 = v5;
      return result;
    }
    *a1 = v4;
    *a2 = v5;
    v14 = *a3;
    v15 = *(float *)(a4 + 20 * *a3 + 12);
    if (v15 > result
      || v15 >= result && (result = *(float *)(a4 + 20 * v14 + 16), result > *(float *)(a4 + 20 * v5 + 16)))
    {
      *a2 = v14;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL sub_23963617C(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  float v24;
  float v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v21 = *(a2 - 1);
      v22 = *a1;
      v23 = **a3;
      v24 = *(float *)(v23 + 20 * v21 + 12);
      v25 = *(float *)(v23 + 20 * *a1 + 12);
      if (v24 > v25 || v24 >= v25 && *(float *)(v23 + 20 * v21 + 16) > *(float *)(v23 + 20 * v22 + 16))
      {
        *a1 = v21;
        *(a2 - 1) = v22;
      }
      return result;
    case 3:
      sub_239636020(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_2396363FC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_239635E88(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_239636020(a1, a1 + 1, a1 + 2, **a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      v12 = **a3;
      break;
  }
  while (2)
  {
    v14 = *v9;
    v15 = *v8;
    v16 = *(float *)(v12 + 20 * *v9 + 12);
    v17 = *(float *)(v12 + 20 * *v8 + 12);
    if (v16 <= v17 && (v16 < v17 || *(float *)(v12 + 20 * v14 + 16) <= *(float *)(v12 + 20 * v15 + 16)))
      goto LABEL_7;
    *v9 = v15;
    v13 = a1;
    if (v8 == a1)
      goto LABEL_6;
    v18 = v10;
    while (1)
    {
      v19 = *(unsigned int *)((char *)a1 + v18 + 4);
      v20 = *(float *)(v12 + 20 * v19 + 12);
      if (v16 > v20)
        goto LABEL_13;
      if (v16 < v20)
        break;
      if (*(float *)(v12 + 20 * v14 + 16) <= *(float *)(v12 + 20 * v19 + 16))
      {
        v13 = (unsigned int *)((char *)a1 + v18 + 8);
        goto LABEL_6;
      }
LABEL_13:
      --v8;
      *(unsigned int *)((char *)a1 + v18 + 8) = v19;
      v18 -= 4;
      if (v18 == -8)
      {
        v13 = a1;
        goto LABEL_6;
      }
    }
    v13 = v8;
LABEL_6:
    *v13 = v14;
    if (++v11 == 8)
      return v9 + 1 == a2;
LABEL_7:
    v8 = v9;
    v10 += 4;
    if (++v9 != a2)
      continue;
    return 1;
  }
}

float sub_2396363FC(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t **a5)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  float result;
  float v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  float v20;

  sub_239636020(a1, a2, a3, **a5);
  v10 = *a4;
  v11 = *a3;
  v12 = **a5;
  result = *(float *)(v12 + 20 * *a4 + 12);
  v14 = *(float *)(v12 + 20 * *a3 + 12);
  if (result > v14
    || result >= v14 && (result = *(float *)(v12 + 20 * v10 + 16), result > *(float *)(v12 + 20 * v11 + 16)))
  {
    *a3 = v10;
    *a4 = v11;
    v15 = *a3;
    v16 = *a2;
    result = *(float *)(v12 + 20 * *a3 + 12);
    v17 = *(float *)(v12 + 20 * *a2 + 12);
    if (result > v17
      || result >= v17 && (result = *(float *)(v12 + 20 * v15 + 16), result > *(float *)(v12 + 20 * v16 + 16)))
    {
      *a2 = v15;
      *a3 = v16;
      v18 = *a2;
      v19 = *a1;
      result = *(float *)(v12 + 20 * *a2 + 12);
      v20 = *(float *)(v12 + 20 * *a1 + 12);
      if (result > v20
        || result >= v20 && (result = *(float *)(v12 + 20 * v18 + 16), result > *(float *)(v12 + 20 * v19 + 16)))
      {
        *a1 = v18;
        *a2 = v19;
      }
    }
  }
  return result;
}

void sub_239636544(uint64_t a1, int a2)
{
  void *v3;
  char *v4;
  void **v5;
  int v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;

  v3 = *(void **)a1;
  v5 = (void **)(a1 + 24);
  v4 = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_DWORD *)(a1 + 68);
  v7 = a2 / v6;
  if (a2 / v6 <= 1)
    v7 = 1;
  *(_DWORD *)(a1 + 64) = v7;
  v8 = (v7 * v6);
  *(_DWORD *)(a1 + 96) = v8;
  if (v8 <= (uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v3) >> 4)
  {
    v10 = v4;
    v12 = 1;
    v13 = v8;
    if (v8)
    {
LABEL_7:
      sub_2394FBB68(v5, v13);
      v4 = *(char **)(a1 + 24);
      v10 = *(char **)(a1 + 32);
      goto LABEL_11;
    }
  }
  else
  {
    v9 = (char *)operator new(16 * v8);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = &v9[16 * v8];
    v10 = v4;
    if (v3)
    {
      operator delete(v3);
      v8 = *(unsigned int *)(a1 + 96);
      v4 = *(char **)(a1 + 24);
      v10 = *(char **)(a1 + 32);
    }
    v11 = (v10 - v4) >> 3;
    v12 = v8 >= v11;
    v13 = v8 - v11;
    if (v8 > v11)
      goto LABEL_7;
  }
  if (!v12)
  {
    v10 = &v4[8 * v8];
    *(_QWORD *)(a1 + 32) = v10;
  }
LABEL_11:
  if (v10 - v4 >= 1)
    bzero(v4, v10 - v4);
}

char *sub_239636644(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  const double *v35;
  double *v36;
  uint64_t v37;
  const double *v38;
  double *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  const double *v53;
  double *v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  _BYTE *v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _OWORD *v67;
  __int128 *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  char *v75;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  float64x2x2_t v82;
  float64x2x2_t v83;
  float64x2x2_t v84;
  float64x2x2_t v85;

  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 4;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  v10 = a1[2];
  if (v5 >= v10)
  {
    v42 = ((uint64_t)(v5 - v6) >> 4) + 1;
    if (v42 >> 60)
      sub_2394189F8();
    v43 = v10 - v6;
    if (v43 >> 3 > v42)
      v42 = v43 >> 3;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
      v44 = 0xFFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    v81 = a1 + 2;
    if (v44)
    {
      if (v44 >> 60)
        sub_239418A80();
      v45 = (char *)operator new(16 * v44);
    }
    else
    {
      v45 = 0;
    }
    v77 = v45;
    v78 = (unint64_t)&v45[16 * v8];
    v79 = v78;
    v80 = &v45[16 * v44];
    sub_239636B28((uint64_t)&v77, a3);
    v46 = v78;
    v47 = (char *)*a1;
    v48 = v78;
    if ((char *)*a1 != v9)
    {
      v49 = (v7 & 0xFFFFFFFFFFFFFFF0) + v6 - (_QWORD)v47 - 16;
      v50 = v9;
      v48 = v78;
      if (v49 < 0xD0)
        goto LABEL_68;
      if (v78 - (v49 & 0xFFFFFFFFFFFFFFF0) - 16 < (unint64_t)v9)
      {
        v50 = v9;
        v48 = v78;
        if ((v7 & 0xFFFFFFFFFFFFFFF0) - (v49 & 0xFFFFFFFFFFFFFFF0) + v6 - 16 < v78)
          goto LABEL_68;
      }
      v51 = (v49 >> 4) + 1;
      v52 = 16 * (v51 & 0x1FFFFFFFFFFFFFFCLL);
      v50 = &v9[-v52];
      v48 = v78 - v52;
      v53 = (const double *)(v9 - 32);
      v54 = (double *)(v78 - 32);
      v55 = v51 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v83 = vld2q_f64(v53);
        v56 = v53 - 4;
        v85 = vld2q_f64(v56);
        vst2q_f64(v54, v83);
        v57 = v54 - 4;
        vst2q_f64(v57, v85);
        v54 -= 8;
        v53 -= 8;
        v55 -= 4;
      }
      while (v55);
      if (v51 != (v51 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_68:
        do
        {
          v58 = *((_QWORD *)v50 - 2);
          v50 -= 16;
          *(_QWORD *)(v48 - 16) = v58;
          v48 -= 16;
          *(_QWORD *)(v48 + 8) = *((_QWORD *)v50 + 1);
        }
        while (v50 != v47);
      }
    }
    v78 = v48;
    v59 = (char *)a1[1];
    v60 = (_QWORD *)v79;
    if (v59 != v9)
    {
      v61 = (_BYTE *)((v7 & 0xFFFFFFFFFFFFFFF0) + v6);
      v62 = v59 - v61 - 16;
      if (v62 < 0xD0)
        goto LABEL_69;
      if (v79 < (unint64_t)&v61[(v62 & 0xFFFFFFFFFFFFFFF0) + 16]
        && (unint64_t)v9 < (v62 & 0xFFFFFFFFFFFFFFF0) + v79 + 16)
      {
        goto LABEL_69;
      }
      v64 = (v62 >> 4) + 1;
      v65 = 16 * (v64 & 0x1FFFFFFFFFFFFFFCLL);
      v9 += v65;
      v66 = (_QWORD *)(v79 + v65);
      v67 = (_OWORD *)(v79 + 32);
      v68 = (__int128 *)(v6 + 16 * v8 + 32);
      v69 = v64 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v71 = *(v68 - 2);
        v70 = *(v68 - 1);
        v73 = *v68;
        v72 = v68[1];
        v68 += 4;
        *(v67 - 2) = v71;
        *(v67 - 1) = v70;
        *v67 = v73;
        v67[1] = v72;
        v67 += 4;
        v69 -= 4;
      }
      while (v69);
      v60 = v66;
      if (v64 != (v64 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_69:
        do
        {
          *v60 = *(_QWORD *)v9;
          v60[1] = *((_QWORD *)v9 + 1);
          v60 += 2;
          v9 += 16;
        }
        while (v9 != v59);
        v66 = v60;
      }
      v48 = v78;
      v9 = (char *)a1[1];
      v60 = v66;
    }
    v74 = (char *)*a1;
    *a1 = v48;
    a1[1] = (unint64_t)v60;
    v75 = (char *)a1[2];
    a1[2] = (unint64_t)v80;
    v79 = (unint64_t)v9;
    v80 = v75;
    v77 = v74;
    v78 = (unint64_t)v74;
    if (v9 != v74)
      v79 = (unint64_t)&v9[(v74 - v9 + 15) & 0xFFFFFFFFFFFFFFF0];
    if (v74)
      operator delete(v74);
    return (char *)v46;
  }
  else
  {
    v11 = *a3;
    if (v9 == (char *)v5)
    {
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v6 + 16 * v8 + 8) = a3[1];
      a1[1] = (unint64_t)(v9 + 16);
    }
    else
    {
      v12 = a3[1];
      v13 = v5 - (_QWORD)(v9 + 16);
      v14 = v5 - 16;
      v15 = (_QWORD *)a1[1];
      if (v5 >= 0x10)
      {
        v16 = (v7 & 0xFFFFFFFFFFFFFFF0) + v13;
        v17 = (_BYTE *)(v16 + v6);
        v18 = v16 + v6 + 16;
        if (v5 > v18)
          v18 = a1[1];
        v19 = v18 + ~v6 - v16;
        v20 = (_QWORD *)(v5 - 16);
        v15 = (_QWORD *)a1[1];
        if (v19 < 0x170)
          goto LABEL_70;
        v21 = v5 >= (unint64_t)&v17[(v19 & 0xFFFFFFFFFFFFFFF0) + 16]
           || v14 >= (v19 & 0xFFFFFFFFFFFFFFF0) + v5 + 16;
        v20 = (_QWORD *)(v5 - 16);
        v15 = (_QWORD *)a1[1];
        if (!v21)
          goto LABEL_70;
        v22 = (v19 >> 4) + 1;
        v23 = 16 * (v22 & 0x1FFFFFFFFFFFFFFCLL);
        v20 = (_QWORD *)(v14 + v23);
        v15 = (_QWORD *)(v5 + v23);
        v24 = (_OWORD *)(v5 + 32);
        v25 = (__int128 *)(16 * (v13 >> 4) + 16 * v8 + v6 + 32);
        v26 = v22 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(v25 - 2);
          v27 = *(v25 - 1);
          v30 = *v25;
          v29 = v25[1];
          v25 += 4;
          *(v24 - 2) = v28;
          *(v24 - 1) = v27;
          *v24 = v30;
          v24[1] = v29;
          v24 += 4;
          v26 -= 4;
        }
        while (v26);
        if (v22 != (v22 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_70:
          do
          {
            *v15 = *v20;
            v15[1] = v20[1];
            v15 += 2;
            v20 += 2;
          }
          while ((unint64_t)v20 < v5);
        }
      }
      a1[1] = (unint64_t)v15;
      if ((char *)v5 != v9 + 16)
      {
        if ((unint64_t)(v13 - 16) < 0xD0
          || v5 - (v13 & 0xFFFFFFFFFFFFFFF0) < v14
          && v6 + v13 + (v7 & 0xFFFFFFFFFFFFFFF0) - (v13 & 0xFFFFFFFFFFFFFFF0) < v5)
        {
          goto LABEL_23;
        }
        v31 = ((unint64_t)(v13 - 16) >> 4) + 1;
        v32 = 16 * (v31 & 0x1FFFFFFFFFFFFFFCLL);
        v33 = v5 - v32;
        v34 = v14 - v32;
        v35 = (const double *)(v5 - 48);
        v36 = (double *)(v5 - 32);
        v37 = v31 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v82 = vld2q_f64(v35);
          v38 = v35 - 4;
          v84 = vld2q_f64(v38);
          vst2q_f64(v36, v82);
          v39 = v36 - 4;
          vst2q_f64(v39, v84);
          v36 -= 8;
          v35 -= 8;
          v37 -= 4;
        }
        while (v37);
        v5 = v33;
        v14 = v34;
        if (v31 != (v31 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_23:
          v40 = (_QWORD *)(v5 - 8);
          do
          {
            v41 = *(_QWORD *)(v14 - 16);
            v14 -= 16;
            *(v40 - 1) = v41;
            *v40 = *(_QWORD *)(v14 + 8);
            v40 -= 2;
          }
          while ((char *)v14 != v9);
        }
      }
      *(_QWORD *)v9 = v11;
      *(_QWORD *)(v6 + 16 * v8 + 8) = v12;
    }
  }
  return v9;
}

