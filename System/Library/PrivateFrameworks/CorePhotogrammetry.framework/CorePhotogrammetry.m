_QWORD *sub_239415E70(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  float v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  void *exception;
  _DWORD v18[2];
  BOOL v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;

  *a1 = &off_250ADB170;
  a1[1] = 0;
  a1[2] = sub_239416A58;
  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)((char *)v4 + 13) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    ((void (*)(uint64_t))a1[2])(v5);
  a1[2] = sub_239416A58;
  v6 = *(int *)(a2 + 12);
  if (v6 >= 5 || ((0x1Du >> v6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "Unsupported DescriptorType");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v7 = a1[1];
  *(_DWORD *)(v7 + 16) = dword_239EC64B0[v6];
  *(_BYTE *)(v7 + 20) = 0x10000uLL >> (8 * v6);
  v20 = 1070386381;
  v8 = (_DWORD)v6 != 4;
  v24 = 0x300000000;
  v25 = 0x3F0000000000000ALL;
  v26 = 5;
  v9 = 0.8;
  v27 = 0x3FC0000040900000;
  v28 = 36;
  if (!*(_BYTE *)(a2 + 36))
    v9 = 1.0;
  v10 = *(_DWORD *)(a2 + 32);
  v18[0] = *(_DWORD *)(a2 + 28);
  *(float *)&v18[1] = v9;
  v21 = *(_BYTE *)(a2 + 37);
  v19 = v8;
  v11 = *(_DWORD *)(a2 + 4);
  v22 = v10;
  v23 = v11;
  if (*(_DWORD *)(a2 + 16) <= 2u)
    HIDWORD(v20) = *(_DWORD *)(a2 + 16);
  v12 = operator new();
  sub_2396313D8(v12, v18);
  v13 = (uint64_t **)a1[1];
  v14 = *v13;
  *v13 = (uint64_t *)v12;
  if (v14)
  {
    v15 = sub_2396313DC(v14);
    MEMORY[0x23B83E31C](v15, 0xA0C40AFF93C70);
  }
  LFV2HandleCreate();
  return a1;
}

void sub_239416078(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x23B83E31C](v2, 0xA0C40AFF93C70);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(void))(v1 + 16))();
  nullsub_4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394160E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  void *__p;
  void *v33;
  char v34;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_DWORD *)(v12 + 16);
  LODWORD(v12) = *(unsigned __int8 *)(v12 + 20);
  v15 = (_QWORD *)(a3 + 24);
  v14 = *(void **)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0x600000000;
  *(_DWORD *)(a3 + 16) = v13;
  *(_DWORD *)(a3 + 20) = v12;
  if (v14)
  {
    operator delete(v14);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  v17 = (_QWORD *)(a3 + 48);
  v16 = *(void **)(a3 + 48);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  if (v16)
  {
    *(_QWORD *)(a3 + 56) = v16;
    operator delete(v16);
    *v17 = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  v18 = (void **)(a3 + 72);
  v19 = *(char **)(a3 + 72);
  *v17 = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  if (v19)
  {
    v20 = *(char **)(a3 + 80);
    v21 = v19;
    if (v20 != v19)
    {
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 3);
        v20 -= 24;
        free(v22);
      }
      while (v20 != v19);
      v21 = *v18;
    }
    *(_QWORD *)(a3 + 80) = v19;
    operator delete(v21);
    *v18 = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  *v18 = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v34 = 0;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  LOBYTE(__p) = 0;
  v23 = sub_239631424(**(unsigned int ****)(a1 + 8), a2, (uint64_t)v29);
  if (!(_DWORD)v23)
    sub_239417874(v29, (unsigned int *)(a2 + 32), a3, a4, a5, a6);
  if (v34 && __p)
  {
    v33 = __p;
    operator delete(__p);
  }
  v24 = (char *)v30[1];
  if (v30[1])
  {
    v25 = (char *)v31;
    v26 = v30[1];
    if ((void *)v31 != v30[1])
    {
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        free(v27);
      }
      while (v25 != v24);
      v26 = v30[1];
    }
    *(_QWORD *)&v31 = v24;
    operator delete(v26);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  return v23;
}

void sub_23941628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394162A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2394162A0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
  }
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        free(v6);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v5);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_239416324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 8))
  {
    sub_239416500(a2, v14);
    sub_23979C580((uint64_t)v14);
    v12 = 0;
    v13 = sub_23941D2D4(a1, (_QWORD *)a3);
    v5 = LFV2ComputeDescriptors();
    v6 = operator new(0x20uLL);
    *v6 = &off_250ADB2A8;
    v6[1] = &v13;
    v6[2] = &v12;
    v16 = v6;
    sub_23941D6E0(a1, v12, a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 20));
    if (v5)
      v7 = 1;
    else
      v7 = v12 == 0;
    v8 = v7;
    if (!v16)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v16 + 48))(v16);
    v9 = v16;
    if (v16 == v15)
    {
      v10 = 4;
      v9 = v15;
    }
    else
    {
      if (!v16)
      {
LABEL_15:
        sub_23979BCF4(v14);
        return v8;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_15;
  }
  return 0;
}

void sub_239416478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_239416834((uint64_t *)va1);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239416494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2394164A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2394164BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2394164D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2394164E8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

_QWORD *sub_239416500@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  CVPixelBufferRef v10;
  unint64_t *v11;
  unint64_t v12;
  __IOSurface *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v26[3];
  uint64_t (**v27)();
  __int128 v28;
  _OWORD v29[2];
  _QWORD v30[3];
  CVPixelBufferRef pixelBufferOut;
  __int128 v32;
  _OWORD v33[2];

  v30[1] = 0;
  v30[2] = 0;
  v30[0] = &off_250AEF6A0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 56))(v4, v30);
  sub_23979D0F0((uint64_t)v30, &pixelBufferOut);
  v10 = pixelBufferOut;
  v9 = (std::__shared_weak_count *)v32;
  if (!(_QWORD)v32)
    goto LABEL_11;
  v11 = (unint64_t *)(v32 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v10)
      goto LABEL_12;
  }
  else
  {
LABEL_11:
    if (v10)
    {
LABEL_12:
      pixelBufferOut = 0;
      v13 = (__IOSurface *)sub_23979C580((uint64_t)v30);
      CVPixelBufferCreateWithIOSurface(0, v13, 0, &pixelBufferOut);
      sub_23979BA20(a2, (std::__shared_weak_count_vtbl *)pixelBufferOut, 0, 0);
      return sub_2399107E4(v30);
    }
  }
  pixelBufferOut = (CVPixelBufferRef)operator new(0xA0uLL);
  v32 = xmmword_239EC64A0;
  strcpy((char *)pixelBufferOut, "/Library/Caches/com.apple.xbs/Sources/CorePhotogrammetry/aspenbase/third-party/cpg-applecmake/src/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h:216");
  sub_23979BD68((uint64_t)a2, (unsigned int *)(a1 + 32), 0x4C303038u, (uint64_t)&pixelBufferOut, 1u);
  if (SHIBYTE(v32) < 0)
    operator delete(pixelBufferOut);
  v15 = a2[1];
  v14 = a2[2];
  v26[0] = &off_250AE94F0;
  v26[1] = v15;
  v26[2] = v14;
  if (v14)
  {
    v16 = (unint64_t *)(v14 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  sub_239785B2C((uint64_t)v26, (uint64_t)&pixelBufferOut);
  v27 = &off_250ADB1D0;
  v18 = v32;
  v32 = 0uLL;
  v28 = v18;
  v29[0] = v33[0];
  *(_OWORD *)((char *)v29 + 14) = *(_OWORD *)((char *)v33 + 14);
  nullsub_4(v33);
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  nullsub_4(&pixelBufferOut);
  sub_23979BCF4(v26);
  sub_239416AC8(a1, (uint64_t)&v27);
  nullsub_4(v29);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  nullsub_4(&v27);
  return sub_2399107E4(v30);
}

void sub_2394167BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_239416D30((uint64_t)va);
  sub_23979BCF4(v4);
  sub_2399107E4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2394167F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  if (*(char *)(v11 - 65) < 0)
  {
    operator delete(*(void **)(v11 - 88));
    sub_2399107E4((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_2399107E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_239416834(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1[3];
  if (!v2)
    sub_2394172E0();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 == a1)
  {
    v4 = 4;
    v3 = a1;
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t sub_2394168A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _BYTE v10[80];
  int v11;
  char v12;

  v11 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, a2, a3, a4, a5, v10);
  if (v11 != -1)
    ((void (*)(char *, _BYTE *))off_250ADB280[v11])(&v12, v10);
  if ((_DWORD)v8)
    return v8;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3);
}

void sub_239416948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23941695C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23941695C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_250ADB280[v2])(&v4, a1);
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

uint64_t sub_2394169B4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB170;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return nullsub_4(a1);
}

void sub_2394169F4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB170;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239416A48(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t **sub_239416A58(uint64_t **result)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;

  if (result)
  {
    v1 = result;
    LFV2HandleRelease();
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      v3 = sub_2396313DC(v2);
      MEMORY[0x23B83E31C](v3, 0xA0C40AFF93C70);
    }
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

uint64_t sub_239416AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_17;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
    goto LABEL_39;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_39;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 49))
      goto LABEL_14;
LABEL_17:
    v25 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    if (!v13)
      goto LABEL_32;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 49))
    goto LABEL_17;
LABEL_14:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v25, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  if (!v13)
    goto LABEL_32;
LABEL_18:
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_40;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v18)
    goto LABEL_40;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (*(_BYTE *)(a2 + 53))
      goto LABEL_30;
  }
  else
  {
LABEL_40:
    if (*(_BYTE *)(a2 + 53))
    {
LABEL_30:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(&v24, v13, 1);
      goto LABEL_33;
    }
  }
LABEL_32:
  v24 = 0;
LABEL_33:
  sub_239416F24(a1, (_DWORD *)a2);
  v22 = v24;
  v24 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  result = v25;
  v25 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_239416CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239416D30(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

uint64_t sub_239416DA0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_239416E08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239416E7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_239416E84(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_239416E8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_239416EA0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_239416F24(uint64_t a1, _DWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t (**v7)();
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;

  v7 = &off_250ADB210;
  sub_239417068(a1, (uint64_t)&v8);
  sub_2397AA044(&v7, a2);
  nullsub_4(&v10);
  v3 = v9;
  if (!v9)
    return nullsub_4(&v7);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_4(&v7);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_4(&v7);
}

void sub_239416FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239416FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239416FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_239416FF8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

void sub_239417068(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v5;
  v21 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_2398EB464((uint64_t)&v18, 2, a1 + 32, 2, a1 + 40, 1);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_WORD *)(a1 + 48);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = 1;
  *(_WORD *)(a2 + 44) = v9;
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  nullsub_4(&v18);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2394171B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2394171C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 24);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239417238(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_239417240(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_239417248@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_23941725C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_2394172E0()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_250ADB268;
  __cxa_throw(exception, (struct type_info *)&unk_250ADB240, (void (*)(void *))std::exception::~exception);
}

void sub_239417318(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239417340(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v3)
    return nullsub_4(a2);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return nullsub_4(a2);
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return nullsub_4(a2);
}

_QWORD *sub_2394173A8(uint64_t a1, _QWORD *a2)
{
  return sub_23979BCF4(a2);
}

void sub_2394173B4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394173C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADB2A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_239417408(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADB2A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_239417430()
{
  LFV2KeypointsRelease();
  return LFV2DescriptorsRelease();
}

BOOL sub_239417460(float32x2_t *a1, uint64_t a2, _DWORD *a3, float a4)
{
  double v7;
  float v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  float64x2_t v13;
  uint64_t (**v14)();
  uint64_t v15;
  std::__shared_weak_count *v16;

  v14 = &off_250ADB350;
  sub_23941CBA8(a2, &v15);
  v13 = vcvtq_f64_f32(*a1);
  v8 = sub_239417534((uint64_t)&v14, v13.f64, a3, 1uLL, v13.f64[0], v7);
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  nullsub_4(&v14);
  return v8 > a4;
}

void sub_239417520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

float sub_239417534(uint64_t a1, double *a2, _DWORD *a3, unint64_t a4, double a5, double a6)
{
  signed int v6;
  signed int v7;
  double v8;
  double v9;
  double v10;
  signed int v11;
  signed int v12;
  float v13;
  float v14;
  signed int v15;
  signed int v16;
  float v17;
  float v18;

  LODWORD(a5) = *a3;
  LODWORD(a6) = a3[1];
  v7 = *(_DWORD *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 36);
  v8 = *a2 / (double)*(unint64_t *)&a5 * (double)v7;
  v9 = a2[1] / (double)*(unint64_t *)&a6 * (double)v6;
  v10 = (double)a4;
  v11 = vcvtpd_s64_f64(v8 + (double)a4);
  v12 = vcvtpd_s64_f64(v9 + (double)a4);
  if ((v11 & 0x80000000) == 0)
  {
    v13 = -1.0;
    v14 = -1.0;
    if (v7 > v11 && (v12 & 0x80000000) == 0 && v6 > v12)
    {
      LOBYTE(v14) = *(_BYTE *)(*(_QWORD *)(a1 + 24)
                             + (*(_DWORD *)(a1 + 40) * v11 + *(_DWORD *)(a1 + 44) * v12));
      v14 = (float)LODWORD(v14);
    }
    v15 = vcvtmd_s64_f64(v9 - v10);
    if (v7 > v11 && (v15 & 0x80000000) == 0 && v6 > v15)
    {
      LOBYTE(v13) = *(_BYTE *)(*(_QWORD *)(a1 + 24)
                             + (*(_DWORD *)(a1 + 40) * v11 + *(_DWORD *)(a1 + 44) * v15));
      v13 = (float)LODWORD(v13);
    }
    v16 = vcvtmd_s64_f64(v8 - v10);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_11;
    return (float)((float)((float)(v14 + v13) + -1.0) + -1.0) * 0.25;
  }
  v15 = vcvtmd_s64_f64(v9 - v10);
  v14 = -1.0;
  v13 = -1.0;
  v16 = vcvtmd_s64_f64(v8 - v10);
  if (v16 < 0)
    return (float)((float)((float)(v14 + v13) + -1.0) + -1.0) * 0.25;
LABEL_11:
  v17 = -1.0;
  v18 = -1.0;
  if (v7 > v16 && (v12 & 0x80000000) == 0 && v6 > v12)
  {
    LOBYTE(v18) = *(_BYTE *)(*(_QWORD *)(a1 + 24)
                           + (*(_DWORD *)(a1 + 40) * v16 + *(_DWORD *)(a1 + 44) * v12));
    v18 = (float)LODWORD(v18);
  }
  if (v7 > v16 && (v15 & 0x80000000) == 0 && v6 > v15)
  {
    LOBYTE(v17) = *(_BYTE *)(*(_QWORD *)(a1 + 24)
                           + (*(_DWORD *)(a1 + 40) * v16 + *(_DWORD *)(a1 + 44) * v15));
    v17 = (float)LODWORD(v17);
  }
  return (float)((float)((float)(v14 + v13) + v18) + v17) * 0.25;
}

uint64_t sub_2394176A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

float sub_239417708(uint64_t a1, double *a2, _DWORD *a3, unint64_t a4, double a5, double a6)
{
  signed int v6;
  signed int v7;
  double v8;
  double v9;
  double v10;
  signed int v11;
  signed int v12;
  float v13;
  float v14;
  signed int v16;
  signed int v18;
  float v19;
  float v20;

  LODWORD(a5) = *a3;
  LODWORD(a6) = a3[1];
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v8 = *a2 / (double)*(unint64_t *)&a5 * (double)v7;
  v9 = a2[1] / (double)*(unint64_t *)&a6 * (double)v6;
  v10 = (double)a4;
  v11 = vcvtpd_s64_f64(v8 + (double)a4);
  v12 = vcvtpd_s64_f64(v9 + (double)a4);
  if ((v11 & 0x80000000) == 0)
  {
    v13 = -1.0;
    v14 = -1.0;
    if ((v12 & 0x80000000) == 0 && v7 > v11 && v6 > v12)
    {
      v14 = 0.0;
      if (*(_BYTE *)(*(_QWORD *)a1 + (v12 + v6 * v11)))
        v14 = 1.0;
    }
    v16 = vcvtmd_s64_f64(v9 - v10);
    if ((v16 & 0x80000000) == 0 && v7 > v11 && v6 > v16)
    {
      v13 = 0.0;
      if (*(_BYTE *)(*(_QWORD *)a1 + (v16 + v6 * v11)))
        v13 = 1.0;
    }
    v18 = vcvtmd_s64_f64(v8 - v10);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_17;
    return (float)((float)((float)(v14 + v13) + -1.0) + -1.0) * 0.25;
  }
  v16 = vcvtmd_s64_f64(v9 - v10);
  v14 = -1.0;
  v13 = -1.0;
  v18 = vcvtmd_s64_f64(v8 - v10);
  if (v18 < 0)
    return (float)((float)((float)(v14 + v13) + -1.0) + -1.0) * 0.25;
LABEL_17:
  v19 = -1.0;
  v20 = -1.0;
  if ((v12 & 0x80000000) == 0 && v7 > v18 && v6 > v12)
  {
    v20 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)a1 + (v12 + v6 * v18)))
      v20 = 1.0;
  }
  if ((v16 & 0x80000000) == 0 && v7 > v18 && v6 > v16)
  {
    v19 = 0.0;
    if (*(_BYTE *)(*(_QWORD *)a1 + (v16 + v6 * v18)))
      v19 = 1.0;
  }
  return (float)((float)((float)(v14 + v13) + v20) + v19) * 0.25;
}

uint64_t sub_239417874(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char **v10;
  uint64_t i;
  void *v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  _BOOL4 v21;
  double v22;
  size_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  size_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  _QWORD *v56;
  float v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  size_t v63;
  float32x2_t *v64;
  int32x2_t v65;
  float v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  int32x4_t v70;
  uint16x4_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  unsigned __int16 *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  float v85;
  _BYTE *v86;
  float v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v98;
  unint64_t v99;
  unint64_t v101;
  uint64_t *v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  float32x2_t v109;
  _QWORD v110[3];
  void *__dst[2];
  __int128 v112;
  _OWORD v113[2];
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int16 v119;
  uint64_t (**v120)();
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  __int128 v125;
  _BYTE v126[26];
  uint64_t (**v127)();
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int16 v132;
  uint64_t (**v133)();
  uint64_t v134;
  std::__shared_weak_count *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int16 v139;

  v8 = a1[1];
  v98 = *a1;
  v106 = (v8 - *a1) / 20;
  v10 = (char **)(a3 + 72);
  v9 = *(_QWORD *)(a3 + 72);
  v101 = *(unsigned int *)(a3 + 16);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 56) = *(_QWORD *)(a3 + 48);
  for (i = *(_QWORD *)(a3 + 80); i != v9; i -= 24)
  {
    v12 = *(void **)(i - 24);
    free(v12);
  }
  *(_QWORD *)(a3 + 80) = v9;
  *(_DWORD *)(a3 + 8) = 0;
  v103 = (uint64_t *)(a3 + 24);
  sub_2394187EC(a3 + 24, v106);
  v13 = *(_BYTE **)(a3 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 64) - (_QWORD)v13) >> 3) < v106)
  {
    v14 = *(_BYTE **)(a3 + 56);
    v15 = (char *)operator new(24 * v106);
    v16 = &v15[24 * ((v14 - v13) / 24)];
    v17 = v16;
    if (v14 != v13)
    {
      v18 = &v15[24 * ((v14 - v13) / 24)];
      do
      {
        v17 = v18 - 24;
        v19 = *(_OWORD *)(v14 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v14 - 1);
        *(_OWORD *)(v18 - 24) = v19;
        v14 -= 24;
        v18 -= 24;
      }
      while (v14 != v13);
    }
    *(_QWORD *)(a3 + 48) = v17;
    *(_QWORD *)(a3 + 56) = v16;
    *(_QWORD *)(a3 + 64) = &v15[24 * v106];
    if (v13)
      operator delete(v13);
  }
  sub_2394188EC(v10, v106);
  v20 = a1[4] - a1[3];
  if (v20)
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3) == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2);
    if (0xAAAAAAAAAAAAAAABLL * (v20 >> 3) == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2))
      goto LABEL_14;
  }
  else
  {
    v21 = 0;
  }
  if (!(_DWORD)v101)
    sub_239EBEBA8();
LABEL_14:
  v133 = &off_250ADB468;
  sub_23941CE5C((uint64_t)&v134);
  sub_239418AA8(&v124);
  v127 = &off_250ADB390;
  sub_239418DA0((uint64_t)&v128);
  v23 = *(unsigned int *)(a6 + 80);
  if ((_DWORD)v23)
  {
    if ((_DWORD)v23 == 2)
    {
      v35 = *(_QWORD *)(a6 + 8);
      v34 = *(_QWORD *)(a6 + 16);
      v120 = &off_250AE94F0;
      v121 = v35;
      v122 = v34;
      if (v34)
      {
        v36 = (unint64_t *)(v34 + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      v31 = sub_23979C8D0((uint64_t)&v120);
      v23 = sub_23979CAD8((uint64_t)&v120);
      if (sub_23979A918((uint64_t)&v120) == 875704422
        || sub_23979A918((uint64_t)&v120) == 875704438)
      {
        v110[0] = &off_250AE94F0;
        v110[1] = v121;
        v110[2] = v122;
        if (v122)
        {
          v38 = (unint64_t *)(v122 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        sub_239419164((uint64_t)__dst, (uint64_t)v110);
        v123 = (int)__dst[0];
        v40 = v112;
        v112 = 0uLL;
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
        v125 = v40;
        if (v41)
        {
          p_shared_owners = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(p_shared_owners);
          while (__stlxr(v43 - 1, p_shared_owners));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        *(_OWORD *)v126 = v113[0];
        *(_OWORD *)&v126[10] = *(_OWORD *)((char *)v113 + 10);
        v44 = v115;
        v115 = 0uLL;
        v45 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
        v128 = v44;
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v129 = v116;
        v130 = v117;
        v131 = v118;
        v132 = v119;
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
        if (*((_QWORD *)&v115 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        nullsub_4(&v114);
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
        if (*((_QWORD *)&v112 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        nullsub_4(&__dst[1]);
        sub_23979BCF4(v110);
      }
      sub_23979BCF4(&v120);
    }
    else if ((_DWORD)v23 == 1)
    {
      v25 = *(_QWORD *)(a6 + 8);
      v24 = *(std::__shared_weak_count **)(a6 + 16);
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = v135;
      v134 = v25;
      v135 = v24;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v138 = *(_OWORD *)(a6 + 56);
      v136 = *(_OWORD *)(a6 + 24);
      v137 = *(_OWORD *)(a6 + 40);
      v139 = *(_WORD *)(a6 + 72);
      v31 = v138;
      v23 = DWORD1(v138);
    }
    else
    {
      v23 = 0;
      v31 = 0;
    }
    v33 = (float)v31 / (float)*a2;
    *(float *)&v22 = (float)a2[1];
    v32 = (float)v23 / *(float *)&v22;
    v105 = a5;
    v104 = v21;
    if (!a5)
    {
LABEL_69:
      v56 = a1;
      v99 = 0;
      if (v8 == v98)
        goto LABEL_111;
      goto LABEL_70;
    }
  }
  else
  {
    v32 = 1.0;
    v31 = *(unsigned int *)(a6 + 80);
    v33 = 1.0;
    v105 = a5;
    v104 = v21;
    if (!a5)
      goto LABEL_69;
  }
  v54 = *(_DWORD *)(a4 + 32);
  if (!v54)
    goto LABEL_69;
  v55 = *(_DWORD *)(a4 + 36);
  if (!v55)
    goto LABEL_69;
  v56 = a1;
  if (v55 > v54)
    v54 = *(_DWORD *)(a4 + 36);
  v57 = (float)v54;
  if (*a2 <= a2[1])
    v58 = a2[1];
  else
    v58 = *a2;
  LODWORD(v22) = 10.0;
  v99 = (unint64_t)(float)((float)vcvtms_u32_f32(v57 / (float)v58) * 10.0);
  if (v8 != v98)
  {
LABEL_70:
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = v31 - 1;
    v63 = v23 - 1;
    while (1)
    {
      v64 = (float32x2_t *)(*v56 + v60);
      v65 = (int32x2_t)v64[1];
      v109 = *v64;
      v66 = -1.0;
      if (v105 && *(_DWORD *)(a4 + 32) && *(_DWORD *)(a4 + 36))
      {
        *(float64x2_t *)__dst = vcvtq_f64_f32(*v64);
        if (sub_239417534(a4, (double *)__dst, a2, v99, *(double *)__dst, v22) >= 63.75)
          v66 = 1.0;
        else
          v66 = 0.0;
      }
      if (!*(_DWORD *)(a6 + 80))
        break;
      v67 = vcvtms_u32_f32(v33 * v109.f32[0]);
      v68 = vcvtms_u32_f32(vmuls_lane_f32(v32, v109, 1));
      if (v62 < v67)
        v67 = v62;
      if (v63 < v68)
        v68 = v63;
      if ((_DWORD)v138)
        v69 = DWORD1(v138) == 0;
      else
        v69 = 1;
      if (v69)
      {
        *(int32x2_t *)v70.i8 = vrev64_s32(*(int32x2_t *)&v126[8]);
        v70.i64[1] = v131;
        v71 = (uint16x4_t)vmovn_s32(vceqzq_s32(v70));
        v71.i16[0] = vmaxv_u16(v71);
        if ((v71.i8[0] & 1) != 0)
          break;
        v71.i8[0] = *(_BYTE *)(*(_QWORD *)v126 + (*(_DWORD *)&v126[16] * v67 + *(_DWORD *)&v126[20] * v68));
        v85 = (float)v71.u32[0];
        *(float *)__dst = v85;
        v86 = (_BYTE *)(v129 + DWORD2(v131) * (v67 >> 1) + HIDWORD(v131) * (v68 >> 1));
        LOBYTE(v85) = *v86;
        v87 = (float)LODWORD(v85);
        *((float *)__dst + 1) = v87;
        LOBYTE(v87) = v86[1];
        *(float *)&__dst[1] = (float)LODWORD(v87);
        v72 = sub_23941C388((float *)__dst, v123) & 0xFFFFFF;
        __dst[0] = 0;
        __dst[1] = 0;
        LODWORD(v112) = 0;
        if (!v104)
        {
LABEL_98:
          LODWORD(v112) = v101;
          sub_23941D1E8((uint64_t)__dst, v101);
          v75 = v112;
          v76 = *(_DWORD *)(a3 + 16);
          if (v76)
            goto LABEL_99;
          goto LABEL_96;
        }
      }
      else
      {
        v77 = (unsigned __int16 *)(v136 + (DWORD2(v138) * v67 + HIDWORD(v138) * v68));
        v72 = *v77 | (*((unsigned __int8 *)v77 + 2) << 16);
        __dst[0] = 0;
        __dst[1] = 0;
        LODWORD(v112) = 0;
        if (!v104)
          goto LABEL_98;
      }
LABEL_92:
      v73 = v56[3] + v59;
      if ((void **)v73 == __dst)
      {
        v75 = 0;
        v76 = *(_DWORD *)(a3 + 16);
        if (v76)
          goto LABEL_99;
      }
      else
      {
        v74 = *(unsigned int *)(v73 + 16);
        sub_23941D1E8((uint64_t)__dst, v74);
        if ((_DWORD)v74)
          memcpy(__dst[0], *(const void **)v73, v74);
        v75 = *(_DWORD *)(v73 + 16);
        LODWORD(v112) = v75;
        v76 = *(_DWORD *)(a3 + 16);
        if (v76)
        {
LABEL_99:
          if (v76 != v75)
            goto LABEL_73;
          goto LABEL_100;
        }
      }
LABEL_96:
      *(_DWORD *)(a3 + 16) = v75;
LABEL_100:
      if (*(_QWORD *)(a3 + 32) <= (unint64_t)v61)
      {
        sub_23941C4FC(a3, v61 + 1);
        v78 = *v103;
        v79 = (unint64_t)v61 >> 6;
        v81 = *(_QWORD *)(*v103 + 8 * v79);
        v80 = 1 << v61;
LABEL_104:
        *(_QWORD *)(v78 + 8 * v79) = v81 | v80;
        v82 = *(_QWORD *)(a3 + 48) + 24 * v61;
        *(float32x2_t *)v82 = v109;
        *(_DWORD *)(v82 + 8) = v72;
        *(int32x2_t *)(v82 + 12) = vrev64_s32(v65);
        *(float *)(v82 + 20) = v66;
        v83 = *(_QWORD *)(a3 + 72) + 24 * v61;
        if ((void **)v83 != __dst)
        {
          v84 = v112;
          sub_23941D1E8(v83, v112);
          if ((_DWORD)v84)
            memcpy(*(void **)v83, __dst[0], v84);
          *(_DWORD *)(v83 + 16) = v112;
        }
        ++*(_DWORD *)(a3 + 8);
        goto LABEL_73;
      }
      v78 = *v103;
      v79 = (unint64_t)v61 >> 6;
      v80 = 1 << v61;
      v81 = *(_QWORD *)(*v103 + 8 * v79);
      if ((v81 & (1 << v61)) == 0)
        goto LABEL_104;
LABEL_73:
      free(__dst[0]);
      ++v61;
      v60 += 20;
      v59 += 24;
      if (v106 == v61)
        goto LABEL_111;
    }
    v72 = 0;
    __dst[0] = 0;
    __dst[1] = 0;
    LODWORD(v112) = 0;
    if (!v104)
      goto LABEL_98;
    goto LABEL_92;
  }
LABEL_111:
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
  if (*((_QWORD *)&v128 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  nullsub_4(&v127);
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  nullsub_4(&v124);
  v94 = v135;
  if (v135)
  {
    v95 = (unint64_t *)&v135->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  return nullsub_4(&v133);
}

void sub_239418220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_23979BCF4(&a26);
  sub_23979BCF4(&a48);
  sub_2394182F0((uint64_t)&a51);
  sub_2394183B0(v51 - 224);
  _Unwind_Resume(a1);
}

void sub_239418258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;
  uint64_t v55;

  nullsub_4(a11);
  if (a54)
    sub_239EBEB78();
  nullsub_4(v54);
  sub_2394183B0(v55 - 224);
  _Unwind_Resume(a1);
}

void sub_239418288(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2394183B0(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_23941829C(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_4(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_2394182B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  sub_2394182F0((uint64_t)&a51);
  sub_2394183B0(v51 - 224);
  _Unwind_Resume(a1);
}

void sub_2394182CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  free(a29);
  sub_2394182F0((uint64_t)&a51);
  sub_2394183B0(v51 - 224);
  _Unwind_Resume(a1);
}

uint64_t sub_2394182F0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = a1 + 64;
  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    nullsub_4(v2);
    v6 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v6)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    nullsub_4(a1 + 64);
    v6 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v6)
      goto LABEL_11;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_11:
  nullsub_4(a1 + 8);
  return a1;
}

uint64_t sub_2394183B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

uint64_t sub_239418418@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  float v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  BOOL v12;
  int v13;
  double v14;
  unint64_t v15;
  int v16;
  float v17;
  int v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(float *)(a2 + 8);
  if (v4 >= 0.0)
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(result + 32);
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = *(_QWORD *)(result + 24);
      v10 = *(_QWORD *)(result + 48);
      do
      {
        if ((*(_QWORD *)(v9 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v7)) != 0)
        {
          if (v6 <= v7
            || (*(_QWORD *)(v9 + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) & (1 << v7)) == 0)
          {
            sub_239EBEBD8();
          }
          v11 = *(float *)(v10 + 24 * v7 + 20);
          v12 = v11 < 0.0;
          v13 = v11 != 0.0;
          v14 = v11;
          if (v12)
            v14 = 0.0 - v14;
          if (v14 <= 0.00000001)
            v13 = 0;
          v8 += v13;
        }
        ++v7;
      }
      while (v6 != v7);
      v15 = 0;
      v16 = 0;
      result = 24;
      do
      {
        if ((*(_QWORD *)(v9 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v15)) != 0)
        {
          if (v6 <= v15
            || (*(_QWORD *)(v9 + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) & (1 << v15)) == 0)
          {
            sub_239EBEBD8();
          }
          v17 = *(float *)(v10 + 24 * v15 + 20);
          v12 = v17 < 0.0;
          v18 = v17 == 0.0;
          v19 = v17;
          if (v12)
            v19 = 0.0 - v19;
          if (v19 <= 0.00000001)
            v18 = 1;
          v16 += v18;
        }
        ++v15;
      }
      while (v6 != v15);
    }
    else
    {
      v8 = 0;
      v16 = 0;
    }
    v20 = (float)(v4 * (float)v5) + 0.000001;
    v21 = (double)v5 * (1.0 - v4) + 0.000001;
    v22 = v21 / 625.0;
    v23 = (float)v8 / (float)(v20 / 625.0);
    v24 = 1.0;
    if (v23 > 1.0)
      v23 = 1.0;
    v25 = (float)v16 / v22;
    if (v25 <= 1.0)
      v24 = v25;
    *(_QWORD *)a3 = v3;
    *(_DWORD *)(a3 + 8) = v8;
    *(_DWORD *)(a3 + 12) = v16;
    *(float *)(a3 + 16) = v23;
    *(float *)(a3 + 20) = v24;
  }
  else
  {
    *(_QWORD *)a3 = v3;
    *(_DWORD *)(a3 + 8) = -1;
    *(_DWORD *)(a3 + 12) = -1;
    *(float *)(a3 + 16) = -1.0;
    *(float *)(a3 + 20) = -1.0;
  }
  return result;
}

float sub_23941860C(int *a1, int *a2, float *a3)
{
  int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  float result;
  unsigned int v12;
  float v13;

  *a3 = 1.0;
  v6 = a2[10];
  if (v6 == 1)
  {
LABEL_4:
    if ((sub_23941E3A8() & 1) != 0)
    {
      LODWORD(v7) = *a2;
      if (*a2 >= 0xC80)
        v7 = 3200;
      else
        v7 = v7;
      v9 = *a1;
      v8 = a1[1];
      if (v9 <= v8)
        v10 = a1[1];
      else
        v10 = *a1;
      if (v8 >= v9)
        v8 = *a1;
      if ((v9 & 0xF) != 0)
      {
        result = (float)(v9 - (unint64_t)(v9 & 0xF) + 16) / (float)v9;
        if (v7 >= v10)
          goto LABEL_26;
      }
      else
      {
        result = 1.0;
        if (v7 >= v10)
          goto LABEL_26;
      }
LABEL_23:
      v13 = (float)v7 / (float)v10;
      *a3 = v13;
      if ((float)(v13 * (float)(int)v8) < 192.0)
        return result;
      goto LABEL_30;
    }
    goto LABEL_16;
  }
  if (v6 != 2)
  {
    if (v6 != 3)
      goto LABEL_17;
    goto LABEL_4;
  }
LABEL_16:
  sub_23941DBA8();
LABEL_17:
  v7 = *a2;
  v8 = *a1;
  v12 = a1[1];
  if (*a1 <= v12)
    v10 = a1[1];
  else
    v10 = *a1;
  if (v12 < v8)
    v8 = a1[1];
  result = 1.0;
  if (v7 < v10)
    goto LABEL_23;
LABEL_26:
  if (v8 >= 0xC0)
  {
    v13 = *a3;
    goto LABEL_30;
  }
  v13 = 192.0 / (float)(int)v8;
  *a3 = v13;
  if ((float)(v13 * (float)v10) <= (float)v7)
  {
LABEL_30:
    result = result * v13;
    *a3 = result;
  }
  return result;
}

uint64_t sub_239418764(int *a1)
{
  int v1;

  v1 = *a1;
  if (*a1 == 1)
  {
    if ((sub_23941E3A8() & 1) != 0)
      return 1;
  }
  else if (v1 != 2)
  {
    if (v1 != 3)
      return 0;
    if ((sub_23941E3A8() & 1) != 0)
      return 1;
  }
  if (sub_23941DBA8())
    return 2;
  else
    return 0;
}

uint64_t sub_2394187D4(_DWORD *a1)
{
  if (*a1 == 2)
    return 2505;
  else
    return 2502;
}

void sub_2394187EC(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

void sub_2394188EC(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = &v4[v9];
        v12 = *(_QWORD *)&v4[v9 - 16];
        *((_QWORD *)v10 - 3) = *(_QWORD *)&v4[v9 - 24];
        *((_QWORD *)v10 - 2) = v12;
        *((_QWORD *)v11 - 3) = 0;
        *((_QWORD *)v11 - 2) = 0;
        *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
        *((_DWORD *)v11 - 2) = 0;
        v9 -= 24;
      }
      while (&v4[v9] != v2);
      v13 = *a1;
      v2 = a1[1];
      *a1 = &v8[v9];
      a1[1] = v8;
      a1[2] = v7;
      if (v2 != v13)
      {
        do
        {
          v14 = (void *)*((_QWORD *)v2 - 3);
          v2 -= 24;
          free(v14);
        }
        while (v2 != v13);
        v2 = v13;
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

void sub_2394189F8()
{
  sub_239418A0C("vector");
}

void sub_239418A0C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_239418A5C(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_250ADB2F8, MEMORY[0x24BEDAAF0]);
}

void sub_239418A48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_239418A5C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_239418A80()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_250ADB328, MEMORY[0x24BEDABB8]);
}

_QWORD *sub_239418AA8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = &off_250ADB350;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0uLL;
  sub_239418C7C((uint64_t)(a1 + 1), &v8, &v6);
  v2 = v9;
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_239418B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a14)
    sub_239EBEB78();
  nullsub_4(v14);
  _Unwind_Resume(a1);
}

void sub_239418B60(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239418BCC()
{
  return 1;
}

uint64_t sub_239418BD4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_239418BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_239418BF8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_239418C7C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_239418D88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_239418DA0(uint64_t a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = 2;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_239419040(a1, &v10, &v4);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_239418EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239418EBC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

void sub_239418F24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239418F90()
{
  return 5;
}

uint64_t sub_239418F98(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_239418FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_239418FBC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_239419040(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_23941914C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

uint64_t sub_239419164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[3];
  _QWORD v21[2];
  std::__shared_weak_count *v22;
  _QWORD v23[3];

  v4 = a1 + 8;
  sub_239418AA8((_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = &off_250ADB390;
  sub_239418DA0(a1 + 72);
  if (sub_23979A918(a2) != 875704422 && sub_23979A918(a2) != 875704438)
  {
    sub_239A444D4((uint64_t)"unknown file", 56, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v23[0] = &off_250AE94F0;
  v23[1] = v6;
  v23[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_2394193D0((uint64_t)v23, 0, v21);
  sub_239419498(v4, (uint64_t)v21);
  v9 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  nullsub_4(v21);
  sub_23979BCF4(v23);
  v13 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v20[0] = &off_250AE94F0;
  v20[1] = v13;
  v20[2] = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  sub_2394196C4((uint64_t)v20, 1u, v21);
  sub_23941978C(a1 + 64, (uint64_t)v21);
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  nullsub_4(v21);
  sub_23979BCF4(v20);
  *(_DWORD *)a1 = sub_23979A918(a2);
  return a1;
}

void sub_239419348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;

  sub_239419954((uint64_t)&a12);
  sub_23979BCF4(&a9);
  sub_239418EBC(v13);
  sub_2394176A0(v12);
  _Unwind_Resume(a1);
}

void sub_239419398(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  sub_2394176A0(v1);
  _Unwind_Resume(a1);
}

void sub_2394193B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_239418EBC(v2);
  sub_2394176A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394193D0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[2];
  std::__shared_weak_count *v9;
  uint64_t v10;

  sub_239785CDC(a1, a2, v8);
  *a3 = &off_250ADB3D0;
  sub_239419AD8((uint64_t)v8, (uint64_t)(a3 + 1));
  nullsub_4(&v10);
  v4 = v9;
  if (!v9)
    return nullsub_4(v8);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return nullsub_4(v8);
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return nullsub_4(v8);
}

void sub_23941947C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239416D30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239419498(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t (**v23)();
  __int128 v24;
  _BYTE v25[26];

  v23 = &off_250ADB350;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_WORD *)(a2 + 48);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v25[8] = *(_OWORD *)(a2 + 32);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    *(_QWORD *)&v24 = v3;
    *((_QWORD *)&v24 + 1) = v4;
    *(_QWORD *)v25 = v9;
    *(_WORD *)&v25[24] = v7;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v13 = *(_WORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 24);
    v24 = v3;
    *(_QWORD *)v25 = v14;
    *(_OWORD *)&v25[8] = *(_OWORD *)(a2 + 32);
    *(_WORD *)&v25[24] = v13;
  }
  v15 = v24;
  v24 = 0uLL;
  v16 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v15;
  if (!v16)
    goto LABEL_20;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v25;
    *(_OWORD *)(a1 + 34) = *(_OWORD *)&v25[10];
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (!*((_QWORD *)&v24 + 1))
      goto LABEL_26;
  }
  else
  {
LABEL_20:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v25;
    *(_OWORD *)(a1 + 34) = *(_OWORD *)&v25[10];
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (!*((_QWORD *)&v24 + 1))
      goto LABEL_26;
  }
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_26:
  nullsub_4(&v23);
  return a1;
}

uint64_t sub_23941965C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

uint64_t sub_2394196C4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD v8[2];
  std::__shared_weak_count *v9;
  uint64_t v10;

  sub_239785CDC(a1, a2, v8);
  *a3 = &off_250ADB428;
  sub_23941BCC8((uint64_t)v8, (uint64_t)(a3 + 1));
  nullsub_4(&v10);
  v4 = v9;
  if (!v9)
    return nullsub_4(v8);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return nullsub_4(v8);
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return nullsub_4(v8);
}

void sub_239419770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  nullsub_4(v2);
  sub_239416D30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23941978C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t (**v24)();
  __int128 v25;
  _BYTE v26[48];
  __int16 v27;

  v24 = &off_250ADB390;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_WORD *)(a2 + 72);
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v26[8] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v26[24] = v10;
    *(_QWORD *)&v26[40] = *(_QWORD *)(a2 + 64);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    *(_QWORD *)&v25 = v3;
    *((_QWORD *)&v25 + 1) = v4;
    *(_QWORD *)v26 = v9;
    v27 = v7;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v14 = *(_WORD *)(a2 + 72);
    v15 = *(_QWORD *)(a2 + 24);
    v25 = v3;
    *(_QWORD *)v26 = v15;
    v16 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v26[8] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v26[24] = v16;
    *(_QWORD *)&v26[40] = *(_QWORD *)(a2 + 64);
    v27 = v14;
  }
  v17 = v25;
  v25 = 0uLL;
  v18 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v26;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)&v26[16];
  *(_OWORD *)(a1 + 56) = *(_OWORD *)&v26[32];
  *(_WORD *)(a1 + 72) = v27;
  if (*((_QWORD *)&v25 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v25 + 1) + 16))(*((_QWORD *)&v25 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v25 + 1));
    }
  }
  nullsub_4(&v24);
  return a1;
}

uint64_t sub_239419954(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return nullsub_4(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return nullsub_4(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return nullsub_4(a1);
}

void sub_2394199BC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239419A28()
{
  return 1;
}

uint64_t sub_239419A30(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_239419A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_239419A54(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_239419AD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _BOOL8 v11;
  _BOOL4 v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  std::logic_error *exception;
  std::string v24;

  if (*(_DWORD *)(a1 + 48) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239419D34(a1, &v24);
    std::logic_error::logic_error(exception, &v24);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v24.__r_.__value_.__r.__words[0] = v4;
      v24.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_DWORD *)(a1 + 24);
  v11 = v10 != 0;
  v12 = v10 == 0;
  if (!*(_DWORD *)(a1 + 28))
    v12 = 1;
  v13 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v14 = !v12;
  if (v12)
    v13 = 0;
  v15 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v15 = 0;
  if (HIDWORD(v15) * HIDWORD(v13) == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = v13 | v11;
  v18 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v24.__r_.__value_.__l.__size_;
  if (v24.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v24.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *(_QWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 8) = size;
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  else
  {
    *(_OWORD *)a2 = v24.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v15;
    *(_QWORD *)(a2 + 32) = v17;
    *(_WORD *)(a2 + 40) = v18;
  }
}

void sub_239419CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_239419D34(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23941B0FC();
  v5 = sub_23941B830();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

void sub_239419DAC(const char *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, unsigned int *a6@<X5>, std::string *a7@<X8>)
{
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  size_t v17;
  size_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  size_t v25;
  size_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int64x2_t v31;
  int8x16_t v32;
  char *v33;
  void **v34;
  void *v35;
  void *v36;
  char *v37;
  unint64_t v38;
  void *__p[2];
  char v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v13 = sub_23941A2D0(&v36, a1);
  v14 = v13;
  v37 = v13;
  if ((unint64_t)v13 >= v38)
  {
    v16 = sub_23941A624((char **)&v36, a2);
    v37 = v16;
    if ((unint64_t)v16 >= v38)
      goto LABEL_18;
    goto LABEL_6;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a2, *(_QWORD *)(a2 + 8));
    v16 = v14 + 24;
    v37 = v14 + 24;
    if ((unint64_t)(v14 + 24) >= v38)
      goto LABEL_18;
LABEL_6:
    v17 = strlen(a3);
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v18 = v17;
    if (v17 >= 0x17)
    {
      v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v20 = v17 | 7;
      v21 = v20 + 1;
      v19 = operator new(v20 + 1);
      *((_QWORD *)v16 + 1) = v18;
      *((_QWORD *)v16 + 2) = v21 | 0x8000000000000000;
      *(_QWORD *)v16 = v19;
    }
    else
    {
      v16[23] = v17;
      v19 = v16;
      if (!v17)
      {
LABEL_14:
        v19[v18] = 0;
        v22 = v16 + 24;
        v37 = v16 + 24;
        if ((unint64_t)(v16 + 24) < v38)
          goto LABEL_19;
LABEL_15:
        v23 = sub_23941A624((char **)&v36, a4);
        v37 = v23;
        if ((unint64_t)v23 < v38)
          goto LABEL_21;
        goto LABEL_31;
      }
    }
    memmove(v19, a3, v18);
    goto LABEL_14;
  }
  v15 = *(_OWORD *)a2;
  *((_QWORD *)v13 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v13 = v15;
  v16 = v13 + 24;
  v37 = v13 + 24;
  if ((unint64_t)(v13 + 24) < v38)
    goto LABEL_6;
LABEL_18:
  v22 = sub_23941A884(&v36, a3);
  v37 = v22;
  if ((unint64_t)v22 >= v38)
    goto LABEL_15;
LABEL_19:
  if (*(char *)(a4 + 23) < 0)
  {
    sub_23941A7F8(v22, *(void **)a4, *(_QWORD *)(a4 + 8));
    v23 = v22 + 24;
    v37 = v22 + 24;
    if ((unint64_t)(v22 + 24) < v38)
    {
LABEL_21:
      v25 = strlen(a5);
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v26 = v25;
      if (v25 >= 0x17)
      {
        v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v28 = v25 | 7;
        v29 = v28 + 1;
        v27 = operator new(v28 + 1);
        *((_QWORD *)v23 + 1) = v26;
        *((_QWORD *)v23 + 2) = v29 | 0x8000000000000000;
        *(_QWORD *)v23 = v27;
      }
      else
      {
        v23[23] = v25;
        v27 = v23;
        if (!v25)
          goto LABEL_29;
      }
      memmove(v27, a5, v26);
LABEL_29:
      *((_BYTE *)v27 + v26) = 0;
      v30 = v23 + 24;
      goto LABEL_32;
    }
  }
  else
  {
    v24 = *(_OWORD *)a4;
    *((_QWORD *)v22 + 2) = *(_QWORD *)(a4 + 16);
    *(_OWORD *)v22 = v24;
    v23 = v22 + 24;
    v37 = v22 + 24;
    if ((unint64_t)(v22 + 24) < v38)
      goto LABEL_21;
  }
LABEL_31:
  v30 = sub_23941AAB0(&v36, a5);
LABEL_32:
  v37 = v30;
  sub_23941A18C((uint64_t)__p, (uint64_t)&v36, a6);
  v40 = 0;
  LOBYTE(__p[0]) = 0;
  sub_23941AE44((uint64_t)v36, (uint64_t)v37, (uint64_t)__p, a7, v31, v32);
  if (v40 < 0)
    operator delete(__p[0]);
  v33 = (char *)v36;
  if (v36)
  {
    v34 = (void **)v37;
    v35 = v36;
    if (v37 != v36)
    {
      do
      {
        if (*((char *)v34 - 1) < 0)
          operator delete(*(v34 - 3));
        v34 -= 3;
      }
      while (v34 != (void **)v33);
      v35 = v36;
    }
    v37 = v33;
    operator delete(v35);
  }
}

void sub_23941A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_23941A260(&a9);
  _Unwind_Resume(a1);
}

void sub_23941A0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_23941A260(&a9);
  _Unwind_Resume(a1);
}

void sub_23941A110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_23941A260((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_23941A18C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v11;
  uint64_t v12;

  sub_239A43D24(&v12);
  v5 = (_QWORD *)sub_239A43E64(&v12);
  sub_23988A2E8(v5, a3);
  sub_239A43E70();
  sub_239A43DB8(&v12);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= *(_QWORD *)(a2 + 16))
  {
    v8 = sub_23941ACDC((void **)a2, (uint64_t)__p);
    v9 = SHIBYTE(v11);
    *(_QWORD *)(a2 + 8) = v8;
    if (v9 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v7 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v11;
    *(_OWORD *)v6 = v7;
    *(_QWORD *)(a2 + 8) = v6 + 24;
  }
}

void sub_23941A230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **sub_23941A260(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_23941A2D0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_23941A4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23941A4FC(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_23941A5AC()
{
  sub_239418A0C("basic_string");
}

uint64_t sub_23941A5C0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_23941A624(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_23941A7F8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_23941A7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_23941A7F8(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_23941A5AC();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

char *sub_23941A884(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_23941AA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_23941AAB0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (char *)*a1;
      v14 = (char *)a1[1];
      if (v14 == *a1)
        goto LABEL_23;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
LABEL_23:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_28;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 24);
    *((_QWORD *)v11 - 1) = *((_QWORD *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *((_QWORD *)v14 - 2) = 0;
    *((_QWORD *)v14 - 1) = 0;
    *((_QWORD *)v14 - 3) = 0;
    v14 -= 24;
  }
  while (v14 != v13);
  v19 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  if (v14 != v19)
  {
    do
    {
      if (*(v14 - 1) < 0)
        operator delete(*((void **)v14 - 3));
      v14 -= 24;
    }
    while (v14 != v19);
    v14 = v19;
  }
LABEL_28:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_23941ACC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23941A5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_23941ACDC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

void sub_23941AE44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>, int64x2_t a5@<Q3>, int8x16_t a6@<Q5>)
{
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 *v21;
  int64x2_t v22;
  int8x16_t v23;
  int64x2_t v24;
  const double *v25;
  const double *v26;
  unsigned __int128 v27;
  unsigned __int128 v28;
  int32x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  uint64_t i;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;

  v10 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  if (v10 <= 1)
    v11 = 1;
  else
    v11 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  v12 = v11 - 1;
  v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a3 + 8);
  v14 = v13 * v12;
  v15 = a2 - a1;
  if (a2 == a1)
  {
    v16 = 0;
  }
  else
  {
    if ((unint64_t)(v15 - 24) >= 0x60)
    {
      v18 = (v15 - 24) / 0x18uLL + 1;
      v19 = v18 & 3;
      if ((v18 & 3) == 0)
        v19 = 4;
      v20 = v18 - v19;
      v17 = a1 + 24 * v20;
      v21 = (unsigned __int8 *)(a1 + 47);
      v22 = 0uLL;
      v23.i64[0] = 255;
      v23.i64[1] = 255;
      v24 = 0uLL;
      do
      {
        a5.i8[0] = *(v21 - 24);
        a5.i8[4] = *v21;
        a6.i8[0] = v21[24];
        a6.i8[4] = v21[48];
        v25 = (const double *)(v21 - 39);
        v26 = (const double *)(v21 + 9);
        v27 = (unsigned __int128)vld3q_f64(v25);
        v28 = (unsigned __int128)vld3q_f64(v26);
        v29 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a5.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v29.i32[0];
        v30.i64[1] = v29.i32[1];
        v31 = v30;
        v32 = vcltz_s32(vshr_n_s32(vshl_n_s32(*(int32x2_t *)a6.i8, 0x18uLL), 0x18uLL));
        v30.i64[0] = v32.i32[0];
        v30.i64[1] = v32.i32[1];
        v33 = v30;
        v30.i64[0] = a5.u32[0];
        v30.i64[1] = a5.u32[1];
        v34 = vbicq_s8(v30, v31);
        v30.i64[0] = a6.u32[0];
        v30.i64[1] = a6.u32[1];
        a5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)v27, v31), vandq_s8(v34, v23));
        a6 = vandq_s8((int8x16_t)v28, v33);
        v22 = vaddq_s64(a5, v22);
        v24 = vaddq_s64((int64x2_t)vorrq_s8(a6, vandq_s8(vbicq_s8(v30, v33), v23)), v24);
        v21 += 96;
        v20 -= 4;
      }
      while (v20);
      v16 = vaddvq_s64(vaddq_s64(v24, v22));
    }
    else
    {
      v16 = 0;
      v17 = a1;
    }
    do
    {
      v35 = *(unsigned __int8 *)(v17 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v17 + 8);
      v16 += v35;
      v17 += 24;
    }
    while (v17 != a2);
  }
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a4, v16 + v14);
  if (v15 >= 1)
  {
    v36 = *(char *)(a1 + 23);
    v37 = v36 >= 0 ? (const std::string::value_type *)a1 : *(const std::string::value_type **)a1;
    v38 = v36 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(_QWORD *)(a1 + 8);
    std::string::append(a4, v37, v38);
    if ((unint64_t)v10 >= 2)
    {
      for (i = a1 + 24; i != a2; i += 24)
      {
        v40 = *(char *)(a3 + 23);
        if (v40 >= 0)
          v41 = (const std::string::value_type *)a3;
        else
          v41 = *(const std::string::value_type **)a3;
        if (v40 >= 0)
          v42 = *(unsigned __int8 *)(a3 + 23);
        else
          v42 = *(_QWORD *)(a3 + 8);
        std::string::append(a4, v41, v42);
        v43 = *(char *)(i + 23);
        if (v43 >= 0)
          v44 = (const std::string::value_type *)i;
        else
          v44 = *(const std::string::value_type **)i;
        if (v43 >= 0)
          v45 = *(unsigned __int8 *)(i + 23);
        else
          v45 = *(_QWORD *)(i + 8);
        std::string::append(a4, v44, v45);
      }
    }
  }
}

void sub_23941B068(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void **sub_23941B08C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

std::string *sub_23941B0FC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930558);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930558))
  {
    sub_23941A4FC(v7, "ImageView");
    v2 = sub_23941B3D0();
    sub_23941B300((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23941B300((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930540, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930540, &dword_23940C000);
          __cxa_guard_release(&qword_256930558);
          return &stru_256930540;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930540;
}

void sub_23941B24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930558);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930558);
  _Unwind_Resume(a1);
}

void sub_23941B300(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23941B394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_23941B3D0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930578);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930578))
    return &xmmword_256930560;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray8u]", &xmmword_256930560);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930560, &dword_23940C000);
  __cxa_guard_release(&qword_256930578);
  return &xmmword_256930560;
}

void sub_23941B460(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930578);
  _Unwind_Resume(a1);
}

__int128 *sub_23941B478()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930598);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930598))
    return &xmmword_256930580;
  v2 = sub_23941B554();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930580, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930590 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930580 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930580, &dword_23940C000);
  __cxa_guard_release(&qword_256930598);
  return &xmmword_256930580;
}

void sub_23941B53C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930598);
  _Unwind_Resume(a1);
}

std::string *sub_23941B554()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2569305B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569305B8))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::DynamicBuffer]", qword_2569305A0);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_2569305A0, &dword_23940C000);
    __cxa_guard_release(&qword_2569305B8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2569305D8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2569305D8))
    return &stru_2569305C0;
  sub_239A44118((std::string::size_type)qword_2569305A0, &stru_2569305C0);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569305C0, &dword_23940C000);
  __cxa_guard_release(&qword_2569305D8);
  return &stru_2569305C0;
}

void sub_23941B644(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569305D8);
  _Unwind_Resume(a1);
}

void sub_23941B65C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569305B8);
  _Unwind_Resume(a1);
}

_QWORD *sub_23941B674(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_23941A7F8(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_23941B74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_23941B79C(&a9);
  _Unwind_Resume(a1);
}

void sub_23941B760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_23941B79C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_23941B79C(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *sub_23941B830()
{
  unsigned __int8 v0;
  _QWORD *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_2569305F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2569305F8))
  {
    sub_23941A4FC(v7, "ImageView");
    v2 = sub_23941BB04();
    sub_23941BA34((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23941BA34((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_2569305E0, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569305E0, &dword_23940C000);
          __cxa_guard_release(&qword_2569305F8);
          return &stru_2569305E0;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_2569305E0;
}

void sub_23941B980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_2569305F8);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_2569305F8);
  _Unwind_Resume(a1);
}

void sub_23941BA34(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23941BAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23941BB04()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930618);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930618))
    return qword_256930600;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Dynamic]", qword_256930600);
  __cxa_atexit(MEMORY[0x24BEDACF0], qword_256930600, &dword_23940C000);
  __cxa_guard_release(&qword_256930618);
  return qword_256930600;
}

void sub_23941BB94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930618);
  _Unwind_Resume(a1);
}

void sub_23941BBAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23941BC18()
{
  return 5;
}

uint64_t sub_23941BC20(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_23941BC28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_23941BC44(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_23941BCC8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int16 v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::logic_error *exception;
  std::string v28;
  _BYTE v29[12];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 48) != 5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_23941BF94(a1, &v28);
    std::logic_error::logic_error(exception, &v28);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      v28.__r_.__value_.__r.__words[0] = v4;
      v28.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 8);
    }
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
  }
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_DWORD *)(a1 + 24);
  v14 = v11 == 0;
  v12 = v11 != 0;
  v13 = v14;
  if (!*(_DWORD *)(a1 + 28))
    v13 = 1;
  v14 = v13 == 0;
  if (v13)
    v15 = 0;
  else
    v15 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  v16 = v15 | (2 * v12);
  v17 = *(_QWORD *)(a1 + 24);
  if (!v14)
    v17 = 0;
  *(_QWORD *)&v29[4] = v17;
  *(_DWORD *)v29 = 2;
  v18 = *(_QWORD *)v29;
  *(_DWORD *)v29 = 1;
  *(_QWORD *)&v29[4] = v16;
  v19 = HIDWORD(v15);
  if (HIDWORD(v17) * (_DWORD)v19 == -1)
  {
    sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v20 = *(_QWORD *)v29;
  v21 = *(_WORD *)(a1 + 52);
  size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
  if (v28.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_QWORD *)a2 = v28.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a2 + 8) = size;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v18;
  *(_DWORD *)(a2 + 32) = HIDWORD(v17);
  *(_QWORD *)(a2 + 36) = v20;
  *(_DWORD *)(a2 + 44) = v19;
  *(_QWORD *)(a2 + 48) = v17;
  *(_QWORD *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 64) = v21;
  if (size)
  {
    v25 = (unint64_t *)&size->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_23941BF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_23941BF94(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_23941C00C();
  v5 = sub_23941B830();
  v6 = *(_DWORD *)(a1 + 48);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_23941C00C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930638);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930638))
  {
    sub_23941A4FC(v7, "ImageView");
    v2 = sub_23941C2E0();
    sub_23941C210((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_23941C210((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930620, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930620, &dword_23940C000);
          __cxa_guard_release(&qword_256930638);
          return &stru_256930620;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930620;
}

void sub_23941C15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930638);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930638);
  _Unwind_Resume(a1);
}

void sub_23941C210(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23941C2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_23941C2E0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930658);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930658))
    return &xmmword_256930640;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two8u]", &xmmword_256930640);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930640, &dword_23940C000);
  __cxa_guard_release(&qword_256930658);
  return &xmmword_256930640;
}

void sub_23941C370(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930658);
  _Unwind_Resume(a1);
}

uint64_t sub_23941C388(float *a1, int a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  float v18;
  float v19;

  if (a2 == 875704422)
  {
    v8 = *a1;
    v9 = (float)(a1[2] + -128.0);
    v4 = v8 + v9 * 1.402;
    v10 = (float)(a1[1] + -128.0);
    v6 = v8 + v10 * -0.344136 + v9 * -0.714136;
    v7 = v8 + v10 * 1.772;
  }
  else
  {
    if (a2 != 875704438)
      sub_239EBEC3C();
    v2 = *a1;
    v3 = a1[2];
    v4 = v3 * 1.596 + v2 * 1.16438 + -222.9216;
    v5 = a1[1];
    v6 = v5 * -0.39176 + v2 * 1.16438 + v3 * -0.81297 + 135.576;
    v7 = v5 * 2.01723 + v2 * 1.16438 + -276.836;
  }
  v11 = v4 + 0.5;
  v12 = v6 + 0.5;
  v13 = v7 + 0.5;
  v14 = 255.0;
  if (v11 <= 255.0)
    v15 = v11;
  else
    v15 = 255.0;
  v16 = v11 < 0.0;
  v17 = 0.0;
  if (v16)
    v15 = 0.0;
  if (v12 <= 255.0)
    v18 = v12;
  else
    v18 = 255.0;
  if (v12 >= 0.0)
    v19 = v18;
  else
    v19 = 0.0;
  if (v13 <= 255.0)
    v14 = v13;
  if (v13 >= 0.0)
    v17 = v14;
  return ((int)v17 << 16) | ((int)v19 << 8) | (int)v15;
}

uint64_t sub_23941C4FC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  void *v11;

  v3 = a2;
  sub_23941C5D8(a1 + 24, a2, 0);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v4) >> 3);
  if (v3 <= v5)
  {
    if (v3 < v5)
      *(_QWORD *)(a1 + 56) = v4 + 24 * v3;
  }
  else
  {
    sub_23941C840((char **)(a1 + 48), v3 - v5);
  }
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3);
  if (v3 > v8)
  {
    sub_23941C9CC((void **)(a1 + 72), v3 - v8);
    return 1;
  }
  if (v3 >= v8)
    return 1;
  v10 = v6 + 24 * v3;
  while (v7 != v10)
  {
    v11 = *(void **)(v7 - 24);
    v7 -= 24;
    free(v11);
  }
  *(_QWORD *)(a1 + 80) = v10;
  return 1;
}

void sub_23941C5D8(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *__dst;
  __int128 v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(_QWORD *)(a1 + 8) = a2;
    return;
  }
  v6 = __len;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    __dst = 0;
    v23 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
      v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_2394187EC((uint64_t)&__dst, v11);
    v12 = *(void **)a1;
    v13 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v23 = v13 + v5;
    v15 = __dst;
    if (v13 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      v14 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40)
        memmove(__dst, v12, 8 * v14);
      v15 += v14;
      v16 = v13 & 0x3F;
      if (v16)
        *v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((_QWORD *)v12 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
      v12 = *(void **)a1;
    }
    *(_QWORD *)a1 = __dst;
    __dst = v12;
    v17 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    v23 = v17;
    if (v12)
      operator delete(v12);
  }
  else
  {
    v15 = (_QWORD *)(*(_QWORD *)a1 + 8 * (v4 >> 6));
    v16 = *(_QWORD *)(a1 + 8) & 0x3FLL;
    *(_QWORD *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if ((_DWORD)v16)
      {
        if ((64 - v16) >= v5)
          v18 = v5;
        else
          v18 = (64 - v16);
        *v15++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v18)) & (-1 << v16);
        v5 -= v18;
      }
      v19 = v5 >> 6;
      if (v5 >= 0x40)
        memset(v15, 255, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v20 = v15[v19] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_43:
        v15[v19] = v20;
      }
    }
    else
    {
      if ((_DWORD)v16)
      {
        if ((64 - v16) >= v5)
          v21 = v5;
        else
          v21 = (64 - v16);
        *v15++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v21)) & (-1 << v16));
        v5 -= v21;
      }
      v19 = v5 >> 6;
      if (v5 >= 0x40)
        bzero(v15, 8 * (v5 >> 6));
      if ((v5 & 0x3F) != 0)
      {
        v20 = v15[v19] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_43;
      }
    }
  }
}

void sub_23941C828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23941C840(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v5[24 * a2];
      do
      {
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0xBF80000000000000;
        v5 += 24;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[24 * v6];
    v13 = &v12[24 * a2];
    v14 = v12;
    do
    {
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0xBF80000000000000;
      v14 += 24;
    }
    while (v14 != v13);
    v15 = *a1;
    if (v5 != *a1)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v15);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v10[24 * v9];
    if (v5)
      operator delete(v5);
  }
}

void sub_23941C9CC(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = (char *)&v5[3 * a2];
      v12 = 24 * a2;
      do
      {
        *v5 = 0;
        v5[1] = 0;
        *((_DWORD *)v5 + 4) = 0;
        v5 += 3;
        v12 -= 24;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[24 * v6];
    v14 = &v10[24 * v9];
    v15 = 24 * a2;
    v16 = &v13[24 * a2];
    v17 = v13;
    do
    {
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_DWORD *)v17 + 4) = 0;
      v17 += 24;
      v15 -= 24;
    }
    while (v15);
    v18 = *a1;
    if (v5 == *a1)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v5)
LABEL_26:
        operator delete(v5);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = &v13[v19 * 8];
        v21 = (char *)&v5[v19];
        *((_QWORD *)v20 - 2) = 0;
        v22 = v5[v19 - 2];
        *((_QWORD *)v20 - 3) = v5[v19 - 3];
        *((_QWORD *)v20 - 2) = v22;
        *((_QWORD *)v21 - 3) = 0;
        *((_QWORD *)v21 - 2) = 0;
        *((_DWORD *)v20 - 2) = v5[v19 - 1];
        *((_DWORD *)v21 - 2) = 0;
        v19 -= 3;
      }
      while (&v5[v19] != v18);
      v23 = *a1;
      v5 = a1[1];
      *a1 = &v13[v19 * 8];
      a1[1] = v16;
      a1[2] = v14;
      if (v5 != v23)
      {
        do
        {
          v24 = (void *)*(v5 - 3);
          v5 -= 3;
          free(v24);
        }
        while (v5 != v23);
        v5 = v23;
      }
      if (v5)
        goto LABEL_26;
    }
  }
}

void sub_23941CBA8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v19 = v3;
    v20 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = 0;
  }
  v17 = v19;
  v18 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_23941CCF8(a2, &v17);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_23941CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_23941CCF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;
  uint64_t v19;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v19, v3, 1);
  v9 = *(_QWORD *)(v19 + 16);
  *((_OWORD *)a1 + 1) = *(_OWORD *)v19;
  a1[4] = v9;
  v19 = 0;
  MEMORY[0x23B83E31C]();
  v10 = *a1;
  v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *((_WORD *)a1 + 20) = v17 & 0xFF00 | v16;
  return a1;
}

void sub_23941CE48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1);
  _Unwind_Resume(a1);
}

void sub_23941CE5C(uint64_t a1@<X8>)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v13 = 0;
  *(_QWORD *)&v4 = 0;
  *((_QWORD *)&v4 + 1) = 3;
  v5 = 0;
  v6 = 1;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  sub_23941D0C4(a1, &v10, &v4);
  v1 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_23941CF94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23941CFA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23941D014()
{
  return 21;
}

uint64_t sub_23941D01C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_23941D024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_23941D040(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_23941D0C4(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_23941D1D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(exception_object);
}

void sub_23941D1E8(uint64_t a1, unint64_t a2)
{
  size_t v4;
  void *v5;
  std::bad_alloc *exception;
  std::bad_alloc *v7;
  void *memptr;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      v4 = (a2 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v4;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x100BBD03uLL);
      v5 = memptr;
      *(_QWORD *)a1 = memptr;
      if (!v5)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v7 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v7, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_23941D294()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_23941D2A4(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

void sub_23941D2AC(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

uint64_t sub_23941D2D4(uint64_t a1, _QWORD *a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  char *v6;
  char *v7;

  sub_23941D390(a2, 1, &v6);
  v2 = v6;
  if (v6 == v7)
  {
    v3 = 0;
    if (!v6)
      return v3;
    goto LABEL_6;
  }
  v3 = LFV2KeypointsCreate();
  v2 = v6;
  v4 = v7;
  if (v6 != v7)
  {
    do
    {
      LFV2KeypointsAppend();
      v2 += 24;
    }
    while (v2 != v4);
    v2 = v6;
  }
  if (v2)
  {
LABEL_6:
    v7 = v2;
    operator delete(v2);
  }
  return v3;
}

void sub_23941D370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23941D390@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  int v10;
  unint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  char *v18;
  uint64_t v20;
  float v21;
  BOOL v22;
  double v23;
  __int128 *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  _QWORD *v37;
  int v38;
  char **v39;

  v4 = result;
  v5 = a3;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *((unsigned int *)result + 2);
  if ((_DWORD)v6)
  {
    v7 = 3 * v6;
    result = operator new(24 * v6);
    v8 = (char *)result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[v7];
    v9 = v4[4];
    v10 = v9 & 0x3F;
    if (v9 > 0x3F || v10 != 0)
    {
LABEL_12:
      v13 = 0;
      v14 = 0;
      v15 = (_QWORD *)v4[3];
      v16 = &v15[v9 >> 6];
      result = v4 + 6;
      v38 = v10;
      v37 = v16;
      v39 = (char **)v5;
      while (1)
      {
        if (((*v15 >> v14) & 1) == 0)
          goto LABEL_15;
        if ((_DWORD)a2)
        {
          v20 = *result;
        }
        else
        {
          if (v4[4] <= (unint64_t)v13
            || ((*(_QWORD *)(v4[3] + (((unint64_t)v13 >> 3) & 0x1FFFFFF8)) >> v13) & 1) == 0)
          {
            sub_239A444D4((uint64_t)"unknown file", 293, (uint64_t)"", (void (*)(void *))sub_239A4463C);
            sub_239A4475C();
            abort();
          }
          v20 = *result;
          v21 = *(float *)(*result + 24 * v13 + 20);
          v22 = v21 == 0.0;
          if (v21 >= 0.0)
            v23 = v21;
          else
            v23 = 0.0 - v21;
          if (v22 || v23 <= 0.00000001)
            goto LABEL_15;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v4[7] - v20) >> 3) <= v13)
          sub_23941D884();
        v24 = (__int128 *)(v20 + 24 * v13);
        v25 = v5[2];
        if ((unint64_t)v8 >= v25)
          break;
        v17 = *v24;
        *((_QWORD *)v8 + 2) = *((_QWORD *)v24 + 2);
        *(_OWORD *)v8 = v17;
        v18 = v8 + 24;
LABEL_14:
        v5[1] = v18;
        v8 = v18;
LABEL_15:
        v15 += v14 == 63;
        if (v14 == 63)
          v14 = 0;
        else
          ++v14;
        ++v13;
        if (v15 == v16 && v14 == v10)
          return result;
      }
      v26 = a2;
      v27 = (char *)*v5;
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*v5] >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_2394189F8();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v27) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 > 0xAAAAAAAAAAAAAAALL)
          sub_239418A80();
        v32 = (char *)operator new(24 * v31);
      }
      else
      {
        v32 = 0;
      }
      v33 = *v24;
      v34 = &v32[24 * v28];
      *((_QWORD *)v34 + 2) = *((_QWORD *)v24 + 2);
      *(_OWORD *)v34 = v33;
      v35 = v34;
      if (v8 == v27)
      {
        v5 = v39;
        v18 = v34 + 24;
        *v39 = v34;
        v39[1] = v34 + 24;
        v39[2] = &v32[24 * v31];
        a2 = v26;
        if (!v8)
          goto LABEL_49;
      }
      else
      {
        v5 = v39;
        do
        {
          v36 = *(_OWORD *)(v8 - 24);
          *((_QWORD *)v35 - 1) = *((_QWORD *)v8 - 1);
          *(_OWORD *)(v35 - 24) = v36;
          v35 -= 24;
          v8 -= 24;
        }
        while (v8 != v27);
        v8 = *v39;
        v18 = v34 + 24;
        *v39 = v35;
        v39[1] = v34 + 24;
        v39[2] = &v32[24 * v31];
        a2 = v26;
        if (!v8)
          goto LABEL_49;
      }
      operator delete(v8);
LABEL_49:
      v10 = v38;
      v16 = v37;
      result = v4 + 6;
      goto LABEL_14;
    }
  }
  else
  {
    v8 = 0;
    v9 = result[4];
    v10 = v9 & 0x3F;
    if (v9 > 0x3F || v10 != 0)
      goto LABEL_12;
  }
  return result;
}

void sub_23941D6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (v12)
  {
    *(_QWORD *)(a12 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_23941D6E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t Dimension;
  int Type;
  uint64_t Data;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t j;

  if (!a2)
    return 0;
  if (LFV2DescriptorsGetSize() != *(_DWORD *)(a3 + 8))
    return 0;
  Dimension = LFV2DescriptorsGetDimension();
  if (*(_DWORD *)(a3 + 16) != (_DWORD)Dimension)
    return 0;
  Type = LFV2DescriptorsGetType();
  if (a4)
  {
    if (Type == 1)
    {
      Data = LFV2DescriptorsGetData();
      v9 = *(_QWORD *)(a3 + 32);
      if (v9)
      {
        v10 = Data;
        v11 = 0;
        v12 = 0;
        for (i = 0; i < v9; ++i)
        {
          if (((*(_QWORD *)(*(_QWORD *)(a3 + 24) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
          {
            memcpy(*(void **)(*(_QWORD *)(a3 + 72) + v11), (const void *)(v10 + v12 * Dimension), Dimension);
            ++v12;
            v9 = *(_QWORD *)(a3 + 32);
          }
          v11 += 24;
          result = 1;
        }
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (Type != 2)
    return 0;
  v15 = LFV2DescriptorsGetData();
  v16 = *(_QWORD *)(a3 + 32);
  if (!v16)
    return 1;
  v17 = v15;
  v18 = 0;
  v19 = 0;
  for (j = 0; j < v16; ++j)
  {
    if (((*(_QWORD *)(*(_QWORD *)(a3 + 24) + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) != 0)
    {
      sub_2396F5754((float32x4_t *)(v17 + 4 * v19 * Dimension), *(_QWORD *)(*(_QWORD *)(a3 + 72) + v18), Dimension, 5.62950094e14);
      ++v19;
      v16 = *(_QWORD *)(a3 + 32);
    }
    v18 += 24;
    result = 1;
  }
  return result;
}

void sub_23941D884()
{
  sub_23941D898("vector");
}

void sub_23941D898(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_23941D8E8(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_250ADB498, MEMORY[0x24BEDAB00]);
}

void sub_23941D8D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_23941D8E8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

_QWORD *sub_23941D90C(_QWORD *a1, uint64_t a2, int *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  float v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  void *exception;
  uint64_t v20;
  int v21;
  char v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  float v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;

  *a1 = &off_250ADB4C0;
  a1[1] = 0;
  a1[2] = sub_23941E098;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v6[1] = 0;
  *(_QWORD *)((char *)v6 + 13) = 0;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
    ((void (*)(uint64_t))a1[2])(v7);
  a1[2] = sub_23941E098;
  v8 = a3[3];
  if (v8 >= 5 || ((0x1Du >> v8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "Unsupported DescriptorType");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v9 = a1[1];
  *(_DWORD *)(v9 + 16) = dword_239EC6548[v8];
  *(_BYTE *)(v9 + 20) = 0x10000uLL >> (8 * v8);
  v20 = 0x33FCCCCCDLL;
  v22 = 0;
  v10 = (_DWORD)v8 != 4;
  v23 = -1157426577;
  v25 = 0x3F0000000000000ALL;
  v26 = 5;
  v11 = 0.8;
  v27 = 0x3FC0000040900000;
  v28 = 36;
  v24 = a3[7];
  v12 = *a3;
  v13 = a3[1];
  v33 = 0;
  v34 = v12;
  v21 = a3[8] & ~(a3[8] >> 31);
  if (!*((_BYTE *)a3 + 36))
    v11 = 1.0;
  v29 = v11;
  v32 = v10;
  v30 = 100000;
  v31 = v13;
  if ((a3[4] - 1) <= 1)
    v33 = a3[4];
  v14 = operator new();
  sub_239639DC8(v14, &v20, a2);
  v15 = (uint64_t **)a1[1];
  v16 = *v15;
  *v15 = (uint64_t *)v14;
  if (v16)
  {
    v17 = sub_239639DCC(v16);
    MEMORY[0x23B83E31C](v17, 0xA0C40AFF93C70);
  }
  LFV2HandleCreate();
  return a1;
}

void sub_23941DB40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x23B83E31C](v2, 0xA0C40AFF93C70);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(void))(v1 + 16))();
  nullsub_4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23941DBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  void *__p;
  void *v33;
  char v34;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_DWORD *)(v12 + 16);
  LODWORD(v12) = *(unsigned __int8 *)(v12 + 20);
  v15 = (_QWORD *)(a3 + 24);
  v14 = *(void **)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0x600000000;
  *(_DWORD *)(a3 + 16) = v13;
  *(_DWORD *)(a3 + 20) = v12;
  if (v14)
  {
    operator delete(v14);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  v17 = (_QWORD *)(a3 + 48);
  v16 = *(void **)(a3 + 48);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  if (v16)
  {
    *(_QWORD *)(a3 + 56) = v16;
    operator delete(v16);
    *v17 = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  v18 = (void **)(a3 + 72);
  v19 = *(char **)(a3 + 72);
  *v17 = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  if (v19)
  {
    v20 = *(char **)(a3 + 80);
    v21 = v19;
    if (v20 != v19)
    {
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 3);
        v20 -= 24;
        free(v22);
      }
      while (v20 != v19);
      v21 = *v18;
    }
    *(_QWORD *)(a3 + 80) = v19;
    operator delete(v21);
    *v18 = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  *v18 = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v34 = 0;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  LOBYTE(__p) = 0;
  v23 = sub_239639E10(**(uint64_t ***)(a1 + 8), a2, (uint64_t)v29);
  if (!(_DWORD)v23)
    sub_239417874(v29, (unsigned int *)(a2 + 32), a3, a4, a5, a6);
  if (v34 && __p)
  {
    v33 = __p;
    operator delete(__p);
  }
  v24 = (char *)v30[1];
  if (v30[1])
  {
    v25 = (char *)v31;
    v26 = v30[1];
    if ((void *)v31 != v30[1])
    {
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        free(v27);
      }
      while (v25 != v24);
      v26 = v30[1];
    }
    *(_QWORD *)&v31 = v24;
    operator delete(v26);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  return v23;
}

void sub_23941DD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394162A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23941DD6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 8))
  {
    sub_239416500(a2, v14);
    sub_23979C580((uint64_t)v14);
    v12 = 0;
    v13 = sub_23941D2D4(a1, (_QWORD *)a3);
    v5 = LFV2ComputeDescriptors();
    v6 = operator new(0x20uLL);
    *v6 = &off_250ADB510;
    v6[1] = &v13;
    v6[2] = &v12;
    v16 = v6;
    sub_23941D6E0(a1, v12, a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 20));
    if (v5)
      v7 = 1;
    else
      v7 = v12 == 0;
    v8 = v7;
    if (!v16)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v16 + 48))(v16);
    v9 = v16;
    if (v16 == v15)
    {
      v10 = 4;
      v9 = v15;
    }
    else
    {
      if (!v16)
      {
LABEL_15:
        sub_23979BCF4(v14);
        return v8;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_15;
  }
  return 0;
}

void sub_23941DEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_239416834((uint64_t *)va1);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941DEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941DF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941DF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941DF30(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

uint64_t sub_23941DF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _BYTE v10[80];
  int v11;
  char v12;

  v11 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, a2, a3, a4, a5, v10);
  if (v11 != -1)
    ((void (*)(char *, _BYTE *))off_250ADB4E8[v11])(&v12, v10);
  if ((_DWORD)v8)
    return v8;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3);
}

void sub_23941DFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23941695C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23941E004(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB4C0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return nullsub_4(a1);
}

void sub_23941E044(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB4C0;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t **sub_23941E098(uint64_t **result)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;

  if (result)
  {
    v1 = result;
    LFV2HandleRelease();
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      v3 = sub_239639DCC(v2);
      MEMORY[0x23B83E31C](v3, 0xA0C40AFF93C70);
    }
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_23941E10C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23941E120(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADB510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_23941E160(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADB510;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23941E188()
{
  LFV2KeypointsRelease();
  return LFV2DescriptorsRelease();
}

_QWORD *sub_23941E1B8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *exception;
  _DWORD v14[3];

  *a1 = &off_250ADB558;
  a1[1] = 0;
  a1[2] = sub_23941E898;
  v4 = (_QWORD *)operator new();
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)((char *)v4 + 13) = 0;
  v5 = a1[1];
  a1[1] = v4;
  if (v5)
    ((void (*)(uint64_t))a1[2])(v5);
  a1[2] = sub_23941E898;
  v6 = *(int *)(a2 + 12);
  if (v6 >= 5 || ((0x1Du >> v6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "Unsupported DescriptorType");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v7 = a1[1];
  *(_DWORD *)(v7 + 16) = dword_239EC6570[v6];
  *(_BYTE *)(v7 + 20) = 0x10000uLL >> (8 * v6);
  v14[1] = *(_DWORD *)(a2 + 4);
  v14[2] = 20000;
  v14[0] = 1;
  v8 = operator new();
  sub_2396382A4(v8, v14);
  v9 = (uint64_t *)a1[1];
  v10 = *v9;
  *v9 = v8;
  if (v10)
  {
    v11 = sub_2396382A8(v10);
    MEMORY[0x23B83E31C](v11, 0xA0C40AFF93C70);
  }
  LFV2HandleCreate();
  return a1;
}

void sub_23941E340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x23B83E31C](v2, 0xA0C40AFF93C70);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(void))(v1 + 16))();
  nullsub_4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23941E3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  void **v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  void *__p;
  void *v33;
  char v34;

  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_DWORD *)(v12 + 16);
  LODWORD(v12) = *(unsigned __int8 *)(v12 + 20);
  v15 = (_QWORD *)(a3 + 24);
  v14 = *(void **)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0x600000000;
  *(_DWORD *)(a3 + 16) = v13;
  *(_DWORD *)(a3 + 20) = v12;
  if (v14)
  {
    operator delete(v14);
    *v15 = 0;
    v15[1] = 0;
    v15[2] = 0;
  }
  v17 = (_QWORD *)(a3 + 48);
  v16 = *(void **)(a3 + 48);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  if (v16)
  {
    *(_QWORD *)(a3 + 56) = v16;
    operator delete(v16);
    *v17 = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  v18 = (void **)(a3 + 72);
  v19 = *(char **)(a3 + 72);
  *v17 = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  if (v19)
  {
    v20 = *(char **)(a3 + 80);
    v21 = v19;
    if (v20 != v19)
    {
      do
      {
        v22 = (void *)*((_QWORD *)v20 - 3);
        v20 -= 24;
        free(v22);
      }
      while (v20 != v19);
      v21 = *v18;
    }
    *(_QWORD *)(a3 + 80) = v19;
    operator delete(v21);
    *v18 = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  *v18 = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v34 = 0;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  LOBYTE(__p) = 0;
  v23 = sub_23963839C(**(int32x2_t ****)(a1 + 8), a2, (uint64_t)v29);
  if (!(_DWORD)v23)
    sub_239417874(v29, (unsigned int *)(a2 + 32), a3, a4, a5, a6);
  if (v34 && __p)
  {
    v33 = __p;
    operator delete(__p);
  }
  v24 = (char *)v30[1];
  if (v30[1])
  {
    v25 = (char *)v31;
    v26 = v30[1];
    if ((void *)v31 != v30[1])
    {
      do
      {
        v27 = (void *)*((_QWORD *)v25 - 3);
        v25 -= 24;
        free(v27);
      }
      while (v25 != v24);
      v26 = v30[1];
    }
    *(_QWORD *)&v31 = v24;
    operator delete(v26);
  }
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  return v23;
}

void sub_23941E558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2394162A0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23941E56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 8))
  {
    sub_239416500(a2, v14);
    sub_23979C580((uint64_t)v14);
    v12 = 0;
    v13 = sub_23941D2D4(a1, (_QWORD *)a3);
    v5 = LFV2ComputeDescriptors();
    v6 = operator new(0x20uLL);
    *v6 = &off_250ADB5A8;
    v6[1] = &v13;
    v6[2] = &v12;
    v16 = v6;
    sub_23941D6E0(a1, v12, a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 20));
    if (v5)
      v7 = 1;
    else
      v7 = v12 == 0;
    v8 = v7;
    if (!v16)
      sub_2394172E0();
    (*(void (**)(_BYTE *))(*(_QWORD *)v16 + 48))(v16);
    v9 = v16;
    if (v16 == v15)
    {
      v10 = 4;
      v9 = v15;
    }
    else
    {
      if (!v16)
      {
LABEL_15:
        sub_23979BCF4(v14);
        return v8;
      }
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_15;
  }
  return 0;
}

void sub_23941E6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_239416834((uint64_t *)va1);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941E6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941E6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941E704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941E718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_23979BCF4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23941E730(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_239416A48(exception_object);
}

uint64_t sub_23941E748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _BYTE v10[80];
  int v11;
  char v12;

  v11 = 0;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, a2, a3, a4, a5, v10);
  if (v11 != -1)
    ((void (*)(char *, _BYTE *))off_250ADB580[v11])(&v12, v10);
  if ((_DWORD)v8)
    return v8;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, a3);
}

void sub_23941E7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23941695C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_23941E804(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB558;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return nullsub_4(a1);
}

void sub_23941E844(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB558;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t *sub_23941E898(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    LFV2HandleRelease();
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      v3 = sub_2396382A8(v2);
      MEMORY[0x23B83E31C](v3, 0xA0C40AFF93C70);
    }
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_23941E90C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_23941E920(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_250ADB5A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_23941E960(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250ADB5A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_23941E988()
{
  LFV2KeypointsRelease();
  return LFV2DescriptorsRelease();
}

_OWORD *sub_23941E9B8(_OWORD *result, uint64_t a2)
{
  unint64_t v2;
  __int128 v3;
  __int128 v4;
  float *v5;
  float *v6;
  float v7;
  unint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  BOOL v13;
  int v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float v19;
  int v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  unint64_t v25;
  float v26;
  float *v27;
  float v28;
  float *v29;
  float *v30;
  unint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float *v36;
  float *v37;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)a2 = v2;
  v4 = result[1];
  v3 = result[2];
  *(_OWORD *)(a2 + 144) = *result;
  *(_OWORD *)(a2 + 160) = v4;
  *(_OWORD *)(a2 + 176) = v3;
  v5 = *(float **)(a2 + 40);
  v6 = (float *)(a2 + 48);
  v7 = 0.0;
  if (v5 == (float *)(a2 + 48))
  {
    v25 = 0;
    v8 = 0;
LABEL_42:
    v31 = 0;
    v19 = 0.0;
LABEL_43:
    v26 = 0.0;
LABEL_44:
    v32 = 0.0;
    goto LABEL_45;
  }
  v8 = 0;
  v9 = *(float **)(a2 + 40);
  do
  {
    v10 = (float *)*((_QWORD *)v9 + 1);
    v11 = v9;
    if (v10)
    {
      do
      {
        v12 = v10;
        v10 = *(float **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v12 = (float *)*((_QWORD *)v11 + 2);
        v13 = *(_QWORD *)v12 == (_QWORD)v11;
        v11 = v12;
      }
      while (!v13);
    }
    v8 += *((_QWORD *)v9 + 5);
    v9 = v12;
  }
  while (v12 != v6);
  if (v5 == v6)
  {
    v25 = 0;
    goto LABEL_42;
  }
  v14 = 0;
  v15 = *(float **)(a2 + 40);
  do
  {
    v16 = (float *)*((_QWORD *)v15 + 1);
    v17 = v15;
    if (v16)
    {
      do
      {
        v18 = v16;
        v16 = *(float **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v18 = (float *)*((_QWORD *)v17 + 2);
        v13 = *(_QWORD *)v18 == (_QWORD)v17;
        v17 = v18;
      }
      while (!v13);
    }
    v14 += *((_DWORD *)v15 + 12);
    v15 = v18;
  }
  while (v18 != v6);
  v19 = (float)v14;
  if (v5 == v6)
  {
    v25 = 0;
    v31 = 0;
    goto LABEL_43;
  }
  v20 = 0;
  v21 = *(float **)(a2 + 40);
  do
  {
    v22 = (float *)*((_QWORD *)v21 + 1);
    v23 = v21;
    if (v22)
    {
      do
      {
        v24 = v22;
        v22 = *(float **)v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v24 = (float *)*((_QWORD *)v23 + 2);
        v13 = *(_QWORD *)v24 == (_QWORD)v23;
        v23 = v24;
      }
      while (!v13);
    }
    v20 += *((_DWORD *)v21 + 13);
    v21 = v24;
  }
  while (v24 != v6);
  v26 = (float)v20;
  if (v5 == v6)
  {
    v25 = 0;
LABEL_66:
    v31 = 0;
    goto LABEL_44;
  }
  v25 = 0;
  v7 = 0.0;
  v27 = *(float **)(a2 + 40);
  do
  {
    v28 = v27[14];
    if (v28 < 0.0)
      v28 = -0.0;
    else
      ++v25;
    v29 = (float *)*((_QWORD *)v27 + 1);
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = *(float **)v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (float *)*((_QWORD *)v27 + 2);
        v13 = *(_QWORD *)v30 == (_QWORD)v27;
        v27 = v30;
      }
      while (!v13);
    }
    v7 = v7 + v28;
    v27 = v30;
  }
  while (v30 != v6);
  if (v5 == v6)
    goto LABEL_66;
  v31 = 0;
  v32 = 0.0;
  do
  {
    v35 = v5[15];
    if (v35 >= 0.0)
      ++v31;
    else
      v35 = -0.0;
    v36 = (float *)*((_QWORD *)v5 + 1);
    if (v36)
    {
      do
      {
        v37 = v36;
        v36 = *(float **)v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        v37 = (float *)*((_QWORD *)v5 + 2);
        v13 = *(_QWORD *)v37 == (_QWORD)v5;
        v5 = v37;
      }
      while (!v13);
    }
    v32 = v32 + v35;
    v5 = v37;
  }
  while (v37 != v6);
LABEL_45:
  if (v2)
  {
    *(_QWORD *)(a2 + 8) = v8 / v2;
    *(_DWORD *)(a2 + 16) = (int)(float)(v19 / (float)v2);
    *(_DWORD *)(a2 + 20) = (int)(float)(v26 / (float)v2);
    if (v25)
    {
      v33 = (double)v25 + 0.000001;
      *(float *)(a2 + 24) = v7 / v33;
      if (v31)
      {
LABEL_48:
        v34 = (double)v31 + 0.000001;
        *(float *)(a2 + 28) = v32 / v34;
        return result;
      }
    }
    else
    {
      *(float *)(a2 + 24) = -1.0;
      if (v31)
        goto LABEL_48;
    }
    *(_DWORD *)(a2 + 28) = -1082130432;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void sub_23941EC8C(_opaque_pthread_t ***a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  _opaque_pthread_t **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  signed int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _opaque_pthread_t *v26;
  void *v27;
  std::__libcpp_thread_t t;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  std::thread *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::__thread_struct *v44;
  _QWORD *v45;
  int v46;
  char *v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  std::thread *v56;
  char *v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  _opaque_pthread_t *v68;
  std::thread *v69;
  int v70;
  uint64_t v71;
  std::__thread_struct *v72;
  _QWORD *v73;
  char *v74;
  pthread_t *v75;
  char *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  pthread_t *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  _opaque_pthread_t *v93;
  pthread_t *v94;
  int v95;
  uint64_t v96;
  std::__thread_struct *v97;
  _QWORD *v98;
  int v99;
  char *v100;
  pthread_t *v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  pthread_t *v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  __int128 v118;
  _opaque_pthread_t *v119;
  pthread_t *v120;
  std::__thread_struct *v121;
  _QWORD *v122;
  int v123;
  std::thread *v124;
  std::thread *v125;
  std::thread *v126;
  std::thread *v127;
  std::thread *v128;
  std::thread *v129;
  _opaque_pthread_t **v130;
  _opaque_pthread_t **v131;
  _opaque_pthread_t *v132;
  uint8x8_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _opaque_pthread_t *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char v141;
  char v142;
  std::__shared_weak_count *v143;
  unint64_t *p_shared_owners;
  unint64_t v145;
  char v146;
  char v147;
  _QWORD *v148;
  _QWORD *v149;
  pthread_t v150;
  pthread_t *v151;
  pthread_t *v152;
  void *v153;
  pthread_t *v154;
  pthread_t *v155;
  void *v156;
  std::thread *v157;
  std::thread *v158;
  void *v159;
  _QWORD *v160;
  _QWORD *v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v170;
  std::__shared_weak_count *v171;
  void *v172[2];
  char v173;
  pthread_t v174;
  pthread_t v175[2];
  void *v176[2];
  int v177;
  void *v178;
  pthread_t *v179;
  unint64_t v180;
  void *v181;
  pthread_t *v182;
  unint64_t v183;
  void *v184;
  std::thread *v185;
  unint64_t v186;
  uint64_t v187;
  void *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  pthread_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  pthread_cond_t v200;
  pthread_cond_t v201;
  pthread_mutex_t v202;
  std::thread v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  pthread_cond_t v210;
  pthread_cond_t v211;
  pthread_mutex_t v212;
  std::mutex v213;
  void *__p;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  pthread_cond_t v221;
  pthread_cond_t v222;
  pthread_mutex_t v223;
  _BYTE v224[24];
  _BYTE *v225;
  _BYTE v226[568];
  uint64_t v227;

  v227 = *MEMORY[0x24BDAC8D0];
  v191 = a7;
  v192 = a8;
  if (!*(_QWORD *)(a3 + 24))
    sub_239EBEC6C();
  if (!*(_QWORD *)(a4 + 24))
    sub_239EBEC9C();
  v10 = a1[1];
  v11 = (char *)v10 - (char *)*a1;
  if (v10 != *a1)
  {
    v12 = a6;
    sub_2396FD800(a6, (uint64_t)v224);
    __p = (void *)0x42C8000000000000;
    sub_2396FCC68(v226, (v11 >> 3) + 2, v224, &__p, 1.0);
    v13 = v225;
    if (v225 == v224)
    {
      v14 = 4;
      v13 = v224;
    }
    else
    {
      if (!v225)
        goto LABEL_12;
      v14 = 5;
    }
    (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_12:
    v15 = MGGetBoolAnswer();
    v16 = a2[2];
    if (v16 <= 0)
      v16 = std::thread::hardware_concurrency();
    if ((v15 & 1) == 0)
      goto LABEL_240;
    if (v16 <= 3)
      v17 = 1;
    else
      v17 = v16 - 2;
    v188 = 0;
    v189 = 0;
    v190 = 0;
    LODWORD(v193) = 0;
    v18 = a2[6];
    if (v18 != 1)
    {
      if (v18)
      {
LABEL_22:
        v19 = sub_239418764(a2 + 10);
        v20 = v19;
        switch(v19)
        {
          case 2:
            sub_2397A9868((std::__shared_weak_count_vtbl **)&v203);
            sub_2397A9E70(&__p, (uint64_t)&v203);
            v23 = (std::__shared_weak_count *)v204;
            if ((_QWORD)v204)
            {
              v24 = (unint64_t *)(v204 + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            v26 = (_opaque_pthread_t *)operator new();
            sub_23941DBA4(v26, (uint64_t)&__p, a2);
            v203.__t_ = v26;
            v189 = sub_2394216B0(&v188, (uint64_t *)&v203);
            t = v203.__t_;
            v203.__t_ = 0;
            if (t)
              (*(void (**)(std::__libcpp_thread_t))(t->__sig + 8))(t);
            v29 = (std::__shared_weak_count *)v216;
            if ((_QWORD)v216)
            {
              v30 = (unint64_t *)(v216 + 8);
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v32 = (std::__shared_weak_count *)v215;
            if ((_QWORD)v215)
            {
              v33 = (unint64_t *)(v215 + 8);
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
LABEL_51:
            if ((_BYTE)v192)
              *(_DWORD *)(v191 + 140) = v20;
            HIBYTE(v215) = 0;
            LOBYTE(__p) = 0;
            sub_2396FCDAC((uint64_t)v226, (__int128 *)&__p, 1);
            if (SHIBYTE(v215) < 0)
              operator delete(__p);
            v187 = 0;
            LODWORD(__p) = 5;
            v215 = 0u;
            v216 = 0u;
            v217 = 0u;
            v218 = 0;
            v220 = 0;
            v219 = 0;
            sub_2397A1618(&v223);
            v35 = (int)__p;
            if (__p > 0x7FFFFFFE)
            {
              v35 = 0x7FFFFFFF;
            }
            else if (__p < 2)
            {
              v35 = 1;
            }
            v165 = a4;
            LODWORD(__p) = v35;
            pthread_cond_init(&v221, 0);
            pthread_cond_init(&v222, 0);
            v184 = 0;
            v185 = 0;
            v186 = 0;
            memset(v213.__m_.__opaque, 0, sizeof(v213.__m_.__opaque));
            v213.__m_.__sig = 850045863;
            v36 = a1[1] - *a1;
            if (v36 >= v17)
              v37 = v17;
            else
              v37 = a1[1] - *a1;
            v166 = (uint64_t)v12;
            if (v37)
            {
              v38 = 0;
              v39 = vcvtps_u32_f32((float)v36 / (float)v17);
              do
              {
                if (v36 >= v38 * v39)
                  v42 = v38 * v39;
                else
                  v42 = v36;
                if (v36 >= ++v38 * v39)
                  v43 = v38 * v39;
                else
                  v43 = v36;
                v44 = (std::__thread_struct *)operator new();
                std::__thread_struct::__thread_struct(v44);
                v45 = (_QWORD *)operator new();
                *v45 = v44;
                v45[1] = v42;
                v45[2] = v43;
                v45[3] = a1;
                v45[4] = a3;
                v45[5] = a5;
                v45[6] = &v213;
                v45[7] = &__p;
                v45[8] = &v191;
                v45[9] = a2;
                v45[10] = v226;
                v45[11] = v12;
                v46 = pthread_create(&v203.__t_, 0, (void *(__cdecl *)(void *))sub_2394219FC, v45);
                if (v46)
                  goto LABEL_243;
                v47 = (char *)v185;
                if ((unint64_t)v185 < v186)
                {
                  v185->__t_ = v203.__t_;
                  v203.__t_ = 0;
                  v40 = (std::thread *)(v47 + 8);
                }
                else
                {
                  v48 = (char *)v184;
                  v49 = (char *)v185 - (_BYTE *)v184;
                  v50 = ((char *)v185 - (_BYTE *)v184) >> 3;
                  v51 = v50 + 1;
                  v52 = 0uLL;
                  if ((unint64_t)(v50 + 1) >> 61)
                    sub_2394189F8();
                  v53 = v186 - (_QWORD)v184;
                  if ((uint64_t)(v186 - (_QWORD)v184) >> 2 > v51)
                    v51 = v53 >> 2;
                  if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
                    v54 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v54 = v51;
                  if (v54)
                  {
                    if (v54 >> 61)
                      sub_239418A80();
                    v55 = (char *)operator new(8 * v54);
                    v52 = 0uLL;
                  }
                  else
                  {
                    v55 = 0;
                  }
                  v56 = (std::thread *)&v55[8 * v50];
                  v57 = &v55[8 * v54];
                  v56->__t_ = v203.__t_;
                  v40 = v56 + 1;
                  v203.__t_ = 0;
                  v58 = v47 - v48;
                  if (v47 == v48)
                  {
                    v184 = &v55[8 * v50];
                    v185 = v56 + 1;
                    v186 = (unint64_t)v57;
                    v12 = (_QWORD *)v166;
                    if (!v47)
                      goto LABEL_65;
LABEL_103:
                    operator delete(v47);
                    goto LABEL_65;
                  }
                  v59 = v58 - 8;
                  if ((unint64_t)(v58 - 8) < 0x78)
                    goto LABEL_259;
                  v60 = v59 >> 3;
                  if (&v55[v49 - (v59 & 0xFFFFFFFFFFFFFFF8) - 8] < v47 && &v47[-8 * v60 - 8] < (char *)v56)
                    goto LABEL_259;
                  v61 = v60 + 1;
                  v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
                  v63 = &v47[-v62];
                  v56 = (std::thread *)((char *)v56 - v62);
                  v64 = &v55[8 * v50 - 16];
                  v65 = v47 - 16;
                  v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v67 = *(_OWORD *)v65;
                    *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
                    *(_OWORD *)v64 = v67;
                    *((_OWORD *)v65 - 1) = v52;
                    *(_OWORD *)v65 = v52;
                    v64 -= 32;
                    v65 -= 32;
                    v66 -= 4;
                  }
                  while (v66);
                  v47 = v63;
                  if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_259:
                    do
                    {
                      v68 = (_opaque_pthread_t *)*((_QWORD *)v47 - 1);
                      v47 -= 8;
                      v56[-1].__t_ = v68;
                      --v56;
                      *(_QWORD *)v47 = 0;
                    }
                    while (v47 != v48);
                  }
                  v47 = (char *)v184;
                  v69 = v185;
                  v184 = v56;
                  v185 = v40;
                  v186 = (unint64_t)v57;
                  if (v69 == (std::thread *)v47)
                  {
                    v12 = (_QWORD *)v166;
                    if (v47)
                      goto LABEL_103;
                  }
                  else
                  {
                    v12 = (_QWORD *)v166;
                    do
                      std::thread::~thread(v69 - 1);
                    while (v69 != (std::thread *)v47);
                    if (v47)
                      goto LABEL_103;
                  }
                }
LABEL_65:
                v185 = v40;
                std::thread::~thread(&v203);
                v36 = a1[1] - *a1;
                if (v36 >= v17)
                  v41 = v17;
                else
                  v41 = a1[1] - *a1;
              }
              while (v38 < v41);
            }
            LODWORD(v203.__t_) = 5;
            v204 = 0u;
            v205 = 0u;
            v206 = 0u;
            v207 = 0;
            v209 = 0;
            v208 = 0;
            sub_2397A1618(&v212);
            v70 = (int)v203.__t_;
            if (LODWORD(v203.__t_) > 0x7FFFFFFE)
            {
              v70 = 0x7FFFFFFF;
            }
            else if (LODWORD(v203.__t_) < 2)
            {
              v70 = 1;
            }
            LODWORD(v203.__t_) = v70;
            pthread_cond_init(&v210, 0);
            pthread_cond_init(&v211, 0);
            v181 = 0;
            v182 = 0;
            v183 = 0;
            v71 = *(_QWORD *)v188;
            v72 = (std::__thread_struct *)operator new();
            std::__thread_struct::__thread_struct(v72);
            v73 = (_QWORD *)operator new();
            *v73 = v72;
            v73[1] = &__p;
            v73[2] = &v203;
            v73[3] = &v191;
            v73[4] = v71;
            v73[5] = v226;
            v73[6] = v166;
            v46 = pthread_create(&v193, 0, (void *(__cdecl *)(void *))sub_239424B00, v73);
            if (v46)
            {
LABEL_243:
              std::__throw_system_error(v46, "thread constructor failed");
              goto LABEL_256;
            }
            v74 = (char *)v182;
            if ((unint64_t)v182 >= v183)
            {
              v76 = (char *)v181;
              v77 = (char *)v182 - (_BYTE *)v181;
              v78 = ((char *)v182 - (_BYTE *)v181) >> 3;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61)
                sub_2394189F8();
              v80 = v183 - (_QWORD)v181;
              if ((uint64_t)(v183 - (_QWORD)v181) >> 2 > v79)
                v79 = v80 >> 2;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                if (v81 >> 61)
                  sub_239418A80();
                v82 = (char *)operator new(8 * v81);
              }
              else
              {
                v82 = 0;
              }
              v83 = (pthread_t *)&v82[8 * v78];
              v84 = &v82[8 * v81];
              *v83 = v193;
              v75 = v83 + 1;
              v193 = 0;
              if (v74 == v76)
              {
                v181 = &v82[8 * v78];
                v182 = v83 + 1;
                v183 = (unint64_t)v84;
                if (!v74)
                  goto LABEL_133;
              }
              else
              {
                v85 = v74 - v76 - 8;
                if (v85 < 0x78
                  || &v82[v77 - (v85 & 0xFFFFFFFFFFFFFFF8) - 8] < v74
                  && &v74[-(v85 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v83)
                {
                  goto LABEL_260;
                }
                v86 = (v85 >> 3) + 1;
                v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
                v88 = &v74[-v87];
                v83 = (pthread_t *)((char *)v83 - v87);
                v89 = &v82[8 * v78 - 16];
                v90 = v74 - 16;
                v91 = v86 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v92 = *(_OWORD *)v90;
                  *((_OWORD *)v89 - 1) = *((_OWORD *)v90 - 1);
                  *(_OWORD *)v89 = v92;
                  *((_OWORD *)v90 - 1) = 0uLL;
                  *(_OWORD *)v90 = 0uLL;
                  v89 -= 32;
                  v90 -= 32;
                  v91 -= 4;
                }
                while (v91);
                v74 = v88;
                if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_260:
                  do
                  {
                    v93 = (_opaque_pthread_t *)*((_QWORD *)v74 - 1);
                    v74 -= 8;
                    *--v83 = v93;
                    *(_QWORD *)v74 = 0;
                  }
                  while (v74 != v76);
                }
                v74 = (char *)v181;
                v94 = v182;
                v181 = v83;
                v182 = v75;
                v183 = (unint64_t)v84;
                while (v94 != (pthread_t *)v74)
                  std::thread::~thread((std::thread *)v94 - 1);
                if (!v74)
                  goto LABEL_133;
              }
              operator delete(v74);
            }
            else
            {
              *v182 = v193;
              v193 = 0;
              v75 = (pthread_t *)(v74 + 8);
            }
LABEL_133:
            v182 = v75;
            std::thread::~thread((std::thread *)&v193);
            LODWORD(v193) = 5;
            v194 = 0u;
            v195 = 0u;
            v196 = 0u;
            v197 = 0;
            v198 = 0;
            v199 = 0;
            sub_2397A1618(&v202);
            v95 = (int)v193;
            if (v193 > 0x7FFFFFFE)
            {
              v95 = 0x7FFFFFFF;
            }
            else if (v193 < 2)
            {
              v95 = 1;
            }
            LODWORD(v193) = v95;
            pthread_cond_init(&v200, 0);
            pthread_cond_init(&v201, 0);
            v178 = 0;
            v179 = 0;
            v180 = 0;
            v96 = *(_QWORD *)v188;
            v97 = (std::__thread_struct *)operator new();
            std::__thread_struct::__thread_struct(v97);
            v98 = (_QWORD *)operator new();
            *v98 = v97;
            v98[1] = &v203;
            v98[2] = &v193;
            v98[3] = a2;
            v98[4] = &v191;
            v98[5] = v96;
            v98[6] = v226;
            v98[7] = v166;
            v99 = pthread_create(v175, 0, (void *(__cdecl *)(void *))sub_2394261E4, v98);
            if (!v99)
            {
              v100 = (char *)v179;
              if ((unint64_t)v179 >= v180)
              {
                v102 = (char *)v178;
                v103 = (char *)v179 - (_BYTE *)v178;
                v104 = ((char *)v179 - (_BYTE *)v178) >> 3;
                v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 61)
                  sub_2394189F8();
                v106 = v180 - (_QWORD)v178;
                if ((uint64_t)(v180 - (_QWORD)v178) >> 2 > v105)
                  v105 = v106 >> 2;
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF8)
                  v107 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v107 = v105;
                if (v107)
                {
                  if (v107 >> 61)
                    sub_239418A80();
                  v108 = (char *)operator new(8 * v107);
                }
                else
                {
                  v108 = 0;
                }
                v109 = (pthread_t *)&v108[8 * v104];
                v110 = &v108[8 * v107];
                *v109 = v175[0];
                v101 = v109 + 1;
                v175[0] = 0;
                if (v100 == v102)
                {
                  v178 = &v108[8 * v104];
                  v179 = v109 + 1;
                  v180 = (unint64_t)v110;
                  if (!v100)
                    goto LABEL_164;
                }
                else
                {
                  v111 = v100 - v102 - 8;
                  if (v111 < 0x78
                    || &v108[v103 - (v111 & 0xFFFFFFFFFFFFFFF8) - 8] < v100
                    && &v100[-(v111 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v109)
                  {
                    goto LABEL_261;
                  }
                  v112 = (v111 >> 3) + 1;
                  v113 = 8 * (v112 & 0x3FFFFFFFFFFFFFFCLL);
                  v114 = &v100[-v113];
                  v109 = (pthread_t *)((char *)v109 - v113);
                  v115 = &v108[8 * v104 - 16];
                  v116 = v100 - 16;
                  v117 = v112 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v118 = *(_OWORD *)v116;
                    *((_OWORD *)v115 - 1) = *((_OWORD *)v116 - 1);
                    *(_OWORD *)v115 = v118;
                    *((_OWORD *)v116 - 1) = 0uLL;
                    *(_OWORD *)v116 = 0uLL;
                    v115 -= 32;
                    v116 -= 32;
                    v117 -= 4;
                  }
                  while (v117);
                  v100 = v114;
                  if (v112 != (v112 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_261:
                    do
                    {
                      v119 = (_opaque_pthread_t *)*((_QWORD *)v100 - 1);
                      v100 -= 8;
                      *--v109 = v119;
                      *(_QWORD *)v100 = 0;
                    }
                    while (v100 != v102);
                  }
                  v100 = (char *)v178;
                  v120 = v179;
                  v178 = v109;
                  v179 = v101;
                  v180 = (unint64_t)v110;
                  while (v120 != (pthread_t *)v100)
                    std::thread::~thread((std::thread *)v120 - 1);
                  if (!v100)
                    goto LABEL_164;
                }
                operator delete(v100);
              }
              else
              {
                *v179 = v175[0];
                v175[0] = 0;
                v101 = (pthread_t *)(v100 + 8);
              }
LABEL_164:
              v179 = v101;
              std::thread::~thread((std::thread *)v175);
              *(_OWORD *)v175 = 0u;
              *(_OWORD *)v176 = 0u;
              v177 = 1065353216;
              v121 = (std::__thread_struct *)operator new();
              std::__thread_struct::__thread_struct(v121);
              v122 = (_QWORD *)operator new();
              *v122 = v121;
              v122[1] = &v193;
              v122[2] = v166;
              v122[3] = v226;
              v122[4] = v165;
              v122[5] = &v191;
              v122[6] = v175;
              v122[7] = a2;
              v122[8] = &v187;
              v123 = pthread_create(&v174, 0, (void *(__cdecl *)(void *))sub_2394273A4, v122);
              if (!v123)
              {
                v173 = 0;
                LOBYTE(v172[0]) = 0;
                sub_2396FCDAC((uint64_t)v226, (__int128 *)v172, 1);
                if (v173 < 0)
                  operator delete(v172[0]);
                v125 = (std::thread *)v184;
                v124 = v185;
                if (v184 != v185)
                {
                  do
                    std::thread::join(v125++);
                  while (v125 != v124);
                }
                sub_23942053C((uint64_t)&__p);
                v127 = (std::thread *)v181;
                v126 = (std::thread *)v182;
                if (v181 != v182)
                {
                  do
                    std::thread::join(v127++);
                  while (v127 != v126);
                }
                sub_239420698((uint64_t)&v203);
                v129 = (std::thread *)v178;
                v128 = (std::thread *)v179;
                if (v178 != v179)
                {
                  do
                    std::thread::join(v129++);
                  while (v129 != v128);
                }
                sub_2394207F4((uint64_t)&v193);
                std::thread::join((std::thread *)&v174);
                v130 = *a1;
                v131 = a1[1];
                if (*a1 != v131)
                {
                  do
                  {
                    v132 = *v130;
                    if (v175[1])
                    {
                      v133 = (uint8x8_t)vcnt_s8((int8x8_t)v175[1]);
                      v133.i16[0] = vaddlv_u8(v133);
                      if (v133.u32[0] > 1uLL)
                      {
                        v134 = (unint64_t)*v130;
                        if (v132 >= v175[1])
                          v134 = (unint64_t)v132 % (unint64_t)v175[1];
                      }
                      else
                      {
                        v134 = (unint64_t)&v175[1][-1].__opaque[8175] & (unint64_t)v132;
                      }
                      v135 = (_QWORD *)*(&v175[0]->__sig + v134);
                      if (v135)
                      {
                        v136 = (_QWORD *)*v135;
                        if (v136)
                        {
                          if (v133.u32[0] < 2uLL)
                          {
                            while (1)
                            {
                              v138 = v136[1];
                              if ((_opaque_pthread_t *)v138 == v132)
                              {
                                if ((_opaque_pthread_t *)v136[2] == v132)
                                  goto LABEL_175;
                              }
                              else if ((v138 & (unint64_t)&v175[1][-1].__opaque[8175]) != v134)
                              {
                                goto LABEL_196;
                              }
                              v136 = (_QWORD *)*v136;
                              if (!v136)
                                goto LABEL_196;
                            }
                          }
                          do
                          {
                            v137 = (_opaque_pthread_t *)v136[1];
                            if (v137 == v132)
                            {
                              if ((_opaque_pthread_t *)v136[2] == v132)
                                goto LABEL_175;
                            }
                            else
                            {
                              if (v137 >= v175[1])
                                v137 = (_opaque_pthread_t *)((unint64_t)v137 % (unint64_t)v175[1]);
                              if (v137 != (_opaque_pthread_t *)v134)
                                break;
                            }
                            v136 = (_QWORD *)*v136;
                          }
                          while (v136);
                        }
                      }
                    }
LABEL_196:
                    v139 = (char *)operator new(0x78uLL);
                    *((_QWORD *)v139 + 1) = 0;
                    *((_QWORD *)v139 + 2) = 0;
                    *(_QWORD *)v139 = &off_250ADB7B8;
                    *(_OWORD *)(v139 + 24) = xmmword_239EC65B0;
                    *(_OWORD *)(v139 + 40) = 0u;
                    *(_OWORD *)(v139 + 56) = 0u;
                    *(_OWORD *)(v139 + 72) = 0u;
                    *(_OWORD *)(v139 + 88) = 0u;
                    *(_OWORD *)(v139 + 104) = 0u;
                    v170 = v139 + 24;
                    v171 = (std::__shared_weak_count *)v139;
                    v172[0] = v132;
                    v140 = *(_QWORD *)(v165 + 24);
                    if (!v140)
                      sub_2394172E0();
                    v141 = (*(uint64_t (**)(uint64_t, char **, void **))(*(_QWORD *)v140 + 48))(v140, &v170, v172);
                    v142 = v141;
                    v143 = v171;
                    if (!v171)
                      goto LABEL_201;
                    p_shared_owners = (unint64_t *)&v171->__shared_owners_;
                    do
                      v145 = __ldaxr(p_shared_owners);
                    while (__stlxr(v145 - 1, p_shared_owners));
                    if (!v145)
                    {
                      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                      std::__shared_weak_count::__release_weak(v143);
                      if ((_BYTE)v192)
                        v147 = v142;
                      else
                        v147 = 1;
                      if ((v147 & 1) != 0)
                        goto LABEL_175;
                    }
                    else
                    {
LABEL_201:
                      if ((_BYTE)v192)
                        v146 = v141;
                      else
                        v146 = 1;
                      if ((v146 & 1) != 0)
                        goto LABEL_175;
                    }
                    sub_2394202DC((_QWORD *)(v191 + 64), 2503);
LABEL_175:
                    ++v130;
                  }
                  while (v130 != v131);
                }
                if ((_BYTE)v192)
                  sub_23941E9B8(a2, v191);
                sub_2396FD7B0(v166);
                std::thread::~thread((std::thread *)&v174);
                v148 = v176[0];
                if (v176[0])
                {
                  do
                  {
                    v149 = (_QWORD *)*v148;
                    operator delete(v148);
                    v148 = v149;
                  }
                  while (v149);
                }
                v150 = v175[0];
                v175[0] = 0;
                if (v150)
                  operator delete(v150);
                v151 = (pthread_t *)v178;
                if (v178)
                {
                  v152 = v179;
                  v153 = v178;
                  if (v179 != v178)
                  {
                    do
                      std::thread::~thread((std::thread *)v152 - 1);
                    while (v152 != v151);
                    v153 = v178;
                  }
                  v179 = v151;
                  operator delete(v153);
                }
                sub_2394209F0((uint64_t)&v193);
                v154 = (pthread_t *)v181;
                if (v181)
                {
                  v155 = v182;
                  v156 = v181;
                  if (v182 != v181)
                  {
                    do
                      std::thread::~thread((std::thread *)v155 - 1);
                    while (v155 != v154);
                    v156 = v181;
                  }
                  v182 = v154;
                  operator delete(v156);
                }
                sub_239420A78((uint64_t)&v203);
                std::mutex::~mutex(&v213);
                v157 = (std::thread *)v184;
                if (v184)
                {
                  v158 = v185;
                  v159 = v184;
                  if (v185 != v184)
                  {
                    do
                      std::thread::~thread(v158 - 1);
                    while (v158 != v157);
                    v159 = v184;
                  }
                  v185 = v157;
                  operator delete(v159);
                }
                sub_239420B00((uint64_t)&__p);
                v160 = v188;
                if (v188)
                {
                  v161 = v189;
                  v162 = v188;
                  if (v189 != v188)
                  {
                    do
                    {
                      v164 = *--v161;
                      v163 = v164;
                      *v161 = 0;
                      if (v164)
                        (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
                    }
                    while (v161 != v160);
                    v162 = v188;
                  }
                  v189 = v160;
                  operator delete(v162);
                }
                goto LABEL_240;
              }
              std::__throw_system_error(v123, "thread constructor failed");
              goto LABEL_256;
            }
            std::__throw_system_error(v99, "thread constructor failed");
LABEL_256:
            __break(1u);
            return;
          case 1:
            v22 = (_QWORD *)operator new();
            sub_23941E3A4(v22, (uint64_t)a2);
            __p = v22;
LABEL_37:
            v189 = sub_2394216B0(&v188, (uint64_t *)&__p);
            v27 = __p;
            __p = 0;
            if (v27)
              (*(void (**)(void *))(*(_QWORD *)v27 + 8))(v27);
            goto LABEL_51;
          case 0:
            v21 = (_QWORD *)operator new();
            sub_2394160DC(v21, (uint64_t)a2);
            __p = v21;
            goto LABEL_37;
        }
        if ((_BYTE)v192)
          sub_2394202DC((_QWORD *)(v191 + 64), 2003);
LABEL_240:
        sub_2396FCD14((uint64_t)v226);
        return;
      }
      v18 = 2;
    }
    LODWORD(v193) = v18;
    goto LABEL_22;
  }
  if ((_BYTE)a8)
    sub_2394202DC((_QWORD *)(a7 + 64), 2501);
}

void sub_23941FDE8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,std::thread a22,std::thread a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  unint64_t v44;

  v44 = STACK[0x200];
  STACK[0x200] = 0;
  if (v44)
    (*(void (**)(unint64_t))(*(_QWORD *)v44 + 8))(v44);
  sub_239420490((uint64_t)&STACK[0x330]);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a42)
    {
      sub_2394202DC((_QWORD *)(a41 + 64), 2001);
      sub_2394202DC((_QWORD *)(a41 + 64), 2002);
    }
    __cxa_end_catch();
    JUMPOUT(0x23941EF38);
  }
  sub_239420B88(&a38);
  sub_2396FCD14((uint64_t)&STACK[0x440]);
  _Unwind_Resume(a1);
}

void sub_2394202DC(_QWORD *a1, int a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = (char *)a1[5];
  v5 = (char *)a1[6];
  v6 = v5;
  v7 = v4;
  if (v4 != v5)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 4;
      if (v7 == v5)
      {
        v7 = (char *)a1[6];
        break;
      }
    }
  }
  if (v7 == v5)
  {
    v8 = a1[7];
    if ((unint64_t)v5 < v8)
    {
      *(_DWORD *)v5 = a2;
      v9 = (uint64_t)(v5 + 4);
LABEL_27:
      a1[6] = v9;
      return;
    }
    v10 = v5 - v4;
    v11 = (v5 - v4) >> 2;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62)
      sub_2394189F8();
    v13 = v8 - (_QWORD)v4;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_239418A80();
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v11];
      v17 = &v15[4 * v14];
      *v16 = a2;
      v9 = (uint64_t)(v16 + 1);
      if (v4 == v5)
        goto LABEL_25;
    }
    else
    {
      v15 = 0;
      v16 = (_DWORD *)(4 * v11);
      v17 = 0;
      *(_DWORD *)(4 * v11) = a2;
      v9 = 4 * v11 + 4;
      if (v4 == v5)
      {
LABEL_25:
        a1[5] = v16;
        a1[6] = v9;
        a1[7] = v17;
        if (v4)
          operator delete(v4);
        goto LABEL_27;
      }
    }
    if ((unint64_t)(v10 - 4) < 0x2C)
      goto LABEL_32;
    if ((unint64_t)(v4 - v15) < 0x20)
      goto LABEL_32;
    v18 = ((unint64_t)(v10 - 4) >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v6 = &v5[-v19];
    v16 = (_DWORD *)((char *)v16 - v19);
    v20 = &v15[4 * v11 - 16];
    v21 = v5 - 16;
    v22 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 8;
    }
    while (v22);
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        v24 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v16 = v24;
      }
      while (v6 != v4);
    }
    goto LABEL_25;
  }
}

uint64_t sub_239420490(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t sub_23942053C(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  return sub_2397A16B4(v2);
}

void sub_23942067C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239420698(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  return sub_2397A16B4(v2);
}

void sub_2394207D8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394207F4(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  return sub_2397A16B4(v2);
}

void sub_239420934(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239420950(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void **sub_239420998(void **a1)
{
  std::thread *v2;
  std::thread *v3;
  void *v4;

  v2 = (std::thread *)*a1;
  if (*a1)
  {
    v3 = (std::thread *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        std::thread::~thread(v3 - 1);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2394209F0(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_2394207F4(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239421864(a1 + 8);
  return a1;
}

uint64_t sub_239420A78(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239420698(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239421864(a1 + 8);
  return a1;
}

uint64_t sub_239420B00(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_23942053C(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239421864(a1 + 8);
  return a1;
}

_QWORD *sub_239420B88(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239420BFC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  sub_239421038(a1 + 40, *(_QWORD **)(a1 + 48));
  return a1;
}

_QWORD *sub_239420C38(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  sub_239420D98((uint64_t)(a1 + 11));
  v2 = (_QWORD *)a1[8];
  while (v2)
  {
    v10 = v2;
    v2 = (_QWORD *)*v2;
    v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    operator delete(v10);
  }
  v3 = (void *)a1[6];
  a1[6] = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    goto LABEL_8;
  v5 = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)a1[3];
    if (!v7)
      goto LABEL_20;
  }
  else
  {
LABEL_8:
    v7 = (std::__shared_weak_count *)a1[3];
    if (!v7)
      goto LABEL_20;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_20:
  v14 = (std::__shared_weak_count *)a1[1];
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

uint64_t sub_239420D98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;

  std::mutex::~mutex((std::mutex *)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v4);
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(void **)(a1 + 16);
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = *(void **)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = v8;
    operator delete(v10);
  }
  v14 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v14)
    return a1;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
    return a1;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

uint64_t sub_239420EF4(uint64_t a1)
{
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out[36];
  unint64_t v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = _D1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  *(std::chrono::system_clock::time_point *)(a1 + 64) = std::chrono::system_clock::now();
  task_info_outCnt = 93;
  if (!task_info(*MEMORY[0x24BDAEC58], 0x16u, task_info_out, &task_info_outCnt))
    *(float *)(a1 + 92) = (float)((float)v10 * 0.00097656) * 0.00097656;
  *(_BYTE *)(a1 + 128) = 1;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 140) = xmmword_239EC65E0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 1;
  *(_QWORD *)(a1 + 168) = 0x3C23D70A00000002;
  *(_DWORD *)(a1 + 176) = -1;
  *(_WORD *)(a1 + 180) = 1;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = qos_class_self();
  return a1;
}

void sub_239421008(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  void **v5;
  void *v7;

  v5 = v3;
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 112) = v7;
    operator delete(v7);
  }
  sub_239421038(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_239421038(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_239421038(a1, *a2);
    sub_239421038(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_239421078(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *i;
  _QWORD *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t *v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;

  v4 = a2;
  v5 = (uint64_t)a1;
  if (a1[2])
  {
    v6 = (_QWORD *)*a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = a1 + 1;
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1])
      v9 = (_QWORD *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v25 = 0;
LABEL_47:
      sub_239421038((uint64_t)a1, v25);
      goto LABEL_48;
    }
    v10 = (_QWORD *)v9[2];
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if ((_QWORD *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v36 = (_QWORD *)v10[1];
          if (!v36)
            break;
          do
          {
            v10 = v36;
            v36 = (_QWORD *)*v36;
          }
          while (v36);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (_QWORD *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      v12 = v9;
      v13 = v4;
      while (1)
      {
        v9 = v10;
        v14 = v13[4];
        v12[4] = v14;
        v15 = *(_OWORD *)(v13 + 5);
        v12[7] = v13[7];
        *(_OWORD *)(v12 + 5) = v15;
        v16 = (_QWORD *)*v8;
        v17 = (_QWORD *)(v5 + 8);
        v18 = (_QWORD *)(v5 + 8);
        if (*v8)
          break;
LABEL_14:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v17;
        *v18 = v12;
        v19 = **(_QWORD **)v5;
        if (v19)
          goto LABEL_15;
LABEL_16:
        sub_2394213B8(*(uint64_t **)(v5 + 8), v12);
        ++*(_QWORD *)(v5 + 16);
        if (v10)
        {
          v10 = (_QWORD *)v10[2];
          if (v10)
          {
            v22 = (_QWORD *)*v10;
            if ((_QWORD *)*v10 == v9)
            {
              *v10 = 0;
              while (1)
              {
                v23 = (_QWORD *)v10[1];
                if (!v23)
                  break;
                do
                {
                  v10 = v23;
                  v23 = (_QWORD *)*v23;
                }
                while (v23);
              }
            }
            else
            {
              for (v10[1] = 0; v22; v22 = (_QWORD *)v10[1])
              {
                do
                {
                  v10 = v22;
                  v22 = (_QWORD *)*v22;
                }
                while (v22);
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
        v20 = (_QWORD *)v13[1];
        if (v20)
        {
          do
          {
            v4 = v20;
            v20 = (_QWORD *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v13[2];
            v21 = *v4 == (_QWORD)v13;
            v13 = v4;
          }
          while (!v21);
        }
        if (v9)
        {
          v12 = v9;
          v13 = v4;
          if (v4 != a3)
            continue;
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          v17 = v16;
          if (v14 >= v16[4])
            break;
          v16 = (_QWORD *)*v16;
          v18 = v17;
          if (!*v17)
            goto LABEL_14;
        }
        v16 = (_QWORD *)v16[1];
      }
      while (v16);
      v18 = v17 + 1;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v17;
      v17[1] = v12;
      v19 = **(_QWORD **)v5;
      if (!v19)
        goto LABEL_16;
LABEL_15:
      *(_QWORD *)v5 = v19;
      v12 = (_QWORD *)*v18;
      goto LABEL_16;
    }
LABEL_42:
    sub_239421038(v5, v9);
    if (v10)
    {
      for (i = (_QWORD *)v10[2]; i; i = (_QWORD *)i[2])
        v10 = i;
      a1 = (_QWORD *)v5;
      v25 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    v26 = (uint64_t **)(v5 + 8);
    while (1)
    {
      v27 = (uint64_t *)operator new(0x40uLL);
      v28 = v27;
      v29 = *((_OWORD *)v4 + 3);
      *((_OWORD *)v27 + 2) = *((_OWORD *)v4 + 2);
      *((_OWORD *)v27 + 3) = v29;
      v30 = *v26;
      v31 = (uint64_t **)(v5 + 8);
      v32 = (uint64_t **)(v5 + 8);
      if (*v26)
        break;
LABEL_56:
      *v27 = 0;
      v27[1] = 0;
      v27[2] = (uint64_t)v31;
      *v32 = v27;
      v33 = **(_QWORD **)v5;
      if (v33)
        goto LABEL_57;
LABEL_58:
      sub_2394213B8(*(uint64_t **)(v5 + 8), v28);
      ++*(_QWORD *)(v5 + 16);
      v34 = (_QWORD *)v4[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v4[2];
          v21 = *v35 == (_QWORD)v4;
          v4 = v35;
        }
        while (!v21);
      }
      v4 = v35;
      if (v35 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v31 = (uint64_t **)v30;
        if (v27[4] >= (unint64_t)v30[4])
          break;
        v30 = (uint64_t *)*v30;
        v32 = v31;
        if (!*v31)
          goto LABEL_56;
      }
      v30 = (uint64_t *)v30[1];
    }
    while (v30);
    v32 = v31 + 1;
    *v27 = 0;
    v27[1] = 0;
    v27[2] = (uint64_t)v31;
    v31[1] = v27;
    v33 = **(_QWORD **)v5;
    if (!v33)
      goto LABEL_58;
LABEL_57:
    *(_QWORD *)v5 = v33;
    v28 = *v32;
    goto LABEL_58;
  }
}

uint64_t *sub_2394213B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

_QWORD *sub_23942156C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_2394189F8();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

_QWORD *sub_2394216B0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    sub_2394189F8();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      sub_239418A80();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  v12 = *a2;
  *a2 = 0;
  *(_QWORD *)v10 = v12;
  v13 = v10 + 8;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15)
      return v13;
    goto LABEL_26;
  }
  v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15)
    goto LABEL_34;
  v17 = (v16 >> 3) + 1;
  v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  v19 = &v15[-v18];
  v20 = v15 - 16;
  v21 = &v9[8 * v4 - 16];
  v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v24 = *((_OWORD *)v20 - 1);
    v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - 1) = 0uLL;
    *(_OWORD *)v20 = 0uLL;
    *((_OWORD *)v21 - 1) = v24;
    *(_OWORD *)v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_34:
    do
    {
      v25 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  v26 = (char *)*a1;
  v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      v28 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v27 = v28;
      *(_QWORD *)v15 = 0;
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    while (v15 != v26);
    v15 = v26;
  }
  if (v15)
LABEL_26:
    operator delete(v15);
  return v13;
}

uint64_t sub_239421864(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 >> 8];
  v6 = (uint64_t)*v5 + 16 * v4;
  v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*(_BYTE *)(a1 + 40) + v4);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 16;
      if (v6 - (_QWORD)*v5 != 4096)
        continue;
LABEL_10:
      v11 = (uint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 16;
    if (v6 - (_QWORD)*v5 == 4096)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 256;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2394219FC(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  uint64_t (**v5)();
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  uint64_t p_shared_weak_owners;
  unsigned __int32 *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_count v13;
  std::__shared_weak_count *shared_owners;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count_vtbl *v20;
  __n128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __n128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  int v30;
  __n128 v31;
  _BYTE *v32;
  float v33;
  __n128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __n128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t (**v43)();
  unsigned __int8 *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t shared_weak_owners;
  unint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  _BOOL4 v60;
  _BOOL4 v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  float v67;
  std::mutex *v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  size_t v86;
  char *v87;
  size_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  void *v93;
  void *v94;
  unint64_t v95;
  void *v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  void *v102;
  unint64_t v103;
  char *v104;
  _BYTE *v105;
  unint64_t v106;
  char *v107;
  int64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  size_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  int64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  void *v138;
  char *v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  __int128 *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  size_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 *v167;
  _OWORD *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  unint64_t v172;
  std::__shared_weak_count **v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  _BYTE *v180;
  unint64_t v181;
  char *v182;
  BOOL v183;
  int64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  __int128 *v192;
  _OWORD *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  const void *v198;
  uint64_t v199;
  void *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  pthread_mutex_t *v210;
  uint64_t (**v212)();
  std::__shared_weak_count *v213;
  std::__shared_weak_count *v214;
  uint64_t v215;
  uint64_t v216;
  void *__p[2];
  std::__shared_weak_count *v218;
  _BYTE v219[48];

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 8);
  v209 = *(_QWORD *)(a1 + 16);
  if (v4 == v209)
    goto LABEL_219;
  while (!sub_2396FD7B0(*(_QWORD *)(a1 + 88)))
  {
    v5 = *(uint64_t (***)())(**(_QWORD **)(a1 + 24) + 8 * v4);
    v6 = (std::__shared_weak_count *)operator new(0xF8uLL);
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6[1].std::__shared_count = 0u;
    v8 = v6 + 1;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB5F0;
    *(_OWORD *)&v6[1].__shared_weak_owners_ = 0u;
    p_shared_weak_owners = (uint64_t)&v6[1].__shared_weak_owners_;
    *(_OWORD *)&v6[2].__shared_owners_ = 0u;
    v6[3].std::__shared_count = 0u;
    *(_OWORD *)&v6[3].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v6[4].__shared_owners_ = 0u;
    v6[5].std::__shared_count = 0u;
    *(_OWORD *)&v6[5].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v6[6].__shared_owners_ = 0u;
    v6[7].std::__shared_count = 0u;
    *(_OWORD *)&v6[7].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v6[8].__shared_owners_ = 0u;
    v6[9].std::__shared_count = 0u;
    *(_OWORD *)&v6[9].__shared_weak_owners_ = 0u;
    v6[1].__shared_weak_owners_ = (uint64_t)&off_250ADB628;
    sub_239422F30(&v6[2]);
    v6[5].__shared_owners_ = (uint64_t)&off_250ADB628;
    sub_239422F30(&v6[5].__shared_weak_owners_);
    LODWORD(v6[10].__vftable) = 1065353216;
    v10 = (unsigned __int32 *)&v6[10];
    v6[9].__shared_owners_ = 0;
    LODWORD(v6[9].__shared_weak_owners_) = -1082130432;
    LODWORD(v6[9].__vftable) = (_DWORD)v5;
    kdebug_trace();
    v11 = *(_QWORD *)(a1 + 32);
    v212 = v5;
    v12 = *(_QWORD *)(v11 + 24);
    if (!v12)
      sub_2394172E0();
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t (***)()))(*(_QWORD *)v12 + 48))(__p, v12, &v212);
    v13 = *(std::__shared_count *)__p;
    __p[0] = 0;
    __p[1] = 0;
    shared_owners = (std::__shared_weak_count *)v6[1].__shared_owners_;
    v6[1].std::__shared_count = v13;
    if (!shared_owners)
      goto LABEL_10;
    v15 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
      v17 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_16;
    }
    else
    {
LABEL_10:
      v17 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_16;
    }
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_16:
    v20 = v8->__vftable;
    if (!v8->__vftable)
    {
      v29 = *(_BYTE **)(a1 + 64);
      if (v29[8])
        sub_2394202DC((_QWORD *)(*(_QWORD *)v29 + 64), 2502);
      goto LABEL_200;
    }
    v212 = &off_250ADB210;
    sub_239423B80(v20, (uint64_t)&v213);
    sub_2397078F8((uint64_t)&v212, 1, __p);
    sub_239422CF0(p_shared_weak_owners, (uint64_t)__p);
    v21 = nullsub_4(v219);
    v22 = v218;
    if (!v218)
      goto LABEL_21;
    v23 = (unint64_t *)&v218->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v21);
      std::__shared_weak_count::__release_weak(v22);
      j_nullsub_4_89(__p);
      v25 = nullsub_4(&v215);
      v26 = v214;
      if (!v214)
        goto LABEL_29;
    }
    else
    {
LABEL_21:
      j_nullsub_4_89(__p);
      v25 = nullsub_4(&v215);
      v26 = v214;
      if (!v214)
        goto LABEL_29;
    }
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v25);
      std::__shared_weak_count::__release_weak(v26);
    }
LABEL_29:
    nullsub_4(&v212);
    sub_23941860C((int *)&v8->__vftable[2].__on_zero_shared_weak, *(int **)(a1 + 72), (float *)&v6[10]);
    if (!v30)
    {
      v31.n128_u32[0] = *v10;
      if (*(float *)v10 != 1.0)
      {
        v33 = v31.n128_f32[0] + -1.0;
        v31.n128_f32[0] = 1.0 - v31.n128_f32[0];
        if (*(float *)v10 >= 1.0)
          v31.n128_f32[0] = v33;
        if (v31.n128_f32[0] > 0.000001)
        {
          v212 = &off_250ADB778;
          sub_2394247FC(p_shared_weak_owners, (uint64_t)&v213);
          sub_239713FB0(&v212, 0, __p, COERCE_UNSIGNED_INT64(*(float *)v10), COERCE_UNSIGNED_INT64(*(float *)v10));
          sub_239422CF0(p_shared_weak_owners, (uint64_t)__p);
          v34 = nullsub_4(v219);
          v35 = v218;
          if (v218)
          {
            v36 = (unint64_t *)&v218->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v34);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          j_nullsub_4_89(__p);
          v38 = nullsub_4(&v216);
          v39 = v214;
          if (v214)
          {
            v40 = (unint64_t *)&v214->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v39->__on_zero_shared)(v39, v38);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          j_nullsub_4_89(&v212);
        }
      }
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
      if (v42 && *(_BYTE *)(*(_QWORD *)(a1 + 72) + 20))
      {
        __p[0] = v5;
        (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, void **, __n128))(*(_QWORD *)v42 + 48))(&v212, v42, __p, v31);
        v43 = v212;
        if (v212)
        {
          sub_2398263BC(&v6[5].__shared_weak_owners_, (uint64_t)(v212 + 1));
          LOWORD(v6[8].__shared_weak_owners_) = *((_WORD *)v43 + 40);
          v44 = *(unsigned __int8 **)(a1 + 64);
          v45 = v44[8];
          if (v44[8])
            *(_BYTE *)(*(_QWORD *)v44 + 136) = 1;
          v47 = LODWORD(v6[8].__vftable);
          v46 = HIDWORD(v6[8].__vftable);
          if ((_DWORD)v46 && (_DWORD)v47)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            v51 = 0;
            v52 = v6[8].__shared_owners_;
            shared_weak_owners = v6[6].__shared_weak_owners_;
            v54 = (v47 - 1) >> 4;
            v55 = 16 * v52;
            v56 = 16 * HIDWORD(v6[8].__shared_owners_);
            v57 = v54 + 1;
            if ((v52 & 0x8000000) != 0)
              v58 = -16 * v52;
            else
              v58 = 16 * v52;
            v59 = v54 * (unint64_t)v58;
            if (v55)
              v60 = (v47 - 1) >> 36 != 0;
            else
              v60 = 0;
            while (1)
            {
              if (v47 < 0x11
                || (v59 > ((v56 * v49) ^ ~(v55 >> 31))
                  ? (v61 = 1)
                  : (v61 = (v59 & 0xFFFFFFFF00000000) != 0),
                    v61 || v60))
              {
                v62 = 0;
              }
              else
              {
                v64 = 0;
                v65 = v57 & 0x1FFFFFFFFFFFFFFELL;
                v66 = v48;
                do
                {
                  if (*(_BYTE *)(shared_weak_owners + v66))
                    ++v51;
                  if (*(_BYTE *)(shared_weak_owners + v55 + v66))
                    ++v64;
                  v66 += 32 * v52;
                  v65 -= 2;
                }
                while (v65);
                v51 += v64;
                v62 = 16 * (v57 & 0x1FFFFFFFFFFFFFFELL);
                if (v57 == (v57 & 0x1FFFFFFFFFFFFFFELL))
                  goto LABEL_61;
              }
              v63 = v48 + v52 * v62;
              do
              {
                if (*(_BYTE *)(shared_weak_owners + v63))
                  ++v51;
                v62 += 16;
                v63 += v55;
              }
              while (v62 < v47);
LABEL_61:
              v50 += 16;
              ++v49;
              v48 += v56;
              if (v50 >= v46)
                goto LABEL_85;
            }
          }
          v51 = 0;
LABEL_85:
          v6[9].__shared_owners_ = (unint64_t)(float)(*(float *)&v6[10].__vftable
                                                           * (float)(*(float *)&v6[10].__vftable
                                                                   * (float)(LODWORD(v6[4].__shared_owners_)
                                                                                         * HIDWORD(v6[4].__shared_owners_))));
          v67 = (float)v51 * 256.0 / (float)(v47 * v46);
          *(float *)&v6[9].__shared_weak_owners_ = v67;
          if (v45)
          {
LABEL_86:
            v68 = *(std::mutex **)(a1 + 48);
            std::mutex::lock(v68);
            v69 = *(_QWORD *)(a1 + 64);
            v70 = *(float *)(*(_QWORD *)v69 + 32)
                + (double)(HIDWORD(v8->__vftable[2].__on_zero_shared_weak)
                                       * LODWORD(v8->__vftable[2].__on_zero_shared_weak))
                * 0.000000001;
            *(float *)(*(_QWORD *)v69 + 32) = v70;
            std::mutex::unlock(v68);
          }
LABEL_87:
          kdebug_trace();
          if ((sub_2396FD7B0(*(_QWORD *)(a1 + 88)) & 1) != 0)
          {
            v71 = *(_QWORD *)(a1 + 80);
            HIBYTE(v218) = 0;
            LOBYTE(__p[0]) = 0;
            sub_2396FCC6C(v71, (uint64_t)__p);
            if (SHIBYTE(v218) < 0)
              operator delete(__p[0]);
            goto LABEL_195;
          }
          v72 = *(unsigned int **)(a1 + 56);
          v210 = (pthread_mutex_t *)(v72 + 44);
          sub_2397A1694((pthread_mutex_t *)(v72 + 44));
          v73 = *((_QWORD *)v72 + 6);
          if (v73 >= *v72)
          {
            while (!*((_BYTE *)v72 + 56))
            {
              ++*((_QWORD *)v72 + 8);
              pthread_cond_wait((pthread_cond_t *)(v72 + 20), v210);
              --*((_QWORD *)v72 + 8);
              v73 = *((_QWORD *)v72 + 6);
              if (v73 < *v72)
                goto LABEL_93;
            }
            goto LABEL_194;
          }
LABEL_93:
          if (*((_BYTE *)v72 + 56))
            goto LABEL_194;
          v74 = (char *)*((_QWORD *)v72 + 3);
          v75 = (char *)*((_QWORD *)v72 + 2);
          v76 = v74 - v75;
          if (v74 == v75)
            v77 = 0;
          else
            v77 = 32 * (v74 - v75) - 1;
          v78 = *((_QWORD *)v72 + 5);
          if (v77 != v78 + v73)
            goto LABEL_191;
          if (v78 >= 0x100)
          {
            *((_QWORD *)v72 + 5) = v78 - 256;
            v80 = v75 + 8;
            v79 = *(_QWORD *)v75;
            *((_QWORD *)v72 + 2) = v75 + 8;
            if (v74 != *((char **)v72 + 4))
              goto LABEL_189;
            v202 = v75;
            v81 = (char *)*((_QWORD *)v72 + 1);
            if (v80 > v81)
            {
              v82 = (v80 - v81) >> 3;
              if (v82 >= -1)
                v83 = v82 + 1;
              else
                v83 = v82 + 2;
              v84 = v83 >> 1;
              v85 = &v80[-8 * (v83 >> 1)];
              v86 = v74 - v80;
              if (v74 != v80)
              {
                v87 = &v80[-8 * (v83 >> 1)];
                v88 = v74 - v80;
                memmove(v87, v75 + 8, v86);
                v86 = v88;
                v74 = (char *)*((_QWORD *)v72 + 2);
              }
              v89 = &v85[v86];
              *((_QWORD *)v72 + 2) = &v74[-8 * v84];
              *((_QWORD *)v72 + 3) = v89;
              v74 = v89;
              goto LABEL_189;
            }
            v206 = v79;
            if (v74 == v81)
              v103 = 1;
            else
              v103 = (v74 - v81) >> 2;
            if (v103 >> 61)
              goto LABEL_226;
            v104 = v74;
            v105 = operator new(8 * v103);
            v106 = v103 >> 2;
            v107 = &v105[8 * (v103 >> 2)];
            v108 = v104 - v80;
            v74 = v107;
            if (v104 != v80)
            {
              v74 = &v107[v108 & 0xFFFFFFFFFFFFFFF8];
              v109 = v108 - 8;
              if (v109 < 0x38)
              {
                v110 = &v105[8 * (v103 >> 2)];
                goto LABEL_186;
              }
              v163 = 8 * v106;
              v164 = &v105[8 * v106] - v80;
              v110 = &v105[8 * (v103 >> 2)];
              if (v164 < 0x20)
                goto LABEL_230;
              v165 = (v109 >> 3) + 1;
              v166 = 8 * (v165 & 0x3FFFFFFFFFFFFFFCLL);
              v110 = &v107[v166];
              v80 += v166;
              v167 = (__int128 *)(v202 + 24);
              v168 = &v105[v163 + 16];
              v169 = v165 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v170 = *v167;
                *(v168 - 1) = *(v167 - 1);
                *v168 = v170;
                v167 += 2;
                v168 += 2;
                v169 -= 4;
              }
              while (v169);
              if (v165 != (v165 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_230:
                do
                {
LABEL_186:
                  v171 = *(_QWORD *)v80;
                  v80 += 8;
                  *(_QWORD *)v110 = v171;
                  v110 += 8;
                }
                while (v110 != v74);
              }
            }
            *((_QWORD *)v72 + 1) = v105;
            *((_QWORD *)v72 + 2) = v107;
            *((_QWORD *)v72 + 3) = v74;
            *((_QWORD *)v72 + 4) = &v105[8 * v103];
            v79 = v206;
            if (v81)
            {
              operator delete(v81);
              v74 = (char *)*((_QWORD *)v72 + 3);
            }
LABEL_189:
            *(_QWORD *)v74 = v79;
LABEL_190:
            *((_QWORD *)v72 + 3) += 8;
LABEL_191:
            v172 = *((_QWORD *)v72 + 6) + *((_QWORD *)v72 + 5);
            v173 = (std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)v72 + 2) + ((v172 >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * v172);
            *v173 = v8;
            v173[1] = v6;
            do
              v174 = __ldxr(p_shared_owners);
            while (__stxr(v174 + 1, p_shared_owners));
            ++*((_QWORD *)v72 + 6);
            pthread_cond_signal((pthread_cond_t *)(v72 + 32));
LABEL_194:
            sub_2397A16B4(v210);
LABEL_195:
            v175 = v213;
            if (v213)
            {
              v176 = (unint64_t *)&v213->__shared_owners_;
              do
                v177 = __ldaxr(v176);
              while (__stlxr(v177 - 1, v176));
              if (!v177)
              {
                ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                std::__shared_weak_count::__release_weak(v175);
              }
            }
            goto LABEL_200;
          }
          v203 = (char *)*((_QWORD *)v72 + 2);
          v204 = (char *)*((_QWORD *)v72 + 3);
          v90 = v76 >> 3;
          v91 = (char *)*((_QWORD *)v72 + 1);
          v92 = (char *)*((_QWORD *)v72 + 4);
          if (v76 >> 3 < (unint64_t)((v92 - v91) >> 3))
          {
            v93 = operator new(0x1000uLL);
            v94 = v93;
            if (v92 != v204)
            {
              *(_QWORD *)v204 = v93;
              goto LABEL_190;
            }
            if (v203 == v91)
            {
              if (v204 == v203)
                v137 = 1;
              else
                v137 = (v92 - v203) >> 2;
              if (v137 >> 61)
                goto LABEL_226;
              v138 = v93;
              v139 = (char *)operator new(8 * v137);
              v94 = v138;
              v140 = (v137 + 3) >> 2;
              v111 = &v139[8 * v140];
              v141 = v111;
              v142 = v203;
              if (v204 != v203)
              {
                v141 = &v111[8 * v90];
                v143 = &v139[8 * v140];
                v144 = v203;
                if ((unint64_t)(v76 - 8) < 0x38)
                  goto LABEL_231;
                v145 = 8 * v140;
                v143 = &v139[8 * v140];
                v144 = v203;
                if ((unint64_t)(v143 - v203) < 0x20)
                  goto LABEL_231;
                v146 = ((unint64_t)(v76 - 8) >> 3) + 1;
                v147 = 8 * (v146 & 0x3FFFFFFFFFFFFFFCLL);
                v143 = &v111[v147];
                v144 = &v203[v147];
                v148 = (__int128 *)(v203 + 16);
                v149 = &v139[v145 + 16];
                v150 = v146 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v151 = *v148;
                  *((_OWORD *)v149 - 1) = *(v148 - 1);
                  *(_OWORD *)v149 = v151;
                  v148 += 2;
                  v149 += 32;
                  v150 -= 4;
                }
                while (v150);
                if (v146 != (v146 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_231:
                  do
                  {
                    v152 = *(_QWORD *)v144;
                    v144 += 8;
                    *(_QWORD *)v143 = v152;
                    v143 += 8;
                  }
                  while (v143 != v141);
                  v142 = v203;
                }
              }
              *((_QWORD *)v72 + 1) = v139;
              *((_QWORD *)v72 + 2) = v111;
              *((_QWORD *)v72 + 3) = v141;
              *((_QWORD *)v72 + 4) = &v139[8 * v137];
              if (v142)
              {
                operator delete(v142);
                v94 = v138;
                v111 = (char *)*((_QWORD *)v72 + 2);
              }
            }
            else
            {
              v111 = v203;
            }
            *((_QWORD *)v111 - 1) = v94;
            v154 = (char *)*((_QWORD *)v72 + 2);
            v153 = (char *)*((_QWORD *)v72 + 3);
            *((_QWORD *)v72 + 2) = v154 - 8;
            v155 = *((_QWORD *)v154 - 1);
            *((_QWORD *)v72 + 2) = v154;
            if (v153 != *((char **)v72 + 4))
              goto LABEL_174;
            v208 = v155;
            v156 = (char *)*((_QWORD *)v72 + 1);
            if (v154 > v156)
            {
              v157 = (v154 - v156) >> 3;
              if (v157 >= -1)
                v158 = v157 + 1;
              else
                v158 = v157 + 2;
              v159 = v158 >> 1;
              v160 = &v154[-8 * (v158 >> 1)];
              v161 = v153 - v154;
              if (v161)
              {
                memmove(&v154[-8 * (v158 >> 1)], v154, v161);
                v154 = (char *)*((_QWORD *)v72 + 2);
              }
              v162 = &v160[v161];
              *((_QWORD *)v72 + 2) = &v154[-8 * v159];
              *((_QWORD *)v72 + 3) = v162;
              *(_QWORD *)v162 = v208;
              goto LABEL_190;
            }
            if (v153 == v156)
              v179 = 1;
            else
              v179 = (v153 - v156) >> 2;
            if (v179 >> 61)
              goto LABEL_226;
            v180 = operator new(8 * v179);
            v181 = v179 >> 2;
            v182 = &v180[8 * (v179 >> 2)];
            v184 = v153 - v154;
            v183 = v153 == v154;
            v153 = v182;
            if (!v183)
            {
              v153 = &v182[v184 & 0xFFFFFFFFFFFFFFF8];
              v185 = v184 - 8;
              if (v185 < 0x38)
              {
                v186 = &v180[8 * (v179 >> 2)];
                goto LABEL_214;
              }
              v187 = 8 * v181;
              v188 = &v180[8 * v181] - v154;
              v186 = &v180[8 * (v179 >> 2)];
              if (v188 < 0x20)
                goto LABEL_232;
              v189 = (v185 >> 3) + 1;
              v190 = 8 * (v189 & 0x3FFFFFFFFFFFFFFCLL);
              v186 = &v182[v190];
              v191 = &v154[v190];
              v192 = (__int128 *)(v154 + 16);
              v193 = &v180[v187 + 16];
              v194 = v189 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v195 = *v192;
                *(v193 - 1) = *(v192 - 1);
                *v193 = v195;
                v192 += 2;
                v193 += 2;
                v194 -= 4;
              }
              while (v194);
              v154 = v191;
              if (v189 != (v189 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_232:
                do
                {
LABEL_214:
                  v196 = *(_QWORD *)v154;
                  v154 += 8;
                  *(_QWORD *)v186 = v196;
                  v186 += 8;
                }
                while (v186 != v153);
              }
            }
            *((_QWORD *)v72 + 1) = v180;
            *((_QWORD *)v72 + 2) = v182;
            *((_QWORD *)v72 + 3) = v153;
            *((_QWORD *)v72 + 4) = &v180[8 * v179];
            v155 = v208;
            if (v156)
            {
              operator delete(v156);
              v153 = (char *)*((_QWORD *)v72 + 3);
            }
LABEL_174:
            *(_QWORD *)v153 = v155;
            goto LABEL_190;
          }
          if (v92 == v91)
            v95 = 1;
          else
            v95 = (v92 - v91) >> 2;
          if (v95 >> 61)
LABEL_226:
            sub_239418A80();
          v205 = (char *)operator new(8 * v95);
          v96 = operator new(0x1000uLL);
          v97 = &v205[8 * v90];
          v98 = &v205[8 * v95];
          if (v90 == v95)
          {
            if (v76 >= 1)
            {
              v99 = v90 + 2;
              if (v90 >= -1)
                v99 = v90 + 1;
              v97 -= 8 * (v99 >> 1);
              goto LABEL_119;
            }
            v201 = v96;
            if (v204 == v203)
              v112 = 1;
            else
              v112 = v76 >> 2;
            if (v112 >> 61)
              sub_239418A80();
            v100 = (char *)operator new(8 * v112);
            v97 = &v100[8 * (v112 >> 2)];
            operator delete(v205);
            v98 = &v100[8 * v112];
            v204 = (char *)*((_QWORD *)v72 + 3);
            v113 = (char *)*((_QWORD *)v72 + 2);
            *(_QWORD *)v97 = v201;
            v101 = v97 + 8;
            if (v204 == v113)
            {
LABEL_120:
              v102 = (void *)*((_QWORD *)v72 + 1);
              *((_QWORD *)v72 + 1) = v100;
              *((_QWORD *)v72 + 2) = v97;
              *((_QWORD *)v72 + 3) = v101;
              *((_QWORD *)v72 + 4) = v98;
              if (v102)
                operator delete(v102);
              goto LABEL_191;
            }
          }
          else
          {
LABEL_119:
            v100 = v205;
            *(_QWORD *)v97 = v96;
            v101 = v97 + 8;
            if (v204 == v203)
              goto LABEL_120;
          }
          do
          {
            if (v97 == v100)
            {
              if (v101 >= v98)
              {
                if (v98 == v97)
                  v120 = 1;
                else
                  v120 = (v98 - v97) >> 2;
                if (v120 >> 61)
                  sub_239418A80();
                v121 = (char *)operator new(8 * v120);
                v122 = v120;
                v123 = (v120 + 3) >> 2;
                v207 = v121;
                v114 = &v121[8 * v123];
                v115 = v114;
                v124 = v101 - v97;
                if (v101 != v97)
                {
                  v115 = &v114[v124 & 0xFFFFFFFFFFFFFFF8];
                  v125 = v124 - 8;
                  v126 = &v121[8 * v123];
                  v127 = v97;
                  if (v125 < 0x38)
                    goto LABEL_233;
                  v128 = 8 * v123;
                  v126 = &v121[8 * v123];
                  v127 = v97;
                  if ((unint64_t)(v126 - v97) < 0x20)
                    goto LABEL_233;
                  v129 = (v125 >> 3) + 1;
                  v130 = 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
                  v126 = &v114[v130];
                  v127 = &v97[v130];
                  v131 = (__int128 *)(v97 + 16);
                  v132 = &v121[v128 + 16];
                  v133 = v129 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v134 = *v131;
                    *((_OWORD *)v132 - 1) = *(v131 - 1);
                    *(_OWORD *)v132 = v134;
                    v131 += 2;
                    v132 += 32;
                    v133 -= 4;
                  }
                  while (v133);
                  if (v129 != (v129 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_233:
                    do
                    {
                      v135 = *(_QWORD *)v127;
                      v127 += 8;
                      *(_QWORD *)v126 = v135;
                      v126 += 8;
                    }
                    while (v126 != v115);
                  }
                }
                v136 = &v121[8 * v122];
                operator delete(v97);
                v98 = v136;
              }
              else
              {
                v116 = (v98 - v101) >> 3;
                if (v116 >= -1)
                  v117 = v116 + 1;
                else
                  v117 = v116 + 2;
                v115 = &v101[8 * (v117 >> 1)];
                v114 = &v97[8 * (v117 >> 1)];
                v118 = v101 - v97;
                if (v101 == v97)
                {
                  v207 = v101;
                }
                else
                {
                  v119 = v98;
                  memmove(&v97[8 * (v117 >> 1)], v97, v118);
                  v98 = v119;
                  v207 = v97;
                }
              }
            }
            else
            {
              v207 = v100;
              v114 = v97;
              v115 = v101;
            }
            *((_QWORD *)v114 - 1) = *((_QWORD *)v204 - 1);
            v97 = v114 - 8;
            v101 = v115;
            v204 -= 8;
            v100 = v207;
          }
          while (v204 != *((char **)v72 + 2));
          goto LABEL_120;
        }
      }
      else
      {
        v212 = 0;
        v213 = 0;
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 8))
        goto LABEL_86;
      goto LABEL_87;
    }
    v32 = *(_BYTE **)(a1 + 64);
    if (v32[8])
      sub_2394202DC((_QWORD *)(*(_QWORD *)v32 + 64), v30);
    do
LABEL_200:
      v178 = __ldaxr(p_shared_owners);
    while (__stlxr(v178 - 1, p_shared_owners));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    if (++v4 == v209)
      goto LABEL_219;
  }
  v197 = *(_QWORD *)(a1 + 80);
  HIBYTE(v218) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FCC6C(v197, (uint64_t)__p);
  if (SHIBYTE(v218) < 0)
    operator delete(__p[0]);
LABEL_219:
  if (a1)
  {
    v198 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v198)
    {
      v199 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v199, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0x1060C40B8580A62);
  }
  return 0;
}

void sub_2394229C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, pthread_mutex_t *a19, uint64_t *a20,__int16 a21,char a22,char a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  unint64_t *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;

  operator delete(__p);
  operator delete(a14);
  sub_2397A16B4(a19);
  v39 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  do
    v42 = __ldaxr(v36);
  while (__stlxr(v42 - 1, v36));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    sub_239422C88(&a20);
    _Unwind_Resume(a1);
  }
  sub_239422C88(&a20);
  _Unwind_Resume(a1);
}

uint64_t **sub_239422C88(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1060C40B8580A62);
  }
  return a1;
}

uint64_t sub_239422CF0(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t (**v8)();
  _OWORD v9[4];
  uint64_t v10;
  __int16 v11;

  v8 = &off_250ADB628;
  sub_239423E50(a2, (uint64_t)v9);
  v3 = v9[0];
  v9[0] = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_OWORD *)(a1 + 24) = v9[1];
  *(_OWORD *)(a1 + 40) = v9[2];
  *(_OWORD *)(a1 + 56) = v9[3];
  *(_QWORD *)(a1 + 72) = v10;
  *(_WORD *)(a1 + 80) = v11;
  sub_239416DA0((uint64_t)v9);
  nullsub_4(&v8);
  return a1;
}

void sub_239422DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_239422DD0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 32);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return j_nullsub_4_89(a1);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return j_nullsub_4_89(a1);
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return j_nullsub_4_89(a1);
}

void sub_239422E40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB5F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239422E50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB5F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239422E80(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = a1 + 128;
  sub_239416DA0(a1 + 136);
  nullsub_4(v2);
  sub_239416DA0(a1 + 48);
  nullsub_4(a1 + 40);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

double sub_239422F08(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

uint64_t sub_239422F30@<X0>(_WORD *a1@<X8>)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  sub_23942317C(&v12);
  v13 = v12;
  if (v12)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v3 = v12;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB708;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  }
  else
  {
    v2 = 0;
  }
  v14 = v2;
  v12 = 0;
  sub_2398263E0((uint64_t)a1, &v13, 0);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 104))(*(_QWORD *)a1);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  a1[36] = v6 & 0xFF00 | v5;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    v11 = sub_23980F8F0(result);
    return MEMORY[0x23B83E31C](v11, 0x1091C406A8758A4);
  }
  return result;
}

void sub_239423044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239423058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  sub_239416DA0(v2);
  sub_239416DA0((uint64_t)va1);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_23942307C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va1);
  sub_239423260((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239423098(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394230D4()
{
  return 1;
}

uint64_t sub_2394230DC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_2394230E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 64, 2, a1 + 72, 1);
}

uint64_t sub_239423100(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_23942317C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  _BYTE v4[8];
  _OWORD v5[2];
  _QWORD v6[6];

  v6[5] = &off_250ADB668;
  sub_23981E3D4((uint64_t)v4);
  v2 = operator new();
  *(_QWORD *)v2 = &off_250ADB688;
  *(_OWORD *)(v2 + 8) = v5[0];
  *(_OWORD *)(v2 + 20) = *(_OWORD *)((char *)v5 + 12);
  sub_239916924((__n128 *)(v2 + 40), (__n128 *)v6);
  *(_OWORD *)(v2 + 64) = *(_OWORD *)&v6[3];
  *a1 = v2;
  return sub_23980F8F0((uint64_t)v4);
}

void sub_23942321C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  v4 = nullsub_4(v2);
  MEMORY[0x23B83E31C](v4, 0x1091C406A8758A4);
  sub_23980F8F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23942324C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23980F8F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239423260(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_23980F8F0(v2);
    MEMORY[0x23B83E31C](v3, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_2394232A8()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394232BC()
{
  return 1;
}

void sub_2394232CC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_2394232D4()
{
  return 0;
}

__int128 *sub_2394232DC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930678);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930678))
  {
    v2 = sub_2394233B4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_23941A7F8(&xmmword_256930660, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_256930670 = *((_QWORD *)v2 + 2);
      xmmword_256930660 = v3;
    }
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930660, &dword_23940C000);
    __cxa_guard_release(&qword_256930678);
  }
  if (byte_256930677 >= 0)
    return &xmmword_256930660;
  else
    return (__int128 *)xmmword_256930660;
}

void sub_23942339C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930678);
  _Unwind_Resume(a1);
}

__int128 *sub_2394233B4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_256930698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930698))
    return &xmmword_256930680;
  v2 = sub_239423490();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_23941A7F8(&xmmword_256930680, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_256930690 = v2->__r_.__value_.__r.__words[2];
    xmmword_256930680 = v3;
  }
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930680, &dword_23940C000);
  __cxa_guard_release(&qword_256930698);
  return &xmmword_256930680;
}

void sub_239423478(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930698);
  _Unwind_Resume(a1);
}

std::string *sub_239423490()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2569306B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2569306B8))
    return &stru_2569306A0;
  sub_239423730((uint64_t)__p);
  sub_239423580((uint64_t)__p, &stru_2569306A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit(MEMORY[0x24BEDACF0], &stru_2569306A0, &dword_23940C000);
  __cxa_guard_release(&qword_2569306B8);
  return &stru_2569306A0;
}

void sub_239423540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2569306B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2569306B8);
  _Unwind_Resume(a1);
}

void sub_239423580(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  int64x2_t v5;
  int8x16_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *__p;
  void **v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unsigned __int8 *)&qword_256930578);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930578))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Gray8u]", &xmmword_256930560);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930560, &dword_23940C000);
    __cxa_guard_release(&qword_256930578);
  }
  if (byte_256930577 < 0)
  {
    sub_23941A7F8(__dst, (void *)xmmword_256930560, *((unint64_t *)&xmmword_256930560 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_256930560;
    v13 = unk_256930570;
  }
  sub_23941B674(&__p, (uint64_t)__dst, 1uLL);
  sub_239A44200(a1, (uint64_t *)&__p, a2, v5, v6);
  v7 = (void **)__p;
  if (__p)
  {
    v8 = v11;
    v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = __p;
    }
    v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
}

void sub_2394236E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930578);
  _Unwind_Resume(a1);
}

void sub_239423704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_23941B08C(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_239423730(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2569306D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2569306D8))
  {
    sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray8u>]", qword_2569306C0);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_2569306C0, &dword_23940C000);
    __cxa_guard_release(&qword_2569306D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2569306F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2569306F8))
  {
    v5 = sub_239423A18(qword_2569306C0, "<", 0);
    sub_239423914(qword_2569306C0, 0, v5, qword_2569306E0);
    __cxa_atexit(MEMORY[0x24BEDACF0], qword_2569306E0, &dword_23940C000);
    __cxa_guard_release(&qword_2569306F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_256930718);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_256930718))
  {
    sub_239A44118((std::string::size_type)qword_2569306E0, (std::string *)&xmmword_256930700);
    __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930700, &dword_23940C000);
    __cxa_guard_release(&qword_256930718);
  }
  if (byte_256930717 < 0)
  {
    sub_23941A7F8((_BYTE *)a1, (void *)xmmword_256930700, *((unint64_t *)&xmmword_256930700 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_256930700;
    *(_QWORD *)(a1 + 16) = unk_256930710;
  }
}

void sub_2394238CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930718);
  _Unwind_Resume(a1);
}

void sub_2394238E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569306F8);
  _Unwind_Resume(a1);
}

void sub_2394238FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2569306D8);
  _Unwind_Resume(a1);
}

_QWORD *sub_239423914@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  size_t v14;

  v5 = result;
  if ((*((char *)result + 23) & 0x80000000) == 0)
  {
    v7 = *((unsigned __int8 *)result + 23);
    if (v7 >= a2)
    {
      v8 = v7 - a2;
      if (v8 >= a3)
        v9 = a3;
      else
        v9 = v8;
      if (v9 < 0x7FFFFFFFFFFFFFF8)
        goto LABEL_7;
LABEL_19:
      sub_23941A5AC();
    }
LABEL_20:
    sub_239423B0C();
  }
  v13 = result[1];
  if (v13 < a2)
    goto LABEL_20;
  v5 = (_QWORD *)*result;
  v14 = v13 - a2;
  if (v14 >= a3)
    v9 = a3;
  else
    v9 = v14;
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
LABEL_7:
  if (v9 >= 0x17)
  {
    v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v10 = v9 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a4[1] = v9;
    a4[2] = v11 | 0x8000000000000000;
    *a4 = v12;
    a4 = v12;
  }
  else
  {
    *((_BYTE *)a4 + 23) = v9;
    if (!v9)
    {
      *(_BYTE *)a4 = 0;
      return result;
    }
  }
  result = memmove(a4, (char *)v5 + a2, v9);
  *((_BYTE *)a4 + v9) = 0;
  return result;
}

unint64_t sub_239423A18(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v9;
  void *v10;
  char *v11;
  int64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
    v7 = strlen(__s);
    if (v6 < a3)
      return -1;
  }
  v9 = v7;
  if (v7)
  {
    v10 = (void *)(v5 + a3);
    v11 = (char *)(v5 + v6);
    v12 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v9)
    {
      v14 = *__s;
      do
      {
        v15 = v12 - v9;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v10, v14, v15 + 1);
        if (!v16)
          break;
        v13 = v16;
        if (!memcmp(v16, __s, v9))
          goto LABEL_9;
        v10 = v13 + 1;
        v12 = v11 - (v13 + 1);
      }
      while (v12 >= v9);
    }
    v13 = v11;
LABEL_9:
    if (v13 == v11)
      return -1;
    else
      return (unint64_t)&v13[-v5];
  }
  return a3;
}

void sub_239423B0C()
{
  sub_23941D898("basic_string");
}

void sub_239423B24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239423B48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_23980F8F0(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_239423B80(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v19[12];
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = a1[1];
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v22 = v4;
    v23 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v22 = a1[1];
    v23 = 0;
  }
  v20 = v22;
  v21 = v23;
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a1[10];
  sub_2398EB464((uint64_t)v19, 3, (uint64_t)(a1 + 11), 3, (uint64_t)a1 + 100, 1);
  sub_239423D38(a2, &v20, (uint64_t)v19, v12, 21);
  nullsub_4(v19);
  v13 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_239423CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  nullsub_4(&a10);
  sub_239416DA0((uint64_t)&a12);
  sub_239416DA0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_239423D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_239423D38(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;

  v5 = result;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v7;
  v10 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)a3;
  *(_DWORD *)(result + 24) = v10;
  *(_QWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 40) = a5;
  if (v6)
  {
    if (v7)
    {
      v11 = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
    v15 = v14;
    if ((v14 & 0xFFFFFF) <= 0x10000)
      v15 = 0;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    *(_WORD *)(v5 + 44) = v16 & 0xFF00 | v15;
    return v5;
  }
  else
  {
    *(_WORD *)(result + 44) = 0;
  }
  return result;
}

void sub_239423E30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  nullsub_4(v2);
  if (*(_QWORD *)(v1 + 8))
    sub_239EBEC08();
  _Unwind_Resume(a1);
}

void sub_239423E50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  sub_239423F50(a1, &v13);
  v12 = v13;
  v13 = 0uLL;
  if ((*(_QWORD *)(a1 + 24) & 0xFF00000000) != 0)
    v4 = *(_QWORD *)(a1 + 24) | 0x100000000;
  else
    v4 = 0;
  v5 = *(_WORD *)(a1 + 60);
  sub_2398263E0(a2, &v12, v4);
  *(_WORD *)(a2 + 72) = v5;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_239423F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_239423F50(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239424190(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_239424130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239424190(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239424210();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

uint64_t sub_239424208(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

std::string *sub_239424210()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930738);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930738))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_23941B3D0();
    sub_239424414((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239424414((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930720, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930720, &dword_23940C000);
          __cxa_guard_release(&qword_256930738);
          return &stru_256930720;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930720;
}

void sub_239424360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930738);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930738);
  _Unwind_Resume(a1);
}

void sub_239424414(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_2394244A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

std::string *sub_2394244E4()
{
  unsigned __int8 v0;
  _QWORD *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930758);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930758))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_23941BB04();
    sub_2394246E8((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_2394246E8((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930740, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930740, &dword_23940C000);
          __cxa_guard_release(&qword_256930758);
          return &stru_256930740;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930740;
}

void sub_239424634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930758);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930758);
  _Unwind_Resume(a1);
}

void sub_2394246E8(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_23942477C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_2394247BC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394247E0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2394247FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v4 = a1 + 8;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 32))(&v22, v5);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
  v11 = v22;
  v20 = v22;
  if (v22)
  {
    v12 = (_QWORD *)operator new();
    v13 = v22;
    *v12 = &off_250ADB740;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v13;
  }
  else
  {
    v12 = 0;
  }
  v21 = v12;
  v22 = 0;
  v14 = sub_239826490(v4);
  sub_2398EB464((uint64_t)&v18, 2, a1 + 64, 2, a1 + 72, 1);
  v15 = *(_WORD *)(a1 + 80);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  v16 = v18;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v16;
  *(_DWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 48) = 1;
  *(_WORD *)(a2 + 52) = v15;
  nullsub_4(&v18);
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_239424968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_2394249A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  nullsub_4(a1 + 32);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  j_nullsub_4_89(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239424A14(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_239424A1C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t sub_239424A30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_239424A3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB7B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239424A4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB7B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239424A7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a1[12];
  if (v2)
  {
    v3 = a1[13];
    v4 = (void *)a1[12];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        v3 -= 24;
        free(v5);
      }
      while (v3 != v2);
      v4 = (void *)a1[12];
    }
    a1[13] = v2;
    operator delete(v4);
  }
  v6 = (void *)a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[6];
  if (v7)
    operator delete(v7);
}

uint64_t sub_239424B00(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t *p_shared_weak_owners;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  char *v47;
  size_t v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  unint64_t v54;
  char *v55;
  void *v56;
  char *v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  _BYTE *v65;
  unint64_t v66;
  char *v67;
  int64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  size_t v81;
  unint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  int64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  void *v101;
  char *v102;
  unint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  __int128 *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  char *v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  size_t v124;
  char *v125;
  char *v126;
  size_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 *v132;
  _OWORD *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  __int128 v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  _BYTE *v149;
  unint64_t v150;
  char *v151;
  int64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  __int128 *v160;
  _OWORD *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  int v165;
  __int128 v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  const void *v177;
  uint64_t v178;
  void *v180;
  uint64_t v181;
  void *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  char *v188;
  void *v189;
  char *__src;
  char *__srca;
  void *__srcb;
  pthread_mutex_t *v193;
  uint64_t (**v195)();
  _OWORD v196[4];
  __int16 v197;
  _BYTE __p[24];
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int16 v202;
  int v203;
  uint64_t (**v204)();
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t (**v207)();
  uint64_t v208;
  std::__shared_weak_count *v209;
  int v210;
  __int128 v211;
  unsigned __int8 v212;
  char v213[17];

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_239425C60((uint64_t)&v211, *(unsigned int **)(a1 + 8));
  v4 = v211;
  if (!(_QWORD)v211 || !v212)
    goto LABEL_192;
  while (!sub_2396FD7B0(*(_QWORD *)(a1 + 48)))
  {
    v6 = (std::__shared_weak_count *)operator new(0xA0uLL);
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB7F0;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB628;
    *(_OWORD *)&v6[1].__shared_owners_ = 0u;
    v6[2].std::__shared_count = 0u;
    *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v6[3].__shared_owners_ = 0u;
    v6[4].std::__shared_count = 0u;
    *(_OWORD *)&v6[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v6[5].__shared_owners_ = 0u;
    v6[6].std::__shared_count = 0u;
    sub_239422F30(&v6[1].__shared_owners_);
    v6[4].__shared_weak_owners_ = 0;
    v6[5].__vftable = 0;
    p_shared_weak_owners = &v6[4].__shared_weak_owners_;
    v6[5].__shared_weak_owners_ = 0;
    LODWORD(v6[6].__vftable) = -1082130432;
    LODWORD(v6[6].__shared_owners_) = 1065353216;
    sub_2398263BC(&v6[1].__shared_owners_, v4 + 24);
    LOWORD(v6[4].__shared_owners_) = *(_WORD *)(v4 + 96);
    LODWORD(v6[5].__shared_owners_) = *(_DWORD *)(v4 + 192);
    v6[5].__shared_weak_owners_ = *(_QWORD *)(v4 + 200);
    LODWORD(v6[6].__vftable) = *(_DWORD *)(v4 + 208);
    LODWORD(v6[6].__shared_owners_) = *(_DWORD *)(v4 + 216);
    kdebug_trace();
    v9 = (char *)operator new(0x78uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_250ADB7B8;
    *(_OWORD *)(v9 + 24) = xmmword_239EC65B0;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    v10 = (std::__shared_weak_count *)v6[5].__vftable;
    v6[4].__shared_weak_owners_ = (uint64_t)(v9 + 24);
    v6[5].__vftable = (std::__shared_weak_count_vtbl *)v9;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v210 = 0;
    v13 = *(_QWORD *)(a1 + 32);
    v207 = &off_250ADB350;
    sub_23941CBA8(v4 + 16, &v208);
    v14 = *p_shared_weak_owners;
    v204 = &off_250ADB350;
    sub_23941CBA8(v4 + 104, &v205);
    v15 = *(_QWORD *)v4;
    v195 = &off_250ADB468;
    sub_239425F30(v15, (uint64_t *)v196);
    *(_QWORD *)__p = &off_250ADB468;
    *(_OWORD *)&__p[8] = v196[0];
    v196[0] = 0uLL;
    v202 = v197;
    v200 = v196[2];
    v201 = v196[3];
    v199 = v196[1];
    v203 = 1;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t (***)(), uint64_t, uint64_t (***)(), uint64_t, _BYTE *))(*(_QWORD *)v13 + 16))(v13, &v207, v14, &v204, 1, __p);
    if (v203 != -1)
      ((void (*)(char *, _BYTE *))off_250ADB818[v203])(v213, __p);
    v203 = -1;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v196[0] + 1);
    if (!*((_QWORD *)&v196[0] + 1))
      goto LABEL_20;
    v18 = (unint64_t *)(*((_QWORD *)&v196[0] + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = nullsub_4(&v195);
      v21 = v206;
      if (!v206)
        goto LABEL_26;
    }
    else
    {
LABEL_20:
      v20 = nullsub_4(&v195);
      v21 = v206;
      if (!v206)
        goto LABEL_26;
    }
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
      std::__shared_weak_count::__release_weak(v21);
    }
LABEL_26:
    v24 = nullsub_4(&v204);
    v25 = v209;
    if (!v209)
      goto LABEL_30;
    v26 = (unint64_t *)&v209->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v24);
      std::__shared_weak_count::__release_weak(v25);
      nullsub_4(&v207);
      v210 = v16;
      v28 = *(unsigned __int8 **)(a1 + 24);
      v29 = v28[8];
      if (v16)
      {
LABEL_31:
        if (v29)
        {
          v30 = *(_QWORD *)v28;
          v31 = sub_2394187D4(&v210);
          sub_2394202DC((_QWORD *)(v30 + 64), v31);
        }
        goto LABEL_150;
      }
    }
    else
    {
LABEL_30:
      nullsub_4(&v207);
      v210 = v16;
      v28 = *(unsigned __int8 **)(a1 + 24);
      v29 = v28[8];
      if (v16)
        goto LABEL_31;
    }
    if (v29 && !*(_DWORD *)(*p_shared_weak_owners + 8))
      sub_2394202DC((_QWORD *)(*(_QWORD *)v28 + 64), 2504);
    if ((sub_2396FD7B0(*(_QWORD *)(a1 + 48)) & 1) == 0)
    {
      v33 = *(unsigned int **)(a1 + 16);
      v193 = (pthread_mutex_t *)(v33 + 44);
      sub_2397A1694((pthread_mutex_t *)(v33 + 44));
      v34 = *((_QWORD *)v33 + 6);
      if (v34 >= *v33)
      {
        while (!*((_BYTE *)v33 + 56))
        {
          ++*((_QWORD *)v33 + 8);
          pthread_cond_wait((pthread_cond_t *)(v33 + 20), v193);
          --*((_QWORD *)v33 + 8);
          v34 = *((_QWORD *)v33 + 6);
          if (v34 < *v33)
            goto LABEL_43;
        }
        goto LABEL_149;
      }
LABEL_43:
      if (*((_BYTE *)v33 + 56))
      {
LABEL_149:
        sub_2397A16B4(v193);
        goto LABEL_150;
      }
      v35 = (char *)*((_QWORD *)v33 + 3);
      __src = (char *)*((_QWORD *)v33 + 2);
      v36 = v35 - __src;
      if (v35 == __src)
        v37 = 0;
      else
        v37 = 32 * (v35 - __src) - 1;
      v38 = *((_QWORD *)v33 + 5);
      if (v37 != v38 + v34)
      {
LABEL_146:
        v137 = *((_QWORD *)v33 + 6) + *((_QWORD *)v33 + 5);
        v138 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v33 + 2) + ((v137 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v137);
        *v138 = v6 + 1;
        v138[1] = v6;
        do
          v139 = __ldxr(p_shared_owners);
        while (__stxr(v139 + 1, p_shared_owners));
        ++*((_QWORD *)v33 + 6);
        pthread_cond_signal((pthread_cond_t *)(v33 + 32));
        goto LABEL_149;
      }
      if (v38 >= 0x100)
      {
        *((_QWORD *)v33 + 5) = v38 - 256;
        v40 = __src + 8;
        v39 = *(_QWORD *)__src;
        *((_QWORD *)v33 + 2) = __src + 8;
        if (v35 != *((char **)v33 + 4))
        {
LABEL_144:
          *(_QWORD *)v35 = v39;
          goto LABEL_145;
        }
        v185 = v39;
        v41 = (char *)*((_QWORD *)v33 + 1);
        if (v40 > v41)
        {
          v42 = (v40 - v41) >> 3;
          if (v42 >= -1)
            v43 = v42 + 1;
          else
            v43 = v42 + 2;
          v44 = v43 >> 1;
          v45 = &v40[-8 * (v43 >> 1)];
          v46 = v35 - v40;
          if (v35 != v40)
          {
            v47 = &v40[-8 * (v43 >> 1)];
            v48 = v35 - v40;
            memmove(v47, __src + 8, v46);
            v46 = v48;
            v35 = (char *)*((_QWORD *)v33 + 2);
          }
          v49 = &v45[v46];
          *((_QWORD *)v33 + 2) = &v35[-8 * v44];
          *((_QWORD *)v33 + 3) = v49;
          v35 = v49;
          v39 = v185;
          goto LABEL_144;
        }
        v182 = (void *)*((_QWORD *)v33 + 1);
        if (v35 == v41)
          v63 = 1;
        else
          v63 = (v35 - v41) >> 2;
        if (v63 >> 61)
          goto LABEL_203;
        v64 = v35;
        v65 = operator new(8 * v63);
        v66 = v63 >> 2;
        v67 = &v65[8 * (v63 >> 2)];
        v68 = v64 - v40;
        v35 = v67;
        if (v64 != v40)
        {
          v69 = &v67[v68 & 0xFFFFFFFFFFFFFFF8];
          v70 = v68 - 8;
          if (v70 >= 0x38)
          {
            v128 = 8 * v66;
            v129 = &v65[8 * v66] - v40;
            v71 = &v65[8 * (v63 >> 2)];
            if (v129 >= 0x20)
            {
              v130 = (v70 >> 3) + 1;
              v131 = 8 * (v130 & 0x3FFFFFFFFFFFFFFCLL);
              v71 = &v67[v131];
              v40 += v131;
              v132 = (__int128 *)(__src + 24);
              v133 = &v65[v128 + 16];
              v134 = v130 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v135 = *v132;
                *(v133 - 1) = *(v132 - 1);
                *v133 = v135;
                v132 += 2;
                v133 += 2;
                v134 -= 4;
              }
              while (v134);
              if (v130 == (v130 & 0x3FFFFFFFFFFFFFFCLL))
              {
                v35 = v69;
                goto LABEL_142;
              }
            }
          }
          else
          {
            v71 = &v65[8 * (v63 >> 2)];
          }
          v35 = v69;
          do
          {
            v136 = *(_QWORD *)v40;
            v40 += 8;
            *(_QWORD *)v71 = v136;
            v71 += 8;
          }
          while (v71 != v69);
        }
LABEL_142:
        *((_QWORD *)v33 + 1) = v65;
        *((_QWORD *)v33 + 2) = v67;
        *((_QWORD *)v33 + 3) = v35;
        *((_QWORD *)v33 + 4) = &v65[8 * v63];
        v39 = v185;
        if (v182)
        {
          operator delete(v182);
          v35 = (char *)*((_QWORD *)v33 + 3);
        }
        goto LABEL_144;
      }
      v50 = (char *)*((_QWORD *)v33 + 1);
      v51 = (char *)*((_QWORD *)v33 + 4);
      v181 = v36 >> 3;
      v186 = (char *)*((_QWORD *)v33 + 3);
      if (v36 >> 3 < (unint64_t)((v51 - v50) >> 3))
      {
        v52 = operator new(0x1000uLL);
        v53 = v52;
        if (v51 != v186)
        {
          *(_QWORD *)v186 = v52;
LABEL_145:
          *((_QWORD *)v33 + 3) += 8;
          goto LABEL_146;
        }
        if (__src == v50)
        {
          if (v186 == __src)
            v100 = 1;
          else
            v100 = (v51 - __src) >> 2;
          if (v100 >> 61)
            goto LABEL_203;
          v101 = v52;
          v102 = (char *)operator new(8 * v100);
          v53 = v101;
          v103 = (v100 + 3) >> 2;
          v72 = &v102[8 * v103];
          v104 = v72;
          v105 = __src;
          if (v186 != __src)
          {
            v104 = &v72[8 * v181];
            v106 = &v102[8 * v103];
            v107 = __src;
            if ((unint64_t)(v36 - 8) < 0x38)
              goto LABEL_207;
            v108 = 8 * v103;
            v106 = &v102[8 * v103];
            v107 = __src;
            if ((unint64_t)(v106 - __src) < 0x20)
              goto LABEL_207;
            v109 = ((unint64_t)(v36 - 8) >> 3) + 1;
            v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
            v106 = &v72[v110];
            v107 = &__src[v110];
            v111 = (__int128 *)(__src + 16);
            v112 = &v102[v108 + 16];
            v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v114 = *v111;
              *((_OWORD *)v112 - 1) = *(v111 - 1);
              *(_OWORD *)v112 = v114;
              v111 += 2;
              v112 += 32;
              v113 -= 4;
            }
            while (v113);
            if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_207:
              do
              {
                v115 = *(_QWORD *)v107;
                v107 += 8;
                *(_QWORD *)v106 = v115;
                v106 += 8;
              }
              while (v106 != v104);
              v105 = __src;
            }
          }
          *((_QWORD *)v33 + 1) = v102;
          *((_QWORD *)v33 + 2) = v72;
          *((_QWORD *)v33 + 3) = v104;
          *((_QWORD *)v33 + 4) = &v102[8 * v100];
          if (v105)
          {
            operator delete(v105);
            v53 = v101;
            v72 = (char *)*((_QWORD *)v33 + 2);
          }
        }
        else
        {
          v72 = __src;
        }
        *((_QWORD *)v72 - 1) = v53;
        v116 = (char *)*((_QWORD *)v33 + 2);
        v117 = (char *)*((_QWORD *)v33 + 3);
        *((_QWORD *)v33 + 2) = v116 - 8;
        v118 = (void *)*((_QWORD *)v116 - 1);
        *((_QWORD *)v33 + 2) = v116;
        if (v117 != *((char **)v33 + 4))
        {
LABEL_127:
          *(_QWORD *)v117 = v118;
          goto LABEL_145;
        }
        __srcb = v118;
        v119 = (char *)*((_QWORD *)v33 + 1);
        if (v116 > v119)
        {
          v120 = (v116 - v119) >> 3;
          if (v120 >= -1)
            v121 = v120 + 1;
          else
            v121 = v120 + 2;
          v122 = v121 >> 1;
          v123 = &v116[-8 * (v121 >> 1)];
          v124 = v117 - v116;
          if (v117 != v116)
          {
            v125 = &v116[-8 * (v121 >> 1)];
            v126 = v116;
            v127 = v124;
            memmove(v125, v126, v124);
            v124 = v127;
            v123 = v125;
            v116 = (char *)*((_QWORD *)v33 + 2);
          }
          *((_QWORD *)v33 + 2) = &v116[-8 * v122];
          *((_QWORD *)v33 + 3) = &v123[v124];
          *(_QWORD *)&v123[v124] = __srcb;
          goto LABEL_145;
        }
        v189 = (void *)*((_QWORD *)v33 + 1);
        if (v117 == v119)
          v148 = 1;
        else
          v148 = (v117 - v119) >> 2;
        if (v148 >> 61)
          goto LABEL_203;
        v149 = operator new(8 * v148);
        v150 = v148 >> 2;
        v151 = &v149[8 * (v148 >> 2)];
        v152 = v117 - v116;
        v5 = v117 == v116;
        v117 = v151;
        if (!v5)
        {
          v117 = &v151[v152 & 0xFFFFFFFFFFFFFFF8];
          v153 = v152 - 8;
          if (v153 < 0x38)
          {
            v154 = &v149[8 * (v148 >> 2)];
            do
            {
LABEL_174:
              v164 = *(_QWORD *)v116;
              v116 += 8;
              *(_QWORD *)v154 = v164;
              v154 += 8;
            }
            while (v154 != v117);
            goto LABEL_175;
          }
          v155 = 8 * v150;
          v156 = &v149[8 * v150] - v116;
          v154 = &v149[8 * (v148 >> 2)];
          if (v156 < 0x20)
            goto LABEL_174;
          v157 = (v153 >> 3) + 1;
          v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
          v154 = &v151[v158];
          v159 = &v116[v158];
          v160 = (__int128 *)(v116 + 16);
          v161 = &v149[v155 + 16];
          v162 = v157 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v163 = *v160;
            *(v161 - 1) = *(v160 - 1);
            *v161 = v163;
            v160 += 2;
            v161 += 2;
            v162 -= 4;
          }
          while (v162);
          v116 = v159;
          if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_174;
        }
LABEL_175:
        *((_QWORD *)v33 + 1) = v149;
        *((_QWORD *)v33 + 2) = v151;
        *((_QWORD *)v33 + 3) = v117;
        *((_QWORD *)v33 + 4) = &v149[8 * v148];
        v118 = __srcb;
        if (v189)
        {
          operator delete(v189);
          v117 = (char *)*((_QWORD *)v33 + 3);
        }
        goto LABEL_127;
      }
      if (v51 == v50)
        v54 = 1;
      else
        v54 = (v51 - v50) >> 2;
      if (v54 >> 61)
LABEL_203:
        sub_239418A80();
      v55 = (char *)operator new(8 * v54);
      v56 = operator new(0x1000uLL);
      v57 = &v55[8 * v181];
      v58 = &v55[8 * v54];
      if (v181 == v54)
      {
        v180 = v56;
        v59 = v186;
        if (v36 < 1)
        {
          if (v186 == __src)
            v73 = 1;
          else
            v73 = v36 >> 2;
          if (v73 >> 61)
            sub_239418A80();
          v74 = (char *)operator new(8 * v73);
          v75 = &v74[8 * v73];
          v61 = &v74[8 * (v73 >> 2)];
          v187 = v74;
          operator delete(v55);
          v58 = v75;
          v59 = (char *)*((_QWORD *)v33 + 3);
          __src = (char *)*((_QWORD *)v33 + 2);
          v55 = v187;
        }
        else
        {
          v60 = v181 + 2;
          if (v181 >= -1)
            v60 = v181 + 1;
          v61 = &v57[-8 * (v60 >> 1)];
        }
        *(_QWORD *)v61 = v180;
        v62 = v61 + 8;
        if (v59 == __src)
          goto LABEL_86;
      }
      else
      {
        v59 = v186;
        v61 = &v55[8 * v181];
        *(_QWORD *)v57 = v56;
        v62 = v57 + 8;
        if (v186 == __src)
        {
LABEL_86:
          v76 = (void *)*((_QWORD *)v33 + 1);
          *((_QWORD *)v33 + 1) = v55;
          *((_QWORD *)v33 + 2) = v61;
          *((_QWORD *)v33 + 3) = v62;
          *((_QWORD *)v33 + 4) = v58;
          if (v76)
            operator delete(v76);
          goto LABEL_146;
        }
      }
      do
      {
        v188 = v59;
        if (v61 == v55)
        {
          if (v62 >= v58)
          {
            if (v58 == v61)
              v82 = 1;
            else
              v82 = (v58 - v61) >> 2;
            v184 = v61;
            if (v82 >> 61)
              sub_239418A80();
            v83 = (char *)operator new(8 * v82);
            v84 = v82;
            v85 = (v82 + 3) >> 2;
            __srca = v83;
            v61 = &v83[8 * v85];
            v77 = v61;
            v86 = v184;
            v87 = v62 - v184;
            if (v62 != v184)
            {
              v77 = &v61[v87 & 0xFFFFFFFFFFFFFFF8];
              v88 = v87 - 8;
              v89 = v61;
              v90 = v184;
              if (v88 < 0x38)
                goto LABEL_208;
              v91 = 8 * v85;
              v90 = v184;
              v89 = v61;
              if ((unint64_t)(&__srca[8 * v85] - v184) < 0x20)
                goto LABEL_208;
              v92 = (v88 >> 3) + 1;
              v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
              v89 = &v61[v93];
              v90 = &v184[v93];
              v94 = (__int128 *)(v184 + 16);
              v95 = &__srca[v91 + 16];
              v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v97 = *v94;
                *((_OWORD *)v95 - 1) = *(v94 - 1);
                *(_OWORD *)v95 = v97;
                v94 += 2;
                v95 += 32;
                v96 -= 4;
              }
              while (v96);
              if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_208:
                do
                {
                  v98 = *(_QWORD *)v90;
                  v90 += 8;
                  *(_QWORD *)v89 = v98;
                  v89 += 8;
                }
                while (v89 != v77);
              }
              v86 = v184;
            }
            v99 = &__srca[8 * v84];
            operator delete(v86);
            v58 = v99;
          }
          else
          {
            v78 = (v58 - v62) >> 3;
            if (v78 >= -1)
              v79 = v78 + 1;
            else
              v79 = v78 + 2;
            v77 = &v62[8 * (v79 >> 1)];
            v80 = v61;
            v61 += 8 * (v79 >> 1);
            v81 = v62 - v80;
            if (v62 != v80)
            {
              v62 = v80;
              v183 = v58;
              memmove(v61, v80, v81);
              v58 = v183;
            }
            __srca = v62;
          }
        }
        else
        {
          __srca = v55;
          v77 = v62;
        }
        v59 = v188 - 8;
        *((_QWORD *)v61 - 1) = *((_QWORD *)v188 - 1);
        v61 -= 8;
        v62 = v77;
        v55 = __srca;
      }
      while (v188 - 8 != *((char **)v33 + 2));
      goto LABEL_86;
    }
    v32 = *(_QWORD *)(a1 + 40);
    __p[23] = 0;
    __p[0] = 0;
    sub_2396FCC6C(v32, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
LABEL_150:
    kdebug_trace();
    sub_239425C60((uint64_t)__p, *(unsigned int **)(a1 + 8));
    v140 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v141 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    v211 = v140;
    if (!v141)
      goto LABEL_154;
    v142 = (unint64_t *)&v141->__shared_owners_;
    do
      v143 = __ldaxr(v142);
    while (__stlxr(v143 - 1, v142));
    if (!v143)
    {
      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
      std::__shared_weak_count::__release_weak(v141);
      v212 = __p[16];
      v144 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
      {
LABEL_155:
        v145 = (unint64_t *)&v144->__shared_owners_;
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v146 - 1, v145));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
          std::__shared_weak_count::__release_weak(v144);
        }
        goto LABEL_160;
      }
    }
    else
    {
LABEL_154:
      v212 = __p[16];
      v144 = *(std::__shared_weak_count **)&__p[8];
      if (*(_QWORD *)&__p[8])
        goto LABEL_155;
    }
    do
LABEL_160:
      v147 = __ldaxr(p_shared_owners);
    while (__stlxr(v147 - 1, p_shared_owners));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    v4 = v211;
    if ((_QWORD)v211)
      v5 = v212 == 0;
    else
      v5 = 1;
    if (v5)
      goto LABEL_192;
  }
  do
  {
    sub_239425C60((uint64_t)__p, *(unsigned int **)(a1 + 8));
    v166 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v167 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
    v211 = v166;
    if (!v167)
      goto LABEL_183;
    v168 = (unint64_t *)&v167->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
      v165 = __p[16];
      v212 = __p[16];
      v170 = *(std::__shared_weak_count **)&__p[8];
      if (!*(_QWORD *)&__p[8])
        continue;
    }
    else
    {
LABEL_183:
      v165 = __p[16];
      v212 = __p[16];
      v170 = *(std::__shared_weak_count **)&__p[8];
      if (!*(_QWORD *)&__p[8])
        continue;
    }
    v171 = (unint64_t *)&v170->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
    v165 = v212;
  }
  while (v165);
  v173 = *(_QWORD *)(a1 + 40);
  __p[23] = 0;
  __p[0] = 0;
  sub_2396FCC6C(v173, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_192:
  v174 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v175 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  if (a1)
  {
    v177 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v177)
    {
      v178 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v178, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0x60C406C8FF815);
  }
  return 0;
}

void sub_239425994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,pthread_mutex_t *a21,uint64_t *a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48)
{
  unint64_t *v48;
  std::__shared_weak_count *v49;
  void *v50;
  uint64_t v51;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;

  operator delete(__p);
  operator delete(v50);
  sub_2397A16B4(a21);
  do
    v53 = __ldaxr(v48);
  while (__stlxr(v53 - 1, v48));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  v54 = *(std::__shared_weak_count **)(v51 - 120);
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(p_shared_owners);
    while (__stlxr(v56 - 1, p_shared_owners));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  sub_239425BF8(&a22);
  _Unwind_Resume(a1);
}

uint64_t **sub_239425BF8(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x60C406C8FF815);
  }
  return a1;
}

uint64_t sub_239425C60(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = (pthread_mutex_t *)(a2 + 44);
  sub_2397A1694((pthread_mutex_t *)(a2 + 44));
  if (*((_QWORD *)a2 + 6))
  {
LABEL_4:
    v5 = *((_QWORD *)a2 + 5);
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 2) + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8));
    v7 = (uint64_t *)(v6 + 16 * v5);
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    v22 = v9;
    v23 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a2 + 2)
                                                     + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * *((_QWORD *)a2 + 5)
                                         + 8);
      if (!v12)
        goto LABEL_13;
    }
    else
    {
      v12 = *(std::__shared_weak_count **)(v6 + 16 * *((_QWORD *)a2 + 5) + 8);
      if (!v12)
        goto LABEL_13;
    }
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = *((_QWORD *)a2 + 6) - 1;
      v21 = *((_QWORD *)a2 + 5) + 1;
      *((_QWORD *)a2 + 5) = v21;
      *((_QWORD *)a2 + 6) = v15;
      if (v21 < 0x200)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_13:
    v15 = *((_QWORD *)a2 + 6) - 1;
    v16 = *((_QWORD *)a2 + 5) + 1;
    *((_QWORD *)a2 + 5) = v16;
    *((_QWORD *)a2 + 6) = v15;
    if (v16 < 0x200)
    {
LABEL_15:
      if (v15 < *a2)
        pthread_cond_signal((pthread_cond_t *)(a2 + 20));
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v23;
      if (v23)
      {
        v17 = (unint64_t *)&v23->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        *(_BYTE *)(a1 + 16) = 1;
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 - 1, v17));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 1;
      }
      return sub_2397A16B4(v4);
    }
LABEL_14:
    operator delete(**((void ***)a2 + 2));
    *((_QWORD *)a2 + 2) += 8;
    v15 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 5) -= 256;
    goto LABEL_15;
  }
  while (!*((_BYTE *)a2 + 56))
  {
    ++*((_QWORD *)a2 + 9);
    pthread_cond_wait((pthread_cond_t *)(a2 + 32), v4);
    --*((_QWORD *)a2 + 9);
    if (*((_QWORD *)a2 + 6))
      goto LABEL_4;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return sub_2397A16B4(v4);
}

void sub_239425E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239416DA0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

void sub_239425E88(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239425E98(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239425EC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_239416DA0(a1 + 32);
  return nullsub_4(a1 + 24);
}

void sub_239425F30(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v19 = v3;
    v20 = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = 0;
  }
  v17 = v19;
  v18 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_239426080(a2, &v17);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_239426064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_239426080(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  _OWORD *v20;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *a1 = v3;
    a1[1] = (uint64_t)v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(&v20, v3, 21);
  v10 = v20[1];
  v9 = v20[2];
  *((_OWORD *)a1 + 1) = *v20;
  *((_OWORD *)a1 + 2) = v10;
  *((_OWORD *)a1 + 3) = v9;
  v20 = 0;
  MEMORY[0x23B83E31C]();
  v11 = *a1;
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a1 + 32) = v18 & 0xFF00 | v17;
  return a1;
}

void sub_2394261D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394261E4(const void **a1)
{
  const void **v1;
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  BOOL v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  float v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  float32x2_t *v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  _BYTE *v62;
  unint64_t v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  void *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  int64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  void *v99;
  char *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __int128 *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  _OWORD *v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  __int128 v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _BYTE *v144;
  unint64_t v145;
  char *v146;
  int64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  __int128 *v155;
  _OWORD *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  int v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  const void *v172;
  uint64_t v173;
  void *v175;
  char *v176;
  void *v177;
  uint64_t v178;
  void *v179;
  char *v180;
  const void **v181;
  _QWORD *v182;
  void *__p[2];
  std::__shared_weak_count *v185;
  int v186;
  __int128 v187;
  unsigned __int8 v188;

  v1 = a1;
  v2 = std::__thread_local_data();
  v3 = *v1;
  *v1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_2394270E0((uint64_t)&v187, (unsigned int *)v1[1]);
  v4 = v187;
  if (!(_QWORD)v187 || !v188)
    goto LABEL_192;
  v181 = v1;
  while (!sub_2396FD7B0((uint64_t)v1[7]))
  {
    v6 = (char *)operator new(0x40uLL);
    v7 = (std::__shared_weak_count *)v6;
    *((_QWORD *)v6 + 1) = 0;
    v8 = (unint64_t *)(v6 + 8);
    *((_QWORD *)v6 + 2) = 0;
    *(_OWORD *)(v6 + 24) = 0u;
    v182 = v6 + 24;
    *(_QWORD *)v6 = &off_250ADB840;
    *((_QWORD *)v6 + 7) = 0;
    *(_OWORD *)(v6 + 40) = 0u;
    *((_DWORD *)v6 + 14) = -1082130432;
    *((_DWORD *)v6 + 10) = *(_DWORD *)(v4 + 104);
    *((_QWORD *)v6 + 6) = *(_QWORD *)(v4 + 112);
    *((_DWORD *)v6 + 14) = *(_DWORD *)(v4 + 120);
    v9 = *(_QWORD *)(v4 + 88);
    v10 = *(_QWORD *)(v4 + 96);
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 4);
      *((_QWORD *)v6 + 3) = v9;
      *((_QWORD *)v6 + 4) = v10;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    else
    {
      *((_QWORD *)v6 + 3) = v9;
      *((_QWORD *)v6 + 4) = 0;
    }
    kdebug_trace();
    if (*((_DWORD *)v1[3] + 3) != 4)
    {
      v186 = 0;
      v16 = v1[5];
      __p[0] = &off_250ADB350;
      sub_23941CBA8(v4, (uint64_t *)&__p[1]);
      v17 = (*(uint64_t (**)(const void *, void **, _QWORD))(*(_QWORD *)v16 + 24))(v16, __p, *v182);
      v18 = v185;
      if (!v185)
        goto LABEL_23;
      v19 = (unint64_t *)&v185->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        nullsub_4(__p);
        v186 = v17;
        if (v17)
        {
LABEL_24:
          v21 = *(_QWORD *)v1[4];
          v22 = sub_2394187D4(&v186);
          sub_2394202DC((_QWORD *)(v21 + 64), v22);
          goto LABEL_42;
        }
      }
      else
      {
LABEL_23:
        nullsub_4(__p);
        v186 = v17;
        if (v17)
          goto LABEL_24;
      }
      v23 = 1.0 / *(float *)(v4 + 128);
      if (v23 != 1.0)
      {
        v24 = v23 + -1.0;
        if (v23 < 1.0)
          v24 = 1.0 - v23;
        if (v24 > 0.000001)
        {
          v25 = *v182;
          v26 = *(_QWORD *)(*v182 + 32);
          v27 = v26 & 0x3F;
          if (v26 > 0x3F || v27 != 0)
          {
            v29 = 0;
            v30 = 0;
            v31 = *(_QWORD **)(v25 + 24);
            v32 = &v31[v26 >> 6];
            do
            {
              if (((*v31 >> v30) & 1) != 0)
              {
                v33 = (float32x2_t *)(*(_QWORD *)(v25 + 48) + v29);
                *v33 = vmul_n_f32(*v33, v23);
                v33[1].f32[1] = (float)((float)(v23 + v23) * 0.5) * v33[1].f32[1];
              }
              v31 += v30 == 63;
              if (v30 == 63)
                v30 = 0;
              else
                ++v30;
              v29 += 24;
            }
            while (v30 != v27 || v31 != v32);
          }
        }
      }
    }
LABEL_42:
    if ((sub_2396FD7B0((uint64_t)v1[7]) & 1) == 0)
    {
      v35 = (unsigned int *)v1[2];
      sub_2397A1694((pthread_mutex_t *)(v35 + 44));
      v36 = *((_QWORD *)v35 + 6);
      if (v36 >= *v35)
      {
        while (!*((_BYTE *)v35 + 56))
        {
          ++*((_QWORD *)v35 + 8);
          pthread_cond_wait((pthread_cond_t *)(v35 + 20), (pthread_mutex_t *)(v35 + 44));
          --*((_QWORD *)v35 + 8);
          v36 = *((_QWORD *)v35 + 6);
          if (v36 < *v35)
            goto LABEL_48;
        }
        goto LABEL_149;
      }
LABEL_48:
      if (*((_BYTE *)v35 + 56))
      {
LABEL_149:
        sub_2397A16B4((pthread_mutex_t *)(v35 + 44));
        goto LABEL_150;
      }
      v37 = (char *)*((_QWORD *)v35 + 3);
      v38 = (char *)*((_QWORD *)v35 + 2);
      v39 = v37 - v38;
      if (v37 == v38)
        v40 = 0;
      else
        v40 = 32 * (v37 - v38) - 1;
      v41 = *((_QWORD *)v35 + 5);
      if (v40 != v41 + v36)
      {
LABEL_146:
        v132 = *((_QWORD *)v35 + 6) + *((_QWORD *)v35 + 5);
        v133 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v35 + 2) + ((v132 >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * v132);
        *v133 = v182;
        v133[1] = v7;
        do
          v134 = __ldxr(v8);
        while (__stxr(v134 + 1, v8));
        ++*((_QWORD *)v35 + 6);
        pthread_cond_signal((pthread_cond_t *)(v35 + 32));
        goto LABEL_149;
      }
      if (v41 >= 0x100)
      {
        *((_QWORD *)v35 + 5) = v41 - 256;
        v43 = v38 + 8;
        v42 = *(void **)v38;
        *((_QWORD *)v35 + 2) = v38 + 8;
        if (v37 != *((char **)v35 + 4))
        {
LABEL_144:
          *(_QWORD *)v37 = v42;
          goto LABEL_145;
        }
        v44 = (char *)*((_QWORD *)v35 + 1);
        if (v43 > v44)
        {
          v177 = v42;
          v45 = (v43 - v44) >> 3;
          if (v45 >= -1)
            v46 = v45 + 1;
          else
            v46 = v45 + 2;
          v47 = v46 >> 1;
          v48 = &v43[-8 * (v46 >> 1)];
          v49 = v37 - v43;
          if (v37 != v43)
          {
            memmove(&v43[-8 * (v46 >> 1)], v43, v37 - v43);
            v37 = (char *)*((_QWORD *)v35 + 2);
          }
          v50 = &v37[-8 * v47];
          v37 = &v48[v49];
          *((_QWORD *)v35 + 2) = v50;
          *((_QWORD *)v35 + 3) = &v48[v49];
          v42 = v177;
          goto LABEL_144;
        }
        v179 = (void *)*((_QWORD *)v35 + 1);
        if (v37 == v44)
          v61 = 1;
        else
          v61 = (v37 - v44) >> 2;
        if (v61 >> 61)
          goto LABEL_203;
        v62 = operator new(8 * v61);
        v63 = v61 >> 2;
        v64 = &v62[8 * (v61 >> 2)];
        v65 = v37 - v43;
        v5 = v37 == v43;
        v37 = v64;
        if (!v5)
        {
          v37 = &v64[v65 & 0xFFFFFFFFFFFFFFF8];
          v66 = v65 - 8;
          if (v66 < 0x38)
          {
            v67 = &v62[8 * (v61 >> 2)];
            do
            {
LABEL_141:
              v131 = *(_QWORD *)v43;
              v43 += 8;
              *(_QWORD *)v67 = v131;
              v67 += 8;
            }
            while (v67 != v37);
            goto LABEL_142;
          }
          v123 = 8 * v63;
          v124 = &v62[8 * v63] - v43;
          v67 = &v62[8 * (v61 >> 2)];
          if (v124 < 0x20)
            goto LABEL_141;
          v125 = (v66 >> 3) + 1;
          v126 = 8 * (v125 & 0x3FFFFFFFFFFFFFFCLL);
          v67 = &v64[v126];
          v43 += v126;
          v127 = (__int128 *)(v38 + 24);
          v128 = &v62[v123 + 16];
          v129 = v125 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v130 = *v127;
            *(v128 - 1) = *(v127 - 1);
            *v128 = v130;
            v127 += 2;
            v128 += 2;
            v129 -= 4;
          }
          while (v129);
          if (v125 != (v125 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_141;
        }
LABEL_142:
        *((_QWORD *)v35 + 1) = v62;
        *((_QWORD *)v35 + 2) = v64;
        *((_QWORD *)v35 + 3) = v37;
        *((_QWORD *)v35 + 4) = &v62[8 * v61];
        if (v179)
        {
          operator delete(v179);
          v37 = (char *)*((_QWORD *)v35 + 3);
        }
        goto LABEL_144;
      }
      v51 = (char *)*((_QWORD *)v35 + 1);
      v52 = (char *)*((_QWORD *)v35 + 4);
      v178 = v39 >> 3;
      if (v39 >> 3 < (unint64_t)((v52 - v51) >> 3))
      {
        v53 = operator new(0x1000uLL);
        v54 = v53;
        if (v52 != v37)
        {
          *(_QWORD *)v37 = v53;
LABEL_145:
          *((_QWORD *)v35 + 3) += 8;
          goto LABEL_146;
        }
        if (v38 == v51)
        {
          if (v37 == v38)
            v98 = 1;
          else
            v98 = (v52 - v38) >> 2;
          if (v98 >> 61)
            goto LABEL_203;
          v99 = v53;
          v100 = (char *)operator new(8 * v98);
          v54 = v99;
          v101 = (v98 + 3) >> 2;
          v68 = &v100[8 * v101];
          v102 = v68;
          if (v37 != v38)
          {
            v102 = &v68[8 * v178];
            v103 = &v100[8 * v101];
            v104 = v38;
            if ((unint64_t)(v39 - 8) < 0x38)
              goto LABEL_207;
            v105 = 8 * v101;
            v103 = &v100[8 * v101];
            v104 = v38;
            if ((unint64_t)(v103 - v38) < 0x20)
              goto LABEL_207;
            v106 = ((unint64_t)(v39 - 8) >> 3) + 1;
            v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
            v103 = &v68[v107];
            v104 = &v38[v107];
            v108 = (__int128 *)(v38 + 16);
            v109 = &v100[v105 + 16];
            v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v111 = *v108;
              *((_OWORD *)v109 - 1) = *(v108 - 1);
              *(_OWORD *)v109 = v111;
              v108 += 2;
              v109 += 32;
              v110 -= 4;
            }
            while (v110);
            if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_207:
              do
              {
                v112 = *(_QWORD *)v104;
                v104 += 8;
                *(_QWORD *)v103 = v112;
                v103 += 8;
              }
              while (v103 != v102);
            }
          }
          *((_QWORD *)v35 + 1) = v100;
          *((_QWORD *)v35 + 2) = v68;
          *((_QWORD *)v35 + 3) = v102;
          *((_QWORD *)v35 + 4) = &v100[8 * v98];
          if (v38)
          {
            operator delete(v38);
            v54 = v99;
            v68 = (char *)*((_QWORD *)v35 + 2);
          }
        }
        else
        {
          v68 = v38;
        }
        *((_QWORD *)v68 - 1) = v54;
        v113 = (char *)*((_QWORD *)v35 + 2);
        v114 = (char *)*((_QWORD *)v35 + 3);
        *((_QWORD *)v35 + 2) = v113 - 8;
        v115 = *((_QWORD *)v113 - 1);
        *((_QWORD *)v35 + 2) = v113;
        if (v114 != *((char **)v35 + 4))
        {
LABEL_129:
          *(_QWORD *)v114 = v115;
          goto LABEL_145;
        }
        v116 = (char *)*((_QWORD *)v35 + 1);
        if (v113 > v116)
        {
          v117 = (v113 - v116) >> 3;
          if (v117 >= -1)
            v118 = v117 + 1;
          else
            v118 = v117 + 2;
          v119 = v118 >> 1;
          v120 = &v113[-8 * (v118 >> 1)];
          v121 = v114 - v113;
          if (v121)
          {
            memmove(&v113[-8 * (v118 >> 1)], v113, v121);
            v113 = (char *)*((_QWORD *)v35 + 2);
          }
          v122 = &v120[v121];
          *((_QWORD *)v35 + 2) = &v113[-8 * v119];
          *((_QWORD *)v35 + 3) = v122;
          *(_QWORD *)v122 = v115;
          goto LABEL_145;
        }
        if (v114 == v116)
          v143 = 1;
        else
          v143 = (v114 - v116) >> 2;
        if (v143 >> 61)
          goto LABEL_203;
        v144 = operator new(8 * v143);
        v145 = v143 >> 2;
        v146 = &v144[8 * (v143 >> 2)];
        v147 = v114 - v113;
        v5 = v114 == v113;
        v114 = v146;
        if (!v5)
        {
          v114 = &v146[v147 & 0xFFFFFFFFFFFFFFF8];
          v148 = v147 - 8;
          if (v148 < 0x38)
          {
            v149 = &v144[8 * (v143 >> 2)];
            do
            {
LABEL_174:
              v159 = *(_QWORD *)v113;
              v113 += 8;
              *(_QWORD *)v149 = v159;
              v149 += 8;
            }
            while (v149 != v114);
            goto LABEL_175;
          }
          v150 = 8 * v145;
          v151 = &v144[8 * v145] - v113;
          v149 = &v144[8 * (v143 >> 2)];
          if (v151 < 0x20)
            goto LABEL_174;
          v152 = (v148 >> 3) + 1;
          v153 = 8 * (v152 & 0x3FFFFFFFFFFFFFFCLL);
          v149 = &v146[v153];
          v154 = &v113[v153];
          v155 = (__int128 *)(v113 + 16);
          v156 = &v144[v150 + 16];
          v157 = v152 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v158 = *v155;
            *(v156 - 1) = *(v155 - 1);
            *v156 = v158;
            v155 += 2;
            v156 += 2;
            v157 -= 4;
          }
          while (v157);
          v113 = v154;
          if (v152 != (v152 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_174;
        }
LABEL_175:
        *((_QWORD *)v35 + 1) = v144;
        *((_QWORD *)v35 + 2) = v146;
        *((_QWORD *)v35 + 3) = v114;
        *((_QWORD *)v35 + 4) = &v144[8 * v143];
        if (v116)
        {
          operator delete(v116);
          v114 = (char *)*((_QWORD *)v35 + 3);
        }
        goto LABEL_129;
      }
      if (v52 == v51)
        v55 = 1;
      else
        v55 = (v52 - v51) >> 2;
      if (v55 >> 61)
LABEL_203:
        sub_239418A80();
      v176 = (char *)operator new(8 * v55);
      v175 = operator new(0x1000uLL);
      v56 = &v176[8 * v178];
      v57 = &v176[8 * v55];
      if (v178 == v55)
      {
        v58 = v176;
        if (v39 < 1)
        {
          if (v37 == v38)
            v69 = 1;
          else
            v69 = v39 >> 2;
          if (v69 >> 61)
            sub_239418A80();
          v70 = (char *)operator new(8 * v69);
          v56 = &v70[8 * (v69 >> 2)];
          v71 = &v70[8 * v69];
          v180 = v70;
          operator delete(v176);
          v57 = v71;
          v72 = (char *)*((_QWORD *)v35 + 2);
          v37 = (char *)*((_QWORD *)v35 + 3);
          v58 = v180;
          *(_QWORD *)v56 = v175;
          v60 = v56 + 8;
          if (v37 == v72)
            goto LABEL_91;
        }
        else
        {
          v59 = v178 + 2;
          if (v178 >= -1)
            v59 = v178 + 1;
          v56 -= 8 * (v59 >> 1);
          *(_QWORD *)v56 = v175;
          v60 = v56 + 8;
          if (v37 == v38)
            goto LABEL_91;
        }
      }
      else
      {
        v58 = v176;
        *(_QWORD *)v56 = v175;
        v60 = v56 + 8;
        if (v37 == v38)
        {
LABEL_91:
          v73 = (void *)*((_QWORD *)v35 + 1);
          *((_QWORD *)v35 + 1) = v58;
          *((_QWORD *)v35 + 2) = v56;
          *((_QWORD *)v35 + 3) = v60;
          *((_QWORD *)v35 + 4) = v57;
          if (v73)
            operator delete(v73);
          goto LABEL_146;
        }
      }
      do
      {
        if (v56 == v58)
        {
          if (v60 >= v57)
          {
            if (v57 == v56)
              v81 = 1;
            else
              v81 = (v57 - v56) >> 2;
            if (v81 >> 61)
              sub_239418A80();
            v82 = (char *)operator new(8 * v81);
            v83 = v81;
            v84 = (v81 + 3) >> 2;
            v74 = v82;
            v75 = &v82[8 * v84];
            v76 = v75;
            v85 = v60 - v56;
            if (v60 != v56)
            {
              v76 = &v75[v85 & 0xFFFFFFFFFFFFFFF8];
              v86 = v85 - 8;
              v87 = &v82[8 * v84];
              v88 = v56;
              if (v86 < 0x38)
                goto LABEL_208;
              v89 = 8 * v84;
              v87 = &v82[8 * v84];
              v88 = v56;
              if ((unint64_t)(v87 - v56) < 0x20)
                goto LABEL_208;
              v90 = (v86 >> 3) + 1;
              v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
              v87 = &v75[v91];
              v88 = &v56[v91];
              v92 = (__int128 *)(v56 + 16);
              v93 = &v82[v89 + 16];
              v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v95 = *v92;
                *((_OWORD *)v93 - 1) = *(v92 - 1);
                *(_OWORD *)v93 = v95;
                v92 += 2;
                v93 += 32;
                v94 -= 4;
              }
              while (v94);
              if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_208:
                do
                {
                  v96 = *(_QWORD *)v88;
                  v88 += 8;
                  *(_QWORD *)v87 = v96;
                  v87 += 8;
                }
                while (v87 != v76);
              }
            }
            v97 = &v82[8 * v83];
            operator delete(v56);
            v57 = v97;
          }
          else
          {
            v78 = (v57 - v60) >> 3;
            if (v78 >= -1)
              v79 = v78 + 1;
            else
              v79 = v78 + 2;
            v76 = &v60[8 * (v79 >> 1)];
            v75 = &v56[8 * (v79 >> 1)];
            if (v60 == v56)
            {
              v74 = v60;
            }
            else
            {
              v80 = v57;
              memmove(&v56[8 * (v79 >> 1)], v56, v60 - v56);
              v57 = v80;
              v74 = v56;
            }
          }
        }
        else
        {
          v74 = v58;
          v75 = v56;
          v76 = v60;
        }
        v77 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *((_QWORD *)v75 - 1) = v77;
        v56 = v75 - 8;
        v60 = v76;
        v58 = v74;
        v1 = v181;
      }
      while (v37 != *((char **)v35 + 2));
      goto LABEL_91;
    }
    v34 = (uint64_t)v1[6];
    HIBYTE(v185) = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C(v34, (uint64_t)__p);
    if (SHIBYTE(v185) < 0)
      operator delete(__p[0]);
LABEL_150:
    kdebug_trace();
    sub_2394270E0((uint64_t)__p, (unsigned int *)v1[1]);
    v135 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v136 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
    v187 = v135;
    if (!v136)
      goto LABEL_154;
    v137 = (unint64_t *)&v136->__shared_owners_;
    do
      v138 = __ldaxr(v137);
    while (__stlxr(v138 - 1, v137));
    if (!v138)
    {
      ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
      std::__shared_weak_count::__release_weak(v136);
      v188 = v185;
      v139 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
LABEL_155:
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
        goto LABEL_160;
      }
    }
    else
    {
LABEL_154:
      v188 = v185;
      v139 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
        goto LABEL_155;
    }
    do
LABEL_160:
      v142 = __ldaxr(v8);
    while (__stlxr(v142 - 1, v8));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    v4 = v187;
    if ((_QWORD)v187)
      v5 = v188 == 0;
    else
      v5 = 1;
    if (v5)
      goto LABEL_192;
  }
  do
  {
    sub_2394270E0((uint64_t)__p, (unsigned int *)v1[1]);
    v161 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v162 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
    v187 = v161;
    if (!v162)
      goto LABEL_183;
    v163 = (unint64_t *)&v162->__shared_owners_;
    do
      v164 = __ldaxr(v163);
    while (__stlxr(v164 - 1, v163));
    if (!v164)
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
      v160 = v185;
      v188 = v185;
      v165 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        continue;
    }
    else
    {
LABEL_183:
      v160 = v185;
      v188 = v185;
      v165 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        continue;
    }
    v166 = (unint64_t *)&v165->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
    v160 = v188;
  }
  while (v160);
  v168 = (uint64_t)v1[6];
  HIBYTE(v185) = 0;
  LOBYTE(__p[0]) = 0;
  sub_2396FCC6C(v168, (uint64_t)__p);
  if (SHIBYTE(v185) < 0)
    operator delete(__p[0]);
LABEL_192:
  v169 = (std::__shared_weak_count *)*((_QWORD *)&v187 + 1);
  if (*((_QWORD *)&v187 + 1))
  {
    v170 = (unint64_t *)(*((_QWORD *)&v187 + 1) + 8);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
      std::__shared_weak_count::__release_weak(v169);
    }
  }
  if (a1)
  {
    v172 = *a1;
    *a1 = 0;
    if (v172)
    {
      v173 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v173, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0x60C40164A803FLL);
  }
  return 0;
}

void sub_239426EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  std::__shared_weak_count *v29;
  pthread_mutex_t *v30;
  unint64_t *v31;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  operator delete(__p);
  operator delete(a11);
  sub_2397A16B4(v30);
  do
    v33 = __ldaxr(v31);
  while (__stlxr(v33 - 1, v31));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  v34 = a29;
  if (a29)
  {
    p_shared_owners = (unint64_t *)&a29->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  sub_239427078(&a16);
  _Unwind_Resume(a1);
}

uint64_t **sub_239427078(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x60C40164A803FLL);
  }
  return a1;
}

uint64_t sub_2394270E0(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = (pthread_mutex_t *)(a2 + 44);
  sub_2397A1694((pthread_mutex_t *)(a2 + 44));
  if (*((_QWORD *)a2 + 6))
  {
LABEL_4:
    v5 = *((_QWORD *)a2 + 5);
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 2) + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8));
    v7 = (uint64_t *)(v6 + 16 * v5);
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    v22 = v9;
    v23 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a2 + 2)
                                                     + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * *((_QWORD *)a2 + 5)
                                         + 8);
      if (!v12)
        goto LABEL_13;
    }
    else
    {
      v12 = *(std::__shared_weak_count **)(v6 + 16 * *((_QWORD *)a2 + 5) + 8);
      if (!v12)
        goto LABEL_13;
    }
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = *((_QWORD *)a2 + 6) - 1;
      v21 = *((_QWORD *)a2 + 5) + 1;
      *((_QWORD *)a2 + 5) = v21;
      *((_QWORD *)a2 + 6) = v15;
      if (v21 < 0x200)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_13:
    v15 = *((_QWORD *)a2 + 6) - 1;
    v16 = *((_QWORD *)a2 + 5) + 1;
    *((_QWORD *)a2 + 5) = v16;
    *((_QWORD *)a2 + 6) = v15;
    if (v16 < 0x200)
    {
LABEL_15:
      if (v15 < *a2)
        pthread_cond_signal((pthread_cond_t *)(a2 + 20));
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v23;
      if (v23)
      {
        v17 = (unint64_t *)&v23->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        *(_BYTE *)(a1 + 16) = 1;
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 - 1, v17));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 1;
      }
      return sub_2397A16B4(v4);
    }
LABEL_14:
    operator delete(**((void ***)a2 + 2));
    *((_QWORD *)a2 + 2) += 8;
    v15 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 5) -= 256;
    goto LABEL_15;
  }
  while (!*((_BYTE *)a2 + 56))
  {
    ++*((_QWORD *)a2 + 9);
    pthread_cond_wait((pthread_cond_t *)(a2 + 32), v4);
    --*((_QWORD *)a2 + 9);
    if (*((_QWORD *)a2 + 6))
      goto LABEL_4;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return sub_2397A16B4(v4);
}

void sub_2394272DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239416DA0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

void sub_239427308(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239427318(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239427348(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_2394273A4(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  const void *v57;
  uint64_t v58;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  uint64_t v64;
  void *v65[2];
  unsigned __int8 v66;
  char v67;
  __int128 v68;
  unsigned __int8 v69;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_239427A98((uint64_t)&v68, *(unsigned int **)(a1 + 8));
  v4 = v68;
  if (!(_QWORD)v68 || !v69)
    goto LABEL_72;
  __asm { FMOV            V8.2S, #-1.0 }
  while (!sub_2396FD7B0(*(_QWORD *)(a1 + 16)))
  {
    v10 = *(_QWORD *)(a1 + 24);
    HIBYTE(v64) = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FD394(v65, v10, (__int128 *)__p);
    if (SHIBYTE(v64) < 0)
    {
      operator delete(__p[0]);
      v12 = *(_QWORD *)v4;
      v11 = *(std::__shared_weak_count **)(v4 + 8);
      if (!v11)
        goto LABEL_11;
    }
    else
    {
      v12 = *(_QWORD *)v4;
      v11 = *(std::__shared_weak_count **)(v4 + 8);
      if (!v11)
        goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
LABEL_11:
    v15 = *(int *)(v4 + 16);
    kdebug_trace();
    v16 = *(_QWORD *)(a1 + 32);
    v61 = v12;
    v62 = v11;
    if (v11)
    {
      v17 = (unint64_t *)&v11->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    __p[0] = (void *)v15;
    v19 = *(_QWORD *)(v16 + 24);
    if (!v19)
      sub_2394172E0();
    v20 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v19 + 48))(v19, &v61, __p);
    v21 = v20;
    v22 = v62;
    if (!v62)
      goto LABEL_19;
    v23 = (unint64_t *)&v62->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if ((v21 & 1) != 0)
      {
LABEL_20:
        v25 = *(_QWORD *)(a1 + 48);
        __p[0] = (void *)v15;
        sub_239427CC0(v25, (unint64_t *)__p, __p);
        goto LABEL_24;
      }
    }
    else
    {
LABEL_19:
      if ((v20 & 1) != 0)
        goto LABEL_20;
    }
    v26 = *(_BYTE **)(a1 + 40);
    if (v26[8])
      sub_2394202DC((_QWORD *)(*(_QWORD *)v26 + 64), 2503);
LABEL_24:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 8))
    {
      sub_239418418(v12, v4 + 24, (uint64_t)__p);
      v27 = **(_QWORD **)(a1 + 40);
      v29 = (uint64_t **)(v27 + 48);
      v28 = *(uint64_t **)(v27 + 48);
      if (v28)
      {
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = v28[4];
            if (v31 <= v15)
              break;
            v28 = *v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_32;
          }
          if (v31 >= v15)
            break;
          v28 = v30[1];
          if (!v28)
          {
            v29 = v30 + 1;
            goto LABEL_32;
          }
        }
        v32 = v30;
      }
      else
      {
        v30 = (uint64_t **)(v27 + 48);
LABEL_32:
        v32 = operator new(0x40uLL);
        v32[4] = v15;
        v32[5] = 0;
        v32[6] = -1;
        v32[7] = _D8;
        *v32 = 0;
        v32[1] = 0;
        v32[2] = v30;
        *v29 = v32;
        v33 = **(_QWORD **)(v27 + 40);
        v34 = v32;
        if (v33)
        {
          *(_QWORD *)(v27 + 40) = v33;
          v34 = *v29;
        }
        sub_2394213B8(*(uint64_t **)(v27 + 48), v34);
        ++*(_QWORD *)(v27 + 56);
      }
      *(_OWORD *)(v32 + 5) = *(_OWORD *)__p;
      v32[7] = v64;
      if (sub_2396FD7B0(*(_QWORD *)(a1 + 16)))
      {
        sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 40) + 64), 2);
        v35 = *(_QWORD *)(a1 + 24);
        HIBYTE(v64) = 0;
        LOBYTE(__p[0]) = 0;
        sub_2396FCC6C(v35, (uint64_t)__p);
        if (SHIBYTE(v64) < 0)
          operator delete(__p[0]);
      }
    }
    ++**(_QWORD **)(a1 + 64);
    kdebug_trace();
    sub_239427A98((uint64_t)__p, *(unsigned int **)(a1 + 8));
    v36 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    v68 = v36;
    if (!v37)
      goto LABEL_43;
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
      v69 = v64;
      v40 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
LABEL_44:
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else
    {
LABEL_43:
      v69 = v64;
      v40 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
        goto LABEL_44;
    }
    if (v11)
    {
      v43 = (unint64_t *)&v11->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_2396FD3E8((uint64_t)v65);
    v4 = v68;
    if (!(_QWORD)v68 || !v69)
      goto LABEL_72;
  }
  do
  {
    sub_239427A98((uint64_t)v65, *(unsigned int **)(a1 + 8));
    v46 = *(_OWORD *)v65;
    v65[0] = 0;
    v65[1] = 0;
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    v68 = v46;
    if (!v47)
      goto LABEL_63;
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      v45 = v66;
      v69 = v66;
      v50 = (std::__shared_weak_count *)v65[1];
      if (!v65[1])
        continue;
    }
    else
    {
LABEL_63:
      v45 = v66;
      v69 = v66;
      v50 = (std::__shared_weak_count *)v65[1];
      if (!v65[1])
        continue;
    }
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
    v45 = v69;
  }
  while (v45);
  v53 = *(_QWORD *)(a1 + 24);
  v67 = 0;
  LOBYTE(v65[0]) = 0;
  sub_2396FCC6C(v53, (uint64_t)v65);
  if (v67 < 0)
    operator delete(v65[0]);
LABEL_72:
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (a1)
  {
    v57 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v57)
    {
      v58 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v58, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0x70C407BC58F65);
  }
  return 0;
}

void sub_2394278E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (a25 < 0)
    operator delete(__p);
  v29 = a28;
  if (a28)
  {
    p_shared_owners = (unint64_t *)&a28->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  sub_239427A30(&a10);
  _Unwind_Resume(a1);
}

uint64_t **sub_239427A30(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x70C407BC58F65);
  }
  return a1;
}

uint64_t sub_239427A98(uint64_t a1, unsigned int *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v4 = (pthread_mutex_t *)(a2 + 44);
  sub_2397A1694((pthread_mutex_t *)(a2 + 44));
  if (*((_QWORD *)a2 + 6))
  {
LABEL_4:
    v5 = *((_QWORD *)a2 + 5);
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 2) + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8));
    v7 = (uint64_t *)(v6 + 16 * v5);
    v9 = *v7;
    v8 = (std::__shared_weak_count *)v7[1];
    v22 = v9;
    v23 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a2 + 2)
                                                     + ((*((_QWORD *)a2 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                         + 16 * *((_QWORD *)a2 + 5)
                                         + 8);
      if (!v12)
        goto LABEL_13;
    }
    else
    {
      v12 = *(std::__shared_weak_count **)(v6 + 16 * *((_QWORD *)a2 + 5) + 8);
      if (!v12)
        goto LABEL_13;
    }
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      v15 = *((_QWORD *)a2 + 6) - 1;
      v21 = *((_QWORD *)a2 + 5) + 1;
      *((_QWORD *)a2 + 5) = v21;
      *((_QWORD *)a2 + 6) = v15;
      if (v21 < 0x200)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_13:
    v15 = *((_QWORD *)a2 + 6) - 1;
    v16 = *((_QWORD *)a2 + 5) + 1;
    *((_QWORD *)a2 + 5) = v16;
    *((_QWORD *)a2 + 6) = v15;
    if (v16 < 0x200)
    {
LABEL_15:
      if (v15 < *a2)
        pthread_cond_signal((pthread_cond_t *)(a2 + 20));
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v23;
      if (v23)
      {
        v17 = (unint64_t *)&v23->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        *(_BYTE *)(a1 + 16) = 1;
        do
          v19 = __ldaxr(v17);
        while (__stlxr(v19 - 1, v17));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      else
      {
        *(_BYTE *)(a1 + 16) = 1;
      }
      return sub_2397A16B4(v4);
    }
LABEL_14:
    operator delete(**((void ***)a2 + 2));
    *((_QWORD *)a2 + 2) += 8;
    v15 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 5) -= 256;
    goto LABEL_15;
  }
  while (!*((_BYTE *)a2 + 56))
  {
    ++*((_QWORD *)a2 + 9);
    pthread_cond_wait((pthread_cond_t *)(a2 + 32), v4);
    --*((_QWORD *)a2 + 9);
    if (*((_QWORD *)a2 + 6))
      goto LABEL_4;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return sub_2397A16B4(v4);
}

void sub_239427C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239416DA0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239427CC0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239427FCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239427FE0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_239418A80();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *sub_23942818C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x492492492492493)
      sub_2394189F8();
    v5 = 56 * a3;
    v6 = (char *)operator new(56 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    sub_2394282A4((uint64_t)a1, a2, a2 + v5);
  }
  return a1;
}

void sub_23942821C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EBED68((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23942823C(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_2394282A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = v4 + v7;
      v9 = *(_QWORD *)(a2 + v7);
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 + v7 + 8);
      *(_QWORD *)v8 = v9;
      result = sub_239428344(v4 + v7 + 16, a2 + v7 + 16);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_239428324(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    sub_239EBEDE0(v2 + v3, v2);
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_239428344(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_239427FE0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_239428484(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_23942845C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

void sub_239428470(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23942823C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239428484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_239428940((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *v25 = 0;
  v25[1] = v10;
  v26 = v25 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v25[5] = *(_QWORD *)(a3 + 24);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_239427FE0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2394288C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2394288DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394288F4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2394288F4(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_239428940(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

uint64_t sub_239428D8C(void **a1, int *a2, float *a3, float *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  void **v26;
  void *v27;
  void **v28;
  uint64_t v29;
  char *v30;
  char *v31;

  v5 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492)
    sub_2394189F8();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v6)
    v6 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v6;
  if (v10)
  {
    if (v10 > 0x492492492492492)
      sub_239418A80();
    v11 = (char *)operator new(56 * v10);
  }
  else
  {
    v11 = 0;
  }
  v29 = (uint64_t)&v11[56 * v5];
  v31 = &v11[56 * v10];
  sub_239429008((uint64_t)(a1 + 2), v29, a2, a3, a4);
  v12 = v29;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    v24 = (char *)a1[1];
  }
  else
  {
    v15 = 0;
    do
    {
      v17 = v29 + v15;
      v18 = &v14[v15];
      v19 = *(_QWORD *)&v14[v15 - 56];
      *(_DWORD *)(v17 - 48) = *(_DWORD *)&v14[v15 - 48];
      *(_QWORD *)(v17 - 56) = v19;
      v20 = *(_QWORD *)&v14[v15 - 40];
      *((_QWORD *)v18 - 5) = 0;
      *(_QWORD *)(v17 - 40) = v20;
      *(_QWORD *)(v17 - 32) = *(_QWORD *)&v14[v15 - 32];
      *((_QWORD *)v18 - 4) = 0;
      v21 = *(_QWORD *)&v14[v15 - 24];
      *(_QWORD *)(v29 + v15 - 24) = v21;
      v22 = *(_QWORD *)&v14[v15 - 16];
      *(_QWORD *)(v17 - 16) = v22;
      *(_DWORD *)(v17 - 8) = *(_DWORD *)&v14[v15 - 8];
      if (v22)
      {
        v16 = *(_QWORD *)(v21 + 8);
        v23 = *(_QWORD *)(v17 - 32);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v16 >= v23)
            v16 %= v23;
        }
        else
        {
          v16 &= v23 - 1;
        }
        *(_QWORD *)(v20 + 8 * v16) = v29 + v15 - 24;
        *(_QWORD *)&v14[v15 - 24] = 0;
        *(_QWORD *)&v14[v15 - 16] = 0;
      }
      v15 -= 56;
    }
    while (&v14[v15] != v13);
    v24 = (char *)*a1;
    v14 = (char *)a1[1];
    v12 = v29 + v15;
  }
  *a1 = (void *)v12;
  a1[1] = (void *)(v29 + 56);
  a1[2] = v31;
  if (v14 == v24)
  {
    if (v14)
LABEL_24:
      operator delete(v14);
  }
  else
  {
    do
    {
      v30 = v14 - 56;
      v26 = (void **)*((_QWORD *)v14 - 3);
      if (v26)
      {
        do
        {
          v28 = (void **)*v26;
          if (*((char *)v26 + 39) < 0)
            operator delete(v26[2]);
          operator delete(v26);
          v26 = v28;
        }
        while (v28);
      }
      v27 = (void *)*((_QWORD *)v14 - 5);
      *((_QWORD *)v14 - 5) = 0;
      if (v27)
        operator delete(v27);
      v14 -= 56;
    }
    while (v30 != v24);
    v14 = v24;
    if (v24)
      goto LABEL_24;
  }
  return v29 + 56;
}

void sub_239428FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2394290A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239429008(uint64_t a1, uint64_t a2, int *a3, float *a4, float *a5)
{
  int v6;
  float v7;
  float v8;
  void **v9;
  void *v10;
  void **v11;
  void *__p[2];
  void *v13[2];
  int v14;

  v6 = *a3;
  v7 = *a4;
  v8 = *a5;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v13 = 0u;
  v14 = 1065353216;
  sub_239719E98(a2, v6, (uint64_t)__p, v7, v8);
  v9 = (void **)v13[0];
  if (v13[0])
  {
    do
    {
      v11 = (void **)*v9;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v11;
    }
    while (v11);
  }
  v10 = __p[0];
  __p[0] = 0;
  if (v10)
    operator delete(v10);
}

void sub_239429090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23942823C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2394290A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  void *v5;
  void **v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    v4 = *(void ***)(i - 24);
    if (v4)
    {
      do
      {
        v6 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v6;
      }
      while (v6);
    }
    v5 = *(void **)(i - 40);
    *(_QWORD *)(i - 40) = 0;
    if (v5)
      operator delete(v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_239429140(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239429150(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239429180(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_239416DA0(a1 + 32);
  return nullsub_4(v1);
}

void sub_2394291AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394291BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394291EC(uint64_t a1)
{
  return sub_2397A2E14(a1 + 24);
}

void sub_2394291F8(void *__p)
{
  operator delete(__p);
}

void sub_239429208()
{
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23942921C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_239429234(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 261, a3, a4);
}

void sub_23942923C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 287, a3, a4);
}

void sub_239429244()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void sub_23942924C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int a5)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  std::thread *v9;
  std::thread *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  std::__thread_struct *v22;
  _QWORD *v23;
  int v24;
  std::thread *v25;
  std::thread *v26;
  void *__p;
  char *v31;
  char *v32;
  unint64_t v33;
  std::thread *v34;
  std::thread *v35;
  std::thread *v36;

  v5 = *a2;
  if (*(_DWORD *)(*a2 + 16) != 64)
    goto LABEL_35;
  v6 = a5;
  v7 = a5;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  if (a5)
  {
    v8 = a5;
    v9 = (std::thread *)operator new(v8 * 8);
    v10 = &v9[v8];
    v34 = v9;
    v36 = &v9[v8];
    bzero(v9, 8 * v7);
    v35 = &v9[v8];
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = a2[1];
  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  v12 = (char *)operator new(0x18uLL);
  v13 = (v11 - v5) / 24;
  v31 = v12 + 24;
  v32 = v12 + 24;
  *(_QWORD *)v12 = 0;
  *((_DWORD *)v12 + 2) = 2139095039;
  *(_QWORD *)(v12 + 12) = 0;
  *((_DWORD *)v12 + 5) = 2139095039;
  __p = v12;
  v14 = a4[1];
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3);
  v26 = v9;
  if (v13 <= v15)
  {
    if (v13 < v15)
    {
      v16 = *a4 + 24 * v13;
      if (v14 != v16)
      {
        v17 = a4[1];
        do
        {
          v19 = *(void **)(v17 - 24);
          v17 -= 24;
          v18 = v19;
          if (v19)
          {
            *(_QWORD *)(v14 - 16) = v18;
            operator delete(v18);
          }
          v14 = v17;
        }
        while (v17 != v16);
      }
      a4[1] = v16;
    }
LABEL_16:
    v31 = v12;
    operator delete(v12);
    if (!v6)
      goto LABEL_23;
    goto LABEL_17;
  }
  sub_23942A264(a4, v13 - v15, (uint64_t)&__p);
  v12 = (char *)__p;
  if (__p)
    goto LABEL_16;
  if (v6)
  {
LABEL_17:
    v20 = 0;
    while (1)
    {
      v21 = v13;
      if (v6 != 1)
        v21 = (v13 + v20) / v7;
      v22 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v22);
      v23 = (_QWORD *)operator new();
      *v23 = v22;
      v23[1] = a4;
      v23[2] = a2;
      v23[3] = &v33;
      v23[4] = a3;
      v23[5] = v20 / v7;
      v23[6] = v21;
      v24 = pthread_create((pthread_t *)&__p, 0, (void *(__cdecl *)(void *))sub_23942A660, v23);
      if (v24)
        break;
      if (v9->__t_)
        std::terminate();
      v9->__t_ = (std::__libcpp_thread_t)__p;
      ++v9;
      __p = 0;
      std::thread::~thread((std::thread *)&__p);
      v20 += v13;
      if (!--v6)
        goto LABEL_23;
    }
    std::__throw_system_error(v24, "thread constructor failed");
    __break(1u);
LABEL_35:
    sub_239EBEE50();
  }
LABEL_23:
  if (v26 == v10)
  {
    if (!v26)
      return;
    goto LABEL_31;
  }
  v25 = v26;
  do
    std::thread::join(v25++);
  while (v25 != v10);
  if (v26)
  {
    if (v26 != v10)
    {
      do
        std::thread::~thread(--v10);
      while (v10 != v26);
      v10 = v34;
    }
LABEL_31:
    v35 = v26;
    operator delete(v10);
  }
}

void sub_23942951C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (__p)
  {
    operator delete(__p);
    sub_239420998(&a18);
    _Unwind_Resume(a1);
  }
  sub_239420998(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_2394295EC(_QWORD *a1, char a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_250ADB8E8;
  a1[1] = 0;
  a1[2] = sub_23942A248;
  v6 = operator new();
  *(_DWORD *)v6 = 1061997773;
  *(_BYTE *)(v6 + 4) = 1;
  *(_WORD *)(v6 + 5) = 0;
  *(_BYTE *)(v6 + 7) = 0;
  *(_DWORD *)(v6 + 8) = 1;
  v7 = a1[1];
  a1[1] = v6;
  if (v7)
  {
    ((void (*)(uint64_t))a1[2])(v7);
    v6 = a1[1];
  }
  a1[2] = sub_23942A248;
  *(float *)v6 = a3;
  *(_BYTE *)(v6 + 4) = a2;
  return a1;
}

void sub_2394296A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 16))();
  _Unwind_Resume(exception_object);
}

uint64_t sub_2394296C4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB8E8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  return a1;
}

void sub_239429704(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = &off_250ADB8E8;
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 16))();
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239429754(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v11;
  int v12;
  char *v13;
  unsigned int *v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  size_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  void **p_p;
  unsigned __int8 v32;
  char *v33;
  char *v34;
  void *v35;
  char *v36;
  void *v37;
  void *v38;
  char *v39;
  char *v40;
  void *v41;
  char *v42;
  void *v43;
  void *v44;
  char *v45;
  char *v46;
  void *v47;
  void *v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  std::bad_alloc *exception;
  std::bad_alloc *v55;
  std::bad_alloc *v56;
  std::bad_alloc *v57;
  _QWORD *v58;
  void *__p;
  char *v60;
  uint64_t v61;
  void *memptr;
  char *v63;
  uint64_t v64;
  void *v65;
  unsigned int *v66;
  void *v67;
  unsigned int *v68;
  void *v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;

  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(unsigned __int8 *)(v11 + 4);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  sub_239429CA8((uint64_t)a2, a7, (char **)&v67);
  sub_239429CA8((uint64_t)a3, a7, (char **)&v65);
  v58 = a4;
  sub_2394188EC(&v72, ((char *)v68 - (_BYTE *)v67) >> 2);
  sub_2394188EC((char **)&v69, ((char *)v66 - (_BYTE *)v65) >> 2);
  v14 = (unsigned int *)v67;
  v15 = v68;
  if (v67 != v68)
  {
    do
    {
      while (1)
      {
        v16 = *v14;
        if (a2[4] <= v16 || ((*(_QWORD *)(a2[3] + ((v16 >> 3) & 0x1FFFFFF8)) >> v16) & 1) == 0)
        {
          sub_239A444D4((uint64_t)"unknown file", 124, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v17 = a2[9] + 24 * v16;
        v18 = v73;
        if ((unint64_t)v73 < v74)
          break;
        v13 = sub_23942A8DC((void **)&v72, v17);
        v73 = v13;
        if (++v14 == v15)
          goto LABEL_11;
      }
      v19 = *(unsigned int *)(v17 + 16);
      v20 = (v19 + 31) & 0x1FFFFFFE0;
      *(_QWORD *)v73 = 0;
      *((_QWORD *)v18 + 1) = v20;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v20, 0x100BBD03uLL);
      v21 = memptr;
      *(_QWORD *)v18 = memptr;
      if (!v21)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v55 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v55, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if ((_DWORD)v19)
        memcpy(v21, *(const void **)v17, v19);
      *((_DWORD *)v18 + 4) = *(_DWORD *)(v17 + 16);
      v13 = v18 + 24;
      v73 = v18 + 24;
      ++v14;
    }
    while (v14 != v15);
  }
LABEL_11:
  v22 = (unsigned int *)v65;
  v23 = v66;
  if (v65 != v66)
  {
    do
    {
      while (1)
      {
        v24 = *v22;
        if (a3[4] <= v24 || ((*(_QWORD *)(a3[3] + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) == 0)
        {
          sub_239A444D4((uint64_t)"unknown file", 124, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
        v25 = a3[9] + 24 * v24;
        v26 = v70;
        if ((unint64_t)v70 < v71)
          break;
        v13 = sub_23942A8DC(&v69, v25);
        v70 = v13;
        if (++v22 == v23)
          goto LABEL_21;
      }
      v27 = *(unsigned int *)(v25 + 16);
      v28 = (v27 + 31) & 0x1FFFFFFE0;
      *(_QWORD *)v70 = 0;
      *((_QWORD *)v26 + 1) = v28;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v28, 0x100BBD03uLL);
      v29 = memptr;
      *(_QWORD *)v26 = memptr;
      if (!v29)
      {
        v56 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v57 = std::bad_alloc::bad_alloc(v56);
        __cxa_throw(v57, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      if ((_DWORD)v27)
        memcpy(v29, *(const void **)v25, v27);
      *((_DWORD *)v26 + 4) = *(_DWORD *)(v25 + 16);
      v13 = v26 + 24;
      v70 = v26 + 24;
      ++v22;
    }
    while (v22 != v23);
  }
LABEL_21:
  v63 = 0;
  v64 = 0;
  memptr = 0;
  sub_23942924C((uint64_t)v13, &v72, &v69, &memptr, *(_DWORD *)(v11 + 8));
  __p = 0;
  v60 = 0;
  v61 = 0;
  if (v12)
  {
    sub_23942924C(v30, &v69, &v72, &__p, *(_DWORD *)(v11 + 8));
    p_p = &__p;
    v32 = 1;
  }
  else
  {
    v32 = 0;
    p_p = 0;
  }
  sub_23943EFB8(&v67, &v65, (uint64_t *)&memptr, v58, p_p, v32, *(float *)v11);
  v33 = (char *)__p;
  if (__p)
  {
    v34 = v60;
    v35 = __p;
    if (v60 != __p)
    {
      v36 = v60;
      do
      {
        v38 = (void *)*((_QWORD *)v36 - 3);
        v36 -= 24;
        v37 = v38;
        if (v38)
        {
          *((_QWORD *)v34 - 2) = v37;
          operator delete(v37);
        }
        v34 = v36;
      }
      while (v36 != v33);
      v35 = __p;
    }
    v60 = v33;
    operator delete(v35);
  }
  v39 = (char *)memptr;
  if (memptr)
  {
    v40 = v63;
    v41 = memptr;
    if (v63 != memptr)
    {
      v42 = v63;
      do
      {
        v44 = (void *)*((_QWORD *)v42 - 3);
        v42 -= 24;
        v43 = v44;
        if (v44)
        {
          *((_QWORD *)v40 - 2) = v43;
          operator delete(v43);
        }
        v40 = v42;
      }
      while (v42 != v39);
      v41 = memptr;
    }
    v63 = v39;
    operator delete(v41);
  }
  if (v65)
  {
    v66 = (unsigned int *)v65;
    operator delete(v65);
  }
  if (v67)
  {
    v68 = (unsigned int *)v67;
    operator delete(v67);
  }
  v45 = (char *)v69;
  if (v69)
  {
    v46 = v70;
    v47 = v69;
    if (v70 != v69)
    {
      do
      {
        v48 = (void *)*((_QWORD *)v46 - 3);
        v46 -= 24;
        free(v48);
      }
      while (v46 != v45);
      v47 = v69;
    }
    v70 = v45;
    operator delete(v47);
  }
  v49 = v72;
  if (v72)
  {
    v50 = v73;
    v51 = v72;
    if (v73 != v72)
    {
      do
      {
        v52 = (void *)*((_QWORD *)v50 - 3);
        v50 -= 24;
        free(v52);
      }
      while (v50 != v49);
      v51 = v72;
    }
    v73 = v49;
    operator delete(v51);
  }
  return 1;
}

void sub_239429BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  sub_23942A16C(&a13);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
    v25 = a19;
    if (!a19)
    {
LABEL_3:
      sub_23942A1E0(&a22);
      sub_23942A1E0((void **)(v23 - 112));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v25 = a19;
    if (!a19)
      goto LABEL_3;
  }
  a20 = (uint64_t)v25;
  operator delete(v25);
  sub_23942A1E0(&a22);
  sub_23942A1E0((void **)(v23 - 112));
  _Unwind_Resume(a1);
}

void sub_239429CA8(uint64_t a1@<X0>, char a2@<W1>, char **a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  unint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  BOOL v33;
  double v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = (char *)operator new(4 * v6);
    *a3 = v7;
    a3[1] = v7;
    a3[2] = &v7[4 * v6];
    v8 = *(_QWORD *)(a1 + 32);
    if ((a2 & 1) != 0)
      goto LABEL_3;
    goto LABEL_37;
  }
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 32);
  if ((a2 & 1) == 0)
  {
LABEL_37:
    if (!v8)
      return;
    v29 = 0;
    while (1)
    {
      v31 = *(_QWORD *)(a1 + 24);
      if ((*(_QWORD *)(v31 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v29)) == 0)
        goto LABEL_41;
      if (v8 <= v29
        || (*(_QWORD *)(v31 + (((unint64_t)v29 >> 3) & 0x1FFFFFF8)) & (1 << v29)) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 293, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v32 = *(float *)(*(_QWORD *)(a1 + 48) + 24 * v29 + 20);
      v33 = v32 == 0.0;
      v34 = v32 >= 0.0 ? v32 : 0.0 - v32;
      if (v33 || v34 <= 0.00000001)
        goto LABEL_41;
      v35 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v35)
        break;
      *(_DWORD *)v7 = v29;
      v30 = (uint64_t)(v7 + 4);
LABEL_40:
      a3[1] = (char *)v30;
      v7 = (char *)v30;
LABEL_41:
      if (++v29 >= v8)
        return;
    }
    v36 = *a3;
    v37 = v7 - *a3;
    v38 = v37 >> 2;
    v39 = (v37 >> 2) + 1;
    if (v39 >> 62)
      sub_2394189F8();
    v40 = v35 - (_QWORD)v36;
    if (v40 >> 1 > v39)
      v39 = v40 >> 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
      v41 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      if (v41 >> 62)
        sub_239418A80();
      v42 = operator new(4 * v41);
      v43 = &v42[4 * v38];
      *(_DWORD *)v43 = v29;
      v30 = (uint64_t)(v43 + 4);
      if (v7 == v36)
        goto LABEL_65;
    }
    else
    {
      v42 = 0;
      v43 = (char *)(4 * v38);
      *(_DWORD *)(4 * v38) = v29;
      v30 = 4 * v38 + 4;
      if (v7 == v36)
        goto LABEL_65;
    }
    v44 = v7 - 4 - v36;
    if (v44 >= 0xBC)
    {
      if (&v42[v37 - 4 - (v44 & 0xFFFFFFFFFFFFFFFCLL)] > &v42[v37 - 4])
      {
        v45 = v7;
      }
      else if (&v7[-(v44 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v45 = v7;
      }
      else if ((unint64_t)(v7 - &v42[v37]) >= 0x20)
      {
        v47 = (v44 >> 2) + 1;
        v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
        v45 = &v7[-v48];
        v43 -= v48;
        v49 = &v42[4 * v38 - 16];
        v50 = v7 - 16;
        v51 = v47 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v52 = *(_OWORD *)v50;
          *(v49 - 1) = *((_OWORD *)v50 - 1);
          *v49 = v52;
          v49 -= 2;
          v50 -= 32;
          v51 -= 8;
        }
        while (v51);
        if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_65:
          *a3 = v43;
          a3[1] = (char *)v30;
          a3[2] = &v42[4 * v41];
          if (v36)
          {
            operator delete(v36);
            v8 = *(_QWORD *)(a1 + 32);
          }
          goto LABEL_40;
        }
      }
      else
      {
        v45 = v7;
      }
    }
    else
    {
      v45 = v7;
    }
    do
    {
      v46 = *((_DWORD *)v45 - 1);
      v45 -= 4;
      *((_DWORD *)v43 - 1) = v46;
      v43 -= 4;
    }
    while (v45 != v36);
    goto LABEL_65;
  }
LABEL_3:
  if (v8)
  {
    v9 = 0;
    while (1)
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
      v11 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v11)
        break;
      *(_DWORD *)v7 = v9;
      v10 = (uint64_t)(v7 + 4);
LABEL_6:
      a3[1] = (char *)v10;
      v7 = (char *)v10;
LABEL_7:
      if (++v9 >= v8)
        return;
    }
    v12 = *a3;
    v13 = v7 - *a3;
    v14 = v13 >> 2;
    v15 = (v13 >> 2) + 1;
    if (v15 >> 62)
      sub_2394189F8();
    v16 = v11 - (_QWORD)v12;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 62)
        sub_239418A80();
      v18 = operator new(4 * v17);
      v19 = &v18[4 * v14];
      *(_DWORD *)v19 = v9;
      v10 = (uint64_t)(v19 + 4);
      if (v7 == v12)
        goto LABEL_24;
    }
    else
    {
      v18 = 0;
      v19 = (char *)(4 * v14);
      *(_DWORD *)(4 * v14) = v9;
      v10 = 4 * v14 + 4;
      if (v7 == v12)
        goto LABEL_24;
    }
    v20 = v7 - 4 - v12;
    if (v20 >= 0xBC)
    {
      if (&v18[v13 - 4 - (v20 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[v13 - 4])
      {
        v21 = v7;
      }
      else if (&v7[-(v20 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
      {
        v21 = v7;
      }
      else if ((unint64_t)(v7 - v18 - v13) >= 0x20)
      {
        v23 = (v20 >> 2) + 1;
        v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v7[-v24];
        v19 -= v24;
        v25 = &v18[4 * v14 - 16];
        v26 = v7 - 16;
        v27 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 8;
        }
        while (v27);
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_24;
      }
      else
      {
        v21 = v7;
      }
    }
    else
    {
      v21 = v7;
    }
    do
    {
      v22 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v19 - 1) = v22;
      v19 -= 4;
    }
    while (v21 != v12);
LABEL_24:
    *a3 = v19;
    a3[1] = (char *)v10;
    a3[2] = &v18[4 * v17];
    if (v12)
    {
      operator delete(v12);
      v8 = *(_QWORD *)(a1 + 32);
    }
    goto LABEL_6;
  }
}

void sub_23942A13C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **sub_23942A16C(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_23942A1E0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        v3 -= 24;
        free(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_23942A23C(uint64_t result, float a2)
{
  **(float **)(result + 8) = a2;
  return result;
}

uint64_t sub_23942A248(uint64_t result)
{
  if (result)
    JUMPOUT(0x23B83E31CLL);
  return result;
}

void sub_23942A264(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  const void *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  char *v34;
  char **v35;
  _QWORD *v36;
  char *v37;

  v5 = a1[2];
  v6 = (_QWORD *)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 3) >= a2)
  {
    if (a2)
    {
      v33 = &v6[3 * a2];
      v36 = a1;
      v12 = 24 * a2;
      do
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        v16 = *(const void **)a3;
        v15 = *(_QWORD *)(a3 + 8);
        v17 = v15 - *(_QWORD *)a3;
        if (v15 != *(_QWORD *)a3)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v17 >> 2) > 0x1555555555555555)
            sub_2394189F8();
          v13 = (char *)operator new(v17);
          *v6 = v13;
          v6[1] = v13;
          v6[2] = &v13[4 * (v17 >> 2)];
          v14 = 12 * ((v17 - 12) / 0xCuLL) + 12;
          memcpy(v13, v16, v14);
          v6[1] = &v13[v14];
        }
        v6 += 3;
        v12 -= 24;
      }
      while (v12);
      v6 = v33;
      a1 = v36;
    }
    a1[1] = v6;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v35 = (char **)a1;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v18 = &v11[24 * v7];
    v19 = 24 * a2;
    v37 = &v11[24 * v10];
    v34 = &v18[24 * a2];
    v20 = v18;
    do
    {
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      v24 = *(const void **)a3;
      v23 = *(_QWORD *)(a3 + 8);
      v25 = v23 - *(_QWORD *)a3;
      if (v23 != *(_QWORD *)a3)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v25 >> 2) > 0x1555555555555555)
          sub_2394189F8();
        v21 = (char *)operator new(v25);
        *(_QWORD *)v20 = v21;
        *((_QWORD *)v20 + 1) = v21;
        *((_QWORD *)v20 + 2) = &v21[4 * (v25 >> 2)];
        v22 = 12 * ((v25 - 12) / 0xCuLL) + 12;
        memcpy(v21, v24, v22);
        *((_QWORD *)v20 + 1) = &v21[v22];
      }
      v20 += 24;
      v19 -= 24;
    }
    while (v19);
    v27 = *v35;
    v26 = v35[1];
    if (v26 == *v35)
    {
      *v35 = v18;
      v35[1] = v34;
      v35[2] = v37;
    }
    else
    {
      do
      {
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        v18 -= 24;
        *((_QWORD *)v18 + 2) = 0;
        v28 = *(_OWORD *)(v26 - 24);
        v26 -= 24;
        *(_OWORD *)v18 = v28;
        *((_QWORD *)v18 + 2) = *((_QWORD *)v26 + 2);
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
      }
      while (v26 != v27);
      v29 = *v35;
      v26 = v35[1];
      *v35 = v18;
      v35[1] = v34;
      v35[2] = v37;
      if (v26 != v29)
      {
        v30 = v26;
        do
        {
          v32 = (void *)*((_QWORD *)v30 - 3);
          v30 -= 24;
          v31 = v32;
          if (v32)
          {
            *((_QWORD *)v26 - 2) = v31;
            operator delete(v31);
          }
          v26 = v30;
        }
        while (v30 != v29);
        v26 = v29;
      }
    }
    if (v26)
      operator delete(v26);
  }
}

void sub_23942A584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(a11 + 8) = v11;
  _Unwind_Resume(a1);
}

void sub_23942A590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  *(_QWORD *)(a11 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_23942A5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23942A5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = v14;
  sub_23942A5F4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_23942A5F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23942A660(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t **v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  int8x16_t *v13;
  int8x16_t **v14;
  float *v15;
  unsigned int v16;
  float v17;
  _DWORD **v18;
  _DWORD *v19;
  const void *v20;
  uint64_t v21;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 48);
  if ((_DWORD)v4 != v5)
  {
    v6 = **(_QWORD **)(a1 + 8);
    v7 = **(_QWORD **)(a1 + 24);
    if (v7)
    {
      v8 = **(_QWORD **)(a1 + 16);
      v9 = **(int8x16_t ****)(a1 + 32);
      v4 = (int)v4;
      while (1)
      {
        v10 = 0;
        v11 = *(_QWORD *)(v6 + 24 * v4);
        *(_DWORD *)v11 = v4;
        *(_DWORD *)(v11 + 12) = v4;
        v12 = *(float *)(v11 + 8);
        v13 = *(int8x16_t **)(v8 + 24 * v4);
        v14 = v9;
        do
        {
          v16 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8((*v14)[1], v13[1])), vcntq_s8(veorq_s8(**v14, *v13))), vaddq_s8(vcntq_s8(veorq_s8((*v14)[2], v13[2])), vcntq_s8(veorq_s8((*v14)[3], v13[3])))));
          v17 = (float)v16;
          if (v12 >= (float)v16)
          {
            *(_DWORD *)(v11 + 16) = *(_DWORD *)(v11 + 4);
            *(float *)(v11 + 20) = v12;
            *(_DWORD *)(v11 + 4) = v10;
            v15 = (float *)(v11 + 8);
            v12 = v17;
LABEL_7:
            *v15 = v17;
            goto LABEL_8;
          }
          if (*(float *)(v11 + 20) > v17)
          {
            *(_DWORD *)(v11 + 16) = v16;
            v15 = (float *)(v11 + 20);
            goto LABEL_7;
          }
LABEL_8:
          ++v10;
          v14 += 3;
        }
        while (v7 != v10);
        if ((_DWORD)++v4 == v5)
          goto LABEL_14;
      }
    }
    v18 = (_DWORD **)(v6 + 24 * (int)v4);
    do
    {
      v19 = *v18;
      v18 += 3;
      *v19 = v4;
      v19[3] = v4;
      LODWORD(v4) = v4 + 1;
    }
    while (v5 != (_DWORD)v4);
  }
LABEL_14:
  v20 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v20)
  {
    v21 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v21, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1070C40A25E4CCBLL);
  return 0;
}

void sub_23942A810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23942A824((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_23942A824(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1070C40A25E4CCBLL);
  }
  return a1;
}

uint64_t sub_23942A88C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void **)(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    free(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_23942A8DC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  void *v12;
  char *v13;
  void **v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void **v19;
  void **v20;
  void **v21;
  void *v22;
  BOOL v23;
  std::bad_alloc *exception;
  std::bad_alloc *v26;
  char *v27;
  void *memptr;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_2394189F8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_239418A80();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  v10 = *(unsigned int *)(a2 + 16);
  v11 = (v10 + 31) & 0x1FFFFFFE0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = v11;
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v11, 0x100BBD03uLL);
  v12 = memptr;
  *(_QWORD *)v8 = memptr;
  if (!v12)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v26 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v26, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v10)
    memcpy(v12, *(const void **)a2, v10);
  *((_DWORD *)v8 + 4) = *(_DWORD *)(a2 + 16);
  v13 = v8 + 24;
  v27 = v8 + 24;
  v15 = (char *)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
    v19 = (void **)a1[1];
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v8[v16 * 8];
      v18 = (char *)&v14[v16];
      *((_QWORD *)v17 - 3) = 0;
      *((_QWORD *)v17 - 2) = 0;
      *((_QWORD *)v17 - 3) = v14[v16 - 3];
      *((_QWORD *)v18 - 3) = 0;
      *((_QWORD *)v17 - 2) = v14[v16 - 2];
      *((_QWORD *)v18 - 2) = 0;
      *((_DWORD *)v17 - 2) = v14[v16 - 1];
      *((_DWORD *)v18 - 2) = 0;
      v16 -= 3;
    }
    while (&v14[v16] != (void **)v15);
    v19 = (void **)*a1;
    v14 = (void **)a1[1];
    v8 += v16 * 8;
    v13 = v27;
  }
  *a1 = v8;
  a1[1] = v13;
  a1[2] = v9;
  if (v14 != v19)
  {
    v20 = v14 - 3;
    v21 = v14 - 3;
    do
    {
      v22 = *v21;
      v21 -= 3;
      free(v22);
      v23 = v20 == v19;
      v20 = v21;
    }
    while (!v23);
    v14 = v19;
  }
  if (v14)
    operator delete(v14);
  return v13;
}

void sub_23942AADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_23942A88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23942AAF0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  int *v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD v19[2];
  __int128 v20;

  v6 = a2;
  v7 = *(int **)a1;
  v8 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  v9 = a2 >= v8;
  v10 = a2 - v8;
  if (v10 != 0 && v9)
  {
    sub_23942CB44(a1, v10);
    v7 = *(int **)a1;
  }
  else if (!v9)
  {
    *(_QWORD *)(a1 + 8) = &v7[v6];
  }
  *(_DWORD *)(a1 + 24) = a2;
  if (a2 >= 1)
  {
    v11 = 0;
    do
    {
      v7[v11] = v11;
      ++v11;
    }
    while (v11 < *(int *)(a1 + 24));
  }
  if (a3 <= 1)
    v12 = 1;
  else
    v12 = a3;
  v18 = v12;
  v13 = *(_QWORD *)(a1 + 8);
  if (v13 - (uint64_t)v7 >= 5)
  {
    v20 = xmmword_239EC6600;
    v14 = v13 - 4;
    if (v13 - 4 > (unint64_t)v7)
    {
      v15 = ((unint64_t)(v13 - (_QWORD)v7) >> 2) - 1;
      do
      {
        v19[0] = 0;
        v19[1] = v15;
        v16 = sub_23942CCE0((uint64_t)&v20, (uint64_t)&v18, v19);
        if (v16)
        {
          v17 = *v7;
          *v7 = v7[v16];
          v7[v16] = v17;
        }
        ++v7;
        --v15;
      }
      while ((unint64_t)v7 < v14);
    }
  }
  *(_DWORD *)(a1 + 28) = 0;
}

float sub_23942AC00(uint64_t a1, uint64_t a2)
{
  int v2;
  float result;
  int v4;

  *(_QWORD *)a1 = &off_250ADB918;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 8) = *(_WORD *)a2;
  v2 = *(_DWORD *)(a2 + 4);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 20) = result;
  v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 12) = v2;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 18);
  return result;
}

_QWORD *sub_23942AC54(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;

  *a1 = &off_250ADB918;
  v2 = a1[12];
  if (v2)
  {
    v3 = a1[13];
    v4 = (void *)a1[12];
    if (v3 != v2)
    {
      v5 = a1[13];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[12];
    }
    a1[13] = v2;
    operator delete(v4);
  }
  v8 = a1[9];
  if (v8)
  {
    v9 = a1[10];
    v10 = (void *)a1[9];
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)a1[9];
    }
    a1[10] = v8;
    operator delete(v10);
  }
  v14 = (void *)a1[6];
  if (v14)
  {
    a1[7] = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_23942AD58(_QWORD *a1)
{
  sub_23942AC54(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23942AD7C(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, _BYTE *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  int v33;
  int v34;

  v10 = *(unsigned __int8 *)(a1 + 26);
  v31 = 0;
  v32 = 0;
  __p = 0;
  sub_23942AAF0((uint64_t)&__p, a3, v10);
  ++*(_BYTE *)(a1 + 26);
  v11 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    v12 = 0;
LABEL_3:
    while (1)
    {
      v13 = (unsigned int *)__p;
      v14 = *a4;
      if ((_DWORD)v12)
        break;
      v28 = v34;
      if (v34 == v33)
        goto LABEL_17;
      ++v34;
      v29 = *((unsigned int *)__p + v28);
      if ((v29 & 0x80000000) != 0)
        goto LABEL_17;
      *(_DWORD *)(v14 + 4 * v12++) = *(_DWORD *)(a2 + 4 * v29);
      if (v12 == v11)
        goto LABEL_18;
    }
    while (1)
    {
      v15 = v34;
      if (v34 == v33)
        break;
      ++v34;
      v16 = v13[v15];
      if ((v16 & 0x80000000) != 0)
        break;
      v17 = 0;
      v18 = 0;
      v19 = *(unsigned int *)(a2 + 4 * v16);
      *(_DWORD *)(v14 + 4 * v12) = v19;
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 32);
      v22 = (int8x16_t *)(v20 + v21 * v19);
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[2];
      v26 = v22[3];
      do
      {
        v27 = (int8x16_t *)(v20 + v21 * *(unsigned int *)(v14 + 4 * v17));
        if (!vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v27[1], v24)), vcntq_s8(veorq_s8(*v27, v23))), vaddq_s8(vcntq_s8(veorq_s8(v27[2], v25)), vcntq_s8(veorq_s8(v27[3], v26))))))v18 = 1;
        ++v17;
      }
      while (v12 != v17);
      if ((v18 & 1) == 0)
      {
        if (++v12 != v11)
          goto LABEL_3;
        goto LABEL_18;
      }
    }
LABEL_17:
    LOBYTE(v11) = v12;
  }
LABEL_18:
  *a5 = v11;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
}

void sub_23942AEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23942AF10(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, unsigned int a5, void **a6)
{
  unsigned int v7;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  void *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unsigned int v39;
  uint64_t i;
  int8x16_t *v41;
  unsigned __int16 v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  unsigned int v48;

  v7 = a5;
  v11 = a3;
  v13 = (char *)*a6;
  v12 = (char *)a6[1];
  v14 = v12 - (_BYTE *)*a6;
  v15 = a3 - v14;
  if (a3 <= v14)
  {
    if (a3 < v14)
      a6[1] = &v13[a3];
  }
  else
  {
    v48 = a3;
    v16 = a6[2];
    if (v16 - v12 >= v15)
    {
      bzero(v12, a3 - v14);
      a6[1] = &v12[v15];
LABEL_32:
      a3 = v48;
      goto LABEL_33;
    }
    v17 = v16 - v13;
    v18 = 2 * v17;
    if (2 * v17 <= a3)
      v18 = a3;
    if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
      v19 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    v20 = (char *)operator new(v19);
    v44 = &v20[v19];
    v21 = v20;
    v45 = &v20[v11];
    v46 = &v20[v14];
    bzero(&v20[v14], v15);
    if (v12 != v13)
    {
      if (v14 < 8)
      {
        v22 = v46;
        goto LABEL_28;
      }
      v22 = v46;
      if ((unint64_t)(v13 - (_BYTE *)v21) >= 0x20)
      {
        if (v14 < 0x20)
        {
          v23 = 0;
          goto LABEL_23;
        }
        v23 = v14 & 0xFFFFFFFFFFFFFFE0;
        v24 = v12 - 16;
        v25 = (char *)v21 + v12 - 16 - v13;
        v26 = v14 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *(_OWORD *)v24;
          *((_OWORD *)v25 - 1) = *((_OWORD *)v24 - 1);
          *(_OWORD *)v25 = v27;
          v25 -= 32;
          v24 -= 32;
          v26 -= 32;
        }
        while (v26);
        if (v14 == v23)
          goto LABEL_30;
        if ((v14 & 0x18) != 0)
        {
LABEL_23:
          v22 = &v46[-(v14 & 0xFFFFFFFFFFFFFFF8)];
          v28 = &v12[-v23 - 8];
          v29 = (char *)(v28 - v13);
          v30 = v23 - (v14 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v31 = *(_QWORD *)v28;
            v28 -= 8;
            *(_QWORD *)&v29[(_QWORD)v21] = v31;
            v29 -= 8;
            v30 += 8;
          }
          while (v30);
          v12 -= v14 & 0xFFFFFFFFFFFFFFF8;
          if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_28;
LABEL_30:
          v12 = v13;
          *a6 = v21;
          a6[1] = v45;
          a6[2] = v44;
          v7 = a5;
          a3 = v48;
          if (!v13)
            goto LABEL_33;
          goto LABEL_31;
        }
        v22 = &v46[-v23];
        v12 -= v23;
      }
LABEL_28:
      v32 = v22 - 1;
      do
      {
        v33 = *--v12;
        *v32-- = v33;
      }
      while (v12 != v13);
      goto LABEL_30;
    }
    *a6 = v46;
    a6[1] = v45;
    a6[2] = v44;
    v7 = a5;
    a3 = v48;
    if (v12)
    {
LABEL_31:
      operator delete(v12);
      goto LABEL_32;
    }
  }
LABEL_33:
  if (a3)
  {
    if (v7 <= 1)
    {
      v43 = 0;
      do
        *((_BYTE *)*a6 + v43++) = 0;
      while (v11 != v43);
    }
    else
    {
      v34 = 0;
      do
      {
        v35 = *(_QWORD *)(a1 + 48);
        v36 = *(_QWORD *)(a1 + 32);
        v37 = (int8x16_t *)(v35 + v36 * *(unsigned int *)(a2 + 4 * v34));
        v38 = (int8x16_t *)(v35 + v36 * *(unsigned int *)*a4);
        v39 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v38[1], v37[1])), vcntq_s8(veorq_s8(*v38, *v37))), vaddq_s8(vcntq_s8(veorq_s8(v38[2], v37[2])), vcntq_s8(veorq_s8(v38[3], v37[3])))));
        *((_BYTE *)*a6 + v34) = 0;
        for (i = 1; i != v7; ++i)
        {
          v41 = (int8x16_t *)(*(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 32) * *(unsigned int *)(*a4 + 4 * i));
          v42 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v41[1], v37[1])), vcntq_s8(veorq_s8(*v41, *v37))), vaddq_s8(vcntq_s8(veorq_s8(v41[2], v37[2])), vcntq_s8(veorq_s8(v41[3], v37[3])))));
          if (v39 > v42)
          {
            *((_BYTE *)*a6 + v34) = i;
            v39 = v42;
          }
        }
        ++v34;
      }
      while (v34 != v11);
    }
  }
}

void sub_23942B250(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  int *v44;
  uint64_t v45;
  int v46;
  char *v47;
  _QWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  void *__p[3];
  unsigned __int8 v61;
  void *v62;
  char *v63;
  char *v64;

  v8 = *a2;
  *(_DWORD *)(v8 + 4) = a4;
  *(_BYTE *)(v8 + 40) = a5;
  if (*(_DWORD *)(a1 + 12) <= a4)
  {
    v17 = *(unsigned __int8 *)(a1 + 8);
    v63 = 0;
    v64 = 0;
    v62 = 0;
    if (v17)
    {
      v18 = 4 * v17;
      v19 = (char *)operator new(4 * v17);
      v20 = &v19[v18];
      v62 = v19;
      v64 = &v19[v18];
      bzero(v19, v18);
      v63 = v20;
    }
    v61 = 0;
    sub_23942AD7C(a1, a3, a4, (uint64_t *)&v62, &v61);
    if (v61 >= *(unsigned __int8 *)(a1 + 8))
    {
      memset(__p, 0, sizeof(__p));
      sub_23942AF10(a1, a3, a4, &v62, v61, __p);
      v27 = *a2;
      v28 = *(_QWORD *)(*a2 + 8);
      v29 = *(unsigned __int8 *)(a1 + 8);
      v30 = *(_QWORD *)(*a2 + 16);
      v31 = (v30 - v28) >> 4;
      v32 = v29 - v31;
      if (v29 <= v31)
      {
        if (v29 < v31)
        {
          v33 = v28 + 16 * v29;
          while (v30 != v33)
          {
            v34 = *(std::__shared_weak_count **)(v30 - 8);
            if (v34)
            {
              p_shared_owners = (unint64_t *)&v34->__shared_owners_;
              do
                v36 = __ldaxr(p_shared_owners);
              while (__stlxr(v36 - 1, p_shared_owners));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v34->__on_zero_shared)(v34, v32);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v30 -= 16;
          }
          *(_QWORD *)(v27 + 16) = v33;
        }
      }
      else
      {
        sub_23942D080(*a2 + 8, v32);
      }
      if (*(_BYTE *)(a1 + 8))
      {
        v37 = 0;
        v38 = 0;
        v39 = (a5 + 1);
        do
        {
          v40 = v38;
          if (a4)
          {
            v41 = __p[0];
            v42 = a4;
            v43 = __p[0];
            v44 = (int *)a3;
            do
            {
              if (v37 == *v43)
              {
                v45 = 4 * v38;
                v46 = *v44;
                *v44 = *(_DWORD *)(a3 + v45);
                *(_DWORD *)(a3 + v45) = v46;
                LOBYTE(v45) = *v43;
                *v43 = v41[v38];
                v41[v38++] = v45;
              }
              ++v44;
              ++v43;
              --v42;
            }
            while (v42);
          }
          v47 = (char *)operator new(0x48uLL);
          *((_QWORD *)v47 + 1) = 0;
          *((_QWORD *)v47 + 2) = 0;
          *(_QWORD *)v47 = &off_250ADB938;
          *(_OWORD *)(v47 + 40) = 0u;
          *(_OWORD *)(v47 + 56) = 0u;
          *(_OWORD *)(v47 + 24) = 0u;
          v48 = (_QWORD *)(*(_QWORD *)(*a2 + 8) + 16 * v37);
          v49 = (std::__shared_weak_count *)v48[1];
          *v48 = v47 + 24;
          v48[1] = v47;
          if (v49)
          {
            v50 = (unint64_t *)&v49->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          v52 = *(_OWORD *)(*(_QWORD *)(*a2 + 8) + 16 * v37);
          v53 = *(_QWORD *)(*(_QWORD *)(*a2 + 8) + 16 * v37);
          *(_DWORD *)v53 = *((_DWORD *)v62 + v37);
          *(_QWORD *)(v53 + 32) = 0;
          v59 = v52;
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
          if (*((_QWORD *)&v52 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          sub_23942B250(a1, &v59, a3 + 4 * v40, (v38 - v40), v39);
          if (v54)
          {
            v57 = (unint64_t *)&v54->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          ++v37;
        }
        while (v37 < *(unsigned __int8 *)(a1 + 8));
      }
      if (__p[0])
        operator delete(__p[0]);
    }
    else
    {
      *(_QWORD *)(*a2 + 32) = a3;
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
      v21 = *a2;
      v22 = *(_QWORD *)(*a2 + 8);
      for (i = *(_QWORD *)(*a2 + 16); i != v22; i -= 16)
      {
        v24 = *(std::__shared_weak_count **)(i - 8);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      *(_QWORD *)(v21 + 16) = v22;
    }
    if (v62)
      operator delete(v62);
  }
  else
  {
    *(_QWORD *)(v8 + 32) = a3;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v9 = *a2;
    v10 = *(_QWORD *)(*a2 + 8);
    for (j = *(_QWORD *)(*a2 + 16); j != v10; j -= 16)
    {
      v12 = *(std::__shared_weak_count **)(j - 8);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    *(_QWORD *)(v9 + 16) = v10;
  }
}

void sub_23942B668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_23942B6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t i;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  std::thread *v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  unsigned int v50;
  std::__thread_struct *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  std::thread *v55;
  uint64_t v56;
  void **v57;
  char *v58;
  _QWORD *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  pthread_t v69;
  void *v70;
  std::thread *v71;
  std::thread *v72;
  void *__p[2];
  char *v74;

  v4 = a1 + 48;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  __p[0] = 0;
  __p[1] = 0;
  v74 = 0;
  sub_23942C8A8(a2, (uint64_t)__p, 0, 0);
  v5 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 64) = v74;
  v6 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 32) = *(int *)(a2 + 16);
  v7 = *(float *)(a1 + 20);
  if (v7 <= 1.0)
  {
    v8 = (float)(v7 * (float)v6);
    if (v8 >= 0x1F4)
      v8 = 500;
    *(_DWORD *)(a1 + 16) = v8;
  }
  v10 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(a1 + 104);
  if (v9 != v10)
  {
    v11 = *(_QWORD *)(a1 + 104);
    do
    {
      v13 = *(void **)(v11 - 24);
      v11 -= 24;
      v12 = v13;
      if (v13)
      {
        *(_QWORD *)(v9 - 16) = v12;
        operator delete(v12);
      }
      v9 = v11;
    }
    while (v11 != v10);
  }
  v14 = (_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 104) = v10;
  for (i = *(_QWORD *)(a1 + 80); i != v15; i -= 16)
  {
    v17 = *(std::__shared_weak_count **)(i - 8);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  *(_QWORD *)(a1 + 80) = v15;
  v20 = *(unsigned __int8 *)(a1 + 9);
  v21 = *(unsigned int *)(a1 + 40);
  __p[1] = 0;
  v74 = 0;
  __p[0] = 0;
  if ((_DWORD)v21)
  {
    v22 = 4 * v21;
    v23 = (char *)operator new(4 * v21);
    v24 = &v23[v22];
    __p[0] = v23;
    v74 = &v23[v22];
    bzero(v23, v22);
    __p[1] = v24;
  }
  v26 = *(_QWORD *)(a1 + 96);
  v25 = *(_QWORD *)(a1 + 104);
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v26) >> 3);
  if (v20 <= v27)
  {
    if (v20 < v27)
    {
      v28 = v26 + 24 * v20;
      if (v25 != v28)
      {
        v29 = *(_QWORD *)(a1 + 104);
        do
        {
          v31 = *(void **)(v29 - 24);
          v29 -= 24;
          v30 = v31;
          if (v31)
          {
            *(_QWORD *)(v25 - 16) = v30;
            operator delete(v30);
          }
          v25 = v29;
        }
        while (v29 != v28);
      }
      *(_QWORD *)(a1 + 104) = v28;
    }
  }
  else
  {
    sub_23942D308((char **)(a1 + 96), v20 - v27, (uint64_t)__p);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v32 = *(unsigned __int8 *)(a1 + 9);
  v33 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(a1 + 80);
  v35 = (v34 - v33) >> 4;
  v36 = v32 - v35;
  if (v32 <= v35)
  {
    if (v32 < v35)
    {
      v37 = v33 + 16 * v32;
      while (v34 != v37)
      {
        v38 = *(std::__shared_weak_count **)(v34 - 8);
        if (v38)
        {
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v38->__on_zero_shared)(v38, v36);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v34 -= 16;
      }
      *(_QWORD *)(a1 + 80) = v37;
    }
  }
  else
  {
    sub_23942D080(a1 + 72, v36);
  }
  __p[0] = 0;
  __p[1] = 0;
  v74 = 0;
  v41 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v41)
  {
    sub_23942CB44((uint64_t)__p, v41);
    if (*(_DWORD *)(a1 + 40))
    {
      v42 = 0;
      v43 = __p[0];
      do
      {
        v43[v42] = v42;
        ++v42;
      }
      while (v42 < *(unsigned int *)(a1 + 40));
    }
  }
  v44 = *(unsigned __int8 *)(a1 + 24);
  if (v44 <= 1)
  {
    if (!*(_BYTE *)(a1 + 9))
      goto LABEL_80;
    v56 = 0;
    while (1)
    {
      v57 = (void **)(*(_QWORD *)(a1 + 96) + 24 * v56);
      if (v57 != __p)
        sub_23942156C(v57, (char *)__p[0], (char *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
      v58 = (char *)operator new(0x48uLL);
      *((_QWORD *)v58 + 1) = 0;
      *((_QWORD *)v58 + 2) = 0;
      *(_QWORD *)v58 = &off_250ADB938;
      *(_OWORD *)(v58 + 56) = 0u;
      *(_OWORD *)(v58 + 24) = 0u;
      *(_OWORD *)(v58 + 40) = 0u;
      v59 = (_QWORD *)(*v14 + 16 * v56);
      v60 = (std::__shared_weak_count *)v59[1];
      *v59 = v58 + 24;
      v59[1] = v58;
      if (!v60)
        goto LABEL_70;
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
        v68 = *(_OWORD *)(*v14 + 16 * v56);
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
        if (*((_QWORD *)&v68 + 1))
        {
LABEL_71:
          v64 = (unint64_t *)&v63->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
      }
      else
      {
LABEL_70:
        v68 = *(_OWORD *)(*v14 + 16 * v56);
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
        if (*((_QWORD *)&v68 + 1))
          goto LABEL_71;
      }
      sub_23942B250(a1, (uint64_t *)&v68, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24 * v56), *(_DWORD *)(a1 + 40), 0);
      if (v63)
      {
        v66 = (unint64_t *)&v63->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      if (++v56 >= (unint64_t)*(unsigned __int8 *)(a1 + 9))
        goto LABEL_80;
    }
  }
  v45 = v44;
  v46 = (std::thread *)operator new(8 * v44);
  v70 = v46;
  v72 = &v46[v44];
  bzero(v46, 8 * v44);
  v47 = 0;
  v71 = v72;
  do
  {
    v48 = *(unsigned __int8 *)(a1 + 9);
    v49 = *(unsigned __int8 *)(a1 + 24);
    if (v47 + 1 == v49)
      v50 = *(unsigned __int8 *)(a1 + 9);
    else
      v50 = (unsigned __int16)((v47 + 1) * v48) / v49;
    v51 = (std::__thread_struct *)operator new();
    std::__thread_struct::__thread_struct(v51);
    v52 = (_QWORD *)operator new();
    *v52 = v51;
    v52[1] = a1;
    v52[2] = __p;
    *((_DWORD *)v52 + 6) = (unsigned __int16)(v48 * v47) / v49;
    *((_DWORD *)v52 + 7) = v50;
    v53 = pthread_create(&v69, 0, (void *(__cdecl *)(void *))sub_23942D610, v52);
    if (v53)
    {
      std::__throw_system_error(v53, "thread constructor failed");
      __break(1u);
      return;
    }
    if (v46[v47].__t_)
      std::terminate();
    v46[v47].__t_ = v69;
    v69 = 0;
    std::thread::~thread((std::thread *)&v69);
    ++v47;
  }
  while (v47 != (_DWORD)v44);
  v54 = 8 * v44;
  v55 = v46;
  do
  {
    std::thread::join(v55++);
    v54 -= 8;
  }
  while (v54);
  do
    std::thread::~thread(&v46[--v45]);
  while (v45 * 8);
  operator delete(v70);
LABEL_80:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_23942BC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23942BD00(uint64_t a1, uint64_t a2, int8x16_t *a3, _DWORD *a4, uint64_t a5, uint64_t *a6, _DWORD *a7, _DWORD *a8, float *a9, float *a10)
{
  _DWORD *v10;
  _DWORD *v11;
  unsigned int **v15;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t v25;
  int8x16_t *v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t *v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  unsigned __int8 v35;
  unsigned int **v36;
  uint64_t i;
  unsigned int *v38;
  int8x16_t *v39;
  unsigned __int16 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  int v45;
  _DWORD *v46;
  _DWORD *v47;
  __int128 v50;

  v10 = a8;
  v11 = a7;
  v15 = *(unsigned int ***)(a2 + 8);
  if (v15 != *(unsigned int ***)(a2 + 16))
  {
    v17 = *(unsigned __int8 *)(a1 + 8);
    if (*(_BYTE *)(a1 + 8))
    {
      v18 = operator new(4 * v17);
      bzero(v18, 4 * v17);
    }
    else
    {
      v18 = 0;
    }
    v28 = *(_QWORD *)(a1 + 48);
    v29 = *(_QWORD *)(a1 + 32);
    v30 = (int8x16_t *)(v28 + v29 * **v15);
    v31 = *a3;
    v32 = a3[1];
    v33 = a3[2];
    v34 = a3[3];
    *v18 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v32, v30[1])), vcntq_s8(veorq_s8(*a3, *v30))), vaddq_s8(vcntq_s8(veorq_s8(v33, v30[2])), vcntq_s8(veorq_s8(v34, v30[3])))));
    if (v17 < 2)
    {
      v41 = 0;
      if (!(_DWORD)v17)
      {
LABEL_28:
        sub_23942BD00(a1, v15[(unint64_t)v41 / 8], a3, a4, a5, a6, v11, v10, a9, a10);
        operator delete(v18);
        return;
      }
    }
    else
    {
      v35 = 0;
      v36 = v15 + 2;
      for (i = 1; i != v17; ++i)
      {
        v38 = *v36;
        v36 += 2;
        v39 = (int8x16_t *)(v28 + v29 * *v38);
        v40 = vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(v39[1], v32)), vcntq_s8(veorq_s8(*v39, v31))), vaddq_s8(vcntq_s8(veorq_s8(v39[2], v33)), vcntq_s8(veorq_s8(v39[3], v34)))));
        v18[i] = v40;
        if (v40 < v18[v35])
          v35 = i;
      }
      v41 = 16 * v35;
    }
    v46 = v11;
    v47 = v10;
    v42 = 0;
    v43 = 0;
    v44 = v18;
    do
    {
      if (v41 != v42)
      {
        v45 = *v44;
        *(_QWORD *)&v50 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + v42);
        DWORD2(v50) = v45;
        sub_23942C048(a5, &v50);
        LODWORD(v17) = *(unsigned __int8 *)(a1 + 8);
      }
      ++v43;
      v42 += 16;
      ++v44;
    }
    while (v43 < v17);
    v15 = *(unsigned int ***)(a2 + 8);
    v11 = v46;
    v10 = v47;
    goto LABEL_28;
  }
  if (*a4 < *(_DWORD *)(a1 + 16))
  {
    v19 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = *(_QWORD *)(a2 + 32);
      v22 = *a6;
      do
      {
        v24 = *(unsigned int *)(v21 + 4 * v20);
        v25 = *(_QWORD *)(v22 + 8 * (v24 >> 6));
        if (((1 << v24) & v25) != 0)
          goto LABEL_10;
        v26 = (int8x16_t *)(*(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 32) * v24);
        v27 = (float)vaddlvq_u8((uint8x16_t)vaddq_s8(vaddq_s8(vcntq_s8(veorq_s8(a3[1], v26[1])), vcntq_s8(veorq_s8(*a3, *v26))), vaddq_s8(vcntq_s8(veorq_s8(a3[2], v26[2])), vcntq_s8(veorq_s8(a3[3], v26[3])))));
        if (*a9 >= v27)
        {
          *a10 = *a9;
          *a9 = v27;
          *a8 = *a7;
          v23 = a7;
        }
        else
        {
          if (*a10 <= v27)
            goto LABEL_9;
          *a10 = v27;
          v23 = a8;
        }
        *v23 = v24;
LABEL_9:
        ++*a4;
        *(_QWORD *)(v22 + 8 * (v24 >> 6)) = (1 << v24) | v25;
        v19 = *(unsigned int *)(a2 + 4);
LABEL_10:
        ++v20;
      }
      while (v20 < v19);
    }
  }
}

void sub_23942C020(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23942C034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23942C048(uint64_t a1, _OWORD *a2)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;

  if (*(_DWORD *)(a1 + 28) != *(_DWORD *)(a1 + 24))
  {
    v5 = *(_DWORD **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v4)
    {
      v7 = *(_DWORD **)a1;
      v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        sub_2394189F8();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 3 > v9)
        v9 = v10 >> 3;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 60)
          sub_239418A80();
        v12 = (char *)operator new(16 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * v8];
      *(_OWORD *)v13 = *a2;
      v6 = v13 + 16;
      if (v5 != v7)
      {
        do
        {
          v14 = *((_QWORD *)v5 - 2);
          v5 -= 4;
          v15 = v5[2];
          *((_QWORD *)v13 - 2) = v14;
          v13 -= 16;
          *((_DWORD *)v13 + 2) = v15;
        }
        while (v5 != v7);
        v5 = *(_DWORD **)a1;
      }
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = &v12[16 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_OWORD *)v5 = *a2;
      v6 = v5 + 4;
    }
    *(_QWORD *)(a1 + 8) = v6;
    v16 = *(_DWORD **)a1;
    v17 = (uint64_t)v6 - *(_QWORD *)a1;
    if (v17 >= 17)
    {
      v18 = (((unint64_t)v17 >> 4) - 2) >> 1;
      v19 = *(v6 - 2);
      if (v19 < v16[4 * v18 + 2])
      {
        v22 = *((_QWORD *)v6 - 2);
        v21 = v6 - 4;
        v20 = v22;
        do
        {
          v23 = v21;
          v21 = &v16[4 * v18];
          v24 = *(_QWORD *)v21;
          v23[2] = v21[2];
          *(_QWORD *)v23 = v24;
          if (!v18)
            break;
          v18 = (v18 - 1) >> 1;
        }
        while (v19 < v16[4 * v18 + 2]);
        *(_QWORD *)v21 = v20;
        v21[2] = v19;
      }
    }
    ++*(_DWORD *)(a1 + 28);
  }
}

void sub_23942C1CC(uint64_t a1, int8x16_t *a2, _DWORD *a3, _DWORD *a4, float *a5, float *a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  void *__p;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  _BYTE *v42;
  char *v43;
  int v44;
  int v45;
  __int128 v46;

  v12 = *(int *)(a1 + 40);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v44 = v12;
  if (!(_DWORD)v12)
  {
    v45 = 0;
    __p = 0;
    v39 = 0;
    v40 = 0;
    v37 = 0;
    if (!*(_BYTE *)(a1 + 9))
      goto LABEL_27;
LABEL_6:
    v13 = 0;
    v14 = 0;
    do
    {
      sub_23942BD00(a1, *(_QWORD *)(*(_QWORD *)(a1 + 72) + v13), a2, &v37, (uint64_t)&v41, (uint64_t *)&__p, a3, a4, a5, a6);
      ++v14;
      v13 += 16;
    }
    while (v14 < *(unsigned __int8 *)(a1 + 9));
    goto LABEL_27;
  }
  if ((v12 & 0x80000000) != 0)
    sub_2394189F8();
  v41 = operator new(16 * v12);
  v42 = v41;
  v43 = (char *)v41 + 16 * v12;
  v45 = 0;
  __p = operator new(8 * ((((unint64_t)v12 - 1) >> 6) + 1));
  v39 = 0;
  v40 = (((unint64_t)v12 - 1) >> 6) + 1;
  sub_23942D8C8(&__p, v12, 0);
  v37 = 0;
  if (*(_BYTE *)(a1 + 9))
    goto LABEL_6;
LABEL_27:
  while (1)
  {
    v36 = v45;
    if (!v45)
      break;
    v15 = (char *)v41;
    v16 = v42;
    v17 = *(_QWORD *)v41;
    if (v42 - (_BYTE *)v41 >= 17)
    {
      v18 = 0;
      v19 = (v42 - (_BYTE *)v41) >> 4;
      v46 = *(_OWORD *)v41;
      v20 = v41;
      do
      {
        v22 = (char *)&v20[4 * v18 + 4];
        v23 = (2 * v18) | 1;
        v24 = 2 * v18 + 2;
        if (v24 < v19)
        {
          v25 = *((_DWORD *)v22 + 6);
          v26 = *((_DWORD *)v22 + 2);
          v22 += 16 * (v25 < v26);
          if (v25 < v26)
            v23 = v24;
        }
        v21 = *(_QWORD *)v22;
        v20[2] = *((_DWORD *)v22 + 2);
        *(_QWORD *)v20 = v21;
        v20 = v22;
        v18 = v23;
      }
      while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
      v27 = v16 - 16;
      if (v22 == v27)
      {
        v35 = v46;
        *((_DWORD *)v22 + 2) = DWORD2(v46);
        *(_QWORD *)v22 = v35;
      }
      else
      {
        v28 = *(_QWORD *)v27;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v27 + 2);
        *(_QWORD *)v22 = v28;
        *(_QWORD *)v27 = v46;
        *((_DWORD *)v27 + 2) = DWORD2(v46);
        v29 = v22 - v15 + 16;
        if (v29 >= 17)
        {
          v30 = (((unint64_t)v29 >> 4) - 2) >> 1;
          v31 = *((_DWORD *)v22 + 2);
          if (v31 < *(_DWORD *)&v15[16 * v30 + 8])
          {
            v32 = *(_QWORD *)v22;
            do
            {
              v33 = v22;
              v22 = &v15[16 * v30];
              v34 = *(_QWORD *)v22;
              *((_DWORD *)v33 + 2) = *((_DWORD *)v22 + 2);
              *(_QWORD *)v33 = v34;
              if (!v30)
                break;
              v30 = (v30 - 1) >> 1;
            }
            while (v31 < *(_DWORD *)&v15[16 * v30 + 8]);
            *(_QWORD *)v22 = v32;
            *((_DWORD *)v22 + 2) = v31;
          }
        }
      }
      v16 = v42;
      v36 = v45;
    }
    v42 = v16 - 16;
    v45 = v36 - 1;
    if (v37 >= *(_DWORD *)(a1 + 16))
      break;
    sub_23942BD00(a1, v17, a2, &v37, (uint64_t)&v41, (uint64_t *)&__p, a3, a4, a5, a6);
  }
  if (__p)
    operator delete(__p);
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
}

void sub_23942C4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23942C4E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  std::thread *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  std::__thread_struct *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  std::thread *v23;
  uint64_t i;
  uint64_t v25;
  pthread_t v27;
  void *__p[2];
  std::thread *v29;
  void *v30[2];
  std::thread *v31;

  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  sub_23942C8A8(a2, (uint64_t)__p, 0, 0);
  v5 = *(unsigned int *)(a2 + 8);
  *(_OWORD *)v30 = *(_OWORD *)__p;
  v31 = v29;
  v6 = (char *)operator new(0x18uLL);
  __p[1] = v6 + 24;
  v29 = (std::thread *)(v6 + 24);
  *(_QWORD *)v6 = 0;
  *((_DWORD *)v6 + 2) = 1333788672;
  *(_QWORD *)(v6 + 12) = 0;
  *((_DWORD *)v6 + 5) = 1333788672;
  __p[0] = v6;
  v7 = a3[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a3) >> 3);
  if (v5 <= v8)
  {
    if (v5 < v8)
    {
      v9 = *a3 + 24 * v5;
      if (v7 != v9)
      {
        v10 = a3[1];
        do
        {
          v12 = *(void **)(v10 - 24);
          v10 -= 24;
          v11 = v12;
          if (v12)
          {
            *(_QWORD *)(v7 - 16) = v11;
            operator delete(v11);
          }
          v7 = v10;
        }
        while (v10 != v9);
      }
      a3[1] = v9;
    }
  }
  else
  {
    sub_23942A264(a3, v5 - v8, (uint64_t)__p);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v13 = *(unsigned __int8 *)(a1 + 25);
  if (v13 <= 1)
  {
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v25 = *(_QWORD *)(*a3 + 24 * i);
        *(_DWORD *)v25 = i;
        *(_DWORD *)(v25 + 12) = i;
        sub_23942C1CC(a1, (int8x16_t *)((char *)v30[0] + *(_QWORD *)(a1 + 32) * i), (_DWORD *)(v25 + 4), (_DWORD *)(v25 + 16), (float *)(v25 + 8), (float *)(v25 + 20));
      }
    }
  }
  else
  {
    v14 = v13;
    v15 = (std::thread *)operator new(8 * v13);
    __p[0] = v15;
    v29 = &v15[v13];
    bzero(v15, 8 * v13);
    v16 = 0;
    __p[1] = &v15[v13];
    do
    {
      v17 = *(unsigned __int8 *)(a1 + 25);
      if (v16 + 1 == v17)
        v18 = v5;
      else
        v18 = (v16 + 1) * (int)v5 / v17;
      v19 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v19);
      v20 = (_QWORD *)operator new();
      *v20 = v19;
      v20[1] = a3;
      v20[2] = a1;
      v20[3] = v30;
      *((_DWORD *)v20 + 8) = (int)v5 * v16 / v17;
      *((_DWORD *)v20 + 9) = v18;
      v21 = pthread_create(&v27, 0, (void *(__cdecl *)(void *))sub_23942DA2C, v20);
      if (v21)
      {
        std::__throw_system_error(v21, "thread constructor failed");
        __break(1u);
        return;
      }
      if (v15[v16].__t_)
        std::terminate();
      v15[v16].__t_ = v27;
      v27 = 0;
      std::thread::~thread((std::thread *)&v27);
      ++v16;
    }
    while (v16 != (_DWORD)v13);
    v22 = 8 * v13;
    v23 = v15;
    do
    {
      std::thread::join(v23++);
      v22 -= 8;
    }
    while (v22);
    do
      std::thread::~thread(&v15[--v14]);
    while (v14 * 8);
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
}

void sub_23942C7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23942C8A8(uint64_t a1, uint64_t a2, char a3, unsigned int a4)
{
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  char *v42;
  char *v43;
  unint64_t v44;
  char *v45;
  char *v46;

  sub_239429CA8(a1, a3, &v45);
  if (a4)
    v7 = a4;
  else
    v7 = ((unint64_t)(v46 - v45) >> 2);
  v8 = *(unsigned int *)(a1 + 16);
  v9 = (v7 * v8);
  v11 = *(char **)a2;
  v10 = *(char **)(a2 + 8);
  v12 = &v10[-*(_QWORD *)a2];
  v13 = v9 - (_QWORD)v12;
  if (v9 <= (unint64_t)v12)
    goto LABEL_33;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14 - (uint64_t)v10 >= v13)
  {
    bzero(*(void **)(a2 + 8), v9 - (_QWORD)v12);
    *(_QWORD *)(a2 + 8) = &v10[v13];
    goto LABEL_33;
  }
  v44 = (unint64_t)&v10[-*(_QWORD *)a2];
  v15 = v14 - (_QWORD)v11;
  v16 = 2 * v15;
  if (2 * v15 <= v9)
    v16 = (v7 * v8);
  if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v16;
  v18 = (char *)operator new(v17);
  v19 = &v18[v17];
  v42 = v18;
  v43 = &v18[v9];
  v20 = &v18[v44];
  bzero(&v18[v44], v13);
  if (v10 != v11)
  {
    if (v44 < 8)
    {
      v21 = v42;
      v22 = v43;
      goto LABEL_29;
    }
    v21 = v42;
    v22 = v43;
    if ((unint64_t)(v11 - v42) >= 0x20)
    {
      if (v44 < 0x20)
      {
        v23 = 0;
        goto LABEL_24;
      }
      v23 = v44 & 0xFFFFFFFFFFFFFFE0;
      v24 = v10 - 16;
      v25 = &v42[v10 - 16 - v11];
      v26 = v44 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v27 = *(_OWORD *)v24;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v24 - 1);
        *(_OWORD *)v25 = v27;
        v25 -= 32;
        v24 -= 32;
        v26 -= 32;
      }
      while (v26);
      if (v44 == v23)
        goto LABEL_31;
      if ((v44 & 0x18) != 0)
      {
LABEL_24:
        v20 -= v44 & 0xFFFFFFFFFFFFFFF8;
        v28 = &v10[-v23 - 8];
        v29 = (char *)(v28 - v11);
        v30 = v23 - (v44 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v31 = *(_QWORD *)v28;
          v28 -= 8;
          *(_QWORD *)&v29[(_QWORD)v42] = v31;
          v29 -= 8;
          v30 += 8;
        }
        while (v30);
        v10 -= v44 & 0xFFFFFFFFFFFFFFF8;
        if (v44 != (v44 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_29;
LABEL_31:
        v10 = v11;
        *(_QWORD *)a2 = v21;
        *(_QWORD *)(a2 + 8) = v22;
        *(_QWORD *)(a2 + 16) = v19;
        if (!v11)
          goto LABEL_33;
        goto LABEL_32;
      }
      v20 -= v23;
      v10 -= v23;
    }
LABEL_29:
    v32 = v20 - 1;
    do
    {
      v33 = *--v10;
      *v32-- = v33;
    }
    while (v10 != v11);
    goto LABEL_31;
  }
  *(_QWORD *)a2 = v20;
  *(_QWORD *)(a2 + 8) = v43;
  *(_QWORD *)(a2 + 16) = v19;
  if (v10)
LABEL_32:
    operator delete(v10);
LABEL_33:
  v34 = v45;
  v35 = v46;
  if (v45 == v46 || (_DWORD)v7 == 0 || (_DWORD)v8 == 0)
  {
    if (!v45)
      return;
    goto LABEL_42;
  }
  v38 = 0;
  v39 = v45 + 4;
  v40 = 1;
  do
  {
    memmove((void *)(*(_QWORD *)a2 + v38), *(const void **)(*(_QWORD *)(a1 + 72) + 24 * *((unsigned int *)v39 - 1)), v8);
    if (v39 == v35)
      break;
    v38 += v8;
    v39 += 4;
  }
  while (v40++ < v7);
  v34 = v45;
  if (v45)
  {
LABEL_42:
    v46 = v34;
    operator delete(v34);
  }
}

void sub_23942CB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_23942CB44(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_2394189F8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_239418A80();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_23942CCE0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      v19 = a2;
      v20 = xmmword_239EC6610;
      v21 = xmmword_239EC6620;
      v22 = xmmword_239EC6630;
      v23 = 0x3FFFFF001FFFFFLL;
      return sub_23942CE94((uint64_t)&v19);
    }
    v7 = __clz(v5);
    v8 = 63;
    if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = 64;
    v9 = v8 - v7;
    v19 = a2;
    *(_QWORD *)&v20 = v9;
    v10 = (v8 - v7);
    v11 = (137 * v10) >> 12;
    if ((_BYTE)v9 == 30 * (_BYTE)v11)
      v12 = (137 * v10) >> 12;
    else
      v12 = v11 + 1;
    v13 = v10 / v12;
    *((_QWORD *)&v20 + 1) = v13;
    *(_QWORD *)&v21 = v12;
    v14 = (-1 << v13) & 0x7FFFFFFE;
    if (v13 >= 0x40)
      v14 = 0;
    *(_QWORD *)&v22 = v14;
    if ((v14 ^ 0x7FFFFFFEuLL) > v14 / v12)
    {
      v13 = v10 / ++v12;
      *((_QWORD *)&v20 + 1) = v13;
      *(_QWORD *)&v21 = v12;
      if (v13 > 0x3F)
      {
        *((_QWORD *)&v21 + 1) = v12 - (v9 - v13 * v12);
        *(_QWORD *)&v22 = 0;
        LODWORD(v13) = 64;
        goto LABEL_22;
      }
      *(_QWORD *)&v22 = (-1 << v13) & 0x7FFFFFFE;
    }
    *((_QWORD *)&v21 + 1) = v12 - v10 % v12;
    if (v13 < 0x3F)
    {
      *((_QWORD *)&v22 + 1) = 0x3FFFFFFFuLL >> v13 << (v13 + 1);
      v15 = 0xFFFFFFFF >> -(char)v13;
      if (!v13)
        v15 = 0;
      LODWORD(v23) = v15;
      if (v13 >= 0x1F)
        v16 = -1;
      else
        v16 = 0xFFFFFFFF >> ~(_BYTE)v13;
      goto LABEL_23;
    }
LABEL_22:
    *((_QWORD *)&v22 + 1) = 0;
    v17 = -(int)v13;
    v16 = -1;
    LODWORD(v23) = 0xFFFFFFFF >> v17;
LABEL_23:
    HIDWORD(v23) = v16;
    do
      v18 = sub_23942CE94((uint64_t)&v19);
    while (v18 >= v5);
    return *a3 + v18;
  }
  return result;
}

uint64_t sub_23942CE94(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    result = 0;
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      return result;
    goto LABEL_20;
  }
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 56);
  v6 = **(_DWORD **)a1;
  if (v4 >= 0x40)
  {
    v16 = 0;
    do
    {
      v17 = v6 / 0xADC8;
      v18 = 48271 * (v6 % 0xADC8);
      v17 *= 3399;
      v11 = v18 >= v17;
      v19 = v18 - v17;
      if (v11)
        v20 = 0;
      else
        v20 = 0x7FFFFFFF;
      v6 = v20 + v19;
      v21 = v6 - 1;
    }
    while (v3 <= v21 || ++v16 != v2);
    result = v5 & v21;
  }
  else
  {
    result = 0;
    v8 = 0;
    while (1)
    {
      v9 = v6 / 0xADC8;
      v10 = 48271 * (v6 % 0xADC8);
      v9 *= 3399;
      v11 = v10 >= v9;
      v12 = v10 - v9;
      if (v11)
        v13 = 0;
      else
        v13 = 0x7FFFFFFF;
      v6 = v13 + v12;
      v14 = v6 - 1;
      if (v3 > v14)
      {
        result = (result << v4) + (v5 & v14);
        if (++v8 == v2)
          break;
      }
    }
  }
  **(_DWORD **)a1 = v6;
  v15 = *(_QWORD *)(a1 + 24);
  if (v2 < v15)
  {
LABEL_20:
    v22 = *(unsigned int **)a1;
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(a1 + 60);
    v26 = *v22;
    if (v24 >= 0x3F)
    {
      do
      {
        v33 = v26 / 0xADC8;
        v34 = 48271 * (v26 % 0xADC8);
        v33 *= 3399;
        v11 = v34 >= v33;
        v35 = v34 - v33;
        if (v11)
          v36 = 0;
        else
          v36 = 0x7FFFFFFF;
        v26 = v36 + v35;
        v37 = v26 - 1;
      }
      while (v23 <= v37 || ++v2 != v15);
      result = v25 & v37;
      *v22 = v26;
    }
    else
    {
      v27 = v24 + 1;
      while (1)
      {
        v28 = v26 / 0xADC8;
        v29 = 48271 * (v26 % 0xADC8);
        v28 *= 3399;
        v11 = v29 >= v28;
        v30 = v29 - v28;
        if (v11)
          v31 = 0;
        else
          v31 = 0x7FFFFFFF;
        v26 = v31 + v30;
        v32 = v26 - 1;
        if (v23 > v32)
        {
          result = (result << v27) + (v25 & v32);
          if (++v2 == v15)
            break;
        }
      }
      *v22 = v26;
    }
  }
  return result;
}

void sub_23942D080(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_2394189F8();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_239418A80();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5)
LABEL_27:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v6);
      v18 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5 != v18)
      {
        do
        {
          v19 = (std::__shared_weak_count *)*(v5 - 1);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v5 -= 2;
        }
        while (v5 != v18);
        v5 = v18;
      }
      if (v5)
        goto LABEL_27;
    }
  }
}

void sub_23942D214(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23942D224(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23942D254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 40) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v1);
      v8 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 40) = v1;
      operator delete(v8);
    }
  }
}

void sub_23942D308(char **a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  const void *v26;
  int64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  void *v34;
  void *v35;
  char *v36;

  v6 = a1[2];
  v7 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        v17 = *(const void **)a3;
        v16 = *(_QWORD *)(a3 + 8);
        v18 = v16 - *(_QWORD *)a3;
        if (v16 != *(_QWORD *)a3)
        {
          if (v18 < 0)
            sub_2394189F8();
          v19 = (char *)operator new(v16 - *(_QWORD *)a3);
          *(_QWORD *)v7 = v19;
          *((_QWORD *)v7 + 1) = v19;
          v15 = &v19[4 * (v18 >> 2)];
          *((_QWORD *)v7 + 2) = v15;
          memcpy(v19, v17, v18);
          *((_QWORD *)v7 + 1) = v15;
        }
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_2394189F8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_239418A80();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v20 = &v12[24 * v8];
    v36 = &v12[24 * v11];
    v21 = 24 * a2;
    v22 = &v20[24 * a2];
    v23 = v20;
    do
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      v26 = *(const void **)a3;
      v25 = *(_QWORD *)(a3 + 8);
      v27 = v25 - *(_QWORD *)a3;
      if (v25 != *(_QWORD *)a3)
      {
        if (v27 < 0)
          sub_2394189F8();
        v28 = (char *)operator new(v25 - *(_QWORD *)a3);
        *(_QWORD *)v23 = v28;
        *((_QWORD *)v23 + 1) = v28;
        v24 = &v28[4 * (v27 >> 2)];
        *((_QWORD *)v23 + 2) = v24;
        memcpy(v28, v26, v27);
        *((_QWORD *)v23 + 1) = v24;
      }
      v23 += 24;
      v21 -= 24;
    }
    while (v21);
    v30 = *a1;
    v29 = a1[1];
    if (v29 == *a1)
    {
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
    }
    else
    {
      do
      {
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        v20 -= 24;
        *((_QWORD *)v20 + 2) = 0;
        v31 = *(_OWORD *)(v29 - 24);
        v29 -= 24;
        *(_OWORD *)v20 = v31;
        *((_QWORD *)v20 + 2) = *((_QWORD *)v29 + 2);
        *(_QWORD *)v29 = 0;
        *((_QWORD *)v29 + 1) = 0;
        *((_QWORD *)v29 + 2) = 0;
      }
      while (v29 != v30);
      v32 = *a1;
      v29 = a1[1];
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
      if (v29 != v32)
      {
        v33 = v29;
        do
        {
          v35 = (void *)*((_QWORD *)v33 - 3);
          v33 -= 24;
          v34 = v35;
          if (v35)
          {
            *((_QWORD *)v29 - 2) = v34;
            operator delete(v34);
          }
          v29 = v33;
        }
        while (v33 != v32);
        v29 = v32;
      }
    }
    if (v29)
      operator delete(v29);
  }
}

void sub_23942D5A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23942D5B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_23942D5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23942A5F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23942D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a12 = v12;
  sub_23942A5F4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_23942D610(uint64_t a1)
{
  uint64_t v1;
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char **v8;
  char *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  __int128 v23;

  v1 = a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_DWORD *)(v1 + 28);
  v5 = *(int *)(v1 + 24);
  if ((_DWORD)v5 == v4)
  {
LABEL_21:
    v19 = *(const void **)v1;
    *(_QWORD *)v1 = 0;
    if (v19)
    {
      v20 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v20, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v1, 0x1020C4016EE4530);
    return 0;
  }
  v6 = *(_QWORD *)(v1 + 8);
  do
  {
    v7 = *(char ***)(v1 + 16);
    v8 = (char **)(*(_QWORD *)(v6 + 96) + 24 * v5);
    if (v8 != v7)
      sub_23942156C(v8, *v7, v7[1], (v7[1] - *v7) >> 2);
    v9 = (char *)operator new(0x48uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_250ADB938;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    v10 = (_QWORD *)(*(_QWORD *)(v6 + 72) + 16 * v5);
    v11 = (std::__shared_weak_count *)v10[1];
    *v10 = v9 + 24;
    v10[1] = v9;
    if (!v11)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v23 = *(_OWORD *)(*(_QWORD *)(v6 + 72) + 16 * v5);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (!*((_QWORD *)&v23 + 1))
        goto LABEL_13;
    }
    else
    {
LABEL_10:
      v23 = *(_OWORD *)(*(_QWORD *)(v6 + 72) + 16 * v5);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (!*((_QWORD *)&v23 + 1))
        goto LABEL_13;
    }
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
LABEL_13:
    sub_23942B250(v6, (uint64_t *)&v23, *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24 * v5), *(_DWORD *)(v6 + 40), 0);
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    ++v5;
  }
  while (v4 != (_DWORD)v5);
  v1 = a1;
  if (a1)
    goto LABEL_21;
  return 0;
}

void sub_23942D800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23942D860((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_23942D860(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1020C4016EE4530);
  }
  return a1;
}

void sub_23942D8C8(_QWORD *a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = a2;
  v4 = a1[1];
  v5 = v4 + a2;
  a1[1] = v4 + a2;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  if (a2)
  {
    v7 = (_QWORD *)(*a1 + 8 * (v4 >> 6));
    v8 = v4 & 0x3F;
    if (a3)
    {
      if ((v4 & 0x3F) != 0)
      {
        v9 = (64 - v8);
        if (v9 >= a2)
          v10 = a2;
        else
          v10 = v9;
        *v7++ |= (0xFFFFFFFFFFFFFFFFLL >> (v9 - v10)) & (-1 << v4);
        v3 = a2 - v10;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        memset(v7, 255, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] | (0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
LABEL_27:
        v7[v11] = v12;
      }
    }
    else
    {
      if ((v4 & 0x3F) != 0)
      {
        v13 = (64 - v8);
        if (v13 >= a2)
          v14 = a2;
        else
          v14 = v13;
        *v7++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (v13 - v14)) & (-1 << v4));
        v3 = a2 - v14;
      }
      v11 = v3 >> 6;
      if (v3 >= 0x40)
        bzero(v7, 8 * (v3 >> 6));
      if ((v3 & 0x3F) != 0)
      {
        v12 = v7[v11] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v3 & 0x3F));
        goto LABEL_27;
      }
    }
  }
}

uint64_t sub_23942DA2C(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_DWORD *)(a1 + 36);
  v5 = *(int *)(a1 + 32);
  if ((_DWORD)v5 != v4)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = 24 * v5;
    do
    {
      v8 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + v7);
      *(_DWORD *)v8 = v5;
      *(_DWORD *)(v8 + 12) = v5;
      sub_23942C1CC(v6, (int8x16_t *)(**(_QWORD **)(a1 + 24) + *(_QWORD *)(v6 + 32) * v5++), (_DWORD *)(v8 + 4), (_DWORD *)(v8 + 16), (float *)(v8 + 8), (float *)(v8 + 20));
      v7 += 24;
    }
    while (v4 != (_DWORD)v5);
  }
  v9 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    v10 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v10, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x1020C40DBF2485DLL);
  return 0;
}

void sub_23942DB20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23942DB48((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_23942DB34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23942DB48((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_23942DB48(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1020C40DBF2485DLL);
  }
  return a1;
}

uint64_t sub_23942DBB0(uint64_t result, __int128 *a2, char a3, float a4)
{
  __int128 v4;

  *(_QWORD *)result = &off_250ADB970;
  *(_WORD *)(result + 8) = 1052;
  *(_QWORD *)(result + 12) = 0x3E99999A00000064;
  *(_DWORD *)(result + 20) = 500;
  *(_WORD *)(result + 24) = 257;
  *(_BYTE *)(result + 26) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  v4 = *a2;
  *(_DWORD *)(result + 23) = *(_DWORD *)((char *)a2 + 15);
  *(_OWORD *)(result + 8) = v4;
  *(_BYTE *)(result + 28) = a3;
  *(float *)(result + 32) = a4;
  *(_WORD *)(result + 36) = *((_WORD *)a2 + 8);
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  return result;
}

void sub_23942DC20(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)a1[6];
  a1[5] = v6;
  a1[6] = v5;
  if (!v9)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v13 = *a3;
    v12 = a3[1];
    if (!v12)
      goto LABEL_11;
  }
  else
  {
LABEL_8:
    v13 = *a3;
    v12 = a3[1];
    if (!v12)
      goto LABEL_11;
  }
  v14 = (unint64_t *)(v12 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_11:
  v16 = (std::__shared_weak_count *)a1[8];
  a1[7] = v13;
  a1[8] = v12;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

uint64_t sub_23942DD10(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  BOOL v4;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __n128 v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  unsigned __int8 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  void *v36;
  char *v37;
  _QWORD *v38;
  void *v39;
  char *v40;
  void *v41;
  void *v42;
  void *v44;
  char *v45;
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  void *__p[2];
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  if (*(_DWORD *)(a2 + 20))
    v4 = *(_DWORD *)(a3 + 20) == 0;
  else
    v4 = 1;
  if (v4)
    sub_239EBEE80();
  if (*(_DWORD *)(a2 + 16) != 64 || *(_DWORD *)(a3 + 16) != 64)
    sub_239EBEEB0();
  v51 = 0uLL;
  v52 = 0;
  sub_239429CA8(a2, 0, (char **)__p);
  if ((_QWORD)v51)
  {
    *((_QWORD *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  v51 = *(_OWORD *)__p;
  v52 = v50;
  __p[0] = 0;
  __p[1] = 0;
  v50 = 0;
  sub_239429CA8(a3, 0, (char **)v47);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = *(_OWORD *)v47;
  v50 = v48;
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  v9 = *(_QWORD *)(a1 + 56);
  if (!v9)
  {
    v10 = operator new(0x90uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_250ADB9A0;
    v11.n128_f32[0] = sub_23942AC00((uint64_t)(v10 + 3), a1 + 8);
    v12 = *(std::__shared_weak_count **)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v10;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_23942B6B0(*(_QWORD *)(a1 + 56), a3);
    v9 = *(_QWORD *)(a1 + 56);
  }
  sub_23942C4E4(v9, a2, v47);
  v44 = 0;
  v45 = 0;
  v46 = 0;
  if (*(_BYTE *)(a1 + 28))
  {
    v16 = *(_QWORD *)(a1 + 40);
    if (!v16)
    {
      v17 = operator new(0x90uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_250ADB9A0;
      v18.n128_f32[0] = sub_23942AC00((uint64_t)(v17 + 3), a1 + 8);
      v19 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v20;
      *(_QWORD *)(a1 + 48) = v17;
      if (v19)
      {
        v21 = (unint64_t *)&v19->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v18);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      sub_23942B6B0(*(_QWORD *)(a1 + 40), a2);
      v16 = *(_QWORD *)(a1 + 40);
    }
    sub_23942C4E4(v16, a3, &v44);
    v23 = &v44;
    v24 = 1;
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  sub_23943EFB8(&v51, __p, (uint64_t *)v47, a4, v23, v24, *(float *)(a1 + 32));
  v25 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(std::__shared_weak_count **)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (char *)v44;
  if (v44)
  {
    v32 = v45;
    v33 = v44;
    if (v45 != v44)
    {
      v34 = v45;
      do
      {
        v36 = (void *)*((_QWORD *)v34 - 3);
        v34 -= 24;
        v35 = v36;
        if (v36)
        {
          *((_QWORD *)v32 - 2) = v35;
          operator delete(v35);
        }
        v32 = v34;
      }
      while (v34 != v31);
      v33 = v44;
    }
    v45 = v31;
    operator delete(v33);
  }
  v37 = (char *)v47[0];
  if (v47[0])
  {
    v38 = v47[1];
    v39 = v47[0];
    if (v47[1] != v47[0])
    {
      v40 = (char *)v47[1];
      do
      {
        v42 = (void *)*((_QWORD *)v40 - 3);
        v40 -= 24;
        v41 = v42;
        if (v42)
        {
          *(v38 - 2) = v41;
          operator delete(v41);
        }
        v38 = v40;
      }
      while (v40 != v37);
      v39 = v47[0];
    }
    v47[1] = v37;
    operator delete(v39);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v51)
  {
    *((_QWORD *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  return 1;
}

void sub_23942E074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  void *v21;
  void *v22;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v21);
  sub_23942A16C(&a10);
  sub_23942A16C(&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    v22 = *(void **)(v19 - 80);
    if (!v22)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v22 = *(void **)(v19 - 80);
    if (!v22)
      goto LABEL_3;
  }
  *(_QWORD *)(v19 - 72) = v22;
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_23942E114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  BOOL v6;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __n128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void **p_p;
  unsigned __int8 v28;
  char *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  void *v34;
  char *v35;
  _QWORD *v36;
  void *v37;
  char *v38;
  void *v39;
  void *v40;
  void *__p;
  char *v43;
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  void *v49[2];
  uint64_t v50;

  if (*(_DWORD *)(a2 + 20))
    v6 = *(_DWORD *)(a3 + 20) == 0;
  else
    v6 = 1;
  if (v6)
    sub_239EBEEE0();
  if (*(_DWORD *)(a2 + 16) != 64 || *(_DWORD *)(a3 + 16) != 64)
    sub_239EBEF10();
  sub_239429CA8(a2, 0, (char **)v47);
  *(_OWORD *)v49 = *(_OWORD *)v47;
  v50 = v48;
  sub_239429CA8(a3, 0, (char **)v45);
  v13 = *a5;
  *(_OWORD *)v47 = *(_OWORD *)v45;
  v48 = v46;
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  if (!v13)
  {
    v14 = operator new(0x90uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_250ADB9A0;
    v15.n128_f32[0] = sub_23942AC00((uint64_t)(v14 + 3), a1 + 8);
    v16 = (std::__shared_weak_count *)a5[1];
    *a5 = v17;
    a5[1] = (uint64_t)v14;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v15);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_23942B6B0(*a5, a3);
    v13 = *a5;
  }
  sub_23942C4E4(v13, a2, v45);
  __p = 0;
  v43 = 0;
  v44 = 0;
  if (*(_BYTE *)(a1 + 28))
  {
    v20 = *a4;
    if (!*a4)
    {
      v21 = operator new(0x90uLL);
      v21[1] = 0;
      v21[2] = 0;
      *v21 = &off_250ADB9A0;
      v22.n128_f32[0] = sub_23942AC00((uint64_t)(v21 + 3), a1 + 8);
      v23 = (std::__shared_weak_count *)a4[1];
      *a4 = v24;
      a4[1] = (uint64_t)v21;
      if (v23)
      {
        v25 = (unint64_t *)&v23->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v23->__on_zero_shared)(v23, v22);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      sub_23942B6B0(*a4, a2);
      v20 = *a4;
    }
    sub_23942C4E4(v20, a3, &__p);
    p_p = &__p;
    v28 = 1;
  }
  else
  {
    v28 = 0;
    p_p = 0;
  }
  sub_23943EFB8(v49, v47, (uint64_t *)v45, a6, p_p, v28, *(float *)(a1 + 32));
  v29 = (char *)__p;
  if (__p)
  {
    v30 = v43;
    v31 = __p;
    if (v43 != __p)
    {
      v32 = v43;
      do
      {
        v34 = (void *)*((_QWORD *)v32 - 3);
        v32 -= 24;
        v33 = v34;
        if (v34)
        {
          *((_QWORD *)v30 - 2) = v33;
          operator delete(v33);
        }
        v30 = v32;
      }
      while (v32 != v29);
      v31 = __p;
    }
    v43 = v29;
    operator delete(v31);
  }
  v35 = (char *)v45[0];
  if (v45[0])
  {
    v36 = v45[1];
    v37 = v45[0];
    if (v45[1] != v45[0])
    {
      v38 = (char *)v45[1];
      do
      {
        v40 = (void *)*((_QWORD *)v38 - 3);
        v38 -= 24;
        v39 = v40;
        if (v40)
        {
          *(v36 - 2) = v39;
          operator delete(v39);
        }
        v36 = v38;
      }
      while (v38 != v35);
      v37 = v45[0];
    }
    v45[1] = v35;
    operator delete(v37);
  }
  if (v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  if (v49[0])
  {
    v49[1] = v49[0];
    operator delete(v49[0]);
  }
  return 1;
}

void sub_23942E3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  std::__shared_weak_count *v22;
  void *v24;
  void *v25;

  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v24);
  sub_23942A16C(&a10);
  sub_23942A16C(&a13);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    v25 = a21;
    if (!a21)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v25 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v25;
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_23942E480(uint64_t result, float a2)
{
  *(float *)(result + 32) = a2;
  return result;
}

_QWORD *sub_23942E488(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_250ADB970;
  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[6];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_23942E540(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_250ADB970;
  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x23B83E31CLL);
}

void sub_23942E5F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23942E608(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23942E638(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23942E648(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v16;
  int v17;
  const void *v18;
  int64_t v19;
  const void *v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  signed int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  void **v47;
  float v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  float v52;
  float v53;
  float v54;
  uint8x8_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint8x8_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint8x8_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t **v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  _QWORD *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  _QWORD *v135;
  uint64_t v136;
  int v137;
  int v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  _QWORD *v161;
  uint64_t v162;
  void **p_p;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  void **v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v172;
  _QWORD *v173;
  void *v175[2];
  char v176;
  __int128 v177;
  std::__shared_weak_count *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  std::__shared_weak_count *v182;
  __int128 v183;
  __int128 v184;
  void *v185;
  void *v186;
  uint64_t v187;
  void *v188;
  char *v189;
  uint64_t *v190;
  void *v191;
  uint64_t *v192;
  char *v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  _QWORD v196[3];
  _QWORD *v197;
  _BYTE v198[24];
  _BYTE *v199;
  _BYTE v200[24];
  _BYTE *v201;
  _BYTE v202[24];
  _BYTE *v203;
  void *__p;
  void *v205;
  char *v206;
  void **v207;
  _BYTE v208[24];
  _BYTE *v209;
  _QWORD v210[3];
  _QWORD *v211;
  _BYTE v212[24];
  _BYTE *v213;
  _QWORD v214[3];
  _QWORD *v215;
  _BYTE v216[24];
  _BYTE *v217;
  _BYTE v218[24];
  _BYTE *v219;
  void *v220[2];
  char v221;
  void **v222;
  _BYTE v223[24];
  _BYTE *v224;
  _BYTE v225[24];
  _BYTE *v226;
  _BYTE v227[24];
  _BYTE *v228;
  _BYTE v229[24];
  _BYTE *v230;
  _BYTE v231[24];
  _BYTE *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v194 = 0;
  v195 = 0;
  if (!a8)
  {
    sub_2396BF704((_OWORD *)a3, 1, &v233);
    a7 = v233;
    v16 = v234;
    v194 = v233;
    v195 = v234;
    if (!v233)
    {
      if (!a10)
        goto LABEL_345;
      v29 = *(_DWORD *)(a3 + 4);
      if (v29)
      {
        if (v29 != 1)
          goto LABEL_345;
        v30 = 3015;
      }
      else
      {
        v30 = 3005;
      }
      sub_2394202DC((_QWORD *)(a9 + 192), v30);
LABEL_345:
      v118 = 0;
      if (!v16)
        return v118;
      goto LABEL_382;
    }
  }
  v173 = a6;
  v17 = *(unsigned __int8 *)(a3 + 117);
  (*(void (**)(uint64_t))(*(_QWORD *)a7 + 24))(a7);
  v191 = 0;
  v192 = 0;
  v193 = 0;
  v18 = *(const void **)a1;
  v19 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v19)
  {
    if (v19 < 0)
      sub_2394189F8();
    v191 = operator new(v19);
    v193 = (char *)v191 + 8 * (v19 >> 3);
    memcpy(v191, v18, v19);
    v192 = (uint64_t *)v193;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v188 = 0;
  v189 = 0;
  v190 = 0;
  v20 = *(const void **)a2;
  v21 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v21)
  {
    if (v21 < 0)
      sub_2394189F8();
    v188 = operator new(v21);
    v190 = (uint64_t *)((char *)v188 + 8 * (v21 >> 3));
    memcpy(v188, v20, v21);
    v189 = (char *)v190;
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  v22 = v189 - (_BYTE *)v188;
  if (v189 != v188)
  {
    sub_2396FD800(a5, (uint64_t)v231);
    v23 = v22 >> 2;
    v172 = v22 >> 3;
    v220[0] = (void *)0x42C8000000000000;
    sub_2396FCC68(&v233, (v22 >> 2) + (((char *)v192 - (_BYTE *)v191) >> 1) + (v22 >> 3), v231, v220, 1.0);
    v24 = v232;
    if (v232 == v231)
    {
      v25 = 4;
      v24 = v231;
    }
    else
    {
      if (!v232)
        goto LABEL_20;
      v25 = 5;
    }
    (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_20:
    v28 = a4[3];
    if (v28)
    {
      if ((_QWORD *)v28 == a4)
      {
        v230 = v229;
        (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v229);
LABEL_29:
        v31 = *(_DWORD *)(a3 + 108);
        v32 = *(_DWORD *)(a3 + 8);
        v33 = a5[3];
        if (v33)
        {
          if ((_QWORD *)v33 == a5)
          {
            v226 = v225;
            (*(void (**)(_QWORD *, _BYTE *))(*a5 + 24))(a5, v225);
LABEL_34:
            v34 = v227;
            v35 = a5[7];
            if (v35)
            {
              if ((_QWORD *)v35 == a5 + 4)
              {
                v228 = v227;
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v35 + 24))(v35, v227);
LABEL_39:
                if (a10)
                  v36 = (_BYTE *)(a9 + 272);
                else
                  v36 = 0;
                v37 = sub_2394A3608((void ***)&v191, a7, (uint64_t)v229, v17 != 0, v31, v32, (uint64_t)v225, 1, *(float *)(a3 + 104), v36, a10 != 0);
                if (v228 == v227)
                {
                  v38 = 4;
                }
                else
                {
                  if (!v228)
                    goto LABEL_47;
                  v38 = 5;
                  v34 = v228;
                }
                (*(void (**)(_QWORD *))(*v34 + 8 * v38))(v34);
LABEL_47:
                v39 = v226;
                if (v226 == v225)
                {
                  v40 = 4;
                  v39 = v225;
                }
                else
                {
                  if (!v226)
                    goto LABEL_52;
                  v40 = 5;
                }
                (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_52:
                v41 = v230;
                if (v230 == v229)
                {
                  v42 = 4;
                  v41 = v229;
                }
                else
                {
                  if (!v230)
                    goto LABEL_57;
                  v42 = 5;
                }
                (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_57:
                if ((v37 & 1) != 0)
                {
                  if (a10
                    && (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a7 + 64))(a7)
                     || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a7 + 64))(a7) == 1))
                  {
                    v43 = *(_DWORD *)(a7 + 60);
                    __p = 0;
                    v205 = 0;
                    v206 = 0;
                    v45 = (uint64_t *)v191;
                    v44 = v192;
                    v46 = ((v189 - (_BYTE *)v188) >> 3) + (((char *)v192 - (_BYTE *)v191) >> 3);
                    if (v46)
                    {
                      if (v46 >> 61)
                        sub_2394189F8();
                      __p = operator new(8 * v46);
                      v205 = __p;
                      v206 = (char *)__p + 8 * v46;
                    }
                    sub_239433FDC(v45, v44, (uint64_t *)v188, (uint64_t *)v189, (uint64_t)&__p, (uint64_t **)v220);
                    v47 = (void **)__p;
                    if (__p != v205)
                    {
                      v48 = (float)v43;
                      v49 = a9 + 312;
                      do
                      {
                        v185 = 0;
                        v50 = *v47;
                        v185 = *v47;
                        v51 = *(_QWORD *)(a7 + 152);
                        v52 = -1.0;
                        v53 = -1.0;
                        v54 = -1.0;
                        if (!v51)
                          goto LABEL_88;
                        v55 = (uint8x8_t)vcnt_s8((int8x8_t)v51);
                        v55.i16[0] = vaddlv_u8(v55);
                        if (v55.u32[0] > 1uLL)
                        {
                          v56 = v50;
                          if (v51 <= v50)
                            v56 = v50 % v51;
                        }
                        else
                        {
                          v56 = ((_DWORD)v51 - 1) & v50;
                        }
                        v57 = *(_QWORD *)(a7 + 144);
                        v58 = *(uint64_t ***)(v57 + 8 * v56);
                        if (!v58 || (v59 = *v58) == 0)
                        {
LABEL_88:
                          v63 = *(_QWORD *)(a7 + 192);
                          if (!v63)
                            goto LABEL_171;
                          goto LABEL_89;
                        }
                        v60 = v51 - 1;
                        if (v55.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v61 = v59[1];
                            if (v61 == v50)
                            {
                              if (*((_DWORD *)v59 + 4) == (_DWORD)v50)
                                goto LABEL_109;
                            }
                            else if ((v61 & v60) != v56)
                            {
                              goto LABEL_87;
                            }
                            v59 = (uint64_t *)*v59;
                            if (!v59)
                              goto LABEL_87;
                          }
                        }
                        while (1)
                        {
                          v62 = v59[1];
                          if (v62 == v50)
                            break;
                          if (v62 >= v51)
                            v62 %= v51;
                          if (v62 != v56)
                          {
LABEL_87:
                            v53 = -1.0;
                            v54 = -1.0;
                            goto LABEL_88;
                          }
LABEL_82:
                          v59 = (uint64_t *)*v59;
                          if (!v59)
                            goto LABEL_87;
                        }
                        if (*((_DWORD *)v59 + 4) != (_DWORD)v50)
                          goto LABEL_82;
LABEL_109:
                        if (v55.u32[0] > 1uLL)
                        {
                          v72 = v50;
                          if (v51 <= v50)
                            v72 = v50 % v51;
                        }
                        else
                        {
                          v72 = ((_DWORD)v51 - 1) & v50;
                        }
                        v74 = *(uint64_t ***)(v57 + 8 * v72);
                        if (!v74 || (v75 = *v74) == 0)
LABEL_389:
                          sub_23941D898("unordered_map::at: key not found");
                        if (v55.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v76 = v75[1];
                            if (v76 == v50)
                            {
                              if (*((_DWORD *)v75 + 4) == (_DWORD)v50)
                                goto LABEL_123;
                            }
                            else if ((v76 & v60) != v72)
                            {
                              goto LABEL_389;
                            }
                            v75 = (uint64_t *)*v75;
                            if (!v75)
                              goto LABEL_389;
                          }
                        }
                        while (2)
                        {
                          v80 = v75[1];
                          if (v80 != v50)
                          {
                            if (v80 >= v51)
                              v80 %= v51;
                            if (v80 != v72)
                              goto LABEL_389;
LABEL_127:
                            v75 = (uint64_t *)*v75;
                            if (!v75)
                              goto LABEL_389;
                            continue;
                          }
                          break;
                        }
                        if (*((_DWORD *)v75 + 4) != (_DWORD)v50)
                          goto LABEL_127;
LABEL_123:
                        v77 = *(_QWORD *)(a7 + 232);
                        if (!v77)
                          goto LABEL_387;
                        v78 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
                        v78.i16[0] = vaddlv_u8(v78);
                        if (v78.u32[0] > 1uLL)
                        {
                          v79 = v50;
                          if (v77 <= v50)
                            v79 = v50 % v77;
                        }
                        else
                        {
                          v79 = ((_DWORD)v77 - 1) & v50;
                        }
                        v88 = *(uint64_t ***)(*(_QWORD *)(a7 + 224) + 8 * v79);
                        if (!v88 || (v89 = *v88) == 0)
LABEL_387:
                          sub_23941D898("unordered_map::at: key not found");
                        v53 = *((float *)v75 + 5);
                        if (v78.u32[0] < 2uLL)
                        {
                          v90 = v77 - 1;
                          while (1)
                          {
                            v92 = v89[1];
                            if (v92 == v50)
                            {
                              if (*((_DWORD *)v89 + 4) == (_DWORD)v50)
                                goto LABEL_170;
                            }
                            else if ((v92 & v90) != v79)
                            {
                              goto LABEL_387;
                            }
                            v89 = (uint64_t *)*v89;
                            if (!v89)
                              goto LABEL_387;
                          }
                        }
                        while (2)
                        {
                          v91 = v89[1];
                          if (v91 != v50)
                          {
                            if (v91 >= v77)
                              v91 %= v77;
                            if (v91 != v79)
                              goto LABEL_387;
LABEL_160:
                            v89 = (uint64_t *)*v89;
                            if (!v89)
                              goto LABEL_387;
                            continue;
                          }
                          break;
                        }
                        if (*((_DWORD *)v89 + 4) != (_DWORD)v50)
                          goto LABEL_160;
LABEL_170:
                        v54 = (float)*((unsigned int *)v89 + 5);
                        v63 = *(_QWORD *)(a7 + 192);
                        if (!v63)
                          goto LABEL_171;
LABEL_89:
                        v64 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
                        v64.i16[0] = vaddlv_u8(v64);
                        if (v64.u32[0] > 1uLL)
                        {
                          v65 = v50;
                          if (v63 <= v50)
                            v65 = v50 % v63;
                        }
                        else
                        {
                          v65 = ((_DWORD)v63 - 1) & v50;
                        }
                        v66 = *(_QWORD *)(a7 + 184);
                        v67 = *(uint64_t ***)(v66 + 8 * v65);
                        if (!v67 || (v68 = *v67) == 0)
                        {
LABEL_171:
                          v93 = -1.0;
                          if (v54 >= 0.0)
                            goto LABEL_172;
                          goto LABEL_175;
                        }
                        v69 = v63 - 1;
                        if (v64.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v70 = v68[1];
                            if (v70 == v50)
                            {
                              if (*((_DWORD *)v68 + 4) == (_DWORD)v50)
                                goto LABEL_111;
                            }
                            else if ((v70 & v69) != v65)
                            {
                              goto LABEL_171;
                            }
                            v68 = (uint64_t *)*v68;
                            if (!v68)
                              goto LABEL_171;
                          }
                        }
                        while (2)
                        {
                          v71 = v68[1];
                          if (v71 != v50)
                          {
                            if (v71 >= v63)
                              v71 %= v63;
                            if (v71 != v65)
                              goto LABEL_171;
                            goto LABEL_103;
                          }
                          if (*((_DWORD *)v68 + 4) != (_DWORD)v50)
                          {
LABEL_103:
                            v68 = (uint64_t *)*v68;
                            if (!v68)
                              goto LABEL_171;
                            continue;
                          }
                          break;
                        }
LABEL_111:
                        if (v64.u32[0] > 1uLL)
                        {
                          v73 = v50;
                          if (v63 <= v50)
                            v73 = v50 % v63;
                        }
                        else
                        {
                          v73 = ((_DWORD)v63 - 1) & v50;
                        }
                        v81 = *(uint64_t ***)(v66 + 8 * v73);
                        if (!v81 || (v82 = *v81) == 0)
LABEL_390:
                          sub_23941D898("unordered_map::at: key not found");
                        if (v64.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v83 = v82[1];
                            if (v83 == v50)
                            {
                              if (*((_DWORD *)v82 + 4) == (_DWORD)v50)
                                goto LABEL_143;
                            }
                            else if ((v83 & v69) != v73)
                            {
                              goto LABEL_390;
                            }
                            v82 = (uint64_t *)*v82;
                            if (!v82)
                              goto LABEL_390;
                          }
                        }
                        while (2)
                        {
                          v87 = v82[1];
                          if (v87 != v50)
                          {
                            if (v87 >= v63)
                              v87 %= v63;
                            if (v87 != v73)
                              goto LABEL_390;
LABEL_147:
                            v82 = (uint64_t *)*v82;
                            if (!v82)
                              goto LABEL_390;
                            continue;
                          }
                          break;
                        }
                        if (*((_DWORD *)v82 + 4) != (_DWORD)v50)
                          goto LABEL_147;
LABEL_143:
                        v84 = *(_QWORD *)(a7 + 272);
                        if (!v84)
                          goto LABEL_388;
                        v85 = (uint8x8_t)vcnt_s8((int8x8_t)v84);
                        v85.i16[0] = vaddlv_u8(v85);
                        if (v85.u32[0] > 1uLL)
                        {
                          v86 = v50;
                          if (v84 <= v50)
                            v86 = v50 % v84;
                        }
                        else
                        {
                          v86 = ((_DWORD)v84 - 1) & v50;
                        }
                        v95 = *(uint64_t ***)(*(_QWORD *)(a7 + 264) + 8 * v86);
                        if (!v95 || (v96 = *v95) == 0)
LABEL_388:
                          sub_23941D898("unordered_map::at: key not found");
                        v52 = *((float *)v82 + 5);
                        if (v85.u32[0] < 2uLL)
                        {
                          v97 = v84 - 1;
                          while (1)
                          {
                            v99 = v96[1];
                            if (v99 == v50)
                            {
                              if (*((_DWORD *)v96 + 4) == (_DWORD)v50)
                                goto LABEL_198;
                            }
                            else if ((v99 & v97) != v86)
                            {
                              goto LABEL_388;
                            }
                            v96 = (uint64_t *)*v96;
                            if (!v96)
                              goto LABEL_388;
                          }
                        }
                        while (2)
                        {
                          v98 = v96[1];
                          if (v98 != v50)
                          {
                            if (v98 >= v84)
                              v98 %= v84;
                            if (v98 != v86)
                              goto LABEL_388;
LABEL_188:
                            v96 = (uint64_t *)*v96;
                            if (!v96)
                              goto LABEL_388;
                            continue;
                          }
                          break;
                        }
                        if (*((_DWORD *)v96 + 4) != (_DWORD)v50)
                          goto LABEL_188;
LABEL_198:
                        v93 = (float)*((unsigned int *)v96 + 5);
                        if (v54 < 0.0)
                          goto LABEL_175;
LABEL_172:
                        if (v53 >= 0.0 && v43)
                        {
                          v220[0] = &v185;
                          *((float *)sub_239434260(v49, (unint64_t *)&v185, (uint64_t)&unk_239EC6E98, (_QWORD **)v220)+ 8) = v53;
                          v220[0] = &v185;
                          *((float *)sub_239434260(v49, (unint64_t *)&v185, (uint64_t)&unk_239EC6E98, (_QWORD **)v220)+ 6) = v54 / v48;
                        }
LABEL_175:
                        if (v93 >= 0.0 && v52 >= 0.0 && v43 != 0)
                        {
                          v220[0] = &v185;
                          *((float *)sub_239434260(v49, (unint64_t *)&v185, (uint64_t)&unk_239EC6E98, (_QWORD **)v220)+ 9) = v52;
                          v220[0] = &v185;
                          *((float *)sub_239434260(v49, (unint64_t *)&v185, (uint64_t)&unk_239EC6E98, (_QWORD **)v220)+ 7) = v93 / v48;
                        }
                        ++v47;
                      }
                      while (v47 != v205);
                    }
                    sub_2394A3414(a9 + 272);
                    if (__p)
                    {
                      v205 = __p;
                      operator delete(__p);
                    }
                  }
                  v185 = 0;
                  v186 = 0;
                  v187 = 0;
                  sub_2396FDAA8(a5, (uint64_t)v218);
                  sub_2396FD534(&v181, &v233, v23);
                  v217 = 0;
                  v102 = (char *)operator new(0x40uLL);
                  *(_QWORD *)v102 = &off_250ADB9D8;
                  *(_OWORD *)(v102 + 8) = v181;
                  *((_QWORD *)v102 + 3) = v182;
                  *((_QWORD *)&v181 + 1) = 0;
                  v182 = 0;
                  v103 = v183;
                  v183 = 0uLL;
                  v104 = v184;
                  *((_OWORD *)v102 + 2) = v103;
                  *((_OWORD *)v102 + 3) = v104;
                  v184 = 0uLL;
                  v217 = v102;
                  sub_2396FD600((uint64_t)v220, (uint64_t)v218, (uint64_t)v216);
                  v105 = v217;
                  if (v217 == v216)
                  {
                    v106 = 4;
                    v105 = v216;
                  }
                  else
                  {
                    if (!v217)
                    {
LABEL_213:
                      v107 = (std::__shared_weak_count *)*((_QWORD *)&v184 + 1);
                      if (*((_QWORD *)&v184 + 1))
                      {
                        v108 = (unint64_t *)(*((_QWORD *)&v184 + 1) + 8);
                        do
                          v109 = __ldaxr(v108);
                        while (__stlxr(v109 - 1, v108));
                        if (!v109)
                        {
                          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                          std::__shared_weak_count::__release_weak(v107);
                        }
                      }
                      v110 = (std::__shared_weak_count *)*((_QWORD *)&v183 + 1);
                      if (!*((_QWORD *)&v183 + 1))
                        goto LABEL_222;
                      v111 = (unint64_t *)(*((_QWORD *)&v183 + 1) + 8);
                      do
                        v112 = __ldaxr(v111);
                      while (__stlxr(v112 - 1, v111));
                      if (!v112)
                      {
                        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                        std::__shared_weak_count::__release_weak(v110);
                        v113 = v182;
                        if (!v182)
                          goto LABEL_226;
                      }
                      else
                      {
LABEL_222:
                        v113 = v182;
                        if (!v182)
                          goto LABEL_226;
                      }
                      p_shared_owners = (unint64_t *)&v113->__shared_owners_;
                      do
                        v115 = __ldaxr(p_shared_owners);
                      while (__stlxr(v115 - 1, p_shared_owners));
                      if (!v115)
                      {
                        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                        std::__shared_weak_count::__release_weak(v113);
                        v116 = v219;
                        if (v219 != v218)
                          goto LABEL_227;
                        goto LABEL_236;
                      }
LABEL_226:
                      v116 = v219;
                      if (v219 != v218)
                      {
LABEL_227:
                        if (!v116)
                          goto LABEL_238;
                        v117 = 5;
LABEL_237:
                        (*(void (**)(void))(*v116 + 8 * v117))();
LABEL_238:
                        v120 = a4[3];
                        if (v120)
                        {
                          if ((_QWORD *)v120 == a4)
                          {
                            v215 = v214;
                            (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v214);
LABEL_243:
                            v121 = (uint64_t)v222;
                            if (v222)
                            {
                              if (v222 == v220)
                              {
                                v211 = v210;
                                (*((void (**)(void **, _QWORD *))v220[0] + 3))(v220, v210);
LABEL_248:
                                v122 = v212;
                                v123 = (uint64_t)v224;
                                if (v224)
                                {
                                  if (v224 == v223)
                                  {
                                    v213 = v212;
                                    (*(void (**)(void))(*(_QWORD *)v224 + 24))();
LABEL_253:
                                    sub_2394A56D8(&v188, a3, v214, a7, (uint64_t)&v185, v210, (unint64_t **)&v191, 1);
                                    v125 = v124;
                                    if (v213 == v212)
                                    {
                                      v126 = 4;
                                    }
                                    else
                                    {
                                      if (!v213)
                                        goto LABEL_258;
                                      v126 = 5;
                                      v122 = v213;
                                    }
                                    (*(void (**)(_QWORD *))(*v122 + 8 * v126))(v122);
LABEL_258:
                                    v127 = v211;
                                    if (v211 == v210)
                                    {
                                      v129 = 4;
                                      v127 = v210;
                                      v128 = v173;
                                    }
                                    else
                                    {
                                      v128 = v173;
                                      if (!v211)
                                        goto LABEL_263;
                                      v129 = 5;
                                    }
                                    (*(void (**)(void))(*v127 + 8 * v129))();
LABEL_263:
                                    v130 = v215;
                                    if (v215 == v214)
                                    {
                                      v131 = 4;
                                      v130 = v214;
                                    }
                                    else
                                    {
                                      if (!v215)
                                        goto LABEL_268;
                                      v131 = 5;
                                    }
                                    (*(void (**)(void))(*v130 + 8 * v131))();
LABEL_268:
                                    if ((v125 & 1) != 0)
                                    {
                                      sub_2396FDAA8(a5, (uint64_t)v202);
                                      sub_2396FD534(&v177, &v233, v172);
                                      v201 = 0;
                                      v132 = (char *)operator new(0x40uLL);
                                      *(_QWORD *)v132 = &off_250ADB9D8;
                                      *(_OWORD *)(v132 + 8) = v177;
                                      *((_QWORD *)v132 + 3) = v178;
                                      *((_QWORD *)&v177 + 1) = 0;
                                      v178 = 0;
                                      v133 = v179;
                                      v179 = 0uLL;
                                      v134 = v180;
                                      *((_OWORD *)v132 + 2) = v133;
                                      *((_OWORD *)v132 + 3) = v134;
                                      v180 = 0uLL;
                                      v201 = v132;
                                      sub_2396FD600((uint64_t)&__p, (uint64_t)v202, (uint64_t)v200);
                                      v135 = v201;
                                      if (v201 == v200)
                                      {
                                        v136 = 4;
                                        v135 = v200;
                                      }
                                      else
                                      {
                                        if (!v201)
                                        {
LABEL_286:
                                          v139 = (std::__shared_weak_count *)*((_QWORD *)&v180 + 1);
                                          if (*((_QWORD *)&v180 + 1))
                                          {
                                            v140 = (unint64_t *)(*((_QWORD *)&v180 + 1) + 8);
                                            do
                                              v141 = __ldaxr(v140);
                                            while (__stlxr(v141 - 1, v140));
                                            if (!v141)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                                              std::__shared_weak_count::__release_weak(v139);
                                            }
                                          }
                                          v142 = (std::__shared_weak_count *)*((_QWORD *)&v179 + 1);
                                          if (*((_QWORD *)&v179 + 1))
                                          {
                                            v143 = (unint64_t *)(*((_QWORD *)&v179 + 1) + 8);
                                            do
                                              v144 = __ldaxr(v143);
                                            while (__stlxr(v144 - 1, v143));
                                            if (!v144)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                                              std::__shared_weak_count::__release_weak(v142);
                                            }
                                          }
                                          v145 = v178;
                                          if (v178)
                                          {
                                            v146 = (unint64_t *)&v178->__shared_owners_;
                                            do
                                              v147 = __ldaxr(v146);
                                            while (__stlxr(v147 - 1, v146));
                                            if (!v147)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                                              std::__shared_weak_count::__release_weak(v145);
                                            }
                                          }
                                          v148 = v203;
                                          if (v203 == v202)
                                          {
                                            v149 = 4;
                                            v148 = v202;
                                          }
                                          else
                                          {
                                            if (!v203)
                                              goto LABEL_306;
                                            v149 = 5;
                                          }
                                          (*(void (**)(void))(*v148 + 8 * v149))();
LABEL_306:
                                          v150 = (uint64_t)v207;
                                          if (v207)
                                          {
                                            if (v207 == &__p)
                                            {
                                              v197 = v196;
                                              (*((void (**)(void **, _QWORD *))__p + 3))(&__p, v196);
LABEL_311:
                                              v151 = v198;
                                              v152 = (uint64_t)v209;
                                              if (v209)
                                              {
                                                if (v209 == v208)
                                                {
                                                  v199 = v198;
                                                  (*(void (**)(void))(*(_QWORD *)v209 + 24))();
LABEL_316:
                                                  v153 = sub_2394A685C(&v191, &v188, (uint64_t *)&v185, v128, v196, *(_DWORD *)(a3 + 112), *(_BYTE *)(a3 + 116), 0);
                                                  if (v199 == v198)
                                                  {
                                                    v154 = 4;
                                                  }
                                                  else
                                                  {
                                                    if (!v199)
                                                      goto LABEL_321;
                                                    v154 = 5;
                                                    v151 = v199;
                                                  }
                                                  (*(void (**)(_QWORD *))(*v151 + 8 * v154))(v151);
LABEL_321:
                                                  v155 = v197;
                                                  if (v197 == v196)
                                                  {
                                                    v156 = 4;
                                                    v155 = v196;
                                                  }
                                                  else
                                                  {
                                                    if (!v197)
                                                      goto LABEL_326;
                                                    v156 = 5;
                                                  }
                                                  (*(void (**)(void))(*v155 + 8 * v156))();
LABEL_326:
                                                  if ((v153 & 1) != 0)
                                                  {
                                                    if (sub_2396FD7B0((uint64_t)a5))
                                                    {
                                                      v176 = 0;
                                                      LOBYTE(v175[0]) = 0;
                                                      sub_2396FCC6C((uint64_t)&v233, (uint64_t)v175);
                                                      if (v176 < 0)
                                                        operator delete(v175[0]);
                                                      if (a10)
                                                      {
                                                        v157 = *(_DWORD *)(a3 + 4);
                                                        if (v157)
                                                        {
                                                          if (v157 != 1)
                                                            goto LABEL_357;
                                                          v158 = 3015;
                                                        }
                                                        else
                                                        {
                                                          v158 = 3005;
                                                        }
                                                        sub_2394202DC((_QWORD *)(a9 + 192), v158);
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v176 = 0;
                                                      LOBYTE(v175[0]) = 0;
                                                      sub_2396FCC6C((uint64_t)&v233, (uint64_t)v175);
                                                      if (v176 < 0)
                                                        operator delete(v175[0]);
                                                    }
LABEL_357:
                                                    v118 = sub_2396FD7B0((uint64_t)a5) ^ 1;
                                                    v161 = v209;
                                                    if (v209 == v208)
                                                      goto LABEL_358;
                                                    goto LABEL_353;
                                                  }
                                                  if (sub_2396FD7B0((uint64_t)a5))
                                                  {
                                                    v176 = 0;
                                                    LOBYTE(v175[0]) = 0;
                                                    sub_2396FCC6C((uint64_t)&v233, (uint64_t)v175);
                                                    if (v176 < 0)
                                                      operator delete(v175[0]);
                                                  }
                                                  if (a10)
                                                  {
                                                    v159 = *(_DWORD *)(a3 + 4);
                                                    if (v159)
                                                    {
                                                      if (v159 != 1)
                                                        goto LABEL_352;
                                                      v160 = 3015;
                                                    }
                                                    else
                                                    {
                                                      v160 = 3005;
                                                    }
                                                    sub_2394202DC((_QWORD *)(a9 + 192), v160);
                                                  }
LABEL_352:
                                                  v118 = 0;
                                                  v161 = v209;
                                                  if (v209 == v208)
                                                  {
LABEL_358:
                                                    v162 = 4;
                                                    v161 = v208;
                                                    goto LABEL_359;
                                                  }
LABEL_353:
                                                  if (!v161)
                                                    goto LABEL_360;
                                                  v162 = 5;
LABEL_359:
                                                  (*(void (**)(void))(*v161 + 8 * v162))();
LABEL_360:
                                                  p_p = v207;
                                                  if (v207 == &__p)
                                                  {
                                                    v164 = 4;
                                                    p_p = &__p;
                                                  }
                                                  else
                                                  {
                                                    if (!v207)
                                                      goto LABEL_365;
                                                    v164 = 5;
                                                  }
                                                  (*((void (**)(void))*p_p + v164))();
LABEL_365:
                                                  v165 = v224;
                                                  if (v224 == v223)
                                                  {
                                                    v166 = 4;
                                                    v165 = v223;
                                                  }
                                                  else
                                                  {
                                                    if (!v224)
                                                      goto LABEL_370;
                                                    v166 = 5;
                                                  }
                                                  (*(void (**)(void))(*v165 + 8 * v166))();
LABEL_370:
                                                  v167 = v222;
                                                  if (v222 == v220)
                                                  {
                                                    v168 = 4;
                                                    v167 = v220;
                                                  }
                                                  else
                                                  {
                                                    if (!v222)
                                                      goto LABEL_375;
                                                    v168 = 5;
                                                  }
                                                  (*((void (**)(void))*v167 + v168))();
LABEL_375:
                                                  if (v185)
                                                  {
                                                    v186 = v185;
                                                    operator delete(v185);
                                                  }
LABEL_377:
                                                  sub_2396FCD14((uint64_t)&v233);
                                                  v119 = (uint64_t *)v188;
                                                  if (!v188)
                                                    goto LABEL_379;
                                                  goto LABEL_378;
                                                }
                                                v152 = (*(uint64_t (**)(void))(*(_QWORD *)v209 + 16))();
                                              }
                                              v199 = (_BYTE *)v152;
                                              goto LABEL_316;
                                            }
                                            v150 = (*((uint64_t (**)(void))*v207 + 2))();
                                          }
                                          v197 = (_QWORD *)v150;
                                          goto LABEL_311;
                                        }
                                        v136 = 5;
                                      }
                                      (*(void (**)(void))(*v135 + 8 * v136))();
                                      goto LABEL_286;
                                    }
                                    if (sub_2396FD7B0((uint64_t)a5))
                                    {
                                      HIBYTE(v206) = 0;
                                      LOBYTE(__p) = 0;
                                      sub_2396FCC6C((uint64_t)&v233, (uint64_t)&__p);
                                      if (SHIBYTE(v206) < 0)
                                        operator delete(__p);
                                    }
                                    if (a10)
                                    {
                                      v137 = *(_DWORD *)(a3 + 4);
                                      if (!v137)
                                      {
                                        v138 = 3005;
                                        goto LABEL_348;
                                      }
                                      if (v137 == 1)
                                      {
                                        v138 = 3015;
LABEL_348:
                                        sub_2394202DC((_QWORD *)(a9 + 192), v138);
                                      }
                                    }
                                    v118 = 0;
                                    goto LABEL_365;
                                  }
                                  v123 = (*(uint64_t (**)(void))(*(_QWORD *)v224 + 16))();
                                }
                                v213 = (_BYTE *)v123;
                                goto LABEL_253;
                              }
                              v121 = (*((uint64_t (**)(void))*v222 + 2))();
                            }
                            v211 = (_QWORD *)v121;
                            goto LABEL_248;
                          }
                          v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 16))(v120);
                        }
                        v215 = (_QWORD *)v120;
                        goto LABEL_243;
                      }
LABEL_236:
                      v117 = 4;
                      v116 = v218;
                      goto LABEL_237;
                    }
                    v106 = 5;
                  }
                  (*(void (**)(void))(*v105 + 8 * v106))();
                  goto LABEL_213;
                }
                if (sub_2396FD7B0((uint64_t)a5)
                  && (v221 = 0, LOBYTE(v220[0]) = 0, sub_2396FCC6C((uint64_t)&v233, (uint64_t)v220), v221 < 0))
                {
                  operator delete(v220[0]);
                  if (!a10)
                    goto LABEL_281;
                }
                else if (!a10)
                {
                  goto LABEL_281;
                }
                v100 = *(_DWORD *)(a3 + 4);
                if (!v100)
                {
                  v101 = 3005;
                  goto LABEL_280;
                }
                if (v100 == 1)
                {
                  v101 = 3015;
LABEL_280:
                  sub_2394202DC((_QWORD *)(a9 + 192), v101);
                }
LABEL_281:
                v118 = 0;
                goto LABEL_377;
              }
              v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
            }
            v228 = (_BYTE *)v35;
            goto LABEL_39;
          }
          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
        }
        v226 = (_BYTE *)v33;
        goto LABEL_34;
      }
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    }
    v230 = (_BYTE *)v28;
    goto LABEL_29;
  }
  if (a10)
  {
    sub_2394202DC((_QWORD *)(a9 + 192), 3004);
    v26 = *(_DWORD *)(a3 + 4);
    if (v26)
    {
      if (v26 != 1)
        goto LABEL_231;
      v27 = 3015;
    }
    else
    {
      v27 = 3005;
    }
    sub_2394202DC((_QWORD *)(a9 + 192), v27);
  }
LABEL_231:
  v118 = 0;
  v119 = (uint64_t *)v188;
  if (v188)
  {
LABEL_378:
    v189 = (char *)v119;
    operator delete(v119);
  }
LABEL_379:
  if (v191)
  {
    v192 = (uint64_t *)v191;
    operator delete(v191);
  }
  v16 = v195;
  if (v195)
  {
LABEL_382:
    v169 = (unint64_t *)&v16->__shared_owners_;
    do
      v170 = __ldaxr(v169);
    while (__stlxr(v170 - 1, v169));
    if (!v170)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v118;
}

void sub_23942FA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *v68;

  if (a23 < 0)
    operator delete(__p);
  sub_23942FE80(&a67);
  sub_23942FE80(&STACK[0x298]);
  if (a40)
    operator delete(a40);
  sub_2396FCD14((uint64_t)&STACK[0x358]);
  if (a43)
  {
    operator delete(a43);
    v68 = a46;
    if (a46)
    {
LABEL_9:
      operator delete(v68);
      sub_239416DA0((uint64_t)&a49);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v68 = a46;
    if (a46)
      goto LABEL_9;
  }
  sub_239416DA0((uint64_t)&a49);
  _Unwind_Resume(a1);
}

_QWORD *sub_23942FE80(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 4;
  v3 = (_QWORD *)a1[7];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[3];
  if (v5 == a1)
  {
    v6 = 4;
    v5 = a1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

_QWORD *sub_23942FEFC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[2];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_23942FFE0(unint64_t **a1, unint64_t **a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  void *v6;
  _QWORD *v7;
  void *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  int v26;
  int v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  int v37;
  int v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _DWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  char *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  _DWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _OWORD *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  uint64_t v89;
  unsigned int *v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  int v96;
  int v97;
  char *i;
  int v100;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  int64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  BOOL v122;
  BOOL v124;
  BOOL v126;
  BOOL v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t *v141;
  void **v142;
  unint64_t *v143;
  unint64_t v144;
  unsigned int v145;
  void *v146[2];
  char v147;
  void *v148[2];
  char v149;
  _BYTE v150[24];
  _BYTE *v151;
  void *__p[2];
  void *v153[2];
  int v154;
  int v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;

  v4 = (_QWORD *)a4;
  v158 = *MEMORY[0x24BDAC8D0];
  v155 = 0;
  v156 = 0uLL;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v153 = 0u;
  v154 = 1065353216;
  v157 = 0;
  sub_239433E6C(a4, (uint64_t *)__p);
  v6 = (void *)v4[5];
  if (v6)
  {
    v4[6] = v6;
    operator delete(v6);
    v4[5] = 0;
    v4[6] = 0;
    v4[7] = 0;
  }
  *(_OWORD *)(v4 + 5) = v156;
  v4[7] = v157;
  v157 = 0;
  v156 = 0uLL;
  v7 = v153[0];
  if (v153[0])
  {
    do
    {
      v15 = (_QWORD *)*v7;
      v16 = (void *)v7[6];
      if (v16)
      {
        v7[7] = v16;
        operator delete(v16);
      }
      v17 = (void *)v7[3];
      if (v17)
      {
        v7[4] = v17;
        operator delete(v17);
      }
      operator delete(v7);
      v7 = v15;
    }
    while (v15);
  }
  v142 = (void **)(v4 + 5);
  v8 = __p[0];
  __p[0] = 0;
  if (v8)
    operator delete(v8);
  v10 = *a1;
  v9 = a1[1];
  v12 = *a2;
  v11 = a2[1];
  sub_2396FD800(a3, (uint64_t)v150);
  v148[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(__p, (v11 - v12) * (v9 - v10), v150, v148, 1.0);
  v13 = v151;
  if (v151 == v150)
  {
    v14 = 4;
    v13 = v150;
  }
  else
  {
    if (!v151)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  v18 = *a1;
  v138 = a1[1];
  if (*a1 == v138)
  {
LABEL_103:
    v89 = v4[5];
    v90 = (unsigned int *)v4[6];
    v91 = 126 - 2 * __clz(((uint64_t)v90 - v89) >> 3);
    if (v90 == (unsigned int *)v89)
      v92 = 0;
    else
      v92 = v91;
    sub_239434DC0(v89, v90, (uint64_t)v148, v92, 1);
    v94 = (char *)v4[5];
    v93 = (char *)v4[6];
    if (v94 == v93)
      goto LABEL_134;
    v95 = v94 - 8;
    do
    {
      if (v95 + 16 == v93)
        goto LABEL_134;
      v97 = *((_DWORD *)v95 + 2);
      v95 += 8;
      v96 = v97;
    }
    while (v97 != *((_DWORD *)v95 + 2) || *((_DWORD *)v95 + 1) != *((_DWORD *)v95 + 3));
    for (i = v95 + 16; i != v93; i += 8)
    {
      v100 = v96;
      v96 = *(_DWORD *)i;
      if (v100 != *(_DWORD *)i || *((_DWORD *)v95 + 1) != *((_DWORD *)i + 1))
      {
        *((_DWORD *)v95 + 2) = v96;
        v95 += 8;
        *((_DWORD *)v95 + 1) = *((_DWORD *)i + 1);
      }
    }
    v103 = v95 + 8;
    v104 = v93 - v103;
    if (v93 == v103)
    {
LABEL_134:
      sub_2396FD7B0((uint64_t)a3);
      v149 = 0;
      LOBYTE(v148[0]) = 0;
      sub_2396FCC6C((uint64_t)__p, (uint64_t)v148);
      if (v149 < 0)
        operator delete(v148[0]);
      v102 = sub_2396FD7B0((uint64_t)a3) ^ 1;
      goto LABEL_137;
    }
    v105 = v103 - v94;
    v106 = &v94[(v103 - v94) & 0xFFFFFFFFFFFFFFF8];
    v107 = &v106[v104];
    if (&v106[v104] == v93)
    {
      v110 = v106;
    }
    else
    {
      v108 = v105 & 0xFFFFFFFFFFFFFFF8;
      v109 = v93 - &v94[v104 + (v105 & 0xFFFFFFFFFFFFFFF8)] - 8;
      if (v109 >= 0x138)
      {
        v112 = v108 + (v109 & 0xFFFFFFFFFFFFFFF8);
        v113 = (unint64_t)&v94[v112 | 4];
        v114 = (unint64_t)&v94[v108 | 4];
        v115 = (unint64_t)&v94[v112 + 8];
        v116 = &v94[v104 + v108];
        v117 = &v116[v109 & 0xFFFFFFFFFFFFFFF8];
        v118 = (unint64_t)(v117 + 4);
        v119 = (unint64_t)(v116 + 4);
        v120 = (unint64_t)(v117 + 8);
        v122 = v106 < v117 + 4 && (unint64_t)v107 < v113;
        v124 = (unint64_t)v106 < v120 && v119 < v113;
        v126 = v114 < v118 && (unint64_t)v107 < v115;
        v128 = v114 < v120 && v119 < v115;
        if (v114 >= v113 || (unint64_t)v106 >= v115)
        {
          if (v122)
          {
            v110 = v106;
          }
          else if (v124)
          {
            v110 = v106;
          }
          else if (v126)
          {
            v110 = v106;
          }
          else if (v128)
          {
            v110 = v106;
          }
          else
          {
            v130 = v104 >> 3;
            v131 = (v109 >> 3) + 1;
            v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFF8);
            v110 = &v106[v132];
            v107 += v132;
            v133 = 8 * v130;
            v134 = v131 & 0x3FFFFFFFFFFFFFF8;
            do
            {
              v135 = *(_OWORD *)&v106[v133 + 16];
              v137 = *(_OWORD *)&v106[v133 + 32];
              v136 = *(_OWORD *)&v106[v133 + 48];
              *(_OWORD *)v106 = *(_OWORD *)&v106[v133];
              *((_OWORD *)v106 + 1) = v135;
              *((_OWORD *)v106 + 2) = v137;
              *((_OWORD *)v106 + 3) = v136;
              v106 += 64;
              v134 -= 8;
            }
            while (v134);
            if (v131 == (v131 & 0x3FFFFFFFFFFFFFF8))
              goto LABEL_133;
          }
        }
        else
        {
          v110 = v106;
        }
      }
      else
      {
        v110 = v106;
      }
      do
      {
        *(_DWORD *)v110 = *(_DWORD *)v107;
        *((_DWORD *)v110 + 1) = *((_DWORD *)v107 + 1);
        v110 += 8;
        v107 += 8;
      }
      while (v107 != v93);
    }
LABEL_133:
    v4[6] = v110;
    goto LABEL_134;
  }
  while (1)
  {
    v19 = *v18;
    if (sub_2396FD7B0((uint64_t)a3))
      break;
    v141 = v18;
    v21 = *a2;
    v20 = a2[1];
    if (*a2 != v20)
    {
      v143 = a2[1];
      v144 = v19;
      while (1)
      {
        v23 = *v21;
        v147 = 0;
        LOBYTE(v146[0]) = 0;
        sub_2396FD394(v148, (uint64_t)__p, (__int128 *)v146);
        if (v147 < 0)
        {
          operator delete(v146[0]);
          if (v19 == v23)
            goto LABEL_24;
        }
        else if (v19 == v23)
        {
          goto LABEL_24;
        }
        v25 = (char *)v4[6];
        v24 = v4[7];
        if ((unint64_t)v25 < v24)
        {
          if (v23 >= v19)
            v26 = v19;
          else
            v26 = v23;
          if (v23 <= v19)
            v27 = v19;
          else
            v27 = v23;
          *(_DWORD *)v25 = v26;
          *((_DWORD *)v25 + 1) = v27;
          v28 = v25 + 8;
          goto LABEL_61;
        }
        v29 = (char *)*v142;
        v30 = v25 - (_BYTE *)*v142;
        v31 = v30 >> 3;
        v32 = (v30 >> 3) + 1;
        if (v32 >> 61)
          sub_2394189F8();
        v33 = v24 - (_QWORD)v29;
        if (v33 >> 2 > v32)
          v32 = v33 >> 2;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34 >> 61)
          sub_239418A80();
        v35 = operator new(8 * v34);
        v36 = &v35[8 * v31];
        if (v23 >= v19)
          v37 = v19;
        else
          v37 = v23;
        if (v23 <= v19)
          v38 = v19;
        else
          v38 = v23;
        *v36 = v37;
        v36[1] = v38;
        if (v25 == v29)
        {
          v40 = &v35[8 * v31];
          goto LABEL_59;
        }
        v39 = v25 - 8 - v29;
        if (v39 < 0x58)
          break;
        v40 = &v35[8 * v31];
        if ((unint64_t)(v25 - &v35[v30]) < 0x20)
          goto LABEL_58;
        v41 = (v39 >> 3) + 1;
        v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        v43 = &v25[-v42];
        v40 = (char *)&v36[v42 / 0xFFFFFFFFFFFFFFFCLL];
        v44 = &v35[8 * v31 - 16];
        v45 = v25 - 16;
        v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *(_OWORD *)v45;
          *(v44 - 1) = *((_OWORD *)v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 32;
          v46 -= 4;
        }
        while (v46);
        v25 = v43;
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_58;
LABEL_59:
        v28 = v36 + 2;
        v4[5] = v40;
        v4[6] = v36 + 2;
        v4[7] = &v35[8 * v34];
        if (v29)
          operator delete(v29);
LABEL_61:
        v4[6] = v28;
        v145 = v19;
        v146[0] = &v145;
        v49 = (uint64_t)v4;
        v50 = sub_239434A44((uint64_t)v4, &v145, (uint64_t)&unk_239EC6E98, (_DWORD **)v146);
        v52 = (char *)*((_QWORD *)v50 + 4);
        v51 = *((_QWORD *)v50 + 5);
        if ((unint64_t)v52 < v51)
        {
          *(_DWORD *)v52 = v23;
          v53 = (uint64_t)(v52 + 4);
          goto LABEL_82;
        }
        v54 = (char *)*((_QWORD *)v50 + 3);
        v55 = (v52 - v54) >> 2;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62)
          sub_2394189F8();
        v57 = v51 - (_QWORD)v54;
        if (v57 >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 62)
            sub_239418A80();
          v59 = operator new(4 * v58);
          v60 = &v59[4 * v55];
          *v60 = v23;
          v53 = (uint64_t)(v60 + 1);
          if (v52 == v54)
            goto LABEL_80;
LABEL_74:
          v61 = v52 - 4 - v54;
          if (v61 < 0x2C)
            goto LABEL_187;
          if ((unint64_t)(v54 - v59) < 0x20)
            goto LABEL_187;
          v62 = (v61 >> 2) + 1;
          v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
          v64 = &v52[-v63];
          v60 = (_DWORD *)((char *)v60 - v63);
          v65 = &v59[4 * v55 - 16];
          v66 = v52 - 16;
          v67 = v62 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v68 = *(_OWORD *)v66;
            *(v65 - 1) = *((_OWORD *)v66 - 1);
            *v65 = v68;
            v65 -= 2;
            v66 -= 32;
            v67 -= 8;
          }
          while (v67);
          v52 = v64;
          if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_187:
            do
            {
              v69 = *((_DWORD *)v52 - 1);
              v52 -= 4;
              *--v60 = v69;
            }
            while (v52 != v54);
          }
          goto LABEL_80;
        }
        v59 = 0;
        v60 = (_DWORD *)(4 * v55);
        *(_DWORD *)(4 * v55) = v23;
        v53 = 4 * v55 + 4;
        if (v52 != v54)
          goto LABEL_74;
LABEL_80:
        *((_QWORD *)v50 + 3) = v60;
        *((_QWORD *)v50 + 4) = v53;
        *((_QWORD *)v50 + 5) = &v59[4 * v58];
        if (v54)
          operator delete(v54);
LABEL_82:
        v4 = (_QWORD *)v49;
        v19 = v144;
        *((_QWORD *)v50 + 4) = v53;
        v145 = v144;
        v146[0] = &v145;
        v70 = sub_239434A44(v49, &v145, (uint64_t)&unk_239EC6E98, (_DWORD **)v146);
        v72 = (char *)*((_QWORD *)v70 + 7);
        v71 = *((_QWORD *)v70 + 8);
        if ((unint64_t)v72 >= v71)
        {
          v73 = (char *)*((_QWORD *)v70 + 6);
          v74 = (v72 - v73) >> 2;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            sub_2394189F8();
          v76 = v71 - (_QWORD)v73;
          if (v76 >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            if (v77 >> 62)
              sub_239418A80();
            v78 = operator new(4 * v77);
            v79 = &v78[4 * v74];
            *v79 = 0;
            v22 = (uint64_t)(v79 + 1);
            if (v72 == v73)
              goto LABEL_100;
LABEL_94:
            v80 = v72 - 4 - v73;
            if (v80 < 0x2C)
              goto LABEL_188;
            if ((unint64_t)(v73 - v78) < 0x20)
              goto LABEL_188;
            v81 = (v80 >> 2) + 1;
            v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
            v83 = &v72[-v82];
            v79 = (_DWORD *)((char *)v79 - v82);
            v84 = &v78[4 * v74 - 16];
            v85 = v72 - 16;
            v86 = v81 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v87 = *(_OWORD *)v85;
              *(v84 - 1) = *((_OWORD *)v85 - 1);
              *v84 = v87;
              v84 -= 2;
              v85 -= 32;
              v86 -= 8;
            }
            while (v86);
            v72 = v83;
            if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_188:
              do
              {
                v88 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *--v79 = v88;
              }
              while (v72 != v73);
            }
          }
          else
          {
            v78 = 0;
            v79 = (_DWORD *)(4 * v74);
            *(_DWORD *)(4 * v74) = 0;
            v22 = 4 * v74 + 4;
            if (v72 != v73)
              goto LABEL_94;
          }
LABEL_100:
          *((_QWORD *)v70 + 6) = v79;
          *((_QWORD *)v70 + 7) = v22;
          *((_QWORD *)v70 + 8) = &v78[4 * v77];
          if (v73)
            operator delete(v73);
          v19 = v144;
          goto LABEL_23;
        }
        *(_DWORD *)v72 = 0;
        v22 = (uint64_t)(v72 + 4);
LABEL_23:
        *((_QWORD *)v70 + 7) = v22;
        v20 = v143;
LABEL_24:
        sub_2396FD3E8((uint64_t)v148);
        if (++v21 == v20)
          goto LABEL_18;
      }
      v40 = &v35[8 * v31];
      do
      {
LABEL_58:
        v48 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v40 - 1) = v48;
        v40 -= 8;
      }
      while (v25 != v29);
      goto LABEL_59;
    }
LABEL_18:
    v18 = v141 + 1;
    if (v141 + 1 == v138)
      goto LABEL_103;
  }
  v149 = 0;
  LOBYTE(v148[0]) = 0;
  sub_2396FCC6C((uint64_t)__p, (uint64_t)v148);
  if (v149 < 0)
    operator delete(v148[0]);
  v102 = 0;
LABEL_137:
  sub_2396FCD14((uint64_t)__p);
  return v102;
}

void sub_239430918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_2396FCD14((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
  sub_2396FCD14((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void sub_2394309F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_2396FCD14((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x2394309E4);
}

uint64_t sub_239430A18(_QWORD *a1, uint64_t *a2, char a3, _QWORD *a4, _QWORD *a5, void **a6, uint64_t a7, char a8, uint64_t a9, char a10)
{
  void *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void **v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t **v80;
  unint64_t v81;
  uint64_t *v82;
  char *v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _BYTE *v92;
  _DWORD *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  _OWORD *v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  int v102;
  char *v103;
  float v104;
  unint64_t v105;
  float *v106;
  float *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  float *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float *v117;
  _OWORD *v118;
  float *v119;
  uint64_t v120;
  __int128 v121;
  int v122;
  unint64_t v123;
  uint8x8_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t **v127;
  uint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t **v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t **v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  __int128 *v152;
  __int128 *v153;
  int v154;
  char *v155;
  unint64_t v156;
  char *v157;
  _DWORD *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  unint64_t v166;
  _BYTE *v167;
  _DWORD *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  _OWORD *v173;
  char *v174;
  uint64_t v175;
  __int128 v176;
  int v177;
  char *v178;
  char *v179;
  char *v180;
  unint64_t v181;
  char *v182;
  _DWORD *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  unint64_t v191;
  _BYTE *v192;
  _DWORD *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _OWORD *v198;
  char *v199;
  uint64_t v200;
  __int128 v201;
  int v202;
  char *v203;
  char *v204;
  uint64_t *v205;
  uint64_t **v206;
  uint64_t **v207;
  unint64_t v208;
  uint64_t *v209;
  __int128 *v210;
  char *v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _BYTE *v222;
  char *v223;
  int v224;
  int v225;
  unint64_t v226;
  BOOL v227;
  char *v228;
  char *v229;
  uint64_t v230;
  __int128 *v231;
  __int128 *v232;
  uint64_t v233;
  uint64_t v234;
  _OWORD *v235;
  char *v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  unsigned int *v240;
  unint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  int v246;
  int v247;
  BOOL v248;
  char *i;
  int v250;
  _QWORD *v252;
  char *v253;
  uint64_t v254;
  int64_t v255;
  char *v256;
  char *v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  void *v261;
  _QWORD *v262;
  uint64_t v263;
  _QWORD *v264;
  void *v265;
  void *v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  char *v278;
  char *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  BOOL v284;
  BOOL v286;
  BOOL v288;
  BOOL v290;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v304;
  void **v305;
  _QWORD *v306;
  void **v307;
  uint64_t v308;
  int v309;
  unint64_t v311;
  unsigned int v313;
  __int128 __p;
  unint64_t v315;
  void *v316[2];
  char v317;
  void *v318[2];
  void *v319[2];
  int v320;
  __int128 v321;
  std::__shared_weak_count *v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  std::__shared_weak_count *v326;
  __int128 v327;
  __int128 v328;
  uint64_t v329;
  __int128 v330;
  int v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  char v336;
  int v337;
  __int16 v338;
  __int128 v339;
  uint64_t v340;
  char v341;
  int v342;
  __int128 v343;
  int v344;
  uint64_t v345;
  char v346;
  char v347;
  uint64_t v348;
  __int128 v349;
  __int16 v350;
  uint64_t v351;
  __int128 v352;
  unint64_t v353;
  int v354;
  uint64_t v355;
  __int16 v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char v361;
  char v362;
  __int16 v363;
  char v364;
  __int128 v365;
  uint64_t v366;
  qos_class_t v367;
  int v368;
  unsigned int *v369;
  _BYTE v370[24];
  _BYTE *v371;
  _BYTE v372[24];
  _BYTE *v373;
  _BYTE v374[24];
  _BYTE *v375;
  _BYTE v376[24];
  _BYTE *v377;
  _QWORD v378[3];
  _QWORD *v379;
  _BYTE v380[24];
  _BYTE *v381;
  _QWORD v382[3];
  _QWORD *v383;
  _BYTE v384[24];
  _BYTE *v385;
  _BYTE v386[24];
  _BYTE *v387;
  _QWORD v388[3];
  _QWORD *v389;
  _BYTE v390[24];
  _BYTE *v391;
  _BYTE v392[24];
  _BYTE *v393;
  __int128 v394;
  __int128 v395;
  int v396;
  int v397;
  __int128 v398;
  void *v399;
  uint64_t v400;

  v400 = *MEMORY[0x24BDAC8D0];
  v397 = 0;
  v398 = 0uLL;
  v394 = 0u;
  v395 = 0u;
  v396 = 1065353216;
  v399 = 0;
  sub_239433E6C((uint64_t)a6, (uint64_t *)&v394);
  v15 = a6[5];
  if (v15)
  {
    a6[6] = v15;
    operator delete(v15);
    a6[5] = 0;
    a6[6] = 0;
    a6[7] = 0;
  }
  v305 = a6 + 5;
  *(_OWORD *)(a6 + 5) = v398;
  a6[7] = v399;
  v399 = 0;
  v398 = 0uLL;
  v16 = (_QWORD *)v395;
  if ((_QWORD)v395)
  {
    do
    {
      v24 = (_QWORD *)*v16;
      v25 = (void *)v16[6];
      if (v25)
      {
        v16[7] = v25;
        operator delete(v25);
      }
      v26 = (void *)v16[3];
      if (v26)
      {
        v16[4] = v26;
        operator delete(v26);
      }
      operator delete(v16);
      v16 = v24;
    }
    while (v24);
  }
  v17 = (void *)v394;
  *(_QWORD *)&v394 = 0;
  if (v17)
    operator delete(v17);
  if (!a4[3])
    sub_239EBEF40();
  v306 = a1;
  v18 = a1[1] - *a1;
  v19 = v18 >> 3;
  v20 = 2 * ((v18 >> 3) + (v18 >> 1));
  v302 = a2[1];
  if (v302)
    v21 = v20;
  else
    v21 = 0;
  sub_2396FD800(a5, (uint64_t)v392);
  v329 = 0x42C8000000000000;
  sub_2396FCC68(&v394, v19 + v21, v392, &v329, 1.0);
  v22 = v393;
  if (v393 == v392)
  {
    v23 = 4;
    v22 = v392;
  }
  else
  {
    if (!v393)
      goto LABEL_20;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_20:
  v307 = a6;
  v304 = *a2;
  if (!*a2)
  {
    sub_239A444D4((uint64_t)"unknown file", 262, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v27 = *a1;
  v28 = a1[1];
  LODWORD(v329) = 0;
  v330 = xmmword_239EC6680;
  v331 = 257;
  v332 = 0u;
  v333 = 0u;
  v334 = 0u;
  v335 = 0x45D1B0003F4CCCCDLL;
  v336 = 1;
  v337 = 0x3FFF;
  v338 = 0;
  v339 = xmmword_239EC6690;
  v340 = 0;
  v341 = 0;
  v343 = xmmword_239EC66A0;
  v342 = 981668463;
  v344 = 1;
  v345 = 0x404000003C23D70ALL;
  v346 = 0;
  v347 = 1;
  v348 = 0x600000008;
  v349 = xmmword_239EC66B0;
  v350 = 256;
  v351 = 15;
  v352 = xmmword_239EC66C0;
  v353 = 0xBFF0000000000000;
  v354 = 2139095039;
  v355 = 0x1EFFFFFFFFLL;
  v356 = 0;
  v357 = 1;
  v358 = 0;
  v359 = 0;
  v360 = 0;
  v361 = 1;
  v362 = 1;
  v363 = 0;
  v364 = 1;
  v365 = xmmword_239EC66D0;
  v366 = 0x200000000;
  v367 = qos_class_self();
  v368 = 100;
  v309 = v356;
  LOBYTE(v356) = 1;
  HIBYTE(v356) = a3;
  sub_2396FDAA8(a5, (uint64_t)v386);
  sub_2396FD534(&v325, &v394, v21);
  v385 = 0;
  v29 = (char *)operator new(0x40uLL);
  *(_QWORD *)v29 = &off_250ADB9D8;
  *(_OWORD *)(v29 + 8) = v325;
  *((_QWORD *)v29 + 3) = v326;
  *((_QWORD *)&v325 + 1) = 0;
  v326 = 0;
  v30 = v327;
  v327 = 0uLL;
  v31 = v328;
  *((_OWORD *)v29 + 2) = v30;
  *((_OWORD *)v29 + 3) = v31;
  v328 = 0uLL;
  v385 = v29;
  sub_2396FD600((uint64_t)v388, (uint64_t)v386, (uint64_t)v384);
  v32 = v385;
  if (v385 == v384)
  {
    v33 = 4;
    v32 = v384;
    goto LABEL_25;
  }
  if (v385)
  {
    v33 = 5;
LABEL_25:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
  if (*((_QWORD *)&v328 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v327 + 1);
  if (!*((_QWORD *)&v327 + 1))
    goto LABEL_35;
  v38 = (unint64_t *)(*((_QWORD *)&v327 + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    v40 = v326;
    if (!v326)
      goto LABEL_39;
  }
  else
  {
LABEL_35:
    v40 = v326;
    if (!v326)
      goto LABEL_39;
  }
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(p_shared_owners);
  while (__stlxr(v42 - 1, p_shared_owners));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    v43 = v387;
    if (v387 != v386)
      goto LABEL_40;
LABEL_45:
    v44 = 4;
    v43 = v386;
    goto LABEL_46;
  }
LABEL_39:
  v43 = v387;
  if (v387 == v386)
    goto LABEL_45;
LABEL_40:
  if (!v43)
    goto LABEL_47;
  v44 = 5;
LABEL_46:
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_47:
  if (!v302)
    goto LABEL_76;
  v45 = a4[3];
  if (!v45)
    goto LABEL_51;
  if ((_QWORD *)v45 != a4)
  {
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
LABEL_51:
    v383 = (_QWORD *)v45;
    goto LABEL_53;
  }
  v383 = v382;
  (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v382);
LABEL_53:
  v46 = (uint64_t)v389;
  if (!v389)
  {
LABEL_56:
    v379 = (_QWORD *)v46;
    goto LABEL_58;
  }
  if (v389 != v388)
  {
    v46 = (*(uint64_t (**)(_QWORD *))(*v389 + 16))(v389);
    goto LABEL_56;
  }
  v379 = v378;
  (*(void (**)(_QWORD *, _QWORD *))(v388[0] + 24))(v388, v378);
LABEL_58:
  v47 = v380;
  v48 = (uint64_t)v391;
  if (!v391)
  {
LABEL_61:
    v381 = (_BYTE *)v48;
    goto LABEL_63;
  }
  if (v391 != v390)
  {
    v48 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v391 + 16))(v391);
    goto LABEL_61;
  }
  v381 = v380;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v391 + 24))(v391, v380);
LABEL_63:
  v49 = sub_23942E648((uint64_t)a1, (uint64_t)a1, (uint64_t)&v343, v382, v378, v307, a7, a8, a9, a10);
  if (v381 == v380)
  {
    v50 = 4;
  }
  else
  {
    if (!v381)
      goto LABEL_68;
    v50 = 5;
    v47 = v381;
  }
  (*(void (**)(_QWORD *))(*v47 + 8 * v50))(v47);
LABEL_68:
  v51 = v379;
  if (v379 == v378)
  {
    v52 = 4;
    v51 = v378;
  }
  else
  {
    if (!v379)
      goto LABEL_73;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_73:
  if (v383 == v382)
  {
    (*(void (**)(void))(v382[0] + 32))();
    if ((v49 & 1) == 0)
      goto LABEL_98;
  }
  else
  {
    if (v383)
    {
      (*(void (**)(_QWORD *))(*v383 + 40))(v383);
      if ((v49 & 1) != 0)
        goto LABEL_76;
LABEL_98:
      v70 = 0;
      goto LABEL_425;
    }
    if ((v49 & 1) == 0)
      goto LABEL_98;
  }
LABEL_76:
  v307[6] = v307[5];
  sub_2396FDAA8(a5, (uint64_t)v372);
  sub_2396FD534(&v321, &v394, v19);
  v53 = v304;
  v371 = 0;
  v54 = (char *)operator new(0x40uLL);
  *(_QWORD *)v54 = &off_250ADB9D8;
  *(_OWORD *)(v54 + 8) = v321;
  *((_QWORD *)v54 + 3) = v322;
  *((_QWORD *)&v321 + 1) = 0;
  v322 = 0;
  v55 = v323;
  v323 = 0uLL;
  v56 = v324;
  *((_OWORD *)v54 + 2) = v55;
  *((_OWORD *)v54 + 3) = v56;
  v324 = 0uLL;
  v371 = v54;
  sub_2396FD600((uint64_t)v374, (uint64_t)v372, (uint64_t)v370);
  v57 = v371;
  if (v371 == v370)
  {
    v58 = 4;
    v57 = v370;
    goto LABEL_80;
  }
  if (v371)
  {
    v58 = 5;
LABEL_80:
    (*(void (**)(void))(*v57 + 8 * v58))();
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
  if (*((_QWORD *)&v324 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v323 + 1);
  if (!*((_QWORD *)&v323 + 1))
    goto LABEL_90;
  v63 = (unint64_t *)(*((_QWORD *)&v323 + 1) + 8);
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
    std::__shared_weak_count::__release_weak(v62);
    v65 = v322;
    if (!v322)
      goto LABEL_94;
  }
  else
  {
LABEL_90:
    v65 = v322;
    if (!v322)
      goto LABEL_94;
  }
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    v68 = v373;
    if (v373 != v372)
      goto LABEL_95;
LABEL_102:
    v69 = 4;
    v68 = v372;
    goto LABEL_103;
  }
LABEL_94:
  v68 = v373;
  if (v373 == v372)
    goto LABEL_102;
LABEL_95:
  if (!v68)
    goto LABEL_104;
  v69 = 5;
LABEL_103:
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_104:
  *(_OWORD *)v318 = 0u;
  *(_OWORD *)v319 = 0u;
  v320 = 1065353216;
  if (v28 == v27)
  {
LABEL_368:
    v239 = (uint64_t)v307[5];
    v240 = (unsigned int *)v307[6];
    v241 = 126 - 2 * __clz(((uint64_t)v240 - v239) >> 3);
    if (v240 == (unsigned int *)v239)
      v242 = 0;
    else
      v242 = v241;
    sub_239434DC0(v239, v240, (uint64_t)v316, v242, 1);
    v244 = (char *)v307[5];
    v243 = (char *)v307[6];
    if (v244 == v243)
    {
LABEL_387:
      if (v318 == v307)
        goto LABEL_405;
    }
    else
    {
      v245 = v244 - 8;
      do
      {
        if (v245 + 16 == v243)
          goto LABEL_387;
        v247 = *((_DWORD *)v245 + 2);
        v245 += 8;
        v246 = v247;
        v248 = v247 == *((_DWORD *)v245 + 2) && *((_DWORD *)v245 + 1) == *((_DWORD *)v245 + 3);
      }
      while (!v248);
      for (i = v245 + 16; i != v243; i += 8)
      {
        v250 = v246;
        v246 = *(_DWORD *)i;
        if (v250 != *(_DWORD *)i || *((_DWORD *)v245 + 1) != *((_DWORD *)i + 1))
        {
          *((_DWORD *)v245 + 2) = v246;
          v245 += 8;
          *((_DWORD *)v245 + 1) = *((_DWORD *)i + 1);
        }
      }
      v253 = v245 + 8;
      v254 = v243 - v253;
      if (v243 == v253)
        goto LABEL_387;
      v255 = v253 - v244;
      v256 = &v244[(v253 - v244) & 0xFFFFFFFFFFFFFFF8];
      v257 = &v256[v254];
      if (&v256[v254] != v243)
      {
        v258 = v255 & 0xFFFFFFFFFFFFFFF8;
        v259 = v243 - &v244[v254 + (v255 & 0xFFFFFFFFFFFFFFF8)] - 8;
        if (v259 >= 0x138)
        {
          v274 = v258 + (v259 & 0xFFFFFFFFFFFFFFF8);
          v275 = (unint64_t)&v244[v274 | 4];
          v276 = (unint64_t)&v244[v258 | 4];
          v277 = (unint64_t)&v244[v274 + 8];
          v278 = &v244[v254 + v258];
          v279 = &v278[v259 & 0xFFFFFFFFFFFFFFF8];
          v280 = (unint64_t)(v279 + 4);
          v281 = (unint64_t)(v278 + 4);
          v282 = (unint64_t)(v279 + 8);
          v284 = v256 < v279 + 4 && (unint64_t)v257 < v275;
          v286 = (unint64_t)v256 < v282 && v281 < v275;
          v288 = v276 < v280 && (unint64_t)v257 < v277;
          v290 = v276 < v282 && v281 < v277;
          if (v276 >= v275 || (unint64_t)v256 >= v277)
          {
            if (v284)
            {
              v260 = v256;
            }
            else if (v286)
            {
              v260 = v256;
            }
            else if (v288)
            {
              v260 = v256;
            }
            else if (v290)
            {
              v260 = v256;
            }
            else
            {
              v292 = v254 >> 3;
              v293 = (v259 >> 3) + 1;
              v294 = 8 * (v293 & 0x3FFFFFFFFFFFFFF8);
              v260 = &v256[v294];
              v257 += v294;
              v295 = 8 * v292;
              v296 = v293 & 0x3FFFFFFFFFFFFFF8;
              do
              {
                v297 = *(_OWORD *)&v256[v295 + 16];
                v299 = *(_OWORD *)&v256[v295 + 32];
                v298 = *(_OWORD *)&v256[v295 + 48];
                *(_OWORD *)v256 = *(_OWORD *)&v256[v295];
                *((_OWORD *)v256 + 1) = v297;
                *((_OWORD *)v256 + 2) = v299;
                *((_OWORD *)v256 + 3) = v298;
                v256 += 64;
                v296 -= 8;
              }
              while (v296);
              if (v293 == (v293 & 0x3FFFFFFFFFFFFFF8))
              {
LABEL_400:
                v307[6] = v260;
                if (v318 != v307)
                  goto LABEL_403;
                goto LABEL_405;
              }
            }
          }
          else
          {
            v260 = v256;
          }
        }
        else
        {
          v260 = v256;
        }
        do
        {
          *(_DWORD *)v260 = *(_DWORD *)v257;
          *((_DWORD *)v260 + 1) = *((_DWORD *)v257 + 1);
          v260 += 8;
          v257 += 8;
        }
        while (v257 != v243);
        goto LABEL_400;
      }
      v307[6] = v256;
      if (v318 == v307)
        goto LABEL_405;
    }
LABEL_403:
    if (!v309)
    {
      *((_DWORD *)v307 + 8) = v320;
      sub_239435F04(v307, (uint64_t *)v319[0], 0);
    }
LABEL_405:
    sub_2396FD7B0((uint64_t)a5);
    v317 = 0;
    LOBYTE(v316[0]) = 0;
    sub_2396FCC6C((uint64_t)&v394, (uint64_t)v316);
    if (v317 < 0)
      operator delete(v316[0]);
    v70 = sub_2396FD7B0((uint64_t)a5) ^ 1;
    v252 = v319[0];
    if (!v319[0])
      goto LABEL_408;
    goto LABEL_414;
  }
  v71 = 0;
  v311 = (v28 - v27) >> 3;
  while (1)
  {
    HIBYTE(v315) = 0;
    LOBYTE(__p) = 0;
    sub_2396FD394(v316, (uint64_t)&v394, &__p);
    v72 = v306;
    if (SHIBYTE(v315) < 0)
      operator delete((void *)__p);
    v73 = v307;
    if (sub_2396FD7B0((uint64_t)a5))
      break;
    v74 = *(_QWORD *)(*v306 + 8 * v71);
    *((_QWORD *)&__p + 1) = 0;
    v315 = 0;
    *(_QWORD *)&__p = (char *)&__p + 8;
    v75 = 1;
    v308 = v71;
    while (v75 + v71 < v311)
    {
      v77 = *(_QWORD *)(*v72 + 8 * (v75 + v71));
      if (v74 == v77)
        goto LABEL_113;
      v78 = (uint64_t *)*((_QWORD *)&__p + 1);
      v79 = (uint64_t **)&__p + 1;
LABEL_118:
      v80 = v79;
      if (v78)
      {
        do
        {
          v79 = (uint64_t **)v78;
          v81 = v78[4];
          if (v77 < v81)
          {
            v78 = *v79;
            goto LABEL_118;
          }
          if (v81 >= v77)
            goto LABEL_126;
          v78 = v79[1];
        }
        while (v78);
        v80 = v79 + 1;
      }
      v82 = (uint64_t *)operator new(0x28uLL);
      v82[4] = v77;
      *v82 = 0;
      v82[1] = 0;
      v82[2] = (uint64_t)v79;
      *v80 = v82;
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p = *(_QWORD *)__p;
        v82 = *v80;
      }
      sub_2394213B8(*((uint64_t **)&__p + 1), v82);
      ++v315;
LABEL_126:
      if (v309)
        goto LABEL_113;
      v313 = v74;
      v369 = &v313;
      v83 = sub_239434A44((uint64_t)v318, &v313, (uint64_t)&unk_239EC6E98, &v369);
      v85 = (char *)*((_QWORD *)v83 + 4);
      v84 = *((_QWORD *)v83 + 5);
      if ((unint64_t)v85 < v84)
      {
        *(_DWORD *)v85 = v77;
        v86 = (uint64_t)(v85 + 4);
        goto LABEL_148;
      }
      v87 = (char *)*((_QWORD *)v83 + 3);
      v88 = (v85 - v87) >> 2;
      v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 62)
        sub_2394189F8();
      v90 = v84 - (_QWORD)v87;
      if (v90 >> 1 > v89)
        v89 = v90 >> 1;
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
        v91 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v91 = v89;
      if (v91)
      {
        if (v91 >> 62)
          sub_239418A80();
        v92 = operator new(4 * v91);
        v93 = &v92[4 * v88];
        *v93 = v77;
        v86 = (uint64_t)(v93 + 1);
        if (v85 == v87)
          goto LABEL_146;
LABEL_140:
        v94 = v85 - 4 - v87;
        if (v94 < 0x2C)
          goto LABEL_497;
        if ((unint64_t)(v87 - v92) < 0x20)
          goto LABEL_497;
        v95 = (v94 >> 2) + 1;
        v96 = 4 * (v95 & 0x7FFFFFFFFFFFFFF8);
        v97 = &v85[-v96];
        v93 = (_DWORD *)((char *)v93 - v96);
        v98 = &v92[4 * v88 - 16];
        v99 = v85 - 16;
        v100 = v95 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v101 = *(_OWORD *)v99;
          *(v98 - 1) = *((_OWORD *)v99 - 1);
          *v98 = v101;
          v98 -= 2;
          v99 -= 32;
          v100 -= 8;
        }
        while (v100);
        v85 = v97;
        if (v95 != (v95 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_497:
          do
          {
            v102 = *((_DWORD *)v85 - 1);
            v85 -= 4;
            *--v93 = v102;
          }
          while (v85 != v87);
        }
        goto LABEL_146;
      }
      v92 = 0;
      v93 = (_DWORD *)(4 * v88);
      *(_DWORD *)(4 * v88) = v77;
      v86 = 4 * v88 + 4;
      if (v85 != v87)
        goto LABEL_140;
LABEL_146:
      *((_QWORD *)v83 + 3) = v93;
      *((_QWORD *)v83 + 4) = v86;
      *((_QWORD *)v83 + 5) = &v92[4 * v91];
      if (v87)
        operator delete(v87);
LABEL_148:
      *((_QWORD *)v83 + 4) = v86;
      v313 = v74;
      v369 = &v313;
      v103 = sub_239434A44((uint64_t)v318, &v313, (uint64_t)&unk_239EC6E98, &v369);
      v104 = (float)(unint64_t)(v304 + 1 - v75);
      v106 = (float *)*((_QWORD *)v103 + 7);
      v105 = *((_QWORD *)v103 + 8);
      if ((unint64_t)v106 >= v105)
      {
        v107 = (float *)*((_QWORD *)v103 + 6);
        v108 = v106 - v107;
        v109 = v108 + 1;
        if ((unint64_t)(v108 + 1) >> 62)
          sub_2394189F8();
        v110 = v105 - (_QWORD)v107;
        if (v110 >> 1 > v109)
          v109 = v110 >> 1;
        if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL)
          v111 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v111 = v109;
        if (v111)
        {
          if (v111 >> 62)
            sub_239418A80();
          v112 = operator new(4 * v111);
          v113 = (float *)&v112[4 * v108];
          *v113 = v104;
          v76 = (uint64_t)(v113 + 1);
          if (v106 == v107)
            goto LABEL_166;
LABEL_160:
          v114 = (char *)(v106 - 1) - (char *)v107;
          if (v114 < 0x2C)
            goto LABEL_498;
          if ((unint64_t)((char *)v107 - v112) < 0x20)
            goto LABEL_498;
          v115 = (v114 >> 2) + 1;
          v116 = 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
          v117 = &v106[v116 / 0xFFFFFFFFFFFFFFFCLL];
          v113 = (float *)((char *)v113 - v116);
          v118 = &v112[4 * v108 - 16];
          v119 = v106 - 4;
          v120 = v115 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v121 = *(_OWORD *)v119;
            *(v118 - 1) = *((_OWORD *)v119 - 1);
            *v118 = v121;
            v118 -= 2;
            v119 -= 8;
            v120 -= 8;
          }
          while (v120);
          v106 = v117;
          if (v115 != (v115 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_498:
            do
            {
              v122 = *((_DWORD *)v106-- - 1);
              *((_DWORD *)v113-- - 1) = v122;
            }
            while (v106 != v107);
          }
        }
        else
        {
          v112 = 0;
          v113 = (float *)(4 * v108);
          *(float *)(4 * v108) = v104;
          v76 = 4 * v108 + 4;
          if (v106 != v107)
            goto LABEL_160;
        }
LABEL_166:
        *((_QWORD *)v103 + 6) = v113;
        *((_QWORD *)v103 + 7) = v76;
        *((_QWORD *)v103 + 8) = &v112[4 * v111];
        if (v107)
          operator delete(v107);
        goto LABEL_112;
      }
      *v106 = v104;
      v76 = (uint64_t)(v106 + 1);
LABEL_112:
      v72 = v306;
      v73 = v307;
      *((_QWORD *)v103 + 7) = v76;
      v53 = v304;
      v71 = v308;
LABEL_113:
      v248 = v75++ == v53;
      if (v248)
        break;
    }
    if (v302)
    {
      v123 = (unint64_t)v73[1];
      if (!v123)
        goto LABEL_106;
      v124 = (uint8x8_t)vcnt_s8((int8x8_t)v123);
      v124.i16[0] = vaddlv_u8(v124);
      if (v124.u32[0] > 1uLL)
      {
        v125 = v74;
        if (v123 <= v74)
          v125 = v74 % v123;
      }
      else
      {
        v125 = ((_DWORD)v123 - 1) & v74;
      }
      v126 = *v73;
      v127 = (uint64_t **)*((_QWORD *)*v73 + v125);
      if (!v127)
        goto LABEL_106;
      v128 = *v127;
      if (!*v127)
        goto LABEL_106;
      v129 = v123 - 1;
      if (v124.u32[0] < 2uLL)
      {
        while (1)
        {
          v130 = v128[1];
          if (v130 == v74)
          {
            if (*((_DWORD *)v128 + 4) == (_DWORD)v74)
              goto LABEL_190;
          }
          else if ((v130 & v129) != v125)
          {
            goto LABEL_106;
          }
          v128 = (uint64_t *)*v128;
          if (!v128)
            goto LABEL_106;
        }
      }
      while (1)
      {
        v131 = v128[1];
        if (v131 == v74)
          break;
        if (v131 >= v123)
          v131 %= v123;
        if (v131 != v125)
          goto LABEL_106;
LABEL_184:
        v128 = (uint64_t *)*v128;
        if (!v128)
          goto LABEL_106;
      }
      if (*((_DWORD *)v128 + 4) != (_DWORD)v74)
        goto LABEL_184;
LABEL_190:
      if (v124.u32[0] > 1uLL)
      {
        v132 = v74;
        if (v123 <= v74)
          v132 = v74 % v123;
      }
      else
      {
        v132 = ((_DWORD)v123 - 1) & v74;
      }
      v133 = (uint64_t **)v126[v132];
      if (!v133 || (v134 = *v133) == 0)
LABEL_483:
        sub_23941D898("unordered_map::at: key not found");
      if (v124.u32[0] < 2uLL)
      {
        while (1)
        {
          v135 = v134[1];
          if (v135 == v74)
          {
            if (*((_DWORD *)v134 + 4) == (_DWORD)v74)
              goto LABEL_202;
          }
          else if ((v135 & v129) != v132)
          {
            goto LABEL_483;
          }
          v134 = (uint64_t *)*v134;
          if (!v134)
            goto LABEL_483;
        }
      }
      while (2)
      {
        v137 = v134[1];
        if (v137 != v74)
        {
          if (v137 >= v123)
            v137 %= v123;
          if (v137 != v132)
            goto LABEL_483;
LABEL_205:
          v134 = (uint64_t *)*v134;
          if (!v134)
            goto LABEL_483;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v134 + 4) != (_DWORD)v74)
        goto LABEL_205;
LABEL_202:
      if (v124.u32[0] > 1uLL)
      {
        v136 = v74;
        if (v123 <= v74)
          v136 = v74 % v123;
      }
      else
      {
        v136 = ((_DWORD)v123 - 1) & v74;
      }
      v138 = (uint64_t **)v126[v136];
      if (!v138 || (v139 = *v138) == 0)
LABEL_484:
        sub_23941D898("unordered_map::at: key not found");
      if (v124.u32[0] < 2uLL)
      {
        while (1)
        {
          v140 = v139[1];
          if (v140 == v74)
          {
            if (*((_DWORD *)v139 + 4) == (_DWORD)v74)
              goto LABEL_221;
          }
          else if ((v140 & v129) != v136)
          {
            goto LABEL_484;
          }
          v139 = (uint64_t *)*v139;
          if (!v139)
            goto LABEL_484;
        }
      }
      while (2)
      {
        v142 = v139[1];
        if (v142 != v74)
        {
          if (v142 >= v123)
            v142 %= v123;
          if (v142 != v136)
            goto LABEL_484;
LABEL_224:
          v139 = (uint64_t *)*v139;
          if (!v139)
            goto LABEL_484;
          continue;
        }
        break;
      }
      if (*((_DWORD *)v139 + 4) != (_DWORD)v74)
        goto LABEL_224;
LABEL_221:
      if (v124.u32[0] > 1uLL)
      {
        v141 = v74;
        if (v123 <= v74)
          v141 = v74 % v123;
      }
      else
      {
        v141 = ((_DWORD)v123 - 1) & v74;
      }
      v143 = (uint64_t **)v126[v141];
      if (v143)
      {
        v144 = *v143;
        if (v144)
        {
          if (v124.u32[0] < 2uLL)
          {
            while (1)
            {
              v145 = v144[1];
              if (v145 == v74)
              {
                if (*((_DWORD *)v144 + 4) == (_DWORD)v74)
                  goto LABEL_248;
              }
              else if ((v145 & v129) != v141)
              {
                goto LABEL_321;
              }
              v144 = (uint64_t *)*v144;
              if (!v144)
                goto LABEL_321;
            }
          }
          while (1)
          {
            v146 = v144[1];
            if (v146 == v74)
              break;
            if (v146 >= v123)
              v146 %= v123;
            if (v146 != v141)
              goto LABEL_321;
LABEL_242:
            v144 = (uint64_t *)*v144;
            if (!v144)
              goto LABEL_321;
          }
          if (*((_DWORD *)v144 + 4) != (_DWORD)v74)
            goto LABEL_242;
LABEL_248:
          v147 = v134[4] - v134[3];
          if (v147)
          {
            v148 = 0;
            v149 = v147 >> 2;
            v300 = v147 >> 2;
            while (1)
            {
              if (v315 >= v304 + v302)
                goto LABEL_321;
              v150 = *(unsigned int *)(v134[3] + 4 * v148);
              if (v74 != v150)
                break;
LABEL_251:
              if (++v148 == v149)
                goto LABEL_321;
            }
            if (!v309)
            {
              v151 = __p;
              if ((__int128 *)__p == (__int128 *)((char *)&__p + 8))
                goto LABEL_266;
              while (*(_QWORD *)(v151 + 32) != v150)
              {
                v152 = *(__int128 **)(v151 + 8);
                if (v152)
                {
                  do
                  {
                    v153 = v152;
                    v152 = *(__int128 **)v152;
                  }
                  while (v152);
                }
                else
                {
                  do
                  {
                    v153 = *(__int128 **)(v151 + 16);
                    v248 = *(_QWORD *)v153 == v151;
                    v151 = (uint64_t)v153;
                  }
                  while (!v248);
                }
                v151 = (uint64_t)v153;
                if (v153 == (__int128 *)((char *)&__p + 8))
                  goto LABEL_266;
              }
              if ((__int128 *)v151 == (__int128 *)((char *)&__p + 8))
              {
LABEL_266:
                v301 = *(unsigned int *)(v134[3] + 4 * v148);
                v154 = *(_DWORD *)(v139[6] + 4 * v148);
                v313 = v74;
                v369 = &v313;
                v155 = sub_239434A44((uint64_t)v318, &v313, (uint64_t)&unk_239EC6E98, &v369);
                v157 = (char *)*((_QWORD *)v155 + 4);
                v156 = *((_QWORD *)v155 + 5);
                if ((unint64_t)v157 >= v156)
                {
                  v159 = (char *)*((_QWORD *)v155 + 3);
                  v160 = (char *)(v157 - v159);
                  v161 = (v157 - v159) >> 2;
                  v162 = v161 + 1;
                  if ((unint64_t)(v161 + 1) >> 62)
                    sub_2394189F8();
                  v163 = v156 - (_QWORD)v159;
                  if (v163 >> 1 > v162)
                    v162 = v163 >> 1;
                  if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
                    v164 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v164 = v162;
                  if (v164)
                  {
                    if (v164 >> 62)
                      sub_239418A80();
                    v165 = v155;
                    v166 = v164;
                    v167 = operator new(4 * v164);
                    v155 = v165;
                    v164 = v166;
                    v160 = (char *)(v157 - v159);
                  }
                  else
                  {
                    v167 = 0;
                  }
                  v168 = &v167[4 * v161];
                  *v168 = v301;
                  v158 = v168 + 1;
                  if (v157 != v159)
                  {
                    v169 = v157 - 4 - v159;
                    if (v169 < 0x2C)
                      goto LABEL_499;
                    if ((unint64_t)(v157 - v167 - (_QWORD)v160) < 0x20)
                      goto LABEL_499;
                    v170 = (v169 >> 2) + 1;
                    v171 = 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
                    v172 = &v157[-v171];
                    v168 = (_DWORD *)((char *)v168 - v171);
                    v173 = &v167[4 * v161 - 16];
                    v174 = v157 - 16;
                    v175 = v170 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v176 = *(_OWORD *)v174;
                      *(v173 - 1) = *((_OWORD *)v174 - 1);
                      *v173 = v176;
                      v173 -= 2;
                      v174 -= 32;
                      v175 -= 8;
                    }
                    while (v175);
                    v157 = v172;
                    if (v170 != (v170 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_499:
                      do
                      {
                        v177 = *((_DWORD *)v157 - 1);
                        v157 -= 4;
                        *--v168 = v177;
                      }
                      while (v157 != v159);
                    }
                  }
                  *((_QWORD *)v155 + 3) = v168;
                  *((_QWORD *)v155 + 4) = v158;
                  *((_QWORD *)v155 + 5) = &v167[4 * v164];
                  if (v159)
                  {
                    v178 = v159;
                    v179 = v155;
                    operator delete(v178);
                    v155 = v179;
                  }
                }
                else
                {
                  *(_DWORD *)v157 = v301;
                  v158 = v157 + 4;
                }
                *((_QWORD *)v155 + 4) = v158;
                v313 = v74;
                v369 = &v313;
                v180 = sub_239434A44((uint64_t)v318, &v313, (uint64_t)&unk_239EC6E98, &v369);
                v182 = (char *)*((_QWORD *)v180 + 7);
                v181 = *((_QWORD *)v180 + 8);
                if ((unint64_t)v182 < v181)
                {
                  *(_DWORD *)v182 = v154;
                  v183 = v182 + 4;
                  v73 = v307;
                  v149 = v300;
                  goto LABEL_311;
                }
                v184 = (char *)*((_QWORD *)v180 + 6);
                v185 = (char *)(v182 - v184);
                v186 = (v182 - v184) >> 2;
                v187 = v186 + 1;
                if ((unint64_t)(v186 + 1) >> 62)
                  sub_2394189F8();
                v188 = v181 - (_QWORD)v184;
                if (v188 >> 1 > v187)
                  v187 = v188 >> 1;
                if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL)
                  v189 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v189 = v187;
                if (v189)
                {
                  if (v189 >> 62)
                    sub_239418A80();
                  v190 = v180;
                  v191 = v189;
                  v192 = operator new(4 * v189);
                  v180 = v190;
                  v189 = v191;
                  v186 = (v182 - v184) >> 2;
                  v185 = (char *)(v182 - v184);
                }
                else
                {
                  v192 = 0;
                }
                v193 = &v192[4 * v186];
                *v193 = v154;
                v183 = v193 + 1;
                if (v182 == v184)
                {
                  v149 = v300;
                }
                else
                {
                  v194 = v182 - 4 - v184;
                  if (v194 < 0x2C)
                  {
                    v149 = v300;
                    goto LABEL_307;
                  }
                  v149 = v300;
                  if ((unint64_t)(v182 - v192 - (_QWORD)v185) < 0x20)
                    goto LABEL_500;
                  v195 = (v194 >> 2) + 1;
                  v196 = 4 * (v195 & 0x7FFFFFFFFFFFFFF8);
                  v197 = &v182[-v196];
                  v193 = (_DWORD *)((char *)v193 - v196);
                  v198 = &v192[4 * v186 - 16];
                  v199 = v182 - 16;
                  v200 = v195 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v201 = *(_OWORD *)v199;
                    *(v198 - 1) = *((_OWORD *)v199 - 1);
                    *v198 = v201;
                    v198 -= 2;
                    v199 -= 32;
                    v200 -= 8;
                  }
                  while (v200);
                  v182 = v197;
                  if (v195 != (v195 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_500:
                    do
                    {
LABEL_307:
                      v202 = *((_DWORD *)v182 - 1);
                      v182 -= 4;
                      *--v193 = v202;
                    }
                    while (v182 != v184);
                  }
                }
                *((_QWORD *)v180 + 6) = v193;
                *((_QWORD *)v180 + 7) = v183;
                *((_QWORD *)v180 + 8) = &v192[4 * v189];
                if (v184)
                {
                  v203 = v184;
                  v204 = v180;
                  operator delete(v203);
                  v180 = v204;
                }
                v73 = v307;
LABEL_311:
                v150 = v301;
                *((_QWORD *)v180 + 7) = v183;
              }
            }
            v205 = (uint64_t *)*((_QWORD *)&__p + 1);
            v206 = (uint64_t **)&__p + 1;
LABEL_314:
            v207 = v206;
            if (v205)
            {
              do
              {
                v206 = (uint64_t **)v205;
                v208 = v205[4];
                if (v208 > v150)
                {
                  v205 = *v206;
                  goto LABEL_314;
                }
                if (v208 >= v150)
                  goto LABEL_251;
                v205 = v206[1];
              }
              while (v205);
              v207 = v206 + 1;
            }
            v209 = (uint64_t *)operator new(0x28uLL);
            v209[4] = v150;
            *v209 = 0;
            v209[1] = 0;
            v209[2] = (uint64_t)v206;
            *v207 = v209;
            if (*(_QWORD *)__p)
            {
              *(_QWORD *)&__p = *(_QWORD *)__p;
              v209 = *v207;
            }
            sub_2394213B8(*((uint64_t **)&__p + 1), v209);
            ++v315;
            goto LABEL_251;
          }
        }
      }
    }
LABEL_321:
    v210 = (__int128 *)__p;
    if ((__int128 *)__p != (__int128 *)((char *)&__p + 8))
    {
      v211 = (char *)v73[6];
      while (1)
      {
        v212 = *((_QWORD *)v210 + 4);
        v213 = (unint64_t)v73[7];
        if ((unint64_t)v211 < v213)
        {
          if (v212 >= v74)
            LODWORD(v214) = v74;
          else
            v214 = *((_QWORD *)v210 + 4);
          if (v212 <= v74)
            LODWORD(v215) = v74;
          else
            v215 = *((_QWORD *)v210 + 4);
          *(_DWORD *)v211 = v214;
          *((_DWORD *)v211 + 1) = v215;
          v211 += 8;
          goto LABEL_356;
        }
        v216 = (char *)*v305;
        v217 = v211 - (_BYTE *)*v305;
        v218 = v217 >> 3;
        v219 = (v217 >> 3) + 1;
        if (v219 >> 61)
          sub_2394189F8();
        v220 = v213 - (_QWORD)v216;
        if (v220 >> 2 > v219)
          v219 = v220 >> 2;
        if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF8)
          v221 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v221 = v219;
        if (v221 >> 61)
          sub_239418A80();
        v222 = operator new(8 * v221);
        v223 = &v222[8 * v218];
        if (v212 >= v74)
          v224 = v74;
        else
          v224 = v212;
        if (v212 <= v74)
          v225 = v74;
        else
          v225 = v212;
        *(_DWORD *)v223 = v224;
        *((_DWORD *)v223 + 1) = v225;
        if (v211 == v216)
        {
          v211 = v223 + 8;
          v73[5] = v223;
          v73[6] = v223 + 8;
          v73[7] = &v222[8 * v221];
          if (!v216)
            goto LABEL_356;
LABEL_355:
          operator delete(v216);
          goto LABEL_356;
        }
        v226 = v211 - 8 - v216;
        if (v226 < 0x168)
          break;
        v227 = &v222[v217 - 8 - (v226 & 0xFFFFFFFFFFFFFFF8)] > &v222[v217 - 8]
            || &v211[-(v226 & 0xFFFFFFFFFFFFFFF8) - 8] > v211 - 8;
        if (v227 || (unint64_t)(v211 - &v222[v217]) < 0x20)
          break;
        v233 = (v226 >> 3) + 1;
        v234 = 8 * (v233 & 0x3FFFFFFFFFFFFFFCLL);
        v228 = &v211[-v234];
        v229 = &v223[-v234];
        v235 = &v222[8 * v218 - 16];
        v236 = v211 - 16;
        v237 = v233 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v238 = *(_OWORD *)v236;
          *(v235 - 1) = *((_OWORD *)v236 - 1);
          *v235 = v238;
          v235 -= 2;
          v236 -= 32;
          v237 -= 4;
        }
        while (v237);
        if (v233 != (v233 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_353;
LABEL_354:
        v211 = v223 + 8;
        v73[5] = v229;
        v73[6] = v223 + 8;
        v73[7] = &v222[8 * v221];
        if (v216)
          goto LABEL_355;
LABEL_356:
        v73[6] = v211;
        v231 = (__int128 *)*((_QWORD *)v210 + 1);
        if (v231)
        {
          do
          {
            v232 = v231;
            v231 = *(__int128 **)v231;
          }
          while (v231);
        }
        else
        {
          do
          {
            v232 = (__int128 *)*((_QWORD *)v210 + 2);
            v248 = *(_QWORD *)v232 == (_QWORD)v210;
            v210 = v232;
          }
          while (!v248);
        }
        v210 = v232;
        if (v232 == (__int128 *)((char *)&__p + 8))
          goto LABEL_106;
      }
      v228 = v211;
      v229 = &v222[8 * v218];
      do
      {
LABEL_353:
        v230 = *((_QWORD *)v228 - 1);
        v228 -= 8;
        *((_QWORD *)v229 - 1) = v230;
        v229 -= 8;
      }
      while (v228 != v216);
      goto LABEL_354;
    }
LABEL_106:
    sub_239421038((uint64_t)&__p, *((_QWORD **)&__p + 1));
    sub_2396FD3E8((uint64_t)v316);
    v71 = v308 + 1;
    v53 = v304;
    if (v308 + 1 == v311)
      goto LABEL_368;
  }
  HIBYTE(v315) = 0;
  LOBYTE(__p) = 0;
  sub_2396FCC6C((uint64_t)&v394, (uint64_t)&__p);
  if (SHIBYTE(v315) < 0)
    operator delete((void *)__p);
  sub_2396FD3E8((uint64_t)v316);
  v70 = 0;
  v252 = v319[0];
  if (v319[0])
  {
    do
    {
LABEL_414:
      v264 = (_QWORD *)*v252;
      v265 = (void *)v252[6];
      if (v265)
      {
        v252[7] = v265;
        operator delete(v265);
      }
      v266 = (void *)v252[3];
      if (v266)
      {
        v252[4] = v266;
        operator delete(v266);
      }
      operator delete(v252);
      v252 = v264;
    }
    while (v264);
  }
LABEL_408:
  v261 = v318[0];
  v318[0] = 0;
  if (v261)
    operator delete(v261);
  v262 = v377;
  if (v377 == v376)
  {
    v263 = 4;
    v262 = v376;
LABEL_419:
    (*(void (**)(void))(*v262 + 8 * v263))();
  }
  else if (v377)
  {
    v263 = 5;
    goto LABEL_419;
  }
  v267 = v375;
  if (v375 == v374)
  {
    v268 = 4;
    v267 = v374;
LABEL_424:
    (*(void (**)(void))(*v267 + 8 * v268))();
  }
  else if (v375)
  {
    v268 = 5;
    goto LABEL_424;
  }
LABEL_425:
  v269 = v391;
  if (v391 == v390)
  {
    v270 = 4;
    v269 = v390;
LABEL_429:
    (*(void (**)(void))(*v269 + 8 * v270))();
  }
  else if (v391)
  {
    v270 = 5;
    goto LABEL_429;
  }
  v271 = v389;
  if (v389 == v388)
  {
    v272 = 4;
    v271 = v388;
LABEL_434:
    (*(void (**)(void))(*v271 + 8 * v272))();
  }
  else if (v389)
  {
    v272 = 5;
    goto LABEL_434;
  }
  if (SHIBYTE(v334) < 0)
    operator delete(*((void **)&v333 + 1));
  if ((_QWORD)v332)
  {
    *((_QWORD *)&v332 + 1) = v332;
    operator delete((void *)v332);
  }
  sub_2396FCD14((uint64_t)&v394);
  return v70;
}

void sub_2394324A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_239421038((uint64_t)&__p, (_QWORD *)a29);
  sub_2396FD3E8((uint64_t)&a31);
  sub_2394327E4((uint64_t)&a35);
  sub_23942FE80(&STACK[0x320]);
  sub_23942FE80(&STACK[0x400]);
  sub_23943285C((uint64_t)&a57);
  sub_2396FCD14((uint64_t)&STACK[0x460]);
  _Unwind_Resume(a1);
}

uint64_t sub_2394327E4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[6];
      if (v6)
      {
        v2[7] = v6;
        operator delete(v6);
      }
      v7 = (void *)v2[3];
      if (v7)
      {
        v2[4] = v7;
        operator delete(v7);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_23943285C(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    v2 = *(void **)(a1 + 32);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2394328A8(uint64_t *a1, unint64_t **a2, unint64_t **a3, uint64_t a4, _QWORD *a5, _QWORD *a6, void **a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  _QWORD *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  void **v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  _QWORD *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  _BYTE *v145;
  int v146;
  int v147;
  double *v148;
  unint64_t **v149;
  unint64_t **v150;
  void **v151;
  uint64_t v152;
  __int128 v153;
  std::__shared_weak_count *v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  std::__shared_weak_count *v162;
  __int128 v163;
  __int128 v164;
  void *v165;
  _BYTE *v166;
  uint64_t v167;
  _QWORD v168[3];
  _QWORD *v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  _BYTE v174[24];
  _BYTE *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _BYTE v178[24];
  _BYTE *v179;
  _QWORD v180[3];
  _QWORD *v181;
  _BYTE v182[24];
  _BYTE *v183;
  _BYTE v184[24];
  _BYTE *v185;
  _BYTE v186[24];
  _BYTE *v187;
  void *__p[2];
  char v189;
  void **v190;
  _BYTE v191[24];
  _BYTE *v192;
  _QWORD v193[3];
  _QWORD *v194;
  _BYTE v195[24];
  _BYTE *v196;
  _QWORD v197[3];
  _QWORD *v198;
  _QWORD v199[3];
  _QWORD *v200;
  _BYTE v201[24];
  _BYTE *v202;
  _QWORD v203[3];
  _QWORD *v204;
  _BYTE v205[24];
  _BYTE *v206;
  _BYTE v207[24];
  _BYTE *v208;
  _QWORD v209[3];
  _QWORD *v210;
  _QWORD v211[3];
  _QWORD *v212;
  _BYTE v213[24];
  _BYTE *v214;
  _BYTE v215[568];
  _QWORD v216[3];
  _QWORD *v217;
  uint64_t v218;

  v218 = *MEMORY[0x24BDAC8D0];
  v216[0] = &off_250ADBA20;
  v217 = v216;
  if (!a5[3])
  {
    v141 = 386;
    goto LABEL_284;
  }
  if (!a1[12])
  {
    v141 = 387;
LABEL_284:
    sub_239A444D4((uint64_t)"unknown file", v141, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v19 = *(unsigned __int8 *)(a4 + 64);
  v148 = (double *)(a4 + 64);
  v146 = *(unsigned __int8 *)(a4 + 117);
  v20 = *(_DWORD *)a4;
  v21 = *(unsigned __int8 *)(a4 + 65);
  v165 = 0;
  v166 = 0;
  v167 = 0;
  sub_239433C1C((uint64_t)a1, (uint64_t)&v165, 1);
  v149 = a2;
  v150 = a3;
  v22 = (char *)a2[1] - (char *)*a2;
  v23 = (char *)a3[1] - (char *)*a3;
  v151 = a7;
  v152 = v23 >> 3;
  v144 = v165;
  v145 = v166;
  v143 = v22 >> 3;
  if (v20 != 1)
  {
    if (v20 || *(_DWORD *)(a4 + 112) < (int)((unint64_t)v22 >> 3))
      goto LABEL_9;
LABEL_8:
    v24 = 1;
    v25 = v23 >> 3;
    v23 >>= 3;
    goto LABEL_10;
  }
  if ((unint64_t)(v22 >> 3) <= *(_QWORD *)(a4 + 56) + *(_QWORD *)(a4 + 48))
    goto LABEL_8;
LABEL_9:
  v24 = 0;
  v25 = v23 >> 3;
LABEL_10:
  v147 = v19;
  if (v19)
    v26 = v24;
  else
    v26 = 1;
  if (v26)
    v27 = 0;
  else
    v27 = v25;
  v28 = v25;
  sub_2396FD800(a6, (uint64_t)v213);
  if (v21)
    v29 = v28;
  else
    v29 = 0;
  v209[0] = 0x42C8000000000000;
  sub_2396FCC68(v215, v23 + v29 + v27, v213, v209, 1.0);
  v30 = v214;
  if (v214 == v213)
  {
    v31 = 4;
    v30 = v213;
  }
  else
  {
    if (!v214)
      goto LABEL_24;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_24:
  sub_2396FDAA8(a6, (uint64_t)v207);
  sub_2396FD534(&v161, v215, v23);
  v32 = v27;
  v206 = 0;
  v33 = (char *)operator new(0x40uLL);
  *(_QWORD *)v33 = &off_250ADB9D8;
  *(_OWORD *)(v33 + 8) = v161;
  *((_QWORD *)v33 + 3) = v162;
  *((_QWORD *)&v161 + 1) = 0;
  v162 = 0;
  v34 = v163;
  v163 = 0uLL;
  v35 = v164;
  *((_OWORD *)v33 + 2) = v34;
  *((_OWORD *)v33 + 3) = v35;
  v164 = 0uLL;
  v206 = v33;
  sub_2396FD600((uint64_t)v209, (uint64_t)v207, (uint64_t)v205);
  v36 = v206;
  if (v206 == v205)
  {
    v37 = 4;
    v36 = v205;
    goto LABEL_28;
  }
  if (v206)
  {
    v37 = 5;
LABEL_28:
    (*(void (**)(void))(*v36 + 8 * v37))();
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
  if (*((_QWORD *)&v164 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v163 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v162;
  if (v162)
  {
    p_shared_owners = (unint64_t *)&v162->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v208;
  if (v208 == v207)
  {
    v48 = 4;
    v47 = v207;
  }
  else
  {
    if (!v208)
      goto LABEL_49;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_49:
  if ((v24 & 1) != 0)
  {
    v49 = (uint64_t)v210;
    if (v210)
    {
      v50 = v151;
      if (v210 == v209)
      {
        v177 = v176;
        (*(void (**)(_QWORD *, _QWORD *))(v209[0] + 24))(v209, v176);
LABEL_68:
        v54 = v178;
        v55 = (uint64_t)v212;
        if (v212)
        {
          if (v212 == v211)
          {
            v179 = v178;
            (*(void (**)(_QWORD *, _BYTE *))(v211[0] + 24))(v211, v178);
LABEL_73:
            v56 = sub_23942FFE0(v150, v149, v176, (uint64_t)v50);
            if (v179 == v178)
            {
              v57 = 4;
            }
            else
            {
              if (!v179)
                goto LABEL_78;
              v57 = 5;
              v54 = v179;
            }
            (*(void (**)(_QWORD *))(*v54 + 8 * v57))(v54);
LABEL_78:
            v58 = v177;
            if (v177 == v176)
            {
              v59 = 4;
              v58 = v176;
            }
            else
            {
              if (!v177)
                goto LABEL_83;
              v59 = 5;
            }
            (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_83:
            if ((v56 & 1) == 0)
            {
              if (!a12)
                goto LABEL_260;
              v60 = 3010;
LABEL_115:
              sub_2394202DC((_QWORD *)(a11 + 192), v60);
              goto LABEL_260;
            }
            goto LABEL_201;
          }
          v55 = (*(uint64_t (**)(void))(*v212 + 16))();
        }
        v179 = (_BYTE *)v55;
        goto LABEL_73;
      }
      v49 = (*(uint64_t (**)(void))(*v210 + 16))();
    }
    else
    {
      v50 = v151;
    }
    v177 = (_QWORD *)v49;
    goto LABEL_68;
  }
  if (v20 == 1)
  {
    v51 = (v145 - v144) >> 3;
    if (v152 == v51)
    {
      v50 = v151;
      if (v143 == v51)
      {
        v52 = a5[3];
        if (v52)
        {
          if ((_QWORD *)v52 == a5)
          {
            v204 = v203;
            (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v203);
LABEL_87:
            v61 = (uint64_t)v210;
            if (v210)
            {
              if (v210 == v209)
              {
                v200 = v199;
                (*(void (**)(_QWORD *, _QWORD *))(v209[0] + 24))(v209, v199);
LABEL_92:
                v62 = v201;
                v63 = (uint64_t)v212;
                if (v212)
                {
                  if (v212 == v211)
                  {
                    v202 = v201;
                    (*(void (**)(_QWORD *, _BYTE *))(v211[0] + 24))(v211, v201);
LABEL_97:
                    v64 = sub_239430A18(&v165, (uint64_t *)(a4 + 48), v146 != 0, v203, v199, v151, a9, a10, a11, a12);
                    if (v202 == v201)
                    {
                      v65 = 4;
                    }
                    else
                    {
                      if (!v202)
                        goto LABEL_102;
                      v65 = 5;
                      v62 = v202;
                    }
                    (*(void (**)(_QWORD *))(*v62 + 8 * v65))(v62);
LABEL_102:
                    v66 = v200;
                    if (v200 == v199)
                    {
                      v67 = 4;
                      v66 = v199;
                    }
                    else
                    {
                      if (!v200)
                        goto LABEL_107;
                      v67 = 5;
                    }
                    (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_107:
                    v68 = v204;
                    if (v204 == v203)
                    {
                      v69 = 4;
                      v68 = v203;
                    }
                    else
                    {
                      if (!v204)
                        goto LABEL_112;
                      v69 = 5;
                    }
                    (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_112:
                    if ((v64 & 1) == 0)
                    {
                      if (!a12)
                        goto LABEL_260;
                      v60 = 3011;
                      goto LABEL_115;
                    }
                    goto LABEL_143;
                  }
                  v63 = (*(uint64_t (**)(void))(*v212 + 16))();
                }
                v202 = (_BYTE *)v63;
                goto LABEL_97;
              }
              v61 = (*(uint64_t (**)(void))(*v210 + 16))();
            }
            v200 = (_QWORD *)v61;
            goto LABEL_92;
          }
          v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
        }
        v204 = (_QWORD *)v52;
        goto LABEL_87;
      }
      v142 = 436;
    }
    else
    {
      v142 = 434;
    }
    sub_239A444D4((uint64_t)"unknown file", v142, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v50 = v151;
  if (v20)
    goto LABEL_143;
  v53 = a5[3];
  if (!v53)
    goto LABEL_64;
  if ((_QWORD *)v53 != a5)
  {
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
LABEL_64:
    v198 = (_QWORD *)v53;
    goto LABEL_117;
  }
  v198 = v197;
  (*(void (**)(_QWORD *, _QWORD *))(*a5 + 24))(a5, v197);
LABEL_117:
  v70 = (uint64_t)v210;
  if (!v210)
  {
LABEL_120:
    v194 = (_QWORD *)v70;
    goto LABEL_122;
  }
  if (v210 != v209)
  {
    v70 = (*(uint64_t (**)(void))(*v210 + 16))();
    goto LABEL_120;
  }
  v194 = v193;
  (*(void (**)(_QWORD *, _QWORD *))(v209[0] + 24))(v209, v193);
LABEL_122:
  v71 = v195;
  v72 = (uint64_t)v212;
  if (!v212)
  {
LABEL_125:
    v196 = (_BYTE *)v72;
    goto LABEL_127;
  }
  if (v212 != v211)
  {
    v72 = (*(uint64_t (**)(void))(*v212 + 16))();
    goto LABEL_125;
  }
  v196 = v195;
  (*(void (**)(void))(*v212 + 24))();
LABEL_127:
  v73 = sub_23942E648((uint64_t)v149, (uint64_t)v150, a4, v197, v193, v151, a9, a10, a11, a12);
  if (v196 == v195)
  {
    v74 = 4;
  }
  else
  {
    if (!v196)
      goto LABEL_132;
    v74 = 5;
    v71 = v196;
  }
  (*(void (**)(_QWORD *))(*v71 + 8 * v74))(v71);
LABEL_132:
  v75 = v194;
  if (v194 == v193)
  {
    v76 = 4;
    v75 = v193;
  }
  else
  {
    if (!v194)
      goto LABEL_137;
    v76 = 5;
  }
  (*(void (**)(void))(*v75 + 8 * v76))();
LABEL_137:
  v77 = v198;
  if (v198 == v197)
  {
    v78 = 4;
    v77 = v197;
  }
  else
  {
    if (!v198)
      goto LABEL_142;
    v78 = 5;
  }
  (*(void (**)(void))(*v77 + 8 * v78))();
LABEL_142:
  if ((v73 & 1) == 0)
    goto LABEL_260;
LABEL_143:
  if (!v147)
    goto LABEL_201;
  sub_2396FDAA8(a6, (uint64_t)v186);
  sub_2396FD534(&v157, v215, v32);
  v185 = 0;
  v79 = (char *)operator new(0x40uLL);
  *(_QWORD *)v79 = &off_250ADB9D8;
  *(_OWORD *)(v79 + 8) = v157;
  *((_QWORD *)v79 + 3) = v158;
  *((_QWORD *)&v157 + 1) = 0;
  v158 = 0;
  v80 = v159;
  v159 = 0uLL;
  v81 = v160;
  *((_OWORD *)v79 + 2) = v80;
  *((_OWORD *)v79 + 3) = v81;
  v160 = 0uLL;
  v185 = v79;
  sub_2396FD600((uint64_t)__p, (uint64_t)v186, (uint64_t)v184);
  v82 = v185;
  if (v185 == v184)
  {
    v83 = 4;
    v82 = v184;
    goto LABEL_148;
  }
  if (v185)
  {
    v83 = 5;
LABEL_148:
    (*(void (**)(void))(*v82 + 8 * v83))();
  }
  v84 = (std::__shared_weak_count *)*((_QWORD *)&v160 + 1);
  if (*((_QWORD *)&v160 + 1))
  {
    v85 = (unint64_t *)(*((_QWORD *)&v160 + 1) + 8);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v159 + 1);
  if (!*((_QWORD *)&v159 + 1))
    goto LABEL_158;
  v88 = (unint64_t *)(*((_QWORD *)&v159 + 1) + 8);
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
    v90 = v158;
    if (!v158)
      goto LABEL_162;
  }
  else
  {
LABEL_158:
    v90 = v158;
    if (!v158)
      goto LABEL_162;
  }
  v91 = (unint64_t *)&v90->__shared_owners_;
  do
    v92 = __ldaxr(v91);
  while (__stlxr(v92 - 1, v91));
  if (!v92)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    v93 = v187;
    if (v187 != v186)
      goto LABEL_163;
LABEL_168:
    v94 = 4;
    v93 = v186;
    goto LABEL_169;
  }
LABEL_162:
  v93 = v187;
  if (v187 == v186)
    goto LABEL_168;
LABEL_163:
  if (!v93)
    goto LABEL_170;
  v94 = 5;
LABEL_169:
  (*(void (**)(void))(*v93 + 8 * v94))();
LABEL_170:
  v95 = (uint64_t)v190;
  if (!v190)
  {
LABEL_173:
    v181 = (_QWORD *)v95;
    goto LABEL_175;
  }
  if (v190 != __p)
  {
    v95 = (*((uint64_t (**)(void))*v190 + 2))();
    goto LABEL_173;
  }
  v181 = v180;
  (*((void (**)(void **, _QWORD *))__p[0] + 3))(__p, v180);
LABEL_175:
  v96 = v182;
  v97 = (uint64_t)v192;
  if (!v192)
  {
LABEL_178:
    v183 = (_BYTE *)v97;
    goto LABEL_180;
  }
  if (v192 != v191)
  {
    v97 = (*(uint64_t (**)(void))(*(_QWORD *)v192 + 16))();
    goto LABEL_178;
  }
  v183 = v182;
  (*(void (**)(void))(*(_QWORD *)v192 + 24))();
LABEL_180:
  v98 = sub_23949FF8C(a1, (uint64_t)v148, v50, v180, a11, a12);
  if (v183 == v182)
  {
    v99 = 4;
  }
  else
  {
    if (!v183)
      goto LABEL_185;
    v99 = 5;
    v96 = v183;
  }
  (*(void (**)(_QWORD *))(*v96 + 8 * v99))(v96);
LABEL_185:
  v100 = v181;
  if (v181 == v180)
  {
    v101 = 4;
    v100 = v180;
  }
  else
  {
    if (!v181)
      goto LABEL_190;
    v101 = 5;
  }
  (*(void (**)(void))(*v100 + 8 * v101))();
LABEL_190:
  v102 = v192;
  if (v192 == v191)
  {
    v103 = 4;
    v102 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_195;
    v103 = 5;
  }
  (*(void (**)(void))(*v102 + 8 * v103))();
LABEL_195:
  v104 = v190;
  if (v190 == __p)
  {
    v105 = 4;
    v104 = __p;
  }
  else
  {
    if (!v190)
      goto LABEL_200;
    v105 = 5;
  }
  (*((void (**)(void))*v104 + v105))();
LABEL_200:
  if ((v98 & 1) == 0)
    goto LABEL_260;
LABEL_201:
  if (!v21)
  {
LABEL_259:
    sub_2396FD7B0((uint64_t)a6);
    v189 = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C((uint64_t)v215, (uint64_t)__p);
    if (v189 < 0)
      operator delete(__p[0]);
    v133 = sub_2396FD7B0((uint64_t)a6) ^ 1;
    v134 = v212;
    if (v212 != v211)
      goto LABEL_261;
LABEL_266:
    v135 = 4;
    v134 = v211;
    goto LABEL_267;
  }
  sub_2396FDAA8(a6, (uint64_t)v174);
  sub_2396FD534(&v153, v215, v152);
  v173 = 0;
  v106 = (char *)operator new(0x40uLL);
  *(_QWORD *)v106 = &off_250ADB9D8;
  *(_OWORD *)(v106 + 8) = v153;
  *((_QWORD *)v106 + 3) = v154;
  *((_QWORD *)&v153 + 1) = 0;
  v154 = 0;
  v107 = v155;
  v155 = 0uLL;
  v108 = v156;
  *((_OWORD *)v106 + 2) = v107;
  *((_OWORD *)v106 + 3) = v108;
  v156 = 0uLL;
  v173 = v106;
  sub_2396FD600((uint64_t)__p, (uint64_t)v174, (uint64_t)v172);
  v109 = v173;
  if (v173 == v172)
  {
    v110 = 4;
    v109 = v172;
    goto LABEL_206;
  }
  if (v173)
  {
    v110 = 5;
LABEL_206:
    (*(void (**)(void))(*v109 + 8 * v110))();
  }
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v156 + 1);
  if (*((_QWORD *)&v156 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v156 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  v114 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
  if (!*((_QWORD *)&v155 + 1))
    goto LABEL_216;
  v115 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
  do
    v116 = __ldaxr(v115);
  while (__stlxr(v116 - 1, v115));
  if (!v116)
  {
    ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
    std::__shared_weak_count::__release_weak(v114);
    v117 = v154;
    if (!v154)
      goto LABEL_220;
  }
  else
  {
LABEL_216:
    v117 = v154;
    if (!v154)
      goto LABEL_220;
  }
  v118 = (unint64_t *)&v117->__shared_owners_;
  do
    v119 = __ldaxr(v118);
  while (__stlxr(v119 - 1, v118));
  if (!v119)
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
    v120 = v175;
    if (v175 != v174)
      goto LABEL_221;
LABEL_226:
    v121 = 4;
    v120 = v174;
    goto LABEL_227;
  }
LABEL_220:
  v120 = v175;
  if (v175 == v174)
    goto LABEL_226;
LABEL_221:
  if (!v120)
    goto LABEL_228;
  v121 = 5;
LABEL_227:
  (*(void (**)(void))(*v120 + 8 * v121))();
LABEL_228:
  v122 = (uint64_t)v190;
  if (!v190)
  {
LABEL_231:
    v169 = (_QWORD *)v122;
    goto LABEL_233;
  }
  if (v190 != __p)
  {
    v122 = (*((uint64_t (**)(void))*v190 + 2))();
    goto LABEL_231;
  }
  v169 = v168;
  (*((void (**)(void **, _QWORD *))__p[0] + 3))(__p, v168);
LABEL_233:
  v123 = v170;
  v124 = (uint64_t)v192;
  if (!v192)
  {
LABEL_236:
    v171 = (_BYTE *)v124;
    goto LABEL_238;
  }
  if (v192 != v191)
  {
    v124 = (*(uint64_t (**)(void))(*(_QWORD *)v192 + 16))();
    goto LABEL_236;
  }
  v171 = v170;
  (*(void (**)(void))(*(_QWORD *)v192 + 24))();
LABEL_238:
  v125 = sub_2394A2688((uint64_t)a1, v148, (uint64_t)v50, v168, 0, 0, a11, a12);
  if (v171 == v170)
  {
    v126 = 4;
  }
  else
  {
    if (!v171)
      goto LABEL_243;
    v126 = 5;
    v123 = v171;
  }
  (*(void (**)(_QWORD *))(*v123 + 8 * v126))(v123);
LABEL_243:
  v127 = v169;
  if (v169 == v168)
  {
    v128 = 4;
    v127 = v168;
  }
  else
  {
    if (!v169)
      goto LABEL_248;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_248:
  v129 = v192;
  if (v192 == v191)
  {
    v130 = 4;
    v129 = v191;
  }
  else
  {
    if (!v192)
      goto LABEL_253;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_253:
  v131 = v190;
  if (v190 == __p)
  {
    v132 = 4;
    v131 = __p;
  }
  else
  {
    if (!v190)
      goto LABEL_258;
    v132 = 5;
  }
  (*((void (**)(void))*v131 + v132))();
LABEL_258:
  if ((v125 & 1) != 0)
    goto LABEL_259;
LABEL_260:
  v133 = 0;
  v134 = v212;
  if (v212 == v211)
    goto LABEL_266;
LABEL_261:
  if (!v134)
    goto LABEL_268;
  v135 = 5;
LABEL_267:
  (*(void (**)(void))(*v134 + 8 * v135))();
LABEL_268:
  v136 = v210;
  if (v210 == v209)
  {
    v137 = 4;
    v136 = v209;
  }
  else
  {
    if (!v210)
      goto LABEL_273;
    v137 = 5;
  }
  (*(void (**)(void))(*v136 + 8 * v137))();
LABEL_273:
  sub_2396FCD14((uint64_t)v215);
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (!v217)
    sub_2394172E0();
  (*(void (**)(_QWORD *))(*v217 + 48))(v217);
  v138 = v217;
  if (v217 == v216)
  {
    v139 = 4;
    v138 = v216;
    goto LABEL_280;
  }
  if (v217)
  {
    v139 = 5;
LABEL_280:
    (*(void (**)(void))(*v138 + 8 * v139))();
  }
  return v133;
}

void sub_239433878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p)
{
  uint64_t v46;
  unint64_t *v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;

  v48 = (unint64_t *)STACK[0x2D8];
  if ((unint64_t *)STACK[0x2D8] == &STACK[0x2C0])
  {
    v49 = 4;
    v48 = &STACK[0x2C0];
  }
  else
  {
    if (!v48)
      goto LABEL_6;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_6:
  v50 = (unint64_t *)STACK[0x318];
  if ((unint64_t *)STACK[0x318] == &STACK[0x300])
  {
    v51 = 4;
    v50 = &STACK[0x300];
  }
  else
  {
    if (!v50)
      goto LABEL_11;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_11:
  sub_23942FE80(&STACK[0x3C0]);
  sub_2396FCD14((uint64_t)&STACK[0x420]);
  if (__p)
    operator delete(__p);
  sub_239416834((_QWORD *)(v46 - 136));
  _Unwind_Resume(a1);
}

void sub_239433C1C(uint64_t a1, uint64_t a2, char a3)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t **v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  v6 = *(char **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a1 + 96);
  if (v7 > (uint64_t)(*(_QWORD *)(a2 + 16) - (_QWORD)v6) >> 3)
  {
    if (v7 >> 61)
LABEL_38:
      sub_2394189F8();
    v8 = 8 * v7;
    v9 = (char *)operator new(8 * v7);
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 16) = &v9[v8];
    if (v6)
      operator delete(v6);
  }
  v31 = a3;
  v10 = *(uint64_t ***)(a1 + 88);
  if (v10)
  {
    v11 = *(char **)(a2 + 8);
    while (1)
    {
      v13 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v11 >= v13)
        break;
      *(_QWORD *)v11 = *((unsigned int *)v10 + 4);
      v12 = (uint64_t)(v11 + 8);
LABEL_8:
      *(_QWORD *)(a2 + 8) = v12;
      v10 = (uint64_t **)*v10;
      v11 = (char *)v12;
      if (!v10)
        goto LABEL_35;
    }
    v14 = *(char **)a2;
    v15 = (uint64_t)&v11[-*(_QWORD *)a2];
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      goto LABEL_38;
    v18 = v13 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_239418A80();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      *v21 = *((unsigned int *)v10 + 4);
      v12 = (uint64_t)(v21 + 1);
      if (v11 == v14)
        goto LABEL_33;
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      *(_QWORD *)(8 * v16) = *((unsigned int *)v10 + 4);
      v12 = 8 * v16 + 8;
      if (v11 == v14)
        goto LABEL_33;
    }
    v22 = v11 - 8 - v14;
    if (v22 >= 0x168)
    {
      if (&v20[v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8])
      {
        v23 = v11;
      }
      else if (&v11[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
      {
        v23 = v11;
      }
      else if ((unint64_t)(v11 - v20 - v15) >= 0x20)
      {
        v24 = (v22 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v11[-v25];
        v21 = (_QWORD *)((char *)v21 - v25);
        v26 = &v20[8 * v16 - 16];
        v27 = v11 - 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *(_OWORD *)v27;
          *(v26 - 1) = *((_OWORD *)v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_33:
          *(_QWORD *)a2 = v21;
          *(_QWORD *)(a2 + 8) = v12;
          *(_QWORD *)(a2 + 16) = &v20[8 * v19];
          if (v14)
            operator delete(v14);
          goto LABEL_8;
        }
      }
      else
      {
        v23 = v11;
      }
    }
    else
    {
      v23 = v11;
    }
    do
    {
      v30 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *--v21 = v30;
    }
    while (v23 != v14);
    goto LABEL_33;
  }
LABEL_35:
  if ((v31 & 1) != 0)
    std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
}

void sub_239433E6C(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(_QWORD **)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (_QWORD *)*v4;
        v17 = (void *)v4[6];
        if (v17)
        {
          v4[7] = v17;
          operator delete(v17);
        }
        v18 = (void *)v4[3];
        if (v18)
        {
          v4[4] = v18;
          operator delete(v18);
        }
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void sub_239433F80(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[6];
      if (v4)
      {
        v2[7] = v4;
        operator delete(v4);
      }
      v5 = (void *)v2[3];
      if (v5)
      {
        v2[4] = v5;
        operator delete(v5);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_239433FDC@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;

  v8 = result;
  v11 = a5;
  if (result == a2)
  {
LABEL_8:
    v12 = a5;
    if (a3 == a4)
    {
      a4 = a3;
    }
    else
    {
      do
        result = sub_2394340F0(&v12, a3++);
      while (a3 != a4);
      a5 = v12;
    }
  }
  else
  {
    while (a3 != a4)
    {
      if (*a3 >= (unint64_t)*v8)
      {
        a3 += *v8 >= (unint64_t)*a3;
        result = sub_2394340F0(&v11, v8++);
        if (v8 == a2)
          goto LABEL_7;
      }
      else
      {
        result = sub_2394340F0(&v11, a3++);
        if (v8 == a2)
        {
LABEL_7:
          a5 = v11;
          v8 = a2;
          goto LABEL_8;
        }
      }
    }
    v12 = v11;
    do
      result = sub_2394340F0(&v12, v8++);
    while (v8 != a2);
    a5 = v12;
    v8 = a2;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = (uint64_t *)a5;
  return result;
}

uint64_t *sub_2394340F0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_2394189F8();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_239418A80();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

char *sub_239434260(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  float v21;
  float v22;
  uint64_t v23;
  _QWORD *v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return (char *)v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return (char *)v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_QWORD *)v15 + 2) = **a4;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(v15 + 24) = _Q0;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v8 && (float)(v22 * (float)v8) >= v21)
  {
    v23 = *(_QWORD *)a1;
    v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v24)
    {
LABEL_26:
      *(_QWORD *)v15 = *v24;
LABEL_61:
      *v24 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v25 = 1;
    if (v8 >= 3)
      v25 = (v8 & (v8 - 1)) != 0;
    v26 = v25 | (2 * v8);
    v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v32 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v24)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v23 = *(_QWORD *)a1;
        v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v24)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v32 & v7;
      v23 = *(_QWORD *)a1;
      v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v7));
      if (v24)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v33 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v33 >= v8)
        v33 %= v8;
    }
    else
    {
      v33 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_239434578(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23943458C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_250ADB9D8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[3];
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_23943467C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = &off_250ADB9D8;
  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  JUMPOUT(0x23B83E31CLL);
}

char *sub_23943476C(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = (char *)operator new(0x40uLL);
  *(_QWORD *)result = &off_250ADB9D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 32);
  *((_QWORD *)result + 5) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a1 + 56);
  *((_QWORD *)result + 6) = *(_QWORD *)(a1 + 48);
  *((_QWORD *)result + 7) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

_QWORD *sub_239434804(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v2 = result[1];
  *a2 = &off_250ADB9D8;
  a2[1] = v2;
  v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[5];
  a2[4] = result[4];
  a2[5] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[7];
  a2[6] = result[6];
  a2[7] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_239434878(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[3];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_239434950(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)__p[7];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)__p[5];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[5];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)__p[3];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    operator delete(__p);
  }
  else
  {
LABEL_15:
    operator delete(__p);
  }
}

uint64_t sub_239434A34(uint64_t a1, float *a2, __int128 *a3)
{
  return sub_2396FD538(a1 + 8, a3, *a2);
}

char *sub_239434A44(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = *(char **)v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x50uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v7 = v4;
  }
  else
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v25)
  {
    *(_QWORD *)v11 = *v25;
LABEL_59:
    *v25 = v11;
    goto LABEL_60;
  }
  *(_QWORD *)v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v24 + 8 * v7) = v14;
  if (*(_QWORD *)v11)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_239434D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239434D64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239434D64(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[6];
      if (v3)
      {
        v2[7] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_239434DC0(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  char v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  BOOL v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *i;
  unsigned int v64;
  int v65;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = a2 - 2;
  v10 = v8;
LABEL_3:
  v11 = 1 - a4;
  v65 = a5;
  while (2)
  {
    v8 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = v12 >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = *(a2 - 2);
        v25 = *v8;
        if (v24 < *v8 || v25 >= v24 && *(a2 - 1) < v8[1])
        {
          *v8 = v24;
          *(a2 - 2) = v25;
          v26 = v8[1];
          v8[1] = *(a2 - 1);
          *(a2 - 1) = v26;
        }
        return result;
      case 3uLL:
        return sub_239435324(v8, v8 + 2, v9);
      case 4uLL:
        result = sub_239435324(v8, v8 + 2, v8 + 4);
        v27 = *(a2 - 2);
        v28 = v8[4];
        if (v27 >= v28 && (v28 < v27 || *(a2 - 1) >= v8[5]))
          return result;
        v8[4] = v27;
        *(a2 - 2) = v28;
        v29 = v8[5];
        v8[5] = *(a2 - 1);
        *(a2 - 1) = v29;
        v30 = v8[4];
        v31 = v8[2];
        if (v30 >= v31)
        {
          if (v31 < v30)
            return result;
          v33 = v8[5];
          v32 = v8[3];
          if (v33 >= v32)
            return result;
        }
        else
        {
          v32 = v8[3];
          v33 = v8[5];
        }
        v8[2] = v30;
        v8[3] = v33;
        v8[4] = v31;
        v8[5] = v32;
        v34 = *v8;
        if (v30 >= *v8)
        {
          if (v34 < v30)
            return result;
          v35 = v8[1];
          if (v33 >= v35)
            return result;
        }
        else
        {
          v35 = v8[1];
        }
        *v8 = v30;
        v8[1] = v33;
        v8[2] = v34;
        v8[3] = v35;
        return result;
      case 5uLL:
        return sub_239435A18(v8, v8 + 2, v8 + 4, v8 + 6, v9);
      default:
        if (v12 > 191)
        {
          v14 = v11;
          if (v11 == 1)
          {
            if (v8 != a2)
            {
              v52 = (v13 - 2) >> 1;
              v53 = v52 + 1;
              v54 = &v8[2 * v52];
              do
              {
                sub_239435C48((uint64_t)v8, a3, v12 >> 3, v54);
                v54 -= 2;
                --v53;
              }
              while (v53);
              v55 = (unint64_t)v12 >> 3;
              do
              {
                result = (uint64_t)sub_239435D8C(v8, (uint64_t)a2, a3, v55);
                a2 -= 2;
              }
              while (v55-- > 2);
            }
            return result;
          }
          v15 = v13 >> 1;
          v16 = &v8[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            sub_239435324(v16, v8, v9);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            sub_239435324(v8, v16, v9);
            v17 = v9;
            v18 = &v8[2 * v15];
            sub_239435324(v8 + 2, v18 - 2, a2 - 4);
            sub_239435324(v8 + 4, &v8[2 * v15 + 2], a2 - 6);
            sub_239435324(v18 - 2, v16, &v8[2 * v15 + 2]);
            v19 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v18;
            *(_QWORD *)v18 = v19;
            v9 = v17;
            a5 = v65;
            if ((v65 & 1) != 0)
              goto LABEL_14;
          }
          v20 = *(v8 - 2);
          if (v20 >= *v8 && (*v8 < v20 || *(v8 - 1) >= v8[1]))
          {
            result = (uint64_t)sub_2394354A4(v8, a2);
            v10 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v21 = sub_2394355E4(v8, a2);
          if ((v22 & 1) == 0)
            goto LABEL_17;
          v23 = sub_239435724(v8, v21);
          v10 = v21 + 2;
          result = sub_239435724(v21 + 2, a2);
          if (!(_DWORD)result)
          {
            v11 = v14 + 1;
            if (v23)
              continue;
LABEL_17:
            result = sub_239434DC0(v8, v21, a3, -v14, a5 & 1);
            v10 = v21 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v14;
            goto LABEL_3;
          }
          a4 = -v14;
          a2 = v21;
          if (v23)
            return result;
          goto LABEL_2;
        }
        v36 = v8 + 2;
        v38 = v8 == a2 || v36 == a2;
        if ((a5 & 1) == 0)
        {
          if (!v38)
          {
            v57 = v8 + 1;
            do
            {
              v58 = v8;
              v8 = v36;
              v59 = v58[2];
              v60 = *v58;
              if (v59 < *v58 || v60 >= v59 && v58[3] < v58[1])
              {
                v61 = *v8;
                v62 = v8[1];
                for (i = v57; ; i -= 2)
                {
                  v64 = *i;
                  i[1] = v60;
                  i[2] = v64;
                  v60 = *(i - 3);
                  if (v60 <= v61 && (v60 < v61 || *(i - 2) <= v62))
                    break;
                }
                *(i - 1) = v61;
                *i = v62;
              }
              v36 = v8 + 2;
              v57 += 2;
            }
            while (v8 + 2 != a2);
          }
          return result;
        }
        if (v38)
          return result;
        v39 = 0;
        v40 = v8;
        while (2)
        {
          v42 = v40;
          v40 = v36;
          v43 = v42[2];
          v44 = *v42;
          if (v43 >= *v42 && (v44 < v43 || v42[3] >= v42[1]))
            goto LABEL_43;
          v46 = v42[2];
          v45 = v42[3];
          v47 = v42[1];
          v42[2] = v44;
          v40[1] = v47;
          v41 = v8;
          if (v42 == v8)
            goto LABEL_42;
          v48 = v39;
          while (1)
          {
            v51 = *(unsigned int *)((char *)v8 + v48 - 8);
            if (v51 > v46)
            {
              v49 = *(unsigned int *)((char *)v8 + v48 - 4);
              goto LABEL_50;
            }
            if (v51 < v46)
            {
              v41 = (unsigned int *)((char *)v8 + v48);
              goto LABEL_42;
            }
            v49 = *(unsigned int *)((char *)v8 + v48 - 4);
            if (v49 <= v45)
              break;
LABEL_50:
            v42 -= 2;
            v50 = (unsigned int *)((char *)v8 + v48);
            *v50 = v51;
            v50[1] = v49;
            v48 -= 8;
            if (!v48)
            {
              v41 = v8;
              goto LABEL_42;
            }
          }
          v41 = v42;
LABEL_42:
          *v41 = v46;
          v41[1] = v45;
LABEL_43:
          v36 = v40 + 2;
          v39 += 8;
          if (v40 + 2 != a2)
            continue;
          return result;
        }
    }
  }
}

uint64_t sub_239435324(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  int *v14;
  int v15;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 < v3)
      goto LABEL_7;
    if (v3 < v9)
      return 0;
    if (a3[1] < a2[1])
    {
LABEL_7:
      *a2 = v9;
      *a3 = v3;
      v11 = (int *)(a2 + 1);
      v10 = a2[1];
      a2[1] = a3[1];
      a3[1] = v10;
      v12 = *a2;
      v13 = *a1;
      if (*a2 < *a1)
        goto LABEL_8;
      if (v13 < v12)
        return 1;
      if (*v11 < a1[1])
      {
LABEL_8:
        *a1 = v12;
        v14 = (int *)(a1 + 1);
        *a2 = v13;
        v15 = *v14;
        *v14 = *v11;
        *v11 = v15;
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (int *)(a1 + 1);
      *a3 = v4;
      v7 = (int *)(a3 + 1);
      v8 = 1;
LABEL_13:
      v20 = *v6;
      *v6 = *v7;
      *v7 = v20;
      return v8;
    }
    *a1 = v3;
    *a2 = v4;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    v18 = *a3;
    v19 = *a2;
    if (*a3 < *a2)
    {
LABEL_12:
      *a2 = v18;
      *a3 = v19;
      v7 = (int *)(a3 + 1);
      v8 = 2;
      v6 = (int *)(a2 + 1);
      goto LABEL_13;
    }
    if (v19 >= v18)
    {
      if (a3[1] < v17)
        goto LABEL_12;
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unsigned int *sub_2394354A4(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *sub_2394355E4(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unsigned int *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unsigned int *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL sub_239435724(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v18 = *(a2 - 2);
      v19 = *a1;
      if (v18 < *a1 || v19 >= v18 && *(a2 - 1) < a1[1])
      {
        *a1 = v18;
        *(a2 - 2) = v19;
        v20 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v20;
      }
      return result;
    case 3:
      sub_239435324(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_239435324(a1, a1 + 2, a1 + 4);
      v21 = *(a2 - 2);
      v22 = a1[4];
      if (v21 >= v22 && (v22 < v21 || *(a2 - 1) >= a1[5]))
        return 1;
      a1[4] = v21;
      *(a2 - 2) = v22;
      v23 = a1[5];
      a1[5] = *(a2 - 1);
      *(a2 - 1) = v23;
      v24 = a1[4];
      v25 = a1[2];
      if (v24 >= v25)
      {
        if (v25 < v24)
          return 1;
        v27 = a1[5];
        v26 = a1[3];
        if (v27 >= v26)
          return 1;
      }
      else
      {
        v26 = a1[3];
        v27 = a1[5];
      }
      a1[2] = v24;
      a1[3] = v27;
      a1[4] = v25;
      a1[5] = v26;
      v28 = *a1;
      if (v24 < *a1)
      {
        v29 = a1[1];
LABEL_43:
        *a1 = v24;
        a1[1] = v27;
        result = 1;
        a1[2] = v28;
        a1[3] = v29;
        return result;
      }
      if (v28 >= v24)
      {
        v29 = a1[1];
        if (v27 < v29)
          goto LABEL_43;
      }
      return 1;
    case 5:
      sub_239435A18(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v6 = a1 + 4;
      sub_239435324(a1, a1 + 2, a1 + 4);
      v7 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      while (2)
      {
        v11 = *v6;
        if (*v7 >= *v6 && (v11 < *v7 || v7[1] >= v6[1]))
          goto LABEL_7;
        v12 = *v7;
        v13 = v7[1];
        *v7 = v11;
        v7[1] = v6[1];
        v10 = a1;
        if (v6 == a1)
          goto LABEL_6;
        v14 = v8;
        while (2)
        {
          v16 = (char *)a1 + v14;
          v17 = *(unsigned int *)((char *)a1 + v14 + 8);
          if (v17 > v12)
          {
            v15 = *((_DWORD *)v16 + 3);
LABEL_12:
            v6 -= 2;
            *((_DWORD *)v16 + 4) = v17;
            *(unsigned int *)((char *)a1 + v14 + 20) = v15;
            v14 -= 8;
            if (v14 == -16)
            {
              v10 = a1;
              goto LABEL_6;
            }
            continue;
          }
          break;
        }
        if (v17 < v12)
        {
          v10 = v6;
          goto LABEL_6;
        }
        v15 = *(unsigned int *)((char *)a1 + v14 + 12);
        if (v15 > v13)
          goto LABEL_12;
        v10 = (unsigned int *)((char *)a1 + v14 + 16);
LABEL_6:
        *v10 = v12;
        v10[1] = v13;
        if (++v9 == 8)
          return v7 + 2 == a2;
LABEL_7:
        v6 = v7;
        v8 += 8;
        v7 += 2;
        if (v7 != a2)
          continue;
        return 1;
      }
  }
}

uint64_t sub_239435A18(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  result = sub_239435324(a1, a2, a3);
  v11 = *a4;
  v12 = *a3;
  if (*a4 < *a3 || v12 >= v11 && a4[1] < a3[1])
  {
    *a3 = v11;
    *a4 = v12;
    v13 = a3[1];
    a3[1] = a4[1];
    a4[1] = v13;
    v14 = *a3;
    v15 = *a2;
    if (*a3 < *a2 || v15 >= v14 && a3[1] < a2[1])
    {
      *a2 = v14;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *a2;
      v18 = *a1;
      if (*a2 < *a1 || v18 >= v17 && a2[1] < a1[1])
      {
        *a1 = v17;
        *a2 = v18;
        v19 = a1[1];
        a1[1] = a2[1];
        a2[1] = v19;
      }
    }
  }
  v20 = *a5;
  v21 = *a4;
  if (*a5 < *a4 || v21 >= v20 && a5[1] < a4[1])
  {
    *a4 = v20;
    *a5 = v21;
    v22 = a4[1];
    a4[1] = a5[1];
    a5[1] = v22;
    v23 = *a4;
    v24 = *a3;
    if (*a4 < *a3 || v24 >= v23 && a4[1] < a3[1])
    {
      *a3 = v23;
      *a4 = v24;
      v25 = a3[1];
      a3[1] = a4[1];
      a4[1] = v25;
      v26 = *a3;
      v27 = *a2;
      if (*a3 < *a2 || v27 >= v26 && a3[1] < a2[1])
      {
        *a2 = v26;
        *a3 = v27;
        v28 = a2[1];
        a2[1] = a3[1];
        a3[1] = v28;
        v29 = *a2;
        v30 = *a1;
        if (*a2 < *a1 || v30 >= v29 && a2[1] < a1[1])
        {
          *a1 = v29;
          *a2 = v30;
          v31 = a1[1];
          a1[1] = a2[1];
          a2[1] = v31;
        }
      }
    }
  }
  return result;
}

uint64_t sub_239435C48(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unsigned int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_13;
          }
        }
        v14 = v8;
LABEL_13:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *sub_239435D8C(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *(_QWORD *)result;
    v6 = result;
    do
    {
      v7 = v6;
      v8 = v4 + 1;
      v6 += 2 * v4 + 2;
      v9 = 2 * v4;
      v4 = (2 * v4) | 1;
      v10 = v9 + 2;
      if (v10 < a4)
      {
        v11 = v6[2];
        if (*v6 < v11 || v11 >= *v6 && v7[2 * v8 + 1] < v6[3])
        {
          v6 += 2;
          v4 = v10;
        }
      }
      *v7 = *v6;
      v7[1] = v6[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v6 == (unsigned int *)(a2 - 8))
    {
      *(_QWORD *)v6 = v5;
    }
    else
    {
      *v6 = *(_DWORD *)(a2 - 8);
      v6[1] = *(_DWORD *)(a2 - 4);
      *(_QWORD *)(a2 - 8) = v5;
      v12 = (char *)v6 - (char *)result + 8;
      if (v12 >= 9)
      {
        v13 = ((unint64_t)v12 >> 3) - 2;
        v14 = v13 >> 1;
        v15 = &result[2 * (v13 >> 1)];
        v16 = *v15;
        if (*v15 < *v6 || *v6 >= v16 && result[2 * v14 + 1] < v6[1])
        {
          v17 = *v6;
          v18 = v6[1];
          *v6 = v16;
          v6[1] = v15[1];
          if (v13 >= 2)
          {
            while (1)
            {
              v21 = v14 - 1;
              v14 = (v14 - 1) >> 1;
              v19 = &result[2 * v14];
              v22 = *v19;
              if (*v19 < v17)
              {
                v20 = v19[1];
              }
              else
              {
                if (v22 > v17)
                  break;
                v20 = result[2 * v14 + 1];
                if (v20 >= v18)
                  break;
              }
              *v15 = v22;
              v15[1] = v20;
              v15 = &result[2 * v14];
              if (v21 <= 1)
                goto LABEL_17;
            }
          }
          v19 = v15;
LABEL_17:
          *v19 = v17;
          v19[1] = v18;
        }
      }
    }
  }
  return result;
}

void sub_239435F04(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  void *v12;

  v6 = a1[1];
  if (!v6)
    goto LABEL_11;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      *((_DWORD *)v8 + 4) = *((_DWORD *)a2 + 4);
      if (v8 != a2)
      {
        sub_23942156C(v8 + 3, (char *)a2[3], (char *)a2[4], (a2[4] - a2[3]) >> 2);
        sub_23942156C(v8 + 6, (char *)a2[6], (char *)a2[7], (a2[7] - a2[6]) >> 2);
      }
      v8[9] = a2[9];
      v9 = (uint64_t *)*v8;
      sub_23943604C(a1, (unsigned int *)v8);
      a2 = (uint64_t *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_11;
    }
    do
    {
      v10 = (uint64_t *)*v8;
      v11 = (void *)v8[6];
      if (v11)
      {
        v8[7] = (uint64_t)v11;
        operator delete(v11);
      }
      v12 = (void *)v8[3];
      if (v12)
      {
        v8[4] = (uint64_t)v12;
        operator delete(v12);
      }
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      sub_239436170(a1, (_DWORD *)a2 + 4);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_23943601C(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_239433F80(v1, v2);
  __cxa_rethrow();
}

void sub_239436038(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unsigned int *sub_23943604C(_QWORD *a1, unsigned int *a2)
{
  unint64_t v4;
  int *v5;
  uint64_t *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;

  v5 = (int *)(a2 + 4);
  v4 = a2[4];
  *((_QWORD *)v5 - 1) = v4;
  v6 = sub_239436234((uint64_t)a1, v4, v5);
  v7 = (int8x8_t)a1[1];
  v8 = *((_QWORD *)v5 - 1);
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v7)
      v8 %= *(_QWORD *)&v7;
  }
  else
  {
    v8 &= *(_QWORD *)&v7 - 1;
  }
  if (!v6)
  {
    *(_QWORD *)a2 = a1[2];
    a1[2] = a2;
    *(_QWORD *)(*a1 + 8 * v8) = a1 + 2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
LABEL_18:
    *(_QWORD *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *(_QWORD *)a2 = *v6;
  *v6 = (uint64_t)a2;
  if (*(_QWORD *)a2)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v7)
        v10 %= *(_QWORD *)&v7;
    }
    else
    {
      v10 &= *(_QWORD *)&v7 - 1;
    }
    if (v10 != v8)
      goto LABEL_18;
  }
LABEL_19:
  ++a1[3];
  return a2;
}

unsigned int *sub_239436170(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v4;

  v4 = operator new(0x50uLL);
  *v4 = 0;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = *a2;
  sub_23943668C(v4 + 3, (uint64_t)(a2 + 2));
  v4[1] = *((unsigned int *)v4 + 4);
  return sub_23943604C(a1, (unsigned int *)v4);
}

void sub_2394361D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
    {
LABEL_3:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[4] = v5;
  operator delete(v5);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239436220(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239436234(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t *v10;
  char v11;
  int v12;
  char v13;
  uint64_t *result;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t prime;
  size_t v20;
  uint8x8_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t *v25;
  unsigned __int8 v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0)
      goto LABEL_4;
    goto LABEL_36;
  }
  v16 = 1;
  if (v6 >= 3)
    v16 = (v6 & (v6 - 1)) != 0;
  v17 = v16 | (2 * v6);
  v18 = vcvtps_u32_f32(v7 / v8);
  if (v17 <= v18)
    prime = v18;
  else
    prime = v17;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v6)
    goto LABEL_22;
  if (prime < v6)
  {
    v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      v21 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] <= 1uLL)
      {
        v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2)
          v20 = v22;
        if (prime <= v20)
          prime = v20;
        if (prime >= v6)
          goto LABEL_35;
LABEL_22:
        sub_2394364BC(a1, prime);
        goto LABEL_35;
      }
    }
    v23 = std::__next_prime(v20);
    if (prime <= v23)
      prime = v23;
    if (prime < v6)
      goto LABEL_22;
  }
LABEL_35:
  v6 = *(_QWORD *)(a1 + 8);
  v9 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
LABEL_4:
    v10 = *(uint64_t **)(*(_QWORD *)a1 + 8 * (v9 & a2));
    if (v10)
    {
      v11 = 0;
      v12 = *a3;
      while (1)
      {
        result = v10;
        v10 = (uint64_t *)*v10;
        if (!v10)
          break;
        v15 = v10[1];
        if ((v15 & v9) != (v9 & a2))
          break;
        if (v15 == a2)
        {
          v13 = v11 & (*((_DWORD *)v10 + 4) != v12);
          v11 |= *((_DWORD *)v10 + 4) == v12;
          if ((v13 & 1) != 0)
            return result;
        }
        else if ((v11 & 1) != 0)
        {
          return result;
        }
      }
      return result;
    }
    return 0;
  }
LABEL_36:
  v24 = a2;
  if (v6 <= a2)
    v24 = a2 % v6;
  v25 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v24);
  if (!v25)
    return 0;
  v26 = 0;
  v27 = *a3;
  while (1)
  {
    result = v25;
    v25 = (uint64_t *)*v25;
    if (!v25)
      break;
    v29 = v25[1];
    v30 = v29;
    if (v29 >= v6)
      v30 = v29 % v6;
    if (v30 != v24)
      break;
    if (v29 == a2)
    {
      v28 = v26 & (*((_DWORD *)v25 + 4) != v27);
      v26 |= *((_DWORD *)v25 + 4) == v27;
      if (v28 == 1)
        return result;
    }
    else if ((v26 & 1) == 1)
    {
      return result;
    }
  }
  return result;
}

void sub_2394364BC(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  if (a2)
  {
    if (a2 >> 61)
      sub_239418A80();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v8 = a1 + 16;
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v9 = v7[1];
      v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2)
          v9 %= a2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
        while (1)
        {
          v18 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v19 = v18[1];
          if (v19 >= a2)
            v19 %= a2;
          if (v19 == v9)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v20 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v19))
            {
              do
              {
                v21 = v20;
                v20 = (_QWORD *)*v20;
              }
              while (v20 && *((_DWORD *)v18 + 4) == *((_DWORD *)v20 + 4));
              *v7 = v20;
              v22 = 8 * v19;
              *v21 = **(_QWORD **)(*(_QWORD *)a1 + v22);
              **(_QWORD **)(*(_QWORD *)a1 + v22) = v18;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v7;
              v7 = v18;
              v9 = v19;
            }
          }
        }
      }
      else
      {
        v11 = v9 & v10;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
        while (1)
        {
          v12 = (_QWORD *)*v7;
          if (!*v7)
            break;
          v13 = v12[1] & v10;
          if (v13 == v11)
          {
            v7 = (_QWORD *)*v7;
          }
          else
          {
            v14 = (_QWORD *)*v7;
            if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14 && *((_DWORD *)v12 + 4) == *((_DWORD *)v14 + 4));
              *v7 = v14;
              v16 = 8 * v13;
              *v15 = **(_QWORD **)(*(_QWORD *)a1 + v16);
              **(_QWORD **)(*(_QWORD *)a1 + v16) = v12;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              v7 = v12;
              v11 = v13;
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v17)
      operator delete(v17);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_23943668C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_2394189F8();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_2394189F8();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[4 * (v11 >> 2)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  a1[6] = *(_QWORD *)(a2 + 48);
  return a1;
}

void sub_239436764(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_23943679C()
{
  JUMPOUT(0x23B83E31CLL);
}

_WORD *sub_2394367B0(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_250ADBA20;
  result[4] = *(_WORD *)(a1 + 8);
  return result;
}

uint64_t sub_2394367E8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_250ADBA20;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  return result;
}

double sub_23943680C(uint64_t a1, double a2)
{
  BOOL v2;
  double v3;
  double v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  double *v8;
  size_t v9;
  double *v10;
  double v11;
  unint64_t v12;
  double *v13;
  unint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double v27;
  double v28;
  double *v29;
  double v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  __int128 *v39;
  double v40;
  double *v41;
  double v42;
  double v43;
  __int128 v44;
  double v45;
  double *v46;
  double v47;
  double *v48;
  double *v49;
  double *v50;
  double v51;
  double v52;
  __int128 v53;
  double *v54;
  double *v55;
  double *v56;
  double v57;
  unint64_t v58;
  double *v59;
  double *v60;
  double v61;
  double v62;
  int v63;
  double v64;
  double v65;
  double *v66;
  double *v67;
  double *v68;
  double v69;
  double *v70;
  double v71;
  double v72;
  double *v73;
  double v74;
  double v75;
  double *v76;
  double *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  __int128 *v83;
  double v84;
  double *v85;
  double v86;
  double v87;
  __int128 v88;
  double v89;
  double *v90;
  double v91;
  double *v92;
  double *v93;
  double *v94;
  double v95;
  double v96;
  __int128 v97;
  double *v98;
  double *v99;
  double *v100;
  double v101;
  unint64_t v102;
  double *v103;
  double *v104;
  double v105;
  double v106;
  int v107;
  double v108;
  double v109;
  double *v110;
  double *v111;
  double *v112;
  double v113;
  double *v114;
  double v115;
  double v116;
  double *v117;
  double v118;
  unint64_t v119;
  double v120;
  double v121;
  double *v122;
  double *v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  __int128 *v129;
  double *v130;
  double v131;
  double v132;
  __int128 v133;
  double *v134;
  double *v135;
  double *v136;
  __int128 v137;
  double *v138;
  double *v139;
  double *v140;
  double v141;
  unint64_t v142;
  double *v143;
  double *v144;
  double v145;
  double v146;
  int v147;
  double v148;
  double v149;
  double *v150;
  double *v151;
  unint64_t v152;
  double v153;
  unint64_t v154;
  double v155;
  double v156;
  double *v157;
  double v158;
  unint64_t v159;
  double v160;
  double v161;
  double *v162;
  unint64_t v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  __int128 *v169;
  double *v170;
  double v171;
  double v172;
  __int128 v173;
  double *v174;
  double *v175;
  double *v176;
  __int128 v177;
  double v178;
  double *__p;
  double *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;

  v2 = a2 > 0.5 || a2 < 0.0;
  v3 = fmax(fmin(a2, 0.5), 0.0);
  if (v2)
    v4 = v3;
  else
    v4 = a2;
  __p = 0;
  v181 = 0;
  v6 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
  {
    v8 = 0;
    v10 = 0;
    if (v4 == 0.0)
      goto LABEL_17;
  }
  else
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (double *)operator new(v5 - *(_QWORD *)a1);
    __p = v8;
    v9 = v7 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v8, v6, v9);
    v10 = (double *)((char *)v8 + v9);
    v181 = (double *)((char *)v8 + v9);
    if (v4 == 0.0)
    {
LABEL_17:
      v12 = 1;
      v13 = v8 + 2;
      if (v8 + 2 == v10)
        goto LABEL_102;
      while (1)
      {
LABEL_18:
        v14 = ((char *)v10 - (char *)v8) >> 4;
        if (v14 < 2)
          goto LABEL_102;
        if (v14 == 3)
        {
          v39 = (__int128 *)(v8 + 2);
          v40 = v8[2];
          v42 = *(v10 - 2);
          v41 = v10 - 2;
          v43 = v42;
          if (v40 >= *v8)
          {
            if (v43 < v40)
            {
              v53 = *v39;
              *v39 = *(_OWORD *)v41;
              *(_OWORD *)v41 = v53;
              if (v8[2] < *v8)
              {
                v195 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v39;
                *v39 = v195;
              }
            }
            goto LABEL_102;
          }
          if (v43 >= v40)
          {
            v192 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v39;
            *v39 = v192;
            if (*v41 < v8[2])
            {
              v44 = *v39;
              *v39 = *(_OWORD *)v41;
              *(_OWORD *)v41 = v44;
            }
            goto LABEL_102;
          }
LABEL_87:
          v193 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v41;
          *(_OWORD *)v41 = v193;
          goto LABEL_102;
        }
        if (v14 == 2)
        {
          v45 = *(v10 - 2);
          v41 = v10 - 2;
          if (v45 >= *v8)
            goto LABEL_102;
          goto LABEL_87;
        }
        if ((char *)v10 - (char *)v8 <= 127)
        {
          while (v8 != v10 - 2)
          {
            v46 = v8;
            v8 += 2;
            if (v46 != v10 && v8 != v10)
            {
              v47 = *v46;
              v48 = v8;
              v49 = v46;
              v50 = v8;
              do
              {
                v51 = *v50;
                v50 += 2;
                v52 = v51;
                if (v51 < v47)
                {
                  v47 = v52;
                  v49 = v48;
                }
                v48 = v50;
              }
              while (v50 != v10);
              if (v49 != v46)
              {
                v194 = *(_OWORD *)v46;
                *(_OWORD *)v46 = *(_OWORD *)v49;
                *(_OWORD *)v49 = v194;
              }
            }
          }
          goto LABEL_102;
        }
        v15 = &v8[2 * (v14 >> 1)];
        v16 = v10 - 2;
        v17 = *(v10 - 2);
        v18 = *v15;
        if (*v15 >= *v8)
        {
          if (v17 >= v18)
          {
            v19 = 0;
            v20 = *v8;
            v21 = *v15;
            if (*v8 >= *v15)
              goto LABEL_43;
            goto LABEL_25;
          }
          v184 = *(_OWORD *)v15;
          *(_OWORD *)v15 = *(_OWORD *)v16;
          *(_OWORD *)v16 = v184;
          if (*v15 < *v8)
          {
            v185 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v185;
            v19 = 2;
            v20 = *v8;
            v21 = *v15;
            if (*v8 >= *v15)
              goto LABEL_43;
            goto LABEL_25;
          }
        }
        else
        {
          if (v17 < v18)
          {
            v182 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v182;
            v19 = 1;
            v20 = *v8;
            v21 = *v15;
            if (*v8 >= *v15)
              goto LABEL_43;
            goto LABEL_25;
          }
          v186 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v15;
          *(_OWORD *)v15 = v186;
          if (*v16 < *v15)
          {
            v187 = *(_OWORD *)v15;
            *(_OWORD *)v15 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v187;
            v19 = 2;
            v20 = *v8;
            v21 = *v15;
            if (*v8 >= *v15)
              goto LABEL_43;
            goto LABEL_25;
          }
        }
        v19 = 1;
        v20 = *v8;
        v21 = *v15;
        if (*v8 >= *v15)
        {
LABEL_43:
          v22 = v10 - 2;
          while (1)
          {
            v22 -= 2;
            if (v22 == v8)
              break;
            if (*v22 < v21)
            {
              v188 = *(_OWORD *)v8;
              *(_OWORD *)v8 = *(_OWORD *)v22;
              *(_OWORD *)v22 = v188;
              ++v19;
              v23 = v8 + 2;
              if (v8 + 2 < v22)
                goto LABEL_26;
              goto LABEL_47;
            }
          }
          v32 = v8 + 2;
          if (v20 >= *v16)
          {
            if (v32 == v16)
              goto LABEL_102;
            while (v20 >= *v32)
            {
              v32 += 2;
              if (v32 == v16)
                goto LABEL_102;
            }
            v190 = *(_OWORD *)v32;
            *(_OWORD *)v32 = *(_OWORD *)v16;
            v32 += 2;
            *(_OWORD *)v16 = v190;
          }
          if (v32 == v16)
            goto LABEL_102;
          while (1)
          {
            v36 = *v8;
            v29 = v32 - 2;
            do
            {
              v37 = v29[2];
              v29 += 2;
            }
            while (v36 >= v37);
            v32 = v29 + 2;
            do
            {
              v38 = *(v16 - 2);
              v16 -= 2;
            }
            while (v36 < v38);
            if (v29 >= v16)
              break;
            v191 = *(_OWORD *)v29;
            *(_OWORD *)v29 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v191;
          }
          if (v29 > v13)
            goto LABEL_102;
          goto LABEL_80;
        }
LABEL_25:
        v22 = v10 - 2;
        v23 = v8 + 2;
        if (v8 + 2 >= v10 - 2)
        {
LABEL_47:
          v26 = v23;
        }
        else
        {
LABEL_26:
          v24 = v23;
          while (1)
          {
            v25 = *v15;
            v26 = v24 - 2;
            do
            {
              v27 = v26[2];
              v26 += 2;
            }
            while (v27 < v25);
            v24 = v26 + 2;
            do
            {
              v28 = *(v22 - 2);
              v22 -= 2;
            }
            while (v28 >= v25);
            if (v26 >= v22)
              break;
            v183 = *(_OWORD *)v26;
            *(_OWORD *)v26 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v183;
            ++v19;
            if (v26 == v15)
              v15 = v22;
          }
        }
        if (v26 != v15 && *v15 < *v26)
        {
          v189 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)v15;
          *(_OWORD *)v15 = v189;
          ++v19;
        }
        if (v26 == v13)
          goto LABEL_102;
        if (!v19)
        {
          if (v26 <= v13)
          {
            v33 = v26 + 2;
            while (v33 != v10)
            {
              v34 = *v33;
              v35 = *(v33 - 2);
              v33 += 2;
              if (v34 < v35)
                goto LABEL_53;
            }
          }
          else
          {
            while (v23 != v26)
            {
              v30 = *v23;
              v31 = *(v23 - 2);
              v23 += 2;
              if (v30 < v31)
                goto LABEL_53;
            }
          }
          goto LABEL_102;
        }
LABEL_53:
        if (v26 <= v13)
        {
          v29 = v26 + 2;
        }
        else
        {
          v10 = v26;
          v29 = v8;
        }
LABEL_80:
        v8 = v29;
        if (v10 == v13)
          goto LABEL_102;
      }
    }
  }
  v11 = 0.0 - v4;
  if (v4 >= 0.0)
    v11 = v4;
  if (v11 <= 0.01)
    goto LABEL_17;
  v12 = vcvtmd_u64_f64(v4 * (double)(unint64_t)(((char *)v10 - (char *)v8) >> 4));
  v13 = &v8[2 * v12];
  if (v13 != v10)
    goto LABEL_18;
LABEL_102:
  v55 = __p;
  v54 = v181;
  v56 = &__p[2 * v12];
  v57 = *v56;
  if (v56 == v181)
    goto LABEL_187;
  while (1)
  {
    v58 = ((char *)v54 - (char *)v55) >> 4;
    if (v58 < 2)
      goto LABEL_187;
    if (v58 == 3)
    {
      v83 = (__int128 *)(v55 + 2);
      v84 = v55[2];
      v86 = *(v54 - 2);
      v85 = v54 - 2;
      v87 = v86;
      if (v84 <= *v55)
      {
        if (v87 > v84)
        {
          v97 = *v83;
          *v83 = *(_OWORD *)v85;
          *(_OWORD *)v85 = v97;
          if (v55[2] > *v55)
          {
            v209 = *(_OWORD *)v55;
            *(_OWORD *)v55 = *v83;
            *v83 = v209;
          }
        }
        goto LABEL_187;
      }
      if (v87 <= v84)
      {
        v206 = *(_OWORD *)v55;
        *(_OWORD *)v55 = *v83;
        *v83 = v206;
        if (*v85 > v55[2])
        {
          v88 = *v83;
          *v83 = *(_OWORD *)v85;
          *(_OWORD *)v85 = v88;
        }
        goto LABEL_187;
      }
LABEL_172:
      v207 = *(_OWORD *)v55;
      *(_OWORD *)v55 = *(_OWORD *)v85;
      *(_OWORD *)v85 = v207;
      goto LABEL_187;
    }
    if (v58 == 2)
    {
      v89 = *(v54 - 2);
      v85 = v54 - 2;
      if (v89 <= *v55)
        goto LABEL_187;
      goto LABEL_172;
    }
    if ((char *)v54 - (char *)v55 <= 127)
    {
      while (v55 != v54 - 2)
      {
        v90 = v55;
        v55 += 2;
        if (v90 != v54 && v55 != v54)
        {
          v91 = *v90;
          v92 = v55;
          v93 = v90;
          v94 = v55;
          do
          {
            v95 = *v94;
            v94 += 2;
            v96 = v95;
            if (v95 > v91)
            {
              v91 = v96;
              v93 = v92;
            }
            v92 = v94;
          }
          while (v94 != v54);
          if (v93 != v90)
          {
            v208 = *(_OWORD *)v90;
            *(_OWORD *)v90 = *(_OWORD *)v93;
            *(_OWORD *)v93 = v208;
          }
        }
      }
      goto LABEL_187;
    }
    v59 = &v55[2 * (v58 >> 1)];
    v60 = v54 - 2;
    v61 = *(v54 - 2);
    v62 = *v59;
    if (*v59 > *v55)
      break;
    if (v61 <= v62)
    {
      v63 = 0;
      v64 = *v55;
      v65 = *v59;
      if (*v55 > *v59)
        goto LABEL_110;
    }
    else
    {
      v198 = *(_OWORD *)v59;
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *(_OWORD *)v60 = v198;
      if (*v59 <= *v55)
        goto LABEL_150;
      v199 = *(_OWORD *)v55;
      *(_OWORD *)v55 = *(_OWORD *)v59;
      *(_OWORD *)v59 = v199;
      v63 = 2;
      v64 = *v55;
      v65 = *v59;
      if (*v55 > *v59)
        goto LABEL_110;
    }
LABEL_128:
    v66 = v54 - 2;
    while (1)
    {
      v66 -= 2;
      if (v66 == v55)
        break;
      if (*v66 > v65)
      {
        v202 = *(_OWORD *)v55;
        *(_OWORD *)v55 = *(_OWORD *)v66;
        *(_OWORD *)v66 = v202;
        ++v63;
        v67 = v55 + 2;
        if (v55 + 2 < v66)
          goto LABEL_111;
        goto LABEL_132;
      }
    }
    v76 = v55 + 2;
    if (v64 <= *v60)
    {
      if (v76 == v60)
        goto LABEL_187;
      while (v64 <= *v76)
      {
        v76 += 2;
        if (v76 == v60)
          goto LABEL_187;
      }
      v204 = *(_OWORD *)v76;
      *(_OWORD *)v76 = *(_OWORD *)v60;
      v76 += 2;
      *(_OWORD *)v60 = v204;
    }
    if (v76 == v60)
      goto LABEL_187;
    while (1)
    {
      v80 = *v55;
      v73 = v76 - 2;
      do
      {
        v81 = v73[2];
        v73 += 2;
      }
      while (v80 <= v81);
      v76 = v73 + 2;
      do
      {
        v82 = *(v60 - 2);
        v60 -= 2;
      }
      while (v80 > v82);
      if (v73 >= v60)
        break;
      v205 = *(_OWORD *)v73;
      *(_OWORD *)v73 = *(_OWORD *)v60;
      *(_OWORD *)v60 = v205;
    }
    if (v73 > v56)
      goto LABEL_187;
LABEL_165:
    v55 = v73;
    if (v54 == v56)
      goto LABEL_187;
  }
  if (v61 > v62)
  {
    v196 = *(_OWORD *)v55;
    *(_OWORD *)v55 = *(_OWORD *)v60;
    *(_OWORD *)v60 = v196;
    v63 = 1;
    v64 = *v55;
    v65 = *v59;
    if (*v55 > *v59)
      goto LABEL_110;
    goto LABEL_128;
  }
  v200 = *(_OWORD *)v55;
  *(_OWORD *)v55 = *(_OWORD *)v59;
  *(_OWORD *)v59 = v200;
  if (*v60 > *v59)
  {
    v201 = *(_OWORD *)v59;
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *(_OWORD *)v60 = v201;
    v63 = 2;
    v64 = *v55;
    v65 = *v59;
    if (*v55 > *v59)
      goto LABEL_110;
    goto LABEL_128;
  }
LABEL_150:
  v63 = 1;
  v64 = *v55;
  v65 = *v59;
  if (*v55 <= *v59)
    goto LABEL_128;
LABEL_110:
  v66 = v54 - 2;
  v67 = v55 + 2;
  if (v55 + 2 >= v54 - 2)
  {
LABEL_132:
    v70 = v67;
  }
  else
  {
LABEL_111:
    v68 = v67;
    while (1)
    {
      v69 = *v59;
      v70 = v68 - 2;
      do
      {
        v71 = v70[2];
        v70 += 2;
      }
      while (v71 > v69);
      v68 = v70 + 2;
      do
      {
        v72 = *(v66 - 2);
        v66 -= 2;
      }
      while (v72 <= v69);
      if (v70 >= v66)
        break;
      v197 = *(_OWORD *)v70;
      *(_OWORD *)v70 = *(_OWORD *)v66;
      *(_OWORD *)v66 = v197;
      ++v63;
      if (v70 == v59)
        v59 = v66;
    }
  }
  if (v70 != v59 && *v59 > *v70)
  {
    v203 = *(_OWORD *)v70;
    *(_OWORD *)v70 = *(_OWORD *)v59;
    *(_OWORD *)v59 = v203;
    ++v63;
  }
  if (v70 == v56)
    goto LABEL_187;
  if (v63)
  {
LABEL_138:
    if (v70 <= v56)
    {
      v73 = v70 + 2;
    }
    else
    {
      v54 = v70;
      v73 = v55;
    }
    goto LABEL_165;
  }
  if (v70 <= v56)
  {
    v77 = v70 + 2;
    while (v77 != v54)
    {
      v78 = *v77;
      v79 = *(v77 - 2);
      v77 += 2;
      if (v78 > v79)
        goto LABEL_138;
    }
  }
  else
  {
    while (v67 != v70)
    {
      v74 = *v67;
      v75 = *(v67 - 2);
      v67 += 2;
      if (v74 > v75)
        goto LABEL_138;
    }
  }
LABEL_187:
  v98 = __p;
  v99 = v181;
  v100 = &__p[2 * v12];
  v101 = *v100;
  if (v100 != v181)
  {
    while (2)
    {
      v102 = ((char *)v99 - (char *)v98) >> 4;
      if (v102 < 2)
        goto LABEL_274;
      if (v102 == 3)
      {
        v129 = (__int128 *)(v98 + 2);
        v130 = v99 - 2;
        v131 = v98[3];
        v132 = *(v99 - 1);
        if (v131 >= v98[1])
        {
          if (v132 < v131)
          {
            v137 = *v129;
            *v129 = *(_OWORD *)v130;
            *(_OWORD *)v130 = v137;
            if (v98[3] < v98[1])
            {
              v223 = *(_OWORD *)v98;
              *(_OWORD *)v98 = *v129;
              *v129 = v223;
            }
          }
        }
        else
        {
          if (v132 >= v131)
          {
            v224 = *(_OWORD *)v98;
            *(_OWORD *)v98 = *v129;
            *v129 = v224;
            if (*(v99 - 1) >= v98[3])
              goto LABEL_274;
            v133 = *v129;
            *v129 = *(_OWORD *)v130;
          }
          else
          {
            v220 = *(_OWORD *)v98;
            *(_OWORD *)v98 = *(_OWORD *)v130;
            v133 = v220;
          }
          *(_OWORD *)v130 = v133;
        }
        goto LABEL_274;
      }
      if (v102 == 2)
      {
        if (*(v99 - 1) < v98[1])
        {
          v221 = *(_OWORD *)v98;
          *(_OWORD *)v98 = *((_OWORD *)v99 - 1);
          *((_OWORD *)v99 - 1) = v221;
        }
        goto LABEL_274;
      }
      if ((char *)v99 - (char *)v98 <= 127)
      {
        while (v98 != v99 - 2)
        {
          v134 = v98;
          v98 += 2;
          if (v134 != v99 && v98 != v99)
          {
            v135 = v98;
            v136 = v134;
            do
            {
              if (v135[1] < v136[1])
                v136 = v135;
              v135 += 2;
            }
            while (v135 != v99);
            if (v136 != v134)
            {
              v222 = *(_OWORD *)v134;
              *(_OWORD *)v134 = *(_OWORD *)v136;
              *(_OWORD *)v136 = v222;
            }
          }
        }
        goto LABEL_274;
      }
      v103 = &v98[2 * (v102 >> 1)];
      v104 = v99 - 2;
      v105 = v103[1];
      v106 = *(v99 - 1);
      if (v105 >= v98[1])
      {
        if (v106 >= v105)
        {
          v107 = 0;
          v108 = v98[1];
          v109 = v103[1];
          if (v108 >= v109)
            goto LABEL_213;
          goto LABEL_195;
        }
        v212 = *(_OWORD *)v103;
        *(_OWORD *)v103 = *(_OWORD *)v104;
        *(_OWORD *)v104 = v212;
        if (v103[1] < v98[1])
        {
          v213 = *(_OWORD *)v98;
          *(_OWORD *)v98 = *(_OWORD *)v103;
          *(_OWORD *)v103 = v213;
          v107 = 2;
          v108 = v98[1];
          v109 = v103[1];
          if (v108 >= v109)
            goto LABEL_213;
LABEL_195:
          v110 = v99 - 2;
          v111 = v98 + 2;
          if (v98 + 2 >= v99 - 2)
          {
LABEL_217:
            v114 = v111;
          }
          else
          {
LABEL_196:
            v112 = v111;
            while (1)
            {
              v113 = v103[1];
              v114 = v112 - 2;
              do
              {
                v115 = v114[3];
                v114 += 2;
              }
              while (v115 < v113);
              v112 = v114 + 2;
              do
              {
                v116 = *(v110 - 1);
                v110 -= 2;
              }
              while (v116 >= v113);
              if (v114 >= v110)
                break;
              v211 = *(_OWORD *)v114;
              *(_OWORD *)v114 = *(_OWORD *)v110;
              *(_OWORD *)v110 = v211;
              ++v107;
              if (v114 == v103)
                v103 = v110;
            }
          }
          if (v114 != v103 && v103[1] < v114[1])
          {
            v217 = *(_OWORD *)v114;
            *(_OWORD *)v114 = *(_OWORD *)v103;
            *(_OWORD *)v103 = v217;
            ++v107;
          }
          if (v114 == v100)
            goto LABEL_274;
          if (!v107)
          {
            if (v114 <= v100)
            {
              v123 = v114 + 2;
              while (v123 != v99)
              {
                v124 = v123[1];
                v125 = *(v123 - 1);
                v123 += 2;
                if (v124 < v125)
                  goto LABEL_223;
              }
            }
            else
            {
              while (v111 != v114)
              {
                v120 = v111[1];
                v121 = *(v111 - 1);
                v111 += 2;
                if (v120 < v121)
                  goto LABEL_223;
              }
            }
            goto LABEL_274;
          }
LABEL_223:
          if (v114 <= v100)
          {
            v119 = (unint64_t)(v114 + 2);
          }
          else
          {
            v99 = v114;
            v119 = (unint64_t)v98;
          }
          goto LABEL_250;
        }
      }
      else
      {
        if (v106 < v105)
        {
          v210 = *(_OWORD *)v98;
          *(_OWORD *)v98 = *(_OWORD *)v104;
          *(_OWORD *)v104 = v210;
          v107 = 1;
          v108 = v98[1];
          v109 = v103[1];
          if (v108 < v109)
            goto LABEL_195;
LABEL_213:
          v117 = v99 - 2;
          while (1)
          {
            v110 = v117 - 2;
            if (v117 - 2 == v98)
              break;
            v118 = *(v117 - 1);
            v117 -= 2;
            if (v118 < v109)
            {
              v216 = *(_OWORD *)v98;
              *(_OWORD *)v98 = *(_OWORD *)v110;
              *(_OWORD *)v110 = v216;
              ++v107;
              v111 = v98 + 2;
              if (v98 + 2 < v110)
                goto LABEL_196;
              goto LABEL_217;
            }
          }
          v122 = v98 + 2;
          if (v108 >= *(v99 - 1))
          {
            if (v122 == v104)
              goto LABEL_274;
            while (v108 >= v122[1])
            {
              v122 += 2;
              if (v122 == v104)
                goto LABEL_274;
            }
            v218 = *(_OWORD *)v122;
            *(_OWORD *)v122 = *(_OWORD *)v104;
            v122 += 2;
            *(_OWORD *)v104 = v218;
          }
          if (v122 == v104)
            goto LABEL_274;
          while (1)
          {
            v126 = v98[1];
            v119 = (unint64_t)(v122 - 2);
            do
            {
              v127 = *(double *)(v119 + 24);
              v119 += 16;
            }
            while (v126 >= v127);
            v122 = (double *)(v119 + 16);
            do
            {
              v128 = *(v104 - 1);
              v104 -= 2;
            }
            while (v126 < v128);
            if (v119 >= (unint64_t)v104)
              break;
            v219 = *(_OWORD *)v119;
            *(_OWORD *)v119 = *(_OWORD *)v104;
            *(_OWORD *)v104 = v219;
          }
          if (v119 > (unint64_t)v100)
            goto LABEL_274;
LABEL_250:
          v98 = (double *)v119;
          if (v99 == v100)
            goto LABEL_274;
          continue;
        }
        v214 = *(_OWORD *)v98;
        *(_OWORD *)v98 = *(_OWORD *)v103;
        *(_OWORD *)v103 = v214;
        if (*(v99 - 1) < v103[1])
        {
          v215 = *(_OWORD *)v103;
          *(_OWORD *)v103 = *(_OWORD *)v104;
          *(_OWORD *)v104 = v215;
          v107 = 2;
          v108 = v98[1];
          v109 = v103[1];
          if (v108 >= v109)
            goto LABEL_213;
          goto LABEL_195;
        }
      }
      break;
    }
    v107 = 1;
    v108 = v98[1];
    v109 = v103[1];
    if (v108 >= v109)
      goto LABEL_213;
    goto LABEL_195;
  }
LABEL_274:
  v138 = __p;
  v139 = v181;
  v140 = &__p[2 * v12];
  v141 = v140[1];
  if (v140 != v181)
  {
    while (2)
    {
      v142 = ((char *)v139 - (char *)v138) >> 4;
      if (v142 < 2)
        goto LABEL_361;
      if (v142 == 3)
      {
        v169 = (__int128 *)(v138 + 2);
        v170 = v139 - 2;
        v171 = v138[3];
        v172 = *(v139 - 1);
        if (v171 <= v138[1])
        {
          if (v172 > v171)
          {
            v177 = *v169;
            *v169 = *(_OWORD *)v170;
            *(_OWORD *)v170 = v177;
            if (v138[3] > v138[1])
            {
              v238 = *(_OWORD *)v138;
              *(_OWORD *)v138 = *v169;
              *v169 = v238;
            }
          }
        }
        else
        {
          if (v172 <= v171)
          {
            v239 = *(_OWORD *)v138;
            *(_OWORD *)v138 = *v169;
            *v169 = v239;
            if (*(v139 - 1) <= v138[3])
              goto LABEL_361;
            v173 = *v169;
            *v169 = *(_OWORD *)v170;
          }
          else
          {
            v235 = *(_OWORD *)v138;
            *(_OWORD *)v138 = *(_OWORD *)v170;
            v173 = v235;
          }
          *(_OWORD *)v170 = v173;
        }
        goto LABEL_361;
      }
      if (v142 == 2)
      {
        if (*(v139 - 1) > v138[1])
        {
          v236 = *(_OWORD *)v138;
          *(_OWORD *)v138 = *((_OWORD *)v139 - 1);
          *((_OWORD *)v139 - 1) = v236;
        }
        goto LABEL_361;
      }
      if ((char *)v139 - (char *)v138 <= 127)
      {
        while (v138 != v139 - 2)
        {
          v174 = v138;
          v138 += 2;
          if (v174 != v139 && v138 != v139)
          {
            v175 = v138;
            v176 = v174;
            do
            {
              if (v175[1] > v176[1])
                v176 = v175;
              v175 += 2;
            }
            while (v175 != v139);
            if (v176 != v174)
            {
              v237 = *(_OWORD *)v174;
              *(_OWORD *)v174 = *(_OWORD *)v176;
              *(_OWORD *)v176 = v237;
            }
          }
        }
        goto LABEL_361;
      }
      v143 = &v138[2 * (v142 >> 1)];
      v144 = v139 - 2;
      v145 = v143[1];
      v146 = *(v139 - 1);
      if (v145 <= v138[1])
      {
        if (v146 <= v145)
        {
          v147 = 0;
          v148 = v138[1];
          v149 = v143[1];
          if (v148 <= v149)
            goto LABEL_300;
          goto LABEL_282;
        }
        v227 = *(_OWORD *)v143;
        *(_OWORD *)v143 = *(_OWORD *)v144;
        *(_OWORD *)v144 = v227;
        if (v143[1] > v138[1])
        {
          v228 = *(_OWORD *)v138;
          *(_OWORD *)v138 = *(_OWORD *)v143;
          *(_OWORD *)v143 = v228;
          v147 = 2;
          v148 = v138[1];
          v149 = v143[1];
          if (v148 <= v149)
            goto LABEL_300;
LABEL_282:
          v150 = v139 - 2;
          v151 = v138 + 2;
          if (v138 + 2 >= v139 - 2)
          {
LABEL_304:
            v154 = (unint64_t)v151;
          }
          else
          {
LABEL_283:
            v152 = (unint64_t)v151;
            while (1)
            {
              v153 = v143[1];
              v154 = v152 - 16;
              do
              {
                v155 = *(double *)(v154 + 24);
                v154 += 16;
              }
              while (v155 > v153);
              v152 = v154 + 16;
              do
              {
                v156 = *(v150 - 1);
                v150 -= 2;
              }
              while (v156 <= v153);
              if (v154 >= (unint64_t)v150)
                break;
              v226 = *(_OWORD *)v154;
              *(_OWORD *)v154 = *(_OWORD *)v150;
              *(_OWORD *)v150 = v226;
              ++v147;
              if ((double *)v154 == v143)
                v143 = v150;
            }
          }
          if ((double *)v154 != v143 && v143[1] > *(double *)(v154 + 8))
          {
            v232 = *(_OWORD *)v154;
            *(_OWORD *)v154 = *(_OWORD *)v143;
            *(_OWORD *)v143 = v232;
            ++v147;
          }
          if ((double *)v154 == v140)
            goto LABEL_361;
          if (!v147)
          {
            if (v154 <= (unint64_t)v140)
            {
              v163 = v154 + 16;
              while ((double *)v163 != v139)
              {
                v164 = *(double *)(v163 + 8);
                v165 = *(double *)(v163 - 8);
                v163 += 16;
                if (v164 > v165)
                  goto LABEL_310;
              }
            }
            else
            {
              while (v151 != (double *)v154)
              {
                v160 = v151[1];
                v161 = *(v151 - 1);
                v151 += 2;
                if (v160 > v161)
                  goto LABEL_310;
              }
            }
            goto LABEL_361;
          }
LABEL_310:
          if (v154 <= (unint64_t)v140)
          {
            v159 = v154 + 16;
          }
          else
          {
            v139 = (double *)v154;
            v159 = (unint64_t)v138;
          }
          goto LABEL_337;
        }
      }
      else
      {
        if (v146 > v145)
        {
          v225 = *(_OWORD *)v138;
          *(_OWORD *)v138 = *(_OWORD *)v144;
          *(_OWORD *)v144 = v225;
          v147 = 1;
          v148 = v138[1];
          v149 = v143[1];
          if (v148 > v149)
            goto LABEL_282;
LABEL_300:
          v157 = v139 - 2;
          while (1)
          {
            v150 = v157 - 2;
            if (v157 - 2 == v138)
              break;
            v158 = *(v157 - 1);
            v157 -= 2;
            if (v158 > v149)
            {
              v231 = *(_OWORD *)v138;
              *(_OWORD *)v138 = *(_OWORD *)v150;
              *(_OWORD *)v150 = v231;
              ++v147;
              v151 = v138 + 2;
              if (v138 + 2 < v150)
                goto LABEL_283;
              goto LABEL_304;
            }
          }
          v162 = v138 + 2;
          if (v148 <= *(v139 - 1))
          {
            if (v162 == v144)
              goto LABEL_361;
            while (v148 <= v162[1])
            {
              v162 += 2;
              if (v162 == v144)
                goto LABEL_361;
            }
            v233 = *(_OWORD *)v162;
            *(_OWORD *)v162 = *(_OWORD *)v144;
            v162 += 2;
            *(_OWORD *)v144 = v233;
          }
          if (v162 == v144)
            goto LABEL_361;
          while (1)
          {
            v166 = v138[1];
            v159 = (unint64_t)(v162 - 2);
            do
            {
              v167 = *(double *)(v159 + 24);
              v159 += 16;
            }
            while (v166 <= v167);
            v162 = (double *)(v159 + 16);
            do
            {
              v168 = *(v144 - 1);
              v144 -= 2;
            }
            while (v166 > v168);
            if (v159 >= (unint64_t)v144)
              break;
            v234 = *(_OWORD *)v159;
            *(_OWORD *)v159 = *(_OWORD *)v144;
            *(_OWORD *)v144 = v234;
          }
          if (v159 > (unint64_t)v140)
            goto LABEL_361;
LABEL_337:
          v138 = (double *)v159;
          if (v139 == v140)
            goto LABEL_361;
          continue;
        }
        v229 = *(_OWORD *)v138;
        *(_OWORD *)v138 = *(_OWORD *)v143;
        *(_OWORD *)v143 = v229;
        if (*(v139 - 1) > v143[1])
        {
          v230 = *(_OWORD *)v143;
          *(_OWORD *)v143 = *(_OWORD *)v144;
          *(_OWORD *)v144 = v230;
          v147 = 2;
          v148 = v138[1];
          v149 = v143[1];
          if (v148 <= v149)
            goto LABEL_300;
          goto LABEL_282;
        }
      }
      break;
    }
    v147 = 1;
    v148 = v138[1];
    v149 = v143[1];
    if (v148 <= v149)
      goto LABEL_300;
    goto LABEL_282;
  }
LABEL_361:
  v178 = __p[2 * v12 + 1];
  operator delete(__p);
  return (v101 - v57) * (v178 - v141);
}

void sub_239437CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_239437CE8(_QWORD *a1, _QWORD *a2, uint64_t a3, float64x2_t *a4, double *a5, double *a6)
{
  unint64_t v6;
  BOOL v7;
  _BOOL8 v9;
  double v16;
  __int128 v17;
  __int128 v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  float64x2_t v30[8];
  char v31;
  __int128 v32;
  int v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (**v37)();
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;

  v6 = (uint64_t)(a1[1] - *a1) >> 4;
  v7 = v6 == (uint64_t)(a2[1] - *a2) >> 4 && v6 >= *((_QWORD *)a6 + 1);
  if (!v7 || v6 < *((_QWORD *)a6 + 2))
    return 0;
  sub_239440808((uint64_t)&v37, (uint64_t)a1, (uint64_t)a2, a6[3], a6[7]);
  v16 = *a6;
  v32 = *((_OWORD *)a6 + 2);
  v33 = 5;
  v34 = v16;
  LODWORD(v30[0].f64[0]) = 0;
  sub_239454CD8((int *)v30, (uint64_t)&v35);
  sub_23943FA24((uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v37, (uint64_t)a5);
  v17 = v39;
  v18 = v41;
  *(_OWORD *)(a3 + 32) = v40;
  *(_OWORD *)(a3 + 48) = v18;
  *(_QWORD *)(a3 + 64) = v42;
  *(_OWORD *)a3 = v38;
  *(_OWORD *)(a3 + 16) = v17;
  sub_23943FF70(a3, a1, a2, (uint64_t)a5, v30);
  v19 = v30[5];
  a4[4] = v30[4];
  a4[5] = v19;
  v20 = v30[7];
  a4[6] = v30[6];
  a4[7] = v20;
  v21 = v30[1];
  *a4 = v30[0];
  a4[1] = v21;
  v22 = v30[3];
  a4[2] = v30[2];
  a4[3] = v22;
  v23 = *a5;
  v24 = *(_QWORD *)a5 + 8 * (*((_QWORD *)a5 + 1) >> 6);
  v25 = (_QWORD)a5[1] & 0x3FLL;
  v29 = 1;
  v30[0].f64[0] = v23;
  LODWORD(v30[0].f64[1]) = 0;
  v49 = v24;
  v50 = v25;
  v26 = sub_239458E50((uint64_t)v30, (uint64_t)&v49, &v29);
  v27 = (uint64_t)(a1[1] - *a1) >> 4;
  v28 = *((_QWORD *)a6 + 2);
  if (v28 >= v27)
    v28 = (uint64_t)(a1[1] - *a1) >> 4;
  v9 = v26 >= v28 && (double)v26 / (double)v27 >= a6[6];
  sub_239911CF8((uint64_t)&v36);
  v37 = &off_250ADBA68;
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  return v9;
}

void sub_239437F00(_Unwind_Exception *a1)
{
  sub_239911CF8((uint64_t)&STACK[0xA78]);
  sub_2394407AC(&STACK[0xA90]);
  _Unwind_Resume(a1);
}

void sub_239437F28(_Unwind_Exception *a1)
{
  sub_2394407AC(&STACK[0xA90]);
  _Unwind_Resume(a1);
}

uint64_t sub_239437F3C(_QWORD *a1, _QWORD *a2, float64_t *a3, uint64_t a4, _QWORD *a5, uint64_t a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  char *v33;
  float64x2_t v34;
  double v41;
  float v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  void *v56;
  double v57;
  double v61;
  double v62;
  double v63;
  double cosval;
  double v65;
  __double2 v66;
  double v67;
  double v68;
  __int128 v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  __int128 v78;
  __int128 v79;
  float64x2_t v80;
  float64x2_t v81;
  unint64_t v82;
  double v86;
  int64x2_t v87;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  double v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  double v101;
  float64x2_t v102;
  double v103;
  float64x2_t v104;
  double v105;
  _QWORD *v106;
  double v107;
  double v108;
  double v109;
  double *v110;
  double *v111;
  double v112;
  double v113;
  double v116;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  void *v132;
  void *v133;
  void *__p;
  void *v135;
  __int128 v136;
  char v137;
  int64x2_t v138;
  uint64_t v139;
  __int128 v140;
  double v141;
  float64x2_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  double *v147[4];

  v8 = *a1;
  v7 = a1[1];
  v9 = v7 - *a1;
  v10 = v9 >> 4;
  if (v9 >> 4 != (uint64_t)(a2[1] - *a2) >> 4)
    return 0;
  v12 = *(_QWORD *)(a6 + 8);
  if (v12 && v10 != v12)
    return 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  if (v7 == v8)
  {
    v123 = v8;
    v124 = v7;
  }
  else
  {
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF1)
      sub_2394189F8();
    v17 = (char *)operator new(2 * v9);
    v144 = v17;
    v145 = v17;
    v146 = &v17[32 * v10];
    v123 = v8;
    v124 = v7;
    if (v7 != v8)
    {
      v20 = 0;
      do
      {
        if (!*(_QWORD *)(a6 + 8)
          || ((*(_QWORD *)(*(_QWORD *)a6 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          v22 = (__int128 *)(*a1 + 16 * v20);
          v23 = *a2;
          v129 = *v22;
          v130 = *(_OWORD *)(v23 + 16 * v20);
          if (v17 < v146)
          {
            *(_OWORD *)v17 = *v22;
            *((_OWORD *)v17 + 1) = v130;
            v21 = v17 + 32;
          }
          else
          {
            v24 = v144;
            v25 = (v17 - v144) >> 5;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 59)
              sub_2394189F8();
            v27 = v146 - v144;
            if ((v146 - v144) >> 4 > v26)
              v26 = v27 >> 4;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
              v28 = 0x7FFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              if (v28 >> 59)
                sub_239418A80();
              v29 = (char *)operator new(32 * v28);
            }
            else
            {
              v29 = 0;
            }
            v30 = v130;
            v31 = &v29[32 * v25];
            *(_OWORD *)v31 = v129;
            *((_OWORD *)v31 + 1) = v30;
            v32 = v31;
            if (v17 != v24)
            {
              do
              {
                *((_OWORD *)v32 - 2) = *((_OWORD *)v17 - 2);
                *((_OWORD *)v32 - 1) = *((_OWORD *)v17 - 1);
                v32 -= 32;
                v17 -= 32;
              }
              while (v17 != v24);
              v17 = v24;
            }
            v33 = &v29[32 * v28];
            v21 = v31 + 32;
            v144 = v32;
            v146 = v33;
            if (v17)
              operator delete(v17);
          }
          v145 = v21;
          v17 = v21;
        }
        ++v20;
      }
      while (v20 != v10);
    }
  }
  v130 = 0u;
  v131 = 0u;
  v129 = 0u;
  v136 = (unint64_t)a3;
  v147[0] = (double *)&v129;
  v147[1] = 0;
  sub_239457CC0((float64x2_t **)&v136, v147);
  _V1.D[1] = *((_QWORD *)&v129 + 1);
  _D3 = *((_QWORD *)&v129 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  v41 = _D2 + *(double *)&v130 * *(double *)&v130;
  if (v41 >= 0.0000002635)
    __sincos_stret(sqrt(v41));
  v34.f64[0] = a3[14];
  _Q1 = *(float64x2_t *)(a3 + 12);
  v140 = v129;
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = _Q1.f64[1];
  __asm { FMLA            D2, D3, V1.D[1] }
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v34.f64[0] * v34.f64[0]);
  v142 = vmulq_n_f64(_Q1, _Q2.f64[0]);
  v141 = *(double *)&v130;
  v143 = *(_OWORD *)&vmulq_f64(v34, _Q2);
  v137 = 0;
  *(_QWORD *)&v136 = 0xA00000002;
  *((double *)&v136 + 1) = a7;
  v138 = vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  v139 = 0x3EE4F8B588E368F1;
  sub_239457FB0((uint64_t)&v129, &v144, &v136);
  sub_239456604((uint64_t)&v129, (uint64_t)&v140);
  if (HIDWORD(v46) && *(float *)&v46 <= v45)
  {
    v57 = v141;
    _Q7 = v140;
    _D11 = *((double *)&v140 + 1);
    __asm { FMLA            D0, D11, V7.D[1] }
    v61 = _D0 + v57 * v57;
    if (v61 >= 0.0000002635)
    {
      v65 = sqrt(v61);
      v128 = v140;
      v66 = __sincos_stret(v65);
      cosval = v66.__cosval;
      *(_QWORD *)&_Q7 = v128;
      v63 = v66.__sinval / v65;
      v62 = 1.0 / v61 * (1.0 - v66.__cosval);
    }
    else
    {
      v62 = 0.5 - v61 * (v61 / -720.0 + 0.0416666667);
      v63 = 1.0 - v61 * (0.166666667 - v61 * (v61 / -5040.0 + 0.00833333333));
      cosval = 1.0 - v61 * v62;
    }
    v67 = *(double *)&_Q7 * v62;
    v68 = _D11 * v62;
    *(double *)&v69 = cosval + *(double *)&_Q7 * v62 * *(double *)&_Q7;
    v70 = cosval + _D11 * v62 * _D11;
    v71 = cosval + v57 * v62 * v57;
    v72 = _D11 * v67;
    v73 = v57 * v67;
    v74 = v57 * v68;
    v75 = *(double *)&_Q7 * v63;
    v76 = _D11 * v63;
    v77 = v57 * v63;
    *(double *)&v78 = v72 - v77;
    *(double *)&v79 = v76 + v73;
    *((double *)&v69 + 1) = v72 + v77;
    *((double *)&v78 + 1) = v70;
    *((double *)&v79 + 1) = v74 - v75;
    *(double *)(a4 + 16) = v73 - v76;
    *(_OWORD *)a4 = v69;
    *(double *)(a4 + 48) = v75 + v74;
    *(_OWORD *)(a4 + 32) = v78;
    *(double *)(a4 + 80) = v71;
    *(_OWORD *)(a4 + 64) = v79;
    v80 = v142;
    *(_QWORD *)(a4 + 112) = v143;
    *(float64x2_t *)(a4 + 96) = v80;
    sub_23941C5D8((uint64_t)a5, v10, 0);
    if (v124 != v123)
    {
      v82 = 0;
      v81.f64[0] = *(float64_t *)(a4 + 112);
      _Q1 = *(float64x2_t *)(a4 + 96);
      _Q2 = vmulq_f64(_Q1, _Q1);
      _D3 = *(_QWORD *)(a4 + 104);
      __asm { FMLA            D2, D3, V1.D[1] }
      _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v81.f64[0] * v81.f64[0]);
      v86 = vmulq_f64(v81, _Q2).f64[0];
      v87 = (int64x2_t)vmulq_n_f64(_Q1, _Q2.f64[0]);
      v88 = *(double *)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).i64;
      *(_QWORD *)&v89.f64[0] = vdupq_laneq_s64(v87, 1).u64[0];
      v89.f64[1] = -*(double *)v87.i64;
      v90.f64[0] = *(float64_t *)(a4 + 16);
      v91 = *(float64x2_t *)a4;
      *(_QWORD *)&v92.f64[0] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      v93 = *(float64x2_t *)(a4 + 32);
      v94 = *(double *)(a4 + 80);
      v95 = *(float64x2_t *)(a4 + 64);
      v96 = *(double *)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL).i64;
      _Q2.f64[0] = 0.0;
      _Q2.f64[1] = v86;
      v97 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, *(double *)a4), (float64x2_t)COERCE_UNSIGNED_INT64(-v86), *(float64x2_t *)a4, 1), v89, v90.f64[0]);
      v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, v93.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v86), v93, 1), v89, *(double *)(a4 + 48));
      v99 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q2, v95.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v86), v95, 1), v89, v94);
      v91.f64[1] = *(float64_t *)(a4 + 32);
      *(_QWORD *)&v92.f64[1] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u64[0];
      v90.f64[1] = *(float64_t *)(a4 + 48);
      v100 = vmlaq_n_f64(vmlaq_n_f64(vmulq_f64(v91, (float64x2_t)0), v92, -v86), v90, v88);
      v101 = v95.f64[0] * 0.0 + v96 * -v86 + v94 * v88;
      v102 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v91, v86), (float64x2_t)0, v92), v90, -*(double *)v87.i64);
      v103 = v95.f64[0] * v86 + v96 * 0.0 + v94 * -*(double *)v87.i64;
      v104 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v91, -*(double *)&v87.i64[1]), v92, *(double *)v87.i64), (float64x2_t)0, v90);
      v105 = v96 * *(double *)v87.i64 - *(double *)&v87.i64[1] * v95.f64[0] + v94 * 0.0;
      v106 = (_QWORD *)*a5;
      *(_QWORD *)&v107 = vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL).u64[0];
      *(_QWORD *)&v108 = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
      *(_QWORD *)&v109 = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
      v110 = (double *)(*a1 + 8);
      v111 = (double *)(*a2 + 8);
      do
      {
        while (1)
        {
          v112 = *(v110 - 1);
          v113 = *(v111 - 1);
          _Q25 = vaddq_f64(v99, vmlaq_n_f64(vmulq_n_f64(v97, v112), v98, *v110));
          _Q26 = vaddq_f64(v104, vmlaq_n_f64(vmulq_n_f64(v100, v113), v102, *v111));
          v116 = v105
               + v112 * v104.f64[0]
               + *v110 * v109
               + (v101 + v112 * v100.f64[0] + *v110 * v107) * v113
               + (v103 + v112 * v102.f64[0] + *v110 * v108) * *v111;
          _D23 = _Q25.f64[1];
          __asm { FMLA            D22, D23, V25.D[1] }
          _D24 = _Q26.f64[1];
          __asm { FMLA            D23, D24, V26.D[1] }
          v121 = v82 >> 6;
          v122 = 1 << v82;
          if (v116 * v116 / (_D22 + _D23) < a7 * a7)
            break;
          v106[v121] &= ~v122;
          ++v82;
          v110 += 2;
          v111 += 2;
          if (v10 == v82)
            goto LABEL_64;
        }
        v106[v121] |= v122;
        ++v82;
        v110 += 2;
        v111 += 2;
      }
      while (v10 != v82);
    }
LABEL_64:
    v18 = 1;
    v56 = __p;
    if (!__p)
      goto LABEL_52;
    goto LABEL_51;
  }
  v47 = *(_OWORD *)a3;
  v48 = *((_OWORD *)a3 + 1);
  v49 = *((_OWORD *)a3 + 3);
  *(_OWORD *)(a4 + 32) = *((_OWORD *)a3 + 2);
  *(_OWORD *)(a4 + 48) = v49;
  *(_OWORD *)a4 = v47;
  *(_OWORD *)(a4 + 16) = v48;
  v50 = *((_OWORD *)a3 + 4);
  v51 = *((_OWORD *)a3 + 5);
  v52 = *((_OWORD *)a3 + 7);
  *(_OWORD *)(a4 + 96) = *((_OWORD *)a3 + 6);
  *(_OWORD *)(a4 + 112) = v52;
  *(_OWORD *)(a4 + 64) = v50;
  *(_OWORD *)(a4 + 80) = v51;
  if (a5 != (_QWORD *)a6)
  {
    v53 = *(_QWORD *)(a6 + 8);
    if (v53)
    {
      v54 = (_QWORD *)*a5;
      if (v53 > a5[2] << 6)
      {
        if (v54)
        {
          operator delete(v54);
          *a5 = 0;
          a5[1] = 0;
          a5[2] = 0;
          v53 = *(_QWORD *)(a6 + 8);
        }
        if ((v53 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v55 = ((v53 - 1) >> 6) + 1;
        v54 = operator new(8 * v55);
        *a5 = v54;
        a5[1] = 0;
        a5[2] = v55;
        v53 = *(_QWORD *)(a6 + 8);
      }
      memmove(v54, *(const void **)a6, (((v53 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v53 = *(_QWORD *)(a6 + 8);
    }
    v18 = 0;
    a5[1] = v53;
    v56 = __p;
    if (!__p)
      goto LABEL_52;
    goto LABEL_51;
  }
  v18 = 0;
  v56 = __p;
  if (__p)
  {
LABEL_51:
    v135 = v56;
    operator delete(v56);
  }
LABEL_52:
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  return v18;
}

void sub_239438708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)(v15 - 184);
  if (v17)
  {
    *(_QWORD *)(v15 - 176) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_239438744(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t v12;
  _BOOL4 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char v24;
  void *__p;
  void *v26;
  uint64_t v27;
  void *__src;
  unint64_t v29;
  uint64_t v30;
  _OWORD v31[4];
  uint64_t v32;
  char *v33;
  int v34;

  v12 = sub_239438974(a1, a2, a3, a4, a6);
  if ((_DWORD)v12 && a5)
  {
    __src = 0;
    v29 = 0;
    v30 = 0;
    __p = 0;
    v26 = 0;
    v27 = 0;
    v13 = sub_239438B44(a1, a2, (uint64_t)v31, &__src, a4, (uint64_t)&__p, (uint64_t)a6);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    if (v13)
    {
      v14 = *(char **)a4;
      v15 = *(_QWORD *)(a4 + 8);
      v24 = 1;
      __p = v14;
      LODWORD(v26) = 0;
      v33 = &v14[8 * (v15 >> 6)];
      v34 = v15 & 0x3F;
      v16 = sub_239458E50((uint64_t)&__p, (uint64_t)&v33, &v24);
      v24 = 1;
      __p = __src;
      LODWORD(v26) = 0;
      v33 = (char *)__src + 8 * (v29 >> 6);
      v34 = v29 & 0x3F;
      if (sub_239458E50((uint64_t)&__p, (uint64_t)&v33, &v24) > v16)
      {
        v17 = v31[3];
        *(_OWORD *)(a3 + 32) = v31[2];
        *(_OWORD *)(a3 + 48) = v17;
        *(_QWORD *)(a3 + 64) = v32;
        v18 = v31[1];
        *(_OWORD *)a3 = v31[0];
        *(_OWORD *)(a3 + 16) = v18;
        if (&__src != (void **)a4)
        {
          v19 = v29;
          if (v29)
          {
            v20 = *(char **)a4;
            if (v29 <= *(_QWORD *)(a4 + 16) << 6)
            {
              v21 = v29 - 1;
            }
            else
            {
              if (v20)
              {
                operator delete(v20);
                *(_QWORD *)a4 = 0;
                *(_QWORD *)(a4 + 8) = 0;
                *(_QWORD *)(a4 + 16) = 0;
                v19 = v29;
              }
              if ((v19 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v21 = v19 - 1;
              v22 = ((v19 - 1) >> 6) + 1;
              v20 = (char *)operator new(8 * v22);
              *(_QWORD *)a4 = v20;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = v22;
            }
            memmove(v20, __src, ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
            v19 = v29;
          }
          *(_QWORD *)(a4 + 8) = v19;
        }
      }
    }
    if (__src)
      operator delete(__src);
  }
  return v12;
}

void sub_239438924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239438974(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v5;
  BOOL v6;
  uint64_t v8;
  double v13;
  unsigned int v14;
  unint64_t v15;
  double v16;
  BOOL v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *__p;
  void *v40;
  int v41;

  v5 = (uint64_t)(a1[1] - *a1) >> 4;
  v6 = v5 == (uint64_t)(a2[1] - *a2) >> 4 && v5 >= *((_QWORD *)a5 + 1);
  if (!v6 || v5 < *((_QWORD *)a5 + 2))
    return 0;
  sub_239459690((uint64_t)&v25, (uint64_t)a1, (uint64_t)a2, a5[3], a5[7]);
  v13 = *a5;
  v20 = *((_OWORD *)a5 + 2);
  v21 = 7;
  v22 = v13;
  v41 = 0;
  sub_239454CD8(&v41, (uint64_t)&v23);
  v14 = sub_2394590D0((uint64_t)&v41, (uint64_t)&v20, (uint64_t)&v25, a4);
  v15 = (uint64_t)(a1[1] - *a1) >> 4;
  v16 = (double)v14 / (double)v15;
  if (*((_QWORD *)a5 + 2) < v15)
    v15 = *((_QWORD *)a5 + 2);
  v17 = v16 < a5[6] || v15 > v14;
  v8 = !v17;
  if (!v17)
  {
    v18 = v27;
    v19 = v29;
    *(_OWORD *)(a3 + 32) = v28;
    *(_OWORD *)(a3 + 48) = v19;
    *(_QWORD *)(a3 + 64) = v30;
    *(_OWORD *)a3 = v26;
    *(_OWORD *)(a3 + 16) = v18;
  }
  sub_239911CF8((uint64_t)&v24);
  v25 = &off_250ADBB28;
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  return v8;
}

void sub_239438B14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239911CF8(v1 + 2536);
  sub_239459614(&STACK[0xA00]);
  _Unwind_Resume(a1);
}

void sub_239438B30(_Unwind_Exception *a1)
{
  sub_239459614(&STACK[0xA00]);
  _Unwind_Resume(a1);
}

BOOL sub_239438B44(_QWORD *a1, _QWORD *a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  int8x16_t v17;
  _BYTE *v18;
  _BYTE *v19;
  double v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  double *v25;
  double *v26;
  double v27;
  float64x2_t v30;
  double v36;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int8x16_t v51;
  int8x16_t v52;
  void *v53;
  void *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double *v58;
  _QWORD *v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  uint64_t v65;
  float64x2_t v66;
  double *v67;
  double *v68;
  double v69;
  double v73;
  double v77;
  double v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  double v84;
  void *v85;
  void *v86;
  unint64_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  _QWORD *v96;
  float64x2_t v97;
  uint64_t v98;
  float64x2_t v99;
  double *v100;
  double *v101;
  double v102;
  double v106;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  unint64_t v115;
  void *v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  void *v120;
  unint64_t v121;
  void *v122;
  unint64_t v123;
  void **v124;
  int8x16_t v125;
  unint64_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  float64x2_t v130;
  int8x16_t v131;
  float64x2_t v132;
  double v133;
  double v134;
  int8x16_t v135;
  void *__src;
  unint64_t v137;
  uint64_t v138;
  void *__p;
  char *v140;
  uint64_t v141;
  void *v142[3];
  uint64_t (**v143)();
  int8x16_t v144;
  _BYTE v145[32];
  int8x16_t v146;
  double v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  _BYTE *v153;
  void *v154;
  void *v155;
  double v156;
  void *v157;
  void *v158;

  v7 = a7;
  v12 = (uint64_t)(a1[1] - *a1) >> 4;
  v13 = *(_QWORD *)(a6 + 8);
  if (*(_QWORD *)a6 != v13 && v12 != (v13 - *(_QWORD *)a6) >> 3)
    return 0;
  if (v12 != (uint64_t)(a2[1] - *a2) >> 4)
    return 0;
  v14 = *(_QWORD *)(a5 + 8);
  if (v14 && v12 != v14)
    return 0;
  sub_239459690((uint64_t)&v143, (uint64_t)a1, (uint64_t)a2, *(double *)(a7 + 24), *(double *)(a7 + 56));
  if (sub_23945BD94((uint64_t)&v143, a5, (char **)a6))
  {
    v16 = *(_OWORD *)v145;
    v17 = v146;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v145[16];
    *(int8x16_t *)(a3 + 48) = v17;
    v18 = v152;
    v19 = v153;
    *(double *)(a3 + 64) = v147;
    *(int8x16_t *)a3 = v144;
    *(_OWORD *)(a3 + 16) = v16;
    v20 = v156;
    sub_23941C5D8((uint64_t)a4, (v19 - v18) >> 4, 0);
    if (v19 == v18)
    {
      v22 = 0;
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v23 = *a4;
      if ((unint64_t)((v19 - v18) >> 4) <= 1)
        v24 = 1;
      else
        v24 = (v19 - v18) >> 4;
      v25 = (double *)((char *)v154 + 8);
      v26 = (double *)((char *)v152 + 8);
      do
      {
        while (1)
        {
          v27 = *(v26 - 1);
          _D3 = *v25;
          _Q4.f64[0] = *(float64_t *)(a3 + 16);
          v30 = *(float64x2_t *)(a3 + 24);
          _Q17 = vaddq_f64(*(float64x2_t *)(a3 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a3, v27), v30, *v26));
          _Q4.f64[1] = *(float64_t *)(a3 + 40);
          __asm { FMLA            D2, D3, V17.D[1] }
          v36 = *(double *)(a3 + 64) + _Q4.f64[0] * v27 + _Q4.f64[1] * *v26 + _D2;
          _D3 = _Q17.f64[1];
          __asm { FMLA            D2, D3, V17.D[1] }
          _Q4.f64[0] = vaddq_f64(_Q4, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a3, *(int64x2_t *)&v30), *(v25 - 8)), (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, *(int64x2_t *)&v30), *v25)).f64[1];
          __asm { FMLA            D3, D4, V1.D[1] }
          v40 = v21 >> 6;
          v41 = 1 << v21;
          if (v36 * v36 / (_D2 + _D3) < v20)
            break;
          v23[v40] &= ~v41;
          ++v21;
          v25 += 2;
          v26 += 2;
          if (v24 == v21)
            goto LABEL_22;
        }
        ++v22;
        v23[v40] |= v41;
        ++v21;
        v25 += 2;
        v26 += 2;
      }
      while (v24 != v21);
    }
LABEL_22:
    v123 = v12;
    v44 = *(_QWORD *)(v7 + 64);
    v45 = v22;
    if (v44)
    {
      v124 = a4;
      v46 = 0;
      v47 = *(double *)(v7 + 72);
      v48 = *(double *)(v7 + 24);
      v49 = v48 * ((v47 + -1.0) * v48) / (double)(unint64_t)(v44 - 1);
      v50 = v47 * (v48 * v48);
      v133 = *(double *)(a3 + 64);
      v127 = *(int8x16_t *)a3;
      v128 = *(int8x16_t *)(a3 + 48);
      v125 = *(int8x16_t *)(a3 + 32);
      v126 = vextq_s8(v128, v128, 8uLL).u64[0];
      *(_QWORD *)&v134 = vextq_s8(v125, v125, 8uLL).u64[0];
      v135 = *(int8x16_t *)(a3 + 16);
      v51 = vextq_s8(v135, v135, 8uLL);
      v52 = vextq_s8(v127, v127, 8uLL);
      while (1)
      {
        v129 = v52;
        v131 = v51;
        memset(v142, 0, sizeof(v142));
        __p = 0;
        v140 = 0;
        v141 = 0;
        v54 = v152;
        v53 = v153;
        v55 = (v153 - (_BYTE *)v152) >> 4;
        sub_23941C5D8((uint64_t)v142, v55, 0);
        v56 = (v140 - (_BYTE *)__p) >> 3;
        if (v55 <= v56)
        {
          if (v55 < v56)
            v140 = (char *)__p + 8 * v55;
        }
        else
        {
          sub_23945E108((uint64_t)&__p, v55 - v56);
        }
        if (v53 != v54)
        {
          v57 = 0;
          v58 = (double *)__p;
          v59 = v142[0];
          *(_QWORD *)&v62.f64[0] = v127.i64[0];
          *(_QWORD *)&v61.f64[0] = v128.i64[0];
          *(_QWORD *)&v60.f64[0] = v127.i64[0];
          *(_QWORD *)&v64.f64[0] = v129.i64[0];
          *(_QWORD *)&v60.f64[1] = v129.i64[0];
          *(_QWORD *)&v61.f64[1] = v126;
          *(_QWORD *)&v63.f64[0] = v131.i64[0];
          *(_QWORD *)&v62.f64[1] = v131.i64[0];
          *(_QWORD *)&v63.f64[1] = v125.i64[0];
          *(_QWORD *)&v64.f64[1] = v125.i64[0];
          if (v55 <= 1)
            v65 = 1;
          else
            v65 = v55;
          *(_QWORD *)&v66.f64[0] = v135.i64[0];
          v66.f64[1] = v134;
          v67 = (double *)((char *)v154 + 8);
          v68 = (double *)((char *)v152 + 8);
          do
          {
            while (1)
            {
              v69 = *(v68 - 1);
              _D17 = *v67;
              _Q18 = vaddq_f64(v61, vmlaq_n_f64(vmulq_n_f64(v60, v69), v63, *v68));
              __asm { FMLA            D16, D17, V18.D[1] }
              v73 = v133 + *(double *)v135.i64 * v69 + v134 * *v68 + _D16;
              _D17 = _Q18.f64[1];
              __asm { FMLA            D16, D17, V18.D[1] }
              _Q18.f64[0] = vaddq_f64(v66, vmlaq_n_f64(vmulq_n_f64(v62, *(v67 - 8)), v64, *v67)).f64[1];
              __asm { FMLA            D17, D18, V7.D[1] }
              v77 = v73 * v73 / (_D16 + _D17);
              v78 = 0.000001;
              if (v77 >= 0.000001)
                v78 = v77;
              v58[v57] = 1.0 / sqrt(v78);
              v79 = v57 >> 6;
              v80 = 1 << v57;
              if (v77 < v50)
                break;
              v59[v79] &= ~v80;
              ++v57;
              v67 += 2;
              v68 += 2;
              if (v65 == v57)
                goto LABEL_38;
            }
            v59[v79] |= v80;
            ++v57;
            v67 += 2;
            v68 += 2;
          }
          while (v65 != v57);
        }
LABEL_38:
        v81 = sub_23945BD94((uint64_t)&v143, (uint64_t)v142, (char **)&__p);
        if (v81)
          break;
        v52 = v129;
        v51 = v131;
        v119 = (char *)__p;
        if (__p)
          goto LABEL_56;
LABEL_57:
        if (v142[0])
        {
          operator delete(v142[0]);
          v52 = v129;
          v51 = v131;
        }
        if (v81 && (unint64_t)++v46 < *(_QWORD *)(v7 + 64))
          continue;
        goto LABEL_72;
      }
      v82 = v7;
      v83 = v45;
      v135.i64[0] = *(_QWORD *)v145;
      v134 = *(double *)&v145[24];
      v132 = *(float64x2_t *)&v145[8];
      v133 = v147;
      v127 = v144;
      v128 = v146;
      __src = 0;
      v137 = 0;
      v138 = 0;
      v84 = v156;
      v85 = v152;
      v86 = v153;
      v87 = (v153 - (_BYTE *)v152) >> 4;
      sub_23941C5D8((uint64_t)&__src, v87, 0);
      v89 = (float64x2_t)v127;
      v88 = (float64x2_t)v128;
      v90 = (float64x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL);
      v91 = v132;
      v92 = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      v93 = vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL).u64[0];
      v130 = v90;
      v126 = v93;
      if (v86 == v85)
      {
        v45 = v83;
        v7 = v82;
        v52 = (int8x16_t)v90;
        v51 = (int8x16_t)v132;
      }
      else
      {
        v94 = 0;
        v95 = 0;
        v96 = __src;
        *(_QWORD *)&v97.f64[0] = v127.i64[0];
        v97.f64[1] = v90.f64[0];
        *(_QWORD *)&v88.f64[1] = v93;
        v89.f64[1] = v132.f64[0];
        *(_QWORD *)&v91.f64[1] = v92;
        *(_QWORD *)&v90.f64[1] = v92;
        if (v87 <= 1)
          v98 = 1;
        else
          v98 = v87;
        *(_QWORD *)&v99.f64[0] = v135.i64[0];
        v99.f64[1] = v134;
        v100 = (double *)((char *)v154 + 8);
        v101 = (double *)((char *)v152 + 8);
        v45 = v83;
        v7 = v82;
        do
        {
          while (1)
          {
            v102 = *(v101 - 1);
            _D18 = *v100;
            _Q19 = vaddq_f64(v88, vmlaq_n_f64(vmulq_n_f64(v97, v102), v91, *v101));
            __asm { FMLA            D17, D18, V19.D[1] }
            v106 = v133 + *(double *)v135.i64 * v102 + v134 * *v101 + _D17;
            _D18 = _Q19.f64[1];
            __asm { FMLA            D17, D18, V19.D[1] }
            _Q19.f64[0] = vaddq_f64(v99, vmlaq_n_f64(vmulq_n_f64(v89, *(v100 - 8)), v90, *v100)).f64[1];
            __asm { FMLA            D18, D19, V16.D[1] }
            v110 = v94 >> 6;
            v111 = 1 << v94;
            if (v106 * v106 / (_D17 + _D18) < v84)
              break;
            v96[v110] &= ~v111;
            ++v94;
            v100 += 2;
            v101 += 2;
            if (v98 == v94)
              goto LABEL_47;
          }
          ++v95;
          v96[v110] |= v111;
          ++v94;
          v100 += 2;
          v101 += 2;
        }
        while (v98 != v94);
LABEL_47:
        v112 = v95;
        v52 = (int8x16_t)v130;
        v51 = (int8x16_t)v132;
        if (v45 < v95)
        {
          *(_QWORD *)(a3 + 16) = v135.i64[0];
          *(_QWORD *)&v113 = v127.i64[0];
          *((_QWORD *)&v113 + 1) = *(_QWORD *)&v130.f64[0];
          *(_OWORD *)a3 = v113;
          *(double *)(a3 + 40) = v134;
          *(float64_t *)&v113 = v132.f64[0];
          *((_QWORD *)&v113 + 1) = v92;
          *(_OWORD *)(a3 + 24) = v113;
          *(double *)(a3 + 64) = v133;
          *(_QWORD *)&v114 = v128.i64[0];
          *((_QWORD *)&v114 + 1) = v126;
          *(_OWORD *)(a3 + 48) = v114;
          if (&__src != v124)
          {
            v115 = v137;
            if (v137)
            {
              v116 = *v124;
              if (v137 <= (_QWORD)v124[2] << 6)
              {
                v117 = v137 - 1;
              }
              else
              {
                if (v116)
                {
                  operator delete(v116);
                  *v124 = 0;
                  v124[1] = 0;
                  v124[2] = 0;
                  v115 = v137;
                }
                if ((v115 & 0x8000000000000000) != 0)
                  sub_2394189F8();
                v117 = v115 - 1;
                v118 = ((v115 - 1) >> 6) + 1;
                v116 = operator new(8 * v118);
                *v124 = v116;
                v124[1] = 0;
                v124[2] = (void *)v118;
                v7 = v82;
              }
              memmove(v116, __src, ((v117 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
              v115 = v137;
              v52 = (int8x16_t)v130;
              v51 = (int8x16_t)v132;
            }
            v124[1] = (void *)v115;
          }
          v45 = v112;
          v120 = __src;
          if (!__src)
          {
LABEL_65:
            v125.i64[0] = v51.i64[1];
            v50 = v50 - v49;
            v119 = (char *)__p;
            v129 = v52;
            v131 = v51;
            if (!__p)
              goto LABEL_57;
LABEL_56:
            v140 = v119;
            operator delete(v119);
            v52 = v129;
            v51 = v131;
            goto LABEL_57;
          }
LABEL_64:
          operator delete(v120);
          v52 = (int8x16_t)v130;
          v51 = (int8x16_t)v132;
          goto LABEL_65;
        }
      }
      v120 = __src;
      if (!__src)
        goto LABEL_65;
      goto LABEL_64;
    }
LABEL_72:
    v121 = *(_QWORD *)(v7 + 16);
    if (v121 >= v123)
      v121 = v123;
    if (v45 >= v121)
    {
      v42 = (double)v45 / (double)v123 >= *(double *)(v7 + 48);
      v143 = &off_250ADBB28;
      v122 = v157;
      if (!v157)
        goto LABEL_77;
      goto LABEL_76;
    }
  }
  v42 = 0;
  v143 = &off_250ADBB28;
  v122 = v157;
  if (v157)
  {
LABEL_76:
    v158 = v122;
    operator delete(v122);
  }
LABEL_77:
  if (v154)
  {
    v155 = v154;
    operator delete(v154);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  return v42;
}

void sub_239439364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v40;
  void *v41;

  if (__p)
  {
    operator delete(__p);
    v40 = a33;
    if (!a33)
    {
LABEL_3:
      v41 = a36;
      if (!a36)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v40 = a33;
    if (!a33)
      goto LABEL_3;
  }
  operator delete(v40);
  v41 = a36;
  if (!a36)
  {
LABEL_4:
    sub_239459614(&a39);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v41);
  sub_239459614(&a39);
  _Unwind_Resume(a1);
}

uint64_t sub_2394393FC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, unsigned int **a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float v17;
  float v18;
  char *v19;
  uint64_t v20;
  float *v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  float *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  float *v36;
  float *v37;
  size_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  unsigned int *v45;
  unsigned int *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  _BOOL4 v63;
  void *v64;
  unint64_t v65;
  float *v66;
  float *v67;
  char *v68;
  char *v69;
  char *v70;
  float *v71;
  uint64_t v72;
  uint64_t v73;
  float *v74;
  float *v75;
  int v76;
  int v77;
  float *v78;
  float *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  double v93;
  double v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float *v99;
  _BYTE *v100;
  char *v101;
  unint64_t v102;
  double v103;
  float64x2_t v104;
  float64x2_t v109;
  double v115;
  float64x2_t v117;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v130;
  float64x2_t v132;
  float64x2_t v133;
  double v135;
  float64x2_t v136;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v141;
  double v142;
  double v143;
  double v144;
  double v145;
  float64x2_t v146;
  float64x2_t v147;
  uint64_t v148;
  float64x2_t v150;
  double v151;
  float64x2_t v152;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  float *v160;
  float *v161;
  uint64_t v162;
  double v163;
  double v164;
  float *v165;
  double v166;
  double v167;
  double v170;
  double v171;
  float *v178;
  unint64_t v179;
  float *v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const float *v185;
  const float *v186;
  float *v187;
  float *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const float *v192;
  const float *v193;
  float *v194;
  float *v195;
  float *v196;
  int64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  unsigned int *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  float64x2_t v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  float64x2_t *v215;
  float64x2_t *v216;
  float64x2_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  float64x2_t *v225;
  float64x2_t *v226;
  char *v227;
  double v228;
  double v229;
  double v230;
  double v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  double *v235;
  double v236;
  double v237;
  double v238;
  uint64_t v239;
  double *v240;
  double v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  double *v245;
  double *v246;
  double v247;
  char *v248;
  uint64_t v249;
  double v250;
  double v251;
  double v252;
  double v253;
  char *v254;
  int64_t v255;
  uint64_t v256;
  double *v257;
  double v258;
  double v259;
  double v260;
  uint64_t v261;
  double *v262;
  double v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  double *v267;
  double *v268;
  double v269;
  char *v270;
  uint64_t v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  double v275;
  unint64_t v276;
  __int128 v277;
  char v278;
  uint64_t v279;
  void *v280;
  uint64_t v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  char v287;
  uint64_t v288;
  void *v289;
  int v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  uint64_t v295;
  _OWORD *v296;
  __int128 v297;
  size_t v298;
  void *v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  _OWORD *v304;
  __int128 v305;
  size_t v306;
  void *v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  float64_t v312;
  float64_t v313;
  double v314;
  double *v315;
  void *v316;
  unint64_t v317;
  uint64_t v318;
  double *v319;
  double v320;
  char *v321;
  double v322;
  char *v323;
  int v324;
  double v325;
  __int128 v326;
  char v327;
  uint64_t v328;
  void *v329;
  uint64_t v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  char v336;
  uint64_t v337;
  void *v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  _OWORD *v344;
  __int128 v345;
  size_t v346;
  void *v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  _OWORD *v352;
  __int128 v353;
  size_t v354;
  void *v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  double *v360;
  double v361;
  double *v362;
  unint64_t v363;
  uint64_t v364;
  double *v365;
  double v366;
  double *v367;
  uint64_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  double *v373;
  const double *v374;
  unint64_t v375;
  const double *v376;
  double *v377;
  uint64_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  double *v383;
  const double *v384;
  unint64_t v385;
  const double *v386;
  double *v387;
  int v388;
  _BOOL4 v389;
  char v390;
  float64x2_t v391;
  void *v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  int8x8_t *v396;
  uint64_t v397;
  int v398;
  char *v399;
  char *v401;
  float64x2_t v403;
  float64x2_t *v404;
  float64x2_t *v405;
  float64x2_t *v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  char *v411;
  float64x2_t *v412;
  float64x2_t *v413;
  float64x2_t v414;
  char *v415;
  char *v416;
  uint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  char *v421;
  float64x2_t *v422;
  float64x2_t *v423;
  unint64_t v424;
  unint64_t v425;
  _QWORD *v426;
  char *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  void *v432;
  uint64_t v433;
  int8x16_t *v434;
  int64x2_t v435;
  uint64_t v436;
  int64x2_t v437;
  int8x8_t v438;
  uint8x8_t v439;
  uint8x8_t v440;
  const void *v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  int8x8_t *v445;
  unint64_t v446;
  uint64_t v447;
  int8x16_t *v448;
  int64x2_t v449;
  uint64_t v450;
  int64x2_t v451;
  int8x8_t v452;
  uint8x8_t v453;
  uint8x8_t v454;
  int64x2_t v458;
  double v459;
  float64x2_t v460;
  unint64_t v461;
  unint64_t v462;
  float64x2_t v463;
  float64x2_t v465;
  double v468;
  double v469;
  double v470;
  __double2 v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v482;
  double v485;
  double v486;
  float64x2_t v487;
  double v488;
  __double2 v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  void *v498;
  _DWORD *v499;
  unint64_t v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  _QWORD *v505;
  int *v506;
  int v507;
  int v508;
  int v509;
  _QWORD *v510;
  unint64_t v511;
  _DWORD *v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int v521;
  void *v522;
  uint64_t v523;
  unsigned int v524;
  unsigned int v525;
  unsigned int v526;
  char v528;
  double v529;
  int8x16_t v530;
  double v531;
  float64x2_t v532;
  double v533;
  double v534;
  double v535;
  double cosval;
  double v537;
  __double2 v538;
  double v539;
  double v540;
  double v541;
  double v542;
  double v543;
  double v544;
  double v545;
  double v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  float64_t v553;
  float64x2_t v554;
  float64x2_t v556;
  float64x2_t v558;
  double v560;
  double v562;
  float64x2_t v564;
  double v565;
  float64x2_t v566;
  float64x2_t v567;
  double v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  void *v572;
  void *v573;
  void *v574;
  unint64_t v575;
  unint64_t v576;
  _OWORD *v577;
  _OWORD *v578;
  char *v579;
  _OWORD *v580;
  char *v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  unint64_t v585;
  char *v586;
  char *v587;
  uint64_t v588;
  char *v589;
  char *v590;
  _OWORD *v591;
  char *v592;
  char *v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  uint64_t v600;
  char *v601;
  char *v602;
  _QWORD *v603;
  uint64_t v604;
  _DWORD *v605;
  unint64_t v606;
  unint64_t v607;
  void *v608;
  _BYTE *v609;
  int64_t v610;
  uint64_t v611;
  unint64_t v612;
  int64_t v613;
  unint64_t v614;
  _BYTE *v615;
  _DWORD *v616;
  unint64_t v617;
  _DWORD *v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  _OWORD *v622;
  __int128 *v623;
  uint64_t v624;
  __int128 v625;
  char *v626;
  _BYTE *v627;
  uint64_t v628;
  _OWORD *f64;
  unint64_t v630;
  float32x2_t *v631;
  float64x2_t v632;
  char *v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  unint64_t v637;
  char *v638;
  float64x2_t *v639;
  float v640;
  double v642;
  float64x2_t *v643;
  uint64_t v644;
  _DWORD *v645;
  unint64_t v646;
  unint64_t v647;
  void *v648;
  _BYTE *v649;
  int64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  _BYTE *v655;
  _DWORD *v656;
  unint64_t v657;
  _DWORD *v658;
  uint64_t v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  _OWORD *v663;
  __int128 *v664;
  uint64_t v665;
  __int128 v666;
  float64x2_t *v667;
  _BYTE *v668;
  uint64_t v669;
  float64x2_t *v670;
  unint64_t v671;
  float32x2_t *v672;
  float64x2_t v673;
  float64x2_t *v674;
  uint64_t v675;
  unint64_t v676;
  uint64_t v677;
  unint64_t v678;
  char *v679;
  float64x2_t *v680;
  float v681;
  BOOL v682;
  double v683;
  float64x2_t *v684;
  double v685;
  double v686;
  double v687;
  double v688;
  float v689;
  double v690;
  BOOL v691;
  std::bad_alloc *v693;
  std::bad_alloc *v694;
  std::bad_alloc *exception;
  std::bad_alloc *v696;
  std::bad_alloc *v697;
  std::bad_alloc *v698;
  std::bad_alloc *v699;
  std::bad_alloc *v700;
  std::bad_alloc *v701;
  std::bad_alloc *v702;
  std::bad_alloc *v703;
  std::bad_alloc *v704;
  unint64_t v705;
  void *__src;
  unint64_t v708;
  float64x2_t v709;
  double v710;
  unint64_t v711;
  int v712;
  float64x2_t v713;
  float64x2_t v714;
  double v715;
  double v716;
  int64_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v725;
  double v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64_t v731;
  float64x2_t v732;
  uint64_t v733;
  double v734;
  unsigned int **v736;
  double v737;
  uint64_t v738;
  float64x2_t v739;
  float64x2_t v741;
  uint64_t v742;
  void *__dst[2];
  __int128 v744;
  float64x2_t v745;
  __int128 v746;
  double *v747;
  double *v748;
  char *v749;
  void *v750[2];
  _BYTE v751[48];
  double v752;
  uint64_t v753;
  void *v754[3];
  void *v755[2];
  __int128 v756;
  void *v757;
  char *v758;
  char *v759;
  _OWORD *v760;
  float64x2_t *v761;
  float64x2_t *v762;
  void *memptr;
  void *v764;
  char *v765;
  char v766;
  _BYTE v767[64];
  uint64_t v768;
  uint64_t v769;
  _BYTE __p[32];
  __int128 v771;
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  __int128 v776;
  void *v777;
  unint64_t v778;
  uint64_t v779;
  void *v780[2];
  __int128 v781;
  __int128 v782;
  __int128 v783;
  __int128 v784;
  __int128 v785;
  __int128 v786;
  __int128 v787;
  void *v788;
  unint64_t v789;
  uint64_t v790;
  void *v791;
  void *v792;
  double *v793;
  void *v794;
  void *v795;
  double *v796;
  void *v797;
  char *v798;
  char *v799;
  void *v800;
  char *v801;
  char *v802;
  void *v803;
  float *v804;
  float *v805;
  void *v806[2];
  __int128 v807;
  _OWORD *v808;
  _OWORD *v809;
  void *v810;
  _BYTE v811[84];
  __int128 v812;
  __int128 v813;
  __int128 v814;
  _BYTE v815[132];
  void *v816;
  void *v817;
  char *v818;
  char *v819;
  uint64_t v820;
  float64x2x2_t v821;
  float64x2x2_t v822;
  float64x2x2_t v823;
  float64x2x2_t v824;
  float64x2x2_t v825;
  float64x2x2_t v826;
  float32x4x3_t v827;
  float32x4x3_t v828;
  float32x4x3_t v829;
  float32x4x3_t v830;

  v10 = a2;
  v820 = *MEMORY[0x24BDAC8D0];
  v804 = 0;
  v803 = 0;
  v805 = 0;
  v12 = *a5;
  v11 = a5[1];
  v13 = (char *)v11 - (char *)*a5;
  v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 2);
  if (v11 != *a5)
  {
    if (v14 > 0x1555555555555555)
      goto LABEL_717;
    v15 = (float *)operator new((char *)v11 - (char *)*a5);
    v16 = (uint64_t)&v15[v13 >> 2];
    v803 = v15;
    v804 = v15;
    v805 = (float *)v16;
    v725 = a6;
    v17 = *(float *)(a6 + 40);
    v742 = v10;
    v736 = a5;
    if (v17 > 0.0)
      goto LABEL_4;
LABEL_34:
    if (&v803 == (void **)a5)
      goto LABEL_54;
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v15) >> 2) >= v14)
    {
      if (v11 == v12)
      {
        v39 = 0;
      }
      else
      {
        v39 = 0;
        do
        {
          v40 = (char *)v15 + v39;
          v41 = *(_QWORD *)((char *)v12 + v39);
          *((_DWORD *)v40 + 2) = *(unsigned int *)((char *)v12 + v39 + 8);
          *(_QWORD *)v40 = v41;
          v39 += 12;
        }
        while ((unsigned int *)((char *)v12 + v39) != v11);
      }
LABEL_53:
      v804 = (float *)((char *)v15 + v39);
      goto LABEL_54;
    }
    if (v15)
    {
      v804 = v15;
      operator delete(v15);
      v16 = 0;
      v804 = 0;
      v803 = 0;
      v805 = 0;
    }
    if (v14 <= 0x1555555555555555)
    {
      v34 = 0x5555555555555556 * (v16 >> 2);
      if (v34 <= v14)
        v34 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 2);
      v35 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 2) >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v34;
      if (v35 <= 0x1555555555555555)
      {
        v36 = (float *)operator new(12 * v35);
        v15 = v36;
        v803 = v36;
        v804 = v36;
        v805 = &v36[3 * v35];
        v37 = v36;
        if (v11 != v12)
        {
          v38 = 12 * ((v13 - 12) / 0xCuLL) + 12;
          memcpy(v36, v12, v38);
          v37 = (float *)((char *)v15 + v38);
        }
        v39 = (char *)v37 - (char *)v15;
        goto LABEL_53;
      }
    }
LABEL_717:
    sub_2394189F8();
  }
  v15 = 0;
  v16 = 0;
  v725 = a6;
  v17 = *(float *)(a6 + 40);
  v742 = a2;
  v736 = a5;
  if (v17 <= 0.0)
    goto LABEL_34;
LABEL_4:
  if (v11 != v12)
  {
    v18 = fmax(fmin((float)(v17* (float)((*(_DWORD *)(a3 + 204)+ *(_DWORD *)(a3 + 200)+ *((_DWORD *)a4 + 50)+ *((_DWORD *)a4 + 51)) >> 2)), 10.0), 2.0);
    v19 = (char *)v15;
    do
    {
      v22 = *v12;
      if (*(_QWORD *)(a1 + 32) <= v22
        || ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v22 >> 3) & 0x1FFFFFF8)) >> v22) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v23 = v12[1];
      if (*(_QWORD *)(v10 + 32) <= v23
        || ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v24 = (float *)(*(_QWORD *)(a1 + 48) + 24 * v22);
      v25 = (float *)(*(_QWORD *)(v10 + 48) + 24 * v23);
      if (vabds_f32(*v24, *v25) < v18 && vabds_f32(v24[1], v25[1]) < v18)
        goto LABEL_8;
      if ((unint64_t)v15 < v16)
      {
        v20 = *(_QWORD *)v12;
        *((_DWORD *)v15 + 2) = v12[2];
        *(_QWORD *)v15 = v20;
        v21 = v15 + 3;
      }
      else
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - v19) >> 2) + 1;
        if (v26 > 0x1555555555555555)
          sub_2394189F8();
        if (0x5555555555555556 * ((v16 - (uint64_t)v19) >> 2) > v26)
          v26 = 0x5555555555555556 * ((v16 - (uint64_t)v19) >> 2);
        if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v19) >> 2) >= 0xAAAAAAAAAAAAAAALL)
          v27 = 0x1555555555555555;
        else
          v27 = v26;
        if (v27)
        {
          if (v27 > 0x1555555555555555)
            sub_239418A80();
          v28 = (char *)operator new(12 * v27);
        }
        else
        {
          v28 = 0;
        }
        v29 = *(_QWORD *)v12;
        v30 = &v28[4 * (((char *)v15 - v19) >> 2)];
        *((_DWORD *)v30 + 2) = v12[2];
        *(_QWORD *)v30 = v29;
        if (v15 != (float *)v19)
        {
          v31 = &v28[4 * (((char *)v15 - v19) >> 2)];
          v10 = v742;
          do
          {
            v32 = *(_QWORD *)(v15 - 3);
            v15 -= 3;
            v33 = *((_DWORD *)v15 + 2);
            *(_QWORD *)(v31 - 12) = v32;
            v31 -= 12;
            *((_DWORD *)v31 + 2) = v33;
          }
          while (v15 != (float *)v19);
          v15 = (float *)v19;
          v19 = v31;
          v16 = (uint64_t)&v28[12 * v27];
          v21 = (float *)(v30 + 12);
          v803 = v31;
          v805 = (float *)v16;
          if (!v15)
            goto LABEL_7;
LABEL_32:
          operator delete(v15);
          goto LABEL_7;
        }
        v19 = &v28[4 * (((char *)v15 - v19) >> 2)];
        v10 = v742;
        v16 = (uint64_t)&v28[12 * v27];
        v21 = (float *)(v30 + 12);
        v803 = v30;
        v805 = (float *)v16;
        if (v15)
          goto LABEL_32;
      }
LABEL_7:
      v804 = v21;
      v15 = v21;
LABEL_8:
      v12 += 3;
    }
    while (v12 != v11);
  }
LABEL_54:
  v43 = a3;
  v42 = v725;
  if (*(_QWORD *)(v725 + 32))
  {
    sub_2394AB618((uint64_t)v815);
    v818 = 0;
    v817 = 0;
    v819 = 0;
    sub_2394AB6D4((uint64_t)v815, (_QWORD *)(a3 + 200), (_QWORD *)a4 + 25);
    *(_QWORD *)v811 = 0xA0000000ALL;
    *(_QWORD *)&v811[12] = 0x4000000042000000;
    *(_DWORD *)&v811[8] = 10;
    *(_DWORD *)&v811[20] = 0;
    *(_QWORD *)&v811[24] = 5;
    sub_2394AB6C8((uint64_t)v815, v811);
    sub_23941D390((_QWORD *)a1, 1, v780);
    sub_23941D390((_QWORD *)v10, 1, __p);
    v46 = *v736;
    v45 = v736[1];
    v47 = 0xAAAAAAAAAAAAAAABLL * (v45 - *v736);
    v48 = (char *)v817;
    if (0x6DB6DB6DB6DB6DB7 * ((v819 - (_BYTE *)v817) >> 2) < v47)
    {
      if (v47 > 0x924924924924924)
LABEL_709:
        sub_2394189F8();
      v49 = v818;
      v50 = (char *)operator new(0xAAAAAAAAAAAAAAB4 * (v45 - *v736));
      v51 = &v50[28 * ((v49 - v48) / 28)];
      v52 = v51;
      if (v49 != v48)
      {
        v53 = &v50[28 * ((v49 - v48) / 28)];
        do
        {
          v52 = v53 - 28;
          v44 = *(__n128 *)(v49 - 28);
          *((_OWORD *)v53 - 1) = *((_OWORD *)v49 - 1);
          *(__n128 *)(v53 - 28) = v44;
          v49 -= 28;
          v53 -= 28;
        }
        while (v49 != v48);
      }
      v817 = v52;
      v818 = v51;
      v819 = &v50[28 * v47];
      if (v48)
      {
        operator delete(v48);
        v46 = *v736;
        v45 = v736[1];
      }
    }
    for (; v46 != v45; v46 += 3)
    {
      v10 = v742;
      if (sub_2394AB700((uint64_t)v815, (float32x2_t *)v780[0] + 3 * *v46, (float *)(*(_QWORD *)__p + 24 * v46[1]), (float32x4_t *)v767))
      {
        *(_QWORD *)v811 = *(_QWORD *)v46;
        *(_DWORD *)&v811[8] = v46[2];
        *(_OWORD *)&v811[12] = *(_OWORD *)v767;
        v55 = v818;
        if (v818 < v819)
        {
          *(_OWORD *)v818 = *(_OWORD *)v811;
          v44 = *(__n128 *)&v811[12];
          *(_OWORD *)(v55 + 12) = *(_OWORD *)&v811[12];
          v54 = v55 + 28;
        }
        else
        {
          v56 = (char *)v817;
          v57 = 0x6DB6DB6DB6DB6DB7 * ((v818 - (_BYTE *)v817) >> 2);
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) > 0x924924924924924)
            goto LABEL_709;
          if (0xDB6DB6DB6DB6DB6ELL * ((v819 - (_BYTE *)v817) >> 2) > v58)
            v58 = 0xDB6DB6DB6DB6DB6ELL * ((v819 - (_BYTE *)v817) >> 2);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v819 - (_BYTE *)v817) >> 2)) >= 0x492492492492492)
            v59 = 0x924924924924924;
          else
            v59 = v58;
          if (v59)
          {
            if (v59 > 0x924924924924924)
              sub_239418A80();
            v60 = (char *)operator new(28 * v59);
          }
          else
          {
            v60 = 0;
          }
          v61 = &v60[28 * v57];
          *(_OWORD *)v61 = *(_OWORD *)v811;
          v44 = *(__n128 *)&v811[12];
          *(_OWORD *)(v61 + 12) = *(_OWORD *)&v811[12];
          v62 = v61;
          if (v55 != v56)
          {
            do
            {
              v44 = *(__n128 *)(v55 - 28);
              *((_OWORD *)v62 - 1) = *((_OWORD *)v55 - 1);
              *(__n128 *)(v62 - 28) = v44;
              v62 -= 28;
              v55 -= 28;
            }
            while (v55 != v56);
            v55 = (char *)v817;
          }
          v54 = v61 + 28;
          v817 = v62;
          v818 = v61 + 28;
          v819 = &v60[28 * v59];
          if (v55)
            operator delete(v55);
          v10 = v742;
        }
        v818 = v54;
      }
    }
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    v42 = v725;
    if (v780[0])
    {
      v780[1] = v780[0];
      operator delete(v780[0]);
    }
    memset(v811, 0, 24);
    v63 = sub_2394AC144(v815, (uint64_t)v811, v44);
    v64 = *(void **)v811;
    v43 = a3;
    if (!v63)
      goto LABEL_127;
    v65 = *(_QWORD *)(v725 + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v811[8] - *(_QWORD *)v811) >> 3) > v65)
      *(_QWORD *)&v811[8] = *(_QWORD *)v811 + 24 * v65;
    *(_OWORD *)v780 = xmmword_239EC6780;
    v66 = (float *)v817;
    v67 = (float *)v818;
    if (v817 == v818)
    {
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v780[1] = 0;
      v780[0] = 0;
      *(_QWORD *)&v781 = 0;
      v71 = (float *)v803;
      if (!v803)
        goto LABEL_126;
    }
    else
    {
      do
      {
        while (1)
        {
          v72 = *(_QWORD *)v811;
          v73 = *(_QWORD *)&v811[8];
          if (*(_QWORD *)v811 == *(_QWORD *)&v811[8])
            break;
          while (!sub_2394AC384((uint64_t)v815, v66 + 3, (float *)(v72 + 8), (float *)v780))
          {
            v72 += 24;
            if (v72 == v73)
            {
              v67 = (float *)v818;
              goto LABEL_100;
            }
          }
          v66 += 7;
          v67 = (float *)v818;
          v10 = v742;
          if (v66 == (float *)v818)
            goto LABEL_104;
        }
LABEL_100:
        v74 = v66;
        if (v66 + 7 != v67)
        {
          v75 = v66;
          v74 = v66;
          do
          {
            v76 = *((_DWORD *)v74 + 7);
            v74 += 7;
            v77 = *((_DWORD *)v75 + 8);
            *(_DWORD *)v75 = v76;
            *((_DWORD *)v75 + 1) = v77;
            v75[2] = v75[9];
            *(_OWORD *)(v75 + 3) = *(_OWORD *)(v75 + 10);
            v78 = v75 + 14;
            v75 = v74;
          }
          while (v78 != v67);
        }
        v818 = (char *)v74;
        v67 = v74;
        v10 = v742;
      }
      while (v66 != v74);
LABEL_104:
      v79 = (float *)v817;
      v780[1] = 0;
      v780[0] = 0;
      *(_QWORD *)&v781 = 0;
      if (v67 == v817)
      {
        v68 = 0;
        v69 = 0;
        v70 = 0;
        v71 = (float *)v803;
        if (!v803)
          goto LABEL_126;
      }
      else
      {
        v80 = 0x6DB6DB6DB6DB6DB7 * (((char *)v67 - (_BYTE *)v817) >> 2);
        if (v80 > 0x1555555555555555)
          sub_2394189F8();
        v70 = (char *)operator new(0x2492492492492494 * (((char *)v67 - (_BYTE *)v817) >> 2));
        v68 = &v70[12 * v80];
        v69 = v70;
        do
        {
          while (v69 < v68)
          {
            v81 = *(_QWORD *)v79;
            *((float *)v69 + 2) = v79[2];
            *(_QWORD *)v69 = v81;
            v69 += 12;
            v79 += 7;
            if (v79 == v67)
              goto LABEL_124;
          }
          v82 = 0xAAAAAAAAAAAAAAABLL * ((v69 - v70) >> 2) + 1;
          if (v82 > 0x1555555555555555)
          {
            *(_QWORD *)&v781 = v68;
            v780[0] = v70;
            v780[1] = v69;
            sub_2394189F8();
          }
          if (0x5555555555555556 * ((v68 - v70) >> 2) > v82)
            v82 = 0x5555555555555556 * ((v68 - v70) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v68 - v70) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v83 = 0x1555555555555555;
          else
            v83 = v82;
          if (v83)
          {
            if (v83 > 0x1555555555555555)
            {
              *(_QWORD *)&v781 = v68;
              v780[0] = v70;
              sub_239418A80();
            }
            v84 = (char *)operator new(12 * v83);
          }
          else
          {
            v84 = 0;
          }
          v85 = &v84[4 * ((v69 - v70) >> 2)];
          v86 = *(_QWORD *)v79;
          v68 = &v84[12 * v83];
          *((float *)v85 + 2) = v79[2];
          *(_QWORD *)v85 = v86;
          v87 = v85 + 12;
          if (v69 == v70)
            goto LABEL_122;
          do
          {
            v88 = *(_QWORD *)(v69 - 12);
            v69 -= 12;
            v89 = *((_DWORD *)v69 + 2);
            *(_QWORD *)(v85 - 12) = v88;
            v85 -= 12;
            *((_DWORD *)v85 + 2) = v89;
          }
          while (v69 != v70);
          if (v70)
LABEL_122:
            operator delete(v70);
          v70 = v85;
          v69 = v87;
          v10 = v742;
          v79 += 7;
        }
        while (v79 != v67);
LABEL_124:
        *(_QWORD *)&v781 = v68;
        v780[0] = v70;
        v780[1] = v69;
        v43 = a3;
        v71 = (float *)v803;
        if (!v803)
          goto LABEL_126;
      }
    }
    v804 = v71;
    operator delete(v71);
    v70 = (char *)v780[0];
    v69 = (char *)v780[1];
    v68 = (char *)v781;
LABEL_126:
    v803 = v70;
    v804 = (float *)v69;
    v805 = (float *)v68;
    v64 = *(void **)v811;
    v42 = v725;
LABEL_127:
    if (v64)
    {
      *(_QWORD *)&v811[8] = v64;
      operator delete(v64);
    }
    if (v817)
    {
      v818 = (char *)v817;
      operator delete(v817);
    }
    v90 = v816;
    if (v816)
    {
      do
      {
        v91 = (_QWORD *)*v90;
        operator delete(v90);
        v90 = v91;
      }
      while (v91);
    }
    v92 = *(void **)&v815[120];
    *(_QWORD *)&v815[120] = 0;
    if (v92)
      operator delete(v92);
  }
  if (*(_BYTE *)(v42 + 26) && *(_DWORD *)(v43 + 196) == *((_DWORD *)a4 + 49))
  {
    v93 = *(double *)(v42 + 56);
    v94 = *(double *)v43;
    v95 = *(double *)a4;
    sub_23941D390((_QWORD *)a1, 1, v815);
    sub_23941D390((_QWORD *)v10, 1, v811);
    v99 = v804;
    v100 = v803;
    v101 = *(char **)v811;
    if (v804 != v803)
    {
      v102 = 0;
      v103 = v93 / ((v94 + v95) * 0.5);
      v97.f64[0] = *(float64_t *)(v43 + 80);
      v104 = *(float64x2_t *)(v43 + 64);
      _D7 = *(double *)(v43 + 112);
      _Q19 = *(float64x2_t *)(v43 + 96);
      _D16 = *(double *)(v43 + 144);
      _Q17 = *(float64x2_t *)(v43 + 128);
      v98.f64[0] = *((float64_t *)a4 + 10);
      v109 = (float64x2_t)a4[4];
      _D20 = *((double *)a4 + 14);
      _Q26 = (float64x2_t)a4[6];
      _D21 = *((double *)a4 + 18);
      _Q25 = (float64x2_t)a4[8];
      _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v109, v104.f64[0]), _Q26, _Q19.f64[0]), _Q25, _Q17.f64[0]);
      v115 = vmlad_n_f64(vmlad_n_f64(v98.f64[0] * v104.f64[0], _D20, _Q19.f64[0]), _D21, _Q17.f64[0]);
      _Q4 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v109, v104, 1), _Q26, _Q19, 1), _Q25, _Q17, 1);
      v96.f64[0] = *(float64_t *)(v43 + 176);
      v117 = vsubq_f64((float64x2_t)0, v96);
      _Q5 = vsubq_f64((float64x2_t)0, *(float64x2_t *)(v43 + 160));
      v119.f64[0] = v97.f64[0];
      v119.f64[1] = _D7;
      v120 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v104, (int64x2_t)_Q19), _Q5.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v104, (int64x2_t)_Q19), _Q5, 1), v119, v117.f64[0]);
      _Q28 = vmulq_f64(_Q17, _Q5);
      _Q5.f64[0] = _Q5.f64[1];
      __asm { FMLA            D28, D5, V17.D[1] }
      _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], _D16, v117.f64[0]);
      v117.f64[0] = *((float64_t *)a4 + 22);
      *(_QWORD *)&v117.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v117);
      _Q5 = vsubq_f64((float64x2_t)0, *((float64x2_t *)a4 + 10));
      v124.f64[0] = v98.f64[0];
      v124.f64[1] = _D20;
      v125 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v109, (int64x2_t)_Q26), _Q5.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v109, (int64x2_t)_Q26), _Q5, 1), v124, v117.f64[0]);
      _Q31 = vmulq_f64(_Q25, _Q5);
      _Q5.f64[0] = _Q5.f64[1];
      __asm { FMLA            D31, D5, V25.D[1] }
      _Q31.f64[0] = vmlad_n_f64(_Q31.f64[0], _D21, v117.f64[0]);
      _Q1 = vsubq_f64(v120, v125);
      *(_QWORD *)&_Q5.f64[0] = *(_OWORD *)&vsubq_f64(_Q28, _Q31);
      _Q27 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v109, _Q1.f64[0]), _Q26, _Q1, 1), _Q25, _Q5.f64[0]);
      __asm { FMLA            D28, D20, V1.D[1] }
      _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], _D21, _Q5.f64[0]);
      _Q1.f64[0] = -_Q27.f64[1];
      _Q5.f64[0] = 0.0;
      _Q5.f64[1] = -_Q28.f64[0];
      _Q9 = (float64x2_t)vzip1q_s64((int64x2_t)_Q1, (int64x2_t)_Q27);
      v130 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q2.f64[0]), (float64x2_t)*(unint64_t *)&_Q28.f64[0], _Q2, 1), _Q9, v115);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FMLS            D11, D2, V27.D[0] }
      v737 = _D11 + v115 * 0.0;
      v132 = vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q4.f64[0]), (float64x2_t)*(unint64_t *)&_Q28.f64[0], _Q4, 1);
      _Q4.f64[0] = _Q4.f64[1];
      __asm
      {
        FMLS            D2, D4, V27.D[0]
        FMLA            D4, D20, V19.D[1]
        FMLA            D4, D21, V17.D[1]
      }
      v133 = vmlaq_n_f64(v132, _Q9, _Q4.f64[0]);
      v727 = _Q2.f64[0] + _Q4.f64[0] * 0.0;
      _Q2.f64[0] = vmulq_f64(v98, v97).f64[0];
      _Q29 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v109, v97.f64[0]), _Q26, _D7), _Q25, _D16);
      v135 = _Q2.f64[0] + _D20 * _D7 + _D21 * _D16;
      v136 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q29.f64[0]), (float64x2_t)*(unint64_t *)&_Q28.f64[0], _Q29, 1), _Q9, v135);
      _Q29.f64[0] = _Q29.f64[1];
      __asm { FMLS            D9, D29, V27.D[0] }
      v716 = _Q9.f64[0] + v135 * 0.0;
      __asm { FMLA            D11, D7, V26.D[1] }
      v138 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v104, v109.f64[0]), _Q19, _Q26.f64[0]), _Q17, _Q25.f64[0]);
      _Q29.f64[0] = vmlad_n_f64(vmlad_n_f64(v97.f64[0] * v109.f64[0], _D7, _Q26.f64[0]), _D16, _Q25.f64[0]);
      v139 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v104, v109, 1), _Q19, _Q26, 1), _Q17, _Q25, 1);
      __asm { FMLA            D11, D16, V25.D[1] }
      v141 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v104, v98.f64[0]), _Q19, _D20), _Q17, _D21);
      _Q19.f64[0] = *(float64_t *)(v43 + 8);
      _Q2.f64[0] = _Q2.f64[0] + _D7 * _D20 + _D16 * _D21;
      v142 = -*(double *)(v43 + 16) / *(double *)v43;
      v143 = 1.0 / *(double *)v43;
      v144 = 1.0 / _Q19.f64[0];
      v145 = -*(double *)(v43 + 24) / _Q19.f64[0];
      v146 = vmlsq_lane_f64(vmlaq_n_f64(vmulq_f64(v138, (float64x2_t)0), v139, _Q28.f64[0]), v141, _Q27.f64[1], 0);
      v147 = vmlsq_lane_f64(vmulq_laneq_f64(v138, _Q27, 1), v139, _Q27.f64[0], 0);
      v148 = *(_QWORD *)v815;
      __asm { FMLS            D22, D2, V27.D[1] }
      v150 = vmlaq_n_f64(vmlaq_f64(vmulq_n_f64(v138, -_Q28.f64[0]), (float64x2_t)0, v139), v141, _Q27.f64[0]);
      v151 = vmlad_n_f64(_D11 * 0.0 - _Q28.f64[0] * _Q29.f64[0], _Q2.f64[0], _Q27.f64[0]);
      v152 = vmlaq_f64(v147, (float64x2_t)0, v141);
      __asm { FMLS            D24, D11, V27.D[0] }
      v154 = _D24 + _Q2.f64[0] * 0.0;
      *(_QWORD *)&v155 = vextq_s8((int8x16_t)v146, (int8x16_t)v146, 8uLL).u64[0];
      *(_QWORD *)&v156 = vextq_s8((int8x16_t)v150, (int8x16_t)v150, 8uLL).u64[0];
      *(_QWORD *)&v157 = vextq_s8((int8x16_t)v152, (int8x16_t)v152, 8uLL).u64[0];
      *(_QWORD *)&v710 = vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL).u64[0];
      *(_QWORD *)&v158 = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
      *(_QWORD *)&v159 = vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL).u64[0];
      while (1)
      {
        v161 = (float *)&v100[12 * v102];
        v162 = 24 * *(unsigned int *)v161;
        v163 = v142 + *(float *)(v148 + v162) * v143;
        v164 = v145 + *(float *)(v148 + v162 + 4) * v144;
        v165 = (float *)&v101[v162];
        v166 = v142 + *v165 * v143;
        v167 = v145 + v165[1] * v144;
        _Q9 = vaddq_f64(v136, vmlaq_n_f64(vmulq_n_f64(v130, v163), v133, v164));
        _Q12 = vaddq_f64(v152, vmlaq_n_f64(vmulq_n_f64(v146, v166), v150, v167));
        v170 = v154
             + v152.f64[0] * v163
             + v164 * v157
             + (_D22 + v146.f64[0] * v163 + v164 * v155) * v166
             + (v151 + v150.f64[0] * v163 + v164 * v156) * v167;
        v171 = v170 * v170;
        _D14 = _Q9.f64[1];
        __asm { FMLA            D6, D14, V9.D[1] }
        _D2 = _Q12.f64[1];
        __asm { FMLA            D28, D2, V12.D[1] }
        if (v171 / (_D6 + _D28) >= v103)
          break;
        __asm
        {
          FMLA            D15, D2, V12.D[1]
          FMLA            D13, D14, V9.D[1]
        }
        if ((v716
            + v136.f64[0] * v166
            + v167 * v159
            + (v737 + v130.f64[0] * v166 + v167 * v710) * v163
            + (v727 + v133.f64[0] * v166 + v167 * v158) * v164)
           * (v716
            + v136.f64[0] * v166
            + v167 * v159
            + (v737 + v130.f64[0] * v166 + v167 * v710) * v163
            + (v727 + v133.f64[0] * v166 + v167 * v158) * v164)
           / (_D15 + _D13) >= v103)
        {
          v180 = v161 + 3;
          if (v161 + 3 == v99)
          {
LABEL_139:
            v160 = (float *)&v100[12 * v102];
            goto LABEL_140;
          }
          v181 = (char *)v99 - v100 - 12 * v102 - 24;
          if (v181 >= 0x54)
          {
            v189 = v181 / 0xC + 1;
            v190 = 3 * (v189 & 0x3FFFFFFFFFFFFFF8);
            v160 = &v161[v190];
            v180 = (float *)((char *)v180 + v190 * 4);
            v191 = v189 & 0x3FFFFFFFFFFFFFF8;
            do
            {
              v192 = v161 + 3;
              v193 = v161 + 15;
              v828 = vld3q_f32(v192);
              v830 = vld3q_f32(v193);
              v194 = v161 + 24;
              vst3q_f32(v161, v828);
              v195 = v161 + 12;
              vst3q_f32(v195, v830);
              v161 = v194;
              v191 -= 8;
            }
            while (v191);
            if (v189 == (v189 & 0x3FFFFFFFFFFFFFF8))
              goto LABEL_140;
          }
          else
          {
            v160 = (float *)&v100[12 * v102];
          }
          do
          {
            *v160 = *v180;
            v160[1] = v180[1];
            v160[2] = v180[2];
            v160 += 3;
            v180 += 3;
          }
          while (v180 != v99);
LABEL_140:
          v804 = v160;
          v99 = v160;
          if (v102 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - v100) >> 2))
            goto LABEL_161;
        }
        else if (++v102 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - v100) >> 2))
        {
          goto LABEL_161;
        }
      }
      v178 = v161 + 3;
      if (v161 + 3 == v99)
        goto LABEL_139;
      v179 = (char *)v99 - v100 - 12 * v102 - 24;
      if (v179 >= 0x54)
      {
        v182 = v179 / 0xC + 1;
        v183 = 3 * (v182 & 0x3FFFFFFFFFFFFFF8);
        v160 = &v161[v183];
        v178 = (float *)((char *)v178 + v183 * 4);
        v184 = v182 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          v185 = v161 + 3;
          v186 = v161 + 15;
          v827 = vld3q_f32(v185);
          v829 = vld3q_f32(v186);
          v187 = v161 + 24;
          vst3q_f32(v161, v827);
          v188 = v161 + 12;
          vst3q_f32(v188, v829);
          v161 = v187;
          v184 -= 8;
        }
        while (v184);
        if (v182 == (v182 & 0x3FFFFFFFFFFFFFF8))
          goto LABEL_140;
      }
      else
      {
        v160 = (float *)&v100[12 * v102];
      }
      do
      {
        *v160 = *v178;
        v160[1] = v178[1];
        v160[2] = v178[2];
        v160 += 3;
        v178 += 3;
      }
      while (v178 != v99);
      goto LABEL_140;
    }
LABEL_161:
    if (v101)
    {
      *(_QWORD *)&v811[8] = v101;
      operator delete(v101);
    }
    if (*(_QWORD *)v815)
    {
      *(_QWORD *)&v815[8] = *(_QWORD *)v815;
      operator delete(*(void **)v815);
    }
  }
  v196 = v804;
  v197 = (char *)v804 - (_BYTE *)v803;
  if (v804 == v803)
  {
    v249 = 0;
    if (v804)
      goto LABEL_695;
    return v249;
  }
  v801 = 0;
  v800 = 0;
  v198 = v197 / 12;
  v802 = 0;
  v798 = 0;
  v797 = 0;
  v799 = 0;
  v705 = v197 + 11;
  if ((unint64_t)(v197 + 11) > 0x16)
  {
    if (v198 >> 60)
      sub_2394189F8();
    v800 = operator new(16 * v198);
    v801 = (char *)v800;
    v802 = (char *)v800 + 16 * v198;
    v797 = operator new(16 * v198);
    v798 = (char *)v797;
    v799 = (char *)v797 + 16 * v198;
  }
  v717 = v197;
  v199 = 0;
  v711 = v198 - 1;
  v708 = v197 / 12;
  if (v198 <= 1)
    v200 = 1;
  else
    v200 = v197 / 12;
  v738 = v200;
  do
  {
    v202 = (unsigned int *)((char *)v803 + 12 * v199);
    v203 = *v202;
    if (*(_QWORD *)(a1 + 32) <= v203
      || ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v203 >> 3) & 0x1FFFFFF8)) >> v203) & 1) == 0)
    {
      sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v204 = v202[1];
    if (*(_QWORD *)(v10 + 32) <= v204
      || ((*(_QWORD *)(*(_QWORD *)(v10 + 24) + ((v204 >> 3) & 0x1FFFFFF8)) >> v204) & 1) == 0)
    {
      sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v205 = *(_QWORD *)(v10 + 48);
    v206 = vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 48) + 24 * v203));
    v207 = v801;
    if (v801 < v802)
    {
      *(float64x2_t *)v801 = v206;
      v208 = v207 + 16;
      goto LABEL_197;
    }
    v209 = (char *)v800;
    v210 = (v801 - (_BYTE *)v800) >> 4;
    v211 = v210 + 1;
    if ((unint64_t)(v210 + 1) >> 60)
      sub_2394189F8();
    v212 = v802 - (_BYTE *)v800;
    if ((v802 - (_BYTE *)v800) >> 3 > v211)
      v211 = v212 >> 3;
    if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF0)
      v213 = 0xFFFFFFFFFFFFFFFLL;
    else
      v213 = v211;
    if (v213)
    {
      v728 = v206;
      if (v213 >> 60)
        sub_239418A80();
      v214 = (char *)operator new(16 * v213);
      v215 = (float64x2_t *)&v214[16 * v210];
      *v215 = v728;
      v208 = (char *)&v215[1];
      if (v207 == v209)
        goto LABEL_194;
      do
      {
LABEL_192:
        v215[-1] = *((float64x2_t *)v207 - 1);
        --v215;
        v207 -= 16;
      }
      while (v207 != v209);
      v207 = (char *)v800;
      goto LABEL_194;
    }
    v214 = 0;
    v215 = (float64x2_t *)(16 * v210);
    v216 = (float64x2_t *)(16 * v210);
    *v216 = v206;
    v208 = (char *)&v216[1];
    if (v207 != v209)
      goto LABEL_192;
LABEL_194:
    v800 = v215;
    v801 = v208;
    v802 = &v214[16 * v213];
    if (v207)
      operator delete(v207);
    v10 = v742;
LABEL_197:
    v801 = v208;
    v217 = vcvtq_f64_f32(*(float32x2_t *)(v205 + 24 * v204));
    v218 = v798;
    if (v798 < v799)
    {
      *(float64x2_t *)v798 = v217;
      v201 = v218 + 16;
      goto LABEL_174;
    }
    v219 = (char *)v797;
    v220 = (v798 - (_BYTE *)v797) >> 4;
    v221 = v220 + 1;
    if ((unint64_t)(v220 + 1) >> 60)
      sub_2394189F8();
    v222 = v799 - (_BYTE *)v797;
    if ((v799 - (_BYTE *)v797) >> 3 > v221)
      v221 = v222 >> 3;
    if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF0)
      v223 = 0xFFFFFFFFFFFFFFFLL;
    else
      v223 = v221;
    if (v223)
    {
      v729 = v217;
      if (v223 >> 60)
        sub_239418A80();
      v224 = (char *)operator new(16 * v223);
      v225 = (float64x2_t *)&v224[16 * v220];
      *v225 = v729;
      v201 = (char *)&v225[1];
      if (v218 == v219)
        goto LABEL_211;
    }
    else
    {
      v224 = 0;
      v225 = (float64x2_t *)(16 * v220);
      v226 = (float64x2_t *)(16 * v220);
      *v226 = v217;
      v201 = (char *)&v226[1];
      if (v218 == v219)
        goto LABEL_211;
    }
    do
    {
      v225[-1] = *((float64x2_t *)v218 - 1);
      --v225;
      v218 -= 16;
    }
    while (v218 != v219);
    v218 = (char *)v797;
LABEL_211:
    v797 = v225;
    v798 = v201;
    v799 = &v224[16 * v223];
    if (v218)
      operator delete(v218);
LABEL_174:
    v798 = v201;
    ++v199;
  }
  while (v199 != v738);
  v227 = (char *)v800;
  v229 = *(double *)a3;
  v228 = *(double *)(a3 + 8);
  v231 = *(double *)(a3 + 16);
  v230 = *(double *)(a3 + 24);
  memset(v815, 0, 24);
  v232 = v801 - (_BYTE *)v800;
  if (v801 == v800)
  {
    v235 = 0;
    v248 = 0;
    v240 = 0;
    v233 = v725;
    v234 = v708;
  }
  else
  {
    v233 = v725;
    v234 = v708;
    if (v232 < 0)
      sub_2394189F8();
    v235 = (double *)operator new(v801 - (_BYTE *)v800);
    v236 = 1.0 / v229;
    v237 = 1.0 / v228;
    v238 = -v231 / v229;
    v239 = v232 >> 4;
    v240 = &v235[2 * (v232 >> 4)];
    v241 = -v230 / v228;
    if ((unint64_t)v232 < 0x100)
    {
LABEL_216:
      v242 = 0;
      goto LABEL_217;
    }
    v242 = 0;
    v368 = 2 * (v239 - 1);
    if (&v235[v368] < v235 || &v235[v368 + 1] < v235 + 1 || (unint64_t)(v239 - 1) >> 60)
      goto LABEL_217;
    if (v235 < (double *)&v227[v232 & 0xFFFFFFFFFFFFFFF0] && v227 < (char *)v235 + (v232 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_216;
    v369 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v236, 0);
    v370 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v238, 0);
    v371 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v237, 0);
    v242 = v239 & 0xFFFFFFFFFFFFFFFCLL;
    v372 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v241, 0);
    v373 = v235 + 4;
    v374 = (const double *)(v227 + 32);
    v375 = v239 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v376 = v374 - 4;
      v821 = vld2q_f64(v376);
      v823 = vld2q_f64(v374);
      v825.val[0] = vmlaq_f64(v370, v369, v821.val[0]);
      v825.val[1] = vmlaq_f64(v372, v371, v821.val[1]);
      v821.val[0] = vmlaq_f64(v370, v369, v823.val[0]);
      v377 = v373 - 4;
      vst2q_f64(v377, v825);
      v821.val[1] = vmlaq_f64(v372, v371, v823.val[1]);
      vst2q_f64(v373, v821);
      v373 += 8;
      v374 += 8;
      v375 -= 4;
    }
    while (v375);
    if (v239 != v242)
    {
LABEL_217:
      v243 = v239 - v242;
      v244 = (16 * v242) | 8;
      v245 = (double *)((char *)v235 + v244);
      v246 = (double *)&v227[v244];
      do
      {
        *(v245 - 1) = v238 + *(v246 - 1) * v236;
        v247 = *v246;
        v246 += 2;
        *v245 = v241 + v247 * v237;
        v245 += 2;
        --v243;
      }
      while (v243);
    }
    v248 = (char *)v235 + v232;
  }
  v794 = v235;
  v795 = v248;
  v796 = v240;
  v251 = *(double *)a4;
  v250 = *((double *)a4 + 1);
  v253 = *((double *)a4 + 2);
  v252 = *((double *)a4 + 3);
  v254 = (char *)v797;
  memset(v815, 0, 24);
  v255 = v201 - (_BYTE *)v797;
  if (v201 == v797)
  {
    v257 = 0;
    v270 = 0;
    v262 = 0;
    v256 = a7;
  }
  else
  {
    v256 = a7;
    if (v255 < 0)
      sub_2394189F8();
    v257 = (double *)operator new(v255);
    v258 = 1.0 / v251;
    v259 = 1.0 / v250;
    v260 = -v253 / v251;
    v261 = v255 >> 4;
    v262 = &v257[2 * (v255 >> 4)];
    v263 = -v252 / v250;
    if ((unint64_t)v255 < 0x100)
    {
LABEL_226:
      v264 = 0;
      goto LABEL_227;
    }
    v264 = 0;
    v378 = 2 * (v261 - 1);
    if (&v257[v378] < v257 || &v257[v378 + 1] < v257 + 1 || (unint64_t)(v261 - 1) >> 60)
      goto LABEL_227;
    if (v257 < (double *)&v254[v255 & 0xFFFFFFFFFFFFFFF0] && v254 < (char *)v257 + (v255 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_226;
    v379 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v258, 0);
    v380 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v260, 0);
    v381 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v259, 0);
    v264 = v261 & 0xFFFFFFFFFFFFFFFCLL;
    v382 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v263, 0);
    v383 = v257 + 4;
    v384 = (const double *)(v254 + 32);
    v385 = v261 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v386 = v384 - 4;
      v822 = vld2q_f64(v386);
      v824 = vld2q_f64(v384);
      v826.val[0] = vmlaq_f64(v380, v379, v822.val[0]);
      v826.val[1] = vmlaq_f64(v382, v381, v822.val[1]);
      v822.val[0] = vmlaq_f64(v380, v379, v824.val[0]);
      v387 = v383 - 4;
      vst2q_f64(v387, v826);
      v822.val[1] = vmlaq_f64(v382, v381, v824.val[1]);
      vst2q_f64(v383, v822);
      v383 += 8;
      v384 += 8;
      v385 -= 4;
    }
    while (v385);
    if (v261 != v264)
    {
LABEL_227:
      v265 = v261 - v264;
      v266 = (16 * v264) | 8;
      v267 = (double *)((char *)v257 + v266);
      v268 = (double *)&v254[v266];
      do
      {
        *(v267 - 1) = v260 + *(v268 - 1) * v258;
        v269 = *v268;
        v268 += 2;
        *v267 = v263 + v269 * v259;
        v267 += 2;
        --v265;
      }
      while (v265);
    }
    v270 = (char *)v257 + v255;
  }
  v791 = v257;
  v792 = v270;
  v793 = v262;
  v789 = 0;
  v788 = 0;
  v790 = 0;
  if (v717 < 0)
    sub_2394189F8();
  v271 = (v711 >> 6) + 1;
  v788 = operator new(8 * v271);
  v789 = 0;
  v790 = v271;
  sub_23942D8C8(&v788, v234, 0);
  v784 = xmmword_239EC6980;
  v785 = unk_239EC6990;
  v786 = xmmword_239EC69A0;
  v787 = unk_239EC69B0;
  *(_OWORD *)v780 = xmmword_239EC6940;
  v781 = *(_OWORD *)algn_239EC6950;
  v782 = xmmword_239EC6960;
  v783 = unk_239EC6970;
  memset(&v811[40], 0, 24);
  memset(&v811[8], 0, 24);
  *(_QWORD *)v811 = 0x3FF0000000000000;
  *(_QWORD *)&v811[32] = 0x3FF0000000000000;
  *(_QWORD *)&v811[64] = 0x3FF0000000000000;
  *(_OWORD *)v750 = xmmword_239EC6790;
  *(_OWORD *)&v751[24] = xmmword_239EC67A0;
  *(_OWORD *)&v751[8] = xmmword_239EC67B0;
  *(_QWORD *)v751 = (unint64_t)(*(double *)(v233 + 8) * 15.0);
  v272 = sub_23943DB4C(&v800, &v797, (uint64_t)v811, (uint64_t)&v788, (double *)v750);
  if ((v272 & 1) != 0)
  {
    memset(&__p[8], 0, 24);
    *(_QWORD *)&v773 = 0x3FF0000000000000;
    v273 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)__p = *(_QWORD *)a3;
    v771 = v273;
    v772 = *(_OWORD *)(a3 + 16);
    memset(&v767[8], 0, 24);
    v768 = 0x3FF0000000000000;
    v274 = *((_QWORD *)a4 + 1);
    *(_QWORD *)v767 = *(_QWORD *)a4;
    *(_OWORD *)&v767[32] = v274;
    *(_OWORD *)&v767[48] = a4[1];
    sub_23943DCFC((__int128 *)v811, (__int128 *)__p, &v794, &v791, (uint64_t)&v788, (uint64_t)v815);
    v784 = *(_OWORD *)&v815[64];
    v785 = *(_OWORD *)&v815[80];
    v786 = *(_OWORD *)&v815[96];
    v787 = *(_OWORD *)&v815[112];
    *(_OWORD *)v780 = *(_OWORD *)v815;
    v781 = *(_OWORD *)&v815[16];
    v782 = *(_OWORD *)&v815[32];
    v783 = *(_OWORD *)&v815[48];
  }
  v777 = operator new(8 * v271);
  v778 = 0;
  v779 = (v711 >> 6) + 1;
  sub_23942D8C8(&v777, v234, 0);
  v773 = xmmword_239EC6980;
  v774 = unk_239EC6990;
  v775 = xmmword_239EC69A0;
  v776 = unk_239EC69B0;
  *(_OWORD *)__p = xmmword_239EC6940;
  *(_OWORD *)&__p[16] = *(_OWORD *)algn_239EC6950;
  v771 = xmmword_239EC6960;
  v772 = unk_239EC6970;
  if (*(_BYTE *)(v233 + 25))
  {
    v768 = 4;
    v769 = 0x3FF6A09E667F3BCDLL;
    *(_OWORD *)v767 = xmmword_239EC67C0;
    *(_OWORD *)&v767[40] = xmmword_239EC67D0;
    *(_OWORD *)&v767[24] = xmmword_239EC67E0;
    v275 = *(double *)v233;
    v276 = (unint64_t)(*(double *)(v233 + 8) * 10.0);
    *(_QWORD *)&v767[56] = 0x3FE0000000000000;
    *(_QWORD *)&v767[16] = v276;
    v277 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v755 = *(_OWORD *)a3;
    v756 = v277;
    v278 = *(_BYTE *)(a3 + 32);
    v279 = *(unsigned int *)(a3 + 56);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v279 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v280 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v696 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v696, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((_DWORD)v279)
      memcpy(memptr, *(const void **)(a3 + 40), 8 * v279);
    v281 = *(unsigned int *)(a3 + 56);
    v282 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)&v815[68] = *(_OWORD *)(a3 + 128);
    *(_OWORD *)&v815[84] = v282;
    v283 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)&v815[100] = *(_OWORD *)(a3 + 160);
    *(_OWORD *)&v815[116] = v283;
    v284 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)&v815[4] = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v815[20] = v284;
    v285 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)&v815[36] = *(_OWORD *)(a3 + 96);
    *(_OWORD *)&v815[52] = v285;
    v286 = *a4;
    v807 = a4[1];
    *(_OWORD *)v806 = v286;
    v287 = *((_BYTE *)a4 + 32);
    v288 = *((unsigned int *)a4 + 14);
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v288 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    __src = v280;
    v289 = memptr;
    if (!memptr)
    {
      v697 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v698 = std::bad_alloc::bad_alloc(v697);
      __cxa_throw(v698, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v290 = v272;
    if ((_DWORD)v288)
      memcpy(memptr, *((const void **)a4 + 5), 8 * v288);
    v291 = a4[9];
    *(_OWORD *)&v811[68] = a4[8];
    v812 = v291;
    v292 = a4[11];
    v813 = a4[10];
    v814 = v292;
    v293 = a4[5];
    *(_OWORD *)&v811[4] = a4[4];
    *(_OWORD *)&v811[20] = v293;
    v294 = a4[7];
    *(_OWORD *)&v811[36] = a4[6];
    v295 = *((unsigned int *)a4 + 14);
    *(_OWORD *)&v811[52] = v294;
    v296 = operator new(0x180uLL);
    *(_QWORD *)&v745.f64[0] = v296;
    *(_QWORD *)&v745.f64[1] = v296;
    *(_QWORD *)&v746 = v296 + 24;
    v760 = v296;
    v757 = v296;
    memptr = &v746;
    v764 = &v757;
    v765 = (char *)&v760;
    v766 = 0;
    v297 = v756;
    *v296 = *(_OWORD *)v755;
    v296[1] = v297;
    *((_BYTE *)v296 + 32) = v278;
    v298 = (8 * v281 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)v296 + 5) = 0;
    *((_QWORD *)v296 + 6) = v298 >> 3;
    __dst[0] = 0;
    malloc_type_posix_memalign(__dst, 0x20uLL, v298, 0x100BBD03uLL);
    v299 = __dst[0];
    *((void **)v296 + 5) = __dst[0];
    if (!v299)
      goto LABEL_718;
    if ((_DWORD)v281)
      memcpy(v299, __src, 8 * v281);
    *((_DWORD *)v296 + 14) = v281;
    v300 = *(_OWORD *)&v815[116];
    v296[10] = *(_OWORD *)&v815[100];
    v296[11] = v300;
    v301 = *(_OWORD *)&v815[84];
    v296[8] = *(_OWORD *)&v815[68];
    v296[9] = v301;
    v302 = *(_OWORD *)&v815[20];
    v296[4] = *(_OWORD *)&v815[4];
    v296[5] = v302;
    v303 = *(_OWORD *)&v815[52];
    v296[6] = *(_OWORD *)&v815[36];
    v296[7] = v303;
    v304 = v760;
    v760 += 12;
    v305 = v807;
    *v760 = *(_OWORD *)v806;
    v304[13] = v305;
    *((_BYTE *)v304 + 224) = v287;
    v306 = (8 * v295 + 31) & 0xFFFFFFFE0;
    *((_QWORD *)v304 + 29) = 0;
    *((_QWORD *)v304 + 30) = v306 >> 3;
    __dst[0] = 0;
    malloc_type_posix_memalign(__dst, 0x20uLL, v306, 0x100BBD03uLL);
    v307 = __dst[0];
    *((void **)v304 + 29) = __dst[0];
    if (!v307)
    {
LABEL_718:
      v693 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v694 = std::bad_alloc::bad_alloc(v693);
      __cxa_throw(v694, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if ((_DWORD)v295)
      memcpy(v307, v289, 8 * v295);
    *((_DWORD *)v304 + 62) = v295;
    v308 = v812;
    v304[20] = *(_OWORD *)&v811[68];
    v304[21] = v308;
    v309 = v814;
    v304[22] = v813;
    v304[23] = v309;
    v310 = *(_OWORD *)&v811[20];
    v304[16] = *(_OWORD *)&v811[4];
    v304[17] = v310;
    v311 = *(_OWORD *)&v811[52];
    v304[18] = *(_OWORD *)&v811[36];
    v304[19] = v311;
    *(_QWORD *)&v312 = v760 + 12;
    *(_QWORD *)&v745.f64[1] = v760 + 12;
    v313 = v745.f64[0];
    v272 = v290;
    if (v760 + 12 == *(_OWORD **)&v745.f64[0])
    {
      *(double *)&v767[24] = v275;
      v256 = a7;
      v316 = __src;
      goto LABEL_302;
    }
    v314 = 0.0;
    v315 = *(double **)&v745.f64[0];
    v256 = a7;
    v316 = __src;
    if ((unint64_t)v760 - *(_QWORD *)&v745.f64[0] < 0xC0)
      goto LABEL_750;
    v317 = ((unint64_t)v760 - *(_QWORD *)&v745.f64[0]) / 0xC0 + 1;
    v315 = (double *)(*(_QWORD *)&v745.f64[0] + 192 * (v317 & 0x3FFFFFFFFFFFFFELL));
    v318 = v317 & 0x3FFFFFFFFFFFFFELL;
    v319 = *(double **)&v745.f64[0];
    do
    {
      v314 = v314 + *v319 + v319[24];
      v319 += 48;
      v318 -= 2;
    }
    while (v318);
    if (v317 != (v317 & 0x3FFFFFFFFFFFFFELL))
    {
LABEL_750:
      do
      {
        v320 = *v315;
        v315 += 24;
        v314 = v314 + v320;
      }
      while (v315 != *(double **)&v312);
    }
    *(double *)&v767[24] = v275
                         * (double)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v760 - *(_QWORD *)&v745.f64[0] + 192) >> 6))
                         / v314;
    if (*(_QWORD *)&v745.f64[0])
    {
      do
      {
        v321 = (char *)(*(_QWORD *)&v312 - 192);
        free(*(void **)(*(_QWORD *)&v312 - 152));
        v312 = *(double *)&v321;
      }
      while (v321 != *(char **)&v313);
      v312 = v745.f64[0];
      v256 = a7;
LABEL_302:
      v745.f64[1] = v313;
      operator delete(*(void **)&v312);
    }
    free(v289);
    free(v316);
    v388 = *(unsigned __int8 *)(v725 + 28);
    v389 = sub_239437CE8(&v794, &v791, (uint64_t)v750, (float64x2_t *)__p, (double *)&v777, (double *)v767);
    v390 = !v389;
    if (!v388)
      v390 = 1;
    v10 = v742;
    if ((v390 & 1) == 0)
    {
      *(_OWORD *)&v815[80] = unk_239EC6990;
      *(_OWORD *)&v815[96] = xmmword_239EC69A0;
      *(_OWORD *)&v815[112] = unk_239EC69B0;
      *(_OWORD *)v815 = xmmword_239EC6940;
      *(_OWORD *)&v815[16] = *(_OWORD *)algn_239EC6950;
      *(_OWORD *)&v815[32] = xmmword_239EC6960;
      memset(&v815[48], 0, 32);
      memset(v811, 0, 24);
      if (sub_239437F3C(&v794, &v791, (float64_t *)__p, (uint64_t)v815, v811, (uint64_t)&v777, *(double *)&v767[24]))
      {
        v392 = v777;
        v393 = v778;
        v394 = v778 - 64;
        if (v778 < 0x40)
        {
          v395 = 0;
          v396 = (int8x8_t *)v777;
        }
        else
        {
          if (v394 < 0xC0)
          {
            v395 = 0;
            v396 = (int8x8_t *)v777;
            goto LABEL_375;
          }
          v433 = (v394 >> 6) + 1;
          v396 = (int8x8_t *)((char *)v777 + 8 * (v433 & 0x7FFFFFFFFFFFFFCLL));
          v393 = v778 - ((v433 & 0x7FFFFFFFFFFFFFCLL) << 6);
          v434 = (int8x16_t *)((char *)v777 + 16);
          v435 = 0uLL;
          v436 = v433 & 0x7FFFFFFFFFFFFFCLL;
          v437 = 0uLL;
          do
          {
            v435 = (int64x2_t)vpadalq_u32((uint64x2_t)v435, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v434[-1]))));
            v437 = (int64x2_t)vpadalq_u32((uint64x2_t)v437, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v434))));
            v434 += 2;
            v436 -= 4;
          }
          while (v436);
          v391 = (float64x2_t)vaddq_s64(v437, v435);
          v395 = vaddvq_s64((int64x2_t)v391);
          if (v433 != (v433 & 0x7FFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_375:
              v438 = *v396++;
              v439 = (uint8x8_t)vcnt_s8(v438);
              v439.i16[0] = vaddlv_u8(v439);
              v395 += v439.u32[0];
              v393 -= 64;
            }
            while (v393 > 0x3F);
          }
        }
        if (v393)
        {
          v440 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v396 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v393)));
          v440.i16[0] = vaddlv_u8(v440);
          v395 += v440.u32[0];
        }
        v441 = *(const void **)v811;
        v442 = *(_QWORD *)&v811[8];
        v443 = *(_QWORD *)&v811[8] - 64;
        if (*(_QWORD *)&v811[8] < 0x40uLL)
        {
          v444 = 0;
          v445 = *(int8x8_t **)v811;
          v446 = *(_QWORD *)&v811[8];
        }
        else
        {
          if (v443 < 0xC0)
          {
            v444 = 0;
            v445 = *(int8x8_t **)v811;
            v446 = *(_QWORD *)&v811[8];
            goto LABEL_385;
          }
          v447 = (v443 >> 6) + 1;
          v445 = (int8x8_t *)(*(_QWORD *)v811 + 8 * (v447 & 0x7FFFFFFFFFFFFFCLL));
          v446 = *(_QWORD *)&v811[8] - ((v447 & 0x7FFFFFFFFFFFFFCLL) << 6);
          v448 = (int8x16_t *)(*(_QWORD *)v811 + 16);
          v449 = 0uLL;
          v450 = v447 & 0x7FFFFFFFFFFFFFCLL;
          v451 = 0uLL;
          do
          {
            v449 = (int64x2_t)vpadalq_u32((uint64x2_t)v449, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v448[-1]))));
            v451 = (int64x2_t)vpadalq_u32((uint64x2_t)v451, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v448))));
            v448 += 2;
            v450 -= 4;
          }
          while (v450);
          v391 = (float64x2_t)vaddq_s64(v451, v449);
          v444 = vaddvq_s64((int64x2_t)v391);
          if (v447 != (v447 & 0x7FFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_385:
              v452 = *v445++;
              v453 = (uint8x8_t)vcnt_s8(v452);
              v453.i16[0] = vaddlv_u8(v453);
              v444 += v453.u32[0];
              v446 -= 64;
            }
            while (v446 > 0x3F);
          }
        }
        if (v446)
        {
          v454 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)v445 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v446)));
          v454.i16[0] = vaddlv_u8(v454);
          v444 += v454.u32[0];
        }
        if (v444 > v395)
        {
          v391.f64[0] = *(float64_t *)&v815[112];
          _Q1 = *(float64x2_t *)&v815[96];
          _Q3 = vmulq_f64(_Q1, _Q1);
          _D4 = *(_QWORD *)&v815[104];
          __asm { FMLA            D3, D4, V1.D[1] }
          _Q3.f64[0] = 1.0 / sqrt(_Q3.f64[0] + v391.f64[0] * v391.f64[0]);
          v458 = (int64x2_t)vmulq_n_f64(*(float64x2_t *)&v815[96], _Q3.f64[0]);
          v459 = vmulq_f64(v391, _Q3).f64[0];
          *(_QWORD *)&_Q3.f64[0] = vdupq_laneq_s64(v458, 1).u64[0];
          v460.f64[0] = 0.0;
          _Q3.f64[1] = -*(double *)v458.i64;
          v460.f64[1] = v459;
          *(double *)v751 = vmlad_n_f64(-*(double *)&v458.i64[1] * *(double *)v815, *(double *)&v815[8], *(double *)v458.i64)+ *(double *)&v815[16] * 0.0;
          *(float64x2_t *)v750 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v460, *(double *)v815), (float64x2_t)COERCE_UNSIGNED_INT64(-v459), *(float64x2_t *)v815, 1), _Q3, *(double *)&v815[16]);
          *(double *)&v751[24] = vmlad_n_f64(-*(double *)&v458.i64[1] * *(double *)&v815[32], *(double *)&v815[40], *(double *)v458.i64)+ *(double *)&v815[48] * 0.0;
          *(float64x2_t *)&v751[8] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v460, *(double *)&v815[32]), (float64x2_t)COERCE_UNSIGNED_INT64(-v459), *(float64x2_t *)&v815[32], 1), _Q3, *(double *)&v815[48]);
          v752 = vmlad_n_f64(-*(double *)&v458.i64[1] * *(double *)&v815[64], *(double *)&v815[72], *(double *)v458.i64)
               + *(double *)&v815[80] * 0.0;
          *(float64x2_t *)&v751[32] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v460, *(double *)&v815[64]), (float64x2_t)COERCE_UNSIGNED_INT64(-v459), *(float64x2_t *)&v815[64], 1), _Q3, *(double *)&v815[80]);
          v773 = *(_OWORD *)&v815[64];
          v774 = *(_OWORD *)&v815[80];
          v775 = *(_OWORD *)&v815[96];
          v776 = *(_OWORD *)&v815[112];
          *(_OWORD *)__p = *(_OWORD *)v815;
          *(_OWORD *)&__p[16] = *(_OWORD *)&v815[16];
          v771 = *(_OWORD *)&v815[32];
          v772 = *(_OWORD *)&v815[48];
          if (*(_QWORD *)&v811[8])
          {
            if (*(_QWORD *)&v811[8] <= (unint64_t)(v779 << 6))
            {
              v461 = *(_QWORD *)&v811[8] - 1;
            }
            else
            {
              if (v777)
              {
                operator delete(v777);
                v778 = 0;
                v777 = 0;
                v779 = 0;
                v442 = *(_QWORD *)&v811[8];
              }
              if ((v442 & 0x8000000000000000) != 0)
                sub_2394189F8();
              v461 = v442 - 1;
              v462 = ((v442 - 1) >> 6) + 1;
              v392 = operator new(8 * v462);
              v777 = v392;
              v778 = 0;
              v779 = v462;
              v441 = *(const void **)v811;
              v256 = a7;
            }
            memmove(v392, v441, ((v461 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
            v442 = *(_QWORD *)&v811[8];
          }
          v778 = v442;
        }
      }
      v432 = *(void **)v811;
      if (*(_QWORD *)v811)
LABEL_399:
        operator delete(v432);
    }
    goto LABEL_400;
  }
  v768 = 4;
  v769 = 0x3FF6A09E667F3BCDLL;
  *(_OWORD *)v767 = xmmword_239EC6800;
  *(_OWORD *)&v767[32] = xmmword_239EC67F0;
  *(_OWORD *)&v767[48] = xmmword_239EC6810;
  v322 = *(double *)(v233 + 8);
  *(_QWORD *)&v767[24] = *(_QWORD *)v233;
  *(_QWORD *)&v767[16] = (unint64_t)(v322 * 15.0);
  if (!sub_239438744(&v800, &v797, (uint64_t)&memptr, (uint64_t)&v777, *(unsigned __int8 *)(v233 + 28), (double *)v767))
  {
    v389 = 0;
    goto LABEL_400;
  }
  v761 = 0;
  v760 = 0;
  v762 = 0;
  v758 = 0;
  v757 = 0;
  v759 = 0;
  if (v705 > 0x16)
  {
    if (v234 >> 60)
      sub_2394189F8();
    v760 = operator new(16 * v234);
    v761 = (float64x2_t *)v760;
    v762 = (float64x2_t *)&v760[v234];
    v757 = operator new(16 * v234);
    v758 = (char *)v757;
    v759 = (char *)v757 + 16 * v234;
  }
  v712 = v272;
  v323 = (char *)v777;
  v324 = v778 & 0x3F;
  if (v778 > 0x3F || (v778 & 0x3F) != 0)
  {
    v397 = 0;
    v398 = 0;
    v399 = (char *)v777 + 8 * (v778 >> 6);
    __asm { FMOV            V0.2D, #1.0 }
    v730 = _Q0;
    do
    {
      if (((*(_QWORD *)v323 >> v398) & 1) == 0)
        goto LABEL_316;
      v403 = vmlaq_f64(vdivq_f64(vnegq_f64(*(float64x2_t *)(a3 + 16)), *(float64x2_t *)a3), vdivq_f64(v730, *(float64x2_t *)a3), *((float64x2_t *)v800 + v397));
      v404 = v761;
      if (v761 < v762)
      {
        *v761 = v403;
        v405 = v404 + 1;
        goto LABEL_341;
      }
      v406 = (float64x2_t *)v760;
      v407 = ((char *)v761 - (char *)v760) >> 4;
      v408 = v407 + 1;
      if ((unint64_t)(v407 + 1) >> 60)
        sub_2394189F8();
      v409 = (char *)v762 - (char *)v760;
      if (((char *)v762 - (char *)v760) >> 3 > v408)
        v408 = v409 >> 3;
      if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFF0)
        v410 = 0xFFFFFFFFFFFFFFFLL;
      else
        v410 = v408;
      if (v410)
      {
        v718 = v403;
        if (v410 >> 60)
          sub_239418A80();
        v411 = (char *)operator new(16 * v410);
        v412 = (float64x2_t *)&v411[16 * v407];
        *v412 = v718;
        v405 = v412 + 1;
        if (v404 == v406)
          goto LABEL_339;
      }
      else
      {
        v411 = 0;
        v412 = (float64x2_t *)(16 * v407);
        v413 = (float64x2_t *)(16 * v407);
        *v413 = v403;
        v405 = v413 + 1;
        if (v404 == v406)
          goto LABEL_339;
      }
      do
      {
        v412[-1] = v404[-1];
        --v412;
        --v404;
      }
      while (v404 != v406);
      v404 = (float64x2_t *)v760;
LABEL_339:
      v760 = v412;
      v761 = v405;
      v762 = (float64x2_t *)&v411[16 * v410];
      if (v404)
        operator delete(v404);
LABEL_341:
      v761 = v405;
      v414 = vmlaq_f64(vdivq_f64(vnegq_f64(*((float64x2_t *)a4 + 1)), *(float64x2_t *)a4), vdivq_f64(v730, *(float64x2_t *)a4), *((float64x2_t *)v797 + v397));
      v415 = v758;
      if (v758 >= v759)
      {
        v416 = (char *)v757;
        v417 = (v758 - (_BYTE *)v757) >> 4;
        v418 = v417 + 1;
        if ((unint64_t)(v417 + 1) >> 60)
          sub_2394189F8();
        v419 = v759 - (_BYTE *)v757;
        if ((v759 - (_BYTE *)v757) >> 3 > v418)
          v418 = v419 >> 3;
        if ((unint64_t)v419 >= 0x7FFFFFFFFFFFFFF0)
          v420 = 0xFFFFFFFFFFFFFFFLL;
        else
          v420 = v418;
        if (v420)
        {
          v719 = v414;
          if (v420 >> 60)
            sub_239418A80();
          v421 = (char *)operator new(16 * v420);
          v422 = (float64x2_t *)&v421[16 * v417];
          *v422 = v719;
          v401 = (char *)&v422[1];
          if (v415 == v416)
            goto LABEL_355;
          do
          {
LABEL_353:
            v422[-1] = *((float64x2_t *)v415 - 1);
            --v422;
            v415 -= 16;
          }
          while (v415 != v416);
          v415 = (char *)v757;
        }
        else
        {
          v421 = 0;
          v422 = (float64x2_t *)(16 * v417);
          v423 = (float64x2_t *)(16 * v417);
          *v423 = v414;
          v401 = (char *)&v423[1];
          if (v415 != v416)
            goto LABEL_353;
        }
LABEL_355:
        v757 = v422;
        v758 = v401;
        v759 = &v421[16 * v420];
        if (v415)
          operator delete(v415);
        goto LABEL_315;
      }
      *(float64x2_t *)v758 = v414;
      v401 = v415 + 16;
LABEL_315:
      v758 = v401;
      v10 = v742;
LABEL_316:
      v323 += 8 * (v398 == 63);
      if (v398 == 63)
        v398 = 0;
      else
        ++v398;
      ++v397;
    }
    while (v323 != v399 || v398 != v324);
  }
  memset(v754, 0, sizeof(v754));
  *(_QWORD *)&v751[40] = 0x3FE0000000000000;
  *(_QWORD *)&v752 = 4;
  v753 = 0x3FF6A09E667F3BCDLL;
  *(_OWORD *)v750 = xmmword_239EC67C0;
  *(_QWORD *)v751 = 10;
  *(_OWORD *)&v751[24] = xmmword_239EC67D0;
  *(_OWORD *)&v751[8] = xmmword_239EC67E0;
  v325 = *(double *)v725;
  v326 = *(_OWORD *)(a3 + 16);
  v745 = *(float64x2_t *)a3;
  v746 = v326;
  v327 = *(_BYTE *)(a3 + 32);
  v328 = *(unsigned int *)(a3 + 56);
  v806[0] = 0;
  malloc_type_posix_memalign(v806, 0x20uLL, (8 * v328 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v329 = v806[0];
  if (!v806[0])
  {
    v701 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v702 = std::bad_alloc::bad_alloc(v701);
    __cxa_throw(v702, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v328)
    memcpy(v806[0], *(const void **)(a3 + 40), 8 * v328);
  v330 = *(unsigned int *)(a3 + 56);
  v331 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)&v815[68] = *(_OWORD *)(a3 + 128);
  *(_OWORD *)&v815[84] = v331;
  v332 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)&v815[100] = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v815[116] = v332;
  v333 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)&v815[4] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)&v815[20] = v333;
  v334 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)&v815[36] = *(_OWORD *)(a3 + 96);
  *(_OWORD *)&v815[52] = v334;
  v335 = a4[1];
  *(_OWORD *)__dst = *a4;
  v744 = v335;
  v336 = *((_BYTE *)a4 + 32);
  v337 = *((unsigned int *)a4 + 14);
  v806[0] = 0;
  malloc_type_posix_memalign(v806, 0x20uLL, (8 * v337 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
  v338 = v806[0];
  if (!v806[0])
  {
    v703 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v704 = std::bad_alloc::bad_alloc(v703);
    __cxa_throw(v704, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v337)
    memcpy(v806[0], *((const void **)a4 + 5), 8 * v337);
  v339 = a4[9];
  *(_OWORD *)&v811[68] = a4[8];
  v812 = v339;
  v340 = a4[11];
  v813 = a4[10];
  v814 = v340;
  v341 = a4[5];
  *(_OWORD *)&v811[4] = a4[4];
  *(_OWORD *)&v811[20] = v341;
  v342 = a4[7];
  *(_OWORD *)&v811[36] = a4[6];
  v343 = *((unsigned int *)a4 + 14);
  *(_OWORD *)&v811[52] = v342;
  v344 = operator new(0x180uLL);
  v747 = (double *)v344;
  v748 = (double *)v344;
  v749 = (char *)(v344 + 24);
  v809 = v344;
  v808 = v344;
  v806[0] = &v749;
  v806[1] = &v808;
  *(_QWORD *)&v807 = &v809;
  BYTE8(v807) = 0;
  v345 = v746;
  *v344 = v745;
  v344[1] = v345;
  *((_BYTE *)v344 + 32) = v327;
  v346 = (8 * v330 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)v344 + 5) = 0;
  *((_QWORD *)v344 + 6) = v346 >> 3;
  v810 = 0;
  malloc_type_posix_memalign(&v810, 0x20uLL, v346, 0x100BBD03uLL);
  v347 = v810;
  *((_QWORD *)v344 + 5) = v810;
  if (!v347)
    goto LABEL_733;
  if ((_DWORD)v330)
    memcpy(v347, v329, 8 * v330);
  *((_DWORD *)v344 + 14) = v330;
  v348 = *(_OWORD *)&v815[116];
  v344[10] = *(_OWORD *)&v815[100];
  v344[11] = v348;
  v349 = *(_OWORD *)&v815[84];
  v344[8] = *(_OWORD *)&v815[68];
  v344[9] = v349;
  v350 = *(_OWORD *)&v815[20];
  v344[4] = *(_OWORD *)&v815[4];
  v344[5] = v350;
  v351 = *(_OWORD *)&v815[52];
  v344[6] = *(_OWORD *)&v815[36];
  v344[7] = v351;
  v352 = v809;
  v809 += 12;
  v353 = v744;
  *v809 = *(_OWORD *)__dst;
  v352[13] = v353;
  *((_BYTE *)v352 + 224) = v336;
  v354 = (8 * v343 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)v352 + 29) = 0;
  *((_QWORD *)v352 + 30) = v354 >> 3;
  v810 = 0;
  malloc_type_posix_memalign(&v810, 0x20uLL, v354, 0x100BBD03uLL);
  v355 = v810;
  *((_QWORD *)v352 + 29) = v810;
  if (!v355)
  {
LABEL_733:
    v699 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v700 = std::bad_alloc::bad_alloc(v699);
    __cxa_throw(v700, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v343)
    memcpy(v355, v338, 8 * v343);
  *((_DWORD *)v352 + 62) = v343;
  v356 = v812;
  v352[20] = *(_OWORD *)&v811[68];
  v352[21] = v356;
  v357 = v814;
  v352[22] = v813;
  v352[23] = v357;
  v358 = *(_OWORD *)&v811[20];
  v352[16] = *(_OWORD *)&v811[4];
  v352[17] = v358;
  v359 = *(_OWORD *)&v811[52];
  v352[18] = *(_OWORD *)&v811[36];
  v352[19] = v359;
  v360 = (double *)(v809 + 12);
  v748 = (double *)(v809 + 12);
  v272 = v712;
  if (v809 + 12 == (_OWORD *)v747)
  {
    *(double *)&v751[8] = v325 + v325;
    goto LABEL_359;
  }
  v361 = 0.0;
  v362 = v747;
  v256 = a7;
  if ((unint64_t)((char *)v809 - (char *)v747) < 0xC0)
    goto LABEL_751;
  v363 = ((char *)v809 - (char *)v747) / 0xC0uLL + 1;
  v362 = &v747[24 * (v363 & 0x3FFFFFFFFFFFFFELL)];
  v364 = v363 & 0x3FFFFFFFFFFFFFELL;
  v365 = v747;
  do
  {
    v361 = v361 + *v365 + v365[24];
    v365 += 48;
    v364 -= 2;
  }
  while (v364);
  if (v363 != (v363 & 0x3FFFFFFFFFFFFFELL))
  {
LABEL_751:
    do
    {
      v366 = *v362;
      v362 += 24;
      v361 = v361 + v366;
    }
    while (v362 != v360);
  }
  *(double *)&v751[8] = (v325 + v325)
                      * (double)(0xAAAAAAAAAAAAAAABLL * (((char *)(v809 + 12) - (char *)v747) >> 6))
                      / v361;
  if (v747)
  {
    do
    {
      v367 = v360 - 24;
      free(*((void **)v360 - 19));
      v360 = v367;
    }
    while (v367 != v747);
    v360 = v747;
LABEL_359:
    v256 = a7;
    v748 = v747;
    operator delete(v360);
  }
  free(v338);
  free(v329);
  v389 = sub_239437CE8(&v760, &v757, (uint64_t)v755, (float64x2_t *)__p, (double *)v754, (double *)v750);
  v424 = 0;
  v425 = 0;
  v426 = v777;
  v427 = (char *)v754[0];
  do
  {
    v428 = 1 << v425;
    v429 = v426[v425 >> 6];
    if ((v429 & (1 << v425)) != 0)
    {
      v430 = v429 | v428;
      v431 = v429 & ~v428;
      if (((*(_QWORD *)&v427[(v424 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v424) & 1) != 0)
        v431 = v430;
      v426[v425 >> 6] = v431;
      ++v424;
    }
    ++v425;
  }
  while (v738 != v425);
  if (v754[0])
    operator delete(v754[0]);
  if (v757)
  {
    v758 = (char *)v757;
    operator delete(v757);
  }
  v432 = v760;
  if (v760)
  {
    v761 = (float64x2_t *)v760;
    goto LABEL_399;
  }
LABEL_400:
  if ((v272 | v389) != 1)
    goto LABEL_697;
  memset(v767, 0, 48);
  v750[0] = v780;
  v750[1] = 0;
  memptr = v767;
  v764 = 0;
  sub_239457CC0((float64x2_t **)v750, (double **)&memptr);
  v463.f64[0] = *(float64_t *)&v767[16];
  _Q17 = *(float64x2_t *)v767;
  v465 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
  _Q0 = vmulq_f64(_Q17, _Q17);
  _Q1.f64[0] = *(float64_t *)&v767[8];
  __asm { FMLA            D0, D1, V17.D[1] }
  v468 = _Q0.f64[0] + v463.f64[0] * v463.f64[0];
  if (v468 >= 0.0000002635)
  {
    v470 = sqrt(v468);
    v731 = *(double *)&v767[16];
    v713 = v465;
    v720 = *(float64x2_t *)v767;
    v471 = __sincos_stret(v470);
    v465 = v713;
    _Q17 = v720;
    v463.f64[0] = v731;
    v469 = v471.__sinval / v470;
    _Q0.f64[0] = 1.0 / v468 * (1.0 - v471.__cosval);
    _Q1.f64[0] = 1.0 / v468 * (1.0 - v471.__sinval / v470);
    if (v468 >= 2.775e-15)
      goto LABEL_403;
    goto LABEL_406;
  }
  _Q0.f64[0] = 0.5 - v468 * (v468 / -720.0 + 0.0416666667);
  _Q1.f64[0] = 0.166666667 - v468 * (v468 / -5040.0 + 0.00833333333);
  v469 = 1.0 - v468 * _Q1.f64[0];
  if (v468 < 2.775e-15)
  {
LABEL_406:
    _Q0.f64[0] = v468 * 0.00138888889 + 0.0833333333 + v468 * 0.0000330687831;
    goto LABEL_408;
  }
LABEL_403:
  if (v468 <= 9.0)
    _Q0.f64[0] = -(_Q1.f64[0] - _Q0.f64[0] * 0.5) / v469;
  else
    _Q0.f64[0] = (_Q0.f64[0] + v469 * -0.5) / (v468 * _Q0.f64[0]);
LABEL_408:
  *(_QWORD *)&_Q1.f64[0] = v787;
  v472.f64[0] = v465.f64[0];
  v472.f64[1] = v463.f64[0];
  v473 = (float64x2_t)vextq_s8((int8x16_t)v786, (int8x16_t)_Q1, 8uLL);
  v474 = vsubq_f64(vmulq_laneq_f64(_Q17, (float64x2_t)v786, 1), vmulq_f64(v465, (float64x2_t)v786));
  __asm { FMOV            V7.2D, #-0.5 }
  v476 = vaddq_f64(_Q1, vmulq_f64(v474, _Q7));
  *(_QWORD *)&_Q1.f64[1] = v786;
  v463.f64[1] = _Q17.f64[0];
  v477 = vsubq_f64(vmulq_f64(v472, _Q1), vmulq_f64(v463, v473));
  v732 = _Q7;
  v478 = (float64x2_t)vextq_s8((int8x16_t)v477, (int8x16_t)v474, 8uLL);
  v474.f64[1] = v477.f64[0];
  *(_QWORD *)&v767[40] = *(_OWORD *)&vaddq_f64(v476, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q17, v477, 1), vmulq_f64(v465, v477))));
  *(float64x2_t *)&v767[24] = vaddq_f64(vaddq_f64((float64x2_t)v786, vmulq_f64(v477, _Q7)), vmulq_n_f64(vsubq_f64(vmulq_f64(v472, v474), vmulq_f64(v463, v478)), _Q0.f64[0]));
  memset(v751, 0, 32);
  *(_OWORD *)v750 = 0u;
  memptr = __p;
  v764 = 0;
  v755[0] = v750;
  v755[1] = 0;
  sub_239457CC0((float64x2_t **)&memptr, (double **)v755);
  v480.f64[0] = *(float64_t *)v751;
  _Q19 = *(float64x2_t *)v750;
  v482 = (float64x2_t)vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL);
  _Q0 = vmulq_f64(_Q19, _Q19);
  *(void **)&_Q1.f64[0] = v750[1];
  __asm { FMLA            D0, D1, V19.D[1] }
  v485 = _Q0.f64[0] + v480.f64[0] * v480.f64[0];
  if (v485 >= 0.0000002635)
  {
    v488 = sqrt(v485);
    v714 = v482;
    v721 = *(double *)v751;
    v709 = *(float64x2_t *)v750;
    v489 = __sincos_stret(v488);
    _Q19 = v709;
    v482 = v714;
    v480.f64[0] = v721;
    v486 = v489.__sinval / v488;
    _Q0.f64[0] = 1.0 / v485 * (1.0 - v489.__cosval);
    _Q1.f64[0] = 1.0 / v485 * (1.0 - v489.__sinval / v488);
    v487 = v732;
    if (v485 >= 2.775e-15)
      goto LABEL_410;
    goto LABEL_413;
  }
  _Q0.f64[0] = 0.5 - v485 * (v485 / -720.0 + 0.0416666667);
  _Q1.f64[0] = 0.166666667 - v485 * (v485 / -5040.0 + 0.00833333333);
  v486 = 1.0 - v485 * _Q1.f64[0];
  v487 = v732;
  if (v485 < 2.775e-15)
  {
LABEL_413:
    _Q0.f64[0] = v485 * 0.00138888889 + 0.0833333333 + v485 * 0.0000330687831;
    goto LABEL_415;
  }
LABEL_410:
  if (v485 <= 9.0)
    _Q0.f64[0] = -(_Q1.f64[0] - _Q0.f64[0] * 0.5) / v486;
  else
    _Q0.f64[0] = (_Q0.f64[0] + v486 * -0.5) / (v485 * _Q0.f64[0]);
LABEL_415:
  *(_QWORD *)&_Q1.f64[0] = v776;
  v490.f64[0] = v482.f64[0];
  v490.f64[1] = v480.f64[0];
  v491 = (float64x2_t)vextq_s8((int8x16_t)v775, (int8x16_t)_Q1, 8uLL);
  *(_QWORD *)&v492.f64[0] = v776;
  *(_QWORD *)&v492.f64[1] = v775;
  v493 = vsubq_f64(vmulq_laneq_f64(_Q19, (float64x2_t)v775, 1), vmulq_f64(v482, (float64x2_t)v775));
  v494 = vaddq_f64(_Q1, vmulq_f64(v493, v487));
  v480.f64[1] = _Q19.f64[0];
  v495 = vsubq_f64(vmulq_f64(v490, v492), vmulq_f64(v480, v491));
  v496 = (float64x2_t)vextq_s8((int8x16_t)v495, (int8x16_t)v493, 8uLL);
  v493.f64[1] = v495.f64[0];
  v497 = vmulq_f64(v480, v496);
  *(float64x2_t *)&v751[8] = vaddq_f64(vaddq_f64((float64x2_t)v775, vmulq_f64(v495, v487)), vmulq_n_f64(vsubq_f64(vmulq_f64(v490, v493), v497), _Q0.f64[0]));
  *(_QWORD *)&v751[24] = *(_OWORD *)&vaddq_f64(v494, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q19, v495, 1), vmulq_f64(v482, v495))));
  *(_OWORD *)v815 = *(_OWORD *)v767;
  *(_OWORD *)&v815[16] = *(_OWORD *)&v767[16];
  *(_OWORD *)&v815[32] = *(_OWORD *)&v767[32];
  *(_OWORD *)v811 = *(_OWORD *)v750;
  *(_OWORD *)&v811[16] = *(_OWORD *)v751;
  *(_OWORD *)&v811[32] = *(_OWORD *)&v751[16];
  v498 = *(void **)v256;
  if (*(_QWORD *)v256)
  {
    *(_QWORD *)(v256 + 8) = v498;
    operator delete(v498);
    *(_QWORD *)v256 = 0;
    *(_QWORD *)(v256 + 8) = 0;
    *(_QWORD *)(v256 + 16) = 0;
  }
  v499 = 0;
  v500 = 0;
  *(_OWORD *)v256 = 0u;
  *(_OWORD *)(v256 + 16) = 0u;
  v722 = v256 + 32;
  v501 = *(_OWORD *)&v815[16];
  *(_OWORD *)(v256 + 32) = *(_OWORD *)v815;
  *(_OWORD *)(v256 + 48) = v501;
  v733 = v256 + 80;
  v502 = *(_OWORD *)v811;
  v503 = *(_OWORD *)&v811[16];
  *(_OWORD *)(v256 + 64) = *(_OWORD *)&v815[32];
  *(_OWORD *)(v256 + 80) = v502;
  v504 = *(_OWORD *)&v811[32];
  *(_OWORD *)(v256 + 96) = v503;
  *(_OWORD *)(v256 + 112) = v504;
  *(_DWORD *)(v256 + 128) = 0;
  while (2)
  {
    while (2)
    {
      v506 = (int *)((char *)v803 + 12 * v500);
      v508 = *v506;
      v507 = v506[1];
      v509 = ((*(_QWORD *)((_BYTE *)v788 + ((v500 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v500)) != 0) | (2 * ((*(_QWORD *)((_BYTE *)v777 + ((v500 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v500)) != 0));
      if (v509 != 1)
      {
        if (v509 == 2)
        {
          v510 = (_QWORD *)a7;
          ++*(_DWORD *)(a7 + 28);
        }
        else
        {
          v510 = (_QWORD *)a7;
          if (v509 == 3)
          {
            *(int32x2_t *)(a7 + 24) = vadd_s32(*(int32x2_t *)(a7 + 24), (int32x2_t)0x100000001);
            v511 = *(_QWORD *)(a7 + 16);
            if ((unint64_t)v499 >= v511)
              break;
            goto LABEL_418;
          }
        }
        v511 = v510[2];
        if ((unint64_t)v499 >= v511)
          break;
        goto LABEL_418;
      }
      v510 = (_QWORD *)a7;
      ++*(_DWORD *)(a7 + 24);
      v511 = *(_QWORD *)(a7 + 16);
      if ((unint64_t)v499 < v511)
      {
LABEL_418:
        *v499 = v508;
        v499[1] = v507;
        v499[2] = v509;
        v499 += 3;
        v505 = v510;
        v510[1] = v499;
        if (++v500 == v738)
          goto LABEL_446;
        continue;
      }
      break;
    }
    v512 = (_DWORD *)*v510;
    v513 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v499 - *v510) >> 2);
    v514 = v513 + 1;
    if (v513 + 1 > 0x1555555555555555)
      sub_2394189F8();
    v515 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v511 - (_QWORD)v512) >> 2);
    if (2 * v515 > v514)
      v514 = 2 * v515;
    if (v515 >= 0xAAAAAAAAAAAAAAALL)
      v516 = 0x1555555555555555;
    else
      v516 = v514;
    if (!v516)
    {
      v517 = 0;
      v518 = 12 * v513;
      *(_DWORD *)v518 = v508;
      *(_DWORD *)(v518 + 4) = v507;
      *(_DWORD *)(v518 + 8) = v509;
      if (v499 != v512)
        goto LABEL_435;
LABEL_444:
      v522 = v499;
      v505 = (_QWORD *)a7;
      v499 = (_DWORD *)(v518 + 12);
      *(_QWORD *)a7 = v518;
      *(_QWORD *)(a7 + 8) = v518 + 12;
      *(_QWORD *)(a7 + 16) = &v517[12 * v516];
      if (v522)
        goto LABEL_438;
      goto LABEL_439;
    }
    if (v516 > 0x1555555555555555)
      sub_239418A80();
    v517 = (char *)operator new(12 * v516);
    v518 = (uint64_t)&v517[12 * v513];
    *(_DWORD *)v518 = v508;
    *(_DWORD *)(v518 + 4) = v507;
    *(_DWORD *)(v518 + 8) = v509;
    if (v499 == v512)
      goto LABEL_444;
LABEL_435:
    v519 = v518;
    v505 = (_QWORD *)a7;
    do
    {
      v520 = *(_QWORD *)(v499 - 3);
      v499 -= 3;
      v521 = v499[2];
      *(_QWORD *)(v519 - 12) = v520;
      v519 -= 12;
      *(_DWORD *)(v519 + 8) = v521;
    }
    while (v499 != v512);
    v522 = *(void **)a7;
    v499 = (_DWORD *)(v518 + 12);
    *(_QWORD *)a7 = v519;
    *(_QWORD *)(a7 + 8) = v518 + 12;
    *(_QWORD *)(a7 + 16) = &v517[12 * v516];
    if (v522)
LABEL_438:
      operator delete(v522);
LABEL_439:
    v10 = v742;
    v505[1] = v499;
    if (++v500 != v738)
      continue;
    break;
  }
LABEL_446:
  v523 = (uint64_t)v499 - *v505;
  if (v499 == (_DWORD *)*v505)
    goto LABEL_697;
  v525 = *((_DWORD *)v505 + 6);
  v524 = *((_DWORD *)v505 + 7);
  v526 = 2 * v524;
  _CF = v524 >= 0xF && v526 >= v525;
  v528 = !_CF;
  if (_CF && (double)v524 / (double)(0xAAAAAAAAAAAAAAABLL * (v523 >> 2)) >= 0.1)
    goto LABEL_459;
  v249 = 0;
  if (v526 >= v525 || v525 < 0xF)
  {
LABEL_682:
    v574 = v777;
    if (!v777)
      goto LABEL_684;
    goto LABEL_683;
  }
  v733 = v722;
  if ((double)v525 / (double)(0xAAAAAAAAAAAAAAABLL * (v523 >> 2)) < 0.1)
    goto LABEL_697;
LABEL_459:
  if (*(_BYTE *)(v725 + 27) && *(_DWORD *)(a3 + 196) == *((_DWORD *)a4 + 49))
  {
    v529 = *(double *)(v733 + 16);
    v530 = *(int8x16_t *)v733;
    v531 = *(double *)vextq_s8(v530, v530, 8uLL).i64;
    v532.f64[0] = *(float64_t *)v733;
    v532.f64[1] = v531;
    v533 = vmulq_f64(v532, v532).f64[0] + v531 * v531 + v529 * v529;
    if (v533 >= 0.0000002635)
    {
      v537 = sqrt(v533);
      v734 = *(double *)(v733 + 16);
      v715 = v531;
      v723 = v530.i64[0];
      v538 = __sincos_stret(v537);
      cosval = v538.__cosval;
      v531 = v715;
      v530.i64[0] = v723;
      v529 = v734;
      v535 = v538.__sinval / v537;
      v534 = 1.0 / v533 * (1.0 - v538.__cosval);
    }
    else
    {
      v534 = 0.5 - v533 * (v533 / -720.0 + 0.0416666667);
      v535 = 1.0 - v533 * (0.166666667 - v533 * (v533 / -5040.0 + 0.00833333333));
      cosval = 1.0 - v533 * v534;
    }
    v539 = *(double *)v530.i64 * v534;
    v497.f64[0] = v531 * v534;
    v540 = cosval + *(double *)v530.i64 * v534 * *(double *)v530.i64;
    v541 = cosval + v531 * v534 * v531;
    v542 = cosval + v529 * v534 * v529;
    v543 = v531 * v539;
    v544 = v529 * v539;
    v497.f64[0] = v529 * v497.f64[0];
    v545 = *(double *)v530.i64 * v535;
    v546 = v531 * v535;
    v547 = v529 * v535;
    v548 = v543 - v547;
    v549 = v544 + v546;
    v550 = v543 + v547;
    v551 = v497.f64[0] - v545;
    v552 = v544 - v546;
    v553 = v497.f64[0] + v545;
    v497.f64[0] = *((float64_t *)a4 + 10);
    v554 = (float64x2_t)a4[4];
    _D16 = *((double *)a4 + 14);
    v556 = (float64x2_t)a4[6];
    _D21 = *((double *)a4 + 18);
    v558 = (float64x2_t)a4[8];
    v479.f64[0] = *(float64_t *)(a3 + 80);
    _Q24 = *(float64x2_t *)(a3 + 64);
    v560 = *(double *)(a3 + 112);
    _Q26 = *(float64x2_t *)(a3 + 96);
    v562 = *(double *)(a3 + 144);
    _Q28 = *(float64x2_t *)(a3 + 128);
    v564 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, _Q24.f64[0]), v556, _Q26.f64[0]), v558, _Q28.f64[0]);
    v565 = vmlad_n_f64(vmlad_n_f64(v497.f64[0] * _Q24.f64[0], _D16, _Q26.f64[0]), _D21, _Q28.f64[0]);
    v566 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v554, _Q24, 1), v556, _Q26, 1), v558, _Q28, 1);
    __asm
    {
      FMLA            D24, D16, V26.D[1]
      FMLA            D24, D21, V28.D[1]
    }
    v567 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v554, v479.f64[0]), v556, v560), v558, v562);
    v568 = (v565 * v552
          + _Q24.f64[0] * v553
          + (vmulq_f64(v497, v479).f64[0] + _D16 * v560 + _D21 * v562) * v542
          + vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v564, v540), v566, v548), v567, v549), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v564, v550), v566, v541), v567, v551), 1)).f64[0]+ -1.0)* 0.5;
    if (v568 > 1.0)
      v568 = 1.0;
    if (v568 < -1.0)
      v568 = -1.0;
    if (acos(v568) * 180.0 / 3.14159265 > *(double *)(v725 + 16))
    {
      v249 = 0;
      ++*a8;
      v574 = v777;
      if (!v777)
        goto LABEL_684;
LABEL_683:
      operator delete(v574);
      goto LABEL_684;
    }
  }
  if (*(double *)(v725 + 48) <= 0.0)
    goto LABEL_681;
  memset(v815, 0, 24);
  memset(v811, 0, 24);
  if (v705 > 0x16)
  {
    if (v708 >> 60)
      sub_2394189F8();
    *(_QWORD *)v815 = operator new(16 * v708);
    *(_QWORD *)&v815[8] = *(_QWORD *)v815;
    *(_QWORD *)&v815[16] = *(_QWORD *)v815 + 16 * v708;
    *(_QWORD *)v811 = operator new(16 * v708);
    *(_QWORD *)&v811[8] = *(_QWORD *)v811;
    *(_QWORD *)&v811[16] = *(_QWORD *)v811 + 16 * v708;
  }
  memset(v767, 0, 24);
  if ((v528 & 1) != 0 || (double)v524 / (double)(0xAAAAAAAAAAAAAAABLL * (v523 >> 2)) < 0.1)
  {
    if (v526 >= v525 || v525 < 0xF || (double)v525 / (double)(0xAAAAAAAAAAAAAAABLL * (v523 >> 2)) < 0.1)
    {
      sub_239A444D4((uint64_t)"unknown file", 343, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v569 = v789;
    if (v789)
    {
      if ((v789 & 0x8000000000000000) == 0)
      {
        v570 = v789 - 1;
        v571 = ((v789 - 1) >> 6) + 1;
        v572 = operator new(8 * v571);
        *(_QWORD *)v767 = v572;
        *(_QWORD *)&v767[8] = 0;
        *(_QWORD *)&v767[16] = v571;
        v573 = v788;
        goto LABEL_486;
      }
LABEL_745:
      sub_2394189F8();
    }
  }
  else
  {
    v569 = v778;
    if (v778)
    {
      if ((v778 & 0x8000000000000000) != 0)
        goto LABEL_745;
      v570 = v778 - 1;
      v575 = ((v778 - 1) >> 6) + 1;
      v572 = operator new(8 * v575);
      *(_QWORD *)v767 = v572;
      *(_QWORD *)&v767[8] = 0;
      *(_QWORD *)&v767[16] = v575;
      v573 = v777;
LABEL_486:
      memmove(v572, v573, ((v570 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
    }
  }
  v576 = 0;
  *(_QWORD *)&v767[8] = v569;
  while (2)
  {
    if (((*(_QWORD *)(*(_QWORD *)v767 + ((v576 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v576) & 1) != 0)
    {
      v578 = (char *)v800 + 16 * v576;
      v579 = *(char **)&v815[8];
      if (*(_QWORD *)&v815[8] < *(_QWORD *)&v815[16])
      {
        **(_OWORD **)&v815[8] = *v578;
        v580 = v579 + 16;
        goto LABEL_510;
      }
      v581 = *(char **)v815;
      v582 = (uint64_t)(*(_QWORD *)&v815[8] - *(_QWORD *)v815) >> 4;
      v583 = v582 + 1;
      if ((unint64_t)(v582 + 1) >> 60)
        goto LABEL_729;
      v584 = *(_QWORD *)&v815[16] - *(_QWORD *)v815;
      if ((uint64_t)(*(_QWORD *)&v815[16] - *(_QWORD *)v815) >> 3 > v583)
        v583 = v584 >> 3;
      if ((unint64_t)v584 >= 0x7FFFFFFFFFFFFFF0)
        v585 = 0xFFFFFFFFFFFFFFFLL;
      else
        v585 = v583;
      if (v585)
      {
        if (v585 >> 60)
          goto LABEL_722;
        v586 = (char *)operator new(16 * v585);
        v587 = &v586[16 * v582];
        *(_OWORD *)v587 = *v578;
        v588 = (uint64_t)v587;
        if (v579 == v581)
        {
LABEL_508:
          v590 = &v586[16 * v585];
          v580 = v587 + 16;
          *(_QWORD *)v815 = v588;
          *(_QWORD *)&v815[8] = v587 + 16;
          *(_QWORD *)&v815[16] = v590;
          if (v579)
            goto LABEL_509;
          goto LABEL_510;
        }
      }
      else
      {
        v586 = 0;
        v587 = (char *)(16 * v582);
        *(_OWORD *)(16 * v582) = *v578;
        v588 = 16 * v582;
        if (v579 == v581)
          goto LABEL_508;
      }
      do
      {
        *(_OWORD *)(v588 - 16) = *((_OWORD *)v579 - 1);
        v588 -= 16;
        v579 -= 16;
      }
      while (v579 != v581);
      v579 = *(char **)v815;
      v589 = &v586[16 * v585];
      v580 = v587 + 16;
      *(_QWORD *)v815 = v588;
      *(_QWORD *)&v815[8] = v587 + 16;
      *(_QWORD *)&v815[16] = v589;
      if (v579)
LABEL_509:
        operator delete(v579);
LABEL_510:
      *(_QWORD *)&v815[8] = v580;
      v591 = (char *)v797 + 16 * v576;
      v592 = *(char **)&v811[8];
      if (*(_QWORD *)&v811[8] < *(_QWORD *)&v811[16])
      {
        **(_OWORD **)&v811[8] = *v591;
        v577 = v592 + 16;
        v10 = v742;
        goto LABEL_489;
      }
      v593 = *(char **)v811;
      v594 = (uint64_t)(*(_QWORD *)&v811[8] - *(_QWORD *)v811) >> 4;
      v595 = v594 + 1;
      if ((unint64_t)(v594 + 1) >> 60)
LABEL_729:
        sub_2394189F8();
      v596 = *(_QWORD *)&v811[16] - *(_QWORD *)v811;
      if ((uint64_t)(*(_QWORD *)&v811[16] - *(_QWORD *)v811) >> 3 > v595)
        v595 = v596 >> 3;
      if ((unint64_t)v596 >= 0x7FFFFFFFFFFFFFF0)
        v597 = 0xFFFFFFFFFFFFFFFLL;
      else
        v597 = v595;
      if (v597)
      {
        if (v597 >> 60)
LABEL_722:
          sub_239418A80();
        v598 = (char *)operator new(16 * v597);
        v599 = &v598[16 * v594];
        *(_OWORD *)v599 = *v591;
        v600 = (uint64_t)v599;
        if (v592 != v593)
        {
LABEL_520:
          v10 = v742;
          do
          {
            *(_OWORD *)(v600 - 16) = *((_OWORD *)v592 - 1);
            v600 -= 16;
            v592 -= 16;
          }
          while (v592 != v593);
          v592 = *(char **)v811;
          v601 = &v598[16 * v597];
          v577 = v599 + 16;
          *(_QWORD *)v811 = v600;
          *(_QWORD *)&v811[16] = v601;
          if (!v592)
          {
LABEL_489:
            *(_QWORD *)&v811[8] = v577;
            goto LABEL_490;
          }
LABEL_526:
          operator delete(v592);
          goto LABEL_489;
        }
      }
      else
      {
        v598 = 0;
        v599 = (char *)(16 * v594);
        *(_OWORD *)(16 * v594) = *v591;
        v600 = 16 * v594;
        if (v592 != v593)
          goto LABEL_520;
      }
      v10 = v742;
      v602 = &v598[16 * v597];
      v577 = v599 + 16;
      *(_QWORD *)v811 = v600;
      *(_QWORD *)&v811[16] = v602;
      if (!v592)
        goto LABEL_489;
      goto LABEL_526;
    }
LABEL_490:
    if (++v576 != v738)
      continue;
    break;
  }
  v750[0] = 0;
  v750[1] = 0;
  *(_QWORD *)v751 = 0;
  v603 = (_QWORD *)a1;
  v604 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v604)
  {
    v605 = operator new(4 * v604);
    v750[0] = v605;
    v750[1] = v605;
    *(_QWORD *)v751 = &v605[v604];
  }
  else
  {
    v605 = 0;
  }
  v606 = *(_QWORD *)(a1 + 32);
  if (v606)
  {
    v607 = 0;
    while (2)
    {
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 24) + ((v607 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v607) & 1) == 0)
        goto LABEL_534;
      if ((unint64_t)v605 < *(_QWORD *)v751)
      {
        *v605 = v607;
        v608 = v605 + 1;
      }
      else
      {
        v609 = v750[0];
        v610 = (char *)v605 - (char *)v750[0];
        v611 = ((char *)v605 - (char *)v750[0]) >> 2;
        v612 = v611 + 1;
        if ((unint64_t)(v611 + 1) >> 62)
          sub_2394189F8();
        v613 = *(_QWORD *)v751 - (unint64_t)v750[0];
        if ((uint64_t)(*(_QWORD *)v751 - (unint64_t)v750[0]) >> 1 > v612)
          v612 = v613 >> 1;
        if ((unint64_t)v613 >= 0x7FFFFFFFFFFFFFFCLL)
          v614 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v614 = v612;
        if (v614)
        {
          if (v614 >> 62)
            sub_239418A80();
          v615 = operator new(4 * v614);
          v616 = &v615[4 * v611];
          *v616 = v607;
          v608 = v616 + 1;
          if (v605 == (_DWORD *)v609)
            goto LABEL_551;
        }
        else
        {
          v615 = 0;
          v616 = (_DWORD *)(4 * v611);
          *(_DWORD *)(4 * v611) = v607;
          v608 = (void *)(4 * v611 + 4);
          if (v605 == (_DWORD *)v609)
            goto LABEL_551;
        }
        v617 = (char *)(v605 - 1) - v609;
        if (v617 >= 0xBC)
        {
          if (&v615[v610 - 4 - (v617 & 0xFFFFFFFFFFFFFFFCLL)] > &v615[v610 - 4])
          {
            v618 = v605;
          }
          else if ((_DWORD *)((char *)v605 - (v617 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v605 - 1)
          {
            v618 = v605;
          }
          else if ((unint64_t)((char *)v605 - v615 - v610) >= 0x20)
          {
            v620 = (v617 >> 2) + 1;
            v621 = 4 * (v620 & 0x7FFFFFFFFFFFFFF8);
            v618 = &v605[v621 / 0xFFFFFFFFFFFFFFFCLL];
            v616 = (_DWORD *)((char *)v616 - v621);
            v622 = &v615[4 * v611 - 16];
            v623 = (__int128 *)(v605 - 4);
            v624 = v620 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v625 = *v623;
              *(v622 - 1) = *(v623 - 1);
              *v622 = v625;
              v622 -= 2;
              v623 -= 2;
              v624 -= 8;
            }
            while (v624);
            if (v620 == (v620 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_551;
          }
          else
          {
            v618 = v605;
          }
        }
        else
        {
          v618 = v605;
        }
        do
        {
          v619 = *--v618;
          *--v616 = v619;
        }
        while (v618 != (_DWORD *)v609);
LABEL_551:
        v750[0] = v616;
        v750[1] = v608;
        *(_QWORD *)v751 = &v615[4 * v614];
        if (v609)
        {
          operator delete(v609);
          v606 = *(_QWORD *)(a1 + 32);
        }
      }
      v750[1] = v608;
      v605 = v608;
LABEL_534:
      if (++v607 >= v606)
      {
        v603 = (_QWORD *)a1;
        v604 = *(unsigned int *)(a1 + 8);
        break;
      }
      continue;
    }
  }
  v764 = 0;
  memptr = 0;
  v765 = 0;
  if (v604)
  {
    v626 = (char *)operator new(16 * v604);
    memptr = v626;
    v764 = v626;
    v765 = &v626[16 * v604];
  }
  else
  {
    v626 = 0;
  }
  v627 = v750[0];
  if (v605 != v750[0])
  {
    v628 = 0;
    while (2)
    {
      v630 = *(unsigned int *)&v627[4 * v628];
      if (v603[4] <= v630 || ((*(_QWORD *)(v603[3] + ((v630 >> 3) & 0x1FFFFFF8)) >> v630) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v631 = (float32x2_t *)(v603[6] + 24 * v630);
      if (!*(_BYTE *)(v725 + 24))
      {
        v640 = v631[2].f32[1];
        _NF = v640 < 0.0;
        if (v640 == 0.0)
          goto LABEL_571;
        v642 = v640;
        if (_NF)
          v642 = 0.0 - v642;
        if (v642 <= 0.00000001)
          goto LABEL_571;
      }
      v632 = vcvtq_f64_f32(*v631);
      if (v626 >= v765)
      {
        v633 = (char *)memptr;
        v634 = (v626 - (_BYTE *)memptr) >> 4;
        v635 = v634 + 1;
        if ((unint64_t)(v634 + 1) >> 60)
          sub_2394189F8();
        v636 = v765 - (_BYTE *)memptr;
        if ((v765 - (_BYTE *)memptr) >> 3 > v635)
          v635 = v636 >> 3;
        if ((unint64_t)v636 >= 0x7FFFFFFFFFFFFFF0)
          v637 = 0xFFFFFFFFFFFFFFFLL;
        else
          v637 = v635;
        if (v637)
        {
          v739 = v632;
          if (v637 >> 60)
            sub_239418A80();
          v638 = (char *)operator new(16 * v637);
          v639 = (float64x2_t *)&v638[16 * v634];
          *v639 = v739;
          f64 = (_OWORD *)v639[1].f64;
          if (v626 == v633)
          {
LABEL_594:
            memptr = v639;
            v764 = f64;
            v765 = &v638[16 * v637];
            v603 = (_QWORD *)a1;
            if (v626)
              operator delete(v626);
LABEL_570:
            v764 = f64;
            v626 = (char *)f64;
            v627 = v750[0];
            v605 = v750[1];
            v10 = v742;
LABEL_571:
            if (++v628 >= (unint64_t)(((char *)v605 - v627) >> 2))
              goto LABEL_596;
            continue;
          }
        }
        else
        {
          v638 = 0;
          v639 = (float64x2_t *)(16 * v634);
          v643 = (float64x2_t *)(16 * v634);
          *v643 = v632;
          f64 = (_OWORD *)v643[1].f64;
          if (v626 == v633)
            goto LABEL_594;
        }
        do
        {
          v639[-1] = *((float64x2_t *)v626 - 1);
          --v639;
          v626 -= 16;
        }
        while (v626 != v633);
        v626 = (char *)memptr;
        goto LABEL_594;
      }
      break;
    }
    *(float64x2_t *)v626 = v632;
    f64 = v626 + 16;
    goto LABEL_570;
  }
LABEL_596:
  v755[0] = 0;
  v755[1] = 0;
  *(_QWORD *)&v756 = 0;
  v644 = *(unsigned int *)(v10 + 8);
  if ((_DWORD)v644)
  {
    v645 = operator new(4 * v644);
    v755[0] = v645;
    v755[1] = v645;
    *(_QWORD *)&v756 = &v645[v644];
  }
  else
  {
    v645 = 0;
  }
  v646 = *(_QWORD *)(v742 + 32);
  if (v646)
  {
    v647 = 0;
    while (2)
    {
      if (((*(_QWORD *)(*(_QWORD *)(v742 + 24) + ((v647 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v647) & 1) == 0)
        goto LABEL_603;
      if ((unint64_t)v645 < (unint64_t)v756)
      {
        *v645 = v647;
        v648 = v645 + 1;
        goto LABEL_602;
      }
      v649 = v755[0];
      v650 = (char *)v645 - (char *)v755[0];
      v651 = ((char *)v645 - (char *)v755[0]) >> 2;
      v652 = v651 + 1;
      if ((unint64_t)(v651 + 1) >> 62)
        sub_2394189F8();
      v653 = v756 - (unint64_t)v755[0];
      if ((uint64_t)(v756 - (unint64_t)v755[0]) >> 1 > v652)
        v652 = v653 >> 1;
      if ((unint64_t)v653 >= 0x7FFFFFFFFFFFFFFCLL)
        v654 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v654 = v652;
      if (v654)
      {
        if (v654 >> 62)
          sub_239418A80();
        v655 = operator new(4 * v654);
        v656 = &v655[4 * v651];
        *v656 = v647;
        v648 = v656 + 1;
        if (v645 != (_DWORD *)v649)
        {
LABEL_615:
          v657 = (char *)(v645 - 1) - v649;
          if (v657 < 0xBC
            || &v655[v650 - 4 - (v657 & 0xFFFFFFFFFFFFFFFCLL)] > &v655[v650 - 4]
            || (_DWORD *)((char *)v645 - (v657 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v645 - 1
            || (unint64_t)((char *)v645 - v655 - v650) < 0x20)
          {
            v658 = v645;
            v659 = v742;
          }
          else
          {
            v661 = (v657 >> 2) + 1;
            v662 = 4 * (v661 & 0x7FFFFFFFFFFFFFF8);
            v658 = &v645[v662 / 0xFFFFFFFFFFFFFFFCLL];
            v656 = (_DWORD *)((char *)v656 - v662);
            v663 = &v655[4 * v651 - 16];
            v664 = (__int128 *)(v645 - 4);
            v665 = v661 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v666 = *v664;
              *(v663 - 1) = *(v664 - 1);
              *v663 = v666;
              v663 -= 2;
              v664 -= 2;
              v665 -= 8;
            }
            while (v665);
            v659 = v742;
            if (v661 == (v661 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_618:
              v755[0] = v656;
              v755[1] = v648;
              *(_QWORD *)&v756 = &v655[4 * v654];
              if (!v649)
              {
LABEL_602:
                v755[1] = v648;
                v645 = v648;
LABEL_603:
                if (++v647 >= v646)
                {
                  v644 = *(unsigned int *)(v742 + 8);
                  goto LABEL_631;
                }
                continue;
              }
LABEL_622:
              operator delete(v649);
              v646 = *(_QWORD *)(v659 + 32);
              goto LABEL_602;
            }
          }
          do
          {
            v660 = *--v658;
            *--v656 = v660;
          }
          while (v658 != (_DWORD *)v649);
          goto LABEL_618;
        }
      }
      else
      {
        v655 = 0;
        v656 = (_DWORD *)(4 * v651);
        *(_DWORD *)(4 * v651) = v647;
        v648 = (void *)(4 * v651 + 4);
        if (v645 != (_DWORD *)v649)
          goto LABEL_615;
      }
      break;
    }
    v659 = v742;
    v755[0] = v656;
    v755[1] = v648;
    *(_QWORD *)&v756 = &v655[4 * v654];
    if (!v649)
      goto LABEL_602;
    goto LABEL_622;
  }
LABEL_631:
  v806[1] = 0;
  v806[0] = 0;
  *(_QWORD *)&v807 = 0;
  if (v644)
  {
    v667 = (float64x2_t *)operator new(16 * v644);
    v806[0] = v667;
    v806[1] = v667;
    *(_QWORD *)&v807 = &v667[v644];
  }
  else
  {
    v667 = 0;
  }
  v668 = v755[0];
  if (v645 != v755[0])
  {
    v669 = 0;
    while (2)
    {
      v671 = *(unsigned int *)&v668[4 * v669];
      if (*(_QWORD *)(v742 + 32) <= v671
        || ((*(_QWORD *)(*(_QWORD *)(v742 + 24) + ((v671 >> 3) & 0x1FFFFFF8)) >> v671) & 1) == 0)
      {
        sub_239A444D4((uint64_t)"unknown file", 110, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      v672 = (float32x2_t *)(*(_QWORD *)(v742 + 48) + 24 * v671);
      if (!*(_BYTE *)(v725 + 24))
      {
        v681 = v672[2].f32[1];
        v682 = v681 < 0.0;
        if (v681 == 0.0)
          goto LABEL_638;
        v683 = v681;
        if (v682)
          v683 = 0.0 - v683;
        if (v683 <= 0.00000001)
          goto LABEL_638;
      }
      v673 = vcvtq_f64_f32(*v672);
      if ((unint64_t)v667 >= (unint64_t)v807)
      {
        v674 = (float64x2_t *)v806[0];
        v675 = ((char *)v667 - (char *)v806[0]) >> 4;
        v676 = v675 + 1;
        if ((unint64_t)(v675 + 1) >> 60)
          sub_2394189F8();
        v677 = v807 - (unint64_t)v806[0];
        if ((uint64_t)(v807 - (unint64_t)v806[0]) >> 3 > v676)
          v676 = v677 >> 3;
        if ((unint64_t)v677 >= 0x7FFFFFFFFFFFFFF0)
          v678 = 0xFFFFFFFFFFFFFFFLL;
        else
          v678 = v676;
        if (v678)
        {
          v741 = v673;
          if (v678 >> 60)
            sub_239418A80();
          v679 = (char *)operator new(16 * v678);
          v680 = (float64x2_t *)&v679[16 * v675];
          *v680 = v741;
          v670 = v680 + 1;
          if (v667 == v674)
          {
LABEL_661:
            v806[0] = v680;
            v806[1] = v670;
            *(_QWORD *)&v807 = &v679[16 * v678];
            if (v667)
              operator delete(v667);
LABEL_637:
            v806[1] = v670;
            v667 = v670;
            v668 = v755[0];
            v645 = v755[1];
LABEL_638:
            if (++v669 >= (unint64_t)(((char *)v645 - v668) >> 2))
              goto LABEL_663;
            continue;
          }
        }
        else
        {
          v679 = 0;
          v680 = (float64x2_t *)(16 * v675);
          v684 = (float64x2_t *)(16 * v675);
          *v684 = v673;
          v670 = v684 + 1;
          if (v667 == v674)
            goto LABEL_661;
        }
        do
        {
          v680[-1] = v667[-1];
          --v680;
          --v667;
        }
        while (v667 != v674);
        v667 = (float64x2_t *)v806[0];
        goto LABEL_661;
      }
      break;
    }
    *v667 = v673;
    v670 = v667 + 1;
    goto LABEL_637;
  }
LABEL_663:
  v685 = sub_23943680C((uint64_t)&memptr, 0.0);
  v686 = sub_23943680C((uint64_t)v806, 0.0);
  v687 = sub_23943680C((uint64_t)v815, 0.0);
  v688 = sub_23943680C((uint64_t)v811, 0.0);
  v689 = v687 / v685;
  *(float *)&v688 = v688 / v686;
  *(float *)(a7 + 128) = (float)(v689 + *(float *)&v688) * 0.5;
  v690 = *(double *)(v725 + 48);
  v691 = v690 <= *(float *)&v688 || v690 <= v689;
  if (v806[0])
  {
    v806[1] = v806[0];
    operator delete(v806[0]);
  }
  if (v755[0])
  {
    v755[1] = v755[0];
    operator delete(v755[0]);
  }
  if (memptr)
  {
    v764 = memptr;
    operator delete(memptr);
  }
  if (v750[0])
  {
    v750[1] = v750[0];
    operator delete(v750[0]);
  }
  if (*(_QWORD *)v767)
    operator delete(*(void **)v767);
  if (*(_QWORD *)v811)
    operator delete(*(void **)v811);
  if (*(_QWORD *)v815)
  {
    *(_QWORD *)&v815[8] = *(_QWORD *)v815;
    operator delete(*(void **)v815);
  }
  if (v691)
  {
LABEL_681:
    v249 = 1;
    goto LABEL_682;
  }
LABEL_697:
  v249 = 0;
  v574 = v777;
  if (v777)
    goto LABEL_683;
LABEL_684:
  if (v788)
    operator delete(v788);
  if (v791)
  {
    v792 = v791;
    operator delete(v791);
  }
  if (v794)
  {
    v795 = v794;
    operator delete(v794);
  }
  if (v797)
  {
    v798 = (char *)v797;
    operator delete(v797);
  }
  if (v800)
  {
    v801 = (char *)v800;
    operator delete(v800);
  }
  v196 = (float *)v803;
  if (v803)
  {
LABEL_695:
    v804 = v196;
    operator delete(v196);
  }
  return v249;
}

void sub_23943D5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;

  v68 = (void *)STACK[0x490];
  if (STACK[0x490])
  {
    STACK[0x498] = (unint64_t)v68;
    operator delete(v68);
    v69 = a67;
    if (!a67)
    {
LABEL_3:
      v70 = (void *)STACK[0x248];
      if (!STACK[0x248])
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v69 = a67;
    if (!a67)
      goto LABEL_3;
  }
  operator delete(v69);
  v70 = (void *)STACK[0x248];
  if (!STACK[0x248])
  {
LABEL_4:
    v71 = a53;
    if (!a53)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  STACK[0x250] = (unint64_t)v70;
  operator delete(v70);
  v71 = a53;
  if (!a53)
  {
LABEL_5:
    v72 = (void *)STACK[0x290];
    if (!STACK[0x290])
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v71);
  v72 = (void *)STACK[0x290];
  if (!STACK[0x290])
  {
LABEL_6:
    v73 = (void *)STACK[0x4D0];
    if (!STACK[0x4D0])
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v72);
  v73 = (void *)STACK[0x4D0];
  if (!STACK[0x4D0])
  {
LABEL_7:
    v74 = (void *)STACK[0x560];
    if (!STACK[0x560])
    {
LABEL_16:
      if (STACK[0x368])
      {
        operator delete((void *)STACK[0x368]);
        v75 = (void *)STACK[0x400];
        if (!STACK[0x400])
        {
LABEL_18:
          v76 = (void *)STACK[0x418];
          if (!STACK[0x418])
          {
LABEL_23:
            v77 = (void *)STACK[0x430];
            if (STACK[0x430])
            {
              STACK[0x438] = (unint64_t)v77;
              operator delete(v77);
            }
            v78 = (void *)STACK[0x448];
            if (STACK[0x448])
            {
              STACK[0x450] = (unint64_t)v78;
              operator delete(v78);
            }
            v79 = (void *)STACK[0x460];
            if (STACK[0x460])
            {
              STACK[0x468] = (unint64_t)v79;
              operator delete(v79);
            }
            v80 = (void *)STACK[0x478];
            if (!STACK[0x478])
              _Unwind_Resume(a1);
            STACK[0x480] = (unint64_t)v80;
            operator delete(v80);
            _Unwind_Resume(a1);
          }
LABEL_22:
          STACK[0x420] = (unint64_t)v76;
          operator delete(v76);
          goto LABEL_23;
        }
      }
      else
      {
        v75 = (void *)STACK[0x400];
        if (!STACK[0x400])
          goto LABEL_18;
      }
      operator delete(v75);
      v76 = (void *)STACK[0x418];
      if (!STACK[0x418])
        goto LABEL_23;
      goto LABEL_22;
    }
LABEL_15:
    STACK[0x568] = (unint64_t)v74;
    operator delete(v74);
    goto LABEL_16;
  }
LABEL_14:
  STACK[0x4D8] = (unint64_t)v73;
  operator delete(v73);
  v74 = (void *)STACK[0x560];
  if (!STACK[0x560])
    goto LABEL_16;
  goto LABEL_15;
}

_QWORD *sub_23943DAF4(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[17];
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = (void *)a1[15];
  a1[15] = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

uint64_t sub_23943DB4C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, double *a5)
{
  unint64_t v5;
  uint64_t v7;
  double v12;
  unsigned int v13;
  unint64_t v14;
  double v15;
  BOOL v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  int v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;

  v5 = (uint64_t)(a1[1] - *a1) >> 4;
  if (v5 != (uint64_t)(a2[1] - *a2) >> 4 || v5 < *((_QWORD *)a5 + 1))
    return 0;
  sub_23945E85C((uint64_t)&v25, (uint64_t)a1, (uint64_t)a2, a5[3]);
  v12 = *a5;
  v20 = *((_OWORD *)a5 + 2);
  v21 = 4;
  v22 = v12;
  v39 = 0;
  sub_239454CD8(&v39, (uint64_t)&v23);
  v13 = sub_23945E2AC((uint64_t)&v39, (uint64_t)&v20, (uint64_t)&v25, a4);
  v14 = (uint64_t)(a1[1] - *a1) >> 4;
  v15 = (double)v13 / (double)v14;
  if (*((_QWORD *)a5 + 2) < v14)
    v14 = *((_QWORD *)a5 + 2);
  v16 = v15 < a5[6] || v14 > v13;
  v7 = !v16;
  if (!v16)
  {
    v17 = v27;
    v18 = v29;
    *(_OWORD *)(a3 + 32) = v28;
    *(_OWORD *)(a3 + 48) = v18;
    *(_QWORD *)(a3 + 64) = v30;
    *(_OWORD *)a3 = v26;
    *(_OWORD *)(a3 + 16) = v17;
  }
  sub_239911CF8((uint64_t)&v24);
  v25 = &off_250ADBB78;
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  return v7;
}

void sub_23943DCCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_239911CF8(v1 + 2536);
  sub_23945E7F0((_QWORD *)(v2 - 240));
  _Unwind_Resume(a1);
}

void sub_23943DCE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_23945E7F0((_QWORD *)(v1 - 240));
  _Unwind_Resume(a1);
}

void sub_23943DCFC(__int128 *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v7;
  double v14;
  double v16;
  float64x2_t v18;
  float64x2_t v23;
  double v28;
  double v29;
  double v31;
  float64x2_t v34;
  double v36;
  float64x2_t v37;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v46;
  float64x2_t v48;
  double v49;
  float64x2_t v51;
  double v52;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64_t v64;
  float64x2_t v65;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  char *v81;
  double v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  float64_t v87;
  BOOL v88;
  double v89;
  int v90;
  float64_t v91;
  float64_t v92;
  BOOL v93;
  double v94;
  float64_t v95;
  BOOL v96;
  double v97;
  uint64_t v98;
  double v99;
  double v100;
  BOOL v101;
  double v102;
  double v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v115;
  double v118;
  float64x2_t v122;
  float64x2_t v124;
  double v126;
  float64x2_t v127;
  float64x2_t v128;
  double v130;
  float64x2_t v131;
  float64x2_t v132;
  double v134;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v142;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  _QWORD *v153;
  char *v154;
  double *v155;
  _QWORD *v156;
  double *v157;
  uint64_t v158;
  double v160;
  double v163;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  double v178;
  double v180;
  double v181;
  double v182;
  int8x16_t v184;
  double v185;
  unint64_t v187;
  void *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  unint64_t v194;
  int64x2_t *v195;
  char *v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v206;
  uint64_t v207;
  void *__src;
  unint64_t v209;
  unint64_t v210;
  void *__p;
  unint64_t v212;
  unint64_t v213;
  float64x2_t v214;
  float64_t v215;
  float64x2_t v216;
  uint64_t v217;
  float64x2_t v218;
  float64_t v219;
  float64x2_t v220;
  uint64_t v221;
  float64x2_t v222;
  double v223;
  float64x2_t v224;
  float64_t v225;
  float64x2_t v226;
  double v227;
  float64x2_t v228;
  double v229;
  float64x2_t v230;
  float64_t v231;
  float64x2_t v232;
  double v233;
  float64x2_t v234;
  float64_t v235;
  float64x2_t v236;
  double v237;
  float64x2_t v238;
  double v239;
  float64x2_t v240;
  float64_t v241;
  float64x2_t v242;
  double v243;
  float64x2_t v244;
  double v245;
  double v246;
  double v247;
  double v248;
  float64x2_t v249;
  double v250;
  float64x2_t v251;
  double v252;
  float64x2_t v253;
  float64_t v254;
  void *v255[6];
  void *v256;
  float64x2_t v257;
  _BYTE v258[32];
  float64x2_t v259;
  double v260;

  v206 = *a3;
  v207 = a3[1];
  v7 = (v207 - *a3) >> 4;
  if (v7 != (uint64_t)(a4[1] - *a4) >> 4)
    sub_239EBEFD8();
  if (v7 != *(_QWORD *)(a5 + 8))
    sub_23941C5D8(a5, v7, 1uLL);
  sub_239A22B38((uint64_t)&v222);
  _D2 = v225;
  _Q7 = *a1;
  v14 = *((double *)a1 + 5);
  _Q17 = *(float64x2_t *)((char *)a1 + 24);
  v16 = *((double *)a1 + 8);
  _Q19 = (float64x2_t)a1[3];
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, *(double *)a1), v224, *(float64x2_t *)a1, 1), v226, *((double *)a1 + 2));
  __asm { FMLA            D21, D2, V7.D[1] }
  v23 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q17.f64[0]), v224, _Q17, 1), v226, v14);
  __asm { FMLA            D21, D2, V17.D[1] }
  _D16 = _D21 + v227 * v14;
  _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v222, _Q19.f64[0]), v224, _Q19, 1), v226, v16);
  __asm { FMLA            D1, D2, V19.D[1] }
  v28 = _D1 + v227 * v16;
  v29 = *((double *)a2 + 2);
  _Q3 = *a2;
  v31 = *((double *)a2 + 5);
  _Q5 = *(float64x2_t *)((char *)a2 + 24);
  _Q17.f64[0] = *((float64_t *)a2 + 8);
  _Q18 = (float64x2_t)a2[3];
  v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, *(double *)a2), v23, *(float64x2_t *)a2, 1), _Q0, v29);
  __asm { FMLA            D21, D16, V3.D[1] }
  v36 = _D21 + v28 * v29;
  v37 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, _Q5.f64[0]), v23, _Q5, 1), _Q0, v31);
  __asm { FMLA            D21, D16, V5.D[1] }
  v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, _Q18.f64[0]), v23, _Q18, 1), _Q0, _Q17.f64[0]);
  __asm { FMLA            D0, D16, V18.D[1] }
  v257 = v34;
  *(float64x2_t *)&v258[8] = v37;
  *(double *)v258 = v36;
  *(double *)&v258[24] = _D21 + v28 * v31;
  v259 = v39;
  v260 = _Q0.f64[0] + v28 * _Q17.f64[0];
  sub_23945DAB0((uint64_t)v255, (uint64_t)&v257, 3);
  v41.f64[0] = *((float64_t *)v256 + 1);
  v42.f64[0] = v260;
  v43 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41.f64[0], 0);
  v44 = vdivq_f64(v42, v41);
  _Q1 = vdivq_f64(v259, v43);
  v46 = vdivq_f64(*(float64x2_t *)&v258[16], v43);
  _Q2 = vdivq_f64(*(float64x2_t *)v258, v43);
  v48 = vdivq_f64(v257, v43);
  *(_QWORD *)&v49 = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
  *(_QWORD *)&_D4 = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
  *(_QWORD *)&v51.f64[0] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
  *(_QWORD *)&v52 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
  v257 = v48;
  *(float64x2_t *)v258 = _Q2;
  *(float64x2_t *)&v258[16] = v46;
  v259 = _Q1;
  v260 = v44.f64[0];
  _D19 = _Q2.f64[1];
  __asm { FMLA            D20, D19, V1.D[1] }
  if (_D20 * _Q2.f64[0]
     + vmlad_n_f64(vmuld_lane_f64(-v46.f64[1], _Q1, 1), v46.f64[0], v44.f64[0]) * v48.f64[0]
     - vmuld_lane_f64(vmlad_n_f64(-v46.f64[1] * _Q1.f64[0], _Q2.f64[1], v44.f64[0]), v48, 1) < 0.0)
  {
    v48.f64[1] = v52;
    v48 = vnegq_f64(v48);
    *(_QWORD *)&v52 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
    _Q2.f64[1] = v51.f64[0];
    _Q2 = vnegq_f64(_Q2);
    *(_QWORD *)&v51.f64[0] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    v46.f64[1] = _D4;
    v46 = vnegq_f64(v46);
    *(_QWORD *)&_D4 = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
    _Q1.f64[1] = v49;
    _Q1 = vnegq_f64(_Q1);
    *(_QWORD *)&v49 = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
    v257 = v48;
    *(float64x2_t *)v258 = _Q2;
    v44 = vnegq_f64(v44);
    *(float64x2_t *)&v258[16] = v46;
    v259 = _Q1;
    v260 = v44.f64[0];
  }
  v55.f64[0] = v46.f64[0];
  v55.f64[1] = _D4;
  v56.f64[0] = v48.f64[0];
  v56.f64[1] = v52;
  v57.f64[0] = _Q2.f64[0];
  v57.f64[1] = v51.f64[0];
  v58.f64[0] = _Q1.f64[0];
  v58.f64[1] = v49;
  *(_QWORD *)&v59.f64[0] = *(_OWORD *)&vabsq_f64(v44);
  v59.f64[1] = NAN;
  v60 = vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v56), v59), vabsq_f64(v55)), vmaxnmq_f64(vabsq_f64(v57), vabsq_f64(v58)));
  if (vmaxnmvq_f64(v60) >= 0.001)
  {
    v61.f64[0] = _Q1.f64[0];
    v61.f64[1] = v49;
    v62.f64[0] = v48.f64[0];
    v62.f64[1] = v51.f64[0];
    v63.f64[0] = v52;
    v63.f64[1] = v46.f64[0];
    v64 = _Q2.f64[0];
    v74.f64[1] = _D4;
    v65 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, v48.f64[0]), v63, v52), v74, _Q2.f64[0]);
    v60.f64[0] = _Q1.f64[0] * v48.f64[0] + v49 * v52 + v44.f64[0] * _Q2.f64[0];
    v75 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, v51.f64[0]), v63, v46.f64[0]), v74, _D4);
    _Q25.f64[0] = _Q1.f64[0] * v51.f64[0] + v49 * v46.f64[0] + v44.f64[0] * _D4;
    _Q24 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v62, _Q1.f64[0]), v63, v49), v74, v44.f64[0]);
    v62.f64[0] = vmulq_f64(v61, v61).f64[0] + v49 * v49 + v44.f64[0] * v44.f64[0];
    v68 = vaddq_f64(v65, (float64x2_t)xmmword_239EC6820);
    v69 = vaddq_f64(v75, (float64x2_t)xmmword_239EC6830);
    __asm { FMOV            V20.2D, #-1.0 }
    v71 = vaddq_f64(v62, _Q20);
    v249 = v68;
    v250 = v60.f64[0];
    v252 = _Q25.f64[0];
    v251 = v69;
    v253 = _Q24;
    v254 = v71.f64[0];
    v72 = v69.f64[1];
    v73.f64[0] = -v68.f64[0];
    v74.f64[0] = vmlad_n_f64(-v68.f64[0] * v71.f64[0], v60.f64[0], _Q24.f64[0]);
    v75.f64[0] = vmlad_n_f64(vmuld_lane_f64(-v68.f64[0], v69, 1), v68.f64[1], v69.f64[0]);
    v76 = sqrt(v74.f64[0]);
    v77 = -v68.f64[1];
    v78 = fabs(v68.f64[0]);
    v79 = fabs(v69.f64[1]);
    v80 = fabs(v71.f64[0]);
    v81 = (char *)&v247;
    v246 = v78;
    v247 = v79;
    v248 = v80;
    if (v78 >= v79)
      v81 = (char *)&v246;
    else
      v78 = v79;
    if (v78 < v80)
      v81 = (char *)&v248;
    __asm { FMLA            D20, D25, V24.D[1] }
    v83 = sqrt(_D20);
    v84 = v81 - (char *)&v246;
    v85 = v84 >> 3;
    v203 = a6;
    v204 = a5;
    if (v84 >> 3 == 2)
    {
      v95 = v71.f64[0] * v77 + _Q24.f64[1] * v60.f64[0];
      _NF = v95 < 0.0;
      v96 = v95 <= 0.0;
      v97 = 0.0;
      if (_NF)
        v97 = -1.0;
      if (!v96)
        v97 = 1.0;
      v73.f64[0] = _Q24.f64[0] + (double)(int)v97 * v76;
      _Q25.f64[0] = _Q24.f64[0] - (double)(int)v97 * v76;
      v86 = _Q24.f64[1] + v83;
      _Q24.f64[0] = _Q24.f64[1] - v83;
      v69.f64[0] = v71.f64[0];
      v60.f64[0] = v71.f64[0];
    }
    else
    {
      v86 = sqrt(v75.f64[0]);
      if (v85 == 1)
      {
        v92 = _Q25.f64[0] * v77 + v69.f64[1] * v60.f64[0];
        _NF = v92 < 0.0;
        v93 = v92 <= 0.0;
        v94 = 0.0;
        if (_NF)
          v94 = -1.0;
        if (!v93)
          v94 = 1.0;
        v73.f64[0] = v69.f64[0] + v86;
        _Q25.f64[0] = v69.f64[0] - v86;
        v69.f64[0] = _Q24.f64[1] - (double)(int)v94 * v83;
        v60.f64[0] = _Q24.f64[1] + (double)(int)v94 * v83;
        v86 = v69.f64[1];
        _Q24.f64[0] = v69.f64[1];
      }
      else if (!v85)
      {
        v40 = (float64x2_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL);
        v87 = _Q25.f64[0] * v73.f64[0] + v69.f64[0] * v60.f64[0];
        _NF = v87 < 0.0;
        v88 = v87 <= 0.0;
        v89 = 0.0;
        if (_NF)
          v89 = -1.0;
        if (!v88)
          v89 = 1.0;
        v90 = (int)v89;
        _Q25.f64[0] = v68.f64[0];
        v73.f64[0] = v68.f64[0];
        v73.f64[1] = v69.f64[0] + v86;
        _Q25.f64[1] = v69.f64[0] - v86;
        *(_QWORD *)&v86 = vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL).u64[0];
        v69.f64[1] = v60.f64[1];
        v69.f64[0] = _Q24.f64[0] + (double)v90 * v76;
        v91 = _Q24.f64[0] - (double)v90 * v76;
        *(_QWORD *)&_Q24.f64[0] = vextq_s8((int8x16_t)_Q25, (int8x16_t)_Q25, 8uLL).u64[0];
        v60.f64[0] = v91;
      }
    }
    v98 = 0;
    v68.f64[0] = v71.f64[0] + v72 + v68.f64[0];
    v99 = sqrt(v68.f64[0] + 1.0 - _D20 - v74.f64[0] - v75.f64[0]);
    v74.f64[0] = v99 + v99;
    v100 = v249.f64[((unint64_t)v84 >> 1)];
    _NF = v100 < 0.0;
    v101 = v100 <= 0.0;
    v102 = 0.0;
    if (_NF)
      v102 = -1.0;
    if (v101)
      v75.f64[0] = v102;
    else
      v75.f64[0] = 1.0;
    v68.f64[0] = v68.f64[0] + 2.0;
    v103 = sqrt(v68.f64[0] + v74.f64[0]);
    v73.f64[1] = v86;
    v68.f64[0] = sqrt(v68.f64[0] - v74.f64[0]);
    v104 = vmulq_f64(v73, v73);
    v104.f64[0] = 1.0 / sqrt(v104.f64[0] + v86 * v86 + v69.f64[0] * v69.f64[0]);
    v105 = vmulq_n_f64(v73, v104.f64[0]);
    v106 = vmulq_f64(v69, v104);
    _Q25.f64[1] = _Q24.f64[0];
    v71.f64[0] = 1.0 / sqrt(vmulq_f64(_Q25, _Q25).f64[0] + _Q24.f64[0] * _Q24.f64[0] + v60.f64[0] * v60.f64[0]);
    v107 = vmulq_n_f64(_Q25, v71.f64[0]);
    v108 = vmulq_f64(v60, v71);
    v60.f64[0] = v68.f64[0] * 0.5;
    v75.f64[0] = v103 * v75.f64[0];
    v109 = vmlsq_f64(vmulq_f64(v75, v108), v68, v106);
    _Q29 = vmulq_n_f64(vmlsq_lane_f64(vmulq_n_f64(v107, v75.f64[0]), v105, v68.f64[0], 0), v68.f64[0] * 0.5);
    v111 = vmulq_f64(v60, v109);
    v112 = vmulq_n_f64(v105, v75.f64[0]);
    v113 = vmlsq_f64(vmulq_f64(v106, v75), v68, v108);
    _Q18 = vmulq_n_f64(vmlsq_lane_f64(v112, v107, v68.f64[0], 0), v68.f64[0] * 0.5);
    v115 = vmulq_f64(v60, v113);
    v40.f64[0] = 2.0 / v74.f64[0];
    _Q23 = vmulq_f64(v40, v111);
    _Q24 = vmulq_n_f64(_Q29, 2.0 / v74.f64[0]);
    v74.f64[0] = vmuld_n_f64(_Q23.f64[0], v105.f64[0]);
    v109.f64[0] = vmuld_lane_f64(_Q23.f64[0], v105, 1);
    *(_QWORD *)&v118 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v74);
    _Q8 = vmlsq_lane_f64((float64x2_t)xmmword_239EC6840, _Q24, v105.f64[0], 0);
    *(_QWORD *)&v109.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v109);
    _Q9 = vmlsq_laneq_f64((float64x2_t)xmmword_239EC6850, _Q24, v105, 1);
    __asm { FMOV            V12.2D, #1.0 }
    v122 = vmlsq_f64(_Q12, _Q23, v106);
    _Q1.f64[1] = v49;
    _Q10 = vmlsq_lane_f64((float64x2_t)0, _Q24, v106.f64[0], 0);
    v48.f64[1] = v52;
    v51.f64[1] = v46.f64[0];
    v124 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q8.f64[0]), v51, _Q8, 1), _Q1, v118);
    __asm { FMLA            D6, D4, V8.D[1] }
    v126 = vmlad_n_f64(_D6, v44.f64[0], v118);
    v127 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q9.f64[0]), v51, _Q9, 1), _Q1, v109.f64[0]);
    __asm { FMLA            D23, D4, V9.D[1] }
    _Q23.f64[0] = vmlad_n_f64(_Q23.f64[0], v44.f64[0], v109.f64[0]);
    v128 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q10.f64[0]), v51, _Q10, 1), _Q1, v122.f64[0]);
    __asm { FMLA            D27, D4, V10.D[1] }
    v130 = vmlad_n_f64(_D27, v44.f64[0], v122.f64[0]);
    v131 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v124, _Q29.f64[0]), v127, _Q29, 1), v128, v111.f64[0]);
    __asm { FMLA            D24, D23, V29.D[1] }
    _Q24.f64[0] = vmlad_n_f64(_Q24.f64[0], v130, v111.f64[0]);
    v132 = vmulq_f64(v40, v115);
    _Q29 = vmulq_n_f64(_Q18, v40.f64[0]);
    v40.f64[0] = vmuld_n_f64(v132.f64[0], v107.f64[0]);
    v122.f64[0] = vmuld_lane_f64(v132.f64[0], v107, 1);
    *(_QWORD *)&v134 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v40);
    _Q26 = vmlsq_lane_f64((float64x2_t)xmmword_239EC6840, _Q29, v107.f64[0], 0);
    *(_QWORD *)&v122.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v122);
    _Q22 = vmlsq_laneq_f64((float64x2_t)xmmword_239EC6850, _Q29, v107, 1);
    *(_QWORD *)&v107.f64[0] = *(_OWORD *)&vmlsq_f64(_Q12, v132, v108);
    _Q28 = vmlsq_lane_f64((float64x2_t)0, _Q29, v108.f64[0], 0);
    v138 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q26.f64[0]), v51, _Q26, 1), _Q1, v134);
    __asm { FMLA            D29, D4, V26.D[1] }
    _Q29.f64[0] = vmlad_n_f64(_Q29.f64[0], v44.f64[0], v134);
    v139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q22.f64[0]), v51, _Q22, 1), _Q1, v122.f64[0]);
    __asm { FMLA            D30, D4, V22.D[1] }
    _D30 = vmlad_n_f64(_D30, v44.f64[0], v122.f64[0]);
    v142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q28.f64[0]), v51, _Q28, 1), _Q1, v107.f64[0]);
    __asm { FMLA            D1, D4, V28.D[1] }
    v222 = v124;
    v224 = v127;
    v223 = v126;
    v225 = _Q23.f64[0];
    v226 = v128;
    v228 = v124;
    v227 = v130;
    v229 = v126;
    v230 = v127;
    v232 = v128;
    v231 = _Q23.f64[0];
    v233 = v130;
    v234 = v138;
    __asm { FMLA            D2, D30, V18.D[1] }
    v236 = v139;
    v235 = _Q29.f64[0];
    v237 = _D30;
    v238 = v142;
    v240 = v138;
    v239 = vmlad_n_f64(_D1, v44.f64[0], v107.f64[0]);
    v241 = _Q29.f64[0];
    v242 = v139;
    v244 = v142;
    v243 = _D30;
    v245 = v239;
    v214 = v131;
    v215 = _Q24.f64[0];
    v216 = vnegq_f64(v131);
    v217 = *(_OWORD *)&vnegq_f64(_Q24);
    v218 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q18.f64[0]), v139, _Q18, 1), v142, v115.f64[0]);
    _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v239, v115.f64[0]);
    v219 = _Q2.f64[0];
    v220 = vnegq_f64(v218);
    v221 = *(_OWORD *)&vnegq_f64(_Q2);
    v144 = -1;
    __p = 0;
    v212 = 0;
    v213 = 0;
    v145 = -1;
    do
    {
      v147 = *a3;
      v146 = a3[1];
      v209 = 0;
      v210 = 0;
      __src = 0;
      v148 = v146 - v147;
      if (v148)
      {
        if (v148 < 0)
          sub_2394189F8();
        v149 = v148 >> 4;
        v150 = ((unint64_t)((v148 >> 4) - 1) >> 6) + 1;
        __src = operator new(8 * v150);
        v209 = 0;
        v210 = v150;
        sub_23942D8C8(&__src, v149, 0);
      }
      if (v207 == v206)
      {
        v151 = 0;
      }
      else
      {
        v151 = 0;
        v152 = 0;
        v153 = *(_QWORD **)v204;
        v154 = (char *)&v222 + 72 * v98;
        v155 = &v214.f64[3 * v98];
        v156 = __src;
        v157 = (double *)(*a3 + 8);
        v158 = *a4 + 8;
        do
        {
          if ((v153[v152 >> 6] & (1 << v152)) != 0)
          {
            _Q2.f64[0] = v155[1];
            v160 = v155[2];
            _Q2.f64[1] = -*v155;
            _Q4.f64[0] = *((float64_t *)v154 + 2);
            _Q7 = *(float64x2_t *)(v154 + 24);
            v163 = *((double *)v154 + 8);
            _Q16 = *((float64x2_t *)v154 + 3);
            v165.f64[0] = 0.0;
            v165.f64[1] = v160;
            v166 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v165, *(double *)v154), (float64x2_t)COERCE_UNSIGNED_INT64(-v160), *(float64x2_t *)v154, 1), _Q2, _Q4.f64[0]);
            v167 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v165, _Q7.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v160), _Q7, 1), _Q2, *((double *)v154 + 5));
            v168 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v165, _Q16.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v160), _Q16, 1), _Q2, v163);
            v169.f64[0] = *(v157 - 1);
            _Q2.f64[0] = *v157;
            v170 = *(float64x2_t *)(v158 - 8);
            v171.f64[0] = _Q12.f64[0];
            v171.f64[1] = v170.f64[0];
            v172 = vaddq_f64(v168, vmlaq_n_f64(vmulq_n_f64(v166, v169.f64[0]), v167, *v157));
            v166.f64[0] = 0.0;
            v166.f64[1] = v172.f64[0];
            *(_QWORD *)&v167.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v170, v172, 1), v172, v170, 1);
            v173 = vmlsq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v170, (int8x16_t)_Q12, 8uLL), v166), v171, (float64x2_t)vextq_s8((int8x16_t)v172, (int8x16_t)0, 8uLL));
            _Q4.f64[1] = *((float64_t *)v154 + 5);
            _Q17 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v154, (int64x2_t)_Q7), v173.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v154, (int64x2_t)_Q7), v173, 1), _Q4, v167.f64[0]);
            _D5 = v173.f64[1];
            __asm { FMLA            D4, D5, V16.D[1] }
            _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v163, v167.f64[0]);
            _Q6 = *(_OWORD *)v155;
            __asm { FMLA            D3, D5, V6.D[1] }
            v178 = vmlad_n_f64(_D3, v160, v167.f64[0]);
            __asm { FMLA            D5, D2, V17.D[1] }
            v180 = -(_Q4.f64[0] + _D5);
            v181 = v178 / v180;
            _Q16.f64[0] = v155[1];
            __asm { FMLA            D7, D16, V6.D[1] }
            v182 = sqrt(_Q7.f64[0] + v160 * v160) * 10000.0;
            if (v178 / v180 >= 2.22044605e-16 && v181 <= v182)
            {
              v169.f64[1] = *v157;
              v184 = (int8x16_t)vmulq_n_f64(v169, v178);
              v185 = v160
                   + *((double *)v154 + 2) * (*(double *)v184.i64 / v180)
                   + *((double *)v154 + 5) * (*(double *)vextq_s8(v184, v184, 8uLL).i64 / v180)
                   + *((double *)v154 + 8) * v181;
              _NF = v185 > 2.22044605e-16 && v185 < v182;
              if (_NF)
              {
                ++v151;
                v156[v152 >> 6] |= 1 << v152;
              }
            }
          }
          ++v152;
          v157 += 2;
          v158 += 16;
        }
        while (v7 != v152);
      }
      if (v151 >= v144)
      {
        v187 = v209;
        if (v209)
        {
          v188 = __p;
          if (v209 <= v213 << 6)
          {
            v189 = v209 - 1;
          }
          else
          {
            if (__p)
            {
              operator delete(__p);
              __p = 0;
              v212 = 0;
              v213 = 0;
              v187 = v209;
            }
            if ((v187 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v189 = v187 - 1;
            v190 = ((v187 - 1) >> 6) + 1;
            v188 = operator new(8 * v190);
            __p = v188;
            v212 = 0;
            v213 = v190;
          }
          memmove(v188, __src, ((v189 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v187 = v209;
        }
        v212 = v187;
        v145 = v98;
        v144 = v151;
      }
      if (__src)
        operator delete(__src);
      ++v98;
    }
    while (v98 != 4);
    if (&__p != (void **)v204)
    {
      v191 = v212;
      if (v212)
      {
        v192 = *(_QWORD **)v204;
        if (v212 <= *(_QWORD *)(v204 + 16) << 6)
        {
          v193 = v212 - 1;
        }
        else
        {
          if (v192)
          {
            operator delete(v192);
            *(_QWORD *)v204 = 0;
            *(_QWORD *)(v204 + 8) = 0;
            *(_QWORD *)(v204 + 16) = 0;
            v191 = v212;
          }
          if ((v191 & 0x8000000000000000) != 0)
            sub_2394189F8();
          v193 = v191 - 1;
          v194 = ((v191 - 1) >> 6) + 1;
          v192 = operator new(8 * v194);
          *(_QWORD *)v204 = v192;
          *(_QWORD *)(v204 + 8) = 0;
          *(_QWORD *)(v204 + 16) = v194;
        }
        memmove(v192, __p, ((v193 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
        v191 = v212;
      }
      *(_QWORD *)(v204 + 8) = v191;
    }
    v195 = (int64x2_t *)((char *)&v222 + 72 * v145);
    v196 = (char *)&v214 + 24 * v145;
    v197 = v195[2];
    v198 = *v195;
    v199 = vzip1q_s64(vdupq_laneq_s64(v195[1], 1), v197);
    v200 = v195[1].i64[0];
    v201 = v195[2].i64[1];
    v197.i64[0] = v195[4].i64[0];
    *(int64x2_t *)(v203 + 64) = v195[3];
    *(int64x2_t *)(v203 + 80) = v197;
    *(int64x2_t *)v203 = v198;
    *(_OWORD *)(v203 + 16) = (unint64_t)v200;
    *(int64x2_t *)(v203 + 32) = v199;
    *(_OWORD *)(v203 + 48) = (unint64_t)v201;
    v202 = *((_QWORD *)v196 + 2);
    *(_OWORD *)(v203 + 96) = *(_OWORD *)v196;
    *(_QWORD *)(v203 + 112) = v202;
    *(_QWORD *)(v203 + 120) = 0x3FF0000000000000;
    if (__p)
      operator delete(__p);
  }
  else
  {
    *(float64x2_t *)a6 = v48;
    *(_OWORD *)(a6 + 16) = *(unint64_t *)&_Q2.f64[0];
    *(float64x2_t *)(a6 + 64) = _Q1;
    *(_OWORD *)(a6 + 80) = *(unint64_t *)&v44.f64[0];
    *(int64x2_t *)(a6 + 32) = vzip1q_s64(vdupq_laneq_s64((int64x2_t)_Q2, 1), (int64x2_t)v46);
    *(_OWORD *)(a6 + 48) = *(unint64_t *)&v46.f64[1];
    *(_QWORD *)(a6 + 96) = 0;
    *(_QWORD *)(a6 + 104) = 0;
    *(_QWORD *)(a6 + 112) = 0;
    *(_QWORD *)(a6 + 120) = 0x3FF0000000000000;
  }
  free(v256);
  free(v255[3]);
  free(v255[0]);
}

void sub_23943E960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    sub_23945B510((void **)&STACK[0x258]);
    _Unwind_Resume(a1);
  }
  sub_23945B510((void **)&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t sub_23943E9C0(float64x2_t *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  double v16;
  float64x2_t v18;
  float64x2_t v19;
  double v23;
  double v32;
  float64x2_t v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v38;
  float64x2_t v41;
  float64x2_t v42;
  unint64_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;

  v11.f64[0] = a1[5].f64[0];
  v13 = a1[4];
  v14 = a1[7].f64[0];
  _Q24 = a1[6];
  v16 = a1[9].f64[0];
  _Q26 = a1[8];
  a10.f64[0] = *(float64_t *)(a2 + 80);
  v18 = *(float64x2_t *)(a2 + 64);
  _Q16.i64[0] = *(_QWORD *)(a2 + 112);
  v19 = *(float64x2_t *)(a2 + 96);
  _D7 = *(double *)(a2 + 144);
  _Q20 = *(float64x2_t *)(a2 + 128);
  _Q2 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v13.f64[0]), v19, _Q24.f64[0]), _Q20, _Q26.f64[0]);
  v23 = vmlad_n_f64(vmlad_n_f64(a10.f64[0] * v13.f64[0], *(double *)_Q16.i64, _Q24.f64[0]), _D7, _Q26.f64[0]);
  _Q1 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v18, v13, 1), v19, _Q24, 1), _Q20, _Q26, 1);
  __asm
  {
    FMLA            D3, D16, V24.D[1]
    FMLA            D3, D7, V26.D[1]
  }
  _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v18, v11.f64[0]), v19, v14), _Q20, v16);
  v32 = vmulq_f64(a10, v11).f64[0] + *(double *)_Q16.i64 * v14 + _D7 * v16;
  v12.f64[0] = a1[11].f64[0];
  v33.f64[0] = 0.0;
  *(_QWORD *)&v34 = *(_OWORD *)&vsubq_f64((float64x2_t)0, v12);
  v35 = vsubq_f64((float64x2_t)0, a1[10]);
  v36 = vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v13, (int64x2_t)_Q24), v35.f64[0]);
  _Q22 = (float64x2_t)vzip2q_s64((int64x2_t)v13, (int64x2_t)_Q24);
  v11.f64[1] = v14;
  v38 = vmlaq_n_f64(vmlaq_laneq_f64(v36, _Q22, v35, 1), v11, v34);
  _Q21 = vmulq_f64(_Q26, v35);
  _Q22.f64[0] = v35.f64[1];
  __asm { FMLA            D21, D22, V26.D[1] }
  _Q21.f64[0] = vmlad_n_f64(_Q21.f64[0], v16, v34);
  _Q22.f64[0] = *(float64_t *)(a2 + 176);
  *(_QWORD *)&_Q22.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q22);
  _Q23 = vsubq_f64((float64x2_t)0, *(float64x2_t *)(a2 + 160));
  v41.f64[0] = a10.f64[0];
  *(_QWORD *)&v41.f64[1] = _Q16.i64[0];
  v42 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v18, (int64x2_t)v19), _Q23.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v18, (int64x2_t)v19), _Q23, 1), v41, _Q22.f64[0]);
  _Q25 = vmulq_f64(_Q20, _Q23);
  _Q23.f64[0] = _Q23.f64[1];
  __asm { FMLA            D25, D23, V20.D[1] }
  _Q25.f64[0] = vmlad_n_f64(_Q25.f64[0], _D7, _Q22.f64[0]);
  _Q22 = vsubq_f64(v38, v42);
  *(_QWORD *)&_Q21.f64[0] = *(_OWORD *)&vsubq_f64(_Q21, _Q25);
  _Q18 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v18, _Q22.f64[0]), v19, _Q22, 1), _Q20, _Q21.f64[0]);
  __asm { FMLA            D6, D16, V22.D[1] }
  *(double *)&v47 = vmlad_n_f64(_D6, _D7, _Q21.f64[0]);
  *(double *)_Q16.i64 = -*(double *)&_Q18.i64[1];
  v33.f64[1] = -*(double *)&v47;
  v48 = (float64x2_t)vzip1q_s64(_Q16, _Q18);
  v49 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, _Q2.f64[0]), (float64x2_t)v47, _Q2, 1), v48, v23);
  _Q2.f64[0] = _Q2.f64[1];
  __asm { FMLS            D20, D2, V18.D[0] }
  _Q2.f64[0] = _Q20.f64[0] + v23 * 0.0;
  v50 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, _Q1.f64[0]), (float64x2_t)v47, _Q1, 1), v48, _D3);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLS            D20, D1, V18.D[0] }
  _Q1.f64[0] = _Q20.f64[0] + _D3 * 0.0;
  v51 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v33, _Q0.f64[0]), (float64x2_t)v47, _Q0, 1), v48, v32);
  _Q0.f64[0] = _Q0.f64[1];
  __asm { FMLS            D6, D0, V18.D[0] }
  *(float64_t *)(a3 + 16) = _Q2.f64[0];
  *(float64x2_t *)a3 = v49;
  *(float64_t *)(a3 + 40) = _Q1.f64[0];
  *(float64x2_t *)(a3 + 24) = v50;
  *(double *)(a3 + 64) = _D6 + v32 * 0.0;
  *(float64x2_t *)(a3 + 48) = v51;
  return 1;
}

long double sub_23943EB60(uint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t a5, double a6, double a7, double a8, double a9, float64x2_t a10)
{
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v15;
  double v16;
  int8x16_t v18;
  double v19;
  int8x16_t v20;
  double v21;
  float64x2_t v23;
  float64x2_t v25;
  float64x2_t v27;
  double v28;
  float64x2_t v29;
  double v30;
  float64x2_t v32;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v42;
  float64x2_t v43;
  double v48;
  float64x2_t v51;
  float64x2_t v55;
  float64x2_t v56;
  double v58;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  float64_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v72;
  float64_t v73;
  float64x2_t v74;
  double v75;
  float64x2_t v76;
  double v79;
  double v81;
  double v82;
  __int128 v83;
  __int128 v84;
  double v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  float64x2_t v94;
  double v95;
  float64x2_t v96;
  double v97;
  float64x2_t v98;
  unint64_t v99;
  double v100;
  double v101;
  unint64_t v102;
  double v103;
  unint64_t v104;
  double v105;
  double v106;
  double v107;
  float64x2_t v108;

  v10.f64[0] = a2[5].f64[0];
  v13 = a2[4];
  _D18 = a2[7].f64[0];
  v15 = a2[6];
  v16 = a2[9].f64[0];
  _Q29 = a2[8];
  a10.f64[0] = *(float64_t *)(a1 + 80);
  v18 = *(int8x16_t *)(a1 + 64);
  v19 = *(double *)(a1 + 112);
  v20 = *(int8x16_t *)(a1 + 96);
  v21 = *(double *)(a1 + 144);
  _Q10 = *(float64x2_t *)(a1 + 128);
  v11.f64[0] = a4[5].f64[0];
  v23 = a4[4];
  _D20 = a4[7].f64[0];
  v25 = a4[6];
  _Q11 = a4[8];
  v12.f64[0] = a3[5].f64[0];
  v27 = a3[4];
  v28 = a3[7].f64[0];
  v29 = a3[6];
  v30 = a3[9].f64[0];
  _Q15 = a3[8];
  a5.f64[0] = *(float64_t *)(a1 + 176);
  v32 = vsubq_f64((float64x2_t)0, a5);
  _Q1 = vsubq_f64((float64x2_t)0, *(float64x2_t *)(a1 + 160));
  v108 = a10;
  v34.f64[0] = a10.f64[0];
  v34.f64[1] = v19;
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v18, (int64x2_t)v20), _Q1.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v18, (int64x2_t)v20), _Q1, 1), v34, v32.f64[0]);
  _Q4 = vmulq_f64(_Q10, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D4, D1, V10.D[1] }
  _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], v21, v32.f64[0]);
  v32.f64[0] = a2[11].f64[0];
  *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, v32);
  _Q1 = vsubq_f64((float64x2_t)0, a2[10]);
  v42.f64[0] = v10.f64[0];
  v42.f64[1] = _D18;
  v43 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v13, (int64x2_t)v15), _Q1.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v13, (int64x2_t)v15), _Q1, 1), v42, v32.f64[0]);
  _Q6 = vmulq_f64(_Q29, _Q1);
  _Q1.f64[0] = _Q1.f64[1];
  __asm { FMLA            D6, D1, V29.D[1] }
  _Q6.f64[0] = vmlad_n_f64(_Q6.f64[0], v16, v32.f64[0]);
  _Q3 = vsubq_f64(v35, v43);
  _Q4 = vsubq_f64(_Q4, _Q6);
  _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, _Q3.f64[0]), v15, _Q3, 1), _Q29, _Q4.f64[0]);
  __asm { FMLA            D1, D18, V3.D[1] }
  v48 = vmlad_n_f64(_Q1.f64[0], v16, _Q4.f64[0]);
  _Q4.f64[0] = _Q0.f64[1];
  __asm { FMLA            D3, D4, V0.D[1] }
  _Q4.f64[0] = a3[11].f64[0];
  _Q4 = vsubq_f64((float64x2_t)0, _Q4);
  _Q5 = vsubq_f64((float64x2_t)0, a3[10]);
  v51.f64[0] = v12.f64[0];
  v51.f64[1] = v28;
  _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v27, (int64x2_t)v29), _Q5.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v27, (int64x2_t)v29), _Q5, 1), v51, _Q4.f64[0]);
  _Q7 = vmulq_f64(_Q15, _Q5);
  _Q5.f64[0] = _Q5.f64[1];
  __asm { FMLA            D7, D5, V15.D[1] }
  _Q7.f64[0] = vmlad_n_f64(_Q7.f64[0], v30, _Q4.f64[0]);
  _Q4.f64[0] = a4[11].f64[0];
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q4);
  _Q2 = vsubq_f64((float64x2_t)0, a4[10]);
  v55.f64[0] = v11.f64[0];
  v55.f64[1] = _D20;
  v56 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v23, (int64x2_t)v25), _Q2.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v23, (int64x2_t)v25), _Q2, 1), v55, _Q4.f64[0]);
  _Q16 = vmulq_f64(_Q11, _Q2);
  _Q2.f64[0] = _Q2.f64[1];
  __asm { FMLA            D16, D2, V11.D[1] }
  v58 = a4[9].f64[0];
  _Q16.f64[0] = vmlad_n_f64(_Q16.f64[0], v58, _Q4.f64[0]);
  v106 = v58;
  v107 = *(double *)v18.i64;
  *(_QWORD *)&v103 = vextq_s8(v18, v18, 8uLL).u64[0];
  _Q5 = vsubq_f64(_Q6, v56);
  *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vsubq_f64(_Q7, _Q16);
  _Q2 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, _Q5.f64[0]), v25, _Q5, 1), _Q11, _Q6.f64[0]);
  __asm { FMLA            D4, D20, V5.D[1] }
  v61 = vmlad_n_f64(_Q4.f64[0], v58, _Q6.f64[0]);
  _Q6.f64[0] = _Q2.f64[1];
  __asm { FMLA            D5, D6, V2.D[1] }
  v62 = *(double *)v20.i64;
  *(_QWORD *)&_Q7.f64[0] = vextq_s8(v20, v20, 8uLL).u64[0];
  v63 = sqrt(_Q3.f64[0] + v48 * v48);
  _Q3.f64[0] = _Q5.f64[0] + v61 * v61;
  v64 = _Q10.f64[0];
  v65 = sqrt(_Q3.f64[0]);
  *(_QWORD *)&v100 = vextq_s8((int8x16_t)_Q10, (int8x16_t)_Q10, 8uLL).u64[0];
  v101 = _Q7.f64[0];
  *(_QWORD *)&v66 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
  *(_QWORD *)&v67 = vextq_s8((int8x16_t)_Q11, (int8x16_t)_Q11, 8uLL).u64[0];
  v99 = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL).u64[0];
  v102 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
  v104 = vextq_s8((int8x16_t)_Q15, (int8x16_t)_Q15, 8uLL).u64[0];
  *(_QWORD *)&v105 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
  if (v63 != 0.0 && v63 > 0.000001 && v65 != 0.0 && v65 > 0.000001)
  {
    v83 = *(_OWORD *)(a1 + 128);
    v68 = (vmulq_f64(_Q0, _Q2).f64[0]
         + *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64
         * *(double *)vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).i64
         + v48 * v61)
        / v63
        / v65;
    if (v68 > 1.0)
      v68 = 1.0;
    if (v68 < -1.0)
      v68 = -1.0;
    v98 = v11;
    v96 = v10;
    v97 = a4[7].f64[0];
    v94 = a4[4];
    v95 = a2[7].f64[0];
    v92 = v12;
    v93 = a2[9].f64[0];
    v90 = a4[6];
    v91 = a2[4];
    v88 = a3[7].f64[0];
    v89 = a2[6];
    v86 = a3[4];
    v87 = a2[8];
    v85 = *(double *)(a1 + 112);
    v84 = *(_OWORD *)(a1 + 96);
    v81 = v66;
    v82 = v67;
    acos(v68);
    v66 = v81;
    v67 = v82;
    v64 = *(double *)&v83;
    v62 = *(double *)&v84;
    v19 = v85;
    v27.f64[0] = v86.f64[0];
    _Q29 = v87;
    v28 = v88;
    v15 = v89;
    v25.f64[0] = v90.f64[0];
    v13 = v91;
    v12 = v92;
    v16 = v93;
    v23.f64[0] = v94.f64[0];
    _D18 = v95;
    v10 = v96;
    _D20 = v97;
    v11 = v98;
  }
  *(_QWORD *)&v27.f64[1] = v99;
  v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v107), v15, v62), _Q29, v64);
  v70 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v103), v15, v101), _Q29, v100);
  _D3 = v10.f64[0] * v103 + _D18 * v101 + v16 * v100;
  v72 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v13, v108.f64[0]), v15, v19), _Q29, v21);
  v73 = vmulq_f64(v10, v108).f64[0] + _D18 * v19 + v16 * v21;
  *(_QWORD *)&v29.f64[1] = v102;
  *(_QWORD *)&_Q15.f64[1] = v104;
  v74 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, v23.f64[0]), v29, v25.f64[0]), _Q15, _Q11.f64[0]);
  v75 = v66;
  v76 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, v66), v29, v105), _Q15, v67);
  _Q18 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, v11.f64[0]), v29, _D20), _Q15, v106);
  __asm { FMLA            D1, D3, V18.D[1] }
  v79 = (_D1
       + v73 * (vmulq_f64(v12, v11).f64[0] + v28 * _D20 + v30 * v106)
       + vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v74.f64[0]), v70, v74, 1), v72, v12.f64[0] * v23.f64[0] + v28 * v25.f64[0] + v30 * _Q11.f64[0]), (float64x2_t)vdupq_laneq_s64((int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v69, v76.f64[0]), v70, v76, 1), v72, v12.f64[0] * v75 + v28 * v105 + v30 * v67), 1)).f64[0]+ -1.0)* 0.5;
  if (v79 > 1.0)
    v79 = 1.0;
  if (v79 < -1.0)
    v79 = -1.0;
  return acos(v79) * 180.0 / 3.14159265;
}

void sub_23943EFB8(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5, unsigned __int8 a6, float a7)
{
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  int v28;
  _BOOL4 v29;
  float *v30;
  float v31;
  int v33;
  int v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;

  v12 = a1;
  v13 = (void *)*a4;
  a4[1] = *a4;
  v14 = a1[1] - *a1;
  v15 = v14 >> 2;
  v52 = a4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - (_QWORD)v13) >> 2) < v14 >> 2)
  {
    if ((unint64_t)v14 >= 0x5555555555555555)
      sub_2394189F8();
    v16 = 12 * v15;
    v17 = (char *)operator new(12 * v15);
    a4 = v52;
    *v52 = v17;
    v52[1] = v17;
    v52[2] = &v17[v16];
    if (v13)
    {
      operator delete(v13);
      a4 = v52;
    }
  }
  v18 = *a3;
  v19 = a3[1];
  v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - *a3) >> 3);
  v21 = *v12;
  v22 = v12[1];
  if ((v22 - *v12) >> 2 < v20)
    v20 = (v22 - *v12) >> 2;
  if (v20)
  {
    v23 = 0;
    v24 = 0;
    v25 = a6;
    v50 = a6;
    v51 = v12;
    do
    {
      if (v25)
      {
        v28 = *(_DWORD *)(*(_QWORD *)(*a5 + 24 * *(unsigned int *)(*(_QWORD *)(v18 + 24 * v23) + 4)) + 4);
        v29 = v28 == v24;
        if (a7 >= 1.0)
        {
          if (v28 == v24)
            goto LABEL_25;
          goto LABEL_11;
        }
      }
      else
      {
        if (a7 >= 1.0)
        {
LABEL_25:
          v30 = *(float **)(v18 + 24 * v23);
          v31 = v30[2];
LABEL_26:
          v33 = *(_DWORD *)(v21 + 4 * *(unsigned int *)v30);
          v34 = *(_DWORD *)(*a2 + 4 * *((unsigned int *)v30 + 1));
          v36 = (char *)a4[1];
          v35 = a4[2];
          if ((unint64_t)v36 < v35)
          {
            *(_DWORD *)v36 = v33;
            *((_DWORD *)v36 + 1) = v34;
            v26 = v36 + 12;
            *((float *)v36 + 2) = v31;
          }
          else
          {
            v37 = a2;
            v38 = a5;
            v39 = (char *)*a4;
            v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v36[-*a4] >> 2);
            v41 = v40 + 1;
            if (v40 + 1 > 0x1555555555555555)
              sub_2394189F8();
            v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)v39) >> 2);
            if (2 * v42 > v41)
              v41 = 2 * v42;
            if (v42 >= 0xAAAAAAAAAAAAAAALL)
              v43 = 0x1555555555555555;
            else
              v43 = v41;
            if (v43)
            {
              if (v43 > 0x1555555555555555)
                sub_239418A80();
              v44 = (char *)operator new(12 * v43);
              a4 = v52;
            }
            else
            {
              v44 = 0;
            }
            v45 = &v44[12 * v40];
            *(_DWORD *)v45 = v33;
            *((_DWORD *)v45 + 1) = v34;
            *((float *)v45 + 2) = v31;
            v46 = v45;
            a5 = v38;
            if (v36 != v39)
            {
              do
              {
                v47 = *(_QWORD *)(v36 - 12);
                v36 -= 12;
                v48 = *((_DWORD *)v36 + 2);
                *(_QWORD *)(v46 - 12) = v47;
                v46 -= 12;
                *((_DWORD *)v46 + 2) = v48;
              }
              while (v36 != v39);
              v36 = (char *)*a4;
            }
            v49 = &v44[12 * v43];
            v26 = v45 + 12;
            *a4 = v46;
            a4[1] = v45 + 12;
            a4[2] = v49;
            a2 = v37;
            if (v36)
            {
              operator delete(v36);
              a4 = v52;
            }
            v25 = v50;
            v12 = v51;
          }
          a4[1] = v26;
          v18 = *a3;
          v19 = a3[1];
          v21 = *v12;
          v22 = v12[1];
          goto LABEL_11;
        }
        v29 = 1;
      }
      v30 = *(float **)(v18 + 24 * v23);
      v31 = v30[2];
      if (v29 && v31 <= (float)(v30[5] * a7))
        goto LABEL_26;
LABEL_11:
      v23 = (v24 + 1);
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
      if ((v22 - v21) >> 2 < v27)
        v27 = (v22 - v21) >> 2;
      ++v24;
    }
    while (v27 > v23);
  }
}

void sub_23943F2C4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned __int8 a6, float a7)
{
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  float *v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  int v34;
  int v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;

  v12 = a1;
  v13 = (void *)*a4;
  a4[1] = *a4;
  v14 = a1[1] - *a1;
  v15 = v14 >> 2;
  v54 = a4;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[2] - (_QWORD)v13) >> 2) < v14 >> 2)
  {
    if ((unint64_t)v14 >= 0x5555555555555555)
      sub_2394189F8();
    v16 = 12 * v15;
    v17 = (char *)operator new(12 * v15);
    a4 = v54;
    *v54 = v17;
    v54[1] = v17;
    v54[2] = &v17[v16];
    if (v13)
    {
      operator delete(v13);
      a4 = v54;
    }
  }
  v18 = *a3;
  v19 = a3[1];
  v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - *a3) >> 3);
  v21 = *v12;
  v22 = v12[1];
  if ((v22 - *v12) >> 2 < v20)
    v20 = (v22 - *v12) >> 2;
  if (v20)
  {
    v23 = 0;
    v24 = 0;
    v25 = a6;
    v52 = a6;
    v53 = v12;
    while (v25)
    {
      v28 = *(float **)(v18 + 24 * v23);
      v29 = *((_DWORD *)v28 + 1);
      v30 = *(_QWORD *)(*a5 + 24 * v29);
      v31 = *(_DWORD *)(v30 + 4);
      if (a7 > 0.0)
      {
        v32 = v28[2];
        v33 = v32 - v28[5];
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a5 + 24 * v29 + 8) - v30) >> 2) >= 2)
          v33 = (float)(v33 + (float)(*(float *)(v30 + 8) - *(float *)(v30 + 20))) * 0.5;
        if (v31 != v24)
          goto LABEL_11;
        goto LABEL_22;
      }
      if (v31 == v24)
      {
LABEL_25:
        v28 = *(float **)(v18 + 24 * v23);
        v32 = v28[2];
LABEL_26:
        v34 = *(_DWORD *)(v21 + 4 * *(unsigned int *)v28);
        v35 = *(_DWORD *)(*a2 + 4 * *((unsigned int *)v28 + 1));
        v37 = (char *)a4[1];
        v36 = a4[2];
        if ((unint64_t)v37 < v36)
        {
          *(_DWORD *)v37 = v34;
          *((_DWORD *)v37 + 1) = v35;
          v26 = v37 + 12;
          *((float *)v37 + 2) = v32;
        }
        else
        {
          v38 = a2;
          v39 = a3;
          v40 = a5;
          v41 = (char *)*a4;
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*a4] >> 2);
          v43 = v42 + 1;
          if (v42 + 1 > 0x1555555555555555)
            sub_2394189F8();
          v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v41) >> 2);
          if (2 * v44 > v43)
            v43 = 2 * v44;
          if (v44 >= 0xAAAAAAAAAAAAAAALL)
            v45 = 0x1555555555555555;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 > 0x1555555555555555)
              sub_239418A80();
            v46 = (char *)operator new(12 * v45);
            a4 = v54;
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[12 * v42];
          *(_DWORD *)v47 = v34;
          *((_DWORD *)v47 + 1) = v35;
          *((float *)v47 + 2) = v32;
          v48 = v47;
          a5 = v40;
          if (v37 != v41)
          {
            do
            {
              v49 = *(_QWORD *)(v37 - 12);
              v37 -= 12;
              v50 = *((_DWORD *)v37 + 2);
              *(_QWORD *)(v48 - 12) = v49;
              v48 -= 12;
              *((_DWORD *)v48 + 2) = v50;
            }
            while (v37 != v41);
            v37 = (char *)*a4;
          }
          a3 = v39;
          v51 = &v46[12 * v45];
          v26 = v47 + 12;
          *a4 = v48;
          a4[1] = v47 + 12;
          a4[2] = v51;
          a2 = v38;
          v25 = v52;
          if (v37)
          {
            operator delete(v37);
            a4 = v54;
          }
          v12 = v53;
        }
        a4[1] = v26;
        v18 = *a3;
        v19 = a3[1];
        v21 = *v12;
        v22 = v12[1];
      }
LABEL_11:
      v23 = (v24 + 1);
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
      if ((v22 - v21) >> 2 < v27)
        v27 = (v22 - v21) >> 2;
      ++v24;
      if (v27 <= v23)
        return;
    }
    if (a7 <= 0.0)
      goto LABEL_25;
    v28 = *(float **)(v18 + 24 * v23);
    v32 = v28[2];
    v33 = v32 - v28[5];
LABEL_22:
    if (v33 >= a7)
      goto LABEL_26;
    goto LABEL_11;
  }
}

void sub_23943F628(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  BOOL v10;
  char v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  char *v34;

  v4 = *a1;
  v3 = a1[1];
  v5 = (char *)v3 - (char *)*a1;
  if (v3 != *a1)
  {
    v6 = *((unsigned int *)a1 + 6);
    v7 = *((unsigned int *)a1 + 7);
    v8 = 2 * v7;
    v9 = v7 >= 0xF && v8 >= v6;
    if (!v9 || (double)v7 / (double)(0xAAAAAAAAAAAAAAABLL * (v5 >> 2)) < 0.1)
    {
      v10 = v8 < v6 && v6 >= 0xF;
      if (!v10 || (double)v6 / (double)(0xAAAAAAAAAAAAAAABLL * (v5 >> 2)) < 0.1)
        goto LABEL_14;
      v12 = (char *)operator new(12 * v6);
      v13 = &v12[12 * v6];
      v14 = v12;
      while (1)
      {
        if ((v4[1] & 0xFFFFFFFD) == 1)
        {
          if (v12 < v13)
          {
            v25 = *v4;
            *((_DWORD *)v12 + 2) = *((_DWORD *)v4 + 2);
            *(_QWORD *)v12 = v25;
            v12 += 12;
          }
          else
          {
            v26 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v14) >> 2) + 1;
            if (v26 > 0x1555555555555555)
              sub_2394189F8();
            if (0x5555555555555556 * ((v13 - v14) >> 2) > v26)
              v26 = 0x5555555555555556 * ((v13 - v14) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v27 = 0x1555555555555555;
            else
              v27 = v26;
            if (v27)
            {
              if (v27 > 0x1555555555555555)
                sub_239418A80();
              v28 = (char *)operator new(12 * v27);
            }
            else
            {
              v28 = 0;
            }
            v29 = *v4;
            v30 = &v28[4 * ((v12 - v14) >> 2)];
            *((_DWORD *)v30 + 2) = *((_DWORD *)v4 + 2);
            *(_QWORD *)v30 = v29;
            if (v12 == v14)
            {
              v34 = v12;
              v14 = &v28[4 * ((v12 - v14) >> 2)];
              v13 = &v28[12 * v27];
              v12 = v30 + 12;
              if (!v34)
                goto LABEL_40;
            }
            else
            {
              v31 = &v28[4 * ((v12 - v14) >> 2)];
              do
              {
                v32 = *(_QWORD *)(v12 - 12);
                v12 -= 12;
                v33 = *((_DWORD *)v12 + 2);
                *(_QWORD *)(v31 - 12) = v32;
                v31 -= 12;
                *((_DWORD *)v31 + 2) = v33;
              }
              while (v12 != v14);
              v34 = v14;
              v14 = v31;
              v13 = &v28[12 * v27];
              v12 = v30 + 12;
              if (!v34)
                goto LABEL_40;
            }
            operator delete(v34);
          }
        }
LABEL_40:
        v4 = (uint64_t *)((char *)v4 + 12);
        if (v4 == v3)
          goto LABEL_61;
      }
    }
    v12 = (char *)operator new(12 * v7);
    v13 = &v12[12 * v7];
    v14 = v12;
    while (1)
    {
      if ((v4[1] & 0xFFFFFFFE) == 2)
      {
        if (v12 < v13)
        {
          v15 = *v4;
          *((_DWORD *)v12 + 2) = *((_DWORD *)v4 + 2);
          *(_QWORD *)v12 = v15;
          v12 += 12;
        }
        else
        {
          v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v14) >> 2) + 1;
          if (v16 > 0x1555555555555555)
            sub_2394189F8();
          if (0x5555555555555556 * ((v13 - v14) >> 2) > v16)
            v16 = 0x5555555555555556 * ((v13 - v14) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v17 = 0x1555555555555555;
          else
            v17 = v16;
          if (v17)
          {
            if (v17 > 0x1555555555555555)
              sub_239418A80();
            v18 = (char *)operator new(12 * v17);
          }
          else
          {
            v18 = 0;
          }
          v19 = *v4;
          v20 = &v18[4 * ((v12 - v14) >> 2)];
          *((_DWORD *)v20 + 2) = *((_DWORD *)v4 + 2);
          *(_QWORD *)v20 = v19;
          if (v12 == v14)
          {
            v24 = v12;
            v14 = &v18[4 * ((v12 - v14) >> 2)];
            v13 = &v18[12 * v17];
            v12 = v20 + 12;
            if (!v24)
              goto LABEL_17;
          }
          else
          {
            v21 = &v18[4 * ((v12 - v14) >> 2)];
            do
            {
              v22 = *(_QWORD *)(v12 - 12);
              v12 -= 12;
              v23 = *((_DWORD *)v12 + 2);
              *(_QWORD *)(v21 - 12) = v22;
              v21 -= 12;
              *((_DWORD *)v21 + 2) = v23;
            }
            while (v12 != v14);
            v24 = v14;
            v14 = v21;
            v13 = &v18[12 * v17];
            v12 = v20 + 12;
            if (!v24)
              goto LABEL_17;
          }
          operator delete(v24);
        }
      }
LABEL_17:
      v4 = (uint64_t *)((char *)v4 + 12);
      if (v4 == v3)
      {
LABEL_61:
        *(_QWORD *)a2 = v14;
        *(_QWORD *)(a2 + 8) = v12;
        v11 = 1;
        *(_QWORD *)(a2 + 16) = v13;
        goto LABEL_62;
      }
    }
  }
LABEL_14:
  v11 = 0;
  *(_BYTE *)a2 = 0;
LABEL_62:
  *(_BYTE *)(a2 + 24) = v11;
}

void sub_23943F9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23943FA1C()
{
  return 5;
}

uint64_t sub_23943FA24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  long double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  long double v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  void *v25;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  double v41;
  long double v42;
  BOOL v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  void *__p;
  void *v54;
  uint64_t v55;
  void *__src;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  int v62;
  char v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v60 = v7;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v10 = v8;
  v59 = v8;
  v11 = *(double *)(a2 + 8);
  LODWORD(v12) = 1;
  if (v11 < 1.0 && v11 > 0.0)
  {
    *(double *)&v13 = log(1.0 - *(double *)a2);
    v14 = *(double *)&v13;
    LODWORD(v13) = *(_DWORD *)(a2 + 16);
    v15 = pow(v11, (double)v13);
    v12 = vcvtpd_u64_f64(v14 / log(1.0 - v15));
    if (v12 == -1)
      sub_239EBF034(v8, v9);
  }
  if (v7 < v10)
    sub_239EBF008(v8, v9);
  __src = 0;
  v57 = 0;
  v58 = 0;
  if (v7)
  {
    v16 = ((unint64_t)v7 - 1) >> 6;
    v17 = (char *)operator new(8 * (v16 + 1));
    v18 = v17;
    v57 = v7;
    v58 = v16 + 1;
    __src = v17;
    if (v7 >= 0x41)
      v19 = ((unint64_t)v7 - 1) >> 6;
    else
      v19 = 0;
    *(_QWORD *)&v17[8 * v19] = 0;
    v20 = v7 >> 6;
    v21 = 8 * v20;
    if (v7 >= 0x40)
      bzero(v17, 8 * v20);
    if ((v7 & 0x3F) != 0)
      *(_QWORD *)&v18[v21] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  if ((_DWORD)v12)
  {
    v22 = 0;
    v23 = -2147483647;
    while (1)
    {
      if (v59 > v60)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v60)
      {
        if ((double)v60 * 0.5 >= (double)v59)
          sub_239455384(a2 + 32, &v60, (int *)&v59, (int32x4_t **)&__p);
        else
          sub_2394551BC(a2 + 32, &v60, &v59, (int32x4_t **)&__p);
      }
      else
      {
        __p = 0;
        v54 = 0;
        v55 = 0;
      }
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a3 + 40))(a3, &__p))
        break;
      v24 = 1;
      v25 = __p;
      if (__p)
        goto LABEL_16;
LABEL_17:
      if (v12 - 1 == v22++ || !v24)
        goto LABEL_61;
    }
    v28 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 32))(a3, &__src);
    if (v28 <= v23)
    {
      v32 = v57;
    }
    else
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      v30 = *(_OWORD *)(v29 + 48);
      v68 = *(_OWORD *)(v29 + 32);
      v69 = v30;
      v70 = *(_QWORD *)(v29 + 64);
      v31 = *(_OWORD *)(v29 + 16);
      v66 = *(_OWORD *)v29;
      v67 = v31;
      v32 = v57;
      if (&__src != (void **)a4)
      {
        if (v57)
        {
          v33 = *(void **)a4;
          if (v57 <= *(_QWORD *)(a4 + 16) << 6)
          {
            v34 = v57 - 1;
          }
          else
          {
            if (v33)
            {
              operator delete(v33);
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              v32 = v57;
            }
            if ((v32 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v34 = v32 - 1;
            v35 = ((v32 - 1) >> 6) + 1;
            v33 = operator new(8 * v35);
            *(_QWORD *)a4 = v33;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = v35;
          }
          memmove(v33, __src, ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v32 = v57;
        }
        *(_QWORD *)(a4 + 8) = v32;
      }
      v23 = v28;
    }
    v52 = 1;
    v64 = (uint64_t)__src;
    v65 = 0;
    v61 = (char *)__src + 8 * (v32 >> 6);
    v62 = v32 & 0x3F;
    v36 = sub_239458E50((uint64_t)&v64, (uint64_t)&v61, &v52);
    v38 = v12;
    if (v36)
    {
      LODWORD(v37) = v60;
      v39 = (double)v36 / (double)v37;
      if (v39 >= 1.0)
      {
        if (v22)
          v44 = *(_QWORD *)(a2 + 24) > v22;
        else
          v44 = 1;
        v24 = v44;
        v25 = __p;
        if (!__p)
          goto LABEL_17;
LABEL_16:
        v54 = v25;
        operator delete(v25);
        goto LABEL_17;
      }
      v38 = 1;
      if (v39 > 0.0)
      {
        *(double *)&v40 = log(1.0 - *(double *)a2);
        v41 = *(double *)&v40 * 3.0;
        LODWORD(v40) = *(_DWORD *)(a2 + 16);
        v42 = pow(v39, (double)v40);
        v38 = vcvtpd_u64_f64(v41 / log(1.0 - v42));
        if (v38 == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
      }
    }
    v24 = v38 > v22 || *(_QWORD *)(a2 + 24) > v22;
    v25 = __p;
    if (!__p)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_61:
  v45 = v66;
  *(_OWORD *)(a3 + 24) = v67;
  v46 = v69;
  *(_OWORD *)(a3 + 40) = v68;
  *(_OWORD *)(a3 + 56) = v46;
  *(_QWORD *)(a3 + 72) = v70;
  *(_OWORD *)(a3 + 8) = v45;
  v47 = *(void **)a4;
  v48 = *(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6);
  v49 = *(_QWORD *)(a4 + 8) & 0x3FLL;
  v63 = 1;
  __p = v47;
  LODWORD(v54) = 0;
  v64 = v48;
  v65 = v49;
  v50 = sub_239458E50((uint64_t)&__p, (uint64_t)&v64, &v63);
  if (__src)
    operator delete(__src);
  return v50;
}

void sub_23943FF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (!a14)
    _Unwind_Resume(exception_object);
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23943FF68(uint64_t a1)
{
  return a1 + 8;
}

void sub_23943FF70(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, float64x2_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float64x2_t v12;
  __int128 v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v17;
  float64x2_t v19;
  unint64_t v20;
  double v21;
  float64x2_t v22;
  unint64_t v23;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  unint64_t v29;
  unint64_t v30;
  float64x2_t v31;
  int8x16_t v39;
  double v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v51;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v58;
  float64x2_t v61;
  double v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  float64x2_t *v70;
  uint64_t v71;
  float64x2_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  char *v78;
  double *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v84;
  double v87;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  double v111;
  double v113;
  double v114;
  double v116;
  int8x16_t v118;
  double v119;
  float64x2_t v121;
  int64x2_t v122;
  float64x2_t v123;
  int64x2_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  void *v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  void *__src;
  unint64_t v140;
  unint64_t v141;
  void *__dst;
  unint64_t v143;
  unint64_t v144;
  float64x2_t v145;
  float64_t v146;
  float64x2_t v147;
  uint64_t v148;
  float64x2_t v149;
  _BYTE v150[32];
  float64x2_t v151;
  double v152;
  float64x2_t v153;
  double v154;
  float64x2_t v155;
  float64_t v156;
  float64x2_t v157;
  double v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  double v163;
  float64x2_t v164;
  double v165;
  float64_t v166;
  float64_t v167;
  double v168;
  float64x2_t v169;
  double v170;
  uint64_t v171;
  char v172;

  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 == *a2 || (v7 = a3, v8 = v6 >> 4, v6 >> 4 != (uint64_t)(a3[1] - *a3) >> 4))
    sub_239EBF060();
  v9 = a4;
  v10 = a2;
  if (*(_QWORD *)(a4 + 8) != v8)
    sub_23941C5D8(a4, v6 >> 4, 1uLL);
  v172 = 0;
  v171 = 0x300000003;
  v12 = *(float64x2_t *)(a1 + 48);
  *(_OWORD *)&v150[16] = *(_OWORD *)(a1 + 32);
  v151 = v12;
  v152 = *(double *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 16);
  v149 = *(float64x2_t *)a1;
  *(_OWORD *)v150 = v13;
  sub_239456468((uint64_t)&v159, v149.f64, 3);
  _Q2 = v162;
  v17 = v161;
  _Q3 = v160;
  v19 = v159;
  v20 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
  *(_QWORD *)&v21 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
  *(_QWORD *)&v22.f64[0] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
  v23 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  _Q0.f64[0] = v163;
  v25.f64[0] = v165;
  v26 = v164;
  v27.f64[0] = v170;
  v28 = v169;
  v29 = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0];
  v30 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
  v31.f64[0] = v167;
  _D30 = v160.f64[1];
  __asm
  {
    FMLA            D28, D0, V3.D[1]
    FMLA            D31, D30, V2.D[1]
  }
  if (_D31 * v160.f64[0]
     + vmlad_n_f64(vmuld_lane_f64(-v161.f64[1], v162, 1), v163, v161.f64[0]) * v159.f64[0]
     - vmuld_lane_f64(_D28, v159, 1) < 0.0)
  {
    *(_QWORD *)&v19.f64[1] = v23;
    v19 = vnegq_f64(v19);
    v23 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
    _Q3.f64[1] = v22.f64[0];
    _Q3 = vnegq_f64(_Q3);
    *(_QWORD *)&v22.f64[0] = vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q3, 8uLL).u64[0];
    v17.f64[1] = v21;
    v17 = vnegq_f64(v17);
    *(_QWORD *)&v21 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    *(_QWORD *)&_Q2.f64[1] = v20;
    _Q2 = vnegq_f64(_Q2);
    v20 = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    _Q0 = vnegq_f64(_Q0);
  }
  v15.f64[0] = v169.f64[0] * (v168 * v164.f64[1] - v167 * v165)
             + v164.f64[0] * (v170 * v167 - v169.f64[1] * v168)
             - v166 * (v170 * v164.f64[1] - v169.f64[1] * v165);
  v14.f64[0] = 0.0;
  _Q27 = (int8x16_t)vcgtq_f64(v14, v15);
  v39 = (int8x16_t)vdupq_lane_s64(_Q27.i64[0], 0);
  *(_QWORD *)&v28.f64[1] = v29;
  _Q23 = (float64x2_t)vbslq_s8(v39, (int8x16_t)vnegq_f64(v28), (int8x16_t)v28);
  v31.f64[1] = v168;
  _Q22 = (float64x2_t)vbslq_s8(v39, (int8x16_t)vnegq_f64(v31), (int8x16_t)v31);
  v25.f64[1] = v166;
  *(_QWORD *)&v26.f64[1] = v30;
  _Q21 = (float64x2_t)vbslq_s8(v39, (int8x16_t)vnegq_f64(v25), (int8x16_t)v25);
  _Q24 = (float64x2_t)vbslq_s8(v39, (int8x16_t)vnegq_f64(v26), (int8x16_t)v26);
  *(_QWORD *)&v44 = vbslq_s8(_Q27, (int8x16_t)vnegq_f64(v27), (int8x16_t)v27).u64[0];
  v45 = _Q2;
  v46 = sqrt(_Q2.f64[0] * _Q2.f64[0] + _Q2.f64[1] * _Q2.f64[1] + _Q0.f64[0] * _Q0.f64[0]);
  *(_QWORD *)&_Q2.f64[1] = v20;
  *(_QWORD *)&v19.f64[1] = v23;
  v47 = vmulq_f64(v19, (float64x2_t)0);
  v22.f64[1] = v17.f64[0];
  v48 = vmlaq_f64(vaddq_f64(v22, v47), (float64x2_t)0, _Q2);
  _Q9 = vmlaq_f64(vmlaq_f64(vnegq_f64(v19), (float64x2_t)0, v22), (float64x2_t)0, _Q2);
  _D10 = _Q0.f64[0] * 0.0 - (_Q3.f64[0] - v21 * 0.0);
  v51 = vaddq_f64(_Q2, vmlaq_f64(v47, (float64x2_t)0, v22));
  _D16 = _Q0.f64[0] + _Q3.f64[0] * 0.0 + v21 * 0.0;
  v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v48, _Q24.f64[0]), _Q9, _Q24, 1), v51, _Q21.f64[0]);
  __asm { FMLA            D27, D10, V24.D[1] }
  *(double *)_Q27.i64 = vmlad_n_f64(*(double *)_Q27.i64, _D16, _Q21.f64[0]);
  v54 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v48, _Q21, 1), _Q9, _Q22.f64[0]), v51, _Q22, 1);
  v55 = vmlaq_laneq_f64(vmulq_n_f64(v48, _Q23.f64[0]), _Q9, _Q23, 1);
  __asm
  {
    FMLA            D9, D16, V22.D[1]
    FMLA            D8, D10, V23.D[1]
    FMOV            V10.2D, #-1.0
  }
  v58 = vmlaq_f64(vmlaq_f64(v47, _Q10, v22), (float64x2_t)0, _Q2);
  _Q1 = vmlaq_f64(vmlaq_f64(v19, (float64x2_t)0, v22), (float64x2_t)0, _Q2);
  _D2 = _Q3.f64[0] + v21 * 0.0 + _Q0.f64[0] * 0.0;
  v61 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, _Q24.f64[0]), _Q1, _Q24, 1), v51, _Q21.f64[0]);
  __asm { FMLA            D4, D2, V24.D[1] }
  v63 = vmlad_n_f64(_D4, _D16, _Q21.f64[0]);
  v64 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v58, _Q21, 1), _Q1, _Q22.f64[0]), v51, _Q22, 1);
  __asm { FMLA            D21, D16, V22.D[1] }
  v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, _Q23.f64[0]), _Q1, _Q23, 1), v51, v44);
  __asm { FMLA            D1, D2, V23.D[1] }
  *(_QWORD *)v150 = _Q27.i64[0];
  v149 = v53;
  *(float64_t *)&v150[24] = _Q9.f64[0];
  *(float64x2_t *)&v150[8] = v54;
  v151 = vmlaq_n_f64(v55, v51, v44);
  v152 = vmlad_n_f64(_D8, _D16, v44);
  v154 = v63;
  v153 = v61;
  v155 = v64;
  v157 = v65;
  v156 = _Q21.f64[0];
  v158 = vmlad_n_f64(_Q1.f64[0], _D16, v44);
  _Q1.f64[0] = 1.0 / v46;
  v66 = vmulq_f64(_Q0, _Q1);
  v146 = v66.f64[0];
  v145 = vmulq_n_f64(v45, 1.0 / v46);
  v148 = *(_OWORD *)&vnegq_f64(v66);
  v147 = vnegq_f64(v145);
  __dst = 0;
  v143 = 0;
  v144 = 0;
  a5[4] = (float64x2_t)xmmword_239EC6980;
  a5[5] = (float64x2_t)unk_239EC6990;
  a5[6] = (float64x2_t)xmmword_239EC69A0;
  a5[7] = (float64x2_t)unk_239EC69B0;
  *a5 = (float64x2_t)xmmword_239EC6940;
  a5[1] = *(float64x2_t *)algn_239EC6950;
  a5[2] = (float64x2_t)xmmword_239EC6960;
  a5[3] = (float64x2_t)unk_239EC6970;
  __src = 0;
  v140 = 0;
  v141 = 0;
  if (v6 < 0)
    sub_2394189F8();
  __src = operator new(8 * (((v8 - 1) >> 6) + 1));
  v140 = 0;
  v141 = ((v8 - 1) >> 6) + 1;
  sub_23942D8C8(&__src, v6 >> 4, 0);
  v67 = 0;
  v68 = 0;
  if (v8 <= 1)
    v8 = 1;
  v69 = 0uLL;
  v70 = &v149;
  v136 = v7;
  v137 = v10;
  do
  {
    v135 = v68;
    v71 = 0;
    v72 = &v145;
    do
    {
      v75 = 0;
      v76 = 0;
      v77 = *(void **)v9;
      v78 = (char *)__src;
      v79 = (double *)(*v10 + 8);
      v80 = *v7 + 8;
      do
      {
        while (1)
        {
          v81 = 1 << v75;
          v82 = 8 * (v75 >> 6);
          if ((*(_QWORD *)((_BYTE *)v77 + v82) & (1 << v75)) != 0)
          {
            _Q2.f64[0] = v72->f64[1];
            v84 = v72[1].f64[0];
            _Q2.f64[1] = -v72->f64[0];
            _Q5.f64[0] = v70[1].f64[0];
            _Q16 = *(float64x2_t *)((char *)v70 + 24);
            v87 = v70[4].f64[0];
            _Q17 = v70[3];
            v89 = 0;
            v90 = 0;
            v91 = 0;
            v92 = 0;
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v96 = 0;
            v100.f64[1] = v84;
            v97 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, v70->f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v84), *v70, 1), _Q2, _Q5.f64[0]);
            v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, _Q16.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v84), _Q16, 1), _Q2, v70[2].f64[1]);
            v99 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v100, _Q17.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-v84), _Q17, 1), _Q2, v87);
            v100.f64[0] = *(v79 - 1);
            _Q2.f64[0] = *v79;
            __asm { FMOV            V19.2D, #1.0 }
            v102 = *(float64x2_t *)(v80 - 8);
            v103 = vaddq_f64(v99, vmlaq_n_f64(vmulq_n_f64(v97, v100.f64[0]), v98, *v79));
            v104 = (float64x2_t)vextq_s8((int8x16_t)v102, (int8x16_t)_Q19, 8uLL);
            v99.f64[0] = 0.0;
            v99.f64[1] = v103.f64[0];
            _Q19.f64[1] = v102.f64[0];
            v105 = vmulq_f64(v104, v99);
            *(_QWORD *)&v99.f64[0] = *(_OWORD *)&vmlsq_laneq_f64(vmulq_laneq_f64(v102, v103, 1), v103, v102, 1);
            v106 = vmlsq_f64(v105, _Q19, (float64x2_t)vextq_s8((int8x16_t)v103, v69, 8uLL));
            _Q5.f64[1] = v70[2].f64[1];
            _Q4 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v70, (int64x2_t)_Q16), v106.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v70, (int64x2_t)_Q16), v106, 1), _Q5, v99.f64[0]);
            _D6 = v106.f64[1];
            __asm { FMLA            D5, D6, V17.D[1] }
            _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v87, v99.f64[0]);
            _Q7 = *v72;
            __asm { FMLA            D3, D6, V7.D[1] }
            v111 = vmlad_n_f64(_D3, v84, v99.f64[0]);
            __asm { FMLA            D6, D2, V4.D[1] }
            v113 = -(_Q5.f64[0] + _D6);
            v114 = v111 / v113;
            _Q16.f64[0] = v72->f64[1];
            __asm { FMLA            D6, D16, V7.D[1] }
            v116 = sqrt(_D6 + v84 * v84) * 10000.0;
            if (v111 / v113 >= 2.22044605e-16 && v114 <= v116)
            {
              v100.f64[1] = *v79;
              v118 = (int8x16_t)vmulq_n_f64(v100, v111);
              v119 = v84
                   + v70[1].f64[0] * (*(double *)v118.i64 / v113)
                   + v70[2].f64[1] * (*(double *)vextq_s8(v118, v118, 8uLL).i64 / v113)
                   + v70[4].f64[0] * v114;
              if (v119 > 2.22044605e-16 && v119 < v116)
                break;
            }
          }
          *(_QWORD *)&v78[v82] &= ~v81;
          ++v75;
          v79 += 2;
          v80 += 16;
          if (v8 == v75)
            goto LABEL_31;
        }
        ++v76;
        *(_QWORD *)&v78[v82] |= v81;
        ++v75;
        v79 += 2;
        v80 += 16;
      }
      while (v8 != v75);
LABEL_31:
      if (v76 > v67)
      {
        v122 = (int64x2_t)v70[2];
        v121 = v70[3];
        v123 = *v70;
        v124 = vzip1q_s64(vdupq_laneq_s64((int64x2_t)v70[1], 1), v122);
        v125 = *(_QWORD *)&v70[1].f64[0];
        v126 = *(_QWORD *)&v70[2].f64[1];
        v122.i64[0] = *(_QWORD *)&v70[4].f64[0];
        __asm { FMOV            V7.2D, #1.0 }
        _Q7.f64[0] = v72[1].f64[0];
        a5[6] = *v72;
        a5[7] = _Q7;
        a5[4] = v121;
        a5[5] = (float64x2_t)v122;
        *a5 = v123;
        a5[1] = (float64x2_t)v125;
        a5[2] = (float64x2_t)v124;
        a5[3] = (float64x2_t)v126;
        v74 = v140;
        if (v140)
        {
          v128 = __dst;
          if (v140 <= v144 << 6)
          {
            v73 = v140 - 1;
          }
          else
          {
            if (__dst)
            {
              operator delete(__dst);
              __dst = 0;
              v143 = 0;
              v144 = 0;
              v74 = v140;
            }
            if ((v74 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v129 = v9;
            v73 = v74 - 1;
            v130 = ((v74 - 1) >> 6) + 1;
            v128 = operator new(8 * v130);
            __dst = v128;
            v143 = 0;
            v144 = v130;
            v9 = v129;
            v7 = v136;
          }
          memmove(v128, __src, ((v73 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v74 = v140;
          v10 = v137;
          v69 = 0uLL;
        }
        v143 = v74;
        v67 = v76;
      }
      ++v71;
      v72 = (float64x2_t *)((char *)&v145 + 24 * v71);
    }
    while (v71 != 2);
    v68 = v135 + 1;
    v70 = (float64x2_t *)((char *)&v149 + 72 * v135 + 72);
  }
  while (v135 != 1);
  if (&__dst != (void **)v9)
  {
    v131 = v143;
    if (v143)
    {
      v132 = *(void **)v9;
      if (v143 <= *(_QWORD *)(v9 + 16) << 6)
      {
        v133 = v143 - 1;
      }
      else
      {
        if (v132)
        {
          operator delete(v132);
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = 0;
          v131 = v143;
        }
        if ((v131 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v133 = v131 - 1;
        v134 = ((v131 - 1) >> 6) + 1;
        v132 = operator new(8 * v134);
        *(_QWORD *)v9 = v132;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = v134;
      }
      memmove(v132, __dst, ((v133 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
      v131 = v143;
    }
    *(_QWORD *)(v9 + 8) = v131;
  }
  if (__src)
    operator delete(__src);
  if (__dst)
    operator delete(__dst);
}

void sub_239440760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a16;
    if (!a16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2394407AC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_250ADBA68;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239440808(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)a1 = &off_250ADBA68;
  *(_OWORD *)(a1 + 80) = 0u;
  v7 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = a3;
  *(double *)(a1 + 144) = a4 * a4;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  sub_239441074((uint64_t *)(a1 + 80), 5uLL);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = (*(_QWORD *)(a1 + 112) - v9) >> 4;
  if (v8 <= v10)
  {
    if (v8 < v10)
      *(_QWORD *)(a1 + 112) = v9 + 16 * v8;
  }
  else
  {
    sub_239441074(v7, v8 - v10);
  }
  if (a5 <= 0.0 || a5 > 1.0)
  {
    sub_239A444D4((uint64_t)"unknown file", 2305, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v11 = *(uint64_t **)(a1 + 128);
  v13 = *v11;
  v12 = v11[1];
  if (10 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((v12 - v13) >> 4))
    v14 = 1;
  else
    v14 = vcvtad_u64_f64(1.0 / a5);
  *(_QWORD *)(a1 + 152) = v14;
  return a1;
}

void sub_239440948(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;

  v6 = *v4;
  if (*v4)
  {
    v1[21] = v6;
    operator delete(v6);
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      v8 = *v2;
      if (!*v2)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = *v3;
    if (!*v3)
      goto LABEL_3;
  }
  v1[14] = v7;
  operator delete(v7);
  v8 = *v2;
  if (!*v2)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  v1[11] = v8;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

void sub_2394409A0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_250ADBA68;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239440A0C(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) - **(_QWORD **)(a1 + 128)) >> 4;
}

uint64_t sub_239440A20(uint64_t a1, uint64_t a2)
{
  double v2;
  int8x16_t v3;
  double v4;
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  unint64_t v8;
  int8x16_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double v33;
  float64x2_t v36;
  double v42;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v56;
  unint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  int8x16_t v63;
  float64x2_t v64;
  float64x2_t v65;
  double v66;
  float64x2_t v67;
  unint64_t v68;
  unint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  double v73;
  double v74;
  double v77;
  double v81;
  int8x16_t v84;
  __int128 v85;
  __int128 v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  double *v100;
  double *v101;
  double v102;
  double v106;
  unint64_t v110;
  uint64_t v111;
  float64_t v113;
  float64_t v114;
  uint64_t v115;
  float64_t v116;
  double v117;
  float64_t v118;
  void *__src;
  unint64_t v120;
  uint64_t v121;

  v13 = *(_QWORD *)(a1 + 152);
  if (v13 == 1)
  {
    __src = 0;
    v120 = 0;
    v121 = 0;
    v14 = *(_QWORD *)(a1 + 160);
    v15 = *(_QWORD *)(a1 + 168);
    if (v14 != v15)
    {
      v16 = 0;
      while (1)
      {
        v22 = *(double *)(a1 + 144);
        v23 = *(uint64_t **)(a1 + 128);
        v24 = *v23;
        v25 = v23[1];
        v26 = (v25 - *v23) >> 4;
        sub_23941C5D8((uint64_t)&__src, v26, 0);
        if (v25 != v24)
          break;
        v28 = 0;
        if ((int)v16 < 0)
          goto LABEL_20;
LABEL_8:
        v14 += 72;
        if (v14 == v15)
        {
          if (__src)
            operator delete(__src);
          return v16;
        }
      }
      v27 = 0;
      v28 = 0;
      v29 = __src;
      if (v26 <= 1)
        v30 = 1;
      else
        v30 = v26;
      v31 = (double *)(**(_QWORD **)(a1 + 136) + 8);
      v32 = (double *)(**(_QWORD **)(a1 + 128) + 8);
      do
      {
        while (1)
        {
          v33 = *(v32 - 1);
          _D3 = *v31;
          _Q4.f64[0] = *(float64_t *)(v14 + 16);
          v36 = *(float64x2_t *)(v14 + 24);
          _Q17 = vaddq_f64(*(float64x2_t *)(v14 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v14, v33), v36, *v32));
          _Q4.f64[1] = *(float64_t *)(v14 + 40);
          __asm { FMLA            D2, D3, V17.D[1] }
          v42 = *(double *)(v14 + 64) + _Q4.f64[0] * v33 + _Q4.f64[1] * *v32 + _D2;
          _D3 = _Q17.f64[1];
          __asm { FMLA            D2, D3, V17.D[1] }
          _Q4.f64[0] = vaddq_f64(_Q4, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v14, *(int64x2_t *)&v36), *(v31 - 8)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v14, *(int64x2_t *)&v36), *v31)).f64[1];
          __asm { FMLA            D3, D4, V1.D[1] }
          v46 = v27 >> 6;
          v47 = 1 << v27;
          if (v42 * v42 / (_D2 + _D3) < v22)
            break;
          v29[v46] &= ~v47;
          ++v27;
          v31 += 2;
          v32 += 2;
          if (v30 == v27)
            goto LABEL_17;
        }
        v28 = (v28 + 1);
        v29[v46] |= v47;
        ++v27;
        v31 += 2;
        v32 += 2;
      }
      while (v30 != v27);
LABEL_17:
      if ((int)v28 <= (int)v16)
        goto LABEL_8;
LABEL_20:
      if (&__src != (void **)a2)
      {
        v18 = v120;
        if (v120)
        {
          v48 = *(_QWORD **)a2;
          if (v120 <= *(_QWORD *)(a2 + 16) << 6)
          {
            v17 = v120 - 1;
          }
          else
          {
            if (v48)
            {
              operator delete(v48);
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              v18 = v120;
            }
            if ((v18 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v17 = v18 - 1;
            v49 = ((v18 - 1) >> 6) + 1;
            v48 = operator new(8 * v49);
            *(_QWORD *)a2 = v48;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = v49;
          }
          memmove(v48, __src, ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v18 = v120;
        }
        *(_QWORD *)(a2 + 8) = v18;
      }
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v14;
      v19 = *(_OWORD *)(v14 + 16);
      v20 = *(_OWORD *)(v14 + 32);
      v21 = *(_OWORD *)(v14 + 48);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(v14 + 64);
      *(_OWORD *)(a1 + 40) = v20;
      *(_OWORD *)(a1 + 56) = v21;
      *(_OWORD *)(a1 + 24) = v19;
      v16 = v28;
      goto LABEL_8;
    }
    return 0;
  }
  v50 = *(uint64_t **)(a1 + 128);
  v51 = *v50;
  v52 = v50[1];
  v53 = *(_QWORD *)(a1 + 160);
  v54 = *(_QWORD *)(a1 + 168);
  if (v53 != v54 && v52 != v51)
  {
    v56 = 0;
    v57 = (v52 - v51) >> 4;
    v58 = **(_QWORD **)(a1 + 136);
    v59 = *(double *)(a1 + 144);
    do
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63.i64[0] = *(_QWORD *)(v53 + 16);
      v64 = *(float64x2_t *)v53;
      v65 = *(float64x2_t *)(v53 + 24);
      v66 = *(double *)(v53 + 64);
      v67 = *(float64x2_t *)(v53 + 48);
      v68 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
      v69 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
      v70 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v53, (int64x2_t)v65);
      v71 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v53, (int64x2_t)v65);
      do
      {
        v73 = *(double *)(v51 + v60);
        v74 = *(double *)(v51 + v60 + 8);
        _D24 = *(double *)(v58 + v60 + 8);
        _Q25 = vaddq_f64(v67, vmlaq_n_f64(vmulq_n_f64(v64, v73), v65, v74));
        v77 = *(double *)v63.i64 * v73 + *(double *)(v53 + 40) * v74;
        v72.f64[1] = *(float64_t *)(v53 + 40);
        v72.f64[0] = *(float64_t *)(v53 + 16);
        _Q22 = vaddq_f64(v72, vmlaq_n_f64(vmulq_n_f64(v70, *(double *)(v58 + v60)), v71, _D24));
        __asm { FMLA            D23, D24, V25.D[1] }
        _D26 = _Q25.f64[1];
        v81 = v66 + v77 + _D23;
        __asm { FMLA            D24, D26, V25.D[1] }
        _Q25.f64[0] = _Q22.f64[1];
        __asm { FMLA            D23, D25, V22.D[1] }
        if (v81 * v81 / (_D24 + _D23) < v59)
          ++v62;
        v61 += v13;
        v60 += 16 * v13;
      }
      while (v61 < v57);
      LODWORD(v70.f64[0]) = v56;
      LODWORD(v71.f64[0]) = v62;
      v84 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)v71, (int32x4_t)v70), 0);
      v9.i64[1] = v5;
      *(_QWORD *)&v67.f64[1] = v68;
      v9 = vbslq_s8(v84, (int8x16_t)v67, v9);
      *(double *)&v3.i64[1] = v4;
      v7.i64[1] = v10;
      v3 = vbslq_s8(v84, *(int8x16_t *)(v53 + 32), v3);
      v63.i64[1] = *(_QWORD *)(v53 + 24);
      v7 = vbslq_s8(v84, v63, v7);
      v6.i64[1] = v8;
      *(_QWORD *)&v64.f64[1] = v69;
      v6 = vbslq_s8(v84, (int8x16_t)v64, v6);
      v8 = vextq_s8(v6, v6, 8uLL).u64[0];
      v10 = vextq_s8(v7, v7, 8uLL).u64[0];
      *(_QWORD *)&v4 = vextq_s8(v3, v3, 8uLL).u64[0];
      v5 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = COERCE_DOUBLE(vbsl_s8(*(int8x8_t *)v84.i8, *(int8x8_t *)&v66, *(int8x8_t *)&v2));
      if (v62 > v56)
        v56 = v62;
      v53 += 72;
    }
    while (v53 != v54);
  }
  v113 = *(double *)v3.i64;
  v114 = *(double *)&v10;
  v115 = v9.i64[0];
  v116 = *(double *)&v8;
  v117 = *(double *)v7.i64;
  v118 = *(double *)v6.i64;
  *(_QWORD *)&v85 = v6.i64[0];
  *((_QWORD *)&v85 + 1) = v8;
  *(_OWORD *)(a1 + 8) = v85;
  *(_QWORD *)&v85 = v7.i64[0];
  *((_QWORD *)&v85 + 1) = v10;
  *(_QWORD *)&v86 = v3.i64[0];
  *((double *)&v86 + 1) = v4;
  *(_OWORD *)(a1 + 24) = v85;
  *(_OWORD *)(a1 + 40) = v86;
  *(double *)(a1 + 72) = v2;
  *(_QWORD *)&v85 = v9.i64[0];
  *((_QWORD *)&v85 + 1) = v5;
  *(_OWORD *)(a1 + 56) = v85;
  v87 = *(double *)(a1 + 144);
  v89 = *v50;
  v88 = v50[1];
  v90 = (v88 - *v50) >> 4;
  sub_23941C5D8(a2, v90, 0);
  if (v88 == v89)
    return 0;
  v91 = 0;
  v16 = 0;
  v92 = *(_QWORD **)a2;
  if (v90 <= 1)
    v93 = 1;
  else
    v93 = v90;
  v96.f64[0] = v118;
  v94.f64[0] = v118;
  *(_QWORD *)&v95.f64[0] = v115;
  v98.f64[0] = v116;
  v94.f64[1] = v116;
  *(_QWORD *)&v95.f64[1] = v5;
  v97.f64[0] = v114;
  v96.f64[1] = v114;
  v97.f64[1] = v113;
  v98.f64[1] = v113;
  v99.f64[0] = v117;
  v99.f64[1] = v4;
  v100 = (double *)(**(_QWORD **)(a1 + 136) + 8);
  v101 = (double *)(**(_QWORD **)(a1 + 128) + 8);
  do
  {
    while (1)
    {
      v102 = *(v101 - 1);
      _D5 = *v100;
      _Q6 = vaddq_f64(v95, vmlaq_n_f64(vmulq_n_f64(v94, v102), v97, *v101));
      __asm { FMLA            D4, D5, V6.D[1] }
      v106 = v2 + v117 * v102 + v4 * *v101 + _D4;
      _D5 = _Q6.f64[1];
      __asm { FMLA            D4, D5, V6.D[1] }
      _Q6.f64[0] = vaddq_f64(v99, vmlaq_n_f64(vmulq_n_f64(v96, *(v100 - 8)), v98, *v100)).f64[1];
      __asm { FMLA            D5, D6, V3.D[1] }
      v110 = v91 >> 6;
      v111 = 1 << v91;
      if (v106 * v106 / (_D4 + _D5) >= v87)
        break;
      v16 = (v16 + 1);
      v92[v110] |= v111;
      ++v91;
      v100 += 2;
      v101 += 2;
      if (v93 == v91)
        return v16;
    }
    v92[v110] &= ~v111;
    ++v91;
    v100 += 2;
    v101 += 2;
  }
  while (v93 != v91);
  return v16;
}

void sub_239440F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_239440FB8(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = 0;
    do
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 80) + v5) = *(_OWORD *)(**(_QWORD **)(a1 + 128) + 16 * *v3);
      v6 = *v3++;
      *(_OWORD *)(*(_QWORD *)(a1 + 104) + v5) = *(_OWORD *)(**(_QWORD **)(a1 + 136) + 16 * v6);
      v5 += 16;
    }
    while (v3 != v4);
  }
  return (sub_2394411A4() & 1) != 0 && *(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 168);
}

__n128 sub_239441050@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 48) = v3;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_239441074(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    a1[1] = (uint64_t)&v5[16 * a2];
    return;
  }
  v6 = (char *)*a1;
  v7 = (uint64_t)&v5[-*a1] >> 4;
  v8 = v7 + a2;
  if ((v7 + a2) >> 60)
    sub_2394189F8();
  v9 = v4 - (_QWORD)v6;
  if (v9 >> 3 > v8)
    v8 = v9 >> 3;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 >> 60)
      sub_239418A80();
    v11 = (char *)operator new(16 * v10);
    v12 = (uint64_t)&v11[16 * v7];
    v13 = &v11[16 * v10];
    v14 = v12 + 16 * a2;
    if (v5 == v6)
    {
LABEL_11:
      *a1 = v12;
      a1[1] = v14;
      a1[2] = (uint64_t)v13;
      if (!v5)
        return;
LABEL_17:
      operator delete(v5);
      return;
    }
  }
  else
  {
    v12 = 16 * v7;
    v13 = 0;
    v14 = 16 * v7 + 16 * a2;
    if (v5 == v6)
      goto LABEL_11;
  }
  do
  {
    *(_OWORD *)(v12 - 16) = *((_OWORD *)v5 - 1);
    v12 -= 16;
    v5 -= 16;
  }
  while (v5 != v6);
  v5 = (char *)*a1;
  *a1 = v12;
  a1[1] = v14;
  a1[2] = (uint64_t)v13;
  if (v5)
    goto LABEL_17;
}

uint64_t sub_2394411A4()
{
  uint64_t v0;
  uint64_t v1;
  float64x2_t **v2;
  double *v3;
  unint64_t v4;
  double *v5;
  uint64_t v7;
  float64x2_t **v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char *v20;
  char *v21;
  _OWORD *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  int v30;
  void *v31;
  unint64_t v32;
  float64x2_t *v33;
  int *v34;
  int v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  double v56;
  double v58[30];
  void *__dst[100];
  void *__p;
  _BYTE *v61;
  uint64_t v62;
  double v63[100];
  float64x2_t v64;
  double v65;
  float64_t v66;
  float64x2_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  float64x2_t v72;
  double v73;
  float64_t v74;
  float64x2_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  float64x2_t v80;
  double v81;
  double v82;
  float64x2_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  float64x2_t v88;
  double v89;
  float64_t v90;
  float64x2_t v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  float64x2_t v96;
  double v97;
  float64_t v98;
  float64x2_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  float64x2_t v104;
  double v105;
  double v106;
  float64x2_t v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  float64x2_t v112;
  double v113;
  uint64_t v114;
  float64x2_t v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  float64x2_t v120;
  double v121;
  uint64_t v122;
  float64x2_t v123;
  uint64_t v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  float64x2_t v128;
  double v129;
  uint64_t v130;
  float64x2_t v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  float64x2_t v136;
  double v137;
  uint64_t v138;
  float64x2_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  float64x2_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  float64x2_t v153;
  float64x2_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  float64x2_t v159;
  __int128 v160;
  __int128 v161;
  double v162[45];
  _DWORD v163[10];
  float64x2_t v164;
  double v165;
  float64x2_t v166;
  __int128 v167;
  __int128 v168;
  double v169;
  float64x2_t v170;
  double v171;
  _BYTE v172[24];
  __int128 v173;
  __int128 v174;
  float64x2_t v175;
  double v176;
  float64x2_t v177;
  _BYTE v178[24];
  __int128 v179;
  float64x2_t v180;
  _BYTE v181[32];
  __int128 v182;
  __int128 v183;
  _BYTE v184[24];
  float64x2_t v185;
  double v186;
  __int128 v187;
  __int128 v188;
  float64x2_t v189;
  _BYTE v190[24];
  double v191;
  __int128 v192;
  _BYTE v193[40];
  float64x2_t v194;
  double v195;
  __int128 v196;
  __int128 v197;
  float64x2_t v198;
  double v199;
  float64x2_t v200;
  double v201;
  _BYTE v202[48];
  double v203;
  float64x2_t v204;
  double v205;
  __int128 v206;
  __int128 v207;
  float64x2_t v208;
  double v209;
  float64x2_t v210;
  double v211;
  __int128 v212;
  __int128 v213;
  _QWORD v214[100];
  void *v215;
  void *v216;
  char *v217;
  void *v218;
  void *v219;
  char *v220;
  void *__src;
  int v222[2];
  _OWORD *v223;
  uint64_t v224;

  v0 = MEMORY[0x24BDAC7A8]();
  v224 = *MEMORY[0x24BDAC8D0];
  v3 = *(double **)v0;
  v4 = *(_QWORD *)(v0 + 8) - *(_QWORD *)v0;
  v5 = *(double **)v1;
  if (v4 < 0x50 || v4 != *(_QWORD *)(v1 + 8) - *(_QWORD *)v1)
    return 0;
  v8 = v2;
  v9 = v3[1];
  v162[0] = *v5 * *v3;
  v162[5] = *v5 * v9;
  v162[10] = *v5;
  v162[15] = v5[1] * *v3;
  v162[20] = v5[1] * v3[1];
  v162[25] = v5[1];
  v162[30] = *v3;
  v162[35] = v3[1];
  v162[40] = 1.0;
  v10 = v5[2];
  v11 = v10 * v3[2];
  v162[6] = v10 * v3[3];
  v162[11] = v5[2];
  v162[16] = v5[3] * v3[2];
  v162[21] = v5[3] * v3[3];
  v162[26] = v5[3];
  v162[31] = v3[2];
  v162[36] = v3[3];
  v162[41] = 1.0;
  v12 = v5[4];
  v13 = v3[5];
  v14 = v12 * v3[4];
  v162[1] = v11;
  v162[2] = v14;
  v162[7] = v12 * v13;
  v162[12] = v5[4];
  v162[17] = v5[5] * v3[4];
  v162[22] = v5[5] * v3[5];
  v162[27] = v5[5];
  v162[32] = v3[4];
  v162[37] = v3[5];
  v162[42] = 1.0;
  v15 = v5[6];
  v16 = v15 * v3[6];
  v162[8] = v15 * v3[7];
  v162[13] = v5[6];
  v162[18] = v5[7] * v3[6];
  v162[23] = v5[7] * v3[7];
  v162[28] = v5[7];
  v162[33] = v3[6];
  v162[38] = v3[7];
  v162[43] = 1.0;
  v17 = v5[8];
  v18 = v3[9];
  v19 = v17 * v3[8];
  v162[3] = v16;
  v162[4] = v19;
  v162[9] = v17 * v18;
  v162[14] = v5[8];
  v162[19] = v5[9] * v3[8];
  v162[24] = v5[9] * v3[9];
  v162[29] = v5[9];
  v162[34] = v3[8];
  v162[39] = v3[9];
  v162[44] = 1.0;
  sub_239442268((uint64_t)v162, (uint64_t)&v164, v63, (uint64_t)__dst);
  v144 = v167;
  v145 = v168;
  v146 = *(_OWORD *)&v172[8];
  v147 = v173;
  v148 = v177;
  v149 = *(_OWORD *)v178;
  v150 = *(_OWORD *)v181;
  v151 = *(_OWORD *)&v181[16];
  v152 = *(_OWORD *)&v184[8];
  v153 = v185;
  v154 = v189;
  v155 = *(_OWORD *)v190;
  v156 = *(_OWORD *)&v193[8];
  v157 = *(_OWORD *)&v193[24];
  v158 = v197;
  v159 = v198;
  v160 = *(_OWORD *)&v202[8];
  v161 = *(_OWORD *)&v202[24];
  sub_2394441A0();
  v63[80] = *((double *)&v168 + 1);
  *(_QWORD *)&v63[70] = v168;
  v63[90] = v169;
  v72.f64[0] = v170.f64[1];
  v64.f64[0] = v170.f64[0];
  v80.f64[0] = v171;
  v88.f64[0] = *(float64_t *)v172;
  v96.f64[0] = *(float64_t *)&v172[8];
  v104.f64[0] = *(float64_t *)&v172[16];
  v120.f64[0] = *((float64_t *)&v173 + 1);
  *(_QWORD *)&v112.f64[0] = v173;
  v136.f64[0] = *((float64_t *)&v174 + 1);
  *(_QWORD *)&v128.f64[0] = v174;
  v63[0] = v164.f64[0];
  v63[1] = v175.f64[0];
  v63[10] = v164.f64[1];
  v63[11] = v175.f64[1];
  v63[20] = v165;
  v63[21] = v176;
  v63[30] = v166.f64[0];
  v63[31] = v177.f64[0];
  v63[40] = v166.f64[1];
  v63[41] = v177.f64[1];
  *(_QWORD *)&v63[50] = v167;
  v63[51] = *(double *)v178;
  v63[60] = *((double *)&v167 + 1);
  v63[61] = *(double *)&v178[8];
  v63[71] = *(double *)&v178[16];
  v63[91] = *((double *)&v179 + 1);
  *(_QWORD *)&v63[81] = v179;
  v72.f64[1] = v180.f64[1];
  v64.f64[1] = v180.f64[0];
  v80.f64[1] = *(float64_t *)v181;
  v88.f64[1] = *(float64_t *)&v181[8];
  v96.f64[1] = *(float64_t *)&v181[16];
  v104.f64[1] = *(float64_t *)&v181[24];
  v120.f64[1] = *((float64_t *)&v182 + 1);
  *(_QWORD *)&v112.f64[1] = v182;
  v136.f64[1] = *((float64_t *)&v183 + 1);
  *(_QWORD *)&v128.f64[1] = v183;
  v63[72] = *((double *)&v187 + 1);
  v63[92] = *((double *)&v188 + 1);
  *(_QWORD *)&v63[82] = v188;
  v73 = v189.f64[1];
  v65 = v189.f64[0];
  v81 = *(double *)v190;
  v89 = *(double *)&v190[8];
  v97 = *(double *)&v190[16];
  v105 = v191;
  v121 = *((double *)&v192 + 1);
  v113 = *(double *)&v192;
  v129 = *(double *)v193;
  v137 = *(double *)&v193[8];
  v63[2] = *(double *)v184;
  v63[3] = *(double *)&v193[16];
  v63[12] = *(double *)&v184[8];
  v63[13] = *(double *)&v193[24];
  v63[22] = *(double *)&v184[16];
  v63[23] = *(double *)&v193[32];
  v63[32] = v185.f64[0];
  v63[33] = v194.f64[0];
  v63[42] = v185.f64[1];
  v63[43] = v194.f64[1];
  v63[52] = v186;
  v63[53] = v195;
  *(_QWORD *)&v63[62] = v187;
  v63[73] = *((double *)&v196 + 1);
  *(_QWORD *)&v63[63] = v196;
  v63[93] = *((double *)&v197 + 1);
  *(_QWORD *)&v63[83] = v197;
  v74 = v198.f64[1];
  v66 = v198.f64[0];
  v82 = v199;
  v98 = v200.f64[1];
  v90 = v200.f64[0];
  v106 = v201;
  v114 = *(_QWORD *)v202;
  v122 = *(_QWORD *)&v202[8];
  v130 = *(_QWORD *)&v202[16];
  v138 = *(_QWORD *)&v202[24];
  v63[74] = *((double *)&v206 + 1);
  *(_QWORD *)&v63[64] = v206;
  v63[94] = *((double *)&v207 + 1);
  *(_QWORD *)&v63[84] = v207;
  v75.f64[0] = v208.f64[1];
  v67.f64[0] = v208.f64[0];
  v83.f64[0] = v209;
  v99.f64[0] = v210.f64[1];
  v91.f64[0] = v210.f64[0];
  v107.f64[0] = v211;
  v123.f64[0] = *((float64_t *)&v212 + 1);
  *(_QWORD *)&v115.f64[0] = v212;
  v139.f64[0] = *((float64_t *)&v213 + 1);
  *(_QWORD *)&v131.f64[0] = v213;
  v63[4] = *(double *)&v202[32];
  v63[5] = *(double *)v214;
  v63[14] = *(double *)&v202[40];
  v63[15] = *(double *)&v214[1];
  v63[24] = v203;
  v63[25] = *(double *)&v214[2];
  v63[34] = v204.f64[0];
  v63[35] = *(double *)&v214[3];
  v63[44] = v204.f64[1];
  v63[45] = *(double *)&v214[4];
  v63[54] = v205;
  v63[55] = *(double *)&v214[5];
  v63[65] = *(double *)&v214[6];
  v63[75] = *(double *)&v214[7];
  v63[85] = *(double *)&v214[8];
  v63[95] = *(double *)&v214[9];
  *(_QWORD *)&v67.f64[1] = v214[10];
  *(_QWORD *)&v75.f64[1] = v214[11];
  *(_QWORD *)&v83.f64[1] = v214[12];
  *(_QWORD *)&v91.f64[1] = v214[13];
  *(_QWORD *)&v99.f64[1] = v214[14];
  *(_QWORD *)&v107.f64[1] = v214[15];
  *(_QWORD *)&v115.f64[1] = v214[16];
  *(_QWORD *)&v123.f64[1] = v214[17];
  *(_QWORD *)&v131.f64[1] = v214[18];
  *(_QWORD *)&v139.f64[1] = v214[19];
  v63[66] = *(double *)&v214[26];
  v63[76] = *(double *)&v214[27];
  v63[86] = *(double *)&v214[28];
  v63[96] = *(double *)&v214[29];
  v68 = v214[30];
  v76 = v214[31];
  v84 = v214[32];
  v92 = v214[33];
  v100 = v214[34];
  v108 = v214[35];
  v116 = v214[36];
  v124 = v214[37];
  v132 = v214[38];
  v140 = v214[39];
  v63[6] = *(double *)&v214[20];
  v63[7] = *(double *)&v214[40];
  v63[16] = *(double *)&v214[21];
  v63[17] = *(double *)&v214[41];
  v63[26] = *(double *)&v214[22];
  v63[27] = *(double *)&v214[42];
  v63[36] = *(double *)&v214[23];
  v63[37] = *(double *)&v214[43];
  v63[46] = *(double *)&v214[24];
  v63[47] = *(double *)&v214[44];
  v63[56] = *(double *)&v214[25];
  v63[57] = *(double *)&v214[45];
  v63[67] = *(double *)&v214[46];
  v63[77] = *(double *)&v214[47];
  v63[87] = *(double *)&v214[48];
  v63[97] = *(double *)&v214[49];
  v69 = *(double *)&v214[50];
  v77 = *(double *)&v214[51];
  v85 = *(double *)&v214[52];
  v93 = *(double *)&v214[53];
  v101 = *(double *)&v214[54];
  v109 = *(double *)&v214[55];
  v117 = *(double *)&v214[56];
  v125 = *(double *)&v214[57];
  v133 = *(double *)&v214[58];
  v141 = *(double *)&v214[59];
  v63[68] = *(double *)&v214[66];
  v63[78] = *(double *)&v214[67];
  v63[88] = *(double *)&v214[68];
  v63[98] = *(double *)&v214[69];
  v70 = v214[70];
  v78 = v214[71];
  v86 = v214[72];
  v94 = v214[73];
  v102 = v214[74];
  v110 = v214[75];
  v118 = v214[76];
  v126 = v214[77];
  v134 = v214[78];
  v142 = v214[79];
  v63[8] = *(double *)&v214[60];
  v63[9] = *(double *)&v214[80];
  v63[18] = *(double *)&v214[61];
  v63[19] = *(double *)&v214[81];
  v63[28] = *(double *)&v214[62];
  v63[29] = *(double *)&v214[82];
  v63[38] = *(double *)&v214[63];
  v63[39] = *(double *)&v214[83];
  v63[48] = *(double *)&v214[64];
  v63[49] = *(double *)&v214[84];
  v63[58] = *(double *)&v214[65];
  v63[59] = *(double *)&v214[85];
  v63[69] = *(double *)&v214[86];
  v63[79] = *(double *)&v214[87];
  v63[89] = *(double *)&v214[88];
  v63[99] = *(double *)&v214[89];
  v71 = v214[90];
  v79 = v214[91];
  v87 = v214[92];
  v95 = v214[93];
  v103 = v214[94];
  v111 = v214[95];
  v119 = v214[96];
  v127 = v214[97];
  v135 = v214[98];
  v143 = v214[99];
  sub_239450FB8(v63);
  v164 = vnegq_f64(v64);
  v166 = vnegq_f64(v67);
  v170 = vnegq_f64(v72);
  *(float64x2_t *)v172 = vnegq_f64(v75);
  v173 = xmmword_239EC6850;
  v174 = 0u;
  *((_QWORD *)&v167 + 1) = 0x3FF0000000000000;
  *((_QWORD *)&v197 + 1) = 0x3FF0000000000000;
  v175 = vnegq_f64(v80);
  v177 = vnegq_f64(v83);
  v179 = 0u;
  v180 = vnegq_f64(v88);
  *(_OWORD *)&v178[8] = 0u;
  v187 = 0u;
  v188 = 0u;
  v192 = 0u;
  *(_OWORD *)v193 = 0u;
  v196 = 0u;
  memset(v202, 0, 32);
  v206 = 0u;
  v207 = 0u;
  v212 = 0u;
  v213 = 0u;
  v182 = 0u;
  v183 = xmmword_239EC6840;
  *(float64x2_t *)v184 = vnegq_f64(v96);
  v189 = vnegq_f64(v104);
  *(float64x2_t *)&v193[16] = vnegq_f64(v112);
  v198 = vnegq_f64(v120);
  *(float64x2_t *)&v202[32] = vnegq_f64(v128);
  v208 = vnegq_f64(v136);
  *(float64x2_t *)&v181[8] = vnegq_f64(v91);
  v185 = vnegq_f64(v99);
  *(float64x2_t *)&v190[8] = vnegq_f64(v107);
  v194 = vnegq_f64(v115);
  v200 = vnegq_f64(v123);
  v204 = vnegq_f64(v131);
  v210 = vnegq_f64(v139);
  v168 = 0uLL;
  v169 = 0.0;
  *(_QWORD *)&v197 = 0;
  v165 = -v65;
  *(double *)&v167 = -v69;
  v171 = -v73;
  *(double *)&v172[16] = -v77;
  v176 = -v81;
  *(double *)v178 = -v85;
  *(double *)v181 = -v89;
  *(double *)&v181[24] = -v93;
  *(double *)&v184[16] = -v97;
  v186 = -v101;
  *(double *)v190 = -v105;
  v191 = -v109;
  *(double *)&v193[32] = -v113;
  v195 = -v117;
  v199 = -v121;
  v201 = -v125;
  v203 = -v129;
  v205 = -v133;
  v209 = -v137;
  v211 = -v141;
  v215 = operator new(0x50uLL);
  v20 = (char *)v215 + 80;
  v217 = (char *)v215 + 80;
  memset_pattern16(v215, &unk_239EC6930, 0x50uLL);
  v216 = v20;
  v218 = 0;
  v220 = 0;
  v219 = 0;
  v21 = (char *)operator new(0x28uLL);
  v218 = v21;
  v220 = v21 + 40;
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_QWORD *)v21 + 4) = 0;
  v219 = v21 + 40;
  __src = 0;
  v223 = 0;
  *(_QWORD *)v222 = 0;
  v22 = operator new(0xA0uLL);
  __src = v22;
  v223 = v22 + 10;
  *v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[9] = 0u;
  *(_QWORD *)v222 = v22 + 10;
  bzero(&v214[1], 0x310uLL);
  v214[0] = 0x3FF0000000000000;
  v214[11] = 0x3FF0000000000000;
  v214[22] = 0x3FF0000000000000;
  v214[33] = 0x3FF0000000000000;
  v214[44] = 0x3FF0000000000000;
  v214[55] = 0x3FF0000000000000;
  v214[66] = 0x3FF0000000000000;
  v214[77] = 0x3FF0000000000000;
  v214[88] = 0x3FF0000000000000;
  v214[99] = 0x3FF0000000000000;
  v7 = sub_239452008((uint64_t)&v164);
  if ((v7 & 1) != 0)
  {
    v61 = 0;
    __p = 0;
    v62 = 0;
    sub_2394549D8(&__p, (char *)__src, *(char **)v222, (uint64_t)(*(_QWORD *)v222 - (_QWORD)__src) >> 4);
    memcpy(__dst, v214, sizeof(__dst));
    if (v61 == __p)
      goto LABEL_20;
    v23 = 0;
    v24 = 0;
    v25 = (v61 - (_BYTE *)__p) >> 4;
    if (v25 <= 1)
      v25 = 1;
    v26 = (double *)((char *)__p + 8);
    do
    {
      if (fabs(*v26) < 2.22044605e-16)
        v163[v24++] = v23;
      ++v23;
      v26 += 2;
    }
    while (v25 != v23);
    v27 = v24;
    if (v24 >= 1)
    {
      v28 = v163;
      v29 = v24;
      do
      {
        v30 = *v28++;
        v31 = __dst[10 * v30 + 9];
        v58[3 * v30] = *(double *)&__dst[10 * v30 + 6] / *(double *)&v31;
        v58[3 * v30 + 1] = *(double *)&__dst[10 * v30 + 7] / *(double *)&v31;
        v58[3 * v30 + 2] = *(double *)&__dst[10 * v30 + 8] / *(double *)&v31;
        --v29;
      }
      while (v29);
    }
    if (!v24)
    {
LABEL_20:
      v8[1] = *v8;
      goto LABEL_27;
    }
    v32 = 0x8E38E38E38E38E39 * (((char *)v8[1] - (char *)*v8) >> 3);
    if (v24 <= v32)
    {
      if (v24 < v32)
      {
        v8[1] = (float64x2_t *)((char *)*v8 + 72 * v24);
        if (v24 <= 0)
          goto LABEL_27;
        goto LABEL_25;
      }
    }
    else
    {
      sub_239454B1C((void **)v8, v24 - v32);
    }
    if (v24 < 1)
      goto LABEL_27;
LABEL_25:
    v33 = *v8 + 2;
    v34 = v163;
    do
    {
      v35 = *v34++;
      v37.f64[0] = *((float64_t *)&v144 + 1);
      *(_QWORD *)&v36.f64[0] = v144;
      v39.f64[0] = v148.f64[1];
      v38.f64[0] = v148.f64[0];
      v41.f64[0] = *((float64_t *)&v152 + 1);
      *(_QWORD *)&v40.f64[0] = v152;
      v42.f64[0] = *((float64_t *)&v145 + 1);
      *(_QWORD *)&v43.f64[0] = v145;
      v37.f64[1] = *((float64_t *)&v150 + 1);
      *(_QWORD *)&v36.f64[1] = v150;
      *(_QWORD *)&v43.f64[1] = v151;
      *(_QWORD *)&v44.f64[0] = v149;
      v38.f64[1] = v154.f64[0];
      v45.f64[0] = *((float64_t *)&v149 + 1);
      v39.f64[1] = v154.f64[1];
      v46 = v58[3 * v35];
      *(_QWORD *)&v44.f64[1] = v155;
      v48.f64[0] = *((float64_t *)&v156 + 1);
      *(_QWORD *)&v47.f64[0] = v156;
      v48.f64[1] = *((float64_t *)&v146 + 1);
      *(_QWORD *)&v47.f64[1] = v146;
      v49 = v58[3 * v35 + 1];
      v50 = v58[3 * v35 + 2];
      v51 = vmlaq_n_f64(vmulq_n_f64(v48, v49), v47, v46);
      v52 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v37, v49), v36, v46), v43, v50);
      v47.f64[0] = *((float64_t *)&v157 + 1);
      *(_QWORD *)&v43.f64[0] = v157;
      *(_QWORD *)&v43.f64[1] = v147;
      v53 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v39, v49), v38, v46), v44, v50);
      v54 = vmlaq_n_f64(v51, v43, v50);
      *(_QWORD *)&v40.f64[1] = v158;
      v43.f64[0] = v153.f64[1];
      v36.f64[0] = v153.f64[0];
      v41.f64[1] = *((float64_t *)&v158 + 1);
      v36.f64[1] = v159.f64[0];
      v55 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v41, v49), v40, v46), v36, v50);
      v40.f64[0] = v49 * *((double *)&v160 + 1) + v46 * *(double *)&v160;
      v56 = *((double *)&v161 + 1);
      v40.f64[0] = v40.f64[0] + *(double *)&v161 * v50;
      v42.f64[1] = *((float64_t *)&v151 + 1);
      v45.f64[1] = *((float64_t *)&v155 + 1);
      v47.f64[1] = *((float64_t *)&v147 + 1);
      v43.f64[1] = v159.f64[1];
      v33[-2] = vaddq_f64(v42, v52);
      v33[-1] = vaddq_f64(v47, v54);
      *v33 = vaddq_f64(v43, v55);
      v33[1] = vaddq_f64(v45, v53);
      v33[2].f64[0] = v56 + v40.f64[0];
      v33 = (float64x2_t *)((char *)v33 + 72);
      --v27;
    }
    while (v27);
LABEL_27:
    if (__p)
    {
      v61 = __p;
      operator delete(__p);
    }
  }
  if (__src)
  {
    *(_QWORD *)v222 = __src;
    operator delete(__src);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  return v7;
}

void sub_2394421EC(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x418];
  if (STACK[0x418])
  {
    STACK[0x420] = (unint64_t)v2;
    operator delete(v2);
    sub_23945210C(&STACK[0xD20]);
    _Unwind_Resume(a1);
  }
  sub_23945210C(&STACK[0xD20]);
  _Unwind_Resume(a1);
}

void sub_239442228(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;

  STACK[0x1380] = (unint64_t)v1;
  operator delete(v1);
  v3 = (void *)STACK[0x1360];
  if (STACK[0x1360])
  {
    STACK[0x1368] = (unint64_t)v3;
    operator delete(v3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239442268(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  double *v5;
  float64x2_t v6;
  double v7;
  float64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float64_t v42;
  uint64_t v43;
  size_t v44;
  double *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  double v50;
  double v51;
  double *v52;
  uint64_t v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  unint64_t v59;
  float64x2_t *v60;
  unint64_t v61;
  double *v62;
  float64x2_t v63;
  unint64_t v64;
  uint64_t v65;
  double *v66;
  double *v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  unint64_t v75;
  float64x2_t *v76;
  float64x2_t v77;
  unint64_t v78;
  double *v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  double *v86;
  double v87;
  uint64_t v88;
  double *v89;
  double *v90;
  double v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  int v110;
  double v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  char v119;
  uint64_t v120;
  double *v121;
  unint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  float64x2_t *v129;
  float64x2_t *v130;
  float64x2_t v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  float64x2_t v271;
  double v272;
  double v273;
  double v274;
  float64x2_t v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  float64x2_t v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  __int128 v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  double v360;
  double v361;
  float64x2_t v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  float64x2_t v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  __int128 v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;
  double v437;
  double v438;
  double v439;
  double v440;
  double v441;
  std::bad_alloc *exception;
  std::bad_alloc *v444;
  double v445;
  double v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double v467;
  double v468;
  double v469;
  double v470;
  double v471;
  unint64_t v473;
  double v474;
  double v475;
  double v476;
  int v477;
  double v478;
  double v479;
  double v480;
  uint64_t v481;
  double v482;
  double v483;
  double v484;
  double v485;
  uint64_t v486;
  double v487;
  double v488;
  double v489;
  double v490;
  unsigned int v491;
  double v492;
  double v493;
  uint64_t v494;
  double v495;
  double v496;
  double v497;
  float64x2_t *v498;
  double v499;
  double v500;
  double v501;
  uint64_t v502;
  double v503;
  double v504;
  double v505;
  double v506;
  uint64_t v507;
  double v508;
  double v509;
  double v510;
  uint64_t v511;
  double v512;
  double v513;
  double v514;
  uint64_t v515;
  double v516;
  double v517;
  void *v518[2];
  unsigned int v519;
  void *memptr;
  float64x2_t v521;
  float64x2_t v522;
  double v523;
  _BYTE v524[32];
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  float64x2_t v534;
  float64x2_t v535;
  double v536[4];

  v536[1] = *(double *)MEMORY[0x24BDAC8D0];
  v8 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, *(float64x2_t *)a1, *(float64x2_t *)a1), *(float64x2_t *)(a1 + 40), *(float64x2_t *)(a1 + 40)), *(float64x2_t *)(a1 + 80), *(float64x2_t *)(a1 + 80)), *(float64x2_t *)(a1 + 120), *(float64x2_t *)(a1 + 120)), *(float64x2_t *)(a1 + 160), *(float64x2_t *)(a1 + 160)), *(float64x2_t *)(a1 + 200), *(float64x2_t *)(a1 + 200)), *(float64x2_t *)(a1 + 240),
             *(float64x2_t *)(a1 + 240)),
           *(float64x2_t *)(a1 + 280),
           *(float64x2_t *)(a1 + 280)),
         *(float64x2_t *)(a1 + 320),
         *(float64x2_t *)(a1 + 320));
  v5 = &v534.f64[1];
  v6 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64((float64x2_t)0, *(float64x2_t *)(a1 + 16), *(float64x2_t *)(a1 + 16)), *(float64x2_t *)(a1 + 56), *(float64x2_t *)(a1 + 56)), *(float64x2_t *)(a1 + 96), *(float64x2_t *)(a1 + 96)), *(float64x2_t *)(a1 + 136), *(float64x2_t *)(a1 + 136)), *(float64x2_t *)(a1 + 176), *(float64x2_t *)(a1 + 176)), *(float64x2_t *)(a1 + 216), *(float64x2_t *)(a1 + 216)), *(float64x2_t *)(a1 + 256),
             *(float64x2_t *)(a1 + 256)),
           *(float64x2_t *)(a1 + 296),
           *(float64x2_t *)(a1 + 296)),
         *(float64x2_t *)(a1 + 336),
         *(float64x2_t *)(a1 + 336));
  v534 = v8;
  v535 = v6;
  *(_OWORD *)a4 = xmmword_239EC6870;
  v461 = 0.0;
  v7 = *(double *)(a1 + 32) * *(double *)(a1 + 32)
     + 0.0
     + *(double *)(a1 + 72) * *(double *)(a1 + 72)
     + *(double *)(a1 + 112) * *(double *)(a1 + 112)
     + *(double *)(a1 + 152) * *(double *)(a1 + 152)
     + *(double *)(a1 + 192) * *(double *)(a1 + 192)
     + *(double *)(a1 + 232) * *(double *)(a1 + 232)
     + *(double *)(a1 + 272) * *(double *)(a1 + 272)
     + *(double *)(a1 + 312) * *(double *)(a1 + 312)
     + *(double *)(a1 + 352) * *(double *)(a1 + 352);
  v536[0] = v7;
  *(_DWORD *)(a4 + 16) = 4;
  v8.f64[0] = v8.f64[1];
  if (v534.f64[0] >= v8.f64[1])
    v8.f64[0] = v534.f64[0];
  v9 = 8 * (v534.f64[0] < v8.f64[1]);
  if (v534.f64[0] >= v8.f64[1])
    v5 = (double *)&v534;
  if (v8.f64[0] < v6.f64[0])
  {
    v8.f64[0] = v6.f64[0];
    v9 = 16;
    v5 = (double *)&v535;
  }
  if (v8.f64[0] < v6.f64[1])
  {
    v8.f64[0] = v6.f64[1];
    v9 = 24;
    v5 = &v535.f64[1];
  }
  v10 = 32;
  if (v8.f64[0] < v7)
    v5 = v536;
  else
    v10 = v9;
  if (*(double *)((char *)v534.f64 + v10) > 0.0)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    v15 = -1;
    v491 = 2;
    v16 = 4;
    v502 = 3;
    v498 = &v535;
    v17 = &v525;
    v515 = 9;
    v486 = 3;
    v494 = 2;
    v507 = 1;
    v473 = (unint64_t)((char *)v5 - (char *)&v534) >> 3;
    do
    {
      v477 = v14;
      v481 = v16;
      v511 = v12;
      v19 = v15++;
      if (v15 != v473)
      {
        v20 = *(_DWORD *)(a4 + 4 * v15);
        *(_DWORD *)(a4 + 4 * v15) = *(_DWORD *)(a4 + 4 * v473);
        *(_DWORD *)(a4 + 4 * v473) = v20;
        v21 = v15;
        v22 = 8 * v473;
        v23 = *(_QWORD *)(a1 + 8 * v15);
        *(_QWORD *)(a1 + v21 * 8) = *(_QWORD *)(a1 + v22);
        *(_QWORD *)(a1 + v22) = v23;
        v24 = 8 * (v473 + 5);
        v25 = (_QWORD *)(a1 + 8 * v19);
        v26 = v25[6];
        v25[6] = *(_QWORD *)(a1 + v24);
        *(_QWORD *)(a1 + v24) = v26;
        v27 = 8 * (v473 + 10);
        v28 = v25[11];
        v25[11] = *(_QWORD *)(a1 + v27);
        *(_QWORD *)(a1 + v27) = v28;
        v29 = 8 * (v473 + 15);
        v30 = v25[16];
        v25[16] = *(_QWORD *)(a1 + v29);
        *(_QWORD *)(a1 + v29) = v30;
        v31 = 8 * (v473 + 20);
        v32 = v25[21];
        v25[21] = *(_QWORD *)(a1 + v31);
        *(_QWORD *)(a1 + v31) = v32;
        v33 = 8 * (v473 + 25);
        v34 = v25[26];
        v25[26] = *(_QWORD *)(a1 + v33);
        *(_QWORD *)(a1 + v33) = v34;
        v35 = 8 * (v473 + 30);
        v36 = v25[31];
        v25[31] = *(_QWORD *)(a1 + v35);
        *(_QWORD *)(a1 + v35) = v36;
        v37 = 8 * (v473 + 35);
        v38 = v25[36];
        v25[36] = *(_QWORD *)(a1 + v37);
        *(_QWORD *)(a1 + v37) = v38;
        v39 = 8 * (v473 + 40);
        v40 = v25[41];
        v25[41] = *(_QWORD *)(a1 + v39);
        *(_QWORD *)(a1 + v39) = v40;
        v41 = (int)v473;
        v42 = v534.f64[v15];
        v534.f64[v21] = v534.f64[v41];
        v534.f64[v41] = v42;
      }
      v43 = 8 - v19;
      v44 = (8 * (8 - v19) + 31) & 0xFFFFFFFE0;
      v518[0] = 0;
      v518[1] = (void *)(v44 >> 3);
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v44, 0x100BBD03uLL);
      v518[0] = memptr;
      if (!memptr)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v444 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v444, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v519 = 8 - v19;
      sub_23945215C((uint64_t)v518, (8 - v19));
      v45 = (double *)v518[0];
      if (v519)
      {
        v46 = (uint64_t *)(a1 + 8 * (6 * v15));
        if (!(_DWORD)v43)
          v46 = 0;
        v47 = 8 * v519;
        v48 = v518[0];
        do
        {
          v49 = *v46;
          v46 += 5;
          *v48++ = v49;
          v47 -= 8;
        }
        while (v47);
      }
      v50 = *v45;
      v51 = 0.0;
      if (v19 <= 7)
      {
        v52 = v45;
        v53 = v515;
        do
        {
          v54 = *v52++;
          v51 = v51 + v54 * v54;
          --v53;
        }
        while (v53);
      }
      v55 = (v515 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v56 = 9 - v13;
      v57 = (9 - v13) - 1;
      v58 = 1.0 / sqrt(v51);
      v525 = 1.0;
      if (v19 < 7)
      {
        if (v57 < 4)
        {
          v59 = 1;
        }
        else
        {
          v59 = 1;
          if ((unint64_t)((char *)&v525 - (char *)v45) >= 0x20)
          {
            v59 = v57 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v60 = (float64x2_t *)(v45 + 3);
            v61 = (v515 - 1) & 0xFFFFFFFFFFFFFFFCLL;
            v62 = &v528;
            do
            {
              v63 = vmulq_n_f64(*v60, v58);
              *((float64x2_t *)v62 - 1) = vmulq_n_f64(v60[-1], v58);
              *(float64x2_t *)v62 = v63;
              v60 += 2;
              v62 += 4;
              v61 -= 4;
            }
            while (v61);
            if (v57 == (v57 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_37;
          }
        }
        v64 = v515 - v59;
        v65 = v59;
        v66 = &v525 + v59;
        v67 = &v45[v65];
        do
        {
          v68 = *v67++;
          *v66++ = v58 * v68;
          --v64;
        }
        while (v64);
      }
LABEL_37:
      v69 = v50 * v58;
      v70 = 1.0 - v69 * v69;
      v71 = 0.0;
      if (fabs(v70) < 2.22044605e-16)
        goto LABEL_49;
      v72 = sqrt(v70 + v69 * v69);
      v73 = v69 <= 0.0 ? v69 - v72 : -v70 / (v69 + v72);
      v71 = v73 * (v73 + v73) / (v70 + v73 * v73);
      v525 = 1.0;
      if (v19 > 6)
        goto LABEL_49;
      v74 = 1.0 / v73;
      if (v57 < 4)
      {
        v75 = 1;
LABEL_47:
        v78 = v515 - v75;
        v79 = &v525 + v75;
        do
        {
          *v79 = v74 * *v79;
          ++v79;
          --v78;
        }
        while (v78);
        goto LABEL_49;
      }
      v75 = v57 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v76 = (float64x2_t *)&v528;
      do
      {
        v77 = vmulq_n_f64(*v76, v74);
        v76[-1] = vmulq_n_f64(v76[-1], v74);
        *v76 = v77;
        v76 += 2;
        v55 -= 4;
      }
      while (v55);
      if (v57 != (v57 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_47;
LABEL_49:
      v80 = 6 * v13;
      a3[v15] = v71;
      if (fabs(v71) > 2.22044605e-16 && v19 <= 3)
      {
        v93 = 0;
        v94 = v511;
        v95 = 8 - v13;
        v96 = 0.0;
        v97 = v511;
        do
        {
          v96 = v96 + *(&v525 + v93++) * *(double *)(a1 + 8 * v97);
          v97 += 5;
        }
        while (v93 < v43);
        v521.f64[0] = v96;
        if (v19 <= 2)
        {
          v98 = 0;
          v99 = 0.0;
          v100 = v507;
          do
          {
            v99 = v99 + *(&v525 + v98++) * *(double *)(a1 + 8 * v100);
            v100 += 5;
          }
          while (v98 < v43);
          v521.f64[1] = v99;
          if (v19 <= 1)
          {
            v101 = 0;
            v102 = 0.0;
            v103 = v494;
            do
            {
              v102 = v102 + *(&v525 + v101++) * *(double *)(a1 + 8 * v103);
              v103 += 5;
            }
            while (v101 < v43);
            v522.f64[0] = v102;
            if (v19 <= 0)
            {
              v104 = 0;
              v105 = 0.0;
              v106 = v486;
              do
              {
                v105 = v105 + *(&v525 + v104++) * *(double *)(a1 + 8 * v106);
                v106 += 5;
              }
              while (v104 < v43);
              v522.f64[1] = v105;
              if (v19 < 0)
              {
                v107 = 0;
                v108 = 0.0;
                v109 = v481;
                do
                {
                  v108 = v108 + *(&v525 + v107++) * *(double *)(a1 + 8 * v109);
                  v109 += 5;
                }
                while (v107 < v43);
                v523 = v108;
              }
            }
          }
        }
        v110 = 0;
        v111 = -v71;
        v112 = 5 * (8 - v13);
        v113 = !is_mul_ok(v95, 0x28uLL);
        v114 = v13;
        do
        {
          v115 = v521.f64[v114 - v15];
          v116 = v13;
          if (v56 < 2)
            goto LABEL_89;
          v118 = __CFADD__(v80 + v110, (_DWORD)v112) || (v112 & 0xFFFFFFFF00000000) != 0;
          v119 = a1 + 8 * (v80 + v110) + 40 * v95 < a1
                                                                  + 8 * (unint64_t)(v80 + v110)
              || v113;
          v116 = v13;
          if (v118)
            goto LABEL_89;
          v116 = v13;
          if (HIDWORD(v95))
            goto LABEL_89;
          v116 = v13;
          if ((v119 & 1) != 0)
            goto LABEL_89;
          v120 = v94;
          v121 = &v526;
          v122 = v515 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v123 = 8 * (v120 + 5);
            v124 = *(double *)(a1 + v123);
            v125 = *v121 * v111;
            *(double *)(a1 + 8 * v120) = *(double *)(a1 + 8 * v120)
                                                       + *(v121 - 1) * v111 * v115;
            *(double *)(a1 + v123) = v124 + v125 * v115;
            v121 += 2;
            v120 += 10;
            v122 -= 2;
          }
          while (v122);
          v116 = v13 + (v56 & 0xFFFFFFFFFFFFFFFELL);
          if (v56 != (v56 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_89:
            v117 = v114 + 5 * v116;
            do
            {
              *(double *)(a1 + 8 * v117) = *(double *)(a1 + 8 * v117)
                                                         + v17[v116++] * v111 * v115;
              v117 += 5;
            }
            while (v116 != 9);
          }
          ++v114;
          ++v110;
          ++v94;
        }
        while (v114 != 5);
      }
      v18 = 0.0;
      if (v19 <= 6)
      {
        *(double *)(a1 + 8 * (5 * v19 + v15 + 10)) = v526;
        if (v19 < 6)
        {
          *(double *)(a1 + 8 * (5 * v19 + v15 + 15)) = v527;
          if (v19 != 5)
          {
            *(double *)(a1 + 8 * (5 * v19 + v15 + 20)) = v528;
            if (v19 <= 3)
            {
              *(double *)(a1 + 8 * (5 * v19 + v15 + 25)) = v529;
              if (v19 != 3)
              {
                *(double *)(a1 + 8 * (5 * v19 + v15 + 30)) = v530;
                if (v19 <= 1)
                {
                  *(double *)(a1 + 8 * (5 * v19 + v15 + 35)) = v531;
                  if (v19 != 1)
                  {
                    *(double *)(a1 + 8 * (5 * v19 + v15 + 40)) = v532;
                    if (v19 < 0)
                      *(double *)(a1 + 8 * (5 * v19 + v15 + 45)) = v533;
                  }
                }
              }
            }
          }
        }
        if (v19 < 3)
        {
          v82 = (v13 + 2);
          v83 = 6 - v82;
          v84 = v477;
          if ((unint64_t)(6 - v82) < 8)
            goto LABEL_127;
          v126 = 5 - v82;
          v84 = v477;
          if (-3 - (int)v13 < v126)
            goto LABEL_127;
          v84 = v477;
          if ((v80 ^ 0xFFFFFFFE) < v126)
            goto LABEL_127;
          v84 = v477;
          if (HIDWORD(v126))
            goto LABEL_127;
          v127 = (6 - v491) & 0xFFFFFFFFFFFFFFFCLL;
          v128 = v11 + v477;
          v129 = (float64x2_t *)((char *)&v535 + 8 * v477);
          v84 = (v83 & 0xFFFFFFFFFFFFFFFCLL) + v477;
          do
          {
            v130 = (float64x2_t *)(a1 + 8 * v128);
            v131 = vmlsq_f64(*v129, v130[1], v130[1]);
            v129[-1] = vmlsq_f64(v129[-1], *v130, *v130);
            *v129 = v131;
            v128 += 4;
            v129 += 2;
            v127 -= 4;
          }
          while (v127);
          if (v83 != (v83 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_127:
            do
            {
              v85 = *(double *)(a1 + 8 * (v11 + v84));
              v534.f64[v84] = v534.f64[v84] - v85 * v85;
              ++v84;
            }
            while ((_DWORD)v84 != 5);
          }
          v86 = (double *)&v534 + v19 + 2;
          if ((v19 & 0xFFFFFFFFFFFFFFFELL) != 2)
          {
            v87 = *v86;
            v89 = (double *)v498;
            v88 = v502;
            v90 = (double *)v498;
            do
            {
              v91 = *v90++;
              v92 = v91;
              if (v87 < v91)
              {
                v87 = v92;
                v86 = v89;
              }
              v89 = v90;
              --v88;
            }
            while (v88);
          }
          v18 = *v86;
          v473 = (unint64_t)((char *)v86 - (char *)&v534) >> 3;
        }
      }
      free(v45);
      ++v13;
      v14 = v477 + 1;
      --v515;
      v12 = v511 + 6;
      v494 += 6;
      v486 += 6;
      v16 = v481 + 6;
      --v17;
      ++v491;
      v11 += 5;
      v498 = (float64x2_t *)((char *)v498 + 8);
      --v502;
      v507 += 6;
    }
    while (v18 > 0.0);
  }
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 72) = xmmword_239EC6850;
  *(_OWORD *)a2 = xmmword_239EC6840;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 232) = xmmword_239EC6850;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 160) = xmmword_239EC6840;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = xmmword_239EC6840;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 464) = 0u;
  *(_OWORD *)(a2 + 520) = 0u;
  *(_OWORD *)(a2 + 536) = 0u;
  *(_OWORD *)(a2 + 592) = 0u;
  *(_OWORD *)(a2 + 608) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 392) = xmmword_239EC6850;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 336) = 0;
  *(_QWORD *)(a2 + 408) = 0;
  *(_QWORD *)(a2 + 552) = 0;
  *(_QWORD *)(a2 + 480) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 624) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(_OWORD *)(a2 + 560) = xmmword_239EC6840;
  *(_OWORD *)(a2 + 576) = 0u;
  *(_QWORD *)(a2 + 640) = 0x3FF0000000000000;
  v132 = a3[4];
  v133 = 1.0;
  v134 = 0.0;
  v508 = 0.0;
  v512 = 0.0;
  v135 = 0.0;
  v136 = 1.0;
  v137 = 0.0;
  v138 = 0.0;
  v495 = 0.0;
  v499 = 0.0;
  v139 = 0.0;
  v503 = 1.0;
  v492 = 0.0;
  v140 = 0.0;
  v141 = 0.0;
  v142 = 0.0;
  v143 = 0.0;
  v516 = 1.0;
  v144 = 0.0;
  v145 = 0.0;
  v146 = 0.0;
  v147 = 0.0;
  v148 = 0.0;
  v149 = 1.0;
  if (fabs(v132) > 2.22044605e-16)
  {
    v525 = 1.0;
    v150 = *(double *)(a1 + 272);
    v526 = *(double *)(a1 + 232);
    v527 = v150;
    v151 = *(double *)(a1 + 352);
    v528 = *(double *)(a1 + 312);
    v529 = v151;
    v152 = v526 * 0.0 + 1.0 + v150 * 0.0 + v528 * 0.0 + v151 * 0.0;
    v153 = v526 + 0.0 + v150 * 0.0 + v528 * 0.0 + v151 * 0.0;
    v521.f64[0] = v152;
    v521.f64[1] = v153;
    v154 = v526 * 0.0 + 0.0;
    v155 = v150 + v154 + v528 * 0.0 + v151 * 0.0;
    v156 = v154 + v150 * 0.0;
    v522.f64[0] = v155;
    v522.f64[1] = v528 + v156 + v151 * 0.0;
    v523 = v151 + v156 + v528 * 0.0;
    v149 = 1.0 - v132 * v152;
    v157 = -(v132 * v526);
    v148 = v157 * v152 + 0.0;
    v158 = -(v132 * v150);
    v159 = -(v132 * v528);
    v146 = v159 * v152 + 0.0;
    *(double *)(a2 + 536) = v146;
    v160 = -(v132 * v151);
    v145 = v160 * v152 + 0.0;
    *(double *)(a2 + 608) = v145;
    *(double *)(a2 + 320) = v149;
    *(double *)(a2 + 328) = 0.0 - v132 * v153;
    v144 = 0.0 - v132 * v153;
    *(double *)(a2 + 392) = v148;
    *(double *)(a2 + 400) = v157 * v153 + 1.0;
    v516 = v157 * v153 + 1.0;
    *(double *)(a2 + 464) = v158 * v152 + 0.0;
    *(double *)(a2 + 472) = v158 * v153 + 0.0;
    v143 = v158 * v153 + 0.0;
    v147 = v158 * v152 + 0.0;
    v142 = v159 * v153 + 0.0;
    *(double *)(a2 + 544) = v142;
    v141 = v160 * v153 + 0.0;
    *(double *)(a2 + 616) = v141;
    v140 = 0.0 - v132 * v155;
    v161 = v157 * v155 + 0.0;
    v162 = v158 * v155 + 1.0;
    v499 = v159 * v155 + 0.0;
    v503 = v162;
    *(double *)(a2 + 552) = v499;
    v139 = v160 * v155 + 0.0;
    *(double *)(a2 + 624) = v139;
    v164 = v522.f64[1];
    v163 = v523;
    v165 = 0.0 - v132 * v522.f64[1];
    *(double *)(a2 + 336) = v140;
    *(double *)(a2 + 344) = v165;
    v492 = v161;
    v495 = v165;
    v138 = v157 * v164 + 0.0;
    *(double *)(a2 + 408) = v161;
    *(double *)(a2 + 416) = v138;
    *(double *)(a2 + 480) = v162;
    *(double *)(a2 + 488) = v158 * v164 + 0.0;
    v137 = v158 * v164 + 0.0;
    *(double *)(a2 + 560) = v159 * v164 + 1.0;
    v135 = v160 * v164 + 0.0;
    *(double *)(a2 + 632) = v135;
    v508 = 0.0 - v132 * v163;
    *(double *)(a2 + 352) = v508;
    v512 = v157 * v163 + 0.0;
    *(double *)(a2 + 424) = v512;
    v134 = v158 * v163 + 0.0;
    v136 = v159 * v164 + 1.0;
    *(double *)(a2 + 496) = v134;
    v461 = v159 * v163 + 0.0;
    *(double *)(a2 + 568) = v461;
    v133 = v160 * v163 + 1.0;
    *(double *)(a2 + 640) = v133;
  }
  v166 = a3[3];
  if (fabs(v166) <= 2.22044605e-16)
  {
    v451 = 0.0;
    v452 = 0.0;
    v204 = v149;
    v205 = 0.0;
    v183 = 0.0;
    v203 = 0.0;
  }
  else
  {
    v167 = *(double *)(a1 + 224);
    v526 = *(double *)(a1 + 184);
    v527 = v167;
    v168 = *(double *)(a1 + 304);
    v528 = *(double *)(a1 + 264);
    v529 = v168;
    v530 = *(double *)(a1 + 344);
    v169 = *(double *)(a2 + 240)
         + 0.0
         + v526 * *(double *)(a2 + 312)
         + v167 * *(double *)(a2 + 384)
         + v528 * *(double *)(a2 + 456);
    v170 = *(double *)(a2 + 528);
    v171 = *(double *)(a2 + 600);
    v478 = v135;
    v482 = v138;
    v521.f64[1] = v526 * v149 + 0.0 + v167 * v148 + v528 * v147 + v168 * v146 + v530 * v145;
    v487 = v137;
    v522.f64[0] = v526 * v144 + 0.0 + v167 * v516 + v528 * v143 + v168 * v142 + v530 * v141;
    v522.f64[1] = v526 * v140 + 0.0 + v167 * v492 + v528 * v503 + v168 * v499 + v530 * v139;
    v523 = v526 * v495 + 0.0 + v167 * v138 + v528 * v137 + v168 * v136 + v530 * v135;
    *(double *)v524 = v526 * v508 + 0.0 + v167 * v512 + v528 * v134 + v168 * v461 + v530 * v133;
    v172 = v169 + v168 * v170 + v530 * v171;
    v173 = -(v166 * v526);
    v174 = -(v166 * v167);
    v175 = -(v166 * v528);
    v176 = -(v166 * v168);
    v177 = -(v166 * v530);
    v459 = v148 + v174 * v521.f64[1];
    v462 = *(double *)(a2 + 240) - v166 * v172;
    v454 = v146 + v176 * v521.f64[1];
    v456 = v149 + v173 * v521.f64[1];
    v464 = v147 + v175 * v521.f64[1];
    v467 = v145 + v177 * v521.f64[1];
    v178 = 0.0 - v166 * v521.f64[1];
    v179 = v144 + v173 * v522.f64[0];
    v180 = v516 + v174 * v522.f64[0];
    v181 = v143 + v175 * v522.f64[0];
    v182 = v142 + v176 * v522.f64[0];
    v183 = 0.0 - v166 * v522.f64[0];
    v469 = v140 + v173 * v522.f64[1];
    v184 = v492 + v174 * v522.f64[1];
    v185 = v503 + v175 * v522.f64[1];
    v186 = v499 + v176 * v522.f64[1];
    v187 = v139 + v177 * v522.f64[1];
    v188 = 0.0 - v166 * v522.f64[1];
    v189 = v495 + v173 * v523;
    v483 = v482 + v174 * v523;
    v488 = v487 + v175 * v523;
    v474 = v136 + v176 * v523;
    v479 = v478 + v177 * v523;
    v190 = 0.0 - v166 * v523;
    v451 = v190;
    v191 = 0.0 - v166 * *(double *)v524;
    v192 = *(double *)(a2 + 312) + v173 * v172;
    v193 = v508 + v173 * *(double *)v524;
    v194 = *(double *)(a2 + 384) + v174 * v172;
    v195 = v512 + v174 * *(double *)v524;
    v196 = *(double *)(a2 + 456) + v175 * v172;
    v197 = *(double *)(a2 + 528) + v176 * v172;
    v198 = *(double *)(a2 + 568) + v176 * *(double *)v524;
    v133 = *(double *)(a2 + 640) + v177 * *(double *)v524;
    v134 = v134 + v175 * *(double *)v524;
    v199 = v193;
    v200 = v186;
    v201 = v184;
    v202 = *(double *)(a2 + 600) + v177 * v172;
    v521.f64[0] = v172;
    v203 = v178;
    v141 = v141 + v177 * v522.f64[0];
    *(double *)(a2 + 528) = v197;
    v139 = v187;
    *(double *)(a2 + 600) = v202;
    v148 = v459;
    *(double *)(a2 + 240) = v462;
    *(double *)(a2 + 248) = v178;
    v525 = 1.0;
    v204 = v456;
    *(double *)(a2 + 312) = v192;
    *(double *)(a2 + 320) = v456;
    v147 = v464;
    v145 = v467;
    *(double *)(a2 + 384) = v194;
    *(double *)(a2 + 392) = v459;
    *(double *)(a2 + 456) = v196;
    *(double *)(a2 + 464) = v464;
    v146 = v454;
    *(double *)(a2 + 536) = v454;
    v136 = v474;
    v135 = v479;
    *(double *)(a2 + 608) = v467;
    v142 = v182;
    *(double *)(a2 + 544) = v182;
    *(double *)(a2 + 616) = v141;
    *(double *)(a2 + 256) = v183;
    *(double *)(a2 + 264) = v188;
    v144 = v179;
    *(double *)(a2 + 328) = v179;
    v140 = v469;
    *(double *)(a2 + 336) = v469;
    *(double *)(a2 + 344) = v189;
    v516 = v180;
    *(double *)(a2 + 400) = v180;
    *(double *)(a2 + 408) = v201;
    v138 = v483;
    v492 = v201;
    v495 = v189;
    v143 = v181;
    *(double *)(a2 + 472) = v181;
    *(double *)(a2 + 480) = v185;
    v499 = v200;
    v503 = v185;
    *(double *)(a2 + 552) = v200;
    *(double *)(a2 + 624) = v139;
    *(double *)(a2 + 560) = v474;
    *(double *)(a2 + 632) = v479;
    *(double *)(a2 + 272) = v190;
    *(double *)(a2 + 280) = v191;
    v452 = v191;
    v205 = v188;
    v508 = v199;
    v512 = v195;
    *(double *)(a2 + 352) = v199;
    *(double *)(a2 + 416) = v483;
    *(double *)(a2 + 424) = v195;
    v137 = v488;
    *(double *)(a2 + 488) = v488;
    *(double *)(a2 + 496) = v134;
    v461 = v198;
    *(double *)(a2 + 568) = v198;
    *(double *)(a2 + 640) = v133;
  }
  v206 = a3[2];
  if (fabs(v206) > 2.22044605e-16)
  {
    v484 = v183;
    v489 = v142;
    v207 = *(double *)(a1 + 136);
    v208 = *(double *)(a1 + 176);
    v209 = *(double *)(a1 + 216);
    v210 = *(double *)(a1 + 256);
    v211 = *(double *)(a1 + 296);
    v212 = *(double *)(a1 + 336);
    v521 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(*(float64x2_t *)(a2 + 160), (float64x2_t)0), *(float64x2_t *)(a2 + 232), v207), *(float64x2_t *)(a2 + 304), v208), *(float64x2_t *)(a2 + 376), v209), *(float64x2_t *)(a2 + 448), v210), *(float64x2_t *)(a2 + 520), v211), *(float64x2_t *)(a2 + 592), v212);
    v213 = *(double *)(a2 + 184);
    v455 = v146;
    v457 = v204;
    v214 = *(double *)(a2 + 176)
         + 0.0
         + v207 * v203
         + v208 * v204
         + v209 * v148
         + v210 * v147
         + v211 * v146
         + v212 * v145;
    v475 = *(double *)(a2 + 176);
    v215 = v144;
    v216 = v143;
    v522.f64[0] = v214;
    v522.f64[1] = v213 + 0.0 + v207 * v484 + v208 * v144 + v209 * v516 + v210 * v143 + v211 * v142 + v212 * v141;
    v217 = *(double *)(a2 + 192);
    v470 = *(double *)(a2 + 184);
    v525 = 1.0;
    v526 = v207;
    v527 = v208;
    v528 = v209;
    v529 = v210;
    v530 = v211;
    v531 = v212;
    v218 = v217 + 0.0 + v207 * v205 + v208 * v140 + v209 * v492 + v210 * v503 + v211 * v499;
    v504 = v141;
    v219 = v218 + v212 * v139;
    v220 = *(double *)(a2 + 200);
    v500 = *(double *)(a2 + 192);
    v523 = v219;
    *(double *)v524 = v220 + 0.0 + v207 * v451 + v208 * v495 + v209 * v138 + v210 * v137 + v211 * v136 + v212 * v135;
    v468 = *(double *)(a2 + 200);
    v221 = v147;
    *(double *)&v524[8] = *(double *)(a2 + 208)
                        + 0.0
                        + v207 * v452
                        + v208 * v508
                        + v209 * v512
                        + v210 * v134
                        + v211 * v461
                        + v212 * v133;
    v222 = v145;
    v223 = -(v206 * v207);
    v509 = *(double *)(a2 + 232) + v223 * v521.f64[0];
    v513 = *(double *)(a2 + 160) - v206 * v521.f64[0];
    v224 = v207;
    v225 = -(v206 * v208);
    v226 = v208;
    v227 = -(v206 * v209);
    v493 = *(double *)(a2 + 376) + v227 * v521.f64[0];
    v496 = *(double *)(a2 + 304) + v225 * v521.f64[0];
    v228 = -(v206 * v210);
    v229 = -(v206 * v211);
    v463 = *(double *)(a2 + 520) + v229 * v521.f64[0];
    v465 = *(double *)(a2 + 448) + v228 * v521.f64[0];
    v230 = -(v206 * v212);
    v460 = *(double *)(a2 + 592) + v230 * v521.f64[0];
    v445 = *(double *)(a2 + 168) - v206 * v521.f64[1];
    v446 = *(double *)(a2 + 240) + v223 * v521.f64[1];
    v450 = *(double *)(a2 + 384) + v227 * v521.f64[1];
    v453 = *(double *)(a2 + 456) + v228 * v521.f64[1];
    v448 = *(double *)(a2 + 312) + v225 * v521.f64[1];
    v449 = *(double *)(a2 + 528) + v229 * v521.f64[1];
    v447 = *(double *)(a2 + 600) + v230 * v521.f64[1];
    v476 = v475 - v206 * v214;
    v480 = v203 + v223 * v214;
    v231 = v457 + v225 * v214;
    v232 = v148 + v227 * v214;
    v233 = v221 + v228 * v214;
    v234 = v455 + v229 * v214;
    v235 = v222 + v230 * v214;
    v471 = v470 - v206 * v522.f64[1];
    v236 = v215 + v225 * v522.f64[1];
    v237 = v516 + v227 * v522.f64[1];
    v238 = v216 + v228 * v522.f64[1];
    v485 = v484 + v223 * v522.f64[1];
    v490 = v489 + v229 * v522.f64[1];
    v505 = v504 + v230 * v522.f64[1];
    v239 = *(double *)(a2 + 264) + v223 * v219;
    v240 = *(double *)(a2 + 336) + v225 * v219;
    v241 = *(double *)(a2 + 408) + v227 * v219;
    v242 = *(double *)(a2 + 480) + v228 * v219;
    v243 = *(double *)(a2 + 552) + v229 * v219;
    v244 = *(double *)(a2 + 624) + v230 * v219;
    v245 = -(v206 * 1.0);
    v246 = v500 + v245 * v523;
    v247 = -(v206 * v224);
    v248 = -(v206 * v226);
    v249 = -(v206 * v209);
    v250 = -(v206 * v529);
    v251 = -(v206 * v211);
    v252 = -(v206 * v531);
    v253 = v468 + v245 * *(double *)v524;
    v254 = *(double *)(a2 + 272) + v247 * *(double *)v524;
    v255 = *(double *)(a2 + 344) + v248 * *(double *)v524;
    v256 = *(double *)(a2 + 416) + v249 * *(double *)v524;
    v257 = *(double *)(a2 + 488) + v250 * *(double *)v524;
    v258 = *(double *)(a2 + 560) + v251 * *(double *)v524;
    v259 = *(double *)(a2 + 632) + v252 * *(double *)v524;
    v260 = *(double *)(a2 + 208) + v245 * *(double *)&v524[8];
    v261 = *(double *)(a2 + 280) + v247 * *(double *)&v524[8];
    v262 = *(double *)(a2 + 352) + v248 * *(double *)&v524[8];
    v263 = *(double *)(a2 + 424) + v249 * *(double *)&v524[8];
    v264 = *(double *)(a2 + 496) + v250 * *(double *)&v524[8];
    v265 = *(double *)(a2 + 568) + v251 * *(double *)&v524[8];
    v266 = *(double *)(a2 + 640) + v252 * *(double *)&v524[8];
    *(double *)(a2 + 520) = v463;
    *(double *)(a2 + 592) = v460;
    *(double *)(a2 + 160) = v513;
    *(double *)(a2 + 168) = v445;
    *(double *)(a2 + 232) = v509;
    *(double *)(a2 + 240) = v446;
    *(double *)(a2 + 304) = v496;
    *(double *)(a2 + 312) = v448;
    *(double *)(a2 + 320) = v231;
    *(double *)(a2 + 376) = v493;
    *(double *)(a2 + 384) = v450;
    *(double *)(a2 + 392) = v232;
    *(double *)(a2 + 448) = v465;
    *(double *)(a2 + 456) = v453;
    *(double *)(a2 + 464) = v233;
    *(double *)(a2 + 528) = v449;
    *(double *)(a2 + 600) = v447;
    *(double *)(a2 + 536) = v234;
    *(double *)(a2 + 608) = v235;
    *(double *)(a2 + 176) = v476;
    *(double *)(a2 + 184) = v471;
    *(double *)(a2 + 552) = v243;
    *(double *)(a2 + 624) = v244;
    v141 = v505;
    *(double *)(a2 + 192) = v246;
    *(double *)(a2 + 200) = v253;
    *(double *)(a2 + 264) = v239;
    *(double *)(a2 + 272) = v254;
    *(double *)(a2 + 336) = v240;
    *(double *)(a2 + 344) = v255;
    *(double *)(a2 + 408) = v241;
    *(double *)(a2 + 416) = v256;
    *(double *)(a2 + 480) = v242;
    *(double *)(a2 + 488) = v257;
    *(double *)(a2 + 560) = v258;
    *(double *)(a2 + 632) = v259;
    *(double *)(a2 + 208) = v260;
    *(double *)(a2 + 280) = v261;
    *(double *)(a2 + 352) = v262;
    *(double *)(a2 + 424) = v263;
    *(double *)(a2 + 496) = v264;
    *(double *)(a2 + 568) = v265;
    *(double *)(a2 + 640) = v266;
    v183 = v485;
    *(double *)(a2 + 248) = v480;
    *(double *)(a2 + 256) = v485;
    v144 = v236;
    *(double *)(a2 + 328) = v236;
    v516 = v237;
    *(double *)(a2 + 400) = v237;
    v143 = v238;
    *(double *)(a2 + 472) = v238;
    v142 = v490;
    *(double *)(a2 + 544) = v490;
    *(double *)(a2 + 616) = v505;
  }
  v267 = a3[1];
  if (fabs(v267) > 2.22044605e-16)
  {
    v525 = 1.0;
    v268 = *(double *)(a1 + 128);
    v526 = *(double *)(a1 + 88);
    v527 = v268;
    v269 = *(double *)(a1 + 208);
    v528 = *(double *)(a1 + 168);
    v529 = v269;
    v270 = *(double *)(a1 + 288);
    v530 = *(double *)(a1 + 248);
    v531 = v270;
    v532 = *(double *)(a1 + 328);
    v271 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(*(float64x2_t *)(a2 + 96), (float64x2_t)0), *(float64x2_t *)(a2 + 168), v526), *(float64x2_t *)(a2 + 240), v268), *(float64x2_t *)(a2 + 312), v528), *(float64x2_t *)(a2 + 384), v269), *(float64x2_t *)(a2 + 456), v530), *(float64x2_t *)(a2 + 528), v270),
             *(float64x2_t *)(a2 + 600),
             v532);
    v521 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(*(float64x2_t *)(a2 + 80), (float64x2_t)0), *(float64x2_t *)(a2 + 152), v526), *(float64x2_t *)(a2 + 224), v268), *(float64x2_t *)(a2 + 296), v528), *(float64x2_t *)(a2 + 368), v269), *(float64x2_t *)(a2 + 440), v530), *(float64x2_t *)(a2 + 512), v270),
             *(float64x2_t *)(a2 + 584),
             v532);
    v522 = v271;
    v272 = *(double *)(a2 + 112)
         + 0.0
         + v526 * *(double *)(a2 + 184)
         + v268 * v183
         + v528 * v144
         + v269 * v516
         + v530 * v143
         + v270 * v142
         + v532 * v141;
    v514 = *(double *)(a2 + 184);
    v517 = *(double *)(a2 + 112);
    v506 = *(double *)(a2 + 328);
    v510 = *(double *)(a2 + 256);
    v497 = *(double *)(a2 + 472);
    v501 = *(double *)(a2 + 400);
    v273 = *(double *)(a2 + 120)
         + 0.0
         + v526 * *(double *)(a2 + 192)
         + v268 * *(double *)(a2 + 264)
         + v528 * *(double *)(a2 + 336)
         + v269 * *(double *)(a2 + 408)
         + v530 * *(double *)(a2 + 480)
         + v270 * *(double *)(a2 + 552)
         + v532 * *(double *)(a2 + 624);
    v523 = v272;
    *(double *)v524 = v273;
    *(float64x2_t *)&v524[8] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *(float64x2_t *)(a2 + 128), 1.0), *(float64x2_t *)(a2 + 200), v526), *(float64x2_t *)(a2 + 272), v268), *(float64x2_t *)(a2 + 344), v528), *(float64x2_t *)(a2 + 416), v269), *(float64x2_t *)(a2 + 488), v530), *(float64x2_t *)(a2 + 560), v270),
                                 *(float64x2_t *)(a2 + 632),
                                 v532);
    v274 = -(v267 * 1.0);
    v275 = v521;
    v276 = *(double *)(a2 + 88);
    v277 = *(double *)(a2 + 80) + v274 * v521.f64[0];
    v279 = v526;
    v278 = v268;
    v280 = -(v267 * v526);
    v281 = *(double *)(a2 + 160);
    v282 = *(double *)(a2 + 152) + v280 * v521.f64[0];
    v283 = -(v267 * v268);
    v284 = *(double *)(a2 + 232);
    v285 = *(double *)(a2 + 224) + v283 * v521.f64[0];
    v287 = v528;
    v286 = v269;
    v288 = -(v267 * v528);
    v289 = *(double *)(a2 + 304);
    v290 = *(double *)(a2 + 296) + v288 * v521.f64[0];
    v291 = -(v267 * v269);
    v292 = *(double *)(a2 + 376);
    v293 = *(double *)(a2 + 368) + v291 * v521.f64[0];
    v294 = v530;
    v295 = -(v267 * v531);
    *(double *)(a2 + 512) = *(double *)(a2 + 512) + v295 * v521.f64[0];
    v296 = v531;
    v297 = -(v267 * v530);
    v271.f64[0] = *(float64_t *)(a2 + 448);
    v298 = *(double *)(a2 + 440) + v297 * v275.f64[0];
    v299 = v532;
    v300 = -(v267 * v532);
    *(double *)(a2 + 584) = *(double *)(a2 + 584) + v300 * v275.f64[0];
    *(double *)(a2 + 80) = v277;
    *(double *)(a2 + 88) = v276 + v274 * v275.f64[1];
    *(double *)(a2 + 152) = v282;
    *(double *)(a2 + 160) = v281 + v280 * v275.f64[1];
    *(double *)(a2 + 224) = v285;
    *(double *)(a2 + 232) = v284 + v283 * v275.f64[1];
    *(double *)(a2 + 296) = v290;
    *(double *)(a2 + 304) = v289 + v288 * v275.f64[1];
    *(double *)(a2 + 368) = v293;
    *(double *)(a2 + 376) = v292 + v291 * v275.f64[1];
    *(double *)(a2 + 440) = v298;
    *(double *)(a2 + 448) = v271.f64[0] + v297 * v275.f64[1];
    *(double *)(a2 + 520) = *(double *)(a2 + 520) + v295 * v275.f64[1];
    *(double *)(a2 + 592) = *(double *)(a2 + 592) + v300 * v275.f64[1];
    v301 = v522;
    v302 = *(double *)(a2 + 104);
    v303 = *(double *)(a2 + 96) + v274 * v522.f64[0];
    v304 = *(double *)(a2 + 176);
    v305 = *(double *)(a2 + 168) + v280 * v522.f64[0];
    v306 = *(double *)(a2 + 248);
    v307 = *(double *)(a2 + 240) + v283 * v522.f64[0];
    v308 = *(double *)(a2 + 320);
    v309 = *(double *)(a2 + 312) + v288 * v522.f64[0];
    *(double *)(a2 + 528) = *(double *)(a2 + 528) + v295 * v522.f64[0];
    v310 = *(double *)(a2 + 392);
    v311 = *(double *)(a2 + 384) + v291 * v301.f64[0];
    v312 = *(double *)(a2 + 464);
    v313 = *(double *)(a2 + 456) + v297 * v301.f64[0];
    *(double *)(a2 + 600) = *(double *)(a2 + 600) + v300 * v301.f64[0];
    v314 = -(v267 * 1.0);
    *(double *)(a2 + 96) = v303;
    *(double *)(a2 + 104) = v302 + v314 * v301.f64[1];
    v315 = -(v267 * v279);
    *(double *)(a2 + 168) = v305;
    *(double *)(a2 + 176) = v304 + v315 * v301.f64[1];
    *(double *)(a2 + 240) = v307;
    *(double *)(a2 + 248) = v306 + v283 * v301.f64[1];
    *(double *)(a2 + 312) = v309;
    *(double *)(a2 + 320) = v308 + v288 * v301.f64[1];
    *(double *)(a2 + 384) = v311;
    *(double *)(a2 + 392) = v310 + v291 * v301.f64[1];
    *(double *)(a2 + 456) = v313;
    *(double *)(a2 + 464) = v312 + v297 * v301.f64[1];
    *(double *)(a2 + 536) = *(double *)(a2 + 536) + v295 * v301.f64[1];
    *(double *)(a2 + 608) = *(double *)(a2 + 608) + v300 * v301.f64[1];
    v316 = v523;
    v317 = *(double *)v524;
    v318 = v517 + v314 * v523;
    v319 = v514 + v315 * v523;
    v320 = -(v267 * v278);
    v321 = v510 + v320 * v523;
    v322 = -(v267 * v287);
    v323 = v506 + v322 * v523;
    v324 = -(v267 * v286);
    v325 = v501 + v324 * v523;
    v271.f64[0] = -(v267 * v294);
    v326 = v497 + v271.f64[0] * v523;
    v327 = -(v267 * v296);
    *(double *)(a2 + 544) = *(double *)(a2 + 544) + v327 * v523;
    v328 = -(v267 * v299);
    *(double *)(a2 + 616) = *(double *)(a2 + 616) + v328 * v316;
    v329 = *(double *)(a2 + 120) + v314 * v317;
    *(double *)(a2 + 112) = v318;
    *(double *)(a2 + 120) = v329;
    v330 = *(double *)(a2 + 192) + v315 * v317;
    *(double *)(a2 + 184) = v319;
    *(double *)(a2 + 192) = v330;
    v331 = *(double *)(a2 + 264) + v320 * v317;
    *(double *)(a2 + 256) = v321;
    *(double *)(a2 + 264) = v331;
    v332 = *(double *)(a2 + 344);
    v333 = *(double *)(a2 + 336) + v322 * v317;
    *(double *)(a2 + 328) = v323;
    *(double *)(a2 + 336) = v333;
    v334 = *(double *)(a2 + 408) + v324 * v317;
    *(double *)(a2 + 400) = v325;
    *(double *)(a2 + 408) = v334;
    v335 = *(double *)(a2 + 488);
    v336 = *(double *)(a2 + 480) + v271.f64[0] * v317;
    *(double *)(a2 + 472) = v326;
    *(double *)(a2 + 480) = v336;
    *(double *)(a2 + 552) = *(double *)(a2 + 552) + v327 * v317;
    *(double *)(a2 + 624) = *(double *)(a2 + 624) + v328 * v317;
    v337 = *(_OWORD *)&v524[8];
    v338 = *(double *)(a2 + 136);
    v339 = *(double *)(a2 + 128) + v314 * *(double *)&v524[8];
    v340 = *(double *)(a2 + 208);
    v341 = *(double *)(a2 + 200) + v315 * *(double *)&v524[8];
    v342 = *(double *)(a2 + 280);
    v343 = *(double *)(a2 + 272) + v320 * *(double *)&v524[8];
    v344 = v332 + v322 * *(double *)&v524[8];
    v345 = *(double *)(a2 + 424);
    v346 = *(double *)(a2 + 416) + v324 * *(double *)&v524[8];
    v347 = v335 + v271.f64[0] * *(double *)&v524[8];
    *(double *)(a2 + 560) = *(double *)(a2 + 560) + v327 * *(double *)&v524[8];
    *(double *)(a2 + 632) = *(double *)(a2 + 632) + v328 * *(double *)&v337;
    v348 = v338 + -(v267 * v525) * *((double *)&v337 + 1);
    *(double *)(a2 + 128) = v339;
    *(double *)(a2 + 136) = v348;
    v349 = v340 + -(v267 * v526) * *((double *)&v337 + 1);
    *(double *)(a2 + 200) = v341;
    *(double *)(a2 + 208) = v349;
    *(double *)(a2 + 272) = v343;
    *(double *)(a2 + 280) = v342 + v320 * *((double *)&v337 + 1);
    v350 = *(double *)(a2 + 352) + v322 * *((double *)&v337 + 1);
    *(double *)(a2 + 344) = v344;
    *(double *)(a2 + 352) = v350;
    *(double *)(a2 + 416) = v346;
    *(double *)(a2 + 424) = v345 + v324 * *((double *)&v337 + 1);
    v351 = *(double *)(a2 + 496);
    *(double *)(a2 + 488) = v347;
    *(double *)(a2 + 496) = v351 + v271.f64[0] * *((double *)&v337 + 1);
    *(double *)(a2 + 568) = *(double *)(a2 + 568) + v327 * *((double *)&v337 + 1);
    *(double *)(a2 + 640) = *(double *)(a2 + 640) + v328 * *((double *)&v337 + 1);
  }
  v352 = *a3;
  if (fabs(*a3) > 2.22044605e-16)
  {
    v525 = 1.0;
    v353 = *(double *)(a1 + 80);
    v526 = *(double *)(a1 + 40);
    v527 = v353;
    v354 = *(double *)(a1 + 160);
    v528 = *(double *)(a1 + 120);
    v529 = v354;
    v355 = *(double *)(a1 + 240);
    v530 = *(double *)(a1 + 200);
    v531 = v355;
    v356 = *(double *)(a1 + 320);
    v532 = *(double *)(a1 + 280);
    v533 = v356;
    v357 = *(float64x2_t *)(a2 + 344);
    v358 = *(float64x2_t *)(a2 + 488);
    v359 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(*(float64x2_t *)(a2 + 16), (float64x2_t)0), *(float64x2_t *)(a2 + 88), v526), *(float64x2_t *)(a2 + 160), v353), *(float64x2_t *)(a2 + 232), v528), *(float64x2_t *)(a2 + 304), v354), *(float64x2_t *)(a2 + 376), v530), *(float64x2_t *)(a2 + 448),
                 v355),
               *(float64x2_t *)(a2 + 520),
               v532),
             *(float64x2_t *)(a2 + 592),
             v356);
    v521 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vaddq_f64(*(float64x2_t *)a2, (float64x2_t)0), *(float64x2_t *)(a2 + 72), v526), *(float64x2_t *)(a2 + 144), v353), *(float64x2_t *)(a2 + 216), v528), *(float64x2_t *)(a2 + 288), v354), *(float64x2_t *)(a2 + 360), v530), *(float64x2_t *)(a2 + 432), v355), *(float64x2_t *)(a2 + 504), v532),
             *(float64x2_t *)(a2 + 576),
             v356);
    v522 = v359;
    v360 = *(double *)(a2 + 32)
         + 0.0
         + v526 * *(double *)(a2 + 104)
         + v353 * *(double *)(a2 + 176)
         + v528 * *(double *)(a2 + 248)
         + v354 * *(double *)(a2 + 320);
    v361 = *(double *)(a2 + 384);
    v523 = v360
         + v530 * *(double *)(a2 + 392)
         + v355 * *(double *)(a2 + 464)
         + v532 * *(double *)(a2 + 536)
         + v356 * *(double *)(a2 + 608);
    v362 = *(float64x2_t *)(a2 + 632);
    *(float64x2_t *)v524 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *(float64x2_t *)(a2 + 40), 1.0), *(float64x2_t *)(a2 + 112), v526), *(float64x2_t *)(a2 + 184), v353), *(float64x2_t *)(a2 + 256), v528), *(float64x2_t *)(a2 + 328), v529), *(float64x2_t *)(a2 + 400), v530), *(float64x2_t *)(a2 + 472),
                                 v355),
                               *(float64x2_t *)(a2 + 544),
                               v532),
                             *(float64x2_t *)(a2 + 616),
                             v356);
    *(float64x2_t *)&v524[16] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, *(float64x2_t *)(a2 + 56), 1.0), *(float64x2_t *)(a2 + 128), v526), *(float64x2_t *)(a2 + 200), v353), *(float64x2_t *)(a2 + 272), v528), v357, v529), *(float64x2_t *)(a2 + 416), v530), v358,
                                      v355),
                                    *(float64x2_t *)(a2 + 560),
                                    v532),
                                  v362,
                                  v356);
    v363 = -(v352 * v356);
    v364 = -(v352 * v532);
    v365 = -(v352 * v355);
    v366 = -(v352 * v530);
    v367 = -(v352 * v529);
    v357.f64[0] = -(v352 * v528);
    v358.f64[0] = -(v352 * v353);
    v368 = -(v352 * v526);
    v369 = -(v352 * 1.0);
    v370 = v521.f64[1];
    v371 = *(double *)(a2 + 8);
    v372 = *(double *)a2 + v369 * v521.f64[0];
    v373 = *(double *)(a2 + 80);
    v374 = *(double *)(a2 + 72) + v368 * v521.f64[0];
    v375 = *(double *)(a2 + 152);
    v376 = *(double *)(a2 + 144) + v358.f64[0] * v521.f64[0];
    v377 = *(double *)(a2 + 224);
    v378 = *(double *)(a2 + 216) + v357.f64[0] * v521.f64[0];
    v379 = *(double *)(a2 + 296);
    v380 = *(double *)(a2 + 288) + v367 * v521.f64[0];
    v381 = *(double *)(a2 + 352);
    v359.f64[0] = *(double *)(a2 + 360) + v366 * v521.f64[0];
    v382 = *(double *)(a2 + 440);
    v383 = *(double *)(a2 + 432) + v365 * v521.f64[0];
    v384 = *(double *)(a2 + 496);
    v362.f64[0] = *(double *)(a2 + 504) + v364 * v521.f64[0];
    *(double *)(a2 + 576) = *(double *)(a2 + 576) + v363 * v521.f64[0];
    *(double *)a2 = v372;
    *(double *)(a2 + 8) = v371 + v369 * v370;
    v385 = v373 + v368 * v370;
    *(double *)(a2 + 144) = v376;
    *(double *)(a2 + 152) = v375 + v358.f64[0] * v370;
    v386 = v377 + v357.f64[0] * v370;
    *(double *)(a2 + 288) = v380;
    *(double *)(a2 + 296) = v379 + v367 * v370;
    v387 = *(double *)(a2 + 376);
    v388 = *(double *)(a2 + 368) + v366 * v370;
    *(double *)(a2 + 432) = v383;
    *(double *)(a2 + 440) = v382 + v365 * v370;
    *(double *)(a2 + 512) = *(double *)(a2 + 512) + v364 * v370;
    *(double *)(a2 + 584) = *(double *)(a2 + 584) + v363 * v370;
    v389 = v522;
    v390 = *(double *)(a2 + 24);
    v391 = *(double *)(a2 + 16) + v369 * v522.f64[0];
    v392 = *(double *)(a2 + 96);
    v393 = *(double *)(a2 + 88) + v368 * v522.f64[0];
    *(double *)(a2 + 80) = v385;
    *(double *)(a2 + 88) = v393;
    v394 = *(double *)(a2 + 168);
    v395 = *(double *)(a2 + 160) + v358.f64[0] * v389.f64[0];
    v396 = *(double *)(a2 + 240);
    v397 = *(double *)(a2 + 232) + v357.f64[0] * v389.f64[0];
    *(double *)(a2 + 224) = v386;
    *(double *)(a2 + 232) = v397;
    v398 = *(double *)(a2 + 312);
    v399 = *(double *)(a2 + 304) + v367 * v389.f64[0];
    *(double *)(a2 + 368) = v388;
    *(double *)(a2 + 376) = v387 + v366 * v389.f64[0];
    v400 = *(double *)(a2 + 456);
    v401 = *(double *)(a2 + 448) + v365 * v389.f64[0];
    *(double *)(a2 + 520) = *(double *)(a2 + 520) + v364 * v389.f64[0];
    *(double *)(a2 + 592) = *(double *)(a2 + 592) + v363 * v389.f64[0];
    *(double *)(a2 + 16) = v391;
    *(double *)(a2 + 24) = v390 + v369 * v389.f64[1];
    *(double *)(a2 + 160) = v395;
    *(double *)(a2 + 168) = v394 + v358.f64[0] * v389.f64[1];
    *(double *)(a2 + 304) = v399;
    *(double *)(a2 + 312) = v398 + v367 * v389.f64[1];
    *(double *)(a2 + 448) = v401;
    *(double *)(a2 + 456) = v400 + v365 * v389.f64[1];
    *(double *)(a2 + 528) = *(double *)(a2 + 528) + v364 * v389.f64[1];
    *(double *)(a2 + 600) = *(double *)(a2 + 600) + v363 * v389.f64[1];
    v402 = v523;
    v403 = *(double *)v524;
    v404 = *(double *)(a2 + 32) + v369 * v523;
    v405 = *(double *)(a2 + 104) + v368 * v523;
    *(double *)(a2 + 96) = v392 + v368 * v389.f64[1];
    *(double *)(a2 + 104) = v405;
    v406 = *(double *)(a2 + 176) + v358.f64[0] * v402;
    v407 = *(double *)(a2 + 248) + v357.f64[0] * v402;
    *(double *)(a2 + 240) = v396 + v357.f64[0] * v389.f64[1];
    *(double *)(a2 + 248) = v407;
    v408 = *(double *)(a2 + 328);
    v409 = *(double *)(a2 + 320) + v367 * v402;
    v410 = *(double *)(a2 + 392) + v366 * v402;
    *(double *)(a2 + 384) = v361 + v366 * v389.f64[1];
    *(double *)(a2 + 392) = v410;
    v411 = *(double *)(a2 + 472);
    v412 = *(double *)(a2 + 464) + v365 * v402;
    *(double *)(a2 + 536) = *(double *)(a2 + 536) + v364 * v402;
    *(double *)(a2 + 608) = *(double *)(a2 + 608) + v363 * v402;
    v413 = *(double *)(a2 + 48);
    v414 = *(double *)(a2 + 40) + v369 * v403;
    *(double *)(a2 + 32) = v404;
    *(double *)(a2 + 40) = v414;
    v415 = *(double *)(a2 + 120);
    v416 = *(double *)(a2 + 112) + v368 * v403;
    v417 = *(double *)(a2 + 192);
    v418 = *(double *)(a2 + 184) + v358.f64[0] * v403;
    *(double *)(a2 + 176) = v406;
    *(double *)(a2 + 184) = v418;
    v419 = *(double *)(a2 + 264);
    v420 = *(double *)(a2 + 256) + v357.f64[0] * v403;
    *(double *)(a2 + 320) = v409;
    *(double *)(a2 + 328) = v408 + v367 * v403;
    v421 = *(double *)(a2 + 408);
    v422 = *(double *)(a2 + 400) + v366 * v403;
    *(double *)(a2 + 464) = v412;
    *(double *)(a2 + 472) = v411 + v365 * v403;
    *(double *)(a2 + 544) = *(double *)(a2 + 544) + v364 * v403;
    *(double *)(a2 + 616) = *(double *)(a2 + 616) + v363 * v403;
    v423 = *(_OWORD *)&v524[8];
    v424 = v413 + v369 * *(double *)&v524[8];
    v425 = v415 + v368 * *(double *)&v524[8];
    *(double *)(a2 + 112) = v416;
    *(double *)(a2 + 120) = v425;
    v426 = v417 + v358.f64[0] * *(double *)&v423;
    *(double *)(a2 + 256) = v420;
    *(double *)(a2 + 264) = v419 + v357.f64[0] * *(double *)&v423;
    v427 = *(double *)(a2 + 344);
    v428 = *(double *)(a2 + 336) + v367 * *(double *)&v423;
    *(double *)(a2 + 400) = v422;
    *(double *)(a2 + 408) = v421 + v366 * *(double *)&v423;
    v429 = *(double *)(a2 + 488);
    v430 = *(double *)(a2 + 480) + v365 * *(double *)&v423;
    *(double *)(a2 + 552) = *(double *)(a2 + 552) + v364 * *(double *)&v423;
    *(double *)(a2 + 624) = *(double *)(a2 + 624) + v363 * *(double *)&v423;
    v431 = *(double *)(a2 + 64);
    v432 = *(double *)(a2 + 56) + v369 * *((double *)&v423 + 1);
    *(double *)(a2 + 48) = v424;
    *(double *)(a2 + 56) = v432;
    v433 = *(double *)(a2 + 136);
    v434 = *(double *)(a2 + 128) + v368 * *((double *)&v423 + 1);
    v435 = *(double *)(a2 + 208);
    v436 = *(double *)(a2 + 200) + v358.f64[0] * *((double *)&v423 + 1);
    *(double *)(a2 + 192) = v426;
    *(double *)(a2 + 200) = v436;
    v437 = *(double *)(a2 + 280);
    v438 = *(double *)(a2 + 272) + v357.f64[0] * *((double *)&v423 + 1);
    *(double *)(a2 + 336) = v428;
    *(double *)(a2 + 344) = v427 + v367 * *((double *)&v423 + 1);
    v439 = *(double *)(a2 + 424);
    v440 = *(double *)(a2 + 416) + v366 * *((double *)&v423 + 1);
    *(double *)(a2 + 480) = v430;
    *(double *)(a2 + 488) = v429 + v365 * *((double *)&v423 + 1);
    *(double *)(a2 + 560) = *(double *)(a2 + 560) + v364 * *((double *)&v423 + 1);
    *(double *)(a2 + 632) = *(double *)(a2 + 632) + v363 * *((double *)&v423 + 1);
    v441 = *(double *)&v524[24];
    *(double *)(a2 + 64) = v431 + v369 * *(double *)&v524[24];
    *(double *)(a2 + 72) = v374;
    *(double *)(a2 + 128) = v434;
    *(double *)(a2 + 136) = v433 + v368 * v441;
    *(double *)(a2 + 208) = v435 + v358.f64[0] * v441;
    *(double *)(a2 + 216) = v378;
    *(double *)(a2 + 272) = v438;
    *(double *)(a2 + 280) = v437 + v357.f64[0] * v441;
    *(double *)(a2 + 352) = v381 + v367 * v441;
    *(float64_t *)(a2 + 360) = v359.f64[0];
    *(double *)(a2 + 416) = v440;
    *(double *)(a2 + 424) = v439 + v366 * v441;
    *(double *)(a2 + 496) = v384 + v365 * v441;
    *(float64_t *)(a2 + 504) = v362.f64[0];
    *(double *)(a2 + 568) = *(double *)(a2 + 568) + v364 * v441;
    *(double *)(a2 + 640) = *(double *)(a2 + 640) + v363 * v441;
  }
  return 1;
}

void sub_239444188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  free(a37);
  _Unwind_Resume(a1);
}

double sub_2394441A0()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double *v110;
  double result;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  double v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  double v259;
  double v260;
  double v261;
  double v262;
  double v263;
  double v264;
  double v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  double v375;
  double v376;
  double v377;
  double v378;
  double v379;
  double v380;
  double v381;
  double v382;
  double v383;
  double v384;
  double v385;
  double v386;
  double v387;
  double v388;
  double v389;
  double v390;
  double v391;
  double v392;
  double v393;
  double v394;
  double v395;
  double v396;
  double v397;
  double v398;
  double v399;
  double v400;
  double v401;
  double v402;
  double v403;
  double v404;
  double v405;
  double v406;
  double v407;
  double v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  double v414;
  double v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  double v423;
  double v424;
  double v425;
  double v426;
  double v427;
  double v428;
  double v429;
  double v430;
  double v431;
  double v432;
  double v433;
  double v434;
  double v435;
  double v436;
  double v437;
  double v438;
  double v439;
  double v440;
  double v441;
  double v442;
  double v443;
  double v444;
  double v445;
  double v446;
  double v447;
  double v448;
  double v449;
  double v450;
  double v451;
  double v452;
  double v453;
  double v454;
  double v455;
  double v456;
  double v457;
  double v458;
  double v459;
  double v460;
  double v461;
  double v462;
  double v463;
  double v464;
  double v465;
  double v466;
  double v467;
  double v468;
  double v469;
  double v470;
  double v471;
  double v472;
  double v473;
  double v474;
  double v475;
  double v476;
  double v477;
  double v478;
  double v479;
  double v480;
  double v481;
  double v482;
  double v483;
  double v484;
  double v485;
  double v486;
  double v487;
  double v488;
  double v489;
  double v490;
  double v491;
  double v492;
  double v493;
  double v494;
  double v495;
  double v496;
  double v497;
  double v498;
  double v499;
  double v500;
  double v501;
  double v502;
  double v503;
  double v504;
  double v505;
  double v506;
  double v507;
  double v508;
  double v509;
  double v510;
  double v511;
  double v512;
  double v513;
  double v514;
  double v515;
  double v516;
  double v517;
  double v518;
  double v519;
  double v520;
  double v521;
  double v522;
  double v523;
  double v524;
  double v525;
  double v526;
  double v527;
  double v528;
  double v529;
  double v530;
  double v531;
  double v532;
  double v533;
  double v534;
  double v535;
  double v536;
  double v537;
  double v538;
  double v539;
  double v540;
  double v541;
  double v542;
  double v543;
  double v544;
  double v545;
  double v546;
  double v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double v553;
  double v554;
  double v555;
  double v556;
  double v557;
  double v558;
  double v559;
  double v560;
  double v561;
  double v562;
  double v563;
  double v564;
  double v565;
  double v566;
  double v567;
  double v568;
  double v569;
  double v570;
  double v571;
  double v572;
  double v573;
  double v574;
  double v575;
  double v576;
  double v577;
  double v578;
  double v579;
  double v580;
  double v581;
  double v582;
  double v583;
  double v584;
  double v585;
  double v586;
  double v587;
  double v588;
  double v589;
  double v590;
  double v591;
  double v592;
  double v593;
  double v594;
  double v595;
  double v596;
  double v597;
  double v598;
  double v599;
  double v600;
  double v601;
  double v602;
  double v603;
  double v604;
  double v605;
  double v606;
  double v607;
  double v608;
  double v609;
  double v610;
  double v611;
  double v612;
  double v613;
  double v614;
  double v615;
  double v616;
  double v617;
  double v618;
  double v619;
  double v620;
  double v621;
  double v622;
  double v623;
  double v624;
  double v625;
  double v626;
  double v627;
  double v628;
  double v629;
  double v630;
  double v631;
  double v632;
  double v633;
  double v634;
  double v635;
  double v636;
  double v637;
  double v638;
  double v639;
  double v640;
  double v641;
  double v642;
  double v643;
  double v644;
  double v645;
  double v646;
  double v647;
  double v648;
  double v649;
  double v650;
  double v651;
  double v652;
  double v653;
  double v654;
  double v655;
  double v656;
  double v657;
  double v658;
  double v659;
  double v660;
  double v661;
  double v662;
  double v663;
  double v664;
  double v665;
  double v666;
  double v667;
  double v668;
  double v669;
  double v670;
  double v671;
  double v672;
  double v673;
  double v674;
  double v675;
  double v676;
  double v677;
  double v678;
  double v679;
  double v680;
  double v681;
  double v682;
  double v683;
  double v684;
  double v685;
  double v686;
  double v687;
  double v688;
  double v689;
  double v690;
  double v691;
  double v692;
  double v693;
  double v694;
  double v695;
  double v696;
  double v697;
  double v698;
  double v699;
  double v700;
  double v701;
  double v702;
  double v703;
  double v704;
  double v705;
  double v706;
  double v707;
  double v708;
  double v709;
  double v710;
  double v711;
  double v712;
  double v713;
  double v714;
  double v715;
  double v716;
  double v717;
  double v718;
  double v719;
  double v720;
  double v721;
  double v722;
  double v723;
  double v724;
  double v725;
  double v726;
  double v727;
  double v728;
  double v729;
  double v730;
  double v731;
  double v732;
  double v733;
  double v734;
  double v735;
  double v736;
  double v737;
  double v738;
  double v739;
  double v740;
  double v741;
  double v742;
  double v743;
  double v744;
  double v745;
  double v746;
  double v747;
  double v748;
  double v749;
  double v750;
  double v751;
  double v752;
  double v753;
  double v754;
  double v755;
  double v756;
  double v757;
  double v758;
  double v759;
  double v760;
  double v761;
  double v762;
  double v763;
  double v764;
  double v765;
  double v766;
  double v767;
  double v768;
  double v769;
  double v770;
  double v771;
  double v772;
  double v773;
  double v774;
  double v775;
  double v776;
  double v777;
  double v778;
  double v779;
  double v780;
  double v781;
  double v782;
  double v783;
  double v784;
  double v785;
  double v786;
  double v787;
  double v788;
  double v789;
  double v790;
  double v791;
  double v792;
  double v793;
  double v794;
  double v795;
  double v796;
  double v797;
  double v798;
  double v799;
  double v800;
  double v801;
  double v802;
  double v803;
  double v804;
  double v805;
  double v806;
  double v807;
  double v808;
  double v809;
  double v810;
  double v811;
  double v812;
  double v813;
  double v814;
  double v815;
  double v816;
  double v817;
  double v818;
  double v819;
  double v820;
  double v821;
  double v822;
  double v823;
  double v824;
  double v825;
  double v826;
  double v827;
  double v828;
  double v829;
  double v830;
  double v831;
  double v832;
  double v833;
  double v834;
  double v835;
  double v836;
  double v837;
  double v838;
  double v839;
  double v840;
  double v841;
  double v842;
  double v843;
  double v844;
  double v845;
  double v846;
  double v847;
  double v848;
  double v849;
  double v850;
  double v851;
  double v852;
  double v853;
  double v854;
  double v855;
  double v856;
  double v857;
  double v858;
  double v859;
  double v860;
  double v861;
  double v862;
  double v863;
  double v864;
  double v865;
  double v866;
  double v867;
  double v868;
  double v869;
  double v870;
  double v871;
  double v872;
  double v873;
  double v874;
  double v875;
  double v876;
  double v877;
  double v878;
  double v879;
  double v880;
  double v881;
  double v882;
  double v883;
  double v884;
  double v885;
  double v886;
  double v887;
  double v888;
  double v889;
  double v890;
  double v891;
  double v892;
  double v893;
  double v894;
  double v895;
  double v896;
  double v897;
  double v898;
  double v899;
  double v900;
  double v901;
  double v902;
  double v903;
  double v904;
  double v905;
  double v906;
  double v907;
  double v908;
  double v909;
  double v910;
  double v911;
  double v912;
  double v913;
  double v914;
  double v915;
  double v916;
  double v917;
  double v918;
  double v919;
  double v920;
  double v921;
  double v922;
  double v923;
  double v924;
  double v925;
  double v926;
  double v927;
  double v928;
  double v929;
  double v930;
  double v931;
  double v932;
  double v933;
  double v934;
  double v935;
  double v936;
  double v937;
  double v938;
  double v939;
  double v940;
  double v941;
  double v942;
  double v943;
  double v944;
  double v945;
  double v946;
  double v947;
  double v948;
  double v949;
  double v950;
  double v951;
  double v952;
  double v953;
  double v954;
  double v955;
  double v956;
  double v957;
  double v958;
  double v959;
  double v960;
  double v961;
  double v962;
  double v963;
  double v964;
  double v965;
  double v966;
  double v967;
  double v968;
  double v969;
  double v970;
  double v971;
  double v972;
  double v973;
  double v974;
  double v975;
  double v976;
  double v977;
  double v978;
  double v979;
  double v980;
  double v981;
  double v982;
  double v983;
  double v984;
  double v985;
  double v986;
  double v987;
  double v988;
  double v989;
  double v990;
  double v991;
  double v992;
  double v993;
  double v994;
  double v995;
  double v996;
  double v997;
  double v998;
  double v999;
  double v1000;
  double v1001;
  double v1002;
  double v1003;
  double v1004;
  double v1005;
  double v1006;
  double v1007;
  double v1008;
  double v1009;
  double v1010;
  double v1011;
  double v1012;
  double v1013;
  double v1014;
  double v1015;
  double v1016;
  double v1017;
  double v1018;
  double v1019;
  double v1020;
  double v1021;
  double v1022;
  double v1023;
  double v1024;
  double v1025;
  double v1026;
  double v1027;
  double v1028;
  double v1029;
  double v1030;
  double v1031;
  double v1032;
  double v1033;
  double v1034;
  double v1035;
  double v1036;
  double v1037;
  double v1038;
  double v1039;
  double v1040;
  double v1041;
  double v1042;
  double v1043;
  double v1044;
  double v1045;
  double v1046;
  double v1047;
  double v1048;
  double v1049;
  double v1050;
  double v1051;
  double v1052;
  double v1053;
  double v1054;
  double v1055;
  double v1056;
  double v1057;
  double v1058;
  double v1059;
  double v1060;
  double v1061;
  double v1062;
  double v1063;
  double v1064;
  double v1065;
  double v1066;
  double v1067;
  double v1068;
  double v1069;
  double v1070;
  double v1071;
  double v1072;
  double v1073;
  double v1074;
  double v1075;
  double v1076;
  double v1077;
  double v1078;
  double v1079;
  double v1080;
  double v1081;
  double v1082;
  double v1083;
  double v1084;
  double v1085;
  double v1086;

  v0 = (double *)MEMORY[0x24BDAC7A8]();
  v1 = v0[10];
  v2 = v0[11];
  v3 = v0[32];
  v1044 = v0[33];
  v826 = v1 * v3;
  v4 = v0[34];
  v1023 = v0[35];
  v914 = v3 * v4;
  v967 = v4;
  v942 = v0[29] * v0[29];
  v1076 = v0[29];
  v5 = v0[6];
  v1036 = v0[7];
  v1084 = v0[17];
  v829 = v5 * v1084;
  v876 = v5 * v1076;
  v6 = v0[9];
  v1032 = v0[22];
  v978 = v0[23];
  v725 = v6 * v1032;
  v7 = v0[1];
  v957 = *v0 * v7;
  v8 = v0[13];
  v9 = v0[24];
  v10 = v0[25];
  v1060 = v0[12];
  v11 = v0[2];
  v12 = v0[3];
  v908 = v1060 * (v5 * v1084) + v1 * v3 * v10 - v3 * v4 * v7 + v5 * v1076 * v9 + v6 * v1032 * v1060 + v957 * 3.0 * v11;
  v13 = v0[5];
  v1000 = v13 * v1084;
  v1028 = v8 * (v13 * v1084) + v7 * -0.5 * v942;
  v1012 = v0[30];
  v1056 = v0[31];
  v1079 = v0[18];
  v1040 = v0[19];
  v1007 = v1079 * v1079 * 0.5;
  v14 = v11;
  v1030 = v0[21];
  v788 = v2 * v1030;
  v1068 = v1;
  v793 = v1 * v1023;
  v1054 = v0[15];
  v1062 = v0[14];
  v875 = v13 * v1056;
  v1071 = v0[27];
  v1073 = v0[26];
  v1045 = v5;
  v890 = v13 * v5;
  v1029 = v2;
  v720 = v2 * v4;
  v891 = v7 * v11;
  v883 = v1062 * (v2 * v1030)
       + v1 * v1023 * v10
       + v13 * v1056 * v1073
       + v13 * v5 * v12
       + v2 * v4 * v10
       + v7 * v11 * 3.0 * v12;
  v1049 = v0[4];
  v958 = v1049 * v1049 * 0.5;
  v15 = *v0;
  v16 = *v0 * 0.5;
  v1075 = v0[8];
  v986 = v1075 * v1075 * 0.5;
  v992 = v15 * v15 * 0.5;
  v1069 = v0[16];
  v889 = v1069 * v1069 * 0.5;
  v1058 = v0[28];
  v17 = v1058 * v1058 * 0.5;
  v936 = v17;
  v1034 = v0[20];
  v903 = v1034 * v1034 * 0.5;
  v1078 = v3;
  v848 = v1075 * v3;
  v1042 = v9;
  v670 = v15 * 0.5 * (v1060 * v1060)
       + v958 * v15
       + v986 * v15
       + v992 * v15
       - v889 * v15
       - v17 * v15
       - v903 * v15
       + v1075 * v3 * v9
       + v15 * 0.5 * (v9 * v9);
  v1051 = v0[5];
  v18 = v7 * v7 * 1.5;
  v965 = v1051 * v1051 * 0.5;
  v1019 = v14 * v965 + v18 * v14;
  v1085 = v11;
  v19 = v12;
  v1021 = v12 * v965 + v18 * v12;
  v1047 = v10;
  v1067 = v6;
  v694 = v6 * v6;
  v20 = v6 * v6 * 0.5;
  v1082 = v8;
  v834 = v15 * v18 + v15 * 0.5 * (v1047 * v1047) + v965 * v15 + v20 * v15 + v15 * 0.5 * (v8 * v8);
  v928 = v14 * v14;
  v21 = v14 * v14 * 1.5;
  v22 = v1045 * v1045 * 0.5;
  v995 = v22;
  v23 = v7 * v22 + v21 * v7;
  v1016 = v12 * v22 + v21 * v12;
  v24 = v15 * v21 + v16 * (v1073 * v1073) + v22 * v15;
  v25 = v1068 * v1068 * 0.5;
  v779 = v24 + v25 * *v0 + v16 * (v1062 * v1062);
  v26 = v12 * v12 * 1.5;
  v27 = v1036 * v1036 * 0.5;
  v1038 = *v0;
  v697 = v2 * v2;
  v28 = v2 * v2 * 0.5;
  v612 = v15 * v27 + v26 * v15 + v28 * v15 + v16 * (v1054 * v1054) + v16 * (v1071 * v1071);
  v29 = v15 * v15 * 1.5;
  v30 = v7;
  v31 = v7 * 0.5;
  v923 = v1060 * v1060 * 0.5;
  v723 = v0[32] * v0[32];
  v761 = v7 * v29
       + v7 * 0.5 * (v9 * v9)
       + v958 * v7
       + v986 * v30
       + v923 * v30
       - v17 * v30
       - v723 * 0.5 * v30
       - v31 * (v1069 * v1069)
       - v31 * (v1034 * v1034);
  v994 = v6 * v1030;
  v938 = v1051 * v1076;
  v678 = v1028
       + v6 * v1030 * v8
       + v1051 * v1076 * v1047
       + v20 * v30
       + v1047 * v1047 * 0.5 * v30
       - v1084 * v1084 * 0.5 * v30
       + v7 * 0.5 * (v8 * v8);
  v32 = v1032 * v1032 * 0.5;
  v1002 = v32;
  v1064 = v7;
  v663 = v23
       + v25 * v30
       + v7 * 0.5 * (v1062 * v1062)
       + v1073 * v1073 * 0.5 * v30
       - v1007 * v30
       - v32 * v30
       - v7 * 0.5 * (v1012 * v1012);
  v881 = v7 * v27 + v26 * v7 + v28 * v7 + v31 * (v1054 * v1054) + v31 * (v1071 * v1071);
  v1004 = v27;
  v818 = v29 * v1085
       + v1085 * 0.5 * (v9 * v9)
       + v958 * v1085
       + v986 * v1085
       + v923 * v1085
       - v17 * v1085
       - v723 * 0.5 * v1085
       - v1085 * 0.5 * (v1069 * v1069)
       - v1085 * 0.5 * (v1034 * v1034);
  v988 = v20;
  v974 = v1047 * v1047 * 0.5;
  v1005 = v1084 * v1084 * 0.5;
  v655 = v1019
       + v20 * v1085
       + v1085 * 0.5 * (v8 * v8)
       + v974 * v1085
       - v1005 * v1085
       - v1030 * v1030 * 0.5 * v1085
       - v1085 * 0.5 * v942;
  v975 = v1073 * v1073 * 0.5;
  v895 = v1 * v1032;
  v976 = v928 * 0.5;
  v676 = v11 * -0.5 * (v1012 * v1012)
       - v1007 * v11
       + v975 * v1085
       + v1 * v1032 * v1062
       + v995 * v1085
       + v928 * 0.5 * v1085
       + v1085 * 0.5 * (v1062 * v1062);
  v1024 = v28;
  v684 = v1085 * v27 + v26 * v1085 + v28 * v1085 + v1085 * 0.5 * (v1054 * v1054) + v1085 * 0.5 * (v1071 * v1071);
  v651 = v19 * v958
       + v29 * v19
       + v986 * v19
       + v923 * v19
       + v19 * 0.5 * (v9 * v9)
       - v17 * v19
       - v723 * 0.5 * v19
       - v19 * 0.5 * (v1069 * v1069)
       - v19 * 0.5 * (v1034 * v1034);
  v1014 = v1030 * v1030 * 0.5;
  v863 = v1021 + v20 * v19 + v19 * 0.5 * (v8 * v8) + v974 * v19 - v1005 * v19 - v1014 * v19 - v19 * 0.5 * v942;
  v645 = v1016
       + v25 * v19
       + v19 * 0.5 * (v1062 * v1062)
       + v975 * v19
       - v1007 * v19
       - v32 * v19
       - v19 * 0.5 * (v1012 * v1012);
  v1009 = v1040 * v1040 * 0.5;
  v963 = v12 * v12 * 0.5;
  v998 = v1029 * v978;
  v687 = v19 * v28
       + v27 * v19
       - v1009 * v19
       + v1029 * v1023 * v1071
       + v19 * 0.5 * (v1071 * v1071)
       + v963 * v19
       - v1023 * v1023 * 0.5 * v19
       + v1029 * v978 * v1054
       + v19 * 0.5 * (v1054 * v1054);
  v707 = v6 * v1034;
  v1022 = v1060 * v8;
  v902 = v1049 * v1084;
  v973 = v1069 * v1084;
  v33 = v8;
  v935 = v1084 * v1040;
  v1010 = v1069 * v1040;
  v982 = v1060 * v1054;
  v34 = v1060 * v1054 * 3.0;
  v590 = v10 * (v1040 * v1058)
       + v1049 * v1084 * v12
       + v1034 * v1030 * v1054
       + v1069 * v1084 * v1054
       + v1030 * v978 * v1060
       + v1034 * v978 * v33
       + v1084 * v1040 * v1060
       + v1069 * v1040 * v33
       + v34 * v33;
  v999 = v12 * v1060;
  v901 = v12 * v1062;
  v1011 = *v0 * v1054;
  v900 = v1036 * v1079;
  v899 = v1045 * v1040;
  v874 = v1049 * v1040;
  v933 = v1079 * v1040;
  v689 = v1085 * (v19 * v1060)
       + v19 * v1062 * v15
       + v15 * v1054 * v1085
       + v1036 * v1079 * v15
       + v1075 * v978 * v1085
       + v1036 * v1069 * v1085
       + v1045 * v1040 * v15
       + v1049 * v1040 * v1085
       + v1034 * v978 * v1062
       + v1079 * v1040 * v1060
       + v1069 * v1040 * v1062
       + v34 * v1062;
  v1026 = v12;
  v930 = v8 * v1062;
  v640 = v1069 * v1058 * v9 - v17 * v1060 + v1060 * 0.5 * (v9 * v9);
  v931 = v7 * v7 * 0.5;
  v545 = v1060 * (v1062 * v1062 * 1.5)
       + v928 * 0.5 * v1060
       + v1007 * v1060
       + v32 * v1060
       + v1060 * 0.5 * (v1073 * v1073);
  v35 = v1054 * v1054 * 1.5;
  v36 = v978 * v978 * 0.5;
  v680 = v1060 * v35 + v963 * v1060 + v1009 * v1060 + v36 * v1060 + v1060 * 0.5 * (v1071 * v1071);
  v563 = v33 * (v1060 * v1060 * 1.5) + v992 * v33 + v33 * 0.5 * (v1069 * v1069) + v903 * v33 + v33 * 0.5 * (v9 * v9);
  v904 = v1044 * v1044 * 0.5;
  v996 = v942 * 0.5;
  v682 = v974 * v33
       - v20 * v33
       - v904 * v33
       - v965 * v33
       + v1005 * v33
       + v1030 * v1044 * v1047
       + v1000 * v7
       + v931 * v33
       + v1084 * v1076 * v1047
       - v942 * 0.5 * v33
       + v6 * v1030 * v7
       + v33 * 0.5 * (v8 * v8);
  v571 = v33 * v35 + v963 * v33 + v1009 * v33 + v36 * v33 + v33 * 0.5 * (v1071 * v1071);
  v543 = v1060 * v1060 * 1.5 * v1062
       + v992 * v1062
       + v1062 * 0.5 * (v1069 * v1069)
       + v903 * v1062
       + v1062 * 0.5 * (v9 * v9);
  v1003 = v1045 * v1079;
  v37 = v1012 * v1012 * 0.5;
  v946 = v37;
  v659 = v1085 * (v1045 * v1079)
       + v928 * 0.5 * v1062
       + v1007 * v1062
       + v1 * v1032 * v1085
       - v37 * v1062
       - v995 * v1062
       + v1032 * v967 * v1073
       + v975 * v1062
       + v1062 * 0.5 * (v1062 * v1062);
  v1020 = v36;
  v674 = v1062 * v35 + v963 * v1062 + v1009 * v1062 + v36 * v1062 + v1062 * 0.5 * (v1071 * v1071);
  v594 = v1060 * v1060 * 1.5 * v1054
       + v992 * v1054
       + v1054 * 0.5 * (v1069 * v1069)
       + v903 * v1054
       + v1054 * 0.5 * (v9 * v9);
  v865 = v1040 * v1056;
  v997 = v1036 * v1040;
  v672 = v1071 * (v1040 * v1056)
       + v1009 * v1054
       + v963 * v1054
       - v28 * v1054
       + v36 * v1054
       + v1036 * v1040 * v12
       - v27 * v1054
       + v1054 * 0.5 * (v1071 * v1071);
  v1008 = v9 * v10;
  v661 = v1051 * v1051 * -0.5 * v1047
       - v20 * v1047
       + v974 * v1047
       - v1014 * v1047
       + v904 * v1047
       + v1047 * 0.5 * (v8 * v8);
  v932 = v1076 * v1012;
  v951 = v1084 * v1079;
  v1025 = v1045 * v1012;
  v961 = v967 * v967 * 0.5;
  v667 = v1073 * v37
       + v1045 * v1045 * -0.5 * v1073
       + v1079 * v1012 * v1062
       - v1007 * v1073
       + v1045 * v1012 * v1085
       + v928 * 0.5 * v1073
       + v1 * v967 * v1085
       + v961 * v1073
       + v975 * v1073
       - v32 * v1073
       + v1073 * 0.5 * (v1062 * v1062);
  v619 = v1060 * (v1069 * v1076)
       + v1084 * v1058 * v1060
       - v1049 * v1051 * v1042
       - v1034 * v1030 * v1042
       - v1069 * v1084 * v1042
       - v1075 * v6 * v1042
       + v992 * v1047
       + v9 * v9 * 1.5 * v1047;
  v924 = v1069 * v1079;
  v980 = v1058 * v1012;
  v966 = v1049 * v1045;
  v616 = v1042 * v914
       - v1069 * v1079 * v1042
       + v1058 * v1012 * v1042
       - v1075 * v1 * v1042
       - v1049 * v1045 * v1042
       - v1034 * v1032 * v1042
       + v992 * v1073
       + v923 * v1073
       + v9 * v9 * 1.5 * v1073;
  v614 = v1060 * (v1069 * v1056)
       + v1054 * v9 * v1060
       + v1069 * v1058 * v1054
       + v978 * v1078 * v1060
       + v1034 * v1078 * v1054
       + v1034 * v1023 * v1060
       - v889 * v1071
       + v992 * v1071
       + v923 * v1071
       + v9 * v9 * 1.5 * v1071;
  v983 = v1058 * v1076;
  v989 = v1058 * v1056;
  v1015 = v9 * v1071;
  v38 = v9 * v1071 * 3.0;
  v642 = v1082 * (v978 * v1078)
       + v1054 * v1047 * v1060
       + v1084 * v1056 * v1060
       + v1082 * v1071 * v1060
       - v1069 * v1040 * v1047
       + v1078 * v1044 * v1071
       + v1058 * v1076 * v1071
       + v1076 * v1056 * v9
       + v1078 * v1023 * v1047
       + v1058 * v1056 * v1047
       + v38 * v1047;
  v945 = v1012 * v1056;
  v657 = v1062 * (v1040 * v1058)
       + v978 * v967 * v1060
       + v826 * v12
       + v1069 * v1012 * v1054
       + v1032 * v1078 * v1054
       + v1034 * v967 * v1054
       + v1012 * v1056 * v1042
       + v967 * v1023 * v1042
       + v1078 * v1023 * v1073
       + v1058 * v1056 * v1073
       + v38 * v1073;
  v977 = v1049 * v1051;
  v636 = v1082 * (v1069 * v1076)
       + v1084 * v1058 * v1082
       - v1049 * v1051 * v1047
       - v1034 * v1030 * v1047
       - v1069 * v1084 * v1047
       - v1075 * v6 * v1047
       + v931 * v1042
       + v8 * v8 * 0.5 * v1042
       + v1047 * v1047 * 1.5 * v1042;
  v953 = v8 * v8 * 0.5;
  v634 = v1047 * (v1044 * v967)
       + v1076 * v1012 * v1047
       - v1084 * v1079 * v1047
       - v1030 * v1032 * v1047
       - v890 * v1047
       - v6 * v1 * v1047
       - v1005 * v1073
       - v1014 * v1073
       - v965 * v1073
       - v20 * v1073
       + v953 * v1073
       + v1047 * v1047 * 1.5 * v1073;
  v823 = v1051 * v1036;
  v632 = v1047 * (v1044 * v1023)
       + v1076 * v1056 * v1047
       - v1084 * v1040 * v1047
       - v1030 * v978 * v1047
       - v1051 * v1036 * v1047
       - v6 * v1029 * v1047
       - v1005 * v1071
       - v1014 * v1071
       + v953 * v1071
       + v1047 * v1047 * 1.5 * v1071;
  v927 = v1076 * v1056;
  v969 = v10 * v1073;
  v917 = v1062 * v1062 * 0.5;
  v628 = v1073 * v914
       - v1069 * v1079 * v1073
       + v1058 * v1012 * v1073
       - v1075 * v1 * v1073
       - v1049 * v1045 * v1073
       - v1034 * v1032 * v1073
       + v928 * 0.5 * v1042
       + v917 * v1042
       + v1073 * v1073 * 1.5 * v1042;
  v630 = v1073 * (v1044 * v967)
       + v1076 * v1012 * v1073
       - v1084 * v1079 * v1073
       - v1030 * v1032 * v1073
       - v890 * v1073
       - v6 * v1 * v1073
       - v1007 * v1047
       - v995 * v1047
       - v25 * v1047
       + v1047 * 0.5 * (v1062 * v1062)
       + v1073 * v1073 * 1.5 * v1047;
  v954 = v1045 * v1036;
  v984 = v1054 * v1054 * 0.5;
  v970 = v1049 * v1036;
  v39 = v1049 * v1036 * 3.0;
  v596 = v1049 * (v6 * v1029) + v957 * v1036 + v1075 * v1029 * v1051 + v39 * v1051;
  v830 = v1049 * (v1 * v1029) + *v0 * v11 * v1036 + v1075 * v1029 * v1045 + v39 * v1045;
  v887 = v7 * v12;
  v937 = v11 * v12;
  v985 = *v0 * v1060;
  v555 = v1049 * (v1051 * v1051 * 1.5) + v931 * v1049 + v20 * v1049 + v1049 * 0.5 * (v1084 * v1084) + v1049 * 0.5 * v942;
  v806 = v1049 * (v1045 * v1045 * 1.5)
       + v928 * 0.5 * v1049
       + v25 * v1049
       + v1049 * 0.5 * (v1079 * v1079)
       + v1049 * 0.5 * (v1012 * v1012);
  v921 = v12 * v9;
  v40 = v1036 * v1036 * 1.5;
  v565 = v12 * v1042 * v1056
       - v1034 * v978 * v1036
       + v1075 * v1023 * v1056
       + v1029 * v1078 * v1056
       - v1042 * v1071 * v1036
       - v1078 * v1023 * v1036
       - v1060 * v1054 * v1036
       + v963 * v1049
       + v40 * v1049
       + v28 * v1049
       + v1049 * 0.5 * (v1040 * v1040)
       + v1049 * 0.5 * (v1056 * v1056);
  v41 = v1023 * v1023 * 0.5;
  v955 = v7 * v10;
  v1018 = v7 * v8;
  v653 = v7 * v7 * (v1051 * 0.5)
       + v942 * 0.5 * v1051
       + v1064 * v10 * v1076
       + v6 * v1044 * v1076
       - v904 * v1051
       + v965 * v1051
       - v953 * v1051
       + v1005 * v1051
       - v974 * v1051
       + v1064 * v8 * v1084
       + v6 * v1030 * v1084
       + v1051 * 0.5 * (v6 * v6);
  v480 = v1051 * (v1045 * v1045 * 1.5) + v1051 * 0.5 * v928 + v1051 * 0.5 * (v1068 * v1068);
  v764 = v1051 * v40 + v963 * v1051 + v28 * v1051 + v1051 * 0.5 * (v1040 * v1040) + v1051 * 0.5 * (v1056 * v1056);
  v474 = v1045 * (v1051 * v1051 * 1.5) + v1045 * 0.5 * (v7 * v7) + v1045 * 0.5 * (v6 * v6);
  v1017 = v11 * v1062;
  v1006 = v11 * v1073;
  v647 = v1032 * v1032 * -0.5 * v1045
       - v975 * v1045
       + v1068 * v1032 * v1079
       + v37 * v1045
       + v1045 * 0.5 * v928
       - v961 * v1045
       + v1007 * v1045
       + v1085 * v1062 * v1079
       + v1068 * v967 * v1012
       + v1085 * v1073 * v1012
       + v1045 * 0.5 * (v1068 * v1068);
  v690 = v1045 * v40 + v963 * v1045 + v28 * v1045 + v1045 * 0.5 * (v1040 * v1040) + v1045 * 0.5 * (v1056 * v1056);
  v760 = v1051 * v1051 * 1.5 * v1036 + v1036 * 0.5 * (v7 * v7) + v1036 * 0.5 * (v6 * v6);
  v588 = v1036 * (v1045 * v1045 * 1.5) + v1036 * 0.5 * v928 + v1036 * 0.5 * (v1068 * v1068);
  v972 = v12 * v1054;
  v649 = v1036 * v28
       + v963 * v1036
       + v1036 * 0.5 * (v1056 * v1056)
       + v12 * v1054 * v1040
       + v1029 * v978 * v1040
       - v984 * v1036
       - v41 * v1036
       - v36 * v1036
       + v1036 * 0.5 * (v1040 * v1040);
  v860 = v1060 * v1062;
  v42 = v1069 * v1040 * 3.0;
  v520 = v1040 * v1058 * v1076
       + v1054 * v9 * v1076
       + v1034 * v1030 * v1040
       + v1060 * v8 * v1040
       + v1030 * v978 * v1069
       + v1034 * v978 * v1084
       + v42 * v1084;
  v892 = v1062 * v1054;
  v501 = v1045 * v1011
       + v1075 * v978 * v1045
       + v1062 * v1054 * v1069
       + v1060 * v1054 * v1079
       + v1 * v1034 * v1036
       + v1034 * v1032 * v1040
       + v1060 * v1062 * v1040
       + v1032 * v978 * v1069
       + v1034 * v978 * v1079
       + v42 * v1079;
  v43 = v1084 * v1084 * 1.5;
  v941 = v8 * v1054;
  v44 = v1079 * v1079 * 1.5;
  v861 = v11 * v1054;
  v610 = v923 * v1069
       + v1060 * v9 * v1058
       + v958 * v1069
       - v992 * v1069
       + v1075 * v1034 * v1049
       - v723 * 0.5 * v1069
       + v985 * v1049
       - v986 * v1069
       + v889 * v1069
       + v1034 * v1078 * v1058
       + v1069 * 0.5 * (v1058 * v1058);
  v518 = v1047 * v1047 * -0.5 * v1069
       - v904 * v1069
       + v965 * v1069
       + v953 * v1069
       + v43 * v1069
       + v1014 * v1069
       + v1069 * 0.5 * v942;
  v727 = v917 * v1069 + v995 * v1069 + v44 * v1069 + v32 * v1069 + v1069 * 0.5 * (v1012 * v1012);
  v964 = *v0 * v12;
  v844 = v1054 * v1071;
  v665 = -(v964 * v1040)
       - v1078 * v1023 * v1040
       - v1075 * v1029 * v1040
       + v978 * v1078 * v1056
       + v1060 * v1071 * v1056
       + v1034 * v1023 * v1056
       + v978 * v1023 * v1058
       + v1054 * v1071 * v1058
       - v9 * v1071 * v1040
       + v984 * v1069
       + v27 * v1069
       + v1040 * v1040 * 1.5 * v1069
       + v36 * v1069
       + v1069 * 0.5 * (v1056 * v1056);
  v598 = v8 * v10 * v1076
       - v904 * v1084
       + v942 * 0.5 * v1084
       + v7 * v8 * v1051
       - v974 * v1084
       + v1005 * v1084
       + v965 * v1084
       - v988 * v1084
       + v1014 * v1084
       + v1030 * v1044 * v1076
       + v953 * v1084
       - v1084 * 0.5 * (v7 * v7);
  v467 = v917 * v1084 + v995 * v1084 + v44 * v1084 + v32 * v1084 + v37 * v1084 - v1084 * 0.5 * v928;
  v991 = v1071 * v1071 * 0.5;
  v470 = v953 * v1079 + v965 * v1079 + v43 * v1079 + v1014 * v1079 + v942 * 0.5 * v1079 - v1079 * 0.5 * (v7 * v7);
  v476 = v1062 * v1073 * v1012
       + v32 * v1079
       - v25 * v1079
       + v1032 * v967 * v1012
       + v11 * v1062 * v1045
       + v1068 * v1032 * v1045
       + v995 * v1079
       - v1079 * 0.5 * v928;
  v45 = v1069 * v1069 * 1.5;
  v512 = v9 * v9 * -0.5 * v1084 - v723 * 0.5 * v1084 + v1084 * 0.5 * (v1049 * v1049) + v923 * v1084 + v45 * v1084;
  v514 = v923 * v1079 + v1079 * 0.5 * (v1049 * v1049) + v45 * v1079;
  v433 = v45 * v1040 + v1040 * 0.5 * (v1049 * v1049);
  v438 = v953 * v1040 + v965 * v1040 + v43 * v1040 + v1014 * v1040 + v942 * 0.5 * v1040 - v1040 * 0.5 * (v7 * v7);
  v428 = v1036 * (v1068 * v1032)
       + v1045 * v1079 * v1036
       + v11 * v1054 * v1045
       + v12 * v1062 * v1045
       + v995 * v1040
       + v917 * v1040
       + v44 * v1040
       + v32 * v1040
       + v37 * v1040
       - v1040 * 0.5 * v928;
  v971 = v9 * v1073;
  v408 = v1045 * (v1068 * v967)
       + v1007 * v1012
       + v1062 * v1073 * v1079
       - v25 * v1012
       + v37 * v1012
       + v975 * v1012
       + v1012 * -0.5 * v928;
  v404 = v1007 * v1076
       + v995 * v1076
       + v1012 * v1012 * 1.5 * v1076
       + v975 * v1076
       + v961 * v1076
       - v917 * v1076
       - v32 * v1076
       + v1076 * -0.5 * v928;
  v920 = v9 * v9 * 0.5;
  v46 = v1058 * v1058 * 1.5;
  v384 = v958 * v1076 + v1060 * v1060 * -0.5 * v1076 + v889 * v1076 + v920 * v1076 + v46 * v1076;
  v380 = v958 * v1012 + v1060 * v1060 * -0.5 * v1012 + v889 * v1012 + v920 * v1012 + v46 * v1012;
  v47 = *v0;
  v947 = v1049 * v1069;
  v968 = v1049 * v1058;
  v926 = v1049 * v1012;
  v929 = v1045 * v1058;
  v729 = v1062 * (v1075 * v1034)
       + v1075 * v1068 * *v0
       + v1049 * v1069 * v1062
       + v1075 * v1032 * v1060
       + v1045 * v1069 * v1060
       + v1049 * v1079 * v1060
       + v848 * v1073
       + v1049 * v1058 * v1073
       + v1049 * v1012 * v1042
       + v826 * v1042
       + v1075 * v967 * v1042
       + v1045 * v1058 * v1042
       - v1069 * v1079 * v47
       - v914 * v47;
  v623 = v1060 * (v1045 * v1079) + v1085 * v1073 * v9 + v826 * v1073 - v914 * v1085;
  v559 = v1071 * (v1075 * v967)
       + v793 * v9
       - v1069 * v1079 * v1026
       - v1032 * v978 * v47
       - v1034 * v978 * v1085
       - v1079 * v1040 * v47
       - v1069 * v1040 * v1085
       - v1012 * v1056 * v47
       - v967 * v1023 * v47
       - v1078 * v1023 * v1085
       - v1058 * v1056 * v1085
       - v914 * v1026;
  v796 = v1049 * v1079;
  v862 = v1045 * v1069;
  v48 = *v0;
  v557 = v47 * (v1049 * v1079)
       + v1045 * v1069 * v47
       + v1034 * v1032 * v1060
       + v1069 * v1079 * v1060
       + v1034 * v1078 * v1073
       + v1069 * v1058 * v1073
       + v1060 * v1042 * v1073
       + v1032 * v1078 * v1042
       + v1034 * v967 * v1042
       + v1079 * v1058 * v1042
       - v1075 * v1068 * v1060
       - v1049 * v1045 * v1060
       + v1069 * v1012 * v1042
       - v914 * v1060;
  v553 = v1084 * v1012 * v9
       - v1049 * v1051 * v1062
       - v1049 * v1045 * v1082
       - v890 * v1060
       - v1075 * v6 * v1062
       - v1075 * v1068 * v1082
       - v6 * v1068 * v1060
       - v1058 * v1076 * v1062
       - v1058 * v1012 * v1082
       - v1076 * v1012 * v1060
       - v1078 * v1044 * v1062
       - v914 * v1082;
  v533 = v1085 * (v1049 * v1079)
       + v1045 * v1069 * v1085
       + v1068 * v1032 * *v0
       + v1079 * v1012 * v1042
       + v1062 * v1073 * v1042
       + v1034 * v1032 * v1062
       + v1069 * v1079 * v1062
       + v1032 * v1078 * v1073
       + v1034 * v967 * v1073
       + v1079 * v1058 * v1073
       - v1075 * v1068 * v1062
       - v1049 * v1045 * v1062
       + v1069 * v1012 * v1073
       - v914 * v1062;
  v547 = -(v1049 * v1045 * v1054)
       - v1075 * v1068 * v1054
       - v1068 * v1029 * v1060
       - v1075 * v1029 * v1062
       - v1045 * v1036 * v1060
       - v1049 * v1036 * v1062
       - v1012 * v1056 * v1060
       - v967 * v1023 * v1060
       - v1078 * v1023 * v1062
       - v1058 * v1056 * v1062
       + v1069 * v1012 * v1071
       - v914 * v1054;
  v528 = v1062 * (v33 * v1042)
       + v1060 * v1073 * v33
       + v1069 * v1076 * v1062
       + v1069 * v1012 * v8
       + v1084 * v1058 * v1062
       + v1084 * v1012 * v1060
       + v1042 * v1047 * 3.0 * v1073
       + v1058 * v1076 * v1073
       + v1058 * v1012 * v1047
       + v1076 * v1012 * v1042
       + v1078 * v1044 * v1073
       + v914 * v1047;
  v626 = -(v1075 * v1029 * v1073)
       - v1068 * v1029 * v1042
       - v1045 * v1036 * v1042
       - v1049 * v1036 * v1073
       - v1032 * v978 * v1042
       - v1034 * v978 * v1073
       - v1079 * v1040 * v1042
       - v1069 * v1040 * v1073
       + v914 * v1071;
  v916 = v11 * v1060;
  v918 = *v0 * v9;
  v842 = *v0 * v1073;
  v537 = v48 * v1062 * v1069
       + v1085 * v1060 * v1069
       + v848 * v1012
       + v1049 * v1058 * v1012
       + v48 * v1042 * v1012
       + v1068 * v1034 * v1069
       + v1075 * v1032 * v1069
       + v826 * v1058
       + v1075 * v967 * v1058
       + v1085 * v1042 * v1058
       + v48 * v1073 * v1058
       - v1034 * v1032 * v1049
       - v1060 * v1062 * v1049
       - v914 * v1049;
  v446 = v1068 * v1044 * v1058
       - v1060 * v8 * v1045
       - v1060 * v1062 * v1051
       - v8 * v1062 * v1049
       - v1034 * v1030 * v1045
       - v1034 * v1032 * v1051
       - v1030 * v1032 * v1049
       - v1042 * v1047 * v1045
       - v1042 * v1073 * v1051
       - v1047 * v1073 * v1049
       - v1078 * v1044 * v1045
       - v914 * v1051;
  v868 = *v0 * v1062;
  v539 = v1069 * (v1068 * v1032)
       + v48 * v1062 * v1079
       + v1045 * v1012 * v1058
       + v1085 * v1073 * v1058
       + v1068 * v1034 * v1079
       + v1075 * v1032 * v1079
       + v1068 * v967 * v1058
       + v826 * v1012
       + v1075 * v967 * v1012
       + v1085 * v9 * v1012
       + v48 * v1073 * v1012
       - v1034 * v1032 * v1045
       - v1060 * v1062 * v1045
       - v914 * v1045;
  v426 = v11 * v9 * v1056
       + v1075 * v967 * v1056
       + v842 * v1056
       - v1062 * v1054 * v1049
       - v1060 * v1054 * v1045
       - v967 * v1023 * v1049
       - v1073 * v1071 * v1049
       - v1034 * v1032 * v1036
       - v1060 * v1062 * v1036
       - v1032 * v978 * v1049
       - v1034 * v978 * v1045
       - v914 * v1036;
  v952 = *v0 * v11;
  v549 = v1049 * (v1068 * v1034)
       + v1075 * v1034 * v1045
       + v1034 * v1032 * v1069
       + v1060 * v1062 * v1069
       + v1032 * v1078 * v1058
       + v1034 * v967 * v1058
       + v1034 * v1078 * v1012
       + v1069 * v1058 * v1012
       + v1060 * v1042 * v1012
       + v1062 * v1042 * v1058
       + v1060 * v1073 * v1058
       - v1075 * v1068 * v1069
       - v952 * v1069
       - v914 * v1069;
  v388 = v1084 * v1058 * v1012
       - v957 * v1079
       - v952 * v1084
       - v7 * v11 * v1069
       - v1075 * v1067 * v1079
       - v1075 * v1068 * v1084
       - v1067 * v1068 * v1069
       - v1042 * v1047 * v1079
       - v1042 * v1073 * v1084
       - v1047 * v1073 * v1069
       - v1078 * v1044 * v1079
       - v914 * v1084;
  v535 = v1045 * (v1085 * v1060)
       + v1075 * v1032 * v1045
       + v15 * v1062 * v1045
       + v1068 * v1032 * v1049
       + v1068 * v1034 * v1045
       + v1034 * v967 * v1012
       + v1032 * v967 * v1058
       + v1079 * v1012 * v1058
       + v1062 * v1073 * v1058
       + v1062 * v9 * v1012
       + v1060 * v1073 * v1012
       - v1075 * v1068 * v1079
       - v15 * v1085 * v1079
       - v914 * v1079;
  v840 = v1073 * v1071;
  v357 = v1060 * v1073 * v1056
       + v1062 * v9 * v1056
       - v1075 * v1068 * v1040
       - v15 * v1085 * v1040
       - v1068 * v1029 * v1069
       - v1075 * v1029 * v1079
       - v1085 * v19 * v1069
       - v15 * v19 * v1079
       - v967 * v1023 * v1069
       - v1073 * v1071 * v1069
       - v1078 * v1023 * v1079
       - v914 * v1040;
  v805 = v11 * v9;
  v608 = v1049 * (v11 * v1042)
       + v1075 * v967 * v1049
       + v1069 * v1058 * v1079
       + v1060 * v1042 * v1079
       + v1034 * v967 * v1069
       + v1034 * v1078 * v1079
       + v1062 * v1042 * v1069
       + v1060 * v1073 * v1069
       + v1032 * v1078 * v1069
       + v914 * v1058;
  v639 = v1079 * (v8 * v1042)
       + v1060 * v1073 * v1084
       + v8 * v1073 * v1069
       + v1062 * v1042 * v1084
       + v1062 * v1047 * v1069
       + v1069 * v1012 * v1084
       + v1042 * v1047 * v1012
       + v1042 * v1073 * v1076
       + v1047 * v1073 * v1058
       + v1058 * v1076 * 3.0 * v1012
       + v1078 * v1044 * v1012
       + v914 * v1076;
  v606 = v1045 * (v11 * v1042)
       + v1075 * v967 * v1045
       + v1032 * v967 * v1069
       + v1079 * v1012 * v1069
       + v1062 * v1073 * v1069
       + v1034 * v967 * v1079
       + v1062 * v1042 * v1079
       + v1060 * v1073 * v1079
       + v1032 * v1078 * v1079
       + v914 * v1012;
  v592 = v1040 * (v1034 * v967)
       + v1040 * v1058 * v1079
       + v1034 * v1023 * v1079
       + v1062 * v9 * v1040
       + v1060 * v1073 * v1040
       + v1032 * v1078 * v1040
       - v1034 * v978 * v1012
       - v1062 * v1054 * v1058
       - v1060 * v1054 * v1012
       + v914 * v1056;
  v944 = v7 * v1071;
  v800 = v1036 * v1076;
  v1001 = v1036 * v1058;
  v915 = v10 * v1071;
  v49 = v1058 * v1056 * 3.0;
  v567 = v1049 * (v1036 * v1076)
       + v7 * v1071 * v1049
       + v1036 * v1058 * v1051
       - v1034 * v978 * v1076
       - v8 * v1054 * v1058
       - v1060 * v1054 * v1076
       + v1078 * v1044 * v1056
       + v9 * v1047 * v1056
       + v1047 * v1071 * v1058
       + v1078 * v1023 * v1076
       + v49 * v1076;
  v50 = v1012 * (v1078 * v1023) + v1073 * v1071 * v1058 + v49 * v1012;
  v621 = v729 - v1034 * v1032 * *v0;
  v530 = v1073 * (v1075 * v1044)
       + v1045 * v1058 * v10
       + v1067 * v1078 * v1073
       + v1067 * v967 * v1042
       + v1068 * v1044 * v1042
       - v1069 * v1084 * v1085
       - v1069 * v1079 * v1064
       - v1084 * v1079 * *v0
       - v1034 * v1030 * v1085
       - v1034 * v1032 * v1064;
  v618 = v623
       + v1085 * v1062 * v1060
       + v1075 * v1068 * v1085
       + v1068 * v1032 * v1060
       + v1075 * v1032 * v1062
       + v1049 * v1079 * v1062
       + v1049 * v1012 * v1073
       + v1075 * v967 * v1073
       + v1045 * v1058 * v1073
       - v1069 * v1079 * v1085
       - v1058 * v1012 * v1085
       - v1034 * v1032 * v1085;
  v465 = v7 * (v1068 * v1034)
       + v6 * v1034 * v11
       + v1068 * v1030 * *v0
       + v1060 * v8 * 3.0 * v1062
       + v1069 * v1084 * v1062
       + v1069 * v1079 * v1082
       + v1084 * v1079 * v1060
       + v1034 * v1030 * v1062
       + v1034 * v1032 * v1082;
  v624 = v626 + v1058 * v1012 * v1071 - v1075 * v1068 * v1071 - v1049 * v1045 * v1071 - v1034 * v1032 * v1071;
  v472 = v1051 * (v1068 * v1034)
       + v6 * v1032 * v1049
       + v1068 * v1030 * v1049
       + v1060 * v8 * v1079
       + v1060 * v1062 * v1084
       + v8 * v1062 * v1069
       + v1069 * v1084 * 3.0 * v1079
       + v1034 * v1030 * v1079
       + v1034 * v1032 * v1084;
  v461 = v908 + v1075 * v967 * v10 + v890 * *v0 + v1075 * v1068 * v7;
  v463 = v1044 * v967 * v1042
       - v1069 * v1084 * v1073
       - v1069 * v1079 * v1047
       - v1084 * v1079 * v1042
       - v1034 * v1030 * v1073
       - v1034 * v1032 * v1047
       - v1030 * v1032 * v1042
       - v1049 * v1051 * v1073
       - v1049 * v1045 * v1047
       - v890 * v1042
       - v1075 * v6 * v1073
       - v1075 * v1068 * v1047;
  v51 = v952 * v1051 + v957 * v1045 + v7 * v11 * v1049 + v1049 * v1051 * 3.0 * v1045 + v1075 * v6 * v1045;
  v52 = v1075 * v6;
  v455 = v51 + v1075 * v1068 * v1051;
  v551 = v608 + v9 * v1073 * v1058 - v1034 * v1032 * v1058 - v1060 * v1062 * v1058 - v1075 * v1068 * v1058;
  v561 = v606 + v9 * v1073 * v1012 - v1034 * v1032 * v1012 - v1060 * v1062 * v1012 - v1075 * v1068 * v1012;
  v627 = v50
       + v9 * v1071 * v1012
       - v1034 * v1032 * v1056
       - v1060 * v1062 * v1056
       - v1068 * v1029 * v1058
       - v1075 * v1029 * v1012
       - v1085 * v19 * v1058
       - v15 * v19 * v1012
       - v1032 * v978 * v1058
       - v15 * v1085 * v1056
       - v1075 * v1068 * v1056;
  v376 = v1005 * v1058 + v965 * v1058 + v974 * v1058 + v942 * 1.5 * v1058;
  v382 = v1005 * v1012 + v965 * v1012 + v942 * 1.5 * v1012;
  v402 = v1005 * v1056 + v965 * v1056 + v942 * 1.5 * v1056;
  v53 = v1012 * v1012 * 1.5;
  v363 = v995 * v1058 + v1062 * v1062 * -0.5 * v1058 + v1007 * v1058 + v975 * v1058 + v53 * v1058;
  v430 = v1007 * v1056 + v995 * v1056 + v975 * v1056 + v961 * v1056 + v53 * v1056;
  v878 = v12 * v1071;
  v909 = v1036 * v1056;
  v943 = *v0 * v1071;
  v482 = v1040 * (v1060 * v1071) + v697 * -0.5 * v1058;
  v54 = v41;
  v421 = v1076 * v54 + v697 * -0.5 * v1076 + v991 * v1076 + v27 * v1076 - v36 * v1076 + v1076 * 1.5 * (v1056 * v1056);
  v907 = v7 * v1054;
  v527 = v863
       - v904 * v12
       - v1076 * v1056 * v1064
       + v1067 * v1044 * v1071
       + v1051 * v1036 * v1064
       + v1067 * v1029 * v1064;
  v581 = v883 + v1051 * v1036 * v1085 + v1045 * v1036 * v7 + v1067 * v1068 * v12 + v1067 * v1029 * v1085;
  v990 = v1056 * v1056 * 0.5;
  v602 = v881
       - v1009 * v1064
       - v36 * v1064
       - v990 * v1064
       - v54 * v1064
       + v1029 * v978 * v8
       + v1029 * v1023 * v1047
       + v1036 * v1056 * v1047
       + v1051 * v1036 * v1026
       + v1067 * v1029 * v1026;
  v884 = v1036 * v1084;
  v910 = v1051 * v1040;
  v604 = v1064 * (v1036 * v1084)
       + v1051 * v1040 * v1064
       + v1067 * v978 * v1064
       + v788 * v1064
       + v1084 * v1040 * v1082
       + v1030 * v978 * v1082
       + v1084 * v1076 * v1071
       + v1084 * v1056 * v1047
       + v1040 * v1076 * v1047
       + v1030 * v1023 * v1047
       + v978 * v1044 * v1047
       - v1076 * v1056 * v1082
       - v1044 * v1023 * v1082
       - v1051 * v1036 * v1082
       - v1067 * v1029 * v1082;
  v600 = v1064 * (v1036 * v1040)
       + v12 * v1054 * v1064
       + v1029 * v978 * v1064
       + v1051 * v1040 * v1026
       + v1067 * v978 * v1026
       + v788 * v1026
       + v1084 * v1040 * v1054
       + v1084 * v1056 * v1071
       + v1040 * v1076 * v1071
       + v1030 * v1023 * v1071
       + v978 * v1044 * v1071
       - v1076 * v1056 * v1054
       - v1044 * v1023 * v1054
       - v1051 * v1036 * v1054
       - v1067 * v1029 * v1054;
  v601 = v1076 * v1056 * v1071
       - v1009 * v1047
       + v984 * v1047
       + v1047 * 1.5 * (v1071 * v1071)
       + v990 * v1047
       + v54 * v1047
       + v963 * v1047
       - v36 * v1047
       - v27 * v1047
       - v28 * v1047
       + v1044 * v1023 * v1071
       - v1084 * v1040 * v1071
       - v1030 * v978 * v1071
       - v1051 * v1036 * v1071
       - v1067 * v1029 * v1071;
  v359 = v760
       + v1005 * v1036
       + v996 * v1036
       - v953 * v1036
       - v1014 * v1036
       - v974 * v1036
       - v904 * v1036
       + v1067 * v1044 * v1056
       + v7 * v12 * v1051
       + v1067 * v1029 * v1051;
  v344 = v764
       - v984 * v1051
       - v36 * v1051
       - v991 * v1051
       - v54 * v1051
       + v1029 * v1023 * v1076
       + v7 * v12 * v1036
       + v1067 * v1029 * v1036;
  v882 = v12 * v8;
  v609 = v1051 * (v7 * v1054)
       + v994 * v1036
       + v12 * v1082 * v1051
       + v1067 * v978 * v1051
       + v788 * v1051
       + v1082 * v1054 * v1084
       + v1030 * v978 * v1084
       + v1082 * v1071 * v1076
       + v1054 * v1047 * v1076
       + v1030 * v1023 * v1076
       + v978 * v1044 * v1076
       - v1047 * v1071 * v1084
       - v1044 * v1023 * v1084
       - v7 * v12 * v1084
       - v1067 * v1029 * v1084;
  v605 = v1036 * (v12 * v1082)
       + v7 * v1054 * v1036
       + v1067 * v978 * v1036
       + v788 * v1036
       + v1082 * v1054 * v1040
       + v1030 * v978 * v1040
       + v1054 * v1071 * v1076
       + v1082 * v1071 * v1056
       + v1054 * v1047 * v1056
       + v1030 * v1023 * v1056
       + v978 * v1044 * v1056
       - v1047 * v1071 * v1040
       - v1044 * v1023 * v1040
       - v7 * v12 * v1040
       - v1067 * v1029 * v1040;
  v607 = v1051 * (v1029 * v1044)
       + v1067 * v1023 * v1051
       + v1084 * v1076 * v1040
       + v1030 * v1044 * v1040
       + v1082 * v1047 * v1040
       + v1082 * v1071 * v1084
       + v1054 * v1047 * v1084
       + v1030 * v1023 * v1084
       + v978 * v1044 * v1084
       + v1047 * v1071 * v1076
       + v1044 * v1023 * v1076
       - v1082 * v1054 * v1076
       - v1030 * v978 * v1076
       - v7 * v12 * v1076
       - v1067 * v1029 * v1076;
  v603 = v1036 * (v1029 * v1044)
       + v1067 * v1023 * v1036
       + v1040 * v1056 * v1084
       + v978 * v1023 * v1084
       + v1054 * v1071 * v1084
       + v1082 * v1071 * v1040
       + v1054 * v1047 * v1040
       + v1030 * v1023 * v1040
       + v978 * v1044 * v1040
       + v1047 * v1071 * v1056
       + v1044 * v1023 * v1056
       - v1082 * v1054 * v1056
       - v1030 * v978 * v1056
       - v7 * v12 * v1056
       - v1067 * v1029 * v1056;
  v864 = v1045 * v1056;
  v859 = v1036 * v1012;
  v803 = v1040 * v1012;
  v732 = v1079 * v1056;
  v841 = v11 * v1071;
  v925 = v12 * v1073;
  v765 = v1062 * v1071;
  v593 = v592 + v1042 * v1073 * v1056 + v967 * v1023 * v1058;
  v737 = v1054 * v1073;
  v577 = v1029 * v1044 * v1073
       - v1076 * v1012 * v1026
       - v1076 * v1056 * v1085
       - v1012 * v1056 * v1064
       - v1044 * v967 * v1026
       - v1044 * v1023 * v1085
       - v967 * v1023 * v1064
       - v1084 * v1079 * v1026
       - v1084 * v1040 * v1085
       - v1079 * v1040 * v1064
       - v1030 * v1032 * v1026
       - v1030 * v978 * v1085
       - v1032 * v978 * v1064;
  v575 = v1085 * v1062 * v1054
       + v1068 * v1029 * v1085
       + v1045 * v1079 * v1054
       + v1045 * v1040 * v1062
       + v1036 * v1079 * v1062
       + v1068 * v978 * v1062
       + v1085 * v1073 * v1071
       + v1045 * v1056 * v1073
       + v1036 * v1012 * v1073
       + v793 * v1073
       + v720 * v1073
       - v1012 * v1056 * v1085
       - v967 * v1023 * v1085
       - v1079 * v1040 * v1085
       - v1032 * v978 * v1085;
  v578 = v1026 * (v1068 * v1029)
       + v1045 * v1036 * v1026
       + v1036 * v1040 * v1062
       + v1029 * v978 * v1062
       + v1036 * v1079 * v1054
       + v1068 * v978 * v1054
       + v1029 * v1032 * v1054
       + v1026 * v1071 * v1073
       + v1045 * v1056 * v1071
       + v1036 * v1012 * v1071
       + v793 * v1071
       + v720 * v1071
       - v967 * v1023 * v1026
       - v1079 * v1040 * v1026
       - v1032 * v978 * v1026;
  v372 = v7 * (v1068 * v978)
       + v1068 * v1030 * v12
       + v788 * v11
       + v1029 * v1032 * v7
       + v8 * v1062 * 3.0 * v1054
       + v1084 * v1079 * v1054
       + v1084 * v1040 * v1062
       + v1079 * v1040 * v1082
       + v1030 * v1032 * v1054
       + v1030 * v978 * v1062
       + v1032 * v978 * v1082;
  v584 = v720 * v1076
       - v1047 * v1073 * v1036
       - v1047 * v1071 * v1045
       - v1073 * v1071 * v1051
       - v1044 * v967 * v1036
       - v1044 * v1023 * v1045
       - v967 * v1023 * v1051
       - v8 * v1062 * v1036
       - v8 * v1054 * v1045
       - v1062 * v1054 * v1051
       - v1030 * v1032 * v1036
       - v1030 * v978 * v1045
       - v1032 * v978 * v1051;
  v583 = v1085 * v1054 * v1079
       + v1068 * v1032 * v1040
       + v19 * v1062 * v1079
       + v1068 * v978 * v1079
       + v1029 * v1032 * v1079
       + v1085 * v1073 * v1056
       + v1045 * v1012 * v1056
       + v1085 * v1071 * v1012
       + v19 * v1073 * v1012
       + v793 * v1012
       + v720 * v1012
       - v1073 * v1071 * v1045
       - v967 * v1023 * v1045
       - v1062 * v1054 * v1045
       - v1032 * v978 * v1045;
  v585 = v1085 * v1054 * v1040
       + v1029 * v978 * v1079
       + v12 * v1062 * v1040
       + v1068 * v978 * v1040
       + v1029 * v1032 * v1040
       + v1026 * v1071 * v1012
       + v1036 * v1056 * v1012
       + v1085 * v1071 * v1056
       + v1026 * v1073 * v1056
       + v793 * v1056
       + v720 * v1056
       - v1073 * v1071 * v1036
       - v967 * v1023 * v1036
       - v1062 * v1054 * v1036
       - v1032 * v978 * v1036;
  v369 = v1045 * v788
       + v1068 * v978 * v1051
       + v1029 * v1032 * v1051
       + v8 * v1062 * v1040
       + v8 * v1054 * v1079
       + v1062 * v1054 * v1084
       + v1084 * v1079 * 3.0 * v1040
       + v1030 * v1032 * v1040
       + v1030 * v978 * v1079
       + v1032 * v978 * v1084;
  v525 = v978 * v967 * v1012
       - v1073 * v1071 * v1079
       - v967 * v1023 * v1079
       - v1085 * v12 * v1079
       - v1068 * v1029 * v1079
       + v1032 * v967 * v1056
       + v1079 * v1012 * v1056
       + v1062 * v1073 * v1056
       + v1085 * v1062 * v1036
       + v1068 * v978 * v1045
       + v1029 * v1032 * v1045
       + v1062 * v1054 * v1079
       + v1032 * v978 * v1079;
  v494 = v1085 * (v15 * v12 * 3.0)
       - v1034 * v1032 * v1026
       + v1049 * v1045 * v1026
       + v826 * v1071
       + v1075 * v1032 * v1054
       + v1049 * v1040 * v1062
       + v1075 * v1029 * v1085
       + v1068 * v1029 * v15;
  v516 = v581 + v1068 * v1029 * v7;
  v574 = v10 * (v978 * v967)
       + v978 * v1044 * v1073
       - v1076 * v1012 * v1054
       - v1076 * v1056 * v1062
       - v1012 * v1056 * v1082
       - v1044 * v967 * v1054
       - v1044 * v1023 * v1062
       - v967 * v1023 * v1082
       - v1051 * v1036 * v1062
       - v1045 * v1036 * v1082
       - v1067 * v1068 * v1054
       - v1067 * v1029 * v1062
       - v1068 * v1029 * v1082;
  v573 = v1085 * (v1045 * v1040)
       + v1068 * v1032 * v12
       + v1036 * v1079 * v1085
       + v1068 * v978 * v1085
       + v1029 * v1032 * v1085
       + v1079 * v1040 * v1062
       + v1032 * v978 * v1062
       + v1079 * v1056 * v1073
       + v1040 * v1012 * v1073
       + v1032 * v1023 * v1073
       + v978 * v967 * v1073
       - v1012 * v1056 * v1062
       - v967 * v1023 * v1062
       - v1045 * v1036 * v1062
       - v1068 * v1029 * v1062;
  v576 = v1026 * (v1036 * v1079)
       + v1045 * v1040 * v1026
       + v1068 * v978 * v1026
       + v1029 * v1032 * v1026
       + v1079 * v1040 * v1054
       + v1032 * v978 * v1054
       + v1054 * v1071 * v1073
       + v1079 * v1056 * v1071
       + v1040 * v1012 * v1071
       + v1032 * v1023 * v1071
       + v978 * v967 * v1071
       - v1012 * v1056 * v1054
       - v967 * v1023 * v1054
       - v1045 * v1036 * v1054
       - v1068 * v1029 * v1054;
  v579 = v967 * v1023 * v1047
       - v1084 * v1079 * v1071
       - v1084 * v1040 * v1073
       - v1079 * v1040 * v1047
       - v1030 * v1032 * v1071
       - v1030 * v978 * v1073
       - v1032 * v978 * v1047
       - v890 * v1071
       - v1051 * v1036 * v1073
       - v1045 * v1036 * v1047
       - v1067 * v1068 * v1071
       - v1067 * v1029 * v1073
       - v1068 * v1029 * v1047;
  v580 = v1026 * v793
       + v1036 * v1012 * v1026
       + v720 * v1026
       + v1040 * v1056 * v1062
       + v978 * v1023 * v1062
       + v1054 * v1071 * v1062
       + v1079 * v1056 * v1054
       + v1032 * v1023 * v1054
       + v978 * v967 * v1054
       + v1012 * v1056 * v1071
       + v967 * v1023 * v1071
       - v1079 * v1040 * v1071
       - v1032 * v978 * v1071
       - v1045 * v1036 * v1071
       - v1068 * v1029 * v1071;
  v297 = v588
       + v1007 * v1036
       + v37 * v1036
       - v917 * v1036
       - v32 * v1036
       - v975 * v1036
       - v961 * v1036
       + v1068 * v967 * v1056
       + v11 * v12 * v1045
       + v1068 * v1029 * v1045;
  v292 = v690
       - v984 * v1045
       - v36 * v1045
       - v991 * v1045
       - v54 * v1045
       + v1029 * v1023 * v1012
       + v11 * v12 * v1036
       + v1068 * v1029 * v1036;
  v582 = v978 * v967 * v1076
       - v1047 * v1073 * v1040
       - v1047 * v1071 * v1079
       - v1073 * v1071 * v1084
       - v1044 * v967 * v1040
       - v1044 * v1023 * v1079
       - v967 * v1023 * v1084
       - v7 * v11 * v1040
       - v7 * v12 * v1079
       - v11 * v12 * v1084
       - v1067 * v1068 * v1040
       - v1067 * v1029 * v1079
       - v1068 * v1029 * v1084;
  v587 = v967 * v1023 * v1076
       - v8 * v1062 * v1056
       - v8 * v1054 * v1012
       - v1062 * v1054 * v1076
       - v1030 * v1032 * v1056
       - v1030 * v978 * v1012
       - v1032 * v978 * v1076
       - v7 * v11 * v1056
       - v7 * v12 * v1012
       - v11 * v12 * v1076
       - v1067 * v1068 * v1056
       - v1067 * v1029 * v1012
       - v1068 * v1029 * v1076;
  v586 = v1045 * v720
       + v793 * v1045
       + v1032 * v967 * v1040
       + v1079 * v1012 * v1040
       + v1062 * v1073 * v1040
       + v1062 * v1071 * v1079
       + v1054 * v1073 * v1079
       + v1032 * v1023 * v1079
       + v978 * v967 * v1079
       + v1073 * v1071 * v1012
       + v967 * v1023 * v1012
       - v1062 * v1054 * v1012
       - v1032 * v978 * v1012
       - v11 * v12 * v1012
       - v1068 * v1029 * v1012;
  v589 = v1036 * v720
       + v793 * v1036
       + v1040 * v1056 * v1079
       + v978 * v1023 * v1079
       + v1054 * v1071 * v1079
       + v1062 * v1071 * v1040
       + v1054 * v1073 * v1040
       + v1032 * v1023 * v1040
       + v978 * v967 * v1040
       + v1073 * v1071 * v1056
       + v967 * v1023 * v1056
       - v1062 * v1054 * v1056
       - v1032 * v978 * v1056
       - v11 * v12 * v1056
       - v1068 * v1029 * v1056;
  v486 = v761 + v1075 * v1067 * *v0;
  v457 = v834
       - v996 * v1038
       - v904 * v1038
       - v1005 * v1038
       - v1014 * v1038
       - v1078 * v1044 * v1064
       + v1075 * v1067 * v1064;
  v569 = v1064 * (v964 * 3.0)
       + v875 * v1042
       + v1036 * v1069 * v8
       + v1051 * v1036 * v1038
       + v1049 * v1051 * v1026
       + v1067 * v1078 * v1071
       - v1030 * v978 * v1038
       - v1076 * v1056 * v1038
       - v1078 * v1044 * v1026
       - v1058 * v1076 * v1026
       + v1049 * v1036 * v1064
       + v1075 * v1067 * v1026;
  v879 = v1051 * v1069;
  v509 = v1038 * (v1049 * v1084)
       + v1051 * v1069 * v1038
       + v1034 * v1030 * v1060
       + v1069 * v1084 * v1060
       + v707 * v1038
       + v1030 * v1078 * v1042
       + v1034 * v1044 * v1042
       + v1034 * v1078 * v1047
       + v1060 * v1042 * v1047
       + v1069 * v1076 * v1042
       + v1084 * v1058 * v1042
       - v1058 * v1076 * v1060
       - v1075 * v1067 * v1060;
  v498 = v1082 * (v1069 * v1084)
       + v1034 * v1030 * v1082
       + v707 * v1064
       + v1075 * v1030 * v1064
       + v1084 * v1076 * v1042
       + v1030 * v1078 * v1047
       + v1034 * v1044 * v1047
       + v1082 * v1047 * v1042
       + v1030 * v1044 * v1042
       + v1069 * v1076 * v1047
       + v1084 * v1058 * v1047
       - v1058 * v1076 * v1082
       - v1075 * v1067 * v1082;
  v570 = v1054 * (v1069 * v1076)
       + v1084 * v1058 * v1054
       - v1051 * v1036 * v1042
       - v1049 * v1036 * v1047
       - v1030 * v978 * v1042
       - v1034 * v978 * v1047
       - v1084 * v1040 * v1042
       - v1049 * v1051 * v1071
       - v1034 * v1030 * v1071
       - v1069 * v1084 * v1071
       - v1067 * v1029 * v1042
       - v1075 * v1029 * v1047
       - v1075 * v1067 * v1071;
  v416 = v555
       - v974 * v1049
       - v904 * v1049
       - v953 * v1049
       - v1014 * v1049
       + v957 * v1051
       + v1000 * v1069
       + v7 * v8 * v1069
       + v1075 * v1067 * v1051;
  v835 = *v0 * v8;
  v506 = v1051 * (v1075 * v1034)
       + v15 * v8 * v1049
       + v15 * v1060 * v1051
       + v1049 * v1069 * v1051
       + v1030 * v1078 * v1058
       + v1034 * v1044 * v1058
       + v1034 * v1078 * v1076
       + v1069 * v1058 * v1076
       + v1060 * v1042 * v1076
       + v8 * v1042 * v1058
       + v1060 * v10 * v1058
       - v1075 * v1067 * v1069;
  v888 = v7 * v1060;
  v504 = v1051 * (*v0 * v1082)
       + v1064 * v1060 * v1051
       + v994 * v1049
       + v1000 * v1049
       + v1064 * v8 * v1049
       + v1034 * v1044 * v1076
       + v1082 * v1047 * v1058
       + v1030 * v1044 * v1058
       + v8 * v1042 * v1076
       + v1060 * v1047 * v1076
       + v1030 * v1078 * v1076
       - v1075 * v1067 * v1084;
  v451 = v818 - v1058 * v1012 * *v0 + v1068 * v1034 * v1060;
  v444 = v1062 * (v1051 * v1069)
       + v1049 * v1079 * v1082
       + v1051 * v1079 * v1060
       + v1075 * v1030 * v1062
       + v707 * v1062
       + v1068 * v1034 * v1082;
  v556 = v779
       - v37 * v1038
       - v961 * v1038
       - v1007 * v1038
       - v32 * v1038
       + v1049 * v1045 * v11
       + v1068 * v967 * v1042
       + v1045 * v1012 * v1042
       + v1045 * v1069 * v1062
       + v1068 * v1034 * v1062;
  v981 = v1049 * v1056;
  v399 = v543
       - v17 * v1062
       - v723 * 0.5 * v1062
       - v958 * v1062
       - v986 * v1062
       + v15 * v1060 * v1085
       + v1075 * v1034 * v1085
       + v1049 * v1069 * v1085
       + v1068 * v1034 * v15;
  v857 = v545
       - v37 * v1060
       - v961 * v1060
       - v995 * v1060
       - v1068 * v1068 * 0.5 * v1060
       + v1032 * v967 * v1042
       + v1085 * v1062 * v1038
       + v1045 * v1079 * v1038
       + v1068 * v1034 * v1085;
  v780 = v11 * v8;
  v819 = v1051 * v1079;
  v541 = v1049 * v1084 * v1032
       + v11 * v8 * v1034
       + v1049 * v1079 * v1030
       + v1051 * v1069 * v1032
       + v1051 * v1079 * v1034
       + v1045 * v1069 * v1030
       + v829 * v1034
       + v1075 * v1030 * v1032
       + v707 * v1032
       + v1068 * v1034 * v1030;
  v544 = v12 * v1082 * v1062
       + v11 * v1082 * v1054
       + v1051 * v1079 * v1054
       + v1051 * v1040 * v1062
       + v829 * v1054
       + v1045 * v1040 * v1082
       + v1036 * v1084 * v1062
       + v1036 * v1079 * v1082
       + v725 * v1054
       + v1067 * v978 * v1062
       + v1068 * v1030 * v1054
       + v1068 * v978 * v1082;
  v542 = v612
       - v1009 * v1038
       - v36 * v1038
       - v990 * v1038
       - v54 * v1038
       + v1029 * v978 * v1060
       + v1075 * v1023 * v1071
       + v1029 * v1078 * v1071
       + v1049 * v1036 * v1026
       + v1075 * v1029 * v1026;
  v785 = v1029 * v1034;
  v546 = v1026 * (v1075 * v978)
       + v1036 * v1069 * v1026
       + v1029 * v1034 * v1026
       + v1069 * v1040 * v1054
       + v1034 * v978 * v1054
       + v1040 * v1058 * v1071
       + v1054 * v1042 * v1071
       + v1069 * v1056 * v1071
       + v978 * v1078 * v1071
       + v1034 * v1023 * v1071
       + v978 * v1023 * v1042
       + v1040 * v1056 * v1042
       - v1058 * v1056 * v1054
       - v1078 * v1023 * v1054
       - v1075 * v1029 * v1054;
  v496 = v1085 * v1054 * v1069
       + v12 * v1060 * v1079
       + v15 * v1054 * v1079
       + v1085 * v1060 * v1040
       + v15 * v1062 * v1040
       + v1029 * v1032 * v1069
       + v1029 * v1034 * v1079
       + v1068 * v978 * v1069;
  v622 = v1049 * (v1029 * v1034)
       + v1075 * v978 * v1049
       + v1060 * v1054 * v1069
       + v1034 * v978 * v1069
       + v1054 * v1042 * v1058
       + v1069 * v1056 * v1058
       + v1060 * v1042 * v1056
       + v978 * v1078 * v1058
       + v1060 * v1071 * v1058
       + v1034 * v1078 * v1056
       + v1034 * v1023 * v1058
       - v1042 * v1071 * v1069
       - v1078 * v1023 * v1069
       - v964 * v1069
       - v1075 * v1029 * v1069;
  v613 = v1049 * (v19 * v1062)
       + v1049 * v1040 * v1045
       + v19 * v1060 * v1045
       + v1085 * v1054 * v1049
       + v1036 * v1079 * v1049
       + v1036 * v1069 * v1045
       + v1075 * v1032 * v1036
       + v1085 * v1060 * v1036
       + v868 * v1036
       + v1029 * v1032 * v1049
       + v1029 * v1034 * v1045
       + v1068 * v978 * v1049;
  v355 = v889 * v1056
       + v958 * v1056
       + v46 * v1056
       + v920 * v1056
       + v723 * 0.5 * v1056
       - v923 * v1056
       - v903 * v1056
       - v992 * v1056
       - v986 * v1056
       - v1075 * v1029 * v1058;
  v55 = v1075 * v1029 * 3.0;
  v56 = v1068 * v1068 * 1.5;
  v702 = v992 * v1075
       + v986 * v1075
       - v920 * v1075
       + v1049 * v1058 * v1078
       + v15 * v1060 * v1034
       - v889 * v1075
       + v958 * v1075
       - v923 * v1075
       + v1075 * 0.5 * v723
       + v1049 * v1069 * v1034
       - v17 * v1075
       + v15 * v1042 * v1078
       + v1075 * 0.5 * (v1034 * v1034);
  v348 = v965 * v1075
       + v931 * v1075
       + v694 * 1.5 * v1075
       + v1075 * 0.5 * (v1030 * v1030)
       + v1075 * 0.5 * (v1044 * v1044);
  v524 = v1036 * v1069 * v978
       + v1049 * v1040 * v978
       - v1042 * v1071 * v1029
       - v1058 * v1056 * v1029
       - v1060 * v1054 * v1029
       - v1069 * v1040 * v1029
       + v963 * v1075
       + v27 * v1075
       + v697 * 1.5 * v1075
       + v1075 * 0.5 * (v978 * v978)
       + v1075 * 0.5 * (v1023 * v1023);
  v490 = v1036 * v1056 * v1078 + v1056 * v1056 * -0.5 * v1075;
  v478 = v1067 * 0.5 * (v978 * v978) + v697 * 1.5 * v1067 + v1067 * 0.5 * (v1023 * v1023);
  v361 = v1051 * v1051 * (v1068 * 0.5)
       + v931 * v1068
       + v694 * 1.5 * v1068
       + v1014 * v1068
       + v904 * v1068
       - v953 * v1068
       - v1005 * v1068
       - v1068 * 0.5 * (v1047 * v1047);
  v488 = v27 * v1068 + v963 * v1068 + v697 * 1.5 * v1068 + v1068 * 0.5 * (v978 * v978) + v1068 * 0.5 * (v1023 * v1023);
  v392 = v1051 * v1051 * (v1029 * 0.5)
       + v931 * v1029
       + v694 * 1.5 * v1029
       + v1014 * v1029
       + v904 * v1029
       - v953 * v1029
       - v1005 * v1029
       - v1029 * 0.5 * (v1047 * v1047);
  v484 = v1045 * v1045 * (v1029 * 0.5)
       + v976 * v1029
       + v56 * v1029
       + v32 * v1029
       + v961 * v1029
       - v917 * v1029
       - v1007 * v1029
       - v1029 * 0.5 * (v1073 * v1073);
  v706 = v1036 * v1056 * v1023
       + v1054 * v1054 * -0.5 * v1029
       + v963 * v1029
       + v19 * v1071 * v1023
       - v1009 * v1029
       + v28 * v1029
       + v1029 * 0.5 * (v978 * v978)
       + v1036 * v1040 * v978
       + v27 * v1029
       + v19 * v1054 * v978
       - v990 * v1029
       - v991 * v1029
       + v1029 * 0.5 * (v1023 * v1023);
  v342 = v1060 * (v1064 * v8)
       + v1000 * v1060
       + v1049 * v1084 * v1082
       + v994 * v1060
       + v1064 * v10 * v1042
       + v707 * v1082
       + v1075 * v1030 * v1082;
  v265 = v12 * v1042 * v1047
       + v1036 * v1084 * v1060
       + v943 * v1047
       + v7 * v1071 * v1042
       + v707 * v1054
       + v1075 * v1030 * v1054;
  v695 = v563
       - v17 * v1082
       - v723 * 0.5 * v1082
       - v958 * v1082
       - v986 * v1082
       + v1069 * v1058 * v10
       + v1075 * v1034 * v1064
       + v15 * v1060 * v1064
       + v1049 * v1069 * v1064
       + v1075 * v1030 * v15;
  v698 = v399 + v1075 * v1032 * *v0;
  v564 = v1085 * (v1038 * v8)
       + v725 * v1038
       + v868 * v1064
       + v1064 * v1060 * v1085
       + v1049 * v1084 * v1085
       + v1049 * v1079 * v1064
       + v1051 * v1069 * v1085
       + v1051 * v1079 * v1038
       + v1045 * v1069 * v1064
       + v829 * v1038
       + v1075 * v1030 * v1085
       + v1075 * v1032 * v1064;
  v693 = v857 + v1075 * v1032 * v11;
  v276 = v590 + v707 * v1026 + v1075 * v1030 * v1026;
  v271 = v512
       + v903 * v1084
       + v17 * v1084
       - v992 * v1084
       - v986 * v1084
       + v1034 * v1030 * v1069
       + v1060 * v8 * v1069
       + v707 * v1049
       + v1075 * v1030 * v1049;
  v262 = v514
       + v903 * v1079
       + v17 * v1079
       - v920 * v1079
       - v723 * 0.5 * v1079
       - v992 * v1079
       - v986 * v1079
       + v1049 * v1069 * v1045
       + v985 * v1045
       + v1075 * v1032 * v1049;
  v700 = v518
       - v931 * v1069
       - v988 * v1069
       + v1084 * v1076 * v1058
       + v1034 * v1030 * v1084
       + v1060 * v8 * v1084
       + v707 * v1051
       + v1075 * v1030 * v1051;
  v833 = v7 * v1062;
  v340 = v520 + v8 * v1054 * v1069 + v1060 * v1054 * v1084 + v707 * v1036 + v1075 * v1030 * v1036;
  v591 = v416 + v707 * v1084;
  v691 = v1051 * (v15 * v1062)
       + v15 * v1082 * v1045
       + v1064 * v1060 * v1045
       + v1064 * v1062 * v1049
       + v1085 * v1060 * v1051
       + v1085 * v1082 * v1049
       + v1049 * v1084 * v1045
       + v1049 * v1079 * v1051
       + v1051 * v1069 * v1045
       + v1075 * v1030 * v1045
       + v1075 * v1032 * v1051
       + v707 * v1045;
  v843 = v1051 * v1058;
  v856 = v1049 * v1076;
  v515 = v918 * v1047
       + v1075 * v1034 * v8
       + v707 * v1060
       + v1075 * v1030 * v1060
       + v1051 * v1069 * v1060
       + v848 * v1047
       + v1049 * v1058 * v1047
       + v1067 * v1078 * v1042
       + v1075 * v1044 * v1042
       + v1051 * v1058 * v1042
       + v1049 * v1076 * v1042
       - v1069 * v1084 * v1038
       - v1078 * v1044 * v1038
       - v1058 * v1076 * v1038
       - v1034 * v1030 * v1038;
  v353 = v457 - v1034 * v1030 * v7;
  v374 = v1047 * (v1049 * v1056)
       + v1036 * v1058 * v1047
       - v1058 * v1056 * v1064
       - v1044 * v1023 * v1038
       + v1075 * v1044 * v1071
       + v1051 * v1058 * v1071
       + v1049 * v1076 * v1071
       - v1034 * v978 * v1064
       - v1084 * v1040 * v1038
       - v1069 * v1040 * v1064
       - v1078 * v1023 * v1064
       - v1034 * v1030 * v12;
  v513 = v1054 * v994
       + v1000 * v1054
       + v1051 * v1040 * v1082
       + v1036 * v1084 * v1082
       + v1067 * v978 * v1082
       + v788 * v1082
       + v1064 * v1047 * v1071
       + v1051 * v1076 * v1071
       + v875 * v1047
       + v1036 * v1076 * v1047
       + v1067 * v1023 * v1047
       + v1029 * v1044 * v1047
       - v1044 * v1023 * v1064
       - v1084 * v1040 * v1064
       - v1030 * v978 * v1064;
  v511 = v1082 * (v1036 * v1040)
       + v12 * v1054 * v1082
       + v1051 * v1040 * v1054
       + v1036 * v1084 * v1054
       + v1067 * v978 * v1054
       + v788 * v1054
       + v1026 * v1071 * v10
       + v875 * v1071
       + v1036 * v1076 * v1071
       + v1067 * v1023 * v1071
       + v1029 * v1044 * v1071
       - v1076 * v1056 * v1026
       - v1044 * v1023 * v1026
       - v1084 * v1040 * v1026
       - v1030 * v978 * v1026;
  v267 = v571 - v27 * v1082 - v28 * v1082 - v990 * v1082 - v41 * v1082 + v1036 * v1084 * v12 + v1030 * v978 * v1054;
  v858 = v7 * v1042;
  v906 = *v0 * v10;
  v521 = v1069 * (v1075 * v1030)
       + v707 * v1069
       + v1064 * v1060 * v1069
       + v15 * v8 * v1069
       + v848 * v1076
       + v1049 * v1058 * v1076
       + v15 * v1042 * v1076
       + v1075 * v1044 * v1058
       + v1064 * v1042 * v1058
       + v15 * v1047 * v1058
       + v1067 * v1078 * v1058
       - v1060 * v8 * v1049
       - v1078 * v1044 * v1049
       - v1042 * v1047 * v1049
       - v1034 * v1030 * v1049;
  v365 = v1064 * v1060 * v1084
       + v1075 * v1030 * v1084
       + v1038 * v8 * v1084
       + v994 * v1069
       + v1051 * v1076 * v1058
       + v1064 * v1047 * v1058
       + v1075 * v1044 * v1076
       + v1064 * v1042 * v1076
       + v1038 * v1047 * v1076
       + v1067 * v1044 * v1058
       + v1067 * v1078 * v1076
       - v1078 * v1044 * v1051
       - v1042 * v1047 * v1051
       - v1034 * v1030 * v1051;
  v885 = v12 * v10;
  v522 = v1064 * v1054 * v1084
       + v994 * v1040
       + v1026 * v1082 * v1084
       + v1067 * v978 * v1084
       + v788 * v1084
       + v1064 * v1047 * v1056
       + v1051 * v1076 * v1056
       + v1064 * v1071 * v1076
       + v1026 * v1047 * v1076
       + v1067 * v1023 * v1076
       + v1029 * v1044 * v1076
       - v1047 * v1071 * v1051
       - v1044 * v1023 * v1051
       - v1082 * v1054 * v1051
       - v1030 * v978 * v1051;
  v519 = v1064 * v1054 * v1040
       + v1029 * v978 * v1084
       + v1026 * v1082 * v1040
       + v1067 * v978 * v1040
       + v788 * v1040
       + v1026 * v1071 * v1076
       + v1036 * v1056 * v1076
       + v1064 * v1071 * v1056
       + v1026 * v1047 * v1056
       + v1067 * v1023 * v1056
       + v1029 * v1044 * v1056
       - v1047 * v1071 * v1036
       - v1044 * v1023 * v1036
       - v1082 * v1054 * v1036
       - v1030 * v978 * v1036;
  v572 = v1069 * (v1030 * v1023)
       + v1069 * v1056 * v1084
       + v1054 * v1042 * v1084
       + v1040 * v1058 * v1084
       - v1075 * v1067 * v1056
       - v957 * v1056
       - v1034 * v1030 * v1056
       - v1060 * v8 * v1056
       - v1067 * v1029 * v1058
       - v1075 * v1029 * v1076
       - v7 * v12 * v1058
       - v964 * v1076
       - v1030 * v978 * v1058;
  v396 = v1051 * v918
       + v1049 * v1058 * v1051
       + v1078 * v1044 * v1058
       + v1042 * v1047 * v1058
       + v8 * v1042 * v1069
       + v1060 * v1047 * v1069
       + v1030 * v1078 * v1069
       + v1034 * v1044 * v1069
       + v1034 * v1078 * v1084
       + v1069 * v1058 * v1084
       + v1060 * v1042 * v1084
       - v1075 * v1067 * v1058
       - v957 * v1058
       - v1034 * v1030 * v1058;
  v417 = v1049 * (v7 * v1047)
       + v1051 * v1076 * v1049
       + v1078 * v1044 * v1076
       + v1042 * v1047 * v1076
       + v8 * v1042 * v1084
       + v1060 * v1047 * v1084
       + v1030 * v1078 * v1084
       + v1034 * v1044 * v1084
       + v8 * v1047 * v1069
       + v1030 * v1044 * v1069
       + v1084 * v1076 * v1069
       - v1075 * v1067 * v1076
       - v957 * v1076
       - v1034 * v1030 * v1076;
  v322 = v1067 * (v1075 * v1032)
       + v1075 * v1030 * v1068
       + v707 * v1068
       + v1060 * v8 * v1032
       + v1060 * v1062 * v1030
       + v8 * v1062 * v1034
       + v1069 * v1084 * v1032
       + v1069 * v1079 * v1030
       + v1084 * v1079 * v1034
       + v1034 * v1030 * 3.0 * v1032;
  v877 = v7 * v1073;
  v335 = v645 - v961 * v12 + v1068 * v1032 * v1054 + v1029 * v1032 * v1062;
  v410 = v1051 * v1079 * v1040
       + v12 * v1062 * v1084
       + v829 * v1040
       + v1036 * v1084 * v1079
       + v725 * v1040
       + v1067 * v978 * v1079
       + v1068 * v1030 * v1040
       + v1068 * v978 * v1084
       + v788 * v1079
       + v1029 * v1032 * v1084;
  v646 = v984 * v1079
       + v27 * v1079
       + v1040 * v1040 * 1.5 * v1079
       + v36 * v1079
       + v1079 * 0.5 * (v1056 * v1056)
       - v963 * v1079
       - v28 * v1079
       - v991 * v1079
       - v41 * v1079
       + v978 * v1023 * v1012
       + v1040 * v1056 * v1012
       + v12 * v1054 * v1045
       + v1068 * v978 * v1036
       + v1029 * v1032 * v1036;
  v492 = v651
       + v848 * v1071
       + v1038 * v1071 * v1042
       + v1049 * v1036 * v1038
       + v1036 * v1069 * v1060
       - v1034 * v978 * v1038;
  v493 = v1060 * (v12 * v1054)
       + v1036 * v1040 * v1060
       + v1049 * v1040 * v1054
       + v1036 * v1069 * v1054
       + v1075 * v978 * v1054
       + v1029 * v1034 * v1054
       + v1026 * v1071 * v1042
       + v1036 * v1056 * v1042
       + v1029 * v1023 * v1042
       + v1049 * v1056 * v1071
       + v1036 * v1058 * v1071
       - v1058 * v1056 * v1026
       - v1078 * v1023 * v1026
       - v1069 * v1040 * v1026
       - v1034 * v978 * v1026;
  v500 = v1040 * (v1075 * v1034)
       + v1049 * v1069 * v1040
       + v1075 * v978 * v1069
       + v1029 * v1034 * v1069
       + v15 * v1071 * v1058
       + v15 * v1042 * v1056
       + v12 * v1042 * v1058
       + v1049 * v1058 * v1056
       + v848 * v1056
       + v1075 * v1023 * v1058
       + v1029 * v1078 * v1058
       - v1042 * v1071 * v1049
       - v1078 * v1023 * v1049
       - v1060 * v1054 * v1049
       - v1034 * v978 * v1049;
  v367 = v1049 * (v1075 * v1023)
       + v848 * v1036
       + v1029 * v1078 * v1049
       + v1040 * v1058 * v1069
       + v1054 * v1042 * v1069
       + v1060 * v1042 * v1040
       + v978 * v1078 * v1069
       + v1060 * v1071 * v1069
       + v1034 * v1078 * v1040
       + v1034 * v1023 * v1069
       + v1042 * v1071 * v1058
       + v1078 * v1023 * v1058
       - v1060 * v1054 * v1058
       - v1034 * v978 * v1058;
  v508 = v482
       + v1034 * v1023 * v1040
       + v978 * v1023 * v1069
       + v1054 * v1071 * v1069
       + v1042 * v1071 * v1056
       + v1078 * v1023 * v1056
       + v12 * v1042 * v1036
       + v1075 * v1023 * v1036
       + v1029 * v1078 * v1036
       + v1054 * v1042 * v1040
       + v1069 * v1056 * v1040
       + v978 * v1078 * v1040
       - v1060 * v1054 * v1056
       - v1034 * v978 * v1056;
  v57 = v1034 * v978 * 3.0;
  v390 = v1084 * v1056 * v1078
       + v978 * v1078 * v1044
       + v8 * v1071 * v1078
       + v1069 * v1056 * v1044
       + v1030 * v1023 * v1078
       + v1054 * v1042 * v1044
       + v1040 * v1058 * v1044
       + v1069 * v1084 * v978
       + v1060 * v8 * v978
       + v57 * v1030;
  v652 = v1075 * (v1045 * v1040)
       + v1029 * v1032 * v1075
       + v1049 * v1040 * v1068
       + v19 * v1062 * v1075
       + v19 * v1060 * v1068
       + v1085 * v1054 * v1075
       + v15 * v1054 * v1068
       + v1036 * v1069 * v1068
       + v1036 * v1079 * v1075
       + v1085 * v1060 * v1029
       + v15 * v1062 * v1029
       + v57 * v1032;
  v483 = v1082 * (v1049 * v1040)
       + v1051 * v1040 * v1060
       + v12 * v1060 * v1082
       + v1064 * v1054 * v1060
       + v15 * v1054 * v1082
       + v1067 * v1029 * v15
       + v1075 * v1029 * v1064
       + v1049 * v1084 * v1054
       + v788 * v1060
       + v1029 * v1034 * v1082
       + v1067 * v978 * v1060
       + v1075 * v978 * v1082;
  v595 = v594
       - v17 * v1054
       - v723 * 0.5 * v1054
       - v958 * v1054
       - v986 * v1054
       + v985 * v1026
       + v1049 * v1069 * v1026
       + v1049 * v1040 * v1038
       + v1036 * v1069 * v1038
       + v1075 * v978 * v1038;
  v320 = v830 + v11 * v12 * v1049 + v964 * v1045 + v1075 * v1068 * v1036 + v1075 * v978 * v1079;
  v307 = v1071 * v1071 * -0.5 * v1049
       - v41 * v1049
       + v964 * v1036
       + v1075 * v1029 * v1036
       + v1029 * v978 * v1069
       + v1036 * v1040 * v1069
       + v19 * v1054 * v1069
       + v1011 * v1040
       + v19 * v1060 * v1040
       + v1075 * v978 * v1040;
  v386 = v1060 * v10 * v1023
       + v8 * v1042 * v1023
       + v1034 * v1023 * v1044
       + v1040 * v1076 * v1078
       + v788 * v1075
       + v1029 * v1034 * v1067
       + v1075 * v978 * v1067;
  v406 = v1062 * v1042 * v1023
       + v1069 * v1012 * v1023
       - v15 * v1085 * v978
       - v1045 * v1036 * v1034
       - v1049 * v1036 * v1032
       - v1085 * v19 * v1034
       - v15 * v19 * v1032
       - v1012 * v1056 * v1034
       + v1075 * v978 * v1068;
  v58 = v1030 * v1030 * 1.5;
  v699 = v988 * v1030
       + v1014 * v1030
       + v7 * v8 * v1067
       + v1000 * v1067
       - v931 * v1030
       - v965 * v1030
       + v1084 * v1076 * v1044
       + v1005 * v1030
       + v953 * v1030
       + v904 * v1030
       + v8 * v1047 * v1044
       - v996 * v1030
       - v1030 * 0.5 * (v1047 * v1047);
  v378 = v953 * v1032
       + v988 * v1032
       + v1005 * v1032
       + v58 * v1032
       + v904 * v1032
       - v931 * v1032
       - v965 * v1032
       - v1032 * 0.5 * (v1047 * v1047);
  v400 = v953 * v978
       + v988 * v978
       + v1005 * v978
       + v58 * v978
       + v904 * v978
       - v931 * v978
       - v965 * v978
       - v978 * 0.5 * (v1047 * v1047);
  v284 = v1082 * (v1045 * v1069)
       + v1068 * v1030 * v1060
       + v1049 * v1051 * v1085
       + v1038 * v1082 * v1062
       - v1076 * v1012 * v1038
       + v1049 * v1084 * v1062
       + v1075 * v1032 * v1082
       - v1044 * v967 * v1038
       + v1075 * v1067 * v1085
       + v1051 * v1058 * v1073
       - v1030 * v1032 * v1038;
  v752 = v461 + v1067 * v1068 * *v0;
  v886 = v1051 * v1012;
  v414 = v655 - v904 * v11 + v1067 * v1044 * v1073 + v890 * v1064 + v1064 * v8 * v1062 + v1051 * v1012 * v10 + v725 * v8;
  v412 = v1062 * v1000
       + v1067 * v1068 * v1064
       + v994 * v1062
       + v1051 * v1079 * v1082
       + v829 * v1082
       + v1068 * v1030 * v1082
       + v1064 * v1047 * v1073
       + v1051 * v1076 * v1073
       + v876 * v1047
       + v1067 * v967 * v1047
       + v1068 * v1044 * v1047
       - v1076 * v1012 * v1064
       - v1044 * v967 * v1064
       - v1084 * v1079 * v1064
       - v1030 * v1032 * v1064;
  v287 = v663 - v961 * v7 + v876 * v1073 + v1068 * v1032 * v8 + v1051 * v1012 * v1073 + v725 * v1062;
  v458 = v1047 * (v1045 * v1012)
       - v1076 * v1012 * v1085
       + v890 * v1085
       + v1067 * v1068 * v1085
       + v1085 * v1062 * v1082
       + v1045 * v1079 * v1082
       + v1051 * v1079 * v1062
       + v829 * v1062
       + v1068 * v1030 * v1062
       + v1085 * v1073 * v1047
       + v1067 * v967 * v1073
       + v1068 * v1044 * v1073
       - v1044 * v967 * v1085
       - v1084 * v1079 * v1085
       - v1030 * v1032 * v1085;
  v256 = v465 + v1030 * v1032 * v1060;
  v462 = v1064 * v829
       + v1051 * v1079 * v1064
       + v725 * v1064
       + v1068 * v1030 * v1064
       + v1084 * v1079 * v1082
       + v1030 * v1032 * v1082
       + v1084 * v1076 * v1073
       + v1084 * v1012 * v1047
       + v1079 * v1076 * v1047
       + v1030 * v967 * v1047
       + v1032 * v1044 * v1047
       - v1076 * v1012 * v1082
       - v1044 * v967 * v1082
       - v890 * v1082
       - v1067 * v1068 * v1082;
  v459 = v1085 * (v1051 * v1079)
       + v1068 * v1032 * v7
       + v829 * v1085
       + v725 * v1085
       + v1068 * v1030 * v1085
       + v1084 * v1079 * v1062
       + v1030 * v1032 * v1062
       + v1084 * v1012 * v1073
       + v1079 * v1076 * v1073
       + v1030 * v967 * v1073
       + v1032 * v1044 * v1073
       - v1076 * v1012 * v1062
       - v1044 * v967 * v1062
       - v890 * v1062
       - v1067 * v1068 * v1062;
  v460 = v1026 * (v1064 * v1062)
       - v890 * v1054
       + v1064 * v1054 * v1085
       + v1085 * v8 * v1026
       + v1051 * v1079 * v1026
       + v1051 * v1040 * v1085
       + v829 * v1026
       + v1045 * v1040 * v1064
       + v1036 * v1084 * v1085
       + v1036 * v1079 * v1064
       + v725 * v1026
       + v1067 * v978 * v1085;
  v269 = v463 - v1067 * v1068 * v1042;
  v258 = v455 + v1067 * v1068 * v1049;
  v250 = v474
       + v1005 * v1045
       + v996 * v1045
       - v953 * v1045
       - v1014 * v1045
       - v974 * v1045
       - v904 * v1045
       + v1067 * v1044 * v1012
       + v7 * v11 * v1051
       + v1067 * v1068 * v1051;
  v247 = v480
       + v1007 * v1051
       + v37 * v1051
       - v917 * v1051
       - v32 * v1051
       - v975 * v1051
       - v961 * v1051
       + v1068 * v967 * v1076
       + v7 * v11 * v1045
       + v1067 * v1068 * v1045;
  v350 = v1084 * (v1075 * v978)
       + v1075 * v1067 * v1036
       + v1036 * v1069 * v1084
       + v707 * v1040
       + v1075 * v1030 * v1040
       + v7 * v1060 * v1040
       + v835 * v1040
       + v788 * v1069
       + v1029 * v1034 * v1084
       + v1067 * v978 * v1069;
  v254 = v472 + v1030 * v1032 * v1069;
  v475 = v1044 * v967 * v1058
       - v1060 * v8 * v1012
       - v1060 * v1062 * v1076
       - v8 * v1062 * v1058
       - v1034 * v1030 * v1012
       - v1034 * v1032 * v1076
       - v1030 * v1032 * v1058
       - v957 * v1012
       - v952 * v1076
       - v7 * v11 * v1058
       - v52 * v1012
       - v1075 * v1068 * v1076
       - v1067 * v1068 * v1058;
  v880 = v11 * v10;
  v664 = v1029 * (v1067 * v1068 * 3.0)
       + v1045 * v1036 * v1067
       + v1064 * v1062 * v978
       + v1064 * v1054 * v1032
       + v1085 * v1082 * v978
       + v1085 * v1054 * v1030
       + v19 * v1082 * v1032
       + v19 * v1062 * v1030
       - v1062 * v1054 * v1067
       - v1084 * v1079 * v1029
       - v1084 * v1040 * v1068
       - v1079 * v1040 * v1067;
  v734 = -(v1067 * v1068 * v1084)
       - v7 * v11 * v1084
       + v1084 * v1076 * v1012
       + v1030 * v1044 * v1012
       + v1082 * v10 * v1012
       + v1064 * v8 * v1045
       + v1000 * v1045
       + v994 * v1045
       + v1064 * v1062 * v1051
       + v11 * v1082 * v1051
       + v725 * v1051
       + v1068 * v1030 * v1051
       + v8 * v1062 * v1084
       + v1030 * v1032 * v1084;
  v466 = -(v7 * v11 * v1079)
       - v1044 * v967 * v1079
       - v1067 * v1068 * v1079
       + v1032 * v967 * v1076
       + v1079 * v1012 * v1076
       + v1062 * v1073 * v1076
       + v1085 * v1062 * v1051
       + v1045 * v1079 * v1051
       + v1068 * v1032 * v1051
       + v7 * v1062 * v1045
       + v1085 * v8 * v1045
       + v725 * v1045
       + v1068 * v1030 * v1045
       + v8 * v1062 * v1079
       + v1030 * v1032 * v1079;
  v656 = v392
       - v996 * v1029
       + v1036 * v1084 * v1030
       + v1064 * v1047 * v1023
       + v1051 * v1076 * v1023
       + v1064 * v1071 * v1044
       + v12 * v1047 * v1044;
  v481 = v1064 * v1073 * v1023
       + v788 * v1032
       + v1064 * v1071 * v967
       + v1085 * v1047 * v1023
       + v1085 * v1071 * v1044
       + v1026 * v1047 * v967
       + v1026 * v1073 * v1044
       + v1051 * v1012 * v1023
       + v1051 * v1079 * v978
       + v1051 * v1040 * v1032
       + v829 * v978
       + v1045 * v1040 * v1030;
  v473 = -(v1060 * v1062 * v1029)
       - v1069 * v1079 * v1029
       - v1079 * v1040 * v1075
       - v1069 * v1040 * v1068
       - v1062 * v1054 * v1075
       - v1060 * v1054 * v1068
       - v1012 * v1056 * v1075
       - v1073 * v1071 * v1075
       - v1058 * v1056 * v1068
       - v1042 * v1071 * v1068
       + v1045 * v1058 * v1023
       + v1049 * v1012 * v1023
       - v1058 * v1012 * v1029;
  v469 = v1085 * v1060 * v978
       + v1049 * v1079 * v978
       + v1036 * v1012 * v1078
       + v1036 * v1058 * v967
       + v1045 * v1056 * v1078
       + v1049 * v1056 * v967
       + v1085 * v1042 * v1023
       + v842 * v1023
       + v1029 * v1078 * v967
       + v793 * v1078
       + v1075 * v1023 * v967
       - v1042 * v1073 * v1029;
  v464 = v1034 * (v1068 * v978)
       + v1049 * v1040 * v1032
       + v1045 * v1040 * v1034
       + v1029 * v1034 * v1032
       + v1075 * v978 * v1032
       + v1036 * v1069 * v1032
       + v1036 * v1079 * v1034
       + v55 * v1068
       + v1045 * v1036 * v1075
       + v1049 * v1036 * v1068
       + v11 * v12 * v1075
       + v1049 * v1045 * v1029;
  v313 = v1049 * v1084 * v1079
       + v11 * v8 * v1069
       + v1051 * v1069 * v1079
       + v1045 * v1069 * v1084
       + v1075 * v1030 * v1079
       + v1075 * v1032 * v1084
       + v707 * v1079
       + v725 * v1069
       + v1068 * v1034 * v1084
       + v1068 * v1030 * v1069;
  v310 = v1076 * (v1068 * v1044)
       + v1067 * v967 * v1076
       - v10 * v1073 * v1051
       - v1044 * v967 * v1051
       - v8 * v1062 * v1051
       - v1030 * v1032 * v1051
       + v994 * v1079
       + v7 * v1062 * v1084
       + v11 * v8 * v1084
       + v725 * v1084
       + v1068 * v1030 * v1084;
  v316 = v1012 * (v1068 * v1044)
       + v1067 * v967 * v1012
       - v10 * v1073 * v1045
       - v1044 * v967 * v1045
       - v8 * v1062 * v1045
       - v1030 * v1032 * v1045
       + v1068 * v1032 * v1084
       + v7 * v1062 * v1079
       + v11 * v8 * v1079
       + v725 * v1079
       + v1068 * v1030 * v1079;
  v450 = v1045 * (v1064 * v1054)
       + v1064 * v1062 * v1036
       + v1085 * v1082 * v1036
       + v1085 * v1054 * v1051
       + v19 * v1082 * v1045
       + v19 * v1062 * v1051
       + v1051 * v1079 * v1036
       + v1051 * v1040 * v1045
       + v829 * v1036
       + v725 * v1036
       + v1067 * v978 * v1045
       + v1068 * v1030 * v1036;
  v393 = v1036 * v1079 * v1030 + v1036 * v1084 * v1032 + v725 * v978 + v1068 * v1030 * v978;
  v809 = v1068 * (v1067 * v978)
       + v725 * v1029
       + v1068 * v1030 * v1029
       + v8 * v1062 * v978
       + v8 * v1054 * v1032
       + v1062 * v1054 * v1030
       + v1084 * v1079 * v978
       + v1084 * v1040 * v1032
       + v1079 * v1040 * v1030
       + v1030 * v1032 * 3.0 * v978;
  v726 = v1049 * v1040 * v1030
       + v1051 * v1040 * v1034
       + v19 * v8 * v1034
       + v19 * v1060 * v1030
       + v7 * v1054 * v1034
       + v15 * v1054 * v1030
       + v7 * v12 * v1075
       + v15 * v19 * v1067
       + v1049 * v1051 * v1029
       + v957 * v1029
       + v55 * v1067
       + v1051 * v1036 * v1075
       + v1049 * v1036 * v1067;
  v456 = v1058 * v1058 * -0.5 * v1029
       - v923 * v1029
       - v889 * v1029
       + v1075 * v1075 * 1.5 * v1029
       + v992 * v1029
       + v958 * v1029
       + v903 * v1029
       + v1029 * 0.5 * v723
       - v920 * v1029
       + v15 * v19 * v1075
       + v1049 * v1036 * v1075
       + v15 * v1060 * v978
       + v15 * v1054 * v1034
       + v19 * v1060 * v1034;
  v454 = v1038 * v1071 * v1044
       + v12 * v1042 * v1044
       + v1064 * v1071 * v1078
       + v1051 * v1069 * v978
       + v1049 * v1084 * v978
       + v1064 * v1060 * v978
       + v1038 * v8 * v978
       + v1029 * v1034 * v1030
       + v1067 * v978 * v1034
       + v1075 * v978 * v1030
       + v1036 * v1084 * v1034
       + v1036 * v1069 * v1030;
  v453 = -(v1042 * v1047 * v1029)
       - v1058 * v1076 * v1029
       - v1069 * v1084 * v1029
       - v1060 * v8 * v1029
       - v1084 * v1040 * v1075
       - v1069 * v1040 * v1067
       - v8 * v1054 * v1075
       - v1060 * v1054 * v1067
       - v1076 * v1056 * v1075
       - v1047 * v1071 * v1075
       - v1058 * v1056 * v1067
       - v1042 * v1071 * v1067;
  v59 = v1068 * v1068 * 0.5;
  v449 = v361 - v996 * v1068 + v1067 * v1044 * v967 + v7 * v11 * v1067 + v890 * v1067 + v7 * v8 * v1032 + v1000 * v1032;
  v448 = v1045 * v1045 * (v1067 * 0.5)
       + v976 * v1067
       + v56 * v1067
       + v32 * v1067
       + v961 * v1067
       - v917 * v1067
       - v1007 * v1067
       - v1067 * 0.5 * (v1073 * v1073)
       - v37 * v1067
       + v1068 * v967 * v1044
       + v1045 * v1012 * v1044
       + v7 * v11 * v1068
       + v890 * v1068
       + v11 * v1062 * v1030;
  v325 = v917 * v1030
       + v59 * v1030
       + v1007 * v1030
       + v1032 * v1032 * 1.5 * v1030
       + v961 * v1030
       - v976 * v1030
       - v995 * v1030
       - v1030 * 0.5 * (v1073 * v1073);
  v709 = v1032 * v961
       + v917 * v1032
       + v1007 * v1032
       + v59 * v1032
       - v995 * v1032
       - v37 * v1032
       + v1062 * v1073 * v967
       + v11 * v1062 * v1068
       + v1079 * v1012 * v967
       - v976 * v1032
       + v32 * v1032
       + v1045 * v1079 * v1068
       - v1032 * 0.5 * (v1073 * v1073);
  v362 = v917 * v978
       + v59 * v978
       + v1007 * v978
       + v1032 * v1032 * 1.5 * v978
       + v961 * v978
       - v976 * v978
       - v995 * v978
       - v978 * 0.5 * (v1073 * v1073);
  v718 = v995 * v1075
       + v976 * v1075
       + v56 * v1075
       + v1075 * 0.5 * (v1032 * v1032)
       + v1075 * 0.5 * (v967 * v967)
       - v975 * v1075
       - v37 * v1075
       - v917 * v1075
       - v1007 * v1075
       + v1049 * v1045 * v1068
       + v952 * v1068
       + v1085 * v1062 * v1034
       + v1085 * v1060 * v1032
       + v868 * v1032;
  v443 = v826 * v1044
       - v1060 * v8 * v1068
       - v1060 * v1062 * v1067
       - v8 * v1062 * v1075
       - v1069 * v1084 * v1068
       - v1069 * v1079 * v1067
       - v1084 * v1079 * v1075
       - v1042 * v1047 * v1068
       - v1042 * v1073 * v1067
       - v1047 * v1073 * v1075
       - v1058 * v1076 * v1068
       - v1058 * v1012 * v1067
       - v1076 * v1012 * v1075;
  v442 = v1064 * v1073 * v1078
       + v1064 * v1042 * v967
       + v1085 * v1042 * v1044
       + v1085 * v10 * v1078
       + v1049 * v1076 * v967
       + v1049 * v1012 * v1044
       + v1051 * v1058 * v967
       + v1051 * v1012 * v1078
       + v1045 * v1058 * v1044
       + v876 * v1078
       + v1075 * v1044 * v967
       + v1067 * v1078 * v967;
  v328 = v1034 * v903
       + v1060 * v1042 * v1078
       + v985 * v1075
       + v1069 * v1058 * v1078
       + v1049 * v1069 * v1075
       + v923 * v1034
       + v889 * v1034
       + v1034 * 0.5 * v723;
  v331 = v917 * v1034 + v59 * v1034 + v1007 * v1034 + v1032 * v1032 * 1.5 * v1034 + v1034 * 0.5 * (v967 * v967);
  v242 = v670 + v1049 * v1058 * v1042 + v1049 * v1069 * v1060 + v1075 * v1034 * v1060;
  v273 = *v0 * (v1045 * v1036)
       + v1011 * v1062
       + v1049 * v1036 * v11
       + v1075 * v1068 * v12
       + v1029 * v1032 * v1060
       + v1029 * v1034 * v1062
       + v1068 * v978 * v1060
       + v1075 * v978 * v1062
       + v1036 * v1079 * v1060
       + v1036 * v1069 * v1062;
  v236 = v640 - v958 * v1060 - v986 * v1060 + v992 * v1060 + v923 * v1060 + v1034 * v1078 * v1042 + v1075 * v1034 * *v0;
  v415 = v1060 * (v1069 * v1040)
       + v1029 * v1034 * *v0
       + v1034 * v978 * v1060
       + v1040 * v1058 * v1042
       + v1069 * v1056 * v1042
       + v1060 * v1042 * v1071
       + v1069 * v1058 * v1071
       + v978 * v1078 * v1042
       + v1034 * v1078 * v1071
       + v1034 * v1023 * v1042
       - v1058 * v1056 * v1060
       - v1078 * v1023 * v1060
       - v1049 * v1036 * v1060
       - v1075 * v1029 * v1060
       + v1075 * v1034 * v12;
  v831 = v1064 * (v1029 * v1034)
       + v788 * v1038
       + v1067 * v978 * v1038
       + v1075 * v978 * v1064
       + v1036 * v1084 * v1038
       + v1036 * v1069 * v1064;
  v419 = v1049 * v1049 * (v1051 * 1.5)
       + v992 * v1051
       + v986 * v1051
       + v889 * v1051
       + v1051 * 0.5 * (v1058 * v1058)
       - v920 * v1051
       - v723 * 0.5 * v1051
       - v923 * v1051
       - v903 * v1051
       + v957 * v1049
       + v1049 * v1069 * v1084
       + v985 * v1084
       + v1075 * v1067 * v1049
       + v1075 * v1034 * v1084;
  v239 = v320 + v1036 * v1069 * v1079;
  v420 = v433
       + v923 * v1040
       + v903 * v1040
       + v17 * v1040
       - v920 * v1040
       - v723 * 0.5 * v1040
       - v992 * v1040
       - v986 * v1040
       + v985 * v1036
       + v1011 * v1049
       + v12 * v1060 * v1049
       + v1049 * v1069 * v1036
       + v1075 * v1034 * v1036;
  v252 = v1049 * v788
       + v835 * v1036
       + v1029 * v1034 * v1051
       + v1067 * v978 * v1049
       + v1075 * v978 * v1051
       + v1011 * v1051
       + v1036 * v1084 * v1049
       + v1036 * v1069 * v1051;
  v671 = v430
       - v917 * v1056
       - v32 * v1056
       - v976 * v1056
       - v59 * v1056
       + v1085 * v1073 * v1036
       + v1045 * v1012 * v1036
       + v1068 * v967 * v1036
       + v1085 * v1071 * v1045
       + v12 * v1073 * v1045;
  v641 = -(v1075 * v1029 * v1056)
       - v15 * v19 * v1056
       + v19 * v1071 * v1049
       + v1036 * v1056 * v1049
       + v1029 * v1023 * v1049
       + v15 * v1071 * v1036
       + v27 * v1058
       + v1009 * v1058
       + v991 * v1058
       + v1056 * v1056 * 1.5 * v1058
       + v41 * v1058
       - v984 * v1058
       - v36 * v1058
       - v963 * v1058;
  v523 = v421
       - v963 * v1076
       - v984 * v1076
       + v1009 * v1076
       + v1026 * v1071 * v1051
       + v1036 * v1056 * v1051
       + v1029 * v1023 * v1051
       + v7 * v1071 * v1036
       + v1026 * v10 * v1036;
  v434 = v1012 * v41
       + v991 * v1012
       - v984 * v1012
       - v36 * v1012
       - v963 * v1012
       - v28 * v1012
       + v27 * v1012
       + v1009 * v1012
       + v1012 * 1.5 * (v1056 * v1056)
       + v1026 * v1071 * v1045
       + v1036 * v1056 * v1045
       + v1029 * v1023 * v1045
       + v11 * v1071 * v1036
       + v1026 * v1073 * v1036;
  v432 = v952 * v1067
       + v957 * v1068
       + v7 * v11 * v1075
       + v1049 * v1051 * v1068
       + v1049 * v1045 * v1067
       + v890 * v1075
       + v1075 * v1067 * 3.0 * v1068
       + v835 * v1032
       + v868 * v1030
       + v1064 * v1060 * v1032
       + v1064 * v1062 * v1034
       + v11 * v1060 * v1030;
  v431 = v958 * v1067
       + v992 * v1067
       + v1075 * v1075 * 1.5 * v1067
       + v903 * v1067
       + v1067 * 0.5 * v723
       - v920 * v1067
       - v17 * v1067
       - v923 * v1067
       - v889 * v1067
       - v1058 * v1076 * v1075
       - v1042 * v10 * v1075
       - v1069 * v1084 * v1075
       - v1060 * v8 * v1075
       + v1051 * v1058 * v1078;
  v424 = v958 * v1068
       + v992 * v1068
       + v1075 * v1075 * 1.5 * v1068
       + v903 * v1068
       + v1068 * 0.5 * v723
       - v920 * v1068
       - v17 * v1068
       - v923 * v1068
       - v889 * v1068
       + v1049 * v1045 * v1075
       + v952 * v1075
       + v985 * v1032
       + v11 * v1060 * v1034
       + v868 * v1034;
  v422 = v348
       - v974 * v1075
       - v996 * v1075
       - v953 * v1075
       - v1005 * v1075
       - v1058 * v1076 * v1067
       - v1042 * v10 * v1067
       - v1069 * v1084 * v1067
       - v1060 * v8 * v1067
       + v1051 * v1058 * v1044;
  v289 = v1064 * v1042 * v1078
       + v1049 * v1076 * v1078
       + v1038 * v10 * v1078
       + v848 * v1044
       + v1049 * v1058 * v1044
       + v918 * v1044
       + v1051 * v1069 * v1034
       + v1049 * v1084 * v1034
       + v1064 * v1060 * v1034
       + v1038 * v8 * v1034
       + v1075 * v1034 * v1030;
  v299 = v1049 * v1069 * v1032 + v1075 * v1034 * v1032;
  v334 = v1049 * v1040 * v1034 + v1049 * v1069 * v978 + v1036 * v1069 * v1034 + v1075 * v1034 * v978;
  v305 = v1069 * v1084 * v1034
       + v1060 * v1042 * v1044
       + v1060 * v8 * v1034
       + v1051 * v1069 * v1075
       + v1049 * v1084 * v1075
       + v1084 * v1058 * v1078
       + v1069 * v1076 * v1078
       + v8 * v1042 * v1078
       + v1060 * v10 * v1078
       + v1034 * v1078 * v1044
       + v1067 * (v1075 * v1034);
  v301 = v1075 * (v1045 * v1069)
       + v1060 * v1062 * v1034
       + v1069 * v1079 * v1034
       + v1079 * v1058 * v1078
       + v1034 * v1078 * v967
       + v1069 * v1058 * v967
       + v1060 * v1042 * v967
       + v1060 * v1073 * v1078
       + v1069 * v1012 * v1078
       + v1062 * v1042 * v1078
       - v1049 * v1045 * v1034
       - v952 * v1034
       + v1068 * (v1075 * v1034);
  v60 = v978 * v978 * 1.5;
  v321 = v984 * v1034
       + v28 * v1034
       - v963 * v1034
       - v27 * v1034
       - v991 * v1034
       - v990 * v1034
       + v1009 * v1034
       + v1034 * 0.5 * (v1023 * v1023)
       + v1011 * v1029
       + v12 * v1060 * v1029
       + v1049 * v1040 * v1029
       + v1036 * v1069 * v1029;
  v61 = v1034 * v1034 * 1.5;
  v710 = v1079 * (v1030 * v1023)
       + v1030 * v967 * v1040
       + v1032 * v1044 * v1040
       + v1032 * v1023 * v1084
       + v978 * v1044 * v1079
       + v978 * v967 * v1084
       + v1076 * v1012 * 3.0 * v1056
       + v1047 * v1073 * v1056
       + v1047 * v1071 * v1012
       + v1073 * v1071 * v1076
       + v1044 * v967 * v1056
       + v1044 * v1023 * v1012;
  v708 = v1045 * (v1064 * v1071)
       + v1064 * v1073 * v1036
       + v1085 * v1047 * v1036
       + v1085 * v1071 * v1051
       + v1026 * v1047 * v1045
       + v1026 * v1073 * v1051
       + v1051 * v1012 * v1036
       + v875 * v1045
       + v876 * v1036
       + v1067 * v967 * v1036
       + v1067 * v1023 * v1045
       + v1068 * v1044 * v1036;
  v696 = v402
       + v974 * v1056
       + v904 * v1056
       - v953 * v1056
       - v1014 * v1056
       - v931 * v1056
       - v988 * v1056
       + v1064 * v1047 * v1036
       + v1051 * v1076 * v1036
       + v1067 * v1044 * v1036
       + v1064 * v1071 * v1051
       + v12 * v1047 * v1051;
  v309 = v1054 * v1042 * v1023
       + v1040 * v1058 * v1023
       + v1069 * v1056 * v1023
       + v978 * v1078 * v1023
       + v1060 * v1071 * v1023
       + v1040 * v1056 * v1078
       + v1054 * v1071 * v1078
       - v1042 * v1071 * v978
       - v1058 * v1056 * v978
       - v964 * v978
       + v60 * v1034;
  v291 = v923 * v1032 + v986 * v1032 + v889 * v1032 + v61 * v1032 + v1032 * 0.5 * v723;
  v294 = v1040 * v1012 * v1023
       + v1079 * v1056 * v1023
       - v1073 * v1071 * v978
       - v1012 * v1056 * v978
       - v11 * v12 * v978
       - v1045 * v1036 * v978
       + v28 * v1032
       + v984 * v1032
       + v1009 * v1032
       + v60 * v1032
       + v1032 * 0.5 * (v1023 * v1023);
  v719 = v404
       - v59 * v1076
       + v8 * v1073 * v1079
       + v1062 * v1047 * v1079
       + v1032 * v1044 * v1079
       + v1047 * v1073 * v1012
       + v1044 * v967 * v1012;
  v405 = v1045 * (v1036 * v1058)
       + v943 * v1045
       + v1036 * v1012 * v1049
       + v842 * v1036
       + v720 * v1049
       + v1029 * v1078 * v1045
       + v793 * v1049
       + v1075 * v1023 * v1045
       + v1049 * v1056 * v1045
       + v19 * v1073 * v1049
       + v19 * v1042 * v1045
       + v11 * v1071 * v1049;
  v403 = v355 + v943 * v1049 + v918 * v1036 + v12 * v1042 * v1049 + v1049 * v1058 * v1036;
  v395 = v1040 * (v8 * v1042)
       + v1044 * v1023 * v1058
       + v1060 * v1047 * v1040
       + v1030 * v1078 * v1040
       + v1034 * v1044 * v1040
       + v1034 * v1023 * v1084
       + v1040 * v1076 * v1069
       + v978 * v1044 * v1069
       + v1060 * v1071 * v1084
       + v1054 * v1047 * v1069
       + v978 * v1078 * v1084
       + v8 * v1071 * v1069;
  v394 = v1036 * (v1075 * v1044)
       + v1067 * v1078 * v1036
       + v7 * v1042 * v1036
       + v1038 * v1047 * v1036
       + v1029 * v1044 * v1049
       + v1029 * v1078 * v1051
       + v1067 * v1023 * v1049
       + v1075 * v1023 * v1051
       + v1049 * v1056 * v1051
       + v19 * v1047 * v1049
       + v19 * v1042 * v1051
       + v1038 * v1071 * v1051;
  v296 = v61 * v978 + v986 * v978 + v923 * v978 + v889 * v978 + v978 * 0.5 * v723;
  v371 = v242 - v723 * 0.5 * *v0;
  v243 = v236 + v1049 * v1069 * *v0 - v723 * 0.5 * v1060;
  v230 = v619 + v17 * v1047 + v723 * 0.5 * v1047;
  v232 = v616 + v17 * v1073 + v723 * 0.5 * v1073;
  v704 = v382
       + v974 * v1012
       + v904 * v1012
       - v953 * v1012
       - v1014 * v1012
       - v931 * v1012
       - v988 * v1012
       + v8 * v1073 * v1084
       + v1062 * v1047 * v1084
       + v1032 * v1044 * v1084
       + v1047 * v1073 * v1076
       + v1044 * v967 * v1076;
  v228 = v614 + v17 * v1071 + v723 * 0.5 * v1071;
  v383 = v1049 * 0.5 * (v1058 * v1058)
       + v992 * v1049
       + v986 * v1049
       + v985 * v1069
       + v1049 * 0.5 * (v1069 * v1069)
       - v923 * v1049
       - v920 * v1049
       + v848 * v1058
       + v918 * v1058
       + v958 * v1049
       + v1075 * v1034 * v1069
       - v903 * v1049
       - v723 * 0.5 * v1049;
  v789 = v384 + v723 * 0.5 * v1076;
  v620 = v363
       + v961 * v1058
       - v32 * v1058
       - v976 * v1058
       - v59 * v1058
       + v11 * v1073 * v1049
       + v1045 * v1012 * v1049
       + v842 * v1045
       + v1068 * v967 * v1049
       + v826 * v1045;
  v617 = v1069 * (v1060 * v1042)
       + v920 * v1058
       - v992 * v1058
       - v986 * v1058
       - v903 * v1058
       + v723 * 0.5 * v1058
       + v848 * v1049
       + v918 * v1049
       + v958 * v1058
       + v17 * v1058
       + v889 * v1058
       - v923 * v1058
       + v1034 * v1078 * v1069;
  v615 = v376
       + v904 * v1058
       - v1014 * v1058
       - v931 * v1058
       - v988 * v1058
       - v953 * v1058
       + v1067 * v1078 * v1051
       + v1075 * v1044 * v1051
       + v7 * v1042 * v1051
       + v906 * v1051
       + v1067 * v1044 * v1049;
  v385 = v1051 * v842
       + v906 * v1045
       + v1064 * v1042 * v1045
       + v1064 * v1073 * v1049
       + v1085 * v1042 * v1051
       + v1085 * v10 * v1049
       + v1049 * v1076 * v1045
       + v1049 * v1012 * v1051
       + v1051 * v1058 * v1045
       + v1075 * v1044 * v1045
       + v1075 * v967 * v1051
       + v1067 * v1078 * v1045;
  v283 = v1029 * (v1075 * v1034)
       + v1036 * v1069 * v1075
       + v1060 * v1054 * v1034
       + v1069 * v1040 * v1034
       + v1040 * v1058 * v1078
       + v1054 * v1042 * v1078
       + v1069 * v1056 * v1078
       + v1060 * v1042 * v1023
       + v1069 * v1058 * v1023
       + v1060 * v1071 * v1078
       + v1034 * v1078 * v1023;
  v349 = v1030 * (v1060 * v1042)
       + v1069 * v1058 * v1030
       + v1051 * v1058 * v1075
       + v1049 * v1076 * v1075
       + v7 * v1042 * v1075
       + v906 * v1075
       + v1058 * v1076 * v1078
       + v1042 * v1047 * v1078
       + v1084 * v1058 * v1034
       + v1069 * v1076 * v1034
       + v8 * v1042 * v1034
       + v1060 * v1047 * v1034
       + v1034 * v1078 * v1030;
  v214 = v342
       + v1051 * v1069 * v8
       + v1067 * v1044 * v1042
       + v1051 * v1076 * v1042
       + v1067 * v1078 * v1047
       + v1075 * v1044 * v1047;
  v381 = v380
       + v723 * 0.5 * v1012
       - v903 * v1012
       - v992 * v1012
       - v986 * v1012
       + v48 * v1073 * v1049
       + v848 * v1045
       + v1049 * v1058 * v1045
       + v48 * v1042 * v1045
       + v826 * v1049;
  v377 = v789
       - v903 * v1076
       - v992 * v1076
       - v986 * v1076
       + v1067 * v1078 * v1049
       + v1075 * v1044 * v1049
       + v7 * v1042 * v1049
       + v906 * v1049
       + v848 * v1051;
  v437 = v1051 * (v12 * v1054)
       + v1040 * v1056 * v1076
       + v978 * v1023 * v1076
       + v27 * v1084
       + v984 * v1084
       + v36 * v1084
       + v1084 * 0.5 * (v1056 * v1056)
       - v963 * v1084
       - v28 * v1084
       - v991 * v1084
       - v41 * v1084
       + v1040 * v1040 * 1.5 * v1084
       + v1036 * v1040 * v1051
       + v1029 * v978 * v1051;
  v429 = v428 - v59 * v1040 - v975 * v1040 - v961 * v1040 + v1032 * v1023 * v1012;
  v364 = v1062 * v1071 * v1076
       + v1062 * v1047 * v1056
       + v1054 * v1047 * v1012
       + v1054 * v1073 * v1076
       + v1084 * v1012 * v1056
       + v1079 * v1076 * v1056
       + v1040 * v1076 * v1012
       + v1030 * v967 * v1056
       + v1030 * v1023 * v1012
       + v1032 * v1044 * v1056
       + v1032 * v1023 * v1076
       + v978 * v1044 * v1012;
  v439 = v438
       - v988 * v1040
       - v974 * v1040
       - v904 * v1040
       + v1084 * v1076 * v1056
       + v1030 * v1044 * v1056
       + v8 * v10 * v1056
       + v7 * v8 * v1036
       + v1000 * v1036;
  v358 = v357 - v1042 * v1073 * v1040;
  v356 = v1012 * (v1034 * v1023)
       + v1079 * v1056 * v1058
       + v1062 * v1071 * v1058
       + v1060 * v1071 * v1012
       + v978 * v1078 * v1012
       + v1032 * v1023 * v1058
       + v1069 * v1056 * v1012
       + v1054 * v1073 * v1058
       + v1054 * v1042 * v1012
       + v978 * v967 * v1058
       + v1040 * v1058 * v1012
       - v1042 * v1071 * v1079;
  v337 = v1064 * v1073 * v1058
       + v1064 * v1042 * v1012
       + v1085 * v1042 * v1076
       + v1085 * v10 * v1058
       + v1049 * v1076 * v1012
       + v1051 * v1058 * v1012
       + v1045 * v1058 * v1076
       + v1075 * v1044 * v1012
       + v1075 * v967 * v1076
       + v1067 * v1078 * v1012
       + v1067 * v967 * v1058
       + v826 * v1076;
  v338 = v11 * v1071 * v1058
       + v12 * v1042 * v1012
       + v943 * v1012
       + v1068 * v1034 * v1040
       + v1075 * v1032 * v1040
       + v720 * v1058
       + v1029 * v1078 * v1012
       + v793 * v1058
       + v1075 * v1023 * v1012
       - v1078 * v1023 * v1045
       - v1042 * v1071 * v1045
       + v826 * v1056;
  v343 = v254 + v1079 * v1058 * v1076 + v1034 * v1044 * v1012;
  v347 = v340 + v7 * v1060 * v1036;
  v346 = v1030 * v1078 * v1056
       - v1075 * v1067 * v1040
       - v957 * v1040
       - v1067 * v1029 * v1069
       - v1075 * v1029 * v1084
       - v7 * v12 * v1069
       - v964 * v1084
       - v1047 * v1071 * v1069
       - v1078 * v1023 * v1084
       - v1042 * v1071 * v1084
       - v1044 * v1023 * v1069
       - v1042 * v1047 * v1040
       - v1078 * v1044 * v1040;
  v341 = v1076 * (v1034 * v1023)
       + v1034 * v1044 * v1056
       + v978 * v1044 * v1058
       + v1060 * v1071 * v1076
       + v1054 * v1047 * v1058
       + v978 * v1078 * v1076
       + v1084 * v1056 * v1058
       + v8 * v1071 * v1058
       + v1069 * v1056 * v1076
       + v1030 * v1023 * v1058
       + v8 * v1042 * v1056
       + v1060 * v1047 * v1056;
  v212 = v1036 * (v1075 * v967) + v826 * v1036;
  v712 = v322 + v1079 * v1058 * v1044 + v1079 * v1076 * v1078 + v1034 * v1044 * v967;
  v323 = v1085 * v918
       + v1049 * v1058 * v1085
       + v848 * v1085
       + v826 * v1038
       + v1075 * v967 * v1038
       + v1045 * v1058 * v1038
       + v1049 * v1012 * v1038
       + v1079 * v1058 * v1060
       + v1034 * v1078 * v1062
       + v1069 * v1058 * v1062
       + v1060 * v1042 * v1062
       + v1069 * v1012 * v1060
       + v1032 * v1078 * v1060
       + v1034 * v967 * v1060;
  v324 = v1038 * (v1045 * v1012)
       + v1085 * v1073 * v1038
       + v1075 * v967 * v1085
       + v1045 * v1058 * v1085
       + v1049 * v1012 * v1085
       + v1068 * v967 * v1038
       + v1079 * v1058 * v1062
       + v1032 * v967 * v1060
       + v1079 * v1012 * v1060
       + v1062 * v1073 * v1060
       + v826 * v1085
       + v1069 * v1012 * v1062
       + v1032 * v1078 * v1062
       + v1034 * v967 * v1062;
  v692 = v467
       - v59 * v1084
       - v975 * v1084
       - v961 * v1084
       + v8 * v1073 * v1012
       + v1062 * v1047 * v1012
       + v1030 * v967 * v1012
       + v1032 * v1044 * v1012
       - v1047 * v1073 * v1079;
  v701 = v501 + v1032 * v1078 * v1056 + v1034 * v967 * v1056;
  v202 = v7 * v826
       + v1067 * v967 * v1038
       + v1068 * v1044 * v1038
       + v1079 * v1058 * v1082
       + v1079 * v1076 * v1060
       + v1034 * v1044 * v1062
       + v1034 * v967 * v1082
       + v1030 * v1078 * v1062
       + v1030 * v967 * v1060
       + v1032 * v1078 * v1082;
  v200 = v1051 * v826
       + v1067 * v967 * v1049
       + v1068 * v1044 * v1049
       + v1079 * v1058 * v1084
       + v1079 * v1076 * v1069
       + v1034 * v1044 * v1079
       + v1034 * v967 * v1084
       + v1030 * v1078 * v1079
       + v1030 * v967 * v1069
       + v1032 * v1078 * v1084;
  v222 = v678 - v904 * v7;
  v827 = v1060 * (v8 * v8 * 1.5)
       + v931 * v1060
       + v1005 * v1060
       + v1014 * v1060
       + v1060 * 0.5 * (v1047 * v1047)
       - v996 * v1060
       - v904 * v1060;
  v207 = v8 * v8 * (v1062 * 1.5)
       + v931 * v1062
       + v1005 * v1062
       + v1014 * v1062
       + v974 * v1062
       - v965 * v1062
       - v988 * v1062
       - v996 * v1062
       - v904 * v1062;
  v205 = v8 * v8 * (v1054 * 1.5)
       + v931 * v1054
       + v1005 * v1054
       + v1014 * v1054
       + v974 * v1054
       - v965 * v1054
       - v988 * v1054
       - v996 * v1054
       - v904 * v1054;
  v797 = v636 + v996 * v1042 + v904 * v1042;
  v193 = v634 + v996 * v1073 + v904 * v1073;
  v195 = v632 + v996 * v1071 + v904 * v1071;
  v715 = v470
       - v988 * v1079
       - v974 * v1079
       - v904 * v1079
       + v1062 * v1047 * v1076
       + v1030 * v967 * v1076
       + v1032 * v1044 * v1076
       - v1047 * v1073 * v1084
       - v1044 * v967 * v1084;
  v209 = v7 * v7 * (v1076 * -0.5) + v1005 * v1076 - v988 * v1076 - v1014 * v1076 + v904 * v1076;
  v280 = v1064 * v1047 * v1044
       + v1014 * v1067
       + v931 * v1067
       - v953 * v1067
       - v996 * v1067
       + v1064 * v8 * v1030
       + v1067 * 0.5 * (v1051 * v1051)
       + v1000 * v1030
       - v1067 * 0.5 * (v1047 * v1047)
       + v1051 * v1076 * v1044
       + v988 * v1067
       + v904 * v1067;
  v219 = v1044 * v904 + v1084 * v1084 * -0.5 * v1044;
  v905 = v676 - v32 * v1085 + v1068 * v967 * v1073 - v961 * v1085;
  v62 = v37;
  v666 = v659 - v59 * v1062 + v1079 * v1012 * v1073 + v32 * v1062 - v961 * v1062;
  v790 = v628 + v37 * v1042 + v961 * v1042;
  v186 = v630 + v37 * v1047 + v961 * v1047;
  v187 = v1073 * (v967 * v1023)
       + v1012 * v1056 * v1073
       - v1079 * v1040 * v1073
       - v1032 * v978 * v1073
       - v1045 * v1036 * v1073
       - v1068 * v1029 * v1073
       - v1007 * v1071
       + v917 * v1071
       + v1073 * v1073 * 1.5 * v1071
       + v37 * v1071
       + v961 * v1071;
  v705 = v727
       - v975 * v1069
       - v961 * v1069
       - v976 * v1069
       - v59 * v1069
       + v1034 * v1032 * v1079
       + v1060 * v1062 * v1079
       + v1032 * v1078 * v1012
       + v11 * v1062 * v1049
       + v1045 * v1079 * v1049;
  v713 = v476 + v37 * v1079 + v917 * v1079 - v975 * v1079 + v1007 * v1079 - v961 * v1079;
  v179 = v408 + v1032 * v967 * v1079 - v917 * v1012 + v995 * v1012 + v961 * v1012;
  v339 = v1085 * v1073 * v967
       - v37 * v1068
       - v1068 * 0.5 * (v1073 * v1073)
       + v32 * v1068
       + v1085 * v1062 * v1032
       + v59 * v1068
       + v1068 * 0.5 * (v1045 * v1045)
       - v1007 * v1068
       + v1045 * v1079 * v1032
       - v917 * v1068
       + v961 * v1068;
  v679 = v388 - v1044 * v967 * v1069;
  v637 = v642 + v1044 * v1023 * v1042;
  v643 = v1062 * (v1030 * v1023)
       + v1030 * v967 * v1054
       + v1032 * v1044 * v1054
       + v1032 * v1023 * v8
       + v978 * v1044 * v1062
       + v978 * v967 * v8
       + v1076 * v1012 * v1071
       + v1076 * v1056 * v1073
       + v1047 * v1073 * 3.0 * v1071
       + v1012 * v1056 * v1047
       + v1044 * v967 * v1071
       + v1044 * v1023 * v1073;
  v638 = v1012 * (v1030 * v1078)
       + v1034 * v967 * v1076
       + v1030 * v967 * v1058
       + v1032 * v1078 * v1076
       + v1032 * v1044 * v1058
       + v1060 * v1047 * v1012
       + v1060 * v1073 * v1076
       + v8 * v1042 * v1012
       + v8 * v1073 * v1058
       + v1062 * v1042 * v1076
       + v1062 * v1047 * v1058
       + v1069 * v1076 * v1012;
  v703 = v923 * v1030
       + v986 * v1030
       + v889 * v1030
       + v61 * v1030
       + v1030 * 0.5 * v723
       - v920 * v1030
       - v17 * v1030
       - v992 * v1030
       - v958 * v1030
       + v7 * v1060 * v1075
       + v835 * v1075
       + v1049 * v1069 * v1067
       + v985 * v1067
       + v1069 * v1058 * v1044;
  v255 = v1075 * (v1049 * v1058)
       + v1049 * v1049 * -0.5 * v1078
       + v920 * v1078
       + v918 * v1075
       + v17 * v1078
       - v923 * v1078
       + v1060 * v1042 * v1034
       - v889 * v1078
       + v986 * v1078
       + v723 * 0.5 * v1078
       + v1069 * v1058 * v1034;
  v477 = v1047 * (v1034 * v967)
       + v1034 * v1044 * v1073
       + v1030 * v1078 * v1073
       + v1030 * v967 * v1042
       + v1032 * v1078 * v1047
       + v1032 * v1044 * v1042
       + v1060 * v1047 * v1073
       + v8 * v1042 * v1073
       + v1062 * v1042 * v1047
       + v1069 * v1076 * v1073
       + v1069 * v1012 * v1047
       + v1084 * v1058 * v1073;
  v635 = v271 + v7 * v1060 * v1049;
  v633 = v262 + v11 * v1060 * v1049 + v868 * v1049;
  v409 = v1054 * v1042 * v1047
       + v1030 * v1023 * v1042
       + v1030 * v1078 * v1071
       + v1034 * v1044 * v1071
       + v1034 * v1023 * v1047
       + v1040 * v1076 * v1042
       + v978 * v1044 * v1042
       + v1060 * v1071 * v1047
       + v978 * v1078 * v1047
       + v1084 * v1056 * v1042
       + v8 * v1071 * v1042
       + v1069 * v1076 * v1071;
  v660 = v1060 * v1054 * v1030
       + v8 * v1054 * v1034
       + v1051 * v1069 * v1029
       + v1049 * v1084 * v1029
       - v7 * v12 * v1034
       - v964 * v1030
       - v1076 * v1056 * v1034
       - v10 * v1071 * v1034
       - v1058 * v1056 * v1030
       - v1042 * v1071 * v1030
       + v1084 * v1058 * v1023
       + v1069 * v1076 * v1023;
  v948 = v202 + v1032 * v1044 * v1060 + v1060 * v10 * v1062;
  v629 = v292 + v12 * v1054 * v1079 + v1036 * v1040 * v1079;
  v631 = v200 + v1032 * v1044 * v1069 + v1060 * v10 * v1079;
  v677 = v1034 * (v1030 * v1044)
       + v8 * v1047 * v1034
       + v1084 * v1076 * v1034
       + v1051 * v1058 * v1067
       + v1049 * v1076 * v1067
       + v7 * v1042 * v1067
       + v906 * v1067
       + v1067 * v1044 * v1075
       + v1058 * v1076 * v1044
       + v1042 * v1047 * v1044
       + v1084 * v1058 * v1030
       + v1069 * v1076 * v1030
       + v8 * v1042 * v1030
       + v1060 * v1047 * v1030;
  v436 = v1026 * (v1075 * v1044)
       + v1067 * v1078 * v1026
       + v1051 * v1058 * v1026
       + v1069 * v1056 * v1082
       + v1030 * v1023 * v1060
       + v1054 * v1042 * v1082
       + v1040 * v1058 * v1082
       + v1030 * v1078 * v1054
       + v1034 * v1044 * v1054
       + v1034 * v1023 * v1082
       + v1040 * v1076 * v1060
       + v978 * v1044 * v1060;
  v625 = v344 + v12 * v1054 * v1084 + v1036 * v1040 * v1084;
  v435 = v1026 * (v1051 * v1076)
       + v1064 * v1047 * v1026
       + v1067 * v1044 * v1026
       + v875 * v1064
       + v1036 * v1076 * v1064
       + v1067 * v1023 * v1064
       + v1029 * v1044 * v1064
       + v1084 * v1076 * v1054
       + v1030 * v1044 * v1054
       + v1082 * v1047 * v1054
       + v1084 * v1056 * v1082
       + v1040 * v1076 * v1082
       + v1030 * v1023 * v1082
       + v978 * v1044 * v1082;
  v566 = v565 - v984 * v1049 - v978 * v978 * 0.5 * v1049;
  v423 = v1064 * (v1036 * v1056)
       + v1026 * v1071 * v1064
       + v1029 * v1023 * v1064
       + v875 * v1026
       + v1036 * v1076 * v1026
       + v1067 * v1023 * v1026
       + v1029 * v1044 * v1026
       + v1040 * v1056 * v1082
       + v978 * v1023 * v1082
       + v1054 * v1071 * v1082
       + v1084 * v1056 * v1054
       + v1040 * v1076 * v1054
       + v1030 * v1023 * v1054
       + v978 * v1044 * v1054;
  v216 = v978 * v1044 * v967 - v1076 * v1012 * v978;
  v278 = v1058 * v1056 * v1044
       + v1047 * v1071 * v1078
       + v1042 * v1071 * v1044
       + v1044 * v1023 * 3.0 * v1078
       + v1084 * v1058 * v978
       + v1069 * v1076 * v978
       + v8 * v1042 * v978
       + v1060 * v1047 * v978
       + v1040 * v1076 * v1034
       + v978 * v1044 * v1034;
  v742 = v1042 * (v1036 * v1012)
       + v1049 * v1079 * v1054
       + v1036 * v1058 * v1073
       + v1045 * v1056 * v1042
       + v1049 * v1056 * v1073
       + v12 * v1042 * v1073
       + v11 * v1071 * v1042
       + v943 * v1073
       + v1068 * v1034 * v1054
       + v1049 * v1012 * v1071
       + v720 * v1042;
  v389 = v1085 * (v12 * v1042)
       + v1026 * v1073 * v1038
       + v1038 * v1071 * v1085
       + v1036 * v1012 * v1038
       + v1036 * v1058 * v1085
       + v1045 * v1056 * v1038
       + v1075 * v1023 * v1085
       + v1049 * v1056 * v1085
       + v1075 * v967 * v1026
       + v1045 * v1058 * v1026
       + v1049 * v1012 * v1026
       + v720 * v1038;
  v471 = v297 + v11 * v1062 * v1040 + v1045 * v1079 * v1040;
  v468 = v1085 * v1071 * v1076
       + v1085 * v1047 * v1056
       + v1026 * v1047 * v1012
       + v1026 * v1073 * v1076
       + v1051 * v1012 * v1056
       + v876 * v1056
       + v1036 * v1076 * v1012
       + v1067 * v967 * v1056
       + v1067 * v1023 * v1012
       + v1068 * v1044 * v1056
       + v793 * v1076
       + v1029 * v1044 * v1012;
  v203 = v11 * (v1029 * v1044) + v793 * v1064 + v720 * v1064;
  v425 = v7 * v19 * v1045
       + v7 * v11 * v1036
       + v11 * v19 * v1051
       + v890 * 3.0 * v1036
       + v1067 * v1068 * v1036
       + v1067 * v1029 * v1045
       + v1068 * v1029 * v1051
       + v1064 * v1062 * v1040
       + v1064 * v1054 * v1079
       + v1085 * v1082 * v1040
       + v1085 * v1054 * v1084
       + v12 * v1082 * v1079;
  v398 = v359 + v7 * v8 * v1040 + v1000 * v1040;
  v197 = v1045 * (v1029 * v1044) + v793 * v1051 + v720 * v1051;
  v360 = v1026 * (v1045 * v1012)
       + v1085 * v1073 * v1026
       + v1068 * v967 * v1026
       + v1045 * v1056 * v1085
       + v1036 * v1012 * v1085
       + v793 * v1085
       + v720 * v1085
       + v1032 * v967 * v1054
       + v1079 * v1012 * v1054
       + v1062 * v1073 * v1054
       + v1079 * v1056 * v1062
       + v1040 * v1012 * v1062
       + v1032 * v1023 * v1062
       + v978 * v967 * v1062;
  v427 = v426 - v1042 * v1073 * v1036;
  v502 = v212
       + v11 * v1042 * v1036
       + v1062 * v1071 * v1069
       + v1060 * v1071 * v1079
       + v978 * v1078 * v1079
       + v1040 * v1012 * v1069
       + v1032 * v1023 * v1069
       + v1069 * v1056 * v1079
       + v1054 * v1073 * v1069
       + v1054 * v1042 * v1079
       + v978 * v967 * v1069;
  v762 = v1068 * (v1029 * v1078)
       + v720 * v1075
       + v1075 * v1023 * v1068
       + v11 * v1042 * v1029
       + v842 * v1029
       + v1054 * v1073 * v1034
       + v1054 * v1042 * v1032
       + v978 * v967 * v1034;
  v345 = v239 + v1045 * v1040 * v1069 + v1049 * v1040 * v1079 + v12 * v1062 * v1069;
  v304 = v1076 * (v1049 * v1056)
       + v875 * v1058
       + v19 * v1047 * v1058
       + v19 * v1042 * v1076
       + v1038 * v1071 * v1076
       + v1064 * v1071 * v1058
       + v1075 * v1044 * v1056
       + v1064 * v1042 * v1056
       + v1038 * v1047 * v1056
       + v1029 * v1044 * v1058
       + v1029 * v1078 * v1076
       + v1067 * v1023 * v1058;
  v298 = v1067 * v1078 * v1056
       - v1030 * v978 * v1049
       - v1034 * v978 * v1051
       - v8 * v1054 * v1049
       - v1060 * v1054 * v1051
       - v1047 * v1071 * v1049
       - v1078 * v1023 * v1051
       - v1042 * v1071 * v1051
       - v1044 * v1023 * v1049
       - v1078 * v1044 * v1036
       - v1042 * v1047 * v1036
       - v1034 * v1030 * v1036
       - v1060 * v8 * v1036;
  v281 = v1054 * v1047 * v1073
       + v1062 * v1047 * v1071
       + v1084 * v1012 * v1071
       + v1084 * v1056 * v1073
       + v1079 * v1076 * v1071
       + v1079 * v1056 * v1047
       + v1040 * v1076 * v1073
       + v1040 * v1012 * v1047
       + v1030 * v967 * v1071
       + v1030 * v1023 * v1073
       + v1032 * v1044 * v1071
       + v1032 * v1023 * v1047;
  v597 = v596
       + v7 * v12 * v1049
       + v1051 * v1040 * v1069
       + v1049 * v1040 * v1084
       + v19 * v8 * v1069
       + v19 * v1060 * v1084
       + v7 * v1054 * v1069
       + v1011 * v1084
       + v964 * v1051;
  v293 = v992 * v1036
       + v1036 * 1.5 * (v1049 * v1049)
       + v986 * v1036
       + v889 * v1036
       + v1036 * 0.5 * (v1058 * v1058)
       - v920 * v1036
       - v723 * 0.5 * v1036
       - v923 * v1036
       - v903 * v1036
       + v964 * v1049
       + v1075 * v1029 * v1049
       + v985 * v1040
       + v1011 * v1069
       + v12 * v1060 * v1069;
  v714 = v247 + v11 * v1062 * v1084 + v1045 * v1079 * v1084;
  v211 = v1079 * v1012 * v1078
       + v1045 * v1069 * v1068
       + v1062 * v1073 * v1078
       + v1069 * v1079 * v1032
       + v1060 * v1062 * v1032
       + v1079 * v1058 * v967
       + v1032 * v967 * v1078
       + v1060 * v1073 * v967
       + v1069 * v1012 * v967
       + v1062 * v1042 * v967;
  v748 = v256 + v1079 * v1058 * v10;
  v204 = v967 * (v1034 * v1023)
       + v1079 * v1056 * v1078
       + v1062 * v1071 * v1078
       + v1060 * v1071 * v967
       + v1040 * v1012 * v1078
       + v1032 * v1023 * v1078
       + v1069 * v1056 * v967
       + v1060 * v1073 * v1023
       + v1079 * v1058 * v1023;
  v225 = v1075 * v842
       + v11 * v1042 * v1075
       + v1045 * v1058 * v1075
       + v1049 * v1012 * v1075
       + v1034 * v1078 * v1032
       + v1069 * v1058 * v1032
       + v1060 * v1042 * v1032
       + v1069 * v1012 * v1034
       + v1062 * v1042 * v1034
       + v1060 * v1073 * v1034
       + v1079 * v1058 * v1034;
  v224 = v1068 * (v11 * v1042)
       + v1068 * v967 * v1075
       + v842 * v1068
       + v1079 * v1012 * v1034
       + v1062 * v1073 * v1034
       + v1045 * v1058 * v1068
       + v1049 * v1012 * v1068
       + v1032 * v967 * v1034
       + v1062 * v1042 * v1032
       + v1060 * v1073 * v1032
       + v1079 * v1058 * v1032
       + v1069 * v1012 * v1032;
  v721 = v1032 * (v1060 * v1071)
       + v1062 * v1071 * v1034
       + v978 * v1078 * v1032
       + v1040 * v1012 * v1034
       + v1032 * v1023 * v1034
       + v1069 * v1056 * v1032
       + v1062 * v1042 * v978
       + v1060 * v1073 * v978
       + v1079 * v1058 * v978
       + v1058 * v1056 * v967
       + v1042 * v1071 * v967
       + v1069 * v1012 * v978;
  v739 = v1064 * (v1049 * v1076)
       + v1064 * v1047 * v1038
       + v1067 * v1044 * v1038
       + v1051 * v1076 * v1038
       + v1067 * v1078 * v1064
       + v1075 * v1044 * v1064
       + v1051 * v1058 * v1064
       + v1084 * v1076 * v1060
       + v1030 * v1078 * v1082
       + v1034 * v1044 * v1082
       + v1082 * v1047 * v1060
       + v1030 * v1044 * v1060;
  v63 = v661 + v1051 * v1076 * v7;
  v662 = v250 + v7 * v8 * v1079 + v1000 * v1079;
  v279 = v446 - v1044 * v967 * v1049;
  v413 = v806
       - v975 * v1049
       - v961 * v1049
       - v917 * v1049
       - v32 * v1049
       + v1075 * v1068 * v1045
       + v952 * v1045
       + v1045 * v1079 * v1069
       + v1085 * v1062 * v1069
       + v1085 * v1060 * v1079;
  v190 = v209
       + v996 * v1076
       + v1067 * v1044 * v1051
       + v8 * v1047 * v1084
       + v974 * v1076
       + v965 * v1076
       + v7 * v1047 * v1051
       + v1030 * v1044 * v1084;
  v716 = v953 * v1034
       + v988 * v1034
       + v1005 * v1034
       + v58 * v1034
       + v1034 * 0.5 * (v1044 * v1044)
       - v974 * v1034
       - v996 * v1034
       - v931 * v1034
       - v965 * v1034
       + v1064 * v1060 * v1067
       + v835 * v1067
       + v1000 * v1075
       + v1064 * v8 * v1075
       + v1030 * v1044 * v1078;
  v156 = v207 + v1030 * v1044 * v1073 + v8 * v10 * v1073;
  v745 = v205 + v1030 * v1044 * v1071 + v8 * v10 * v1071;
  v447 = -(v1030 * v1032 * v1076)
       - v8 * v1062 * v1076
       - v7 * v11 * v1076
       - v1067 * v1068 * v1076
       + v1030 * v967 * v1084
       + v1064 * v1047 * v1045
       + v1051 * v1076 * v1045
       + v1067 * v1044 * v1045
       + v1064 * v1073 * v1051
       + v11 * v1047 * v1051
       + v1067 * v967 * v1051
       + v1068 * v1044 * v1051
       + v1084 * v1076 * v1079
       + v1030 * v1044 * v1079
       + v8 * v1047 * v1079;
  v185 = v1069 * v1084 * v1030
       + v1084 * v1076 * v1078
       + v1060 * v8 * v1030
       + v1051 * v1069 * v1067
       + v1049 * v1084 * v1067
       + v1084 * v1058 * v1044
       + v1069 * v1076 * v1044
       + v8 * v1042 * v1044
       + v1060 * v1047 * v1044
       + v8 * v1047 * v1078;
  v275 = v258 + v835 * v1079 + v868 * v1084 + v1064 * v1060 * v1079 + v1064 * v1062 * v1069 + v11 * v1060 * v1084;
  v259 = v222 + v965 * v1064 + v931 * v1064 - v1014 * v1064 + v1067 * v1044 * v10;
  v272 = v1049 * v1049 * (v1045 * 1.5)
       + v992 * v1045
       + v986 * v1045
       + v889 * v1045
       + v1045 * 0.5 * (v1058 * v1058)
       - v920 * v1045
       - v723 * 0.5 * v1045
       - v923 * v1045
       - v903 * v1045
       + v1075 * v1068 * v1049
       + v985 * v1079
       + v952 * v1049
       + v1075 * v1034 * v1079
       + v1049 * v1069 * v1079;
  v183 = v7 * v1042 * v1044 + v1049 * v1076 * v1044 + v906 * v1044 + v1067 * v1044 * v1078;
  v184 = v1036 * v1076 * v1044
       + v875 * v1044
       - v1076 * v1056 * v1067
       - v10 * v1071 * v1067
       - v8 * v1054 * v1067
       - v1084 * v1040 * v1067
       + v1067 * v1044 * v1023;
  v263 = v63
       + v931 * v1047
       + v996 * v1047
       - v1005 * v1047
       + v1067 * v1044 * v7
       + v1030 * v1044 * v8
       + v1084 * v1076 * v8;
  v206 = v219
       + v974 * v1044
       - v931 * v1044
       - v953 * v1044
       + v8 * v1047 * v1030
       + v7 * v1047 * v1067
       - v965 * v1044
       + v988 * v1044
       + v1084 * v1076 * v1030;
  v218 = v1067 * (v7 * v1071)
       + v1067 * v1044 * v1029
       + v12 * v10 * v1067
       + v875 * v1067
       + v1036 * v1076 * v1067
       + v1084 * v1076 * v978;
  v264 = v984 * v1073
       + v1040 * v1040 * -0.5 * v1073
       + v1073 * 1.5 * (v1071 * v1071)
       + v990 * v1073
       + v41 * v1073
       + v963 * v1073
       - v978 * v978 * 0.5 * v1073
       - v27 * v1073
       - v28 * v1073
       + v1040 * v1012 * v1054
       + v1026 * v1071 * v1085
       + v1036 * v1056 * v1085
       + v1029 * v1023 * v1085
       + v1045 * v1056 * v1026;
  v261 = v1071 * (v1078 * v1023)
       + v1058 * v1056 * v1071
       - v1069 * v1040 * v1071
       - v1034 * v978 * v1071
       - v1049 * v1036 * v1071
       - v1075 * v1029 * v1071
       + v1026 * v1071 * v1038
       + v1036 * v1056 * v1038
       + v1029 * v1023 * v1038
       + v1049 * v1056 * v1026
       + v1036 * v1058 * v1026
       + v1075 * v1023 * v1026
       + v1029 * v1078 * v1026
       + v1040 * v1058 * v1054;
  v911 = v265 + v1051 * v1069 * v1054 + v1029 * v1044 * v1042 + v1029 * v1078 * v10 + v1067 * v1023 * v1042;
  v201 = v1049 * v1076 * v1023
       + v1051 * v1058 * v1023
       + v7 * v1042 * v1023
       + v906 * v1023
       + v1029 * v1078 * v1044
       + v1067 * v1023 * v1078;
  v246 = v7 * v1073 * v1071
       + v1029 * v1032 * v8
       + v11 * v1047 * v1071
       + v12 * v1047 * v1073
       + v1051 * v1012 * v1071
       + v876 * v1071
       + v1045 * v1056 * v1047
       + v1036 * v1076 * v1073
       + v1036 * v1012 * v1047
       + v1067 * v967 * v1071
       + v1067 * v1023 * v1073
       + v1068 * v1044 * v1071;
  v257 = v1085 * (v1064 * v1071)
       + v1064 * v1073 * v1026
       + v1085 * v10 * v1026
       + v1051 * v1012 * v1026
       + v875 * v1085
       + v876 * v1026
       + v1045 * v1056 * v1064
       + v1036 * v1076 * v1085
       + v1036 * v1012 * v1064
       + v1067 * v967 * v1026
       + v1067 * v1023 * v1085
       + v1068 * v1044 * v1026;
  v199 = v876 * v1023
       + v875 * v967
       + v1045 * v1056 * v1044
       + v1036 * v1076 * v967
       + v1036 * v1012 * v1044
       + v1067 * v967 * v1023
       + v1068 * v1044 * v1023;
  v248 = v372 + v8 * v1073 * v1071;
  v266 = v734 + v8 * v1073 * v1076;
  v836 = v369 + v8 * v1073 * v1056;
  v644 = v1067 * (v1075 * v967)
       + v1075 * v1044 * v1068
       + v1067 * v1078 * v1068
       + v1079 * v1058 * v1030
       + v1079 * v1076 * v1034
       + v1034 * v1044 * v1032
       + v1034 * v967 * v1030
       + v1030 * v1078 * v1032
       + v1060 * v10 * v1032
       + v1060 * v1073 * v1030
       + v8 * v1042 * v1032
       + v8 * v1073 * v1034;
  v728 = v1067 * (v1026 * v1073)
       + v1026 * v10 * v1068
       + v1051 * v1012 * v1029
       + v875 * v1068
       + v876 * v1029
       + v1045 * v1056 * v1067
       + v1036 * v1076 * v1068
       + v1036 * v1012 * v1067
       + v1067 * v967 * v1029
       + v1067 * v1023 * v1068
       + v1068 * v1044 * v1029
       + v8 * v1073 * v978;
  v249 = v657 - v1069 * v1079 * v1071;
  v64 = v197
      + v8 * v1073 * v1040
      + v8 * v1071 * v1079
      + v1062 * v1047 * v1040
      + v1062 * v1071 * v1084
      + v1054 * v1047 * v1079
      + v1054 * v1073 * v1084
      + v1084 * v1012 * v1040;
  v370 = v1032 * v1078 * v1044
       + v1030 * v1078 * v967
       + v1060 * v1047 * v967
       + v1060 * v1073 * v1044
       + v8 * v1042 * v967
       + v8 * v1073 * v1078
       + v1062 * v1042 * v1044
       + v1062 * v1047 * v1078
       + v1069 * v1076 * v967
       + v1069 * v1012 * v1044
       + v1084 * v1058 * v967
       + v1084 * v1012 * v1078;
  v198 = v1034 * (v1062 * v10)
       + v1062 * v1042 * v1030
       + v1069 * v1076 * v1032
       + v1069 * v1012 * v1030
       + v1084 * v1058 * v1032
       + v1084 * v1012 * v1034;
  v237 = v748 + v1079 * v1076 * v1042;
  v260 = v64 + v1084 * v1056 * v1079 + v1079 * v1076 * v1040;
  v174 = v1068 * v1000
       + v7 * v8 * v1068
       + v994 * v1068
       + v1084 * v1079 * v1030
       + v1084 * v1076 * v967
       + v1030 * v1044 * v967
       + v8 * v1047 * v967
       + v8 * v1073 * v1044
       + v1062 * v1047 * v1044
       + v1084 * v1012 * v1044
       + v1079 * v1076 * v1044;
  v182 = v1067 * (v1045 * v1079)
       + v11 * v1062 * v1067
       + v1068 * v1032 * v1067
       + v1084 * v1079 * v1032
       + v1032 * v967 * v1044
       + v1079 * v1012 * v1044
       + v1062 * v1073 * v1044
       + v8 * v1073 * v967
       + v1062 * v10 * v967
       + v1084 * v1012 * v967
       + v1079 * v1076 * v967;
  v373 = v1068 * (v1051 * v1076)
       + v1064 * v1047 * v1068
       + v1067 * v1044 * v1068
       + v1064 * v1073 * v1067
       + v11 * v1047 * v1067
       + v1051 * v1012 * v1067
       + v876 * v1067
       + v1084 * v1076 * v1032
       + v1030 * v1044 * v1032
       + v8 * v1047 * v1032
       + v8 * v1073 * v1030
       + v1062 * v1047 * v1030
       + v1084 * v1012 * v1030
       + v1079 * v1076 * v1030;
  v658 = v1067 * (v1045 * v1012)
       + v1085 * v1073 * v1067
       + v1068 * v967 * v1067
       + v7 * v1073 * v1068
       + v1085 * v1047 * v1068
       + v1051 * v1012 * v1068
       + v876 * v1068
       + v1032 * v967 * v1030
       + v1079 * v1012 * v1030
       + v1062 * v1073 * v1030
       + v8 * v1073 * v1032
       + v1062 * v1047 * v1032
       + v1084 * v1012 * v1032
       + v1079 * v1076 * v1032;
  v717 = v978 * (v1062 * v1047)
       + v8 * v1071 * v1032
       + v1062 * v1071 * v1030
       + v1054 * v1047 * v1032
       + v1054 * v1073 * v1030
       + v1084 * v1012 * v978
       + v1084 * v1056 * v1032
       + v1079 * v1076 * v978
       + v1079 * v1056 * v1030
       + v1040 * v1076 * v1032
       + v1040 * v1012 * v1030
       + v1030 * v967 * v978;
  v240 = v1085 * (v1064 * v1047)
       + v1030 * v967 * v1082
       + v1051 * v1076 * v1085
       + v1067 * v1044 * v1085
       + v1051 * v1012 * v1064
       + v876 * v1064
       + v1067 * v967 * v1064
       + v1068 * v1044 * v1064
       + v1084 * v1076 * v1062
       + v1030 * v1044 * v1062
       + v1082 * v1047 * v1062
       + v1084 * v1012 * v1082
       + v1079 * v1076 * v1082
       + v1032 * v1044 * v1082;
  v241 = v1064 * (v1085 * v1073)
       + v1030 * v967 * v1062
       + v1045 * v1012 * v1064
       + v1068 * v967 * v1064
       + v1051 * v1012 * v1085
       + v876 * v1085
       + v1067 * v967 * v1085
       + v1068 * v1044 * v1085
       + v1032 * v967 * v1082
       + v1079 * v1012 * v1082
       + v1062 * v1073 * v1082
       + v1084 * v1012 * v1062
       + v1079 * v1076 * v1062
       + v1032 * v1044 * v1062;
  v286 = v1062 * v1071 * v1044
       + v1062 * v1047 * v1023
       + v1054 * v1047 * v967
       + v1054 * v1073 * v1044
       + v1084 * v1012 * v1023
       + v1084 * v1056 * v967
       + v1079 * v1076 * v1023
       + v1079 * v1056 * v1044
       + v1040 * v1076 * v967
       + v1040 * v1012 * v1044
       + v1030 * v967 * v1023
       + v1032 * v1044 * v1023;
  v208 = v978 * (v1032 * v1044) + v1030 * v1023 * v1032;
  v238 = v667 - v59 * v1073 + v1032 * v967 * v1062;
  v210 = v59 * v967
       + v11 * v1073 * v1068
       - v1007 * v967
       + v32 * v967
       + v1062 * v1073 * v1032
       + v62 * v967
       - v976 * v967
       + v1045 * v1012 * v1068
       + v961 * v967
       + v975 * v967
       - v995 * v967
       + v1079 * v1012 * v1032;
  v153 = v8 * 1.5 * (v1062 * v1062)
       + v976 * v1082
       + v1007 * v1082
       + v32 * v1082
       + v975 * v1082
       - v995 * v1082
       - v59 * v1082
       - v62 * v1082
       - v961 * v1082
       + v1032 * v967 * v1047
       + v1079 * v1012 * v1047
       + v1062 * v1073 * v1047;
  v869 = v1062 * v1062 * (v1054 * 1.5)
       + v976 * v1054
       + v1007 * v1054
       + v32 * v1054
       + v975 * v1054
       - v995 * v1054
       - v59 * v1054
       - v62 * v1054
       - v961 * v1054
       + v1032 * v967 * v1071
       + v1079 * v1012 * v1071
       + v1062 * v1073 * v1071;
  v251 = -(v1030 * v1032 * v1012)
       - v8 * v1062 * v1012
       - v7 * v11 * v1012
       - v1067 * v1068 * v1012
       + v1030 * v967 * v1079
       + v1085 * v1073 * v1051
       + v1045 * v1012 * v1051
       + v1068 * v967 * v1051
       + v7 * v1073 * v1045
       + v1085 * v10 * v1045
       + v1067 * v967 * v1045
       + v1068 * v1044 * v1045
       + v1032 * v967 * v1084
       + v1079 * v1012 * v1084
       + v1062 * v1073 * v1084;
  v177 = v1068 * (v1036 * v1079)
       + v1045 * v1040 * v1068
       + v1062 * v1054 * v1032
       + v1079 * v1040 * v1032
       + v1032 * v967 * v1023
       + v1079 * v1012 * v1023
       + v1062 * v1073 * v1023;
  v178 = v1068 * (v1036 * v1012)
       + v1045 * v1056 * v1068
       + v1032 * v967 * v978
       + v1079 * v1012 * v978
       + v1062 * v1073 * v978;
  v227 = v1026 * (v1075 * v1032)
       + v1068 * v1034 * v1026
       + v1045 * v1069 * v1026
       + v1049 * v1079 * v1026
       + v1029 * v1032 * v1038
       + v1029 * v1034 * v11
       + v1068 * v978 * v1038
       + v1032 * v1023 * v1042
       + v1069 * v1056 * v1073
       + v1054 * v1042 * v1073
       + v978 * v967 * v1042
       + v1040 * v1058 * v1073;
  v235 = v1042 * (v1078 * v1023)
       + v1058 * v1056 * v1042
       - v1069 * v1040 * v1042
       - v1034 * v978 * v1042
       - v1049 * v1036 * v1042
       - v1075 * v1029 * v1042
       + v918 * v1026
       + v1049 * v1058 * v1026
       + v1049 * v1056 * v1038
       + v1036 * v1058 * v1038
       + v848 * v1026
       + v1075 * v1023 * v1038
       + v1029 * v1078 * v1038
       + v1040 * v1058 * v1060;
  v234 = v1038 * (v1036 * v1076)
       + v1064 * v1071 * v1038
       + v1036 * v1058 * v1064
       + v1049 * v1076 * v1026
       + v1029 * v1044 * v1038
       + v1029 * v1078 * v1064
       + v1067 * v1023 * v1038
       + v1075 * v1023 * v1064
       + v875 * v1038
       + v1049 * v1056 * v1064
       + v1026 * v10 * v1038
       + v12 * v1042 * v1064;
  v181 = v1069 * v1040 * v1032
       + v1079 * v1040 * v1034
       + v1062 * v1054 * v1034
       + v1060 * v1054 * v1032
       + v1045 * v1069 * v1029
       + v1049 * v1079 * v1029
       + v1054 * v1073 * v1078
       + v1054 * v1042 * v967
       + v978 * v967 * v1078
       + v1040 * v1058 * v967;
  v220 = v1034 * (v1054 * v10)
       + v1060 * v1071 * v1030
       + v978 * v1078 * v1030
       + v1084 * v1056 * v1034
       + v8 * v1071 * v1034
       + v1069 * v1056 * v1030
       + v1030 * v1023 * v1034
       + v1054 * v1042 * v1030
       + v1040 * v1058 * v1030;
  v175 = v762 + v1040 * v1058 * v1032;
  v226 = *v0 * v793
       + v1029 * v1078 * v11
       + v1079 * v1058 * v1054
       + v1079 * v1056 * v1060
       + v1034 * v1023 * v1062
       + v1060 * v1071 * v1062
       + v978 * v1078 * v1062
       + v1040 * v1012 * v1060
       + v1032 * v1023 * v1060
       + v1069 * v1056 * v1062
       + v1054 * v1073 * v1060
       + v1054 * v1042 * v1062;
  v756 = v12 * v12 * -0.5 * v1069
       - v28 * v1069
       - v991 * v1069
       - v41 * v1069
       + v1075 * v978 * v1036
       + v1029 * v1034 * v1036
       + v1060 * v1054 * v1040
       + v1034 * v978 * v1040
       + v1040 * v1058 * v1056
       + v1054 * v1042 * v1056;
  v223 = v276 + v1069 * v1056 * v10;
  v213 = v1029 * v918
       + v943 * v1075
       + v12 * v1042 * v1075
       + v1049 * v1058 * v1029
       + v1049 * v1056 * v1075
       + v1036 * v1058 * v1075
       + v1040 * v1058 * v1034
       + v1054 * v1042 * v1034
       + v1069 * v1056 * v1034
       + v1060 * v1042 * v978
       + v1069 * v1058 * v978
       + v978 * v1078 * v1034
       + v1060 * v1071 * v1034;
  v221 = v1054 * (v1069 * v1079)
       + v1034 * v1032 * v1054
       + v1032 * v978 * v1060
       + v1062 * v1071 * v1042
       + v1060 * v1071 * v1073
       + v978 * v1078 * v1073
       + v1040 * v1012 * v1042
       + v1032 * v1078 * v1071
       + v1034 * v967 * v1071
       + v1079 * v1058 * v1071
       + v1079 * v1056 * v1042
       + v1034 * v1023 * v1073;
  v173 = v1075 * (v1029 * v1023)
       + v1036 * v1056 * v1075
       + v943 * v1029
       + v19 * v1042 * v1029
       + v1049 * v1056 * v1029
       + v1036 * v1058 * v1029
       + v1040 * v1058 * v978
       + v1054 * v1042 * v978
       + v19 * v1071 * v1075
       + v1069 * v1056 * v978
       + v1060 * v1071 * v978
       + v1034 * v1023 * v978;
  v277 = v836 + v8 * v1071 * v1012;
  v668 = v809 + v8 * v1073 * v1023 + v8 * v1071 * v967;
  v65 = v978 * v978 * 0.5;
  v722 = v65 * v1044
       + v28 * v1044
       + v991 * v1044
       + v990 * v1044
       + v1023 * v1023 * 1.5 * v1044
       - v984 * v1044
       - v1009 * v1044
       - v963 * v1044
       - v27 * v1044
       + v12 * v1071 * v1067
       + v1036 * v1056 * v1067
       + v978 * v1023 * v1030
       + v1054 * v1071 * v1030
       + v8 * v1071 * v978;
  v303 = v1029 * (*v0 * v1082)
       + v1064 * v1060 * v1029
       + v1036 * v1069 * v1067
       + v1051 * v1040 * v1075
       + v1049 * v1040 * v1067
       + v19 * v1082 * v1075
       + v19 * v1060 * v1067
       + v1064 * v1054 * v1075
       + v1011 * v1067
       + v1036 * v1084 * v1075
       + v1060 * v1071 * v1044
       + v1054 * v10 * v1078;
  v150 = v203
       + v8 * v1073 * v1054
       + v8 * v1071 * v1062
       + v1062 * v10 * v1054
       + v1084 * v1012 * v1054
       + v1084 * v1056 * v1062
       + v1079 * v1076 * v1054
       + v1079 * v1056 * v8
       + v1040 * v1076 * v1062;
  v176 = v1029 * (v1051 * v1040)
       + v12 * v1082 * v1029
       + v1036 * v1084 * v1029
       + v1082 * v1054 * v978
       + v1084 * v1040 * v978
       + v1040 * v1056 * v1044
       + v1054 * v1071 * v1044
       + v1082 * v1071 * v1023
       + v1054 * v10 * v1023
       + v1084 * v1056 * v1023
       + v1040 * v1076 * v1023;
  v192 = v1029 * (v1051 * v1076)
       + v7 * v1047 * v1029
       + v1030 * v1044 * v978
       + v1082 * v1047 * v978
       + v1082 * v1071 * v1030
       + v1054 * v1047 * v1030
       + v1084 * v1056 * v1030
       + v1040 * v1076 * v1030;
  v168 = v1067 * (v1036 * v1084)
       + v1051 * v1040 * v1067
       + v1082 * v1054 * v1030
       + v1084 * v1040 * v1030
       + v1084 * v1076 * v1023
       + v1030 * v1044 * v1023
       + v1082 * v1047 * v1023
       + v1082 * v1071 * v1044
       + v1054 * v1047 * v1044
       + v1084 * v1056 * v1044
       + v1040 * v1076 * v1044;
  v169 = v978 * (v1084 * v1056) + v1054 * v10 * v978 + v1040 * v1076 * v978;
  v268 = v267 + v1054 * v1071 * v1047 + v1040 * v1056 * v1047 + v978 * v1023 * v1047;
  v66 = v674
      - v27 * v1062
      - v28 * v1062
      - v990 * v1062
      - v41 * v1062
      + v1036 * v1040 * v11
      + v1040 * v1056 * v1073
      + v978 * v1023 * v1073;
  v67 = v672 + v978 * v1023 * v1071;
  v129 = v1054 * (v1040 * v1056) + v984 * v1071 + v41 * v1071 + v963 * v1071 - v65 * v1071 + v978 * v1023 * v1054;
  v134 = v1054 * v1071 * v1056
       - v963 * v1040
       + v19 * v1054 * v1036
       + v1040 * 0.5 * (v1056 * v1056)
       - v28 * v1040
       + v65 * v1040
       - v41 * v1040
       + v1009 * v1040
       + v27 * v1040
       + v978 * v1023 * v1056;
  v163 = v1036 * (v1029 * v1023)
       + v27 * v1056
       - v984 * v1056
       + v19 * v1071 * v1036
       + v1054 * v1071 * v1040
       - v963 * v1056
       + v990 * v1056
       + v41 * v1056
       + v1009 * v1056
       - v65 * v1056
       + v978 * v1023 * v1040;
  v675 = v984 * v1030
       + v28 * v1030
       + v1009 * v1030
       + v60 * v1030
       + v1030 * 0.5 * (v1023 * v1023)
       - v963 * v1030
       - v27 * v1030
       - v991 * v1030
       - v990 * v1030
       + v978 * v1023 * v1044;
  v172 = v1029 * (v1036 * v1012) + v1045 * v1056 * v1029 + v1040 * v1056 * v1032 + v978 * v1023 * v1032;
  v673 = v269
       + v528
       + v1064 * v842
       + v1038 * v10 * v1085
       + v1064 * v1042 * v1085
       + v1049 * v1076 * v1085
       + v1049 * v1012 * v1064
       + v1051 * v1058 * v1085
       + v1051 * v1012 * v1038
       + v1045 * v1058 * v1064
       + v876 * v1038
       + v1075 * v1044 * v1085
       + v1075 * v967 * v1064
       + v1067 * v1078 * v1085
       + v948;
  v532 = v66 + v19 * v1054 * v1085 + v1029 * v978 * v1085;
  v529 = v67 + v1029 * v978 * v19 - v990 * v1054 + v984 * v1054 - v41 * v1054;
  v68 = -(*v0 * v1030);
  v838 = -(v1060 * v1051);
  v783 = v1049 * v1042;
  v940 = v8 * v1058;
  v69 = v1051 * v1042;
  v837 = -(v8 * v1049);
  v934 = v1060 * v1058;
  v70 = -(v7 * v1034);
  v814 = v7 * v1084;
  v812 = -(v10 * v1084);
  v807 = v8 * v1076;
  v810 = v1051 * v10;
  v71 = -(v10 * v1069);
  v801 = -(v8 * v1051);
  v893 = v1045 * v10;
  v872 = v1036 * v10;
  v959 = -(v1042 * v1040);
  v749 = -(*v0 * v1032);
  v816 = -(v1042 * v1079);
  v949 = v1036 * v1042;
  v922 = v7 * v1079;
  v72 = -(v1042 * v1084);
  v820 = v1045 * v1042;
  v160 = v1038 * v1079 * v1044
       + v1038 * v1084 * v967
       + v68 * v1012
       + v749 * v1076
       + v1064 * v1069 * v967
       + v1064 * v1079 * v1078
       + v70 * v1012;
  v165 = *v0 * v1084;
  v730 = -(*v0 * v978);
  v735 = *v0 * v1040;
  v127 = v7 * v1040;
  v769 = *v0 * v1069;
  v139 = v444
       + v906 * v1073
       + v7 * v1042 * v1073
       + v11 * v1042 * v1047
       + v1049 * v1076 * v1073
       + v1049 * v1012 * v1047
       + v1051 * v1012 * v1042;
  v853 = v1071 * (v1049 * v1058)
       - v1058 * v1056 * v1038
       + v1075 * v1023 * v1042
       + v1029 * v1078 * v1042
       + v1075 * v1029 * v1038
       + v985 * v1054
       + v1049 * v1069 * v1054
       + v1049 * v1040 * v1060
       + v1075 * v1034 * v1054
       + v1075 * v978 * v1060
       + v1029 * v1034 * v1060
       + v1049 * v1056 * v1042
       + v1036 * v1058 * v1042;
  v170 = v911 + v1075 * v1023 * v10 + v1036 * v1076 * v1042;
  v851 = -(v1060 * v1049);
  v912 = v1069 * v1058 * v1060
       - v958 * v1042
       - v889 * v1042
       + v723 * 0.5 * v1042
       - v903 * v1042
       + v923 * v1042
       + v920 * v1042
       + v1034 * v1078 * v1060
       + v848 * *v0
       + v17 * v1042
       + v992 * v1042
       - v986 * v1042;
  v939 = v1060 * v1076;
  v282 = v1038 * (v1049 * v1076)
       + v918 * v1064
       + v848 * v1064
       + v1049 * v1058 * v1064
       + v1067 * v1078 * v1038
       + v1075 * v1044 * v1038
       + v1051 * v1058 * v1038
       + v1030 * v1078 * v1060
       + v1034 * v1044 * v1060
       + v1034 * v1078 * v8
       + v1069 * v1058 * v1082
       + v1060 * v1042 * v1082
       + v1078 * v1044 * v1042
       + v1058 * v1076 * v1042;
  v445 = v797 - v1005 * v1042 - v1014 * v1042 - v965 * v1042 - v988 * v1042;
  v896 = -(v1054 * v1051);
  v73 = v1068 * v1068 * 0.5;
  v270 = v790 - v1007 * v1042 - v1002 * v1042 - v995 * v1042 - v73 * v1042;
  v962 = -(v1054 * v1049);
  v74 = v41;
  v75 = v27;
  v822 = v1054 * v1076;
  v669 = v1054 * (v978 * v1078)
       + v1069 * v1056 * v1054
       + v1060 * v1071 * v1054
       + v1034 * v1023 * v1054
       + v978 * v1023 * v1060
       + v1040 * v1056 * v1060
       + v963 * v1042
       + v1071 * v1071 * 1.5 * v1042
       + v990 * v1042
       + v74 * v1042
       - v1009 * v1042
       - v65 * v1042
       - v75 * v1042
       - v1024 * v1042
       + v984 * v1042;
  v781 = -(v1042 * v1069);
  v897 = v838 * v1078
       + v68 * v1058
       + v1049 * v1042 * v1030
       + v1082 * v1058 * v1075
       + v1051 * v1042 * v1034
       + -(v1082 * v1049) * v1078
       + v1060 * v1058 * v1067
       + v70 * v1058
       + v781 * v1067
       + v1064 * v1069 * v1078;
  v76 = -(v1062 * v1049);
  v794 = -(v1064 * v1030);
  v839 = v1062 * v1076;
  v77 = v1064 * v1084 * v1078
      + v70 * v1076
      + v812 * v1075
      + v1082 * v1076 * v1075
      + -(v1082 * v1049) * v1044
      + v1051 * v10 * v1034
      + v71 * v1067
      + v801 * v1078
      + v68 * v1076
      + v1051 * v1042 * v1030
      + v1082 * v1058 * v1067
      + v794 * v1058
      + v165 * v1044
      + v838 * v1044
      + v1064 * v1069 * v1044;
  v122 = v68 * v1056
       + v1038 * v1084 * v1023
       + v730 * v1076
       + v1038 * v1040 * v1044
       + v1064 * v1040 * v1078
       + v70 * v1056
       + v1064 * v1069 * v1023;
  v1043 = v1054 * v1058;
  v171 = v680
       - v75 * v1060
       - v1024 * v1060
       - v990 * v1060
       - v74 * v1060
       - v1049 * v1036 * v1054
       + v1036 * v1040 * v1038
       + v1029 * v978 * v1038
       + v19 * v1054 * v1038
       + v1049 * v1040 * v19;
  v148 = -(v1062 * v1051);
  v791 = -(v8 * v1036);
  v121 = v897 + v1060 * v1076 * v1075 + v851 * v1044 + v1049 * v10 * v1034 + v769 * v1044 + v71 * v1075 + v72 * v1075;
  v681 = v77 + v1060 * v1076 * v1067 + v72 * v1067 + v1049 * v10 * v1030;
  v776 = v1067 * (v1062 * v1058)
       + -(v8 * v1045) * v1078
       + v1062 * v1076 * v1075
       + v76 * v1044
       + v148 * v1078
       + v69 * v1032
       + v820 * v1030
       + v72 * v1068
       + v816 * v1067
       + v1049 * v1047 * v1032
       + v1045 * v1047 * v1034
       + v71 * v1068;
  v117 = v791 * v1078
       + v837 * v1023
       + v1054 * v1058 * v1067
       + v1054 * v1076 * v1075
       + v962 * v1044
       + v896 * v1078
       + v69 * v978
       + v949 * v1030
       + v72 * v1029
       + v959 * v1067
       + v1049 * v1047 * v978
       + v1036 * v1047 * v1034
       + v71 * v1029;
  v158 = v486 + v1049 * v1051 * *v0;
  v164 = v451 + v918 * v1073 + v1049 * v1045 * *v0 + v985 * v1062;
  v141 = v752 + v1064 * v1060 * v1062;
  v166 = v853 - v1078 * v1023 * v1038 - v1069 * v1040 * v1038;
  v167 = v905 + v1045 * v1012 * v1073 + v73 * v11 + v1045 * v1079 * v1062;
  v114 = v494 + v1045 * v1058 * v1071 + v1075 * v1023 * v1073 + v19 * v1060 * v1062;
  v112 = v684 - v1009 * v1085 - v65 * v1085 - v990 * v1085 - v74 * v1085 - v1012 * v1056 * v19 + v19 * v1054 * v1062;
  v495 = v869 + v11 * v1062 * v1026 + v1045 * v1079 * v1026;
  v143 = v827 - v965 * v1060 - v988 * v1060 + v994 * v1038 + v1000 * v1038 + v1064 * v8 * v1038;
  v849 = v11 * v1040;
  v452 = v533 - v1058 * v1012 * v1062;
  v78 = -(v11 * v1034);
  v846 = -(v1064 * v1032);
  v854 = -(v1071 * v1079);
  v145 = v831 + v1051 * v1040 * v1038 + v1049 * v1040 * v1064 + v19 * v8 * v1038;
  v534 = v912 + v1049 * v1058 * *v0;
  v753 = -(*v0 * v1034);
  v913 = -(v1071 * v1069);
  v832 = v1060 * v1012;
  v898 = v11 * v1069;
  v825 = -(v1054 * v1045);
  v828 = v1054 * v1012;
  v767 = -(v1062 * v1036);
  v79 = v1032 * v783
      + v816 * v1075
      + v1060 * v1012 * v1075
      + v781 * v1068
      + v11 * v1069 * v1078
      + v753 * v1012
      + v1038 * v1079 * v1078
      + v76 * v1078
      + v1038 * v1069 * v967
      + v1062 * v1058 * v1075;
  v1039 = v1062 * v1012;
  v152 = -(v1060 * v1045);
  v870 = -(v1062 * v1045);
  v774 = -(v1073 * v1079);
  v771 = -(v11 * v1032);
  v120 = v1049 * v1071;
  v824 = -(v1060 * v1036);
  v162 = -(v1073 * v1069);
  v487 = v537 - v971 * v1049;
  v538 = v252 + v1049 * v1040 * v1051 + v19 * v8 * v1049 + v19 * v1060 * v1051 + v1064 * v1054 * v1049;
  v113 = v756 + v1029 * v978 * v1049 + v1036 * v1040 * v1049 + v19 * v1054 * v1049;
  v798 = -(v10 * v1079);
  v126 = v776 + v798 * v1075 + v1049 * v1073 * v1030;
  v757 = v11 * v1079;
  v123 = v824 * v967
       + v152 * v1023
       + v1062 * v1058 * v1029
       + v1062 * v1056 * v1075
       + v76 * v1023
       + v767 * v1078
       + v1054 * v1058 * v1068
       + v1054 * v1012 * v1075
       + v962 * v967
       + v825 * v1078
       + v820 * v978
       + v949 * v1032
       + v816 * v1029
       + v959 * v1068
       + v1049 * v1073 * v978;
  v777 = v1045 * v1071;
  v140 = v79
       + v162 * v1075
       + v851 * v967
       + v820 * v1034
       + v1060 * v1058 * v1068
       + v1049 * v1073 * v1034
       + v749 * v1058
       + v78 * v1058;
  v685 = v160 + v846 * v1058 + v1085 * v1069 * v1044 + v1085 * v1084 * v1078 + v78 * v1076;
  v124 = v1068 * (v1060 * v1012)
       + v1062 * v1012 * v1075
       + v816 * v1068
       + v152 * v967
       + v870 * v1078
       + v76 * v967
       + v774 * v1075
       + v771 * v1058
       + *v0 * v1079 * v967
       + v749 * v1012
       + v820 * v1032
       + v1062 * v1058 * v1068
       + v162 * v1068
       + v11 * v1079 * v1078
       + v1049 * v1073 * v1032
       + v78 * v1012;
  v118 = v1034 * (v1045 * v1071)
       + v1049 * v1071 * v1032
       + v913 * v1068
       + v854 * v1075
       + v749 * v1056
       + v730 * v1012
       + *v0 * v1079 * v1023
       + v735 * v967
       + v11 * v1040 * v1078
       + v78 * v1056;
  v80 = v158 + v1049 * v1069 * v8;
  v159 = v214 + v1051 * v1058 * v1047 + v1049 * v1076 * v1047 - v1069 * v1084 * v1064;
  v161 = v353 - v1058 * v1076 * v1064 + v1049 * v1051 * v1064;
  v133 = v284 + v1049 * v1045 * v1064;
  v81 = v530 - v1058 * v1076 * v11 - v1058 * v1012 * v1064;
  v253 = v143 + v1051 * v1069 * v1064 + v1049 * v1084 * v1064;
  v531 = v745 + v1064 * v8 * v1026 + v1000 * v1026 + v994 * v1026;
  v285 = v153 + v11 * v1062 * v1064 + v1045 * v1079 * v1064;
  v154 = v145 + v19 * v1060 * v1064 + v1011 * v1064;
  v354 = v547 - v1058 * v1012 * v1054;
  v1065 = -(v1064 * v978);
  v115 = v80 + v985 * v8;
  v128 = v141 + v11 * v1060 * v8;
  v132 = v81 - v1078 * v1044 * v11;
  v750 = -(v11 * v978);
  v215 = v498 - v1049 * v1051 * v1082 - v1078 * v1044 * v1082;
  v499 = v682 + v1014 * v8;
  v683 = v535 - v971 * v1079;
  v817 = v19 * v1079;
  v1080 = -(v19 * v1030);
  v440 = -(v1078 * v1023 * v1082)
       - v1076 * v1056 * v1060
       - v1058 * v1056 * v1082
       - v1044 * v1023 * v1060
       + v1084 * v1058 * v1071
       - v1058 * v1076 * v1054
       - v52 * v1054
       - v1049 * v1051 * v1054
       - v1067 * v1029 * v1060
       - v1075 * v1029 * v8
       - v1051 * v1036 * v1060
       - v1049 * v1036 * v8;
  v536 = v150 + v1040 * v1012 * v8;
  v548 = v539 - v971 * v1045;
  v821 = v8 * v1056;
  v746 = -(v19 * v1032);
  v648 = v647 + v995 * v1045 - v917 * v1045;
  v116 = v1040 * (v1032 * v978)
       + v1062 * v1054 * v1040
       + v1054 * v1071 * v1012
       + v1062 * v1071 * v1056
       + v1054 * v1073 * v1056
       + v1032 * v1023 * v1056
       + v978 * v967 * v1056
       - v1073 * v1071 * v1040
       - v967 * v1023 * v1040
       - v11 * v19 * v1040
       - v1068 * v1029 * v1040
       + v1036 * v1040 * v1045
       + v1029 * v978 * v1045;
  v119 = v179 + v11 * v1073 * v1045;
  v786 = v1045 * v1073;
  v336 = v335 + v1068 * v967 * v1071 + v1045 * v1012 * v1071 + v1045 * v1036 * v11;
  v503 = v156 + v1018 * v1085 + v1000 * v1085 + v994 * v1085;
  v82 = -(v11 * v1030);
  v83 = -(v8 * v1045);
  v1050 = -(v1073 * v1084);
  v125 = v1051 * v1073;
  v138 = v8 * v1012;
  v137 = v685 + v82 * v1058;
  v136 = v846 * v1076
       + v1062 * v1076 * v1067
       + v148 * v1044
       + v83 * v1044
       + v798 * v1067
       + v1045 * v1047 * v1030
       + -(v1082 * v1051) * v967
       + v1050 * v1067
       + v1051 * v1047 * v1032
       + v1051 * v1073 * v1030
       + v1082 * v1076 * v1068
       + v812 * v1068
       + v1082 * v1012 * v1067
       + v794 * v1012
       + v814 * v967
       + v82 * v1076;
  v142 = v757 * v1044
       + v1050 * v1068
       + v83 * v967
       + v1062 * v1012 * v1067
       + v870 * v1044
       + v1051 * v1073 * v1032
       + v1045 * v1073 * v1030
       + v774 * v1067
       + v922 * v967
       + v846 * v1012
       + v8 * v1012 * v1068
       + v798 * v1068
       + v1045 * v10 * v1032
       + v771 * v1076
       + v11 * v1084 * v967
       + v148 * v967
       + v82 * v1012;
  v686 = v148 * v1023
       + v767 * v1044
       + v1062 * v1056 * v1067
       + v1062 * v1076 * v1029
       + -(v1082 * v1036) * v967
       + v83 * v1023
       + v1082 * v1056 * v1068
       + v1082 * v1012 * v1029
       + -(v1026 * v1032) * v1076
       + -(v1026 * v1030) * v1012
       + v817 * v1044
       + v1026 * v1084 * v967
       + v750 * v1076
       + v82 * v1056
       + v1085 * v1040 * v1044
       + v1085 * v1084 * v1023
       + v1065 * v1012
       + v846 * v1056;
  v144 = v287 + v1068 * v967 * v10;
  v146 = v742 + v1029 * v1078 * v1073;
  v84 = v1045 * v1040;
  v85 = v687 - v65 * v19 + v1036 * v1056 * v1071;
  v147 = v112 + v1045 * v1040 * v1054 + v1029 * v1023 * v1073 + v1036 * v1056 * v1073;
  v149 = v154 + v1051 * v1069 * v19;
  v151 = v440 - v1078 * v1044 * v1054;
  v180 = v230 - v889 * v1047 - v903 * v1047 - v958 * v1047 - v986 * v1047 + v923 * v1047;
  v155 = v232 - v889 * v1073 - v903 * v1073 - v958 * v1073 - v986 * v1073;
  v157 = v739 + v1078 * v1044 * v1047 + v1058 * v1076 * v1047;
  v194 = v193 + v931 * v1073;
  v231 = v186 + v976 * v1047 - v1002 * v1047;
  v229 = v228 - v903 * v1071 - v958 * v1071 - v986 * v1071;
  v233 = v195 + v931 * v1071 - v965 * v1071 - v988 * v1071;
  v288 = v187 + v976 * v1071 - v1002 * v1071 - v995 * v1071 - v73 * v1071;
  v86 = v129 + v1029 * v1023 * v19 - v1024 * v1071 + v991 * v1071 - v1009 * v1071 + v990 * v1071 - v75 * v1071;
  v366 = v365 - v1060 * v8 * v1051;
  v441 = v653 - v1014 * v1051;
  v130 = v307 + v1029 * v1034 * v1040;
  v611 = v610 + v903 * v1069 - v920 * v1069;
  v540 = v506 - v957 * v1069 - v1008 * v1069 - v1078 * v1044 * v1069;
  v550 = v549 - v971 * v1069;
  v507 = v504 - v957 * v1084 - v1008 * v1084 - v1078 * v1044 * v1084;
  v654 = v598 + v994 * v1051;
  v87 = v134 + v984 * v1040 + v1029 * v978 * v1036;
  v743 = v1036 * v1073;
  v740 = v1036 * v1071;
  v1083 = v19 * v1040;
  v1046 = v1054 * v1056;
  v135 = -(v19 * v978);
  v688 = v87 - v991 * v1040;
  v847 = v19 * v1069;
  v188 = v1051 * v1071;
  v1052 = -(v1047 * v1040);
  v1070 = -(v1071 * v1084);
  v1086 = -(v1073 * v1040);
  v1074 = -(v1071 * v1040);
  v196 = v115 + v902 * v1060;
  v308 = v374 - v973 * v19;
  v505 = v114 + v11 * v1054 * v1060;
  v375 = v559 - v1058 * v1012 * v19;
  v1041 = v243 + v889 * v1060 + v903 * v1060;
  v1048 = v86 + v1036 * v1056 * v19;
  v88 = -(v19 * v1034);
  v560 = v509 - v977 * v1060 - v1078 * v1044 * v1060;
  v599 = v557 - v1058 * v1012 * v1060;
  v1027 = v553 - v1044 * v967 * v1060;
  v89 = v1060 * v1056;
  v90 = v851 * v1023
      + v753 * v1056
      + v959 * v1075
      + v824 * v1078
      + v735 * v1078
      + v769 * v1023
      + v781 * v1029
      + v949 * v1034
      + v730 * v1058;
  v91 = v1029 * (v1054 * v1058) + v1074 * v1075 + v730 * v1056;
  v510 = v273 + v84 * v1060 + v862 * v1054;
  v554 = v527 + v1018 * v1054;
  v558 = v516 + v833 * v1054;
  v731 = v85 - v990 * v19 + v997 * v1054;
  v244 = v649 + v19 * v1071 * v1056 + v75 * v1036 - v991 * v1036;
  v1061 = v113 + v1011 * v1036 + v19 * v1060 * v1036;
  v1072 = v116 + v11 * v1054 * v1036 + v19 * v1062 * v1036;
  v650 = v90 + v89 * v1075 + v783 * v978 + v88 * v1058 + v120 * v1034;
  v92 = -(v1054 * v1036);
  v274 = v121 + v753 * v1076;
  v1055 = v1034 * v783 + v769 * v1078 + v851 * v1078 + v934 * v1075 + v781 * v1075 + v753 * v1058;
  v782 = v496 + v1036 * v1058 * v1012 + v864 * v1058 + v981 * v1012 + v925 * v1058;
  v754 = v130 + v878 * v1058 + v1036 * v1056 * v1058 + v1029 * v1023 * v1058;
  v784 = v396 - v1022 * v1058;
  v852 = v551 - v952 * v1058;
  v1037 = v367 - v964 * v1058;
  v497 = v122 + v1065 * v1058 + v847 * v1044 + v19 * v1084 * v1078 + v88 * v1076 + v1080 * v1058;
  v517 = v118 + v898 * v1023 + v750 * v1058 + v847 * v967 + v817 * v1078 + v88 * v1012 + v746 * v1058;
  v1059 = v91
        + v824 * v1023
        + v962 * v1023
        + v92 * v1078
        + v120 * v978
        + v735 * v1023
        + v847 * v1023
        + v740 * v1034
        + v135 * v1058
        + v1083 * v1078
        + v89 * v1029
        + v949 * v978
        + v913 * v1029
        + v959 * v1029
        + v1046 * v1075
        + v88 * v1056;
  v397 = v1068 * v1086
       + v771 * v1056
       + v743 * v1032
       + v870 * v1023
       + v774 * v1029
       + v777 * v1032
       + v746 * v1012
       + v849 * v967
       + v757 * v1023
       + v767 * v967
       + v1062 * v1012 * v1029
       + v854 * v1068
       + v828 * v1068
       + v1062 * v1056 * v1068
       + v786 * v978
       + v825 * v967
       + v750 * v1012;
  v93 = v1029 * (v1062 * v1056)
      + v767 * v1023
      + v1074 * v1068
      + v849 * v1023
      + v750 * v1056
      + v743 * v978
      + v1046 * v1068
      + v1083 * v967
      + v92 * v967
      + v828 * v1029
      + v854 * v1029
      + v817 * v1023
      + v746 * v1056;
  v131 = v1068 * v774 + v757 * v967 + v771 * v1012;
  v772 = v313 + v906 * v1012;
  v94 = v310 + v955 * v1012 + v938 * v1012;
  v770 = v316 + v1006 * v1076 + v1025 * v1076 + v877 * v1012 + v880 * v1012;
  v775 = v410 + v877 * v1056 + v944 * v1012;
  v850 = v525 + v765 * v1012 + v737 * v1012;
  v950 = v561 - v952 * v1012;
  v960 = v119 - v1002 * v1012;
  v317 = v93 + v1086 * v1029 + v777 * v978 + v135 * v1012;
  v368 = v978 * v740 + v135 * v1056;
  v755 = v754 + v943 * v1056;
  v763 = v244 + v1029 * v1023 * v1056;
  v1013 = v163 + v991 * v1056 - v1024 * v1056;
  v95 = v801 * v1023 + v812 * v1029 + v794 * v1056;
  v1057 = v1029 * v1070
        + v1046 * v1067
        + v740 * v1030
        + v872 * v978
        + v19 * v1084 * v1023
        + v821 * v1029
        + v135 * v1076
        + v188 * v978
        + v822 * v1029
        + v1065 * v1056
        + v92 * v1044
        + v896 * v1023
        + v1052 * v1029
        + v127 * v1023
        + v1074 * v1067
        + v791 * v1023
        + v1083 * v1044
        + v1080 * v1056;
  v1081 = v95
        + v822 * v1067
        + v1070 * v1067
        + v1080 * v1076
        + v821 * v1067
        + v872 * v1030
        + v896 * v1044
        + v1052 * v1067
        + v188 * v1030
        + v127 * v1044
        + v19 * v1084 * v1044
        + v814 * v1023
        + v807 * v1029
        + v810 * v978
        + v791 * v1044
        + v1065 * v1076;
  v411 = v117 + v1052 * v1075 + v120 * v1030 + v188 * v1034;
  v758 = v922 * v1023 + v127 * v967 + v854 * v1067 + v1070 * v1068 + v777 * v1030 + v188 * v1032;
  v526 = v772 + v842 * v1076;
  v552 = v94 + v877 * v1076 + v880 * v1076;
  v562 = v350 + v1075 * v1023 * v1076 + v1001 * v1076;
  v768 = v417 - v1022 * v1076;
  v773 = v190 - v953 * v1076;
  v778 = v567 + v1015 * v1076;
  v1077 = v794 * v1076 + v807 * v1067 + v814 * v1044 + v801 * v1044 + v812 * v1067 + v810 * v1030;
  v290 = v289 + v947 * v1030 + v985 * v1030;
  v245 = v833 * v1030 + v994 * v1032 + v780 * v1030 + v819 * v1030 + v829 * v1030;
  v314 = v1030 * (v1068 * v1032) + v1003 * v1030;
  v855 = v184
       + v887 * v1067
       + v823 * v1067
       + v1018 * v978
       + v1000 * v978
       + v994 * v978
       + v907 * v1030
       + v882 * v1030
       + v910 * v1030;
  v815 = v478
       - v984 * v1067
       - v1009 * v1067
       - v991 * v1067
       - v990 * v1067
       + v963 * v1067
       + v27 * v1067
       + v1029 * v1023 * v1044
       + v909 * v1044
       + v887 * v1029
       + v823 * v1029
       + v972 * v1030;
  v351 = v1030 * (v1029 * v978) + v997 * v1030;
  v1063 = v185 + v994 * v1075 - v983 * v1030 - v1008 * v1030 - v977 * v1030 - v957 * v1030;
  v813 = v378 - v996 * v1032 + v833 * v1067 + v780 * v1067 + v819 * v1067 + v829 * v1067 + v930 * v1030;
  v802 = v174 - v932 * v1030 - v969 * v1030 - v891 * v1030 - v890 * v1030;
  v311 = v325 - v946 * v1030;
  v811 = v390 + v935 * v1034 + v1010 * v1030;
  v795 = v386 - v983 * v978 - v1008 * v978 - v977 * v978 - v957 * v978 - v823 * v1034 - v970 * v1030;
  v808 = v168 - v927 * v1030 - v915 * v1030 - v887 * v1030 - v823 * v1030;
  v792 = v216
       - v927 * v1032
       - v969 * v978
       - v915 * v1032
       - v840 * v1030
       - v945 * v1030
       - v891 * v978
       - v887 * v1032
       - v937 * v1030
       - v890 * v978
       - v823 * v1032
       - v954 * v1030;
  v1066 = v169
        + v927 * v1023
        + v915 * v1023
        - v941 * v1023
        - v935 * v1023
        - v887 * v1023
        - v823 * v1023
        + v1029 * v1023 * v1067
        + v944 * v1029
        + v885 * v1029
        + v875 * v1029
        + v800 * v1029
        + v865 * v1030;
  v96 = v758 + v1086 * v1067 + v1050 * v1029 + v743 * v1030;
  v479 = v123 + v743 * v1034;
  v191 = v299 + v918 * v967 + v862 * v1034 + v796 * v1034;
  v217 = v183
       + v938 * v1078
       + v955 * v1078
       + v879 * v1030
       + v902 * v1030
       + v888 * v1030
       + v835 * v1030
       + v994 * v1034
       + v1000 * v1034
       + v1018 * v1034;
  v189 = v1011 * v1032 + v952 * v1029 + v964 * v1068 + v868 * v978 + v901 * v1034 + v999 * v1032 + v861 * v1034;
  v326 = v490
       + v1029 * v1023 * v1078
       + v943 * v1023
       + v921 * v1023
       + v981 * v1023
       + v1001 * v1023
       + v964 * v1029
       + v970 * v1029
       + v1029 * v978 * v1034
       + v997 * v1034
       + v972 * v1034;
  v747 = v328 - v920 * v1034 - v992 * v1034 + v986 * v1034 - v958 * v1034 - v936 * v1034;
  v736 = v305 - v983 * v1034 - v1008 * v1034 - v977 * v1034 - v957 * v1034;
  v568 = v301 - v980 * v1034 - v971 * v1034;
  v744 = -(v980 * v1030)
       - v983 * v1032
       - v932 * v1034
       - v957 * v1032
       - v952 * v1030
       - v891 * v1034
       - v977 * v1032
       - v966 * v1030
       - v890 * v1034
       - v1008 * v1032
       - v971 * v1030
       - v969 * v1034;
  v391 = v331 - v975 * v1034 - v946 * v1034 - v976 * v1034 - v995 * v1034;
  v751 = v283 - v1015 * v1034 - v989 * v1034 - v964 * v1034 - v970 * v1034;
  v759 = v175 + v929 * v1029 + v926 * v1029 + v732 * v1034;
  v1031 = v173 + v865 * v1034 + v844 * v1034;
  v418 = v126 + v125 * v1034;
  v379 = v124 + v786 * v1034;
  v329 = v96 + v125 * v978 + v1052 * v1068 + v798 * v1029 + v872 * v1032;
  v387 = v317 + v740 * v1032;
  v491 = v131 + v870 * v967 + v786 * v1032;
  v300 = v1003 * v1034 + v1068 * v1032 * v1034 + v1006 * v1078 + v862 * v1032 + v796 * v1032;
  v302 = v314 + v833 * v1032 + v780 * v1032 + v819 * v1032 + v829 * v1032;
  v871 = v484 - v946 * v1029 + v1003 * v978 + v1068 * v1032 * v978 + v861 * v1032 + v901 * v1032 + v899 * v1032;
  v318 = v1068 * v967 * v1023 + v900 * v1032;
  v787 = v488
       - v984 * v1068
       - v1009 * v1068
       - v991 * v1068
       - v990 * v1068
       + v909 * v967
       + v937 * v1029
       + v954 * v1029
       + v972 * v1032
       + v997 * v1032;
  v332 = v861 * v978 + v1029 * v978 * v1032;
  v485 = v291 - v920 * v1032 - v936 * v1032 - v992 * v1032 - v958 * v1032;
  v489 = v211 - v966 * v1032 - v952 * v1032 - v980 * v1032 - v971 * v1032;
  v799 = v311 + v833 * v1068 + v780 * v1068 + v819 * v1068 + v829 * v1068 + v930 * v1032;
  v741 = v182 - v932 * v1032 - v969 * v1032 - v891 * v1032 - v890 * v1032;
  v873 = v204 - v840 * v1034 - v989 * v1032 - v1015 * v1032;
  v1035 = v177
        + v765 * v967
        + v737 * v967
        + v732 * v967
        + v803 * v967
        - v840 * v1032
        - v945 * v1032
        - v937 * v1032
        - v954 * v1032;
  v1053 = v294 - v963 * v1032 - v27 * v1032 - v991 * v1032 - v990 * v1032;
  v315 = v178 + v765 * v1032 + v737 * v1032 + v732 * v1032 + v803 * v1032;
  v97 = v172 + v844 * v1032 + v765 * v978;
  v1033 = v1068 * v972
        + v978 * v1023 * v967
        + v997 * v1068
        + v1029 * v978 * v1068
        + v861 * v1029
        + v901 * v1029
        + v899 * v1029
        + v900 * v1029
        + v892 * v978
        + v933 * v978
        + v865 * v967
        + v844 * v967
        + v765 * v1023
        + v737 * v1023;
  v312 = v97 + v737 * v978 + v732 * v978 + v803 * v978;
  v98 = v978 * v65 + v978 * 0.5 * (v1023 * v1023) - v990 * v978 - v27 * v978 + v997 * v1029 + v865 * v1023;
  v99 = v865 * v978 - v984 * v1023;
  v306 = v329 + v893 * v978;
  v766 = v189 + v925 * v1078 + v921 * v967 + v841 * v1078 + v943 * v967 + v862 * v978;
  v738 = v318
       + v1006 * v1023
       + v841 * v967
       + v925 * v967
       + v864 * v967
       + v859 * v967
       - v840 * v1068
       - v945 * v1068
       - v892 * v1068
       - v933 * v1068
       + v1025 * v1023
       + v937 * v1068
       + v954 * v1068
       + v1017 * v978;
  v319 = v326 + v1011 * v978 + v999 * v978;
  v295 = v351 + v907 * v978 + v882 * v978 + v910 * v978 + v884 * v978;
  v327 = v332 + v901 * v978 + v899 * v978 + v900 * v978;
  v352 = v296 - v920 * v978 - v936 * v978 - v992 * v978 - v958 * v978;
  v804 = v181 + v924 * v978 + v860 * v978;
  v333 = v406 - v980 * v978 - v971 * v978 - v966 * v978;
  v330 = v400 - v996 * v978;
  v407 = v362 - v946 * v978;
  v894 = v321 + v982 * v978 + v1010 * v978;
  v733 = v309 - v970 * v978;
  v866 = v176 - v927 * v978 - v915 * v978 - v887 * v978 - v823 * v978;
  v401 = v99 + v990 * v1023 + v844 * v978;
  v845 = v98 + v1024 * v978 - v963 * v978 + v1009 * v978 + v984 * v978 - v991 * v978 + v844 * v1023;
  v100 = v334 + v943 * v1078 + v918 * v1023;
  v101 = v918 * v1067 - v977 * v1078;
  v102 = -(v952 * v1078) - v966 * v1078 - v924 * v1078 + v968 * v1068 + v918 * v1068;
  v103 = v723 * 1.5;
  v724 = v1044 * v1044 * 1.5;
  v919 = v967 * v967 * 1.5;
  v711 = v245 + v955 * v967 + v938 * v967;
  v104 = v1075 * v955 + v938 * v1075;
  v867 = v100 + v921 * v1078 + v968 * v1023 + v981 * v1078 + v1001 * v1078 + v848 * v1023;
  v105 = v101
       - v957 * v1078
       - v973 * v1078
       - v1022 * v1078
       + v1067 * v848
       + v986 * v1044
       + v903 * v1044
       + v920 * v1044
       + v936 * v1044
       + v103 * v1044;
  v106 = v102 + v1068 * v848 + v986 * v967 + v903 * v967 + v920 * v967 + v936 * v967 + v103 * v967;
  v107 = v989 * v1078
       - v982 * v1078
       - v1010 * v1078
       - v964 * v1078
       - v970 * v1078
       + v1029 * v848
       + v986 * v1023
       + v903 * v1023
       + v103 * v1023
       + v920 * v1023
       + v936 * v1023
       - v923 * v1023
       - v889 * v1023;
  v987 = v255 + v903 * v1078 - v992 * v1078;
  v956 = v105 - v923 * v1044 - v889 * v1044 - v992 * v1044 - v958 * v1044;
  v979 = v106 - v923 * v967 - v889 * v967 - v992 * v967 - v958 * v967;
  v993 = v107 - v992 * v1023 - v958 * v1023;
  v108 = v1068 * v1068 * 0.5;
  v109 = v1023 * v1023 * 1.5;
  *v110 = v371;
  v110[1] = v196 + v515;
  v110[4] = v164 + v621;
  v110[5] = v139 + v133 + v128 + v132;
  v110[2] = v159 + v161;
  v110[3] = v259;
  v110[6] = v414 + v412;
  v110[7] = v556 + v618;
  v110[8] = v144 + v458;
  v110[9] = v167;
  v110[10] = v492 + v166;
  v110[11] = v170 + v483 + v569 + v308;
  v110[12] = v554 + v513;
  v110[13] = v510 + v505 + v146 + v375;
  v110[14] = v577 + v246 + v544 + v558;
  v110[15] = v336 + v575;
  v110[16] = v542 + v493;
  v110[17] = v511 + v602;
  v110[18] = v578 + v147;
  v110[19] = v731;
  v110[20] = v1041;
  v110[21] = v695 + v560;
  v110[24] = v698 + v599;
  v110[25] = v1027 + v237 + v564 + v477;
  v110[22] = v253 + v215;
  v110[23] = v499;
  v110[26] = v503 + v462;
  v110[27] = v452 + v693;
  v110[28] = v459 + v285;
  v110[29] = v666;
  v110[30] = v595 + v415;
  v110[31] = v149 + v223 + v409 + v151;
  v110[32] = v531 + v604;
  v110[33] = v354 + v221 + v689 + v227;
  v110[34] = v460 + v248 + v281 + v574;
  v110[35] = v495 + v573;
  v110[36] = v546 + v171;
  v110[37] = v600 + v268;
  v110[38] = v576 + v532;
  v110[39] = v529;
  v110[40] = v534;
  v110[41] = v282 + v180;
  v110[44] = v323 + v155;
  v110[45] = v673;
  v110[42] = v445 + v157;
  v110[43] = v263;
  v110[46] = v240 + v194;
  v110[47] = v324 + v270;
  v110[48] = v241 + v231;
  v110[49] = v238;
  v110[50] = v229 + v235;
  v110[51] = v570 + v637 + v234 + v436;
  v110[52] = v435 + v233;
  v110[53] = v624 + v249 + v389 + v226;
  v110[54] = v579 + v257 + v536 + v643;
  v110[55] = v360 + v288;
  v110[56] = v669 + v261;
  v110[57] = v601 + v423;
  v110[58] = v264 + v580;
  v110[59] = v1048;
  v110[60] = v383;
  v110[61] = v419 + v521;
  v110[65] = v275 + v526 + v337 + v279;
  v110[67] = v413 + v548;
  v110[62] = v591 + v366;
  v110[63] = v441;
  v110[64] = v272 + v487;
  v110[66] = v662 + v552;
  v110[68] = v714 + v770;
  v110[69] = v648;
  v110[70] = v293 + v500;
  v110[71] = v597 + v562 + v304 + v298;
  v110[73] = v345 + v782 + v338 + v427;
  v110[72] = v398 + v522;
  v110[74] = v425 + v775 + v468 + v584;
  v110[75] = v471 + v583;
  v110[76] = v566 + v755;
  v110[77] = v519 + v625;
  v110[78] = v585 + v629;
  v110[79] = v763;
  v110[80] = v611;
  v110[81] = v540 + v635;
  v110[84] = v633 + v550;
  v110[82] = v507 + v700;
  v110[85] = v679 + v691 + v343 + v638;
  v110[87] = v705 + v683;
  v110[83] = v654;
  v110[86] = v715 + v266;
  v110[88] = v692 + v466;
  v110[89] = v713;
  v110[90] = v420 + v622;
  v110[91] = v346 + v538 + v347 + v341;
  v110[93] = v358 + v613 + v701 + v356;
  v110[92] = v439 + v609;
  v110[94] = v450 + v277 + v364 + v582;
  v110[95] = v429 + v850;
  v110[96] = v665 + v1061;
  v110[97] = v605 + v437;
  v110[98] = v646 + v1072;
  v110[99] = v688;
  v110[100] = v617;
  v110[101] = v377 + v784;
  v110[104] = v381 + v852;
  v110[102] = v615 + v768;
  v110[105] = v475 + v639 + v385 + v631;
  v110[107] = v620 + v950;
  v110[103] = v773;
  v110[106] = v704 + v447;
  v110[108] = v719 + v251;
  v110[109] = v960;
  v110[110] = v403 + v1037;
  v110[111] = v778 + v394 + v395 + v572;
  v110[113] = v593 + v405 + v502 + v627;
  v110[112] = v696 + v607;
  v110[114] = v587 + v708 + v260 + v710;
  v110[115] = v671 + v586;
  v110[116] = v641 + v508;
  v110[117] = v603 + v523;
  v110[118] = v589 + v434;
  v110[119] = v1013;
  v110[120] = v702;
  v110[121] = v431 + v290 + v977 * v1075 + v957 * v1075;
  v110[124] = v424
            + v191
            + v968 * v967
            + v805 * v1078
            + v842 * v1078
            + v848 * v967
            - v971 * v1075
            - v924 * v1075
            - v860 * v1075
            + v929 * v1078
            + v926 * v1078
            - v980 * v1075;
  v110[122] = v422 + v217 + v977 * v1067 + v957 * v1067;
  v110[125] = v443 + v432 + v541 + v906 * v967 + v842 * v1044 + v442;
  v110[127] = v718
            + v300
            + v1025 * v1078
            + v805 * v967
            + v842 * v967
            + v1068 * v967 * v1078
            - v971 * v1068
            - v924 * v1068
            - v860 * v1068
            + v929 * v967
            + v926 * v967
            - v980 * v1068;
  v110[123] = v280 - v1005 * v1067;
  v110[126] = v711
            + v877 * v1044
            + v880 * v1044
            + v886 * v1044
            + v876 * v1044
            - v932 * v1067
            - v969 * v1067
            - v930 * v1067
            - v951 * v1067
            + v449;
  v110[128] = v302
            + v1006 * v1044
            + v877 * v967
            + v880 * v967
            + v886 * v967
            + v876 * v967
            - v932 * v1068
            - v969 * v1068
            - v930 * v1068
            - v951 * v1068
            + v448;
  v110[129] = v339 + v976 * v1068 + v1025 * v967;
  v110[130] = v456 + v867 - v1015 * v1075 - v989 * v1075 - v982 * v1075 - v1010 * v1075;
  v110[131] = v726
            + v454
            + v453
            + v201
            + v1075 * v1023 * v1044
            + v800 * v1078
            + v1001 * v1044
            + v875 * v1078
            + v981 * v1044
            + v885 * v1078;
  v110[133] = v473 + v464 + v766 + v469;
  v110[132] = v656 + v855;
  v110[134] = v199
            + v1029 * v1044 * v967
            + v891 * v1029
            + v887 * v1068
            + v937 * v1067
            + v890 * v1029
            + v823 * v1068
            + v664
            + v393
            - v932 * v1029
            - v927 * v1068
            - v969 * v1029
            - v915 * v1068
            - v840 * v1067
            - v945 * v1067
            - v930 * v1029
            - v941 * v1068
            + v481;
  v110[135] = v871 + v738;
  v110[136] = v524 - v984 * v1075 - v1009 * v1075 - v991 * v1075 + v319 + v878 * v1078;
  v110[137] = v295
            + v878 * v1044
            + v944 * v1023
            + v885 * v1023
            + v875 * v1023
            + v800 * v1023
            - v927 * v1029
            - v915 * v1029
            - v941 * v1029
            - v935 * v1029
            + v815;
  v110[138] = v787
            + v327
            + v1029 * v1023 * v967
            + v878 * v967
            + v841 * v1023
            + v925 * v1023
            + v864 * v1023
            + v859 * v1023
            - v840 * v1029
            - v945 * v1029
            - v892 * v1029
            - v933 * v1029;
  v110[139] = v706;
  v110[140] = v747;
  v110[141] = v703 + v736;
  v110[144] = v485 + v947 * v1068 + v985 * v1068 + v796 * v1075 + v916 * v1075 + v868 * v1075 + v568;
  v110[142] = v716 + v1063;
  v110[145] = v712
            + v1067 * v868
            + v835 * v1068
            + v888 * v1068
            + v833 * v1075
            + v916 * v1067
            + v780 * v1075
            + v902 * v1068
            + v796 * v1067
            + v879 * v1068
            + v819 * v1075
            + v862 * v1067
            + v829 * v1075
            + v744
            + v370;
  v110[147] = v391 + v1003 * v1075 + v1017 * v1075 + v796 * v1068 + v916 * v1068 + v868 * v1068 + v489 + v895 * v1075;
  v110[143] = v699;
  v110[146] = v813 + v802;
  v110[148] = v799 + v741;
  v110[149] = v709;
  v110[150] = v352 + v985 * v1029 + v1011 * v1075 + v999 * v1075 + v947 * v1029 + v874 * v1075 + v751;
  v110[151] = v660 + v303 + v811 + v795;
  v110[153] = v333 + v785 * v1068 + v652 + v804 + v873;
  v110[152] = v330 + v1018 * v1029 + v1000 * v1029 + v994 * v1029 + v907 * v1067 + v882 * v1067 + v808;
  v110[154] = v792
            + v1068 * v907
            + v833 * v1029
            + v780 * v1029
            + v861 * v1067
            + v882 * v1068
            + v901 * v1067
            + v819 * v1029
            + v910 * v1068
            + v829 * v1029
            + v899 * v1067
            + v884 * v1068
            + v900 * v1067
            + v668
            + v286;
  v110[155] = v407 + v1017 * v1029 + v1003 * v1029 + v895 * v1029 + v861 * v1068 + v901 * v1068 + v1035;
  v110[156] = v894 + v733 + v998 * v1075 + v997 * v1075 + v972 * v1075;
  v110[157] = v866 + v675 + v972 * v1067 + v997 * v1067 + v998 * v1067 + v907 * v1029;
  v110[158] = v1033 + v1053;
  v110[159] = v845 + v972 * v1029;
  v110[160] = v987;
  v110[161] = v349 + v968 * v1067 + v956;
  v110[164] = v225 + v980 * v1078 + v971 * v1078 - v860 * v1078 + v979;
  v110[162] = v104
            - v977 * v1044
            - v957 * v1044
            - v973 * v1044
            - v1022 * v1044
            + v988 * v1078
            + v1014 * v1078
            + v974 * v1078
            + v996 * v1078
            + v724 * v1078
            - v953 * v1078
            - v1005 * v1078
            - v931 * v1078
            - v965 * v1078
            + v677;
  v110[165] = v1078 * v1044 * 3.0 * v967
            - v1022 * v967
            - v860 * v1044
            - v930 * v1078
            - v973 * v967
            - v924 * v1044
            - v951 * v1078
            - v957 * v967
            - v952 * v1044
            - v891 * v1078
            - v977 * v967
            - v966 * v1044
            - v890 * v1078
            + v198
            + v1008 * v967
            + v971 * v1044
            + v969 * v1078
            + v983 * v967
            + v980 * v1044
            + v932 * v1078
            + v1067 * v842
            + v906 * v1068
            + v858 * v1068
            + v877 * v1075
            + v805 * v1067
            + v880 * v1075
            + v856 * v1068
            + v926 * v1067
            + v843 * v1068
            + v886 * v1075
            + v929 * v1067
            + v876 * v1075
            + v644;
  v110[167] = v224
            + v980 * v967
            + v971 * v967
            + v1075 * v1006
            - v860 * v967
            - v966 * v967
            - v952 * v967
            - v924 * v967
            + v1025 * v1075
            + v108 * v1078
            + v1002 * v1078
            + v975 * v1078
            + v946 * v1078
            + v919 * v1078
            - v917 * v1078
            - v1007 * v1078
            - v976 * v1078
            - v995 * v1078;
  v110[163] = v206 + v938 * v1067 + v996 * v1044 + v1014 * v1044;
  v110[166] = v373
            + v969 * v1044
            + v932 * v1044
            - v930 * v1044
            - v951 * v1044
            - v891 * v1044
            - v890 * v1044
            + v988 * v967
            + v974 * v967
            + v996 * v967
            + v724 * v967
            + v1014 * v967
            - v953 * v967
            - v1005 * v967
            - v931 * v967
            - v965 * v967;
  v110[168] = v658
            + v969 * v967
            + v932 * v967
            - v930 * v967
            - v951 * v967
            - v891 * v967
            - v890 * v967
            + v108 * v1044
            + v1002 * v1044
            + v975 * v1044
            + v946 * v1044
            + v919 * v1044
            - v917 * v1044
            - v1007 * v1044
            - v976 * v1044
            - v995 * v1044;
  v110[169] = v210 - v917 * v967;
  v110[170] = v213 + v1015 * v1078 + v993;
  v110[171] = v1067 * v981
            + v875 * v1075
            + v885 * v1075
            + v921 * v1067
            + v943 * v1067
            + v944 * v1075
            - v977 * v1023
            - v957 * v1023
            - v973 * v1023
            - v1022 * v1023
            - v823 * v1078
            - v970 * v1044
            - v887 * v1078
            + v278
            + v800 * v1075
            + v1001 * v1067
            + v220
            + v843 * v1029
            + v856 * v1029
            + v858 * v1029
            + v1075 * (v1029 * v1044)
            + v906 * v1029
            + v1029 * v1078 * v1067
            + v1075 * v1023 * v1067
            - v964 * v1044
            - v935 * v1078
            - v1010 * v1044
            - v941 * v1078
            - v982 * v1044
            + v983 * v1023
            + v1008 * v1023
            + v927 * v1078;
  v110[173] = -(v892 * v1078)
            - v1010 * v967
            + v943 * v1068
            - v966 * v1023
            - v952 * v1023
            - v924 * v1023
            + v864 * v1075
            + v981 * v1068
            + v925 * v1075
            + v921 * v1068
            + v841 * v1075
            + v859 * v1075
            + v1001 * v1068
            + v721
            + v759
            + v980 * v1023
            - v982 * v967
            + v971 * v1023
            + v945 * v1078
            + v840 * v1078
            + v1078 * v1023 * 3.0 * v967
            - v860 * v1023
            - v954 * v1078
            - v970 * v967
            - v937 * v1078
            - v964 * v967
            - v933 * v1078;
  v110[172] = v192
            + v927 * v1044
            + v915 * v1044
            - v941 * v1044
            - v935 * v1044
            - v887 * v1044
            - v823 * v1044
            + v218
            + v988 * v1023
            + v1014 * v1023
            + v974 * v1023
            + v996 * v1023
            + v724 * v1023
            - v953 * v1023
            - v1005 * v1023
            - v931 * v1023
            - v965 * v1023;
  v110[174] = v717
            + v728
            + -(v933 * v1044)
            - v935 * v967
            - v891 * v1023
            - v887 * v967
            - v937 * v1044
            - v890 * v1023
            - v823 * v967
            - v954 * v1044
            + v944 * v1068
            + v877 * v1029
            + v880 * v1029
            + v841 * v1067
            + v208
            + v932 * v1023
            + v927 * v967
            + v969 * v1023
            + v915 * v967
            + v840 * v1044
            + v945 * v1044
            + v1044 * v967 * 3.0 * v1023
            - v930 * v1023
            - v941 * v967
            - v892 * v1044
            - v951 * v1023;
  v110[175] = v315
            + v840 * v967
            + v945 * v967
            - v892 * v967
            - v933 * v967
            - v937 * v967
            + v1029 * v1006
            - v954 * v967
            + v1025 * v1029
            + v1068 * v967 * v1029
            + v841 * v1068
            + v925 * v1068
            + v108 * v1023
            + v1002 * v1023
            + v975 * v1023
            + v946 * v1023
            + v919 * v1023
            - v917 * v1023
            - v1007 * v1023
            - v976 * v1023
            - v995 * v1023;
  v110[176] = v1024 * v1078
            + v1015 * v1023
            + v1020 * v1078
            + v991 * v1078
            + v990 * v1078
            + v109 * v1078
            - v984 * v1078
            - v1009 * v1078
            - v963 * v1078
            - v1004 * v1078
            + v989 * v1023
            - v982 * v1023
            - v1010 * v1023
            - v964 * v1023
            - v970 * v1023
            + v1031;
  v110[177] = v722 + v1066;
  v110[178] = v1020 * v967
            + v1024 * v967
            + v991 * v967
            + v990 * v967
            + v109 * v967
            - v984 * v967
            - v1009 * v967
            - v963 * v967
            - v1004 * v967
            + v878 * v1068
            + v909 * v1068
            + v1029 * v1023 * v1068
            + v841 * v1029
            + v925 * v1029
            + v312
            + v840 * v1023
            + v945 * v1023
            - v892 * v1023
            - v933 * v1023
            - v937 * v1023
            - v954 * v1023;
  v110[179] = v401
            + v1023 * v1023 * 0.5 * v1023
            - v1009 * v1023
            + v991 * v1023
            - v963 * v1023
            + v1024 * v1023
            + v878 * v1029
            + v1020 * v1023
            - v1004 * v1023
            + v909 * v1029;
  v110[180] = v1055;
  v110[181] = v274 + v165 * v1078;
  v110[184] = v140 + v152 * v1078;
  v110[182] = v681;
  v110[185] = v418
            + v162 * v1067
            + v1050 * v1075
            + v939 * v1068
            + v137
            + v832 * v1067
            + v838 * v967
            + v152 * v1044
            + v940 * v1068
            + v138 * v1075
            + v837 * v967;
  v110[187] = v379 + v898 * v967;
  v110[183] = v1077;
  v110[186] = v136 + v11 * v1084 * v1044 + v922 * v1044;
  v110[188] = v142 + v839 * v1068;
  v110[189] = v491 + v1039 * v1068;
  v110[190] = v650 + v913 * v1075 + v934 * v1029 + v847 * v1078 + v962 * v1078 + v1043 * v1075;
  v110[191] = v497
            + v939 * v1029
            + v89 * v1067
            + v838 * v1023
            + v824 * v1044
            + v940 * v1029
            + v821 * v1075
            + v411
            + v913 * v1067
            + v1070 * v1075;
  v110[193] = v517 + v832 * v1029 + v89 * v1068 + v479 + v162 * v1029 + v1086 * v1075;
  v110[192] = v1081;
  v110[194] = v306 + v825 * v1044 + v896 * v967 + v828 * v1067 + v822 * v1068 + v686;
  v110[195] = v397 + v817 * v967;
  v110[196] = v1059;
  v110[197] = v1057;
  result = v387 + v825 * v1023;
  v110[198] = result;
  v110[199] = v368 + v1074 * v1029 + v92 * v1023 + v1083 * v1023 + v1046 * v1029;
  return result;
}

uint64_t sub_239450FB8(double *a1)
{
  int v1;
  unint64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  unint64_t v8;
  double *v9;
  double v10;
  double v11;
  uint64_t v12;
  int v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double *v24;
  double v25;
  double *v26;
  uint64_t v27;
  double *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  double *v40;
  double *v41;
  double v42;
  double v43;
  uint64_t v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  uint64_t i;
  double *v50;
  double v51;
  double v52;
  uint64_t j;
  double *v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;

  v1 = 0;
  v2 = 0;
  v3 = a1 + 11;
  v4 = 1;
  v5 = 200;
  v6 = 1520;
  v7 = a1;
  v8 = 19;
  v9 = a1;
  do
  {
    v10 = a1[11 * v2];
    if (v2 > 8)
    {
      v13 = v2;
      if (v2 == v2)
        goto LABEL_9;
    }
    else
    {
      v11 = fabs(v10);
      v12 = 1;
      v13 = v2;
      do
      {
        v14 = fabs(v9[v12]);
        if (v14 > v11)
        {
          v11 = v14;
          v13 = v2 + v12;
        }
        ++v12;
      }
      while (v2 + v12 != 10);
      if (v2 == v13)
      {
LABEL_9:
        v15 = 19 - v2;
        a1[11 * v2] = 1.0;
        v16 = v4;
        v17 = 1.0 / v10;
        if (19 - v2 < 2)
          goto LABEL_18;
        goto LABEL_15;
      }
    }
    v18 = 0;
    v19 = v13 + v1;
    do
    {
      v20 = (v19 + v18);
      v21 = a1[v20];
      a1[v20] = v9[v18];
      v9[v18] = v21;
      v18 += 10;
    }
    while (v5 != v18);
    v22 = a1[11 * v2];
    v15 = 19 - v2;
    a1[11 * v2] = 1.0;
    v16 = v4;
    v17 = 1.0 / v22;
    if (19 - v2 < 2)
    {
LABEL_18:
      v26 = &v7[10 * v16];
      v27 = v16 - 20;
      do
      {
        *v26 = v17 * *v26;
        v26 += 10;
      }
      while (!__CFADD__(v27++, 1));
      goto LABEL_21;
    }
LABEL_15:
    v23 = 0;
    v16 = v4 + (v15 & 0xFFFFFFFFFFFFFFFELL);
    do
    {
      v24 = &v9[v23];
      v25 = v17 * v9[v23 + 20];
      v24[10] = v17 * v9[v23 + 10];
      v24[20] = v25;
      v23 += 20;
    }
    while (20 * (v8 >> 1) != v23);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_18;
LABEL_21:
    if (v2 <= 8)
    {
      v29 = v3;
      v30 = v4;
      do
      {
        v31 = 0;
        v32 = v30 + 10 * v2;
        v33 = a1[v32];
        a1[v32] = 0.0;
        do
        {
          v29[v31 / 8] = v29[v31 / 8] - v9[v31 / 8 + 10] * v33;
          v31 += 80;
        }
        while (v6 != v31);
        ++v30;
        ++v29;
      }
      while (v30 != 10);
    }
    ++v2;
    ++v4;
    v9 += 11;
    v1 += 10;
    v5 -= 10;
    --v8;
    ++v7;
    v3 += 11;
    v6 -= 80;
  }
  while (v2 != 10);
  v34 = 0;
  v35 = a1 + 100;
  do
  {
    v36 = &v35[v34];
    v37 = v35[v34 - 10];
    v36[90] = v35[v34 + 90] - a1[199] * v37;
    v36[80] = v35[v34 + 80] - a1[189] * v37;
    v36[70] = v35[v34 + 70] - a1[179] * v37;
    v36[60] = v35[v34 + 60] - a1[169] * v37;
    v36[50] = v35[v34 + 50] - a1[159] * v37;
    v36[40] = v35[v34 + 40] - a1[149] * v37;
    v36[30] = v35[v34 + 30] - a1[139] * v37;
    v36[20] = v35[v34 + 20] - a1[129] * v37;
    v36[10] = v35[v34 + 10] - a1[119] * v37;
    *v36 = v35[v34] - a1[109] * v37;
    v38 = v35[v34 - 10] - a1[99] * v37;
    ++v34;
    *(v36 - 10) = v38;
  }
  while (v34 != 9);
  v39 = 0;
  v40 = a1 + 100;
  do
  {
    v41 = &v40[v39];
    v42 = v40[v39 - 20];
    v41[90] = v40[v39 + 90] - a1[198] * v42;
    v41[80] = v40[v39 + 80] - a1[188] * v42;
    v41[70] = v40[v39 + 70] - a1[178] * v42;
    v41[60] = v40[v39 + 60] - a1[168] * v42;
    v41[50] = v40[v39 + 50] - a1[158] * v42;
    v41[40] = v40[v39 + 40] - a1[148] * v42;
    v41[30] = v40[v39 + 30] - a1[138] * v42;
    v41[20] = v40[v39 + 20] - a1[128] * v42;
    v41[10] = v40[v39 + 10] - a1[118] * v42;
    *v41 = v40[v39] - a1[108] * v42;
    *(v41 - 10) = v40[v39 - 10] - a1[98] * v42;
    v43 = v40[v39 - 20] - a1[88] * v42;
    ++v39;
    *(v41 - 20) = v43;
  }
  while (v39 != 8);
  v44 = 0;
  v45 = a1 + 100;
  do
  {
    v46 = &v45[v44];
    v47 = v45[v44 - 30];
    v46[90] = v45[v44 + 90] - a1[197] * v47;
    v46[80] = v45[v44 + 80] - a1[187] * v47;
    v46[70] = v45[v44 + 70] - a1[177] * v47;
    v46[60] = v45[v44 + 60] - a1[167] * v47;
    v46[50] = v45[v44 + 50] - a1[157] * v47;
    v46[40] = v45[v44 + 40] - a1[147] * v47;
    v46[30] = v45[v44 + 30] - a1[137] * v47;
    v46[20] = v45[v44 + 20] - a1[127] * v47;
    v46[10] = v45[v44 + 10] - a1[117] * v47;
    *v46 = v45[v44] - a1[107] * v47;
    *(v46 - 10) = v45[v44 - 10] - a1[97] * v47;
    *(v46 - 20) = v45[v44 - 20] - a1[87] * v47;
    v48 = v45[v44 - 30] - a1[77] * v47;
    ++v44;
    *(v46 - 30) = v48;
  }
  while (v44 != 7);
  for (i = 0; i != 6; ++i)
  {
    v50 = &a1[i];
    v51 = a1[i + 60];
    v50[190] = a1[i + 190] - a1[196] * v51;
    v50[180] = a1[i + 180] - a1[186] * v51;
    v50[170] = a1[i + 170] - a1[176] * v51;
    v50[160] = a1[i + 160] - a1[166] * v51;
    v50[150] = a1[i + 150] - a1[156] * v51;
    v50[140] = a1[i + 140] - a1[146] * v51;
    v50[130] = a1[i + 130] - a1[136] * v51;
    v50[120] = a1[i + 120] - a1[126] * v51;
    v50[110] = a1[i + 110] - a1[116] * v51;
    v50[100] = a1[i + 100] - a1[106] * v51;
    v50[90] = a1[i + 90] - a1[96] * v51;
    v50[80] = a1[i + 80] - a1[86] * v51;
    v50[70] = a1[i + 70] - a1[76] * v51;
    v52 = a1[i + 60] - a1[66] * v51;
    v50[60] = v52;
  }
  for (j = 0; j != 5; ++j)
  {
    v54 = &a1[j];
    v55 = a1[j + 50];
    v54[190] = a1[j + 190] - a1[195] * v55;
    v54[180] = a1[j + 180] - a1[185] * v55;
    v54[170] = a1[j + 170] - a1[175] * v55;
    v54[160] = a1[j + 160] - a1[165] * v55;
    v54[150] = a1[j + 150] - a1[155] * v55;
    v54[140] = a1[j + 140] - a1[145] * v55;
    v54[130] = a1[j + 130] - a1[135] * v55;
    v54[120] = a1[j + 120] - a1[125] * v55;
    v54[110] = a1[j + 110] - a1[115] * v55;
    v54[100] = a1[j + 100] - a1[105] * v55;
    v54[90] = a1[j + 90] - a1[95] * v55;
    v54[80] = a1[j + 80] - a1[85] * v55;
    v54[70] = a1[j + 70] - a1[75] * v55;
    v54[60] = a1[j + 60] - a1[65] * v55;
    v56 = a1[j + 50] - a1[55] * v55;
    v54[50] = v56;
  }
  v57 = a1[40];
  a1[190] = a1[190] - a1[194] * v57;
  a1[180] = a1[180] - a1[184] * v57;
  a1[170] = a1[170] - a1[174] * v57;
  a1[160] = a1[160] - a1[164] * v57;
  a1[150] = a1[150] - a1[154] * v57;
  a1[140] = a1[140] - a1[144] * v57;
  a1[130] = a1[130] - a1[134] * v57;
  a1[120] = a1[120] - a1[124] * v57;
  a1[110] = a1[110] - a1[114] * v57;
  a1[100] = a1[100] - a1[104] * v57;
  a1[90] = a1[90] - a1[94] * v57;
  a1[80] = a1[80] - a1[84] * v57;
  a1[70] = a1[70] - a1[74] * v57;
  v58 = a1[60];
  v59 = a1[61];
  v60 = a1[64];
  v62 = a1[42];
  v61 = a1[43];
  v63 = a1[62] - v60 * v62;
  v64 = a1[63] - v60 * v61;
  a1[62] = v63;
  a1[63] = v64;
  v66 = a1[63];
  v65 = a1[64];
  v67 = v58 - v65 * v57;
  v68 = a1[50];
  v69 = a1[51];
  v70 = a1[54];
  v71 = a1[52] - v70 * v62;
  v72 = a1[53] - v70 * v61;
  a1[52] = v71;
  a1[53] = v72;
  v73 = a1[53];
  v74 = a1[54];
  v75 = v68 - v74 * v57;
  v76 = a1[40];
  v77 = a1[41];
  v78 = a1[44];
  a1[42] = v62 - v78 * v62;
  a1[43] = v61 - v78 * v61;
  v79 = a1[43];
  v80 = a1[44];
  v81 = v76 - v80 * v57;
  v82 = a1[194];
  a1[191] = a1[191] - v82 * v77;
  v83 = a1[184];
  a1[181] = a1[181] - v83 * v77;
  v84 = a1[174];
  a1[171] = a1[171] - v84 * v77;
  v85 = a1[164];
  a1[161] = a1[161] - v85 * v77;
  v86 = a1[154];
  a1[151] = a1[151] - v86 * v77;
  v87 = a1[144];
  a1[141] = a1[141] - v87 * v77;
  v88 = a1[134];
  a1[131] = a1[131] - v88 * v77;
  v89 = a1[124];
  a1[121] = a1[121] - v89 * v77;
  v90 = a1[114];
  a1[111] = a1[111] - v90 * v77;
  v91 = a1[104];
  a1[101] = a1[101] - v91 * v77;
  v92 = a1[94];
  a1[91] = a1[91] - v92 * v77;
  v93 = a1[84];
  a1[81] = a1[81] - v93 * v77;
  v94 = a1[74];
  a1[71] = a1[71] - v94 * v77;
  a1[60] = v67;
  a1[61] = v59 - v65 * v77;
  a1[50] = v75;
  a1[51] = v69 - v74 * v77;
  a1[40] = v81;
  a1[41] = v77 - v80 * v77;
  a1[192] = a1[192] - v82 * v62;
  a1[182] = a1[182] - v83 * v62;
  a1[172] = a1[172] - v84 * v62;
  a1[162] = a1[162] - v85 * v62;
  a1[152] = a1[152] - v86 * v62;
  a1[142] = a1[142] - v87 * v62;
  a1[132] = a1[132] - v88 * v62;
  a1[122] = a1[122] - v89 * v62;
  a1[112] = a1[112] - v90 * v62;
  a1[102] = a1[102] - v91 * v62;
  a1[92] = a1[92] - v92 * v62;
  a1[82] = a1[82] - v93 * v62;
  a1[72] = a1[72] - v94 * v62;
  a1[193] = a1[193] - a1[194] * v61;
  a1[183] = a1[183] - a1[184] * v61;
  a1[173] = a1[173] - a1[174] * v61;
  a1[163] = a1[163] - a1[164] * v61;
  a1[153] = a1[153] - a1[154] * v61;
  a1[143] = a1[143] - a1[144] * v61;
  a1[133] = a1[133] - a1[134] * v61;
  a1[123] = a1[123] - a1[124] * v61;
  a1[113] = a1[113] - a1[114] * v61;
  a1[103] = a1[103] - a1[104] * v61;
  a1[93] = a1[93] - a1[94] * v61;
  a1[83] = a1[83] - a1[84] * v61;
  a1[73] = a1[73] - a1[74] * v61;
  v95 = a1[30];
  a1[190] = a1[190] - a1[193] * v95;
  a1[180] = a1[180] - a1[183] * v95;
  a1[170] = a1[170] - a1[173] * v95;
  a1[160] = a1[160] - a1[163] * v95;
  a1[150] = a1[150] - a1[153] * v95;
  a1[140] = a1[140] - a1[143] * v95;
  a1[130] = a1[130] - a1[133] * v95;
  a1[120] = a1[120] - a1[123] * v95;
  a1[110] = a1[110] - a1[113] * v95;
  a1[100] = a1[100] - a1[103] * v95;
  a1[90] = a1[90] - a1[93] * v95;
  a1[80] = a1[80] - a1[83] * v95;
  a1[70] = a1[70] - a1[73] * v95;
  v96 = a1[61];
  v97 = a1[62];
  v98 = a1[60] - a1[63] * v95;
  v99 = a1[51];
  v100 = a1[52];
  v101 = a1[50] - a1[53] * v95;
  v102 = a1[41];
  v103 = a1[42];
  v104 = a1[40] - a1[43] * v95;
  v105 = a1[31];
  v106 = a1[32];
  v107 = a1[30] - a1[33] * v95;
  a1[191] = a1[191] - a1[193] * v105;
  a1[181] = a1[181] - a1[183] * v105;
  a1[171] = a1[171] - a1[173] * v105;
  a1[161] = a1[161] - a1[163] * v105;
  a1[151] = a1[151] - a1[153] * v105;
  a1[141] = a1[141] - a1[143] * v105;
  a1[131] = a1[131] - a1[133] * v105;
  a1[121] = a1[121] - a1[123] * v105;
  a1[111] = a1[111] - a1[113] * v105;
  a1[101] = a1[101] - a1[103] * v105;
  a1[91] = a1[91] - a1[93] * v105;
  a1[81] = a1[81] - a1[83] * v105;
  a1[71] = a1[71] - a1[73] * v105;
  a1[62] = v97 - v66 * v106;
  v108 = a1[62];
  v109 = v96 - a1[63] * v105;
  a1[60] = v98;
  a1[61] = v109;
  a1[52] = v100 - v73 * v106;
  v110 = a1[52];
  v111 = v99 - a1[53] * v105;
  a1[50] = v101;
  a1[51] = v111;
  a1[42] = v103 - v79 * v106;
  v112 = a1[42];
  v113 = v102 - a1[43] * v105;
  a1[40] = v104;
  a1[41] = v113;
  a1[32] = v106 - a1[33] * v106;
  v114 = a1[32];
  v115 = v105 - a1[33] * v105;
  a1[30] = v107;
  a1[31] = v115;
  a1[192] = a1[192] - a1[193] * v106;
  a1[182] = a1[182] - a1[183] * v106;
  a1[172] = a1[172] - a1[173] * v106;
  a1[162] = a1[162] - a1[163] * v106;
  a1[152] = a1[152] - a1[153] * v106;
  a1[142] = a1[142] - a1[143] * v106;
  a1[132] = a1[132] - a1[133] * v106;
  a1[122] = a1[122] - a1[123] * v106;
  a1[112] = a1[112] - a1[113] * v106;
  a1[102] = a1[102] - a1[103] * v106;
  a1[92] = a1[92] - a1[93] * v106;
  a1[82] = a1[82] - a1[83] * v106;
  a1[72] = a1[72] - a1[73] * v106;
  v116 = a1[20];
  a1[190] = a1[190] - a1[192] * v116;
  a1[180] = a1[180] - a1[182] * v116;
  a1[170] = a1[170] - a1[172] * v116;
  a1[160] = a1[160] - a1[162] * v116;
  a1[150] = a1[150] - a1[152] * v116;
  a1[140] = a1[140] - a1[142] * v116;
  a1[130] = a1[130] - a1[132] * v116;
  a1[120] = a1[120] - a1[122] * v116;
  a1[110] = a1[110] - a1[112] * v116;
  a1[100] = a1[100] - a1[102] * v116;
  a1[90] = a1[90] - a1[92] * v116;
  a1[80] = a1[80] - a1[82] * v116;
  a1[70] = a1[70] - a1[72] * v116;
  v117 = a1[61];
  v118 = a1[60] - a1[62] * v116;
  v119 = a1[51];
  v120 = a1[50] - a1[52] * v116;
  v121 = a1[41];
  v122 = a1[40] - a1[42] * v116;
  v123 = a1[31];
  v124 = a1[30] - a1[32] * v116;
  v125 = a1[21];
  a1[20] = a1[20] - a1[22] * v116;
  a1[191] = a1[191] - a1[192] * v125;
  a1[181] = a1[181] - a1[182] * v125;
  a1[171] = a1[171] - a1[172] * v125;
  a1[161] = a1[161] - a1[162] * v125;
  a1[151] = a1[151] - a1[152] * v125;
  a1[141] = a1[141] - a1[142] * v125;
  a1[131] = a1[131] - a1[132] * v125;
  a1[121] = a1[121] - a1[122] * v125;
  a1[111] = a1[111] - a1[112] * v125;
  a1[101] = a1[101] - a1[102] * v125;
  a1[91] = a1[91] - a1[92] * v125;
  a1[81] = a1[81] - a1[82] * v125;
  a1[71] = a1[71] - a1[72] * v125;
  a1[60] = v118;
  a1[61] = v117 - v108 * v125;
  a1[50] = v120;
  a1[51] = v119 - v110 * v125;
  a1[40] = v122;
  a1[41] = v121 - v112 * v125;
  a1[30] = v124;
  a1[31] = v123 - v114 * v125;
  v126 = a1[20];
  a1[21] = a1[21] - a1[22] * v125;
  v127 = a1[10];
  a1[190] = a1[190] - a1[191] * v127;
  a1[180] = a1[180] - a1[181] * v127;
  a1[170] = a1[170] - a1[171] * v127;
  a1[160] = a1[160] - a1[161] * v127;
  a1[150] = a1[150] - a1[151] * v127;
  a1[140] = a1[140] - a1[141] * v127;
  a1[130] = a1[130] - a1[131] * v127;
  a1[120] = a1[120] - a1[121] * v127;
  a1[110] = a1[110] - a1[111] * v127;
  a1[100] = a1[100] - a1[101] * v127;
  a1[90] = a1[90] - a1[91] * v127;
  a1[80] = a1[80] - a1[81] * v127;
  a1[70] = a1[70] - a1[71] * v127;
  a1[60] = a1[60] - a1[61] * v127;
  a1[50] = a1[50] - a1[51] * v127;
  a1[40] = a1[40] - a1[41] * v127;
  a1[30] = a1[30] - a1[31] * v127;
  a1[20] = v126 - a1[21] * v127;
  a1[10] = a1[10] - a1[11] * v127;
  return 1;
}

uint64_t sub_239452008(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;

  sub_239452210(a1);
  sub_239452534(a1);
  sub_2394527EC(a1);
  v2 = sub_239452C6C(a1);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 1600);
    do
    {
      v5 = (double *)(a1 + v3);
      v5[100] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 800);
      v5[110] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 880);
      v5[120] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 960);
      v5[130] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 1040);
      v5[140] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 1120);
      v5[150] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 1200);
      v5[160] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 1280);
      v5[170] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 1360);
      v5[180] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 1440);
      v5[190] = *(double *)(v4 + v3) * *(double *)(a1 + v3 + 1520);
      v3 += 8;
    }
    while (v3 != 80);
    sub_23945456C(a1);
  }
  return v2;
}

_QWORD *sub_23945210C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[206];
  if (v2)
  {
    a1[207] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[203];
  if (v3)
  {
    a1[204] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[200];
  if (v4)
  {
    a1[201] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_23945215C(uint64_t a1, unint64_t a2)
{
  size_t v4;
  void *v5;
  std::bad_alloc *exception;
  std::bad_alloc *v7;
  void *memptr;

  if (a2)
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      free(*(void **)a1);
      v4 = (8 * a2 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v4 >> 3;
      memptr = 0;
      malloc_type_posix_memalign(&memptr, 0x20uLL, v4, 0x100BBD03uLL);
      v5 = memptr;
      *(_QWORD *)a1 = memptr;
      if (!v5)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v7 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v7, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
    }
  }
  else
  {
    free(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_239452210(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double *v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;

  v1 = 0;
  v2 = 1;
  do
  {
    do
    {
      while (1)
      {
        if (v1)
        {
          v3 = fabs(*(double *)(result + 8 * v1));
          v4 = fabs(*(double *)(result + 80 * v1));
          if (v1 == 1)
            goto LABEL_7;
        }
        else
        {
          v4 = 0.0;
          v3 = 0.0;
        }
        v3 = v3 + fabs(*(double *)(result + 8 * v1 + 80));
        v4 = v4 + fabs(*(double *)(result + ((80 * v1) | 8)));
        if (v1 == 2)
          goto LABEL_8;
LABEL_7:
        v3 = v3 + fabs(*(double *)(result + 8 * v1 + 160));
        v4 = v4 + fabs(*(double *)(result + 80 * v1 + 16));
        if (v1 != 3)
        {
LABEL_8:
          v3 = v3 + fabs(*(double *)(result + 8 * v1 + 240));
          v4 = v4 + fabs(*(double *)(result + 80 * v1 + 24));
          if (v1 == 4)
            goto LABEL_10;
        }
        v3 = v3 + fabs(*(double *)(result + 8 * v1 + 320));
        v4 = v4 + fabs(*(double *)(result + 80 * v1 + 32));
        if (v1 == 5)
          goto LABEL_11;
LABEL_10:
        v3 = v3 + fabs(*(double *)(result + 8 * v1 + 400));
        v4 = v4 + fabs(*(double *)(result + 80 * v1 + 40));
        if (v1 != 6)
        {
LABEL_11:
          v3 = v3 + fabs(*(double *)(result + 8 * v1 + 480));
          v4 = v4 + fabs(*(double *)(result + 80 * v1 + 48));
          if (v1 == 7)
            goto LABEL_13;
        }
        v3 = v3 + fabs(*(double *)(result + 8 * v1 + 560));
        v4 = v4 + fabs(*(double *)(result + 80 * v1 + 56));
        if (v1 == 8)
          goto LABEL_14;
LABEL_13:
        v3 = v3 + fabs(*(double *)(result + 8 * v1 + 640));
        v4 = v4 + fabs(*(double *)(result + 80 * v1 + 64));
        if (v1 != 9)
        {
LABEL_14:
          v3 = v3 + fabs(*(double *)(result + 8 * v1 + 720));
          v4 = v4 + fabs(*(double *)(result + 80 * v1 + 72));
        }
        if (v3 != 0.0 && v4 != 0.0)
          break;
        LOBYTE(v7) = v2;
        if (++v1 == 10)
          goto LABEL_27;
      }
      v5 = 1.0;
      v6 = v4;
      if (v4 < v3 * 0.5)
      {
        v5 = 1.0;
        v6 = v4;
        do
        {
          v5 = v5 + v5;
          v6 = v6 * 4.0;
        }
        while (v6 < v3 * 0.5);
      }
      for (; v6 > v3 + v3; v6 = v6 * 0.25)
        v5 = v5 * 0.5;
      v7 = v2;
      if (v3 + v6 < (v3 + v4) * 0.95)
      {
        v7 = 0;
        *(double *)(*(_QWORD *)(result + 1600) + 8 * v1) = v5 * *(double *)(*(_QWORD *)(result + 1600) + 8 * v1);
        v8 = (double *)(result + 8 * v1);
        *v8 = 1.0 / v5 * *v8;
        v8[10] = 1.0 / v5 * v8[10];
        v8[20] = 1.0 / v5 * v8[20];
        v8[30] = 1.0 / v5 * v8[30];
        v8[40] = 1.0 / v5 * v8[40];
        v8[50] = 1.0 / v5 * v8[50];
        v8[60] = 1.0 / v5 * v8[60];
        v8[70] = 1.0 / v5 * v8[70];
        v8[80] = 1.0 / v5 * v8[80];
        v8[90] = 1.0 / v5 * v8[90];
        v9 = (float64x2_t *)(result + 80 * v1);
        v10 = vmulq_n_f64(v9[1], v5);
        *v9 = vmulq_n_f64(*v9, v5);
        v9[1] = v10;
        v11 = vmulq_n_f64(v9[3], v5);
        v9[2] = vmulq_n_f64(v9[2], v5);
        v9[3] = v11;
        v9[4] = vmulq_n_f64(v9[4], v5);
      }
      ++v1;
      v2 = v7;
    }
    while (v1 != 10);
LABEL_27:
    v1 = 0;
    v2 = 1;
  }
  while ((v7 & 1) == 0);
  return result;
}

uint64_t sub_239452534(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  double v46;
  float64x2_t *v47;

  v1 = 0;
  v2 = 0;
  v3 = *(_QWORD *)(result + 1624);
  v4 = result + 96;
  v5 = 100;
  v6 = 720;
  v7 = result;
  v8 = 1;
  do
  {
    v9 = 10 * v8 - 10;
    v10 = 0.0;
    v11 = 1;
    v12 = v8;
    do
    {
      if (fabs(*(double *)(v7 + 8 * v11)) > fabs(v10))
      {
        v10 = *(double *)(v7 + 8 * v11);
        v12 = v2 + v11;
      }
      ++v11;
    }
    while (v2 + v11 != 10);
    *(_DWORD *)(v3 + 4 * v8) = v12;
    if (v8 != v12)
    {
      v13 = 0;
      do
      {
        v14 = 8 * (v1 + v12 + v13);
        v15 = v7 + 8 * v13;
        v16 = *(_QWORD *)(result + v14);
        *(_QWORD *)(result + v14) = *(_QWORD *)(v15 + 8);
        *(_QWORD *)(v15 + 8) = v16;
        v13 += 10;
      }
      while (v5 != v13);
      v17 = 5 * v12;
      v18 = 10 * v12;
      v19 = 8 * (10 * v12);
      v20 = (_QWORD *)(result + 80 * v8);
      v21 = *(_QWORD *)(result + v19);
      *(_QWORD *)(result + v19) = *v20;
      *v20 = v21;
      v22 = 8 * ((2 * v17) | 1u);
      v23 = (80 * v8) | 8;
      v24 = *(_QWORD *)(result + v22);
      *(_QWORD *)(result + v22) = *(_QWORD *)(result + v23);
      *(_QWORD *)(result + v23) = v24;
      v25 = 8 * (v18 + 2);
      v26 = *(_QWORD *)(result + v25);
      *(_QWORD *)(result + v25) = v20[2];
      v20[2] = v26;
      v27 = 8 * (v18 + 3);
      v28 = *(_QWORD *)(result + v27);
      *(_QWORD *)(result + v27) = v20[3];
      v20[3] = v28;
      v29 = 8 * (v18 + 4);
      v30 = *(_QWORD *)(result + v29);
      *(_QWORD *)(result + v29) = v20[4];
      v20[4] = v30;
      v31 = 8 * (v18 + 5);
      v32 = *(_QWORD *)(result + v31);
      *(_QWORD *)(result + v31) = v20[5];
      v20[5] = v32;
      v33 = 8 * (v18 + 6);
      v34 = *(_QWORD *)(result + v33);
      *(_QWORD *)(result + v33) = v20[6];
      v20[6] = v34;
      v35 = 8 * (v18 + 7);
      v36 = *(_QWORD *)(result + v35);
      *(_QWORD *)(result + v35) = v20[7];
      v20[7] = v36;
      v37 = 8 * (v18 + 8);
      v38 = *(_QWORD *)(result + v37);
      *(_QWORD *)(result + v37) = v20[8];
      v20[8] = v38;
      v39 = 8 * (v18 + 9);
      v40 = *(_QWORD *)(result + v39);
      *(_QWORD *)(result + v39) = v20[9];
      v20[9] = v40;
    }
    if (v10 != 0.0)
    {
      v41 = (float64x2_t *)(result + 80 * v8);
      v42 = v4;
      v43 = v8;
      do
      {
        ++v43;
        v44 = *(double *)(result + 8 * (v9 + v43));
        if (v44 != 0.0)
        {
          v45 = 0;
          v46 = v44 / v10;
          *(double *)(result + 8 * (v9 + v43)) = v46;
          do
          {
            *(double *)(v42 + v45) = *(double *)(v42 + v45) + -v46 * *(double *)(v7 + v45 + 88);
            v45 += 80;
          }
          while (v6 != v45);
          v47 = (float64x2_t *)(result + 80 * v43);
          *v41 = vmlaq_n_f64(*v41, *v47, v46);
          v41[1] = vmlaq_n_f64(v41[1], v47[1], v46);
          v41[2] = vmlaq_n_f64(v41[2], v47[2], v46);
          v41[3] = vmlaq_n_f64(v41[3], v47[3], v46);
          v41[4] = vmlaq_n_f64(v41[4], v47[4], v46);
        }
        v42 += 8;
      }
      while (v43 != 9);
    }
    ++v8;
    ++v2;
    v7 += 88;
    v1 += 10;
    v5 -= 10;
    v4 += 88;
    v6 -= 80;
  }
  while (v2 != 8);
  return result;
}

double sub_2394527EC(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(_DWORD **)(a1 + 1624);
  v2 = a1 + 800;
  *(_QWORD *)(a1 + 1512) = *(_QWORD *)(a1 + 632);
  v3 = v1[8];
  if (v3 != 8)
  {
    v4 = 8 * (v3 + 80);
    *(_QWORD *)(a1 + 1504) = *(_QWORD *)(v2 + v4);
    v5 = 8 * (v3 + 90);
    *(_QWORD *)(a1 + 1584) = *(_QWORD *)(v2 + v5);
    *(_QWORD *)(v2 + v5) = 0;
    *(_QWORD *)(v2 + v4) = 0x3FF0000000000000;
  }
  *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a1 + 544);
  v6 = v1[7];
  if (v6 != 7)
  {
    v7 = 8 * (v6 + 70);
    *(_QWORD *)(a1 + 1416) = *(_QWORD *)(v2 + v7);
    v8 = 8 * (v6 + 80);
    *(_QWORD *)(a1 + 1496) = *(_QWORD *)(v2 + v8);
    *(_QWORD *)(v2 + v8) = 0;
    v9 = 8 * (v6 + 90);
    *(_QWORD *)(a1 + 1576) = *(_QWORD *)(v2 + v9);
    *(_QWORD *)(v2 + v9) = 0;
    *(_QWORD *)(v2 + v7) = 0x3FF0000000000000;
  }
  *(_QWORD *)(a1 + 1336) = *(_QWORD *)(a1 + 456);
  *(_OWORD *)(a1 + 1344) = *(_OWORD *)(a1 + 464);
  v10 = v1[6];
  if (v10 != 6)
  {
    v11 = 8 * (v10 + 60);
    *(_QWORD *)(a1 + 1328) = *(_QWORD *)(v2 + v11);
    v12 = 8 * (v10 + 70);
    *(_QWORD *)(a1 + 1408) = *(_QWORD *)(v2 + v12);
    *(_QWORD *)(v2 + v12) = 0;
    v13 = 8 * (v10 + 80);
    *(_QWORD *)(a1 + 1488) = *(_QWORD *)(v2 + v13);
    *(_QWORD *)(v2 + v13) = 0;
    v14 = 8 * (v10 + 90);
    *(_QWORD *)(a1 + 1568) = *(_QWORD *)(v2 + v14);
    *(_QWORD *)(v2 + v14) = 0;
    *(_QWORD *)(v2 + v11) = 0x3FF0000000000000;
  }
  v15 = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(a1 + 1264) = v15;
  v16 = v1[5];
  if (v16 != 5)
  {
    v17 = 8 * (v16 + 50);
    *(_QWORD *)(a1 + 1240) = *(_QWORD *)(v2 + v17);
    v18 = 8 * (v16 + 60);
    *(_QWORD *)(a1 + 1320) = *(_QWORD *)(v2 + v18);
    *(_QWORD *)(v2 + v18) = 0;
    v19 = 8 * (v16 + 70);
    *(_QWORD *)(a1 + 1400) = *(_QWORD *)(v2 + v19);
    *(_QWORD *)(v2 + v19) = 0;
    v20 = 8 * (v16 + 80);
    *(_QWORD *)(a1 + 1480) = *(_QWORD *)(v2 + v20);
    *(_QWORD *)(v2 + v20) = 0;
    v21 = 8 * (v16 + 90);
    *(_QWORD *)(a1 + 1560) = *(_QWORD *)(v2 + v21);
    *(_QWORD *)(v2 + v21) = 0;
    *(_QWORD *)(v2 + v17) = 0x3FF0000000000000;
  }
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)(a1 + 280);
  v22 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a1 + 1184) = v22;
  v23 = v1[4];
  if (v23 != 4)
  {
    v24 = 8 * (v23 + 40);
    *(_QWORD *)(a1 + 1152) = *(_QWORD *)(v2 + v24);
    v25 = 8 * (v23 + 50);
    *(_QWORD *)(a1 + 1232) = *(_QWORD *)(v2 + v25);
    *(_QWORD *)(v2 + v25) = 0;
    v26 = 8 * (v23 + 60);
    *(_QWORD *)(a1 + 1312) = *(_QWORD *)(v2 + v26);
    *(_QWORD *)(v2 + v26) = 0;
    v27 = 8 * (v23 + 70);
    *(_QWORD *)(a1 + 1392) = *(_QWORD *)(v2 + v27);
    *(_QWORD *)(v2 + v27) = 0;
    v28 = 8 * (v23 + 80);
    *(_QWORD *)(a1 + 1472) = *(_QWORD *)(v2 + v28);
    *(_QWORD *)(v2 + v28) = 0;
    v29 = 8 * (v23 + 90);
    *(_QWORD *)(a1 + 1552) = *(_QWORD *)(v2 + v29);
    *(_QWORD *)(v2 + v29) = 0;
    *(_QWORD *)(v2 + v24) = 0x3FF0000000000000;
  }
  v30 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 1088) = v30;
  *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a1 + 224);
  v31 = v1[3];
  if (v31 != 3)
  {
    v32 = 8 * (v31 + 30);
    *(_QWORD *)(a1 + 1064) = *(_QWORD *)(v2 + v32);
    v33 = 8 * (v31 + 40);
    *(_QWORD *)(a1 + 1144) = *(_QWORD *)(v2 + v33);
    *(_QWORD *)(v2 + v33) = 0;
    v34 = 8 * (v31 + 50);
    *(_QWORD *)(a1 + 1224) = *(_QWORD *)(v2 + v34);
    *(_QWORD *)(v2 + v34) = 0;
    v35 = 8 * (v31 + 60);
    *(_QWORD *)(a1 + 1304) = *(_QWORD *)(v2 + v35);
    *(_QWORD *)(v2 + v35) = 0;
    v36 = 8 * (v31 + 70);
    *(_QWORD *)(a1 + 1384) = *(_QWORD *)(v2 + v36);
    *(_QWORD *)(v2 + v36) = 0;
    v37 = 8 * (v31 + 80);
    *(_QWORD *)(a1 + 1464) = *(_QWORD *)(v2 + v37);
    *(_QWORD *)(v2 + v37) = 0;
    v38 = 8 * (v31 + 90);
    *(_QWORD *)(a1 + 1544) = *(_QWORD *)(v2 + v38);
    *(_QWORD *)(v2 + v38) = 0;
    *(_QWORD *)(v2 + v32) = 0x3FF0000000000000;
  }
  v39 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 984) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 1000) = v39;
  *(_OWORD *)(a1 + 1016) = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 1032) = *(_QWORD *)(a1 + 152);
  v40 = v1[2];
  if (v40 != 2)
  {
    v41 = 8 * (v40 + 20);
    *(_QWORD *)(a1 + 976) = *(_QWORD *)(v2 + v41);
    v42 = 8 * (v40 + 30);
    *(_QWORD *)(a1 + 1056) = *(_QWORD *)(v2 + v42);
    *(_QWORD *)(v2 + v42) = 0;
    v43 = 8 * (v40 + 40);
    *(_QWORD *)(a1 + 1136) = *(_QWORD *)(v2 + v43);
    *(_QWORD *)(v2 + v43) = 0;
    v44 = 8 * (v40 + 50);
    *(_QWORD *)(a1 + 1216) = *(_QWORD *)(v2 + v44);
    *(_QWORD *)(v2 + v44) = 0;
    v45 = 8 * (v40 + 60);
    *(_QWORD *)(a1 + 1296) = *(_QWORD *)(v2 + v45);
    *(_QWORD *)(v2 + v45) = 0;
    v46 = 8 * (v40 + 70);
    *(_QWORD *)(a1 + 1376) = *(_QWORD *)(v2 + v46);
    *(_QWORD *)(v2 + v46) = 0;
    v47 = 8 * (v40 + 80);
    *(_QWORD *)(a1 + 1456) = *(_QWORD *)(v2 + v47);
    *(_QWORD *)(v2 + v47) = 0;
    v48 = 8 * (v40 + 90);
    *(_QWORD *)(a1 + 1536) = *(_QWORD *)(v2 + v48);
    *(_QWORD *)(v2 + v48) = 0;
    *(_QWORD *)(v2 + v41) = 0x3FF0000000000000;
  }
  v49 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 912) = v49;
  v50 = *(_OWORD *)(a1 + 48);
  v51 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 928) = v50;
  *(_OWORD *)(a1 + 944) = v51;
  v52 = v1[1];
  if (v52 != 1)
  {
    v53 = 8 * (v52 + 10);
    *(_QWORD *)(a1 + 888) = *(_QWORD *)(v2 + v53);
    v54 = 8 * (v52 + 20);
    *(_QWORD *)(a1 + 968) = *(_QWORD *)(v2 + v54);
    *(_QWORD *)(v2 + v54) = 0;
    v55 = 8 * (v52 + 30);
    *(_QWORD *)(a1 + 1048) = *(_QWORD *)(v2 + v55);
    *(_QWORD *)(v2 + v55) = 0;
    v56 = 8 * (v52 + 40);
    *(_QWORD *)(a1 + 1128) = *(_QWORD *)(v2 + v56);
    *(_QWORD *)(v2 + v56) = 0;
    v57 = 8 * (v52 + 50);
    *(_QWORD *)(a1 + 1208) = *(_QWORD *)(v2 + v57);
    *(_QWORD *)(v2 + v57) = 0;
    v58 = 8 * (v52 + 60);
    *(_QWORD *)(a1 + 1288) = *(_QWORD *)(v2 + v58);
    *(_QWORD *)(v2 + v58) = 0;
    v59 = 8 * (v52 + 70);
    *(_QWORD *)(a1 + 1368) = *(_QWORD *)(v2 + v59);
    *(_QWORD *)(v2 + v59) = 0;
    v60 = 8 * (v52 + 80);
    *(_QWORD *)(a1 + 1448) = *(_QWORD *)(v2 + v60);
    *(_QWORD *)(v2 + v60) = 0;
    v61 = 8 * (v52 + 90);
    *(_QWORD *)&v50 = *(_QWORD *)(v2 + v61);
    *(_QWORD *)(a1 + 1528) = v50;
    *(_QWORD *)(v2 + v61) = 0;
    *(_QWORD *)(v2 + v53) = 0x3FF0000000000000;
  }
  return *(double *)&v50;
}

uint64_t sub_239452C6C(uint64_t a1)
{
  int v2;
  double v3;
  double v4;
  double *v5;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  unsigned int v14;
  double v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  int v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double *v32;
  double *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  double v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  int v113;
  int v114;
  double v115;
  double v116;
  double v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  double v123;
  double v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  double v130;
  uint64_t v131;
  double v132;
  double v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  double v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  double v144;
  double v145;
  double v146;
  uint64_t v147;
  double v148;
  double v149;
  double v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  double v156;
  double v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  double v163;
  double v164;
  uint64_t v165;
  double v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  uint64_t v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  double v177;
  double v178;
  uint64_t v179;
  double v180;
  uint64_t v181;
  uint64_t v182;
  double v183;
  double v184;
  double v185;
  uint64_t v186;
  double v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  double v191;
  double v192;
  uint64_t v193;
  double v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  double v198;
  double v199;
  uint64_t v200;
  double v201;
  uint64_t v202;
  uint64_t v203;
  double v204;
  double v205;
  double v206;
  uint64_t v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  double v212;
  uint64_t v213;
  double v214;
  unsigned int v215;
  int v216;
  BOOL v217;
  BOOL v218;
  unint64_t v219;
  unint64_t v220;
  float64x2_t v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  float64x2_t v225;
  uint64_t v226;
  float64x2_t v227;
  int v228;
  double v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  int v233;
  unint64_t v234;
  double v235;
  int v236;
  double v237;
  int64_t v238;
  uint64_t v239;
  uint64_t v240;
  double *v241;
  double v242;
  double v243;
  int v244;
  int v245;
  int v246;
  uint64_t v247;
  int v248;
  unsigned int v249;
  int v250;
  double *v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  double v258;
  BOOL v259;
  unsigned int v260;
  int v261;
  int v262;
  uint64_t v263;
  double v264;
  int v265;
  uint64_t v266;
  double v267;
  uint64_t v268;
  double v269;
  uint64_t v270;
  int v271;
  double v272;
  int v273;
  uint64_t v274;
  double v275;
  double v276;
  unsigned int v277;
  int v278;
  double v279;
  double v280;
  double *v281;
  double v282;
  uint64_t v283;
  uint64_t v284;
  double v285;
  uint64_t v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  uint64_t v295;
  double v296;
  double v297;
  unsigned int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  double v307;
  double *v308;
  double v309;
  uint64_t v310;
  double v311;
  double *v312;
  double v313;
  uint64_t v314;
  double v315;
  double *v316;
  double v317;
  uint64_t v318;
  double v319;
  double *v320;
  double v321;
  uint64_t v322;
  double v323;
  double *v324;
  double v325;
  uint64_t v326;
  double v327;
  double *v328;
  double v329;
  uint64_t v330;
  double v331;
  double *v332;
  double v333;
  uint64_t v334;
  double v335;
  double *v336;
  double v337;
  uint64_t v338;
  double v339;
  double *v340;
  double v341;
  uint64_t v342;
  double v343;
  double *v344;
  double v345;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  int v354;
  double v355;
  double v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  uint64_t v362;
  unint64_t v363;
  double v364;
  double v365;
  double v366;
  double v367;

  v2 = 0;
  v3 = fabs(*(double *)a1)
     + fabs(*(double *)(a1 + 80))
     + fabs(*(double *)(a1 + 160))
     + fabs(*(double *)(a1 + 240))
     + fabs(*(double *)(a1 + 320))
     + fabs(*(double *)(a1 + 400))
     + fabs(*(double *)(a1 + 480))
     + fabs(*(double *)(a1 + 560))
     + fabs(*(double *)(a1 + 640))
     + fabs(*(double *)(a1 + 720))
     + fabs(*(double *)(a1 + 8))
     + fabs(*(double *)(a1 + 88))
     + fabs(*(double *)(a1 + 168))
     + fabs(*(double *)(a1 + 248))
     + fabs(*(double *)(a1 + 328))
     + fabs(*(double *)(a1 + 408))
     + fabs(*(double *)(a1 + 488))
     + fabs(*(double *)(a1 + 568))
     + fabs(*(double *)(a1 + 648))
     + fabs(*(double *)(a1 + 728))
     + fabs(*(double *)(a1 + 96))
     + fabs(*(double *)(a1 + 176))
     + fabs(*(double *)(a1 + 256))
     + fabs(*(double *)(a1 + 336))
     + fabs(*(double *)(a1 + 416))
     + fabs(*(double *)(a1 + 496))
     + fabs(*(double *)(a1 + 576))
     + fabs(*(double *)(a1 + 656))
     + fabs(*(double *)(a1 + 736))
     + fabs(*(double *)(a1 + 184))
     + fabs(*(double *)(a1 + 264))
     + fabs(*(double *)(a1 + 344));
  v4 = v3
     + fabs(*(double *)(a1 + 424))
     + fabs(*(double *)(a1 + 504))
     + fabs(*(double *)(a1 + 584))
     + fabs(*(double *)(a1 + 664))
     + fabs(*(double *)(a1 + 744))
     + fabs(*(double *)(a1 + 272))
     + fabs(*(double *)(a1 + 352))
     + fabs(*(double *)(a1 + 432))
     + fabs(*(double *)(a1 + 512))
     + fabs(*(double *)(a1 + 592))
     + fabs(*(double *)(a1 + 672))
     + fabs(*(double *)(a1 + 752))
     + fabs(*(double *)(a1 + 360))
     + fabs(*(double *)(a1 + 440))
     + fabs(*(double *)(a1 + 520))
     + fabs(*(double *)(a1 + 600))
     + fabs(*(double *)(a1 + 680))
     + fabs(*(double *)(a1 + 760))
     + fabs(*(double *)(a1 + 448))
     + fabs(*(double *)(a1 + 528))
     + fabs(*(double *)(a1 + 608))
     + fabs(*(double *)(a1 + 688))
     + fabs(*(double *)(a1 + 768))
     + fabs(*(double *)(a1 + 536))
     + fabs(*(double *)(a1 + 616))
     + fabs(*(double *)(a1 + 696))
     + fabs(*(double *)(a1 + 776))
     + fabs(*(double *)(a1 + 624))
     + fabs(*(double *)(a1 + 704))
     + fabs(*(double *)(a1 + 784))
     + fabs(*(double *)(a1 + 712))
     + fabs(*(double *)(a1 + 792));
  v5 = (double *)(a1 + 800);
  v6 = 9;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  while (1)
  {
    if (v6 > 0)
    {
      v13 = v6;
      v14 = 11 * v6;
      while (1)
      {
        v15 = fabs(*(double *)(a1 + 8 * (v14 - 11))) + fabs(*(double *)(a1 + 8 * v14));
        v11 = v15 == 0.0 ? v4 : v15;
        v16 = v14 - 10;
        if (fabs(*(double *)(a1 + 8 * v16)) <= v11 * 2.22044605e-16)
          break;
        --v13;
        v14 -= 11;
        if ((unint64_t)(v13 + 1) < 2)
        {
          LODWORD(v13) = 0;
          v17 = (double *)(a1 + 8 * (11 * v6));
          v18 = *v17;
          goto LABEL_16;
        }
      }
      *(_QWORD *)(a1 + 8 * v16) = 0;
      v17 = (double *)(a1 + 8 * (11 * v6));
      v18 = *v17;
      if ((_DWORD)v13 == v6)
        goto LABEL_12;
LABEL_16:
      v21 = v6 - 1;
      v22 = 10 * (v6 - 1);
      v23 = (11 * (v6 - 1));
      v24 = *(double *)(a1 + 8 * v23);
      v25 = (v22 + v6);
      v26 = *(double *)(a1 + 8 * v25);
      v27 = 10 * v6;
      v28 = v26 * *(double *)(a1 + 8 * (10 * v6 + v6 - 1));
      if ((_DWORD)v13 == v6 - 1)
      {
        v8 = (v24 - v18) * 0.5;
        v9 = v28 + v8 * v8;
        v7 = sqrt(fabs(v9));
        v29 = v12 + v18;
        *v17 = v29;
        *(double *)(a1 + 8 * v23) = v12 + v24;
        if (v9 < 0.0)
        {
          v30 = v29 + v8;
          v31 = *(_QWORD *)(a1 + 1648);
          v32 = (double *)(v31 + 16 * v6);
          *v32 = v30;
          v32[1] = -v7;
          v33 = (double *)(v31 + 16 * (int)v13);
          *v33 = v30;
          v33[1] = v7;
          v6 -= 2;
          goto LABEL_13;
        }
        v50 = fabs(v7);
        if (v8 < 0.0)
          v50 = -v50;
        v51 = v8 + v50;
        v52 = *(_QWORD *)(a1 + 1648);
        v53 = v52 + 16 * v6;
        *(double *)v53 = v29 + v51;
        *(_QWORD *)(v53 + 8) = 0;
        *(_OWORD *)(v52 + 16 * (int)v13) = *(_OWORD *)v53;
        if (v51 != 0.0)
        {
          v54 = *(_QWORD *)(a1 + 1648) + 16 * v6;
          *(double *)v54 = v29 - v28 / v51;
          *(_QWORD *)(v54 + 8) = 0;
        }
        v55 = *(double *)(a1 + 8 * v25);
        v11 = fabs(v51) + fabs(v55);
        v56 = v55 / v11;
        v57 = v51 / v11;
        v10 = sqrt(v57 * v57 + v56 * v56);
        v8 = v56 / v10;
        v9 = v57 / v10;
        if (v6 <= 10)
        {
          v58 = v13 - 1;
          v59 = v6 + 10 * v13;
          v60 = 11 * v13;
          do
          {
            v61 = 8 * v60;
            v62 = *(double *)(a1 + v61);
            v63 = 8 * v59;
            v64 = *(double *)(a1 + v63);
            *(double *)(a1 + v61) = v8 * v64 + v9 * v62;
            *(double *)(a1 + v63) = v62 * -v8 + v9 * v64;
            ++v58;
            v59 += 10;
            v60 += 10;
          }
          while (v58 < 9);
        }
        v65 = -v8;
        v66 = (v6 + 1);
        if (v6 < 9)
        {
LABEL_45:
          v67 = 0;
          goto LABEL_46;
        }
        v67 = 0;
        v217 = __CFADD__(v22, v6);
        v218 = __CFADD__(v27, v6);
        if (v217 || v218)
          goto LABEL_46;
        v219 = a1 + 8 * (10 * (v6 - 1));
        v220 = a1 + 8 * (10 * v6);
        if (v219 < v220 + 8 * v66 && v220 < v219 + 8 * v66)
          goto LABEL_45;
        v67 = v66 & 0xFFFFFFFE;
        v221 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0);
        v222 = 10 * v6;
        v223 = v67;
        do
        {
          v224 = 8 * (v222 - 10);
          v225 = *(float64x2_t *)(a1 + v224);
          v226 = 8 * v222;
          v227 = *(float64x2_t *)(a1 + v226);
          *(float64x2_t *)(a1 + v224) = vmlaq_f64(vmulq_n_f64(v227, v8), v225, v221);
          *(float64x2_t *)(a1 + v226) = vmlaq_f64(vmulq_n_f64(v225, v65), v227, v221);
          v222 += 2;
          v223 -= 2;
        }
        while (v223);
        if (v67 != v66)
        {
LABEL_46:
          v68 = v27 + v67;
          v69 = v66 - v67;
          do
          {
            v70 = 8 * (v68 - 10);
            v71 = *(double *)(a1 + v70);
            v72 = 8 * v68;
            v73 = *(double *)(a1 + v72);
            *(double *)(a1 + v70) = v8 * v73 + v9 * v71;
            *(double *)(a1 + v72) = v71 * v65 + v9 * v73;
            ++v68;
            --v69;
          }
          while (v69);
        }
        v74 = (10 * (v6 - 1));
        v75 = v5[v74];
        v76 = (10 * v6);
        v77 = v5[v76];
        v5[v74] = v8 * v77 + v9 * v75;
        v5[v76] = v75 * v65 + v9 * v77;
        v78 = v22 | 1u;
        v79 = v5[v78];
        v80 = v27 | 1u;
        v81 = v5[v80];
        v5[v78] = v8 * v81 + v9 * v79;
        v5[v80] = v79 * v65 + v9 * v81;
        v82 = (v22 + 2);
        v83 = v5[v82];
        v84 = (v27 + 2);
        v85 = v5[v84];
        v5[v82] = v8 * v85 + v9 * v83;
        v5[v84] = v83 * v65 + v9 * v85;
        v86 = (v22 + 3);
        v87 = v5[v86];
        v88 = (v27 + 3);
        v89 = v5[v88];
        v5[v86] = v8 * v89 + v9 * v87;
        v5[v88] = v87 * v65 + v9 * v89;
        v90 = (v22 + 4);
        v91 = v5[v90];
        v92 = (v27 + 4);
        v93 = v5[v92];
        v5[v90] = v8 * v93 + v9 * v91;
        v5[v92] = v91 * v65 + v9 * v93;
        v94 = (v22 + 5);
        v95 = v5[v94];
        v96 = (v27 + 5);
        v97 = v5[v96];
        v5[v94] = v8 * v97 + v9 * v95;
        v5[v96] = v95 * v65 + v9 * v97;
        v98 = (v22 + 6);
        v99 = v5[v98];
        v100 = (v27 + 6);
        v101 = v5[v100];
        v5[v98] = v8 * v101 + v9 * v99;
        v5[v100] = v99 * v65 + v9 * v101;
        v102 = (v22 + 7);
        v103 = v5[v102];
        v104 = (v27 + 7);
        v105 = v5[v104];
        v5[v102] = v8 * v105 + v9 * v103;
        v5[v104] = v103 * v65 + v9 * v105;
        v106 = (v22 + 8);
        v107 = v5[v106];
        v108 = (v27 + 8);
        v109 = v5[v108];
        v5[v106] = v8 * v109 + v9 * v107;
        v5[v108] = v107 * v65 + v9 * v109;
        v110 = (v22 + 9);
        v7 = v5[v110];
        v111 = (v27 + 9);
        v112 = v5[v111];
        v5[v110] = v8 * v112 + v9 * v7;
        v5[v111] = v7 * v65 + v9 * v112;
        v6 -= 2;
        goto LABEL_13;
      }
      if (v2 == 10 || v2 == 20)
      {
        if ((v6 & 0x80000000) == 0)
        {
          v35 = (v6 + 1);
          v36 = v35 & 0xFFFFFFFE;
          v37 = 11;
          do
          {
            v38 = 8 * v37;
            v39 = *(double *)(a1 + v38) - v18;
            *(double *)(a1 + 8 * (((_DWORD)v37 - 11) & 0xFFFFFFFE)) = *(double *)(a1
                                                                                  + 8
                                                                                  * (((_DWORD)v37 - 11) & 0xFFFFFFFE))
                                                                      - v18;
            *(double *)(a1 + v38) = v39;
            v37 += 22;
            v36 -= 2;
          }
          while (v36);
          v40 = v35 - (v35 & 0xFFFFFFFE);
          if (v40)
          {
            v41 = 22 * ((v6 + 1) >> 1);
            do
            {
              *(double *)(a1 + 8 * v41) = *(double *)(a1 + 8 * v41) - v18;
              v41 += 11;
              --v40;
            }
            while (v40);
          }
          v26 = *(double *)(a1 + 8 * v25);
        }
        v12 = v12 + v18;
        v11 = fabs(v26) + fabs(*(double *)(a1 + 8 * (v27 + v21 - 20)));
        v18 = v11 * 0.75;
        v28 = v11 * (v11 * -0.4375);
        v24 = v11 * 0.75;
        v34 = v6 - 2;
        if (v6 - 2 < (int)v13)
          goto LABEL_50;
      }
      else
      {
        if (v2 == 30)
          return 0;
        v34 = v6 - 2;
        if (v6 - 2 < (int)v13)
        {
LABEL_50:
          *(_QWORD *)(a1 + 8 * (11 * v34 + 2)) = 0;
          if (v34 + 1 != v21)
          {
            v215 = 11 * v34 + 13;
            v216 = 2;
            do
            {
              *(_QWORD *)(a1 + 8 * v215) = 0;
              if (v216 != 1)
                *(_QWORD *)(a1 + 8 * (v215 - 10)) = 0;
              ++v216;
              v215 += 11;
            }
            while (v6 - v34 != v216);
          }
LABEL_51:
          ++v2;
          if (v34 < v6)
          {
            v113 = v34;
            do
            {
              while (1)
              {
                if (v113 != v34)
                {
                  v114 = 10 * v113 - 10;
                  v10 = 0.0;
                  if (v113 + 1 != v6)
                    v10 = *(double *)(a1 + 8 * (v113 + v114 + 2));
                  v8 = *(double *)(a1 + 8 * (v114 + v113));
                  v9 = *(double *)(a1 + 8 * (v114 + v113 + 1));
                  v18 = fabs(v8) + fabs(v9) + fabs(v10);
                  if (v18 != 0.0)
                  {
                    v8 = v8 / v18;
                    v9 = v9 / v18;
                    v10 = v10 / v18;
                  }
                }
                v115 = fabs(sqrt(v9 * v9 + v8 * v8 + v10 * v10));
                v11 = v8 >= 0.0 ? v115 : -v115;
                if (v11 != 0.0)
                  break;
                if (++v113 == v6)
                  goto LABEL_13;
              }
              if (v113 == v34)
              {
                if ((_DWORD)v13 != v34)
                  *(double *)(a1 + 8 * (11 * v34 - 10)) = -*(double *)(a1
                                                                                     + 8
                                                                                     * (11 * v34 - 10));
              }
              else
              {
                *(double *)(a1 + 8 * (11 * v113 - 10)) = -(v11 * v18);
              }
              v116 = v8 + v11;
              v18 = (v8 + v11) / v11;
              v117 = v9 / v11;
              v7 = v10 / v11;
              v9 = v9 / v116;
              v10 = v10 / v116;
              if (v113 <= 9)
              {
                if (v113 + 1 == v6)
                {
                  v118 = v113 - 1;
                  v119 = 11 * v113;
                  do
                  {
                    v120 = 8 * v119;
                    v121 = *(double *)(a1 + v120);
                    v122 = 8 * (v119 + 1);
                    v123 = *(double *)(a1 + v122);
                    v124 = v121 + v9 * v123;
                    *(double *)(a1 + v122) = v123 - v124 * v117;
                    *(double *)(a1 + v120) = v121 - v124 * v18;
                    ++v118;
                    v119 += 10;
                  }
                  while (v118 < 9);
                }
                else
                {
                  v125 = v113 - 1;
                  v126 = 11 * v113;
                  do
                  {
                    v127 = 8 * v126;
                    v128 = *(double *)(a1 + v127);
                    v129 = 8 * (v126 + 1);
                    v130 = *(double *)(a1 + v129);
                    v131 = 8 * (v126 + 2);
                    v132 = *(double *)(a1 + v131);
                    v133 = v128 + v9 * v130 + v10 * v132;
                    *(double *)(a1 + v131) = v132 - v133 * v7;
                    *(double *)(a1 + v129) = v130 - v133 * v117;
                    *(double *)(a1 + v127) = v128 - v133 * v18;
                    ++v125;
                    v126 += 10;
                  }
                  while (v125 < 9);
                }
              }
              if (v6 >= v113 + 3)
                v134 = (v113 + 3);
              else
                v134 = v6;
              v135 = (10 * v113++);
              if ((v134 & 0x80000000) == 0)
              {
                v136 = -1;
                if (v113 == v6)
                {
                  do
                  {
                    v137 = 8 * (v135 + v136 + 1);
                    v138 = 8 * (v135 + v136 + 11);
                    v139 = *(double *)(a1 + v138);
                    v140 = v117 * v139 + v18 * *(double *)(a1 + v137);
                    *(double *)(a1 + v138) = v139 - v140 * v9;
                    *(double *)(a1 + v137) = *(double *)(a1 + v137) - v140;
                    ++v136;
                  }
                  while (v136 < v134);
                }
                else
                {
                  do
                  {
                    v141 = 8 * (v135 + v136 + 1);
                    v142 = 8 * (v135 + v136 + 11);
                    v143 = 8 * (v135 + v136 + 21);
                    v144 = *(double *)(a1 + v143);
                    v145 = v117 * *(double *)(a1 + v142) + v18 * *(double *)(a1 + v141) + v7 * v144;
                    *(double *)(a1 + v143) = v144 - v145 * v10;
                    *(double *)(a1 + v142) = *(double *)(a1 + v142) - v145 * v9;
                    *(double *)(a1 + v141) = *(double *)(a1 + v141) - v145;
                    ++v136;
                  }
                  while (v136 < v134);
                }
              }
              v146 = v5[v135];
              v147 = (v135 + 10);
              v148 = v5[v147];
              v149 = v117 * v148 + v18 * v146;
              if (v113 == v6)
              {
                v150 = -v149;
              }
              else
              {
                v151 = (v135 + 20);
                v152 = v5[v151];
                v150 = -(v149 + v7 * v152);
                v149 = v149 + v7 * v152;
                v5[v151] = v152 - v149 * v10;
              }
              v5[v147] = v148 + v150 * v9;
              v5[v135] = v146 - v149;
              v153 = v135 | 1;
              v154 = v147 | 1;
              v155 = v5[v154];
              v156 = v117 * v155 + v18 * v5[v153];
              if (v113 == v6)
              {
                v157 = -v156;
              }
              else
              {
                v158 = (v135 + 21);
                v159 = v5[v158];
                v157 = -(v156 + v7 * v159);
                v156 = v156 + v7 * v159;
                v5[v158] = v159 - v156 * v10;
                v155 = v5[v154];
              }
              v5[v154] = v155 + v157 * v9;
              v5[v153] = v5[v153] - v156;
              v160 = (v135 + 2);
              v161 = (v135 + 12);
              v162 = v5[v161];
              v163 = v117 * v162 + v18 * v5[v160];
              if (v113 == v6)
              {
                v164 = -v163;
              }
              else
              {
                v165 = (v135 + 22);
                v166 = v5[v165];
                v164 = -(v163 + v7 * v166);
                v163 = v163 + v7 * v166;
                v5[v165] = v166 - v163 * v10;
                v162 = v5[v161];
              }
              v5[v161] = v162 + v164 * v9;
              v5[v160] = v5[v160] - v163;
              v167 = (v135 + 3);
              v168 = (v135 + 13);
              v169 = v5[v168];
              v170 = v117 * v169 + v18 * v5[v167];
              if (v113 == v6)
              {
                v171 = -v170;
              }
              else
              {
                v172 = (v135 + 23);
                v173 = v5[v172];
                v171 = -(v170 + v7 * v173);
                v170 = v170 + v7 * v173;
                v5[v172] = v173 - v170 * v10;
                v169 = v5[v168];
              }
              v5[v168] = v169 + v171 * v9;
              v5[v167] = v5[v167] - v170;
              v174 = (v135 + 4);
              v175 = (v135 + 14);
              v176 = v5[v175];
              v177 = v117 * v176 + v18 * v5[v174];
              if (v113 == v6)
              {
                v178 = -v177;
              }
              else
              {
                v179 = (v135 + 24);
                v180 = v5[v179];
                v178 = -(v177 + v7 * v180);
                v177 = v177 + v7 * v180;
                v5[v179] = v180 - v177 * v10;
                v176 = v5[v175];
              }
              v5[v175] = v176 + v178 * v9;
              v5[v174] = v5[v174] - v177;
              v181 = (v135 + 5);
              v182 = (v135 + 15);
              v183 = v5[v182];
              v184 = v117 * v183 + v18 * v5[v181];
              if (v113 == v6)
              {
                v185 = -v184;
              }
              else
              {
                v186 = (v135 + 25);
                v187 = v5[v186];
                v185 = -(v184 + v7 * v187);
                v184 = v184 + v7 * v187;
                v5[v186] = v187 - v184 * v10;
                v183 = v5[v182];
              }
              v5[v182] = v183 + v185 * v9;
              v5[v181] = v5[v181] - v184;
              v188 = (v135 + 6);
              v189 = (v135 + 16);
              v190 = v5[v189];
              v191 = v117 * v190 + v18 * v5[v188];
              if (v113 == v6)
              {
                v192 = -v191;
              }
              else
              {
                v193 = (v135 + 26);
                v194 = v5[v193];
                v192 = -(v191 + v7 * v194);
                v191 = v191 + v7 * v194;
                v5[v193] = v194 - v191 * v10;
                v190 = v5[v189];
              }
              v5[v189] = v190 + v192 * v9;
              v5[v188] = v5[v188] - v191;
              v195 = (v135 + 7);
              v196 = (v135 + 17);
              v197 = v5[v196];
              v198 = v117 * v197 + v18 * v5[v195];
              if (v113 == v6)
              {
                v199 = -v198;
              }
              else
              {
                v200 = (v135 + 27);
                v201 = v5[v200];
                v199 = -(v198 + v7 * v201);
                v198 = v198 + v7 * v201;
                v5[v200] = v201 - v198 * v10;
                v197 = v5[v196];
              }
              v5[v196] = v197 + v199 * v9;
              v5[v195] = v5[v195] - v198;
              v202 = (v135 + 8);
              v203 = (v135 + 18);
              v204 = v5[v203];
              v205 = v117 * v204 + v18 * v5[v202];
              if (v113 == v6)
              {
                v206 = -v205;
              }
              else
              {
                v207 = (v135 + 28);
                v208 = v5[v207];
                v206 = -(v205 + v7 * v208);
                v205 = v205 + v7 * v208;
                v5[v207] = v208 - v205 * v10;
                v204 = v5[v203];
              }
              v5[v203] = v204 + v206 * v9;
              v5[v202] = v5[v202] - v205;
              v209 = (v135 + 9);
              v210 = (v135 + 19);
              v211 = v5[v210];
              v8 = v117 * v211 + v18 * v5[v209];
              if (v113 == v6)
              {
                v212 = -v8;
              }
              else
              {
                v213 = (v135 + 29);
                v214 = v5[v213];
                v212 = -(v8 + v7 * v214);
                v8 = v8 + v7 * v214;
                v5[v213] = v214 - v8 * v10;
                v211 = v5[v210];
              }
              v5[v210] = v211 + v212 * v9;
              v5[v209] = v5[v209] - v8;
            }
            while (v113 != v6);
          }
          goto LABEL_13;
        }
      }
      v42 = -v28;
      v43 = 11 * v6 - 12;
      while (1)
      {
        v7 = *(double *)(a1 + 8 * (v43 - 10));
        v44 = *(double *)(a1 + 8 * v43) + (v42 + (v18 - v7) * (v24 - v7)) / *(double *)(a1 + 8 * (v43 - 9));
        v45 = *(double *)(a1 + 8 * (v43 + 1));
        v46 = v45 - v7 - (v18 - v7);
        v47 = *(double *)(a1 + 8 * (v43 + 2));
        v11 = fabs(v47) + fabs(v44) + vabdd_f64(v46, v24 - v7);
        v8 = v44 / v11;
        v9 = (v46 - (v24 - v7)) / v11;
        v10 = v47 / v11;
        if ((_DWORD)v13 == v34)
          break;
        --v34;
        v48 = (fabs(v9) + fabs(v10)) * fabs(*(double *)(a1 + 8 * (v43 - 20)));
        v49 = fabs(v8) * (fabs(v45) + fabs(v7) + fabs(*(double *)(a1 + 8 * (v43 - 21)))) * 2.22044605e-16;
        v43 -= 11;
        if (v48 <= v49)
        {
          if (++v34 < v21)
            goto LABEL_50;
          goto LABEL_51;
        }
      }
      v34 = v13;
      if ((int)v13 >= v21)
        goto LABEL_51;
      goto LABEL_50;
    }
    v17 = (double *)(a1 + 8 * (11 * v6));
    v18 = *v17;
    LODWORD(v13) = v6;
LABEL_12:
    v19 = v12 + v18;
    *v17 = v19;
    v20 = *(_QWORD *)(a1 + 1648) + 16 * v6;
    *(double *)v20 = v19;
    *(_QWORD *)(v20 + 8) = 0;
    --v6;
LABEL_13:
    if ((int)v13 + 1 >= v6)
    {
      v2 = 0;
      if (v6 < 0)
        break;
    }
  }
  if (v4 == 0.0)
    return 1;
  v228 = 0;
  v229 = v4 * 2.22044605e-16;
  v230 = 7;
  v231 = 8;
  v232 = 97;
  v233 = 98;
  v234 = 9;
  v235 = 1.0;
  v236 = 10;
  v350 = v4 * 2.22044605e-16;
  while (2)
  {
    v238 = v234;
    v239 = v231;
    v362 = v230;
    v240 = *(_QWORD *)(a1 + 1648);
    v241 = (double *)(v240 + 16 * v234);
    v243 = *v241;
    v242 = v241[1];
    v244 = v234 - 1;
    v358 = v233;
    v359 = v232;
    v363 = v234 - 1;
    v357 = v239;
    if (v242 != 0.0)
    {
      if (v242 < 0.0)
      {
        v262 = 10 * v244;
        v263 = (10 * v244 + v234);
        v264 = *(double *)(a1 + 8 * v263);
        v265 = 10 * v234;
        v266 = (10 * v234 + v244);
        v267 = *(double *)(a1 + 8 * v266);
        v356 = v241[1];
        v360 = 10 * v234;
        v361 = 10 * v244;
        if (fabs(v264) <= fabs(v267))
        {
          v366 = 0.0;
          v367 = -v267;
          v268 = 8 * (11 * v244);
          v364 = *(double *)(a1 + v268) - v243;
          v365 = v242;
          v269 = sub_23945474C(&v366, &v364);
          v265 = v360;
          v262 = v361;
          v242 = v356;
          v235 = 1.0;
          *(double *)(a1 + v268) = v269;
          *(_QWORD *)(a1 + 8 * v266) = v270;
          *(_QWORD *)(a1 + 8 * v263) = 0;
          *(_QWORD *)(a1 + 88 * v238) = 0x3FF0000000000000;
          if ((unint64_t)v238 >= 2)
            goto LABEL_167;
        }
        else
        {
          *(double *)(a1 + 8 * (11 * v244)) = v242 / v264;
          *(double *)(a1 + 8 * v266) = -(*(double *)(a1 + 88 * v234) - v243) / v264;
          *(_QWORD *)(a1 + 8 * v263) = 0;
          *(_QWORD *)(a1 + 88 * v234) = 0x3FF0000000000000;
          if (v234 >= 2)
          {
LABEL_167:
            v351 = -v242;
            v347 = v242 + v242;
            v271 = 3;
            v272 = fabs(v242);
            v274 = v362;
            v273 = v363;
            v237 = v7;
            v355 = v272;
            do
            {
              v275 = 0.0;
              v276 = 0.0;
              if (v238 >= v273)
              {
                v277 = v274 + 10 * v273;
                v278 = v273;
                do
                {
                  v279 = *(double *)(a1 + 8 * v277);
                  v275 = v275 + v279 * *(double *)(a1 + 8 * (v228 + v278 + 80));
                  v276 = v276 + v279 * *(double *)(a1 + 8 * (v228 + v278++ + 90));
                  v277 += 10;
                }
                while (v236 != v278);
              }
              v280 = *(double *)(a1 + 8 * (11 * v274)) - v243;
              v281 = (double *)(*(_QWORD *)(a1 + 1648) + 16 * v274);
              v282 = v281[1];
              if (v282 >= 0.0)
              {
                if (v282 == 0.0)
                {
                  v366 = -v275;
                  v367 = -v276;
                  v364 = v280;
                  v365 = v242;
                  v285 = sub_23945474C(&v366, &v364);
                  v272 = v355;
                  v242 = v356;
                  v265 = v360;
                  v262 = v361;
                  v235 = 1.0;
                  v283 = (v274 + v361);
                  *(double *)(a1 + 8 * v283) = v285;
                  v284 = (v274 + v360);
                  *(_QWORD *)(a1 + 8 * v284) = v286;
                  v273 = v274;
                }
                else
                {
                  v287 = *(double *)(a1 + 8 * (v274 + 10 * (v274 + 1)));
                  v354 = v274 + 1;
                  v288 = *v281 - v243;
                  v289 = v282 * v282 + v288 * v288 + v351 * v242;
                  v349 = *(double *)(a1 + 8 * (10 * v274 + v274 + 1));
                  if (v289 == 0.0 && v347 * v288 == 0.0)
                  {
                    v353 = fabs(v287);
                    v352 = fabs(v237);
                    v289 = v350
                         * (v352
                          + v272
                          + fabs(v280)
                          + v353
                          + fabs(*(double *)(a1 + 8 * (10 * v274 + v274 + 1))));
                  }
                  else
                  {
                    v352 = fabs(v237);
                    v353 = fabs(v287);
                  }
                  v290 = v272;
                  v366 = v287 * v10 - v237 * v275 + v242 * v276;
                  v367 = v287 * v11 - v237 * v276 + v351 * v275;
                  v364 = v289;
                  v365 = v347 * v288;
                  v348 = v287;
                  v291 = sub_23945474C(&v366, &v364);
                  v265 = v360;
                  v262 = v361;
                  v283 = (v274 + v361);
                  *(double *)(a1 + 8 * v283) = v291;
                  v284 = (v274 + v360);
                  *(double *)(a1 + 8 * v284) = v292;
                  if (v353 <= v290 + v352)
                  {
                    v366 = -(v10 + v349 * *(double *)(a1 + 8 * v283));
                    v367 = -(v11 + v349 * v292);
                    v364 = v237;
                    v365 = v356;
                    v294 = sub_23945474C(&v366, &v364);
                    v272 = v355;
                    v265 = v360;
                    v262 = v361;
                    *(double *)(a1 + 8 * (v354 + v361)) = v294;
                    *(_QWORD *)(a1 + 8 * (v354 + v360)) = v295;
                    v273 = v274;
                    v229 = v350;
                    v235 = 1.0;
                    v242 = v356;
                  }
                  else
                  {
                    v272 = v290;
                    v293 = *(double *)(a1 + 8 * v283);
                    v242 = v356;
                    *(double *)(a1 + 8 * (v354 + v361)) = (v356 * v292 - (v275 + v280 * v293)) / v348;
                    v229 = v350;
                    *(double *)(a1 + 8 * (v354 + v360)) = (v351 * v293
                                                                         - (v276
                                                                          + v280 * *(double *)(a1 + 8 * v284)))
                                                                        / v348;
                    v273 = v274;
                    v235 = 1.0;
                  }
                }
              }
              else
              {
                v283 = (v274 + v262);
                v284 = (v274 + v265);
                v237 = *(double *)(a1 + 8 * (11 * v274)) - v243;
                v10 = v275;
                v11 = v276;
              }
              v296 = fabs(*(double *)(a1 + 8 * v283));
              v297 = fabs(*(double *)(a1 + 8 * v284));
              if (v296 < v297)
                v296 = v297;
              if (v296 * (v296 * 2.22044605e-16) > v235 && (int)v274 <= v238)
              {
                v299 = v232;
                v300 = v271;
                do
                {
                  *(double *)(a1 + 8 * (v299 - 10)) = *(double *)(a1 + 8 * (v299 - 10)) / v296;
                  *(double *)(a1 + 8 * v299) = *(double *)(a1 + 8 * v299) / v296;
                  ++v299;
                  --v300;
                }
                while (v300);
              }
              ++v271;
              --v232;
              v259 = (int)v274-- <= 0;
            }
            while (!v259);
LABEL_135:
            --v236;
            v234 = v363;
            v230 = v362 - 1;
            v231 = v357 - 1;
            v228 -= 10;
            v232 = v359 - 11;
            v233 = v358 - 11;
            v7 = v237;
            if (!v238)
              goto LABEL_193;
            continue;
          }
        }
      }
      v237 = v7;
      goto LABEL_135;
    }
    break;
  }
  *(_QWORD *)(a1 + 88 * v234) = 0x3FF0000000000000;
  if (v234)
  {
    v245 = 10 * v234;
    v246 = 2;
    v247 = v239;
    v248 = v238;
    do
    {
      v10 = 0.0;
      if (v238 >= v248)
      {
        v249 = v247 + 10 * v248;
        v250 = v248;
        do
        {
          v10 = v10 + *(double *)(a1 + 8 * v249) * *(double *)(a1 + 8 * (v228 + v250++ + 90));
          v249 += 10;
        }
        while (v236 != v250);
      }
      v237 = *(double *)(a1 + 8 * (11 * v247)) - v243;
      v251 = (double *)(v240 + 16 * v247);
      v252 = v251[1];
      if (v252 < 0.0)
      {
        v11 = v10;
      }
      else
      {
        if (v252 == 0.0)
        {
          if (v237 == 0.0)
            v253 = v229;
          else
            v253 = *(double *)(a1 + 8 * (11 * v247)) - v243;
          v254 = -v10 / v253;
          *(double *)(a1 + 8 * (v247 + v245)) = v254;
        }
        else
        {
          v255 = *(double *)(a1 + 8 * (v247 + 10 * (v247 + 1)));
          v256 = *(double *)(a1 + 8 * (10 * v247 + v247 + 1));
          v254 = (v255 * v11 - v7 * v10) / (v252 * v252 + (*v251 - v243) * (*v251 - v243));
          *(double *)(a1 + 8 * (v247 + v245)) = v254;
          if (fabs(v255) <= fabs(v7))
            v257 = -(v11 + v256 * v254) / v7;
          else
            v257 = -(v10 + v237 * v254) / v255;
          *(double *)(a1 + 8 * (v247 + 1 + v245)) = v257;
        }
        v258 = fabs(v254);
        v259 = v258 * (v258 * 2.22044605e-16) > v235 && (int)v247 <= v238;
        if (v259)
        {
          v260 = v233;
          v261 = v246;
          do
          {
            *(double *)(a1 + 8 * v260) = *(double *)(a1 + 8 * v260) / v258;
            ++v260;
            --v261;
          }
          while (v261);
        }
        v237 = v7;
        v248 = v247;
      }
      ++v246;
      --v233;
      v7 = v237;
      v259 = (int)v247-- <= 0;
    }
    while (!v259);
    goto LABEL_135;
  }
LABEL_193:
  v301 = a1 + 720;
  v302 = 10;
  v303 = 9;
  do
  {
    v304 = 0;
    v305 = v303;
    v306 = 10 * v303;
    v307 = 0.0;
    v308 = v5;
    do
    {
      v309 = *v308;
      v308 += 10;
      v307 = v307 + v309 * *(double *)(v301 + 8 * v304++);
    }
    while (v302 != v304);
    v310 = 0;
    v5[v306] = v307;
    v311 = 0.0;
    v312 = (double *)(a1 + 808);
    do
    {
      v313 = *v312;
      v312 += 10;
      v311 = v311 + v313 * *(double *)(v301 + 8 * v310++);
    }
    while (v302 != v310);
    v314 = 0;
    *(double *)((char *)v5 + ((8 * v306) | 8)) = v311;
    v315 = 0.0;
    v316 = (double *)(a1 + 816);
    do
    {
      v317 = *v316;
      v316 += 10;
      v315 = v315 + v317 * *(double *)(v301 + 8 * v314++);
    }
    while (v302 != v314);
    v318 = 0;
    v5[v306 + 2] = v315;
    v319 = 0.0;
    v320 = (double *)(a1 + 824);
    do
    {
      v321 = *v320;
      v320 += 10;
      v319 = v319 + v321 * *(double *)(v301 + 8 * v318++);
    }
    while (v302 != v318);
    v322 = 0;
    v5[v306 + 3] = v319;
    v323 = 0.0;
    v324 = (double *)(a1 + 832);
    do
    {
      v325 = *v324;
      v324 += 10;
      v323 = v323 + v325 * *(double *)(v301 + 8 * v322++);
    }
    while (v302 != v322);
    v326 = 0;
    v5[v306 + 4] = v323;
    v327 = 0.0;
    v328 = (double *)(a1 + 840);
    do
    {
      v329 = *v328;
      v328 += 10;
      v327 = v327 + v329 * *(double *)(v301 + 8 * v326++);
    }
    while (v302 != v326);
    v330 = 0;
    v5[v306 + 5] = v327;
    v331 = 0.0;
    v332 = (double *)(a1 + 848);
    do
    {
      v333 = *v332;
      v332 += 10;
      v331 = v331 + v333 * *(double *)(v301 + 8 * v330++);
    }
    while (v302 != v330);
    v334 = 0;
    v5[v306 + 6] = v331;
    v335 = 0.0;
    v336 = (double *)(a1 + 856);
    do
    {
      v337 = *v336;
      v336 += 10;
      v335 = v335 + v337 * *(double *)(v301 + 8 * v334++);
    }
    while (v302 != v334);
    v338 = 0;
    v5[v306 + 7] = v335;
    v339 = 0.0;
    v340 = (double *)(a1 + 864);
    do
    {
      v341 = *v340;
      v340 += 10;
      v339 = v339 + v341 * *(double *)(v301 + 8 * v338++);
    }
    while (v302 != v338);
    v342 = 0;
    v5[v306 + 8] = v339;
    v343 = 0.0;
    v344 = (double *)(a1 + 872);
    do
    {
      v345 = *v344;
      v344 += 10;
      v343 = v343 + v345 * *(double *)(v301 + 8 * v342++);
    }
    while (v302 != v342);
    v5[v306 + 9] = v343;
    v303 = v305 - 1;
    --v302;
    v301 -= 80;
  }
  while (v305);
  return 1;
}

void sub_23945456C(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  _QWORD *v18;
  _QWORD *v19;

  v2 = operator new(0x50uLL);
  v3 = 0;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v4 = a1 + 800;
  v5 = *(_QWORD *)(a1 + 1648);
  v6 = 1;
  v7 = 19;
  do
  {
    v10 = *(_OWORD *)(v5 + 16 * v6);
    v11 = (_OWORD *)(a1 + 80 * v3);
    v12 = v11[58];
    v2[2] = v11[57];
    v2[3] = v12;
    v2[4] = v11[59];
    v13 = v11[56];
    *v2 = v11[55];
    v2[1] = v13;
    v14 = v7;
    v15 = v6;
    while (1)
    {
      v16 = v15 - 1;
      v5 = *(_QWORD *)(a1 + 1648);
      v17 = (double *)(v5 + 16 * (v15 - 1));
      if (*v17 >= *(double *)&v10)
        break;
      *(_OWORD *)(v5 + 16 * v15) = *(_OWORD *)v17;
      v18 = (_QWORD *)(v4 + 8 * (((_DWORD)v14 - 19) & 0xFFFFFFFE));
      v19 = (_QWORD *)(v4 + 8 * (((_DWORD)v14 - 9) & 0xFFFFFFFE));
      *v19 = *v18;
      v19[1] = v18[1];
      *(_QWORD *)(v4 + 8 * (((_DWORD)v14 - 7) & 0xFFFFFFFE)) = *(_QWORD *)(v4 + 8
                                                                                * (((_DWORD)v14 - 17) & 0xFFFFFFFE));
      *(_QWORD *)(v4 + 8 * (v14 - 6)) = *(_QWORD *)(v4 + 8 * (v14 - 16));
      *(_QWORD *)(v4 + 8 * (((_DWORD)v14 - 5) & 0xFFFFFFFE)) = *(_QWORD *)(v4 + 8
                                                                                * (((_DWORD)v14 - 15) & 0xFFFFFFFE));
      *(_QWORD *)(v4 + 8 * (v14 - 4)) = *(_QWORD *)(v4 + 8 * (v14 - 14));
      *(_QWORD *)(v4 + 8 * (((_DWORD)v14 - 3) & 0xFFFFFFFE)) = *(_QWORD *)(v4 + 8
                                                                                * (((_DWORD)v14 - 13) & 0xFFFFFFFE));
      *(_QWORD *)(v4 + 8 * (v14 - 2)) = *(_QWORD *)(v4 + 8 * (v14 - 12));
      *(_QWORD *)(v4 + 8 * (((_DWORD)v14 - 1) & 0xFFFFFFFE)) = *(_QWORD *)(v4 + 8
                                                                                * (((_DWORD)v14 - 11) & 0xFFFFFFFE));
      *(_QWORD *)(v4 + 8 * v14) = *(_QWORD *)(v4 + 8 * (v14 - 10));
      v14 -= 10;
      v15 = v16;
      if (v16 + 1 <= 1)
      {
        LODWORD(v15) = 0;
        v5 = *(_QWORD *)(a1 + 1648);
        break;
      }
    }
    *(_OWORD *)(v5 + 16 * (int)v15) = v10;
    v8 = v2[1];
    *(_OWORD *)(v4 + 8 * (10 * v15)) = *v2;
    *(_OWORD *)(v4 + 8 * (10 * v15 + 2)) = v8;
    v9 = v2[3];
    *(_OWORD *)(v4 + 8 * (10 * v15 + 4)) = v2[2];
    *(_OWORD *)(v4 + 8 * (10 * v15 + 6)) = v9;
    ++v6;
    ++v3;
    v7 += 10;
    *(_OWORD *)(v4 + 8 * (10 * v15 + 8)) = v2[4];
  }
  while (v3 != 9);
  operator delete(v2);
}

double sub_23945474C(double *a1, long double *a2)
{
  double v2;
  int v3;
  double v4;
  long double v5;
  double v6;
  double v8;
  double v9;
  long double v10;
  double v11;
  long double __x;

  v8 = *a1;
  v9 = a1[1];
  v10 = a2[1];
  __x = *a2;
  v2 = logb(fmax(fabs(*a2), fabs(v10)));
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v3 = 0;
    v4 = v10;
  }
  else
  {
    v3 = (int)v2;
    __x = ldexp(__x, -(int)v2);
    v4 = ldexp(v10, -v3);
  }
  v11 = v4;
  v5 = v4 * v4 + __x * __x;
  v6 = ldexp((v9 * v4 + v8 * __x) / v5, -v3);
  ldexp((v9 * __x - v8 * v11) / v5, -v3);
  return v6;
}

_QWORD *sub_2394549D8(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      sub_2394189F8();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_239454B1C(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) >= a2)
  {
    a1[1] = &v5[72 * (72 * a2 / 0x48)];
  }
  else
  {
    v6 = (char *)*a1;
    v7 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL)
      sub_2394189F8();
    v9 = 0x8E38E38E38E38E39 * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL)
        sub_239418A80();
      v11 = (char *)operator new(72 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[72 * v7];
    v13 = &v12[72 * (72 * a2 / 0x48)];
    if (v5 != v6)
    {
      do
      {
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v5 - 72);
        v14 = *(_OWORD *)(v5 - 56);
        v15 = *(_OWORD *)(v5 - 40);
        v16 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        *(_OWORD *)(v12 - 40) = v15;
        *(_OWORD *)(v12 - 56) = v14;
        v12 -= 72;
        v5 -= 72;
      }
      while (v5 != v6);
      v5 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = &v11[72 * v10];
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_239454CD8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  int *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  int *v12;
  int *v13;
  int *v14;

  v3 = *a1;
  v4 = (int *)operator new(4uLL);
  v12 = v4;
  *v4 = v3;
  v13 = v4 + 1;
  v14 = v4 + 1;
  sub_239911BE8(&v12, &v10);
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  v8 = &off_250AEF738;
  v9 = v11;
  if (*((_QWORD *)&v11 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_239454DCC((_QWORD *)a2, (uint64_t)&v8);
  *(_QWORD *)(a2 + 2504) = &off_250AEF738;
  *(_OWORD *)(a2 + 2512) = v9;
  v9 = 0uLL;
  sub_239911CF8((uint64_t)&v8);
  return sub_239911CF8((uint64_t)&v10);
}

void sub_239454D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_239911CF8((uint64_t)va);
  sub_239911CF8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_239454DB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(_QWORD *)(v1 - 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_239454DCC(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  void *result;
  uint64_t v6;
  void *exception;
  _DWORD __src[624];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x23B83DB6C](exception, "not a seed sequence");
    __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_239454ED0(v3, __src, &v9);
  result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v6 = 4;
    while (!*(_DWORD *)((char *)a1 + v6))
    {
      v6 += 4;
      if (v6 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

void sub_239454EB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_239454ED0(unint64_t result, _DWORD *__b, _BYTE *a3)
{
  int **v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;

  if (__b == (_DWORD *)a3)
    return result;
  v4 = (int **)result;
  v5 = a3 - (_BYTE *)__b;
  if (a3 - (_BYTE *)__b >= 1)
    memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = v5 >> 2;
  v8 = *v4;
  v7 = v4[1];
  v9 = (char *)v7 - (char *)*v4;
  v10 = v9 >> 2;
  v11 = 11;
  v12 = 7;
  v13 = 5;
  v14 = 3;
  v15 = (v5 >> 2) - 1;
  if ((unint64_t)v5 <= 0x18)
    v14 = v15 >> 1;
  if ((unint64_t)v5 <= 0x98)
    v13 = v14;
  if ((unint64_t)v5 <= 0x10C)
    v12 = v13;
  if ((unint64_t)v5 <= 0x9B8)
    v11 = v12;
  v16 = (unint64_t)v9 >> 2;
  v17 = (v6 - v11) >> 1;
  v18 = v17 + v11;
  v19 = v10 + 1;
  if (v10 + 1 > v6)
    v20 = v10 + 1;
  else
    v20 = v5 >> 2;
  v21 = __b[v17];
  v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
  __b[v17] = v22 + v21;
  v23 = v22 + v16;
  __b[v18] += v23;
  *__b = v23;
  v24 = v17 % v6;
  result = v18 / v6;
  v25 = v18 % v6;
  if (v7 == v8)
  {
    v26 = 0;
    if (v19 >= v6)
      goto LABEL_49;
  }
  else
  {
    v26 = 0;
    v27 = 2;
    if (v19 > 2)
      v27 = v10 + 1;
    result = v27 - 1;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      v28 = __b[v24];
      v29 = __b[v26] ^ __b[v15] ^ v28;
      v30 = 1664525 * (v29 ^ (v29 >> 27));
      __b[v24] = v30 + v28;
      v32 = *v8++;
      v31 = v32;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v33 = v31 + v26 + v30;
      __b[v25] += v33;
      __b[v26] = v33;
      --result;
    }
    while (result);
    if (v19 >= v6)
      goto LABEL_49;
  }
  v34 = ~v10 + v20;
  do
  {
    if (v26 + 1 == v6)
      v26 = 0;
    else
      ++v26;
    if (v15 + 1 == v6)
      v15 = 0;
    else
      ++v15;
    if (v24 + 1 == v6)
      v24 = 0;
    else
      ++v24;
    v35 = __b[v24];
    if (v25 + 1 == v6)
      v25 = 0;
    else
      ++v25;
    v36 = 1664525 * (__b[v26] ^ __b[v15] ^ v35 ^ ((__b[v26] ^ __b[v15] ^ v35) >> 27));
    __b[v24] = v36 + v35;
    v37 = v36 + v26;
    result = 4 * v25;
    __b[v25] += v37;
    __b[v26] = v37;
    --v34;
  }
  while (v34);
LABEL_49:
  if (v20 < v20 + v6)
  {
    v38 = v5 >> 2;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v39 = __b[v24];
      v40 = v39 + __b[v26] + __b[v15];
      v41 = 1566083941 * (v40 ^ (v40 >> 27));
      __b[v24] = v41 ^ v39;
      v42 = v41 - v26;
      result = v42 ^ __b[v25];
      __b[v25] = result;
      __b[v26] = v42;
      --v38;
    }
    while (v38);
  }
  return result;
}

void sub_2394551BC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, int32x4_t **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  size_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  int32x4_t *v25;

  v5 = *a3;
  v6 = *a2;
  if (v5 > v6)
    sub_239EBF090();
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!(_DWORD)v6)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_10;
  }
  v9 = 4 * v6;
  v10 = (int32x4_t *)operator new(4 * v6);
  *a4 = v10;
  v11 = (int32x4_t *)((char *)v10 + v9);
  a4[2] = (int32x4_t *)((char *)v10 + v9);
  bzero(v10, v9);
  a4[1] = (int32x4_t *)((char *)v10 + v9);
  if (v9 - 4 < 0x1C)
  {
    LODWORD(v12) = 0;
    v13 = v10;
    do
    {
LABEL_9:
      v13->i32[0] = v12;
      v13 = (int32x4_t *)((char *)v13 + 4);
      LODWORD(v12) = v12 + 1;
    }
    while (v13 != v11);
    goto LABEL_10;
  }
  v14 = ((v9 - 4) >> 2) + 1;
  v12 = v14 & 0x7FFFFFFFFFFFFFF8;
  v13 = (int32x4_t *)((char *)v10 + 4 * (v14 & 0x7FFFFFFFFFFFFFF8));
  v15 = (int32x4_t)xmmword_239EC6870;
  v16 = v10 + 1;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18.i64[0] = 0x800000008;
  v18.i64[1] = 0x800000008;
  v19 = v14 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v16[-1] = v15;
    *v16 = vaddq_s32(v15, v17);
    v15 = vaddq_s32(v15, v18);
    v16 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v14 != v12)
    goto LABEL_9;
LABEL_10:
  v20 = ((char *)v11 - (char *)v10) >> 2;
  if (v20 < v5)
  {
    sub_239A444D4((uint64_t)"unknown file", 119, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if ((_DWORD)v5)
  {
    v21 = 0;
    v22 = v20 - 1;
    do
    {
      v23 = sub_23945597C(a1, v21, v22);
      v24 = v10->i32[v21];
      v10->i32[v21] = v10->i32[v23];
      v10->i32[v23] = v24;
      ++v21;
    }
    while (v5 != v21);
    v25 = (int32x4_t *)((char *)v10 + 4 * *a3);
    if (v25 != v11)
      goto LABEL_15;
  }
  else
  {
    v25 = v10;
    if (v10 != v11)
LABEL_15:
      a4[1] = v25;
  }
}

void sub_239455364(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_239455384(uint64_t a1@<X0>, unsigned int *a2@<X1>, int *a3@<X2>, int32x4_t **a4@<X8>)
{
  int32x4_t **v4;
  unsigned int v5;
  std::__shared_weak_count *v8;
  uint64_t v9;
  int32x4_t *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  uint8x8_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unsigned int *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  _OWORD *v58;
  unsigned int *v59;
  uint64_t v60;
  __int128 v61;
  unsigned int v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  int v69;
  int32x4_t **v70;
  int v71;
  unsigned int v72;
  void *v73[2];
  void *__p[2];
  int v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unsigned int v78;
  unsigned int v79;

  v4 = a4;
  v5 = *a2;
  if (*a3 > *a2)
    sub_239EBF0C0();
  if (v5 == *a3)
  {
    sub_239455F88(a1, a2, a3, a4);
    return;
  }
  v76 = a1;
  v8 = (std::__shared_weak_count *)operator new();
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBAF0;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v77 = v8;
  v78 = 0;
  v79 = v5 - 1;
  v9 = *a3;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  if (!(_DWORD)v9)
  {
    v73[1] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v75 = 1065353216;
    v73[0] = 0;
    goto LABEL_68;
  }
  v10 = (int32x4_t *)operator new(4 * v9);
  v11 = 0;
  *v4 = v10;
  v4[1] = v10;
  v4[2] = (int32x4_t *)((char *)v10 + 4 * v9);
  *(_OWORD *)v73 = 0u;
  *(_OWORD *)__p = 0u;
  v75 = 1065353216;
  v69 = v9;
  v70 = v4;
  do
  {
    v13 = v73[0];
    v12 = (unint64_t)v73[1];
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v73[1]);
    v14.i16[0] = vaddlv_u8(v14);
    v15 = LODWORD(v73[1]) - 1;
    v16 = (unint64_t)v73[1] - 1;
    v18 = v78;
    v17 = v79;
    v19 = *(_QWORD *)(a1 + 2496);
    v20 = v78;
LABEL_7:
    if (v17 == v20)
    {
      v20 = v17;
      v21 = v17;
      if (!v12)
        goto LABEL_41;
    }
    else
    {
      v22 = v17 - v20 + 1;
      if (v17 - v20 == -1)
      {
        v33 = 4 * v19;
        v34 = (v19 + 1) % 0x270;
        v35 = *(_DWORD *)(a1 + 4 * ((v19 + 397) % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v34) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v19) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v34) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(a1 + v33) = v35;
        *(_QWORD *)(a1 + 2496) = v34;
        v36 = ((v35 ^ (v35 >> 11)) << 7) & 0x9D2C5680 ^ v35 ^ (v35 >> 11);
        v21 = (v36 << 15) & 0xEFC60000 ^ v36 ^ (((v36 << 15) & 0xEFC60000 ^ v36) >> 18);
        v19 = v34;
        if (!v12)
          goto LABEL_41;
      }
      else
      {
        v23 = __clz(v22);
        v24 = 31;
        if (((v22 << v23) & 0x7FFFFFFF) != 0)
          v24 = 32;
        v25 = v24 - v23;
        v26 = v25 >> 5;
        if ((v25 & 0x1F) != 0)
          ++v26;
        if (v26 <= v25)
          v27 = 0xFFFFFFFF >> -(v25 / v26);
        else
          v27 = 0;
        do
        {
          v28 = 4 * v19;
          v29 = v19 + 397;
          v19 = (v19 + 1) % 0x270;
          v30 = *(_DWORD *)(a1 + 4 * (v29 % 0x270)) ^ ((*(_DWORD *)(a1 + 4 * v19) & 0x7FFFFFFE | *(_DWORD *)(a1 + v28) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v19) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(a1 + v28) = v30;
          v31 = ((v30 ^ (v30 >> 11)) << 7) & 0x9D2C5680 ^ v30 ^ (v30 >> 11);
          v32 = ((v31 << 15) & 0xEFC60000 ^ v31 ^ (((v31 << 15) & 0xEFC60000 ^ v31) >> 18)) & v27;
        }
        while (v32 >= v22);
        *(_QWORD *)(a1 + 2496) = v19;
        v21 = v18 + v32;
        v20 = v18;
        if (!v12)
          goto LABEL_41;
      }
    }
    if (v14.u32[0] > 1uLL)
    {
      v37 = v21;
      if (v12 <= v21)
        v37 = v21 % v12;
    }
    else
    {
      v37 = v15 & v21;
    }
    v38 = (uint64_t **)v13[v37];
    if (v38)
    {
      v39 = *v38;
      if (v39)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v40 = v39[1];
            if (v40 == v21)
            {
              if (*((_DWORD *)v39 + 4) == v21)
                goto LABEL_7;
            }
            else if ((v40 & v16) != v37)
            {
              goto LABEL_41;
            }
            v39 = (uint64_t *)*v39;
            if (!v39)
              goto LABEL_41;
          }
        }
        do
        {
          v41 = v39[1];
          if (v41 == v21)
          {
            if (*((_DWORD *)v39 + 4) == v21)
              goto LABEL_7;
          }
          else
          {
            if (v41 >= v12)
              v41 %= v12;
            if (v41 != v37)
              break;
          }
          v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
    }
LABEL_41:
    v71 = v11;
    v72 = v21;
    v43 = (unsigned int *)v4[1];
    v42 = (unint64_t)v4[2];
    if ((unint64_t)v43 < v42)
    {
      *v43 = v21;
      v44 = (uint64_t)(v43 + 1);
      goto LABEL_63;
    }
    v45 = (unsigned int *)*v4;
    v46 = (char *)v43 - (char *)*v4;
    v47 = v46 >> 2;
    v48 = (v46 >> 2) + 1;
    if (v48 >> 62)
      sub_2394189F8();
    v49 = v42 - (_QWORD)v45;
    if (v49 >> 1 > v48)
      v48 = v49 >> 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v50 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 62)
        sub_239418A80();
      v51 = operator new(4 * v50);
      v52 = (unsigned int *)&v51[4 * v47];
      *v52 = v21;
      v44 = (uint64_t)(v52 + 1);
      if (v43 == v45)
      {
LABEL_55:
        v4 = v70;
        goto LABEL_61;
      }
    }
    else
    {
      v51 = 0;
      v52 = (unsigned int *)(4 * v47);
      *(_DWORD *)(4 * v47) = v21;
      v44 = 4 * v47 + 4;
      if (v43 == v45)
        goto LABEL_55;
    }
    v53 = (char *)(v43 - 1) - (char *)v45;
    if (v53 < 0x2C)
    {
      v4 = v70;
      do
      {
LABEL_60:
        v62 = *--v43;
        *--v52 = v62;
      }
      while (v43 != v45);
      goto LABEL_61;
    }
    v54 = (char *)v43 - &v51[v46];
    v4 = v70;
    if (v54 < 0x20)
      goto LABEL_60;
    v55 = (v53 >> 2) + 1;
    v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
    v57 = &v43[v56 / 0xFFFFFFFFFFFFFFFCLL];
    v52 = (unsigned int *)((char *)v52 - v56);
    v58 = &v51[4 * v47 - 16];
    v59 = v43 - 4;
    v60 = v55 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v61 = *(_OWORD *)v59;
      *(v58 - 1) = *((_OWORD *)v59 - 1);
      *v58 = v61;
      v58 -= 2;
      v59 -= 8;
      v60 -= 8;
    }
    while (v60);
    v43 = v57;
    if (v55 != (v55 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_60;
LABEL_61:
    *v4 = (int32x4_t *)v52;
    v4[1] = (int32x4_t *)v44;
    v4[2] = (int32x4_t *)&v51[4 * v50];
    if (v45)
      operator delete(v45);
LABEL_63:
    v4[1] = (int32x4_t *)v44;
    sub_239456168((uint64_t)v73, &v72, &v72);
    v11 = v71 + 1;
    v4 = v70;
  }
  while (v71 + 1 != v69);
  v63 = __p[0];
  if (__p[0])
  {
    do
    {
      v64 = (_QWORD *)*v63;
      operator delete(v63);
      v63 = v64;
    }
    while (v64);
  }
  v65 = v73[0];
  v73[0] = 0;
  if (v65)
    operator delete(v65);
LABEL_68:
  v66 = v77;
  if (v77)
  {
    p_shared_owners = (unint64_t *)&v77->__shared_owners_;
    do
      v68 = __ldaxr(p_shared_owners);
    while (__stlxr(v68 - 1, p_shared_owners));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
}

void sub_239455910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239455924(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_239455930(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239455944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_239420950((uint64_t)va);
  v6 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v6;
    operator delete(v6);
  }
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_23945597C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD v12[2];

  v6 = (std::__shared_weak_count *)operator new();
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBAB8;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v11 = v6;
  v12[0] = a2;
  v12[1] = a3;
  result = sub_239455AB4((uint64_t)v12, a1, v12);
  v8 = result;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      return v8;
    }
  }
  return result;
}

void sub_239455A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_239455A64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_239455A70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_239455A88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239455AB4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64x2_t v20;
  __int128 v21;
  uint64_t v22;

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      v18 = a2;
      v19 = xmmword_239EC6880;
      v20 = vdupq_n_s64(2uLL);
      v21 = xmmword_239EC6890;
      v22 = -1;
      return sub_239455C58(&v18);
    }
    v7 = __clz(v5);
    v8 = 63;
    if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = 64;
    v9 = v8 - v7;
    v18 = a2;
    *(_QWORD *)&v19 = v9;
    v10 = (v8 - v7) >> 5;
    if ((v9 & 0x1F) != 0)
      v11 = v10 + 1;
    else
      v11 = v10;
    v12 = v9 / v11;
    *((_QWORD *)&v19 + 1) = v12;
    v20.i64[0] = v11;
    v13 = (-1 << (v9 / v11)) & 0x100000000;
    if (v12 >= 0x40)
      v13 = 0;
    *(_QWORD *)&v21 = v13;
    if ((v13 ^ 0x100000000) > v13 / v11)
    {
      v12 = v9 / ++v11;
      *((_QWORD *)&v19 + 1) = v12;
      v20.i64[0] = v11;
      if (v12 > 0x3F)
      {
        v20.i64[1] = v11 - (v9 % v11);
        *(_QWORD *)&v21 = 0;
        LODWORD(v12) = 64;
        goto LABEL_22;
      }
      *(_QWORD *)&v21 = (-1 << (v9 / v11)) & 0x100000000;
    }
    v20.i64[1] = v11 - v9 % v11;
    if (v12 < 0x3F)
    {
      *((_QWORD *)&v21 + 1) = 0x80000000uLL >> v12 << (v12 + 1);
      v14 = 0xFFFFFFFF >> -(char)v12;
      if (!v12)
        v14 = 0;
      LODWORD(v22) = v14;
      if (v12 >= 0x1F)
        v15 = -1;
      else
        v15 = 0xFFFFFFFF >> ~(_BYTE)v12;
      goto LABEL_23;
    }
LABEL_22:
    *((_QWORD *)&v21 + 1) = 0;
    v16 = -(int)v12;
    v15 = -1;
    LODWORD(v22) = 0xFFFFFFFF >> v16;
LABEL_23:
    HIDWORD(v22) = v15;
    do
      v17 = sub_239455C58(&v18);
    while (v17 >= v5);
    return *a3 + v17;
  }
  return result;
}

uint64_t sub_239455C58(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;

  v1 = a1[4];
  if (v1)
  {
    v2 = *a1;
    v3 = a1[5];
    v4 = a1[2];
    v5 = *(_QWORD *)(*a1 + 2496);
    if (v4 >= 0x40)
    {
      for (i = 0; i != v1; ++i)
      {
        do
        {
          v16 = 4 * v5;
          v17 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v18 = *(_DWORD *)(v2 + 4 * (v17 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v16) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v16) = v18;
          v19 = ((v18 ^ (v18 >> 11)) << 7) & 0x9D2C5680 ^ v18 ^ (v18 >> 11);
          v20 = (v19 << 15) & 0xEFC60000 ^ v19 ^ (((v19 << 15) & 0xEFC60000 ^ v19) >> 18);
        }
        while (v3 <= v20);
      }
      v6 = (_DWORD)a1[7] & v20;
    }
    else
    {
      v6 = 0;
      for (j = 0; j != v1; ++j)
      {
        do
        {
          v8 = 4 * v5;
          v9 = v5 + 397;
          v5 = (v5 + 1) % 0x270;
          v10 = *(_DWORD *)(v2 + 4 * (v9 % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v5) & 0x7FFFFFFE | *(_DWORD *)(v2 + v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v5) << 31) >> 31) & 0x9908B0DF;
          *(_DWORD *)(v2 + v8) = v10;
          v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
          v12 = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
        }
        while (v3 <= v12);
        v6 = (v6 << v4) + ((_DWORD)a1[7] & v12);
      }
    }
    *(_QWORD *)(v2 + 2496) = v5;
    v13 = a1[3];
    if (v1 < v13)
      goto LABEL_14;
    return v6;
  }
  v6 = 0;
  v13 = a1[3];
  if (!v13)
    return v6;
LABEL_14:
  v21 = *a1;
  v22 = a1[6];
  v23 = a1[2];
  v24 = *(_QWORD *)(*a1 + 2496);
  if (v23 >= 0x3F)
  {
    do
    {
      do
      {
        v31 = 4 * v24;
        v32 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v33 = *(_DWORD *)(v21 + 4 * (v32 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v31) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v31) = v33;
        v34 = ((v33 ^ (v33 >> 11)) << 7) & 0x9D2C5680 ^ v33 ^ (v33 >> 11);
        v35 = (v34 << 15) & 0xEFC60000 ^ v34 ^ (((v34 << 15) & 0xEFC60000 ^ v34) >> 18);
      }
      while (v22 <= v35);
      ++v1;
    }
    while (v1 != v13);
    v36 = *((_DWORD *)a1 + 15) & v35;
    *(_QWORD *)(v21 + 2496) = v24;
    return v36;
  }
  else
  {
    v25 = v23 + 1;
    do
    {
      do
      {
        v26 = 4 * v24;
        v27 = v24 + 397;
        v24 = (v24 + 1) % 0x270;
        v28 = *(_DWORD *)(v21 + 4 * (v27 % 0x270)) ^ ((*(_DWORD *)(v21 + 4 * v24) & 0x7FFFFFFE | *(_DWORD *)(v21 + v26) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v21 + 4 * v24) << 31) >> 31) & 0x9908B0DF;
        *(_DWORD *)(v21 + v26) = v28;
        v29 = ((v28 ^ (v28 >> 11)) << 7) & 0x9D2C5680 ^ v28 ^ (v28 >> 11);
        v30 = (v29 << 15) & 0xEFC60000 ^ v29 ^ (((v29 << 15) & 0xEFC60000 ^ v29) >> 18);
      }
      while (v22 <= v30);
      v6 = (v6 << v25) + (*((_DWORD *)a1 + 15) & v30);
      ++v1;
    }
    while (v1 != v13);
    *(_QWORD *)(v21 + 2496) = v24;
    return v6;
  }
}

void sub_239455F88(uint64_t a1@<X0>, unsigned int *a2@<X1>, int *a3@<X2>, int32x4_t **a4@<X8>)
{
  int v5;
  uint64_t v6;
  size_t v9;
  int32x4_t *v10;
  int32x4_t *v11;
  uint64_t v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t *v21;
  uint64_t v22;
  __int32 v23;
  __int8 *v24;
  _QWORD v25[2];
  __int128 v26;

  v5 = *a3;
  v6 = *a2;
  if (*a3 > v6)
    sub_239EBF0F0();
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!(_DWORD)v6)
  {
    v10 = 0;
    v11 = 0;
    goto LABEL_10;
  }
  v9 = 4 * v6;
  v10 = (int32x4_t *)operator new(4 * v6);
  *a4 = v10;
  v11 = (int32x4_t *)((char *)v10 + v9);
  a4[2] = (int32x4_t *)((char *)v10 + v9);
  bzero(v10, v9);
  a4[1] = (int32x4_t *)((char *)v10 + v9);
  if (v9 - 4 < 0x1C)
  {
    LODWORD(v12) = 0;
    v13 = v10;
    do
    {
LABEL_9:
      v13->i32[0] = v12;
      v13 = (int32x4_t *)((char *)v13 + 4);
      LODWORD(v12) = v12 + 1;
    }
    while (v13 != v11);
    goto LABEL_10;
  }
  v14 = ((v9 - 4) >> 2) + 1;
  v12 = v14 & 0x7FFFFFFFFFFFFFF8;
  v13 = (int32x4_t *)((char *)v10 + 4 * (v14 & 0x7FFFFFFFFFFFFFF8));
  v15 = (int32x4_t)xmmword_239EC6870;
  v16 = v10 + 1;
  v17.i64[0] = 0x400000004;
  v17.i64[1] = 0x400000004;
  v18.i64[0] = 0x800000008;
  v18.i64[1] = 0x800000008;
  v19 = v14 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v16[-1] = v15;
    *v16 = vaddq_s32(v15, v17);
    v15 = vaddq_s32(v15, v18);
    v16 += 2;
    v19 -= 8;
  }
  while (v19);
  if (v14 != v12)
    goto LABEL_9;
LABEL_10:
  if ((char *)v11 - (char *)v10 >= 5)
  {
    v26 = xmmword_239EC6600;
    if ((int32x4_t *)((char *)&v11[-1].u64[1] + 4) > v10)
    {
      v20 = ((unint64_t)((char *)v11 - (char *)v10) >> 2) - 1;
      v21 = v10;
      do
      {
        v25[0] = 0;
        v25[1] = v20;
        v22 = sub_239455AB4((uint64_t)&v26, a1, v25);
        if (v22)
        {
          v23 = v21->i32[0];
          v21->i32[0] = v21->i32[v22];
          v21->i32[v22] = v23;
        }
        v21 = (int32x4_t *)((char *)v21 + 4);
        --v20;
      }
      while (v21 < (int32x4_t *)((char *)&v11[-1].u64[1] + 4));
      v5 = *a3;
    }
  }
  v24 = &v10->i8[4 * v5];
  if (v24 != (__int8 *)v11)
    a4[1] = (int32x4_t *)v24;
}

void sub_23945611C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_23945613C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t *sub_239456168(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239456454(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239456468(uint64_t a1, __CLPK_doublereal *a2, char a3)
{
  __CLPK_doublereal *v5;
  int v6;
  char v7;
  __CLPK_doublereal *v8;
  char v9;
  __CLPK_doublereal *v10;
  __CLPK_integer v11;
  __CLPK_integer v12;
  __CLPK_integer v13;
  void *v14;
  std::bad_alloc *exception;
  std::bad_alloc *v16;
  __CLPK_integer v17;
  __CLPK_integer v18;
  double v19;
  void *memptr;

  v5 = (__CLPK_doublereal *)(a1 + 144);
  v6 = a3 & 2;
  if ((a3 & 2) != 0)
    v7 = 83;
  else
    v7 = 78;
  if ((a3 & 2) != 0)
    v8 = (__CLPK_doublereal *)(a1 + 72);
  else
    v8 = 0;
  if ((a3 & 1) != 0)
    v9 = 83;
  else
    v9 = 78;
  if ((a3 & 1) != 0)
    v10 = (__CLPK_doublereal *)a1;
  else
    v10 = 0;
  if ((a3 & 1) != 0)
    v11 = 3;
  else
    v11 = 1;
  v12 = v6 | 1;
  v19 = 0.0;
  v18 = 0;
  sub_239A23160(v9, v7, 3, 3, a2, 3, v5, v10, v11, v8, v6 | 1, &v19, -1, &v18);
  v13 = v18;
  if (!v18)
  {
    v17 = v19;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v19 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v14 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v16 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v16, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    sub_239A23160(v9, v7, 3, 3, a2, 3, v5, v10, v11, v8, v12, (__CLPK_doublereal *)memptr, v17, &v18);
    free(v14);
    v13 = v18;
  }
  *(_BYTE *)(a1 + 176) = v13 == 0;
}

void sub_2394565F0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

float sub_239456604(uint64_t a1, uint64_t a2)
{
  double v4;
  double v12;
  double v13;
  double cosval;
  double v15;
  __double2 v16;
  float64_t v17;
  double v18;
  __int128 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64_t v24;
  double v25;
  double v26;
  __int128 v27;
  __int128 v28;
  double v32;
  int v33;
  float64x2_t v34;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  float64x2_t v40;
  long double v43;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v53;
  double v56;
  double v57;
  __double2 v58;
  float64x2_t v59;
  __double2 v60;
  float64x2_t v61;
  float64x2_t v63;
  float64x2_t v64;
  int8x16_t v71;
  float64x2_t v76;
  int64x2_t v87;
  float64x2_t v88;
  int64x2_t v89;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  float64x2_t v104;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  int64x2_t v109;
  int8x16_t v110;
  int8x16_t v111;
  double v112;
  double v113;
  double v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  float64x2_t v118;
  float64x2_t v119;
  int8x16_t v120;
  unint64_t v121;
  double v122;
  int8x16_t v123;
  float64x2_t v124;
  float64x2_t v125;
  double v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  double v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  int8x16_t v154;
  float64x2_t v155;
  int8x16_t v156;
  float64x2_t v157;
  float64x2_t v158;
  int8x16_t v159;
  float64x2_t v160;
  int8x16_t v161;
  float64x2_t v162;
  int8x16_t v163;
  float64x2_t v164;
  int8x16_t v165;
  float64x2_t v166;
  int8x16_t v167;
  float64x2_t v168;
  int8x16_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  int8x16_t v173;
  float64x2_t v174;
  int8x16_t v175;
  float64x2_t v176;
  int8x16_t v177;
  float64x2_t v178;
  double v179;
  float64x2_t v186;
  float64x2_t v187;
  int64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  int64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64_t v222;
  double v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  float v234;
  __int128 v235;
  double v238;
  double v242;
  double v243;
  double v244;
  double v245;
  __double2 v246;
  double v247;
  double v249;
  double v250;
  double v251;
  double v252;
  float64_t v253;
  double v254;
  __int128 v255;
  __int128 v256;
  uint64_t v262;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  double v272;
  double **v273;
  double *v274;
  double *v275;
  double v276;
  float64x2_t v277;
  double v278;
  float64x2_t v279;
  float64x2_t v280;
  double v281;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  int8x16_t v286;
  double v288;
  int8x16_t v289;
  double v291;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  float v309;
  __int128 v310;
  double v311;
  double v315;
  double v316;
  double v317;
  double v318;
  __double2 v319;
  float64_t v320;
  double v321;
  __int128 v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  float64_t v328;
  double v329;
  __int128 v330;
  __int128 v331;
  float v336;
  double v337;
  double v338;
  double v339;
  double v340;
  int8x16_t v341;
  double v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64_t v373;
  int8x16_t v374;
  int8x16_t v375;
  float64x2_t v376;
  int8x16_t v377;
  float64x2_t v378;
  float64_t v379;
  double v380;
  int8x16_t v381;
  float64x2_t v382;
  float64_t v383;
  double v384;
  int8x16_t v385;
  double v386;
  uint64_t v387;
  double v388;
  uint64_t v389;
  double v390;
  uint64_t v391;
  double v392;
  float64_t v393;
  double v394;
  double v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  int8x16_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  double v404;
  float64x2_t v405;
  int8x16_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  unint64_t v427;
  unint64_t v428;
  int8x16_t v429;
  int8x16_t v430;
  float64x2_t v431;
  double v432;
  int8x16_t v433;
  double v434;
  int8x16_t v435;
  double v436;
  int8x16_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t __xb;
  double __x;
  float64x2_t __xa;
  double v444;
  double v445;
  float64x2_t v446;
  double v447;
  float64x2_t v448;
  float64x2_t v449;
  double v450;
  double v451;
  float64x2_t v452;
  float64x2_t v453;
  double v454;
  double v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  double v459;
  float64x2_t v460;
  float64x2_t v461;
  double v462;
  float64x2_t v463;
  float64x2_t v464;
  float64_t v465;
  int8x16_t v466;
  int8x16_t v467;
  int8x16_t v468;
  float64x2_t v469;
  int8x16_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  float64x2_t v475;
  int8x16_t v476;
  int8x16_t v477;
  double v478;
  float64x2_t v479;
  __int128 v480;
  __int128 v481;
  uint64_t v482;

  v482 = *MEMORY[0x24BDAC8D0];
  v4 = *(double *)(a2 + 16);
  _Q7 = *(float64x2_t *)a2;
  _D10 = *(double *)(a2 + 8);
  _Q0 = vmulq_f64(_Q7, _Q7);
  __asm { FMLA            D0, D10, V7.D[1] }
  v12 = _Q0.f64[0] + v4 * v4;
  if (v12 >= 0.0000002635)
  {
    v15 = sqrt(v12);
    v453 = *(float64x2_t *)a2;
    v16 = __sincos_stret(v15);
    cosval = v16.__cosval;
    _Q7.f64[0] = v453.f64[0];
    v13 = v16.__sinval / v15;
    _Q0.f64[0] = 1.0 / v12 * (1.0 - v16.__cosval);
  }
  else
  {
    _Q0.f64[0] = 0.5 - v12 * (v12 / -720.0 + 0.0416666667);
    v13 = 1.0 - v12 * (0.166666667 - v12 * (v12 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v12 * _Q0.f64[0];
  }
  v17 = _Q7.f64[0] * _Q0.f64[0];
  v18 = _D10 * _Q0.f64[0];
  *(double *)&v19 = cosval + _Q7.f64[0] * _Q0.f64[0] * _Q7.f64[0];
  v20 = cosval + _D10 * _Q0.f64[0] * _D10;
  _Q0.f64[0] = cosval + v4 * _Q0.f64[0] * v4;
  v21 = _D10 * v17;
  v22 = v4 * v17;
  v23 = v4 * v18;
  v24 = _Q7.f64[0] * v13;
  v25 = _D10 * v13;
  v26 = v4 * v13;
  *(double *)&v27 = v21 - v26;
  *(double *)&v28 = v25 + v22;
  *((double *)&v19 + 1) = v21 + v26;
  *((double *)&v27 + 1) = v20;
  *((double *)&v28 + 1) = v23 - v24;
  *(double *)(a1 + 16) = v22 - v25;
  *(_OWORD *)a1 = v19;
  *(double *)(a1 + 48) = v23 + v24;
  *(_OWORD *)(a1 + 32) = v27;
  *(float64_t *)(a1 + 80) = _Q0.f64[0];
  *(_OWORD *)(a1 + 64) = v28;
  _Q0.f64[0] = *(float64_t *)(a2 + 40);
  _Q1 = *(float64x2_t *)(a2 + 24);
  _Q2 = vmulq_f64(_Q1, _Q1);
  _D3 = *(_QWORD *)(a2 + 32);
  __asm { FMLA            D2, D3, V1.D[1] }
  v32 = 1.0;
  _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
  *(float64x2_t *)(a1 + 96) = vmulq_n_f64(_Q1, _Q2.f64[0]);
  *(_QWORD *)(a1 + 112) = *(_OWORD *)&vmulq_f64(_Q0, _Q2);
  v459 = 0.0;
  if (*(int *)(a1 + 148) >= 1)
  {
    v33 = 0;
    v34 = 0uLL;
    _Q0.f64[1] = 2.0;
    v336 = -1.0;
    while (1)
    {
      v478 = 0.0;
      v476 = (int8x16_t)v34;
      v477 = (int8x16_t)v34;
      v474 = (int8x16_t)v34;
      v475 = v34;
      v472 = (int8x16_t)v34;
      v473 = (int8x16_t)v34;
      v470 = (int8x16_t)v34;
      v471 = (int8x16_t)v34;
      v468 = (int8x16_t)v34;
      v469 = v34;
      v467 = (int8x16_t)v34;
      v466 = (int8x16_t)v34;
      v463 = v34;
      v464 = v34;
      v465 = 0.0;
      v37 = *(uint64_t **)(a1 + 128);
      v38 = *v37;
      v39 = v37[1];
      if (*v37 == v39)
      {
        v229 = 0.0;
        v230 = 0.0;
        v231 = 0.0;
        v232 = 0.0;
        _D15 = 0.0;
        if (v33)
          goto LABEL_17;
      }
      else
      {
        _Q0.f64[0] = v465;
        v431 = _Q0;
        v430 = (int8x16_t)v464;
        v428 = vextq_s8(v430, v430, 8uLL).u64[0];
        v429 = (int8x16_t)v463;
        v40 = (float64x2_t)vextq_s8(v429, v429, 8uLL);
        v427 = *(_QWORD *)&v40.f64[0];
        v40.f64[0] = v478;
        v439 = v40;
        _Q22 = *(float64x2_t *)(a1 + 96);
        _D21 = *(double *)(a1 + 112);
        v43 = *(double *)(a1 + 104);
        *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64((int64x2_t)_Q22, 1).u64[0];
        v40.f64[1] = -_Q22.f64[0];
        v382 = *(float64x2_t *)(a1 + 32);
        _D18 = *(double *)(a1 + 80);
        _Q24 = *(float64x2_t *)(a1 + 64);
        v46.f64[0] = 0.0;
        v46.f64[1] = _D21;
        v454 = *(double *)(a1 + 16);
        v398 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, *(double *)a1), (float64x2_t)COERCE_UNSIGNED_INT64(-_D21), *(float64x2_t *)a1, 1), v40, v454);
        v450 = *(double *)(a1 + 48);
        v396 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, _Q24.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-_D21), _Q24, 1), v40, _D18);
        v397 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v46, v382.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-_D21), v382, 1), v40, v450);
        v378 = *(float64x2_t *)a1;
        v47 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, (int64x2_t)v382);
        _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a1, (int64x2_t)v382);
        v49.f64[0] = v454;
        v49.f64[1] = v450;
        v403 = vmlaq_laneq_f64(vmlsq_lane_f64(vmulq_f64(v47, (float64x2_t)0), _Q1, _D21, 0), v49, _Q22, 1);
        _D15 = 0.0;
        __asm
        {
          FMLS            D17, D21, V24.D[1]
          FMLA            D17, D18, V22.D[1]
        }
        v395 = _D17;
        __xb = _Q22;
        v53 = vmlsq_lane_f64(vmlaq_f64(vmulq_n_f64(v47, _D21), (float64x2_t)0, _Q1), v49, _Q22.f64[0], 0);
        v444 = -v43;
        _Q0 = vmlaq_n_f64(vmulq_n_f64(v47, -v43), _Q1, _Q22.f64[0]);
        v380 = _D21;
        __asm { FMLA            D1, D15, V24.D[1] }
        v447 = _D18;
        __asm { FMLS            D1, D18, V22.D[0] }
        v337 = _Q1.f64[0];
        v401 = vmlaq_f64(_Q0, (float64x2_t)0, v49);
        v402 = v53;
        __asm { FMLA            D0, D22, V24.D[1] }
        v376 = _Q24;
        v394 = _Q0.f64[0] + _D18 * 0.0;
        v426 = v477;
        v415 = vextq_s8(v426, v426, 8uLL).u64[0];
        v425 = v476;
        v417 = vextq_s8(v425, v425, 8uLL).u64[0];
        v437 = (int8x16_t)v475;
        v416 = vextq_s8(v437, v437, 8uLL).u64[0];
        v424 = v474;
        v423 = v473;
        v414 = vextq_s8(v423, v423, 8uLL).u64[0];
        v435 = v472;
        v413 = vextq_s8(v435, v435, 8uLL).u64[0];
        v422 = v471;
        v412 = vextq_s8(v422, v422, 8uLL).u64[0];
        v421 = v470;
        v411 = vextq_s8(v421, v421, 8uLL).u64[0];
        v433 = (int8x16_t)v469;
        v420 = v468;
        v408 = vextq_s8(v433, v433, 8uLL).u64[0];
        v409 = vextq_s8(v420, v420, 8uLL).u64[0];
        v419 = v467;
        v406 = vextq_s8(v424, v424, 8uLL);
        v407 = vextq_s8(v419, v419, 8uLL).u64[0];
        v418 = v466;
        v410 = vextq_s8(v418, v418, 8uLL).u64[0];
        _D14 = *(_QWORD *)(a1 + 72);
        v56 = acos(_D21);
        v57 = atan2(v43, __xb.f64[0]);
        v58 = __sincos_stret(v56);
        v60 = __sincos_stret(v57);
        v59.f64[0] = v60.__cosval;
        v61.f64[0] = v58.__cosval * v60.__sinval;
        _D16 = v58.__cosval * v60.__cosval;
        v59.f64[1] = v60.__sinval;
        v63 = vmulq_n_f64(v59, v58.__sinval);
        v64.f64[0] = 0.0;
        _D7 = -(v58.__sinval * v60.__sinval);
        v64.f64[1] = -v58.__sinval;
        v61.f64[1] = -(v58.__cosval * v60.__cosval);
        _V0.D[1] = v378.f64[1];
        v400 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, v378.f64[0]), (float64x2_t)*(unint64_t *)&v58.__sinval, v378, 1), v61, v454);
        __asm { FMLA            D2, D16, V0.D[1] }
        v404 = _D2;
        _V11.D[1] = v382.f64[1];
        v399 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, v382.f64[0]), (float64x2_t)*(unint64_t *)&v58.__sinval, v382, 1), v61, v450);
        __asm { FMLA            D2, D16, V11.D[1] }
        v392 = _D2;
        _V18.D[1] = v376.f64[1];
        v71 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v64, v376.f64[0]), (float64x2_t)*(unint64_t *)&v58.__sinval, v376, 1), v61, v447);
        __asm { FMLA            D2, D16, V18.D[1] }
        v390 = _D2;
        __asm { FMLA            D2, D7, V0.D[1] }
        v388 = _D2;
        __asm { FMLA            D2, D7, V11.D[1] }
        v386 = _D2;
        __asm { FMLA            D2, D7, V18.D[1] }
        v384 = _D2;
        v76 = vmlsq_lane_f64((float64x2_t)xmmword_239EC68A0, (float64x2_t)0, v380, 0);
        _Q23 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68A0, v444), (float64x2_t)0, __xb.f64[0]), (float64x2_t)xmmword_239EC68C0);
        _D21 = v378.f64[1];
        __asm { FMLA            D31, D21, V23.D[1] }
        _D22 = v382.f64[1];
        __asm
        {
          FMLA            D30, D22, V23.D[1]
          FMLA            D20, D14, V23.D[1]
        }
        _Q23 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_239EC68E0, v444), (float64x2_t)xmmword_239EC6840, __xb.f64[0]);
        _Q26 = vaddq_f64(_Q23, (float64x2_t)xmmword_239EC68C0);
        __asm
        {
          FMLA            D23, D21, V26.D[1]
          FMLA            D21, D22, V26.D[1]
          FMLA            D22, D14, V26.D[1]
        }
        v87 = (int64x2_t)vmlaq_laneq_f64(v76, (float64x2_t)xmmword_239EC68B0, __xb, 1);
        v88 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)xmmword_239EC68A0, v380);
        v89 = (int64x2_t)vmlsq_lane_f64(v88, (float64x2_t)xmmword_239EC68B0, __xb.f64[0], 0);
        v90 = (float64x2_t)vzip1q_s64(v87, v89);
        _Q27 = (float64x2_t)vzip2q_s64(v87, v89);
        v92 = vmlaq_laneq_f64(vmulq_n_f64(v90, v378.f64[0]), _Q27, v378, 1);
        v93 = vmlaq_laneq_f64(vmulq_n_f64(v90, v382.f64[0]), _Q27, v382, 1);
        v94 = vmlaq_laneq_f64(vmulq_n_f64(v90, v376.f64[0]), _Q27, v376, 1);
        _Q27.f64[1] = __xb.f64[1];
        v95 = (int64x2_t)vmlaq_laneq_f64(v76, (float64x2_t)xmmword_239EC68D0, __xb, 1);
        v96 = (int64x2_t)vmlsq_lane_f64(v88, (float64x2_t)xmmword_239EC68D0, __xb.f64[0], 0);
        _Q26 = (float64x2_t)vzip1q_s64(v95, v96);
        v98 = (float64x2_t)vzip2q_s64(v95, v96);
        v99 = vmlaq_laneq_f64(vmulq_n_f64(_Q26, v378.f64[0]), v98, v378, 1);
        v100 = vmlaq_laneq_f64(vmulq_n_f64(_Q26, v382.f64[0]), v98, v382, 1);
        v101 = vmlaq_laneq_f64(vmulq_n_f64(_Q26, v376.f64[0]), v98, v376, 1);
        v102 = (int64x2_t)vmlaq_laneq_f64(vmlsq_lane_f64((float64x2_t)xmmword_239EC68A0, (float64x2_t)xmmword_239EC6840, v380, 0), (float64x2_t)xmmword_239EC68C0, __xb, 1);
        v103 = (int64x2_t)vmlsq_lane_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)xmmword_239EC68E0, v380), (float64x2_t)xmmword_239EC68C0, __xb.f64[0], 0);
        v104 = (float64x2_t)vzip1q_s64(v102, v103);
        _Q7 = (float64x2_t)vzip2q_s64(v102, v103);
        v106 = vmlaq_laneq_f64(vmulq_n_f64(v104, v378.f64[0]), _Q7, v378, 1);
        v107 = vmlaq_laneq_f64(vmulq_n_f64(v104, v382.f64[0]), _Q7, v382, 1);
        v119.f64[1] = v376.f64[1];
        v108 = vmlaq_laneq_f64(vmulq_n_f64(v104, v376.f64[0]), _Q7, v376, 1);
        v109 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v378.f64[0]), (float64x2_t)0, v378, 1), v63, v454);
        v110 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v382.f64[0]), (float64x2_t)0, v382, 1), v63, v450);
        v111 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v376.f64[0]), (float64x2_t)0, v376, 1), v63, v447);
        v112 = vmuld_lane_f64(-0.0, __xb, 1);
        v113 = v112 - __xb.f64[0];
        v114 = vmlad_n_f64(v112, -0.0, __xb.f64[0]);
        __asm
        {
          FMLA            D7, D15, V27.D[1]
          FMLA            D26, D15, V27.D[1]
        }
        _Q27.f64[0] = _Q26.f64[0];
        _Q27.f64[1] = vmlad_n_f64(v380, -0.0, __xb.f64[0]);
        _Q7.f64[1] = vmlad_n_f64(v380 * 0.0, -0.0, __xb.f64[0]);
        v115 = (int8x16_t)vmlaq_n_f64(v92, _Q7, v454);
        v116 = (int8x16_t)vmlaq_n_f64(v93, _Q7, v450);
        v117 = (int8x16_t)vmlaq_n_f64(v94, _Q7, v447);
        _Q26.f64[1] = _Q7.f64[1];
        v118 = vmlaq_n_f64(v100, _Q27, v450);
        _Q7.f64[0] = vmlad_n_f64(v444, -0.0, __xb.f64[0]) + 0.0;
        v119.f64[0] = _D31 + (v113 + 0.0) * v454;
        v372 = v119;
        v119.f64[0] = _D30 + (v113 + 0.0) * v450;
        v63.f64[0] = _D20 + (v113 + 0.0) * v447;
        v370 = v63;
        v371 = v119;
        v63.f64[0] = _D31 + _Q7.f64[0] * v454;
        v369 = v63;
        v63.f64[0] = _D30 + _Q7.f64[0] * v450;
        v368 = v63;
        v63.f64[0] = _D20 + _Q7.f64[0] * v447;
        v367 = v63;
        _Q7.f64[0] = v404 + v454 * 0.0;
        v366 = _Q7;
        _Q7.f64[0] = v388 + v454 * 0.0;
        v365 = _Q7;
        _Q7.f64[0] = _Q23.f64[0] + (v114 + 0.0) * v454;
        v364 = _Q7;
        _Q7.f64[0] = v392 + v450 * 0.0;
        v363 = _Q7;
        _Q7.f64[0] = v386 + v450 * 0.0;
        v362 = _Q7;
        _Q7.f64[0] = _D21 + (v114 + 0.0) * v450;
        v63.f64[0] = _D22 + (v114 + 0.0) * v447;
        v360 = v63;
        v361 = _Q7;
        v120 = (int8x16_t)v400;
        v121 = vextq_s8(v120, v120, 8uLL).u64[0];
        *(double *)v120.i64 = v390 + v447 * 0.0;
        v358 = (float64x2_t)v120;
        v359 = *(double *)&v121;
        *(double *)v120.i64 = v384 + v447 * 0.0;
        v357 = (float64x2_t)v120;
        v391 = v115.i64[0];
        v393 = *(double *)v71.i64;
        v355 = vextq_s8(v71, v71, 8uLL).u64[0];
        v356 = vextq_s8(v399, v399, 8uLL).u64[0];
        v379 = *(double *)v109.i64;
        v381 = (int8x16_t)vmlaq_n_f64(v101, _Q27, v447);
        v377 = (int8x16_t)vmlaq_n_f64(v106, _Q26, v454);
        v353 = vextq_s8(v110, v110, 8uLL).u64[0];
        v354 = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
        v373 = *(double *)v111.i64;
        v351 = vextq_s8(v115, v115, 8uLL).u64[0];
        v352 = vextq_s8(v111, v111, 8uLL).u64[0];
        v387 = v117.i64[0];
        v389 = v116.i64[0];
        v349 = vextq_s8(v117, v117, 8uLL).u64[0];
        v350 = vextq_s8(v116, v116, 8uLL).u64[0];
        v383 = v118.f64[0];
        v385 = (int8x16_t)vmlaq_n_f64(v99, _Q27, v454);
        v347 = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u64[0];
        v348 = vextq_s8(v385, v385, 8uLL).u64[0];
        v345 = vextq_s8(v377, v377, 8uLL).u64[0];
        v346 = vextq_s8(v381, v381, 8uLL).u64[0];
        v374 = (int8x16_t)vmlaq_n_f64(v108, _Q26, v447);
        v375 = (int8x16_t)vmlaq_n_f64(v107, _Q26, v450);
        v343 = vextq_s8(v374, v374, 8uLL).u64[0];
        v344 = vextq_s8(v375, v375, 8uLL).u64[0];
        v122 = *(double *)(a1 + 296);
        v338 = *(double *)(a1 + 288);
        v339 = *(double *)(a1 + 280);
        v341 = vextq_s8((int8x16_t)v402, (int8x16_t)v402, 8uLL);
        *(_QWORD *)&v342 = vextq_s8((int8x16_t)v403, (int8x16_t)v403, 8uLL).u64[0];
        v123 = vextq_s8((int8x16_t)v401, (int8x16_t)v401, 8uLL);
        v340 = *(double *)v123.i64;
        do
        {
          v109.i64[0] = *(_QWORD *)v38;
          v123.i64[0] = *(_QWORD *)(v38 + 8);
          v178.f64[0] = *(float64_t *)(v38 + 16);
          v179 = *(double *)(v38 + 24);
          _Q4 = vaddq_f64(v396, vmlaq_n_f64(vmulq_n_f64(v398, *(double *)v38), v397, *(double *)v123.i64));
          _Q5 = vaddq_f64(v401, vmlaq_n_f64(vmulq_n_f64(v403, v178.f64[0]), v402, v179));
          _Q6 = vmulq_f64(_Q4, _Q4);
          _D7 = _Q4.f64[1];
          __asm { FMLA            D6, D7, V4.D[1] }
          _Q7 = vmulq_f64(_Q5, _Q5);
          _D16 = _Q5.f64[1];
          __asm { FMLA            D7, D16, V5.D[1] }
          _Q6.f64[0] = _Q6.f64[0] + _Q7.f64[0];
          if (_Q6.f64[0] < 1.0e-12)
            _Q6.f64[0] = 1.0e-12;
          _Q7.f64[0] = sqrt(_Q6.f64[0]);
          *(_QWORD *)&v186.f64[1] = v341.i64[1];
          _Q23.f64[0] = (v394
                       + *(double *)v109.i64 * v401.f64[0]
                       + *(double *)v123.i64 * v340
                       + (v395 + *(double *)v109.i64 * v403.f64[0] + *(double *)v123.i64 * v342) * v178.f64[0]
                       + (v337 + *(double *)v109.i64 * v402.f64[0] + *(double *)v123.i64 * *(double *)v341.i64) * v179)
                      / _Q7.f64[0];
          v178.f64[1] = *(float64_t *)(v38 + 24);
          v187 = vmulq_n_f64(v178, *(double *)v109.i64);
          v188 = (int64x2_t)vmulq_n_f64(v178, *(double *)v123.i64);
          v189 = (float64x2_t)vzip1q_s64(v109, v188);
          v190 = (float64x2_t)vextq_s8((int8x16_t)v188, v123, 8uLL);
          v186.f64[0] = _Q5.f64[0] + _Q5.f64[0];
          v119.f64[0] = _Q5.f64[1] + _Q5.f64[1];
          v191 = vaddq_f64(_Q4, _Q4);
          v192 = vmlaq_n_f64(vmulq_n_f64(v178, _Q5.f64[0] + _Q5.f64[0]), v191, *(double *)v109.i64);
          v193 = vmlaq_n_f64(vmulq_n_f64(v178, _Q5.f64[1] + _Q5.f64[1]), v191, *(double *)v123.i64);
          _Q6.f64[0] = _Q23.f64[0] * 0.5 / _Q6.f64[0];
          __asm { FMOV            V0.2D, #1.0 }
          v195 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q7.f64[0], 0);
          v196 = vdivq_f64(v178, v195);
          v197 = vdivq_f64(v187, v195);
          v198 = (int64x2_t)vdivq_f64(v190, v195);
          v199 = vdivq_f64(v189, v195);
          v200 = (float64x2_t)vextq_s8((int8x16_t)v199, (int8x16_t)v198, 8uLL);
          v201 = vmlsq_lane_f64(v197, v192, _Q6.f64[0], 0);
          v202 = vmlsq_f64(v199, _Q6, v186);
          v203 = vmlsq_lane_f64(v200, v193, _Q6.f64[0], 0);
          v204 = vmlsq_f64((float64x2_t)vdupq_laneq_s64(v198, 1), _Q6, v119);
          v205 = vmlsq_lane_f64(v196, v191, _Q6.f64[0], 0);
          v206 = vmlsq_f64(vdivq_f64(_Q0, _Q7), _Q6, (float64x2_t)0);
          *(_QWORD *)&v208.f64[0] = v399.i64[0];
          v207.f64[0] = v400.f64[0];
          v207.f64[1] = v359;
          *(_QWORD *)&v208.f64[1] = v356;
          v209 = vmulq_f64(v208, v203);
          v186.f64[0] = v393;
          *(_QWORD *)&v186.f64[1] = v355;
          v210 = vmulq_f64(v186, v205);
          v445 = vmulq_f64(v358, v206).f64[0]
               + v210.f64[1]
               + v210.f64[0]
               + vmulq_f64(v363, v204).f64[0]
               + v209.f64[1]
               + v209.f64[0]
               + vmulq_f64(v366, v202).f64[0]
               + vaddvq_f64(vmulq_f64(v207, v201));
          v211 = vmulq_f64(v365, v202);
          v212.f64[0] = v379;
          *(_QWORD *)&v212.f64[1] = v354;
          *(_QWORD *)&v209.f64[0] = v110.i64[0];
          *(_QWORD *)&v209.f64[1] = v353;
          v213 = vmulq_f64(v209, v203);
          v211.f64[0] = v211.f64[0] + vaddvq_f64(vmulq_f64(v212, v201));
          v212.f64[0] = v373;
          *(_QWORD *)&v212.f64[1] = v352;
          v214 = vmulq_f64(v212, v205);
          v211.f64[0] = vmulq_f64(v357, v206).f64[0]
                      + v214.f64[1]
                      + v214.f64[0]
                      + vmulq_f64(v362, v204).f64[0]
                      + v213.f64[1]
                      + v213.f64[0]
                      + v211.f64[0];
          v448 = v211;
          *(_QWORD *)&v214.f64[0] = v391;
          *(_QWORD *)&v214.f64[1] = v351;
          *(_QWORD *)&v213.f64[0] = v389;
          *(_QWORD *)&v213.f64[1] = v350;
          v215 = vmulq_f64(v213, v203);
          v211.f64[0] = v215.f64[1] + v215.f64[0] + vmulq_f64(v372, v202).f64[0] + vaddvq_f64(vmulq_f64(v214, v201));
          *(_QWORD *)&v215.f64[0] = v387;
          *(_QWORD *)&v215.f64[1] = v349;
          v216 = vmulq_f64(v215, v205);
          v455 = vmulq_f64(v370, v206).f64[0] + v216.f64[1] + v216.f64[0] + vmulq_f64(v371, v204).f64[0] + v211.f64[0];
          *(_QWORD *)&v214.f64[0] = v385.i64[0];
          *(_QWORD *)&v214.f64[1] = v348;
          v216.f64[0] = v383;
          *(_QWORD *)&v216.f64[1] = v347;
          v217 = vmulq_f64(v216, v203);
          v211.f64[0] = v217.f64[1] + v217.f64[0] + vmulq_f64(v369, v202).f64[0] + vaddvq_f64(vmulq_f64(v214, v201));
          *(_QWORD *)&v217.f64[0] = v381.i64[0];
          *(_QWORD *)&v217.f64[1] = v346;
          v218 = vmulq_f64(v217, v205);
          __x = vmulq_f64(v367, v206).f64[0] + v218.f64[1] + v218.f64[0] + vmulq_f64(v368, v204).f64[0] + v211.f64[0];
          *(_QWORD *)&v211.f64[0] = v377.i64[0];
          *(_QWORD *)&v211.f64[1] = v345;
          v219 = vmulq_f64(v211, v201);
          *(_QWORD *)&v211.f64[0] = v375.i64[0];
          *(_QWORD *)&v211.f64[1] = v344;
          v220 = vmulq_f64(v211, v203);
          *(_QWORD *)&v211.f64[0] = v374.i64[0];
          *(_QWORD *)&v211.f64[1] = v343;
          v221 = vmulq_f64(v211, v205);
          v451 = vmulq_f64(v360, v206).f64[0]
               + v221.f64[1]
               + v221.f64[0]
               + vmulq_f64(v361, v204).f64[0]
               + v220.f64[1]
               + v220.f64[0]
               + vmulq_f64(v364, v202).f64[0]
               + vaddvq_f64(v219);
          v405 = _Q23;
          v206.f64[0] = v122 * (v339 * (_Q23.f64[0] * _Q23.f64[0]));
          v222 = v206.f64[0] + v32;
          v223 = v338 * log1p(v206.f64[0]);
          v118.f64[0] = v32 / v222;
          if (vabdd_f64(v32, v32 / v222) <= 2.22044605e-16)
          {
            v124.f64[0] = v455;
            v124.f64[1] = __x;
            v125 = vmulq_n_f64(v124, v455);
            v126 = v451;
            v142.f64[1] = v445;
            v127 = vmulq_n_f64(v142, v455);
            v128.f64[0] = v448.f64[0] * v455;
            v129 = vmulq_n_f64(v124, __x);
            v130 = vmulq_n_f64(v142, __x);
            v131 = v448.f64[0] * __x;
            v132 = vmulq_n_f64(v124, v451);
            v133 = vmulq_n_f64(v142, v451);
            v119.f64[0] = v448.f64[0] * v451;
            v134 = vmulq_n_f64(v124, v445);
            v135 = vmulq_n_f64(v142, v445);
            v136 = v448.f64[0] * v445;
            v137 = vmulq_n_f64(v124, v448.f64[0]);
            v138 = vmulq_n_f64(v142, v448.f64[0]);
            v139.f64[0] = v448.f64[0] * v448.f64[0];
            v140.f64[0] = v129.f64[1];
            v141.f64[0] = v130.f64[1];
            v142.f64[0] = v134.f64[1];
            v143.f64[0] = v135.f64[1];
            v144 = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
            v145 = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
            v146 = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
            v147 = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
            v148 = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
            v149 = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
            v118 = v405;
          }
          else
          {
            v224 = vmulq_f64(v118, v448).f64[0];
            v225.f64[0] = v451;
            v225.f64[1] = v445;
            v226 = vmulq_n_f64(v225, v118.f64[0]);
            v225.f64[0] = v455;
            v225.f64[1] = __x;
            v227 = vmulq_n_f64(v225, v118.f64[0]);
            v125 = vmulq_n_f64(v227, v455);
            v127 = vmulq_n_f64(v226, v455);
            v128.f64[0] = v455 * v224;
            v129 = vmulq_n_f64(v227, __x);
            v130 = vmulq_n_f64(v226, __x);
            v131 = __x * v224;
            v132 = vmulq_n_f64(v227, v451);
            v133 = vmulq_n_f64(v226, v451);
            v119.f64[0] = v451 * v224;
            v134 = vmulq_n_f64(v227, v445);
            v135 = vmulq_n_f64(v226, v445);
            v136 = v445 * v224;
            v137 = vmulq_n_f64(v227, v448.f64[0]);
            v138 = vmulq_n_f64(v226, v448.f64[0]);
            v139.f64[0] = v448.f64[0] * v224;
            v140.f64[0] = v129.f64[1];
            v141.f64[0] = v130.f64[1];
            v142.f64[0] = v134.f64[1];
            v143.f64[0] = v135.f64[1];
            v144 = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
            v145 = vextq_s8((int8x16_t)v132, (int8x16_t)v132, 8uLL).u64[0];
            v146 = vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL).u64[0];
            v147 = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
            v148 = vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL).u64[0];
            v149 = vextq_s8((int8x16_t)v127, (int8x16_t)v127, 8uLL).u64[0];
            v228.f64[1] = v405.f64[1];
            v228.f64[0] = v405.f64[0] * v118.f64[0];
            v118 = v228;
          }
          v150.f64[0] = v451;
          v150.f64[1] = v445;
          _D15 = _D15 + v223;
          v151.f64[0] = v455;
          v151.f64[1] = __x;
          v152 = vaddq_f64(v439, v139);
          *(_QWORD *)&v125.f64[1] = v146;
          *(_QWORD *)&v153.f64[0] = v418.i64[0];
          *(_QWORD *)&v153.f64[1] = v410;
          v154 = (int8x16_t)vaddq_f64(v153, v125);
          *(_QWORD *)&v127.f64[1] = v149;
          *(_QWORD *)&v155.f64[0] = v419.i64[0];
          *(_QWORD *)&v155.f64[1] = v407;
          v156 = (int8x16_t)vaddq_f64(v155, v127);
          v410 = vextq_s8(v154, v154, 8uLL).u64[0];
          v128.f64[1] = v129.f64[0];
          *(_QWORD *)&v157.f64[0] = v420.i64[0];
          *(_QWORD *)&v157.f64[1] = v409;
          v140.f64[1] = v130.f64[0];
          *(_QWORD *)&v158.f64[0] = v433.i64[0];
          *(_QWORD *)&v158.f64[1] = v408;
          v159 = (int8x16_t)vaddq_f64(v157, v128);
          _Q23 = vaddq_f64(v158, v140);
          v409 = vextq_s8(v159, v159, 8uLL).u64[0];
          v141.f64[1] = v131;
          v407 = vextq_s8(v156, v156, 8uLL).u64[0];
          v408 = vextq_s8((int8x16_t)_Q23, (int8x16_t)_Q23, 8uLL).u64[0];
          *(_QWORD *)&v160.f64[0] = v421.i64[0];
          *(_QWORD *)&v160.f64[1] = v411;
          v161 = (int8x16_t)vaddq_f64(v160, v141);
          v411 = vextq_s8(v161, v161, 8uLL).u64[0];
          *(_QWORD *)&v132.f64[1] = v145;
          *(_QWORD *)&v162.f64[0] = v422.i64[0];
          *(_QWORD *)&v162.f64[1] = v412;
          v163 = (int8x16_t)vaddq_f64(v162, v132);
          v412 = vextq_s8(v163, v163, 8uLL).u64[0];
          *(_QWORD *)&v133.f64[1] = v148;
          *(_QWORD *)&v164.f64[0] = v435.i64[0];
          *(_QWORD *)&v164.f64[1] = v413;
          v165 = (int8x16_t)vaddq_f64(v164, v133);
          v413 = vextq_s8(v165, v165, 8uLL).u64[0];
          v119.f64[1] = v134.f64[0];
          *(_QWORD *)&v166.f64[0] = v423.i64[0];
          *(_QWORD *)&v166.f64[1] = v414;
          v167 = (int8x16_t)vaddq_f64(v166, v119);
          v414 = vextq_s8(v167, v167, 8uLL).u64[0];
          v142.f64[1] = v135.f64[0];
          *(_QWORD *)&v168.f64[0] = v424.i64[0];
          *(_QWORD *)&v119.f64[1] = v406.i64[1];
          *(_QWORD *)&v168.f64[1] = v406.i64[0];
          v418.i64[0] = v154.i64[0];
          v466 = v154;
          v419.i64[0] = v156.i64[0];
          v467 = v156;
          v420.i64[0] = v159.i64[0];
          v468 = v159;
          v469 = _Q23;
          v433.i64[0] = *(_QWORD *)&_Q23.f64[0];
          v421.i64[0] = v161.i64[0];
          v470 = v161;
          v471 = v163;
          v422.i64[0] = v163.i64[0];
          v169 = (int8x16_t)vaddq_f64(v168, v142);
          v406 = vextq_s8(v169, v169, 8uLL);
          v143.f64[1] = v136;
          *(_QWORD *)&v170.f64[0] = v437.i64[0];
          *(_QWORD *)&v170.f64[1] = v416;
          v171 = vaddq_f64(v170, v143);
          v416 = vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL).u64[0];
          *(_QWORD *)&v137.f64[1] = v144;
          *(_QWORD *)&v172.f64[0] = v425.i64[0];
          *(_QWORD *)&v172.f64[1] = v417;
          v173 = (int8x16_t)vaddq_f64(v172, v137);
          v417 = vextq_s8(v173, v173, 8uLL).u64[0];
          *(_QWORD *)&v138.f64[1] = v147;
          *(_QWORD *)&v174.f64[0] = v426.i64[0];
          *(_QWORD *)&v174.f64[1] = v415;
          v435.i64[0] = v165.i64[0];
          v472 = v165;
          v473 = v167;
          v423.i64[0] = v167.i64[0];
          v175 = (int8x16_t)vaddq_f64(v174, v138);
          v415 = vextq_s8(v175, v175, 8uLL).u64[0];
          v424.i64[0] = v169.i64[0];
          v474 = v169;
          v475 = v171;
          v437.i64[0] = *(_QWORD *)&v171.f64[0];
          v425.i64[0] = v173.i64[0];
          v476 = v173;
          v477 = v175;
          v426.i64[0] = v175.i64[0];
          *(_QWORD *)&v176.f64[0] = v429.i64[0];
          *(_QWORD *)&v176.f64[1] = v427;
          v439 = v152;
          v478 = v152.f64[0];
          v177 = (int8x16_t)vmlsq_lane_f64(v176, v151, v118.f64[0], 0);
          v427 = vextq_s8(v177, v177, 8uLL).u64[0];
          *(_QWORD *)&v171.f64[0] = v430.i64[0];
          *(_QWORD *)&v171.f64[1] = v428;
          v123 = (int8x16_t)vmlsq_lane_f64(v171, v150, v118.f64[0], 0);
          v109 = (int64x2_t)vextq_s8(v123, v123, 8uLL);
          v428 = v109.i64[0];
          v429.i64[0] = v177.i64[0];
          v463 = (float64x2_t)v177;
          v430.i64[0] = v123.i64[0];
          v464 = (float64x2_t)v123;
          v38 += 32;
          v431 = vmlsq_f64(v431, v118, v448);
          v465 = v431.f64[0];
          v32 = 1.0;
        }
        while (v38 != v39);
        v229 = v152.f64[0];
        v230 = *(double *)v437.i64;
        v231 = *(double *)v165.i64;
        v232 = _Q23.f64[0];
        if (v33)
        {
LABEL_17:
          v233 = *(double *)(a1 + 232);
          goto LABEL_20;
        }
      }
      *(_OWORD *)(a1 + 232) = xmmword_239EC68F0;
      v459 = _D15 * 0.5;
      v234 = _D15 * 0.5;
      v233 = 0.001;
      v336 = v234;
LABEL_20:
      *(double *)v466.i64 = v233 + *(double *)v466.i64;
      v469.f64[0] = v233 + v232;
      *(double *)v472.i64 = v233 + v231;
      v475.f64[0] = v233 + v230;
      v478 = v233 + v229;
      v460 = v463;
      v461 = v464;
      v462 = v465;
      sub_2394580F4((__CLPK_doublereal *)v466.i64, v460.f64);
      v235 = *(_OWORD *)(a2 + 16);
      v479 = *(float64x2_t *)a2;
      v480 = v235;
      v481 = *(_OWORD *)(a2 + 32);
      sub_239458808(a1, (uint64_t)&v460, a2);
      v238 = *(double *)(a2 + 16);
      _Q7 = *(float64x2_t *)a2;
      _D10 = *(double *)(a2 + 8);
      _Q0 = vmulq_f64(_Q7, _Q7);
      __asm { FMLA            D0, D10, V7.D[1] }
      v242 = _Q0.f64[0] + v238 * v238;
      if (v242 >= 0.0000002635)
      {
        v245 = sqrt(v242);
        v456 = *(float64x2_t *)a2;
        v246 = __sincos_stret(v245);
        v244 = v246.__cosval;
        _Q7.f64[0] = v456.f64[0];
        _Q0.f64[0] = v246.__sinval / v245;
        v243 = v32 / v242 * (v32 - v246.__cosval);
      }
      else
      {
        v243 = 0.5 - v242 * (v242 / -720.0 + 0.0416666667);
        _Q0.f64[0] = v32 - v242 * (0.166666667 - v242 * (v242 / -5040.0 + 0.00833333333));
        v244 = v32 - v242 * v243;
      }
      v34 = 0uLL;
      _Q3.f64[0] = _Q7.f64[0] * v243;
      v247 = _D10 * v243;
      *(double *)&_Q5 = v244 + _Q7.f64[0] * v243 * _Q7.f64[0];
      v249 = v244 + _D10 * v243 * _D10;
      v250 = v244 + v238 * v243 * v238;
      v251 = _D10 * (_Q7.f64[0] * v243);
      _Q3.f64[0] = v238 * _Q3.f64[0];
      v252 = v238 * v247;
      v253 = _Q7.f64[0] * _Q0.f64[0];
      v254 = _D10 * _Q0.f64[0];
      _Q0.f64[0] = v238 * _Q0.f64[0];
      *(double *)&v255 = v251 - _Q0.f64[0];
      *(double *)&v256 = v254 + _Q3.f64[0];
      *((double *)&_Q5 + 1) = v251 + _Q0.f64[0];
      *((double *)&v255 + 1) = v249;
      *((double *)&v256 + 1) = v252 - v253;
      *(double *)(a1 + 16) = _Q3.f64[0] - v254;
      *(_OWORD *)a1 = _Q5;
      *(double *)(a1 + 48) = v252 + v253;
      *(_OWORD *)(a1 + 32) = v255;
      *(double *)(a1 + 80) = v250;
      *(_OWORD *)(a1 + 64) = v256;
      _Q0.f64[0] = *(float64_t *)(a2 + 40);
      _Q2 = *(float64x2_t *)(a2 + 24);
      _Q3.f64[0] = _Q2.f64[1];
      __asm { FMLA            D1, D3, V2.D[1] }
      _Q3.f64[0] = v32 / sqrt(_D1 + _Q0.f64[0] * _Q0.f64[0]);
      *(_QWORD *)&_D1 = *(_OWORD *)&vmulq_f64(_Q0, _Q3);
      _Q0 = vmulq_n_f64(_Q2, _Q3.f64[0]);
      *(float64x2_t *)(a1 + 96) = _Q0;
      *(double *)(a1 + 112) = _D1;
      _D6 = v460.f64[1];
      __asm { FMLA            D5, D6, V4.D[1] }
      _D4 = v461.f64[1];
      __asm { FMLA            D5, D4, V3.D[1] }
      _Q2.f64[0] = sqrt(*(double *)&_Q5 + v462 * v462);
      v262 = *(_QWORD *)(a1 + 200);
      _Q5 = *(float64x2_t *)(a2 + 16);
      _Q6 = *(float64x2_t *)a2;
      _D16 = *(_QWORD *)(a2 + 8);
      __asm { FMLA            D7, D16, V6.D[1] }
      _Q6.f64[0] = _Q5.f64[1];
      __asm { FMLA            D7, D6, V5.D[1] }
      _Q5.f64[0] = *(float64_t *)(a2 + 40);
      __asm { FMLA            D7, D5, V4.D[1] }
      if (_Q2.f64[0] < *(double *)(v262 + 32) * (*(double *)(v262 + 32) + sqrt(_D7)))
      {
        v36 = v33 + 1;
        if (v33 >= *(_DWORD *)(a1 + 144))
          return v336;
        goto LABEL_37;
      }
      _Q2.f64[0] = v465;
      *(_QWORD *)&v269.f64[0] = *(_OWORD *)&vabsq_f64(_Q2);
      v270 = vabsq_f64(v464);
      _Q5.f64[0] = NAN;
      v269.f64[1] = NAN;
      v271 = vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(v463), v269), v270);
      v271.f64[0] = vmaxnmvq_f64(v271);
      v272 = *(double *)(v262 + 24);
      if (v271.f64[0] < v272)
      {
        v36 = v33 + 1;
        if (v33 >= *(_DWORD *)(a1 + 144))
          return v336;
        goto LABEL_37;
      }
      v273 = *(double ***)(a1 + 128);
      v274 = *v273;
      v275 = v273[1];
      if (*v273 == v275)
      {
        _Q22.f64[0] = 0.0;
      }
      else
      {
        v276 = *(double *)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).i64;
        v277.f64[0] = v276;
        v277.f64[1] = -_Q0.f64[0];
        v278 = -v276;
        v279.f64[0] = *(float64_t *)(a1 + 16);
        v280 = *(float64x2_t *)(a1 + 32);
        v281 = *(double *)(a1 + 80);
        _Q19 = *(float64x2_t *)(a1 + 64);
        _Q22.f64[0] = 0.0;
        v283.f64[0] = 0.0;
        v283.f64[1] = _D1;
        v452 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v283, *(double *)a1), (float64x2_t)COERCE_UNSIGNED_INT64(-_D1), *(float64x2_t *)a1, 1), v277, v279.f64[0]);
        v449 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v283, v280.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-_D1), v280, 1), v277, *(double *)(a1 + 48));
        v446 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v283, _Q19.f64[0]), (float64x2_t)COERCE_UNSIGNED_INT64(-_D1), _Q19, 1), v277, v281);
        v284 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, (int64x2_t)v280);
        v285 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a1, (int64x2_t)v280);
        v279.f64[1] = *(float64_t *)(a1 + 48);
        v286 = (int8x16_t)vmlaq_n_f64(vmlsq_lane_f64(vmulq_f64(v284, (float64x2_t)0), v285, _D1, 0), v279, v276);
        __asm { FMLS            D7, D1, V19.D[1] }
        v288 = _D7 + v281 * v276;
        v289 = (int8x16_t)vmlsq_lane_f64(vmlaq_f64(vmulq_n_f64(v284, _D1), (float64x2_t)0, v285), v279, _Q0.f64[0], 0);
        __asm { FMLA            D1, D22, V19.D[1] }
        v291 = _D1 - v281 * _Q0.f64[0];
        __asm { FMLA            D1, D0, V19.D[1] }
        v293 = _D1 + v281 * 0.0;
        v294 = *(double *)(a1 + 280);
        v295 = *(double *)(a1 + 288);
        v296 = *(double *)(a1 + 296);
        __xa = (float64x2_t)v286;
        *(_QWORD *)&v436 = vextq_s8(v286, v286, 8uLL).u64[0];
        v440 = (float64x2_t)v289;
        *(_QWORD *)&v434 = vextq_s8(v289, v289, 8uLL).u64[0];
        v438 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v284, v278), v285, _Q0.f64[0]), (float64x2_t)0, v279);
        *(_QWORD *)&v432 = vextq_s8((int8x16_t)v438, (int8x16_t)v438, 8uLL).u64[0];
        do
        {
          v457 = _Q22;
          v297 = v274[1];
          v298 = v274[2];
          v299 = v274[3];
          _D7 = vaddq_f64(v446, vmlaq_n_f64(vmulq_n_f64(v452, *v274), v449, v297)).f64[1];
          __asm { FMLA            D6, D7, V4.D[1] }
          _D7 = vaddq_f64(v438, vmlaq_n_f64(vmulq_n_f64(__xa, v298), v440, v299)).f64[1];
          __asm { FMLA            D4, D7, V5.D[1] }
          v304 = _D6 + _D4;
          if (v304 < 0.000001)
            v304 = 0.000001;
          v305 = v293
               + *v274 * v438.f64[0]
               + v297 * v432
               + (v288 + *v274 * __xa.f64[0] + v297 * v436) * v298
               + (v291 + *v274 * v440.f64[0] + v297 * v434) * v299;
          v306 = sqrt(v304);
          _Q0.f64[0] = log1p(v296 * (v294 * (v305 / v306 * (v305 / v306))));
          _Q22.f64[1] = v457.f64[1];
          _Q22.f64[0] = v457.f64[0] + v295 * _Q0.f64[0];
          v274 += 4;
        }
        while (v274 != v275);
      }
      v307 = _Q22.f64[0] * 0.5;
      v308 = *(double *)(a1 + 184);
      v32 = 1.0;
      if (fabs((v459 - _Q22.f64[0] * 0.5) / v459) < v308)
        return v336;
      _Q0.f64[0] = _Q22.f64[0] * 0.5;
      if (sub_2394582A8(a1 + 192, &v459, (uint64_t)&v460, &v463, _Q0, v308, v271, v272, v270.f64[0], _Q5))
      {
        v309 = v307;
        v336 = v309;
        v36 = v33 + 1;
        v34 = 0uLL;
LABEL_37:
        v33 = v36;
        if (v36 >= *(_DWORD *)(a1 + 148))
          return v336;
      }
      else
      {
        v310 = v480;
        *(float64x2_t *)a2 = v479;
        *(_OWORD *)(a2 + 16) = v310;
        *(_OWORD *)(a2 + 32) = v481;
        v311 = *(double *)(a2 + 16);
        _Q7 = *(float64x2_t *)a2;
        _D10 = *(double *)(a2 + 8);
        _Q0 = vmulq_f64(_Q7, _Q7);
        __asm { FMLA            D0, D10, V7.D[1] }
        v315 = _Q0.f64[0] + v311 * v311;
        if (v315 >= 0.0000002635)
        {
          v318 = sqrt(v315);
          v458 = *(float64x2_t *)a2;
          v319 = __sincos_stret(v318);
          v317 = v319.__cosval;
          _Q7.f64[0] = v458.f64[0];
          _Q0.f64[0] = v319.__sinval / v318;
          v316 = 1.0 / v315 * (1.0 - v319.__cosval);
        }
        else
        {
          v316 = 0.5 - v315 * (v315 / -720.0 + 0.0416666667);
          _Q0.f64[0] = 1.0 - v315 * (0.166666667 - v315 * (v315 / -5040.0 + 0.00833333333));
          v317 = 1.0 - v315 * v316;
        }
        v34 = 0uLL;
        v320 = _Q7.f64[0] * v316;
        v321 = _D10 * v316;
        *(double *)&v322 = v317 + _Q7.f64[0] * v316 * _Q7.f64[0];
        v323 = v317 + _D10 * v316 * _D10;
        v324 = v317 + v311 * v316 * v311;
        v325 = _D10 * (_Q7.f64[0] * v316);
        v326 = v311 * v320;
        v327 = v311 * v321;
        v328 = _Q7.f64[0] * _Q0.f64[0];
        v329 = _D10 * _Q0.f64[0];
        _Q0.f64[0] = v311 * _Q0.f64[0];
        *(double *)&v330 = v325 - _Q0.f64[0];
        *(double *)&v331 = v329 + v326;
        *((double *)&v322 + 1) = v325 + _Q0.f64[0];
        *((double *)&v330 + 1) = v323;
        *((double *)&v331 + 1) = v327 - v328;
        *(double *)(a1 + 16) = v326 - v329;
        *(_OWORD *)a1 = v322;
        *(double *)(a1 + 48) = v327 + v328;
        *(_OWORD *)(a1 + 32) = v330;
        *(double *)(a1 + 80) = v324;
        *(_OWORD *)(a1 + 64) = v331;
        _Q0.f64[0] = *(float64_t *)(a2 + 40);
        _Q1 = *(float64x2_t *)(a2 + 24);
        _Q2 = vmulq_f64(_Q1, _Q1);
        _D3 = *(_QWORD *)(a2 + 32);
        __asm { FMLA            D2, D3, V1.D[1] }
        _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
        _Q0 = vmulq_f64(_Q0, _Q2);
        *(float64x2_t *)(a1 + 96) = vmulq_n_f64(_Q1, _Q2.f64[0]);
        *(float64_t *)(a1 + 112) = _Q0.f64[0];
        if (++v33 >= *(_DWORD *)(a1 + 148))
          return v336;
      }
    }
  }
  return -1.0;
}

_QWORD *sub_239457C80(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_239457CC0(float64x2_t **a1, double **a2)
{
  float64x2_t *v2;
  double v3;
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;

  v2 = *a1;
  v3 = ((*a1)[3].f64[0] - (*a1)[4].f64[1]) * 0.5;
  v4 = *a2;
  *v4 = v3;
  v5 = (v2[4].f64[0] - v2[1].f64[0]) * 0.5;
  v4[1] = v5;
  v6 = (v2->f64[1] - v2[2].f64[0]) * 0.5;
  v4[2] = v6;
  v7 = v2->f64[0];
  v8 = v2[2].f64[1];
  v9 = v2[5].f64[0];
  v10 = -1.0;
  v11 = (v2->f64[0] + v8 + v9 + -1.0) * 0.5;
  v12 = v5 * v5 + v3 * v3 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001)
      v13 = 0;
    if (v11 > 0.99 || v13)
    {
      v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
LABEL_12:
      *v4 = v3 * v15;
      v4[1] = v5 * v15;
      v4[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      v15 = acos(v11) / sqrt(v12);
      goto LABEL_12;
    }
    v10 = (v2->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  v16 = asin(sqrt(v12));
  v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  v18 = (v7 - v10) * v17;
  v19 = (v8 - v10) * v17;
  v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      v32 = sqrt(v20);
      if (v6 < 0.0)
        v32 = -v32;
      v4[2] = v32;
      v33.f64[0] = v2[1].f64[0];
      v33.f64[1] = v2[3].f64[0];
      *(float64x2_t *)v4 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(v2[4], v33), v25), 1.0 / v32);
    }
    else
    {
      v26 = sqrt(v19);
      if (v5 < 0.0)
        v26 = -v26;
      v4[1] = v26;
      v27 = 1.0 / v26;
      v28 = v2[4].f64[1] + v2[3].f64[0];
      *v4 = v27 * (v25 * (v2[2].f64[0] + v2->f64[1]));
      v4[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    v21 = v17 * 0.5;
    v22 = v21 * (v2[4].f64[0] + v2[1].f64[0]);
    if (v18 <= v20)
    {
      v29 = sqrt(v20);
      if (v6 < 0.0)
        v29 = -v29;
      v4[2] = v29;
      v30 = 1.0 / v29;
      v31 = v30 * (v21 * (v2[4].f64[1] + v2[3].f64[0]));
      *v4 = v30 * v22;
      v4[1] = v31;
    }
    else
    {
      v23 = sqrt(v18);
      if (v3 < 0.0)
        v23 = -v23;
      *v4 = v23;
      v24 = 1.0 / v23;
      v4[1] = v24 * (v21 * (v2[2].f64[0] + v2->f64[1]));
      v4[2] = v24 * v22;
    }
  }
}

uint64_t sub_239457FB0(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  size_t v9;
  char *v10;
  _OWORD *v11;
  double v12;
  double v18;

  *(_OWORD *)(a1 + 64) = xmmword_239EC6980;
  *(_OWORD *)(a1 + 80) = unk_239EC6990;
  *(_OWORD *)(a1 + 96) = xmmword_239EC69A0;
  *(_OWORD *)(a1 + 112) = unk_239EC69B0;
  *(_OWORD *)a1 = xmmword_239EC6940;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)algn_239EC6950;
  *(_OWORD *)(a1 + 32) = xmmword_239EC6960;
  *(_OWORD *)(a1 + 48) = unk_239EC6970;
  *(_QWORD *)(a1 + 128) = a2;
  v4 = a2[1] - *a2;
  v5 = v4 >> 5;
  *(_QWORD *)(a1 + 136) = v4 >> 5;
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 192) = v4 >> 5;
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  if (v4)
  {
    if (v4 < 0)
      sub_2394189F8();
    v9 = (unint64_t)v4 >> 2;
    v10 = (char *)operator new((unint64_t)v4 >> 2);
    *(_QWORD *)(a1 + 208) = v10;
    *(_QWORD *)(a1 + 224) = &v10[8 * v5];
    bzero(v10, v9);
    *(_QWORD *)(a1 + 216) = &v10[v9];
  }
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v11 = operator new(0x28uLL);
  *(_QWORD *)(a1 + 256) = (char *)v11 + 40;
  *(_QWORD *)(a1 + 264) = (char *)v11 + 40;
  *v11 = 0u;
  v11[1] = 0u;
  *((_QWORD *)v11 + 4) = 0;
  *(_QWORD *)(a1 + 248) = v11;
  v12 = *(double *)(a1 + 152);
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 272) = _Q1;
  v18 = v12 * v12;
  *(double *)(a1 + 288) = v18;
  *(double *)(a1 + 296) = 1.0 / v18;
  return a1;
}

void sub_2394580C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 216) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2394580F4(__CLPK_doublereal *a1, __CLPK_doublereal *a2)
{
  __CLPK_integer *v4;
  __CLPK_integer v5;
  int v6;
  void *v7;
  _BOOL8 v8;
  std::bad_alloc *exception;
  std::bad_alloc *v11;
  std::bad_alloc *v12;
  std::bad_alloc *v13;
  uint64_t v14;
  uint64_t v15;
  __CLPK_doublereal v16;
  __CLPK_integer v17;
  void *memptr;

  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20uLL, 0x100BBD03uLL);
  v4 = (__CLPK_integer *)memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v17 = 0;
  v16 = 0.0;
  LODWORD(v14) = -1;
  sub_239A2326C(85, 5, 1, a1, 5, (__CLPK_integer *)memptr, a2, 5, &v16, v14, &v17);
  v5 = v17;
  if (!v17)
  {
    v6 = (int)v16;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * (int)v16 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v7 = memptr;
    if (!memptr)
    {
      v12 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v13 = std::bad_alloc::bad_alloc(v12);
      __cxa_throw(v13, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    LODWORD(v15) = v6;
    sub_239A2326C(85, 5, 1, a1, 5, v4, a2, 5, (__CLPK_doublereal *)memptr, v15, &v17);
    free(v7);
    v5 = v17;
  }
  v8 = v5 == 0;
  free(v4);
  return v8;
}

void sub_239458264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  free(v2);
  free(v1);
  _Unwind_Resume(a1);
}

void sub_239458280(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_239458294(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2394582A8(uint64_t a1, double *a2, uint64_t a3, float64x2_t *a4, float64x2_t a5, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10)
{
  double v13;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  double v36;
  double v37;
  std::locale v40;

  v13 = a5.f64[0];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 16))
  {
    if (*a2 <= a5.f64[0])
      v15 = "I";
    else
      v15 = "D";
    v16 = sub_239458500(MEMORY[0x24BEDB318], (uint64_t)v15, 1);
    sub_239458500(v16, (uint64_t)"[last error]->[new error][lambda][delta]  : [", 45);
    v17 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v17, (uint64_t)" -> ", 4);
    v18 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v18, (uint64_t)"][", 2);
    v19 = (_QWORD *)std::ostream::operator<<();
    sub_239458500(v19, (uint64_t)"][", 2);
    _Q2 = *(float64x2_t *)a3;
    _D4 = *(_QWORD *)(a3 + 8);
    __asm { FMLA            D3, D4, V2.D[1] }
    _Q2.f64[0] = *(float64_t *)(a3 + 24);
    __asm { FMLA            D3, D2, V1.D[1] }
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = sub_239458500(v28, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet(&v40, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
  }
  a5.f64[0] = *(float64_t *)(a1 + 40);
  a7.f64[0] = *(float64_t *)(a3 + 32);
  _Q4 = *(float64x2_t *)a3;
  _Q3 = *(float64x2_t *)(a3 + 16);
  a10.f64[0] = a4[2].f64[0];
  _D6 = vmlaq_n_f64(*a4, *(float64x2_t *)a3, *(double *)&a5).f64[1];
  __asm { FMLA            D16, D6, V4.D[1] }
  _Q4.f64[0] = vmlaq_n_f64(a4[16], _Q3, *(double *)&a5).f64[1];
  __asm { FMLA            D16, D4, V3.D[1] }
  v36 = (*a2 - v13) / vmlad_n_f64(_D16, a7.f64[0], vmlaq_f64(a10, a7, a5).f64[0]);
  if (v36 < 0.0)
  {
    __asm { FMOV            V3.2D, #2.0 }
    _Q3.f64[0] = *(float64_t *)(a1 + 40);
    *(float64x2_t *)(a1 + 40) = vmulq_n_f64(_Q3, *(double *)(a1 + 48));
  }
  else
  {
    v37 = -((v36 * 2.0 + -1.0) * (v36 * 2.0 + -1.0)) * (v36 * 2.0 + -1.0) + 1.0;
    if (v37 > 0.666666667)
      v37 = 0.666666667;
    *(double *)(a1 + 40) = a5.f64[0] * fmax(v37, 0.333333333);
    *(_QWORD *)(a1 + 48) = 0x4000000000000000;
    *a2 = v13;
  }
  return v36 >= 0.0;
}

void sub_2394584EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_239458500(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x23B83DD7C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_239458664(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x23B83DD88](v13);
  return a1;
}

void sub_239458608(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x23B83DD88](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2394585E8);
}

void sub_239458650(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_239458664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_23941A5AC();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_2394587EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float64x2_t sub_239458808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  int8x16_t v7;
  double v8;
  double v15;
  double v16;
  double v17;
  double cosval;
  double v19;
  __double2 v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __double2 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  __int128 v55;
  long double v56;
  float64x2_t v57;
  __double2 v58;
  float64x2_t v59;
  __double2 v60;
  float64x2_t result;
  int8x16_t v62;
  double v63;
  double v64;
  double v65;
  int8x16_t __x;
  __int128 __xa;
  float64x2_t __xb;
  double v69;
  long double v70;
  float64x2_t v71;
  double v72;
  float64x2_t v73;
  double v74;
  float64x2_t v75;
  double v76;
  __int128 v77;
  uint64_t v78;

  _Q3 = *(int8x16_t *)a2;
  v63 = *(double *)(a2 + 16);
  *(_QWORD *)&v64 = vextq_s8(_Q3, _Q3, 8uLL).u64[0];
  v6 = *(double *)(a3 + 16);
  v7 = *(int8x16_t *)a3;
  *(_QWORD *)&v8 = vextq_s8(v7, v7, 8uLL).u64[0];
  _D1 = *(_QWORD *)(a2 + 8);
  v62 = *(int8x16_t *)a2;
  __asm { FMLA            D0, D1, V3.D[1] }
  v15 = _D0 + v63 * v63;
  __x = *(int8x16_t *)a3;
  v69 = v6;
  v65 = v8;
  if (v15 >= 0.0000002635)
  {
    v19 = sqrt(v15);
    v20 = __sincos_stret(v19);
    v8 = v65;
    v7.i64[0] = __x.i64[0];
    v6 = v69;
    cosval = v20.__cosval;
    v17 = v20.__sinval / v19;
    v16 = 1.0 / v15 * (1.0 - v20.__cosval);
  }
  else
  {
    v16 = 0.5 - v15 * (v15 / -720.0 + 0.0416666667);
    v17 = 1.0 - v15 * (0.166666667 - v15 * (v15 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v15 * v16;
  }
  *(_QWORD *)&v21.f64[0] = v7.i64[0];
  v21.f64[1] = v8;
  v22 = vmulq_f64(v21, v21).f64[0] + v8 * v8 + v6 * v6;
  if (v22 >= 0.0000002635)
  {
    v26 = sqrt(v22);
    v27 = __sincos_stret(v26);
    v25 = v27.__cosval;
    v8 = v65;
    v7.i64[0] = __x.i64[0];
    v6 = v69;
    v24 = v27.__sinval / v26;
    v23 = 1.0 / v22 * (1.0 - v27.__cosval);
  }
  else
  {
    v23 = 0.5 - v22 * (v22 / -720.0 + 0.0416666667);
    v24 = 1.0 - v22 * (0.166666667 - v22 * (v22 / -5040.0 + 0.00833333333));
    v25 = 1.0 - v22 * v23;
  }
  v28 = v63 * (v64 * v16);
  v29 = v28 + *(double *)v62.i64 * v17;
  v30 = cosval + v63 * v16 * v63;
  v31 = v28 - *(double *)v62.i64 * v17;
  v32 = v63 * (*(double *)v62.i64 * v16);
  v33.f64[0] = v64 * v17 + v32;
  v34.f64[0] = cosval + *(double *)v62.i64 * v16 * *(double *)v62.i64;
  v35 = v64 * (*(double *)v62.i64 * v16);
  v34.f64[1] = v35 + v63 * v17;
  v36.f64[0] = v35 - v63 * v17;
  v36.f64[1] = cosval + v64 * v16 * v64;
  v37 = v32 - v64 * v17;
  v33.f64[1] = v31;
  v38 = *(double *)v7.i64 * v23;
  v39 = v8 * v23;
  v40 = v25 + *(double *)v7.i64 * v23 * *(double *)v7.i64;
  v41 = v25 + v8 * v23 * v8;
  v42 = v25 + v6 * v23 * v6;
  v43 = v8 * (*(double *)v7.i64 * v23);
  v44 = v6 * v38;
  v45 = v6 * v39;
  v46 = *(double *)v7.i64 * v24;
  v47 = v8 * v24;
  v48 = v6 * v24;
  v49 = v43 - v48;
  v50 = v47 + v44;
  v51 = v43 + v48;
  v52 = v45 - v46;
  v53 = v44 - v47;
  v54 = v45 + v46;
  v72 = v37 * v40 + v29 * v51 + v30 * v53;
  v71 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v34, v40), v36, v51), v33, v53);
  v74 = v37 * v49 + v29 * v41 + v30 * v54;
  v73 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v34, v49), v36, v41), v33, v54);
  v76 = v37 * v50 + v29 * v52 + v30 * v42;
  v75 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v34, v50), v36, v52), v33, v42);
  v78 = 0;
  v77 = 0uLL;
  sub_239458B60(&v71, (double *)&v77);
  v55 = v77;
  *(_QWORD *)(a3 + 16) = v78;
  *(_OWORD *)a3 = v55;
  __xa = *(_OWORD *)(a3 + 24);
  v70 = acos(*(long double *)(a3 + 40));
  v56 = atan2(*((long double *)&__xa + 1), *(long double *)&__xa);
  v57.f64[0] = v70;
  v57.f64[1] = v56;
  __xb = vaddq_f64(v57, *(float64x2_t *)(a2 + 24));
  v58 = __sincos_stret(__xb.f64[0]);
  v60 = __sincos_stret(__xb.f64[1]);
  v59.f64[0] = v60.__cosval;
  v59.f64[1] = v60.__sinval;
  result = vmulq_n_f64(v59, v58.__sinval);
  *(double *)(a3 + 40) = v58.__cosval;
  *(float64x2_t *)(a3 + 24) = result;
  return result;
}

void sub_239458B60(float64x2_t *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v15;
  long double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  float64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float64x2_t v33;

  v4 = (a1[2].f64[1] - a1[3].f64[1]) * 0.5;
  *a2 = v4;
  v5 = (a1[3].f64[0] - a1[1].f64[0]) * 0.5;
  a2[1] = v5;
  v6 = (a1->f64[1] - a1[1].f64[1]) * 0.5;
  a2[2] = v6;
  v7 = a1->f64[0];
  v8 = a1[2].f64[0];
  v9 = a1[4].f64[0];
  v10 = -1.0;
  v11 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  v12 = v5 * v5 + v4 * v4 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001)
      v13 = 0;
    if (v11 > 0.99 || v13)
    {
      v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
LABEL_12:
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
      a2[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      v15 = acos(v11) / sqrt(v12);
      goto LABEL_12;
    }
    v10 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  v16 = asin(sqrt(v12));
  v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  v18 = (v7 - v10) * v17;
  v19 = (v8 - v10) * v17;
  v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      v32 = sqrt(v20);
      if (v6 < 0.0)
        v32 = -v32;
      a2[2] = v32;
      v33.f64[0] = a1[1].f64[0];
      v33.f64[1] = a1[2].f64[1];
      *(float64x2_t *)a2 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(a1[3], v33), v25), 1.0 / v32);
    }
    else
    {
      v26 = sqrt(v19);
      if (v5 < 0.0)
        v26 = -v26;
      a2[1] = v26;
      v27 = 1.0 / v26;
      v28 = a1[3].f64[1] + a1[2].f64[1];
      *a2 = v27 * (v25 * (a1[1].f64[1] + a1->f64[1]));
      a2[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    v21 = v17 * 0.5;
    v22 = v21 * (a1[3].f64[0] + a1[1].f64[0]);
    if (v18 <= v20)
    {
      v29 = sqrt(v20);
      if (v6 < 0.0)
        v29 = -v29;
      a2[2] = v29;
      v30 = 1.0 / v29;
      v31 = v30 * (v21 * (a1[3].f64[1] + a1[2].f64[1]));
      *a2 = v30 * v22;
      a2[1] = v31;
    }
    else
    {
      v23 = sqrt(v18);
      if (v4 < 0.0)
        v23 = -v23;
      *a2 = v23;
      v24 = 1.0 / v23;
      a2[1] = v24 * (v21 * (a1[1].f64[1] + a1->f64[1]));
      a2[2] = v24 * v22;
    }
  }
}

uint64_t sub_239458E50(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int8x16_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t result;
  unint64_t v11;
  int8x8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int8x16_t *v21;
  uint64_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8x8_t v32;
  uint8x8_t v33;

  v3 = *(int8x16_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a2 + 8) - v4;
  v6 = v5 + 8 * (*(_QWORD *)a2 - *(_QWORD *)a1);
  if (*a3)
  {
    if ((_DWORD)v4)
    {
      if ((64 - v4) >= v6)
        v7 = v5 + 8 * (*(_QWORD *)a2 - *(_QWORD *)a1);
      else
        v7 = (64 - v4);
      v8 = v3->i64[0];
      v3 = (int8x16_t *)((char *)v3 + 8);
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v7)) & (-1 << v4) & v8));
      v9.i16[0] = vaddlv_u8(v9);
      result = v9.u32[0];
      v6 -= v7;
      v11 = v6 - 64;
      if (v6 >= 0x40)
        goto LABEL_7;
    }
    else
    {
      result = 0;
      v11 = v6 - 64;
      if (v6 >= 0x40)
      {
LABEL_7:
        if (v11 >= 0xC0)
        {
          v18 = (v11 >> 6) + 1;
          v12 = (int8x8_t *)v3 + (v18 & 0x7FFFFFFFFFFFFFCLL);
          v6 -= (v18 & 0x7FFFFFFFFFFFFFCLL) << 6;
          v19 = 0uLL;
          v20 = (int64x2_t)(unint64_t)result;
          v21 = v3 + 1;
          v22 = v18 & 0x7FFFFFFFFFFFFFCLL;
          do
          {
            v20 = (int64x2_t)vpadalq_u32((uint64x2_t)v20, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v21[-1]))));
            v19 = (int64x2_t)vpadalq_u32((uint64x2_t)v19, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v21))));
            v21 += 2;
            v22 -= 4;
          }
          while (v22);
          result = vaddvq_s64(vaddq_s64(v19, v20));
          if (v18 == (v18 & 0x7FFFFFFFFFFFFFCLL))
            goto LABEL_22;
        }
        else
        {
          v12 = (int8x8_t *)v3;
        }
        do
        {
          v23 = *v12++;
          v24 = (uint8x8_t)vcnt_s8(v23);
          v24.i16[0] = vaddlv_u8(v24);
          result += v24.u32[0];
          v6 -= 64;
        }
        while (v6 > 0x3F);
LABEL_22:
        if (!v6)
          return result;
        v25 = *(_QWORD *)v12 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
        goto LABEL_32;
      }
    }
    v12 = (int8x8_t *)v3;
    goto LABEL_22;
  }
  if ((_DWORD)v4)
  {
    if ((64 - v4) >= v6)
      v13 = v5 + 8 * (*(_QWORD *)a2 - *(_QWORD *)a1);
    else
      v13 = (64 - v4);
    v14 = v3->i64[0];
    v3 = (int8x16_t *)((char *)v3 + 8);
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v13)) & (-1 << v4) & ~v14));
    v15.i16[0] = vaddlv_u8(v15);
    result = v15.u32[0];
    v6 -= v13;
    v16 = v6 - 64;
    if (v6 >= 0x40)
      goto LABEL_14;
LABEL_25:
    v17 = (uint64_t *)v3;
    goto LABEL_30;
  }
  result = 0;
  v16 = v6 - 64;
  if (v6 < 0x40)
    goto LABEL_25;
LABEL_14:
  if (v16 >= 0xC0)
  {
    v26 = (v16 >> 6) + 1;
    v17 = &v3->i64[v26 & 0x7FFFFFFFFFFFFFCLL];
    v6 -= (v26 & 0x7FFFFFFFFFFFFFCLL) << 6;
    v27 = 0uLL;
    v28 = (int64x2_t)(unint64_t)result;
    v29 = v3 + 1;
    v30 = v26 & 0x7FFFFFFFFFFFFFCLL;
    do
    {
      v28 = (int64x2_t)vpadalq_u32((uint64x2_t)v28, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(v29[-1])))));
      v27 = (int64x2_t)vpadalq_u32((uint64x2_t)v27, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(vmvnq_s8(*v29)))));
      v29 += 2;
      v30 -= 4;
    }
    while (v30);
    result = vaddvq_s64(vaddq_s64(v27, v28));
    if (v26 == (v26 & 0x7FFFFFFFFFFFFFCLL))
      goto LABEL_30;
  }
  else
  {
    v17 = (uint64_t *)v3;
  }
  do
  {
    v31 = *v17++;
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)~v31);
    v32.i16[0] = vaddlv_u8(v32);
    result += v32.u32[0];
    v6 -= 64;
  }
  while (v6 > 0x3F);
LABEL_30:
  if (!v6)
    return result;
  v25 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v6) & ~*v17;
LABEL_32:
  v33 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
  v33.i16[0] = vaddlv_u8(v33);
  result += v33.u32[0];
  return result;
}

uint64_t sub_2394590C8()
{
  return 7;
}

uint64_t sub_2394590D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  long double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  long double v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  void *v25;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  double v41;
  long double v42;
  BOOL v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  void *__p;
  void *v54;
  uint64_t v55;
  void *__src;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  int v62;
  char v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v60 = v7;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v10 = v8;
  v59 = v8;
  v11 = *(double *)(a2 + 8);
  LODWORD(v12) = 1;
  if (v11 < 1.0 && v11 > 0.0)
  {
    *(double *)&v13 = log(1.0 - *(double *)a2);
    v14 = *(double *)&v13;
    LODWORD(v13) = *(_DWORD *)(a2 + 16);
    v15 = pow(v11, (double)v13);
    v12 = vcvtpd_u64_f64(v14 / log(1.0 - v15));
    if (v12 == -1)
      sub_239EBF034(v8, v9);
  }
  if (v7 < v10)
    sub_239EBF008(v8, v9);
  __src = 0;
  v57 = 0;
  v58 = 0;
  if (v7)
  {
    v16 = ((unint64_t)v7 - 1) >> 6;
    v17 = (char *)operator new(8 * (v16 + 1));
    v18 = v17;
    v57 = v7;
    v58 = v16 + 1;
    __src = v17;
    if (v7 >= 0x41)
      v19 = ((unint64_t)v7 - 1) >> 6;
    else
      v19 = 0;
    *(_QWORD *)&v17[8 * v19] = 0;
    v20 = v7 >> 6;
    v21 = 8 * v20;
    if (v7 >= 0x40)
      bzero(v17, 8 * v20);
    if ((v7 & 0x3F) != 0)
      *(_QWORD *)&v18[v21] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  if ((_DWORD)v12)
  {
    v22 = 0;
    v23 = -2147483647;
    while (1)
    {
      if (v59 > v60)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v60)
      {
        if ((double)v60 * 0.5 >= (double)v59)
          sub_239455384(a2 + 32, &v60, (int *)&v59, (int32x4_t **)&__p);
        else
          sub_2394551BC(a2 + 32, &v60, &v59, (int32x4_t **)&__p);
      }
      else
      {
        __p = 0;
        v54 = 0;
        v55 = 0;
      }
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a3 + 40))(a3, &__p))
        break;
      v24 = 1;
      v25 = __p;
      if (__p)
        goto LABEL_16;
LABEL_17:
      if (v12 - 1 == v22++ || !v24)
        goto LABEL_61;
    }
    v28 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 32))(a3, &__src);
    if (v28 <= v23)
    {
      v32 = v57;
    }
    else
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      v30 = *(_OWORD *)(v29 + 48);
      v68 = *(_OWORD *)(v29 + 32);
      v69 = v30;
      v70 = *(_QWORD *)(v29 + 64);
      v31 = *(_OWORD *)(v29 + 16);
      v66 = *(_OWORD *)v29;
      v67 = v31;
      v32 = v57;
      if (&__src != (void **)a4)
      {
        if (v57)
        {
          v33 = *(void **)a4;
          if (v57 <= *(_QWORD *)(a4 + 16) << 6)
          {
            v34 = v57 - 1;
          }
          else
          {
            if (v33)
            {
              operator delete(v33);
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              v32 = v57;
            }
            if ((v32 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v34 = v32 - 1;
            v35 = ((v32 - 1) >> 6) + 1;
            v33 = operator new(8 * v35);
            *(_QWORD *)a4 = v33;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = v35;
          }
          memmove(v33, __src, ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v32 = v57;
        }
        *(_QWORD *)(a4 + 8) = v32;
      }
      v23 = v28;
    }
    v52 = 1;
    v64 = (uint64_t)__src;
    v65 = 0;
    v61 = (char *)__src + 8 * (v32 >> 6);
    v62 = v32 & 0x3F;
    v36 = sub_239458E50((uint64_t)&v64, (uint64_t)&v61, &v52);
    v38 = v12;
    if (v36)
    {
      LODWORD(v37) = v60;
      v39 = (double)v36 / (double)v37;
      if (v39 >= 1.0)
      {
        if (v22)
          v44 = *(_QWORD *)(a2 + 24) > v22;
        else
          v44 = 1;
        v24 = v44;
        v25 = __p;
        if (!__p)
          goto LABEL_17;
LABEL_16:
        v54 = v25;
        operator delete(v25);
        goto LABEL_17;
      }
      v38 = 1;
      if (v39 > 0.0)
      {
        *(double *)&v40 = log(1.0 - *(double *)a2);
        v41 = *(double *)&v40 * 3.0;
        LODWORD(v40) = *(_DWORD *)(a2 + 16);
        v42 = pow(v39, (double)v40);
        v38 = vcvtpd_u64_f64(v41 / log(1.0 - v42));
        if (v38 == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
      }
    }
    v24 = v38 > v22 || *(_QWORD *)(a2 + 24) > v22;
    v25 = __p;
    if (!__p)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_61:
  v45 = v66;
  *(_OWORD *)(a3 + 24) = v67;
  v46 = v69;
  *(_OWORD *)(a3 + 40) = v68;
  *(_OWORD *)(a3 + 56) = v46;
  *(_QWORD *)(a3 + 72) = v70;
  *(_OWORD *)(a3 + 8) = v45;
  v47 = *(void **)a4;
  v48 = *(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6);
  v49 = *(_QWORD *)(a4 + 8) & 0x3FLL;
  v63 = 1;
  __p = v47;
  LODWORD(v54) = 0;
  v64 = v48;
  v65 = v49;
  v50 = sub_239458E50((uint64_t)&__p, (uint64_t)&v64, &v63);
  if (__src)
    operator delete(__src);
  return v50;
}

void sub_2394595C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (!a14)
    _Unwind_Resume(exception_object);
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_239459614(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_250ADBB28;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_239459690(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  const void *v16;
  int64_t v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  *(_QWORD *)a1 = &off_250ADBB28;
  *(_OWORD *)(a1 + 80) = 0u;
  v9 = (uint64_t *)(a1 + 80);
  v10 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  v12 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v13 = v11 - *(_QWORD *)a2;
  if (v11 != *(_QWORD *)a2)
  {
    if (v13 < 0)
      sub_2394189F8();
    v14 = (char *)operator new(v11 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 128) = v14;
    *(_QWORD *)(a1 + 136) = v14;
    *(_QWORD *)(a1 + 144) = &v14[16 * (v13 >> 4)];
    v15 = v13 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v14, v12, v15);
    *(_QWORD *)(a1 + 136) = &v14[v15];
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v16 = *(const void **)a3;
  v17 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v17)
  {
    if (v17 < 0)
      sub_2394189F8();
    v18 = (char *)operator new(v17);
    *(_QWORD *)(a1 + 152) = v18;
    *(_QWORD *)(a1 + 160) = v18;
    *(_QWORD *)(a1 + 168) = &v18[16 * (v17 >> 4)];
    v19 = v17 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v18, v16, v19);
    *(_QWORD *)(a1 + 160) = &v18[v19];
  }
  *(_QWORD *)(a1 + 192) = 0;
  *(double *)(a1 + 176) = a4 * a4;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_239441074(v9, 7uLL);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v21 = *(_QWORD *)(a1 + 104);
  v22 = (*(_QWORD *)(a1 + 112) - v21) >> 4;
  if (v20 <= v22)
  {
    if (v20 < v22)
      *(_QWORD *)(a1 + 112) = v21 + 16 * v20;
  }
  else
  {
    sub_239441074(v10, v20 - v22);
  }
  if (a5 <= 0.0 || a5 > 1.0)
  {
    sub_239A444D4((uint64_t)"unknown file", 27, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  v24 = *(_QWORD *)(a1 + 128);
  v23 = *(_QWORD *)(a1 + 136);
  if (10 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((v23 - v24) >> 4))
    v25 = 1;
  else
    v25 = vcvtad_u64_f64(1.0 / a5);
  *(_QWORD *)(a1 + 184) = v25;
  return a1;
}

void sub_239459890(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v8 = *v6;
  if (*v6)
  {
    v1[25] = v8;
    operator delete(v8);
    v9 = *v5;
    if (!*v5)
    {
LABEL_3:
      v10 = *v4;
      if (!*v4)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v9 = *v5;
    if (!*v5)
      goto LABEL_3;
  }
  v1[20] = v9;
  operator delete(v9);
  v10 = *v4;
  if (!*v4)
  {
LABEL_4:
    v11 = *v3;
    if (!*v3)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  v1[17] = v10;
  operator delete(v10);
  v11 = *v3;
  if (!*v3)
  {
LABEL_5:
    v12 = *v2;
    if (!*v2)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  v1[14] = v11;
  operator delete(v11);
  v12 = *v2;
  if (!*v2)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  v1[11] = v12;
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void sub_239459938(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = &off_250ADBB28;
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[19];
  if (v3)
  {
    a1[20] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[16];
  if (v4)
  {
    a1[17] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[10];
  if (v6)
  {
    a1[11] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394599C4(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4;
}

uint64_t sub_2394599D4(uint64_t a1, uint64_t a2)
{
  double v2;
  int8x16_t v3;
  double v4;
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  unint64_t v8;
  int8x16_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  double v32;
  float64x2_t v35;
  double v41;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int8x16_t v60;
  float64x2_t v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  unint64_t v65;
  unint64_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  double v71;
  double v74;
  double v78;
  int8x16_t v81;
  __int128 v82;
  __int128 v83;
  double v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  double *v94;
  double *v95;
  double v96;
  double v100;
  unint64_t v104;
  uint64_t v105;
  float64_t v107;
  float64_t v108;
  uint64_t v109;
  float64_t v110;
  double v111;
  float64_t v112;
  void *__src;
  unint64_t v114;
  uint64_t v115;

  v13 = *(_QWORD *)(a1 + 184);
  if (v13 == 1)
  {
    __src = 0;
    v114 = 0;
    v115 = 0;
    v14 = *(_QWORD *)(a1 + 192);
    v15 = *(_QWORD *)(a1 + 200);
    if (v14 != v15)
    {
      v16 = 0;
      while (1)
      {
        v22 = *(double *)(a1 + 176);
        v23 = *(_QWORD *)(a1 + 128);
        v24 = *(_QWORD *)(a1 + 136);
        v25 = (v24 - v23) >> 4;
        sub_23941C5D8((uint64_t)&__src, v25, 0);
        if (v24 != v23)
          break;
        v27 = 0;
        if ((int)v16 < 0)
          goto LABEL_20;
LABEL_8:
        v14 += 72;
        if (v14 == v15)
        {
          if (__src)
            operator delete(__src);
          return v16;
        }
      }
      v26 = 0;
      v27 = 0;
      v28 = __src;
      if (v25 <= 1)
        v29 = 1;
      else
        v29 = v25;
      v30 = (double *)(*(_QWORD *)(a1 + 152) + 8);
      v31 = (double *)(*(_QWORD *)(a1 + 128) + 8);
      do
      {
        while (1)
        {
          v32 = *(v31 - 1);
          _D3 = *v30;
          _Q4.f64[0] = *(float64_t *)(v14 + 16);
          v35 = *(float64x2_t *)(v14 + 24);
          _Q17 = vaddq_f64(*(float64x2_t *)(v14 + 48), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v14, v32), v35, *v31));
          _Q4.f64[1] = *(float64_t *)(v14 + 40);
          __asm { FMLA            D2, D3, V17.D[1] }
          v41 = *(double *)(v14 + 64) + _Q4.f64[0] * v32 + _Q4.f64[1] * *v31 + _D2;
          _D3 = _Q17.f64[1];
          __asm { FMLA            D2, D3, V17.D[1] }
          _Q4.f64[0] = vaddq_f64(_Q4, vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v14, *(int64x2_t *)&v35), *(v30 - 8)), (float64x2_t)vzip2q_s64(*(int64x2_t *)v14, *(int64x2_t *)&v35), *v30)).f64[1];
          __asm { FMLA            D3, D4, V1.D[1] }
          v45 = v26 >> 6;
          v46 = 1 << v26;
          if (v41 * v41 / (_D2 + _D3) < v22)
            break;
          v28[v45] &= ~v46;
          ++v26;
          v30 += 2;
          v31 += 2;
          if (v29 == v26)
            goto LABEL_17;
        }
        v27 = (v27 + 1);
        v28[v45] |= v46;
        ++v26;
        v30 += 2;
        v31 += 2;
      }
      while (v29 != v26);
LABEL_17:
      if ((int)v27 <= (int)v16)
        goto LABEL_8;
LABEL_20:
      if (&__src != (void **)a2)
      {
        v18 = v114;
        if (v114)
        {
          v47 = *(_QWORD **)a2;
          if (v114 <= *(_QWORD *)(a2 + 16) << 6)
          {
            v17 = v114 - 1;
          }
          else
          {
            if (v47)
            {
              operator delete(v47);
              *(_QWORD *)a2 = 0;
              *(_QWORD *)(a2 + 8) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              v18 = v114;
            }
            if ((v18 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v17 = v18 - 1;
            v48 = ((v18 - 1) >> 6) + 1;
            v47 = operator new(8 * v48);
            *(_QWORD *)a2 = v47;
            *(_QWORD *)(a2 + 8) = 0;
            *(_QWORD *)(a2 + 16) = v48;
          }
          memmove(v47, __src, ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v18 = v114;
        }
        *(_QWORD *)(a2 + 8) = v18;
      }
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v14;
      v19 = *(_OWORD *)(v14 + 16);
      v20 = *(_OWORD *)(v14 + 32);
      v21 = *(_OWORD *)(v14 + 48);
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(v14 + 64);
      *(_OWORD *)(a1 + 40) = v20;
      *(_OWORD *)(a1 + 56) = v21;
      *(_OWORD *)(a1 + 24) = v19;
      v16 = v27;
      goto LABEL_8;
    }
    return 0;
  }
  v50 = *(_QWORD *)(a1 + 128);
  v49 = *(_QWORD *)(a1 + 136);
  v51 = (v49 - v50) >> 4;
  v52 = *(_QWORD *)(a1 + 192);
  v53 = *(_QWORD *)(a1 + 200);
  if (v52 != v53 && v49 != v50)
  {
    v55 = 0;
    v56 = *(_QWORD *)(a1 + 152);
    do
    {
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60.i64[0] = *(_QWORD *)(v52 + 16);
      v61 = *(float64x2_t *)v52;
      v62 = *(float64x2_t *)(v52 + 24);
      v63 = *(double *)(v52 + 64);
      v64 = *(float64x2_t *)(v52 + 48);
      v65 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
      v66 = vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL).u64[0];
      v67 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v52, (int64x2_t)v62);
      v68 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v52, (int64x2_t)v62);
      do
      {
        v70 = *(double *)(v50 + v57);
        v71 = *(double *)(v50 + v57 + 8);
        _D24 = *(double *)(v56 + v57 + 8);
        _Q25 = vaddq_f64(v64, vmlaq_n_f64(vmulq_n_f64(v61, v70), v62, v71));
        v74 = *(double *)v60.i64 * v70 + *(double *)(v52 + 40) * v71;
        v69.f64[1] = *(float64_t *)(v52 + 40);
        v69.f64[0] = *(float64_t *)(v52 + 16);
        _Q22 = vaddq_f64(v69, vmlaq_n_f64(vmulq_n_f64(v67, *(double *)(v56 + v57)), v68, _D24));
        __asm { FMLA            D23, D24, V25.D[1] }
        _D26 = _Q25.f64[1];
        v78 = v63 + v74 + _D23;
        __asm { FMLA            D24, D26, V25.D[1] }
        _Q25.f64[0] = _Q22.f64[1];
        __asm { FMLA            D23, D25, V22.D[1] }
        if (v78 * v78 / (_D24 + _D23) < *(double *)(a1 + 176))
          ++v59;
        v58 += v13;
        v57 += 16 * v13;
      }
      while (v58 < v51);
      LODWORD(v67.f64[0]) = v55;
      LODWORD(v68.f64[0]) = v59;
      v81 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32((int32x4_t)v68, (int32x4_t)v67), 0);
      v9.i64[1] = v5;
      *(_QWORD *)&v64.f64[1] = v65;
      v9 = vbslq_s8(v81, (int8x16_t)v64, v9);
      *(double *)&v3.i64[1] = v4;
      v7.i64[1] = v10;
      v3 = vbslq_s8(v81, *(int8x16_t *)(v52 + 32), v3);
      v60.i64[1] = *(_QWORD *)(v52 + 24);
      v7 = vbslq_s8(v81, v60, v7);
      v6.i64[1] = v8;
      *(_QWORD *)&v61.f64[1] = v66;
      v6 = vbslq_s8(v81, (int8x16_t)v61, v6);
      v8 = vextq_s8(v6, v6, 8uLL).u64[0];
      v10 = vextq_s8(v7, v7, 8uLL).u64[0];
      *(_QWORD *)&v4 = vextq_s8(v3, v3, 8uLL).u64[0];
      v5 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = COERCE_DOUBLE(vbsl_s8(*(int8x8_t *)v81.i8, *(int8x8_t *)&v63, *(int8x8_t *)&v2));
      if (v59 > v55)
        v55 = v59;
      v52 += 72;
    }
    while (v52 != v53);
  }
  v107 = *(double *)v3.i64;
  v108 = *(double *)&v10;
  v109 = v9.i64[0];
  v110 = *(double *)&v8;
  v111 = *(double *)v7.i64;
  v112 = *(double *)v6.i64;
  *(_QWORD *)&v82 = v6.i64[0];
  *((_QWORD *)&v82 + 1) = v8;
  *(_QWORD *)&v83 = v7.i64[0];
  *((_QWORD *)&v83 + 1) = v10;
  *(_OWORD *)(a1 + 8) = v82;
  *(_OWORD *)(a1 + 24) = v83;
  *(_QWORD *)&v82 = v3.i64[0];
  *((double *)&v82 + 1) = v4;
  *(_OWORD *)(a1 + 40) = v82;
  *(double *)(a1 + 72) = v2;
  *(_QWORD *)&v82 = v9.i64[0];
  *((_QWORD *)&v82 + 1) = v5;
  *(_OWORD *)(a1 + 56) = v82;
  v84 = *(double *)(a1 + 176);
  sub_23941C5D8(a2, (v49 - v50) >> 4, 0);
  if (v49 == v50)
    return 0;
  v85 = 0;
  v16 = 0;
  v86 = *(_QWORD **)a2;
  if (v51 <= 1)
    v87 = 1;
  else
    v87 = v51;
  v90.f64[0] = v112;
  v88.f64[0] = v112;
  *(_QWORD *)&v89.f64[0] = v109;
  v92.f64[0] = v110;
  v88.f64[1] = v110;
  *(_QWORD *)&v89.f64[1] = v5;
  v91.f64[0] = v108;
  v90.f64[1] = v108;
  v91.f64[1] = v107;
  v92.f64[1] = v107;
  v93.f64[0] = v111;
  v93.f64[1] = v4;
  v94 = (double *)(*(_QWORD *)(a1 + 152) + 8);
  v95 = (double *)(*(_QWORD *)(a1 + 128) + 8);
  do
  {
    while (1)
    {
      v96 = *(v95 - 1);
      _D5 = *v94;
      _Q6 = vaddq_f64(v89, vmlaq_n_f64(vmulq_n_f64(v88, v96), v91, *v95));
      __asm { FMLA            D4, D5, V6.D[1] }
      v100 = v2 + v111 * v96 + v4 * *v95 + _D4;
      _D5 = _Q6.f64[1];
      __asm { FMLA            D4, D5, V6.D[1] }
      _Q6.f64[0] = vaddq_f64(v93, vmlaq_n_f64(vmulq_n_f64(v90, *(v94 - 8)), v92, *v94)).f64[1];
      __asm { FMLA            D5, D6, V3.D[1] }
      v104 = v85 >> 6;
      v105 = 1 << v85;
      if (v100 * v100 / (_D4 + _D5) >= v84)
        break;
      v16 = (v16 + 1);
      v86[v104] |= v105;
      ++v85;
      v94 += 2;
      v95 += 2;
      if (v87 == v85)
        return v16;
    }
    v86[v104] &= ~v105;
    ++v85;
    v94 += 2;
    v95 += 2;
  }
  while (v87 != v85);
  return v16;
}

void sub_239459F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_239459F4C(void **a1, unsigned int **a2)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  double *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  double *v25;
  double v26;
  double v27;
  int v28;
  size_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  _OWORD *v52;
  void **v53;
  void *v54;
  float64x2_t v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  float64x2_t *v60;
  double v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  unint64_t v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  BOOL v100;
  BOOL v102;
  BOOL v104;
  BOOL v106;
  BOOL v108;
  BOOL v110;
  BOOL v112;
  BOOL v114;
  BOOL v116;
  BOOL v118;
  BOOL v120;
  BOOL v122;
  BOOL v124;
  BOOL v125;
  char v126;
  BOOL v128;
  BOOL v130;
  BOOL v132;
  BOOL v134;
  BOOL v136;
  BOOL v138;
  BOOL v140;
  BOOL v142;
  BOOL v144;
  BOOL v146;
  BOOL v148;
  BOOL v150;
  BOOL v152;
  BOOL v154;
  BOOL v156;
  BOOL v158;
  BOOL v160;
  BOOL v162;
  BOOL v164;
  BOOL v166;
  BOOL v168;
  BOOL v170;
  BOOL v172;
  BOOL v174;
  BOOL v176;
  BOOL v178;
  BOOL v180;
  BOOL v182;
  BOOL v184;
  BOOL v186;
  BOOL v188;
  BOOL v190;
  BOOL v192;
  BOOL v194;
  BOOL v196;
  BOOL v198;
  BOOL v200;
  BOOL v202;
  BOOL v204;
  BOOL v206;
  BOOL v208;
  BOOL v210;
  BOOL v212;
  BOOL v214;
  BOOL v216;
  BOOL v218;
  BOOL v220;
  BOOL v222;
  BOOL v224;
  BOOL v226;
  BOOL v228;
  BOOL v230;
  BOOL v232;
  BOOL v234;
  BOOL v236;
  BOOL v238;
  BOOL v240;
  BOOL v241;
  unsigned int v242;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unint64_t v254;
  float64x2_t *v255;
  const double *v256;
  const double *v257;
  std::bad_alloc *exception;
  std::bad_alloc *v260;
  BOOL v261;
  BOOL v262;
  BOOL v263;
  BOOL v264;
  BOOL v265;
  BOOL v266;
  BOOL v267;
  BOOL v268;
  BOOL v269;
  BOOL v270;
  BOOL v271;
  BOOL v272;
  BOOL v273;
  BOOL v274;
  BOOL v275;
  BOOL v276;
  BOOL v277;
  BOOL v278;
  BOOL v279;
  BOOL v280;
  BOOL v281;
  BOOL v282;
  BOOL v283;
  BOOL v284;
  BOOL v285;
  BOOL v286;
  BOOL v287;
  BOOL v288;
  BOOL v289;
  BOOL v290;
  BOOL v291;
  BOOL v292;
  BOOL v293;
  BOOL v294;
  BOOL v295;
  BOOL v296;
  BOOL v297;
  BOOL v298;
  BOOL v299;
  BOOL v300;
  BOOL v301;
  char v302;
  BOOL v303;
  BOOL v304;
  BOOL v305;
  BOOL v306;
  BOOL v307;
  BOOL v308;
  BOOL v309;
  BOOL v310;
  BOOL v311;
  BOOL v312;
  BOOL v313;
  BOOL v314;
  BOOL v315;
  char *v316;
  BOOL v317;
  char *v318;
  BOOL v319;
  BOOL v320;
  char *v321;
  char *v322;
  char *v323;
  char *v324;
  BOOL v325;
  double v326;
  char *v327;
  double v328;
  char *v329;
  double v330;
  unint64_t v331;
  double v332;
  char *v333;
  double v334;
  unint64_t v335;
  double v336;
  char *v337;
  double v338;
  char *v339;
  double v340;
  unint64_t v341;
  double v342;
  unint64_t v343;
  double v344;
  unint64_t v345;
  int v346;
  void *__p;
  _OWORD *v348;
  _OWORD *v349;
  void *v350;
  void *__src;
  int v352;
  int v353;
  void *v354;
  char v355;
  void *v356[2];
  unsigned int v357;
  int v358;
  void *memptr[6];
  float64x2x2_t v360;
  float64x2x2_t v361;
  float64x2x2_t v362;
  float64x2x2_t v363;
  float64x2x2_t v364;
  float64x2x2_t v365;

  memptr[4] = *(void **)MEMORY[0x24BDAC8D0];
  v4 = (*((uint64_t (**)(void **))*a1 + 3))(a1);
  v6 = *a2;
  v5 = a2[1];
  if (v4 <= v5 - *a2)
  {
    v8 = v4;
    if (v6 != v5)
    {
      v9 = 0;
      do
      {
        *(_OWORD *)((char *)a1[10] + v9) = *((_OWORD *)a1[16] + *v6);
        v10 = *v6++;
        *(_OWORD *)((char *)a1[13] + v9) = *((_OWORD *)a1[19] + v10);
        v9 += 16;
      }
      while (v6 != v5);
    }
    v356[0] = 0;
    v356[1] = 0;
    v357 = v4;
    v358 = 9;
    sub_23945215C((uint64_t)v356, 9 * v4);
    if (v8)
    {
      v11 = (unint64_t)a1[13];
      v12 = (unint64_t)a1[10];
      v13 = (double *)v356[0];
      v14 = v357;
      v15 = 2 * v357;
      v16 = 3 * v357;
      v17 = 4 * v357;
      v18 = 5 * v357;
      v19 = 6 * v357;
      v20 = 8 * v357;
      v21 = 7 * v357;
      if (v8 < 0x3E)
      {
        v22 = 0;
        goto LABEL_9;
      }
      v22 = 0;
      v66 = v8 - 1;
      v67 = __CFADD__(v357, v8 - 1);
      v68 = __CFADD__(v15, (_DWORD)v66);
      v69 = __CFADD__(v16, (_DWORD)v66);
      v70 = __CFADD__(v17, (_DWORD)v66);
      v71 = __CFADD__(v18, (_DWORD)v66);
      v72 = __CFADD__(v19, (_DWORD)v66);
      v73 = __CFADD__(v21, (_DWORD)v66);
      v74 = __CFADD__(v20, (_DWORD)v66);
      v75 = 16 * v66;
      v76 = v11 + 8;
      if (v11 + 8 + 16 * v66 < v11 + 8
        || v12 + 8 + v75 < v12 + 8
        || v11 + v75 < v11
        || v74
        || v73
        || v72
        || v71
        || v70
        || v69
        || v67
        || v68
        || HIDWORD(v66)
        || v12 + v75 < v12
        || v66 >> 60)
      {
        goto LABEL_9;
      }
      v22 = 0;
      v77 = (char *)v356[0] + 8 * v8;
      v321 = &v77[8 * v357];
      v322 = (char *)v356[0] + 8 * v357;
      v78 = 16 * v357;
      v79 = (unint64_t)a1[13];
      v80 = (char *)v356[0] + v78;
      v81 = &v77[v78];
      v82 = 24 * v357;
      v341 = v12 + 8;
      v83 = (char *)v356[0] + v82;
      v345 = (unint64_t)a1[10];
      v84 = &v77[v82];
      v85 = 32 * v357;
      v86 = (char *)v356[0] + v85;
      v87 = &v77[v85];
      v88 = 40 * v357;
      v89 = (char *)v356[0] + v88;
      v316 = (char *)v356[0] + v88;
      v90 = &v77[v88];
      v91 = 48 * v357;
      v335 = v76;
      v92 = (char *)v356[0] + v91;
      v93 = &v77[v91];
      v94 = 56 * v357;
      v324 = v93;
      v327 = (char *)v356[0] + v94;
      v333 = &v77[v94];
      v95 = 64 * v357;
      v323 = (char *)v356[0] + v95;
      v96 = &v77[v95];
      v97 = 16 * v8 - 8;
      v98 = (char *)(v79 + v97);
      v329 = v96;
      v331 = v345 + v97;
      v337 = (char *)(v345 + 16 * v8);
      v339 = (char *)(v79 + 16 * v8);
      v343 = v79;
      v100 = v356[0] < v81 && v80 < v77;
      v315 = v100;
      v102 = v356[0] < v84 && v83 < v77;
      v314 = v102;
      v104 = v356[0] < v87 && v86 < v77;
      v313 = v104;
      v106 = v356[0] < v90 && v89 < v77;
      v312 = v106;
      v108 = v356[0] < v324 && v92 < v77;
      v311 = v108;
      v110 = v356[0] < v333 && (char *)v356[0] + v94 < v77;
      v310 = v110;
      v112 = v356[0] < v96 && v323 < v77;
      v114 = v356[0] < v98 && v79 < (unint64_t)v77;
      v308 = v114;
      v309 = v112;
      v116 = v356[0] < (void *)(v345 + v97) && v345 < (unint64_t)v77;
      v118 = v356[0] < v337 && v341 < (unint64_t)v77;
      v306 = v118;
      v307 = v116;
      v120 = v356[0] < v339 && v335 < (unint64_t)v77;
      v122 = v322 < v81 && v80 < v321;
      v304 = v122;
      v305 = v120;
      v124 = v322 < v84 && v83 < v321;
      v125 = v322 >= v87 || v86 >= v321;
      v318 = v86;
      v126 = !v125;
      v302 = v126;
      v303 = v124;
      v128 = v322 < v90 && v316 < v321;
      v301 = v128;
      v130 = v322 < v324 && v92 < v321;
      v132 = v322 < v333 && v327 < v321;
      v299 = v132;
      v300 = v130;
      v134 = v322 < v329 && v323 < v321;
      v136 = v322 < v98 && v343 < (unint64_t)v321;
      v297 = v136;
      v298 = v134;
      v138 = (unint64_t)v322 < v331 && v345 < (unint64_t)v321;
      v140 = v322 < v337 && v341 < (unint64_t)v321;
      v295 = v140;
      v296 = v138;
      v142 = v322 < v339 && v335 < (unint64_t)v321;
      v144 = v80 < v84 && v83 < v81;
      v293 = v144;
      v294 = v142;
      v146 = v80 < v87 && v86 < v81;
      v148 = v80 < v90 && v316 < v81;
      v291 = v148;
      v292 = v146;
      v150 = v80 < v324 && v92 < v81;
      v152 = v80 < v333 && v327 < v81;
      v289 = v152;
      v290 = v150;
      v154 = v80 < v329 && v323 < v81;
      v156 = v80 < v98 && v343 < (unint64_t)v81;
      v287 = v156;
      v288 = v154;
      v158 = (unint64_t)v80 < v331 && v345 < (unint64_t)v81;
      v160 = v80 < v337 && v341 < (unint64_t)v81;
      v285 = v160;
      v286 = v158;
      v162 = v80 < v339 && v335 < (unint64_t)v81;
      v164 = v83 < v87 && v86 < v84;
      v283 = v164;
      v284 = v162;
      v166 = v83 < v90 && v316 < v84;
      v168 = v83 < v324 && v92 < v84;
      v281 = v168;
      v282 = v166;
      v170 = v83 < v333 && v327 < v84;
      v280 = v170;
      v172 = v83 < v329 && v323 < v84;
      v174 = v83 < v98 && v343 < (unint64_t)v84;
      v278 = v174;
      v279 = v172;
      v176 = (unint64_t)v83 < v331 && v345 < (unint64_t)v84;
      v178 = v83 < v337 && v341 < (unint64_t)v84;
      v277 = v178;
      v180 = v83 < v339 && v335 < (unint64_t)v84;
      v182 = v318 < v90 && v316 < v87;
      v276 = v182;
      v184 = v318 < v324 && v92 < v87;
      v186 = v318 < v333 && v327 < v87;
      v274 = v186;
      v275 = v184;
      v188 = v318 < v329 && v323 < v87;
      v190 = v318 < v98 && v343 < (unint64_t)v87;
      v272 = v190;
      v273 = v188;
      v192 = (unint64_t)v318 < v331 && v345 < (unint64_t)v87;
      v194 = v318 < v337 && v341 < (unint64_t)v87;
      v270 = v194;
      v271 = v192;
      v196 = v318 < v339 && v335 < (unint64_t)v87;
      v319 = v196;
      v198 = v316 < v324 && v92 < v90;
      v269 = v198;
      v200 = v316 < v333 && v327 < v90;
      v202 = v316 < v329 && v323 < v90;
      v267 = v202;
      v268 = v200;
      v204 = v316 < v98 && v343 < (unint64_t)v90;
      v206 = (unint64_t)v316 < v331 && v345 < (unint64_t)v90;
      v265 = v206;
      v266 = v204;
      v208 = v316 < v337 && v341 < (unint64_t)v90;
      v210 = v316 < v339 && v335 < (unint64_t)v90;
      v320 = v210;
      v212 = v92 < v333 && v327 < v324;
      v317 = v212;
      v214 = v92 < v329 && v323 < v324;
      v264 = v214;
      v216 = v92 < v98 && v343 < (unint64_t)v324;
      v263 = v216;
      v218 = (unint64_t)v92 < v331 && v345 < (unint64_t)v324;
      v262 = v218;
      v220 = v92 < v337 && v341 < (unint64_t)v324;
      v261 = v220;
      v222 = v92 < v339 && v335 < (unint64_t)v324;
      v325 = v222;
      v224 = v327 < v329 && v323 < v333;
      v226 = v327 < v98 && v343 < (unint64_t)v333;
      v228 = (unint64_t)v327 < v331 && v345 < (unint64_t)v333;
      v230 = v327 < v337 && v341 < (unint64_t)v333;
      v232 = v327 < v339 && v335 < (unint64_t)v333;
      v234 = v323 < v98 && v343 < (unint64_t)v329;
      v12 = (unint64_t)a1[10];
      v236 = (unint64_t)v323 < v331 && v345 < (unint64_t)v329;
      v238 = v323 < v337 && v341 < (unint64_t)v329;
      v240 = v323 < v339 && v335 < (unint64_t)v329;
      v241 = v322 >= v77 || v356[0] >= v321;
      if (!v241
        || v315
        || v314
        || v313
        || v312
        || v311
        || v310
        || v309
        || v308
        || v307
        || v306
        || v305
        || v304
        || v303
        || (v302 & 1) != 0
        || v301
        || v300
        || v299
        || v298
        || v297
        || v296
        || v295
        || v294
        || v293
        || v292
        || v291
        || v290
        || v289
        || v288
        || v287
        || v286
        || v285
        || v284
        || v283
        || v282
        || v281
        || v280
        || v279
        || v278
        || v176
        || v277
        || v180
        || v276
        || v275
        || v274
        || v273
        || v272
        || v271
        || v270
        || v319
        || v269
        || v268
        || v267
        || v266
        || v265
        || v208
        || v320
        || v317
        || v264
        || v263
        || v262
        || v261
        || v325
        || v224
        || v226
        || v228
        || v230
        || v232
        || v234
        || v236
        || v238)
      {
        v11 = (unint64_t)a1[13];
LABEL_9:
        v23 = (16 * v22) | 8;
        v24 = (double *)(v11 + v23);
        v25 = (double *)(v12 + v23);
        do
        {
          v13[v22] = *(v24 - 1) * *(v25 - 1);
          v13[v14 + v22] = *(v24 - 1) * *v25;
          v13[(v15 + v22)] = *(v24 - 1);
          v13[(v16 + v22)] = *v24 * *(v25 - 1);
          v13[(v17 + v22)] = *v24 * *v25;
          v26 = *v24;
          v24 += 2;
          v13[(v18 + v22)] = v26;
          v13[(v19 + v22)] = *(v25 - 1);
          v27 = *v25;
          v25 += 2;
          v13[(v21 + v22)] = v27;
          v13[(v20 + v22++)] = 1.0;
        }
        while (v8 != v22);
        goto LABEL_11;
      }
      v11 = (unint64_t)a1[13];
      if (v240)
        goto LABEL_9;
      v22 = v8 & 0xFFFFFFFFFFFFFFFELL;
      v242 = 8 * v357;
      __asm { FMOV            V0.2D, #1.0 }
      v247 = 7 * v357;
      v248 = 6 * v357;
      v249 = 5 * v357;
      v250 = 4 * v357;
      v251 = 3 * v357;
      v252 = 2 * v357;
      v253 = v357;
      v254 = v8 & 0xFFFFFFFFFFFFFFFELL;
      v255 = (float64x2_t *)v356[0];
      v256 = (const double *)a1[10];
      v257 = (const double *)a1[13];
      do
      {
        v360 = vld2q_f64(v257);
        v362 = vld2q_f64(v256);
        *v255++ = vmulq_f64(v360.val[0], v362.val[0]);
        v364 = vld2q_f64(v257);
        *(float64x2_t *)&v13[v253] = vmulq_f64(v364.val[0], v362.val[1]);
        v363 = vld2q_f64(v257);
        v257 += 4;
        *(float64x2_t *)&v13[v252] = v363.val[0];
        v365 = vld2q_f64(v256);
        *(float64x2_t *)&v13[v251] = vmulq_f64(v360.val[1], v365.val[0]);
        *(float64x2_t *)&v13[v250] = vmulq_f64(v364.val[1], v365.val[1]);
        *(float64x2_t *)&v13[v249] = v363.val[1];
        v361 = vld2q_f64(v256);
        v256 += 4;
        *(float64x2_t *)&v13[v248] = v361.val[0];
        *(float64x2_t *)&v13[v247] = v361.val[1];
        *(_OWORD *)&v13[v242] = _Q0;
        v253 += 2;
        v252 += 2;
        v251 += 2;
        v250 += 2;
        v249 += 2;
        v248 += 2;
        v247 += 2;
        v242 += 2;
        v254 -= 2;
      }
      while (v254);
      if (v8 != v22)
        goto LABEL_9;
    }
LABEL_11:
    sub_23945B548((uint64_t)&v350, (uint64_t)v356, 3, 0);
    v7 = v355 != 0;
    if (!v355)
    {
LABEL_568:
      free(v354);
      free(__src);
      free(v350);
      free(v356[0]);
      return v7;
    }
    v28 = v353 * v352;
    v29 = 8 * (v353 * v352);
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (v29 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v30 = (double *)memptr[0];
    if (!memptr[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v260 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v260, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if (v28)
      memcpy(memptr[0], __src, v29);
    v31 = v30[v352 + 8];
    v32 = v30[v352 + 7];
    v33 = v30[2 * v352 + 8];
    v34 = v30[2 * v352 + 7];
    v35 = v30[3 * v352 + 8];
    v36 = v30[3 * v352 + 7];
    v37 = v30[4 * v352 + 8];
    v38 = v30[4 * v352 + 7];
    v39 = v30[5 * v352 + 8];
    v40 = v30[5 * v352 + 7];
    v41 = v30[6 * v352 + 8];
    v42 = v30[6 * v352 + 7];
    v43 = v30[7 * v352 + 8];
    v44 = v30[7 * v352 + 7];
    v45 = v30[7];
    v46 = v30[8];
    v47 = v30[8 * v352 + 8];
    v48 = v30[(8 * v352) | 7u];
    v49 = -(v46 * v39);
    v50 = -(v31 * v35);
    v51 = -(v33 * v37);
    *(double *)memptr = v31 * v39 * v41 + v46 * v37 * v47 + v33 * v35 * v43 + v49 * v43 + v50 * v47 + v51 * v41;
    *(double *)&memptr[1] = v38 * (v46 * v47)
                          + v46 * v37 * v48
                          + v31 * v39 * v42
                          + v31 * v41 * v40
                          + v33 * v35 * v44
                          + v33 * v43 * v36
                          + v35 * v43 * v34
                          + v37 * v47 * v45
                          + v39 * v41 * v32
                          + v49 * v44
                          + -(v46 * v43) * v40
                          + v50 * v48
                          + -(v31 * v47) * v36
                          + v51 * v42
                          + -(v33 * v41) * v38
                          + -(v35 * v47) * v32
                          + -(v37 * v41) * v34
                          + -(v39 * v43) * v45;
    v326 = v46;
    v328 = v39;
    v344 = v31;
    v340 = v33;
    v336 = v35;
    v332 = v37;
    v334 = v36;
    v342 = v32;
    v338 = v34;
    v330 = v38;
    *(double *)&memptr[2] = v31 * v40 * v42
                          + v46 * v38 * v48
                          + v33 * v36 * v44
                          + v34 * v35 * v44
                          + v45 * v37 * v48
                          + v32 * v39 * v42
                          + v32 * v41 * v40
                          + v34 * v43 * v36
                          + v45 * v47 * v38
                          + -(v46 * v40) * v44
                          + -(v31 * v36) * v48
                          + -(v33 * v38) * v42
                          + -(v35 * v32) * v48
                          + -(v37 * v34) * v42
                          + -(v39 * v45) * v44
                          + -(v41 * v34) * v38
                          + -(v43 * v45) * v40
                          + -(v47 * v32) * v36;
    *(double *)&memptr[3] = v32 * v40 * v42
                          + v45 * v38 * v48
                          + v34 * v36 * v44
                          + -(v45 * v40) * v44
                          + -(v32 * v36) * v48
                          + -(v34 * v38) * v42;
    v52 = operator new(0x30uLL);
    v348 = v52 + 3;
    v349 = v52 + 3;
    *v52 = 0u;
    v52[1] = 0u;
    v52[2] = 0u;
    __p = v52;
    v346 = 0;
    sub_23945AF84((uint64_t)memptr, (double **)&__p, (unsigned int *)&v346);
    v54 = a1[24];
    v53 = a1 + 24;
    v53[1] = v54;
    if (v346)
    {
      sub_239454B1C(v53, v346);
      v56 = __p;
      if (v346 >= 1)
      {
        v57 = 0;
        v58 = 72 * v346;
        v59 = (double *)__p;
        do
        {
          v60 = (float64x2_t *)((char *)*v53 + v57);
          v60->f64[0] = v45 + *v59 * v326;
          v60[1].f64[1] = v342 + *v59 * v344;
          v60[3].f64[0] = v338 + *v59 * v340;
          v60->f64[1] = v334 + *v59 * v336;
          v60[2].f64[0] = v330 + *v59 * v332;
          v60[3].f64[1] = v40 + *v59 * v328;
          v60[1].f64[0] = v42 + *v59 * v41;
          v60[2].f64[1] = v44 + *v59 * v43;
          v61 = *v59;
          v59 += 2;
          v55.f64[0] = v48 + v61 * v47;
          v60[4].f64[0] = v55.f64[0];
          v62 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v55.f64[0], 0);
          v55 = vdivq_f64(v55, v55);
          v63 = vdivq_f64(v60[3], v62);
          v64 = vdivq_f64(v60[2], v62);
          v65 = vdivq_f64(v60[1], v62);
          *v60 = vdivq_f64(*v60, v62);
          v60[1] = v65;
          v60[2] = v64;
          v60[3] = v63;
          v60[4].f64[0] = v55.f64[0];
          v57 += 72;
        }
        while (v58 != v57);
        goto LABEL_566;
      }
    }
    else
    {
      v56 = __p;
    }
    if (!v56)
    {
LABEL_567:
      free(v30);
      goto LABEL_568;
    }
LABEL_566:
    v348 = v56;
    operator delete(v56);
    goto LABEL_567;
  }
  return 0;
}

void sub_23945AF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  void *v67;
  uint64_t v68;

  free(v67);
  free(a67);
  free(a64);
  free(a61);
  free(*(void **)(v68 - 216));
  _Unwind_Resume(a1);
}

uint64_t sub_23945AF84(uint64_t a1, double **a2, unsigned int *a3)
{
  double v6;
  _QWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  long double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  __double2 v28;
  double v29;
  double v30;
  double v31;
  long double v32;
  double v33;
  float64x2_t v34;
  uint64_t v35;
  int8x16_t v36;
  double v37;
  __double2 v38;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;
  double v44;
  double v45;
  double *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double *v52;
  double v53;
  double v54;
  double *v55;
  double v56;
  int8x16_t v58;
  double v59;
  unsigned int v60;
  void *__p[2];
  void *v62[2];

  v6 = *(double *)a1;
  if (fabs(*(double *)a1) < 2.22044605e-16)
  {
    v7 = operator new(0x18uLL);
    v62[0] = v7;
    v62[1] = v7 + 3;
    *(_OWORD *)v7 = *(_OWORD *)(a1 + 8);
    v7[2] = *(_QWORD *)(a1 + 24);
    v8 = operator new(0x20uLL);
    *v8 = 0u;
    v8[1] = 0u;
    __p[0] = v8;
    __p[1] = v8 + 2;
    v60 = 0;
    sub_23945B9D0((double **)v62, (double **)__p, &v60);
    v9 = v60;
    *a3 = v60;
    if ((int)v9 >= 1)
    {
      v10 = 0;
      v11 = 16 * v9;
      do
      {
        *(_OWORD *)&(*a2)[v10 / 8] = *(_OWORD *)((char *)__p[0] + v10);
        v10 += 16;
      }
      while (v11 != v10);
    }
    if (__p[0])
    {
      if (__p[1] != __p[0])
        __p[1] = (char *)__p[1] + (((char *)__p[0] - (char *)__p[1] + 15) & 0xFFFFFFFFFFFFFFF0);
      operator delete(__p[0]);
    }
    if (v62[0])
    {
      if (v62[1] != v62[0])
        v62[1] = (char *)v62[1] + (((char *)v62[0] - (char *)v62[1] + 7) & 0xFFFFFFFFFFFFFFF8);
      operator delete(v62[0]);
    }
    return 1;
  }
  v12 = *(double *)(a1 + 8) / v6;
  v13 = *(double *)(a1 + 16) / v6;
  v14 = *(double *)(a1 + 24) / v6;
  v15 = (v12 * v12 + v13 * -3.0) / 9.0;
  v16 = (v12 * -9.0 * v13 + pow(v12, 3.0) * 2.0 + v14 * 27.0) / 54.0;
  v17 = pow(v15, 3.0);
  v18 = v16 * v16;
  if (v16 * v16 < v17)
  {
    v19 = sqrt(v15);
    *a3 = 3;
    v20 = acos(v16 / sqrt(v17));
    v21 = cos(v20 / 3.0);
    v22 = v12 / -3.0;
    v23 = *a2;
    *v23 = v22 + v19 * -2.0 * v21;
    v23[1] = 0.0;
    v23[2] = v22 + v19 * -2.0 * cos((v20 + 6.28318531) / 3.0);
    v23[3] = 0.0;
    v23[4] = v22 + v19 * -2.0 * cos((v20 + -6.28318531) / 3.0);
    v23[5] = 0.0;
    return 1;
  }
  *a3 = 1;
  v24 = v18 - v17;
  if (vabdd_f64(v18, v17) == INFINITY)
  {
    v25 = 0.0;
    if (v24 <= 0.0)
    {
      v25 = fabs(v24);
      v24 = 0.0;
    }
  }
  else
  {
    v26 = sqrt(hypot(v24, 0.0));
    v27 = atan2(0.0, v24);
    v24 = NAN;
    v25 = NAN;
    if ((*(_QWORD *)&v26 & 0x8000000000000000) == 0)
    {
      if (fabs(v27 * 0.5) == INFINITY)
      {
        v25 = NAN;
        if (v26 == INFINITY)
          v24 = v26;
        else
          v24 = NAN;
      }
      else
      {
        v28 = __sincos_stret(v27 * 0.5);
        v24 = v26 * v28.__cosval;
        v25 = v26 * v28.__sinval;
      }
    }
  }
  v29 = fabs(v16) + v24;
  v30 = -1.0;
  if (v16 >= 0.0)
    v30 = 0.0;
  if (v16 > 0.0)
    v30 = 1.0;
  v31 = -v30;
  *(_OWORD *)__p = xmmword_239EC6900;
  v32 = hypot(v29, v25);
  v62[0] = COERCE_VOID_(log(v32));
  v62[1] = COERCE_VOID_(atan2(v25, v29));
  v33 = sub_23945BBC8((double *)__p, (double *)v62);
  if (v34.f64[0] == 0.0)
  {
    v58 = (int8x16_t)v34;
    v33 = exp(v33);
    v35 = -1;
    v34.f64[1] = NAN;
    v36.i64[0] = 0;
    *(_QWORD *)&v34.f64[0] = vbslq_s8((int8x16_t)vnegq_f64(v34), v36, v58).u64[0];
  }
  else
  {
    if (fabs(v33) == INFINITY)
    {
      if (v33 >= 0.0)
      {
        if ((*(_QWORD *)&v34.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (fabs(v34.f64[0]) == INFINITY)
            v34.f64[0] = NAN;
          goto LABEL_37;
        }
      }
      else if ((*(_QWORD *)&v34.f64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        v34.f64[0] = 1.0;
      }
    }
    v59 = v34.f64[0];
    v37 = exp(v33);
    v38 = __sincos_stret(v59);
    v33 = v37 * v38.__cosval;
    v34.f64[0] = v37 * v38.__sinval;
  }
LABEL_37:
  v39 = v33 * v31;
  v40 = v34.f64[0] * v31;
  v41 = hypot(v33 * v31, v34.f64[0] * v31);
  v42 = 0.0;
  v43 = v41 < 2.22044605e-16;
  v44 = 0.0;
  if (!v43)
  {
    __p[0] = *(void **)&v15;
    __p[1] = 0;
    v62[0] = *(void **)&v39;
    v62[1] = *(void **)&v40;
    v42 = sub_23945474C((double *)__p, (long double *)v62);
  }
  v45 = v12 / 3.0;
  v46 = *a2;
  *v46 = v39 + v42 - v12 / 3.0;
  v46[1] = v40 + v44;
  v47 = (v40 + v44) * -0.5;
  v48 = (v39 + v42) * -0.5 - v45;
  *(_OWORD *)v62 = xmmword_239EC6910;
  v49 = v39 - v42;
  v50 = v40 - v44;
  __p[0] = *(void **)&v49;
  __p[1] = *(void **)&v50;
  v51 = sub_23945BBC8((double *)v62, (double *)__p);
  v52 = *a2;
  v52[2] = v48 + v51;
  v52[3] = v47 + v53;
  *(_OWORD *)v62 = xmmword_239EC6910;
  __p[0] = *(void **)&v49;
  __p[1] = *(void **)&v50;
  v54 = sub_23945BBC8((double *)v62, (double *)__p);
  v55 = *a2;
  v55[4] = v48 - v54;
  v55[5] = v47 - v56;
  return 1;
}

void sub_23945B48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

void **sub_23945B510(void **a1)
{
  free(a1[6]);
  free(a1[3]);
  free(*a1);
  return a1;
}

uint64_t sub_23945B548(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v5;
  int v6;
  int v7;
  char v9;
  void *v10;
  void *v11;
  void *v12;

  *(_OWORD *)(a1 + 48) = 0u;
  v5 = a1 + 48;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 76) = v7;
  if (!(v6 | v7))
  {
    v9 = 1;
LABEL_7:
    v10 = 0;
    *(_BYTE *)(a1 + 80) = v9;
    goto LABEL_8;
  }
  if (a4 && fabsf((float)(v6 - v7)) >= (float)((float)(v7 + v6) * 0.1))
  {
    v9 = 0;
    goto LABEL_7;
  }
  sub_23945B664(a1, a2, a3);
  if (*(_BYTE *)(a1 + 80))
    return a1;
  v10 = *(void **)v5;
LABEL_8:
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 0;
  free(v10);
  v11 = *(void **)a1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  free(v11);
  v12 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  free(v12);
  return a1;
}

void sub_23945B640(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[6]);
  free(v1[3]);
  free(*v1);
  _Unwind_Resume(a1);
}

void sub_23945B664(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  size_t v7;
  std::bad_alloc *exception;
  std::bad_alloc *v9;
  void *v10[3];
  void *memptr;

  v6 = (*(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16));
  v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
  v10[1] = (void *)(v7 >> 3);
  memptr = 0;
  malloc_type_posix_memalign(&memptr, 0x20uLL, v7, 0x100BBD03uLL);
  v10[0] = memptr;
  if (!memptr)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v9, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  if ((_DWORD)v6)
    memcpy(memptr, *(const void **)a2, 8 * v6);
  v10[2] = *(void **)(a2 + 16);
  sub_23945B744(a1, (uint64_t)v10, a3);
  free(v10[0]);
}

void sub_23945B730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
  free(a9);
  _Unwind_Resume(a1);
}

void sub_23945B744(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  __CLPK_doublereal **v9;
  __CLPK_doublereal *v10;
  __CLPK_doublereal **v11;
  char v12;
  char v13;
  __CLPK_doublereal **v14;
  __CLPK_doublereal *v15;
  __CLPK_doublereal *v16;
  __CLPK_integer v17;
  __CLPK_integer v18;
  __CLPK_doublereal *v19;
  __CLPK_integer v20;
  __CLPK_doublereal *v21;
  char v22;
  __CLPK_integer v23;
  __CLPK_integer v24;
  __CLPK_integer v25;
  __CLPK_doublereal **v26;
  __CLPK_integer v27;
  __CLPK_integer v28;
  uint64_t v29;
  void *v30;
  std::bad_alloc *exception;
  std::bad_alloc *v32;
  char v33;
  char v34;
  __CLPK_integer v35;
  __CLPK_doublereal **v36;
  __CLPK_integer v37;
  double v38;
  void *memptr;

  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 20);
  if ((int)v7 >= (int)v6)
    v8 = v6;
  else
    v8 = v7;
  *(_DWORD *)(a1 + 64) = v8;
  v9 = (__CLPK_doublereal **)(a1 + 48);
  sub_23945215C(a1 + 48, v8);
  if ((a3 & 1) != 0)
  {
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v6;
    sub_23945215C(a1, v6 * (unint64_t)v6);
    v11 = (__CLPK_doublereal **)(a1 + 24);
    if ((a3 & 2) != 0)
    {
LABEL_6:
      *(_DWORD *)(a1 + 40) = v7;
      *(_DWORD *)(a1 + 44) = v7;
      sub_23945215C((uint64_t)v11, v7 * (unint64_t)v7);
      v12 = 65;
      if ((a3 & 1) != 0)
        v13 = 65;
      else
        v13 = 78;
      v14 = v9;
      if ((a3 & 1) != 0)
        goto LABEL_10;
      goto LABEL_19;
    }
  }
  else
  {
    v10 = *(__CLPK_doublereal **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v10);
    v11 = (__CLPK_doublereal **)(a1 + 24);
    if ((a3 & 2) != 0)
      goto LABEL_6;
  }
  v19 = *v11;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  free(v19);
  v12 = 78;
  if ((a3 & 1) != 0)
    v13 = 65;
  else
    v13 = 78;
  v14 = v9;
  if ((a3 & 1) != 0)
  {
LABEL_10:
    v15 = *(__CLPK_doublereal **)a1;
    if ((a3 & 2) != 0)
      goto LABEL_11;
    goto LABEL_20;
  }
LABEL_19:
  v15 = 0;
  if ((a3 & 2) != 0)
  {
LABEL_11:
    v16 = *v11;
    if ((a3 & 1) != 0)
      goto LABEL_12;
LABEL_21:
    v17 = 1;
    if ((a3 & 2) != 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_20:
  v16 = 0;
  if ((a3 & 1) == 0)
    goto LABEL_21;
LABEL_12:
  v17 = *(_DWORD *)(a1 + 16);
  if ((a3 & 2) != 0)
  {
LABEL_13:
    v18 = *(_DWORD *)(a1 + 40);
    goto LABEL_23;
  }
LABEL_22:
  v18 = 1;
LABEL_23:
  v20 = *(_DWORD *)(a2 + 16);
  v38 = 0.0;
  v37 = 0;
  v21 = *(__CLPK_doublereal **)a2;
  v36 = v14;
  v22 = v12;
  v23 = v6;
  v35 = v20;
  v24 = v17;
  v25 = v6;
  v26 = (__CLPK_doublereal **)a2;
  v27 = v18;
  sub_239A23160(v13, v12, v23, v7, v21, v20, *v14, v15, v17, v16, v18, &v38, -1, &v37);
  v28 = v37;
  if (!v37)
  {
    v33 = v13;
    v34 = v22;
    v29 = v38;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v29 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v30 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v32 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v32, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    sub_239A23160(v33, v34, v25, v7, *v26, v35, *v36, v15, v24, v16, v27, (__CLPK_doublereal *)memptr, v29, &v37);
    free(v30);
    v28 = v37;
  }
  *(_BYTE *)(a1 + 80) = v28 == 0;
}

void sub_23945B9BC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23945B9D0(double **a1, double **a2, _DWORD *a3)
{
  double *v4;
  double v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  double v15;
  __double2 v16;
  double v17;
  double *v18;
  double v19;
  double *v20;
  uint64_t v21;
  double v23[2];
  long double v24[2];

  v4 = *a1;
  v6 = **a1;
  v5 = (*a1)[1];
  if (fabs(v6) >= 2.22044605e-16)
  {
    v8 = v5 * v5 + v6 * -4.0 * v4[2];
    *a3 = 2 * (v8 >= 0.0);
    v9 = 0.0;
    v10 = -1.0;
    if (v5 >= 0.0)
      v10 = 0.0;
    if (v5 <= 0.0)
      v11 = v10;
    else
      v11 = 1.0;
    v12 = fabs(v8);
    if (v12 == INFINITY)
    {
      if (v8 <= 0.0)
      {
        v8 = 0.0;
        v9 = v12;
      }
    }
    else
    {
      v13 = sqrt(hypot(v8, 0.0));
      v14 = atan2(0.0, v8);
      v8 = NAN;
      v15 = v14;
      v9 = NAN;
      if ((*(_QWORD *)&v13 & 0x8000000000000000) == 0)
      {
        if (fabs(v15 * 0.5) == INFINITY)
        {
          v9 = NAN;
          if (v13 == INFINITY)
            v8 = v13;
          else
            v8 = NAN;
        }
        else
        {
          v16 = __sincos_stret(v15 * 0.5);
          v8 = v13 * v16.__cosval;
          v9 = v13 * v16.__sinval;
        }
      }
    }
    v17 = v11 * v9 * -0.5;
    v18 = *a2;
    *v18 = (v5 + v11 * v8) * -0.5 / v6;
    v18[1] = v17 / v6;
    v23[0] = v4[2];
    v23[1] = 0.0;
    v24[0] = (v5 + v11 * v8) * -0.5;
    v24[1] = v17;
    v19 = sub_23945474C(v23, v24);
    v20 = *a2;
    v20[2] = v19;
    *((_QWORD *)v20 + 3) = v21;
  }
  else if (fabs(v5) <= 2.22044605e-16)
  {
    *a3 = 0;
  }
  else
  {
    *a3 = 1;
    v7 = *a2;
    *v7 = v4[2] / v5;
    v7[1] = 0.0;
  }
  return 1;
}

double sub_23945BBC8(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1];
}

BOOL sub_23945BD94(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  float64x2_t *v6;
  float64x2_t *v7;
  uint64_t v8;
  int v9;
  float64x2_t *v10;
  float64x2_t *v11;
  char *v12;
  uint64_t v13;
  float64x2_t *v15;
  float64x2_t *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  float64x2_t *v53;
  _BOOL8 v54;
  unint64_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  double v60;
  char **v61;
  float64x2_t v62;
  double v68;
  float64x2_t *v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  double v73;
  double v74;
  double v75;
  unint64_t v76;
  uint64_t v77;
  double *v78;
  double *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  const double *v85;
  float64x2_t *v86;
  float64x2_t v87;
  float64x2_t *v88;
  float64x2_t v89;
  unint64_t v90;
  double v91;
  float64x2_t v92;
  double v93;
  float64x2_t *v94;
  float64x2_t v95;
  double v98;
  double v99;
  unint64_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  float64x2_t *v109;
  double *v110;
  char *v111;
  double *v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double *v125;
  double *v126;
  double v127;
  double v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  int v164;
  size_t v165;
  _QWORD *v166;
  int v167;
  uint64_t v168;
  unsigned int v169;
  unsigned int v170;
  double v171;
  double v172;
  double v173;
  int64x2_t v174;
  float64x2_t v176;
  float64x2_t v177;
  double v180;
  float64x2_t v181;
  double v184;
  float64x2_t v185;
  double v188;
  uint64_t v189;
  __n128 v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  unint64_t v204;
  const double *v205;
  double *v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  uint64_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  unint64_t v216;
  const double *v217;
  double *v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  std::bad_alloc *exception;
  std::bad_alloc *v223;
  double v224;
  double v225;
  uint64_t v226;
  float64_t v227;
  double v228;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  double v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  double v255;
  double v256;
  double v257;
  int64_t v258;
  double v259;
  char *v260;
  uint64_t v261;
  double v262;
  double v264;
  _QWORD *v265;
  double v266;
  double v267;
  char *v268;
  int v269;
  double v270;
  double v271;
  char *v272;
  double v273;
  double v274;
  char *v275;
  float64x2_t v276;
  double v277;
  double v278;
  char *v279;
  double v280;
  float64x2_t v281;
  double v282;
  double v283;
  _QWORD v284[2];
  _OWORD v285[2];
  __int128 v286;
  __int128 v287;
  uint64_t v288;
  void *memptr[3];
  void *v290;
  void *v291;
  char v292;
  void *v293[3];
  void *__src;
  int v295;
  int v296;
  void *v297;
  char v298;
  void *__p;
  void *v300;
  uint64_t v301;
  _QWORD v302[9];
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double v319;
  double v320;
  double v321;
  double v322;
  double v323;
  double v324;
  double v325;
  double v326;
  double v327;
  double v328;
  double v329;
  double v330;
  double v331;
  double v332;
  double v333;
  double v334;
  double v335;
  double v336;
  double v337;
  double v338;
  double v339;
  double v340;
  double v341;
  double v342;
  double v343;
  double v344;
  double v345;
  double v346;
  double v347;
  double v348;
  double v349;
  double v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  double v359;
  double v360;
  double v361;
  double v362;
  double v363;
  double v364;
  double v365;
  double v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double v372;
  double v373;
  double v374;
  void *v375;
  char *v376;
  uint64_t v377;
  void *v378;
  void *v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  char *v383;
  float64x2_t *v384;
  float64x2_t *v385;
  char *v386;
  float64x2_t *v387;
  float64x2_t *v388;
  char *v389;
  char v390[8];
  _QWORD *v391;
  void **v392;
  uint64_t v393;
  uint64_t v394;
  float64x2x2_t v395;
  float64x2x2_t v396;
  float64x2x2_t v397;

  v3 = a1;
  v394 = *MEMORY[0x24BDAC8D0];
  v387 = 0;
  v388 = 0;
  v389 = 0;
  v384 = 0;
  v385 = 0;
  v386 = 0;
  v382 = 0;
  v381 = 0;
  v383 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD **)a2;
    v269 = v4 & 0x3F;
    if (v4 > 0x3F || (v4 & 0x3F) != 0)
    {
      v6 = 0;
      v7 = 0;
      v260 = 0;
      v275 = 0;
      v279 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v265 = &v5[v4 >> 6];
      v268 = 0;
      do
      {
        if (((*v5 >> v9) & 1) == 0)
          goto LABEL_7;
        v15 = (float64x2_t *)(*(_QWORD *)(v3 + 128) + 16 * v8);
        v272 = v12;
        if (v7 < (float64x2_t *)v279)
        {
          *v7++ = *v15;
          v388 = v7;
          v16 = (float64x2_t *)(*(_QWORD *)(v3 + 152) + 16 * v8);
          if (v6 < (float64x2_t *)v275)
            goto LABEL_17;
          goto LABEL_33;
        }
        v18 = v7 - v10;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          goto LABEL_168;
        if ((v279 - (char *)v10) >> 3 > v19)
          v19 = (v279 - (char *)v10) >> 3;
        if ((unint64_t)(v279 - (char *)v10) >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
        {
          if (v20 >> 60)
            goto LABEL_167;
          v21 = (char *)operator new(16 * v20);
          v22 = &v21[16 * v18];
          *(float64x2_t *)v22 = *v15;
          if (v7 == v10)
          {
LABEL_60:
            v24 = v22;
            v7 = (float64x2_t *)(v22 + 16);
            v387 = (float64x2_t *)v22;
            v279 = &v21[16 * v20];
            v389 = v279;
            if (v10)
              goto LABEL_31;
            goto LABEL_32;
          }
        }
        else
        {
          v21 = 0;
          v22 = (char *)(16 * v18);
          *(float64x2_t *)(16 * v18) = *v15;
          if (v7 == v10)
            goto LABEL_60;
        }
        v23 = v22;
        do
        {
          v24 = v23 - 16;
          *((float64x2_t *)v23 - 1) = v7[-1];
          --v7;
          v23 -= 16;
        }
        while (v7 != v10);
        v7 = (float64x2_t *)(v22 + 16);
        v387 = (float64x2_t *)v24;
        v279 = &v21[16 * v20];
        v389 = v279;
        if (v10)
LABEL_31:
          operator delete(v10);
LABEL_32:
        v10 = (float64x2_t *)v24;
        v3 = a1;
        v388 = v7;
        v16 = (float64x2_t *)(*(_QWORD *)(a1 + 152) + 16 * v8);
        v12 = v272;
        if (v6 < (float64x2_t *)v275)
        {
LABEL_17:
          *v6++ = *v16;
          v385 = v6;
          v17 = *a3;
          if (*a3 == a3[1])
            goto LABEL_7;
          goto LABEL_47;
        }
LABEL_33:
        v25 = v6 - v11;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 60)
LABEL_168:
          sub_2394189F8();
        if ((v275 - (char *)v11) >> 3 > v26)
          v26 = (v275 - (char *)v11) >> 3;
        if ((unint64_t)(v275 - (char *)v11) >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          if (v27 >> 60)
            goto LABEL_167;
          v28 = (char *)operator new(16 * v27);
          v29 = &v28[16 * v25];
          *(float64x2_t *)v29 = *v16;
          if (v6 == v11)
          {
LABEL_63:
            v31 = v29;
            v6 = (float64x2_t *)(v29 + 16);
            v384 = (float64x2_t *)v29;
            v275 = &v28[16 * v27];
            v386 = v275;
            if (v11)
              goto LABEL_45;
            goto LABEL_46;
          }
        }
        else
        {
          v28 = 0;
          v29 = (char *)(16 * v25);
          *(float64x2_t *)(16 * v25) = *v16;
          if (v6 == v11)
            goto LABEL_63;
        }
        v30 = v29;
        do
        {
          v31 = v30 - 16;
          *((float64x2_t *)v30 - 1) = v6[-1];
          --v6;
          v30 -= 16;
        }
        while (v6 != v11);
        v6 = (float64x2_t *)(v29 + 16);
        v384 = (float64x2_t *)v31;
        v275 = &v28[16 * v27];
        v386 = v275;
        if (v11)
LABEL_45:
          operator delete(v11);
LABEL_46:
        v11 = (float64x2_t *)v31;
        v3 = a1;
        v12 = v272;
        v385 = v6;
        v17 = *a3;
        if (*a3 == a3[1])
          goto LABEL_7;
LABEL_47:
        if (v268 >= v260)
        {
          v32 = v268 - v12;
          v33 = (v268 - v12) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            sub_2394189F8();
          if ((v260 - v12) >> 2 > v34)
            v34 = (v260 - v12) >> 2;
          if ((unint64_t)(v260 - v12) >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
          {
            v258 = v268 - v12;
            v261 = (v268 - v12) >> 3;
            if (v35 >> 61)
LABEL_167:
              sub_239418A80();
            v36 = v12;
            v37 = v35;
            v38 = (char *)operator new(8 * v35);
            v12 = v36;
            v39 = v268;
            v35 = v37;
            v32 = v258;
            v33 = v261;
            v40 = &v38[8 * v261];
            *(_QWORD *)v40 = *(_QWORD *)&v17[8 * v8];
            v13 = (uint64_t)(v40 + 8);
            if (v268 != v12)
            {
LABEL_57:
              v41 = v39 - 8;
              v42 = v39;
              v43 = v39 - 8 - v12;
              if (v43 < 0x168)
              {
                v44 = v42;
                v3 = a1;
                goto LABEL_71;
              }
              if (&v38[v32 - 8 - (v43 & 0xFFFFFFFFFFFFFFF8)] > &v38[v32 - 8]
                || &v41[-(v43 & 0xFFFFFFFFFFFFFFF8)] > v41
                || (unint64_t)(v41 - &v38[v32] + 8) < 0x20)
              {
                v44 = v268;
                v3 = a1;
                goto LABEL_71;
              }
              v46 = (v43 >> 3) + 1;
              v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v268[-v47];
              v40 -= v47;
              v48 = &v38[8 * v33 - 16];
              v49 = v268 - 16;
              v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              v3 = a1;
              do
              {
                v51 = *(_OWORD *)v49;
                *((_OWORD *)v48 - 1) = *((_OWORD *)v49 - 1);
                *(_OWORD *)v48 = v51;
                v48 -= 32;
                v49 -= 32;
                v50 -= 4;
              }
              while (v50);
              if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_71:
                  v45 = *((_QWORD *)v44 - 1);
                  v44 -= 8;
                  *((_QWORD *)v40 - 1) = v45;
                  v40 -= 8;
                }
                while (v44 != v12);
              }
LABEL_72:
              v381 = v40;
              v260 = &v38[8 * v35];
              v383 = v260;
              if (v12)
                operator delete(v12);
              v12 = v40;
              goto LABEL_6;
            }
          }
          else
          {
            v38 = 0;
            v39 = v268;
            v40 = (char *)(8 * v33);
            *(_QWORD *)(8 * v33) = *(_QWORD *)&v17[8 * v8];
            v13 = 8 * v33 + 8;
            if (v268 != v12)
              goto LABEL_57;
          }
          v3 = a1;
          goto LABEL_72;
        }
        *(_QWORD *)v268 = *(_QWORD *)&v17[8 * v8];
        v13 = (uint64_t)(v268 + 8);
LABEL_6:
        v382 = v13;
        v268 = (char *)v13;
LABEL_7:
        v5 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
        ++v8;
      }
      while (v5 != v265 || v9 != v269);
    }
  }
  else
  {
    if (&v387 != (float64x2_t **)(a1 + 128))
      sub_23945D23C(&v387, *(char **)(a1 + 128), *(char **)(a1 + 136), (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4);
    if (&v384 != (float64x2_t **)(v3 + 152))
      sub_23945D23C(&v384, *(char **)(v3 + 152), *(char **)(v3 + 160), (uint64_t)(*(_QWORD *)(v3 + 160) - *(_QWORD *)(v3 + 152)) >> 4);
    if (&v381 != (void **)a3)
    {
      v52 = a3[1];
      if (*a3 != v52)
        sub_23945D3D0(&v381, *a3, v52, (v52 - *a3) >> 3);
    }
  }
  v53 = v387;
  if ((unint64_t)((char *)v388 - (char *)v387) < 0x80)
  {
    v54 = 0;
    goto LABEL_142;
  }
  v55 = v388 - v387;
  v379 = 0;
  v378 = 0;
  v380 = 0;
  v376 = 0;
  v375 = 0;
  v377 = 0;
  if (v387 == v388)
  {
    v280 = (double)v55;
    v276 = vdivq_f64((float64x2_t)0, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v55), 0));
    v60 = 0.0;
    v61 = a3;
  }
  else
  {
    v56 = 0uLL;
    v57 = v387;
    do
    {
      v58 = *v57++;
      v56 = vaddq_f64(v56, v58);
    }
    while (v57 != v388);
    v280 = (double)v55;
    v59 = vdivq_f64(v56, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v55), 0));
    v60 = 0.0;
    v61 = a3;
    do
    {
      v62 = *v53++;
      _D2 = vsubq_f64(v62, v59).f64[1];
      __asm { FMLA            D1, D2, V0.D[1] }
      v60 = v60 + _D1;
    }
    while (v53 != v388);
    v276 = v59;
  }
  sub_239441074((uint64_t *)&v378, v55);
  v224 = 1.41421356 / sqrt(v60 / v280);
  v68 = vmuld_lane_f64(-v224, v276, 1);
  v225 = -v224 * v276.f64[0];
  *(double *)&v226 = v68;
  v69 = v387;
  if (v388 != v387)
  {
    v70 = v388 - v387;
    v71 = (char *)v378;
    if (v70 <= 1)
      v70 = 1;
    if (v70 >= 8)
    {
      v72 = 0;
      v199 = 16 * (v70 - 1);
      if ((char *)v378 + v199 < v378 || (char *)v378 + v199 + 8 < (char *)v378 + 8)
        goto LABEL_100;
      v74 = -v224 * v276.f64[0];
      v73 = v68;
      v75 = v224;
      if ((v70 - 1) >> 60)
      {
LABEL_101:
        v76 = v70 - v72;
        v77 = (16 * v72) | 8;
        v78 = (double *)&v71[v77];
        v79 = (double *)((char *)v69->f64 + v77);
        do
        {
          v80 = *(v79 - 1);
          v81 = *v79 * 0.0;
          v82 = v74 + v81 + v75 * v80;
          v83 = v73 + v75 * *v79 + v80 * 0.0;
          v84 = 1.0 / (v81 + v80 * 0.0 + 1.0);
          *(v78 - 1) = v82 * v84;
          *v78 = v83 * v84;
          v78 += 2;
          v79 += 2;
          --v76;
        }
        while (v76);
        goto LABEL_103;
      }
      if (v378 >= &v387[v70] || v387 >= (float64x2_t *)((char *)v378 + 16 * v70))
      {
        v75 = v224;
        v200 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v224, 0);
        v201 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(-v224 * v276.f64[0]), 0);
        v202 = (float64x2_t)vdupq_lane_s64(v226, 0);
        v72 = v70 & 0xFFFFFFFFFFFFFFFELL;
        __asm { FMOV            V5.2D, #1.0 }
        v204 = v70 & 0xFFFFFFFFFFFFFFFELL;
        v205 = (const double *)v387;
        v206 = (double *)v378;
        do
        {
          v395 = vld2q_f64(v205);
          v205 += 4;
          v207 = vmulq_f64(v395.val[1], (float64x2_t)0);
          v208 = vaddq_f64(v201, vmlaq_f64(v207, v395.val[0], v200));
          v209 = vaddq_f64(v202, vmlaq_f64(vmulq_n_f64(v395.val[1], v224), (float64x2_t)0, v395.val[0]));
          v395.val[0] = vdivq_f64(_Q5, vaddq_f64(vmlaq_f64(v207, (float64x2_t)0, v395.val[0]), _Q5));
          v396.val[0] = vmulq_f64(v208, v395.val[0]);
          v396.val[1] = vmulq_f64(v209, v395.val[0]);
          vst2q_f64(v206, v396);
          v206 += 4;
          v204 -= 2;
        }
        while (v204);
        v74 = -v224 * v276.f64[0];
        v73 = *(double *)&v226;
        if (v70 == v72)
          goto LABEL_103;
        goto LABEL_101;
      }
    }
    v72 = 0;
LABEL_100:
    v74 = -v224 * v276.f64[0];
    v73 = v68;
    v75 = v224;
    goto LABEL_101;
  }
LABEL_103:
  v85 = (const double *)v384;
  v86 = v385;
  if (v384 == v385)
  {
    v90 = v385 - v384;
    v91 = (double)v90;
    v281 = vdivq_f64((float64x2_t)0, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v90), 0));
    v93 = 0.0;
  }
  else
  {
    v87 = 0uLL;
    v88 = v384;
    do
    {
      v89 = *v88++;
      v87 = vaddq_f64(v87, v89);
    }
    while (v88 != v385);
    v90 = v385 - v384;
    v91 = (double)v90;
    v92 = vdivq_f64(v87, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v90), 0));
    v93 = 0.0;
    v94 = v384;
    do
    {
      v95 = *v94++;
      _D5 = vsubq_f64(v95, v92).f64[1];
      __asm { FMLA            D4, D5, V3.D[1] }
      v93 = v93 + _D4;
    }
    while (v94 != v385);
    v281 = v92;
  }
  v98 = sqrt(v93 / v91);
  v99 = 1.41421356 / v98;
  v100 = (v376 - (_BYTE *)v375) >> 4;
  v228 = 1.41421356 / v98;
  if (v90 <= v100)
  {
    v102.f64[0] = 0.0;
    v101.f64[1] = 0.0;
    v101.f64[0] = 1.41421356 / v98;
    v102.f64[1] = v99;
    if (v90 < v100)
      v376 = (char *)v375 + 16 * v90;
    v103 = vmulq_n_f64(v281, -v99);
    if (v385 == v384)
      goto LABEL_122;
LABEL_116:
    v104 = ((char *)v86 - (char *)v85) >> 4;
    v105 = (char *)v375;
    if (v104 <= 1)
      v104 = 1;
    if (v104 >= 8)
    {
      v106 = 0;
      v210 = 16 * (v104 - 1);
      if ((char *)v375 + v210 < v375 || (char *)v375 + v210 + 8 < (char *)v375 + 8 || (v104 - 1) >> 60)
        goto LABEL_120;
      if (v375 >= &v85[2 * v104] || v85 >= (const double *)((char *)v375 + 16 * v104))
      {
        v211 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v101.f64[0], 0);
        v212 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v103.f64[0], 0);
        v213 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v101, 1);
        v214 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v103, 1);
        v106 = v104 & 0xFFFFFFFFFFFFFFFELL;
        __asm { FMOV            V7.2D, #1.0 }
        v216 = v104 & 0xFFFFFFFFFFFFFFFELL;
        v217 = v85;
        v218 = (double *)v375;
        do
        {
          v397 = vld2q_f64(v217);
          v217 += 4;
          v219 = vaddq_f64(v212, vmlaq_f64(vmulq_n_f64(v397.val[1], v102.f64[0]), v397.val[0], v211));
          v220 = vaddq_f64(v214, vmlaq_f64(vmulq_laneq_f64(v397.val[1], v102, 1), v397.val[0], v213));
          v397.val[0] = vdivq_f64(_Q7, vaddq_f64(vmlaq_f64(vmulq_f64(v397.val[1], (float64x2_t)0), (float64x2_t)0, v397.val[0]), _Q7));
          v397.val[1] = vmulq_f64(v219, v397.val[0]);
          v221 = vmulq_f64(v220, v397.val[0]);
          vst2q_f64(v218, *(float64x2x2_t *)((char *)&v397 + 16));
          v218 += 4;
          v216 -= 2;
        }
        while (v216);
        if (v104 == v106)
          goto LABEL_122;
        goto LABEL_120;
      }
    }
    v106 = 0;
LABEL_120:
    v107 = v104 - v106;
    v108 = 2 * v106;
    v109 = (float64x2_t *)&v105[v108 * 8];
    v110 = (double *)&v85[v108 + 1];
    do
    {
      *v109++ = vmulq_n_f64(vaddq_f64(v103, vmlaq_n_f64(vmulq_n_f64(v102, *v110), v101, *(v110 - 1))), 1.0 / (*v110 * 0.0 + *(v110 - 1) * 0.0 + 1.0));
      v110 += 2;
      --v107;
    }
    while (v107);
    goto LABEL_122;
  }
  sub_239441074((uint64_t *)&v375, v90 - v100);
  v102.f64[0] = 0.0;
  v101 = (float64x2_t)*(unint64_t *)&v228;
  v102.f64[1] = v228;
  v85 = (const double *)v384;
  v86 = v385;
  v103 = vmulq_n_f64(v281, -v228);
  if (v385 != v384)
    goto LABEL_116;
LABEL_122:
  v227 = v103.f64[1];
  bzero(v302, 0x288uLL);
  v300 = 0;
  __p = 0;
  v301 = 0;
  v111 = v61[1];
  if (*v61 == v111)
  {
    v293[0] = (void *)0x3FF0000000000000;
    sub_23945D514((uint64_t)&__p, v55, (uint64_t *)v293);
  }
  else if (&__p != (void **)v61)
  {
    sub_23945D3D0(&__p, *v61, v111, (v111 - *v61) >> 3);
  }
  v112 = (double *)__p;
  v254 = v359;
  v113 = v368;
  v262 = v350;
  v264 = v367;
  v114 = v324;
  v115 = v333;
  v116 = v332;
  v117 = v340;
  v118 = v341;
  v251 = *(double *)v302;
  v252 = v349;
  v119 = v322;
  v249 = v321;
  v250 = v303;
  v120 = v331;
  v257 = v358;
  v259 = v323;
  v247 = v357;
  v248 = v330;
  v245 = v312;
  v246 = v366;
  v243 = v313;
  v244 = v304;
  v121 = v360;
  v122 = v369;
  v241 = v334;
  v242 = v314;
  v123 = v342;
  v124 = v343;
  v125 = (double *)((char *)v378 + 8);
  v126 = (double *)((char *)v375 + 8);
  v253 = v351;
  v127 = v352;
  v128 = v361;
  v129 = v370;
  v130 = v348;
  v131 = v362;
  v132 = v371;
  v255 = v353;
  v256 = v339;
  v239 = v354;
  v240 = v344;
  v133 = v363;
  v134 = v372;
  v135 = v373;
  v237 = v374;
  v238 = v364;
  do
  {
    v230 = v135;
    v266 = v122;
    v270 = v128;
    v273 = v124;
    v277 = v129;
    v282 = v134;
    v232 = v127;
    v233 = v116;
    v235 = v133;
    v136 = *v112++;
    v137 = v113;
    v138 = *(v126 - 1) * v136;
    v139 = *(v125 - 1);
    v140 = v119;
    v141 = v139 * v138;
    v142 = v132;
    v143 = v120;
    v144 = v131;
    v145 = *v125 * v138;
    v146 = *v126 * v136;
    v147 = v139 * v146;
    v148 = *v125 * v146;
    v149 = v139 * v136;
    v150 = *v125 * v136;
    v151 = v251 + v141 * v141;
    v152 = v250 + v141 * v145;
    v153 = v245 + v141 * v138;
    v154 = v249 + v141 * v147;
    v155 = v248 + v141 * v148;
    v256 = v256 + v141 * v146;
    v156 = v247 + v141 * v150;
    v157 = v246 + v141 * v136;
    v231 = v130 + v141 * v149;
    v264 = v264 + v145 * v136;
    v257 = v257 + v145 * v150;
    v259 = v259 + v138 * v147;
    v158 = v233 + v138 * v148;
    v262 = v262 + v138 * v149;
    v234 = v137 + v138 * v136;
    v159 = v121 + v147 * v150;
    v267 = v266 + v147 * v136;
    v271 = v270 + v148 * v150;
    v274 = v273 + v148 * v146;
    v278 = v277 + v148 * v136;
    v160 = v144 + v146 * v150;
    v236 = v142 + v146 * v136;
    v161 = v235 + v149 * v150;
    v283 = v282 + v149 * v136;
    v162 = v238 + v150 * v150;
    v163 = v230 + v150 * v136;
    v250 = v152;
    v251 = v151;
    *(double *)v302 = v151;
    v303 = v152;
    v245 = v153;
    v246 = v157;
    v366 = v157;
    v312 = v153;
    v243 = v243 + v145 * v138;
    v244 = v244 + v145 * v145;
    v304 = v244;
    v248 = v155;
    v249 = v154;
    v321 = v154;
    v119 = v140 + v145 * v147;
    v322 = v119;
    v330 = v155;
    v120 = v143 + v145 * v148;
    v331 = v120;
    v247 = v156;
    v357 = v156;
    v358 = v257;
    v367 = v264;
    v313 = v243;
    v242 = v242 + v138 * v138;
    v314 = v242;
    v117 = v117 + v145 * v146;
    v340 = v117;
    v118 = v118 + v138 * v146;
    v341 = v118;
    v252 = v252 + v145 * v149;
    v349 = v252;
    v350 = v262;
    v254 = v254 + v138 * v150;
    v359 = v254;
    v113 = v234;
    v368 = v234;
    v323 = v259;
    v114 = v114 + v147 * v147;
    v324 = v114;
    v116 = v158;
    v332 = v158;
    v115 = v115 + v147 * v148;
    v333 = v115;
    v121 = v159;
    v360 = v159;
    v122 = v267;
    v369 = v267;
    v339 = v256;
    v241 = v241 + v148 * v148;
    v334 = v241;
    v123 = v123 + v147 * v146;
    v342 = v123;
    v124 = v274;
    v343 = v274;
    v253 = v253 + v147 * v149;
    v351 = v253;
    v127 = v232 + v148 * v149;
    v352 = v127;
    v128 = v271;
    v361 = v271;
    v129 = v278;
    v370 = v278;
    v130 = v231;
    v348 = v231;
    v239 = v239 + v149 * v149;
    v240 = v240 + v146 * v146;
    v344 = v240;
    v131 = v160;
    v362 = v160;
    v132 = v236;
    v371 = v236;
    v255 = v255 + v146 * v149;
    v353 = v255;
    v354 = v239;
    v133 = v161;
    v363 = v161;
    v134 = v283;
    v372 = v283;
    v237 = v237 + v136 * v136;
    v238 = v162;
    v364 = v162;
    v135 = v163;
    v373 = v163;
    v374 = v237;
    v125 += 2;
    v126 += 2;
    --v55;
  }
  while (v55);
  *(double *)&v302[1] = v303;
  *(double *)&v302[2] = v312;
  v305 = v313;
  v306 = v119;
  *(double *)&v302[3] = v321;
  *(double *)&v302[4] = v330;
  v307 = v120;
  v308 = v117;
  v316 = v116;
  v317 = v118;
  *(double *)&v302[5] = v339;
  *(double *)&v302[6] = v348;
  v326 = v123;
  v327 = v253;
  v335 = v274;
  v336 = v127;
  v309 = v252;
  v310 = v257;
  v318 = v262;
  v319 = v254;
  v345 = v255;
  v346 = v160;
  *(double *)&v302[7] = v357;
  *(double *)&v302[8] = v366;
  v315 = v259;
  v311 = v264;
  v325 = v115;
  v320 = v234;
  v328 = v121;
  v329 = v267;
  v337 = v271;
  v338 = v278;
  v355 = v161;
  v347 = v236;
  v356 = v283;
  v365 = v163;
  sub_23945D77C((uint64_t)v293, v302, 3);
  if (v298)
  {
    v164 = v296 * v295;
    v165 = 8 * (v296 * v295);
    memptr[0] = 0;
    malloc_type_posix_memalign(memptr, 0x20uLL, (v165 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v166 = memptr[0];
    if (!memptr[0])
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v223 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v223, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if (v164)
      memcpy(memptr[0], __src, v165);
    v167 = v295;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
    sub_239454B1C((void **)(a1 + 192), 1uLL);
    v168 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)v168 = v166[8];
    *(_QWORD *)(v168 + 24) = v166[v167 + 8];
    v169 = 2 * v167 + 8;
    *(_QWORD *)(v168 + 48) = v166[v169];
    *(_QWORD *)(v168 + 8) = v166[v169 + v167];
    v170 = 4 * v167 + 8;
    *(_QWORD *)(v168 + 32) = v166[v170];
    *(_QWORD *)(v168 + 56) = v166[v170 + v167];
    v171 = *(double *)&v166[6 * v167 + 8];
    *(double *)(v168 + 16) = v171;
    v172 = *(double *)&v166[7 * v167 + 8];
    *(double *)(v168 + 40) = v172;
    v173 = *(double *)&v166[8 * v167 + 8];
    *(double *)(v168 + 64) = v173;
    _V21.D[1] = v227;
    *(double *)v174.i64 = v228;
    *(double *)&v174.i64[1] = v228;
    v176 = (float64x2_t)vzip2q_s64((int64x2_t)0, v174);
    v177 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v228, *(double *)v168), v176, *(float64x2_t *)v168, 1), (float64x2_t)0, v171);
    _D4 = *(_QWORD *)(v168 + 8);
    __asm { FMLA            D20, D4, V21.D[1] }
    v180 = v171 + _D20;
    v181 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v228, *(double *)(v168 + 24)), v176, *(float64x2_t *)(v168 + 24), 1), (float64x2_t)0, v172);
    _D5 = *(_QWORD *)(v168 + 32);
    __asm { FMLA            D20, D5, V21.D[1] }
    v184 = v172 + _D20;
    v185 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v228, *(double *)(v168 + 48)), v176, *(float64x2_t *)(v168 + 48), 1), (float64x2_t)0, v173);
    _D6 = *(_QWORD *)(v168 + 56);
    __asm { FMLA            D7, D6, V21.D[1] }
    v188 = v173 + _D7;
    *(double *)(v168 + 16) = v180 * v224 + v184 * 0.0 + v188 * 0.0;
    *(float64x2_t *)v168 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v177, v224), (float64x2_t)0, v181), (float64x2_t)0, v185);
    *(double *)(v168 + 40) = v180 * 0.0 + v184 * v224 + v188 * 0.0;
    *(float64x2_t *)(v168 + 24) = vmlaq_f64(vmlaq_n_f64(vmulq_f64(v177, (float64x2_t)0), v181, v224), (float64x2_t)0, v185);
    *(double *)(v168 + 64) = v188 + v180 * v225 + v184 * *(double *)&v226;
    *(float64x2_t *)(v168 + 48) = vaddq_f64(v185, vmlaq_n_f64(vmulq_n_f64(v177, v225), v181, *(double *)&v226));
    sub_23945DAB0((uint64_t)memptr, v168, 3);
    v54 = v292 != 0;
    if (v292)
    {
      v288 = 0;
      v286 = 0u;
      v287 = 0u;
      memset(v285, 0, sizeof(v285));
      v189 = *((_QWORD *)v291 + 1);
      *(_QWORD *)&v285[0] = *(_QWORD *)v291;
      *(_QWORD *)&v286 = v189;
      v284[0] = memptr;
      v284[1] = v285;
      v391 = v284;
      v392 = &v290;
      v393 = 0x3FF0000000000000;
      v190 = sub_23945DDE4(v168, (uint64_t)v390);
      v190.n128_u64[0] = *(_QWORD *)(v168 + 64);
      *(_QWORD *)&v191.f64[0] = v190.n128_u64[0];
      v192 = (float64x2_t)vdupq_lane_s64(v190.n128_i64[0], 0);
      v193 = vdivq_f64(*(float64x2_t *)(v168 + 16), v192);
      *(float64x2_t *)v168 = vdivq_f64(*(float64x2_t *)v168, v192);
      *(float64x2_t *)(v168 + 16) = v193;
      v194 = *(_OWORD *)(v168 + 16);
      *(float64x2_t *)(v168 + 32) = vdivq_f64(*(float64x2_t *)(v168 + 32), v192);
      v195 = *(_OWORD *)(v168 + 32);
      *(float64x2_t *)(v168 + 48) = vdivq_f64(*(float64x2_t *)(v168 + 48), v192);
      *(_QWORD *)(v168 + 64) = *(_OWORD *)&vdivq_f64(v191, (float64x2_t)v190);
      v196 = *(_OWORD *)(v168 + 48);
      v197 = *(_QWORD *)(v168 + 64);
      *(_OWORD *)(a1 + 24) = v194;
      *(_QWORD *)(a1 + 72) = v197;
      *(_OWORD *)(a1 + 56) = v196;
      *(_OWORD *)(a1 + 40) = v195;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v168;
    }
    free(v291);
    free(v290);
    free(memptr[0]);
    free(v166);
  }
  else
  {
    v54 = 0;
  }
  free(v297);
  free(__src);
  free(v293[0]);
  if (__p)
  {
    v300 = __p;
    operator delete(__p);
  }
  if (v375)
  {
    v376 = (char *)v375;
    operator delete(v375);
  }
  if (v378)
  {
    v379 = v378;
    operator delete(v378);
  }
LABEL_142:
  if (v381)
  {
    v382 = (uint64_t)v381;
    operator delete(v381);
  }
  if (v384)
  {
    v385 = v384;
    operator delete(v384);
  }
  if (v387)
  {
    v388 = v387;
    operator delete(v387);
  }
  return v54;
}

void sub_23945D13C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v3;
    operator delete(v3);
    v4 = (void *)STACK[0x558];
    if (!STACK[0x558])
    {
LABEL_3:
      v5 = (void *)STACK[0x570];
      if (!STACK[0x570])
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v4 = (void *)STACK[0x558];
    if (!STACK[0x558])
      goto LABEL_3;
  }
  STACK[0x560] = (unint64_t)v4;
  operator delete(v4);
  v5 = (void *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_4:
    v6 = (void *)STACK[0x588];
    if (!STACK[0x588])
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  STACK[0x578] = (unint64_t)v5;
  operator delete(v5);
  v6 = (void *)STACK[0x588];
  if (!STACK[0x588])
  {
LABEL_5:
    v7 = *(void **)(v1 - 240);
    if (!v7)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  STACK[0x590] = (unint64_t)v6;
  operator delete(v6);
  v7 = *(void **)(v1 - 240);
  if (!v7)
  {
LABEL_6:
    v8 = *(void **)(v1 - 216);
    if (!v8)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  *(_QWORD *)(v1 - 232) = v7;
  operator delete(v7);
  v8 = *(void **)(v1 - 216);
  if (!v8)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_13:
  *(_QWORD *)(v1 - 208) = v8;
  operator delete(v8);
  _Unwind_Resume(a1);
}

_QWORD *sub_23945D23C(_QWORD *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char **v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz <= (v8 - *result) >> 4)
  {
    v16 = (char **)(result + 1);
    v17 = (char *)result[1];
    v18 = (v17 - v9) >> 4;
    if (v18 >= __sz)
    {
      v25 = *result;
      if (a2 != a3)
      {
        v26 = (_OWORD *)*result;
        do
        {
          v27 = *(_OWORD *)v6;
          v6 += 16;
          *v26++ = v27;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v15 = v25 - (_QWORD)v9;
    }
    else
    {
      v19 = &a2[16 * v18];
      if (v17 != v9)
      {
        v20 = 16 * v18;
        do
        {
          v21 = *(_OWORD *)v6;
          v6 += 16;
          *(_OWORD *)v9 = v21;
          v9 += 16;
          v20 -= 16;
        }
        while (v20);
        v9 = *v16;
      }
      v22 = v9;
      if (v19 != a3)
      {
        v22 = v9;
        v23 = v9;
        do
        {
          v24 = *(_OWORD *)v19;
          v19 += 16;
          *(_OWORD *)v23 = v24;
          v23 += 16;
          v22 += 16;
        }
        while (v19 != a3);
      }
      v15 = v22 - v9;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_27;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_27:
      sub_2394189F8();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = (char *)result;
    if (v6 != a3)
    {
      result = memcpy(result, v6, ((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      v14 = &v9[((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
    }
    v15 = v14 - v9;
    v16 = (char **)(v7 + 1);
  }
  *v16 = &v9[v15];
  return result;
}

_QWORD *sub_23945D3D0(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_2394189F8();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_23945D514(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = vdupq_lane_s64(*a3, 0);
      v19 = (int64x2_t *)(v7 + 16);
      v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      sub_2394189F8();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_239418A80();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

uint64_t sub_23945D77C(uint64_t a1, const void *a2, char a3)
{
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  __CLPK_doublereal __dst[81];

  *(_OWORD *)(a1 + 48) = 0u;
  v5 = a1 + 48;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0x900000009;
  memcpy(__dst, a2, sizeof(__dst));
  sub_23945D868(a1, __dst, a3);
  if (!*(_BYTE *)(a1 + 80))
  {
    v7 = *(void **)(a1 + 48);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    free(v7);
    v8 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v8);
    v9 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    free(v9);
  }
  return a1;
}

void sub_23945D844(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[6]);
  free(v1[3]);
  free(*v1);
  _Unwind_Resume(a1);
}

void sub_23945D868(uint64_t a1, __CLPK_doublereal *a2, char a3)
{
  __CLPK_doublereal **v6;
  __CLPK_doublereal *v7;
  __CLPK_doublereal **v8;
  char v9;
  char v10;
  __CLPK_doublereal *v11;
  __CLPK_doublereal *v12;
  __CLPK_integer v13;
  __CLPK_integer v14;
  __CLPK_doublereal *v15;
  __CLPK_integer v16;
  __CLPK_integer v17;
  void *v18;
  std::bad_alloc *exception;
  std::bad_alloc *v20;
  __CLPK_doublereal *v21;
  __CLPK_integer v22;
  double v23;
  void *memptr;

  v6 = (__CLPK_doublereal **)(a1 + 48);
  *(_DWORD *)(a1 + 64) = 9;
  sub_23945215C(a1 + 48, 9uLL);
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)(a1 + 16) = 0x900000009;
    sub_23945215C(a1, 0x51uLL);
    v8 = (__CLPK_doublereal **)(a1 + 24);
    if ((a3 & 2) != 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 40) = 0x900000009;
      sub_23945215C((uint64_t)v8, 0x51uLL);
      v9 = 65;
      if ((a3 & 1) != 0)
        v10 = 65;
      else
        v10 = 78;
      if ((a3 & 1) != 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = *(__CLPK_doublereal **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v7);
    v8 = (__CLPK_doublereal **)(a1 + 24);
    if ((a3 & 2) != 0)
      goto LABEL_3;
  }
  v15 = *v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  free(v15);
  v9 = 78;
  if ((a3 & 1) != 0)
    v10 = 65;
  else
    v10 = 78;
  if ((a3 & 1) != 0)
  {
LABEL_7:
    v11 = *(__CLPK_doublereal **)a1;
    if ((a3 & 2) != 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v11 = 0;
  if ((a3 & 2) != 0)
  {
LABEL_8:
    v12 = *v8;
    if ((a3 & 1) != 0)
      goto LABEL_9;
LABEL_18:
    v13 = 1;
    if ((a3 & 2) != 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_17:
  v12 = 0;
  if ((a3 & 1) == 0)
    goto LABEL_18;
LABEL_9:
  v13 = *(_DWORD *)(a1 + 16);
  if ((a3 & 2) != 0)
  {
LABEL_10:
    v14 = *(_DWORD *)(a1 + 40);
    goto LABEL_20;
  }
LABEL_19:
  v14 = 1;
LABEL_20:
  v23 = 0.0;
  v22 = 0;
  sub_239A23160(v10, v9, 9, 9, a2, 9, *v6, v11, v13, v12, v14, &v23, -1, &v22);
  v16 = v22;
  if (!v22)
  {
    v21 = a2;
    v17 = v23;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v23 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v18 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v20 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v20, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    sub_239A23160(v10, v9, 9, 9, v21, 9, *v6, v11, v13, v12, v14, (__CLPK_doublereal *)memptr, v17, &v22);
    free(v18);
    v16 = v22;
  }
  *(_BYTE *)(a1 + 80) = v16 == 0;
}

void sub_23945DA9C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23945DAB0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  void *v8;
  void *v9;
  void *v10;
  _OWORD v11[4];
  uint64_t v12;

  *(_OWORD *)(a1 + 48) = 0u;
  v4 = a1 + 48;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0x300000003;
  v5 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v5;
  v12 = *(_QWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v6;
  sub_23945DB9C(a1, (__CLPK_doublereal *)v11, a3);
  if (!*(_BYTE *)(a1 + 80))
  {
    v8 = *(void **)(a1 + 48);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    free(v8);
    v9 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v9);
    v10 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    free(v10);
  }
  return a1;
}

void sub_23945DB78(_Unwind_Exception *a1)
{
  void **v1;

  free(v1[6]);
  free(v1[3]);
  free(*v1);
  _Unwind_Resume(a1);
}

void sub_23945DB9C(uint64_t a1, __CLPK_doublereal *a2, char a3)
{
  __CLPK_doublereal **v6;
  __CLPK_doublereal *v7;
  __CLPK_doublereal **v8;
  char v9;
  char v10;
  __CLPK_doublereal *v11;
  __CLPK_doublereal *v12;
  __CLPK_integer v13;
  __CLPK_integer v14;
  __CLPK_doublereal *v15;
  __CLPK_integer v16;
  __CLPK_integer v17;
  void *v18;
  std::bad_alloc *exception;
  std::bad_alloc *v20;
  __CLPK_doublereal *v21;
  __CLPK_integer v22;
  double v23;
  void *memptr;

  v6 = (__CLPK_doublereal **)(a1 + 48);
  *(_DWORD *)(a1 + 64) = 3;
  sub_23945215C(a1 + 48, 3uLL);
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)(a1 + 16) = 0x300000003;
    sub_23945215C(a1, 9uLL);
    v8 = (__CLPK_doublereal **)(a1 + 24);
    if ((a3 & 2) != 0)
    {
LABEL_3:
      *(_QWORD *)(a1 + 40) = 0x300000003;
      sub_23945215C((uint64_t)v8, 9uLL);
      v9 = 65;
      if ((a3 & 1) != 0)
        v10 = 65;
      else
        v10 = 78;
      if ((a3 & 1) != 0)
        goto LABEL_7;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = *(__CLPK_doublereal **)a1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    free(v7);
    v8 = (__CLPK_doublereal **)(a1 + 24);
    if ((a3 & 2) != 0)
      goto LABEL_3;
  }
  v15 = *v8;
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  free(v15);
  v9 = 78;
  if ((a3 & 1) != 0)
    v10 = 65;
  else
    v10 = 78;
  if ((a3 & 1) != 0)
  {
LABEL_7:
    v11 = *(__CLPK_doublereal **)a1;
    if ((a3 & 2) != 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v11 = 0;
  if ((a3 & 2) != 0)
  {
LABEL_8:
    v12 = *v8;
    if ((a3 & 1) != 0)
      goto LABEL_9;
LABEL_18:
    v13 = 1;
    if ((a3 & 2) != 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_17:
  v12 = 0;
  if ((a3 & 1) == 0)
    goto LABEL_18;
LABEL_9:
  v13 = *(_DWORD *)(a1 + 16);
  if ((a3 & 2) != 0)
  {
LABEL_10:
    v14 = *(_DWORD *)(a1 + 40);
    goto LABEL_20;
  }
LABEL_19:
  v14 = 1;
LABEL_20:
  v23 = 0.0;
  v22 = 0;
  sub_239A23160(v10, v9, 3, 3, a2, 3, *v6, v11, v13, v12, v14, &v23, -1, &v22);
  v16 = v22;
  if (!v22)
  {
    v21 = a2;
    v17 = v23;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, (8 * v23 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v18 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v20 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v20, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    sub_239A23160(v10, v9, 3, 3, v21, 3, *v6, v11, v13, v12, v14, (__CLPK_doublereal *)memptr, v17, &v22);
    free(v18);
    v16 = v22;
  }
  *(_BYTE *)(a1 + 80) = v16 == 0;
}

void sub_23945DDD0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

__n128 sub_23945DDE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  __n128 result;
  __int128 v11;
  std::bad_alloc *exception;
  std::bad_alloc *v13;
  void *v14[2];
  int __lda;
  void *memptr[2];
  __n128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)v4 == a1)
  {
    sub_23945DDE4(memptr, a2);
    v11 = v19;
    *(_OWORD *)(a1 + 32) = v18;
    *(_OWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 64) = v20;
    result = v17;
    *(_OWORD *)a1 = *(_OWORD *)memptr;
    *(__n128 *)(a1 + 16) = result;
  }
  else
  {
    v5 = *(_QWORD **)(a2 + 8);
    v6 = *(_DWORD *)(*v5 + 16);
    if (v6 && *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
    {
      v7 = (8 * (3 * v6) + 31) & 0xFFFFFFFE0;
      v14[1] = (void *)(v7 >> 3);
      memptr[0] = 0;
      malloc_type_posix_memalign(memptr, 0x20uLL, v7, 0x100BBD03uLL);
      v14[0] = memptr[0];
      if (!memptr[0])
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v13 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v13, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
      }
      v8 = (void *)*v5;
      __lda = *(_DWORD *)(*v5 + 16);
      v9 = v5[1];
      memptr[1] = v8;
      v17.n128_u64[0] = v9;
      v17.n128_u64[1] = 0x3FF0000000000000;
      sub_23945DFA8((uint64_t)v14, (uint64_t)memptr);
      sub_239A22E14(0, 0, *(_DWORD *)(**(_QWORD **)(a2 + 8) + 16), *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20), 3, (const double *)v14[0], __lda, **(double ***)(a2 + 16), *(double *)(a2 + 24), 0.0, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 16), (double *)a1, 3);
      free(v14[0]);
    }
    else
    {
      *(_QWORD *)(a1 + 64) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }
  }
  return result;
}

void sub_23945DF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(a12);
  _Unwind_Resume(a1);
}

void sub_23945DF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  free(a12);
  _Unwind_Resume(a1);
}

void sub_23945DFA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double *v5;
  double *v6;
  int v7;
  int v8;
  size_t v9;
  double *v10;
  size_t v11;
  size_t v12;
  int v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;
  void *v16;
  size_t v17;
  int v18;
  void *memptr;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(double **)a1;
  if (*(double **)v4 == v5 || (v6 = *(double **)(a2 + 16), v6 == v5))
  {
    v9 = (8 * (3 * *(_DWORD *)(v4 + 16)) + 31) & 0xFFFFFFFE0;
    v17 = v9 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v9, 0x100BBD03uLL);
    v16 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v18 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 16);
    sub_23945DFA8(&v16, a2);
    v10 = *(double **)a1;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v17;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v12;
    v16 = v10;
    v17 = v11;
    *(_DWORD *)(a1 + 16) = v18;
    v18 = 0;
    free(v10);
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 16);
    v8 = *(_DWORD *)(v4 + 20);
    if (v8 * v7)
    {
      sub_239A22E14(0, 0, v7, 3, v8, *(const double **)v4, v7, v6, *(double *)(a2 + 24), 0.0, 3, v5, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 16);
      if (v13)
        bzero(v5, 8 * (3 * v13));
    }
  }
}

void sub_23945E0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void sub_23945E108(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_2394189F8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_239418A80();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_23945E2A4()
{
  return 4;
}

uint64_t sub_23945E2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  long double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  long double v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  void *v25;
  int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  double v41;
  long double v42;
  BOOL v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  void *__p;
  void *v54;
  uint64_t v55;
  void *__src;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  char *v61;
  int v62;
  char v63;
  uint64_t v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v60 = v7;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v10 = v8;
  v59 = v8;
  v11 = *(double *)(a2 + 8);
  LODWORD(v12) = 1;
  if (v11 < 1.0 && v11 > 0.0)
  {
    *(double *)&v13 = log(1.0 - *(double *)a2);
    v14 = *(double *)&v13;
    LODWORD(v13) = *(_DWORD *)(a2 + 16);
    v15 = pow(v11, (double)v13);
    v12 = vcvtpd_u64_f64(v14 / log(1.0 - v15));
    if (v12 == -1)
      sub_239EBF034(v8, v9);
  }
  if (v7 < v10)
    sub_239EBF008(v8, v9);
  __src = 0;
  v57 = 0;
  v58 = 0;
  if (v7)
  {
    v16 = ((unint64_t)v7 - 1) >> 6;
    v17 = (char *)operator new(8 * (v16 + 1));
    v18 = v17;
    v57 = v7;
    v58 = v16 + 1;
    __src = v17;
    if (v7 >= 0x41)
      v19 = ((unint64_t)v7 - 1) >> 6;
    else
      v19 = 0;
    *(_QWORD *)&v17[8 * v19] = 0;
    v20 = v7 >> 6;
    v21 = 8 * v20;
    if (v7 >= 0x40)
      bzero(v17, 8 * v20);
    if ((v7 & 0x3F) != 0)
      *(_QWORD *)&v18[v21] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 & 0x3F));
  }
  if ((_DWORD)v12)
  {
    v22 = 0;
    v23 = -2147483647;
    while (1)
    {
      if (v59 > v60)
      {
        sub_239A444D4((uint64_t)"unknown file", 195, (uint64_t)"", (void (*)(void *))sub_239A4463C);
        sub_239A4475C();
        abort();
      }
      if (v60)
      {
        if ((double)v60 * 0.5 >= (double)v59)
          sub_239455384(a2 + 32, &v60, (int *)&v59, (int32x4_t **)&__p);
        else
          sub_2394551BC(a2 + 32, &v60, &v59, (int32x4_t **)&__p);
      }
      else
      {
        __p = 0;
        v54 = 0;
        v55 = 0;
      }
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a3 + 40))(a3, &__p))
        break;
      v24 = 1;
      v25 = __p;
      if (__p)
        goto LABEL_16;
LABEL_17:
      if (v12 - 1 == v22++ || !v24)
        goto LABEL_61;
    }
    v28 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 32))(a3, &__src);
    if (v28 <= v23)
    {
      v32 = v57;
    }
    else
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
      v30 = *(_OWORD *)(v29 + 48);
      v68 = *(_OWORD *)(v29 + 32);
      v69 = v30;
      v70 = *(_QWORD *)(v29 + 64);
      v31 = *(_OWORD *)(v29 + 16);
      v66 = *(_OWORD *)v29;
      v67 = v31;
      v32 = v57;
      if (&__src != (void **)a4)
      {
        if (v57)
        {
          v33 = *(void **)a4;
          if (v57 <= *(_QWORD *)(a4 + 16) << 6)
          {
            v34 = v57 - 1;
          }
          else
          {
            if (v33)
            {
              operator delete(v33);
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
              *(_QWORD *)(a4 + 16) = 0;
              v32 = v57;
            }
            if ((v32 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v34 = v32 - 1;
            v35 = ((v32 - 1) >> 6) + 1;
            v33 = operator new(8 * v35);
            *(_QWORD *)a4 = v33;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = v35;
          }
          memmove(v33, __src, ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8);
          v32 = v57;
        }
        *(_QWORD *)(a4 + 8) = v32;
      }
      v23 = v28;
    }
    v52 = 1;
    v64 = (uint64_t)__src;
    v65 = 0;
    v61 = (char *)__src + 8 * (v32 >> 6);
    v62 = v32 & 0x3F;
    v36 = sub_239458E50((uint64_t)&v64, (uint64_t)&v61, &v52);
    v38 = v12;
    if (v36)
    {
      LODWORD(v37) = v60;
      v39 = (double)v36 / (double)v37;
      if (v39 >= 1.0)
      {
        if (v22)
          v44 = *(_QWORD *)(a2 + 24) > v22;
        else
          v44 = 1;
        v24 = v44;
        v25 = __p;
        if (!__p)
          goto LABEL_17;
LABEL_16:
        v54 = v25;
        operator delete(v25);
        goto LABEL_17;
      }
      v38 = 1;
      if (v39 > 0.0)
      {
        *(double *)&v40 = log(1.0 - *(double *)a2);
        v41 = *(double *)&v40 * 3.0;
        LODWORD(v40) = *(_DWORD *)(a2 + 16);
        v42 = pow(v39, (double)v40);
        v38 = vcvtpd_u64_f64(v41 / log(1.0 - v42));
        if (v38 == -1)
        {
          sub_239A444D4((uint64_t)"unknown file", 120, (uint64_t)"", (void (*)(void *))sub_239A4463C);
          sub_239A4475C();
          abort();
        }
      }
    }
    v24 = v38 > v22 || *(_QWORD *)(a2 + 24) > v22;
    v25 = __p;
    if (!__p)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_61:
  v45 = v66;
  *(_OWORD *)(a3 + 24) = v67;
  v46 = v69;
  *(_OWORD *)(a3 + 40) = v68;
  *(_OWORD *)(a3 + 56) = v46;
  *(_QWORD *)(a3 + 72) = v70;
  *(_OWORD *)(a3 + 8) = v45;
  v47 = *(void **)a4;
  v48 = *(_QWORD *)a4 + 8 * (*(_QWORD *)(a4 + 8) >> 6);
  v49 = *(_QWORD *)(a4 + 8) & 0x3FLL;
  v63 = 1;
  __p = v47;
  LODWORD(v54) = 0;
  v64 = v48;
  v65 = v49;
  v50 = sub_239458E50((uint64_t)&__p, (uint64_t)&v64, &v63);
  if (__src)
    operator delete(__src);
  return v50;
}

void sub_23945E79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (__p)
    operator delete(__p);
  if (!a14)
    _Unwind_Resume(exception_object);
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_23945E7F0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_250ADBB78;
  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_23945E85C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *(_QWORD *)a1 = &off_250ADBB78;
  *(_OWORD *)(a1 + 80) = 0u;
  v7 = (uint64_t *)(a1 + 80);
  v8 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  v10 = *(const void **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  v11 = v9 - *(_QWORD *)a2;
  if (v9 != *(_QWORD *)a2)
  {
    if (v11 < 0)
      sub_2394189F8();
    v12 = (char *)operator new(v9 - *(_QWORD *)a2);
    *(_QWORD *)(a1 + 128) = v12;
    *(_QWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 144) = &v12[16 * (v11 >> 4)];
    v13 = v11 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v12, v10, v13);
    *(_QWORD *)(a1 + 136) = &v12[v13];
  }
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v14 = *(const void **)a3;
  v15 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v15)
  {
    if (v15 < 0)
      sub_2394189F8();
    v16 = (char *)operator new(v15);
    *(_QWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 160) = v16;
    *(_QWORD *)(a1 + 168) = &v16[16 * (v15 >> 4)];
    v17 = v15 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v16, v14, v17);
    *(_QWORD *)(a1 + 160) = &v16[v17];
  }
  *(double *)(a1 + 176) = a4 * a4;
  sub_239441074(v7, 4uLL);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = (*(_QWORD *)(a1 + 112) - v19) >> 4;
  if (v18 <= v20)
  {
    if (v18 < v20)
      *(_QWORD *)(a1 + 112) = v19 + 16 * v18;
  }
  else
  {
    sub_239441074(v8, v18 - v20);
  }
  return a1;
}

void sub_23945E9CC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[20] = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[17] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    v10 = *v2;
    if (!*v2)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  v1[14] = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  v1[11] = v10;
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

void sub_23945EA4C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = &off_250ADBB78;
  v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[16];
  if (v3)
  {
    a1[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[13];
  if (v4)
  {
    a1[14] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23945EAC8(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4;
}

uint64_t sub_23945EAD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t result;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double *v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v4 == v5)
    return 0;
  v7 = (double *)v6;
  result = 0;
  v9 = 0;
  v11 = v7[7];
  v10 = v7[8];
  v12 = v7[2];
  v13 = v7[3];
  v14 = *v7;
  v15 = v7[1];
  v17 = v7[4];
  v16 = v7[5];
  v18 = v7[6];
  if ((unint64_t)((v4 - v5) >> 4) <= 1)
    v19 = 1;
  else
    v19 = (v4 - v5) >> 4;
  v20 = *(double *)(a1 + 176);
  v21 = (double *)(*(_QWORD *)(a1 + 128) + 8);
  v22 = (double *)(*(_QWORD *)(a1 + 152) + 8);
  v23 = *a2;
  do
  {
    while (1)
    {
      v24 = *(v21 - 1);
      v25 = 1.0 / (v10 + *v21 * v16 + v12 * v24);
      v26 = -(*(v22 - 1) - (v18 + *v21 * v13 + v14 * v24) * v25);
      v27 = -(*v22 - (v11 + *v21 * v17 + v15 * v24) * v25);
      v28 = 1 << v9;
      v29 = 8 * (v9 >> 6);
      if (v27 * v27 + v26 * v26 < v20)
        break;
      *(_QWORD *)(v23 + v29) &= ~v28;
      ++v9;
      v21 += 2;
      v22 += 2;
      if (v19 == v9)
        return result;
    }
    *(_QWORD *)(v23 + v29) |= v28;
    result = (result + 1);
    ++v9;
    v21 += 2;
    v22 += 2;
  }
  while (v19 != v9);
  return result;
}

BOOL sub_23945EC14(_QWORD *a1, unsigned int **a2)
{
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  _BOOL8 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const double *v11;
  float64x2_t *v12;
  float64x2_t v13;
  float64x2_t *v14;
  float64x2_t v15;
  unint64_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t *v19;
  float64x2_t v20;
  double v26;
  double v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  uint64_t v35;
  double *v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  const double *v43;
  float64x2_t *v44;
  float64x2_t v45;
  float64x2_t *v46;
  float64x2_t v47;
  unint64_t v48;
  double v49;
  float64x2_t v50;
  double v51;
  float64x2_t *v52;
  float64x2_t v53;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64x2_t v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  double *v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  size_t v72;
  char *v73;
  int v74;
  char *v75;
  char *v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  double *v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  double v100;
  int v101;
  size_t v102;
  float64_t v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  double v109;
  double v111;
  double v113;
  float64x2_t v115;
  double v117;
  float64x2_t v118;
  double v120;
  float64x2_t v121;
  double v123;
  int64x2_t v124;
  int64x2_t v125;
  unint64_t v126;
  float64x2_t v127;
  float64x2_t v128;
  uint64_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  unint64_t v135;
  const double *v136;
  double *v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  uint64_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  unint64_t v146;
  const double *v147;
  double *v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  unint64_t v153;
  BOOL v154;
  BOOL v155;
  BOOL v156;
  BOOL v157;
  BOOL v158;
  uint32x4_t v159;
  uint32x4_t v160;
  BOOL v161;
  BOOL v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  unint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  BOOL v197;
  BOOL v199;
  BOOL v201;
  BOOL v203;
  BOOL v205;
  BOOL v207;
  BOOL v209;
  BOOL v211;
  BOOL v213;
  BOOL v215;
  BOOL v217;
  BOOL v219;
  BOOL v221;
  BOOL v223;
  BOOL v225;
  BOOL v227;
  BOOL v229;
  BOOL v231;
  BOOL v233;
  BOOL v235;
  BOOL v237;
  BOOL v239;
  BOOL v241;
  BOOL v243;
  BOOL v245;
  BOOL v247;
  BOOL v249;
  BOOL v251;
  BOOL v253;
  BOOL v255;
  BOOL v257;
  BOOL v259;
  BOOL v261;
  BOOL v263;
  BOOL v265;
  BOOL v267;
  BOOL v269;
  BOOL v271;
  BOOL v273;
  BOOL v275;
  BOOL v277;
  BOOL v279;
  BOOL v281;
  BOOL v283;
  BOOL v285;
  BOOL v287;
  BOOL v289;
  BOOL v291;
  BOOL v293;
  BOOL v295;
  BOOL v297;
  BOOL v299;
  BOOL v301;
  BOOL v303;
  BOOL v305;
  BOOL v307;
  BOOL v309;
  BOOL v311;
  BOOL v313;
  BOOL v315;
  BOOL v317;
  BOOL v319;
  BOOL v321;
  BOOL v323;
  BOOL v325;
  BOOL v327;
  BOOL v329;
  BOOL v331;
  BOOL v333;
  BOOL v335;
  BOOL v337;
  BOOL v339;
  BOOL v341;
  BOOL v343;
  BOOL v345;
  BOOL v347;
  BOOL v349;
  BOOL v351;
  BOOL v353;
  BOOL v355;
  BOOL v357;
  BOOL v359;
  BOOL v361;
  BOOL v363;
  BOOL v365;
  BOOL v367;
  BOOL v369;
  BOOL v371;
  BOOL v373;
  BOOL v375;
  BOOL v377;
  BOOL v379;
  BOOL v381;
  BOOL v383;
  BOOL v385;
  BOOL v387;
  BOOL v389;
  BOOL v391;
  BOOL v393;
  BOOL v395;
  BOOL v397;
  BOOL v399;
  BOOL v401;
  BOOL v403;
  BOOL v405;
  BOOL v407;
  BOOL v409;
  BOOL v411;
  BOOL v413;
  BOOL v415;
  BOOL v417;
  BOOL v419;
  BOOL v421;
  BOOL v422;
  uint64_t v423;
  float64x2_t *v425;
  const double *v426;
  const double *v427;
  float64x2_t v428;
  float64x2_t v429;
  int v430;
  std::bad_alloc *exception;
  std::bad_alloc *v432;
  std::bad_alloc *v433;
  std::bad_alloc *v434;
  BOOL v435;
  BOOL v436;
  BOOL v437;
  BOOL v438;
  BOOL v439;
  BOOL v440;
  BOOL v441;
  BOOL v442;
  BOOL v443;
  BOOL v444;
  BOOL v445;
  BOOL v446;
  BOOL v447;
  BOOL v448;
  BOOL v449;
  BOOL v450;
  BOOL v451;
  BOOL v452;
  BOOL v453;
  BOOL v454;
  BOOL v455;
  BOOL v456;
  BOOL v457;
  BOOL v458;
  BOOL v459;
  BOOL v460;
  BOOL v461;
  BOOL v462;
  BOOL v463;
  BOOL v464;
  BOOL v465;
  BOOL v466;
  unint64_t v467;
  char *v468;
  BOOL v469;
  BOOL v470;
  BOOL v471;
  BOOL v472;
  BOOL v473;
  BOOL v474;
  BOOL v475;
  BOOL v476;
  BOOL v477;
  BOOL v478;
  BOOL v479;
  BOOL v480;
  BOOL v481;
  BOOL v482;
  BOOL v483;
  BOOL v484;
  BOOL v485;
  BOOL v486;
  BOOL v487;
  BOOL v488;
  BOOL v489;
  BOOL v490;
  BOOL v491;
  BOOL v492;
  BOOL v493;
  BOOL v494;
  BOOL v495;
  BOOL v496;
  BOOL v497;
  BOOL v498;
  BOOL v499;
  BOOL v500;
  BOOL v501;
  BOOL v502;
  BOOL v503;
  BOOL v504;
  BOOL v505;
  BOOL v506;
  BOOL v507;
  BOOL v508;
  BOOL v509;
  BOOL v510;
  BOOL v511;
  BOOL v512;
  BOOL v513;
  BOOL v514;
  BOOL v515;
  BOOL v516;
  BOOL v517;
  BOOL v518;
  BOOL v519;
  BOOL v520;
  BOOL v521;
  BOOL v522;
  BOOL v523;
  BOOL v524;
  BOOL v525;
  BOOL v526;
  BOOL v527;
  BOOL v528;
  BOOL v529;
  BOOL v530;
  BOOL v531;
  BOOL v532;
  int v533;
  char *v534;
  char *v535;
  unint64_t v536;
  char *v537;
  char *v538;
  char *v539;
  unint64_t v540;
  char *v541;
  char *v542;
  char *v543;
  char *v544;
  double v545;
  unint64_t v546;
  int64x2_t v547;
  double v548;
  double v549;
  double v550;
  float64x2_t v551;
  uint64_t v552;
  float64x2_t __dst;
  float64x2_t v554;
  uint64_t v555;
  float64x2_t v556;
  double v557;
  void *memptr[3];
  void *__src;
  int v560;
  int v561;
  void *v562;
  char v563;
  void *v564[2];
  int v565;
  int v566;
  char *v567;
  char *v568;
  uint64_t v569;
  char *v570;
  char *v571;
  uint64_t v572;
  __int128 v573;
  uint64_t v574;
  __int128 v575;
  uint64_t v576;
  int64x2_t v577;
  uint64_t v578;
  float64x2x2_t v579;
  float64x2x2_t v580;
  float64x2x2_t v581;
  float64x2x2_t v582;
  float64x2x2_t v583;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v6 = *a2;
  v5 = a2[1];
  if (v4 > v5 - *a2)
    return 0;
  v8 = v4;
  if (v6 != v5)
  {
    v9 = 0;
    do
    {
      *(_OWORD *)(a1[10] + v9) = *(_OWORD *)(a1[16] + 16 * *v6);
      v10 = *v6++;
      *(_OWORD *)(a1[13] + v9) = *(_OWORD *)(a1[19] + 16 * v10);
      v9 += 16;
    }
    while (v6 != v5);
  }
  v570 = 0;
  v571 = 0;
  v572 = 0;
  v567 = 0;
  v568 = 0;
  v569 = 0;
  v11 = (const double *)a1[10];
  v12 = (float64x2_t *)a1[11];
  if (v11 == (const double *)v12)
  {
    v16 = ((char *)v12 - (char *)v11) >> 4;
    v549 = (double)v16;
    v551 = vdivq_f64((float64x2_t)0, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v16), 0));
    v18 = 0.0;
    if (!v16)
      goto LABEL_15;
    goto LABEL_14;
  }
  v13 = 0uLL;
  v14 = (float64x2_t *)a1[10];
  do
  {
    v15 = *v14++;
    v13 = vaddq_f64(v13, v15);
  }
  while (v14 != v12);
  v16 = ((char *)v12 - (char *)v11) >> 4;
  v549 = (double)v16;
  v17 = vdivq_f64(v13, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v16), 0));
  v18 = 0.0;
  v19 = (float64x2_t *)a1[10];
  do
  {
    v20 = *v19++;
    _D2 = vsubq_f64(v20, v17).f64[1];
    __asm { FMLA            D1, D2, V0.D[1] }
    v18 = v18 + _D1;
  }
  while (v19 != v12);
  v551 = v17;
  if (v16)
  {
LABEL_14:
    sub_239441074((uint64_t *)&v570, v16);
    v11 = (const double *)a1[10];
    v12 = (float64x2_t *)a1[11];
  }
LABEL_15:
  v548 = 1.41421356 / sqrt(v18 / v549);
  v26 = -v548 * v551.f64[0];
  v27 = vmuld_lane_f64(-v548, v551, 1);
  v550 = v26;
  *(double *)&v552 = v27;
  if (v12 != (float64x2_t *)v11)
  {
    v28 = ((char *)v12 - (char *)v11) >> 4;
    v29 = v570;
    if (v28 <= 1)
      v28 = 1;
    if (v28 >= 8)
    {
      v30 = 0;
      v130 = 16 * (v28 - 1);
      if (&v570[v130] < v570 || &v570[v130 + 8] < v570 + 8)
        goto LABEL_20;
      v32 = v26;
      v31 = v27;
      v33 = v548;
      if ((v28 - 1) >> 60)
      {
LABEL_21:
        v34 = v28 - v30;
        v35 = (16 * v30) | 8;
        v36 = (double *)&v29[v35];
        v37 = (double *)((char *)v11 + v35);
        do
        {
          v38 = *(v37 - 1);
          v39 = *v37 * 0.0;
          v40 = v32 + v39 + v33 * v38;
          v41 = v31 + v33 * *v37 + v38 * 0.0;
          v42 = 1.0 / (v39 + v38 * 0.0 + 1.0);
          *(v36 - 1) = v40 * v42;
          *v36 = v41 * v42;
          v36 += 2;
          v37 += 2;
          --v34;
        }
        while (v34);
        goto LABEL_23;
      }
      if (v570 >= (char *)&v11[2 * v28] || v11 >= (const double *)&v570[16 * v28])
      {
        v33 = v548;
        v131 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v548, 0);
        v132 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v26, 0);
        v133 = (float64x2_t)vdupq_lane_s64(v552, 0);
        v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
        __asm { FMOV            V5.2D, #1.0 }
        v135 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v136 = v11;
        v137 = (double *)v570;
        do
        {
          v582 = vld2q_f64(v136);
          v136 += 4;
          v138 = vmulq_f64(v582.val[1], (float64x2_t)0);
          v139 = vaddq_f64(v132, vmlaq_f64(v138, v582.val[0], v131));
          v140 = vaddq_f64(v133, vmlaq_f64(vmulq_n_f64(v582.val[1], v548), (float64x2_t)0, v582.val[0]));
          v582.val[0] = vdivq_f64(_Q5, vaddq_f64(vmlaq_f64(v138, (float64x2_t)0, v582.val[0]), _Q5));
          v583.val[0] = vmulq_f64(v139, v582.val[0]);
          v583.val[1] = vmulq_f64(v140, v582.val[0]);
          vst2q_f64(v137, v583);
          v137 += 4;
          v135 -= 2;
        }
        while (v135);
        v32 = v550;
        v31 = *(double *)&v552;
        if (v28 == v30)
          goto LABEL_23;
        goto LABEL_21;
      }
    }
    v30 = 0;
LABEL_20:
    v32 = v26;
    v31 = v27;
    v33 = v548;
    goto LABEL_21;
  }
LABEL_23:
  v43 = (const double *)a1[13];
  v44 = (float64x2_t *)a1[14];
  if (v43 == (const double *)v44)
  {
    v48 = ((char *)v44 - (char *)v43) >> 4;
    v49 = (double)v48;
    v50 = vdivq_f64((float64x2_t)0, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v48), 0));
    v51 = 0.0;
  }
  else
  {
    v45 = 0uLL;
    v46 = (float64x2_t *)a1[13];
    do
    {
      v47 = *v46++;
      v45 = vaddq_f64(v45, v47);
    }
    while (v46 != v44);
    v48 = ((char *)v44 - (char *)v43) >> 4;
    v49 = (double)v48;
    v50 = vdivq_f64(v45, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v48), 0));
    v51 = 0.0;
    v52 = (float64x2_t *)a1[13];
    do
    {
      v53 = *v52++;
      _D6 = vsubq_f64(v53, v50).f64[1];
      __asm { FMLA            D5, D6, V4.D[1] }
      v51 = v51 + _D5;
    }
    while (v52 != v44);
  }
  *(_QWORD *)&v56 = 0;
  v545 = 1.41421356 / sqrt(v51 / v49);
  v547 = (int64x2_t)vmulq_n_f64(v50, -v545);
  *((double *)&v56 + 1) = v545;
  v573 = *(unint64_t *)&v545;
  v574 = 0;
  v576 = 0;
  v575 = v56;
  v578 = 0x3FF0000000000000;
  v577 = v547;
  v57 = (v568 - v567) >> 4;
  if (v48 <= v57)
  {
    if (v48 < v57)
      v568 = &v567[16 * v48];
  }
  else
  {
    sub_239441074((uint64_t *)&v567, v48 - v57);
    v43 = (const double *)a1[13];
    v44 = (float64x2_t *)a1[14];
  }
  if (v44 != (float64x2_t *)v43)
  {
    v58 = ((char *)v44 - (char *)v43) >> 4;
    v59 = v567;
    if (v58 <= 1)
      v58 = 1;
    if (v58 < 8)
      goto LABEL_38;
    v60 = 0;
    v141 = 16 * (v58 - 1);
    if (&v567[v141] < v567 || &v567[v141 + 8] < v567 + 8)
      goto LABEL_39;
    v62 = v545;
    v61 = v547;
    if ((v58 - 1) >> 60)
    {
LABEL_40:
      v63 = v58 - v60;
      v64 = (16 * v60) | 8;
      v65 = (double *)&v59[v64];
      v66 = (double *)((char *)v43 + v64);
      do
      {
        v67 = *(v66 - 1);
        v68 = *v66 * 0.0;
        v69 = *(double *)v61.i64 + v68 + v62 * v67;
        v70 = *(double *)&v61.i64[1] + v62 * *v66 + v67 * 0.0;
        v71 = 1.0 / (v68 + v67 * 0.0 + 1.0);
        *(v65 - 1) = v69 * v71;
        *v65 = v70 * v71;
        v65 += 2;
        v66 += 2;
        --v63;
      }
      while (v63);
      goto LABEL_42;
    }
    if (v567 < (char *)&v43[2 * v58] && v43 < (const double *)&v567[16 * v58])
    {
LABEL_38:
      v60 = 0;
LABEL_39:
      v62 = v545;
      v61 = v547;
      goto LABEL_40;
    }
    v62 = v545;
    v142 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v545, 0);
    v143 = (float64x2_t)vdupq_lane_s64(v547.i64[0], 0);
    v144 = (float64x2_t)vdupq_laneq_s64(v547, 1);
    v60 = v58 & 0xFFFFFFFFFFFFFFFELL;
    __asm { FMOV            V4.2D, #1.0 }
    v146 = v58 & 0xFFFFFFFFFFFFFFFELL;
    v147 = v43;
    v148 = (double *)v567;
    do
    {
      v581 = vld2q_f64(v147);
      v147 += 4;
      v149 = vmulq_f64(v581.val[1], (float64x2_t)0);
      v150 = vaddq_f64(v143, vmlaq_f64(v149, v581.val[0], v142));
      v151 = vaddq_f64(v144, vmlaq_f64(vmulq_n_f64(v581.val[1], v545), (float64x2_t)0, v581.val[0]));
      v581.val[0] = vdivq_f64(_Q4, vaddq_f64(vmlaq_f64(v149, (float64x2_t)0, v581.val[0]), _Q4));
      v581.val[1] = vmulq_f64(v150, v581.val[0]);
      v152 = vmulq_f64(v151, v581.val[0]);
      vst2q_f64(v148, *(float64x2x2_t *)((char *)&v581 + 16));
      v148 += 4;
      v146 -= 2;
    }
    while (v146);
    v61 = v547;
    if (v58 != v60)
      goto LABEL_40;
  }
LABEL_42:
  v72 = (16 * ((9 * (_DWORD)v8) & 0x7FFFFFFF) + 31) & 0xFFFFFFFE0;
  v564[1] = (void *)(v72 >> 3);
  memptr[0] = 0;
  malloc_type_posix_memalign(memptr, 0x20uLL, v72, 0x100BBD03uLL);
  v73 = (char *)memptr[0];
  v564[0] = memptr[0];
  if (!memptr[0])
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v432 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v432, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
  }
  v74 = 2 * v8;
  v565 = 2 * v8;
  v566 = 9;
  if (18 * (_DWORD)v8)
    bzero(memptr[0], 8 * (18 * v8));
  if (!v8)
    goto LABEL_51;
  v75 = v570;
  v76 = v567;
  v77 = 4 * v8;
  v78 = 12 * v8;
  v79 = 16 * v8;
  v80 = 14 * v8;
  v81 = 8 * v8;
  if (v8 < 0x60)
  {
    v82 = 0;
LABEL_48:
    v83 = v8;
    goto LABEL_49;
  }
  v82 = 0;
  v153 = v8 - 1;
  v154 = __CFADD__(v74, v8 - 1);
  v155 = __CFADD__((_DWORD)v153, 4 * v8);
  v156 = __CFADD__(v78, (_DWORD)v153);
  v157 = __CFADD__(v80, (_DWORD)v153);
  v158 = __CFADD__(v79, (_DWORD)v153);
  v159 = (uint32x4_t)vmvnq_s8((int8x16_t)vmulq_s32(vdupq_n_s32(v8), (int32x4_t)xmmword_239EC6920));
  v160 = (uint32x4_t)vdupq_n_s32(v153);
  v161 = __CFADD__(15 * v8, (_DWORD)v153);
  v162 = __CFADD__(17 * v8, (_DWORD)v153);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32(v160, v159))) & 1) != 0)
    goto LABEL_48;
  if (v161)
    goto LABEL_48;
  if (v154)
    goto LABEL_48;
  if (v155)
    goto LABEL_48;
  if (v156)
    goto LABEL_48;
  if (v157)
    goto LABEL_48;
  if (v158)
    goto LABEL_48;
  if (v162)
    goto LABEL_48;
  v163 = 16 * v153;
  if (&v570[16 * v153] < v570
    || &v570[v163 + 8] < v570 + 8
    || &v567[v163] < v567
    || &v567[v163 + 8] < v567 + 8
    || HIDWORD(v153))
  {
    goto LABEL_48;
  }
  v82 = 0;
  v164 = (unint64_t)&v73[v81];
  v165 = (16 * v8) & 0x7FFFFFFF0;
  v539 = &v73[v165];
  v540 = (unint64_t)&v73[v165 + v81];
  v166 = 32 * (v8 & 0x3FFFFFFF);
  v167 = &v73[v166];
  v168 = (unint64_t)&v73[v166 + v81];
  v533 = v79 - v74;
  v169 = 8 * (12 * v8);
  v170 = &v73[v169];
  v171 = (unint64_t)&v73[v81 + v169];
  v172 = 8 * (14 * v8);
  v173 = &v73[v172];
  v174 = (unint64_t)&v73[8 * v8 + v172];
  v175 = (v8 << 7) & 0x7FFFFFF80;
  v176 = &v73[v175];
  v177 = (unint64_t)&v73[8 * v8 + v175];
  v178 = (56 * v8) & 0x7FFFFFFF8;
  v179 = &v73[v178];
  v543 = v567 + 8;
  v180 = (unint64_t)&v73[8 * v8 + v178];
  v181 = 8 * (9 * v8);
  v182 = &v73[v181];
  v183 = (unint64_t)&v73[8 * v8 + v181];
  v542 = v570 + 8;
  v184 = (88 * v8) & 0x7FFFFFFF8;
  v185 = &v73[v184];
  v546 = v164 + v184;
  v186 = (104 * v8) & 0x7FFFFFFF8;
  v534 = &v73[v186];
  v187 = v164 + v186;
  v467 = v164 + v186;
  v188 = (120 * v8) & 0x7FFFFFFF8;
  v189 = &v73[v188];
  v544 = &v73[v188];
  v190 = &v73[8 * v8 + v188];
  v536 = (unint64_t)v190;
  v191 = 8 * (17 * v8);
  v538 = &v73[v191];
  v192 = (unint64_t)&v73[8 * v8 + v191];
  v193 = 16 * v8 - 8;
  v194 = &v570[v193];
  v537 = &v570[v193];
  v541 = &v570[16 * v8];
  v195 = &v567[v193];
  v535 = v195;
  v468 = &v567[16 * v8];
  v197 = (unint64_t)v73 < v168 && (unint64_t)v167 < v164;
  v532 = v197;
  v199 = (unint64_t)v73 < v171 && (unint64_t)v170 < v164;
  v531 = v199;
  v201 = (unint64_t)v73 < v174 && (unint64_t)v173 < v164;
  v530 = v201;
  v203 = (unint64_t)v73 < v177 && (unint64_t)v176 < v164;
  v529 = v203;
  v205 = (unint64_t)v73 < v180 && (unint64_t)v179 < v164;
  v528 = v205;
  v207 = (unint64_t)v73 < v183 && (unint64_t)v182 < v164;
  v527 = v207;
  v209 = (unint64_t)v73 < v546 && (unint64_t)v185 < v164;
  v526 = v209;
  v211 = (unint64_t)v73 < v187 && (unint64_t)v534 < v164;
  v525 = v211;
  v213 = v73 < v190 && (unint64_t)v189 < v164;
  v524 = v213;
  v215 = (unint64_t)v73 < v192 && (unint64_t)&v73[v191] < v164;
  v523 = v215;
  v217 = v73 < v194 && (unint64_t)v570 < v164;
  v522 = v217;
  v219 = v73 < v541 && (unint64_t)v542 < v164;
  v521 = v219;
  v221 = v73 < v195 && (unint64_t)v567 < v164;
  v520 = v221;
  v223 = v73 < &v567[16 * v8] && (unint64_t)v543 < v164;
  v519 = v223;
  v225 = (unint64_t)v539 < v168 && (unint64_t)v167 < v540;
  v518 = v225;
  v227 = (unint64_t)v539 < v171 && (unint64_t)v170 < v540;
  v517 = v227;
  v229 = (unint64_t)v539 < v174 && (unint64_t)v173 < v540;
  v516 = v229;
  v231 = (unint64_t)v539 < v177 && (unint64_t)v176 < v540;
  v515 = v231;
  v233 = (unint64_t)v539 < v180 && (unint64_t)v179 < v540;
  v514 = v233;
  v235 = (unint64_t)v539 < v183 && (unint64_t)v182 < v540;
  v513 = v235;
  v237 = (unint64_t)v539 < v546 && (unint64_t)v185 < v540;
  v512 = v237;
  v239 = (unint64_t)v539 < v467 && (unint64_t)v534 < v540;
  v511 = v239;
  v241 = v539 < v190 && (unint64_t)v544 < v540;
  v510 = v241;
  v243 = (unint64_t)v539 < v192 && (unint64_t)v538 < v540;
  v509 = v243;
  v245 = v539 < v537 && (unint64_t)v570 < v540;
  v508 = v245;
  v247 = v539 < v541 && (unint64_t)v542 < v540;
  v507 = v247;
  v249 = v539 < v195 && (unint64_t)v567 < v540;
  v506 = v249;
  v251 = v539 < v468 && (unint64_t)v543 < v540;
  v505 = v251;
  v253 = (unint64_t)v167 < v171 && (unint64_t)v170 < v168;
  v504 = v253;
  v255 = (unint64_t)v167 < v174 && (unint64_t)v173 < v168;
  v503 = v255;
  v257 = (unint64_t)v167 < v177 && (unint64_t)v176 < v168;
  v502 = v257;
  v259 = (unint64_t)v167 < v180 && (unint64_t)v179 < v168;
  v501 = v259;
  v261 = (unint64_t)v167 < v183 && (unint64_t)v182 < v168;
  v500 = v261;
  v263 = (unint64_t)v167 < v546 && (unint64_t)v185 < v168;
  v499 = v263;
  v265 = (unint64_t)v167 < v467 && (unint64_t)v534 < v168;
  v498 = v265;
  v267 = v167 < v190 && (unint64_t)v544 < v168;
  v497 = v267;
  v269 = (unint64_t)v167 < v192 && (unint64_t)v538 < v168;
  v496 = v269;
  v271 = v167 < v537 && (unint64_t)v570 < v168;
  v495 = v271;
  v273 = v167 < v541 && (unint64_t)v542 < v168;
  v494 = v273;
  v275 = v167 < v195 && (unint64_t)v567 < v168;
  v493 = v275;
  v277 = v167 < v468 && (unint64_t)v543 < v168;
  v492 = v277;
  v279 = (unint64_t)v170 < v174 && (unint64_t)v173 < v171;
  v491 = v279;
  v281 = (unint64_t)v170 < v177 && (unint64_t)v176 < v171;
  v490 = v281;
  v283 = (unint64_t)v170 < v180 && (unint64_t)v179 < v171;
  v489 = v283;
  v285 = (unint64_t)v170 < v183 && (unint64_t)v182 < v171;
  v488 = v285;
  v287 = (unint64_t)v170 < v546 && (unint64_t)v185 < v171;
  v487 = v287;
  v289 = (unint64_t)v170 < v467 && (unint64_t)v534 < v171;
  v486 = v289;
  v291 = v170 < v190 && (unint64_t)v544 < v171;
  v293 = (unint64_t)v170 < v192 && (unint64_t)v538 < v171;
  v484 = v293;
  v485 = v291;
  v295 = v170 < v537 && (unint64_t)v570 < v171;
  v297 = v170 < v541 && (unint64_t)v542 < v171;
  v482 = v297;
  v483 = v295;
  v299 = v170 < v195 && (unint64_t)v567 < v171;
  v301 = v170 < v468 && (unint64_t)v543 < v171;
  v480 = v301;
  v481 = v299;
  v303 = (unint64_t)v173 < v177 && (unint64_t)v176 < v174;
  v305 = (unint64_t)v173 < v180 && (unint64_t)v179 < v174;
  v478 = v305;
  v479 = v303;
  v307 = (unint64_t)v173 < v183 && (unint64_t)v182 < v174;
  v309 = (unint64_t)v173 < v546 && (unint64_t)v185 < v174;
  v476 = v309;
  v477 = v307;
  v311 = (unint64_t)v173 < v467 && (unint64_t)v534 < v174;
  v313 = v173 < v190 && (unint64_t)v544 < v174;
  v474 = v313;
  v475 = v311;
  v315 = (unint64_t)v173 < v192 && (unint64_t)v538 < v174;
  v317 = v173 < v537 && (unint64_t)v570 < v174;
  v472 = v317;
  v473 = v315;
  v319 = v173 < v541 && (unint64_t)v542 < v174;
  v321 = v173 < v195 && (unint64_t)v567 < v174;
  v470 = v321;
  v471 = v319;
  v323 = v173 < v468 && (unint64_t)v543 < v174;
  v469 = v323;
  v325 = (unint64_t)v176 < v180 && (unint64_t)v179 < v177;
  v327 = (unint64_t)v176 < v183 && (unint64_t)v182 < v177;
  v465 = v327;
  v466 = v325;
  v329 = (unint64_t)v176 < v546 && (unint64_t)v185 < v177;
  v331 = (unint64_t)v176 < v467 && (unint64_t)v534 < v177;
  v463 = v331;
  v464 = v329;
  v333 = v176 < v190 && (unint64_t)v544 < v177;
  v335 = (unint64_t)v176 < v192 && (unint64_t)v538 < v177;
  v461 = v335;
  v462 = v333;
  v337 = v176 < v537 && (unint64_t)v570 < v177;
  v339 = v176 < v541 && (unint64_t)v542 < v177;
  v459 = v339;
  v460 = v337;
  v341 = v176 < v195 && (unint64_t)v567 < v177;
  v343 = v176 < v468 && (unint64_t)v543 < v177;
  v457 = v343;
  v458 = v341;
  v345 = (unint64_t)v179 < v183 && (unint64_t)v182 < v180;
  v347 = (unint64_t)v179 < v546 && (unint64_t)v185 < v180;
  v455 = v347;
  v456 = v345;
  v349 = (unint64_t)v179 < v467 && (unint64_t)v534 < v180;
  v351 = v179 < v190 && (unint64_t)v544 < v180;
  v453 = v351;
  v454 = v349;
  v353 = (unint64_t)v179 < v192 && (unint64_t)v538 < v180;
  v355 = v179 < v537 && (unint64_t)v570 < v180;
  v451 = v355;
  v452 = v353;
  v357 = v179 < v541 && (unint64_t)v542 < v180;
  v359 = v179 < v195 && (unint64_t)v567 < v180;
  v449 = v359;
  v450 = v357;
  v361 = v179 < v468 && (unint64_t)v543 < v180;
  v448 = v361;
  v363 = (unint64_t)v182 < v546 && (unint64_t)v185 < v183;
  v447 = v363;
  v365 = (unint64_t)v182 < v467 && (unint64_t)v534 < v183;
  v446 = v365;
  v367 = v182 < v190 && (unint64_t)v544 < v183;
  v445 = v367;
  v369 = (unint64_t)v182 < v192 && (unint64_t)v538 < v183;
  v444 = v369;
  v371 = v182 < v537 && (unint64_t)v570 < v183;
  v443 = v371;
  v373 = v182 < v541 && (unint64_t)v542 < v183;
  v442 = v373;
  v375 = v182 < v195 && (unint64_t)v567 < v183;
  v441 = v375;
  v377 = v182 < v468 && (unint64_t)v543 < v183;
  v440 = v377;
  v379 = (unint64_t)v185 < v467 && (unint64_t)v534 < v546;
  v439 = v379;
  v381 = v185 < v190 && (unint64_t)v544 < v546;
  v438 = v381;
  v383 = (unint64_t)v185 < v192 && (unint64_t)v538 < v546;
  v437 = v383;
  v385 = v185 < v537 && (unint64_t)v570 < v546;
  v436 = v385;
  v387 = v185 < v541 && (unint64_t)v542 < v546;
  v435 = v387;
  v389 = v185 < v195 && (unint64_t)v567 < v546;
  v391 = v185 < v468 && (unint64_t)v543 < v546;
  v393 = v534 < v190 && (unint64_t)v544 < v467;
  v395 = (unint64_t)v534 < v192 && (unint64_t)v538 < v467;
  v397 = v534 < v537 && (unint64_t)v570 < v467;
  v399 = v534 < v541 && (unint64_t)v542 < v467;
  v401 = v534 < v195 && (unint64_t)v567 < v467;
  v403 = v534 < v468 && (unint64_t)v543 < v467;
  v405 = (unint64_t)v544 < v192 && (unint64_t)v538 < v536;
  v407 = v544 < v537 && (unint64_t)v570 < v536;
  v409 = v544 < v541 && (unint64_t)v542 < v536;
  v411 = v544 < v195 && (unint64_t)v567 < v536;
  v413 = v544 < v468 && (unint64_t)v543 < v536;
  v75 = v570;
  v415 = v538 < v537 && (unint64_t)v570 < v192;
  v417 = v538 < v541 && (unint64_t)v542 < v192;
  v76 = v567;
  v419 = v538 < v535 && (unint64_t)v567 < v192;
  v421 = v538 < v468 && (unint64_t)v543 < v192;
  v422 = (unint64_t)v539 >= v164 || (unint64_t)v73 >= v540;
  if (!v422
    || v532
    || v531
    || v530
    || v529
    || v528
    || v527
    || v526
    || v525
    || v524
    || v523
    || v522
    || v521
    || v520
    || v519
    || v518
    || v517
    || v516
    || v515
    || v514
    || v513
    || v512
    || v511
    || v510
    || v509
    || v508
    || v507
    || v506
    || v505
    || v504
    || v503
    || v502
    || v501
    || v500
    || v499
    || v498
    || v497
    || v496
    || v495
    || v494
    || v493
    || v492
    || v491
    || v490
    || v489
    || v488
    || v487
    || v486
    || v485
    || v484
    || v483
    || v482
    || v481
    || v480
    || v479
    || v478
    || v477
    || v476
    || v475
    || v474
    || v473
    || v472
    || v471
    || v470
    || v469
    || v466
    || v465
    || v464
    || v463
    || v462
    || v461
    || v460
    || v459
    || v458
    || v457
    || v456
    || v455
    || v454
    || v453
    || v452
    || v451
    || v450
    || v449
    || v448
    || v447
    || v446
    || v445
    || v444
    || v443
    || v442
    || v441
    || v440
    || v439
    || v438
    || v437
    || v436
    || v435
    || v389
    || v391
    || v393
    || v395
    || v397
    || v399
    || v401
    || v403
    || v405
    || v407
    || v409
    || v411
    || v413
    || v415
    || v417)
  {
    v83 = v8;
    v74 = 2 * v8;
    v77 = 4 * v8;
    v79 = 16 * v8;
    v80 = v533;
    v78 = 12 * v8;
    LODWORD(v81) = 8 * v8;
  }
  else
  {
    v74 = 2 * v8;
    v80 = v533;
    v83 = v8;
    if (v419)
    {
      v77 = 4 * v8;
      v79 = 16 * v8;
      v78 = 12 * v8;
      LODWORD(v81) = 8 * v8;
    }
    else
    {
      v77 = 4 * v8;
      v79 = 16 * v8;
      v78 = 12 * v8;
      LODWORD(v81) = 8 * v8;
      if (!v421)
      {
        v423 = 0;
        v82 = v8 & 0xFFFFFFFFFFFFFFFELL;
        v83 = v8 + (v8 & 0xFFFFFFFE);
        __asm { FMOV            V0.2D, #-1.0 }
        v425 = (float64x2_t *)v73;
        v426 = (const double *)v567;
        v427 = (const double *)v570;
        do
        {
          v579 = vld2q_f64(v427);
          v427 += 4;
          v580 = vld2q_f64(v426);
          v426 += 4;
          v428 = vnegq_f64(v579.val[0]);
          *v425++ = v428;
          v429 = vnegq_f64(v579.val[1]);
          *(float64x2_t *)&v73[8 * (2 * v8 + v423)] = v429;
          *(_OWORD *)&v73[8 * ((4 * (_DWORD)v8 + (_DWORD)v423) & 0xFFFFFFFE)] = _Q0;
          *(float64x2_t *)&v73[8 * (12 * v8 + v423)] = vmulq_f64(v579.val[0], v580.val[0]);
          *(float64x2_t *)&v73[8 * (v533 + v423)] = vmulq_f64(v579.val[1], v580.val[0]);
          *(float64x2_t *)&v73[8 * (16 * v8 + v423)] = v580.val[0];
          *(float64x2_t *)&v73[8 * (7 * v8 + v423)] = v428;
          *(float64x2_t *)&v73[8 * (9 * v8 + v423)] = v429;
          *(_OWORD *)&v73[8 * (11 * v8 + v423)] = _Q0;
          *(float64x2_t *)&v73[8 * (13 * v8 + v423)] = vmulq_f64(v579.val[0], v580.val[1]);
          *(float64x2_t *)&v73[8 * (15 * v8 + v423)] = vmulq_f64(v579.val[1], v580.val[1]);
          v430 = 17 * v8 + v423;
          v423 += 2;
          *(float64x2_t *)&v73[8 * v430] = v580.val[1];
        }
        while (v82 != v423);
        if (v8 == v82)
          goto LABEL_51;
      }
    }
  }
LABEL_49:
  v84 = 0;
  v85 = v78 + v83;
  v86 = v80 + v83;
  v87 = v79 + v83;
  v88 = v83 + 6 * v8;
  v89 = v83 + v81;
  v90 = v83 + 2 * (v77 + v8);
  v91 = v78 + v82;
  v92 = v79 + v82;
  v93 = v82 + v77;
  v94 = (16 * v82) | 8;
  v95 = (double *)&v75[v94];
  v96 = (double *)&v76[v94];
  do
  {
    v97 = *(v95 - 1);
    v98 = *v95;
    v99 = *(v96 - 1);
    v100 = *v96;
    *(double *)&v73[8 * (v82 + v84)] = -v97;
    *(double *)&v73[8 * (v74 + v82 + v84)] = -v98;
    *(_QWORD *)&v73[8 * (v93 + v84)] = 0xBFF0000000000000;
    *(double *)&v73[8 * (v91 + v84)] = v97 * v99;
    *(double *)&v73[8 * (v80 + v82 + v84)] = v98 * v99;
    *(double *)&v73[8 * (v92 + v84)] = v99;
    *(double *)&v73[8 * (v88 + v84)] = -v97;
    *(double *)&v73[8 * (v89 + v84)] = -v98;
    *(_QWORD *)&v73[8 * (v90 + v84)] = 0xBFF0000000000000;
    *(double *)&v73[8 * (v85 + v84)] = v97 * v100;
    *(double *)&v73[8 * (v86 + v84)] = v98 * v100;
    *(double *)&v73[8 * (v87 + v84++)] = v100;
    v95 += 2;
    v96 += 2;
  }
  while (v8 - v82 != v84);
LABEL_51:
  sub_23945B548((uint64_t)memptr, (uint64_t)v564, 3, 0);
  v7 = v563 != 0;
  if (v563)
  {
    v101 = v561 * v560;
    v102 = 8 * (v561 * v560);
    __dst.f64[0] = 0.0;
    malloc_type_posix_memalign((void **)&__dst, 0x20uLL, (v102 + 31) & 0xFFFFFFFE0, 0x100BBD03uLL);
    v103 = __dst.f64[0];
    if (!*(_QWORD *)&__dst.f64[0])
    {
      v433 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v434 = std::bad_alloc::bad_alloc(v433);
      __cxa_throw(v434, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    if (v101)
      memcpy(*(void **)&__dst.f64[0], __src, v102);
    v104 = v560;
    v105 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
    *(_QWORD *)v105 = *(_QWORD *)(*(_QWORD *)&v103 + 64);
    *(_QWORD *)(v105 + 24) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * (v104 + 8));
    v106 = 2 * v104 + 8;
    *(_QWORD *)(v105 + 48) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * v106);
    *(_QWORD *)(v105 + 8) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * (v106 + v104));
    v107 = 4 * v104 + 8;
    *(_QWORD *)(v105 + 32) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * v107);
    *(_QWORD *)(v105 + 56) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * (v107 + v104));
    *(_QWORD *)(v105 + 16) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * (6 * v104 + 8));
    *(_QWORD *)(v105 + 40) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * (7 * v104 + 8));
    *(_QWORD *)(v105 + 64) = *(_QWORD *)(*(_QWORD *)&v103 + 8 * (8 * v104 + 8));
    sub_239A22B38((uint64_t)&__dst);
    _D2 = v555;
    v109 = *(double *)(v105 + 16);
    _Q7 = *(_OWORD *)v105;
    v111 = *(double *)(v105 + 40);
    _Q17 = *(float64x2_t *)(v105 + 24);
    v113 = *(double *)(v105 + 64);
    _Q19 = *(float64x2_t *)(v105 + 48);
    v115 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(__dst, *(double *)v105), v554, *(float64x2_t *)v105, 1), v556, v109);
    __asm { FMLA            D21, D2, V7.D[1] }
    v117 = _D21 + v557 * v109;
    v118 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(__dst, _Q17.f64[0]), v554, _Q17, 1), v556, v111);
    __asm { FMLA            D21, D2, V17.D[1] }
    v120 = _D21 + v557 * v111;
    v121 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(__dst, _Q19.f64[0]), v554, _Q19, 1), v556, v113);
    __asm { FMLA            D0, D2, V19.D[1] }
    v123 = _D0 + v557 * v113;
    *(double *)v124.i64 = v117 * v548 + v120 * 0.0 + v123 * 0.0;
    v125 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmulq_f64(v115, (float64x2_t)0), v118, v548), (float64x2_t)0, v121);
    *(double *)&v126 = v117 * 0.0 + v120 * v548 + v123 * 0.0;
    v127.f64[0] = v123 + v117 * v550 + v120 * *(double *)&v552;
    v128 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v127.f64[0], 0);
    *(_QWORD *)(v105 + 64) = *(_OWORD *)&vdivq_f64(v127, v127);
    *(float64x2_t *)(v105 + 32) = vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v125, (int8x16_t)v126, 8uLL), v128);
    *(float64x2_t *)(v105 + 48) = vdivq_f64(vaddq_f64(v121, vmlaq_n_f64(vmulq_n_f64(v115, v550), v118, *(double *)&v552)), v128);
    *(float64x2_t *)v105 = vdivq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v115, v548), (float64x2_t)0, v118), (float64x2_t)0, v121), v128);
    *(float64x2_t *)(v105 + 16) = vdivq_f64((float64x2_t)vzip1q_s64(v124, v125), v128);
    free(*(void **)&v103);
  }
  free(v562);
  free(__src);
  free(memptr[0]);
  free(v564[0]);
  if (v567)
  {
    v568 = v567;
    operator delete(v567);
  }
  if (v570)
  {
    v571 = v570;
    operator delete(v570);
  }
  return v7;
}

void sub_2394603EC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;
  void *v5;

  free(v1);
  sub_23945B510((void **)&STACK[0x2F0]);
  free(*(void **)(v2 - 248));
  v4 = *(void **)(v2 - 224);
  if (v4)
  {
    *(_QWORD *)(v2 - 216) = v4;
    operator delete(v4);
    v5 = *(void **)(v2 - 200);
    if (!v5)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v5 = *(void **)(v2 - 200);
    if (!v5)
      goto LABEL_3;
  }
  *(_QWORD *)(v2 - 192) = v5;
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_239460460(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        v4 = v2 - 192;
        free(*(void **)(v2 - 152));
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

_QWORD *sub_2394604BC(_QWORD *a1, _DWORD *a2, unint64_t *a3, char a4, void **a5, char a6, uint64_t a7)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  BOOL v20;
  _QWORD v22[3];
  void **v23[2];

  if (a4)
  {
    v11 = *a3;
    v12 = a2[1];
  }
  else
  {
    LODWORD(v13) = *a2;
    v12 = a2[1];
    if (v12)
      v13 = v13;
    else
      v13 = 0;
    v11 = (*a2 != 0) | (unint64_t)(v13 << 32);
  }
  v14 = (v12 * HIDWORD(v11));
  v15 = (a7 - 1) | ((unint64_t)(a7 - 1) >> 1) | (((a7 - 1) | ((unint64_t)(a7 - 1) >> 1)) >> 2);
  v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
  v17 = v16 | (v16 >> 16) | ((v16 | (v16 >> 16)) >> 32);
  if (v17 + 1 > 8)
    v18 = v17 + 1;
  else
    v18 = 8;
  sub_2399168C0(a1, v14, v18);
  v19 = *(_QWORD *)a2;
  a1[3] = *(_QWORD *)a2;
  a1[4] = v11;
  if (a1[1] && a6)
  {
    if (HIDWORD(v19))
      v20 = (_DWORD)v19 == 0;
    else
      v20 = 1;
    if (v20)
      v19 = 0;
    v22[0] = a1[1];
    v22[1] = v19;
    v22[2] = v11;
    if (HIDWORD(v19) * HIDWORD(v11) == -1)
    {
      sub_239A444D4((uint64_t)"unknown file", 983, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v23[0] = (void **)v22;
    v23[1] = a5;
    sub_2394605F8(v23);
  }
  return a1;
}

void sub_2394605E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239916980(v1);
  _Unwind_Resume(a1);
}

void ***sub_2394605F8(void ***result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  void **v5;
  int v6;
  int v7;
  BOOL v8;
  void **v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;

  v1 = *result;
  v2 = *((unsigned int *)*result + 4);
  if ((_DWORD)v2 == 1)
  {
    v3 = *((unsigned int *)v1 + 5);
    v4 = *((unsigned int *)v1 + 2);
    v5 = result[1];
    if ((_DWORD)v3 == (_DWORD)v4)
    {
      return (void ***)memset(*v1, *(unsigned __int8 *)v5, (*((_DWORD *)v1 + 3) * v3));
    }
    else
    {
      v17 = *((_DWORD *)v1 + 3);
      if ((_DWORD)v4)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (!v18)
      {
        v19 = (char *)*v1;
        v20 = v17 - 1;
        if (v17 != 1)
        {
          do
          {
            memset(v19, *(unsigned __int8 *)v5, v4);
            v19 += v3;
            --v20;
          }
          while (v20);
        }
        return (void ***)memset(v19, *(unsigned __int8 *)v5, v4);
      }
    }
  }
  else
  {
    v6 = *((_DWORD *)v1 + 2);
    v7 = *((_DWORD *)v1 + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = result[1];
      v10 = v6 - 1;
      v11 = *v1;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *((unsigned int *)v1 + 5);
        if (v10)
        {
          for (i = 0; i != v12; ++i)
          {
            v15 = v10;
            v16 = v11;
            do
            {
              *v16 = *(_BYTE *)v9;
              v16 += v2;
              --v15;
            }
            while (v15);
            *v16 = *(_BYTE *)v9;
            v11 += v13;
          }
        }
        else
        {
          do
          {
            *v11 = *(_BYTE *)v9;
            v11 += v13;
            --v12;
          }
          while (v12);
        }
      }
      for (; v10; --v10)
      {
        *v11 = *(_BYTE *)v9;
        v11 += v2;
      }
      *v11 = *(_BYTE *)v9;
    }
  }
  return result;
}

void sub_239460770(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  int v13;
  double *v14;
  size_t v15;
  size_t v16;
  int v17;
  std::bad_alloc *exception;
  std::bad_alloc *v19;
  void *v20;
  size_t v21;
  uint64_t v22;
  void *memptr;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const double **)v6;
  if (*(double **)v6 == v4 || *(double **)v5 == v4)
  {
    v12 = (8 * (*(_DWORD *)(v5 + 20) * *(_DWORD *)(v6 + 20)) + 31) & 0xFFFFFFFE0;
    v21 = v12 >> 3;
    memptr = 0;
    malloc_type_posix_memalign(&memptr, 0x20uLL, v12, 0x100BBD03uLL);
    v20 = memptr;
    if (!memptr)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v19 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v19, (struct type_info *)&unk_250ADB310, (void (*)(void *))MEMORY[0x24BEDB670]);
    }
    v13 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 20);
    LODWORD(v22) = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 20);
    HIDWORD(v22) = v13;
    sub_239460770(&v20, a2);
    v14 = *(double **)a1;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v21;
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v16;
    v20 = v14;
    v21 = v15;
    *(_QWORD *)(a1 + 16) = v22;
    v22 = 0;
    free(v14);
  }
  else
  {
    v9 = *(_DWORD *)(v6 + 16);
    v8 = *(_DWORD *)(v6 + 20);
    if (v9 * v8 && (v11 = *(_DWORD *)(v5 + 16), v10 = *(_DWORD *)(v5 + 20), v10 * v11))
    {
      sub_239A22E14(1, 0, v8, v10, v9, v7, v9, *(double **)v5, *(double *)(a2 + 24), 0.0, v11, v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v17 = *(_DWORD *)(a1 + 20);
      if (v17 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v17 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_2394608D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  free(a13);
  _Unwind_Resume(a1);
}

void sub_2394608E4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 120, a3, a4);
}

void sub_2394608EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  sub_239A444D4(a1, 171, a3, a4);
}

void sub_2394608F4(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10)
{
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  unsigned int v28;
  char v29;
  char v30;
  unsigned __int8 v31;
  char v32;
  char v33;
  char v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  int v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *sig;
  uint64_t v57;
  std::__thread_struct *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  std::mutex *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  int v70;
  BOOL v71;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  char *v81;
  unsigned int v82;
  signed int v83;
  char *v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  std::__libcpp_thread_t t;
  size_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  std::__thread_struct *v104;
  _QWORD *v105;
  int v106;
  std::__libcpp_thread_t v107;
  std::thread *v108;
  std::__libcpp_thread_t v109;
  std::__libcpp_thread_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  std::thread *v115;
  std::__thread_struct *v116;
  _QWORD *v117;
  char *v118;
  char *v119;
  int64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  std::thread *v126;
  char *v127;
  int64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  _opaque_pthread_t *v139;
  std::thread *v140;
  int v141;
  int v142;
  uint64_t *v143;
  int v144;
  unint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  std::thread *v150;
  std::__thread_struct *v151;
  _QWORD *v152;
  char *v153;
  char *v154;
  int64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  std::thread *v161;
  char *v162;
  int64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  _opaque_pthread_t *v174;
  std::thread *v175;
  std::__thread_struct *v176;
  _QWORD *v177;
  int v178;
  _QWORD *v179;
  std::thread *v180;
  std::thread *v181;
  std::thread *v182;
  std::thread *v183;
  _QWORD *v184;
  _opaque_pthread_t *v185;
  uint8x8_t v186;
  unint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  _opaque_pthread_t *v190;
  unint64_t v191;
  int8x8_t v192;
  uint8x8_t v193;
  unint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  char v202;
  std::__shared_weak_count *v203;
  unint64_t *p_shared_owners;
  unint64_t v205;
  char v206;
  uint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  _QWORD *v217;
  _QWORD *v218;
  pthread_t v219;
  _QWORD *v220;
  void *v221;
  _QWORD *v222;
  _QWORD *v223;
  std::__libcpp_thread_t v224;
  std::thread *v225;
  std::thread *v226;
  void *v227;
  std::thread *v228;
  std::thread *v229;
  void *v230;
  _QWORD *v231;
  void *v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  char *v236;
  char *v237;
  void *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  _QWORD *v242;
  void *v243;
  _QWORD *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  char *v248;
  char *v249;
  void *v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  void *v256;
  _QWORD *v257;
  void *v258;
  _QWORD *v259;
  _QWORD *v260;
  void *v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v269;
  _QWORD *v270;
  void *v272[2];
  char v273;
  char *v274;
  std::__shared_weak_count *v275;
  pthread_t v276;
  pthread_t v277[2];
  void *v278[2];
  int v279;
  void *v280[2];
  void *v281[2];
  int v282;
  std::thread v283[2];
  void *v284[2];
  int v285;
  int v286;
  void *v287;
  std::thread *v288;
  unint64_t v289;
  void *v290;
  std::thread *v291;
  unint64_t v292;
  void *v293[2];
  void *v294[2];
  int v295;
  char *v296;
  std::__shared_weak_count *v297;
  void *v298;
  char *v299;
  void *v300;
  char *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void *v307[2];
  void *v308[2];
  int v309;
  pthread_t v310;
  void *v311[2];
  void *v312[2];
  int v313;
  void *v314[2];
  void *v315[2];
  int v316;
  char v317;
  char v318;
  char v319;
  char v320;
  char v321;
  unsigned __int8 v322;
  char v323;
  BOOL v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  std::thread v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  pthread_cond_t v336;
  pthread_cond_t v337;
  pthread_mutex_t v338;
  std::mutex v339;
  std::mutex *v340;
  uint64_t v341;
  pthread_cond_t v342;
  pthread_cond_t v343;
  pthread_mutex_t v344;
  void *__p;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  char v349;
  uint64_t v350;
  uint64_t v351;
  pthread_cond_t v352;
  pthread_cond_t v353;
  pthread_mutex_t v354;
  _BYTE v355[24];
  _BYTE *v356;
  _OWORD v357[35];
  _QWORD v358[3];
  _QWORD *v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  _QWORD v363[3];
  _QWORD *v364;
  uint64_t v365;

  v365 = *MEMORY[0x24BDAC8D0];
  v327 = a9;
  v328 = a10;
  if (!a1[12])
    sub_239EBEBA8();
  v326 = 0;
  v325 = 0;
  if (!a4[3])
    goto LABEL_22;
  v16 = (uint64_t **)a1[59];
  if (!v16)
    goto LABEL_43;
  do
  {
    __p = v16[2];
    v17 = a4[3];
    if (!v17)
      sub_2394172E0();
    (*(void (**)(_OWORD *__return_ptr, uint64_t, void **))(*(_QWORD *)v17 + 48))(v357, v17, &__p);
    if (!*(_QWORD *)&v357[0])
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v357[0] + 1);
      if (*((_QWORD *)&v357[0] + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v357[0] + 1) + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      goto LABEL_6;
    }
    v18 = *(int *)(*(_QWORD *)&v357[0] + 16);
    v325 = *(_DWORD *)(*(_QWORD *)&v357[0] + 20);
    v326 = v18;
    v19 = (*(_DWORD *)(*(_QWORD *)&v357[0] + 8) | v18) == 0;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v357[0] + 1);
    if (*((_QWORD *)&v357[0] + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v357[0] + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (!v19)
      break;
LABEL_6:
    v16 = (uint64_t **)*v16;
  }
  while (v16);
  if (!v326)
  {
LABEL_43:
    if ((_BYTE)v328)
      sub_2394202DC((_QWORD *)(v327 + 192), 3002);
    return;
  }
  if (v325)
  {
    v26 = 0;
    v27 = 0;
    v28 = *(unsigned __int8 *)(a2 + 128);
    goto LABEL_23;
  }
LABEL_22:
  v28 = *(unsigned __int8 *)(a2 + 128);
  v27 = v28 < 2;
  v26 = 1;
LABEL_23:
  v324 = v27;
  if (v28 == 3)
    v29 = v26;
  else
    v29 = 0;
  v323 = v29;
  v30 = v26 ^ 1;
  if (v28 == 5)
    v31 = v26 ^ 1;
  else
    v31 = 0;
  v322 = v31;
  if ((v28 & 0xFB) != 0)
    v32 = 0;
  else
    v32 = v26 ^ 1;
  v321 = v32;
  if (v28 != 2)
    v30 = 0;
  v320 = v30;
  if (v28 == 6)
    v33 = v26;
  else
    v33 = 0;
  v319 = v33;
  if (v28 == 7)
    v34 = v26;
  else
    v34 = 0;
  v318 = v34;
  v317 = v33 | v34;
  v35 = (_QWORD *)a4[3];
  if (v35)
  {
    if (v35 == a4)
    {
      v359 = v358;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v358);
    }
    else
    {
      v359 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v35 + 16))(v35);
    }
  }
  else
  {
    v359 = 0;
  }
  *(_QWORD *)&v360 = &v327;
  *((_QWORD *)&v360 + 1) = a1;
  *(_QWORD *)&v361 = &v325;
  *((_QWORD *)&v361 + 1) = &v326;
  v362 = a2;
  v364 = 0;
  v36 = operator new(0x50uLL);
  v37 = v36;
  *v36 = &off_250ADBBC8;
  if (v359)
  {
    if (v359 == v358)
    {
      v36[4] = v36 + 1;
      (*(void (**)(_QWORD *))(v358[0] + 24))(v358);
    }
    else
    {
      v36[4] = v359;
      v359 = 0;
    }
  }
  else
  {
    v36[4] = 0;
  }
  v38 = v361;
  *(_OWORD *)(v37 + 5) = v360;
  *(_OWORD *)(v37 + 7) = v38;
  v37[9] = v362;
  v364 = v37;
  v39 = v359;
  if (v359 == v358)
  {
    v40 = 4;
    v39 = v358;
LABEL_57:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v359)
  {
    v40 = 5;
    goto LABEL_57;
  }
  v269 = a4;
  v267 = a7;
  *(_OWORD *)v314 = 0u;
  *(_OWORD *)v315 = 0u;
  v316 = 1065353216;
  *(_OWORD *)v311 = 0u;
  *(_OWORD *)v312 = 0u;
  v313 = 1065353216;
  v41 = (_QWORD *)a3[2];
  if (v41)
  {
    v42 = 0;
    v43 = 0;
    do
    {
      v44 = (uint64_t)(v41[4] - v41[3]) >> 3;
      *(_QWORD *)&v357[0] = v41[2];
      *((_QWORD *)&v357[0] + 1) = v44;
      sub_2394654E0((uint64_t)v314, (unint64_t *)v357, v357);
      sub_239465800((uint64_t)v311, v41 + 2, v41 + 2);
      v45 = (_QWORD *)v41[3];
      v46 = (_QWORD *)v41[4];
      while (v45 != v46)
      {
        *(_QWORD *)&v357[0] = 0;
        *(_QWORD *)&v357[0] = *v45;
        sub_239465800((uint64_t)v311, (unint64_t *)v357, v357);
        ++v42;
        ++v45;
      }
      v43 += v44;
      v41 = (_QWORD *)*v41;
    }
    while (v41);
  }
  else
  {
    v43 = 0;
    v42 = 0;
  }
  sub_2396FD800(a8, (uint64_t)v355);
  __p = (void *)0x42C8000000000000;
  sub_2396FCC68(v357, v43 + 5, v355, &__p, 1.0);
  v47 = v356;
  if (v356 == v355)
  {
    v48 = 4;
    v47 = v355;
LABEL_70:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  else if (v356)
  {
    v48 = 5;
    goto LABEL_70;
  }
  if (!v42)
  {
    HIBYTE(v346) = 0;
    LOBYTE(__p) = 0;
    sub_2396FCC6C((uint64_t)v357, (uint64_t)&__p);
    if (SHIBYTE(v346) < 0)
      operator delete(__p);
    sub_2396FCD14((uint64_t)v357);
    v51 = v312[0];
    if (v312[0])
      goto LABEL_450;
    goto LABEL_451;
  }
  HIBYTE(v346) = 0;
  LOBYTE(__p) = 0;
  sub_2396FCDAC((uint64_t)v357, (__int128 *)&__p, 5);
  if (SHIBYTE(v346) < 0)
    operator delete(__p);
  v49 = *(_DWORD *)(a2 + 332);
  if (v49 < 0)
    v49 = 99999;
  LODWORD(__p) = v49;
  v346 = 0u;
  v347 = 0u;
  v348 = 0u;
  v349 = 0;
  v351 = 0;
  v350 = 0;
  sub_2397A1618(&v354);
  v50 = (int)__p;
  if (__p > 0x7FFFFFFE)
  {
    v50 = 0x7FFFFFFF;
  }
  else if (__p < 2)
  {
    v50 = 1;
  }
  LODWORD(__p) = v50;
  pthread_cond_init(&v352, 0);
  pthread_cond_init(&v353, 0);
  v339.__m_.__sig = a2;
  *(_QWORD *)v339.__m_.__opaque = a3;
  *(_QWORD *)&v339.__m_.__opaque[8] = &__p;
  *(_QWORD *)&v339.__m_.__opaque[16] = &v317;
  *(_QWORD *)&v339.__m_.__opaque[24] = &v319;
  v52 = &v339.__m_.__opaque[32];
  v53 = (uint64_t)v364;
  v270 = a8;
  if (v364)
  {
    if (v364 != v363)
    {
      v53 = (*(uint64_t (**)(void))(*v364 + 16))();
      goto LABEL_87;
    }
    v340 = (std::mutex *)&v339.__m_.__opaque[32];
    (*(void (**)(_QWORD *, char *))(v363[0] + 24))(v363, &v339.__m_.__opaque[32]);
  }
  else
  {
LABEL_87:
    v340 = (std::mutex *)v53;
  }
  v54 = &v341;
  v55 = v270[3];
  if (v55)
  {
    if ((_QWORD *)v55 != v270)
    {
      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
      goto LABEL_92;
    }
    *(_QWORD *)&v342.__opaque[8] = &v341;
    (*(void (**)(_QWORD *, uint64_t *))(*v270 + 24))(v270, &v341);
  }
  else
  {
LABEL_92:
    *(_QWORD *)&v342.__opaque[8] = v55;
  }
  sig = &v342.__opaque[16];
  v57 = v270[7];
  if (v57)
  {
    if ((_QWORD *)v57 != v270 + 4)
    {
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
      goto LABEL_97;
    }
    v343.__sig = (uint64_t)&v342.__opaque[16];
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v57 + 24))(v57, &v342.__opaque[16]);
  }
  else
  {
LABEL_97:
    v343.__sig = v57;
  }
  *(_QWORD *)v343.__opaque = v357;
  *(_QWORD *)&v343.__opaque[8] = a5;
  *(_QWORD *)&v343.__opaque[16] = a6;
  v58 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v58);
  v59 = operator new();
  v60 = v59;
  *(_QWORD *)v59 = v58;
  v61 = *(_OWORD *)&v339.__m_.__opaque[8];
  *(_OWORD *)(v59 + 8) = *(_OWORD *)&v339.__m_.__sig;
  *(_OWORD *)(v59 + 24) = v61;
  v62 = v340;
  *(_QWORD *)(v59 + 40) = *(_QWORD *)&v339.__m_.__opaque[24];
  if (v62)
  {
    if (v62 == (std::mutex *)&v339.__m_.__opaque[32])
    {
      *(_QWORD *)(v59 + 72) = v59 + 48;
      (*(void (**)(char *))(*(_QWORD *)&v339.__m_.__opaque[32] + 24))(&v339.__m_.__opaque[32]);
    }
    else
    {
      *(_QWORD *)(v59 + 72) = v62;
      v340 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v59 + 72) = 0;
  }
  if (*(_QWORD *)&v342.__opaque[8])
  {
    if (*(uint64_t **)&v342.__opaque[8] == &v341)
    {
      *(_QWORD *)(v60 + 104) = v60 + 80;
      (*(void (**)(uint64_t *))(v341 + 24))(&v341);
    }
    else
    {
      *(_QWORD *)(v60 + 104) = *(_QWORD *)&v342.__opaque[8];
      *(_QWORD *)&v342.__opaque[8] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v60 + 104) = 0;
  }
  if (v343.__sig)
  {
    if ((char *)v343.__sig == &v342.__opaque[16])
    {
      *(_QWORD *)(v60 + 136) = v60 + 112;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v342.__opaque[16] + 24))(&v342.__opaque[16], v60 + 112);
    }
    else
    {
      *(_QWORD *)(v60 + 136) = v343.__sig;
      v343.__sig = 0;
    }
  }
  else
  {
    *(_QWORD *)(v60 + 136) = 0;
  }
  *(_OWORD *)(v60 + 144) = *(_OWORD *)v343.__opaque;
  *(_QWORD *)(v60 + 160) = *(_QWORD *)&v343.__opaque[16];
  v63 = pthread_create(&v310, 0, (void *(__cdecl *)(void *))sub_239465D54, (void *)v60);
  if (v63)
  {
    std::__throw_system_error(v63, "thread constructor failed");
LABEL_478:
    __break(1u);
    return;
  }
  if ((char *)v343.__sig == &v342.__opaque[16])
  {
    v64 = 4;
LABEL_119:
    (*(void (**)(char *))(*(_QWORD *)sig + 8 * v64))(sig);
  }
  else if (v343.__sig)
  {
    v64 = 5;
    sig = (char *)v343.__sig;
    goto LABEL_119;
  }
  if (*(uint64_t **)&v342.__opaque[8] == &v341)
  {
    v65 = 4;
LABEL_124:
    (*(void (**)(uint64_t *))(*v54 + 8 * v65))(v54);
  }
  else if (*(_QWORD *)&v342.__opaque[8])
  {
    v65 = 5;
    v54 = *(uint64_t **)&v342.__opaque[8];
    goto LABEL_124;
  }
  if (v340 == (std::mutex *)&v339.__m_.__opaque[32])
  {
    v67 = 4;
    v66 = (uint64_t)v270;
LABEL_129:
    (*(void (**)(char *))(*(_QWORD *)v52 + 8 * v67))(v52);
  }
  else
  {
    v66 = (uint64_t)v270;
    if (v340)
    {
      v67 = 5;
      v52 = (char *)v340;
      goto LABEL_129;
    }
  }
  *(_OWORD *)v307 = 0u;
  *(_OWORD *)v308 = 0u;
  v309 = 1065353216;
  v68 = (uint64_t *)a1[11];
  if (v68)
  {
    while (2)
    {
      v329.__t_ = (std::__libcpp_thread_t)*((unsigned int *)v68 + 4);
      v339.__m_.__sig = (uint64_t)&v329;
      v69 = sub_23946D130((uint64_t)v307, (unint64_t *)&v329, (uint64_t)&unk_239EC6E98, &v339);
      v70 = *(unsigned __int8 *)(a2 + 24);
      if (*(_BYTE *)(a2 + 24))
        v70 = *((_BYTE *)v68 + 257) != 0;
      *((_BYTE *)v69 + 24) = v70;
      if (*(_BYTE *)(a2 + 296))
        v71 = 0;
      else
        v71 = *(_BYTE *)(a2 + 297) == 0;
      if (v71 && *(_BYTE *)(a2 + 298) == 0)
      {
        v73 = 0;
        *((_BYTE *)v69 + 25) = 0;
        v74 = v328;
        if (v70)
          goto LABEL_145;
      }
      else
      {
        v73 = *((unsigned __int8 *)v68 + 260);
        if (*((_BYTE *)v68 + 260))
          v73 = *((_BYTE *)v68 + 261) != 0;
        *((_BYTE *)v69 + 25) = v73;
        v74 = v328;
        if (v70)
        {
LABEL_145:
          if (!v74)
            goto LABEL_132;
          *(_BYTE *)(v327 + 264) = 1;
          if (!*((_BYTE *)v69 + 25))
            goto LABEL_132;
          goto LABEL_150;
        }
      }
      if (!v73)
        goto LABEL_132;
LABEL_150:
      if (v74)
        *(_BYTE *)(v327 + 266) = 1;
LABEL_132:
      v68 = (uint64_t *)*v68;
      if (!v68)
        break;
      continue;
    }
  }
  if (sub_2396FD7B0(v66))
  {
    v339.__m_.__opaque[15] = 0;
    LOBYTE(v339.__m_.__sig) = 0;
    sub_2396FCC6C((uint64_t)v357, (uint64_t)&v339);
    if (v339.__m_.__opaque[15] < 0)
      operator delete((void *)v339.__m_.__sig);
    goto LABEL_445;
  }
  v75 = *(_QWORD *)(a2 + 8);
  v305 = *(_QWORD *)(a2 + 16);
  v306 = v75;
  v76 = *(_QWORD *)(a2 + 304);
  v303 = *(_QWORD *)(a2 + 312);
  v304 = v76;
  v300 = 0;
  v301 = 0;
  v302 = 0;
  sub_2397A98A4(&v298);
  v77 = *(_QWORD **)(a2 + 32);
  v78 = *(_QWORD **)(a2 + 40);
  while (v77 != v78)
  {
    if (*v77 < (unint64_t)((v299 - (_BYTE *)v298) >> 4))
    {
      v80 = (char *)v298 + 16 * *v77;
      v81 = v301;
      if ((unint64_t)v301 >= v302)
      {
        v79 = sub_23946D458((char **)&v300, (uint64_t)v80);
      }
      else
      {
        sub_23946D5E0(v301, (uint64_t)v80);
        v79 = v81 + 16;
      }
      v301 = v79;
    }
    ++v77;
  }
  if (v301 != v300)
    goto LABEL_165;
  sub_2397A9868((std::__shared_weak_count_vtbl **)&v339);
  v88 = v301;
  if ((unint64_t)v301 >= v302)
  {
    v90 = sub_23946D854((char **)&v300, (uint64_t)&v339);
    v91 = *(std::__shared_weak_count **)v339.__m_.__opaque;
    v301 = v90;
    if (*(_QWORD *)v339.__m_.__opaque)
    {
      v92 = (unint64_t *)(*(_QWORD *)v339.__m_.__opaque + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
  }
  else
  {
    *(_OWORD *)v301 = *(_OWORD *)&v339.__m_.__sig;
    v301 = v88 + 16;
  }
  if (v301 != v300)
  {
LABEL_165:
    v82 = *(_DWORD *)a2;
    if (!*(_DWORD *)a2)
      v82 = std::thread::hardware_concurrency();
    if (v82 <= 3)
      v83 = 3;
    else
      v83 = v82;
    v84 = (char *)operator new(0x40uLL);
    *((_QWORD *)v84 + 1) = 0;
    *((_QWORD *)v84 + 2) = 0;
    *(_QWORD *)v84 = &off_250ADBF90;
    *((_QWORD *)v84 + 7) = 0;
    v85 = 0uLL;
    *(_OWORD *)(v84 + 24) = 0u;
    *(_OWORD *)(v84 + 40) = 0u;
    *((_DWORD *)v84 + 14) = 1065353216;
    v296 = v84 + 24;
    v297 = (std::__shared_weak_count *)v84;
    if (v83 < 5)
    {
      v89 = 1;
      v87 = 1;
    }
    else
    {
      if (v324 | v322)
      {
        v87 = (v301 - (_BYTE *)v300) >> 4;
      }
      else
      {
        if ((unint64_t)(v83 - 2) < 2)
          v86 = 1;
        else
          v86 = (unint64_t)(v83 - 2) >> 1;
        if (v321)
          v87 = v86;
        else
          v87 = 1;
      }
      v89 = v83 - v87 - 3;
    }
    if (!v87 || !v89)
    {
      sub_239A444D4((uint64_t)"unknown file", 427, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
    v266 = v89;
    *(_OWORD *)v293 = 0uLL;
    *(_OWORD *)v294 = 0uLL;
    v295 = 1065353216;
    if (v321)
    {
      memset(v339.__m_.__opaque, 0, sizeof(v339.__m_.__opaque));
      v339.__m_.__sig = 850045863;
      LOWORD(v280[0]) = 1052;
      *(void **)((char *)v280 + 4) = (void *)0x3E99999A00000064;
      HIDWORD(v280[1]) = 500;
      LOWORD(v281[0]) = 257;
      BYTE2(v281[0]) = 0;
      v94 = (unint64_t)v312[1];
      v330 = 0uLL;
      v329.__t_ = 0;
      if (v312[1])
        sub_23946DAD4((uint64_t)&v329, (unint64_t)v312[1]);
      v95 = v312[0];
      if (v312[0])
      {
        t = v329.__t_;
        do
        {
          t->__sig = v95[2];
          t = (std::__libcpp_thread_t)((char *)t + 8);
          v95 = (_QWORD *)*v95;
        }
        while (v95);
      }
      v283[0].__t_ = 0;
      v283[1].__t_ = 0;
      v284[0] = 0;
      if (v83 < 0)
        sub_2394189F8();
      v264 = a2;
      v265 = v87;
      v97 = 8 * v83;
      v283[0].__t_ = (std::__libcpp_thread_t)operator new(v97);
      v284[0] = (char *)v283[0].__t_ + v97;
      bzero(v283[0].__t_, v97);
      v98 = v83;
      v99 = 0;
      v100 = 0;
      v283[1].__t_ = (std::__libcpp_thread_t)((char *)v283[0].__t_ + v97);
      v101 = v98;
      v102 = 8 * v98;
      while (1)
      {
        v103 = v94;
        if (v102 - 8 != v100)
          v103 = (v94 + v99) / v101;
        v104 = (std::__thread_struct *)operator new();
        std::__thread_struct::__thread_struct(v104);
        v105 = (_QWORD *)operator new();
        *v105 = v104;
        v105[1] = &v329;
        v105[2] = v269;
        v105[3] = v280;
        v105[4] = &v339;
        v105[5] = v293;
        v105[6] = v99 / v101;
        v105[7] = v103;
        v106 = pthread_create(v277, 0, (void *(__cdecl *)(void *))sub_23946DC70, v105);
        if (v106)
          break;
        if (*(uint64_t *)((char *)&v283[0].__t_->__sig + v100))
          std::terminate();
        *(pthread_t *)((char *)&v283[0].__t_->__sig + v100) = v277[0];
        v277[0] = 0;
        std::thread::~thread((std::thread *)v277);
        v100 += 8;
        v99 += v94;
        if (v102 == v100)
        {
          v108 = (std::thread *)v283[0].__t_;
          v107 = v283[1].__t_;
          v66 = (uint64_t)v270;
          a2 = v264;
          v87 = v265;
          if (v283[0].__t_ != v283[1].__t_)
          {
            do
              std::thread::join(v108++);
            while (v108 != (std::thread *)v107);
            v108 = (std::thread *)v283[0].__t_;
          }
          if (v108)
          {
            v109 = v283[1].__t_;
            v110 = (std::__libcpp_thread_t)v108;
            if ((std::thread *)v283[1].__t_ != v108)
            {
              do
                std::thread::~thread((std::thread *)&v109[-1].__opaque[8168]);
              while (v109 != (std::__libcpp_thread_t)v108);
              v110 = v283[0].__t_;
            }
            v283[1].__t_ = (std::__libcpp_thread_t)v108;
            operator delete(v110);
          }
          if (v329.__t_)
          {
            *(std::thread *)&v330 = v329;
            operator delete(v329.__t_);
          }
          std::mutex::~mutex(&v339);
          v85 = 0uLL;
          goto LABEL_220;
        }
      }
LABEL_467:
      std::__throw_system_error(v106, "thread constructor failed");
      goto LABEL_478;
    }
LABEL_220:
    v111 = *(_DWORD *)(a2 + 332);
    if (v111 < 0)
      v111 = 99999;
    LODWORD(v339.__m_.__sig) = v111;
    *(_OWORD *)v339.__m_.__opaque = v85;
    *(_OWORD *)&v339.__m_.__opaque[16] = v85;
    *(_OWORD *)&v339.__m_.__opaque[32] = v85;
    v339.__m_.__opaque[48] = 0;
    v341 = 0;
    v340 = 0;
    sub_2397A1618(&v344);
    v112 = v339.__m_.__sig;
    if (LODWORD(v339.__m_.__sig) > 0x7FFFFFFE)
    {
      v112 = 0x7FFFFFFF;
    }
    else if (LODWORD(v339.__m_.__sig) < 2)
    {
      v112 = 1;
    }
    LODWORD(v339.__m_.__sig) = v112;
    pthread_cond_init(&v342, 0);
    pthread_cond_init(&v343, 0);
    v113 = 0;
    if (v87 <= 1)
      v114 = 1;
    else
      v114 = v87;
    v290 = 0;
    v291 = 0;
    v292 = 0;
    while (1)
    {
      v116 = (std::__thread_struct *)operator new();
      std::__thread_struct::__thread_struct(v116);
      v117 = (_QWORD *)operator new();
      *v117 = v116;
      v117[1] = v113;
      v117[2] = a2;
      v117[3] = &__p;
      v117[4] = &v323;
      v117[5] = &v326;
      v117[6] = &v320;
      v117[7] = &v324;
      v117[8] = &v300;
      v117[9] = &v327;
      v117[10] = &v322;
      v117[11] = &v321;
      v117[12] = &v317;
      v117[13] = v66;
      v117[14] = v357;
      v117[15] = &v318;
      v117[16] = &v339;
      v117[17] = a1;
      v117[18] = v307;
      v117[19] = &v304;
      v117[20] = v293;
      v106 = pthread_create(&v329.__t_, 0, (void *(__cdecl *)(void *))sub_23946E354, v117);
      if (v106)
        goto LABEL_467;
      v118 = (char *)v291;
      if ((unint64_t)v291 < v292)
      {
        v291->__t_ = v329.__t_;
        v329.__t_ = 0;
        v115 = (std::thread *)(v118 + 8);
        goto LABEL_231;
      }
      v119 = (char *)v290;
      v120 = (char *)v291 - (_BYTE *)v290;
      v121 = ((char *)v291 - (_BYTE *)v290) >> 3;
      v122 = v121 + 1;
      if ((unint64_t)(v121 + 1) >> 61)
        sub_2394189F8();
      v123 = v292 - (_QWORD)v290;
      if ((uint64_t)(v292 - (_QWORD)v290) >> 2 > v122)
        v122 = v123 >> 2;
      v124 = (unint64_t)v123 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v122;
      if (v124)
      {
        if (v124 >> 61)
          sub_239418A80();
        v125 = (char *)operator new(8 * v124);
      }
      else
      {
        v125 = 0;
      }
      v126 = (std::thread *)&v125[8 * v121];
      v127 = &v125[8 * v124];
      v126->__t_ = v329.__t_;
      v115 = v126 + 1;
      v329.__t_ = 0;
      v128 = v118 - v119;
      if (v118 != v119)
        break;
      v290 = &v125[8 * v121];
      v291 = v126 + 1;
      v292 = (unint64_t)v127;
      v66 = (uint64_t)v270;
LABEL_258:
      if (v118)
        goto LABEL_259;
LABEL_231:
      v291 = v115;
      std::thread::~thread(&v329);
      if (++v113 == v114)
      {
        v141 = *(_DWORD *)(a2 + 332);
        if (v141 < 0)
          v141 = 99999;
        LODWORD(v329.__t_) = v141;
        v330 = 0u;
        v331 = 0u;
        v332 = 0u;
        v333 = 0;
        v335 = 0;
        v334 = 0;
        sub_2397A1618(&v338);
        v142 = (int)v329.__t_;
        if (LODWORD(v329.__t_) > 0x7FFFFFFE)
        {
          v142 = 0x7FFFFFFF;
        }
        else if (LODWORD(v329.__t_) < 2)
        {
          v142 = 1;
        }
        LODWORD(v329.__t_) = v142;
        pthread_cond_init(&v336, 0);
        pthread_cond_init(&v337, 0);
        v287 = 0;
        v288 = 0;
        v289 = 0;
        v143 = (uint64_t *)a1[11];
        if (v143)
        {
          v144 = -1;
          v145 = v266;
          do
          {
            v146 = *((_DWORD *)v143 + 55);
            if ((v146 & 0x80000000) == 0)
            {
              v147 = v144 >= v146 ? *((_DWORD *)v143 + 55) : v144;
              v144 = v144 == -1 ? *((_DWORD *)v143 + 55) : v147;
              if (!v144)
                break;
            }
            v143 = (uint64_t *)*v143;
          }
          while (v143);
        }
        else
        {
          v144 = -1;
          v145 = v266;
        }
        v148 = 0;
        v286 = v144;
        if (v145 <= 1)
          v149 = 1;
        else
          v149 = v145;
        while (1)
        {
          v151 = (std::__thread_struct *)operator new();
          std::__thread_struct::__thread_struct(v151);
          v152 = (_QWORD *)operator new();
          *v152 = v151;
          v152[1] = a2;
          v152[2] = &v339;
          v152[3] = v66;
          v152[4] = v357;
          v152[5] = &v329;
          v152[6] = a1;
          v152[7] = v307;
          v152[8] = &v286;
          v152[9] = &v306;
          v152[10] = &v305;
          v152[11] = &v303;
          v152[12] = &v327;
          v106 = pthread_create(&v283[0].__t_, 0, (void *(__cdecl *)(void *))sub_239471E60, v152);
          if (v106)
            goto LABEL_467;
          v153 = (char *)v288;
          if ((unint64_t)v288 < v289)
          {
            v288->__t_ = (std::__libcpp_thread_t)v283[0];
            v283[0].__t_ = 0;
            v150 = (std::thread *)(v153 + 8);
            goto LABEL_283;
          }
          v154 = (char *)v287;
          v155 = (char *)v288 - (_BYTE *)v287;
          v156 = ((char *)v288 - (_BYTE *)v287) >> 3;
          v157 = v156 + 1;
          if ((unint64_t)(v156 + 1) >> 61)
            sub_2394189F8();
          v158 = v289 - (_QWORD)v287;
          if ((uint64_t)(v289 - (_QWORD)v287) >> 2 > v157)
            v157 = v158 >> 2;
          v159 = (unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v157;
          if (v159)
          {
            if (v159 >> 61)
              sub_239418A80();
            v160 = (char *)operator new(8 * v159);
          }
          else
          {
            v160 = 0;
          }
          v161 = (std::thread *)&v160[8 * v156];
          v162 = &v160[8 * v159];
          v161->__t_ = (std::__libcpp_thread_t)v283[0];
          v150 = v161 + 1;
          v283[0].__t_ = 0;
          v163 = v153 - v154;
          if (v153 != v154)
            break;
          v287 = &v160[8 * v156];
          v288 = v161 + 1;
          v289 = (unint64_t)v162;
          v66 = (uint64_t)v270;
LABEL_310:
          if (v153)
            goto LABEL_311;
LABEL_283:
          v288 = v150;
          std::thread::~thread(v283);
          if (++v148 == v149)
          {
            *(_OWORD *)&v283[0].__t_ = 0u;
            *(_OWORD *)v284 = 0u;
            v285 = 1065353216;
            *(_OWORD *)v280 = 0u;
            *(_OWORD *)v281 = 0u;
            v282 = 1065353216;
            *(_OWORD *)v277 = 0u;
            *(_OWORD *)v278 = 0u;
            v279 = 1065353216;
            v176 = (std::__thread_struct *)operator new();
            std::__thread_struct::__thread_struct(v176);
            v177 = (_QWORD *)operator new();
            *v177 = v176;
            v177[1] = a2;
            v177[2] = &v329;
            v177[3] = v66;
            v177[4] = v357;
            v177[5] = v283;
            v177[6] = v280;
            v177[7] = &v296;
            v177[8] = v314;
            v177[9] = &v327;
            v177[10] = v267;
            v177[11] = v277;
            v178 = pthread_create(&v276, 0, (void *(__cdecl *)(void *))sub_2394730B4, v177);
            v179 = a3;
            if (v178)
            {
              std::__throw_system_error(v178, "thread constructor failed");
              goto LABEL_478;
            }
            std::thread::join((std::thread *)&v310);
            sub_239462CB8((uint64_t)&__p);
            v181 = (std::thread *)v290;
            v180 = v291;
            if (v290 != v291)
            {
              do
                std::thread::join(v181++);
              while (v181 != v180);
            }
            sub_239462E1C((uint64_t)&v339);
            v183 = (std::thread *)v287;
            v182 = v288;
            if (v287 != v288)
            {
              do
                std::thread::join(v183++);
              while (v183 != v182);
            }
            sub_239462F80((uint64_t)&v329);
            std::thread::join((std::thread *)&v276);
            if ((sub_2396FD7B0(v66) & 1) == 0)
            {
              v184 = v312[0];
              if (v312[0])
              {
                do
                {
                  v185 = (_opaque_pthread_t *)v184[2];
                  if (v277[1])
                  {
                    v186 = (uint8x8_t)vcnt_s8((int8x8_t)v277[1]);
                    v186.i16[0] = vaddlv_u8(v186);
                    if (v186.u32[0] > 1uLL)
                    {
                      v187 = v184[2];
                      if (v185 >= v277[1])
                        v187 = (unint64_t)v185 % (unint64_t)v277[1];
                    }
                    else
                    {
                      v187 = (unint64_t)&v277[1][-1].__opaque[8175] & (unint64_t)v185;
                    }
                    v188 = (_QWORD *)*(&v277[0]->__sig + v187);
                    if (v188)
                    {
                      v189 = (_QWORD *)*v188;
                      if (v189)
                      {
                        if (v186.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v191 = v189[1];
                            if ((_opaque_pthread_t *)v191 == v185)
                            {
                              if ((_opaque_pthread_t *)v189[2] == v185)
                                goto LABEL_320;
                            }
                            else if ((v191 & (unint64_t)&v277[1][-1].__opaque[8175]) != v187)
                            {
                              goto LABEL_341;
                            }
                            v189 = (_QWORD *)*v189;
                            if (!v189)
                              goto LABEL_341;
                          }
                        }
                        do
                        {
                          v190 = (_opaque_pthread_t *)v189[1];
                          if (v190 == v185)
                          {
                            if ((_opaque_pthread_t *)v189[2] == v185)
                              goto LABEL_320;
                          }
                          else
                          {
                            if (v190 >= v277[1])
                              v190 = (_opaque_pthread_t *)((unint64_t)v190 % (unint64_t)v277[1]);
                            if (v190 != (_opaque_pthread_t *)v187)
                              break;
                          }
                          v189 = (_QWORD *)*v189;
                        }
                        while (v189);
                      }
                    }
                  }
LABEL_341:
                  v192 = (int8x8_t)v179[1];
                  if (v192)
                  {
                    v193 = (uint8x8_t)vcnt_s8(v192);
                    v193.i16[0] = vaddlv_u8(v193);
                    if (v193.u32[0] > 1uLL)
                    {
                      v194 = v184[2];
                      if ((unint64_t)v185 >= *(_QWORD *)&v192)
                        v194 = (unint64_t)v185 % *(_QWORD *)&v192;
                    }
                    else
                    {
                      v194 = (*(_QWORD *)&v192 - 1) & (unint64_t)v185;
                    }
                    v195 = *(_QWORD **)(*v179 + 8 * v194);
                    if (v195)
                    {
                      v196 = (_QWORD *)*v195;
                      if (v196)
                      {
                        if (v193.u32[0] < 2uLL)
                        {
                          v197 = *(_QWORD *)&v192 - 1;
                          while (1)
                          {
                            v199 = v196[1];
                            if (v185 == (_opaque_pthread_t *)v199)
                            {
                              if ((_opaque_pthread_t *)v196[2] == v185)
                                goto LABEL_362;
                            }
                            else if ((v199 & v197) != v194)
                            {
                              goto LABEL_320;
                            }
                            v196 = (_QWORD *)*v196;
                            if (!v196)
                              goto LABEL_320;
                          }
                        }
                        do
                        {
                          v198 = v196[1];
                          if (v185 == (_opaque_pthread_t *)v198)
                          {
                            if ((_opaque_pthread_t *)v196[2] == v185)
                            {
LABEL_362:
                              v200 = (char *)operator new(0x40uLL);
                              *((_QWORD *)v200 + 1) = 0;
                              *((_QWORD *)v200 + 2) = 0;
                              *(_QWORD *)v200 = &off_250ADBF90;
                              *((_QWORD *)v200 + 7) = 0;
                              *(_OWORD *)(v200 + 24) = 0u;
                              *(_OWORD *)(v200 + 40) = 0u;
                              *((_DWORD *)v200 + 14) = 1065353216;
                              v274 = v200 + 24;
                              v275 = (std::__shared_weak_count *)v200;
                              v272[0] = v185;
                              v201 = *(_QWORD *)(v267 + 24);
                              if (!v201)
                                sub_2394172E0();
                              v202 = (*(uint64_t (**)(uint64_t, char **, void **))(*(_QWORD *)v201 + 48))(v201, &v274, v272);
                              v203 = v275;
                              if (v275)
                              {
                                p_shared_owners = (unint64_t *)&v275->__shared_owners_;
                                do
                                  v205 = __ldaxr(p_shared_owners);
                                while (__stlxr(v205 - 1, p_shared_owners));
                                if (!v205)
                                {
                                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                                  std::__shared_weak_count::__release_weak(v203);
                                }
                              }
                              if ((_BYTE)v328)
                                v206 = v202;
                              else
                                v206 = 1;
                              v179 = a3;
                              if ((v206 & 1) == 0)
                                sub_2394202DC((_QWORD *)(v327 + 192), 3505);
                              break;
                            }
                          }
                          else
                          {
                            if (v198 >= *(_QWORD *)&v192)
                              v198 %= *(_QWORD *)&v192;
                            if (v198 != v194)
                              break;
                          }
                          v196 = (_QWORD *)*v196;
                        }
                        while (v196);
                      }
                    }
                  }
LABEL_320:
                  v184 = (_QWORD *)*v184;
                }
                while (v184);
              }
            }
            if (!(_BYTE)v328)
              goto LABEL_383;
            v207 = v327;
            *(_QWORD *)v327 = v43;
            v208 = *(_QWORD **)(v207 + 152);
            if (v208)
            {
              v209 = 0;
              v210 = 0;
              v211 = 0;
              v212 = *(_QWORD *)(v207 + 8);
              do
              {
                v213 = v208[4];
                v214 = v208[5];
                v215 = v208[6];
                v212 += v208[3];
                *(_QWORD *)(v207 + 8) = v212;
                v211 += v213;
                v210 += v214;
                v209 += v215;
                v208 = (_QWORD *)*v208;
              }
              while (v208);
              v216 = *(_QWORD *)(v207 + 160);
              if (v216)
              {
LABEL_378:
                *(_QWORD *)(v207 + 16) = v211 / v216;
                *(_QWORD *)(v207 + 24) = v210 / v216;
                *(_QWORD *)(v207 + 32) = v209 / v216;
                if (!*(_BYTE *)(v207 + 264))
LABEL_382:
                  sub_2394202DC((_QWORD *)(v207 + 192), 3505);
LABEL_383:
                sub_2396FD7B0(v66);
                v273 = 0;
                LOBYTE(v272[0]) = 0;
                sub_2396FCC6C((uint64_t)v357, (uint64_t)v272);
                if (v273 < 0)
                  operator delete(v272[0]);
                sub_2396FD7B0(v66);
                std::thread::~thread((std::thread *)&v276);
                v217 = v278[0];
                if (v278[0])
                {
                  do
                  {
                    v218 = (_QWORD *)*v217;
                    operator delete(v217);
                    v217 = v218;
                  }
                  while (v218);
                }
                v219 = v277[0];
                v277[0] = 0;
                if (v219)
                  operator delete(v219);
                v220 = v281[0];
                if (v281[0])
                {
                  do
                  {
                    v242 = (_QWORD *)*v220;
                    v243 = (void *)v220[3];
                    if (v243)
                    {
                      v220[4] = v243;
                      operator delete(v243);
                    }
                    operator delete(v220);
                    v220 = v242;
                  }
                  while (v242);
                }
                v221 = v280[0];
                v280[0] = 0;
                if (v221)
                  operator delete(v221);
                v222 = v284[0];
                if (v284[0])
                {
                  do
                  {
                    v223 = (_QWORD *)*v222;
                    operator delete(v222);
                    v222 = v223;
                  }
                  while (v223);
                }
                v224 = v283[0].__t_;
                v283[0].__t_ = 0;
                if (v224)
                  operator delete(v224);
                v225 = (std::thread *)v287;
                if (v287)
                {
                  v226 = v288;
                  v227 = v287;
                  if (v288 != v287)
                  {
                    do
                      std::thread::~thread(v226 - 1);
                    while (v226 != v225);
                    v227 = v287;
                  }
                  v288 = v225;
                  operator delete(v227);
                }
                sub_239471DD8((uint64_t)&v329);
                v228 = (std::thread *)v290;
                if (v290)
                {
                  v229 = v291;
                  v230 = v290;
                  if (v291 != v290)
                  {
                    do
                      std::thread::~thread(v229 - 1);
                    while (v229 != v228);
                    v230 = v290;
                  }
                  v291 = v228;
                  operator delete(v230);
                }
                sub_23946E2CC((uint64_t)&v339);
                v231 = v294[0];
                if (v294[0])
                {
                  do
                  {
                    v244 = v231;
                    v231 = (_QWORD *)*v231;
                    v245 = (std::__shared_weak_count *)v244[4];
                    if (v245)
                    {
                      v246 = (unint64_t *)&v245->__shared_owners_;
                      do
                        v247 = __ldaxr(v246);
                      while (__stlxr(v247 - 1, v246));
                      if (!v247)
                      {
                        ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                        std::__shared_weak_count::__release_weak(v245);
                      }
                    }
                    operator delete(v244);
                  }
                  while (v231);
                }
                v232 = v293[0];
                v293[0] = 0;
                if (v232)
                  operator delete(v232);
                v233 = v297;
                if (v297)
                {
                  v234 = (unint64_t *)&v297->__shared_owners_;
                  do
                    v235 = __ldaxr(v234);
                  while (__stlxr(v235 - 1, v234));
                  if (!v235)
                  {
                    ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                    std::__shared_weak_count::__release_weak(v233);
                  }
                }
                goto LABEL_414;
              }
            }
            else
            {
              v211 = 0;
              v210 = 0;
              v209 = 0;
              v216 = *(_QWORD *)(v207 + 160);
              if (v216)
                goto LABEL_378;
            }
            *(_QWORD *)(v207 + 16) = 0;
            *(_QWORD *)(v207 + 24) = 0;
            *(_QWORD *)(v207 + 32) = 0;
            if (!*(_BYTE *)(v207 + 264))
              goto LABEL_382;
            goto LABEL_383;
          }
        }
        v164 = v163 - 8;
        if ((unint64_t)(v163 - 8) < 0x78)
        {
          v66 = (uint64_t)v270;
          goto LABEL_305;
        }
        v165 = v164 >> 3;
        v166 = (unint64_t)&v160[v155 - (v164 & 0xFFFFFFFFFFFFFFF8) - 8];
        v66 = (uint64_t)v270;
        if (v166 < (unint64_t)v153 && &v153[-8 * v165 - 8] < (char *)v161)
          goto LABEL_481;
        v167 = v165 + 1;
        v168 = 8 * (v167 & 0x3FFFFFFFFFFFFFFCLL);
        v169 = &v153[-v168];
        v161 = (std::thread *)((char *)v161 - v168);
        v170 = &v160[8 * v156 - 16];
        v171 = v153 - 16;
        v172 = v167 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v173 = *(_OWORD *)v171;
          *((_OWORD *)v170 - 1) = *((_OWORD *)v171 - 1);
          *(_OWORD *)v170 = v173;
          *((_OWORD *)v171 - 1) = 0uLL;
          *(_OWORD *)v171 = 0uLL;
          v170 -= 32;
          v171 -= 32;
          v172 -= 4;
        }
        while (v172);
        v153 = v169;
        if (v167 != (v167 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_481:
          do
          {
LABEL_305:
            v174 = (_opaque_pthread_t *)*((_QWORD *)v153 - 1);
            v153 -= 8;
            v161[-1].__t_ = v174;
            --v161;
            *(_QWORD *)v153 = 0;
          }
          while (v153 != v154);
        }
        v153 = (char *)v287;
        v175 = v288;
        v287 = v161;
        v288 = v150;
        v289 = (unint64_t)v162;
        if (v175 != (std::thread *)v153)
        {
          do
            std::thread::~thread(v175 - 1);
          while (v175 != (std::thread *)v153);
          if (!v153)
            goto LABEL_283;
LABEL_311:
          operator delete(v153);
          goto LABEL_283;
        }
        goto LABEL_310;
      }
    }
    v129 = v128 - 8;
    if ((unint64_t)(v128 - 8) >= 0x78)
    {
      v130 = v129 >> 3;
      v131 = (unint64_t)&v125[v120 - (v129 & 0xFFFFFFFFFFFFFFF8) - 8];
      v66 = (uint64_t)v270;
      if (v131 >= (unint64_t)v118 || &v118[-8 * v130 - 8] >= (char *)v126)
      {
        v132 = v130 + 1;
        v133 = 8 * (v132 & 0x3FFFFFFFFFFFFFFCLL);
        v134 = &v118[-v133];
        v126 = (std::thread *)((char *)v126 - v133);
        v135 = &v125[8 * v121 - 16];
        v136 = v118 - 16;
        v137 = v132 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v138 = *(_OWORD *)v136;
          *((_OWORD *)v135 - 1) = *((_OWORD *)v136 - 1);
          *(_OWORD *)v135 = v138;
          *((_OWORD *)v136 - 1) = 0uLL;
          *(_OWORD *)v136 = 0uLL;
          v135 -= 32;
          v136 -= 32;
          v137 -= 4;
        }
        while (v137);
        v118 = v134;
        if (v132 == (v132 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_254:
          v118 = (char *)v290;
          v140 = v291;
          v290 = v126;
          v291 = v115;
          v292 = (unint64_t)v127;
          if (v140 != (std::thread *)v118)
          {
            do
              std::thread::~thread(v140 - 1);
            while (v140 != (std::thread *)v118);
            if (!v118)
              goto LABEL_231;
LABEL_259:
            operator delete(v118);
            goto LABEL_231;
          }
          goto LABEL_258;
        }
      }
    }
    else
    {
      v66 = (uint64_t)v270;
    }
    do
    {
      v139 = (_opaque_pthread_t *)*((_QWORD *)v118 - 1);
      v118 -= 8;
      v126[-1].__t_ = v139;
      --v126;
      *(_QWORD *)v118 = 0;
    }
    while (v118 != v119);
    goto LABEL_254;
  }
  if ((_BYTE)v328)
    sub_2394202DC((_QWORD *)(v327 + 192), 3012);
  v339.__m_.__opaque[15] = 0;
  LOBYTE(v339.__m_.__sig) = 0;
  sub_2396FCC6C((uint64_t)v357, (uint64_t)&v339);
  if (v339.__m_.__opaque[15] < 0)
    operator delete((void *)v339.__m_.__sig);
LABEL_414:
  v236 = (char *)v298;
  if (v298)
  {
    v237 = v299;
    v238 = v298;
    if (v299 != v298)
    {
      do
      {
        v239 = (std::__shared_weak_count *)*((_QWORD *)v237 - 1);
        if (v239)
        {
          v240 = (unint64_t *)&v239->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        v237 -= 16;
      }
      while (v237 != v236);
      v238 = v298;
    }
    v299 = v236;
    operator delete(v238);
  }
  v248 = (char *)v300;
  if (v300)
  {
    v249 = v301;
    v250 = v300;
    if (v301 != v300)
    {
      do
      {
        v251 = (std::__shared_weak_count *)*((_QWORD *)v249 - 1);
        if (v251)
        {
          v252 = (unint64_t *)&v251->__shared_owners_;
          do
            v253 = __ldaxr(v252);
          while (__stlxr(v253 - 1, v252));
          if (!v253)
          {
            ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
            std::__shared_weak_count::__release_weak(v251);
          }
        }
        v249 -= 16;
      }
      while (v249 != v248);
      v250 = v300;
    }
    v301 = v248;
    operator delete(v250);
  }
LABEL_445:
  v254 = v308[0];
  if (v308[0])
  {
    do
    {
      v255 = (_QWORD *)*v254;
      operator delete(v254);
      v254 = v255;
    }
    while (v255);
  }
  v256 = v307[0];
  v307[0] = 0;
  if (v256)
    operator delete(v256);
  std::thread::~thread((std::thread *)&v310);
  sub_239465CCC((uint64_t)&__p);
  sub_2396FCD14((uint64_t)v357);
  v51 = v312[0];
  if (v312[0])
  {
    do
    {
LABEL_450:
      v257 = (_QWORD *)*v51;
      operator delete(v51);
      v51 = v257;
    }
    while (v257);
  }
LABEL_451:
  v258 = v311[0];
  v311[0] = 0;
  if (v258)
    operator delete(v258);
  v259 = v315[0];
  if (v315[0])
  {
    do
    {
      v260 = (_QWORD *)*v259;
      operator delete(v259);
      v259 = v260;
    }
    while (v260);
  }
  v261 = v314[0];
  v314[0] = 0;
  if (v261)
    operator delete(v261);
  v262 = v364;
  if (v364 == v363)
  {
    v263 = 4;
    v262 = v363;
LABEL_461:
    (*(void (**)(void))(*v262 + 8 * v263))();
  }
  else if (v364)
  {
    v263 = 5;
    goto LABEL_461;
  }
}

void sub_2394625F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::thread a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::thread a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  std::thread a70;
  char a71;
  uint64_t v71;
  uint64_t v73;

  std::thread::~thread(&a22);
  sub_239420950((uint64_t)&a23);
  sub_2394630E4((uint64_t)&a29);
  sub_239420950((uint64_t)&a35);
  sub_239420998(&a41);
  sub_239471DD8((uint64_t)&STACK[0x270]);
  sub_239420998(&a44);
  sub_23946E2CC((uint64_t)&STACK[0x360]);
  sub_23946314C((uint64_t)&a47);
  sub_239416DA0((uint64_t)&a53);
  sub_2394631DC(&a55);
  sub_2394631DC(&a58);
  sub_239420950((uint64_t)&a65);
  std::thread::~thread(&a70);
  sub_239465CCC((uint64_t)&STACK[0x458]);
  sub_2396FCD14((uint64_t)&STACK[0x568]);
  sub_239420950((uint64_t)&a71);
  sub_239420950((uint64_t)&STACK[0x220]);
  v73 = *(_QWORD *)(v71 - 112);
  if (v73 == v71 - 136)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(v71 - 136) + 32))(v71 - 136);
    _Unwind_Resume(a1);
  }
  if (!v73)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
  _Unwind_Resume(a1);
}

_QWORD *sub_239462C08(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = a1 + 9;
  v3 = a1 + 13;
  v4 = (_QWORD *)a1[16];
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = (_QWORD *)a1[12];
  if (v6 == v2)
  {
    v7 = 4;
    v6 = v2;
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  v8 = (_QWORD *)a1[8];
  if (v8 == a1 + 5)
  {
    v9 = 4;
    v8 = a1 + 5;
    goto LABEL_15;
  }
  if (v8)
  {
    v9 = 5;
LABEL_15:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

uint64_t sub_239462CB8(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_239462E00(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239462E1C(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_239462F64(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239462F80(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  *(_BYTE *)(a1 + 56) = 1;
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 64) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v3 = pthread_cond_signal((pthread_cond_t *)(a1 + 80));
      if ((_DWORD)v3)
        sub_239EBED10(v3, v4);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 64) > 0);
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  while (*(_QWORD *)(a1 + 48) && *(uint64_t *)(a1 + 72) >= 1)
  {
    if (pthread_cond_wait((pthread_cond_t *)(a1 + 80), v2))
    {
      sub_239A444D4((uint64_t)"unknown file", 277, (uint64_t)"", (void (*)(void *))sub_239A4463C);
      sub_239A4475C();
      abort();
    }
  }
  sub_2397A16B4(v2);
  sub_2397A1694(v2);
  if (*(uint64_t *)(a1 + 72) >= 1)
  {
    do
    {
      sub_2397A16B4(v2);
      v5 = pthread_cond_signal((pthread_cond_t *)(a1 + 128));
      if ((_DWORD)v5)
        sub_239EBECE4(v5, v6);
      sub_2397A1694(v2);
    }
    while (*(uint64_t *)(a1 + 72) > 0);
  }
  sub_2397A16B4(v2);
  return 1;
}

void sub_2394630C8(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394630E4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_23946314C(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(_QWORD **)(a1 + 16);
  while (v2)
  {
    v5 = v2;
    v2 = (_QWORD *)*v2;
    v6 = (std::__shared_weak_count *)v5[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    operator delete(v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void **sub_2394631DC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_239463274(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  void **v34;
  void **v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  std::chrono::system_clock::time_point v81;
  std::chrono::system_clock::time_point v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  float v93;
  unint64_t *v94;
  unint64_t *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *v98;
  unsigned int *v99;
  unsigned int *v100;
  void *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  void *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  _OWORD *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  _QWORD *v125;
  void *v126;
  _QWORD *v127;
  uint64_t v128;
  void **v129;
  uint64_t v130;
  _QWORD *v131;
  void *v132;
  char *v133;
  uint64_t *v134;
  _QWORD *v135;
  _QWORD *v136;
  void *v137;
  void *v138;
  unint64_t *v139;
  _QWORD *v140;
  _QWORD *v141;
  char *v142;
  void *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  __int128 v148;
  __int128 v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  char v173;
  char v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  int *v201;
  uint64_t v202;
  void **v203;
  uint64_t v204;
  _QWORD *v205;
  void *v206;
  _QWORD *v207;
  void *v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  void *v212;
  _QWORD *v213;
  void *v214;
  char v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v221;
  uint64_t *v222;
  _QWORD *v223;
  unsigned int *v224;
  unsigned int *v225;
  __int128 v226;
  std::__shared_weak_count *v227;
  __int128 v228;
  __int128 v229;
  unint64_t v230;
  void *__p[2];
  char v232;
  __int128 v233;
  std::__shared_weak_count *v234;
  __int128 v235;
  __int128 v236;
  void *v237;
  void **v238;
  uint64_t v239;
  _OWORD v240[7];
  __int128 v241;
  __int128 v242;
  __int128 v243;
  void *v244[2];
  void *v245[2];
  int v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD v249[3];
  _QWORD *v250;
  _BYTE v251[24];
  _BYTE *v252;
  _BYTE v253[24];
  _BYTE *v254;
  _BYTE v255[24];
  _BYTE *v256;
  _BYTE v257[24];
  _BYTE *v258;
  _QWORD v259[3];
  _QWORD *v260;
  _BYTE v261[24];
  _BYTE *v262;
  _BYTE v263[24];
  _BYTE *v264;
  uint64_t v265;
  uint64_t *v266;
  _BYTE v267[24];
  _BYTE *v268;
  _QWORD v269[3];
  _QWORD *v270;
  _BYTE v271[24];
  _BYTE *v272;
  _BYTE v273[24];
  _BYTE *v274;
  void *v275[2];
  __int128 v276;
  _DWORD v277[6];
  _DWORD *v278;
  void *v279[2];
  void *v280[2];
  int v281;
  __int128 v282;
  int *v283;
  _BYTE v284[24];
  _BYTE *v285;
  _BYTE v286[568];
  _QWORD v287[3];
  _QWORD *v288;
  uint64_t v289;

  v289 = *MEMORY[0x24BDAC8D0];
  v247 = a15;
  v248 = a16;
  v287[0] = &off_250ADC188;
  v287[1] = &v247;
  v287[2] = 0;
  v288 = v287;
  v22 = a3[3];
  if (a1[105] != a1[104])
  {
    v23 = a4[3];
    if (v22)
    {
      if (!v23)
      {
        if (a5[3])
        {
          v24 = 1098;
          goto LABEL_337;
        }
        goto LABEL_9;
      }
      v24 = 1095;
    }
    else
    {
      if (v23)
        goto LABEL_9;
      v24 = 1102;
    }
LABEL_337:
    sub_239A444D4((uint64_t)"unknown file", v24, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (!v22)
  {
    v24 = 1108;
    goto LABEL_337;
  }
LABEL_9:
  if (!a1[12])
  {
    v24 = 1118;
    goto LABEL_337;
  }
  *(_OWORD *)v244 = 0u;
  *(_OWORD *)v245 = 0u;
  v246 = 1065353216;
  v25 = *(_OWORD *)(a2 + 248);
  v240[6] = *(_OWORD *)(a2 + 232);
  v241 = v25;
  v26 = *(_OWORD *)(a2 + 280);
  v242 = *(_OWORD *)(a2 + 264);
  v243 = v26;
  v27 = *(_OWORD *)(a2 + 184);
  v240[2] = *(_OWORD *)(a2 + 168);
  v240[3] = v27;
  v28 = *(_OWORD *)(a2 + 216);
  v240[4] = *(_OWORD *)(a2 + 200);
  v240[5] = v28;
  v29 = *(_OWORD *)(a2 + 152);
  v240[0] = *(_OWORD *)(a2 + 136);
  v240[1] = v29;
  BYTE5(v241) = *(_BYTE *)(a2 + 27);
  v237 = 0;
  v238 = 0;
  v239 = 0;
  sub_239433C1C((uint64_t)a1, (uint64_t)&v237, 1);
  v219 = a2;
  sub_2396FD800(a7, (uint64_t)v284);
  v279[0] = (void *)0x42C8000000000000;
  sub_2396FCC68(v286, 100, v284, v279, 1.0);
  v223 = a7;
  v30 = v285;
  if (v285 == v284)
  {
    v31 = 4;
    v30 = v284;
  }
  else
  {
    if (!v285)
      goto LABEL_15;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_15:
  v217 = a5;
  v218 = a6;
  v32 = (unsigned int *)a1[105];
  v33 = (unsigned int *)a1[104];
  v221 = a4;
  v222 = a1;
  if (v32 != v33)
  {
    v34 = (void **)v237;
    v35 = v238;
    if (v237 != v238)
    {
      do
      {
        v275[0] = 0;
        v275[0] = *v34;
        v279[0] = v275;
        v36 = sub_239475984((uint64_t)v244, (unint64_t *)v275, (uint64_t)&unk_239EC6E98, (uint64_t **)v279);
        v38 = v36 + 3;
        v37 = (void *)v36[3];
        if (v37)
        {
          v36[4] = v37;
          operator delete(v37);
          *v38 = 0;
          v38[1] = 0;
          v38[2] = 0;
        }
        *v38 = 0;
        v38[1] = 0;
        v38[2] = 0;
        ++v34;
      }
      while (v34 != v35);
      v33 = (unsigned int *)a1[104];
      v32 = (unsigned int *)a1[105];
    }
    if (v33 != v32)
    {
      v39 = &unk_239EC6E98;
      v224 = v32;
      while (1)
      {
        while (1)
        {
          v275[0] = (void *)*v33;
          v279[0] = v275;
          v40 = sub_239475CB4((uint64_t)v244, (unint64_t *)v275, (uint64_t)v39, (uint64_t **)v279);
          v41 = v40;
          v42 = v33[1];
          v44 = (char *)v40[4];
          v43 = v40[5];
          if ((unint64_t)v44 >= v43)
            break;
          *(_QWORD *)v44 = v42;
          v40[4] = v44 + 8;
          v33 += 2;
          if (v33 == v32)
            goto LABEL_47;
        }
        v45 = (char *)v40[3];
        v46 = (v44 - v45) >> 3;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61)
          sub_2394189F8();
        v48 = v39;
        v49 = v43 - (_QWORD)v45;
        if (v49 >> 2 > v47)
          v47 = v49 >> 2;
        v50 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v47;
        if (v50)
          break;
        v51 = 0;
        v52 = (_QWORD *)(8 * v46);
        *(_QWORD *)(8 * v46) = v42;
        v53 = 8 * v46 + 8;
        if (v44 != v45)
          goto LABEL_35;
LABEL_44:
        v41[3] = v52;
        v41[4] = v53;
        v41[5] = &v51[8 * v50];
        if (v45)
          operator delete(v45);
        v39 = v48;
        v32 = v224;
        v41[4] = v53;
        v33 += 2;
        if (v33 == v224)
          goto LABEL_47;
      }
      if (v50 >> 61)
        sub_239418A80();
      v51 = operator new(8 * v50);
      v52 = &v51[8 * v46];
      *v52 = v42;
      v53 = (uint64_t)(v52 + 1);
      if (v44 == v45)
        goto LABEL_44;
LABEL_35:
      v54 = v44 - 8 - v45;
      if (v54 < 0x58)
        goto LABEL_340;
      if ((unint64_t)(v45 - v51) < 0x20)
        goto LABEL_340;
      v55 = (v54 >> 3) + 1;
      v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      v57 = &v44[-v56];
      v52 = (_QWORD *)((char *)v52 - v56);
      v58 = &v51[8 * v46 - 16];
      v59 = v44 - 16;
      v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 4;
      }
      while (v60);
      v44 = v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_340:
        do
        {
          v62 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *--v52 = v62;
        }
        while (v44 != v45);
      }
      goto LABEL_44;
    }
LABEL_47:
    v63 = v245[0];
    v64 = v223;
    if (v245[0])
    {
      do
      {
        std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
        v63 = (_QWORD *)*v63;
      }
      while (v63);
    }
    goto LABEL_166;
  }
  *(_OWORD *)v279 = 0u;
  *(_OWORD *)v280 = 0u;
  v281 = 1065353216;
  v283 = 0;
  v282 = 0uLL;
  v64 = a7;
  sub_2396FDAA8(a7, (uint64_t)v273);
  sub_2396FD534(&v233, v286, 20);
  v272 = 0;
  v65 = (char *)operator new(0x40uLL);
  *(_QWORD *)v65 = &off_250ADB9D8;
  *(_OWORD *)(v65 + 8) = v233;
  *((_QWORD *)v65 + 3) = v234;
  *((_QWORD *)&v233 + 1) = 0;
  v234 = 0;
  v66 = v235;
  v235 = 0uLL;
  v67 = v236;
  *((_OWORD *)v65 + 2) = v66;
  *((_OWORD *)v65 + 3) = v67;
  v236 = 0uLL;
  v272 = v65;
  sub_2396FD600((uint64_t)v275, (uint64_t)v273, (uint64_t)v271);
  v68 = v272;
  if (v272 == v271)
  {
    v69 = 4;
    v68 = v271;
    goto LABEL_54;
  }
  if (v272)
  {
    v69 = 5;
LABEL_54:
    (*(void (**)(void))(*v68 + 8 * v69))();
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
  if (*((_QWORD *)&v236 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
  if (*((_QWORD *)&v235 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v234;
  if (v234)
  {
    p_shared_owners = (unint64_t *)&v234->__shared_owners_;
    do
      v78 = __ldaxr(p_shared_owners);
    while (__stlxr(v78 - 1, p_shared_owners));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
      v79 = v274;
      if (v274 != v273)
        goto LABEL_70;
LABEL_73:
      v80 = 4;
      v79 = v273;
      goto LABEL_74;
    }
  }
  v79 = v274;
  if (v274 == v273)
    goto LABEL_73;
LABEL_70:
  if (!v79)
    goto LABEL_75;
  v80 = 5;
LABEL_74:
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_75:
  v82.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v83 = a3[3];
  if (!v83)
  {
LABEL_78:
    v270 = (_QWORD *)v83;
    goto LABEL_80;
  }
  if ((_QWORD *)v83 != a3)
  {
    v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 16))(v83);
    goto LABEL_78;
  }
  v270 = v269;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v269);
LABEL_80:
  v84 = *((_QWORD *)&v276 + 1);
  if (!*((_QWORD *)&v276 + 1))
  {
LABEL_83:
    v266 = (uint64_t *)v84;
    goto LABEL_85;
  }
  if (*((void ***)&v276 + 1) != v275)
  {
    v84 = (*(uint64_t (**)(void))(**((_QWORD **)&v276 + 1) + 16))();
    goto LABEL_83;
  }
  v266 = &v265;
  (*((void (**)(void **, uint64_t *))v275[0] + 3))(v275, &v265);
LABEL_85:
  v85 = v267;
  v86 = (uint64_t)v278;
  if (!v278)
  {
LABEL_88:
    v268 = (_BYTE *)v86;
    goto LABEL_90;
  }
  if (v278 != v277)
  {
    v86 = (*(uint64_t (**)(void))(*(_QWORD *)v278 + 16))();
    goto LABEL_88;
  }
  v268 = v267;
  (*(void (**)(void))(*(_QWORD *)v278 + 24))();
LABEL_90:
  v87 = sub_2394328A8(a1, (unint64_t **)&v237, (unint64_t **)&v237, (uint64_t)v240, v269, &v265, v279, v81.__d_.__rep_, a13, a14, v247, v248);
  if (v268 == v267)
  {
    v88 = 4;
  }
  else
  {
    if (!v268)
      goto LABEL_95;
    v88 = 5;
    v85 = v268;
  }
  (*(void (**)(_QWORD *))(*v85 + 8 * v88))(v85);
LABEL_95:
  v89 = v266;
  if (v266 == &v265)
  {
    v90 = 4;
    v89 = &v265;
  }
  else
  {
    if (!v266)
      goto LABEL_100;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_100:
  v91 = v270;
  if (v270 == v269)
  {
    v92 = 4;
    v91 = v269;
  }
  else
  {
    if (!v270)
      goto LABEL_105;
    v92 = 5;
  }
  (*(void (**)(void))(*v91 + 8 * v92))();
LABEL_105:
  if ((_BYTE)v248)
  {
    v93 = (double)(std::chrono::system_clock::now().__d_.__rep_ - v82.__d_.__rep_) / 1000000.0;
    *(float *)(v247 + 352) = v93;
  }
  if ((v87 & 1) == 0)
  {
    if ((_BYTE)v248)
    {
      sub_2394202DC((_QWORD *)(v247 + 192), 3008);
      if (sub_2396FD7B0((uint64_t)a7))
        sub_2394202DC((_QWORD *)(v247 + 192), 2);
    }
    v232 = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FD7B0((uint64_t)a7);
    sub_2396FCC6C((uint64_t)v286, (uint64_t)__p);
    if (v232 < 0)
    {
      operator delete(__p[0]);
      v127 = v278;
      if (v278 != v277)
        goto LABEL_150;
      goto LABEL_153;
    }
LABEL_149:
    v127 = v278;
    if (v278 != v277)
      goto LABEL_150;
LABEL_153:
    v128 = 4;
    v127 = v277;
    goto LABEL_154;
  }
  v94 = (unint64_t *)v237;
  v95 = (unint64_t *)v238;
  if (v237 != v238)
  {
    do
    {
      v230 = 0;
      v230 = *v94;
      __p[0] = &v230;
      v96 = sub_239475984((uint64_t)v244, &v230, (uint64_t)&unk_239EC6E98, (uint64_t **)__p);
      v98 = v96 + 3;
      v97 = (void *)v96[3];
      if (v97)
      {
        v96[4] = v97;
        operator delete(v97);
        *v98 = 0;
        v98[1] = 0;
        v98[2] = 0;
      }
      *v98 = 0;
      v98[1] = 0;
      v98[2] = 0;
      ++v94;
    }
    while (v94 != v95);
  }
  v216 = v87;
  v100 = (unsigned int *)*((_QWORD *)&v282 + 1);
  v99 = (unsigned int *)v282;
  if ((_QWORD)v282 != *((_QWORD *)&v282 + 1))
  {
    v101 = &unk_239EC6E98;
    v225 = (unsigned int *)*((_QWORD *)&v282 + 1);
    while (1)
    {
      while (1)
      {
        v230 = *v99;
        __p[0] = &v230;
        v102 = sub_239475CB4((uint64_t)v244, &v230, (uint64_t)v101, (uint64_t **)__p);
        v103 = v102;
        v104 = v99[1];
        v106 = (char *)v102[4];
        v105 = v102[5];
        if ((unint64_t)v106 >= v105)
          break;
        *(_QWORD *)v106 = v104;
        v102[4] = v106 + 8;
        v99 += 2;
        if (v99 == v100)
          goto LABEL_141;
      }
      v107 = v101;
      v108 = (char *)v102[3];
      v109 = (v106 - v108) >> 3;
      v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 61)
        sub_2394189F8();
      v111 = v105 - (_QWORD)v108;
      if (v111 >> 2 > v110)
        v110 = v111 >> 2;
      v112 = (unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v110;
      if (v112)
        break;
      v113 = 0;
      v114 = (_QWORD *)(8 * v109);
      *(_QWORD *)(8 * v109) = v104;
      v115 = 8 * v109 + 8;
      if (v106 != v108)
        goto LABEL_132;
LABEL_138:
      v103[3] = v114;
      v103[4] = v115;
      v103[5] = &v113[8 * v112];
      if (v108)
        operator delete(v108);
      v101 = v107;
      v100 = v225;
      v103[4] = v115;
      v99 += 2;
      if (v99 == v225)
        goto LABEL_141;
    }
    if (v112 >> 61)
      sub_239418A80();
    v113 = operator new(8 * v112);
    v114 = &v113[8 * v109];
    *v114 = v104;
    v115 = (uint64_t)(v114 + 1);
    if (v106 == v108)
      goto LABEL_138;
LABEL_132:
    v116 = v106 - 8 - v108;
    if (v116 < 0x58)
      goto LABEL_341;
    if ((unint64_t)(v108 - v113) < 0x20)
      goto LABEL_341;
    v117 = (v116 >> 3) + 1;
    v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
    v119 = &v106[-v118];
    v114 = (_QWORD *)((char *)v114 - v118);
    v120 = &v113[8 * v109 - 16];
    v121 = v106 - 16;
    v122 = v117 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v123 = *(_OWORD *)v121;
      *(v120 - 1) = *((_OWORD *)v121 - 1);
      *v120 = v123;
      v120 -= 2;
      v121 -= 32;
      v122 -= 4;
    }
    while (v122);
    v106 = v119;
    if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_341:
      do
      {
        v124 = *((_QWORD *)v106 - 1);
        v106 -= 8;
        *--v114 = v124;
      }
      while (v106 != v108);
    }
    goto LABEL_138;
  }
LABEL_141:
  v125 = v245[0];
  v64 = v223;
  if (v245[0])
  {
    do
    {
      std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      v125 = (_QWORD *)*v125;
    }
    while (v125);
  }
  v87 = v216;
  if (!a12)
    goto LABEL_149;
  sub_239433E6C((uint64_t)a11, (uint64_t *)v279);
  v126 = (void *)a11[5];
  if (v126)
  {
    a11[6] = v126;
    operator delete(v126);
    a11[5] = 0;
    a11[6] = 0;
    a11[7] = 0;
  }
  *(_OWORD *)(a11 + 5) = v282;
  a11[7] = v283;
  v282 = 0uLL;
  v283 = 0;
  v127 = v278;
  if (v278 == v277)
    goto LABEL_153;
LABEL_150:
  if (!v127)
    goto LABEL_155;
  v128 = 5;
LABEL_154:
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_155:
  v129 = (void **)*((_QWORD *)&v276 + 1);
  if (*((void ***)&v276 + 1) == v275)
  {
    v130 = 4;
    v129 = v275;
  }
  else
  {
    if (!*((_QWORD *)&v276 + 1))
      goto LABEL_160;
    v130 = 5;
  }
  (*((void (**)(void))*v129 + v130))();
LABEL_160:
  if ((_QWORD)v282)
  {
    *((_QWORD *)&v282 + 1) = v282;
    operator delete((void *)v282);
  }
  v131 = v280[0];
  if (v280[0])
  {
    do
    {
      v136 = (_QWORD *)*v131;
      v137 = (void *)v131[6];
      if (v137)
      {
        v131[7] = v137;
        operator delete(v137);
      }
      v138 = (void *)v131[3];
      if (v138)
      {
        v131[4] = v138;
        operator delete(v138);
      }
      operator delete(v131);
      v131 = v136;
    }
    while (v136);
  }
  v132 = v279[0];
  v279[0] = 0;
  if (v132)
    operator delete(v132);
  if ((v87 & 1) == 0)
  {
    v146 = 0;
    goto LABEL_311;
  }
LABEL_166:
  *(_OWORD *)v275 = 0u;
  v276 = 0u;
  v277[0] = 1065353216;
  if (!a10 || *(_QWORD *)(a9 + 8) == *(_QWORD *)a9)
  {
    v143 = v244[0];
    v144 = (unint64_t)v244[1];
    v244[0] = 0;
    v244[1] = 0;
    v275[0] = v143;
    v275[1] = (void *)v144;
    v277[0] = v246;
    v276 = *(_OWORD *)v245;
    v135 = v221;
    v134 = v222;
    if (v245[1])
    {
      v145 = *((_QWORD *)v245[0] + 1);
      if ((v144 & (v144 - 1)) != 0)
      {
        if (v145 >= v144)
          v145 %= v144;
      }
      else
      {
        v145 &= v144 - 1;
      }
      *((_QWORD *)v143 + v145) = &v276;
      v245[0] = 0;
      v245[1] = 0;
    }
  }
  else
  {
    v133 = (char *)v245[0];
    v135 = v221;
    v134 = v222;
    if (v245[0])
    {
      do
      {
        v139 = (unint64_t *)(v133 + 16);
        v141 = *(_QWORD **)a9;
        v140 = *(_QWORD **)(a9 + 8);
        if (*(_QWORD **)a9 != v140)
        {
          while (*v141 != *v139)
          {
            if (++v141 == v140)
            {
              v141 = *(_QWORD **)(a9 + 8);
              break;
            }
          }
        }
        if (v141 == v140)
        {
          v279[0] = v133 + 16;
          v142 = (char *)sub_239475984((uint64_t)v275, v139, (uint64_t)&unk_239EC6E98, (uint64_t **)v279);
          if (v133 != v142)
            sub_23945D3D0((_QWORD *)v142 + 3, *((char **)v133 + 3), *((char **)v133 + 4), (uint64_t)(*((_QWORD *)v133 + 4) - *((_QWORD *)v133 + 3)) >> 3);
        }
        v133 = *(char **)v133;
      }
      while (v133);
    }
  }
  if (sub_2396FD7B0((uint64_t)v64))
  {
    if ((_BYTE)v248)
      sub_2394202DC((_QWORD *)(v247 + 192), 2);
    HIBYTE(v280[0]) = 0;
    LOBYTE(v279[0]) = 0;
    sub_2396FCC6C((uint64_t)v286, (uint64_t)v279);
    if (SHIBYTE(v280[0]) < 0)
      operator delete(v279[0]);
    v146 = 0;
    goto LABEL_308;
  }
  sub_2396FDAA8(v64, (uint64_t)v263);
  sub_2396FD534(&v226, v286, 80);
  v262 = 0;
  v147 = (char *)operator new(0x40uLL);
  *(_QWORD *)v147 = &off_250ADB9D8;
  *(_OWORD *)(v147 + 8) = v226;
  *((_QWORD *)v147 + 3) = v227;
  *((_QWORD *)&v226 + 1) = 0;
  v227 = 0;
  v148 = v228;
  v228 = 0uLL;
  v149 = v229;
  *((_OWORD *)v147 + 2) = v148;
  *((_OWORD *)v147 + 3) = v149;
  v229 = 0uLL;
  v262 = v147;
  sub_2396FD600((uint64_t)v279, (uint64_t)v263, (uint64_t)v261);
  v150 = v262;
  if (v262 == v261)
  {
    v152 = 4;
    v150 = v261;
    v151 = v219;
    goto LABEL_200;
  }
  v151 = v219;
  if (v262)
  {
    v152 = 5;
LABEL_200:
    (*(void (**)(void))(*v150 + 8 * v152))();
  }
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v229 + 1);
  if (*((_QWORD *)&v229 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v229 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v156 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  if (*((_QWORD *)&v228 + 1))
  {
    v157 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = v227;
  if (v227)
  {
    v160 = (unint64_t *)&v227->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
      v162 = v264;
      if (v264 != v263)
        goto LABEL_216;
LABEL_219:
      v165 = 4;
      v162 = v263;
      v164 = v217;
      v163 = v218;
      goto LABEL_220;
    }
  }
  v162 = v264;
  if (v264 == v263)
    goto LABEL_219;
LABEL_216:
  v164 = v217;
  v163 = v218;
  if (!v162)
    goto LABEL_221;
  v165 = 5;
LABEL_220:
  (*(void (**)(void))(*v162 + 8 * v165))();
LABEL_221:
  v166 = a3[3];
  if (!v166)
  {
LABEL_224:
    v260 = (_QWORD *)v166;
    goto LABEL_226;
  }
  if ((_QWORD *)v166 != a3)
  {
    v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v166 + 16))(v166);
    goto LABEL_224;
  }
  v260 = v259;
  (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v259);
LABEL_226:
  v167 = v135[3];
  if (!v167)
  {
LABEL_229:
    v258 = (_BYTE *)v167;
    goto LABEL_231;
  }
  if ((_QWORD *)v167 != v135)
  {
    v167 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 16))(v167);
    goto LABEL_229;
  }
  v258 = v257;
  (*(void (**)(_QWORD *, _BYTE *))(*v135 + 24))(v135, v257);
LABEL_231:
  v168 = v164[3];
  if (!v168)
  {
LABEL_234:
    v256 = (_BYTE *)v168;
    goto LABEL_236;
  }
  if ((_QWORD *)v168 != v164)
  {
    v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 16))(v168);
    goto LABEL_234;
  }
  v256 = v255;
  (*(void (**)(_QWORD *, _BYTE *))(*v164 + 24))(v164, v255);
LABEL_236:
  v169 = v163[3];
  if (!v169)
  {
LABEL_239:
    v254 = (_BYTE *)v169;
    goto LABEL_241;
  }
  if ((_QWORD *)v169 != v163)
  {
    v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
    goto LABEL_239;
  }
  v254 = v253;
  (*(void (**)(_QWORD *, _BYTE *))(*v163 + 24))(v163, v253);
LABEL_241:
  v170 = v280[1];
  if (!v280[1])
  {
LABEL_244:
    v250 = v170;
    goto LABEL_246;
  }
  if (v280[1] != v279)
  {
    v170 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v280[1] + 16))();
    goto LABEL_244;
  }
  v250 = v249;
  (*((void (**)(void **, _QWORD *))v279[0] + 3))(v279, v249);
LABEL_246:
  v171 = v251;
  v172 = (uint64_t)v283;
  if (!v283)
  {
LABEL_249:
    v252 = (_BYTE *)v172;
    goto LABEL_251;
  }
  if (v283 != &v281)
  {
    v172 = (*(uint64_t (**)(void))(*(_QWORD *)v283 + 16))();
    goto LABEL_249;
  }
  v252 = v251;
  (*(void (**)(void))(*(_QWORD *)v283 + 24))();
LABEL_251:
  sub_2394608F4(v134, v151, v275, v259, (uint64_t)v257, (uint64_t)v255, (uint64_t)v253, v249, v247, v248);
  v174 = v173;
  if (v252 == v251)
  {
    v175 = 4;
  }
  else
  {
    if (!v252)
      goto LABEL_256;
    v175 = 5;
    v171 = v252;
  }
  (*(void (**)(_QWORD *))(*v171 + 8 * v175))(v171);
LABEL_256:
  v176 = v250;
  if (v250 == v249)
  {
    v177 = 4;
    v176 = v249;
  }
  else
  {
    if (!v250)
      goto LABEL_261;
    v177 = 5;
  }
  (*(void (**)(void))(*v176 + 8 * v177))();
LABEL_261:
  v178 = v254;
  if (v254 == v253)
  {
    v179 = 4;
    v178 = v253;
  }
  else
  {
    if (!v254)
      goto LABEL_266;
    v179 = 5;
  }
  (*(void (**)(void))(*v178 + 8 * v179))();
LABEL_266:
  v180 = v256;
  if (v256 == v255)
  {
    v181 = 4;
    v180 = v255;
  }
  else
  {
    if (!v256)
      goto LABEL_271;
    v181 = 5;
  }
  (*(void (**)(void))(*v180 + 8 * v181))();
LABEL_271:
  v182 = v258;
  if (v258 == v257)
  {
    v183 = 4;
    v182 = v257;
  }
  else
  {
    if (!v258)
      goto LABEL_276;
    v183 = 5;
  }
  (*(void (**)(void))(*v182 + 8 * v183))();
LABEL_276:
  v184 = v260;
  if (v260 == v259)
  {
    v185 = 4;
    v184 = v259;
  }
  else
  {
    if (!v260)
      goto LABEL_281;
    v185 = 5;
  }
  (*(void (**)(void))(*v184 + 8 * v185))();
LABEL_281:
  if ((v174 & 1) != 0)
  {
    if ((_BYTE)v248)
    {
      v186 = v247;
      v187 = v247 + 376;
      v188 = *(_OWORD *)(v151 + 12);
      *(_OWORD *)(v247 + 376) = *(_OWORD *)v151;
      *(_OWORD *)(v187 + 12) = v188;
      if (v187 != v151)
        sub_23945D3D0((_QWORD *)(v186 + 408), *(char **)(v151 + 32), *(char **)(v151 + 40), (uint64_t)(*(_QWORD *)(v151 + 40) - *(_QWORD *)(v151 + 32)) >> 3);
      std::string::operator=((std::string *)(v186 + 432), (const std::string *)(v151 + 56));
      v189 = *(_OWORD *)(v151 + 80);
      v190 = *(_OWORD *)(v151 + 96);
      v191 = *(_OWORD *)(v151 + 128);
      *(_OWORD *)(v186 + 488) = *(_OWORD *)(v151 + 112);
      *(_OWORD *)(v186 + 504) = v191;
      *(_OWORD *)(v186 + 456) = v189;
      *(_OWORD *)(v186 + 472) = v190;
      v192 = *(_OWORD *)(v151 + 144);
      v193 = *(_OWORD *)(v151 + 160);
      v194 = *(_OWORD *)(v151 + 192);
      *(_OWORD *)(v186 + 552) = *(_OWORD *)(v151 + 176);
      *(_OWORD *)(v186 + 568) = v194;
      *(_OWORD *)(v186 + 520) = v192;
      *(_OWORD *)(v186 + 536) = v193;
      v195 = *(_OWORD *)(v151 + 208);
      v196 = *(_OWORD *)(v151 + 224);
      v197 = *(_OWORD *)(v151 + 256);
      *(_OWORD *)(v186 + 616) = *(_OWORD *)(v151 + 240);
      *(_OWORD *)(v186 + 632) = v197;
      *(_OWORD *)(v186 + 584) = v195;
      *(_OWORD *)(v186 + 600) = v196;
      v198 = *(_OWORD *)(v151 + 272);
      v199 = *(_OWORD *)(v151 + 288);
      v200 = *(_OWORD *)(v151 + 320);
      *(_OWORD *)(v186 + 680) = *(_OWORD *)(v151 + 304);
      *(_OWORD *)(v186 + 696) = v200;
      *(_OWORD *)(v186 + 648) = v198;
      *(_OWORD *)(v186 + 664) = v199;
      if (sub_2396FD7B0((uint64_t)v64))
        sub_2394202DC((_QWORD *)(v247 + 192), 2);
    }
    sub_2396FD7B0((uint64_t)v64);
    v232 = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C((uint64_t)v286, (uint64_t)__p);
    if (v232 < 0)
      operator delete(__p[0]);
    v146 = sub_2396FD7B0((uint64_t)v64) ^ 1;
    v201 = v283;
    if (v283 == &v281)
    {
LABEL_301:
      v202 = 4;
      v201 = &v281;
      goto LABEL_302;
    }
  }
  else
  {
    if ((_BYTE)v248)
    {
      if ((sub_2396F20BC((int **)(v247 + 232)) & 1) == 0)
        sub_2394202DC((_QWORD *)(v247 + 192), 3009);
      if (sub_2396FD7B0((uint64_t)v64))
        sub_2394202DC((_QWORD *)(v247 + 192), 2);
    }
    sub_2396FD7B0((uint64_t)v64);
    v232 = 0;
    LOBYTE(__p[0]) = 0;
    sub_2396FCC6C((uint64_t)v286, (uint64_t)__p);
    if (v232 < 0)
      operator delete(__p[0]);
    v146 = 0;
    v201 = v283;
    if (v283 == &v281)
      goto LABEL_301;
  }
  if (!v201)
    goto LABEL_303;
  v202 = 5;
LABEL_302:
  (*(void (**)(void))(*(_QWORD *)v201 + 8 * v202))();
LABEL_303:
  v203 = (void **)v280[1];
  if (v280[1] == v279)
  {
    v204 = 4;
    v203 = v279;
    goto LABEL_307;
  }
  if (v280[1])
  {
    v204 = 5;
LABEL_307:
    (*((void (**)(void))*v203 + v204))();
  }
LABEL_308:
  v205 = (_QWORD *)v276;
  if ((_QWORD)v276)
  {
    do
    {
      v213 = (_QWORD *)*v205;
      v214 = (void *)v205[3];
      if (v214)
      {
        v205[4] = v214;
        operator delete(v214);
      }
      operator delete(v205);
      v205 = v213;
    }
    while (v213);
  }
  v206 = v275[0];
  v275[0] = 0;
  if (v206)
    operator delete(v206);
LABEL_311:
  sub_2396FCD14((uint64_t)v286);
  if (v237)
  {
    v238 = (void **)v237;
    operator delete(v237);
  }
  v207 = v245[0];
  if (v245[0])
  {
    do
    {
      v211 = (_QWORD *)*v207;
      v212 = (void *)v207[3];
      if (v212)
      {
        v207[4] = v212;
        operator delete(v212);
      }
      operator delete(v207);
      v207 = v211;
    }
    while (v211);
  }
  v208 = v244[0];
  v244[0] = 0;
  if (v208)
    operator delete(v208);
  if (!v288)
    sub_2394172E0();
  (*(void (**)(_QWORD *))(*v288 + 48))(v288);
  v209 = v288;
  if (v288 == v287)
  {
    v210 = 4;
    v209 = v287;
    goto LABEL_327;
  }
  if (v288)
  {
    v210 = 5;
LABEL_327:
    (*(void (**)(void))(*v209 + 8 * v210))();
  }
  return v146;
}

void sub_239464778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;
  uint64_t v68;

  if (a37 < 0)
    operator delete(__p);
  sub_23942FE80(&STACK[0x3A0]);
  sub_239464B6C((uint64_t)&STACK[0x3E0]);
  sub_2396FCD14((uint64_t)&STACK[0x448]);
  if (a45)
    operator delete(a45);
  sub_2394630E4((uint64_t)&a68);
  sub_239416834((_QWORD *)(v68 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_239464B6C(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 16);
  if (v3)
  {
    do
    {
      v6 = (_QWORD *)*v3;
      v7 = (void *)v3[6];
      if (v7)
      {
        v3[7] = v7;
        operator delete(v7);
      }
      v8 = (void *)v3[3];
      if (v8)
      {
        v3[4] = v8;
        operator delete(v8);
      }
      operator delete(v3);
      v3 = v6;
    }
    while (v6);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_239464BF4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_250ADBBC8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_239464C50(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_250ADBBC8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x23B83E31CLL);
}

char *sub_239464CBC(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x50uLL);
  *(_QWORD *)v2 = &off_250ADBBC8;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *((_QWORD *)v2 + 4) = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  *((_QWORD *)v2 + 4) = v4;
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v2 + 9) = *(_QWORD *)(a1 + 72);
  return v2;
}

void sub_239464D48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_239464D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  *(_QWORD *)a2 = &off_250ADBBC8;
  v4 = a2 + 8;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  result = *(__n128 *)(a1 + 40);
  v7 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v7;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_239464DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_239464E20(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_239464E70(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE *v17;
  int v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t v21;

  v5 = *a2;
  kdebug_trace();
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v21 = v5;
  (*(void (**)(_QWORD **__return_ptr, uint64_t, unint64_t *))(*(_QWORD *)v6 + 48))(&v19, v6, &v21);
  if (!v19 || !*((_DWORD *)v19 + 2))
  {
    v13 = *(_BYTE **)(a1 + 40);
    if (v13[8])
      sub_2394202DC((_QWORD *)(*(_QWORD *)v13 + 192), 3501);
    goto LABEL_17;
  }
  if (*((_DWORD *)v19 + 5) == **(_DWORD **)(a1 + 56))
  {
    v7 = *((int *)v19 + 4);
    if ((_DWORD)v7)
    {
      if (**(_QWORD **)(a1 + 64) == v7)
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 26))
        {
          v8 = sub_2394650AC(*(_QWORD *)(a1 + 48), v5);
          if (sub_23946522C(v19, (uint64_t)v8))
          {
            v9 = *(_BYTE **)(a1 + 40);
            if (v9[8])
              *(_BYTE *)(*(_QWORD *)v9 + 265) = 1;
          }
        }
        kdebug_trace();
        v10 = v20;
        *a3 = v19;
        a3[1] = v10;
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        goto LABEL_18;
      }
      v17 = *(_BYTE **)(a1 + 40);
      if (v17[8])
      {
        v18 = 3001;
        goto LABEL_29;
      }
    }
    else
    {
      v17 = *(_BYTE **)(a1 + 40);
      if (v17[8])
      {
        v18 = 3002;
LABEL_29:
        sub_2394202DC((_QWORD *)(*(_QWORD *)v17 + 192), v18);
      }
    }
  }
LABEL_17:
  *a3 = 0;
  a3[1] = 0;
LABEL_18:
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_23946505C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2394650AC(uint64_t a1, unint64_t __val)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  void *v11;
  int v12;
  BOOL v14;
  std::string v16;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    goto LABEL_33;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = __val;
    if (v2 <= __val)
      v4 = __val % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & __val;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v4);
  if (!v5)
    goto LABEL_33;
  v6 = *v5;
  if (!*v5)
    goto LABEL_33;
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == __val)
      {
        if (*((_DWORD *)v6 + 4) == (_DWORD)__val)
          goto LABEL_21;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_33;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_33;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == __val)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_33;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_33;
  }
  if (*((_DWORD *)v6 + 4) != (_DWORD)__val)
    goto LABEL_11;
LABEL_21:
  std::to_string(&v16, __val);
  v10 = std::string::insert(&v16, 0, "Cannot find image id: ");
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  v12 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v14 = v12 < 0 && v11 == 0;
  if (v12 < 0)
  {
    operator delete(v11);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_32;
LABEL_29:
    if (v14)
LABEL_33:
      sub_239EBF210();
  }
  else
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
LABEL_32:
    operator delete(v16.__r_.__value_.__l.__data_);
    if (v14)
      goto LABEL_33;
  }
  return v6 + 3;
}

void sub_239465210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_23946522C(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  unint64_t v5;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  float64x2_t v11;
  float64x2_t v12;

  v2 = (unsigned __int8 *)(a2 + 32);
  v3 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a2 + 32))
  {
    v5 = a1[4];
    if (v5)
    {
      v7 = 0;
      for (i = 0; i < v5; ++i)
      {
        if (((*(_QWORD *)(a1[3] + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
        {
          v9 = a1[6];
          v12 = vdivq_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(v9 + v7)), *(float64x2_t *)(a2 + 16)), *(float64x2_t *)a2);
          sub_239465308(v2, v12.f64, 5, v11.f64);
          *(float32x2_t *)(v9 + v7) = vcvt_f32_f64(vmlaq_f64(*(float64x2_t *)(a2 + 16), *(float64x2_t *)a2, v11));
          v5 = a1[4];
        }
        v7 += 24;
      }
    }
  }
  return v3 != 0;
}

void sub_239465308(unsigned __int8 *a1@<X0>, double *a2@<X1>, int a3@<W2>, double *a4@<X8>)
{
  int v4;
  int v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  long double v29;
  long double v30;
  long double v31;
  double v32;
  double v33;

  v4 = a3;
  v6 = *a1;
  if (v6 == 2)
  {
    v20 = *a2;
    v21 = a2[1];
    if (a3 < 1)
    {
      v28 = a2[1];
      v27 = *a2;
    }
    else
    {
      v22 = (double *)*((_QWORD *)a1 + 1);
      v23 = *v22;
      v24 = v22[1];
      v25 = v22[2];
      v26 = v22[3];
      v27 = *a2;
      v28 = a2[1];
      do
      {
        v29 = sqrt(v28 * v28 + v27 * v27);
        v30 = atan2(v29, 1.0);
        v31 = v29
            / (v30
             + v23 * (v30 * (v30 * v30))
             + v24 * (v30 * v30 * (v30 * (v30 * v30)))
             + v25 * (v30 * v30 * (v30 * v30 * (v30 * (v30 * v30))))
             + v26 * (v30 * v30 * (v30 * v30 * (v30 * v30 * (v30 * (v30 * v30))))));
        v27 = v20 * v31;
        v28 = v21 * v31;
        --v4;
      }
      while (v4);
    }
    *a4 = v27;
    a4[1] = v28;
  }
  else if (v6 == 1)
  {
    v7 = *a2;
    v8 = a2[1];
    if (a3 < 1)
    {
      v16 = a2[1];
      v15 = *a2;
    }
    else
    {
      v9 = (double *)*((_QWORD *)a1 + 1);
      v10 = *v9;
      v11 = v9[1];
      v12 = v9[2];
      v13 = v9[3];
      v14 = v9[4];
      if (v13 * v13 + v14 * v14 <= 2.22507386e-308)
      {
        v15 = *a2;
        v16 = a2[1];
        do
        {
          v32 = v16 * v16 + v15 * v15;
          v33 = 1.0 / (v10 * v32 + 1.0 + v11 * (v32 * v32) + v12 * (v32 * (v32 * v32)));
          v15 = v7 * v33;
          v16 = v8 * v33;
          --v4;
        }
        while (v4);
      }
      else
      {
        v15 = *a2;
        v16 = a2[1];
        do
        {
          v17 = v16 * v16 + v15 * v15;
          v18 = 1.0 / (v10 * v17 + 1.0 + v11 * (v17 * v17) + v12 * (v17 * (v17 * v17)));
          v19 = v15 * v16;
          v15 = v18 * (v7 - (v14 * (v17 + (v15 + v15) * v15) + (v13 + v13) * (v15 * v16)));
          v16 = (v8 - ((v14 + v14) * v19 + v13 * (v17 + (v16 + v16) * v16))) * v18;
          --v4;
        }
        while (v4);
      }
    }
    *a4 = v15;
    a4[1] = v16;
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
  }
}

_QWORD *sub_2394654E0(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2394657EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239465800(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_239465B0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239465B20(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 >> 8];
  v6 = (uint64_t)*v5 + 16 * v4;
  v7 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*(_BYTE *)(a1 + 40) + v4);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 16;
      if (v6 - (_QWORD)*v5 != 4096)
        continue;
LABEL_10:
      v11 = (uint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 16;
    if (v6 - (_QWORD)*v5 == 4096)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 128;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 256;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_239465CCC(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239462CB8(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239465B20(a1 + 8);
  return a1;
}

uint64_t sub_239465D54(_QWORD *a1)
{
  const void **v1;
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  int *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  std::__shared_weak_count_vtbl **v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int i;
  std::__shared_weak_count_vtbl *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count_vtbl *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  void (__cdecl *v49)(std::__shared_weak_count *__hidden);
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  std::__shared_weak_count *shared_owners;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unsigned int *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  _QWORD *v129;
  _QWORD *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  const void *v141;
  uint64_t v142;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  std::__shared_weak_count_vtbl *v149;
  uint64_t v150;
  void (__cdecl *on_zero_shared)(std::__shared_count *__hidden);
  void (__cdecl *v152)(std::__shared_weak_count *__hidden);
  _QWORD *v153;
  char *v154;
  void (__cdecl *v155)(std::__shared_weak_count *__hidden);
  void (__cdecl *v156)(std::__shared_count *__hidden);
  unint64_t *v157;
  uint64_t v158;
  const void **v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *get_deleter;
  void (__cdecl *v162)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  __int128 v166;
  void (__cdecl *v167)(std::__shared_weak_count *__hidden);
  uint64_t (**v169)();
  _BYTE v170[80];
  _QWORD *v171;
  _QWORD *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count_vtbl *v174;
  std::__shared_weak_count *v175;
  char v176;
  std::__shared_weak_count_vtbl **v177;
  uint64_t v178;

  v1 = (const void **)a1;
  v178 = *MEMORY[0x24BDAC8D0];
  v2 = std::__thread_local_data();
  v3 = *v1;
  *v1 = 0;
  pthread_setspecific(v2->__key_, v3);
  pthread_set_qos_class_self_np(*((qos_class_t *)v1[1] + 82), 0);
  v4 = (int *)v1[1];
  v5 = (std::__shared_weak_count *)operator new(0x138uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v145 = v5;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBC10;
  v147 = (uint64_t)&v5[1];
  sub_2394677AC((uint64_t)&v5[1], v4[62], v1 + 6);
  v172 = 0;
  v173 = 0;
  v171 = 0;
  v169 = &off_250ADBC88;
  sub_239467E48((uint64_t)v170);
  v159 = v1;
  if (!*((_QWORD *)v1[19] + 3))
    goto LABEL_21;
  v6 = sub_239481820(*((_DWORD *)v1[1] + 80), *((unsigned int *)v1[1] + 81));
  v8 = v7;
  v9 = operator new();
  sub_2397A9868(&v174);
  sub_23971AF90(v9, &v174);
  v10 = v175;
  if (v175)
  {
    v11 = (unint64_t *)&v175->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v171;
  v171 = (_QWORD *)v9;
  if (v13)
  {
    v14 = sub_239420C38(v13);
    MEMORY[0x23B83E31C](v14, 0x10E0C40BC756B95);
  }
  if (*((int *)v159[1] + 83) < 0)
    v15 = 99999;
  else
    v15 = *((_DWORD *)v159[1] + 83);
  v166 = *(_OWORD *)(v159 + 19);
  v16 = (std::__shared_weak_count *)operator new(0x138uLL);
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBD40;
  v17 = operator new(0x40uLL);
  *v17 = &off_250ADBD78;
  v17[1] = &v172;
  *((_OWORD *)v17 + 1) = v166;
  v17[4] = &v171;
  v17[5] = &v169;
  v17[6] = v6;
  *((_DWORD *)v17 + 14) = v8;
  v177 = (std::__shared_weak_count_vtbl **)v17;
  sub_23946A398((uint64_t)&v16[1], v15, &v174);
  v18 = v177;
  if (v177 == &v174)
  {
    v19 = 4;
    v18 = &v174;
    goto LABEL_16;
  }
  if (v177)
  {
    v19 = 5;
LABEL_16:
    (*((void (**)(std::__shared_weak_count_vtbl **))&(*v18)->~__shared_weak_count + v19))(v18);
  }
  v20 = v173;
  v172 = &v16[1].__vftable;
  v173 = v16;
  v1 = v159;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v153 = (_QWORD *)*((_QWORD *)v159[2] + 2);
      if (!v153)
        goto LABEL_212;
      goto LABEL_22;
    }
  }
LABEL_21:
  v153 = (_QWORD *)*((_QWORD *)v1[2] + 2);
  if (!v153)
    goto LABEL_212;
LABEL_22:
  v146 = (uint64_t)(v1 + 10);
  for (i = sub_2396FD7B0((uint64_t)(v1 + 10)); !i; i = sub_2396FD7B0(v146))
  {
    if (!*(_BYTE *)v1[4])
    {
      sub_239467490(v147, v153[2], &v174);
      on_zero_shared = 0;
      v152 = 0;
      get_deleter = 0;
      v162 = 0;
      v150 = 0;
      v160 = 0;
      goto LABEL_51;
    }
    if (v172)
    {
      sub_2394671EC((uint64_t)v172, v153[2], &v174);
      v24 = v174;
      if (v174)
      {
        v152 = v174->~__shared_weak_count;
        v162 = v174->~__shared_weak_count_0;
        if (v162)
        {
          v25 = (unint64_t *)((char *)v162 + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        on_zero_shared = v24->__on_zero_shared;
        get_deleter = (std::__shared_weak_count *)v24->__get_deleter;
        if (get_deleter)
        {
          v27 = (unint64_t *)&get_deleter->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        on_zero_shared_weak = v24->__on_zero_shared_weak;
        v29 = (std::__shared_weak_count *)v24[1].~__shared_weak_count;
        v150 = (uint64_t)on_zero_shared_weak;
        if (v29)
        {
          v160 = v29;
          v31 = (unint64_t *)&v29->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
          v33 = v175;
          if (!v175)
          {
LABEL_49:
            if (!*(_BYTE *)v1[5])
              goto LABEL_54;
            goto LABEL_50;
          }
        }
        else
        {
          v160 = 0;
          v33 = v175;
          if (!v175)
            goto LABEL_49;
        }
      }
      else
      {
        on_zero_shared = 0;
        v152 = 0;
        get_deleter = 0;
        v162 = 0;
        v150 = 0;
        v160 = 0;
        v33 = v175;
        if (!v175)
          goto LABEL_49;
      }
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        if (!*(_BYTE *)v1[5])
        {
LABEL_54:
          v36 = 0;
          v37 = (unint64_t *)v153[3];
          v148 = (unint64_t *)v153[4];
          v149 = 0;
          if (v37 == v148)
            goto LABEL_188;
LABEL_55:
          v38 = (unint64_t *)&v36->__shared_owners_;
          v39 = (unint64_t *)((char *)v162 + 8);
          v40 = (unint64_t *)&get_deleter->__shared_owners_;
          v41 = (unint64_t *)&v160->__shared_owners_;
          while (2)
          {
            v42 = *v37;
            if (!*(_BYTE *)v1[4])
            {
              sub_239467490(v147, *v37, &v174);
              v155 = 0;
              v156 = 0;
              v165 = 0;
              v167 = 0;
              v158 = 0;
              v53 = v174;
              v163 = v175;
              v164 = 0;
              goto LABEL_81;
            }
            if (!v172)
            {
              v155 = 0;
              v156 = 0;
              v165 = 0;
              v167 = 0;
              v158 = 0;
              v164 = 0;
              if (*(_BYTE *)v1[5])
                goto LABEL_80;
              goto LABEL_73;
            }
            sub_2394671EC((uint64_t)v172, *v37, &v174);
            v43 = v174;
            if (v174)
            {
              v155 = v174->~__shared_weak_count;
              v167 = v174->~__shared_weak_count_0;
              if (v167)
              {
                v44 = (unint64_t *)((char *)v167 + 8);
                do
                  v45 = __ldxr(v44);
                while (__stxr(v45 + 1, v44));
              }
              v156 = v43->__on_zero_shared;
              v165 = (std::__shared_weak_count *)v43->__get_deleter;
              if (v165)
              {
                v46 = (unint64_t *)&v165->__shared_owners_;
                do
                  v47 = __ldxr(v46);
                while (__stxr(v47 + 1, v46));
              }
              v49 = v43->__on_zero_shared_weak;
              v48 = (std::__shared_weak_count *)v43[1].~__shared_weak_count;
              v158 = (uint64_t)v49;
              if (v48)
              {
                v164 = v48;
                v50 = (unint64_t *)&v48->__shared_owners_;
                do
                  v51 = __ldxr(v50);
                while (__stxr(v51 + 1, v50));
                v52 = v175;
                if (!v175)
                {
LABEL_79:
                  if (*(_BYTE *)v1[5])
                    goto LABEL_80;
LABEL_73:
                  v53 = 0;
                  v163 = 0;
LABEL_81:
                  v56 = (char *)operator new(0xA8uLL);
                  v57 = (std::__shared_weak_count *)v56;
                  *((_QWORD *)v56 + 1) = 0;
                  v58 = (unint64_t *)(v56 + 8);
                  *((_QWORD *)v56 + 2) = 0;
                  *(_OWORD *)(v56 + 24) = 0u;
                  *(_QWORD *)v56 = &off_250ADBF20;
                  *(_OWORD *)(v56 + 40) = 0u;
                  *(_OWORD *)(v56 + 56) = 0u;
                  *(_OWORD *)(v56 + 72) = 0u;
                  *(_OWORD *)(v56 + 88) = 0u;
                  *(_OWORD *)(v56 + 104) = 0u;
                  *(_OWORD *)(v56 + 120) = 0u;
                  *(_OWORD *)(v56 + 136) = 0u;
                  *(_OWORD *)(v56 + 152) = 0u;
                  v154 = v56 + 24;
                  *((_QWORD *)v56 + 3) = v153[2];
                  *((_QWORD *)v56 + 4) = v42;
                  if (v36)
                  {
                    do
                      v59 = __ldxr(v38);
                    while (__stxr(v59 + 1, v38));
                    v60 = (std::__shared_weak_count *)*((_QWORD *)v56 + 6);
                    *((_QWORD *)v56 + 5) = v149;
                    *((_QWORD *)v56 + 6) = v36;
                    if (v60)
                    {
                      v61 = (unint64_t *)&v60->__shared_owners_;
                      do
                        v62 = __ldaxr(v61);
                      while (__stlxr(v62 - 1, v61));
                      if (!v62)
                      {
                        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                        std::__shared_weak_count::__release_weak(v60);
                      }
                    }
                  }
                  else
                  {
                    *((_QWORD *)v56 + 5) = v149;
                    *((_QWORD *)v56 + 6) = 0;
                  }
                  if (v163)
                  {
                    v63 = (unint64_t *)&v163->__shared_owners_;
                    do
                      v64 = __ldxr(v63);
                    while (__stxr(v64 + 1, v63));
                  }
                  shared_weak_owners = (std::__shared_weak_count *)v57[2].__shared_weak_owners_;
                  v57[2].__shared_owners_ = (uint64_t)v53;
                  v57[2].__shared_weak_owners_ = (uint64_t)v163;
                  if (!shared_weak_owners)
                    goto LABEL_96;
                  v66 = (unint64_t *)&shared_weak_owners->__shared_owners_;
                  do
                    v67 = __ldaxr(v66);
                  while (__stlxr(v67 - 1, v66));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                    std::__shared_weak_count::__release_weak(shared_weak_owners);
                    if (v162)
                      goto LABEL_97;
                  }
                  else
                  {
LABEL_96:
                    if (v162)
                    {
                      do
LABEL_97:
                        v68 = __ldxr(v39);
                      while (__stxr(v68 + 1, v39));
                    }
                  }
                  shared_owners = (std::__shared_weak_count *)v57[3].__shared_owners_;
                  v57[3].__vftable = (std::__shared_weak_count_vtbl *)v152;
                  v57[3].__shared_owners_ = (uint64_t)v162;
                  if (!shared_owners)
                    goto LABEL_102;
                  v70 = (unint64_t *)&shared_owners->__shared_owners_;
                  do
                    v71 = __ldaxr(v70);
                  while (__stlxr(v71 - 1, v70));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
                    std::__shared_weak_count::__release_weak(shared_owners);
                    if (v167)
                      goto LABEL_103;
                  }
                  else
                  {
LABEL_102:
                    if (v167)
                    {
LABEL_103:
                      v72 = (unint64_t *)((char *)v167 + 8);
                      do
                        v73 = __ldxr(v72);
                      while (__stxr(v73 + 1, v72));
                    }
                  }
                  v74 = (std::__shared_weak_count *)v57[4].__vftable;
                  v57[3].__shared_weak_owners_ = (uint64_t)v155;
                  v57[4].__vftable = (std::__shared_weak_count_vtbl *)v167;
                  if (!v74)
                    goto LABEL_109;
                  v75 = (unint64_t *)&v74->__shared_owners_;
                  do
                    v76 = __ldaxr(v75);
                  while (__stlxr(v76 - 1, v75));
                  if (!v76)
                  {
                    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                    std::__shared_weak_count::__release_weak(v74);
                    if (get_deleter)
                      goto LABEL_110;
                  }
                  else
                  {
LABEL_109:
                    if (get_deleter)
                    {
                      do
LABEL_110:
                        v77 = __ldxr(v40);
                      while (__stxr(v77 + 1, v40));
                    }
                  }
                  v78 = (std::__shared_weak_count *)v57[4].__shared_weak_owners_;
                  v57[4].__shared_owners_ = (uint64_t)on_zero_shared;
                  v57[4].__shared_weak_owners_ = (uint64_t)get_deleter;
                  if (!v78)
                    goto LABEL_115;
                  v79 = (unint64_t *)&v78->__shared_owners_;
                  do
                    v80 = __ldaxr(v79);
                  while (__stlxr(v80 - 1, v79));
                  if (!v80)
                  {
                    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                    std::__shared_weak_count::__release_weak(v78);
                    if (v165)
                      goto LABEL_116;
                  }
                  else
                  {
LABEL_115:
                    if (v165)
                    {
LABEL_116:
                      v81 = (unint64_t *)&v165->__shared_owners_;
                      do
                        v82 = __ldxr(v81);
                      while (__stxr(v82 + 1, v81));
                    }
                  }
                  v83 = (std::__shared_weak_count *)v57[5].__shared_owners_;
                  v57[5].__vftable = (std::__shared_weak_count_vtbl *)v156;
                  v57[5].__shared_owners_ = (uint64_t)v165;
                  if (!v83)
                    goto LABEL_122;
                  v84 = (unint64_t *)&v83->__shared_owners_;
                  do
                    v85 = __ldaxr(v84);
                  while (__stlxr(v85 - 1, v84));
                  if (!v85)
                  {
                    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                    std::__shared_weak_count::__release_weak(v83);
                    if (v160)
                      goto LABEL_123;
                  }
                  else
                  {
LABEL_122:
                    if (v160)
                    {
                      do
LABEL_123:
                        v86 = __ldxr(v41);
                      while (__stxr(v86 + 1, v41));
                    }
                  }
                  v87 = (std::__shared_weak_count *)v57[6].__vftable;
                  v57[5].__shared_weak_owners_ = v150;
                  v57[6].__vftable = (std::__shared_weak_count_vtbl *)v160;
                  if (!v87)
                    goto LABEL_128;
                  v88 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                    v157 = v37;
                    if (v164)
                      goto LABEL_129;
                  }
                  else
                  {
LABEL_128:
                    v157 = v37;
                    if (v164)
                    {
LABEL_129:
                      v90 = (unint64_t *)&v164->__shared_owners_;
                      do
                        v91 = __ldxr(v90);
                      while (__stxr(v91 + 1, v90));
                    }
                  }
                  v92 = v36;
                  v93 = (std::__shared_weak_count *)v57[6].__shared_weak_owners_;
                  v57[6].__shared_owners_ = v158;
                  v57[6].__shared_weak_owners_ = (uint64_t)v164;
                  if (v93)
                  {
                    v94 = (unint64_t *)&v93->__shared_owners_;
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                    if (!v95)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                  v96 = (unsigned int *)v159[3];
                  sub_2397A1694((pthread_mutex_t *)(v96 + 44));
                  v97 = *((_QWORD *)v96 + 6);
                  if (v97 < *v96)
                  {
LABEL_139:
                    if (!*((_BYTE *)v96 + 56))
                    {
                      v98 = *((_QWORD *)v96 + 3);
                      v99 = *((_QWORD *)v96 + 2);
                      if (v98 == v99)
                        v100 = 0;
                      else
                        v100 = 32 * (v98 - v99) - 1;
                      v101 = *((_QWORD *)v96 + 5) + v97;
                      if (v100 == v101)
                      {
                        sub_23946C850((uint64_t)(v96 + 2));
                        v99 = *((_QWORD *)v96 + 2);
                        v101 = *((_QWORD *)v96 + 6) + *((_QWORD *)v96 + 5);
                      }
                      v102 = (_QWORD *)(*(_QWORD *)(v99 + ((v101 >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * v101);
                      *v102 = v154;
                      v102[1] = v57;
                      do
                        v103 = __ldxr(v58);
                      while (__stxr(v103 + 1, v58));
                      ++*((_QWORD *)v96 + 6);
                      pthread_cond_signal((pthread_cond_t *)(v96 + 32));
                    }
                  }
                  else
                  {
                    while (!*((_BYTE *)v96 + 56))
                    {
                      ++*((_QWORD *)v96 + 8);
                      pthread_cond_wait((pthread_cond_t *)(v96 + 20), (pthread_mutex_t *)(v96 + 44));
                      --*((_QWORD *)v96 + 8);
                      v97 = *((_QWORD *)v96 + 6);
                      if (v97 < *v96)
                        goto LABEL_139;
                    }
                  }
                  sub_2397A16B4((pthread_mutex_t *)(v96 + 44));
                  do
                    v104 = __ldaxr(v58);
                  while (__stlxr(v104 - 1, v58));
                  v36 = v92;
                  if (v104)
                  {
                    v1 = v159;
                    v105 = v157;
                    v106 = v164;
                    if (!v164)
                      goto LABEL_157;
                  }
                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                    v1 = v159;
                    v105 = v157;
                    v106 = v164;
                    if (!v164)
                      goto LABEL_157;
                  }
                  v107 = (unint64_t *)&v106->__shared_owners_;
                  do
                    v108 = __ldaxr(v107);
                  while (__stlxr(v108 - 1, v107));
                  if (v108)
                  {
LABEL_157:
                    v109 = v165;
                    if (v165)
                      goto LABEL_158;
                  }
                  else
                  {
                    ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                    std::__shared_weak_count::__release_weak(v164);
                    v109 = v165;
                    if (v165)
                    {
LABEL_158:
                      v110 = (unint64_t *)&v109->__shared_owners_;
                      do
                        v111 = __ldaxr(v110);
                      while (__stlxr(v111 - 1, v110));
                      if (!v111)
                      {
                        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                        std::__shared_weak_count::__release_weak(v165);
                      }
                    }
                  }
                  if (!v167)
                    goto LABEL_179;
                  v112 = (unint64_t *)((char *)v167 + 8);
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(_QWORD *)v167 + 16))(v167);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v167);
                    v114 = v163;
                    if (v163)
                    {
LABEL_180:
                      v115 = (unint64_t *)&v114->__shared_owners_;
                      do
                        v116 = __ldaxr(v115);
                      while (__stlxr(v116 - 1, v115));
                      if (!v116)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
                  }
                  else
                  {
LABEL_179:
                    v114 = v163;
                    if (v163)
                      goto LABEL_180;
                  }
                  v37 = v105 + 1;
                  if (v37 == v148)
                    goto LABEL_188;
                  continue;
                }
LABEL_76:
                v54 = (unint64_t *)&v52->__shared_owners_;
                do
                  v55 = __ldaxr(v54);
                while (__stlxr(v55 - 1, v54));
                if (v55)
                  goto LABEL_79;
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
                if (!*(_BYTE *)v1[5])
                  goto LABEL_73;
LABEL_80:
                sub_239467490(v147, v42, &v174);
                v53 = v174;
                v163 = v175;
                goto LABEL_81;
              }
            }
            else
            {
              v155 = 0;
              v156 = 0;
              v165 = 0;
              v167 = 0;
              v158 = 0;
            }
            break;
          }
          v164 = 0;
          v52 = v175;
          if (!v175)
            goto LABEL_79;
          goto LABEL_76;
        }
        goto LABEL_50;
      }
      goto LABEL_49;
    }
    on_zero_shared = 0;
    v152 = 0;
    get_deleter = 0;
    v162 = 0;
    v150 = 0;
    v160 = 0;
    if (!*(_BYTE *)v1[5])
      goto LABEL_54;
LABEL_50:
    sub_239467490(v147, v153[2], &v174);
LABEL_51:
    v36 = v175;
    v37 = (unint64_t *)v153[3];
    v148 = (unint64_t *)v153[4];
    v149 = v174;
    if (v37 != v148)
      goto LABEL_55;
    if (!v160)
      goto LABEL_192;
LABEL_188:
    v117 = (unint64_t *)&v160->__shared_owners_;
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
      v119 = get_deleter;
      if (!get_deleter)
        goto LABEL_198;
    }
    else
    {
LABEL_192:
      v119 = get_deleter;
      if (!get_deleter)
        goto LABEL_198;
    }
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))get_deleter->__on_zero_shared)(get_deleter);
      std::__shared_weak_count::__release_weak(get_deleter);
    }
    if (!v162)
      goto LABEL_202;
LABEL_198:
    v122 = (unint64_t *)((char *)v162 + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(_QWORD *)v162 + 16))(v162);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v162);
      if (!v36)
        goto LABEL_23;
    }
    else
    {
LABEL_202:
      if (!v36)
        goto LABEL_23;
    }
    v124 = (unint64_t *)&v36->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
LABEL_23:
    v153 = (_QWORD *)*v153;
    if (!v153)
      goto LABEL_212;
  }
  v126 = (uint64_t)v1[18];
  v176 = 0;
  LOBYTE(v174) = 0;
  sub_2396FCC6C(v126, (uint64_t)&v174);
  if (v176 < 0)
    operator delete(v174);
LABEL_212:
  std::mutex::lock((std::mutex *)&v145[10].__shared_owners_);
  v145[9].__shared_weak_owners_ = 0;
  v145[10].__vftable = 0;
  sub_239467C88(v147);
  std::mutex::unlock((std::mutex *)&v145[10].__shared_owners_);
  v127 = (uint64_t)v172;
  if (v172)
  {
    std::mutex::lock((std::mutex *)(v172 + 28));
    *(_QWORD *)(v127 + 208) = 0;
    *(_QWORD *)(v127 + 216) = 0;
    sub_239467C88(v127);
    std::mutex::unlock((std::mutex *)(v127 + 224));
  }
  sub_239416DA0((uint64_t)v170);
  v128 = nullsub_4(&v169);
  v129 = v171;
  v171 = 0;
  if (v129)
  {
    v130 = sub_239420C38(v129);
    MEMORY[0x23B83E31C](v130, 0x10E0C40BC756B95);
  }
  v131 = v173;
  if (v173)
  {
    v132 = (unint64_t *)&v173->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v131->__on_zero_shared)(v131, v128);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  do
    v134 = __ldaxr(p_shared_owners);
  while (__stlxr(v134 - 1, p_shared_owners));
  if (!v134)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v145->__on_zero_shared)(v145, v128);
    std::__shared_weak_count::__release_weak(v145);
  }
  if (a1)
  {
    v135 = (_QWORD *)a1[17];
    if (v135 == a1 + 14)
    {
      v136 = 4;
      v135 = a1 + 14;
LABEL_229:
      (*(void (**)(__n128))(*v135 + 8 * v136))(v128);
    }
    else if (v135)
    {
      v136 = 5;
      goto LABEL_229;
    }
    v137 = (_QWORD *)a1[13];
    if (v137 == a1 + 10)
    {
      v138 = 4;
      v137 = a1 + 10;
LABEL_234:
      (*(void (**)(__n128))(*v137 + 8 * v138))(v128);
    }
    else if (v137)
    {
      v138 = 5;
      goto LABEL_234;
    }
    v139 = (_QWORD *)a1[9];
    if (v139 == a1 + 6)
    {
      v140 = 4;
      v139 = a1 + 6;
LABEL_239:
      (*(void (**)(__n128))(*v139 + 8 * v140))(v128);
    }
    else if (v139)
    {
      v140 = 5;
      goto LABEL_239;
    }
    v141 = (const void *)*a1;
    *a1 = 0;
    if (v141)
    {
      v142 = MEMORY[0x23B83DE84](v128);
      MEMORY[0x23B83E31C](v142, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0x1070C40527462E3, v128);
  }
  return 0;
}

void sub_239466CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t *a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  _QWORD *v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;

  if (*(char *)(v37 - 105) < 0)
    operator delete(*(void **)(v37 - 128));
  sub_239416DA0(a9);
  nullsub_4(&a35);
  v39 = *(_QWORD **)(v37 - 152);
  *(_QWORD *)(v37 - 152) = 0;
  if (v39)
  {
    v40 = sub_239420C38(v39);
    MEMORY[0x23B83E31C](v40, 0x10E0C40BC756B95);
  }
  v41 = *(std::__shared_weak_count **)(v37 - 136);
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  do
    v44 = __ldaxr(a10);
  while (__stlxr(v44 - 1, a10));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
    std::__shared_weak_count::__release_weak(a11);
  }
  sub_2394670EC(&a34);
  _Unwind_Resume(a1);
}

uint64_t **sub_2394670EC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  v3 = (uint64_t *)v2[17];
  if (v3 == v2 + 14)
  {
    v4 = 4;
    v3 = v2 + 14;
  }
  else
  {
    if (!v3)
      goto LABEL_7;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_7:
  v5 = (uint64_t *)v2[13];
  if (v5 == v2 + 10)
  {
    v6 = 4;
    v5 = v2 + 10;
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = (uint64_t *)v2[9];
  if (v7 == v2 + 6)
  {
    v8 = 4;
    v7 = v2 + 6;
    goto LABEL_16;
  }
  if (v7)
  {
    v8 = 5;
LABEL_16:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = *v2;
  *v2 = 0;
  if (v9)
  {
    v10 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v10, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](v2, 0x1070C40527462E3);
  return a1;
}

void sub_2394671EC(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  unsigned __int8 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;

  v27 = a2;
  v5 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  ++*(_QWORD *)(a1 + 208);
  v26 = 0uLL;
  if (sub_23946A940(a1, &v27, &v26))
  {
    ++*(_QWORD *)(a1 + 216);
    *(_OWORD *)a3 = v26;
    v26 = 0uLL;
    goto LABEL_32;
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_32;
  }
  v22[0] = v27;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(&v25, v6, v22);
  if ((_QWORD)v25)
  {
    sub_23946AAB8(a1, &v27, (uint64_t *)&v25, (uint64_t)v22);
    v7 = v24;
    if (!v24)
      goto LABEL_19;
    v8 = *(_QWORD *)(a1 + 200);
    if (v8 && (v9 = v22[0], v22[0] != v27))
    {
      v21[0] = v22[1];
      v21[1] = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v8 = *(_QWORD *)(a1 + 200);
        v28 = v9;
        if (!v8)
          sub_2394172E0();
      }
      else
      {
        v28 = v22[0];
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, v21, &v28);
      sub_239416DA0((uint64_t)v21);
      v7 = v24;
      if (!v24)
      {
LABEL_19:
        *(_OWORD *)a3 = v25;
        v25 = 0uLL;
        if (!v7)
          goto LABEL_27;
LABEL_22:
        v12 = v23;
        if (v23)
        {
          v13 = (unint64_t *)&v23->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_27;
      }
    }
    else
    {
      v7 = 1;
    }
    if (v22[0] == v27)
      goto LABEL_19;
    sub_23946AEA0(a1, &v27, a3);
    if (v24)
      goto LABEL_22;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
LABEL_27:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_32:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::mutex::unlock(v5);
}

void sub_23946742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_23946B010((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_239467470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::mutex *v9;
  va_list va;

  va_start(va, a9);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_239467490(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[2];
  _QWORD v22[2];
  std::__shared_weak_count *v23;
  unsigned __int8 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;

  v27 = a2;
  v5 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  ++*(_QWORD *)(a1 + 208);
  v26 = 0uLL;
  if (sub_23946A940(a1, &v27, &v26))
  {
    ++*(_QWORD *)(a1 + 216);
    *(_OWORD *)a3 = v26;
    v26 = 0uLL;
    goto LABEL_32;
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_32;
  }
  v22[0] = v27;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(&v25, v6, v22);
  if ((_QWORD)v25)
  {
    sub_23946BA10(a1, &v27, (uint64_t *)&v25, (uint64_t)v22);
    v7 = v24;
    if (!v24)
      goto LABEL_19;
    v8 = *(_QWORD *)(a1 + 200);
    if (v8 && (v9 = v22[0], v22[0] != v27))
    {
      v21[0] = v22[1];
      v21[1] = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v8 = *(_QWORD *)(a1 + 200);
        v28 = v9;
        if (!v8)
          sub_2394172E0();
      }
      else
      {
        v28 = v22[0];
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, v21, &v28);
      sub_239416DA0((uint64_t)v21);
      v7 = v24;
      if (!v24)
      {
LABEL_19:
        *(_OWORD *)a3 = v25;
        v25 = 0uLL;
        if (!v7)
          goto LABEL_27;
LABEL_22:
        v12 = v23;
        if (v23)
        {
          v13 = (unint64_t *)&v23->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        goto LABEL_27;
      }
    }
    else
    {
      v7 = 1;
    }
    if (v22[0] == v27)
      goto LABEL_19;
    sub_23946BDF8(a1, &v27, a3);
    if (v24)
      goto LABEL_22;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
LABEL_27:
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_32:
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::mutex::unlock(v5);
}

void sub_2394676D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_23946B010((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void sub_239467714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::mutex *v9;
  va_list va;

  va_start(va, a9);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239467734(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  return nullsub_4(a1);
}

void sub_23946775C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBC10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23946776C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBC10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23946779C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2394677AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_OWORD *)(a1 + 72) = xmmword_239EC69E0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_250ADBC48;
  v5 = (_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 850045863;
  v6 = (std::mutex *)(a1 + 224);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  std::mutex::lock((std::mutex *)(a1 + 224));
  v7 = (_QWORD *)a3[3];
  if (v7)
  {
    if (v7 == a3)
    {
      v12 = v11;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v11);
    }
    else
    {
      v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
    sub_239467AE8(v11, v5);
    v8 = v12;
    if (v12 == v11)
    {
      v9 = 4;
      v8 = v11;
      goto LABEL_9;
    }
    if (v12)
    {
      v9 = 5;
LABEL_9:
      (*(void (**)(void))(*v8 + 8 * v9))();
    }
  }
  std::mutex::unlock(v6);
  return a1;
}

void sub_23946791C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::mutex *v3;
  _QWORD **v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  std::mutex::unlock(v3);
  std::mutex::~mutex(v3);
  v6 = *v4;
  if (*v4 == (_QWORD *)(v1 + 176))
  {
    v7 = 4;
    v6 = (_QWORD *)(v1 + 176);
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *(_QWORD **)(v1 + 168);
  if (v8 == v2)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
    v2 = *(_QWORD **)(v1 + 168);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v9))(v2);
LABEL_11:
  sub_2394679A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394679A8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = &off_250ADBC68;
  sub_239467C88(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(uint64_t **)(a1 + 64);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v2 != (uint64_t *)(a1 + 56))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 56));
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  while (v6)
  {
    v9 = v6;
    v6 = (_QWORD *)*v6;
    v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_239467A9C(uint64_t a1)
{
  sub_239467D7C(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239467AC4(uint64_t a1)
{
  sub_2394679A8(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_239467AE8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239467C7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

void sub_239467C88(uint64_t a1)
{
  std::mutex *v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v2 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  for (i = *(_QWORD *)(a1 + 72); i; i = *(_QWORD *)(a1 + 72))
  {
    v4 = *(uint64_t **)(a1 + 56);
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = v4[1];
    *(_QWORD *)v4[1] = v5;
    *(_QWORD *)(a1 + 72) = i - 1;
    operator delete(v4);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v6 = *(_QWORD **)(a1 + 24);
    while (v6)
    {
      v9 = v6;
      v6 = (_QWORD *)*v6;
      v10 = (std::__shared_weak_count *)v9[4];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      operator delete(v9);
    }
    *(_QWORD *)(a1 + 24) = 0;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * j) = 0;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  std::mutex::unlock(v2);
}

uint64_t sub_239467D7C(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_250ADBC48;
  v2 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_239467C88(a1);
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
  v3 = *(_QWORD **)(a1 + 200);
  if (v3 == (_QWORD *)(a1 + 176))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 168);
  if (v5 == (_QWORD *)(a1 + 144))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 144);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return sub_2394679A8(a1);
}

void sub_239467E30(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  sub_239416A48(a1);
}

uint64_t sub_239467E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  sub_239468084(&v13);
  v2 = v13;
  v14 = v13;
  if (v13)
  {
    v3 = (std::__shared_weak_count *)operator new();
    v4 = v13;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBD08;
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  }
  else
  {
    v3 = 0;
  }
  v13 = 0;
  v14 = 0;
  v16 = v2;
  v17 = v3;
  v15 = 0;
  sub_2398263E0(a1, &v16, 0);
  v5 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v12 = sub_239769BAC(result);
    return MEMORY[0x23B83E31C](v12, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

void sub_239467F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239468174((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239467F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    sub_239EBED3C();
  sub_239416DA0((uint64_t)&a11);
  sub_239468174(&a10);
  _Unwind_Resume(a1);
}

void sub_239467FA0(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239467FDC()
{
  return 1;
}

uint64_t sub_239467FE4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_239467FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 2, a1 + 64, 2, a1 + 72, 1);
}

uint64_t sub_239468008(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

uint64_t sub_239468084@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  _DWORD v7[8];
  __int128 v8;
  uint64_t (**v9)();

  v9 = &off_250ADBCC8;
  sub_239784FE4(&v5);
  v2 = operator new();
  *(_QWORD *)v2 = off_250AE6E18;
  v3 = v7[6];
  *(_DWORD *)(v2 + 8) = v6;
  *(_BYTE *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 40) = -1;
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t, _DWORD *))off_250ADBCD8[v3])(&v9, v2 + 16, v7);
    *(_DWORD *)(v2 + 40) = v3;
  }
  *(_OWORD *)(v2 + 48) = v8;
  *(_QWORD *)v2 = off_250AE7568;
  *a1 = v2;
  return sub_239769BAC((uint64_t)&v5);
}

void sub_239468160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239769BAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_239468174(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_239769BAC(v2);
    MEMORY[0x23B83E31C](v3, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_2394681BC()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2394681D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AE94F0;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_2394681F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_250AE94B0;
  return result;
}

__n128 sub_239468210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_250AE94D0;
  return result;
}

__n128 sub_239468230(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

void sub_239468244(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239468268(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_239769BAC(result);
    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

void sub_2394682A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394682B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBD40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394682E0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2394682F4()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_239468308(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250ADBD78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_239468358(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250ADBD78;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_239468390(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  void **v36;
  void *v37;
  void **v38;
  void *v39;
  float v40;
  float v41;
  std::__shared_weak_count *v42;
  void **v43;
  void *v44;
  std::__shared_weak_count *v45;
  void **v46;
  void **v47;
  void **v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  void *v72;
  void **v73;
  void *shared_owners;
  void **v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t v83;
  float v84;
  void *__p[2];
  void *v86[2];
  int v87[10];
  __int128 v88;
  uint64_t (**v89)();
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  _BYTE v95[40];
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (!v5)
  {
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  v6 = *a2;
  *(_QWORD *)v95 = *a2;
  (*(void (**)(_QWORD **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v5 + 48))(&v93, v5, v95);
  if (!v93)
  {
    *a3 = 0;
    a3[1] = 0;
    v49 = v94;
    if (!v94)
      return;
    goto LABEL_104;
  }
  v89 = &off_250ADB778;
  sub_239469138((uint64_t)&v90);
  v7 = (char *)operator new(0x48uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_250ADBDC0;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *a3 = v7 + 24;
  a3[1] = v7;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if (v8)
  {
    *(_QWORD *)v95 = v6;
    (*(void (**)(void **__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(&v81, v8, v95);
    if (v81)
    {
      *(_QWORD *)v95 = &off_250ADB628;
      sub_239422F30(&v95[8]);
      v10 = *(unsigned int *)(a1 + 48);
      v9 = *(unsigned int *)(a1 + 52);
      __p[0] = &off_250ADB778;
      sub_23946936C((uint64_t)v93, (uint64_t)&__p[1]);
      sub_23949A2D8((uint32x2_t *)__p, (int32x2_t *)v81, (uint64_t)&v89, (uint64_t)v95, (float *)&v88, v9 | (v10 << 32), 1, 8u);
      nullsub_4(v87);
      v11 = (std::__shared_weak_count *)v86[0];
      if (v86[0])
      {
        v12 = (unint64_t *)((char *)v86[0] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      j_nullsub_4_89(__p);
      v14 = (char *)operator new(0x28uLL);
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = 0;
      *(_QWORD *)v14 = &off_250ADBDF8;
      *(_OWORD *)(v14 + 24) = v88;
      v15 = *a3;
      v16 = *(std::__shared_weak_count **)(*a3 + 40);
      *(_QWORD *)(v15 + 32) = v14 + 24;
      *(_QWORD *)(v15 + 40) = v14;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = operator new(0x70uLL);
      v19[1] = 0;
      v19[2] = 0;
      *v19 = &off_250ADBE30;
      v19[3] = &off_250ADB628;
      v20 = *(_OWORD *)&v95[8];
      *(_QWORD *)&v95[8] = 0;
      *(_QWORD *)&v95[16] = 0;
      v21 = *(_OWORD *)&v95[24];
      *((_OWORD *)v19 + 2) = v20;
      *((_OWORD *)v19 + 3) = v21;
      v22 = v97;
      *((_OWORD *)v19 + 4) = v96;
      *((_OWORD *)v19 + 5) = v22;
      v19[12] = v98;
      *((_WORD *)v19 + 52) = v99;
      v23 = *a3;
      v24 = *(std::__shared_weak_count **)(*a3 + 24);
      *(_QWORD *)(v23 + 16) = v19 + 3;
      *(_QWORD *)(v23 + 24) = v19;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)operator new(0xA0uLL);
      v27->__shared_owners_ = 0;
      v27->__shared_weak_owners_ = 0;
      v27->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBE68;
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBEA0;
      sub_239469644((uint64_t)&v89, (uint64_t)&v27[1].__shared_owners_);
      v28 = v94;
      v93 = &v27[1].__vftable;
      v94 = v27;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      sub_239416DA0((uint64_t)&v95[8]);
      nullsub_4(v95);
    }
    v31 = v82;
    if (v82)
    {
      v32 = (unint64_t *)&v82->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  v34 = *(_DWORD *)(a1 + 48);
  v35 = *((_DWORD *)v93 + 29);
  *(float *)&v88 = (float)*(unsigned int *)(a1 + 52) / (float)*((unsigned int *)v93 + 28);
  v84 = (float)v34 / (float)v35;
  if (!**(_QWORD **)(a1 + 32))
  {
    sub_239A444D4((uint64_t)"unknown file", 257, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v86 = 0u;
  v87[0] = 1065353216;
  sub_239719E98((uint64_t)v95, 4, (uint64_t)__p, 0.0, 0.0);
  sub_23942818C(&v81, (uint64_t)v95, 1uLL);
  v36 = *(void ***)&v95[32];
  if (*(_QWORD *)&v95[32])
  {
    do
    {
      v46 = (void **)*v36;
      if (*((char *)v36 + 39) < 0)
        operator delete(v36[2]);
      operator delete(v36);
      v36 = v46;
    }
    while (v46);
  }
  v37 = *(void **)&v95[16];
  *(_QWORD *)&v95[16] = 0;
  if (v37)
    operator delete(v37);
  v38 = (void **)v86[0];
  if (v86[0])
  {
    do
    {
      v47 = (void **)*v38;
      if (*((char *)v38 + 39) < 0)
        operator delete(v38[2]);
      operator delete(v38);
      v38 = v47;
    }
    while (v47);
  }
  v39 = __p[0];
  __p[0] = 0;
  if (v39)
    operator delete(v39);
  if (*(float *)&v88 != 1.0)
  {
    v40 = *(float *)&v88 + -1.0;
    if (*(float *)&v88 < 1.0)
      v40 = 1.0 - *(float *)&v88;
    if (v40 > 0.000001)
      goto LABEL_46;
  }
  if (v84 != 1.0)
  {
    v41 = v84 + -1.0;
    if (v84 < 1.0)
      v41 = 1.0 - v84;
    if (v41 > 0.000001)
    {
LABEL_46:
      LODWORD(__p[0]) = 9;
      v42 = v82;
      if ((unint64_t)v82 >= v83)
      {
        v45 = (std::__shared_weak_count *)sub_239428D8C(&v81, (int *)__p, (float *)&v88, &v84);
      }
      else
      {
        memset(v95, 0, 32);
        *(_DWORD *)&v95[32] = 1065353216;
        sub_239719E98((uint64_t)v82, 9, (uint64_t)v95, *(float *)&v88, v84);
        v43 = *(void ***)&v95[16];
        if (*(_QWORD *)&v95[16])
        {
          do
          {
            v48 = (void **)*v43;
            if (*((char *)v43 + 39) < 0)
              operator delete(v43[2]);
            operator delete(v43);
            v43 = v48;
          }
          while (v48);
        }
        v44 = *(void **)v95;
        *(_QWORD *)v95 = 0;
        if (v44)
          operator delete(v44);
        v45 = (std::__shared_weak_count *)((char *)v42 + 56);
      }
      v82 = v45;
    }
  }
  v50 = *(_QWORD *)(a1 + 40);
  if (!*(_DWORD *)(v50 + 64) || !*(_DWORD *)(v50 + 68))
  {
    __p[0] = (void *)vrev64_s32(*(int32x2_t *)(a1 + 48));
    *(_QWORD *)v95 = &off_250ADBC88;
    sub_239469E68(__p, (uint64_t)&v95[8]);
    v51 = *(_QWORD *)(a1 + 40);
    v52 = *(_OWORD *)&v95[8];
    *(_QWORD *)&v95[8] = 0;
    *(_QWORD *)&v95[16] = 0;
    v53 = *(std::__shared_weak_count **)(v51 + 16);
    *(_OWORD *)(v51 + 8) = v52;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(_OWORD *)&v95[24];
    v57 = v96;
    v58 = v97;
    *(_QWORD *)(v51 + 72) = v98;
    *(_OWORD *)(v51 + 56) = v58;
    *(_OWORD *)(v51 + 40) = v57;
    *(_OWORD *)(v51 + 24) = v56;
    sub_239416DA0((uint64_t)&v95[8]);
    nullsub_4(v95);
    v50 = *(_QWORD *)(a1 + 40);
  }
  sub_23946A0B4(v50, __p);
  *(_QWORD *)v95 = &off_250ADB210;
  sub_239423B80(v93, (uint64_t)&v95[8]);
  sub_239719BC8((uint64_t *)&v81, (int32x2_t *)v95, *(_QWORD *)(a1 + 40), **(_QWORD **)(a1 + 32));
  nullsub_4(&v95[24]);
  v59 = *(std::__shared_weak_count **)&v95[16];
  if (*(_QWORD *)&v95[16])
  {
    v60 = (unint64_t *)(*(_QWORD *)&v95[16] + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      nullsub_4(v95);
      v62 = (_QWORD *)*a3;
      v63 = *(_QWORD *)(*a3 + 16);
      if (!v63)
        goto LABEL_79;
      goto LABEL_78;
    }
  }
  nullsub_4(v95);
  v62 = (_QWORD *)*a3;
  v63 = *(_QWORD *)(*a3 + 16);
  if (v63)
LABEL_78:
    sub_239468FC8(*(_QWORD *)(a1 + 40), v63);
LABEL_79:
  v64 = *(_QWORD *)(a1 + 40);
  v65 = operator new(0x70uLL);
  v65[1] = 0;
  v65[2] = 0;
  *v65 = &off_250ADBE30;
  v65[3] = &off_250ADB628;
  sub_23946A1D8(v64, (uint64_t)(v65 + 4));
  v66 = (std::__shared_weak_count *)v62[1];
  *v62 = v65 + 3;
  v62[1] = v65;
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = __p[0];
  __p[0] = 0;
  if (v69)
    (*(void (**)(void *))(*(_QWORD *)v69 + 8))(v69);
  v70 = (std::__shared_weak_count *)v81;
  if (v81)
  {
    v71 = v82;
    v72 = v81;
    if (v82 != v81)
    {
      do
      {
        v73 = (void **)&v71[-1].~__shared_weak_count;
        if (v73)
        {
          do
          {
            v75 = (void **)*v73;
            if (*((char *)v73 + 39) < 0)
              operator delete(v73[2]);
            operator delete(v73);
            v73 = v75;
          }
          while (v75);
        }
        shared_owners = (void *)v71[-2].__shared_owners_;
        v71[-2].__shared_owners_ = 0;
        if (shared_owners)
          operator delete(shared_owners);
        v71 = (std::__shared_weak_count *)((char *)v71 - 56);
      }
      while (v71 != v70);
      v72 = v81;
    }
    v82 = v70;
    operator delete(v72);
  }
  nullsub_4(&v92);
  v76 = v91;
  if (v91)
  {
    v77 = (unint64_t *)&v91->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  j_nullsub_4_89(&v89);
  v49 = v94;
  if (v94)
  {
LABEL_104:
    v79 = (unint64_t *)&v49->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_239468C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  uint64_t v33;
  char *v35;
  char *v36;
  void **v37;
  void *v38;
  void **v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;

  if (__p)
  {
    v35 = a10;
    v36 = __p;
    if (a10 != __p)
    {
      do
      {
        v37 = (void **)*((_QWORD *)v35 - 3);
        if (v37)
        {
          do
          {
            v39 = (void **)*v37;
            if (*((char *)v37 + 39) < 0)
              operator delete(v37[2]);
            operator delete(v37);
            v37 = v39;
          }
          while (v39);
        }
        v38 = (void *)*((_QWORD *)v35 - 5);
        *((_QWORD *)v35 - 5) = 0;
        if (v38)
          operator delete(v38);
        v35 -= 56;
      }
      while (v35 != __p);
      v36 = __p;
    }
    operator delete(v36);
  }
  v40 = *(std::__shared_weak_count **)(v33 + 8);
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  nullsub_4(&a28);
  v43 = a26;
  if (a26)
  {
    v44 = (unint64_t *)&a26->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  j_nullsub_4_89(&a24);
  v46 = a33;
  if (a33)
  {
    v47 = (unint64_t *)&a33->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_239468FC8(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  double v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  float v12;
  float v13;
  double v14[2];
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t v17;
  std::__shared_weak_count *v18;

  v3 = *(_DWORD *)(a1 + 64);
  v4 = *(_DWORD *)(a1 + 68);
  v5 = *(_DWORD *)(a1 + 76);
  v16 = &off_250ADB350;
  sub_23941CBA8(a2, &v17);
  v15 = *(_QWORD *)(a1 + 64);
  if (v4 >= 1 && v3 >= 1)
  {
    v12 = 0.0;
    do
    {
      v13 = 0.0;
      do
      {
        v14[0] = v13;
        v14[1] = v12;
        if (sub_239417534((uint64_t)&v16, v14, &v15, 1uLL, v13, v6) < 0.5)
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + (int)v13 + (int)(float)(v12 * (float)v5)) = 0;
        v13 = v13 + 1.0;
      }
      while (v13 < (float)v3);
      v12 = v12 + 1.0;
    }
    while (v12 < (float)v4);
  }
  v8 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  nullsub_4(&v16);
  return 1;
}

void sub_239469110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nullsub_4(va);
  _Unwind_Resume(a1);
}

void sub_239469124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2394176A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_239469138@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 v5;
  __int16 v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  sub_23942317C(&v8);
  v2 = v8;
  if (v8)
  {
    v3 = (_QWORD *)operator new();
    *v3 = &off_250ADB740;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = v2;
  }
  else
  {
    v3 = 0;
  }
  v9 = 0;
  v8 = 0;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v10 = 0;
  v11 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  v5 = v4;
  if ((v4 & 0xFFFFFF) <= 0x10000)
    v5 = 0;
  v6 = v4 & 0xFF00;
  if ((v4 & 0xFF0000) == 0)
    v6 = 0;
  *(_WORD *)(a1 + 52) = v6 & 0xFF00 | v5;
  return nullsub_4(&v8);
}

void sub_239469204(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_239469220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  nullsub_4(v11 + 24);
  if (*(_QWORD *)(v11 + 8))
    sub_239EBED3C();
  nullsub_4(&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_239469250(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBDC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239469260(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBDC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239469290(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (std::__shared_weak_count *)a1[8];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[6];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[4];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

uint64_t sub_23946936C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  v4 = a1 + 8;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 32))(&v22, v5);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
  v11 = v22;
  v20 = v22;
  if (v22)
  {
    v12 = (_QWORD *)operator new();
    v13 = v22;
    *v12 = &off_250ADB740;
    v12[1] = 0;
    v12[2] = 0;
    v12[3] = v13;
  }
  else
  {
    v12 = 0;
  }
  v21 = v12;
  v22 = 0;
  v14 = sub_239826490(v4);
  sub_2398EB464((uint64_t)&v18, 3, a1 + 88, 3, a1 + 100, 1);
  v15 = *(_WORD *)(a1 + 128);
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  v16 = v18;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v16;
  *(_DWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v10;
  *(_DWORD *)(a2 + 48) = 21;
  *(_WORD *)(a2 + 52) = v15;
  nullsub_4(&v18);
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_2394694D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;

  sub_239416DA0((uint64_t)&a12);
  v15 = a14;
  a14 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_239469508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2398EB464(a2, 3, a1 + 88, 3, a1 + 100, 1);
}

void sub_239469524(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBDF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239469534(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBDF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23946956C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBE30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23946957C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBE30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394695AC(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_239416DA0(a1 + 32);
  return nullsub_4(v1);
}

void sub_2394695D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBE68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394695E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBE68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239469618(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_239416DA0(a1 + 32);
  return nullsub_4(v1);
}

void sub_239469644(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;

  sub_239469834(a1, &v13);
  v12 = v13;
  v13 = 0uLL;
  if ((*(_QWORD *)(a1 + 24) & 0xFF00000000) != 0)
    v4 = *(_QWORD *)(a1 + 24) | 0x100000000;
  else
    v4 = 0;
  v5 = *(_WORD *)(a1 + 60);
  sub_2398277C4(a2, &v12, v4);
  *(_WORD *)(a2 + 120) = v5;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_239469728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_239416DA0((uint64_t)&a9);
  sub_239416DA0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

double sub_239469744(uint64_t a1)
{
  double result;

  sub_239416DA0(a1 + 8);
  *(_QWORD *)&result = nullsub_4(a1).n128_u64[0];
  return result;
}

void sub_23946976C(uint64_t a1)
{
  sub_239416DA0(a1 + 8);
  nullsub_4(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394697A8()
{
  return 21;
}

uint64_t sub_2394697B0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_2394697B8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_239469834(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string::size_type v13;
  _QWORD *v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::string v17;

  if (*(_DWORD *)(a1 + 56) != 21)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_239469A74(a1, &v17);
    std::logic_error::logic_error(exception, &v17);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)&unk_250ADB400, MEMORY[0x24BEDAB88]);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (v4)
    {
      *a2 = v4;
      a2[1] = 0;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
    v10 = (std::__shared_weak_count *)a2[1];
    if (!v10)
      goto LABEL_25;
    goto LABEL_21;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  if (v4)
  {
    *a2 = v4;
    a2[1] = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (*a2)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (*a2)
      return;
  }
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
LABEL_21:
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_25:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(&v17);
  v13 = v17.__r_.__value_.__r.__words[0];
  *a2 = v17.__r_.__value_.__r.__words[0];
  if (v13)
  {
    v14 = (_QWORD *)operator new();
    v15 = v17.__r_.__value_.__r.__words[0];
    *v14 = &off_250ADB740;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v15;
    a2[1] = v14;
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_239469A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (__p)
  {
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239469A74(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  unsigned int v6;

  v4 = sub_239469AEC();
  v5 = sub_2394244E4();
  v6 = *(_DWORD *)(a1 + 56);
  sub_239419DAC("Attempting to create an ", (uint64_t)v4, " from an ", (uint64_t)v5, " but the image is of incompatible format ", &v6, a2);
}

std::string *sub_239469AEC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 *v3;
  int64x2_t v4;
  int8x16_t v5;
  void *v6[3];
  void *v7[2];
  char v8;
  std::string v9;
  std::string __p;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_256930778);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_256930778))
  {
    sub_23941A4FC(v7, "Image");
    v2 = sub_239469DC0();
    sub_239469CF0((std::string::size_type)v2, &v9);
    v3 = sub_23941B478();
    sub_239469CF0((std::string::size_type)v3, &__p);
    sub_23941B674(v6, (uint64_t)&v9, 2uLL);
    sub_239A44200((uint64_t)v7, (uint64_t *)v6, &stru_256930760, v4, v5);
    sub_23941B08C(v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v8 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x24BEDACF0], &stru_256930760, &dword_23940C000);
          __cxa_guard_release(&qword_256930778);
          return &stru_256930760;
        }
LABEL_10:
        operator delete(v7[0]);
        goto LABEL_7;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  return &stru_256930760;
}

void sub_239469C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_23941B08C((void **)&a9);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_256930778);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_256930778);
  _Unwind_Resume(a1);
}

void sub_239469CF0(std::string::size_type a1@<X1>, std::string *a2@<X8>)
{
  void *__p;
  char v3;
  void *v4[4];

  HIBYTE(v4[2]) = 16;
  strcpy((char *)v4, "cv3d::kit::img::");
  v3 = 0;
  LOBYTE(__p) = 0;
  sub_239A438B4(a1, (char *)v4, (uint64_t)&__p, 1, 1, a2);
  if ((v3 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v4[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v4[0]);
    return;
  }
  operator delete(__p);
  if (SHIBYTE(v4[2]) < 0)
    goto LABEL_5;
}

void sub_239469D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

__int128 *sub_239469DC0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_256930798);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_256930798))
    return &xmmword_256930780;
  sub_239A43EA4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb8u]", &xmmword_256930780);
  __cxa_atexit(MEMORY[0x24BEDACF0], &xmmword_256930780, &dword_23940C000);
  __cxa_guard_release(&qword_256930798);
  return &xmmword_256930780;
}

void sub_239469E50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_256930798);
  _Unwind_Resume(a1);
}

uint64_t sub_239469E68@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_239469FC0(a1, &v14);
  v3 = v14;
  v15 = v14;
  if (v14)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v14;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBD08;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  }
  else
  {
    v4 = 0;
  }
  v14 = 0;
  v15 = 0;
  v17 = v3;
  v18 = v4;
  v16 = 0;
  sub_2398263E0(a2, &v17, 0);
  v6 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    v13 = sub_239769BAC(result);
    return MEMORY[0x23B83E31C](v13, 0x10A3C40A1F8E8FFLL);
  }
  return result;
}

void sub_239469F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239468174((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_239469F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    sub_239EBED3C();
  sub_239416DA0((uint64_t)&a11);
  sub_239468174(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_239469FC0@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[8];
  int v7;
  _DWORD v8[8];
  __int128 v9;
  uint64_t (**v10)();

  v10 = &off_250ADBCC8;
  sub_239785038(a1, (uint64_t)v6);
  v3 = operator new();
  *(_QWORD *)v3 = off_250AE6E18;
  v4 = v8[6];
  *(_DWORD *)(v3 + 8) = v7;
  *(_BYTE *)(v3 + 16) = 0;
  *(_DWORD *)(v3 + 40) = -1;
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(uint64_t (***)(), uint64_t, _DWORD *))off_250ADBCD8[v4])(&v10, v3 + 16, v8);
    *(_DWORD *)(v3 + 40) = v4;
  }
  *(_OWORD *)(v3 + 48) = v9;
  *(_QWORD *)v3 = off_250AE7568;
  *a2 = v3;
  return sub_239769BAC((uint64_t)v6);
}

void sub_23946A0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_239769BAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23946A0B4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_14;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      goto LABEL_15;
  }
  else
  {
LABEL_14:
    if (v5)
    {
LABEL_15:
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), 1);
      return;
    }
  }
  *a2 = 0;
}

void sub_23946A1D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count_vtbl *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count_vtbl *v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v3 = a1 + 8;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      sub_2397791D8(v4, &v23);
      v9 = v23;
      if (v23)
        goto LABEL_7;
LABEL_9:
      v10 = 0;
      goto LABEL_10;
    }
  }
  sub_2397791D8(v4, &v23);
  v9 = v23;
  if (!v23)
    goto LABEL_9;
LABEL_7:
  v10 = (std::__shared_weak_count *)operator new();
  v11 = v23;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB740;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v11;
LABEL_10:
  v19 = v9;
  v20 = v10;
  v21 = 0;
  v22 = 0;
  v12 = (uint64_t *)sub_2397A9F50(v3);
  sub_2398263E0(a2, &v19, *v12);
  *(_WORD *)(a2 + 72) = 256;
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_23946A358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void sub_23946A37C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_23946A398(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_OWORD *)(a1 + 72) = xmmword_239EC69E0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_250ADBEE0;
  v5 = (_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = 850045863;
  v6 = (std::mutex *)(a1 + 224);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  std::mutex::lock((std::mutex *)(a1 + 224));
  v7 = (_QWORD *)a3[3];
  if (v7)
  {
    if (v7 == a3)
    {
      v12 = v11;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v11);
    }
    else
    {
      v12 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    }
    sub_23946A6D4(v11, v5);
    v8 = v12;
    if (v12 == v11)
    {
      v9 = 4;
      v8 = v11;
      goto LABEL_9;
    }
    if (v12)
    {
      v9 = 5;
LABEL_9:
      (*(void (**)(void))(*v8 + 8 * v9))();
    }
  }
  std::mutex::unlock(v6);
  return a1;
}

void sub_23946A508(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::mutex *v3;
  _QWORD **v4;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  std::mutex::unlock(v3);
  std::mutex::~mutex(v3);
  v6 = *v4;
  if (*v4 == (_QWORD *)(v1 + 176))
  {
    v7 = 4;
    v6 = (_QWORD *)(v1 + 176);
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *(_QWORD **)(v1 + 168);
  if (v8 == v2)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      goto LABEL_11;
    v9 = 5;
    v2 = *(_QWORD **)(v1 + 168);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v9))(v2);
LABEL_11:
  sub_23946A594(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23946A594(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  *(_QWORD *)a1 = &off_250ADBF00;
  sub_239467C88(a1);
  std::mutex::~mutex((std::mutex *)(a1 + 80));
  if (*(_QWORD *)(a1 + 72))
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(uint64_t **)(a1 + 64);
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    *(_QWORD *)(a1 + 72) = 0;
    if (v2 != (uint64_t *)(a1 + 56))
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 56));
    }
  }
  v6 = *(_QWORD **)(a1 + 24);
  while (v6)
  {
    v9 = v6;
    v6 = (_QWORD *)*v6;
    v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    operator delete(v9);
  }
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_23946A688(uint64_t a1)
{
  sub_23946A874(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23946A6B0(uint64_t a1)
{
  sub_23946A594(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23946A6D4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_23946A868(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_239416A48(a1);
}

uint64_t sub_23946A874(uint64_t a1)
{
  std::mutex *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_250ADBEE0;
  v2 = (std::mutex *)(a1 + 224);
  std::mutex::lock((std::mutex *)(a1 + 224));
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  sub_239467C88(a1);
  std::mutex::unlock(v2);
  std::mutex::~mutex(v2);
  v3 = *(_QWORD **)(a1 + 200);
  if (v3 == (_QWORD *)(a1 + 176))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 176);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 168);
  if (v5 == (_QWORD *)(a1 + 144))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 144);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return sub_23946A594(a1);
}

void sub_23946A928(void *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  sub_239416A48(a1);
}

uint64_t sub_23946A940(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  std::mutex *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v6 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v7 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v7)
    goto LABEL_21;
  v8 = *a2;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_21:
    v16 = 0;
    goto LABEL_22;
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8)
          goto LABEL_23;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_21;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v8 == v14)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_21;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_21;
  }
  if (v12[2] != v8)
    goto LABEL_11;
LABEL_23:
  v19 = v12[3];
  v18 = v12[4];
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = (std::__shared_weak_count *)a3[1];
  *a3 = v19;
  a3[1] = v18;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v16 = 1;
LABEL_22:
  std::mutex::unlock(v6);
  return v16;
}

void sub_23946AAB8(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  _QWORD *v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51[2];
  unint64_t v52;

  v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v9 = (_QWORD *)(a1 + 8);
  v10 = *a2;
  v11 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v11)
    goto LABEL_21;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = *a2;
    if (v10 >= *(_QWORD *)&v11)
      v13 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v14 = *(_QWORD **)(*v9 + 8 * v13);
  if (!v14 || (v15 = (_QWORD *)*v14) == 0)
  {
LABEL_21:
    if ((unint64_t)(*(_QWORD *)(a1 + 32) + 1) <= *(_QWORD *)(a1 + 48))
    {
      v22 = operator new(0x18uLL);
      v23 = *(_QWORD **)(a1 + 64);
      *v22 = a1 + 56;
      v22[1] = v23;
      v22[2] = v10;
      *v23 = v22;
      v24 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v24;
      sub_23946B394(a1 + 8, a2, a2, a3);
      goto LABEL_29;
    }
    v18 = *(_QWORD *)(a1 + 72);
    if (v18)
    {
      v19 = *(uint64_t **)(a1 + 56);
      v20 = v19[2];
      v52 = v20;
      if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
      {
        v29 = v20;
        if (v20 >= *(_QWORD *)&v11)
          v29 = v20 % *(_QWORD *)&v11;
        v21 = *(_QWORD **)(*v9 + 8 * v29);
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      else
      {
        v21 = *(_QWORD **)(*v9 + 8 * (v20 & (*(_QWORD *)&v11 - 1)));
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      v31 = (_QWORD *)v21[3];
      v30 = (std::__shared_weak_count *)v21[4];
      v51[0] = v31;
      v51[1] = &v30->__vftable;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v19 = *(uint64_t **)(a1 + 56);
        v18 = *(_QWORD *)(a1 + 72);
      }
      v34 = *v19;
      *(_QWORD *)(v34 + 8) = v19[1];
      *(_QWORD *)v19[1] = v34;
      *(_QWORD *)(a1 + 72) = v18 - 1;
      operator delete(v19);
      sub_23946B080((_QWORD *)(a1 + 8), &v52);
      v35 = operator new(0x18uLL);
      v36 = *a2;
      v37 = *(_QWORD **)(a1 + 64);
      *v35 = a1 + 56;
      v35[1] = v37;
      v35[2] = v36;
      *v37 = v35;
      v38 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v35;
      *(_QWORD *)(a1 + 72) = v38;
      sub_23946B394(a1 + 8, a2, a2, a3);
      v39 = v52;
      if (v30)
      {
        v40 = (unint64_t *)&v30->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        *(_QWORD *)a4 = v39;
        *(_QWORD *)(a4 + 8) = v31;
        *(_QWORD *)(a4 + 16) = v30;
        *(_BYTE *)(a4 + 24) = 1;
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        goto LABEL_52;
      }
      *(_QWORD *)a4 = v52;
      *(_QWORD *)(a4 + 8) = v31;
      *(_QWORD *)(a4 + 16) = 0;
    }
    else
    {
      v26 = *a3;
      v25 = a3[1];
      if (v25)
      {
        v27 = (unint64_t *)(v25 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      *(_QWORD *)a4 = v10;
      *(_QWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 16) = v25;
    }
    *(_BYTE *)(a4 + 24) = 1;
    goto LABEL_52;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == v10)
      {
        if (v15[2] == v10)
          goto LABEL_53;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_21;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == v10)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_21;
LABEL_11:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_21;
  }
  if (v15[2] != v10)
    goto LABEL_11;
LABEL_53:
  v51[0] = a2;
  v43 = sub_23946B6E0(a1 + 8, a2, (uint64_t)&unk_239EC6E98, v51);
  v45 = *a3;
  v44 = a3[1];
  if (v44)
  {
    v46 = (unint64_t *)(v44 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)v43[4];
  v43[3] = v45;
  v43[4] = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_29:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_52:
  std::mutex::unlock(v8);
}

void sub_23946AE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_23946AE8C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23946AEA0(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v7 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v7)
    goto LABEL_25;
  v8 = *a2;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_25:
    sub_239A444D4((uint64_t)"unknown file", 230, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8)
          goto LABEL_21;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_25;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v8 == v14)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_25;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_25;
  }
  if (v12[2] != v8)
    goto LABEL_11;
LABEL_21:
  v16 = v12[4];
  *a3 = v12[3];
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::mutex::unlock(v6);
}

void sub_23946AFFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23946B010(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

uint64_t sub_23946B080(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  char v17;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  v7 = *v6;
  if (!*v6)
    return 0;
  if (v4.u32[0] < 2uLL)
  {
    v8 = *(_QWORD *)&v2 - 1;
    while (1)
    {
      v10 = v7[1];
      if (v10 == v3)
      {
        if (v7[2] == v3)
          goto LABEL_22;
      }
      else if ((v10 & v8) != v5)
      {
        return 0;
      }
      v7 = (_QWORD *)*v7;
      if (!v7)
        return 0;
    }
  }
  while (1)
  {
    v9 = v7[1];
    if (v9 == v3)
      break;
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
    if (v9 != v5)
      return 0;
LABEL_11:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v7[2] != v3)
    goto LABEL_11;
LABEL_22:
  sub_23946B1E4(a1, v7, (uint64_t)&__p);
  v12 = __p;
  __p = 0;
  if (v12)
  {
    if (v17)
    {
      v13 = (std::__shared_weak_count *)v12[4];
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    operator delete(v12);
  }
  return 1;
}

_QWORD *sub_23946B1E4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_23946B318(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_23946B394(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = *a4;
  v16 = a4[1];
  v12[2] = *a3;
  v12[3] = v17;
  v12[4] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_23946B6CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23946B6E0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23946B9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23946BA10(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::mutex *v8;
  _QWORD *v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51[2];
  unint64_t v52;

  v8 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v9 = (_QWORD *)(a1 + 8);
  v10 = *a2;
  v11 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v11)
    goto LABEL_21;
  v12 = (uint8x8_t)vcnt_s8(v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    v13 = *a2;
    if (v10 >= *(_QWORD *)&v11)
      v13 = v10 % *(_QWORD *)&v11;
  }
  else
  {
    v13 = (*(_QWORD *)&v11 - 1) & v10;
  }
  v14 = *(_QWORD **)(*v9 + 8 * v13);
  if (!v14 || (v15 = (_QWORD *)*v14) == 0)
  {
LABEL_21:
    if ((unint64_t)(*(_QWORD *)(a1 + 32) + 1) <= *(_QWORD *)(a1 + 48))
    {
      v22 = operator new(0x18uLL);
      v23 = *(_QWORD **)(a1 + 64);
      *v22 = a1 + 56;
      v22[1] = v23;
      v22[2] = v10;
      *v23 = v22;
      v24 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v22;
      *(_QWORD *)(a1 + 72) = v24;
      sub_23946BF68(a1 + 8, a2, a2, a3);
      goto LABEL_29;
    }
    v18 = *(_QWORD *)(a1 + 72);
    if (v18)
    {
      v19 = *(uint64_t **)(a1 + 56);
      v20 = v19[2];
      v52 = v20;
      if ((*(_QWORD *)&v11 & (*(_QWORD *)&v11 - 1)) != 0)
      {
        v29 = v20;
        if (v20 >= *(_QWORD *)&v11)
          v29 = v20 % *(_QWORD *)&v11;
        v21 = *(_QWORD **)(*v9 + 8 * v29);
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      else
      {
        v21 = *(_QWORD **)(*v9 + 8 * (v20 & (*(_QWORD *)&v11 - 1)));
        do
        {
          do
            v21 = (_QWORD *)*v21;
          while (v21[1] != v20);
        }
        while (v21[2] != v20);
      }
      v31 = (_QWORD *)v21[3];
      v30 = (std::__shared_weak_count *)v21[4];
      v51[0] = v31;
      v51[1] = &v30->__vftable;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v33 = __ldxr(p_shared_owners);
        while (__stxr(v33 + 1, p_shared_owners));
        v19 = *(uint64_t **)(a1 + 56);
        v18 = *(_QWORD *)(a1 + 72);
      }
      v34 = *v19;
      *(_QWORD *)(v34 + 8) = v19[1];
      *(_QWORD *)v19[1] = v34;
      *(_QWORD *)(a1 + 72) = v18 - 1;
      operator delete(v19);
      sub_23946B080((_QWORD *)(a1 + 8), &v52);
      v35 = operator new(0x18uLL);
      v36 = *a2;
      v37 = *(_QWORD **)(a1 + 64);
      *v35 = a1 + 56;
      v35[1] = v37;
      v35[2] = v36;
      *v37 = v35;
      v38 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 64) = v35;
      *(_QWORD *)(a1 + 72) = v38;
      sub_23946BF68(a1 + 8, a2, a2, a3);
      v39 = v52;
      if (v30)
      {
        v40 = (unint64_t *)&v30->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        *(_QWORD *)a4 = v39;
        *(_QWORD *)(a4 + 8) = v31;
        *(_QWORD *)(a4 + 16) = v30;
        *(_BYTE *)(a4 + 24) = 1;
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        goto LABEL_52;
      }
      *(_QWORD *)a4 = v52;
      *(_QWORD *)(a4 + 8) = v31;
      *(_QWORD *)(a4 + 16) = 0;
    }
    else
    {
      v26 = *a3;
      v25 = a3[1];
      if (v25)
      {
        v27 = (unint64_t *)(v25 + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      *(_QWORD *)a4 = v10;
      *(_QWORD *)(a4 + 8) = v26;
      *(_QWORD *)(a4 + 16) = v25;
    }
    *(_BYTE *)(a4 + 24) = 1;
    goto LABEL_52;
  }
  if (v12.u32[0] < 2uLL)
  {
    while (1)
    {
      v17 = v15[1];
      if (v17 == v10)
      {
        if (v15[2] == v10)
          goto LABEL_53;
      }
      else if ((v17 & (*(_QWORD *)&v11 - 1)) != v13)
      {
        goto LABEL_21;
      }
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v16 = v15[1];
    if (v16 == v10)
      break;
    if (v16 >= *(_QWORD *)&v11)
      v16 %= *(_QWORD *)&v11;
    if (v16 != v13)
      goto LABEL_21;
LABEL_11:
    v15 = (_QWORD *)*v15;
    if (!v15)
      goto LABEL_21;
  }
  if (v15[2] != v10)
    goto LABEL_11;
LABEL_53:
  v51[0] = a2;
  v43 = sub_23946C2B4(a1 + 8, a2, (uint64_t)&unk_239EC6E98, v51);
  v45 = *a3;
  v44 = a3[1];
  if (v44)
  {
    v46 = (unint64_t *)(v44 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)v43[4];
  v43[3] = v45;
  v43[4] = v44;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_29:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
LABEL_52:
  std::mutex::unlock(v8);
}

void sub_23946BDC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_239416DA0((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_23946BDE4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_23946BDF8(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v6 = (std::mutex *)(a1 + 80);
  std::mutex::lock((std::mutex *)(a1 + 80));
  v7 = *(int8x8_t *)(a1 + 16);
  if (!*(_QWORD *)&v7)
    goto LABEL_25;
  v8 = *a2;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = *a2;
    if (v8 >= *(_QWORD *)&v7)
      v10 = v8 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v8;
  }
  v11 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8 * v10);
  if (!v11 || (v12 = (_QWORD *)*v11) == 0)
  {
LABEL_25:
    sub_239A444D4((uint64_t)"unknown file", 230, (uint64_t)"", (void (*)(void *))sub_239A4463C);
    sub_239A4475C();
    abort();
  }
  if (v9.u32[0] < 2uLL)
  {
    v13 = *(_QWORD *)&v7 - 1;
    while (1)
    {
      v15 = v12[1];
      if (v8 == v15)
      {
        if (v12[2] == v8)
          goto LABEL_21;
      }
      else if ((v15 & v13) != v10)
      {
        goto LABEL_25;
      }
      v12 = (_QWORD *)*v12;
      if (!v12)
        goto LABEL_25;
    }
  }
  while (1)
  {
    v14 = v12[1];
    if (v8 == v14)
      break;
    if (v14 >= *(_QWORD *)&v7)
      v14 %= *(_QWORD *)&v7;
    if (v14 != v10)
      goto LABEL_25;
LABEL_11:
    v12 = (_QWORD *)*v12;
    if (!v12)
      goto LABEL_25;
  }
  if (v12[2] != v8)
    goto LABEL_11;
LABEL_21:
  v16 = v12[4];
  *a3 = v12[3];
  a3[1] = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::mutex::unlock(v6);
}

void sub_23946BF54(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_23946BF68(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = *a4;
  v16 = a4[1];
  v12[2] = *a3;
  v12[3] = v17;
  v12[4] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_23946C2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23946C2B4(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v14 = (_QWORD *)(a1 + 16);
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  v11[3] = 0;
  v11[4] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *v11 = *v18;
LABEL_61:
      *v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v26 & v7;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v7));
      if (v18)
        goto LABEL_26;
    }
  }
  *v11 = *v14;
  *v14 = v11;
  *(_QWORD *)(v17 + 8 * v4) = v14;
  if (*v11)
  {
    v27 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_23946C5D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_23946C5E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23946C5F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBF20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

_QWORD *sub_23946C624(uint64_t a1)
{
  return sub_23946C630((_QWORD *)(a1 + 24));
}

_QWORD *sub_23946C630(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v2 = (std::__shared_weak_count *)a1[17];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[15];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = (std::__shared_weak_count *)a1[13];
  if (!v8)
    goto LABEL_15;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  else
  {
LABEL_15:
    v11 = (std::__shared_weak_count *)a1[11];
    if (!v11)
      goto LABEL_21;
  }
  v12 = (unint64_t *)&v11->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v14 = (std::__shared_weak_count *)a1[9];
  if (!v14)
    goto LABEL_25;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[7];
    if (!v17)
      goto LABEL_31;
  }
  else
  {
LABEL_25:
    v17 = (std::__shared_weak_count *)a1[7];
    if (!v17)
      goto LABEL_31;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  v20 = (std::__shared_weak_count *)a1[5];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = (std::__shared_weak_count *)a1[3];
      if (v23)
        goto LABEL_36;
      return a1;
    }
  }
  v23 = (std::__shared_weak_count *)a1[3];
  if (!v23)
    return a1;
LABEL_36:
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (v25)
    return a1;
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  return a1;
}

void sub_23946C850(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_23946CDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23946CDC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23946CDDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23946CDF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23946CE0C(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_239418A80();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_23946CF98(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_239418A80();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

_QWORD *sub_23946D130(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  *((_WORD *)v15 + 12) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_23946D444(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_23946D458(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_2394189F8();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_239418A80();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v18 = &v8[16 * v3];
  v20 = &v8[16 * v7];
  sub_23946D5E0(v18, a2);
  v9 = v18;
  v11 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    v13 = a1[1];
  }
  else
  {
    do
    {
      v12 = *((_OWORD *)v10 - 1);
      v10 -= 16;
      *((_OWORD *)v9 - 1) = v12;
      v9 -= 16;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
    }
    while (v10 != v11);
    v13 = *a1;
    v10 = a1[1];
  }
  *a1 = v9;
  a1[1] = v18 + 16;
  a1[2] = v20;
  if (v10 == v13)
  {
    if (v10)
LABEL_17:
      operator delete(v10);
  }
  else
  {
    do
    {
      v19 = v10 - 16;
      v15 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v10 = v19;
    }
    while (v19 != v13);
    v10 = v13;
    if (v13)
      goto LABEL_17;
  }
  return v18 + 16;
}

void sub_23946D5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946D7C8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_23946D5E0(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_23946D6F0(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_23946D6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_23946D6F0(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    j__CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_250ADBF58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_23946D750(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    j__CFRelease(v1);
  __cxa_rethrow();
}

void sub_23946D768(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_23946D780(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_23946D7A4(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 24);
  if (v1)
    j__CFRelease(v1);
}

uint64_t sub_23946D7C8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_23946D854(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_2394189F8();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (v7)
  {
    if (v7 >> 60)
      sub_239418A80();
    v8 = (char *)operator new(16 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[16 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = v9 + 16;
  v11 = &v8[16 * v7];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    if (!v13)
      return v10;
    goto LABEL_23;
  }
  do
  {
    v14 = *((_OWORD *)v13 - 1);
    v13 -= 16;
    *((_OWORD *)v9 - 1) = v14;
    v9 -= 16;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
  }
  while (v13 != v12);
  v15 = *a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  if (v13 != v15)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 16;
    }
    while (v13 != v15);
    v13 = v15;
  }
  if (v13)
LABEL_23:
    operator delete(v13);
  return v10;
}

void sub_23946D99C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23946D9AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBF90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23946D9DC(uint64_t a1)
{
  return sub_23946D9E8(a1 + 24);
}

uint64_t sub_23946D9E8(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[5];
      if (v6)
      {
        do
        {
          v8 = (_QWORD *)*v6;
          v9 = (void *)v6[3];
          if (v9)
          {
            v6[4] = v9;
            operator delete(v9);
          }
          operator delete(v6);
          v6 = v8;
        }
        while (v8);
      }
      v7 = (void *)v2[3];
      v2[3] = 0;
      if (v7)
        operator delete(v7);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_23946DA88(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_23946DAD4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_2394189F8();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_239418A80();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_23946DC70(uint64_t a1)
{
  uint64_t v1;
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::mutex *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;

  v1 = a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)v1;
  *(_QWORD *)v1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_DWORD *)(v1 + 56);
  if ((_DWORD)v4 == v5)
  {
LABEL_18:
    v19 = *(const void **)v1;
    *(_QWORD *)v1 = 0;
    if (v19)
    {
      v20 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v20, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v1, 0x1020C4040B36C6ALL);
    return 0;
  }
  v6 = (int)v4;
  do
  {
    v27 = 0;
    v7 = *(_QWORD *)(v1 + 16);
    v27 = *(_QWORD *)(**(_QWORD **)(v1 + 8) + 8 * v6);
    v23 = v27;
    v8 = *(_QWORD *)(v7 + 24);
    if (!v8)
      sub_2394172E0();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(&v25, v8, &v23);
    if (!v25)
      goto LABEL_10;
    v9 = *(_QWORD *)(v1 + 24);
    v10 = (std::__shared_weak_count *)operator new(0x90uLL);
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADB9A0;
    v10->__shared_owners_ = 0;
    sub_23942AC00((uint64_t)&v10[1], v9);
    v23 = v11;
    v24 = v10;
    sub_23942B6B0(v11, v25);
    v12 = *(std::mutex **)(v1 + 32);
    std::mutex::lock(v12);
    sub_23946DF80(*(_QWORD *)(v1 + 40), (unint64_t *)&v27, &v27, &v23);
    std::mutex::unlock(v12);
    v13 = v24;
    if (!v24)
      goto LABEL_10;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v26;
      if (!v26)
        goto LABEL_3;
    }
    else
    {
LABEL_10:
      v16 = v26;
      if (!v26)
        goto LABEL_3;
    }
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_3:
    ++v6;
  }
  while ((_DWORD)v6 != v5);
  v1 = a1;
  if (a1)
    goto LABEL_18;
  return 0;
}

void sub_23946DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;

  v14 = a11;
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = a13;
  if (a13)
  {
    v18 = (unint64_t *)&a13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      sub_23946DF18(&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_23946DF18(&a9);
  _Unwind_Resume(a1);
}

uint64_t **sub_23946DF18(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1020C4040B36C6ALL);
  }
  return a1;
}

_QWORD *sub_23946DF80(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v15 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  v17 = *a4;
  v16 = a4[1];
  v12[2] = *a3;
  v12[3] = v17;
  v12[4] = v16;
  if (v16)
  {
    v18 = (unint64_t *)(v16 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_29:
      *v12 = *v23;
LABEL_64:
      *v23 = v12;
      goto LABEL_65;
    }
  }
  else
  {
    v24 = 1;
    if (v9 >= 3)
      v24 = (v9 & (v9 - 1)) != 0;
    v25 = v24 | (2 * v9);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        v4 = v8 % v9;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
        if (v23)
          goto LABEL_29;
      }
      else
      {
        v4 = v8;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
        if (v23)
          goto LABEL_29;
      }
    }
    else
    {
      v4 = v32 & v8;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v32 & v8));
      if (v23)
        goto LABEL_29;
    }
  }
  *v12 = *v15;
  *v15 = v12;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_64;
  }
LABEL_65:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_23946E2B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946B318((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_23946E2CC(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239462E1C(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239465B20(a1 + 8);
  return a1;
}

uint64_t sub_23946E354(const void **a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = std::__thread_local_data();
  v3 = *a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_23946E454((uint64_t)(a1 + 1));
  v4 = *a1;
  *a1 = 0;
  if (v4)
  {
    v5 = MEMORY[0x23B83DE84]();
    MEMORY[0x23B83E31C](v5, 0x20C4093837F09);
  }
  MEMORY[0x23B83E31C](a1, 0x10F0C4071E04151);
  return 0;
}

void sub_23946E3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_23946E3EC((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_23946E3EC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x10F0C4071E04151);
  }
  return a1;
}

void sub_23946E454(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  unint64_t *v12;
  _BOOL4 v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  _DWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  _BOOL4 v49;
  _BOOL4 v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  BOOL v63;
  _BYTE *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  BOOL v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  int8x8_t v76;
  uint8x8_t v77;
  unint64_t v78;
  _BYTE *v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  BOOL v97;
  uint64_t v98;
  uint64_t *v99;
  int8x8_t v100;
  uint8x8_t v101;
  unint64_t v102;
  _QWORD *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  unsigned int v109;
  uint64_t v110;
  char v111;
  __n128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  __n128 v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t (**v154)();
  unint64_t *v155;
  unint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  _BYTE *v172;
  _DWORD *v173;
  __int128 v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  _QWORD *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t *v222;
  unsigned int v223;
  uint64_t v224;
  char v225;
  __n128 v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  __n128 v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  _BYTE *v256;
  _DWORD *v257;
  __int128 v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t v273;
  uint64_t shared_owners;
  unint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t *v281;
  unint64_t v282;
  uint64_t (**v283)();
  unint64_t *v284;
  unint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  unint64_t *v288;
  unint64_t v289;
  char v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  __int128 v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  unint64_t *v307;
  uint64_t v308;
  int v309;
  __int128 v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  uint64_t v317;
  int *v318;
  std::__shared_weak_count *v319;
  _QWORD *v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  int *v324;
  int *v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  int v333;
  __int128 v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  float *v352;
  uint64_t v353;
  int v354;
  _BYTE *v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t (**v373)();
  std::__shared_weak_count *v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t (**v379)();
  __int128 v380;
  _OWORD v381[2];
  char *v382;
  std::__shared_weak_count *v383;
  char *v384;
  std::__shared_weak_count *v385;
  uint64_t (**v386)();
  std::__shared_weak_count *v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  void *v390[2];
  void *__p[2];
  int v392;
  __int128 v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  uint64_t v396;
  std::__shared_weak_count *v397;
  uint64_t v398;
  std::__shared_weak_count *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t v404;
  unint64_t v405;
  __int128 v406;
  _BYTE v407[24];
  int v408;
  unint64_t v409;
  char v410;
  char v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _DWORD *v415;
  std::__shared_weak_count *v416;
  uint64_t v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  _QWORD *v420;
  std::__shared_weak_count *v421;
  __int128 v422;
  unsigned __int8 v423;

  pthread_set_qos_class_self_np(*(qos_class_t *)(*(_QWORD *)(a1 + 8) + 328), 0);
  sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)&v422);
  v420 = 0;
  v421 = 0;
  if (**(_BYTE **)(a1 + 24))
  {
    v2 = *(int **)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (std::__shared_weak_count *)operator new(0x30uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBFC8;
    v5 = sub_2394768E8(&v4[1].__vftable, *v2, *(_BYTE *)(v3 + 88), 1, *(float *)(v3 + 80));
    v6 = v421;
    v420 = v5;
    v421 = v4;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (**(_BYTE **)(a1 + 40))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (std::__shared_weak_count *)operator new(0x30uLL);
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC000;
    v11 = sub_2394295EC(&v10[1].__vftable, *(_BYTE *)(v9 + 88), *(float *)(v9 + 80));
    v6 = v421;
    v420 = v11;
    v421 = v10;
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v12);
      while (__stlxr(v8 - 1, v12));
LABEL_10:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
LABEL_12:
    v13 = 1;
LABEL_13:
    if ((_QWORD)v422)
      v14 = v423 == 0;
    else
      v14 = 1;
    if (v14)
      goto LABEL_493;
    if (v13)
    {
      while (1)
      {
        if ((sub_2396FD7B0(*(_QWORD *)(a1 + 96)) & 1) != 0)
          goto LABEL_464;
        v16 = (_QWORD *)v422;
        v405 = 0;
        v18 = *(_QWORD *)v422;
        v17 = *(_QWORD *)(v422 + 8);
        v405 = *(_QWORD *)v422;
        v404 = v17;
        v20 = *(_DWORD **)(v422 + 16);
        v19 = *(unint64_t **)(v422 + 24);
        v415 = v20;
        v416 = (std::__shared_weak_count *)v19;
        if (v19)
        {
          v21 = v19 + 1;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)v16[5];
        v371 = v16[4];
        v418 = v371;
        v419 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v26 = v16[7];
        *(_QWORD *)&v406 = v16[6];
        *((_QWORD *)&v406 + 1) = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = (std::__shared_weak_count *)v16[9];
        v402 = v16[8];
        v403 = v29;
        if (v29)
        {
          v30 = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        v33 = v16[10];
        v32 = (std::__shared_weak_count *)v16[11];
        v400 = v33;
        v401 = v32;
        if (v32)
        {
          v34 = (unint64_t *)&v32->__shared_owners_;
          do
            v35 = __ldxr(v34);
          while (__stxr(v35 + 1, v34));
        }
        v37 = v16[12];
        v36 = (std::__shared_weak_count *)v16[13];
        v398 = v37;
        v399 = v36;
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        v41 = v16[14];
        v40 = (std::__shared_weak_count *)v16[15];
        v396 = v41;
        v397 = v40;
        if (v40)
        {
          v42 = (unint64_t *)&v40->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v45 = v16[16];
        v44 = (std::__shared_weak_count *)v16[17];
        v394 = v45;
        v395 = v44;
        if (v44)
        {
          v46 = (unint64_t *)&v44->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = (char *)operator new(0x68uLL);
        v367 = 0;
        *((_QWORD *)v48 + 3) = v18;
        *((_QWORD *)v48 + 1) = 0;
        *((_QWORD *)v48 + 2) = 0;
        *(_QWORD *)v48 = &off_250ADC118;
        *(_OWORD *)(v48 + 72) = 0u;
        *(_OWORD *)(v48 + 88) = 0u;
        v372 &= 0xFFFFFFFFFFFFFF00;
        *(_QWORD *)&v393 = v48 + 24;
        *((_QWORD *)&v393 + 1) = v48;
        v369 &= 0xFFFFFFFFFFFFFF00;
        v370 &= 0xFFFFFFFFFFFFFF00;
        v49 = v20 != 0;
        *((_QWORD *)v48 + 4) = v17;
        *(_OWORD *)(v48 + 40) = 0u;
        v50 = v371 != 0;
        v52 = v49 & v50;
        v51 = !v49 || !v50;
        v53 = v49 && v50 ? v371 : v366 & 0xFFFFFFFFFFFFFF00;
        v54 = v51 ? v365 & 0xFFFFFFFFFFFFFF00 : (unint64_t)v20;
        v365 = v54;
        v366 = v53;
        *(_OWORD *)(v48 + 56) = 0uLL;
        if (v33)
        {
          if (v37)
            break;
        }
        v368 &= 0xFFFFFFFFFFFFFF00;
        v55 = 0;
        if (**(_BYTE **)(a1 + 112))
        {
LABEL_61:
          kdebug_trace();
          goto LABEL_62;
        }
LABEL_81:
        if (v20)
        {
          if (v371)
          {
            if (v20[2] >= 2u && *(_DWORD *)(v371 + 8) >= 2u)
            {
              v211 = v52;
              if (v19)
              {
                v212 = v19 + 1;
                do
                  v213 = __ldxr(v212);
                while (__stxr(v213 + 1, v212));
                v214 = (std::__shared_weak_count *)*((_QWORD *)v48 + 6);
                *((_QWORD *)v48 + 5) = v20;
                *((_QWORD *)v48 + 6) = v19;
                if (v214)
                {
                  v215 = (unint64_t *)&v214->__shared_owners_;
                  do
                    v216 = __ldaxr(v215);
                  while (__stlxr(v216 - 1, v215));
                  if (!v216)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v214);
                  }
                }
              }
              else
              {
                *((_QWORD *)v48 + 5) = v20;
                *((_QWORD *)v48 + 6) = 0;
              }
              v263 = v393;
              v265 = v418;
              v264 = v419;
              if (v419)
              {
                v266 = (unint64_t *)&v419->__shared_owners_;
                do
                  v267 = __ldxr(v266);
                while (__stxr(v267 + 1, v266));
              }
              v268 = *(std::__shared_weak_count **)(v263 + 40);
              *(_QWORD *)(v263 + 32) = v265;
              *(_QWORD *)(v263 + 40) = v264;
              if (v268)
              {
                v269 = (unint64_t *)&v268->__shared_owners_;
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                  std::__shared_weak_count::__release_weak(v268);
                }
              }
              v20 = v415;
              v371 = v418;
              kdebug_trace();
              v52 = v211;
LABEL_62:
              v56 = v52;
              v57 = v393;
              v58 = sub_239470FCC(*(_QWORD *)(a1 + 128), v405);
              v59 = sub_239470FCC(*(_QWORD *)(a1 + 128), v404);
              v60 = *(_QWORD *)(a1 + 8);
              if (!*(_BYTE *)(v60 + 25)
                || (v61 = *((_DWORD *)v58 + 49), v61 == -1)
                || (v62 = *((_DWORD *)v59 + 49), v62 == -1))
              {
                v63 = 0;
                v65 = 1;
                v66 = (_QWORD *)(v57 + 48);
                if (!*(_BYTE *)(v60 + 296))
                  goto LABEL_116;
              }
              else
              {
                v63 = v61 == v62;
                v64 = *(_BYTE **)(a1 + 64);
                if (v64[8])
                {
                  v65 = 0;
                  *(_BYTE *)(*(_QWORD *)v64 + 267) = 1;
                  v66 = (_QWORD *)(v57 + 48);
                  if (!*(_BYTE *)(v60 + 296))
                  {
LABEL_116:
                    if (v65)
                      v97 = 0;
                    else
                      v97 = v63;
                    v73 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 27) | v97;
                    *(_BYTE *)(v57 + 72) = v73;
                    *(_OWORD *)v390 = 0u;
                    *(_OWORD *)__p = 0u;
                    v392 = 1065353216;
                    goto LABEL_120;
                  }
                }
                else
                {
                  v65 = 0;
                  v66 = (_QWORD *)(v57 + 48);
                  if (!*(_BYTE *)(v60 + 296))
                    goto LABEL_116;
                }
              }
              v67 = *(_QWORD *)(a1 + 136);
              *(_QWORD *)v407 = &v405;
              if (!*((_BYTE *)sub_239471AB0(v67, &v405, (uint64_t)&unk_239EC6E98, (_QWORD **)v407) + 25))
                goto LABEL_116;
              v68 = *(_QWORD *)(a1 + 136);
              *(_QWORD *)v407 = &v404;
              if (!*((_BYTE *)sub_239471AB0(v68, &v404, (uint64_t)&unk_239EC6E98, (_QWORD **)v407) + 25))
                goto LABEL_116;
              v69 = *(_QWORD *)(a1 + 136);
              *(_QWORD *)v407 = &v405;
              if (!*((_BYTE *)sub_239471AB0(v69, &v405, (uint64_t)&unk_239EC6E98, (_QWORD **)v407) + 24))
                goto LABEL_116;
              v70 = *(_QWORD *)(a1 + 136);
              *(_QWORD *)v407 = &v404;
              v71 = *((unsigned __int8 *)sub_239471AB0(v70, &v404, (uint64_t)&unk_239EC6E98, (_QWORD **)v407) + 24);
              if (v65)
                v72 = 0;
              else
                v72 = v63;
              v73 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 27) | v72;
              *(_BYTE *)(v57 + 72) = v73;
              *(_OWORD *)v390 = 0u;
              *(_OWORD *)__p = 0u;
              v392 = 1065353216;
              if (v71)
              {
                if (!**(_BYTE **)(a1 + 80))
                {
                  v217 = v420;
                  if (**(_BYTE **)(a1 + 88))
                  {
                    v384 = 0;
                    v385 = 0;
                    v382 = 0;
                    v383 = 0;
                    v218 = (char *)operator new(0x78uLL);
                    *((_QWORD *)v218 + 1) = 0;
                    *((_QWORD *)v218 + 2) = 0;
                    *(_QWORD *)v218 = &off_250ADB7B8;
                    *(_OWORD *)(v218 + 24) = xmmword_239EC65B0;
                    *(_OWORD *)(v218 + 40) = 0u;
                    *(_OWORD *)(v218 + 56) = 0u;
                    *(_OWORD *)(v218 + 72) = 0u;
                    *(_OWORD *)(v218 + 88) = 0u;
                    *(_OWORD *)(v218 + 104) = 0u;
                    v384 = v218 + 24;
                    v385 = (std::__shared_weak_count *)v218;
                    v219 = (char *)operator new(0x78uLL);
                    v220 = (uint64_t)v66;
                    *((_QWORD *)v219 + 1) = 0;
                    *((_QWORD *)v219 + 2) = 0;
                    *(_QWORD *)v219 = &off_250ADB7B8;
                    *(_OWORD *)(v219 + 24) = xmmword_239EC65B0;
                    *(_OWORD *)(v219 + 40) = 0u;
                    *(_OWORD *)(v219 + 56) = 0u;
                    *(_OWORD *)(v219 + 72) = 0u;
                    *(_OWORD *)(v219 + 88) = 0u;
                    *(_OWORD *)(v219 + 104) = 0u;
                    v382 = v219 + 24;
                    v383 = (std::__shared_weak_count *)v219;
                    v221 = sub_239470FCC(*(_QWORD *)(a1 + 128), v405);
                    v222 = sub_239470FCC(*(_QWORD *)(a1 + 128), v404);
                    *(_QWORD *)v407 = &off_250ADB778;
                    sub_2394247FC(v406, (uint64_t)&v407[8]);
                    v379 = &off_250ADB778;
                    sub_2394247FC(v402, (uint64_t)&v380);
                    v223 = *(unsigned __int8 *)(v57 + 72);
                    v224 = v221[25];
                    v377 = v222[25];
                    v378 = v224;
                    v363 = v370;
                    v364 = v367;
                    v361 = v369;
                    v362 = v367;
                    v359 = &v377;
                    v360 = 1;
                    v358 = 1;
                    v357 = &v378;
                    v225 = sub_2394853E0(v217, (uint64_t)v407, (uint64_t)&v379, v223, (uint64_t)v384, (uint64_t)v382, v220, v405 | 0x100000000, v404, 1u, v365, v56, v366, v56, v372, v55, v368, v55);
                    v226 = nullsub_4((char *)v381 + 8);
                    v227 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
                    if (*((_QWORD *)&v380 + 1))
                    {
                      v228 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *, __n128))v227->__on_zero_shared)(v227, v226);
                        std::__shared_weak_count::__release_weak(v227);
                      }
                    }
                    j_nullsub_4_89(&v379);
                    v230 = nullsub_4((char *)&v409 + 4);
                    v231 = *(std::__shared_weak_count **)&v407[16];
                    if (*(_QWORD *)&v407[16])
                    {
                      v232 = (unint64_t *)(*(_QWORD *)&v407[16] + 8);
                      do
                        v233 = __ldaxr(v232);
                      while (__stlxr(v233 - 1, v232));
                      if (!v233)
                      {
                        ((void (*)(std::__shared_weak_count *, __n128))v231->__on_zero_shared)(v231, v230);
                        std::__shared_weak_count::__release_weak(v231);
                      }
                    }
                    j_nullsub_4_89(v407);
                    v234 = v393;
                    v236 = (uint64_t)v384;
                    v235 = v385;
                    if (v385)
                    {
                      v237 = (unint64_t *)&v385->__shared_owners_;
                      do
                        v238 = __ldxr(v237);
                      while (__stxr(v238 + 1, v237));
                    }
                    v239 = *(std::__shared_weak_count **)(v234 + 24);
                    *(_QWORD *)(v234 + 16) = v236;
                    *(_QWORD *)(v234 + 24) = v235;
                    if (v239)
                    {
                      v240 = (unint64_t *)&v239->__shared_owners_;
                      do
                        v241 = __ldaxr(v240);
                      while (__stlxr(v241 - 1, v240));
                      if (!v241)
                      {
                        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                        std::__shared_weak_count::__release_weak(v239);
                      }
                    }
                    v242 = v393;
                    v244 = (uint64_t)v382;
                    v243 = v383;
                    if (v383)
                    {
                      v245 = (unint64_t *)&v383->__shared_owners_;
                      do
                        v246 = __ldxr(v245);
                      while (__stxr(v246 + 1, v245));
                    }
                    v247 = *(std::__shared_weak_count **)(v242 + 40);
                    *(_QWORD *)(v242 + 32) = v244;
                    *(_QWORD *)(v242 + 40) = v243;
                    if (v247)
                    {
                      v248 = (unint64_t *)&v247->__shared_owners_;
                      do
                        v249 = __ldaxr(v248);
                      while (__stlxr(v249 - 1, v248));
                      if (!v249)
                      {
                        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                        std::__shared_weak_count::__release_weak(v247);
                      }
                    }
                    v250 = v383;
                    if (v383)
                    {
                      v251 = (unint64_t *)&v383->__shared_owners_;
                      do
                        v252 = __ldaxr(v251);
                      while (__stlxr(v252 - 1, v251));
                      if (!v252)
                      {
                        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                        std::__shared_weak_count::__release_weak(v250);
                      }
                    }
                    v253 = v385;
                    if (v385)
                    {
                      v254 = (unint64_t *)&v385->__shared_owners_;
                      do
                        v255 = __ldaxr(v254);
                      while (__stlxr(v255 - 1, v254));
                      if (!v255)
                      {
                        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                        std::__shared_weak_count::__release_weak(v253);
                      }
                    }
                    if ((v225 & 1) != 0)
                      goto LABEL_452;
                  }
                  else if (((*(uint64_t (**)(_QWORD *, _DWORD *, unint64_t, _QWORD *, _QWORD, _QWORD, BOOL, uint64_t, float, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, void **, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v420 + 16))(v420, v20, v371, v66, v405, v404, v73 != 0, 1, 0.0, 0, 0, 0, 0, 0, 0, v390, 1, v356, v357,
                               v358,
                               v359,
                               v360,
                               v361,
                               v362,
                               v363,
                               v364) & 1) != 0)
                  {
                    goto LABEL_452;
                  }
                  goto LABEL_352;
                }
                v74 = *(uint64_t **)(a1 + 152);
                v75 = (uint64_t)v420;
                v76 = (int8x8_t)v74[1];
                if (!*(_QWORD *)&v76)
                {
                  *(_QWORD *)&v407[8] = 0;
                  *(_QWORD *)v407 = 0;
                  v379 = 0;
                  *(_QWORD *)&v380 = 0;
                  v388 = 0;
                  v389 = 0;
                  v386 = 0;
                  v387 = 0;
                  goto LABEL_431;
                }
                v77 = (uint8x8_t)vcnt_s8(v76);
                v77.i16[0] = vaddlv_u8(v77);
                if (v77.u32[0] >= 2uLL)
                {
                  v78 = v405;
                  if (v405 >= *(_QWORD *)&v76)
                    v78 = v405 % *(_QWORD *)&v76;
                }
                else
                {
                  v78 = (*(_QWORD *)&v76 - 1) & v405;
                }
                v271 = *v74;
                v272 = *(std::__shared_weak_count **)(*v74 + 8 * v78);
                if (v272)
                {
                  v272 = (std::__shared_weak_count *)v272->__vftable;
                  if (v272)
                  {
                    if (v77.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        shared_owners = v272->__shared_owners_;
                        if (shared_owners == v405)
                        {
                          if (v272->__shared_weak_owners_ == v405)
                            goto LABEL_393;
                        }
                        else if ((shared_owners & (*(_QWORD *)&v76 - 1)) != v78)
                        {
                          goto LABEL_392;
                        }
                        v272 = (std::__shared_weak_count *)v272->__vftable;
                        if (!v272)
                          goto LABEL_393;
                      }
                    }
                    do
                    {
                      v273 = v272->__shared_owners_;
                      if (v273 == v405)
                      {
                        if (v272->__shared_weak_owners_ == v405)
                          break;
                      }
                      else
                      {
                        if (v273 >= *(_QWORD *)&v76)
                          v273 %= *(_QWORD *)&v76;
                        if (v273 != v78)
                        {
LABEL_392:
                          v272 = 0;
                          break;
                        }
                      }
                      v272 = (std::__shared_weak_count *)v272->__vftable;
                    }
                    while (v272);
                  }
                }
LABEL_393:
                if (v77.u32[0] >= 2uLL)
                {
                  v275 = v404;
                  if (v404 >= *(_QWORD *)&v76)
                    v275 = v404 % *(_QWORD *)&v76;
                }
                else
                {
                  v275 = v404 & (*(_QWORD *)&v76 - 1);
                }
                v276 = *(std::__shared_weak_count **)(v271 + 8 * v275);
                if (v276)
                {
                  v276 = (std::__shared_weak_count *)v276->__vftable;
                  if (v276)
                  {
                    if (v77.u32[0] < 2uLL)
                    {
                      v277 = *(_QWORD *)&v76 - 1;
                      while (1)
                      {
                        v279 = v276->__shared_owners_;
                        if (v279 == v404)
                        {
                          if (v276->__shared_weak_owners_ == v404)
                            goto LABEL_413;
                        }
                        else if ((v279 & v277) != v275)
                        {
                          goto LABEL_412;
                        }
                        v276 = (std::__shared_weak_count *)v276->__vftable;
                        if (!v276)
                          goto LABEL_413;
                      }
                    }
                    do
                    {
                      v278 = v276->__shared_owners_;
                      if (v278 == v404)
                      {
                        if (v276->__shared_weak_owners_ == v404)
                          break;
                      }
                      else
                      {
                        if (v278 >= *(_QWORD *)&v76)
                          v278 %= *(_QWORD *)&v76;
                        if (v278 != v275)
                        {
LABEL_412:
                          v276 = 0;
                          break;
                        }
                      }
                      v276 = (std::__shared_weak_count *)v276->__vftable;
                    }
                    while (v276);
                  }
                }
LABEL_413:
                *(_QWORD *)&v407[8] = 0;
                *(_QWORD *)v407 = 0;
                v379 = 0;
                *(_QWORD *)&v380 = 0;
                if (v272)
                {
                  v280 = (uint64_t)v272[1].__vftable;
                  v272 = (std::__shared_weak_count *)v272[1].__shared_owners_;
                  if (v272)
                  {
                    v281 = (unint64_t *)&v272->__shared_owners_;
                    do
                      v282 = __ldxr(v281);
                    while (__stxr(v282 + 1, v281));
                  }
                  *(_QWORD *)v407 = v280;
                  *(_QWORD *)&v407[8] = v272;
                  if (v276)
                  {
LABEL_418:
                    v283 = (uint64_t (**)())v276[1].__vftable;
                    v276 = (std::__shared_weak_count *)v276[1].__shared_owners_;
                    if (v276)
                    {
                      v284 = (unint64_t *)&v276->__shared_owners_;
                      do
                        v285 = __ldxr(v284);
                      while (__stxr(v285 + 1, v284));
                    }
                    v379 = v283;
                    *(_QWORD *)&v380 = v276;
                    v388 = v280;
                    v389 = v272;
                    if (!v272)
                    {
LABEL_428:
                      v386 = v283;
                      v387 = v276;
                      if (v276)
                      {
                        v288 = (unint64_t *)&v276->__shared_owners_;
                        do
                          v289 = __ldxr(v288);
                        while (__stxr(v289 + 1, v288));
                      }
LABEL_431:
                      v356 = 1;
                      v290 = sub_23942E114(v75, (uint64_t)v20, v371, &v388, (uint64_t *)&v386, v66);
                      v291 = v387;
                      if (v387)
                      {
                        v292 = (unint64_t *)&v387->__shared_owners_;
                        do
                          v293 = __ldaxr(v292);
                        while (__stlxr(v293 - 1, v292));
                        if (!v293)
                        {
                          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                          std::__shared_weak_count::__release_weak(v291);
                        }
                      }
                      v294 = v389;
                      if (v389)
                      {
                        v295 = (unint64_t *)&v389->__shared_owners_;
                        do
                          v296 = __ldaxr(v295);
                        while (__stlxr(v296 - 1, v295));
                        if (!v296)
                        {
                          ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
                          std::__shared_weak_count::__release_weak(v294);
                        }
                      }
                      v297 = (std::__shared_weak_count *)v380;
                      if ((_QWORD)v380)
                      {
                        v298 = (unint64_t *)(v380 + 8);
                        do
                          v299 = __ldaxr(v298);
                        while (__stlxr(v299 - 1, v298));
                        if (!v299)
                        {
                          ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                          std::__shared_weak_count::__release_weak(v297);
                        }
                      }
                      v300 = *(std::__shared_weak_count **)&v407[8];
                      if (*(_QWORD *)&v407[8])
                      {
                        v301 = (unint64_t *)(*(_QWORD *)&v407[8] + 8);
                        do
                          v302 = __ldaxr(v301);
                        while (__stlxr(v302 - 1, v301));
                        if (!v302)
                        {
                          ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                          std::__shared_weak_count::__release_weak(v300);
                        }
                      }
                      if ((v290 & 1) != 0)
                      {
LABEL_452:
                        kdebug_trace();
                        sub_239470E7C(*(unsigned int **)(a1 + 120), &v393);
                        sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
                        v303 = *(_OWORD *)v407;
                        *(_QWORD *)&v407[8] = 0;
                        *(_QWORD *)v407 = 0;
                        v304 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
                        v422 = v303;
                        if (v304)
                        {
                          v305 = (unint64_t *)&v304->__shared_owners_;
                          do
                            v306 = __ldaxr(v305);
                          while (__stlxr(v306 - 1, v305));
                          if (!v306)
                          {
                            ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                            std::__shared_weak_count::__release_weak(v304);
                          }
                        }
                        v423 = v407[16];
                        v178 = *(std::__shared_weak_count **)&v407[8];
                        if (*(_QWORD *)&v407[8])
                        {
                          v307 = (unint64_t *)(*(_QWORD *)&v407[8] + 8);
                          do
                            v180 = __ldaxr(v307);
                          while (__stlxr(v180 - 1, v307));
                          goto LABEL_252;
                        }
                        goto LABEL_255;
                      }
LABEL_352:
                      v256 = *(_BYTE **)(a1 + 64);
                      if (v256[8])
                      {
                        sub_2394202DC((_QWORD *)(*(_QWORD *)v256 + 192), 3503);
                        v257 = __p[0];
                        if (__p[0])
                        {
                          do
                          {
                            sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 64) + 192), v257[4]);
                            v257 = *(_DWORD **)v257;
                          }
                          while (v257);
                        }
                      }
                      sub_239470E7C(*(unsigned int **)(a1 + 120), &v393);
                      sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
                      v258 = *(_OWORD *)v407;
                      *(_QWORD *)&v407[8] = 0;
                      *(_QWORD *)v407 = 0;
                      v259 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
                      v422 = v258;
                      if (v259)
                      {
                        v260 = (unint64_t *)&v259->__shared_owners_;
                        do
                          v261 = __ldaxr(v260);
                        while (__stlxr(v261 - 1, v260));
                        if (!v261)
                        {
                          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                          std::__shared_weak_count::__release_weak(v259);
                        }
                      }
                      v423 = v407[16];
                      v178 = *(std::__shared_weak_count **)&v407[8];
                      if (*(_QWORD *)&v407[8])
                      {
                        v262 = (unint64_t *)(*(_QWORD *)&v407[8] + 8);
                        do
                          v180 = __ldaxr(v262);
                        while (__stlxr(v180 - 1, v262));
                        goto LABEL_252;
                      }
                      goto LABEL_255;
                    }
LABEL_425:
                    v286 = (unint64_t *)&v272->__shared_owners_;
                    do
                      v287 = __ldxr(v286);
                    while (__stxr(v287 + 1, v286));
                    v276 = (std::__shared_weak_count *)v380;
                    goto LABEL_428;
                  }
                }
                else
                {
                  v280 = 0;
                  if (v276)
                    goto LABEL_418;
                }
                v283 = 0;
                v388 = v280;
                v389 = v272;
                if (!v272)
                  goto LABEL_428;
                goto LABEL_425;
              }
LABEL_120:
              if (!**(_BYTE **)(a1 + 80))
              {
                v103 = v420;
                if (**(_BYTE **)(a1 + 88))
                {
                  v384 = 0;
                  v385 = 0;
                  v382 = 0;
                  v383 = 0;
                  v104 = (char *)operator new(0x78uLL);
                  *((_QWORD *)v104 + 1) = 0;
                  *((_QWORD *)v104 + 2) = 0;
                  *(_QWORD *)v104 = &off_250ADB7B8;
                  *(_OWORD *)(v104 + 24) = xmmword_239EC65B0;
                  *(_OWORD *)(v104 + 40) = 0u;
                  *(_OWORD *)(v104 + 56) = 0u;
                  *(_OWORD *)(v104 + 72) = 0u;
                  *(_OWORD *)(v104 + 88) = 0u;
                  *(_OWORD *)(v104 + 104) = 0u;
                  v384 = v104 + 24;
                  v385 = (std::__shared_weak_count *)v104;
                  v105 = (char *)operator new(0x78uLL);
                  v106 = (uint64_t)v66;
                  *((_QWORD *)v105 + 1) = 0;
                  *((_QWORD *)v105 + 2) = 0;
                  *(_QWORD *)v105 = &off_250ADB7B8;
                  *(_OWORD *)(v105 + 24) = xmmword_239EC65B0;
                  *(_OWORD *)(v105 + 40) = 0u;
                  *(_OWORD *)(v105 + 56) = 0u;
                  *(_OWORD *)(v105 + 72) = 0u;
                  *(_OWORD *)(v105 + 88) = 0u;
                  *(_OWORD *)(v105 + 104) = 0u;
                  v382 = v105 + 24;
                  v383 = (std::__shared_weak_count *)v105;
                  v107 = sub_239470FCC(*(_QWORD *)(a1 + 128), v405);
                  v108 = sub_239470FCC(*(_QWORD *)(a1 + 128), v404);
                  *(_QWORD *)v407 = &off_250ADB778;
                  sub_2394247FC(v406, (uint64_t)&v407[8]);
                  v379 = &off_250ADB778;
                  sub_2394247FC(v402, (uint64_t)&v380);
                  v109 = *(unsigned __int8 *)(v57 + 72);
                  v110 = v107[25];
                  v377 = v108[25];
                  v378 = v110;
                  v363 = v370;
                  v364 = v367;
                  v361 = v369;
                  v362 = v367;
                  v359 = &v377;
                  v360 = 1;
                  v358 = 1;
                  v357 = &v378;
                  v111 = sub_2394853E0(v103, (uint64_t)v407, (uint64_t)&v379, v109, (uint64_t)v384, (uint64_t)v382, v106, v405 | 0x100000000, v404, 1u, v365, v56, v366, v56, v372, v55, v368, v55);
                  v112 = nullsub_4((char *)v381 + 8);
                  v113 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
                  if (*((_QWORD *)&v380 + 1))
                  {
                    v114 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v113->__on_zero_shared)(v113, v112);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  j_nullsub_4_89(&v379);
                  v116 = nullsub_4((char *)&v409 + 4);
                  v117 = *(std::__shared_weak_count **)&v407[16];
                  if (*(_QWORD *)&v407[16])
                  {
                    v118 = (unint64_t *)(*(_QWORD *)&v407[16] + 8);
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *, __n128))v117->__on_zero_shared)(v117, v116);
                      std::__shared_weak_count::__release_weak(v117);
                    }
                  }
                  j_nullsub_4_89(v407);
                  v120 = v393;
                  v122 = (uint64_t)v384;
                  v121 = v385;
                  if (v385)
                  {
                    v123 = (unint64_t *)&v385->__shared_owners_;
                    do
                      v124 = __ldxr(v123);
                    while (__stxr(v124 + 1, v123));
                  }
                  v125 = *(std::__shared_weak_count **)(v120 + 24);
                  *(_QWORD *)(v120 + 16) = v122;
                  *(_QWORD *)(v120 + 24) = v121;
                  if (v125)
                  {
                    v126 = (unint64_t *)&v125->__shared_owners_;
                    do
                      v127 = __ldaxr(v126);
                    while (__stlxr(v127 - 1, v126));
                    if (!v127)
                    {
                      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                      std::__shared_weak_count::__release_weak(v125);
                    }
                  }
                  v128 = v393;
                  v130 = (uint64_t)v382;
                  v129 = v383;
                  if (v383)
                  {
                    v131 = (unint64_t *)&v383->__shared_owners_;
                    do
                      v132 = __ldxr(v131);
                    while (__stxr(v132 + 1, v131));
                  }
                  v133 = *(std::__shared_weak_count **)(v128 + 40);
                  *(_QWORD *)(v128 + 32) = v130;
                  *(_QWORD *)(v128 + 40) = v129;
                  if (v133)
                  {
                    v134 = (unint64_t *)&v133->__shared_owners_;
                    do
                      v135 = __ldaxr(v134);
                    while (__stlxr(v135 - 1, v134));
                    if (!v135)
                    {
                      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                      std::__shared_weak_count::__release_weak(v133);
                    }
                  }
                  v136 = v383;
                  if (!v383)
                    goto LABEL_155;
                  v137 = (unint64_t *)&v383->__shared_owners_;
                  do
                    v138 = __ldaxr(v137);
                  while (__stlxr(v138 - 1, v137));
                  if (!v138)
                  {
                    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                    std::__shared_weak_count::__release_weak(v136);
                    v139 = v385;
                    if (!v385)
                      goto LABEL_235;
                  }
                  else
                  {
LABEL_155:
                    v139 = v385;
                    if (!v385)
                      goto LABEL_235;
                  }
                  v140 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (v141)
                    goto LABEL_235;
                  goto LABEL_240;
                }
                if (((*(uint64_t (**)(_QWORD *, _DWORD *, unint64_t, _QWORD *, _QWORD, _QWORD, BOOL, _QWORD, float, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, void **, uint64_t))(*v420 + 16))(v420, v20, v371, v66, v405, v404, v73 != 0, 0, 0.0, 0, 0, 0, 0, 0, 0, v390, 1) & 1) != 0)goto LABEL_245;
LABEL_236:
                v172 = *(_BYTE **)(a1 + 64);
                if (v172[8])
                {
                  sub_2394202DC((_QWORD *)(*(_QWORD *)v172 + 192), 3503);
                  v173 = __p[0];
                  if (__p[0])
                  {
                    do
                    {
                      sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 64) + 192), v173[4]);
                      v173 = *(_DWORD **)v173;
                    }
                    while (v173);
                  }
                }
                goto LABEL_245;
              }
              v98 = (uint64_t)v420;
              v99 = *(uint64_t **)(a1 + 152);
              v100 = (int8x8_t)v99[1];
              if (!*(_QWORD *)&v100)
              {
                *(_QWORD *)&v407[8] = 0;
                *(_QWORD *)v407 = 0;
                v379 = 0;
                *(_QWORD *)&v380 = 0;
                v375 = 0;
                v376 = 0;
                v373 = 0;
                v374 = 0;
                goto LABEL_217;
              }
              v101 = (uint8x8_t)vcnt_s8(v100);
              v101.i16[0] = vaddlv_u8(v101);
              if (v101.u32[0] >= 2uLL)
              {
                v102 = v405;
                if (v405 >= *(_QWORD *)&v100)
                  v102 = v405 % *(_QWORD *)&v100;
              }
              else
              {
                v102 = (*(_QWORD *)&v100 - 1) & v405;
              }
              v142 = *v99;
              v143 = *(std::__shared_weak_count **)(*v99 + 8 * v102);
              if (v143)
              {
                v143 = (std::__shared_weak_count *)v143->__vftable;
                if (v143)
                {
                  if (v101.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v145 = v143->__shared_owners_;
                      if (v145 == v405)
                      {
                        if (v143->__shared_weak_owners_ == v405)
                          goto LABEL_179;
                      }
                      else if ((v145 & (*(_QWORD *)&v100 - 1)) != v102)
                      {
                        goto LABEL_178;
                      }
                      v143 = (std::__shared_weak_count *)v143->__vftable;
                      if (!v143)
                        goto LABEL_179;
                    }
                  }
                  do
                  {
                    v144 = v143->__shared_owners_;
                    if (v144 == v405)
                    {
                      if (v143->__shared_weak_owners_ == v405)
                        break;
                    }
                    else
                    {
                      if (v144 >= *(_QWORD *)&v100)
                        v144 %= *(_QWORD *)&v100;
                      if (v144 != v102)
                      {
LABEL_178:
                        v143 = 0;
                        break;
                      }
                    }
                    v143 = (std::__shared_weak_count *)v143->__vftable;
                  }
                  while (v143);
                }
              }
LABEL_179:
              if (v101.u32[0] >= 2uLL)
              {
                v146 = v404;
                if (v404 >= *(_QWORD *)&v100)
                  v146 = v404 % *(_QWORD *)&v100;
              }
              else
              {
                v146 = v404 & (*(_QWORD *)&v100 - 1);
              }
              v147 = *(std::__shared_weak_count **)(v142 + 8 * v146);
              if (v147)
              {
                v147 = (std::__shared_weak_count *)v147->__vftable;
                if (v147)
                {
                  if (v101.u32[0] < 2uLL)
                  {
                    v148 = *(_QWORD *)&v100 - 1;
                    while (1)
                    {
                      v150 = v147->__shared_owners_;
                      if (v150 == v404)
                      {
                        if (v147->__shared_weak_owners_ == v404)
                          goto LABEL_199;
                      }
                      else if ((v150 & v148) != v146)
                      {
                        goto LABEL_198;
                      }
                      v147 = (std::__shared_weak_count *)v147->__vftable;
                      if (!v147)
                        goto LABEL_199;
                    }
                  }
                  do
                  {
                    v149 = v147->__shared_owners_;
                    if (v149 == v404)
                    {
                      if (v147->__shared_weak_owners_ == v404)
                        break;
                    }
                    else
                    {
                      if (v149 >= *(_QWORD *)&v100)
                        v149 %= *(_QWORD *)&v100;
                      if (v149 != v146)
                      {
LABEL_198:
                        v147 = 0;
                        break;
                      }
                    }
                    v147 = (std::__shared_weak_count *)v147->__vftable;
                  }
                  while (v147);
                }
              }
LABEL_199:
              *(_QWORD *)&v407[8] = 0;
              *(_QWORD *)v407 = 0;
              v379 = 0;
              *(_QWORD *)&v380 = 0;
              if (v143)
              {
                v151 = (uint64_t)v143[1].__vftable;
                v143 = (std::__shared_weak_count *)v143[1].__shared_owners_;
                if (v143)
                {
                  v152 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v153 = __ldxr(v152);
                  while (__stxr(v153 + 1, v152));
                }
                *(_QWORD *)v407 = v151;
                *(_QWORD *)&v407[8] = v143;
                if (v147)
                {
LABEL_204:
                  v154 = (uint64_t (**)())v147[1].__vftable;
                  v147 = (std::__shared_weak_count *)v147[1].__shared_owners_;
                  if (v147)
                  {
                    v155 = (unint64_t *)&v147->__shared_owners_;
                    do
                      v156 = __ldxr(v155);
                    while (__stxr(v156 + 1, v155));
                  }
                  v379 = v154;
                  *(_QWORD *)&v380 = v147;
                  v375 = v151;
                  v376 = v143;
                  if (!v143)
                  {
LABEL_214:
                    v373 = v154;
                    v374 = v147;
                    if (v147)
                    {
                      v159 = (unint64_t *)&v147->__shared_owners_;
                      do
                        v160 = __ldxr(v159);
                      while (__stxr(v160 + 1, v159));
                    }
LABEL_217:
                    v356 = 1;
                    v111 = sub_23942E114(v98, (uint64_t)v20, v371, &v375, (uint64_t *)&v373, v66);
                    v161 = v374;
                    if (v374)
                    {
                      v162 = (unint64_t *)&v374->__shared_owners_;
                      do
                        v163 = __ldaxr(v162);
                      while (__stlxr(v163 - 1, v162));
                      if (!v163)
                      {
                        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                        std::__shared_weak_count::__release_weak(v161);
                      }
                    }
                    v164 = v376;
                    if (v376)
                    {
                      v165 = (unint64_t *)&v376->__shared_owners_;
                      do
                        v166 = __ldaxr(v165);
                      while (__stlxr(v166 - 1, v165));
                      if (!v166)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    v167 = (std::__shared_weak_count *)v380;
                    if ((_QWORD)v380)
                    {
                      v168 = (unint64_t *)(v380 + 8);
                      do
                        v169 = __ldaxr(v168);
                      while (__stlxr(v169 - 1, v168));
                      if (!v169)
                      {
                        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                        std::__shared_weak_count::__release_weak(v167);
                        v139 = *(std::__shared_weak_count **)&v407[8];
                        if (*(_QWORD *)&v407[8])
                          goto LABEL_232;
                        goto LABEL_235;
                      }
                    }
                    v139 = *(std::__shared_weak_count **)&v407[8];
                    if (!*(_QWORD *)&v407[8])
                      goto LABEL_235;
LABEL_232:
                    v170 = (unint64_t *)&v139->__shared_owners_;
                    do
                      v171 = __ldaxr(v170);
                    while (__stlxr(v171 - 1, v170));
                    if (v171)
                    {
LABEL_235:
                      if ((v111 & 1) == 0)
                        goto LABEL_236;
LABEL_245:
                      sub_239470E7C(*(unsigned int **)(a1 + 120), &v393);
                      sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
                      v174 = *(_OWORD *)v407;
                      *(_QWORD *)&v407[8] = 0;
                      *(_QWORD *)v407 = 0;
                      v175 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
                      v422 = v174;
                      if (!v175)
                        goto LABEL_249;
                      v176 = (unint64_t *)&v175->__shared_owners_;
                      do
                        v177 = __ldaxr(v176);
                      while (__stlxr(v177 - 1, v176));
                      if (!v177)
                      {
                        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                        std::__shared_weak_count::__release_weak(v175);
                        v423 = v407[16];
                        v178 = *(std::__shared_weak_count **)&v407[8];
                        if (!*(_QWORD *)&v407[8])
                          goto LABEL_255;
                      }
                      else
                      {
LABEL_249:
                        v423 = v407[16];
                        v178 = *(std::__shared_weak_count **)&v407[8];
                        if (!*(_QWORD *)&v407[8])
                          goto LABEL_255;
                      }
                      v179 = (unint64_t *)&v178->__shared_owners_;
                      do
                        v180 = __ldaxr(v179);
                      while (__stlxr(v180 - 1, v179));
LABEL_252:
                      if (!v180)
                      {
                        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                        std::__shared_weak_count::__release_weak(v178);
                      }
LABEL_255:
                      v181 = __p[0];
                      if (__p[0])
                      {
                        do
                        {
                          v182 = (_QWORD *)*v181;
                          operator delete(v181);
                          v181 = v182;
                        }
                        while (v182);
                      }
                      v183 = v390[0];
                      v390[0] = 0;
                      if (v183)
                        operator delete(v183);
                      goto LABEL_259;
                    }
LABEL_240:
                    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                    std::__shared_weak_count::__release_weak(v139);
                    if ((v111 & 1) != 0)
                      goto LABEL_245;
                    goto LABEL_236;
                  }
LABEL_211:
                  v157 = (unint64_t *)&v143->__shared_owners_;
                  do
                    v158 = __ldxr(v157);
                  while (__stxr(v158 + 1, v157));
                  v147 = (std::__shared_weak_count *)v380;
                  goto LABEL_214;
                }
              }
              else
              {
                v151 = 0;
                if (v147)
                  goto LABEL_204;
              }
              v154 = 0;
              v375 = v151;
              v376 = v143;
              if (!v143)
                goto LABEL_214;
              goto LABEL_211;
            }
            v79 = *(_BYTE **)(a1 + 64);
            if (v79[8])
              sub_2394202DC((_QWORD *)(*(_QWORD *)v79 + 192), 3502);
            sub_239470E7C(*(unsigned int **)(a1 + 120), &v393);
            sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
            v80 = *(_OWORD *)v407;
            *(_QWORD *)&v407[8] = 0;
            *(_QWORD *)v407 = 0;
            v81 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
            v422 = v80;
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v423 = v407[16];
            v84 = *(std::__shared_weak_count **)&v407[8];
            if (*(_QWORD *)&v407[8])
            {
              v85 = (unint64_t *)(*(_QWORD *)&v407[8] + 8);
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              goto LABEL_113;
            }
          }
          else
          {
            sub_239470E7C(*(unsigned int **)(a1 + 120), &v393);
            sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
            v92 = *(_OWORD *)v407;
            *(_QWORD *)&v407[8] = 0;
            *(_QWORD *)v407 = 0;
            v93 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
            v422 = v92;
            if (v93)
            {
              v94 = (unint64_t *)&v93->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            v423 = v407[16];
            v84 = *(std::__shared_weak_count **)&v407[8];
            if (*(_QWORD *)&v407[8])
            {
              v96 = (unint64_t *)(*(_QWORD *)&v407[8] + 8);
              do
                v86 = __ldaxr(v96);
              while (__stlxr(v86 - 1, v96));
              goto LABEL_113;
            }
          }
        }
        else
        {
          sub_239470E7C(*(unsigned int **)(a1 + 120), &v393);
          sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
          v87 = *(_OWORD *)v407;
          *(_QWORD *)&v407[8] = 0;
          *(_QWORD *)v407 = 0;
          v88 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
          v422 = v87;
          if (v88)
          {
            v89 = (unint64_t *)&v88->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v423 = v407[16];
          v84 = *(std::__shared_weak_count **)&v407[8];
          if (*(_QWORD *)&v407[8])
          {
            v91 = (unint64_t *)(*(_QWORD *)&v407[8] + 8);
            do
              v86 = __ldaxr(v91);
            while (__stlxr(v86 - 1, v91));
LABEL_113:
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
LABEL_259:
        v184 = (std::__shared_weak_count *)*((_QWORD *)&v393 + 1);
        if (!*((_QWORD *)&v393 + 1))
          goto LABEL_263;
        v185 = (unint64_t *)(*((_QWORD *)&v393 + 1) + 8);
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
          v187 = v395;
          if (!v395)
            goto LABEL_269;
        }
        else
        {
LABEL_263:
          v187 = v395;
          if (!v395)
            goto LABEL_269;
        }
        v188 = (unint64_t *)&v187->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
LABEL_269:
        v190 = v397;
        if (!v397)
          goto LABEL_273;
        v191 = (unint64_t *)&v397->__shared_owners_;
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 - 1, v191));
        if (!v192)
        {
          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
          std::__shared_weak_count::__release_weak(v190);
          v193 = v399;
          if (!v399)
            goto LABEL_279;
        }
        else
        {
LABEL_273:
          v193 = v399;
          if (!v399)
            goto LABEL_279;
        }
        v194 = (unint64_t *)&v193->__shared_owners_;
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 - 1, v194));
        if (!v195)
        {
          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
          std::__shared_weak_count::__release_weak(v193);
        }
LABEL_279:
        v196 = v401;
        if (!v401)
          goto LABEL_283;
        v197 = (unint64_t *)&v401->__shared_owners_;
        do
          v198 = __ldaxr(v197);
        while (__stlxr(v198 - 1, v197));
        if (!v198)
        {
          ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
          std::__shared_weak_count::__release_weak(v196);
          v199 = v403;
          if (!v403)
            goto LABEL_289;
        }
        else
        {
LABEL_283:
          v199 = v403;
          if (!v403)
            goto LABEL_289;
        }
        v200 = (unint64_t *)&v199->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
LABEL_289:
        v202 = (std::__shared_weak_count *)*((_QWORD *)&v406 + 1);
        if (!*((_QWORD *)&v406 + 1))
          goto LABEL_293;
        v203 = (unint64_t *)(*((_QWORD *)&v406 + 1) + 8);
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 - 1, v203));
        if (!v204)
        {
          ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
          std::__shared_weak_count::__release_weak(v202);
          v205 = v419;
          if (v419)
          {
LABEL_294:
            v206 = (unint64_t *)&v205->__shared_owners_;
            do
              v207 = __ldaxr(v206);
            while (__stlxr(v207 - 1, v206));
            if (!v207)
            {
              ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
              std::__shared_weak_count::__release_weak(v205);
            }
          }
        }
        else
        {
LABEL_293:
          v205 = v419;
          if (v419)
            goto LABEL_294;
        }
        v208 = v416;
        if (v416)
        {
          v209 = (unint64_t *)&v416->__shared_owners_;
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
        if ((_QWORD)v422)
          v15 = v423 == 0;
        else
          v15 = 1;
        if (v15)
          goto LABEL_493;
      }
      v367 = 0;
      if (v41)
      {
        v368 = v37;
        v372 = v33;
        v55 = 1;
        if (!v45)
          goto LABEL_60;
        v369 = v41;
        v370 = v45;
        v367 = 1;
      }
      v368 = v37;
      v372 = v33;
      v55 = 1;
LABEL_60:
      if (**(_BYTE **)(a1 + 112))
        goto LABEL_61;
      goto LABEL_81;
    }
    if (sub_2396FD7B0(*(_QWORD *)(a1 + 96)))
    {
LABEL_464:
      if (!v423)
      {
LABEL_465:
        v308 = *(_QWORD *)(a1 + 104);
        v407[23] = 0;
        v407[0] = 0;
        sub_2396FCC6C(v308, (uint64_t)v407);
        goto LABEL_491;
      }
      while (1)
      {
        sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
        v310 = *(_OWORD *)v407;
        *(_QWORD *)&v407[8] = 0;
        *(_QWORD *)v407 = 0;
        v311 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
        v422 = v310;
        if (!v311)
          goto LABEL_472;
        v312 = (unint64_t *)&v311->__shared_owners_;
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
          std::__shared_weak_count::__release_weak(v311);
          v309 = v407[16];
          v423 = v407[16];
          v314 = *(std::__shared_weak_count **)&v407[8];
          if (*(_QWORD *)&v407[8])
          {
LABEL_473:
            v315 = (unint64_t *)&v314->__shared_owners_;
            do
              v316 = __ldaxr(v315);
            while (__stlxr(v316 - 1, v315));
            if (!v316)
            {
              ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
              std::__shared_weak_count::__release_weak(v314);
            }
            v309 = v423;
          }
        }
        else
        {
LABEL_472:
          v309 = v407[16];
          v423 = v407[16];
          v314 = *(std::__shared_weak_count **)&v407[8];
          if (*(_QWORD *)&v407[8])
            goto LABEL_473;
        }
        if (!v309)
          goto LABEL_465;
      }
    }
    if (!v423)
    {
LABEL_490:
      v326 = *(_QWORD *)(a1 + 104);
      v407[23] = 0;
      v407[0] = 0;
      sub_2396FCC6C(v326, (uint64_t)v407);
LABEL_491:
      if ((v407[23] & 0x80000000) != 0)
        operator delete(*(void **)v407);
      goto LABEL_493;
    }
    while (1)
    {
      sub_239470AC8(*(unsigned int **)(a1 + 16), (uint64_t)v407);
      v334 = *(_OWORD *)v407;
      *(_QWORD *)&v407[8] = 0;
      *(_QWORD *)v407 = 0;
      v335 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
      v422 = v334;
      if (!v335)
        goto LABEL_510;
      v336 = (unint64_t *)&v335->__shared_owners_;
      do
        v337 = __ldaxr(v336);
      while (__stlxr(v337 - 1, v336));
      if (!v337)
      {
        ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
        std::__shared_weak_count::__release_weak(v335);
        v333 = v407[16];
        v423 = v407[16];
        v338 = *(std::__shared_weak_count **)&v407[8];
        if (*(_QWORD *)&v407[8])
        {
LABEL_511:
          v339 = (unint64_t *)&v338->__shared_owners_;
          do
            v340 = __ldaxr(v339);
          while (__stlxr(v340 - 1, v339));
          if (!v340)
          {
            ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
            std::__shared_weak_count::__release_weak(v338);
          }
          v333 = v423;
        }
      }
      else
      {
LABEL_510:
        v333 = v407[16];
        v423 = v407[16];
        v338 = *(std::__shared_weak_count **)&v407[8];
        if (*(_QWORD *)&v407[8])
          goto LABEL_511;
      }
      if (!v333)
        goto LABEL_490;
    }
  }
  if (**(_BYTE **)(a1 + 48))
  {
    sub_23946D5E0(&v415, **(_QWORD **)(a1 + 56) + 16 * *(_QWORD *)a1);
    sub_2397A9E70(&v379, (uint64_t)&v415);
    v390[0] = 0;
    v390[1] = 0;
    __p[0] = 0;
    *(_DWORD *)&v407[4] = -1082130432;
    *(_QWORD *)&v407[12] = 0x100000002;
    v409 = 0xBF80000000000002;
    v410 = 0;
    v317 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v407 = *(_DWORD *)(v317 + 80);
    v407[8] = *(_BYTE *)(v317 + 88);
    v411 = *(_BYTE *)(v317 + 96);
    v408 = *(_DWORD *)(v317 + 92);
    v407[20] = 1;
    v318 = *(int **)(a1 + 32);
    v319 = (std::__shared_weak_count *)operator new(0x30uLL);
    v319->__shared_owners_ = 0;
    v319->__shared_weak_owners_ = 0;
    v319->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC038;
    v320 = sub_23947B708(&v319[1].__vftable, *v318, (uint64_t)&v379, v317 + 56, (uint64_t)v390, 1, (uint64_t)v407);
    v321 = v421;
    v420 = v320;
    v421 = v319;
    if (v321)
    {
      v322 = (unint64_t *)&v321->__shared_owners_;
      do
        v323 = __ldaxr(v322);
      while (__stlxr(v323 - 1, v322));
      if (!v323)
      {
        ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
        std::__shared_weak_count::__release_weak(v321);
      }
    }
    v324 = (int *)v390[0];
    v325 = (int *)v390[1];
    v13 = v390[1] == v390[0];
    if (v390[1] == v390[0])
    {
      v324 = (int *)v390[1];
    }
    else if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + 8))
    {
      do
        sub_2394202DC((_QWORD *)(**(_QWORD **)(a1 + 64) + 192), *v324++);
      while (v324 != v325);
      v324 = (int *)v390[0];
    }
    if (v324)
    {
      v390[1] = v324;
      operator delete(v324);
    }
    v343 = *(std::__shared_weak_count **)&v381[0];
    if (*(_QWORD *)&v381[0])
    {
      v344 = (unint64_t *)(*(_QWORD *)&v381[0] + 8);
      do
        v345 = __ldaxr(v344);
      while (__stlxr(v345 - 1, v344));
      if (!v345)
      {
        ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
        std::__shared_weak_count::__release_weak(v343);
      }
    }
    v346 = (std::__shared_weak_count *)v380;
    if ((_QWORD)v380)
    {
      v347 = (unint64_t *)(v380 + 8);
      do
        v348 = __ldaxr(v347);
      while (__stlxr(v348 - 1, v347));
      if (!v348)
      {
        ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
        std::__shared_weak_count::__release_weak(v346);
      }
    }
    v349 = v416;
    if (v416)
    {
      v350 = (unint64_t *)&v416->__shared_owners_;
      do
        v351 = __ldaxr(v350);
      while (__stlxr(v351 - 1, v350));
      if (!v351)
      {
        ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
        std::__shared_weak_count::__release_weak(v349);
      }
    }
    goto LABEL_13;
  }
  if (**(_BYTE **)(a1 + 72))
  {
    sub_23946D5E0(v390, **(_QWORD **)(a1 + 56) + 16 * *(_QWORD *)a1);
    sub_2397A9E70(v407, (uint64_t)v390);
    v379 = 0;
    v380 = 0uLL;
    v341 = *(_QWORD *)(a1 + 8);
    LODWORD(v415) = *(_DWORD *)(v341 + 80);
    BYTE4(v415) = *(_BYTE *)(v341 + 88);
    LODWORD(v416) = *(_DWORD *)(v341 + 92);
    v342 = operator new(0x30uLL);
    v342[1] = 0;
    v342[2] = 0;
    *v342 = &off_250ADC070;
    sub_239478F9C(v342 + 3);
  }
  if (**(_BYTE **)(a1 + 80))
  {
    *(_WORD *)v407 = 1052;
    *(_QWORD *)&v407[4] = 0x3E99999A00000064;
    *(_DWORD *)&v407[12] = 500;
    *(_WORD *)&v407[16] = 257;
    v407[18] = 0;
    v352 = (float *)(*(_QWORD *)(a1 + 8) + 80);
    LOBYTE(v390[0]) = 0;
    sub_239470CC0((__int128 *)v407, v352, (char *)v390, (uint64_t *)&v379);
    sub_239470D40((uint64_t)&v420, (__int128 *)&v379);
    sub_239416DA0((uint64_t)&v379);
    goto LABEL_12;
  }
  if (**(_BYTE **)(a1 + 88))
  {
    sub_23946D5E0(&v418, **(_QWORD **)(a1 + 56) + 16 * *(_QWORD *)a1);
    sub_2397A9E70(v390, (uint64_t)&v418);
    v415 = 0;
    v416 = 0;
    v417 = 0;
    HIDWORD(v409) = -1082130432;
    v410 = 0;
    v413 = 0x3DCCCCCD00000002;
    v414 = 0x4000000001;
    *(_QWORD *)&v407[12] = 0x200000002;
    v353 = *(_QWORD *)(a1 + 8);
    v407[8] = *(_BYTE *)(v353 + 88);
    v411 = *(_BYTE *)(v353 + 96);
    v354 = *(_DWORD *)(v353 + 332);
    if (v354 < 0)
      v354 = 99999;
    v407[20] = 1;
    v412 = *(_QWORD *)(v353 + 320);
    *(_QWORD *)v407 = *(_QWORD *)(v353 + 80);
    v408 = 0x3FFF;
    LODWORD(v409) = v354;
    v380 = 0u;
    v381[0] = 0u;
    v379 = (uint64_t (**)())0xBF8000003F4CCCCDLL;
    LOBYTE(v380) = 1;
    *(_QWORD *)((char *)&v380 + 4) = 0x100000002;
    *(_QWORD *)((char *)v381 + 4) = 0xBF80000000000002;
    BYTE13(v381[0]) = 0;
    LODWORD(v381[0]) = *(_DWORD *)(v353 + 92);
    BYTE12(v380) = 1;
    v402 = 0;
    v400 = 0;
    v398 = 0;
    sub_239470DB4((uint64_t)&v402, (uint64_t)v390, v353 + 56, (uint64_t)&v415, (__int128 *)v407, (uint64_t)&v379, &v406);
    sub_239470D40((uint64_t)&v420, &v406);
    sub_239416DA0((uint64_t)&v406);
    if (v415)
    {
      v416 = (std::__shared_weak_count *)v415;
      operator delete(v415);
    }
    sub_239420490((uint64_t)v390);
    sub_239416DA0((uint64_t)&v418);
    goto LABEL_12;
  }
  v355 = *(_BYTE **)(a1 + 64);
  if (v355[8])
    sub_2394202DC((_QWORD *)(*(_QWORD *)v355 + 192), 3);
LABEL_493:
  v327 = v421;
  if (v421)
  {
    v328 = (unint64_t *)&v421->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  v330 = (std::__shared_weak_count *)*((_QWORD *)&v422 + 1);
  if (*((_QWORD *)&v422 + 1))
  {
    v331 = (unint64_t *)(*((_QWORD *)&v422 + 1) + 8);
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
}

void sub_2394707F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_239416DA0(v1 - 160);
  sub_239416DA0(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_239470AC8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v17;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)a1 + 5));
    v17 = v5;
    if (*((_QWORD *)&v5 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a1 + 2)
                                                    + ((*((_QWORD *)a1 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *((_QWORD *)a1 + 5)
                                        + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v11 = *((_QWORD *)a1 + 6) - 1;
    v12 = *((_QWORD *)a1 + 5) + 1;
    *((_QWORD *)a1 + 5) = v12;
    *((_QWORD *)a1 + 6) = v11;
    if (v12 >= 0x200)
    {
      operator delete(**((void ***)a1 + 2));
      *((_QWORD *)a1 + 2) += 8;
      v11 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 5) -= 256;
    }
    if (v11 < *a1)
      pthread_cond_signal((pthread_cond_t *)(a1 + 20));
    *(_OWORD *)a2 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      *(_BYTE *)(a2 + 16) = 1;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    else
    {
      *(_BYTE *)(a2 + 16) = 1;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 9);
      pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
      --*((_QWORD *)a1 + 9);
      if (*((_QWORD *)a1 + 6))
        goto LABEL_4;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return sub_2397A16B4(v4);
}

void sub_239470C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239416DA0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_239470CC0@<X0>(__int128 *a1@<X0>, float *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0x60uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_250ADC0A8;
  result = sub_23942DBB0((uint64_t)(v8 + 3), a1, *a3, *a2);
  *a4 = result;
  a4[1] = (uint64_t)v8;
  return result;
}

void sub_239470D28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_239470D40(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

_QWORD *sub_239470DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v13;
  _QWORD *result;
  char v16;

  v13 = operator new(0x140uLL);
  v13[1] = 0;
  v13[2] = 0;
  *v13 = &off_250ADC0E0;
  result = sub_239471298((uint64_t)&v16, (uint64_t)(v13 + 3), a1, a2, a3, a4, a5, a6);
  *a7 = v13 + 3;
  a7[1] = v13;
  return result;
}

void sub_239470E64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_239470E7C(unsigned int *a1, __int128 *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (*((_BYTE *)a1 + 56))
  {
LABEL_5:
    v6 = 0;
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 2);
  v9 = 32 * (v7 - v8) - 1;
  if (v7 == v8)
    v9 = 0;
  v10 = *((_QWORD *)a1 + 5) + v5;
  if (v9 == v10)
  {
    sub_2394714F4((uint64_t)(a1 + 2));
    v8 = *((_QWORD *)a1 + 2);
    v5 = *((_QWORD *)a1 + 6);
    v10 = v5 + *((_QWORD *)a1 + 5);
  }
  v11 = *a2;
  *(_OWORD *)(*(_QWORD *)(v8 + ((v10 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v10) = *a2;
  if (*((_QWORD *)&v11 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v5 = *((_QWORD *)a1 + 6);
  }
  *((_QWORD *)a1 + 6) = v5 + 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 32));
  v6 = 1;
LABEL_15:
  sub_2397A16B4(v4);
  return v6;
}

void sub_239470FAC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_239470FCC(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    goto LABEL_22;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v4);
  if (!v5 || (v6 = *v5) == 0)
LABEL_22:
    sub_239EBF278();
  if (v3.u32[0] < 2uLL)
  {
    v7 = v2 - 1;
    while (1)
    {
      v9 = v6[1];
      if (v9 == a2)
      {
        if (*((_DWORD *)v6 + 4) == a2)
          return v6 + 3;
      }
      else if ((v9 & v7) != v4)
      {
        goto LABEL_22;
      }
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_22;
    }
  }
  while (1)
  {
    v8 = v6[1];
    if (v8 == a2)
      break;
    if (v8 >= v2)
      v8 %= v2;
    if (v8 != v4)
      goto LABEL_22;
LABEL_11:
    v6 = (uint64_t *)*v6;
    if (!v6)
      goto LABEL_22;
  }
  if (*((_DWORD *)v6 + 4) != a2)
    goto LABEL_11;
  return v6 + 3;
}

void sub_2394710B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394710C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADBFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394710F8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239471108(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239471118(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC000;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239471148(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239471158(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239471168(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239471198(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2394711A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2394711B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC070;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2394711E8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_2394711F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC0A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239471208(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC0A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239471238(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_239471248(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239471258(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_239471288(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_239471298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v17 = 0;
  v15 = 0;
  sub_239484584(a2, (uint64_t)v18, a4, a5, a6, 1, a7, a8, (uint64_t)v16, (uint64_t)v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  result = v19;
  if (v19 == v18)
  {
    v13 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_2394713A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD *);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v6 = (va_list)v12;
  if (v12 == (_QWORD *)va)
  {
    v7 = 4;
    va_copy(v6, va);
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_6:
  sub_239EBF2A8((uint64_t *)va2, (uint64_t *)va1, (_QWORD *)(v4 - 32), (_QWORD *)(v4 - 56));
  _Unwind_Resume(a1);
}

void sub_239471404(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239471414(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239471444(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)a1[8];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)a1[6];
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)a1[6];
    if (!v6)
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_2394714F4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239471A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239471A6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239471A80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239471A98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_239471AB0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  *((_WORD *)v15 + 12) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *v15 = *v19;
LABEL_61:
      *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (prime <= v24)
        prime = v24;
      if (prime < v8)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v27 & v7;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v27 & v7));
      if (v19)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v28 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8)
        v28 %= v8;
    }
    else
    {
      v28 &= v8 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_239471DC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_239471DD8(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 176);
  sub_2397A1694((pthread_mutex_t *)(a1 + 176));
  v3 = *(unsigned __int8 *)(a1 + 56);
  sub_2397A16B4(v2);
  if (!v3)
    sub_239462F80(a1);
  sub_2397A1694(v2);
  sub_2397A16B4(v2);
  pthread_cond_destroy((pthread_cond_t *)(a1 + 80));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  sub_2397A163C(v2);
  sub_239465B20(a1 + 8);
  return a1;
}

uint64_t sub_239471E60(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  uint64_t v57;
  int v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *__p[2];
  unsigned __int8 v69;
  char v70;
  _QWORD v71[4];
  void *v72[2];
  uint64_t v73;
  char v74;
  BOOL v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  unsigned __int8 v87;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  pthread_set_qos_class_self_np(*(qos_class_t *)(*(_QWORD *)(a1 + 8) + 328), 0);
  sub_239472754(*(unsigned int **)(a1 + 16), (uint64_t)&v86);
  if (!(_QWORD)v86 || !v87)
    goto LABEL_83;
  while (!sub_2396FD7B0(*(_QWORD *)(a1 + 24)))
  {
    v5 = v86;
    v85 = 0;
    v7 = *(_QWORD *)v86;
    v84 = *(_QWORD *)(v86 + 8);
    v6 = v84;
    v85 = v7;
    v8 = (char *)operator new(0xB8uLL);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = &off_250ADC150;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_OWORD *)(v8 + 152) = 0u;
    *(_OWORD *)(v8 + 168) = 0u;
    *((_QWORD *)v8 + 3) = v7;
    *(_QWORD *)&v83 = v8 + 24;
    *((_QWORD *)&v83 + 1) = v8;
    *((_QWORD *)v8 + 4) = v6;
    *((_QWORD *)v8 + 5) = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 56) - *(_QWORD *)(v5 + 48)) >> 2);
    if (*(_QWORD *)(v5 + 16) && *(_QWORD *)(v5 + 32))
    {
      kdebug_trace();
      v9 = sub_239470FCC(*(_QWORD *)(a1 + 48), v85);
      v10 = sub_239470FCC(*(_QWORD *)(a1 + 48), v84);
      v11 = *(_QWORD *)(a1 + 56);
      v72[0] = &v85;
      if (*((_BYTE *)sub_239471AB0(v11, &v85, (uint64_t)&unk_239EC6E98, (_QWORD **)v72) + 24))
      {
        v12 = *(_QWORD *)(a1 + 56);
        v72[0] = &v84;
        v13 = *((_BYTE *)sub_239471AB0(v12, &v84, (uint64_t)&unk_239EC6E98, (_QWORD **)v72) + 24) != 0;
      }
      else
      {
        v13 = 0;
      }
      v21 = *(_QWORD *)(a1 + 56);
      v72[0] = &v85;
      v22 = *((_BYTE *)sub_239471AB0(v21, &v85, (uint64_t)&unk_239EC6E98, (_QWORD **)v72) + 25);
      if (v22)
      {
        v23 = *(_QWORD *)(a1 + 56);
        v72[0] = &v84;
        v22 = *((_BYTE *)sub_239471AB0(v23, &v84, (uint64_t)&unk_239EC6E98, (_QWORD **)v72) + 25);
        if (v22)
        {
          v22 = 0;
          if (*((_BYTE *)v9 + 236))
          {
            if (*((_BYTE *)v9 + 237) && *((_BYTE *)v10 + 236) && *((_BYTE *)v10 + 237))
            {
              if (**(_DWORD **)(a1 + 64) == -1)
              {
                v22 = 1;
              }
              else
              {
                v24 = *((_DWORD *)v9 + 49);
                v22 = (v24 & 0x80000000) == 0 && v24 == *((_DWORD *)v10 + 49);
              }
            }
          }
        }
      }
      v25 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v25 + 297))
        v26 = v22;
      else
        v26 = 0;
      v4 = *(_BYTE *)(v25 + 298) == 0;
      v82 = 0;
      *(_OWORD *)v72 = xmmword_239EC6680;
      v73 = 0x403E000000000000;
      v81 = xmmword_239EC69F0;
      v27 = *(void ***)(a1 + 80);
      if (v4)
        v22 = 0;
      v72[0] = **(void ***)(a1 + 72);
      v72[1] = *v27;
      v73 = **(_QWORD **)(a1 + 88);
      v74 = *(_BYTE *)(v5 + 72);
      v75 = v13;
      v76 = v26;
      v77 = v22;
      v78 = *(_BYTE *)(v25 + 97);
      v28 = *(_QWORD *)(v25 + 112);
      v80 = *(_DWORD *)(v25 + 132);
      v79 = *(_QWORD *)(v25 + 120);
      v29 = *(_QWORD *)(v25 + 304);
      *(_QWORD *)&v81 = v28;
      *((_QWORD *)&v81 + 1) = v29;
      if ((sub_2394393FC(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 32), (uint64_t)v9, (__int128 *)v10, (unsigned int **)(v5 + 48), (uint64_t)v72, (uint64_t)(v8 + 48), &v82) & 1) != 0)goto LABEL_62;
      *((_QWORD *)v8 + 9) = 0;
      *((_QWORD *)v8 + 7) = *((_QWORD *)v8 + 6);
      v30 = *(uint64_t **)(a1 + 96);
      if (!*((_BYTE *)v30 + 8) || !v82)
        goto LABEL_62;
      v31 = *v30;
      if (v84 >= v85)
        v32 = v85;
      else
        v32 = v84;
      if (v84 <= v85)
        v33 = v85;
      else
        v33 = v84;
      v35 = (uint64_t **)(v31 + 120);
      v34 = *(_QWORD *)(v31 + 120);
      if (!v34)
      {
        v36 = v31 + 120;
        goto LABEL_59;
      }
      while (2)
      {
        while (1)
        {
          v36 = v34;
          v37 = *(_DWORD *)(v34 + 28);
          if (v37 > v32)
            break;
          if (v37 >= v32)
          {
            v38 = *(_DWORD *)(v36 + 32);
            if (v38 > v33)
              break;
            if (v38 >= v33)
              goto LABEL_62;
          }
          v34 = *(_QWORD *)(v36 + 8);
          if (!v34)
          {
            v35 = (uint64_t **)(v36 + 8);
LABEL_59:
            v39 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v39 + 28) = v32 | ((unint64_t)v33 << 32);
            *v39 = 0;
            v39[1] = 0;
            v39[2] = v36;
            *v35 = v39;
            v40 = **(_QWORD **)(v31 + 112);
            if (v40)
            {
              *(_QWORD *)(v31 + 112) = v40;
              v39 = *v35;
            }
            sub_2394213B8(*(uint64_t **)(v31 + 120), v39);
            ++*(_QWORD *)(v31 + 128);
LABEL_62:
            v41 = *(_QWORD *)(a1 + 32);
            v70 = 0;
            LOBYTE(__p[0]) = 0;
            sub_2396FD394(v71, v41, (__int128 *)__p);
            if (v70 < 0)
              operator delete(__p[0]);
            kdebug_trace();
            sub_23947294C(*(unsigned int **)(a1 + 40), &v83);
            sub_239472754(*(unsigned int **)(a1 + 16), (uint64_t)__p);
            v42 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            v43 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
            v86 = v42;
            if (!v43)
              goto LABEL_68;
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
              v87 = v69;
              v46 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
              {
LABEL_69:
                v47 = (unint64_t *)&v46->__shared_owners_;
                do
                  v48 = __ldaxr(v47);
                while (__stlxr(v48 - 1, v47));
                if (!v48)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
            }
            else
            {
LABEL_68:
              v87 = v69;
              v46 = (std::__shared_weak_count *)__p[1];
              if (__p[1])
                goto LABEL_69;
            }
            sub_2396FD3E8((uint64_t)v71);
            goto LABEL_75;
          }
        }
        v34 = *(_QWORD *)v36;
        v35 = (uint64_t **)v36;
        if (!*(_QWORD *)v36)
          goto LABEL_59;
        continue;
      }
    }
    sub_23947294C(*(unsigned int **)(a1 + 40), &v83);
    sub_239472754(*(unsigned int **)(a1 + 16), (uint64_t)v72);
    v14 = *(_OWORD *)v72;
    v72[0] = 0;
    v72[1] = 0;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
    v86 = v14;
    if (!v15)
      goto LABEL_17;
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      v87 = v73;
      v18 = (std::__shared_weak_count *)v72[1];
      if (!v72[1])
        goto LABEL_75;
    }
    else
    {
LABEL_17:
      v87 = v73;
      v18 = (std::__shared_weak_count *)v72[1];
      if (!v72[1])
        goto LABEL_75;
    }
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
LABEL_75:
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if ((_QWORD)v86)
      v4 = v87 == 0;
    else
      v4 = 1;
    if (v4)
      goto LABEL_83;
  }
  if (v87)
  {
    do
    {
      sub_239472754(*(unsigned int **)(a1 + 16), (uint64_t)v72);
      v60 = *(_OWORD *)v72;
      v72[0] = 0;
      v72[1] = 0;
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
      v86 = v60;
      if (!v61)
        goto LABEL_99;
      v62 = (unint64_t *)&v61->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
        v59 = v73;
        v87 = v73;
        v64 = (std::__shared_weak_count *)v72[1];
        if (v72[1])
        {
LABEL_100:
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          v59 = v87;
        }
      }
      else
      {
LABEL_99:
        v59 = v73;
        v87 = v73;
        v64 = (std::__shared_weak_count *)v72[1];
        if (v72[1])
          goto LABEL_100;
      }
    }
    while (v59);
  }
  v52 = *(_QWORD *)(a1 + 32);
  HIBYTE(v73) = 0;
  LOBYTE(v72[0]) = 0;
  sub_2396FCC6C(v52, (uint64_t)v72);
  if (SHIBYTE(v73) < 0)
    operator delete(v72[0]);
LABEL_83:
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (a1)
  {
    v56 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v56)
    {
      v57 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v57, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0xF0C40B814DA2BLL);
  }
  return 0;
}

void sub_2394725DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;

  if (a31 < 0)
    operator delete(__p);
  v33 = *(std::__shared_weak_count **)(v31 - 120);
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  sub_2394726EC(&a14);
  _Unwind_Resume(a1);
}

uint64_t **sub_2394726EC(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0xF0C40B814DA2BLL);
  }
  return a1;
}

uint64_t sub_239472754@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v17;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)a1 + 5));
    v17 = v5;
    if (*((_QWORD *)&v5 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a1 + 2)
                                                    + ((*((_QWORD *)a1 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *((_QWORD *)a1 + 5)
                                        + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v11 = *((_QWORD *)a1 + 6) - 1;
    v12 = *((_QWORD *)a1 + 5) + 1;
    *((_QWORD *)a1 + 5) = v12;
    *((_QWORD *)a1 + 6) = v11;
    if (v12 >= 0x200)
    {
      operator delete(**((void ***)a1 + 2));
      *((_QWORD *)a1 + 2) += 8;
      v11 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 5) -= 256;
    }
    if (v11 < *a1)
      pthread_cond_signal((pthread_cond_t *)(a1 + 20));
    *(_OWORD *)a2 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      *(_BYTE *)(a2 + 16) = 1;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    else
    {
      *(_BYTE *)(a2 + 16) = 1;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 9);
      pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
      --*((_QWORD *)a1 + 9);
      if (*((_QWORD *)a1 + 6))
        goto LABEL_4;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return sub_2397A16B4(v4);
}

void sub_239472920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239416DA0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_23947294C(unsigned int *a1, __int128 *a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  v5 = *((_QWORD *)a1 + 6);
  if (v5 >= *a1)
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 8);
      pthread_cond_wait((pthread_cond_t *)(a1 + 20), v4);
      --*((_QWORD *)a1 + 8);
      v5 = *((_QWORD *)a1 + 6);
      if (v5 < *a1)
        goto LABEL_4;
    }
    goto LABEL_5;
  }
LABEL_4:
  if (*((_BYTE *)a1 + 56))
  {
LABEL_5:
    v6 = 0;
    goto LABEL_15;
  }
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 2);
  v9 = 32 * (v7 - v8) - 1;
  if (v7 == v8)
    v9 = 0;
  v10 = *((_QWORD *)a1 + 5) + v5;
  if (v9 == v10)
  {
    sub_239472AF8((uint64_t)(a1 + 2));
    v8 = *((_QWORD *)a1 + 2);
    v5 = *((_QWORD *)a1 + 6);
    v10 = v5 + *((_QWORD *)a1 + 5);
  }
  v11 = *a2;
  *(_OWORD *)(*(_QWORD *)(v8 + ((v10 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v10) = *a2;
  if (*((_QWORD *)&v11 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v5 = *((_QWORD *)a1 + 6);
  }
  *((_QWORD *)a1 + 6) = v5 + 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 32));
  v6 = 1;
LABEL_15:
  sub_2397A16B4(v4);
  return v6;
}

void sub_239472A7C(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;

  sub_2397A16B4(v1);
  _Unwind_Resume(a1);
}

void sub_239472A9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_239472AAC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADC150;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_239472ADC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_239472AF8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239473054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239473070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239473084(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23947309C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2394730B4(const void **a1)
{
  const void **v1;
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  BOOL v4;
  uint32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  int8x8_t v33;
  uint8x8_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int8x8_t v42;
  int32x2_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  char *v56;
  char *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  char *v60;
  uint64_t **v61;
  uint64_t *v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  const void *v101;
  uint64_t v102;
  int v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const void **v112;
  uint32x2_t v113;
  uint64x2_t v114;
  char *v116;
  std::__shared_weak_count *v117;
  _BYTE __p[24];
  __int128 v119;
  unint64_t v120;
  __int128 v121;
  unsigned __int8 v122;
  unsigned int v123;

  v1 = a1;
  v2 = std::__thread_local_data();
  v3 = *v1;
  *v1 = 0;
  pthread_setspecific(v2->__key_, v3);
  pthread_set_qos_class_self_np(*((qos_class_t *)v1[1] + 82), 0);
  sub_239473D28((unsigned int *)v1[2], (uint64_t)&v121);
  if (!(_QWORD)v121 || !v122)
    goto LABEL_155;
  v112 = v1;
LABEL_8:
  if (!sub_2396FD7B0((uint64_t)v1[3]))
  {
    v5 = (uint32x2_t *)v121;
    v120 = 0;
    v6 = *(_QWORD *)(v121 + 8);
    v120 = *(_QWORD *)v121;
    v7 = *(_QWORD *)(v121 + 16);
    kdebug_trace();
    v8 = (uint64_t)v1[5];
    *(_QWORD *)__p = v120;
    *(_OWORD *)&__p[8] = 0u;
    v119 = 0u;
    v9 = sub_239474328(v8, (unint64_t *)__p, (uint64_t)__p);
    ++*((_QWORD *)v9 + 3);
    v113 = v5[6];
    v10 = (uint64_t)v1[6];
    *(_QWORD *)__p = v120;
    *(_QWORD *)&__p[16] = 0;
    *(_QWORD *)&v119 = 0;
    *(_QWORD *)&__p[8] = 0;
    v11 = sub_239474658(v10, (unint64_t *)__p, (uint64_t)__p);
    if (*(_QWORD *)&__p[8])
    {
      *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
      operator delete(*(void **)&__p[8]);
    }
    if (!*(_QWORD *)&v113)
      goto LABEL_34;
    v13 = (char *)*((_QWORD *)v11 + 4);
    v12 = *((_QWORD *)v11 + 5);
    if ((unint64_t)v13 < v12)
    {
      *(_QWORD *)v13 = v6;
      v14 = (uint64_t)(v13 + 8);
LABEL_33:
      *((_QWORD *)v11 + 4) = v14;
      *((_QWORD *)v9 + 4) += v7;
      *(uint64x2_t *)(v9 + 40) = vaddw_u32(*(uint64x2_t *)(v9 + 40), v113);
      v1 = v112;
      sub_239473F20(*(_QWORD **)v112[7], v120, v6, (uint64_t)&v5[3]);
LABEL_34:
      v32 = v1[8];
      v33 = (int8x8_t)v32[1];
      if (!*(_QWORD *)&v33)
        goto LABEL_178;
      v34 = (uint8x8_t)vcnt_s8(v33);
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.u32[0] > 1uLL)
      {
        v35 = v120;
        if (v120 >= *(_QWORD *)&v33)
          v35 = v120 % *(_QWORD *)&v33;
      }
      else
      {
        v35 = (*(_QWORD *)&v33 - 1) & v120;
      }
      v36 = *(_QWORD **)(*v32 + 8 * v35);
      if (!v36 || (v37 = (_QWORD *)*v36) == 0)
LABEL_178:
        sub_23941D898("unordered_map::at: key not found");
      if (v34.u32[0] < 2uLL)
      {
        v38 = *(_QWORD *)&v33 - 1;
        while (1)
        {
          v40 = v37[1];
          if (v40 == v120)
          {
            if (v37[2] == v120)
              goto LABEL_54;
          }
          else if ((v40 & v38) != v35)
          {
            goto LABEL_178;
          }
          v37 = (_QWORD *)*v37;
          if (!v37)
            goto LABEL_178;
        }
      }
      while (1)
      {
        v39 = v37[1];
        if (v39 == v120)
        {
          if (v37[2] == v120)
          {
LABEL_54:
            if (*((_QWORD *)v9 + 3) != v37[3])
              goto LABEL_140;
            v41 = v1[6];
            v42 = (int8x8_t)v41[1];
            if (!*(_QWORD *)&v42)
              goto LABEL_179;
            v43 = (int32x2_t)vcnt_s8(v42);
            v43.i16[0] = vaddlv_u8((uint8x8_t)v43);
            if (v43.u32[0] > 1uLL)
            {
              v44 = v120;
              if (v120 >= *(_QWORD *)&v42)
                v44 = v120 % *(_QWORD *)&v42;
            }
            else
            {
              v44 = (*(_QWORD *)&v42 - 1) & v120;
            }
            v45 = *(_QWORD **)(*v41 + 8 * v44);
            if (!v45 || (v46 = (_QWORD *)*v45) == 0)
LABEL_179:
              sub_23941D898("unordered_map::at: key not found");
            if (v43.u32[0] < 2uLL)
            {
              v47 = *(_QWORD *)&v42 - 1;
              while (1)
              {
                v49 = v46[1];
                if (v49 == v120)
                {
                  if (v46[2] == v120)
                    goto LABEL_75;
                }
                else if ((v49 & v47) != v44)
                {
                  goto LABEL_179;
                }
                v46 = (_QWORD *)*v46;
                if (!v46)
                  goto LABEL_179;
              }
            }
            while (2)
            {
              v48 = v46[1];
              if (v48 != v120)
              {
                if (v48 >= *(_QWORD *)&v42)
                  v48 %= *(_QWORD *)&v42;
                if (v48 != v44)
                  goto LABEL_179;
LABEL_65:
                v46 = (_QWORD *)*v46;
                if (!v46)
                  goto LABEL_179;
                continue;
              }
              break;
            }
            if (v46[2] != v120)
              goto LABEL_65;
LABEL_75:
            v50 = v1[9];
            if (v50[8])
            {
              v52 = v46[3];
              v51 = v46[4];
              v53 = (v51 - v52) >> 3;
              if (v51 == v52)
              {
                v114 = 0u;
                v54 = 0.0;
              }
              else
              {
                *(float *)v43.i32 = (float)(unint64_t)v53;
                v114 = vcvtq_u64_f64(vcvtq_f64_f32(vdiv_f32(vcvt_f32_f64(vcvtq_f64_u64(*((uint64x2_t *)v9 + 2))), (float32x2_t)vdup_lane_s32(v43, 0))));
                v54 = (float)*((unint64_t *)v9 + 6) / (float)(unint64_t)v53;
              }
              v55 = *(_QWORD *)v50 + 136;
              *(_QWORD *)__p = &v120;
              v56 = sub_239475234(v55, &v120, (uint64_t)&unk_239EC6E98, (_QWORD **)__p);
              *((_QWORD *)v56 + 3) = v53;
              *((uint64x2_t *)v56 + 2) = v114;
              *((_QWORD *)v56 + 7) = 0;
              *((_QWORD *)v56 + 8) = 0;
              *((_QWORD *)v56 + 6) = (unint64_t)v54;
            }
            v57 = (char *)operator new(0x40uLL);
            v58 = (std::__shared_weak_count *)v57;
            *((_QWORD *)v57 + 1) = 0;
            v59 = (unint64_t *)(v57 + 8);
            *((_QWORD *)v57 + 2) = 0;
            *(_QWORD *)v57 = &off_250ADBF90;
            *(_OWORD *)(v57 + 24) = 0u;
            v60 = v57 + 24;
            *((_QWORD *)v57 + 7) = 0;
            *(_OWORD *)(v57 + 40) = 0u;
            *((_DWORD *)v57 + 14) = 1065353216;
            v61 = (uint64_t **)v1[7];
            v62 = *v61;
            v63 = (*v61)[1];
            if (!v63)
              goto LABEL_123;
            v64 = (uint8x8_t)vcnt_s8((int8x8_t)v63);
            v64.i16[0] = vaddlv_u8(v64);
            if (v64.u32[0] > 1uLL)
            {
              v65 = v120;
              if (v63 <= v120)
                v65 = v120 % v63;
            }
            else
            {
              v65 = ((_DWORD)v63 - 1) & v120;
            }
            v66 = *v62;
            v67 = *(uint64_t ***)(*v62 + 8 * v65);
            if (!v67)
              goto LABEL_123;
            v68 = *v67;
            if (!*v67)
              goto LABEL_123;
            v69 = v63 - 1;
            if (v64.u32[0] < 2uLL)
            {
              while (1)
              {
                v70 = v68[1];
                if (v70 == v120)
                {
                  if (*((_DWORD *)v68 + 4) == (_DWORD)v120)
                    goto LABEL_101;
                }
                else if ((v70 & v69) != v65)
                {
                  goto LABEL_123;
                }
                v68 = (uint64_t *)*v68;
                if (!v68)
                  goto LABEL_123;
              }
            }
            while (2)
            {
              v71 = v68[1];
              if (v71 != v120)
              {
                if (v71 >= v63)
                  v71 %= v63;
                if (v71 != v65)
                  goto LABEL_123;
                goto LABEL_95;
              }
              if (*((_DWORD *)v68 + 4) != (_DWORD)v120)
              {
LABEL_95:
                v68 = (uint64_t *)*v68;
                if (!v68)
                  goto LABEL_123;
                continue;
              }
              break;
            }
LABEL_101:
            if (v64.u32[0] > 1uLL)
            {
              v72 = v120;
              if (v63 <= v120)
                v72 = v120 % v63;
            }
            else
            {
              v72 = ((_DWORD)v63 - 1) & v120;
            }
            v73 = *(uint64_t ***)(v66 + 8 * v72);
            if (v73)
            {
              v74 = *v73;
              if (v74)
              {
                if (v64.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v75 = v74[1];
                    if (v75 == v120)
                    {
                      if (*((_DWORD *)v74 + 4) == (_DWORD)v120)
                        goto LABEL_151;
                    }
                    else if ((v75 & v69) != v72)
                    {
                      goto LABEL_120;
                    }
                    v74 = (uint64_t *)*v74;
                    if (!v74)
                      goto LABEL_120;
                  }
                }
                do
                {
                  v76 = v74[1];
                  if (v76 == v120)
                  {
                    if (*((_DWORD *)v74 + 4) == (_DWORD)v120)
                    {
LABEL_151:
                      v78 = (unint64_t)(v74 + 3) & 0xFFFFFFFFFFFFFF00;
                      v77 = ((_BYTE)v74 + 24);
                      goto LABEL_121;
                    }
                  }
                  else
                  {
                    if (v76 >= v63)
                      v76 %= v63;
                    if (v76 != v72)
                      break;
                  }
                  v74 = (uint64_t *)*v74;
                }
                while (v74);
              }
            }
LABEL_120:
            v77 = 0;
            v78 = 0;
LABEL_121:
            v123 = v120;
            *(_QWORD *)__p = &v123;
            v79 = sub_2394749E4((uint64_t)(v57 + 24), &v123, (uint64_t)&unk_239EC6E98, (_DWORD **)__p);
            if (v79 + 24 != (char *)(v78 | v77))
            {
              *((_DWORD *)v79 + 14) = *(_DWORD *)((v78 | v77) + 0x20);
              sub_239475568((_QWORD *)v79 + 3, *(uint64_t **)((v78 | v77) + 0x10), 0);
            }
LABEL_123:
            v80 = v1[10];
            if (!v80[3])
              goto LABEL_132;
            v116 = v60;
            v117 = v58;
            do
              v81 = __ldxr(v59);
            while (__stxr(v81 + 1, v59));
            v82 = v80[3];
            *(_QWORD *)__p = v120;
            if (!v82)
              sub_2394172E0();
            v83 = (*(uint64_t (**)(uint64_t, char **, _BYTE *))(*(_QWORD *)v82 + 48))(v82, &v116, __p);
            v84 = v83;
            v85 = v117;
            if (v117)
            {
              p_shared_owners = (unint64_t *)&v117->__shared_owners_;
              do
                v87 = __ldaxr(p_shared_owners);
              while (__stlxr(v87 - 1, p_shared_owners));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
                if ((v84 & 1) == 0)
                  goto LABEL_134;
LABEL_132:
                sub_239465800((uint64_t)v1[11], &v120, &v120);
                goto LABEL_136;
              }
            }
            if ((v83 & 1) != 0)
              goto LABEL_132;
LABEL_134:
            v88 = v1[9];
            if (v88[8])
              sub_2394202DC((_QWORD *)(*(_QWORD *)v88 + 192), 3504);
LABEL_136:
            sub_2394741C8(*(_QWORD **)v1[7], v120);
            do
              v89 = __ldaxr(v59);
            while (__stlxr(v89 - 1, v59));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
LABEL_140:
            kdebug_trace();
            sub_239473D28((unsigned int *)v1[2], (uint64_t)__p);
            v90 = *(_OWORD *)__p;
            *(_QWORD *)__p = 0;
            *(_QWORD *)&__p[8] = 0;
            v91 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
            v121 = v90;
            if (!v91)
              goto LABEL_144;
            v92 = (unint64_t *)&v91->__shared_owners_;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
              v122 = __p[16];
              v94 = *(std::__shared_weak_count **)&__p[8];
              if (*(_QWORD *)&__p[8])
              {
LABEL_145:
                v95 = (unint64_t *)&v94->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
            }
            else
            {
LABEL_144:
              v122 = __p[16];
              v94 = *(std::__shared_weak_count **)&__p[8];
              if (*(_QWORD *)&__p[8])
                goto LABEL_145;
            }
            if ((_QWORD)v121)
              v4 = v122 == 0;
            else
              v4 = 1;
            if (v4)
              goto LABEL_155;
            goto LABEL_8;
          }
        }
        else
        {
          if (v39 >= *(_QWORD *)&v33)
            v39 %= *(_QWORD *)&v33;
          if (v39 != v35)
            goto LABEL_178;
        }
        v37 = (_QWORD *)*v37;
        if (!v37)
          goto LABEL_178;
      }
    }
    v15 = (char *)*((_QWORD *)v11 + 3);
    v16 = (v13 - v15) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_2394189F8();
    v18 = v12 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        sub_239418A80();
      v20 = v19;
      v21 = operator new(8 * v19);
      v19 = v20;
      v22 = &v21[8 * v16];
      *v22 = v6;
      v14 = (uint64_t)(v22 + 1);
      if (v13 == v15)
        goto LABEL_31;
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v16);
      *(_QWORD *)(8 * v16) = v6;
      v14 = 8 * v16 + 8;
      if (v13 == v15)
      {
LABEL_31:
        *((_QWORD *)v11 + 3) = v22;
        *((_QWORD *)v11 + 4) = v14;
        *((_QWORD *)v11 + 5) = &v21[8 * v19];
        if (v15)
          operator delete(v15);
        goto LABEL_33;
      }
    }
    v23 = v13 - 8 - v15;
    if (v23 < 0x58)
      goto LABEL_185;
    if ((unint64_t)(v15 - v21) < 0x20)
      goto LABEL_185;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = &v13[-v25];
    v22 = (_QWORD *)((char *)v22 - v25);
    v27 = &v21[8 * v16 - 16];
    v28 = v13 - 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    v13 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_185:
      do
      {
        v31 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v22 = v31;
      }
      while (v13 != v15);
    }
    goto LABEL_31;
  }
  if (v122)
  {
    do
    {
      sub_239473D28((unsigned int *)v1[2], (uint64_t)__p);
      v105 = *(_OWORD *)__p;
      *(_QWORD *)__p = 0;
      *(_QWORD *)&__p[8] = 0;
      v106 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
      v121 = v105;
      if (!v106)
        goto LABEL_171;
      v107 = (unint64_t *)&v106->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
        v104 = __p[16];
        v122 = __p[16];
        v109 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
        {
LABEL_172:
          v110 = (unint64_t *)&v109->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
          v104 = v122;
        }
      }
      else
      {
LABEL_171:
        v104 = __p[16];
        v122 = __p[16];
        v109 = *(std::__shared_weak_count **)&__p[8];
        if (*(_QWORD *)&__p[8])
          goto LABEL_172;
      }
    }
    while (v104);
  }
  v97 = (uint64_t)v1[4];
  __p[23] = 0;
  __p[0] = 0;
  sub_2396FCC6C(v97, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_155:
  v98 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
  if (*((_QWORD *)&v121 + 1))
  {
    v99 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (a1)
  {
    v101 = *a1;
    *a1 = 0;
    if (v101)
    {
      v102 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v102, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0x60C40BC8D0343);
  }
  return 0;
}

void sub_239473B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (a22 < 0)
    operator delete(__p);
  v28 = a27;
  if (a27)
  {
    p_shared_owners = (unint64_t *)&a27->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_239473CC0(&a14);
  _Unwind_Resume(a1);
}

uint64_t **sub_239473CC0(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x60C40BC8D0343);
  }
  return a1;
}

uint64_t sub_239473D28@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v17;

  v4 = (pthread_mutex_t *)(a1 + 44);
  sub_2397A1694((pthread_mutex_t *)(a1 + 44));
  if (*((_QWORD *)a1 + 6))
  {
LABEL_4:
    v5 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 2) + ((*((_QWORD *)a1 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * *((_QWORD *)a1 + 5));
    v17 = v5;
    if (*((_QWORD *)&v5 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v8 = *(std::__shared_weak_count **)(*(_QWORD *)(*((_QWORD *)a1 + 2)
                                                    + ((*((_QWORD *)a1 + 5) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * *((_QWORD *)a1 + 5)
                                        + 8);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v11 = *((_QWORD *)a1 + 6) - 1;
    v12 = *((_QWORD *)a1 + 5) + 1;
    *((_QWORD *)a1 + 5) = v12;
    *((_QWORD *)a1 + 6) = v11;
    if (v12 >= 0x200)
    {
      operator delete(**((void ***)a1 + 2));
      *((_QWORD *)a1 + 2) += 8;
      v11 = *((_QWORD *)a1 + 6);
      *((_QWORD *)a1 + 5) -= 256;
    }
    if (v11 < *a1)
      pthread_cond_signal((pthread_cond_t *)(a1 + 20));
    *(_OWORD *)a2 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      *(_BYTE *)(a2 + 16) = 1;
      do
        v15 = __ldaxr(v13);
      while (__stlxr(v15 - 1, v13));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 16))(*((_QWORD *)&v17 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
    else
    {
      *(_BYTE *)(a2 + 16) = 1;
    }
  }
  else
  {
    while (!*((_BYTE *)a1 + 56))
    {
      ++*((_QWORD *)a1 + 9);
      pthread_cond_wait((pthread_cond_t *)(a1 + 32), v4);
      --*((_QWORD *)a1 + 9);
      if (*((_QWORD *)a1 + 6))
        goto LABEL_4;
    }
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
  }
  return sub_2397A16B4(v4);
}

void sub_239473EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pthread_mutex_t *v9;

  sub_239416DA0((uint64_t)&a9);
  sub_2397A16B4(v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_239473F20(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint8x8_t v21;
  unint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;

  v28 = a3;
  v29 = a2;
  v5 = a1[1];
  if (!v5)
    goto LABEL_21;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = a2;
    if (v5 <= a2)
      v7 = a2 % v5;
  }
  else
  {
    v7 = ((_DWORD)v5 - 1) & a2;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8 || (v9 = *v8) == 0)
  {
LABEL_21:
    v30 = &v29;
    v13 = sub_2394749E4((uint64_t)a1, &v29, (uint64_t)&unk_239EC6E98, &v30);
    v30 = &v28;
    v14 = sub_239474D88((uint64_t)(v13 + 24), &v28, (uint64_t)&unk_239EC6E98, &v30);
    result = v14 + 24;
    if (v14 + 24 == (char *)a4)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v6.u32[0] < 2uLL)
  {
    v10 = v5 - 1;
    while (1)
    {
      v12 = v9[1];
      if (v12 == a2)
      {
        if (*((_DWORD *)v9 + 4) == a2)
          goto LABEL_25;
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_21;
      }
      v9 = (uint64_t *)*v9;
      if (!v9)
        goto LABEL_21;
    }
  }
  while (1)
  {
    v11 = v9[1];
    if (v11 == a2)
      break;
    if (v11 >= v5)
      v11 %= v5;
    if (v11 != v7)
      goto LABEL_21;
LABEL_11:
    v9 = (uint64_t *)*v9;
    if (!v9)
      goto LABEL_21;
  }
  if (*((_DWORD *)v9 + 4) != a2)
    goto LABEL_11;
LABEL_25:
  result = v9 + 3;
  v20 = v9[4];
  if (v20)
  {
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      v22 = a3;
      if (v20 <= a3)
        v22 = a3 % v20;
    }
    else
    {
      v22 = ((_DWORD)v20 - 1) & a3;
    }
    v23 = *(uint64_t ***)(*result + 8 * v22);
    if (v23)
    {
      v24 = *v23;
      if (v24)
      {
        if (v21.u32[0] < 2uLL)
        {
          v25 = v20 - 1;
          while (1)
          {
            v27 = v24[1];
            if (v27 == a3)
            {
              if (*((_DWORD *)v24 + 4) == a3)
                return result;
            }
            else if ((v27 & v25) != v22)
            {
              goto LABEL_45;
            }
            v24 = (uint64_t *)*v24;
            if (!v24)
              goto LABEL_45;
          }
        }
        do
        {
          v26 = v24[1];
          if (v26 == a3)
          {
            if (*((_DWORD *)v24 + 4) == a3)
              return result;
          }
          else
          {
            if (v26 >= v20)
              v26 %= v20;
            if (v26 != v22)
              break;
          }
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
    }
  }
LABEL_45:
  v30 = &v28;
  v14 = sub_239474D88((uint64_t)result, &v28, (uint64_t)&unk_239EC6E98, &v30);
  result = v14 + 24;
  if (v14 + 24 != (char *)a4)
LABEL_22:
    result = sub_2394750BC(result, *(char **)a4, *(char **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2));
LABEL_23:
  *((_QWORD *)v14 + 6) = *(_QWORD *)(a4 + 24);
  v16 = *(_OWORD *)(a4 + 32);
  v17 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v14 + 88) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v14 + 72) = v17;
  *(_OWORD *)(v14 + 56) = v16;
  v18 = *(_OWORD *)(a4 + 80);
  v19 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v14 + 136) = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v14 + 120) = v19;
  *(_OWORD *)(v14 + 104) = v18;
  *((_DWORD *)v14 + 38) = *(_DWORD *)(a4 + 128);
  return result;
}

void sub_2394741C8(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t i;
  _QWORD *v13;
  void *v14;

  v2 = a1[1];
  if (v2)
  {
    v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v2 <= a2)
        v4 = a2 % v2;
    }
    else
    {
      v4 = ((_DWORD)v2 - 1) & a2;
    }
    v5 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v5)
    {
      v6 = *v5;
      if (*v5)
      {
        if (v3.u32[0] < 2uLL)
        {
          v7 = v2 - 1;
          while (1)
          {
            v9 = v6[1];
            if (v9 == a2)
            {
              if (*((_DWORD *)v6 + 4) == a2)
                goto LABEL_22;
            }
            else if ((v9 & v7) != v4)
            {
              return;
            }
            v6 = (uint64_t *)*v6;
            if (!v6)
              return;
          }
        }
        do
        {
          v8 = v6[1];
          if (v8 == a2)
          {
            if (*((_DWORD *)v6 + 4) == a2)
            {
LABEL_22:
              if (v6[6])
              {
                v10 = (_QWORD *)v6[5];
                if (v10)
                {
                  do
                  {
                    v13 = (_QWORD *)*v10;
                    v14 = (void *)v10[3];
                    if (v14)
                    {
                      v10[4] = v14;
                      operator delete(v14);
                    }
                    operator delete(v10);
                    v10 = v13;
                  }
                  while (v13);
                }
                v6[5] = 0;
                v11 = v6[4];
                if (v11)
                {
                  for (i = 0; i != v11; ++i)
                    *(_QWORD *)(v6[3] + 8 * i) = 0;
                }
                v6[6] = 0;
              }
              return;
            }
          }
          else
          {
            if (v8 >= v2)
              v8 %= v2;
            if (v8 != v4)
              return;
          }
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
    }
  }
}

char *sub_239474328(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  char *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return (char *)v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return (char *)v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = (char *)operator new(0x38uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v6;
  *((_QWORD *)v14 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *(_QWORD *)v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

